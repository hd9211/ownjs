<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>知乎日报</title>
            <link>https://news-at.zhihu.com/api/4/stories/latest?client=0</link>
            <description>知乎日报</description>
<item>
<guid>10b0bdad71f572ee86a5a8125f2b7a25</guid>
<title>手机计算器为什么会出现10%+10%=0.11这样明显错误的算式？</title>
<link>https://daily.zhihu.com/story/9734963</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic4.zhimg.com/v2-dc7bb319e88ebb2f07910d02bfd0ca33_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;遇见，&lt;/span&gt;&lt;span&gt;C++开发&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/343963978/answer/811054423&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;这是一个历史遗留问题，属于语法糖，叫做百分计算器。&lt;/p&gt;&lt;p&gt;按人类语义的理解，你去买东西，100 元钱减去 10%，那就是 90 元。早期的计算器就可以直接这样写 100-10%。再比如，一只股票股价 10 元，增长了 50%，可以直接写 10+50%。这么设计更深层次的原因可能与早期计算器的按键数量有限，以及单步运算的性质有关。具体有答主已经作了回答。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;手机计算器保留了这种特性&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;10%+10% 就是 0.11。&lt;/p&gt;&lt;p&gt;至于部分国内计算器结果是 0.2，是因为国内手机厂商自己做了修改，符合中国人打几折的说法。上述的 100-10% 其实是外国人的逻辑，在国外商品打 9 折叫 10% off。&lt;/p&gt;&lt;p&gt;魅族的工程师已经在微博说明他们在国内使用了 0.2 的方案，在国外使用 0.11 的方案。&lt;/p&gt;&lt;p&gt;9.7 更新：经调查各厂商的百分计算逻辑存在标准不统一的问题，复杂算式中对百分号的处理存在较大差异，具体差异已经合并写入识别条件中。&lt;/p&gt;&lt;p&gt;下面有早期计算器百分键功能的具体说明。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//devblogs.microsoft.com/oldnewthing/20080110-00/%3Fp%3D23853&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;How does the calculator percent key work? | The Old New Thing&lt;/a&gt;&lt;/p&gt;&lt;p&gt;虽然早期百分运算的用法很简单，但是如今的手机计算器可以输入连续的表达式，最后输出结果（部分手机计算器还有即时回显功能）。&lt;strong&gt;表达式计算满足优先级&lt;/strong&gt;。但是计算器中的百分号非常特殊，它的功能实际与前后的环境与算法的选择有关。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;p&gt;5+5*10+10%+5=？&lt;/p&gt;&lt;p&gt;5+（10%）=？&lt;/p&gt;&lt;p&gt;5+10%*10=？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（如果你坚信你自己的想法，你可以用你的理论去算这些式子，然后用手机计算器验证。）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;要知道这些结果，我们需要了解百分运算的识别条件。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;百分计算识别条件&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;exp1 [+-] exp2 % [+-*/] exp3&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;exp1 可以是表达式也可以是单独的数字，比如 5，5+5，5+5x5，（5+5）。&lt;/li&gt;&lt;li&gt;exp1 的值会被&lt;strong&gt;优先计算&lt;/strong&gt;，比如 5+5-10%=（5+5）x（1-10%）=9&lt;/li&gt;&lt;li&gt;exp2 可以是单独的数字或者带括号的表达式，比如 5，（5+5）。&lt;/li&gt;&lt;li&gt;如 exp2 与 exp3 之间为 [ * / ]，不同厂商有不同的处理方式。第一种会将 exp2 % [* /] exp3 作为整体计算成数值，比如 5+10%*10=6。第二种会将 exp2 % [* /] exp3 作为增长率，比如 5+10%*10=5+100%=10。&lt;/li&gt;&lt;li&gt;有关在 exp2%前后加括号的问题，即 exp1[+-]（exp2%）这种情况，&lt;strong&gt;不同计算器会有不同的处理方式，括号不一定会影响结果&lt;/strong&gt;，比如 10+（10%）可能等于 11，也可能等于 10.1。这涉及代码处理，已在最后更新。&lt;/li&gt;&lt;li&gt;实际含义：&lt;strong&gt;在满足识别条件的情况下，对之前的累计结果增长或减少一个百分比。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;要知道计算器如此工作的原因，我们可以直接从源码入手。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;源码分析：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我找了一份 Github 上计算器的源码。&lt;/p&gt;&lt;p&gt;和大多数计算器的处理方法一致，先将原表达式转化为&lt;strong&gt;后缀表达式&lt;/strong&gt;，利用数字栈和操作符栈，配合指针，从左到右扫描一次就可以得出答案。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/hoijui/arity/blob/master/src/main/java/org/javia/arity/CompiledFunction.java&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hoijui/arity&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;code&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;stackRe&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;percentPC&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;codeLen&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;opcode&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;opcode&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;CONST&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[++&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;constsRe&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;constp&lt;/span&gt;&lt;span&gt;++];&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ADD&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[--&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;percentPC&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;abs&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ulp&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;// hack for &quot;1.1-1-.1&quot;&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]=&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;SUB&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[--&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;percentPC&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;abs&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ulp&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;// hack for &quot;1.1-1-.1&quot;&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt;VM&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PERCENT&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;.01&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;percentPC&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/div&gt;&lt;p&gt;我已去除和百分运算无关的部分。&lt;/p&gt;&lt;p&gt;下面对该代码运算过程举个例子：&lt;/p&gt;&lt;div&gt;&lt;code&gt;表达式：a+b%+c 表示成后缀表达式：ab%+c+ Code 队列:[ a , b, % , + , c , +] 有个 s 栈，开始为空：[] 一共三个指针：p、pc、percentPC, 初始值分别为 -1，-1，-2。 每次遇到常数，p 自增 1，再在 s 中 p 指向的位置放入该常数。 每次遇到 +-，p 会自减 1。 每次遇到%，令 p 指向的内容乘以 0.01，percentPC=pc。 从左向右开始扫描 code，pc 为指针，右移一次 pc 增 1。 首先遇到常数 a,b,放入 s 中：[a,b] ，p 指向 b 继续扫描，遇到%，将 p 指向的内容 *0.01，s 变成：[a , b*0.01]；同时，percentPC 指向 code 中的%。 继续扫描，遇到 +,pc 此时指向的位置为 percentPC+1,由三元判断式，a=a+a*b*0.01,p 重新指向 a,s 变为[a+a*b*0.01,b*0.01] 继续扫描，c 替代 b*0.01 继续扫描，遇到 +,此时的 pc 不等于 percentPC+1，s[p]=s[0]=a+a*b*0.01+c 结束扫描，返回指针 p，s[p]就代表结果，完结。 &lt;/code&gt;&lt;/div&gt;&lt;p&gt;可以明显看出，加减法中多了一步判断：&lt;/p&gt;&lt;div&gt;&lt;code&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;percentPC&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;pc&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;本质就是查看后缀表达式 +- 之前的符号是否为 % 来执行该 +- 的操作。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果不需要该特性，只需将这一句改为：&lt;/p&gt;&lt;div&gt;&lt;code&gt;&lt;span&gt;res&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/div&gt;&lt;p&gt;另外有网友提出&lt;strong&gt;括号&lt;/strong&gt;的问题，部分计算器的后缀表达式生成时，遇到左括号“（”会将其作为一个标记插入队列。于是，a+（b%）后缀表达式会变成 a b % mark +，加号之前的符号不再是%，不再执行特殊百分比加法。也有计算器加了括号也没有用，这也很好推断，该计算器在生成后缀表达式时没有对括号作插入标记。&lt;/p&gt;&lt;p&gt;计算器的处理过程就是这么简单粗暴，也不涉及什么高深的算法。对于百分运算的特殊处理也只需多一个指针就能做到。所以你能想到了，要适应国内的习惯，只需要加一个地区判断替换语句就可以了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;个人建议&lt;/strong&gt;在使用手机计算器时，在复杂连续表达式中避免使用 +10% 这种写法，因为不同的厂商算法不同，计算逻辑也不同。尽量转化为小数或者在百分数前加基数，比如 +1x10%。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/343963978&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
<pubDate>Mon, 12 Apr 2021 23:06:59 GMT</pubDate>
</item>
<item>
<guid>dbf5cf97acc1311e51f4bbb0a19a562e</guid>
<title>上网时，为什么感觉现代人除了我全都很懂编程或计算机？</title>
<link>https://daily.zhihu.com/story/9734964</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic4.zhimg.com/v2-99b4577d42061dc5a4cfc498f22a2481_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;Serendipity，&lt;/span&gt;&lt;span&gt;星星还是要还给宇宙的&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/440751523/answer/1705204785&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;我觉得这是一个很经典的友谊悖论问题，值得来讨论一下。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;友谊悖论（Friendship Paradox）：平均来说，一个人的朋友数量往往比他朋友的朋友数量要少。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;类似的问题有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;为什么感觉网上的人除了我全都很懂编程或计算机?&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;为什么知乎上的大部分答案都比我的回答受欢迎？&lt;/li&gt;&lt;li&gt;为什么我关注的答主，粉丝都比我多？&lt;/li&gt;&lt;li&gt;为什么我 QQ 好友的好友数量比我的多？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根本原因都一样，因为这是一个统计悖论，是由于受欢迎的人 / 答案出现的频率高于不受欢迎的人 / 答案。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;知乎上的学生比较多，就拿学生来举个例子：&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;假设计算机系有 500 名学生&lt;/li&gt;&lt;li&gt;有 400 位同学每周去一次图书馆&lt;/li&gt;&lt;li&gt;有 50 位同学每周去三次图书馆&lt;/li&gt;&lt;li&gt;有 50 位同学每天都去图书馆&lt;/li&gt;&lt;li&gt;因此，计算机系一周内去图书馆的总次数为 400+50*3+50*7=900&lt;/li&gt;&lt;li&gt;有 20%的同学处于“活跃”状态，即每周去图书馆＞1 次。&lt;/li&gt;&lt;li&gt;入馆数量的 56%，即(50*3+50*7)/900，是由“活跃”同学造成的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，问题就来了，即使计算机系有 80%的同学处于“不活跃”状态，即每周到馆数量≤1，实际在图书馆的人群也将由 56%的“活跃”同学和 44%的“不活跃”同学构成。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以上讨论的会导致什么问题呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这就会导致有 80% 的人产生一个误会：有超过一般的计算机系同学（56%）比我更勤奋。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;而实际上呢？80% 的同学都和你一样——是个懒虫。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;只有 20% 的同学是图书馆活跃分子，而不是剩下 80% 的人认为的 56%。&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ed0e4132ce1501aacdb1d83ef87d276d_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;另外再举个例子，也就是友谊悖论的最初解释，请看下图：&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f67902d498a0b09593fc4661afd96aed_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;想象一下，这是一个朋友关系的列表，红线代表两个人是朋友，我们可以得到如下信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A 有 4 个朋友&lt;/li&gt;&lt;li&gt;B，C，D，G 和 H 有 1 个朋友&lt;/li&gt;&lt;li&gt;E 有 2 个朋友&lt;/li&gt;&lt;li&gt;F 有 3 个朋友&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;注意一下！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这八个人中有高达五个人，这五个人只有一个朋友（分别是 B，C，D，G 和 H）。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;也就是说，62.5% 的人是只有一个朋友的，他们不应该产生自己不受欢迎的观念。&lt;/p&gt;&lt;p&gt;但从这八个人的角度出发，实际情况是什么样呢？如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;B，C 和 D 得出结论，他们自己每个人都有 1 个朋友，而他们的朋友有 4 个。&lt;/li&gt;&lt;li&gt;G 和 H 得出结论，他们有 1，但他们的朋友有 3。&lt;/li&gt;&lt;li&gt;E 得出结论，他有 2，但他的朋友有 3 和 4&lt;/li&gt;&lt;li&gt;A 得出结论，她有 4，她的朋友有 1,1,1 和 2&lt;/li&gt;&lt;li&gt;F 得出结论，他有 3，而他的朋友有 1,1 和 2。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;在这 8 个人中，有 75％（8 个中的 6 个，BCDEGH）会得出结论，他们的朋友少于朋友的朋友。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这就是悖论背后的原理，实际上是统计的问题。&lt;/p&gt;&lt;p&gt;因此，希望答主不要自卑，因为实际上懂编程或计算机的人并没有你想象的那么多&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/440751523&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
<pubDate>Mon, 12 Apr 2021 23:06:56 GMT</pubDate>
</item>
<item>
<guid>f56e0947ba83ffefd12593856511c24b</guid>
<title>算法工程师的落地能力具体指的是什么？</title>
<link>https://daily.zhihu.com/story/9734973</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic4.zhimg.com/v2-9f4e5c9c9e3fda1b26496f2fbb2a0578_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;桔了个仔，&lt;/span&gt;&lt;span&gt;人工智能 | 数据科学 |AI风控与反洗钱 | 码农&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/304695682/answer/1720475610&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;blockquote&gt;本文约 5000 字，阅读需要 30 分钟。&lt;/blockquote&gt;&lt;p&gt;大家好，这里是桔了个仔，目前是一名 Data Scientist(不太想翻译成数据科学家，毕竟感觉自己就是个工程师），过去几年在做基于机器学习的风控与合规系统，参与了一些算是成功的项目，和团队一起，成功在几个跨国银行那里落地了我们开发的系统。&lt;/p&gt;&lt;p&gt;根据我的经历以及对身边同事的观察，我个人会把落地工程师的「落地能力」分为三个维度：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ab37ef1d660fd7355736320b9a3f2e86_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;1.技术层面&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;很多人以为算法工程师日常工作就是调下参，改个算法再跑跑，直到神经网络输出符合预期。在入行前，他们以为算法工程师的日常是这样的：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f8ba329f43d4f9397d0f82f2ffd2d427_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;图源《如何创造可信的 AI》&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;事实上，算法工程师可能涉及的技术范围是很广的。很可能是这样的&lt;sup&gt;[1]&lt;/sup&gt;：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-718d9b520f8eca7a50e3e123edc26319_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;图源：《Hidden Technical Debt in Machine Learning Systems》&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;中间那个小小的几乎都快看不见的黑块，你放大图片，会发现里面写着 ML Code，这就是「算法」的部分。当然，别被这个图吓到，这不一定全是你的工作，这里是一个团队的任务，这个团队可能是两人的团队，也可能是几十人的团队，但可以肯定的是，无论你在哪个公司，一个算法工程师都不太可能只做纯「算法」，不要忘了「工程师」三个字。对于要做产品落地的工程师，搞算法的时间很可能不到 10%，其他技术部分可能占据你 40%。要增强自己落地能力中的技术水平，除了&lt;strong&gt;算法要基础打好&lt;/strong&gt;，你还需要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;学会数据获取。原始数据需要经过 ETL 才能被算法利用。ETL（Extract, Transform, Load）是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据。也许你们公司有专职的数据工程师来做 ETL，但你如果能稍微参与到 ETL 的过程中，不仅让你在大数据技术方面得到提升，而且对你理解上游业务非常有帮助。&lt;strong&gt;ETL 工具的典型代表有:Informatica、Datastage、OWB、微软 DTS 等。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;构建特征。如果没有机会参加到 ETL 里，也没关系，我也没，毕竟客户不想给让我们接触原始数据。这时候，你也可以处理 ETL 之后的数据，从中构建特征。其实特征构建的过程能帮助你理解业务，例如给银行预测信用卡逾期风险，你了解到，债务负担率和用户风险有着一定关联，于是你会考虑把用户所有信用卡的欠款加起来除以这个用户的收入，得到一个新的特征。关于相关技术，我知道很多人肯定马上想到 pandas，但老实讲句，我做了几年数据工作，能用到 pandas 的机会真的不多。产品都要落地了，几百万条的数据马上进来了，还在玩 pandas？&lt;strong&gt;spark, hadoop, flink 等分布式计算平台赶紧给我研究起来。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;可视化数据。我相信问出来这个问题的人都知道哪些 python 库可以做可视化，例如 matplot, seaborn 等等。当然，除了 python 库，excel 里的可视化也要做好，这与算法无关，但在你做汇报时能帮助你把一个结果解释清楚。&lt;/li&gt;&lt;li&gt;会用服务器。一般数据产品部署，得上云或者私有服务器吧，那么如果你还不熟悉 linux，那就赶紧练练吧。你把系统部署到服务器时，是不太可能用鼠标拖拽个 exe 就完事的。如果你还能熟练使用 aws 等云服务，那就更好了。&lt;/li&gt;&lt;li&gt;至于 UI 层面，例如构建网页等等，开发 app 这种，这就不再推荐算法工程师学了，毕竟人的精力有限。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前面技术部分花了 10%+40% 的工作时间，然后其他 50%的时间呢？用来和客户或者产品经理沟通，然后理解业务，做 ppt，汇报结果。杂事很多，很难接受吧？没错，我刚入行时也是觉得自己一身技术无处施展，后来我上司一句话启发了我：&lt;/p&gt;&lt;blockquote&gt;技术是逻辑的艺术，业务也是，所以只搞技术不管业务的，不能算是逻辑能力出众的。&lt;/blockquote&gt;&lt;p&gt;你现在应该有疑问了，那怎么才算「懂业务」？嘿嘿，马上道来。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.业务层面&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;其实关于「懂业务」，可以分为宏观业务和微观业务两部分。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;宏观业务&lt;/strong&gt;指的是行业的「共性」。例如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;你的产品所服务的对象所在的行业都有什么「痛点」。sorry，句子有点长，而且说法也有点「老土」，但了解客户痛点永远都是必须的。例如我做金融风控，客户的痛点是「旧的专家系统规则更新慢」，而我们提供「基于机器学习的方案」，数据来了就自动更新规则，就能解决他们痛点。&lt;/li&gt;&lt;li&gt;他们这项业务目前的工作流程如何。例如我做反洗钱，那么我得了解洗钱的三个步骤，反洗钱的警报产生，警报调查等等。这些流程在不同客户之间都是一样的，我了解清楚了这些，我才能知道，我的产品是在哪个环节发挥价值。如果你做的项目是对内的，例如为自己公司电商搞推荐算法，那你必须清楚用户在你们 APP 上的路径，例如首页到搜索页再到详情页。以及在每条路径上，怎么做推荐商品，例如有的商品是推荐搭配，有的商品是推荐近似替代品。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;微观业务&lt;/strong&gt;是指不同部门 / 公司在实践上的不同。微观业务是最容易被人忽视的而且也是最辛苦的，因为大家都有不同的「知识沉淀」方式，学习起来并没有那么立竿见影。但我发现有趣的一点是，当你接触微观的业务多了，你还是能从中提取「共性」。例如某个算法工程师，之前在银行做风控，在银行获取数据流程会比较长，每个步骤要做的事情不能跳过；现在去某互联网金融公司做风控，可能获取数据流程变得很短，但是你会发现共性是，大家都有准入审查、逾期催收等环节，用到的技术可能也是相近的。&lt;/p&gt;&lt;p&gt;现在你已经掌握了各种技术，准备大干一场，准备拿最强的深度学习模型，给客户设计一款准确率非常高的产品。现在你开始学习相关业务，我建议你带着问题学习。不过，你什么都不懂时，你应该问自己的第一个问题是什么？没错，那就是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;做这个系统的真实需求是什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这个问题很重要。有个故事是这样的：&lt;/p&gt;&lt;blockquote&gt;某大型日化公司引入了一条国外肥皂生产线，这条生产线将肥皂从原材料加入直到包装箱自动完成。不过产品线有瑕疵，个别肥皂盒是空的，这家公司联系厂商后被告知这是设计上的缺陷，无法避免。于是老板要求工程师们解决这个问题，以数名博士为核心形成一个技术攻关团队，耗费大笔资金之后，终于宣告解决。解决的办法是在生产线上安装一套 X 光机进行扫描识别。在另一家私人企业，老板让新来的小工解决问题，小工所用的办法是，找来一台电风扇放在生产线旁边&lt;/blockquote&gt;&lt;p&gt;不知道这是真实故事还是段子，不过我们可以知道的是，如果你只顾着解决自己拿到的问题，而不想问题背后的真实需求是什么，埋头苦干，用复杂的方法来解决个很简单的事，那么会弄出大炮打蚊子的笑话。&lt;/p&gt;&lt;p&gt;第二个该问自己的问题是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有什么制约因素？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于机器学习系统，落地时的制约因素主要包括（但不限于）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;开发时间。即使项目刚开始，你还不知道要花多久，你也得计划开发时间出来，你计划不出来，领导也会给你设定期限。毕竟做产品不同于做研究，做产品大家都喜欢确定的投入和可预估的汇报。&lt;/li&gt;&lt;li&gt;计算资源。因为机器学习系统使用是需要成本的，你得知道用户能承受怎么样的成本或者自己服务器能承受怎样的成本。&lt;/li&gt;&lt;li&gt;算法性能。算法落地不同于打 kaggle 比赛，并没有时间能把性能压榨到极致。只要比预期好些，基本就「先用着再说」了&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-82ade9d4b9af1dbb59e693ed337f9128_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;要在这三个限制因素里面取得微妙的平衡，才能使得产品落地。我刚做数据科学工作时，总喜欢搞算法调优来炫技，但其实压榨算法的边际收益很低，你用一个月把算法准确率从 70% 提升到 80%，可能还不如提前一个月把系统上线使用起来的收益高。&lt;/p&gt;&lt;p&gt;第三个该问自己的问题是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法、性能评估和业务是否吻合？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;还是拿我自己的经历做例子。&lt;/p&gt;&lt;p&gt;我工作中面对的数据，是非常的不平衡的，我们做二元分类，100 条数据里，标签为 1 的只有 2~3 条，其他 97~98 条数据标签都是 0。这个时候显然需要选择一些合理的评估方法，首先就排除了用准确率（Accuracy）作为评判标准了，F1-score, AUC 都可以备选。原因？可以看我在另一个问题的举的例子。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/442962994/answer/1717172385&quot;&gt;如何评价德国训练探雷犬和寻尸犬识别新冠患者，称准确率达 94%？嗅探犬接触患者后会成为病毒传播介质吗？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;然后是模型选择。银行的业务需要强解释性，所以又否决了所有黑箱模型。剩下的就在 tree-based model、logistic regression 还有线性 kernel 的 svm 之间选择了。&lt;/p&gt;&lt;p&gt;上线之后要评价模型对正负样本区分度，于是又要引入 KS 值。随着时间迁移，数据分布可能会变化，又要引入 PSI 值来监控数据偏移程度来决定是否重新训练模型。&lt;/p&gt;&lt;p&gt;你看，模型和评价指标，都是和业务息息相关的。&lt;/p&gt;&lt;p&gt;如果你看到这里还是感觉到迷茫，不知道怎么补足相关业务知识，例如产品和运营的知识，可以看我之前写的一个回答，这里就不重复叙述了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/436066262/answer/1695872348&quot;&gt;算法工程师如何补足产品和运营知识？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;那怎么检验自己真的「懂业务」了呢？你可以检查下自己能不能做到下面这些点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;检查下自己是否能快速复现方案？&lt;/li&gt;&lt;li&gt;如果能快速复现方案，是否能估算每个阶段大致需要多少人多少时间？&lt;/li&gt;&lt;li&gt;面对不同的数据量，能否估算一个大概的服务器性能需求？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;3.软实力层面&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;懂技术了，又懂业务了，是不是感觉还不够差点什么能力去推动产品落地？这个是抛开技术和业务之外的东西，要描述成一个具体的能力，真的很难，我会把这些能力都归结于「软实力」。我认为主要是表现在沟通，思维这两方面。情商、亲和力、共情能力、有眼光，这些算不算软实力？当然算，但你有没有发现，这些软实力都是基于沟通和思维的。&lt;/p&gt;&lt;p&gt;沟通和思维等软实力包括（但不限于）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;和客户沟通的能力。听你讲的客户并不一定是算法工程师或者数据科学家，你是否能把自己的方案原理讲清楚？设计到技术的概念，是否能让非技术的听众也能大致理解？&lt;/li&gt;&lt;li&gt;思考能力。例如结构化思维和批判性思维。其实有一定套路，只要多加练习就能掌握。推荐书籍有《金字塔原理》、《批判性思维工具》等。&lt;/li&gt;&lt;li&gt;推动团队的能力。和个人魅力息息相关。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里说个真实故事，和算法无关，和软实力有关。我大舅是开工厂的，产品良品率之前一直上不去。我二舅退休后就去我大舅厂里做质量监督。我二舅就中学学历，普通话也不标准，但我二舅进厂后，产品良品率上去了，工厂也扭亏为盈了。我问他怎么做到的，他说，很简单啊，对于那些手工不精湛的小伙子，我就亲自做一遍给他看，并告诉他，我一个退休老头都能按质做好，为啥你不行？就这么耐心的一个个沟通，一个个教学，盯着他们直到确认他们能做好为止。看起来这很简单是吧，但这过程需要耐心沟通，需要系统性思维找到关键因素。这就是软实力的表现之一。&lt;/p&gt;&lt;p&gt;如果你观察销售团队的日常，你会发现，他们做的事情看起来简单，大部分时间就是给客户发发邮件，和客户开开会，都是动嘴皮子的事情，但是如果让你去做这些，你会发现你会缺少自己貌似很难推进，你会问自己，自己嘴皮子咋就不那么好呢？软实力就像肌肉，运用软实力的过程就像搬砖，把砖头从 A 点搬到 B 点看着很容易，但搬起来才发现自己肌肉还不够强大。&lt;/p&gt;&lt;p&gt;而锻炼软实力的方法？无它，只有干多了，软实力才能上去。具体的说，对于算法工程师而言，就是不要逃避那些繁琐的看似没收获的事情。例如在我为某客户落地风控系统的过程中，我们需要和他们的项目经理保持联系，有问题也要给他们的数据团队反馈。其实这过程还挺难搞，因为他们作为一个跨国大公司，显然数据中心是需要同时对接很多 vendor 的，所以当和他们合作时，需要经常主动推进项目进度，不然他们的项目经理会问责我们。例如我们有个 pipeline 每天固定时间要跑，他们作为上游，需要在运行时间前把数据给到我们。当时间到了，数据还没给到我们，我们要做的第一个事，就立马需要给数据团队发送邮件，抄送项目经理，分清责任；然后积极跟进回复，搞清楚原因，和数据团队商量个预计解决时间，并且在这个时间点来临前就问问进度，以预留足够时间来应变。在这些看似繁琐的沟通过程中，我掌握了推进工作的方法，养成了积极推动工作进展，并在 deadline 来临前检查进度以预留时间应变的好习惯。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;算法工程师的「落地能力」包括技术能力，业务理解，还有软实力。但对自己要求不要太苛刻，就好像你玩游戏时很少能用到每个维度的能力都满分的英雄一样，人的能力是有个频谱的，不可能方方面面都能做得满分，所以不要对自己感到挫败。&lt;/p&gt;&lt;p&gt;就拿我自己说，大家别看我说的头头是道，但是说实话，说了这么多，其实我自己也并不能每个方面都做得好。这个「落地能力频谱」就像是一个打分卡，帮助你从更全面的角度来分析自己的能力频谱。有的人技术不那么精湛，但很懂业务，很会带队，也能使得产品顺利落地；有的人技术满分，但业务和沟通能力欠缺，但配合其他团队成员的优势，也能使得产品顺利落地。&lt;/p&gt;&lt;p&gt;所以，接受自己的不足，尽可能动态平衡自己的能力频谱，总有一日，你能成为具有超强「落地能力」甚至能独当一面的算法工程师。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/304695682&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
<pubDate>Mon, 12 Apr 2021 23:06:51 GMT</pubDate>
</item>
<item>
<guid>41b7b879d5e9f81b9ae09d363dd0b013</guid>
<title>为何有那么多人喜欢看吃播呢？</title>
<link>https://daily.zhihu.com/story/9734978</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic1.zhimg.com/v2-0bb4415e87f7ac722bdd038e57f99223_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;白岛岩心，&lt;/span&gt;&lt;span&gt;复旦交大、哥大等高校学子共创平台，专注年轻人心理支持。&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/365399313/answer/1828095673&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;&lt;strong&gt;吃播肇始于韩国，是指网络博主通过直播平台或短视频平台展示其食用巨量美食的过程。&lt;/strong&gt;2014 年底，吃播逐渐在我国兴起，以密子君、大胃 mini、大胃王朵一、大胃浪胃仙等为代表的头部大胃王博主掀起了国内吃播的狂潮。作为一种新型视频传播形态，吃播具有即时性、低门槛、注重感官体验和猎奇挑战等特点。而功能日益丰富的直播平台、产品不断创新的视频网站，也为“吃播”的发展奠定了传播基础。&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-194cc5dd032cade1ba59a7851bda3736_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;但吃播文化虽盛行一时，却屡遭批评&lt;/strong&gt;。首先是畸形的饮食文化，暴饮暴食传递的是一种不健康的生活方式（这一点今年早些时候中央就点名批评过）；其次是有损主播身体健康，多数主播会在吃播结束后进行催吐，这对身体危害极大；三是浪费食物；四是越来越多的博主为了博眼球、吸引流量，开始挑战一些新颖食材，比如仙人掌、象拔蚌，或采取大胆的食用方式，比如生吃，这在满足部分观众猎奇需求的同时，也助长了“审丑文化”。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么，既然吃播“风评”如此不好，为什么还是有那么多人喜欢看吃播呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;下面我们试着&lt;/strong&gt;从受众心理角度出发讲讲吃播盛行的原因。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;1. 猎奇窥私心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;猎奇心理可以理解为人们对于自己尚不熟悉或比较新奇的事物所表现出的一种好奇感，以及急于探求其奥秘或答案的心理活动。&lt;/strong&gt;&lt;/blockquote&gt;&lt;p&gt;“吃播”是一种形式新颖的舶来品，人们对于这一新潮文化的好奇，是“吃播”迅速走红、吸引大批观众的主要原因。此外，大部分主播以“能吃”闻名，不少观众也是抱着对他们饮食极限的好奇心来观看的。&lt;/p&gt;&lt;p&gt;更有一些女主播，虽十分能吃却纤细苗条，姣好身材与巨大食量所形成的反差，能够充分激发受众的好奇心理与探索欲望。早期的主播多是在自家电脑前进行“吃播”，通过镜头，他们日常的生活环境、自然的居家状态得到真实的展现，无形中也满足了一些受众的窥视欲。&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-79991cd5a3fabd99cc31d983469a4f9f_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;2. 寻求陪伴心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;心理学有个名词叫&lt;strong&gt;社会临场感，是指在利用媒体进行沟通的过程中，一个人被视为“真实的人”的程度及与他人联系的感知程度&lt;/strong&gt;。有研究认为，社会临场感能够描述人们借助媒体对他人的感知，能够促进虚拟环境中人与人之间的社会交互，增强归属感、减弱孤独感。据报道，目前我国“空巢青年”人数已达 2000 万，他们大多远离家乡，独自在大城市打拼。&lt;/p&gt;&lt;p&gt;随着现代社会的快速发展，消费主义盛行、生存压力递增，孤独、焦虑、疏离等情绪成为当下青年群体正普遍经历并将长久持续下去的心理体验。“吃播”这种“&lt;strong&gt;陪伴式饭局&lt;/strong&gt;”营造了较强的社会临场氛围，从单纯的影像载体变成了重构人与人社会关系的中介。人们在观看“吃播”的过程中，得到了主播的实时陪伴，有一种真的和朋友一起吃饭的陪伴感个满足感，社会临场感的真实性大幅度提升，由此弱化了个人孤单压抑的情绪。&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-60cff8c4221f814f5c2e48f428706149_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;3. 社交满足心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;社交活动通常是双向开展的，“吃播”在满足主播社交需求的同时，也为在生活、工作等方面承受了巨大压力的观众提供了互动、娱乐的渠道。通常来说，“吃播”有在线直播以及视频录播这两种形式。直播形式中，观众可以发送实时评论和主播交流，且聊天范围也不局限于食物本身，这种互动就像在饭桌上和家人朋友的聊天。&lt;/p&gt;&lt;p&gt;同时，主播会对观众的提问予以回应，会根据观众的反馈调整自己的言语和动作。而在观看非直播形式的视频时，观众可以通过评论、弹幕等方式表达自己的心理感受与意见建议，也可以从其他评论或弹幕内容中找到心理安慰、情感共鸣或情绪发泄口，从而形成“评论互动”或“弹幕互动”。&lt;/p&gt;&lt;p&gt;另外也有人认为主播长得好看，既有“美色”，又有美食，非常养眼。&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-adbc1f8e57c34c587ce35aa6d3717d30_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;4. 寻求解压心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;人在疲劳、压力大时，通过看综艺、电视剧等内容简单的节目减压，吃播也属于这类减压节目。“此外，吃播播主通常不说话，节目中大部分声音是他们的咀嚼音，类似白噪音。”&lt;strong&gt;人完全没有任何感觉时，并不是最放松的时刻，反而在适度的感官刺激下，人会比较舒适，白噪音的机理正是如此&lt;/strong&gt;。在单调的声音环境中，无需动脑，又有一定刺激，有助于放松。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;5. 寻求鼓励心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;有的网友可能本来不想吃东西，或胃口不好，通过看到主播们面对一桌丰盛的食物大快朵颐，观众或许受到影响，也会多吃一点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;6. 镜像体验心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;镜像神经元的发现认为，处于观察角色的个体看到其他个体的相同行为时，其镜像神经元（细胞）就会产生“镜像记录”的作用，好像处于观察者角色的个体也在执行该动作一样&lt;/strong&gt;。当看到别人的情感状态时，镜像神经元也会被激活，产生情感镜像机制作用，促使我们体验到他人的感受。&lt;/p&gt;&lt;p&gt;食欲是人的基本欲望，在观看他人“大快朵颐”时，观众基于主播的行为表现所进行的观察、体验以及所产生的参与感，会让他们觉得自己好像也在从事这一活动。看到主播吃得很开心，观众自己的胃口仿佛也得到了满足，拥有了相同的情绪体验，也就产生了“代理饱腹感”，获得心理快感。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;7. 虚拟代偿心理&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;虚拟代偿是指个体在追求某种东西却因种种原因不可得即欲望得不到满足时，便主动寻求其他代替的途径及方式，以变相满足自己的需求和欲望的心理&lt;/strong&gt;。也叫“替代性满足”，来自弗洛伊德的精神分析心理学。&lt;/p&gt;&lt;p&gt;在观看“吃播”的网民中，有的观众可能出于对瘦的追求，正在节食减肥，有的观众可能因心情低落或身体原因，毫无胃口，有的观众可能因条件限制，在此时此刻吃不到想吃的食物。这种情况下，观看“吃播”就可以满足他们被抑制的食欲，排解自己想要吃东西的欲望，在心理上完成进食过程。如此，既能体会到吃的愉悦感，又不用担心会造成负面后果和不良影响，这是对潜意识里的欲望进行发泄的一种方式，更是代偿心理需求的一种体现。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;最后想说的是，&lt;strong&gt;“吃”是生活，而吃播不是。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;就吃这件事而言，它其实是非常有生活气息的活动。无论是做饭还是吃饭，都会让人感觉到生命的活力，这会给人带来积极的情绪。在有限的时间内，用这种方式去放松是完全没问题的。但如果用大量的时间去看吃播，可能会阻碍一个人真正解决和面对自己的问题。比如，一个人感到孤独、寂寞，甚至有些空虚，那么他真正要解决的是，反思自己的生活目标，去充实自己的生活，而不是看直播来消磨时间。&lt;/p&gt;&lt;p&gt;此外，看吃播的代偿效应，也会带来副作用。比如，有人为了控制体重，想通过看吃播这种方式来控制食欲，这或许能起到一定效果，但也是有风险的。可能会适得其反，越看别人吃，自己越想吃，越难控制住食欲。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;因此要合理控制在吃播上投入的时间和金钱，不能沉浸在吃播的温柔乡无以自拔。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;以上~希望大家都能吃嘛嘛香健健康康呀~&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;参 考 文 献&lt;/strong&gt;&lt;br&gt;&lt;br&gt;[1]李博儒.吃播的观看动机与吃播对观众的影响相关性分析[J].国际公关,2020(04):13-14.&lt;br&gt;[2]田荣.使用与满足理论视域下的吃播受众心理探究[J].西部广播电视,2020(06):71-72.&lt;br&gt;[3]马晓静.从用户心理分析吃播乱象[J].新媒体研究,2020,6(02):53-54.&lt;br&gt;[4]王爽,胡晓娟.传播心理学视域下的“吃播”现象分析[J].新闻研究导刊,2019,10(09):31-32+38.&lt;br&gt;[5]陈禹毅.从受众心理分析“吃播”盛行原因及冷思[J].电视指南,2017(19):3-4.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/365399313&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
<pubDate>Mon, 12 Apr 2021 23:06:45 GMT</pubDate>
</item>
<item>
<guid>9ea1b3b8bb5ca0138c156bbf0d92c6ef</guid>
<title>瞎扯 · 如何正确地吐槽</title>
<link>https://daily.zhihu.com/story/9734954</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;h2&gt;你所在城市的哪句方言体现了浓厚的地域特色？&lt;/h2&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic2.zhimg.com/v2-c4f9d411ddd3f5b9bcf89155a8871f0b_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;卷卷卷卷心，&lt;/span&gt;&lt;span&gt;寻找答案&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/453735396/answer/1826267657&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;那必定要拿出最经典的这一句：&lt;/p&gt;&lt;p&gt;-“你啷个嫩个嘞个也？”&lt;/p&gt;&lt;p&gt;-“我啷个嫩个嘞个了嘛？”&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/453735396&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2&gt;耳屎能大到什么程度？&lt;/h2&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic2.zhimg.com/v2-2c5716e84ca07c9c02f63501fd0f5ebc_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;庆庆，&lt;/span&gt;&lt;span&gt;rts&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/326502155/answer/723301563&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;我一直都是油耳，不理解干耳屎是什么样的。&lt;/p&gt;&lt;p&gt;有一天，室友在洗澡，突然惊慌失措的跑出来，用快哭的表情告诉我们她的一边耳朵听不见了，她当时特别害怕。&lt;/p&gt;&lt;p&gt;第二天去医院，医生看了以后说，耳屎太大，洗澡耳朵进水把耳屎泡胀了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/326502155&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2&gt;有没有类似“duck不必”的谐音梗？&lt;/h2&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic4.zhimg.com/v2-582099aac7e6d354cd5c67276333ed0f_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;dick牛仔，&lt;/span&gt;&lt;span&gt;大学生&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/375425891/answer/1302467237&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;我最喜欢。hand hands load loads 旱的旱死涝的涝死&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/375425891&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2&gt;我女朋友身高 162 厘米，体重 52.5 公斤，我连公主抱都抱不动，我该怎么委婉地提醒她减肥？&lt;/h2&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic1.zhimg.com/6660e7854700ba8796101d43f1bb625f_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;女神别跑啊是我，&lt;/span&gt;&lt;span&gt;健身房老板&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/349052465/answer/851007914&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;把你女朋友微信号发给我，我抱得动。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/349052465&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;
&lt;h2&gt;哪吒为什么打不过孙悟空？&lt;/h2&gt;&lt;div&gt;&lt;div&gt;
&lt;img src=&quot;https://pic4.zhimg.com/v2-db3a631787d8436be1014b0aac7c1ea5_l.jpg?source=8673f162&quot;&gt;
&lt;span&gt;初知行，&lt;/span&gt;&lt;span&gt;最大的机遇就是自身不断发展壮大&lt;/span&gt;
&lt;a href=&quot;https://www.zhihu.com/question/337227546/answer/764802774&quot; hidden&gt;阅读原文&lt;/a&gt;
&lt;/div&gt;&lt;div&gt;
&lt;p&gt;哪吒闹海那会儿的哪吒：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-df3388372e2c417fc7c45732cf131142_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;大闹天宫那会儿的哪吒：&lt;/p&gt;&lt;figure&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-927d108118bfc4dafd4980ca08a288fe_720w.jpg?source=8673f162&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;&lt;p&gt;果然体制内最能锻炼人&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;https://www.zhihu.com/question/337227546&quot;&gt;阅读原文&lt;span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;
&lt;p&gt;以上瞎扯节选自《&lt;a href=&quot;https://zhuanlan.zhihu.com/p/363579935&quot; target=&quot;_blank&quot;&gt;这水有毒 | 知乎早报 20210412&lt;/a&gt;》，可点击文章标题跳转至知乎 App 查看完整原文。&lt;/p&gt;&lt;p&gt;注：知乎早报每工作日早上 8 点发布，盘点昨夜今晨什么正在火 &amp;amp; 最新鲜的瞎扯。欢迎前往知乎 App 关注「知乎日报」机构号订阅。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
<pubDate>Mon, 12 Apr 2021 23:06:38 GMT</pubDate>
</item>
</channel></rss>