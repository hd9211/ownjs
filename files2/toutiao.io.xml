<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d433bf9289afe4c9548212e5fd724442</guid>
<title>技术、商业与人</title>
<link>https://toutiao.io/k/qiwve40</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMjE3MDIwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EwukgicNDWBswFxJHbKiad1jnJCFQiaWQrRnSdQGnrHiaicTyc2FR4CId2GQk1TABicoY87kQIeoeI1z3GnwanWMg1YQ/0?wx_fmt=png&quot; data-nickname=&quot;MavenTalk&quot; data-alias=&quot;mavenTalk&quot; data-signature=&quot;创业者，资深技术从业人员，关注技术人的认知提升和职业成长&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;曾经有一段时间，技术、业务与管理，会成为一些小伙伴前进道路上的三岔口，往哪个方向走困惑着很多人。后来走着走着也就释然了，这不是一个丢车保帅的游戏，是可以相互共存的，只不过有些侧重而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个偶然的机会，发现了扶墙老师的《技术、商业与人》这个小册子，篇幅不大，可以认为是很多篇文章的合集。技术人可以从头到尾通读，非研发类小伙伴可以略过技术篇，直接读商业与人。正如文末所说，这正是一个被社会毒打过的人，才能有如此这般的&lt;span&gt;的领悟。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;有兴趣的同学移步：https://gumroad.com/a/330077299&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;如果你擅长某种技术，它就会挟持你&lt;span&gt;，不管你做什么业务，第一个跳到你眼前，告诉你应该这么干。&lt;/span&gt;&lt;span&gt;这在《能力陷阱》中，已经做了详尽的解读，我也推荐你拿来看看。&lt;/span&gt;&lt;span&gt;技术用的久，自然会发现一些门门道道，&lt;/span&gt;适&lt;span&gt;用即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.66625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBuJacicXpPia4pcTGXVGtrh8PLibtr8e1KhcRozgEbceFtibvMM4vy3rRtcMtwibDdemgGObfVZYhqTDRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;题图 from unsplash&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个世界运转的逻辑是商业驱动，技术作为一个工具的存在，辅助着商业的发展。比如SaaS产品，究竟是公车模式还是私家车模式，我很赞同扶墙老师的评判，针对大客户，SaaS没有生存的土壤，只能定制。针对SMB，把握好质优价廉的普适性需求就有市场。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源与商业也基本是绕不开的问题，市场中也早已有结合商业、开源与社区的商业体存在。有一篇“资源、关系、能力”的文字，相信你读完会有种啊哈时刻的通透。诸如此类，还有不少，有点三词共解读的意味，比如市场、销售与营销等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一切的载体，人的重要性不言而喻。人在一起，会形成团队组织，组织在一个商业体的发展中同样有着决定性的作用。人的心理归因，人的商业行为，人的组织性这些，相信每一个人都会经历到，人正是有了一些对自己错误的认知，才会导致一些覆水难收的苦果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你会先遇到，技术、业务与管理，走着走着，你还会遇到，技术、商业与人。这是一个有迹可循的路数，随着年龄的增长，这也是必然面临的一个问题，你不能只关心技术而忽略了世界的本真：商业与人，人与组织。&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMjE3MDIwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EwukgicNDWBswFxJHbKiad1jnJCFQiaWQrRnSdQGnrHiaicTyc2FR4CId2GQk1TABicoY87kQIeoeI1z3GnwanWMg1YQ/0?wx_fmt=png&quot; data-nickname=&quot;MavenTalk&quot; data-alias=&quot;mavenTalk&quot; data-signature=&quot;创业者，资深技术从业人员，关注技术人的认知提升和职业成长&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2f3a6e09ece68eddbcaa83a28efcf626</guid>
<title>TypeScript 实用小技巧</title>
<link>https://toutiao.io/k/sswnl63</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;&lt;h1 class=&quot;title&quot;&gt;typescript 实用小技巧&lt;/h1&gt;&lt;p class=&quot;meta&quot;&gt;小纪同学 Posted at — Aug 24, 2021
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;markdown&quot;&gt;&lt;p&gt;用了很久的 typescript，用了但感觉又没完全用。因为很多 typescript 的特性没有被使用，查看之前写的代码满屏的 any，这样就容易导致很多 bug，也没有发挥出 typescript 真正的“类型”威力。本文总结了一些使用
typescript 的小技巧，以后使用 typescript 时可以运用起来。&lt;/p&gt;&lt;p&gt;废话不多说，直接上代码。&lt;/p&gt;&lt;h2 id=&quot;函数重载&quot;&gt;函数重载&lt;/h2&gt;&lt;p&gt;当希望传 user 参数时，不传 flag，传 para 时，传 flag。就可以这样写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; {
  &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
  &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; = {
  &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;Jack&#x27;&lt;/span&gt;,
  &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;123&lt;/span&gt;
};

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SomeClass&lt;/span&gt; {

  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;(&lt;span&gt;para&lt;/span&gt;: &lt;span&gt;User&lt;/span&gt;): &lt;span&gt;number&lt;/span&gt;;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;(&lt;span&gt;para&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;, &lt;span&gt;flag&lt;/span&gt;: &lt;span&gt;boolean&lt;/span&gt;): &lt;span&gt;number&lt;/span&gt;;

  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;(&lt;span&gt;para&lt;/span&gt;: &lt;span&gt;User&lt;/span&gt; | &lt;span&gt;number&lt;/span&gt;, &lt;span&gt;flag?&lt;/span&gt;: &lt;span&gt;boolean&lt;/span&gt;): &lt;span&gt;number&lt;/span&gt; {
    &lt;span&gt;// 具体实现
&lt;/span&gt;&lt;span/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;
  }
}

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;someClass&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;SomeClass&lt;/span&gt;();

&lt;span&gt;// ok
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;someClass&lt;/span&gt;.&lt;span&gt;test&lt;/span&gt;(&lt;span&gt;user&lt;/span&gt;);
&lt;span&gt;someClass&lt;/span&gt;.&lt;span&gt;test&lt;/span&gt;(&lt;span&gt;123&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);

&lt;span&gt;// Error
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;// someClass.test(123); 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;//Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;User&#x27;.
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;// someClass.test(user, false);
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;//Argument of type &#x27;{ name: string; age: number; }&#x27; is not assignable to parameter of type &#x27;number&#x27;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;映射类型&quot;&gt;映射类型&lt;/h2&gt;&lt;p&gt;在了解映射类型之前，需要了解 keyof, never, typeof, in。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;keyof：keyof 取 interface 的键&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; {
    &lt;span&gt;x&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
    &lt;span&gt;y&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;// type keys = &quot;x&quot; | &quot;y&quot;
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;keys&lt;/span&gt; = &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方描述：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;the never type represents the type of values that never occur.&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;// 例子：进行编译时的全面的检查
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; = &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;number&lt;/span&gt;;

&lt;span&gt;function&lt;/span&gt; &lt;span&gt;controlFlowAnalysisWithNever&lt;/span&gt;(&lt;span&gt;foo&lt;/span&gt;: &lt;span&gt;Foo&lt;/span&gt;) {
  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;foo&lt;/span&gt; === &lt;span&gt;&quot;string&quot;&lt;/span&gt;) {
    &lt;span&gt;// 这里 foo 被收窄为 string 类型
&lt;/span&gt;&lt;span/&gt;  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;foo&lt;/span&gt; === &lt;span&gt;&quot;number&quot;&lt;/span&gt;) {
    &lt;span&gt;// 这里 foo 被收窄为 number 类型
&lt;/span&gt;&lt;span/&gt;  } &lt;span&gt;else&lt;/span&gt; {
    &lt;span&gt;// foo 在这里是 never
&lt;/span&gt;&lt;span/&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;check&lt;/span&gt;: &lt;span&gt;never&lt;/span&gt; = &lt;span&gt;foo&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt; = &lt;span&gt;3&lt;/span&gt;

&lt;span&gt;// 相当于: const b: number = 4
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; = &lt;span&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; {
  &lt;span&gt;x&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;B&lt;/span&gt; {
  &lt;span&gt;y&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
}

&lt;span&gt;function&lt;/span&gt; &lt;span&gt;doStuff&lt;/span&gt;(&lt;span&gt;q&lt;/span&gt;: &lt;span&gt;A&lt;/span&gt; | &lt;span&gt;B&lt;/span&gt;) {
  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&#x27;x&#x27;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;q&lt;/span&gt;) {
    &lt;span&gt;// q: A
&lt;/span&gt;&lt;span/&gt;  } &lt;span&gt;else&lt;/span&gt; {
    &lt;span&gt;// q: B
&lt;/span&gt;&lt;span/&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;映射类型就是将一个类型映射成另外一个类型，简单理解就是新类型以相同的形式去转换旧类型的每个属性。&lt;/p&gt;&lt;h3 id=&quot;partial-readonly-nullable-required&quot;&gt;Partial, Readonly, Nullable, Required&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Partial 将每个属性转换为可选属性&lt;/li&gt;&lt;li&gt;Readonly 将每个属性转换为只读属性&lt;/li&gt;&lt;li&gt;Nullable 转换为旧类型和null的联合类型&lt;/li&gt;&lt;li&gt;Required 将每个属性转换为必选属性&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Partial&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = {
    [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;]?: &lt;span&gt;T&lt;/span&gt;[&lt;span&gt;P&lt;/span&gt;];
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Readonly&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = {
    &lt;span&gt;readonly&lt;/span&gt; [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;]: &lt;span&gt;T&lt;/span&gt;[&lt;span&gt;P&lt;/span&gt;];
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Nullable&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = { 
  [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;]: &lt;span&gt;T&lt;/span&gt;[&lt;span&gt;P&lt;/span&gt;] | &lt;span&gt;null&lt;/span&gt; 
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Required&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = {
  [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;]-?: &lt;span&gt;T&lt;/span&gt;[&lt;span&gt;P&lt;/span&gt;]
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; {
    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
    &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonPartial&lt;/span&gt; = &lt;span&gt;Partial&lt;/span&gt;&amp;lt;&lt;span&gt;Person&lt;/span&gt;&amp;gt;;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonReadonly&lt;/span&gt; = &lt;span&gt;Readonly&lt;/span&gt;&amp;lt;&lt;span&gt;Person&lt;/span&gt;&amp;gt;;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonNullable&lt;/span&gt; = &lt;span&gt;Nullable&lt;/span&gt;&amp;lt;&lt;span&gt;Person&lt;/span&gt;&amp;gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonPartial&lt;/span&gt; = {
    &lt;span&gt;name?&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;undefined&lt;/span&gt;;
    &lt;span&gt;age?&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt; | &lt;span&gt;undefined&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonReadonly&lt;/span&gt; = {
    &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
    &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PersonNullable&lt;/span&gt; = {
      &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;null&lt;/span&gt;;
      &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt; | &lt;span&gt;null&lt;/span&gt;;
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Props&lt;/span&gt; {
  &lt;span&gt;a?&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;;
  &lt;span&gt;b?&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
}

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;obj&lt;/span&gt;: &lt;span&gt;Props&lt;/span&gt; = { &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt; };

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;obj2&lt;/span&gt;: &lt;span&gt;Required&lt;/span&gt;&amp;lt;&lt;span&gt;Props&lt;/span&gt;&amp;gt; = { &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt; };
&lt;span&gt;// Property &#x27;b&#x27; is missing in type &#x27;{ a: number; }&#x27; but required in type &#x27;Required&amp;lt;Props&amp;gt;&#x27;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;pick-record&quot;&gt;Pick, Record&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Pick 选取一组属性指定新类型&lt;/li&gt;&lt;li&gt;Record 创建一组属性指定新类型，常用来声明普通Object对象&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt; = {
  [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;]: &lt;span&gt;T&lt;/span&gt;[&lt;span&gt;P&lt;/span&gt;];
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Record&lt;/span&gt;&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;T&lt;/span&gt;&amp;gt; = {
  [&lt;span&gt;P&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;]: &lt;span&gt;T&lt;/span&gt;;
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Todo&lt;/span&gt; {
  &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
  &lt;span&gt;description&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
  &lt;span&gt;completed&lt;/span&gt;: &lt;span&gt;boolean&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;TodoPreview&lt;/span&gt; = &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;Todo&lt;/span&gt;, &lt;span&gt;&quot;title&quot;&lt;/span&gt; | &lt;span&gt;&quot;completed&quot;&lt;/span&gt;&amp;gt;;

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;todo&lt;/span&gt;: &lt;span&gt;TodoPreview&lt;/span&gt; = {
  &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&quot;Clean room&quot;&lt;/span&gt;,
  &lt;span&gt;completed&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,
};

&lt;span&gt;todo&lt;/span&gt;; &lt;span&gt;// = const todo: TodoPreview
&lt;/span&gt;&lt;span/&gt;

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;PageInfo&lt;/span&gt; {
  &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Page&lt;/span&gt; = &lt;span&gt;&quot;home&quot;&lt;/span&gt; | &lt;span&gt;&quot;about&quot;&lt;/span&gt; | &lt;span&gt;&quot;contact&quot;&lt;/span&gt;;

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;nav&lt;/span&gt;: &lt;span&gt;Record&lt;/span&gt;&amp;lt;&lt;span&gt;Page&lt;/span&gt;, &lt;span&gt;PageInfo&lt;/span&gt;&amp;gt; = {
  &lt;span&gt;about&lt;/span&gt;: { &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&quot;title1&quot;&lt;/span&gt; },
  &lt;span&gt;contact&lt;/span&gt;: { &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&quot;title2&quot;&lt;/span&gt; },
  &lt;span&gt;home&lt;/span&gt;: { &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&quot;title3&quot;&lt;/span&gt; },
};

&lt;span&gt;nav&lt;/span&gt;.&lt;span&gt;about&lt;/span&gt;; &lt;span&gt;// = const nav: Record
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;exclude-omit&quot;&gt;Exclude, Omit&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Exclude 去除交集，返回剩余的部分&lt;/li&gt;&lt;li&gt;Omit 适用于键值对对象的Exclude，去除类型中包含的键值对&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;&amp;gt; = &lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;U&lt;/span&gt; ? &lt;span&gt;never&lt;/span&gt; : &lt;span&gt;T&lt;/span&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Omit&lt;/span&gt; = &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt;&amp;gt;&amp;gt;

&lt;span&gt;// 相当于: type A = &#x27;a&#x27;
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; = &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;&#x27;x&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;x&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;y&#x27;&lt;/span&gt; | &lt;span&gt;&#x27;z&#x27;&lt;/span&gt;&amp;gt;

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Todo&lt;/span&gt; {
  &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
  &lt;span&gt;description&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;;
  &lt;span&gt;completed&lt;/span&gt;: &lt;span&gt;boolean&lt;/span&gt;;
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;TodoPreview&lt;/span&gt; = &lt;span&gt;Omit&lt;/span&gt;&amp;lt;&lt;span&gt;Todo&lt;/span&gt;, &lt;span&gt;&quot;description&quot;&lt;/span&gt;&amp;gt;;

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;todo&lt;/span&gt;: &lt;span&gt;TodoPreview&lt;/span&gt; = {
  &lt;span&gt;title&lt;/span&gt;: &lt;span&gt;&quot;a&quot;&lt;/span&gt;,
  &lt;span&gt;completed&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;returntype&quot;&gt;ReturnType&lt;/h3&gt;&lt;p&gt;获取返回值类型，一般为函数&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ReturnType&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; (...&lt;span&gt;args&lt;/span&gt;: &lt;span&gt;any&lt;/span&gt;) =&amp;gt; &lt;span&gt;any&lt;/span&gt;&amp;gt;
  = &lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; (...&lt;span&gt;args&lt;/span&gt;: &lt;span&gt;any&lt;/span&gt;) =&amp;gt; &lt;span&gt;infer&lt;/span&gt; &lt;span&gt;R&lt;/span&gt; ? &lt;span&gt;R&lt;/span&gt; : &lt;span&gt;any&lt;/span&gt;;

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;f1&lt;/span&gt;(): { &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;; &lt;span&gt;b&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt; };
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt; = &lt;span&gt;ReturnType&lt;/span&gt;&amp;lt;&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;f1&lt;/span&gt;&amp;gt;;
&lt;span&gt;//    type T1 = {
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;//        a: number;
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;//        b: string;
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;//    }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有很多映射类型，可查看&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html&quot;&gt;Utility Types&lt;/a&gt;参考。&lt;/p&gt;&lt;h2 id=&quot;类型断言&quot;&gt;类型断言&lt;/h2&gt;&lt;p&gt;类型断言用来明确的告诉 typescript 值的详细类型，合理使用能减少我们的工作量。&lt;/p&gt;&lt;p&gt;比如一个变量并没有初始值，但是我们知道它的类型信息（它可能是从后端返回）有什么办法既能正确推导类型信息，又能正常运行了？有一种网上的推荐方式是设置初始值，然后使用 typeof 拿到类型（可能会给其他地方用）。也可以使用类型断言可以解决这类问题：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; { 
    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;; 
    &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;; 
} 

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;someClass&lt;/span&gt; { 
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; = {} &lt;span&gt;as&lt;/span&gt; &lt;span&gt;User&lt;/span&gt;;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;&lt;p&gt;枚举类型分为数字类型与字符串类型，其中数字类型的枚举可以当标志使用：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;enum&lt;/span&gt; &lt;span&gt;AnimalFlags&lt;/span&gt; {
    &lt;span&gt;None&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;, 
    &lt;span&gt;HasClaws&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;0&lt;/span&gt;, 
    &lt;span&gt;CanFly&lt;/span&gt; = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;1&lt;/span&gt;, 
    &lt;span&gt;HasClawsOrCanFly&lt;/span&gt; = &lt;span&gt;HasClaws&lt;/span&gt; | &lt;span&gt;CanFly&lt;/span&gt; 
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Animal&lt;/span&gt; { 
    &lt;span&gt;flags&lt;/span&gt;: &lt;span&gt;AnimalFlags&lt;/span&gt;; 
   [&lt;span&gt;key&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;]: &lt;span&gt;any&lt;/span&gt;; 
} 

&lt;span&gt;function&lt;/span&gt; &lt;span&gt;printAnimalAbilities&lt;/span&gt;(&lt;span&gt;animal&lt;/span&gt;: &lt;span&gt;Animal&lt;/span&gt;) { 
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;animalFlags&lt;/span&gt; = &lt;span&gt;animal&lt;/span&gt;.&lt;span&gt;flags&lt;/span&gt;; 
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;animalFlags&lt;/span&gt; &amp;amp; &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;HasClaws&lt;/span&gt;) { 
        &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&#x27;animal has claws&#x27;&lt;/span&gt;); 
    } 
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;animalFlags&lt;/span&gt; &amp;amp; &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;CanFly&lt;/span&gt;) { 
        &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&#x27;animal can fly&#x27;&lt;/span&gt;); 
    } 
    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;animalFlags&lt;/span&gt; == &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;None&lt;/span&gt;) { 
        &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&#x27;nothing&#x27;&lt;/span&gt;); 
    } 
} 

&lt;span&gt;var&lt;/span&gt; &lt;span&gt;animal&lt;/span&gt; = { &lt;span&gt;flags&lt;/span&gt;: &lt;span&gt;AnimalFlags.None&lt;/span&gt; }; 
&lt;span&gt;printAnimalAbilities&lt;/span&gt;(&lt;span&gt;animal&lt;/span&gt;); &lt;span&gt;// nothing 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;animal&lt;/span&gt;.&lt;span&gt;flags&lt;/span&gt; |= &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;HasClaws&lt;/span&gt;; 
&lt;span&gt;printAnimalAbilities&lt;/span&gt;(&lt;span&gt;animal&lt;/span&gt;); &lt;span&gt;// animal has claws 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;animal&lt;/span&gt;.&lt;span&gt;flags&lt;/span&gt; &amp;amp;= ~&lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;HasClaws&lt;/span&gt;; 
&lt;span&gt;printAnimalAbilities&lt;/span&gt;(&lt;span&gt;animal&lt;/span&gt;); &lt;span&gt;// nothing 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;animal&lt;/span&gt;.&lt;span&gt;flags&lt;/span&gt; |= &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;HasClaws&lt;/span&gt; | &lt;span&gt;AnimalFlags&lt;/span&gt;.&lt;span&gt;CanFly&lt;/span&gt;; 
&lt;span&gt;printAnimalAbilities&lt;/span&gt;(&lt;span&gt;animal&lt;/span&gt;); &lt;span&gt;// animal has claws, animal can fly 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;使用 |= 来添加一个标志；&lt;/li&gt;&lt;li&gt;组合使用 &amp;amp;= 和 ~ 来清理一个标志；&lt;/li&gt;&lt;li&gt;| 来合并标志。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个或许不常用，在 typescript 关于 types 源码中我们也可以看到类似的代码：
&lt;img src=&quot;imgs/ts/image.png&quot; alt=&quot;types&quot;/&gt;&lt;/p&gt;&lt;p&gt;字符串类型的枚举可以维护常量：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; &lt;span&gt;TODO_STATUS&lt;/span&gt; {
  &lt;span&gt;TODO&lt;/span&gt; = &lt;span&gt;&#x27;TODO&#x27;&lt;/span&gt;,
  &lt;span&gt;DONE&lt;/span&gt; = &lt;span&gt;&#x27;DONE&#x27;&lt;/span&gt;,
  &lt;span&gt;DOING&lt;/span&gt; = &lt;span&gt;&#x27;DOING&#x27;&lt;/span&gt;
}

&lt;span&gt;function&lt;/span&gt; &lt;span&gt;todos&lt;/span&gt; (&lt;span&gt;status&lt;/span&gt;: &lt;span&gt;TODO_STATUS&lt;/span&gt;): &lt;span&gt;Todo&lt;/span&gt;[];

&lt;span&gt;todos&lt;/span&gt;(&lt;span&gt;TODO_STATUS&lt;/span&gt;.&lt;span&gt;TODO&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;元组&quot;&gt;元组&lt;/h2&gt;&lt;p&gt;表示一个已知元素数量和类型的数组，各元素的类型不必相同。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;x&lt;/span&gt;: [&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;number&lt;/span&gt;];
&lt;span&gt;x&lt;/span&gt; = [&lt;span&gt;&#x27;hello&#x27;&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;]; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在发出不固定多个请求时，可以应用：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;requestList&lt;/span&gt;: &lt;span&gt;any&lt;/span&gt;[] = [&lt;span&gt;http&lt;/span&gt;.&lt;span&gt;get&lt;/span&gt;&amp;lt;&lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span&gt;&#x27;http://some.1&#x27;&lt;/span&gt;)]; &lt;span&gt;// 设置为 any[] 类型 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;flag&lt;/span&gt;) { 
    &lt;span&gt;requestList&lt;/span&gt;[&lt;span&gt;1&lt;/span&gt;] = (&lt;span&gt;http&lt;/span&gt;.&lt;span&gt;get&lt;/span&gt;&amp;lt;&lt;span&gt;B&lt;/span&gt;&amp;gt;(&lt;span&gt;&#x27;http://some.2&#x27;&lt;/span&gt;)); 
} 
&lt;span&gt;const&lt;/span&gt; [ { &lt;span&gt;data&lt;/span&gt;: &lt;span&gt;a&lt;/span&gt; }, &lt;span&gt;response&lt;/span&gt; ] = &lt;span&gt;await&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;.&lt;span&gt;all&lt;/span&gt;(&lt;span&gt;requestList&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; [&lt;span&gt;Response&lt;/span&gt;&amp;lt;&lt;span&gt;A&lt;/span&gt;&amp;gt;, &lt;span&gt;Response&lt;/span&gt;&amp;lt;&lt;span&gt;B&lt;/span&gt;&amp;gt;?]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;范型&quot;&gt;范型&lt;/h2&gt;&lt;p&gt;在定义泛型后，有两种方式使用，一种是传入泛型类型，另一种使用类型推断。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;fn&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span&gt;arg&lt;/span&gt;: &lt;span&gt;T&lt;/span&gt;): &lt;span&gt;T&lt;/span&gt;; &lt;span&gt;// 定义一个泛型函数 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;fn1&lt;/span&gt; = &lt;span&gt;fn&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&#x27;hello&#x27;&lt;/span&gt;); &lt;span&gt;// 第一种方式，传入泛型类型 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;string&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;fn2&lt;/span&gt; = &lt;span&gt;fn&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;); &lt;span&gt;// 第二种方式，从参数 arg 传入的类型 number，来推断出泛型 T 的类型是 number 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个扁平数组结构建树形结构例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;// 转换前数据 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;arr&lt;/span&gt; = [ 
{ &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test1&#x27;&lt;/span&gt;}, 
{ &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test2&#x27;&lt;/span&gt;}, 
{ &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test3&#x27;&lt;/span&gt;} 
]; 
&lt;span&gt;// 转化后 
&lt;/span&gt;&lt;span/&gt;[ { &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test1&#x27;&lt;/span&gt;, 
    &lt;span&gt;childrenList&lt;/span&gt;: [ { &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test2&#x27;&lt;/span&gt;, &lt;span&gt;childrenList&lt;/span&gt;: [] } ] }, 
    { &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;test3&#x27;&lt;/span&gt;, &lt;span&gt;childrenList&lt;/span&gt;: [] } 
]


&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Item&lt;/span&gt; { 
    &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;; 
    &lt;span&gt;parentId&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;; 
    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;; 
} 

&lt;span&gt;// 传入的 options 参数中，得到 childrenKey 的类型，然后再传给 TreeItem
&lt;/span&gt;&lt;span/&gt;
&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Options&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&amp;gt; { 
    &lt;span&gt;childrenKey&lt;/span&gt;: &lt;span&gt;T&lt;/span&gt;; 
} 
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;TreeItem&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&amp;gt; = &lt;span&gt;Item&lt;/span&gt; &amp;amp; { [&lt;span&gt;key&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;]: &lt;span&gt;TreeItem&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;[] | [] }; 
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;listToTree&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; = &lt;span&gt;&#x27;children&#x27;&lt;/span&gt;&amp;gt;(&lt;span&gt;list&lt;/span&gt;: &lt;span&gt;Item&lt;/span&gt;[], &lt;span&gt;options&lt;/span&gt;: &lt;span&gt;Options&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;): &lt;span&gt;TreeItem&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;[]; 
&lt;span&gt;listToTree&lt;/span&gt;(&lt;span&gt;arr&lt;/span&gt;, { &lt;span&gt;childrenKey&lt;/span&gt;: &lt;span&gt;&#x27;childrenList&#x27;&lt;/span&gt; }).&lt;span&gt;forEach&lt;/span&gt;(&lt;span&gt;i&lt;/span&gt; =&amp;gt; &lt;span&gt;i&lt;/span&gt;.&lt;span&gt;childrenList&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;infer&quot;&gt;infer&lt;/h2&gt;&lt;p&gt;表示在 extends 条件语句中待推断的类型变量。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ParamType&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = &lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; (&lt;span&gt;param&lt;/span&gt;: &lt;span&gt;infer&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;) =&amp;gt; &lt;span&gt;any&lt;/span&gt; ? &lt;span&gt;P&lt;/span&gt; : &lt;span&gt;T&lt;/span&gt;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这句话的意思是：如果 T 能赋值给 (param: infer P) =&amp;gt; any，则结果是 (param: infer P) =&amp;gt; any 类型中的参数 P，否则返回为 T。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; { 
    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;string&lt;/span&gt;; 
    &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;number&lt;/span&gt;; 
} 
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Func&lt;/span&gt; = (&lt;span&gt;user&lt;/span&gt;: &lt;span&gt;User&lt;/span&gt;) =&amp;gt; &lt;span&gt;void&lt;/span&gt; 
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Param&lt;/span&gt; = &lt;span&gt;ParamType&lt;/span&gt;&amp;lt;&lt;span&gt;Func&lt;/span&gt;&amp;gt;; &lt;span&gt;// Param = User 
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;AA&lt;/span&gt; = &lt;span&gt;ParamType&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;; &lt;span&gt;// string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;
&lt;span&gt;// [string, number] -&amp;gt; string | number
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ElementOf&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; = &lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&amp;lt;&lt;span&gt;infer&lt;/span&gt; &lt;span&gt;E&lt;/span&gt;&amp;gt; ? &lt;span&gt;E&lt;/span&gt; : &lt;span&gt;never&lt;/span&gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;TTuple&lt;/span&gt; = [&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;number&lt;/span&gt;];

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ToUnion&lt;/span&gt; = &lt;span&gt;ElementOf&lt;/span&gt;&amp;lt;&lt;span&gt;TTuple&lt;/span&gt;&amp;gt;; &lt;span&gt;// string | number
&lt;/span&gt;&lt;span/&gt;

&lt;span&gt;// T1 | T2 -&amp;gt; T1 &amp;amp; T2
&lt;/span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;UnionToIntersection&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; = (&lt;span&gt;U&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; ? (&lt;span&gt;k&lt;/span&gt;: &lt;span&gt;U&lt;/span&gt;) =&amp;gt; &lt;span&gt;void&lt;/span&gt; : &lt;span&gt;never&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; ((&lt;span&gt;k&lt;/span&gt;: &lt;span&gt;infer&lt;/span&gt; &lt;span&gt;I&lt;/span&gt;) =&amp;gt; &lt;span&gt;void&lt;/span&gt;) ? &lt;span&gt;I&lt;/span&gt; : &lt;span&gt;never&lt;/span&gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Result&lt;/span&gt; = &lt;span&gt;UnionToIntersection&lt;/span&gt;&amp;lt;&lt;span&gt;T1&lt;/span&gt; | &lt;span&gt;T2&lt;/span&gt;&amp;gt;; &lt;span&gt;// T1 &amp;amp; T2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;typescript 关于类型限制还是非常强大的，由于文章有限，还有其他类型比如联合类型，交叉类型等读者可自行翻阅资料查看。刚开始接触范型以及其各种组合会感觉不熟练，接下来在项目中会慢慢应用，争取将 bug 降至最低限度。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d3f6fa65d1a90912f0278869d693e1d7</guid>
<title>头条二面：你确定 ThreadLocal 真的会造成内存泄露？</title>
<link>https://toutiao.io/k/bshdsuh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;点击上方&lt;/span&gt;&lt;span&gt;“中间件兴趣圈”&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;选择&lt;/span&gt;&lt;span&gt;“设为星标”&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做积极的人，越努力越幸运！&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486570&amp;amp;idx=1&amp;amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFtRsQop4YtGM7EiaiaXNibdElEDFKEfJmfXo7yxtC5GRPOJveia0HbBMRAW3NUV8qW77U0B5RF2uoxE8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;ThreadLocal，java面试过程中的“钉子户”，在网上也充斥着各种有关ThreadLocal内存泄露的问题，&lt;/span&gt;&lt;strong&gt;本文换个角度，先思考ThreadLocal体系中的ThreadLocalMap为什么要设计成弱引用&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;h2&gt;&lt;span&gt;1、ThreadLocal知识体系&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;本文还是不能免俗，在回答这个问题之前需要先和大家介绍一下ThreadLocal的知识，使大家对ThreadLocal有一个相对全面的认识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ThreadLocal本地线程变量，主要用于解决数据访问的竞争，通常用于多租户、全链路压测、链路跟踪中保存线程上下文环境，在一个请求流转中非常方便的获取一些关键信息，例如当前的租户信息、压测标记。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ThreadLocal正如其名，本地线程变量，即数据存储在线程自己的局部变量中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其整体架构如下图所示：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuhVhBDvbcZbuicCut1pOolVLUImNI4SWoa12ic73bBjTbuS8iayHCXDZTC8PuXhxfs3aicrYqV2ZPZkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; title=&quot;在这里插入图片描述&quot; data-ratio=&quot;0.4083333333333333&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;span&gt;ThreadLocal的核心设计理念总结如下：&lt;/span&gt;&lt;p&gt;&lt;span&gt;一言以蔽之：&lt;strong&gt;ThreadLocal是将线程需要访问的数据存储在线程对象自身中，从而避免多线程的竞争&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、为什么会被设计为弱引用呢？&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;接下来我们来看一下ThreadLocalMap的声明：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuhVhBDvbcZbuicCut1pOolVPfnWgXiaMMzYcjtKiaoN44aTsGmglVPDmdYtwpaJNXYSyEoUL3VcY6CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; title=&quot;在这里插入图片描述&quot; data-ratio=&quot;0.4824074074074074&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;什么？Map中的用于存储键值对的Entry为什么要继承WeakReference？&lt;/strong&gt;&lt;/span&gt;&lt;p&gt;&lt;span&gt;思考这个问题之前先和大家普及一下Java的4种引用类型，主要是在垃圾回收时java虚拟机会根据不同的引用类型采取不同的措施。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;强引用：java默认的引用类型，例如 Object a = new Object();其中 a 为强引用，new Object()为一个具体的对象。一个对象从根路径能找到强引用指向它，jvm虚拟机就不会回收。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软引用(SoftReference)：进行&lt;strong&gt;年轻代的垃圾回收&lt;/strong&gt;不会触发SoftReference所指向对象的回收；但如果触发Full GC，那SoftReference所指向的对象将被回收。&lt;strong&gt;备注：是除了软引用之外没有其他强引用引用的情况下&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;弱引用(WeakReference) :如果对象除了有弱引用指向它后没有其他强引用关联它，&lt;strong&gt;当进行年轻代垃圾回收时，该引用指向的对象就会被垃圾回收器回收。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;虚引用(PhantomeReference) 该引用指向的对象，无法对垃圾收集器收集对象时产生任何影响，但在执行垃圾回收后垃圾收集器会通过注册在PhantomeReference上的队列来通知应用程序对象被回收。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;从四种弱引用的实际作用来说，主要是与垃圾回收器配合，决策什么时候可以将被引用的对象回收。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论看起来有点晦涩难懂，接下来笔者将以图解的方式，争取将该问题阐述清楚。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuhVhBDvbcZbuicCut1pOolVF3bf6AtFmuDKQPiaHJM287jb17ibx61SZlEMnDeK89wxhhxZNHASCDEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; title=&quot;在这里插入图片描述&quot; data-ratio=&quot;0.5009259259259259&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;&lt;span&gt;根据第一部分，声明了一个TheadLocal对象，并且一个线程通过调用threadLocal对象的set(Object value)存储了一个对象，其引用如上图所示。&lt;/span&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;ThreadLocal的设计比较晦涩难懂，究其原因是我们通过threadLocal对象的set方法进行存储值，但数据并不是存储在ThreadLocal对象中，而是存储在当前调用该方法的线程对象中。但从应用者的角度来看，我们操作的对象是ThreadLocal，从设计上来说就应该为它考虑。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;试问一个问题：如果应用程序觉得ThreadLocal对象的使命完成，将threadLocal ref 设置为null，如果Entry中引用ThreadLocald对象的引用类型设置为强引用的话，会发生什么问题？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;答案是：ThreadLocal对象会无法被垃圾回收器回收，因为从thread对象出发，有强引用指向threadlocal obj。此时会违背用户的初衷，造成所谓的内存泄露。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于ThreadLocalMap中的key是指向ThreadLocal，故从设计角度来看，设计为弱引用，将不会干扰用户的释放ThreadLocal意图。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、大量Entry造成的内存溢出问题探讨&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;亮出了自己的观点，接下来我们再延伸一下，想再来谈谈网络上关于ThreadLocalMap中存储大量Entry对象导致的内存“泄露”问题。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;温馨提示：本节仅代表我当前的观点，希望各位读者朋友们带着批判与辨证的思维来一起看待问题，而不是人云亦云。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;网络观点：在使用ThreadLocal中set方法与remove方法需要成对执行，需要没有执行remove方法会造成内存泄露？甚至造成内存溢出？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的观点：当然能成对使用当然更好，但在实际情况中，其实不调用remove方法也不太容易造成内存溢出，因为从存储结构来看，除非创建海量线程，并且这些线程都不释放，导致大量线程内部持有的ThreadLocalMap中对象一直不会释放，但一个线程所持有的Entry对象个数不多，取决于关联的ThreadLocal对象个数，&lt;strong&gt;故我们需要的关注点而不是remove方法，而是防止线程资源泄露&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后推荐一篇关于笔者在实践全链路压测时对ThreadLocal进行的调研与方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484380&amp;amp;idx=1&amp;amp;sn=ff2e2aaf9cfc63ae60cedd07dea26733&amp;amp;chksm=e8c3f428dfb47d3e5c9019d8048de1be45a1f0a40ccb5e4566e38f5988e7c6ba085a5885fcdd&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;全链路跟踪(压测)必备基础组件之线程上下文“三剑客”&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;好了，本文就介绍到这里了，&lt;strong&gt;一键三连(关注、点赞、留言)是对我最大的鼓励&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;掌握一到两门java主流中间件，是敲开BAT等大厂必备的技能，送给大家一个Java中间件学习路线，助力大家实现职场的蜕变。&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486570&amp;amp;idx=1&amp;amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java进阶之梯，成长路线与学习资料，助力突破中间件领域&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java进阶之梯，成长路线与学习资料，助力突破中间件领域&lt;/a&gt;&lt;/p&gt;&lt;p&gt;最后分享笔者一个硬核的RocketMQ电子书，您将获得千亿级消息流转的运维经验。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.48203125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFsujHP5KXGTMibVaYCfRrxjYFvdf7Tk2wUbdYPibiaBfqRPJsY9FRq81ASBJyjiadoXibO6AuDQic4FgQBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; title=&quot;在这里插入图片描述&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIzNzgyMjYxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvs5UnzjhzrS6h29QXbfK4I0GLibNP4Qlpt1ovSdmwfsoY7D4JYUZzkACtqe3wrKh6icG7oHUTMibJbA/0?wx_fmt=png&quot; data-nickname=&quot;中间件兴趣圈&quot; data-alias=&quot;dingwpmz_zjj&quot; data-signature=&quot;《RocketMQ技术内幕》作者维护，主打成体系剖析JAVA主流中间件架构与设计原理，为构建完备的互联网分布式架构体系而努力，助力突破职场瓶颈。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;获取方式：关注公众号，回复RMQPDF即可免费获取。&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94155&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.9831460674157303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/b96CibCt70iabwjyojLhA03PtxUnkNPREnt2F48ywfXLpDdDAjicOTPI8Q94tVLbJ58tbRs12iaXDKhUOW9gd4NlFA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;178&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-style=&quot;white-space: normal; background-color: rgb(255, 255, 255); color: rgb(62, 62, 62); letter-spacing: 0.544px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot; class=&quot;js_darkmode__155&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93589&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;走进作者&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=e24d7d19006f0d66e697e8d2be4aa508&amp;amp;chksm=e8c3f33edfb47a286f4515c4b11e822c35eab9b6c7ada25ac2cce3d2f7e5dac0230b54c56646&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6831&quot; class=&quot;character&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;0&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6832&quot; class=&quot;character&quot;&gt;0&lt;/span&gt;&lt;span data-raw-text=&quot;年&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6833&quot; class=&quot;character&quot;&gt;年&lt;/span&gt;&lt;span data-raw-text=&quot;I&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6834&quot; class=&quot;character&quot;&gt;I&lt;/span&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6835&quot; class=&quot;character&quot;&gt;T&lt;/span&gt;&lt;span data-raw-text=&quot;老&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6836&quot; class=&quot;character&quot;&gt;老&lt;/span&gt;&lt;span data-raw-text=&quot;兵&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6837&quot; class=&quot;character&quot;&gt;兵&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6838&quot; class=&quot;character&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;职&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6839&quot; class=&quot;character&quot;&gt;职&lt;/span&gt;&lt;span data-raw-text=&quot;场&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6840&quot; class=&quot;character&quot;&gt;场&lt;/span&gt;&lt;span data-raw-text=&quot;新&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6841&quot; class=&quot;character&quot;&gt;新&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6842&quot; class=&quot;character&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6843&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6844&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6845&quot; class=&quot;character&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6846&quot; class=&quot;character&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;议&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6847&quot; class=&quot;character&quot;&gt;议&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486100&amp;amp;idx=1&amp;amp;sn=3166338465f9b4a47ad93ecf13df6e48&amp;amp;chksm=e8c3fd60dfb47476e0c3ff65673eee47a5b99c7455f70252d08d6d0330828ea9050b27526a7d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;“我”被阿里巴巴宠幸了&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485407&amp;amp;idx=1&amp;amp;sn=0e0de515b3a66ac91e55fdf583be5c0d&amp;amp;chksm=e8c3f02bdfb4793daecebbead9c5cdf6e64da25b80f2fd3f2bcfcc52a6c3a57b2414298bd0b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6848&quot; class=&quot;character&quot;&gt;程&lt;/span&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6849&quot; class=&quot;character&quot;&gt;序&lt;/span&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6850&quot; class=&quot;character&quot;&gt;员&lt;/span&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6851&quot; class=&quot;character&quot;&gt;如&lt;/span&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6852&quot; class=&quot;character&quot;&gt;何&lt;/span&gt;&lt;span data-raw-text=&quot;提&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6853&quot; class=&quot;character&quot;&gt;提&lt;/span&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6854&quot; class=&quot;character&quot;&gt;高&lt;/span&gt;&lt;span data-raw-text=&quot;影&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6855&quot; class=&quot;character&quot;&gt;影&lt;/span&gt;&lt;span data-raw-text=&quot;响&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6856&quot; class=&quot;character&quot;&gt;响&lt;/span&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6857&quot; class=&quot;character&quot;&gt;力&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485573&amp;amp;idx=1&amp;amp;sn=4d936fa700b38b5158316bdaf1aeac68&amp;amp;chksm=e8c3ff71dfb476675613afe09c682bc5fbd454b35f8d3d6d0458360149d5f0d673965c8852c4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;优秀程序员必备技能之如何高效阅读源码&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484822&amp;amp;idx=1&amp;amp;sn=ecaada01b1bcf73b3a9fb750872b8e9d&amp;amp;chksm=e8c3f262dfb47b74d6f03be903dc734953e83ee720ac5b98e7ffcd92da39df5d68308b26bf85&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;我的另一种参与 RocketMQ 开源社区的方式&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击查看“&lt;/span&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;span&gt;”，&lt;strong&gt;可直接进入[中间件兴趣圈]文章合集&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2cbf7f714f4b1495fc8a81bef3962449</guid>
<title>轻松搞定 Prometheus Eureka 服务发现</title>
<link>https://toutiao.io/k/1ymgya3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Prometheus服务发现机制之Eureka&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Eureka服务发现协议允许使用&lt;code&gt;Eureka Rest API&lt;/code&gt;检索出Prometheus需要监控的targets，Prometheus会定时周期性的从Eureka调用&lt;code&gt;Eureka Rest API&lt;/code&gt;，并将每个应用实例创建出一个target。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Eureka服务发现协议支持对如下元标签进行&lt;code&gt;relabeling&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_name&lt;/code&gt;: the name of the app&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_id&lt;/code&gt;: the ID of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_hostname&lt;/code&gt;: the hostname of the instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_homepage_url&lt;/code&gt;: the homepage url of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_statuspage_url&lt;/code&gt;: the status page url of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_healthcheck_url&lt;/code&gt;: the health check url of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_ip_addr&lt;/code&gt;: the IP address of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_vip_address&lt;/code&gt;: the VIP address of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_secure_vip_address&lt;/code&gt;: the secure VIP address of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_status&lt;/code&gt;: the status of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_port&lt;/code&gt;: the port of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_port_enabled&lt;/code&gt;: the port enabled of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_secure_port&lt;/code&gt;: the secure port address of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_secure_port_enabled&lt;/code&gt;: the secure port of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_country_id&lt;/code&gt;: the country ID of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_metadata_&amp;lt;metadataname&amp;gt;&lt;/code&gt;: app instance metadata&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_datacenterinfo_name&lt;/code&gt;: the datacenter name of the app instance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;__meta_eureka_app_instance_datacenterinfo_&amp;lt;metadataname&amp;gt;&lt;/code&gt;: the datacenter metadata&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;eureka_sd_configs&lt;/code&gt;配置可选项如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# The URL to connect to the Eureka server.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;server:&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Sets the `Authorization` header on every request with the&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# configured username and password.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# password and password_file are mutually exclusive.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;basic_auth:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;username:&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;password:&lt;/span&gt; &lt;span&gt;&amp;lt;secret&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;password_file:&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Optional `Authorization` header configuration.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;authorization:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Sets the authentication type.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;type:&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;default:&lt;/span&gt; &lt;span&gt;Bearer&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Sets the credentials. It is mutually exclusive with&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# `credentials_file`.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;credentials:&lt;/span&gt; &lt;span&gt;&amp;lt;secret&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# Sets the credentials to the credentials read from the configured file.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# It is mutually exclusive with `credentials`.&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;credentials_file:&lt;/span&gt; &lt;span&gt;&amp;lt;filename&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Optional OAuth 2.0 configuration.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Cannot be used at the same time as basic_auth or authorization.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;oauth2:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;&amp;lt;oauth2&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Configures the scrape request&#x27;s TLS settings.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;tls_config:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;[&lt;/span&gt; &lt;span&gt;&amp;lt;tls_config&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Optional proxy URL.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt; &lt;span&gt;proxy_url:&lt;/span&gt; &lt;span&gt;&amp;lt;string&amp;gt;&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Configure whether HTTP requests follow HTTP 3xx redirects.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt; &lt;span&gt;follow_redirects:&lt;/span&gt; &lt;span&gt;&amp;lt;bool&amp;gt;&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Refresh interval to re-read the app instance list.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[&lt;/span&gt; &lt;span&gt;refresh_interval:&lt;/span&gt; &lt;span&gt;&amp;lt;duration&amp;gt;&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;30s&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;协议分析&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过前面分析的Prometheus服务发现原理以及基于文件方式服务发现协议实现的分析，Eureka服务发现大致原理如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCqud0av3BkllS4ZY4gWICzICNA36cia2HPiczLYwavBQNzzicnhictYd3QUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过解析配置中&lt;code&gt;eureka_sd_configs&lt;/code&gt;协议的job生成Config，然后&lt;code&gt;NewDiscovery&lt;/code&gt;方法创建出对应的&lt;code&gt;Discoverer&lt;/code&gt;，最后调用&lt;code&gt;Discoverer.Run()&lt;/code&gt;方法启动服务发现targets。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、基于文件服务发现配置解析&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们定义如下job:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;-&lt;/span&gt; &lt;span&gt;job_name:&lt;/span&gt; &lt;span&gt;&#x27;eureka&#x27;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;eureka_sd_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;server:&lt;/span&gt; &lt;span&gt;http://localhost:8761/eureka&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会被解析成&lt;code&gt;eureka.SDConfig&lt;/code&gt;如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCquD0WeXFYBgOzkqXZUTKBcxGicd4y2iajwdZibP5PGmQQ3U7DnDibfYJTIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;eureka.SDConfig&lt;/code&gt;定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; SDConfig &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// eureka-server地址&lt;/span&gt;&lt;br/&gt; Server           &lt;span&gt;string&lt;/span&gt;                  &lt;span&gt;`yaml:&quot;server,omitempty&quot;`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// http请求client配置，如:认证信息&lt;/span&gt;&lt;br/&gt; HTTPClientConfig config.HTTPClientConfig &lt;span&gt;`yaml:&quot;,inline&quot;`&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 周期刷新间隔，默认30s&lt;/span&gt;&lt;br/&gt; RefreshInterval  model.Duration          &lt;span&gt;`yaml:&quot;refresh_interval,omitempty&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;code&gt;Discovery&lt;/code&gt;创建&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewDiscovery&lt;/span&gt;&lt;span&gt;(conf *SDConfig, logger log.Logger)&lt;/span&gt; &lt;span&gt;(*Discovery, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; rt, err := config.NewRoundTripperFromConfig(conf.HTTPClientConfig, &lt;span&gt;&quot;eureka_sd&quot;&lt;/span&gt;, config.WithHTTP2Disabled())&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; d := &amp;amp;Discovery{&lt;br/&gt;  client: &amp;amp;http.Client{Transport: rt},&lt;br/&gt;  server: conf.Server,&lt;br/&gt; }&lt;br/&gt; d.Discovery = refresh.NewDiscovery(&lt;br/&gt;  logger,&lt;br/&gt;  &lt;span&gt;&quot;eureka&quot;&lt;/span&gt;,&lt;br/&gt;  time.Duration(conf.RefreshInterval),&lt;br/&gt;  d.refresh,&lt;br/&gt; )&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; d, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;code&gt;Discovery&lt;/code&gt;创建完成，最后会调用&lt;code&gt;Discovery.Run()&lt;/code&gt;启动服务发现：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上一节分析的服务发现之File机制类似，执行Run方法时会执行&lt;code&gt;tgs, err := d.refresh(ctx)&lt;/code&gt;，然后创建定时周期触发器，不停执行&lt;code&gt;tgs, err := d.refresh(ctx)&lt;/code&gt;，将返回的&lt;code&gt;targets&lt;/code&gt;结果信息通过channel传递出去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、上面&lt;code&gt;Run&lt;/code&gt;方法核心是调用&lt;code&gt;d.refresh(ctx)&lt;/code&gt;逻辑获取&lt;code&gt;targets&lt;/code&gt;，基于&lt;code&gt;Eureka&lt;/code&gt;发现协议主要实现逻辑就在这里：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(d *Discovery)&lt;/span&gt; &lt;span&gt;refresh&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt; &lt;span&gt;([]*targetgroup.Group, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 通过Eureka REST API接口从eureka拉取元数据：http://ip:port/eureka/apps&lt;/span&gt;&lt;br/&gt; apps, err := fetchApps(ctx, d.server, d.client)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; tg := &amp;amp;targetgroup.Group{&lt;br/&gt;  Source: &lt;span&gt;&quot;eureka&quot;&lt;/span&gt;,&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; _, app := &lt;span&gt;range&lt;/span&gt; apps.Applications {&lt;span&gt;//遍历app&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// targetsForApp()方法将app下每个instance部分转成target&lt;/span&gt;&lt;br/&gt;  targets := targetsForApp(&amp;amp;app)&lt;br/&gt;        &lt;span&gt;//假如到&lt;/span&gt;&lt;br/&gt;  tg.Targets = &lt;span&gt;append&lt;/span&gt;(tg.Targets, targets...)&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; []*targetgroup.Group{tg}, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;refresh&lt;/code&gt;方法主要有两个流程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;code&gt;fetchApps()&lt;/code&gt;：从&lt;code&gt;eureka-server&lt;/code&gt;的&lt;code&gt;/eureka/apps&lt;/code&gt;接口拉取注册服务信息；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;code&gt;targetsForApp()&lt;/code&gt;：遍历&lt;code&gt;app&lt;/code&gt;下&lt;code&gt;instance&lt;/code&gt;，将每个&lt;code&gt;instance&lt;/code&gt;解析出一个&lt;code&gt;target&lt;/code&gt;，并添加一堆元标签数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下就是从eureka-server的/eureka/apps接口拉取的注册服务信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;applications&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;versions__delta&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;span&gt;versions__delta&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;apps__hashcode&lt;/span&gt;&amp;gt;&lt;/span&gt;UP_1_&lt;span&gt;&amp;lt;/&lt;span&gt;apps__hashcode&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;SERVICE-PROVIDER-01&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;instance&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;instanceId&lt;/span&gt;&amp;gt;&lt;/span&gt;localhost:service-provider-01:8001&lt;span&gt;&amp;lt;/&lt;span&gt;instanceId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;hostName&lt;/span&gt;&amp;gt;&lt;/span&gt;192.168.3.121&lt;span&gt;&amp;lt;/&lt;span&gt;hostName&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;app&lt;/span&gt;&amp;gt;&lt;/span&gt;SERVICE-PROVIDER-01&lt;span&gt;&amp;lt;/&lt;span&gt;app&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;ipAddr&lt;/span&gt;&amp;gt;&lt;/span&gt;192.168.3.121&lt;span&gt;&amp;lt;/&lt;span&gt;ipAddr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;status&lt;/span&gt;&amp;gt;&lt;/span&gt;UP&lt;span&gt;&amp;lt;/&lt;span&gt;status&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;overriddenstatus&lt;/span&gt;&amp;gt;&lt;/span&gt;UNKNOWN&lt;span&gt;&amp;lt;/&lt;span&gt;overriddenstatus&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;port&lt;/span&gt; &lt;span&gt;enabled&lt;/span&gt;=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;8001&lt;span&gt;&amp;lt;/&lt;span&gt;port&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;securePort&lt;/span&gt; &lt;span&gt;enabled&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;443&lt;span&gt;&amp;lt;/&lt;span&gt;securePort&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;countryId&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;span&gt;countryId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;dataCenterInfo&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;MyOwn&lt;span&gt;&amp;lt;/&lt;span&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;dataCenterInfo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;leaseInfo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;renewalIntervalInSecs&lt;/span&gt;&amp;gt;&lt;/span&gt;30&lt;span&gt;&amp;lt;/&lt;span&gt;renewalIntervalInSecs&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;durationInSecs&lt;/span&gt;&amp;gt;&lt;/span&gt;90&lt;span&gt;&amp;lt;/&lt;span&gt;durationInSecs&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;registrationTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;1629385562130&lt;span&gt;&amp;lt;/&lt;span&gt;registrationTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;lastRenewalTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;1629385682050&lt;span&gt;&amp;lt;/&lt;span&gt;lastRenewalTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;evictionTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span&gt;&amp;lt;/&lt;span&gt;evictionTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;serviceUpTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;1629385562132&lt;span&gt;&amp;lt;/&lt;span&gt;serviceUpTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;leaseInfo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;metadata&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;management.port&lt;/span&gt;&amp;gt;&lt;/span&gt;8001&lt;span&gt;&amp;lt;/&lt;span&gt;management.port&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;scrape__enable&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;scrape__enable&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;scrape.port&lt;/span&gt;&amp;gt;&lt;/span&gt;8080&lt;span&gt;&amp;lt;/&lt;span&gt;scrape.port&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;metadata&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;homePageUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;http://192.168.3.121:8001/&lt;span&gt;&amp;lt;/&lt;span&gt;homePageUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;statusPageUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;http://192.168.3.121:8001/actuator/info&lt;span&gt;&amp;lt;/&lt;span&gt;statusPageUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;healthCheckUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;http://192.168.3.121:8001/actuator/health&lt;span&gt;&amp;lt;/&lt;span&gt;healthCheckUrl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;vipAddress&lt;/span&gt;&amp;gt;&lt;/span&gt;service-provider-01&lt;span&gt;&amp;lt;/&lt;span&gt;vipAddress&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;secureVipAddress&lt;/span&gt;&amp;gt;&lt;/span&gt;service-provider-01&lt;span&gt;&amp;lt;/&lt;span&gt;secureVipAddress&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;isCoordinatingDiscoveryServer&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;span&gt;isCoordinatingDiscoveryServer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;lastUpdatedTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;1629385562132&lt;span&gt;&amp;lt;/&lt;span&gt;lastUpdatedTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;lastDirtyTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;1629385562039&lt;span&gt;&amp;lt;/&lt;span&gt;lastDirtyTimestamp&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;actionType&lt;/span&gt;&amp;gt;&lt;/span&gt;ADDED&lt;span&gt;&amp;lt;/&lt;span&gt;actionType&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;instance&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;application&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;applications&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、&lt;code&gt;instance&lt;/code&gt;信息解析&lt;code&gt;target&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;targetsForApp&lt;/span&gt;&lt;span&gt;(app *Application)&lt;/span&gt; []&lt;span&gt;model&lt;/span&gt;.&lt;span&gt;LabelSet&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; targets := &lt;span&gt;make&lt;/span&gt;([]model.LabelSet, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(app.Instances))&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// Gather info about the app&#x27;s &#x27;instances&#x27;. Each instance is considered a task.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; _, t := &lt;span&gt;range&lt;/span&gt; app.Instances {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; targetAddress &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// __address__取值方式：instance.hostname和port，没有port则默认port=80&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; t.Port != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   targetAddress = net.JoinHostPort(t.HostName, strconv.Itoa(t.Port.Port))&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   targetAddress = net.JoinHostPort(t.HostName, &lt;span&gt;&quot;80&quot;&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  target := model.LabelSet{&lt;br/&gt;   model.AddressLabel:  lv(targetAddress),&lt;br/&gt;   model.InstanceLabel: lv(t.InstanceID),&lt;br/&gt;&lt;br/&gt;   appNameLabel:                     lv(app.Name),&lt;br/&gt;   appInstanceHostNameLabel:         lv(t.HostName),&lt;br/&gt;   appInstanceHomePageURLLabel:      lv(t.HomePageURL),&lt;br/&gt;   appInstanceStatusPageURLLabel:    lv(t.StatusPageURL),&lt;br/&gt;   appInstanceHealthCheckURLLabel:   lv(t.HealthCheckURL),&lt;br/&gt;   appInstanceIPAddrLabel:           lv(t.IPAddr),&lt;br/&gt;   appInstanceVipAddressLabel:       lv(t.VipAddress),&lt;br/&gt;   appInstanceSecureVipAddressLabel: lv(t.SecureVipAddress),&lt;br/&gt;   appInstanceStatusLabel:           lv(t.Status),&lt;br/&gt;   appInstanceCountryIDLabel:        lv(strconv.Itoa(t.CountryID)),&lt;br/&gt;   appInstanceIDLabel:               lv(t.InstanceID),&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; t.Port != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   target[appInstancePortLabel] = lv(strconv.Itoa(t.Port.Port))&lt;br/&gt;   target[appInstancePortEnabledLabel] = lv(strconv.FormatBool(t.Port.Enabled))&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; t.SecurePort != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   target[appInstanceSecurePortLabel] = lv(strconv.Itoa(t.SecurePort.Port))&lt;br/&gt;   target[appInstanceSecurePortEnabledLabel] = lv(strconv.FormatBool(t.SecurePort.Enabled))&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; t.DataCenterInfo != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   target[appInstanceDataCenterInfoNameLabel] = lv(t.DataCenterInfo.Name)&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; t.DataCenterInfo.Metadata != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, m := &lt;span&gt;range&lt;/span&gt; t.DataCenterInfo.Metadata.Items {&lt;br/&gt;     ln := strutil.SanitizeLabelName(m.XMLName.Local)&lt;br/&gt;     target[model.LabelName(appInstanceDataCenterInfoMetadataPrefix+ln)] = lv(m.Content)&lt;br/&gt;    }&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; t.Metadata != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;for&lt;/span&gt; _, m := &lt;span&gt;range&lt;/span&gt; t.Metadata.Items {&lt;br/&gt;                &lt;span&gt;// prometheus label只支持[^a-zA-Z0-9_]字符，其它非法字符都会被替换成下划线_&lt;/span&gt;&lt;br/&gt;    ln := strutil.SanitizeLabelName(m.XMLName.Local)&lt;br/&gt;    target[model.LabelName(appInstanceMetadataPrefix+ln)] = lv(m.Content)&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  targets = &lt;span&gt;append&lt;/span&gt;(targets, target)&lt;br/&gt;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; targets&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解析比较简单，就不再分析，解析后的标签数据如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.59296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCqG2HGKedZUgAOcyy2MMx1JQXI8wTVMrUKSNhIS4WGIv4G0qvJ9pX2xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;标签中有两个特别说明下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;code&gt;__address__&lt;/code&gt;：这个取值instance.hostname和port(默认80)，所以要注意注册到eureka上的hostname准确性，不然可能无法抓取；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;code&gt;metadata-map&lt;/code&gt;数据会被转成&lt;code&gt;__meta_eureka_app_instance_metadata_&amp;lt;metadataname&amp;gt;&lt;/code&gt;格式标签，&lt;code&gt;prometheus&lt;/code&gt;进行&lt;code&gt;relabeling&lt;/code&gt; 一般操作&lt;code&gt;metadata-map&lt;/code&gt;，可以自定义&lt;code&gt;metric_path&lt;/code&gt;、抓取端口等；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;code&gt;prometheus&lt;/code&gt;的&lt;code&gt;label&lt;/code&gt;只支持&lt;code&gt;[a-zA-Z0-9_]&lt;/code&gt;，其它非法字符都会被转换成下划线，具体参加：&lt;code&gt;strutil.SanitizeLabelName(m.XMLName.Local)&lt;/code&gt;；但是eureka的metadata-map标签含有下划线时，注册到eureka-server上变成双下划线，如下配置:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;eureka:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;instance:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata-map:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;scrape_enable:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;scrape.port:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过/eureka/apps获取如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3723196881091618&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCqM2X2u3k72ZQuOCOxq41H7tbwPeMLjhDeTCnUeBHmQBFWKk5Ricsq8oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;513&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Eureka方式的服务原理如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCqud0av3BkllS4ZY4gWICzICNA36cia2HPiczLYwavBQNzzicnhictYd3QUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大概说明：&lt;code&gt;Discoverer&lt;/code&gt;启动后定时周期触发从&lt;code&gt;eureka server&lt;/code&gt;的&lt;code&gt;/eureka/apps&lt;/code&gt;接口拉取注册服务元数据，然后通过&lt;code&gt;targetsForApp&lt;/code&gt;遍历&lt;code&gt;app&lt;/code&gt;下的&lt;code&gt;instance&lt;/code&gt;，将每个&lt;code&gt;instance&lt;/code&gt;解析成&lt;code&gt;target&lt;/code&gt;，并将其它元数据信息转换成&lt;code&gt;target&lt;/code&gt;原标签可以用于&lt;code&gt;target&lt;/code&gt;抓取前&lt;code&gt;relabeling&lt;/code&gt;操作。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a7024ef8ba150b586fd60cc86eb14db5</guid>
<title>《解构领域驱动设计》第一章</title>
<link>https://toutiao.io/k/j8efmbq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        &lt;p&gt;计算机编程的本质就是控制复杂度。&lt;/p&gt;
&lt;p&gt;——Brian Kernighan&lt;/p&gt;
&lt;p&gt;复杂的事物中蕴含着无穷的变化，让人既沉迷其美，又深恐自己无法掌控。我们每日每时对软件的构建就在与复杂的斗争中不断前行。软件系统的复杂度让我觉得设计有趣，因为每次发现不同的问题，都会有一种让人耳目一新的滋味油然而生，仿佛开启了新的旅程，看到了不同的风景。同时，软件系统的复杂度又让我觉得设计无趣，因为要探索的空间实在太辽阔，一旦视野被风景所惑，就会迷失前进的方向，感到复杂难以掌控，从而失去构建高质量系统的信心。&lt;/p&gt;
&lt;p&gt;那么，什么是复杂系统？&lt;/p&gt;
&lt;span id=&quot;more&quot;/&gt;



&lt;h2 id=&quot;1-1-什么是复杂系统&quot;&gt;&lt;a href=&quot;#1-1-什么是复杂系统&quot; class=&quot;headerlink&quot; title=&quot;1.1　什么是复杂系统&quot;/&gt;1.1　什么是复杂系统&lt;/h2&gt;&lt;p&gt;我们很难给复杂系统下一个举世公认的定义。专门从事复杂系统研究的Melanie Mitchell在接受Ubiquity杂志专访时，“勉为其难”地为复杂系统给出了一个相对通俗的定义：”由大量相互作用的部分组成的系统。与整个系统比起来，这些组成部分相对简单，没有中央控制，组成部分之间也没有全局性的通信，并且组成部分的相互作用导致了复杂行为。”&lt;/p&gt;
&lt;p&gt;这个定义庶几可以表达软件复杂度的特征。定义中的“组成部分”对于软件系统，就是所谓的“软件元素”，基于粒度的不同可以是函数、类、模块、组件和服务等。这些软件元素相对简单，然而彼此之间的相互作用却导致了软件系统的复杂行为。软件系统符合复杂系统的定义，不过是进一步证明了软件系统的复杂度。然而该如何控制软件系统的复杂度呢？恐怕还要从复杂度的成因开始剖析。&lt;/p&gt;
&lt;p&gt;Jurgen Appelo从理解能力与预测能力两个维度分析了复杂度的成因。这两个维度各自分为不同的复杂层次：&lt;/p&gt;

&lt;p&gt;两个维度都蕴含了“复杂”的含义：前者与简单相对，意为复杂至难以理解，可阐释为“复杂难解”；后者与有序相对，意为它的发展规律难以预测，可阐释为“复杂难测”。在预测能力维度，“难测”还不是最复杂的层次，最高层次为混沌，即根本不可预测。两个维度交叉，可以形成6种代表不同复杂意义的层次定义，Jurgen Appelo通过图1-1形象地说明了各个复杂层次的特征。&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/1-1.png&quot; class=&quot;&quot;/&gt;

&lt;p&gt;图1-1　复杂系统的特征 &lt;/p&gt;
&lt;p&gt;以下是Jurgen Appelo对这些例子给出的说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 我的内衣很简单。我很容易理解它们的工作原理。我的手表是精密复杂的，如果把它拆开，我需要很长时间才能了解其设计原理和组件。但是我的手表或我的内衣都没有什么让人吃惊的（至少对我而言）。它们是有序的、可以预测的系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 一个三人软件开发团队也是简单的，只需要开几次会议，提供一些晚餐，外加几杯啤酒，就可以了解这个团队的每一个人了。一座城市是不简单的、繁杂的，出租车司机需要几年时间才能熟悉这座城市的所有街道、胡同、宾馆和饭店。但同时，团队和城市又都是复杂的。不管你有多了解它们，总会有意想不到的事情发生它们身上。在某种程度上，它们是可预测的，但是你永远不清楚明天会发生什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 双摆（两个摆锤互相连接）也是一个简单的系统，容易制作也很容易理解。但因为对钟摆的初始设置具有高度敏感性，所以它进行的是不可预测的混沌运动。股票市场也是混沌的，根据定义，它是不可预测的，否则每个人都知道怎么利用股票交易来赚钱，就会导致整个系统崩盘。但是，股票市场又不像钟摆那样，它是相当繁杂的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;软件系统属于哪一个复杂层次呢？&lt;/p&gt;
&lt;p&gt;大多数软件系统需要实现的整体功能往往是难以理解的，同时，随着需求的不断演进，它又在一定程度具有未来的不可预测性，这意味着软件系统的“复杂”同时覆盖了“复杂难解”（complicated）与“复杂难测”（complex）两个层面，对标图1-1给出的案例，就是一座城市的复杂特征。无独有偶，Pete Goodliffe也将软件系统类比为城市，他说：“软件系统就像一座由建筑和后面的路构成的城市——由公路和旅馆构成的错综复杂的网络。在繁忙的城市里发生着许多事情，控制流不断产生，它们的生命在城市中交织在一起，然后死亡。丰富的数据积聚在一起、存储起来，然后销毁。有各式各样的建筑：有的高大美丽，有的低矮实用，还有的坍塌破损。数据围绕着它们流动，形成了交通堵塞和追尾、高峰时段和道路维护。”既然如此，那么设计一个软件系统就像规划一座城市，既要考虑城市布局，以便居民的生活与工作，满足外来游客或商务人员的旅游或出差需求，又要考虑未来因素的变化，例如“当居民对城市的使用方式有所变化，或者受到外力的影响时，城市就会相应地演化”。参考城市的复杂度特征，我们要剖析软件系统的复杂度，就可以从理解能力与预测能力这两个维度探索软件复杂度的成因。&lt;/p&gt;
&lt;h2 id=&quot;1-2-理解能力&quot;&gt;&lt;a href=&quot;#1-2-理解能力&quot; class=&quot;headerlink&quot; title=&quot;1.2　理解能力&quot;/&gt;1.2　理解能力&lt;/h2&gt;&lt;p&gt;是什么阻碍了开发人员对软件系统的理解？设想项目组招入一位新人，当这位新人需要理解整个项目时，就像一位游客来到一座陌生的城市。他是否会迷失在错综复杂的城市交通体系中，不辨方向？倘若这座城市实则是乡野郊外的一座村落，只有房屋数间，一条街道连通城市的两头，他还会生出迷失之感吗？&lt;/p&gt;
&lt;p&gt;因而，影响理解能力的第一要素是规模。&lt;/p&gt;
&lt;h3 id=&quot;1-2-1-规模&quot;&gt;&lt;a href=&quot;#1-2-1-规模&quot; class=&quot;headerlink&quot; title=&quot;1.2.1　规模&quot;/&gt;1.2.1　规模&lt;/h3&gt;&lt;p&gt;软件的需求决定了系统的规模。一个只有数十万行代码的软件系统自然不可与有数千万行代码的大规模系统相提并论。软件系统的规模取决于需求的数量，更何况需求还会像树木那样生长。一棵小树会随着时间增长渐渐长成一棵参天大树，只有到了某个时间节点，需求的数量才会慢慢稳定下来。当需求呈现线性增长的趋势时，为了实现这些功能，软件规模也会以近似的速度增长。&lt;/p&gt;
&lt;p&gt;系统规模的扩张，不仅取决需求的数量，还取决于需求功能点之间的关系。需求的每个功能不可能做到完全独立，彼此之间相互影响相互依赖，修改一处就会牵一发而动全身，就好似城市中的某条道路因为施工需要临时关闭，车辆只得改道绕行，这又导致了其他原本已经饱和的道路因为涌入更多车辆而变得更加拥堵。这种拥堵现象又会顺势向其他分叉道路蔓延，形成辐射效应。&lt;/p&gt;
&lt;p&gt;软件开发的拥堵现象或许更严重，这是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数存在副作用，调用时可能对函数的结果做了隐含的假设；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的职责繁多，导致开发人员不敢轻易修改，因为不知会影响到哪些模块；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;热点代码被频繁变更，职责被包裹了一层又一层，没有清晰的边界；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在系统某个角落，隐藏着伺机而动的bug，当诱发条件具备时，就会让整条调用链瘫痪；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同的业务场景包含了不同的例外场景，每种例外场景的处理方式都各不相同；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步处理代码与异步处理代码纠缠在一起，不可预知程序执行的顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着软件系统规模的扩张，软件复杂度也会增长。这种增长并非线性的，而是呈现出更加陡峭的指数级趋势。这实际上是软件的熵发挥着副作用。正如David Thomas与Andrew Hunt认为的：“虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵的增加的重击。熵是一个物理学术语，它定义了一个系统的‘无序’总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。当软件中的无序化增加时，程序员会说‘软件在腐烂’。”&lt;/p&gt;
&lt;p&gt;软件之所以无法躲避熵的重击，源于我们在构建软件时无法避免技术债（technical debt） 。不管软件的架构师与开发人员有多么的优秀，他们针对目前需求做出的看似合理的技术决策，都会随着软件的演化变得不堪一击，区别仅在于债务的多少，以及偿还的利息有多高。根据Ward Cunningham的建议，对付技术债的唯一方案就是尽量让它可见，例如通过技术债列表或者技术债雷达等可视化形式及时呈现给团队成员，并制订计划主动地消除或降低技术债。&lt;/p&gt;
&lt;p&gt;我曾经负责设计与开发一款商业智能（business intelligence，BI）产品，它需要展现报表下的所有视图。这些视图的数据来自多个不同的数据集，视图的展现类型多种多样，如柱状图、折线图、散点图和热力图等。在这个“逼仄”的报表问题空间中，需要满足如下业务需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在编辑状态下，支持对每个视图进行拖曳以改变视图的位置；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在编辑状态下，允许通过拖曳边框调整视图的尺寸；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击视图的图形区域时，应高亮显示当前图形对应的组成部分；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击视图的图形区域时，获取当前值，并对属于相同数据集的视图进行联动；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果打开钻取开关，则在点击视图的图形区域时，获取当前值，并根据事先设定的钻取路径对视图进行钻取；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持创建筛选器这样的特殊视图，通过筛选器选择数据，对当前报表中所有相同数据集的视图进行筛选。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上业务需求都是事先规划好，并且可以清晰预见的，由于它们都对视图进行操作，因此视图控件的多个操作之间出现冲突。例如，高亮与级联都需要响应相同的点击事件。钻取同样如此，不同之处在于它要判断钻取开关是否已经打开。在操作效果上，高亮与钻取仅针对当前视图，联动与筛选则会因为当前视图的操作影响到同一张报表下相同数据集的其他视图。对于拖曳操作，虽然它监听的是MouseDown事件，但该事件与Click事件存在一定的冲突。&lt;/p&gt;
&lt;p&gt;多个功能点的开发实现以及功能点之间存在的千丝万缕的关系带来了软件规模的成倍扩张：不同的业务场景会增加不同的分支，导致圈复杂度的增加；设计上如果未能做到功能之间的正交，就会是的功能之间相互影响，导致代码维护成本的增加；没有为业务逻辑编写单元测试，建立功能代码的测试网，就可能因为对某一处功能实现的修改引入了潜在的缺陷，导致系统运行的风险增加。纷至沓来的技术债逐渐积累，一旦累积到某个临界点，就会由量变引起质变，在软件系统的规模达到巅峰之时，迅速步入衰亡的老年期，成为“可怕”的遗留系统（legacy system）。这遵循了饲养场的奶牛规则：奶牛逐渐衰老，最终无奶可挤；与此同时，奶牛的饲养成本却在上升。&lt;/p&gt;
&lt;p&gt;软件规模的一个显著特征是代码行数（lines of code）。然而，代码行数常常具有欺骗性。如果需求的功能数量与代码行数之间呈现出不成比例的关系，说明该系统的生命体征可能出现了异常，例如，代码行数的庞大其实可能是一种肥胖症，意味着可能出现了大量的重复代码。&lt;/p&gt;
&lt;p&gt;我曾经利用Sonar工具对咨询项目的一个模块执行代码静态分析，分析结果如图1-2所示。&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/1-2.png&quot; class=&quot;&quot;/&gt;

&lt;p&gt;图1-2　代码静态分析结果&lt;/p&gt;
&lt;p&gt;该模块代码共计40多万行，重复代码竟然占到了惊人的33.9%，超过一半的代码文件混入了重复代码。显然，这里估算的代码行数并没有真实地体现软件规模；相反，重复的代码还额外增加了软件的复杂度。&lt;/p&gt;
&lt;p&gt;Neal Ford认为需要通过指标指导设计 ，例如使用面向对象设计质量评估的平台工具iPlasma，通过它生成的指标可以作为评价软件规模的要素，如表1-1所示。&lt;/p&gt;
&lt;p&gt;表1-1　质量评估指标&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/t1-1.png&quot; class=&quot;&quot;/&gt;




&lt;p&gt;在面向对象设计的软件项目里，除了代码行数，包、类、方法的数量，继承的层次以及方法的调用数，还有我们常常提及的圈复杂度，都会或多或少地影响整个软件系统的规模。&lt;/p&gt;
&lt;h3 id=&quot;1-2-2-结构&quot;&gt;&lt;a href=&quot;#1-2-2-结构&quot; class=&quot;headerlink&quot; title=&quot;1.2.2　结构&quot;/&gt;1.2.2　结构&lt;/h3&gt;&lt;p&gt;你去过迷宫吗？相似而回旋繁复的结构使得封闭狭小的空间被魔法般地扩展为一个无限的空间，变得无穷大，仿佛这空间被安置了一个循环，倘若没有找到正确的退出条件，循环就会无休无止，永远无法退出。许多规模较小却格外复杂的软件系统，就好似这样的一座迷宫。&lt;/p&gt;
&lt;p&gt;此时，结构成了决定系统复杂度的一个关键因素。&lt;/p&gt;
&lt;p&gt;结构之所以变得复杂，多数情况下还是由系统的质量属性（quality attribute）决定的。例如，我们需要满足高性能、高并发的需求，就需要考虑在系统中引入缓存、并行处理、CDN、异步消息以及支持分区的可伸缩结构；又例如，我们需要支持对海量数据的高效分析，就得考虑这些海量数据该如何分布存储，并如何有效地利用各个节点的内存与CPU资源执行运算。&lt;/p&gt;
&lt;p&gt;从系统结构的视角看，单体架构一定比微服务架构更简单，更便于掌控，正如单细胞生物比人体的生理结构要简单。那么，为何还有这么多软件组织开始清算自己的软件资产，花费大量人力物力对现有的单体架构进行重构，走向微服务化？究其主因，还是系统的质量属性。&lt;/p&gt;
&lt;p&gt;纵观软件设计的历史，不是分久必合合久必分，而是不断拆分的微型化过程。分解的软件元素不可能单兵作战。怎么协同，怎么通信，就成了系统分解后面临的主要问题。如果没有控制好，这些问题固有的复杂度甚至会在某些场景下超过分解带来的收益。例如，对企业IT系统而言，系统与系统之间的集成往往通过与平台无关的消息通信来完成，由此就会在各个系统乃至模块之间形成复杂的通信网结构。要理清这种通信网结构的脉络，就得弄清楚系统之间消息的传递方式，明确消息格式的定义，即使在系统之间引入企业服务总线（Enterprise Service Bus，ESB），也只能减少点对点的通信量，而不能改变分布式系统固有的复杂度，例如消息通信不可靠，数据不一致等因为分布式通信导致的意外场景。换言之，系统因为结构的繁复增加了复杂度。&lt;/p&gt;
&lt;p&gt;软件系统的结构繁复还会增加软件组织的复杂度。系统架构的分解促成了软件构建工作的分工，这种分工虽然使得高效的并行开发成为可能，却也可能因为沟通成本的增加为管理带来挑战。管理一个十人团队和百人团队，其难度显然不可相提并论，对百人团队的管理也不仅仅是细分为10个十人团队这么简单，这其中牵涉到团队的划分依据、团队的协作模式、团队成员组成与角色构成等管理因素。&lt;/p&gt;
&lt;p&gt;康威定律（Conway’s law） 就指出：“任何组织在设计一套系统（广义概念上的系统）时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。”Sam Newman认为是需要“适应沟通途径”使得康威定律在软件结构与组织结构中生效。他分析了一种典型的分处异地的分布式团队。整个团队共享单个服务的代码所有权，由于分布式团队的地域和时区界限使得沟通成本变高，因此团队之间只能进行粗粒度的沟通。当协调变化的成本增加后，人们就会想方设法降低协调和沟通的成本。直截了当的做法就是分解代码，分配代码所有权，物理分隔的团队各自负责一部分代码库，从而能够更容易地修改代码，团队之间会有更多关于如何集成两部分代码的粗粒度的沟通。最终，与这种沟通路径匹配形成的粗粒度应用程序编程接口（application programming interface，API）构成了代码库中两部分之间的边界。&lt;/p&gt;
&lt;p&gt;注意，与设计方案相匹配的团队结构指的是负责开发的团队组织，而非使用软件产品的客户团队。我们常常遇见分布式的客户团队，例如，一些客户团队的不同的部门位于不同的地理位置，他们的使用场景也不尽相同，甚至用户的角色也不相同，但在对软件系统进行架构设计时，我们却不能按照部门组织、地理位置或用户角色来分解模块（服务），并错以为这遵循了康威定律。&lt;/p&gt;
&lt;p&gt;我曾经参与过一款通信产品的改进与维护工作。这是一款为通信运营商提供对宽带网的授权、认证与计费工作的产品，它的终端用户主要由两种角色组成：营业厅的营业员与购买宽带网服务的消费者。最初，设计该产品的架构师就错误地按照这两种不同的角色，将整个软件系统划分为后台管理系统与服务门户两个完全独立的子系统，为营业员与消费者都提供了资费套餐管理、话单查询、客户信息维护等相似的业务。两个子系统产生了大量重复代码，增加了软件系统的复杂度。在我接手该通信产品时，因为数据库性能瓶颈而考虑对话单数据库进行分库分表，发现该方案的调整需要同时修改后台管理系统与服务门户的话单查询功能。&lt;/p&gt;
&lt;p&gt;无论设计是优雅还是拙劣，系统结构都可能因为某种设计权衡而变得复杂。唯一的区别在于前者是主动地控制结构的复杂度，而后者带来的复杂度是偶发的，是错误的滋生，是一种技术债，它会随着系统规模的增大产生一种无序设计。《架构之美》中第2章“两个系统的故事：现代软件神话”详细地罗列了无序设计系统的几种警告信号：&lt;/p&gt;

&lt;p&gt;看一个无序设计的软件系统，就好像隔着一层半透明的玻璃观察事物，系统的软件元素都变得模糊不清，充斥着各种技术债。细节层面，代码污浊不堪，违背了“高内聚松耦合”的设计原则，要么许多代码放错了位置，要么出现重复的代码块；架构层面，缺乏清晰的边界，各种通信与调用依赖纠缠在一起，同一问题空间的解决方案各式各样，让人眼花缭乱，仿佛进入了没有规则的无序社会。&lt;/p&gt;
&lt;p&gt;分层架构的引入原本是为了维护系统的有序性，而如果团队却不注意维护逻辑分层确定的边界，不按照架构规定的层次分配各个类的职责，就会随着职责的乱入让逻辑分层形成的边界变得越来越模糊。我在对一个项目进行架构评审时，曾看到图1-3所示的三层架构。&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/1-3.png&quot; class=&quot;&quot;/&gt;

&lt;p&gt;图1-3　层次混乱的架构&lt;/p&gt;
&lt;p&gt;虽然架构师根据关注点的不同划分了不同的层次，但各个逻辑层没有守住自己的边界：业务逻辑层定义了EditableControlBase、EditablePageBase与PageBase等类，它们都继承自ASP.NET框架的UserControl用户控件类，同时又作为自定义用户控件的父类，提供了控件数据加载、提交等通用职责；继承这些父类的子类属于用户控件，定义在用户展现层，如EditablePageBase类的子类（如DictionaryTypeView、DictionaryView和DictionaryTypeList等）。一旦逻辑层没有守住自己的边界，分层架构模式就失去了规划清晰结构的价值。随着需求的增加，系统结构会变得越来越混乱，最终陷入无序设计的泥沼。&lt;/p&gt;
&lt;h2 id=&quot;1-3-预测能力&quot;&gt;&lt;a href=&quot;#1-3-预测能力&quot; class=&quot;headerlink&quot; title=&quot;1.3　预测能力&quot;/&gt;1.3　预测能力&lt;/h2&gt;&lt;p&gt;当我们掌握了事物发展的客观规律时，就具有了一定的对未来的预测能力。例如，我们洞察了万有引力的本质，就能够对观察到的宇宙天体建立模型，相对准确地推测出各个天体在未来一段时间的运行轨迹。然而，宇宙空间变化莫测，或许一个星球“死亡”产生的黑洞的吸噬能力，就可能导致那一片星域产生剧烈的动荡，这种动荡会传递到更远的星空，从而使天体的运行轨迹偏离我们的预测结果。毫无疑问，影响预测能力的关键要素在于变化。对变化的应对不妥，就会导致过度设计或设计不足。&lt;/p&gt;
&lt;h3 id=&quot;1-3-1-过度设计&quot;&gt;&lt;a href=&quot;#1-3-1-过度设计&quot; class=&quot;headerlink&quot; title=&quot;1.3.1　过度设计&quot;/&gt;1.3.1　过度设计&lt;/h3&gt;&lt;p&gt;设计软件系统时，变化让我们患得患失，不知道如何把握系统设计的度。若拒绝对变化做出理智的预测，系统的设计会变得僵化，一旦有新的变化发生，修改的成本会非常大；若过于看重变化产生的影响，渴望涵盖一切变化的可能，若预期的变化没有发生，我们之前为变化付出的成本就再也补偿不回来了，这就是所谓的“过度设计”。&lt;/p&gt;
&lt;p&gt;我曾经在设计一款教育行业产品时，因为考虑太多未来可能的变化，引入了不必要的抽象来保证产品的可扩展性，使得整个设计方案变得过于复杂。更加不幸的是，我所预知的变化根本不曾发生。该设计方案针对产品的UI引擎（UI engine）模块。作为驱动界面的引擎，它主要负责从界面元数据获取与界面相关的视图属性，并根据这些属性来构造界面，实现界面的可定制。产品展现的视图由诸多视图元素组合而成，这些视图元素的属性通过界面元数据进行定制。为此，我为视图元素定义了抽象的ViewElement接口，作为所有视图元素类型包括SelectView、CheckboxGroupView的抽象类型。&lt;/p&gt;
&lt;p&gt;ViewElement决定了视图元素的类型，从而确定呈现的格式；至于真正生成视图呈现代码的职责，则交给了视图元素的解析器。由于我认为视图元素的呈现除需要支持现有的JSP之外，未来可能还要支持HTML、Excel等实现元素，因此在设计解析器时，定义了ViewElementResolver接口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewElementResolver&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ViewElement element)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;




&lt;p&gt;ViewElementResolver接口确保了解析功能的可扩展性，为了更好地满足未来功能的变化，我又引入了解析器的工厂接口ViewElementResolverFactory以及实现该接口的抽象工厂类AbstractViewElementResolverFactory：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewElementResolverFactory&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;ViewElementResolver &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String viewElementClassName)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractViewElementResolverFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;title&quot;&gt;ViewElementResolverFactory&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ViewElementResolver &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String viewElementClassName)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      String className = generateResolverClassName(viewElementClassName);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//通过反射创建ViewElementResolver对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;generateResolverClassName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String viewElementClassName)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getPrefix() + viewElementClassName + &lt;span class=&quot;string&quot;&gt;&quot;Resolver&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPrefix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JspViewElementResolverFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractViewElementResolverFactory&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getPrefix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Jsp&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;




&lt;p&gt;ViewElement接口可以注入ViewElementResolverFactory对象，由它来创建ViewElementResolver，由此完成视图元素的呈现，例如SelectViewElement：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SelectViewElement&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewElement&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ViewElementResolver resolver;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ViewElementResolverFactory resolverFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setViewElementResolverFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ViewElementResolverFactory resolverFactory)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.resolverFactory = resolverFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      resolverFactory.create(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getClass().getName()).resolve(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;   }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;




&lt;p&gt;整个UI引擎模块的设计如图1-4所示。&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/1-4.png&quot; class=&quot;&quot;/&gt;

&lt;p&gt;图1-4　UI引擎模块的类图&lt;/p&gt;
&lt;p&gt;如此设计看似保证了视图元素呈现的可扩展性，也遵循了单一职责原则，却因为抽象过度而增加了方案的复杂度。扩展式设计是为不可知的未来做投资，一旦未来的变化不符合预期，就会导致过度设计。具有实证主义态度的设计理念是面对不可预测的变化时，应首先保证方案的简单性。当变化真正发生时，可以通过诸如提炼接口（extract interface）的重构手法，满足解析逻辑的扩展。方案中工厂接口与抽象工厂类的引入，根本没有贡献任何解耦与扩展的价值，反而带来了不必要的间接逻辑，让设计变得更加复杂。到产品研发的后期，我所预期的HTML和Excel呈现的需求变化实际并没有发生。&lt;/p&gt;
&lt;h3 id=&quot;1-3-2-设计不足&quot;&gt;&lt;a href=&quot;#1-3-2-设计不足&quot; class=&quot;headerlink&quot; title=&quot;1.3.2　设计不足&quot;/&gt;1.3.2　设计不足&lt;/h3&gt;&lt;p&gt;要应对需求变化，终归需要一些设计技巧。很多时候，因为设计人员的技能不足，没有明确识别出未来确认会发生的变化，或者对需求变化发展的方向缺乏前瞻，所以导致整个设计变得过于僵化，修改的成本太高，从而走向了过度设计的另外一个极端，我将这一问题称为“设计不足”。&lt;/p&gt;
&lt;p&gt;设计不足的方案只顾眼前，对于一定要发生的变化视而不见，这不仅导致方案缺乏可扩展性，甚至有可能出现技术实现方向的错误。这样的设计不是恰如其分的简单设计，而是对于糟糕质量视而不见的简陋处置，是为了应付进度蒙混过关用的临时花招，表面看来满足了进度要求，但在未来偿还欠下的债务时，需要付出几倍的成本。如果整个软件系统都由这样设计不足的方案构成，那么未来任何一次需求的变更或增加，都可能成为压垮系统的最后一根稻草。&lt;/p&gt;
&lt;p&gt;我曾负责一个基于大数据的数据平台的设计与开发，该数据平台需要实时采集来自某行业各个系统各种协议的业务数据，并按照主题区的数据模型标准来治理数据。当时，我对整个行业的数据标准与规范尚不了解，对于数据平台未来的产品规划也缺乏充分认识。迫于进度压力，我选择了采用快速而简洁的硬编码方式实现从原始数据到主题区模型对象的转换，这一设计让我们能够在规定的进度周期满足同时应对多家客户治理数据的要求。&lt;/p&gt;
&lt;p&gt;然而，作为一款数据平台产品，在该行业内进行广泛推广时，随着面向的客户越来越多，需要采集数据的上游系统也变得越来越多。此时，回首之前的方案设计，不由后悔不迭：方案的简陋导致了开发质量的低下和生产力的降低。此时的主题区划分已经趋于稳定，虽然需要支持的客户和上游系统越来越多，但要治理的数据所属的主题仍然在已有主题区范围之内，换言之，原始数据的协议是变化的，主题区的范围却相对稳定。通过对主题区模型与数据治理逻辑进行共性与可变性分析[7]，我识别出了原始数据消息的共性特征，建立了抽象的消息模型，又为主题区模型抽象出一套树形结构的核心主题模型，并基于此核心模型建立新的主题区模型。在确保主题区模型不变的情况下，找到数据治理逻辑中不变的转换过程与规则，将不同上游系统遵循不同数据协议而带来的变化转移到一个定义映射关系的样式配置文件中，形成对变化的隔离，实现了一个相对稳定的数据治理方案，如图1-5所示。&lt;/p&gt;
&lt;img src=&quot;/chapter-1-of-ddde/1-5.png&quot; class=&quot;&quot;/&gt;

&lt;p&gt;图1-5　隔离变化的设计方案&lt;/p&gt;
&lt;p&gt;采用新方案之后，如果需要采集一个不超出主题区范围的全新系统，只需定义一个样式映射文件，并付出极少量定制开发的成本，就能以最快的迭代进度满足新的数据治理需求。正因为改进了旧有方案，团队才能够在不断涌入新需求的功能压力下，基本满足产品研发的进度要求。只可惜，之前的数据治理功能已经被多家客户广泛运用到生产环境中，对应的数据交换逻辑也依托于旧的主题区模型，使得整个数据平台产品在近两年的开发周期中一直处于新旧两套主题区模型共存的尴尬局面。由于一部分数据治理和数据交换逻辑要对接两套主题区模型，因此，迫于无奈，也必须实现两套数据治理和数据交换逻辑，无谓地增加了团队的工作量。由于改造旧模型的工作量极为繁重，团队一直未能获得喘息的机会对模型以新汰旧，因此这一尴尬局面还会在一段时间内继续维持下去。这正是设计不足在应对变化时带来的负面影响。&lt;/p&gt;
&lt;p&gt;我们无法预知未来，自然就无法预测未来可能发生的变化，这就带来了软件系统的不可预测性。软件设计者不可能对变化听之任之，却又因为它的不可预测性而无可适从。在软件系统不断演化的过程中，面对变化，我们需要尽可能地保证方案的平衡：既要避免因为设计不足使得变化对系统产生根本影响，又要防止因为满足可扩展性让方案变得格外复杂，最后背上过度设计的坏名声。故而，变化之难，难在如何在设计不足与过度设计之间取得平衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;本章为《解构领域驱动设计》第一章。若希望购买本书，请点击如下链接：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://item.jd.com/13378760.html&quot;&gt;京东图书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://product.dangdang.com/684576584.html&quot;&gt;当当图书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.epubit.com/bookDetails?id=UB77d68d84212a6&quot;&gt;异步社区&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;

    
    
    
        

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>