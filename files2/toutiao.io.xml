<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cce8b7a76f2778288ac2943b8e2c65dd</guid>
<title>网络通信之Session的历史血脉</title>
<link>https://toutiao.io/k/xd4b8n2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;Session经常被大家翻译为【会话】，在一个应用内部设计架构中，它通常指进程内保存的状态数据或者属性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2007年&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2007年我的本科毕业设计里，用了很多JSP里嵌Java代码的操作。比如登录是这么写的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7466467958271237&quot; data-type=&quot;png&quot; data-w=&quot;671&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8VKfdZ0mhHrQgeXt1r32v8rFh32LZvBWXYrWft1m7FY30f6gjx5RUia5LsjBiayuesibick2aRX1BZXw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;运行效果是这样的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7466467958271237&quot; data-type=&quot;png&quot; data-w=&quot;671&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl8VKfdZ0mhHrQgeXt1r32v8KUvQyKdOyrc7tyT3tyS13sNRgAhDQZTHSonPCC321HCyQCqlic9p5pQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;对的，我就是用这么原始的技术成功的混到了毕业文凭。&lt;/p&gt;&lt;p&gt;我周围的男同学技术比我要好一些，他们的用法也比我要高级，前端JSP里没有调用Java代码，有专门的后端来处理。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;HttpSession hs&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;request.getSession();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;PrintWriter pw &lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt; response.getWriter();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;String msg &lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt; request.getParameter(&quot;ming&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;pw.println(msg);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;pw.println(hs.getId());&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;这两种方式本质上就是使用Java Servlet配合http协议标准来实现的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;HttpSession&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;服务器会为每一个用户 创建一个独立的HttpSession&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当用户第一次访问Servlet时,服务器端会给用户创建一个独立的Session&lt;/p&gt;&lt;p&gt;并且生成一个SessionID,这个SessionID在响应浏览器的时候会被装进cookie中,从而被保存到浏览器中&lt;/p&gt;&lt;p&gt;当用户再一次访问Servlet时,请求中会携带着cookie中的SessionID去访问&lt;/p&gt;&lt;p&gt;对于Servlet而言。服务器会根据这个SessionID去查看是否有对应的Session对象，有就拿出来使用;没有就创建一个Session(相当于用户第一次访问)。换句话说：若Servlet是客户端访问的第一个WEB应用的资源，则只有调用了request.getSession()或request.getSession(true) 才会创建HttpSession对象。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;域的范围&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    Context域 &amp;gt; Session域 &amp;gt; Request域&lt;/p&gt;&lt;p&gt;    Session域 只要会话不结束就会存在 但是Session有默认的存活时间(30分钟)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1&amp;gt;这时候的Session是跨线程的。&lt;/p&gt;&lt;p&gt;2&amp;gt;一个Session的概念需要包括特定的客户端，特定的服务器端以及不中断的操作时间。A用户和C服务器建立连接时所处的Session同B用户和C服务器建立连接时所处的Session是两个不同的Session。基于这个注意点，多数线上服务都是采用集群或者在扩展性上支持了集群，所以现在基本上没有人使用HttpSession了，当然只是做个毕设还是可以的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过HttpSession主要是获取其中保存的状态数据或者属性，是一种状态的保持。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2015年&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;2015年我做了一个PHP的项目，发现在PHP里Session那个好用。其实PHP里的Session和Java Servlet的Session原理基本相同。在集群情况下也是会失效的。但是为什么都过去8年了，Java中基本已经淘汰了这种用法，在PHP里还在用呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我个人理解那就是PHP语言的本身适用范围了。PHP本身适用于简单轻量的小型系统，这种系统有些就是单服务器在运行的。对可用性要求也不是特别高，出了问题可以通过立即重启或者启用备份服务器解决。Session里的信息如用户信息丢了用户重新登录就好了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过PHP里Session和HttpSession一样，主要是获取其中保存的状态数据或者属性，是一种状态的保持。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2016年&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;当时做项目用到ActiveMQ，它实现了JMS标准。先看一段简单代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;JMSProducer&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ConnectionFactory connectionFactory;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Connection connection  = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Session session;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Destination destination;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        MessageProducer messageProducer;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        connectionFactory = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ActiveMQConnectionFactory(ConnectionConstants.BROKENURL);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            connection = connectionFactory.createConnection(ConnectionConstants.USERNAME, ConnectionConstants.PASSWORD);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            connection.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            session = connection.createSession(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;, Session.AUTO_ACKNOWLEDGE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            destination = session.createQueue(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;firstDemo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            messageProducer = session.createProducer(destination);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            TextMessage message = session.createTextMessage(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ACTIVEMQ 生产者 生产消息，这是第&quot;&lt;/span&gt;+i+&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;次生产&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            messageProducer.send(message);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            session.commit();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (JMSException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;注意在上面的connection连接中创建了session。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486186&amp;amp;idx=1&amp;amp;sn=f21e17b21beb4c99cef0e076071ac859&amp;amp;chksm=fafde044cd8a69526aa3ec9edbe71ea5aa41de2ef236494201dc2f20701ed8abc6be1a72344f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深入理解MQ生产端的底层通信过程-理解channel》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深入理解MQ生产端的底层通信过程-理解channel》&lt;/a&gt;的&lt;strong&gt;MQ中怎么使用Channel&lt;/strong&gt;那一节，&lt;span&gt;RabbitMQ的生产端 &lt;/span&gt;connection.createChannel()。对比之下，情不自禁就要问了，这里的Channel等价于Session?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自然不是啦，针对他们的区别。知乎上有个神回复：“Session是会话，比如打电话，从拨号到挂断这就是一个Session；Channel是通道,我的理解是比如打电话时，Channel表示是使用联通信号或者是移动信号或者是电信信号。”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Channel是文件的读取等操作的抽象，而Session我理解是连接中状态数据的保持或者复用。Channel在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486186&amp;amp;idx=1&amp;amp;sn=f21e17b21beb4c99cef0e076071ac859&amp;amp;chksm=fafde044cd8a69526aa3ec9edbe71ea5aa41de2ef236494201dc2f20701ed8abc6be1a72344f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深入理解MQ生产端的底层通信过程-理解channel》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深入理解MQ生产端的底层通信过程-理解channel》&lt;/a&gt;里讲过了。那Session这块怎么理解呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在上面JMSProducer的代码中，我可写了大段的注释。这些注释可不是白写的。我们列举一下在上面的Session中显式的保存了哪些东西：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;是否支持事务&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;客户端收到消息是否自动确认&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个消息队列&lt;span&gt;firstDemo&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个可以发消息给&lt;span&gt;firstDemo&lt;/span&gt;的生产者&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个消息内容&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;一般我们每次发消息时，消息内容会需要新建，但是生产者、消息队列、是否支持事务和客户端收到消息是否自动确认这些都可以复用。幸好人家设计的时候也设计了Session，每次直接用就可以了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结：MQ中的Session是连接中状态数据的保持或者复用&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2020年&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;项目原因我研究了mybatis的源码，本来都计划为了满足项目需求自己重写一个mybatis了，后来重新规划设计没有做。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485597&amp;amp;idx=1&amp;amp;sn=555efa9b4b4041a29c4816772b0c1f2c&amp;amp;chksm=fafde233cd8a6b25f5a98a025df7917cb0d27f81e9efece21d4ce0a1f43155598b4108626172&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《mybatis的本质和原理》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《&lt;span&gt;mybatis的本质和原理&lt;/span&gt;》&lt;/a&gt;里我手撕了一个简易mybatis，里面有提到SqlSession。作用类似于一个 JDBC 中的 Connection 对象的代理，代表着一个连接资源的启用，它的作用有 3 个：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;获取 Mapper 接口。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;发送 SQL 给数据库。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;控制数据库事务。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本质上我理解也是连接中状态数据的保持或者复用。一段代码感受一下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SqlSession sqlSession = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sqlSession = SqlSessionFactory.openSession();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sqlSession.commit();    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sqlSession.rollback();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sqlSession.close();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;上面在&lt;span&gt;sqlSession&lt;/span&gt;对象中进行了事务的提交和回滚操作，非常类似于咱们在navicate等mysql客户端界面上的一个会话终端的操作。&lt;/p&gt;&lt;p&gt;在这同一个session下，因为就好像之前在HttpSession 登录有效期内用户的操作一样，只是界面不同。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;本文从个人的时间经历，分析了Session演进的血缘关系。这十几年的演进中，Session的概念越来越泛化，但是本质上还是保存的状态数据或者属性。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b92c54fac7c308d64e1e93aa18dc7371</guid>
<title>用 Go + Redis 实现分布式锁</title>
<link>https://toutiao.io/k/0yfuwmr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么需要分布式锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;用户下单&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁住 uid，防止重复下单。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;库存扣减&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁住库存，防止超卖。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;余额扣减&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁住账户，防止并发操作。分布式系统中共享同一个资源时往往需要分布式锁来保证变更资源一致性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分布式锁需要具备特性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;排他性&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁的基本特性，并且只能被第一个持有者持有。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;防死锁&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;高并发场景下临界资源一旦发生死锁非常难以排查，通常可以通过设置超时时间到期自动释放锁来规避。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可重入&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁持有者支持可重入，防止锁持有者再次重入时锁被超时释放。&lt;/p&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高性能高可用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;锁是代码运行的关键前置节点，一旦不可用则业务直接就报故障了。高并发场景下，高性能高可用是基本要求。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实现 Redis 锁应先掌握哪些知识点&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;set 命令&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;SET key value [EX seconds] [PX milliseconds] [NX|XX]&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;EX&lt;/code&gt;second ：设置键的过期时间为 second 秒。SET key value EX second 效果等同于 SETEX key second value 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;PX&lt;/code&gt;millisecond ：设置键的过期时间为 millisecond 毫秒。SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;NX&lt;/code&gt;：只在键不存在时，才对键进行设置操作。SET key value NX 效果等同于 SETNX key value 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;XX&lt;/code&gt;：只在键已经存在时，才对键进行设置操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Redis.lua 脚本&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 redis lua 脚本能将一系列命令操作封装成 pipline 实现整体操作的原子性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;go-zero 分布式锁 RedisLock 源码分析&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;core/stores/redis/redislock.go&lt;/code&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;加锁流程&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;-- KEYS[1]: 锁key&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- ARGV[1]: 锁value,随机字符串&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- ARGV[2]: 过期时间&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 判断锁key持有的value是否等于传入的value&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 如果相等说明是再次获取锁并更新获取时间，防止重入时过期&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 这里说明是“可重入锁”&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; redis.call(&lt;span&gt;&quot;GET&quot;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;]) == ARGV[&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- 设置&lt;/span&gt;&lt;br/&gt;    redis.call(&lt;span&gt;&quot;SET&quot;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;], ARGV[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;&quot;PX&quot;&lt;/span&gt;, ARGV[&lt;span&gt;2&lt;/span&gt;])&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;OK&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- 锁key.value不等于传入的value则说明是第一次获取锁&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- SET key value NX PX timeout : 当key不存在时才设置key的值&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- 设置成功会自动返回“OK”，设置失败返回“NULL Bulk Reply”&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- 为什么这里要加“NX”呢，因为需要防止把别人的锁给覆盖了&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; redis.call(&lt;span&gt;&quot;SET&quot;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;], ARGV[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;&quot;NX&quot;&lt;/span&gt;, &lt;span&gt;&quot;PX&quot;&lt;/span&gt;, ARGV[&lt;span&gt;2&lt;/span&gt;])&lt;br/&gt;&lt;span&gt;end&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9780461031833151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg2UnZD9ckceof851NNwfjiatqdMkdxePXVWmOrPYNSgTpSYiavfwb2ENENSCEdDWbKxDHGPMjbMTTHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;911&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;解锁流程&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;-- 释放锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;-- 不可以释放别人的锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; redis.call(&lt;span&gt;&quot;GET&quot;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;]) == ARGV[&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-- 执行成功返回“1”&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; redis.call(&lt;span&gt;&quot;DEL&quot;&lt;/span&gt;, KEYS[&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt;&lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;end&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2058212058212059&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg2UnZD9ckceof851NNwfjiatTscdjVHibRpEmic0Trtic4FklbeicsjUFZKlLibIg7PyBR2gQ9cSaicRl3iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;481&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;源码解析&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; redis&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;strconv&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    red &lt;span&gt;&quot;github.com/go-redis/redis&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;github.com/tal-tech/go-zero/core/logx&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; (&lt;br/&gt;    letters     = &lt;span&gt;&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;br/&gt;    lockCommand = &lt;span&gt;`if redis.call(&quot;GET&quot;, KEYS[1]) == ARGV[1] then&lt;br/&gt;    redis.call(&quot;SET&quot;, KEYS[1], ARGV[1], &quot;PX&quot;, ARGV[2])&lt;br/&gt;    return &quot;OK&quot;&lt;br/&gt;else&lt;br/&gt;    return redis.call(&quot;SET&quot;, KEYS[1], ARGV[1], &quot;NX&quot;, &quot;PX&quot;, ARGV[2])&lt;br/&gt;end`&lt;/span&gt;&lt;br/&gt;    delCommand = &lt;span&gt;`if redis.call(&quot;GET&quot;, KEYS[1]) == ARGV[1] then&lt;br/&gt;    return redis.call(&quot;DEL&quot;, KEYS[1])&lt;br/&gt;else&lt;br/&gt;    return 0&lt;br/&gt;end`&lt;/span&gt;&lt;br/&gt;    randomLen = &lt;span&gt;16&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 默认超时时间，防止死锁&lt;/span&gt;&lt;br/&gt;    tolerance       = &lt;span&gt;500&lt;/span&gt; &lt;span&gt;// milliseconds&lt;/span&gt;&lt;br/&gt;    millisPerSecond = &lt;span&gt;1000&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// A RedisLock is a redis lock.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; RedisLock &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// redis客户端&lt;/span&gt;&lt;br/&gt;    store *Redis&lt;br/&gt;    &lt;span&gt;// 超时时间&lt;/span&gt;&lt;br/&gt;    seconds &lt;span&gt;uint32&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 锁key&lt;/span&gt;&lt;br/&gt;    key &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 锁value，防止锁被别人获取到&lt;/span&gt;&lt;br/&gt;    id &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    rand.Seed(time.Now().UnixNano())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// NewRedisLock returns a RedisLock.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewRedisLock&lt;/span&gt;&lt;span&gt;(store *Redis, key &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; *&lt;span&gt;RedisLock&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &amp;amp;RedisLock{&lt;br/&gt;        store: store,&lt;br/&gt;        key:   key,&lt;br/&gt;        &lt;span&gt;// 获取锁时，锁的值通过随机字符串生成&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 实际上go-zero提供更加高效的随机字符串生成方式&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 见core/stringx/random.go：Randn&lt;/span&gt;&lt;br/&gt;        id:    randomStr(randomLen),&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Acquire acquires the lock.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 加锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(rl *RedisLock)&lt;/span&gt; &lt;span&gt;Acquire&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;(&lt;span&gt;bool&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// 获取过期时间&lt;/span&gt;&lt;br/&gt;    seconds := atomic.LoadUint32(&amp;amp;rl.seconds)&lt;br/&gt;    &lt;span&gt;// 默认锁过期时间为500ms，防止死锁&lt;/span&gt;&lt;br/&gt;    resp, err := rl.store.Eval(lockCommand, []&lt;span&gt;string&lt;/span&gt;{rl.key}, []&lt;span&gt;string&lt;/span&gt;{&lt;br/&gt;        rl.id, strconv.Itoa(&lt;span&gt;int&lt;/span&gt;(seconds)*millisPerSecond + tolerance),&lt;br/&gt;    })&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err == red.Nil {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        logx.Errorf(&lt;span&gt;&quot;Error on acquiring lock for %s, %s&quot;&lt;/span&gt;, rl.key, err.Error())&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, err&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; resp == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    reply, ok := resp.(&lt;span&gt;string&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ok &amp;amp;&amp;amp; reply == &lt;span&gt;&quot;OK&quot;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    logx.Errorf(&lt;span&gt;&quot;Unknown reply when acquiring lock for %s: %v&quot;&lt;/span&gt;, rl.key, resp)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Release releases the lock.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 释放锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(rl *RedisLock)&lt;/span&gt; &lt;span&gt;Release&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;(&lt;span&gt;bool&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    resp, err := rl.store.Eval(delCommand, []&lt;span&gt;string&lt;/span&gt;{rl.key}, []&lt;span&gt;string&lt;/span&gt;{rl.id})&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, err&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    reply, ok := resp.(&lt;span&gt;int64&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; !ok {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; reply == &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// SetExpire sets the expire.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 需要注意的是需要在Acquire()之前调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 不然默认为500ms自动释放&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(rl *RedisLock)&lt;/span&gt; &lt;span&gt;SetExpire&lt;/span&gt;&lt;span&gt;(seconds &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    atomic.StoreUint32(&amp;amp;rl.seconds, &lt;span&gt;uint32&lt;/span&gt;(seconds))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;randomStr&lt;/span&gt;&lt;span&gt;(n &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    b := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;byte&lt;/span&gt;, n)&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;range&lt;/span&gt; b {&lt;br/&gt;        b[i] = letters[rand.Intn(&lt;span&gt;len&lt;/span&gt;(letters))]&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;(b)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关于分布式锁还有哪些实现方案&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;etcd&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;redis redlock&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微信交流群&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注『&lt;strong&gt;微服务实践&lt;/strong&gt;』公众号并点击 &lt;strong&gt;交流群&lt;/strong&gt; 获取社区群二维码。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc049a1298a44f876a1a5b77c13001d7</guid>
<title>深入理解 Hive UDAF</title>
<link>https://toutiao.io/k/c53m0zu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI0OTYwNTQ4Ng==&amp;amp;action=getalbum&amp;amp;album_id=1496183731001278466#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1496183731001278466&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#Hive&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;11个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;1. 概述&lt;/h2&gt;&lt;p&gt;用户自定义聚合函数(UDAF)支持用户自行开发聚合函数完成业务逻辑。从实现上来看 Hive 有两种创建 UDAF 的方式，第一种是 Simple 方式，第二种是 Generic 方式。&lt;/p&gt;&lt;h3&gt;1.1 简单 UDAF&lt;/h3&gt;&lt;p&gt;第一种方式是 Simple(简单) 方式，即继承 org.apache.hadoop.hive.ql.exec.UDAF 类，并在派生类中以静态内部类的方式实现 org.apache.hadoop.hive.ql.exec.UDAFEvaluator 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4017391304347826&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm1v443Zpu5yVnbNjeUOLnghhVdibMZODNicjf6fC1bOm3ugXBqVdW8maQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot;/&gt;&lt;/p&gt;&lt;p&gt;这种方式简单直接，但是在使用过程中需要依赖 Java 反射机制，因此性能相对较低。在 Hive 源码包 org.apache.hadoop.hive.contrib.udaf.example 中包含几个示例，可以直接参阅。但是这种方式已经被标注为 Deprecated，建议不要使用这种方式开发新的 UDAF 函数。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1.2 通用 UDAF&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;简单 UDAF 编写起来比较简单，但是由于使用了 Java 反射机制导致性能下降，并且不允许使用变长参数等特性。通用 UDAF 允许所有这些特性，但编写起来可能不如简单 UDAF 那么直观。通用(Generic) UDAF 是 Hive 社区推荐的新写法，推荐用新的抽象类 org.apache.hadoop.hive.ql.udf.generic.AbstractGenericUDAFResolver 替代老的 UDAF 接口，用新的抽象类 org.apache.hadoop.hive.ql.udf.generic.GenericUDAFEvaluator 替代老的 UDAFEvaluator 接口。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3274074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm1RG3JoQVdMw8S7VSZKFKGWB3EbA56JE1LyLa2QjcAJQB4A9PLvzuUpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;675&quot;/&gt;&lt;/p&gt;&lt;h2&gt;2. 结构&lt;br/&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;由于简单（Simple）UDAF 性能相对较低，已经废弃，因此我们后面重点关注通用（Generic）UDAF。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;从高层次上来看通用 UDAF 需要实现两个部分：&lt;/p&gt;&lt;h3&gt;2.1 Resolver&lt;/h3&gt;&lt;p&gt;简单 UDAF Resolver 的 UDAF 接口被废弃后，通用 UDAF Resolver 有三种实现方式：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;实现 GenericUDAFResolver 接口&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;实现 GenericUDAFResolver2 接口&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;继承 AbstractGenericUDAFResolver 类&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在新问题来了：上述三种方式，在开发 UDAF 的时候该用哪一种呢？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.34514285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm1EKfHd2uCqpicYoh4ic8CXfbFnwJSsbHGpRfsyY7cw9L9FEh3mfyWkFWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/p&gt;&lt;h4&gt;2.1.1 GenericUDAFResolver&lt;br/&gt;&lt;/h4&gt;&lt;p&gt;用户定义聚合函数(GenericUDAF)编译时使用 GenericUDAFResolver 来查找参数类型对应的 GenericUDAFEvaluator：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;GenericUDAFResolver&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(TypeInfo[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;getEvaluator 方法返回参数类型对应的 Evaluator。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;GenericUDAFResolver 已经被弃用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;2.1.2 GenericUDAFResolver2&lt;/h4&gt;&lt;p&gt;如上图所示，GenericUDAFResolver2 接口继承了 GenericUDAFResolver 接口，此外还提供了另外一个 GenericUDAFParameterInfo 为参数的 getEvaluator 方法：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;@SuppressWarnings&lt;/span&gt;(&lt;span&gt;&quot;deprecation&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;GenericUDAFResolver2&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;GenericUDAFResolver&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(GenericUDAFParameterInfo info)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;相比 GenericUDAFResolver 接口，该接口在参数类型方面提供了更大的灵活性。如下所示 GenericUDAFResolver2 接口提供的 GenericUDAFParameterInfo 参数信息：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;GenericUDAFParameterInfo&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  TypeInfo[] getParameters();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  ObjectInspector[] getParameterObjectInspectors();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;// 是否使用了 DISTINCT 限定符&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isDistinct&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;// 是否在窗口函数中调用&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isWindowing&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;// 是否使用通配符语法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;isAllColumns&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;respectNulls&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;GenericUDAFResolver2 可以允许 Evaluator 的实现访问关于函数调用的额外信息，比如，是否使用了 DISTINCT 限定符或者使用特殊通配符(function(*&lt;em&gt;))。实现 GenericUDAFResolver 接口的 UDAF 则无法分辨调用 FUNCTION()和 FUNCTION(*&lt;/em&gt;) 的区别，因为无法获得有关通配符的信息。类似地，也不能区分 FUNCTION(EXPR) 和 FUNCTION(DISTINCT EXPR) 的区别，因为也无法获取有关 DISTINCT 限定符的信息。&lt;/p&gt;&lt;p&gt;UDAF 函数的实现不用对 DISTINCT 限定符或者通配符做特殊处理。DISTINCT 计算实际上是由 Hive 的核心查询处理器完成，不是由 Resolver 或 Evaluator 完成的，只是向 Resolver 提供信息仅用来做验证的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;虽然实现 GenericUDAFResolver2 接口的 Resolver 提供了关于 DISTINCT 限定符或者通配符的额外信息，但如果对我们没有任何意义，我们可以选择忽略这些信息。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;2.1.3 AbstractGenericUDAFResolver&lt;/h4&gt;&lt;p&gt;如上图所示，AbstractGenericUDAFResolver 类是 GenericUDAFResolver2 接口的实现类：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AbstractGenericUDAFResolver&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;GenericUDAFResolver2&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;@SuppressWarnings&lt;/span&gt;(&lt;span&gt;&quot;deprecation&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(GenericUDAFParameterInfo info)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (info.isAllColumns()) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;      &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SemanticException(&lt;span&gt;&quot;The specified syntax for UDAF invocation is invalid.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; getEvaluator(info.getParameters());&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(TypeInfo[] info)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SemanticException(&lt;span&gt;&quot;This UDAF does not support the deprecated getEvaluator() method.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;AbstractGenericUDAFResolver 提供了一种简单的方法将以前实现 GenericUDAFResolver 接口的 UDAF 迁移到 GenericUDAFResolver2 接口上。这个类提供了新 API 的默认实现，然后通过忽略 GenericUDAFParameterInfo 接口获得的额外参数信息来调用 GenericUDAFResolver#getEvaluator(TypeInfo[]) API。在使用 Resolver 类时，推荐使用 AbstractGenericUDAFResolver 抽象类。&lt;/p&gt;&lt;h3&gt;2.2 Evaluator&lt;/h3&gt;&lt;p&gt;所有 Evaluator 都必须继承基类 org.apache.hadoop.hive.ql.udf.generic.GenericUDAFEvaluator。该类提供了一些必须由扩展类实现的抽象方法。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5701438848920863&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm135hKdicZNRfOWVoYdTBejOTrAxSVoqZk8nEodF3tKED3vX9dtypnayg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;556&quot;/&gt;&lt;/p&gt;&lt;p&gt;这些方法建立了 UDAF 之后的处理语义。下面是 Evaluator 类的架构：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AverageUDAFEvaluator&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;GenericUDAFEvaluator&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ObjectInspector &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(Mode mode, ObjectInspector[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 初始化输入和输出参数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AggregationBuffer &lt;span&gt;getNewAggregationBuffer&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 创建中间结果Buffer&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reset&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 重置中间结果Buffer&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;iterate&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg, Object[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 迭代输入原始数据&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;terminatePartial&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 输出部分聚合结果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;merge&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg, Object partial)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 合并部分聚合结果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;terminate&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 输出最终聚合结果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下面我们对每个函数进行一下说明：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;init：用来初始化 Evaluator 实例。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;getNewAggregationBuffer：返回一个用于存储临时聚合结果的对象。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;iterate：处理一行新数据到 AggregationBuffer 临时聚合结果中。iterate 方法在 Map 阶段开始被调用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;terminatePartial：以可持久化的方式返回当前聚合结果。可持久化意味着返回值只能通过 Java 原生类型、数组、原生包装器(例如，Double)、Hadoop Writables、Lists 或者 Map 来构建。不能使用我们自定义的类(即使实现了 java.io.Serializable)，否则可能会得到奇怪的错误或(可能更糟)错误的结果。terminatePartial 方法一般在 Map 或者 Combine 阶段结束时调用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;merge：将 terminatePartial 返回的部分聚合结果合并到当前聚合结果中。merge 方法一般在 Reduce 阶段被调用，用来合并 Map 或者 Combine 输入的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;terminate：将最终聚合结果返回给 Hive。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;3. 运行流程&lt;/h2&gt;&lt;p&gt;抽象类 GenericUDAFEvaluator 中包含一个静态内部枚举类 Mode。这个枚举类表示不同的运行阶段，按照时间先后顺序，分别有：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;PARTIAL1：从原始数据到部分聚合数据的过程，会调用 iterate() 和 terminatePartial() 方法。iterate() 函数负责解析输入数据，terminatePartial() 负责输出当前临时聚合结果。该阶段可以理解为对应 MapReduce 过程中的 Map 阶段。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;PARTIAL2：从部分聚合数据到部分聚合数据的过程（多次聚合），会调用 merge() 和 terminatePartial() 方法。merge() 函数负责聚合 Map 阶段 terminatePartial() 函数输出的部分聚合结果，terminatePartial() 负责输出当前临时聚合结果。阶段可以理解为对应 MapReduce 过程中的 Combine 阶段。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;FINAL: 从部分聚合数据到全部聚合数据的过程，会调用 merge() 和 terminate() 方法。merge() 函数负责聚合 Map 阶段或者 Combine 阶段 terminatePartial() 函数输出的部分聚合结果。terminate() 方法负责输出 Reduce 阶段最终的聚合结果。该阶段可以理解为对应 MapReduce 过程中的 Reduce 阶段。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;COMPLETE: 从原始数据直接到全部聚合数据的过程，会调用 iterate() 和 terminate() 方法。可以理解为 MapReduce 过程中的直接 Map 输出阶段，没有 Reduce 阶段。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;每个阶段都会执行 Init() 初始化操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.4186046511627908&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm1sT9J8uZ5rCf9qBqRopbf1BuQO6wAKJFibqPYRPBqKt6Fxpnv4stVtlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;559&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7900874635568513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/nKovjAe6LrrqHDtkPqtgsW9s9zsIfcm1ZRNWptuaF96mBMZ4JaJjp4eJuI8qpzMFPKDyPFn0A1PxtNgicSGZPqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;343&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以，完整的 UDAF 逻辑是一个 MapReduce 过程，如果有 Mapper 和 Reducer，就会经历 PARTIAL1(对应 Map 阶段)，FINAL(对应 Reduce 阶段)，如果还有 Combiner，那就会经历 PARTIAL1、PARTIAL2(对应 Combine 阶段) 以及 FINAL。此外还有一种情况下只有 Mapper，没有 Reducer，在这种情况下就只有 COMPLETE 阶段。&lt;/p&gt;&lt;h2&gt;4. 开发&lt;/h2&gt;&lt;h3&gt;4.1 开发 Resolver&lt;/h3&gt;&lt;p&gt;Resolver 处理 UDAF 查询的类型检查与运算符重载。类型检查确保用户没有在需要整数的地方传递 Double 表达式，运算符重载允许对不同类型的参数使用不同的 UDAF 逻辑。如上面提到的推荐 Resolver 继承 AbstractGenericUDAFResolver 类：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AbstractGenericAverageUDAF&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractGenericUDAFResolver&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Log LOG = LogFactory.getLog(AbstractGenericAverageUDAF.class.getName());&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(GenericUDAFParameterInfo info)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; getEvaluator(info.getParameters());&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(TypeInfo[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;// 在这做类型检查以及选择指定的 Evaluator&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AverageUDAFEvaluator();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AverageUDAFEvaluator&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;GenericUDAFEvaluator&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;// 在这实现 UDAF 逻辑&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面的代码展示了 UDAF 的基本框架。第一行设置了一个 Log 对象，可以将 Warn 和 Error 写入到 Hive 日志中。AbstractGenericUDAFResolver 类有两个覆盖方法: getEvaluator，用来接收关于如何调用 UDAF 的信息。info.getParameters() 即 parameters，提供了与调用参数的 SQL 类型相对应的类型信息对象数组。info 除此之外还可以获取关于函数调用的额外信息，比如，是否使用了 DISTINCT 限定符或者使用特殊通配符。&lt;/p&gt;&lt;p&gt;对于平均值 UDAF，我们只需要一个参数：用于计算平均值的数值列。首先要做的是检查我们是否恰好只有一个参数。然后，我们检查第一个参数是否是基本类型，并根据基本类型选择正确的 Evaluator。如果是 BYTE、SHORT、INT、LONG、TIMESTAMP、FLOAT、DOUBLE、STRING、VARCHAR、CHAR 类型，选择 AverageUDAFEvaluator，否则抛出异常：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(GenericUDAFParameterInfo info)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; getEvaluator(info.getParameters());&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; GenericUDAFEvaluator &lt;span&gt;getEvaluator&lt;/span&gt;&lt;span&gt;(TypeInfo[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; SemanticException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (parameters.length != &lt;span&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UDFArgumentTypeException(parameters.length - &lt;span&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;span&gt;&quot;Exactly one argument is expected.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (parameters[&lt;span&gt;0&lt;/span&gt;].getCategory() != ObjectInspector.Category.PRIMITIVE) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UDFArgumentTypeException(&lt;span&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                &lt;span&gt;&quot;Only primitive type arguments are accepted but &quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                        + parameters[&lt;span&gt;0&lt;/span&gt;].getTypeName() + &lt;span&gt;&quot; is passed.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;switch&lt;/span&gt; (((PrimitiveTypeInfo) parameters[&lt;span&gt;0&lt;/span&gt;]).getPrimitiveCategory()) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; BYTE:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; SHORT:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; INT:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; LONG:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; FLOAT:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; DOUBLE:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; STRING:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; VARCHAR:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; CHAR:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; TIMESTAMP:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AverageUDAFEvaluator();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; DECIMAL:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; BOOLEAN:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;case&lt;/span&gt; DATE:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UDFArgumentTypeException(&lt;span&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                    &lt;span&gt;&quot;Only numeric or string type arguments are accepted but &quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                            + parameters[&lt;span&gt;0&lt;/span&gt;].getTypeName() + &lt;span&gt;&quot; is passed.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从上面可以看出根据不同的类型可以选择不同的 Evaluator 类，我们来分析下 AverageUDAFEvaluator 的实现。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在这我们只实现了一个 Evaluator 类：AverageUDAFEvaluator&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;4.2 开发 Evaluator&lt;/h3&gt;&lt;p&gt;AverageUDAFEvaluator 是用来对 BYTE、SHORT、INT、LONG、TIMESTAMP、FLOAT、DOUBLE、STRING、VARCHAR、CHAR 类型求平均值的 UDAF，其中有几个变量，inputOI 是输入的数据，partialResult 是部分聚合结果（对应 ObjectInspector 为 StructObjectInspector），result 是最终聚合结果，初始化是对这几个参数的初始化，另外定义了 AverageAggBuffer 来存储中间结果，里面包含了 count 值和 sum 值。&lt;/p&gt;&lt;h4&gt;4.2.1 init&lt;/h4&gt;&lt;p&gt;首先 init 方法用来初始化 Evaluator 实例：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;// Iterate 输入&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; PrimitiveObjectInspector inputOI;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// Merge 输入&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; StructObjectInspector structOI;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; LongObjectInspector countFieldOI;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; DoubleObjectInspector sumFieldOI;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; StructField countField;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; StructField sumField;&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// TerminatePartial 输出&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; Object[] partialResult;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// Terminate 输出&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; DoubleWritable result;&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; ObjectInspector &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(Mode mode, ObjectInspector[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;assert&lt;/span&gt; (parameters.length == &lt;span&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;super&lt;/span&gt;.init(mode, parameters);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;// 初始化输入参数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (mode == Mode.PARTIAL1 || mode == Mode.COMPLETE) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 原始数据&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        inputOI = (PrimitiveObjectInspector) parameters[&lt;span&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 部分聚合数据&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        structOI = (StructObjectInspector) parameters[&lt;span&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        countField = structOI.getStructFieldRef(&lt;span&gt;&quot;count&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        sumField = structOI.getStructFieldRef(&lt;span&gt;&quot;sum&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        countFieldOI = (LongObjectInspector) countField.getFieldObjectInspector();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        sumFieldOI = (DoubleObjectInspector) sumField.getFieldObjectInspector();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;// 初始化输出&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (mode == Mode.PARTIAL1 || mode == Mode.PARTIAL2) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 最终结果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        partialResult = &lt;span&gt;new&lt;/span&gt; Object[&lt;span&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        partialResult[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;new&lt;/span&gt; LongWritable(&lt;span&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        partialResult[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;new&lt;/span&gt; DoubleWritable(&lt;span&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 部分聚合结果&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 字段类型&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        ArrayList&amp;lt;ObjectInspector&amp;gt; structFieldOIs = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;ObjectInspector&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        structFieldOIs.add(PrimitiveObjectInspectorFactory.writableLongObjectInspector);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        structFieldOIs.add(PrimitiveObjectInspectorFactory.writableDoubleObjectInspector);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;// 字段名称&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        ArrayList&amp;lt;String&amp;gt; structFieldNames = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        structFieldNames.add(&lt;span&gt;&quot;count&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        structFieldNames.add(&lt;span&gt;&quot;sum&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; ObjectInspectorFactory.getStandardStructObjectInspector(structFieldNames, structFieldOIs);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        result = &lt;span&gt;new&lt;/span&gt; DoubleWritable(&lt;span&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; PrimitiveObjectInspectorFactory.writableDoubleObjectInspector;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 PARTIAL1 和 COMPLETE 模式下，输入参数均是原始数据。在 PARTIAL2 和 FINAL 模式中，输入参数是部分聚合结果，部分聚合结果使用 Object 数组(第一个元素为 LongWritable 类型，第二个元素为 DoubleWritable)在不同阶段进行传输，ObjectInspector 为 StructObjectInspector。在 PARTIAL1 和 PARTIAL2 模式下，terminatePartial() 返回值的 ObjectInspector 为 StandardStructObjectInspector。在 FINAL 和 COMPLETE 模式下，terminate() 返回值的 ObjectInspector 为 WritableDoubleObjectInspector。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;ObjectInspector 作用主要是解耦实际数据与数据格式，使得数据流在输入输出端切换不同的输入输出格式，不同的 Operator 上使用不同的格式，可以通过这个抽象类知道上游传递过来的参数类型，从而解耦。一个 ObjectInspector 对象本身并不包含任何数据，它只是提供对数据类型的说明以及对数据对象操作的统一管理或者是代理。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;4.2.2 getNewAggregationBuffer&lt;/h4&gt;&lt;p&gt;getNewAggregationBuffer 方法返回一个用于存储临时聚合结果的对象 AggregationBuffer，其中 count 字段表示存储聚合的记录个数，sum 字段表示存储聚合的总和：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;// 存储临时聚合结果对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;AverageAggBuffer&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AggregationBuffer&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;long&lt;/span&gt; count;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;double&lt;/span&gt; sum;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;// 返回一个新的聚合对象&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; AggregationBuffer &lt;span&gt;getNewAggregationBuffer&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    AverageAggBuffer buffer = &lt;span&gt;new&lt;/span&gt; AverageAggBuffer();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    reset(buffer);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; buffer;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4&gt;4.2.3 reset&lt;/h4&gt;&lt;p&gt;reset 方法重置存储临时聚合结果的对象 AggregationBuffer：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reset&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    AverageAggBuffer buffer = (AverageAggBuffer) agg;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer.count = &lt;span&gt;0L&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer.sum = &lt;span&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4&gt;4.2.4 iterate&lt;/h4&gt;&lt;p&gt;iterate() 函数解析出实际的输入数据(一个数字)，然后合并到临时聚合结果 AggregationBuffer 中：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;iterate&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg, Object[] parameters)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;assert&lt;/span&gt; (parameters.length == &lt;span&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;if&lt;/span&gt; (parameters[&lt;span&gt;0&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            AverageAggBuffer buffer = (AverageAggBuffer) agg;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            buffer.count ++;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            buffer.sum += PrimitiveObjectInspectorUtils.getDouble(parameters[&lt;span&gt;0&lt;/span&gt;], inputOI);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    } &lt;span&gt;catch&lt;/span&gt; (NumberFormatException e) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HiveException(&lt;span&gt;&quot;iterate exception&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该方法一般在 Map 阶段调用，用来读取原始数据。&lt;/p&gt;&lt;h4&gt;4.2.5 terminatePartial&lt;/h4&gt;&lt;p&gt;terminatePartial 以 Object 数组的方式返回当前聚合结果，第一个值存储的是 LongWritable 类型的输入元素个数，第二个值存储的是 DoubleWritable 类型的输入元素总和：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;terminatePartial&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    AverageAggBuffer buffer = (AverageAggBuffer) agg;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ((LongWritable) partialResult[&lt;span&gt;0&lt;/span&gt;]).set(buffer.count);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ((DoubleWritable) partialResult[&lt;span&gt;1&lt;/span&gt;]).set(buffer.sum);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; partialResult;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;terminatePartial 方法一般在 Map 或者 Combine 阶段结束时调用，得到部分数据聚集结果，将数据以持久化方式传输到 Reduce 进行处理。只支持 Java 原始数据类型、数组、原生包装器(例如，Double)、Hadoop Writables、Lists 或者 Map 类型。不能使用我们自己自定义类(即使实现了 java.io.Serializable)，否则可能会得到奇怪的错误或(可能更糟)错误的结果。&lt;/p&gt;&lt;h4&gt;4.2.6 merge&lt;/h4&gt;&lt;p&gt;merge 方法将 terminatePartial 返回的聚合结果 partial 合并到当前聚合结果 agg 中。一般在 Combine 或者 Reduce 阶段调用，Combiner 合并 Mapper 返回的结果，Reducer 合并 Mapper 或者 Combiner 返回的结果。我们通过 terminatePartial 方法知道传输到 merge 方法的是一个 Object 数组，因此我们需要通过 StructObjectInspector 解析出 partial 数组元素值：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;merge&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg, Object partial)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (partial == &lt;span&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    AverageAggBuffer buffer = (AverageAggBuffer) agg;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    Object partialCount = structOI.getStructFieldData(partial, countField);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    Object partialSum = structOI.getStructFieldData(partial, sumField);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer.count += countFieldOI.get(partialCount);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    buffer.sum += sumFieldOI.get(partialSum);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4&gt;4.2.7 terminate&lt;/h4&gt;&lt;p&gt;terminate 方法根据 AggregationBuffer 中临时存储的值计算生成 DoubleWritable 类型的平均值 Object 返回。对应在 Reducer 阶段，输出最终结果：&lt;/p&gt;&lt;figure&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; DoubleWritable result;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;terminate&lt;/span&gt;&lt;span&gt;(AggregationBuffer agg)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HiveException &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    AverageAggBuffer buffer = (AverageAggBuffer) agg;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; (buffer.count == &lt;span&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    result.set(buffer.sum / buffer.count);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完整代码请参阅：&lt;/p&gt;&lt;p&gt;https://github.com/sjf0115/data-example/blob/master/hive-example/src/main/java/com/hive/example/udf/AbstractGenericAverageUDAF.java&lt;/p&gt;&lt;p&gt;欢迎关注我的公众号和博客：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.595&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nKovjAe6LrqPP36RWGmwXAHAUPcg48ibQzRb82UubkaEj0K8CANwdefia4cJZK3B0jiavicU35I08Z8lbgeFzibJofw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;参考资料：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;https://blog.csdn.net/lidongmeng0213/article/details/110869457&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://www.cnblogs.com/itboys/p/13396774.html&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://cwiki.apache.org/confluence/display/Hive/GenericUDAFCaseStudy&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b6254b1c66cc9c33bfb4c4d2e5b75d5</guid>
<title>Uncle Bob 的 SOLID 软件设计原则——Python 实例讲解</title>
<link>https://toutiao.io/k/zz4jho7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
      

      
        &lt;p&gt;SOLID 是 5 种软件设计原则的首字母缩写，由美国的软件工程师 &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_C._Martin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Robert C. Martin&lt;/a&gt;（习惯上被称为 Uncle Bob）总结。可以帮助程序员写出更加灵活、容易理解、可维护性强、方便扩展的健壮代码。&lt;/p&gt;

&lt;h4 id=&quot;实例代码&quot;&gt;&lt;a href=&quot;#实例代码&quot; class=&quot;headerlink&quot; title=&quot;实例代码&quot;/&gt;实例代码&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, payment_type, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; payment_type == &lt;span class=&quot;string&quot;&gt;&quot;debit&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            self.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; payment_type == &lt;span class=&quot;string&quot;&gt;&quot;credit&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            self.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;f&quot;Unknown payment type: &lt;span class=&quot;subst&quot;&gt;{payment_type}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.pay(&lt;span class=&quot;string&quot;&gt;&quot;debit&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;0372846&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述 Python 代码实现了一个简单的“购物车”（订单）应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_item&lt;/code&gt; 方法可以向订单中添加新的货物&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total_price&lt;/code&gt; 方法可以计算订单的总价&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pay&lt;/code&gt; 方法实现了订单的支付功能，支持借记卡、信用卡等支付方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Single-Responsibility-Principle&quot;&gt;&lt;a href=&quot;#Single-Responsibility-Principle&quot; class=&quot;headerlink&quot; title=&quot;Single Responsibility Principle&quot;/&gt;Single Responsibility Principle&lt;/h4&gt;&lt;p&gt;单一职能原则。&lt;br/&gt;将支付功能从 &lt;code&gt;Order&lt;/code&gt; 类中分离出来，在另一个 &lt;code&gt;PaymentProcessor&lt;/code&gt; 类中实现。同时去掉 &lt;code&gt;pay&lt;/code&gt; 方法中的 &lt;code&gt;if-else&lt;/code&gt; 判断，分别用两个函数 &lt;code&gt;pay_debit&lt;/code&gt; 和 &lt;code&gt;pay_credit&lt;/code&gt; 实现。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay_debit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay_credit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = PaymentProcessor()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay_debit(order, &lt;span class=&quot;string&quot;&gt;&quot;0372846&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Open-Closed-Principle&quot;&gt;&lt;a href=&quot;#Open-Closed-Principle&quot; class=&quot;headerlink&quot; title=&quot;Open/Closed Principle&quot;/&gt;Open/Closed Principle&lt;/h4&gt;&lt;p&gt;在最新的支付功能的实现中，如果我们需要添加一个新的支付方法（比如 PayPal），就必须修改 &lt;code&gt;PaymentProcessor&lt;/code&gt; 类的原始代码。这就违反了 Open/Closed 原则，额外的功能应该通过扩展而不是修改原来的类来实现。&lt;br/&gt;改进的方法是用一个基类（&lt;code&gt;PaymentProcessor&lt;/code&gt;）来定义基本的支付逻辑，再通过子类（如 &lt;code&gt;DebitPaymentProcessor&lt;/code&gt;）来实现具体的支付方法。这样每当添加一种新的支付方式，直接实现一个新的子类即可。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ABC, abstractmethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = DebitPaymentProcessor()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay(order, &lt;span class=&quot;string&quot;&gt;&quot;0372846&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Liskov-Substitution-Principle&quot;&gt;&lt;a href=&quot;#Liskov-Substitution-Principle&quot; class=&quot;headerlink&quot; title=&quot;Liskov Substitution Principle&quot;/&gt;Liskov Substitution Principle&lt;/h4&gt;&lt;p&gt;假设我们现在需要添加一种新的支付方式 &lt;code&gt;PayPalPaymentProcessor&lt;/code&gt;，它在支付时并不依赖于 &lt;code&gt;security_code&lt;/code&gt; 而是需要 &lt;code&gt;email_address&lt;/code&gt; 进行验证。即 &lt;code&gt;pay&lt;/code&gt; 方法的定义是 &lt;code&gt;pay(self, order, email_address)&lt;/code&gt;，与基类中虚拟方法的签名冲突。&lt;br/&gt;改进的方法是将 &lt;code&gt;pay&lt;/code&gt; 方法依赖的参数 &lt;code&gt;security_code&lt;/code&gt; 或 &lt;code&gt;email_address&lt;/code&gt; 移动到支付类的 &lt;code&gt;__init__&lt;/code&gt; 方法中，将基类和子类的 &lt;code&gt;pay&lt;/code&gt; 方法签名都改为 &lt;code&gt;pay(self, order)&lt;/code&gt;。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ABC, abstractmethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{self.security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaypalPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, email_address)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.email_address = email_address&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing paypal payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying email address: &lt;span class=&quot;subst&quot;&gt;{self.email_address}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = PaypalPaymentProcessor(&lt;span class=&quot;string&quot;&gt;&#x27;hi@example.com&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay(order)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Interface-Segregation-Principle&quot;&gt;&lt;a href=&quot;#Interface-Segregation-Principle&quot; class=&quot;headerlink&quot; title=&quot;Interface Segregation Principle&quot;/&gt;Interface Segregation Principle&lt;/h4&gt;&lt;p&gt;假设我们需要在支付组件中添加一个验证短信的功能。直观的想法是直接在 &lt;code&gt;PaymentProcessor&lt;/code&gt; 基类中添加一个 &lt;code&gt;auth_sms&lt;/code&gt; 虚拟方法：&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于需要验证短信的支付方式比如借记卡，改为如下形式：&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying SMS code &lt;span class=&quot;subst&quot;&gt;{code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.verified:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{self.security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于不需要短信验证的支付方式比如信用卡，就改为如下形式：&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Credit card payments don&#x27;t support SMS code authorization.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述实现的问题在于，我们定义了一个通用的支付接口（&lt;code&gt;PaymentProcessor&lt;/code&gt;），包含 &lt;code&gt;pay&lt;/code&gt; 和 &lt;code&gt;auth_sms&lt;/code&gt; 两种验证逻辑。但这两种逻辑并不总是被具体的支付方式（比如 &lt;code&gt;CreditPaymentProcessor&lt;/code&gt;）所需要。&lt;br/&gt;这违反了接口分离原则。即接口的实现应该依赖于具体的客户端（子类）需求，而不能不管客户端是否需要，就将所有的功能都放在一个胖接口中。&lt;br/&gt;可以额外再实现一个 &lt;code&gt;PaymentProcessor_SMS&lt;/code&gt; 基类来定义短信验证的逻辑，让不需要短信验证的支付方式继承 &lt;code&gt;PaymentProcessor&lt;/code&gt; 基类，需要短信验证的支付方式继承 &lt;code&gt;PaymentProcessor_SMS&lt;/code&gt; 基类。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ABC, abstractmethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor_SMS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor_SMS)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying SMS code &lt;span class=&quot;subst&quot;&gt;{code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.verified:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{self.security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaypalPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor_SMS)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, email_address)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.email_address = email_address&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;auth_sms&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying SMS code &lt;span class=&quot;subst&quot;&gt;{code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.verified:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing paypal payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying email address: &lt;span class=&quot;subst&quot;&gt;{self.email_address}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = PaypalPaymentProcessor(&lt;span class=&quot;string&quot;&gt;&#x27;hi@example.com&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.auth_sms(&lt;span class=&quot;number&quot;&gt;123456&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay(order)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Composition-over-Inheritance&quot;&gt;&lt;a href=&quot;#Composition-over-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Composition over Inheritance&quot;/&gt;Composition over Inheritance&lt;/h5&gt;&lt;p&gt;在软件设计的大部分场景中，组合要优于继承。因为继承总是意味着更紧密的耦合性。&lt;br/&gt;实际上短信认证并不一定通过继承来实现（&lt;code&gt;PaymentProcessor_SMS&lt;/code&gt;），还可以通过组合来实现。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ABC, abstractmethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SMSAuth&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    authorized = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;verify_code&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying code &lt;span class=&quot;subst&quot;&gt;{code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorized = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_authorized&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt; -&amp;gt; bool:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.authorized&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code, authorizer: SMSAuth)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorizer = authorizer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.authorizer.is_authorized():&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{self.security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaypalPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, email_address, authorizer: SMSAuth)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.email_address = email_address&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorizer = authorizer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.authorizer.is_authorized():&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing paypal payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying email address: &lt;span class=&quot;subst&quot;&gt;{self.email_address}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;authorizer = SMSAuth()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = DebitPaymentProcessor(&lt;span class=&quot;string&quot;&gt;&#x27;0372846&#x27;&lt;/span&gt;, authorizer)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;authorizer.verify_code(&lt;span class=&quot;number&quot;&gt;123456&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay(order)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定义一个 &lt;code&gt;SMS_Auth&lt;/code&gt; 类来实现短信验证的逻辑，再通过组合的方式将其实例添加到具体的需要短信验证的支付方式中（比如 &lt;code&gt;DebitPaymentProcessor&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&quot;Dependency-Inversion-Principle&quot;&gt;&lt;a href=&quot;#Dependency-Inversion-Principle&quot; class=&quot;headerlink&quot; title=&quot;Dependency Inversion Principle&quot;/&gt;Dependency Inversion Principle&lt;/h4&gt;&lt;p&gt;细节应该依赖于抽象，而不是抽象依赖于细节。上述实现中就违反了这个原则。&lt;br/&gt;比如借记卡支付方式（&lt;code&gt;DebitPaymentProcessor&lt;/code&gt;）的 &lt;code&gt;__init__&lt;/code&gt; 方法，签名是 &lt;code&gt;__init__(self, security_code, authorizer: SMSAuth)&lt;/code&gt;。其中的 &lt;code&gt;SMSAuth&lt;/code&gt; 是一个具体的短信验证类型，而不是一个通用的代表某种验证类型的抽象。&lt;br/&gt;这样当支付方式需要的是另外一种验证方法（比如 &lt;code&gt;NotARobot&lt;/code&gt;），这里的签名就需要修改。&lt;/p&gt;
&lt;p&gt;可以创建一个 &lt;code&gt;Authorizer&lt;/code&gt; 基类来代表通用的验证方式，具体的验证方式比如 &lt;code&gt;SMSAuth&lt;/code&gt;、&lt;code&gt;NotARobot&lt;/code&gt; 则作为 &lt;code&gt;Authorizer&lt;/code&gt; 的子类来实现。&lt;br/&gt;在支付方式的实现中，则使用 &lt;code&gt;Authorizer&lt;/code&gt; 作为验证方式的类型定义。这样在使用支付类的实例时，就可以灵活地传入 &lt;code&gt;Authorizer&lt;/code&gt; 的子类 &lt;code&gt;SMSAuth&lt;/code&gt; 或者 &lt;code&gt;NotARobot&lt;/code&gt; 进行组合。&lt;br/&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; abc &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ABC, abstractmethod&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Order&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    items = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    quantities = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    prices = []&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    status = &lt;span class=&quot;string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add_item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, quantity, price)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.items.append(name)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.quantities.append(quantity)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.prices.append(price)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;total_price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(self.prices)):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            total += self.quantities[i] * self.prices[i]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Authorizer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_authorized&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt; -&amp;gt; bool:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SMSAuth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Authorizer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    authorized = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;verify_code&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying code &lt;span class=&quot;subst&quot;&gt;{code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorized = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_authorized&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt; -&amp;gt; bool:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.authorized&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NotARobot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Authorizer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    authorized = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;not_a_robot&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Are you a robot? Naa&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorized = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_authorized&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt; -&amp;gt; bool:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.authorized&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ABC)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @abstractmethod&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DebitPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code, authorizer: Authorizer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorizer = authorizer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.verified = &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.authorizer.is_authorized():&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing debit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{self.security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreditPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.security_code = security_code&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order, security_code)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing credit payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying security code: &lt;span class=&quot;subst&quot;&gt;{security_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PaypalPaymentProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PaymentProcessor)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, email_address, authorizer: Authorizer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.email_address = email_address&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        self.authorizer = authorizer&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, order)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; self.authorizer.is_authorized():&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;Not authorized&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Processing paypal payment type&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;f&quot;Verifying email address: &lt;span class=&quot;subst&quot;&gt;{self.email_address}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        order.status = &lt;span class=&quot;string&quot;&gt;&quot;paid&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order = Order()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;Keyborad&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;SSD&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;order.add_item(&lt;span class=&quot;string&quot;&gt;&quot;USB cable&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;print(order.total_price())&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;authorizer = NotARobot()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor = DebitPaymentProcessor(&lt;span class=&quot;string&quot;&gt;&#x27;0372846&#x27;&lt;/span&gt;, authorizer)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;authorizer.not_a_robot()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;processor.pay(order)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;/&gt;参考资料&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pTB30aXS77U&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uncle Bob’s SOLID principles made easy 🍀 - in Python!&lt;/a&gt;&lt;/p&gt;

      
    &lt;/div&gt;

    

    
    
    

    

    

    

    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b606c5e495bea90ca7192593cd6a1ea1</guid>
<title>Go 误用 exec.Command 导致多进死锁的调试记录</title>
<link>https://toutiao.io/k/3kcunns</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article&quot;&gt;
    &lt;h1&gt;exec.Command 中一个有趣的多进程死锁例子
    
    
    &lt;/h1&gt;
    
    &lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;前几天，公司开发的一个工具在某个工程中总是卡死，进入容器中再次运行，又能顺利运行，感觉挺有意思，于是便 debug 了一下。&lt;/p&gt;
&lt;p&gt;这个工具使用 Golang 编写，暂未开源，所以本文只展示部分代码。&lt;/p&gt;
&lt;h2&gt;问题描述&lt;/h2&gt;
&lt;p&gt;这个工具大致流程是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;exec.Command&lt;/code&gt; 调用 &lt;code&gt;go list -json all&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;stdout&lt;/code&gt; / &lt;code&gt;stderr&lt;/code&gt;，再使用 &lt;code&gt;json.NewDecoder&lt;/code&gt; 解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码大致为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;cmd := exec.Command(&quot;go&quot;, &quot;list&quot;, &quot;-json&quot;, &quot;all&quot;)
stdouIn, _ := cmd.StdoutPipe()
stderrIn, _ := cmd.StderrPipe()

var stderrBuf bytes.Buffer

cmd.Start()

dec := json.NewDecoder(stdouIn)
dg = &amp;amp;DepGraph{}
for {
    var di DepInfo
    dec.Decode(&amp;amp;di)
}

_, errStderr := io.Copy(&amp;amp;stderrBuf, stderrIn)
if errStderr != nil {
    panic(err)
}

cmd.Wait()

fmt.Println(&quot;done&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序未 &lt;code&gt;panic&lt;/code&gt; 异常退出&lt;/li&gt;
&lt;li&gt;程序未输出 &lt;code&gt;done&lt;/code&gt;，即未正常退出，卡死&lt;/li&gt;
&lt;li&gt;命令后手动执行 &lt;code&gt;go list -json all&lt;/code&gt; 可正常快速退出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好吧-_-，粗看程序一点问题没有，但就是卡了～&lt;/p&gt;
&lt;h2&gt;调试记录&lt;/h2&gt;
&lt;h3&gt;怀疑 1，go list 有 bug？&lt;/h3&gt;
&lt;p&gt;使用 dlv 挂载 go list 进程 &lt;code&gt;dlv attach [pid]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;查看所有 goroutine 的状态：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(dlv) grs
  Goroutine 836 - User: /usr/local/go/src/runtime/sema.go:61 internal/poll.runtime_Semacquire (0x447782) [semacquire 450776h20m59.570725376s]
  Goroutine 837 - User: /usr/local/go/src/runtime/sema.go:61 internal/poll.runtime_Semacquire (0x447782) [semacquire 450776h21m0.466524491s]
  Goroutine 838 - User: /usr/local/go/src/runtime/proc.go:310 sync.runtime_notifyListWait (0x4489c8) [sync.Cond.Wait 450776h20m57.704548061s]
  Goroutine 839 - User: /usr/local/go/src/syscall/asm_linux_amd64.s:24 syscall.Syscall (0x4b2efb) (thread 65) [GC assist marking 450776h21m0.664929027s]
  Goroutine 840 - User: /usr/local/go/src/runtime/sema.go:61 internal/poll.runtime_Semacquire (0x447782) [semacquire 450776h20m59.617378098s]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;839 goroutine&lt;/code&gt; 停在了 &lt;code&gt;syscall.Syscall&lt;/code&gt; 系统调用上，看起来比较可疑，详细查看该 goroutine 的调用栈：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(dlv) gr 839
Switched from 0 to 839 (thread 65)
(dlv) bt
...
4 0x00000000004d1267 in os.(*File).write
at /usr/local/go/src/os/file_unix.go:280
5 0x00000000004d1267 in os.(*File).Write
at /usr/local/go/src/os/file.go:153
6 0x00000000004dc125 in fmt.Fprintf
at /usr/local/go/src/fmt/print.go:205
7 0x00000000008bae71 in cmd/go/internal/modfetch.DownloadZip.func1
at /usr/local/go/src/cmd/go/internal/modfetch/fetch.go:176
8 0x0000000000791043 in cmd/go/internal/par.(*Cache).Do
at /usr/local/go/src/cmd/go/internal/par/work.go:128
9 0x00000000008ae283 in cmd/go/internal/modfetch.DownloadZip
at /usr/local/go/src/cmd/go/internal/modfetch/fetch.go:163
10 0x00000000008ad8be in cmd/go/internal/modfetch.download
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看对应 Golang 版本的 &lt;code&gt;go/src/cmd/go/internal/modfetch/fetch.go:176&lt;/code&gt; &lt;a href=&quot;https://github.com/golang/go/blob/d571a77846dfee8efd076223a882915cd6cb52f4/src/cmd/go/internal/modfetch/fetch.go#L176&quot;&gt;源码&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if cfg.CmdName != &quot;mod download&quot; {
fmt.Fprintf(os.Stderr, &quot;go: downloading %s %s\n&quot;, mod.Path, mod.Version)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大致浏览一下上下文，可以知道目前 &lt;code&gt;go list -json all&lt;/code&gt; 正在下载 &lt;code&gt;go mod&lt;/code&gt; 依赖，并把下载结果打印到 &lt;code&gt;os.Stderr&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而现在输出正卡死在 &lt;code&gt;os.Stderr&lt;/code&gt; 上。这和我们的直觉相违，&lt;code&gt;stdout&lt;/code&gt; / &lt;code&gt;stderr&lt;/code&gt; 这两个应该不会阻塞的呀。&lt;/p&gt;
&lt;h3&gt;怀疑 2，卡死在工具上？&lt;/h3&gt;
&lt;p&gt;按照怀疑 1 的调试步骤，查看工具本身的调用栈：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(dlv) gr 1
Switched from 0 to 1 (thread 25)
(dlv) bt
8 0x00000000004f8aeb in encoding/json.(*Decoder).refill
at /usr/local/go/src/encoding/json/stream.go:165
9 0x00000000004f887f in encoding/json.(*Decoder).readValue
at /usr/local/go/src/encoding/json/stream.go:140
10 0x00000000004f843c in encoding/json.(*Decoder).Decode
at /usr/local/go/src/encoding/json/stream.go:63
11 0x000000000067555e in github.com/ma6174/go_dep_search/depgraph.LoadDeps
at /Users/xxxxx/go/pkg/mod/github.com/ma6174/go_dep_search@v0.0.0-20200721060312-bfd635bcc992/depgraph/depgraph.go:195
12 0x00000000006a73ef in main.listAndSearch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;确认，卡死在 &lt;code&gt;dec.Decode(&amp;amp;di)&lt;/code&gt; 上，即卡死在 &lt;code&gt;di io.Reader&lt;/code&gt; 上。&lt;/p&gt;
&lt;h3&gt;阶段结论&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;go list -json all&lt;/code&gt; 卡死在输出 &lt;code&gt;stderr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;工具卡死在读 &lt;code&gt;stdin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那很明显了，工具进程和 &lt;code&gt;go list&lt;/code&gt; 进程出现了某种死锁。&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;首先，Golang 中 &lt;code&gt;exec.Command&lt;/code&gt; 会创建一个子进程，在 Linux 系统上，&lt;code&gt;cmd.StderrPipe&lt;/code&gt; 会调用 pipe(管道) 来作为父子进程间通信的方式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;StderrPipe() -&amp;gt; os.Pipe() -&amp;gt; syscall.Pipe2(p[0:], syscall.O_CLOEXEC)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，&lt;code&gt;go list&lt;/code&gt; 会先使用 &lt;code&gt;go mod download&lt;/code&gt; 下载依赖的包，当一个包下载完成，便会输出一行 &lt;code&gt;go: downloading xxx&lt;/code&gt; 到 &lt;code&gt;stderr&lt;/code&gt; 上。在所有包下载完毕后，才会开始包依赖分析，最后才将分析结果输出到 &lt;code&gt;stdout&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;回看工具的代码，可以看到父子进程间其实是如下的关系：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;父进程(工具) -&amp;gt; 读取 stdout pipe  -&amp;gt; 读取 stderr pipe 
子进程(go list) -&amp;gt; 写到 stderr pipe  -&amp;gt; 写到 stdout pipe 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两者读写的 pipe 交错了起来，&lt;code&gt;go list&lt;/code&gt; 写完 &lt;code&gt;stderr pipe&lt;/code&gt; 才会写 &lt;code&gt;stdout pipe&lt;/code&gt;，而工具读完 &lt;code&gt;stdout pipe&lt;/code&gt; 才会读 &lt;code&gt;stderr pipe&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 Linux 上，pipe 大小是有限的，普通情况下，上面的逻辑并没有暴露问题。但如果下载的依赖包特别多，导致 &lt;code&gt;stderr pipe&lt;/code&gt; 被塞满，&lt;code&gt;go list&lt;/code&gt; 便会阻塞在写 &lt;code&gt;stderr pipe&lt;/code&gt; 上，后续的 &lt;code&gt;stdout pipe&lt;/code&gt; 也就走不到了，而父进程一直在等待 &lt;code&gt;stdout pipe&lt;/code&gt; 输出的数据。。形成一个死锁。&lt;/p&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;p&gt;解决方案很简单，直接使用标准库提供的 &lt;code&gt;func (c *Cmd) Output() ([]byte, error)&lt;/code&gt; 或 &lt;code&gt;func (c *Cmd) CombinedOutput() ([]byte, error)&lt;/code&gt; 来获取子进程输出。&lt;/p&gt;
&lt;p&gt;如非必要，不要直接操作 pipe。&lt;/p&gt;
&lt;h2&gt;联想&lt;/h2&gt;
&lt;p&gt;pipe 的死锁问题让我联想到另一个经典的 socket 编程死锁案例。socket 编程也是一种多进程/跨机多进程通信方式。&lt;/p&gt;
&lt;p&gt;创建一个 TCP 链接，一端往另一端发送数据，会死锁吗？答案是会的。看下面的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// 接收端
func main() {
ln, err := net.Listen(&quot;tcp&quot;, &quot;:12345&quot;)
if err != nil {
panic(err)
}

for {
_, err := ln.Accept()
if err != nil {
panic(err)
}
}
}

// 发送端
func main() {
conn, err := net.Dial(&quot;tcp&quot;, os.Args[1])
if err != nil {
panic(err)
}
i := 0
for {
_, err := conn.Write([]byte(&quot;1&quot;))
if err != nil {
panic(err)
}
i++
fmt.Println(i)
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在我的电脑上，发送端输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1
2
...
2616001
2616002
2616003
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打印到 &lt;code&gt;2616003&lt;/code&gt; 便停止输出卡住了，阻塞在了 &lt;code&gt;conn.Write([]byte(&quot;1&quot;))&lt;/code&gt;。表象和上文 pipe 的例子非常相似。&lt;/p&gt;
&lt;p&gt;分析一下发送端程序，当调用 &lt;code&gt;conn.Write([]byte(&quot;1&quot;))&lt;/code&gt; 后，函数成功返回，从程序员角度看，似乎接收端这时候应该是已经收到了 &lt;code&gt;1&lt;/code&gt;。但其实接收端调用 &lt;code&gt;ln.Accept()&lt;/code&gt; 之后，并没有去读取连接上的数据。收到的数据去哪了？使用 &lt;code&gt;netstat&lt;/code&gt; 命令看一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ netstat -anp
Proto Recv-Q Send-Q  Local Address           Foreign Address         State       PID/Program name
tcp        0 2548608 127.0.0.1:46196         127.0.0.1:12345         ESTABLISHED 70072/main
tcp6   67395       0 127.0.0.1:12345         127.0.0.1:46196         ESTABLISHED 69896/main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，数据都堆积在了接收队列 &lt;code&gt;Recv-Q&lt;/code&gt; 和发送队列 &lt;code&gt;Send-Q&lt;/code&gt;，而且正好 &lt;code&gt;2548608+67395=2616003&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;P.S. TCP 协议的可靠性，只是保证双方的协议栈能可靠收发数据，应用程序的可靠性需要应用层协议来保证。&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>