<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>300d4735d3a0c4edeefa6fabbb91dfa3</guid>
<title>双非渣本后端三个月逆袭字节</title>
<link>https://toutiao.io/k/faz5prg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-topic-des nc-post-content&quot;&gt;
&lt;h2 id=&quot;个人背景介绍&quot;&gt;个人背景介绍&lt;/h2&gt; 
&lt;p&gt;2017年毕业于一所不知名双非本科大学，毕业时就有着一颗想进大厂的心，但又想留在成都，不愿意去北上广，现在其实相当后悔。当年在成都的大厂少之又少，再加上校招时非常努力地玩耍，导致投的几个大厂面试都全部挂掉。也错失了进大厂最好的机会，所以我奉劝大三的同学如果对自己的职业有追求，有进大厂的梦想，在大三的时候一定要好好准备，在校招的时候拿offer。&lt;br/&gt;&lt;span&gt;最后我在成都一家本地科技公司做了Java开发，中间也跳过一次槽，也是做的Java。但这几年时间里总感觉公司能给的成长太慢，虽然自己也在学习，还是免不了焦虑，特别是像自己这种学历和公司背景都一般的程序员，要保证自己以后不被淘汰，必须得做点什么。所以在听到一个前同事被公司裁掉，最后进入大厂这个事情之后，彻底点燃了我心中想进大厂的那把火，我也准备内推试试&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8&quot; target=&quot;_blank&quot;&gt;字节跳动&lt;/a&gt;。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;因为疫情原因，很多企业生存困难。我也保持了理智，没有辞职进行面试。而是给自己制定了学习计划，不得不说，在职的情况下复习确实很难，因为可能加班打乱计划。于是我把所有能利用的个人时间全部利用了起来，比如早上十点上班，我六点钟就会起床，刷两个小时LeetCode，八点钟洗漱之后去上班。晚上如果有时间就会把早上刷过的题拿出来继续复习，花了两个月的时间，一边复习（预习）数据结构，一边做题，LeetCode上面的高频题基本都过了一遍。花了那么多时间&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%88%B7%E9%A2%98&quot; target=&quot;_blank&quot;&gt;刷题&lt;/a&gt;，都是因为自己&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;太菜，以前没有进行专门的练习。题做得差不多之后，就开始复习专业知识了，具体内容我都会总结出来。前前后后准备了三个月，我才敢进行内推，经历了八次面试之后，面试时间又持续三个月，皇天不负有心人，终于在这个月等到了oc。&lt;/span&gt;&lt;br/&gt;下面是面试内容，时间太久了，可能记得不太全，但基本上包含了所有问题，白天上班，我都是选择晚上进行面试，哈哈&lt;/p&gt; 
&lt;h2 id=&quot;一面a部门&quot;&gt;一面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;讲&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，串起来讲，可能遇到的问题，怎么解决，怎么实现，讲了发送客服消息&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面的bean怎么回事&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;HashMap和ConcurrentHashMap，HashMap中的&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%BA%A2%E9%BB%91%E6%A0%91&quot; target=&quot;_blank&quot;&gt;红黑树&lt;/a&gt;，两者rehash的区别&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Mysql的一致性是什么，数据库redolog，undo log，MySQL的索引结构，为什么二级索引叶子节点不能直接存储行数据的指针，这样可以不回表，怎么考虑的？&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;里面的zset，跳表怎么实现，怎么增删，&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;是怎么rehash的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;转双向&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面a部门&quot;&gt;二面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;自我介绍&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;再一次聊&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，功能，架构，角色，量级&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Spring里面有哪些设计模式&lt;/li&gt; 
 &lt;li&gt;SpringMVC和SpringBoot有什么区别&lt;/li&gt; 
 &lt;li&gt;SpringBoot的自动配置是怎么实现的&lt;/li&gt; 
 &lt;li&gt;刚刚你说了线程池，你线程池是用的什么，参数有哪些，为什么这么设置 &lt;/li&gt; 
 &lt;li&gt;线程池核心线程满了怎么办，里面的阻塞队列是干什么的&lt;/li&gt; 
 &lt;li&gt;说说ThreadLocal是什么&lt;/li&gt; 
 &lt;li&gt;CAP理论知道吗，为什么不能同时满足&lt;/li&gt; 
 &lt;li&gt;Redis里面的数据结构有什么场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Redis怎么实现锁（&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;锁的所有坑都说了一遍）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式事务知道吗，有哪些方案（说了2PC，3PC，TCC，MQ）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;，&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84&quot; target=&quot;_blank&quot;&gt;树的直径&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;有什么要问我的&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面a部门&quot;&gt;三面A部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;场景题，设计一个朋友圈，读QPS 1000w，写QPS 10w&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;LFU&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;这个面试官是个leader，比较强势，很多细节回答的不是很好，所以脸色一直不好，给人压力较大，面完就觉得凉了。果然面完之后和前两次不一样，HR那里就没有任何通知了，到这里还是很失落，准备了那么久，因为最后一面没表现好导致挂掉。之后等了一个月，这一个月没有任何消息，一个月过后又接到字节HR的电话，说我之前两面面评都不错，让我试试他们部门，我就同意了。&lt;/p&gt; 
&lt;h2 id=&quot;一面b部门&quot;&gt;一面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;怎么做服务拆分，边界怎么划分的&lt;/li&gt; 
 &lt;li&gt;分布式之后会遇到什么问题，CAP的各个情况介绍一下&lt;/li&gt; 
 &lt;li&gt;dubbo调用过程是怎样的，PB知道吗&lt;/li&gt; 
 &lt;li&gt;thrift了解过吗&lt;/li&gt; 
 &lt;li&gt;zk介绍一下，有哪些节点类型，特点&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;怎么知道&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;中接口的重要性，怎么做监控，你说的自动化测试是怎么做到的（这个问题回答完，他笑了。。。）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你所理解的SLA是什么，要达到什么等级&lt;/li&gt; 
 &lt;li&gt;说说你理解的k8s&lt;/li&gt; 
 &lt;li&gt;nginx的upstream是干什么的&lt;/li&gt; 
 &lt;li&gt;nginx有哪些负载均衡策略&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F&quot; target=&quot;_blank&quot;&gt;岛屿数量&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;你有什么问题要问我&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;二面b部门&quot;&gt;二面B部门&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;锁有哪些实现方式&lt;/li&gt; 
 &lt;li&gt;分布式锁的实现方式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM的内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;MySQL的事务介绍，ACID的实现原理是什么（想问MySQL的日志）&lt;/li&gt; 
 &lt;li&gt;HashMap的原理，其他线程安全的Map&lt;/li&gt; 
 &lt;li&gt;Redis的高可用，有哪些持久化方式&lt;/li&gt; 
 &lt;li&gt;Redis的数据结构，线程模型&lt;/li&gt; 
 &lt;li&gt;用过什么消息队列，有什么特点&lt;/li&gt; 
 &lt;li&gt;怎么保证消息幂等消费&lt;/li&gt; 
 &lt;li&gt;docker的网络模式&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7&quot; target=&quot;_blank&quot;&gt;比较版本号&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;提问&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;三面b部门（交叉面）&quot;&gt;三面B部门（交叉面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;Linux的内存管理&lt;/li&gt; 
 &lt;li&gt;浏览器打开一个网站的过程中会经历哪些网络处理，DNS的具体过程是啥&lt;/li&gt; 
 &lt;li&gt;zk是什么分布式模型（想问的CAP定理），主从怎么做选举&lt;/li&gt; 
 &lt;li&gt;zk只有一个主节点，写性能不高，zk怎么解决的&lt;/li&gt; 
 &lt;li&gt;etcd或consul知道吗&lt;/li&gt; 
 &lt;li&gt;多个服务中如何快速排查问题&lt;/li&gt; 
 &lt;li&gt;Redis中的淘汰方式有哪些，Redis性能高的原因是啥&lt;/li&gt; 
 &lt;li&gt;docker的实现原理&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95%E9%A2%98&quot; target=&quot;_blank&quot;&gt;算法题&lt;/a&gt;：相交&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;四面b部门-（leader面）&quot;&gt;四面B部门 （leader面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;介绍&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;，细节&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot; target=&quot;_blank&quot;&gt;项目&lt;/a&gt;量级多大，QPS最高的接口是怎么做的&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;rpc怎么实现服务发现&lt;/li&gt; 
 &lt;li&gt;zk中的watch机制是怎么实现的&lt;/li&gt; 
 &lt;li&gt;分布式锁有哪些实现，MySQL，zk，Redis都说了一遍，并且分析了各自的优缺点，这个问题问的频率太高了&lt;/li&gt; 
 &lt;li&gt;怎么提高数据库读写性能&lt;/li&gt; 
 &lt;li&gt;k8s了解吗&lt;/li&gt; 
 &lt;li&gt;servicemesh有做过吗&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;五面b部门（hr面）&quot;&gt;五面B部门（HR面）&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;离职原因&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92&quot; target=&quot;_blank&quot;&gt;职业规划&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;期望薪资&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;基础知识&quot;&gt;基础知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;常用集合、数据结构（数据增删改查操作的原理具体实现、各参数的含义，以及如何组合使用）&lt;/li&gt; 
 &lt;li&gt;Java的语法，OO的思想要熟悉，常用设计模式要知道场景&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;JVM内存模型，垃圾回收&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，垃圾收集器的区别，GC调优&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;线程模型&lt;/li&gt; 
 &lt;li&gt;IO模型（包括操作系统底层IO模型和常见BIO、NIO、AIO、IO多路复用的原理）&lt;/li&gt; 
 &lt;li&gt;Redis（数据结构的内部实现、淘汰原理策略、持久化、集群、扩容、数据同步、以及一些常见缓存问题的解决方案）&lt;/li&gt; 
 &lt;li&gt;MySQL（索引原理，查询优化，三大日志）&lt;/li&gt; 
 &lt;li&gt;消息队列（内部原理，常见消息问题解决方案）&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;分布式原理、&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;、rpc原理（paxos、raft、zoo&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=keep&quot; target=&quot;_blank&quot;&gt;keep&lt;/a&gt;er的原理）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;分布式场景题（高可用，高性能相关）&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2 id=&quot;其他知识&quot;&gt;其他知识&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;大数据量操作（在有限时间内完成、在有限空间内完成）&lt;/li&gt; 
 &lt;li&gt;设计题（看一些常见的分布式ID、分布式计数服务等等）&lt;/li&gt; 
&lt;/ol&gt; 
 
&lt;ol&gt; 
 &lt;li&gt;数组&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E9%93%BE%E8%A1%A8&quot; target=&quot;_blank&quot;&gt;链表&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;位运算&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;（dfs，bfs，相当重要，只要会了&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E4%BA%8C%E5%8F%89%E6%A0%91&quot; target=&quot;_blank&quot;&gt;二叉树&lt;/a&gt;，回溯那些&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;也会了）&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;设计题&lt;/li&gt; 
 &lt;li&gt;LRU/LFU&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;&lt;a class=&quot;content-link  js-post-content-keyword&quot; href=&quot;/jump/super-jump/word?word=%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;查找&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://uploadfiles.nowcoder.com/files/20210311/1219786_1615453294383/008eGmZEgy1goeugqrbrrj31360u0451.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; 
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt; 
&lt;p&gt;我给大家的建议就是慢慢来，不管是社招还是校招，制定自己的计划，一定要有自己的知识体系，针对自己薄弱的地方进行强化复习，不放过任何一个细节。&lt;br/&gt;简历上写的东西一定要会，一般都是针对简历来提问的。如果在预习的过程中感到困难或者吃力，那就对了，等你熬过去了，就是胜利。祝福大家都能拿到满意的offer。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c972bb51558761f732292c0d3715a45a</guid>
<title>[推荐] 进程和线程这 19 个问题太强了</title>
<link>https://toutiao.io/k/93vqd5f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于各个进程不共享相同的地址空间，任何一个进程的全局变量在另一个进程中都不可见，所以如果想要在进程之间传递数据就需要通过内核，在内核中开辟出一块区域，该区域对多个进程都可见，即可用于进程间通信。有读者可能有疑问了，文件方式也是进程间通信啊，也要在内核开辟区域吗？这里说的内核区域其实是一段缓冲区，文件方式传输数据也有内核缓冲区的参与（零拷贝除外）。&lt;/p&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;524&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;367&quot; data-ratio=&quot;0.672093023255814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9lFFFiaKpEr8Pnej5HSUaPCia1zguc4KbhpwgTSdVNZzic70zs5zOicoscMB7QxxSOlAtZriaNDWjOxSiafxSS2gJ9kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/section&gt;&lt;p&gt;如何开辟这种公共区域来进行进程间通信呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;匿名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;匿名管道就是&lt;strong&gt;&lt;span&gt;pipe&lt;/span&gt;&lt;/strong&gt;，pipe只能在父子进程间通信，而且数据只能&lt;span&gt;&lt;strong&gt;&lt;span&gt;单向流动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;（半双工通信）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用方式&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）父进程创建管道，会得到两个文件描述符，分别指向管道的两端；&lt;/p&gt;&lt;section&gt;2）父进程创建子进程，从而子进程也有两个文件描述符指向同一管道；&lt;/section&gt;&lt;p&gt;3）父进程可写数据到管道，子进程就可从管道中读出数据，从而实现进程间通信，下面的示例代码中通过pipe实现了每秒钟父进程向子进程都发送消息的功能。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; _pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ret = pipe(_pipe);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (ret &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        perror(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;pipe\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;pid_t&lt;/span&gt; id = fork();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (id &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        perror(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fork\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (id == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        close(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; _mesg[&lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (j &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(_mesg, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;\0&#x27;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(_mesg));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            read(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;], _mesg, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(_mesg));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;, _mesg);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            j++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        close(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *mesg = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mesg = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;父进程来写消息了&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            write(_pipe[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;], mesg, &lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(mesg) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ++i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;我们平时也经常使用关于管道的命令行：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ls | less&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;该命令行的流向图如下：&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;524&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;266&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9lFFFiaKpEr8Pnej5HSUaPCia1zguc4KbhYxKQXoK9p50n8B2haIEPrLxTfvHVbc4MBApdfddOHF6HKCicxPq5QLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3908701854493581&quot; data-w=&quot;701&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;1：创建管道&lt;/p&gt;&lt;p&gt;2：为ls创建一个进程，设置stdout为管理写端&lt;/p&gt;&lt;p&gt;3：为less创建一个进程，设置stdin为管道读端&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高级管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过&lt;span&gt;&lt;strong&gt;&lt;span&gt;popen&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;将另一个程序当作一个新的进程在当前进程中启动，它算作当前进程的子进程，高级管道只能用在有亲缘关系的进程间通信，这种亲缘关系通常指父子进程，下面的GetCmdResult函数可以获取某个Linux命令执行的结果，实现方式就是通过popen。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;GetCmdResult&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &amp;amp;cmd, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; max_size = &lt;span class=&quot;code-snippet__number&quot;&gt;10240&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *data = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;code-snippet__built_in&quot;&gt;malloc&lt;/span&gt;(max_size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (data == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;malloc fail&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, max_size);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; max_buffer = &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; buffer[max_buffer];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    FILE *fdp = popen((cmd + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; 2&amp;gt;&amp;amp;1&quot;&lt;/span&gt;).c_str(), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;r&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; data_len = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fdp) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (!feof(fdp)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fgets(buffer, max_buffer, fdp)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(buffer);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (data_len + len &amp;gt; max_size) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data size larger than &quot;&lt;/span&gt; &amp;lt;&amp;lt; max_size;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__built_in&quot;&gt;memcpy&lt;/span&gt;(data + data_len, buffer, len);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                data_len += len;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pclose(fdp);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(data, data_len)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;free&lt;/span&gt;(data);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;命名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;匿名管道有个缺点就是通信的进程一定要有亲缘关系，而命名管道就不需要这种限制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;命名管道其实就是一种特殊类型的文件，所谓的命名其实就是文件名，文件对各个进程都可见，通过命名管道创建好特殊文件后，就可以实现进程间通信。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;可以通过mkfifo创建一个特殊的类型的文件，参数读者看名字应该就了解，一个是文件名，一个是文件的读写权限：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;mkfifo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt;* filename, &lt;span class=&quot;code-snippet__keyword&quot;&gt;mode_t&lt;/span&gt; mode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;当返回值为0时，表示该命名管道创建成功，至于如何通信，其实就是个读写文件的问题！&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息队列&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;队列想必大家都知道，像FIFO一样，这里可以有多个进程写入数据，也可以有多个进程从队列里读出数据，但消息队列有一点比FIFO还更高级，它读消息不一定要使用先进先出的顺序，每个消息可以赋予类型，可以按消息的类型读取，不是指定类型的数据还存在队列中。本质上MessageQueue是存放在内核中的消息链表，每个消息队列链表会由消息队列标识符表示，这个消息队列存于内核中，只有主动的删除该消息队列或者内核重启时，消息队列才会被删除。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;在Linux中消息队列相关的函数调用如下：&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgget&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;, key, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgsend&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *msg_ptr, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; msg_sz, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; message_type;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgrcv&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *msg_ptr, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; msg_st, &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgflg)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;msgctl&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; command, struct msgid_ds *buf)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-theme=&quot;default&quot; data-language=&quot;javascript&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;示例代码如下：&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZ 20&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msg_type;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; text[BUFFER_SIZ];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} MsgWrapper;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MsgWrapper data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid = msgget((&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;)&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0666&lt;/span&gt; | IPC_CREAT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgid == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgget error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgrcv(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, msgtype, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;error &quot;&lt;/span&gt; &amp;lt;&amp;lt; errno &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;read data &quot;&lt;/span&gt; &amp;lt;&amp;lt; data.text &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-snippet__built_in&quot;&gt;strlen&lt;/span&gt;(data.text) &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgctl(msgid, IPC_RMID, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgctl error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Receive ok \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MsgWrapper data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgtype = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; msgid = msgget((&lt;span class=&quot;code-snippet__keyword&quot;&gt;key_t&lt;/span&gt;)&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0666&lt;/span&gt; | IPC_CREAT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgid == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgget error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    data.msg_type = msgtype;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;; ++i) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data.text, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, BUFFER_SIZ);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; a = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a&#x27;&lt;/span&gt; + i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;memset&lt;/span&gt;(data.text, a, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgsnd(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgsnd error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::this_thread::sleep_for(&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;memcpy&lt;/span&gt;(data.text, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1234567&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (msgsnd(msgid, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;data, BUFFER_SIZ, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;msgsnd error \n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;thread &lt;span class=&quot;code-snippet__title&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Receive)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    r.detach();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;code-snippet__function&quot;&gt;thread &lt;span class=&quot;code-snippet__title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Send)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    s.detach();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::this_thread::sleep_for(&lt;span class=&quot;code-snippet__built_in&quot;&gt;std&lt;/span&gt;::chrono::seconds(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;输出：root@iZuf64idor3ej648ciairaZ:~# ./a.out&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data b&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data c&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data d&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data e&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data f&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data g&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data h&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data i&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data j&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;read data &lt;span class=&quot;code-snippet__number&quot;&gt;1234567&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Receive ok&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;br/&gt;&lt;p&gt;代码中为了演示方便使用消息队列进行的线程间通信，该代码同样用于进程间通信，消息队列的实现依赖于内核的支持，上述代码可能在某些系统（WSL）上不能运行，在正常的Ubuntu上可以正常运行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;消息队列VS命名管道&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;消息队列&amp;gt;命名管道&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）消息队列收发消息自动保证了同步，不需要由进程自己来提供同步方法，而命名管道需要自行处理同步问题；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;2）消息队列接收数据可以根据消息类型有选择的接收特定类型的数据，不需要像命名管道一样默认接收数据。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;消息队列&amp;lt;命名管道&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;消息队列有一个缺点就是发送和接收的每个数据都有最大长度的限制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;共享内存&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可开辟中一块内存，用于各个进程间共享，使得各个进程可以直接读写同一块内存空间，就像线程共享同一块地址空间一样，该方式基本上是最快的进程间通信方式，因为没有系统调用干预，也没有数据的拷贝操作，但由于共享同一块地址空间，数据竞争的问题就会出现，需要自己引入同步机制解决数据竞争问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;共享内存只是一种方式，它的实现方式有很多种，主要的有mmap系统调用、Posix共享内存以及System V共享内存等。通过这三种“工具”共享地址空间后，通信的目的自然就会达到。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;信号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;信号也是进程间通信的一种方式，信号可以在任何时候发送给某一个进程，如果进程当前并未处于执行状态，内核将信号保存，直到进程恢复到执行态再发送给进程，进程可以对信号设置预处理方式，如果对信号设置了阻塞处理，则信号的传递会被延迟直到阻塞被取消，如果进程结束，那信号就被丢弃。我们常用的CTRL+C和kill等就是信号的一种，也达到了进程间通信的目的，进程也可以对信号设置signal捕获函数自定义处理逻辑。这种方式有很大的&lt;span&gt;缺点&lt;/span&gt;：只有通知的作用，通知了一下消息的类型，但不能传输要交换的任何数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Linux系统中常见的信号有：&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGHUP：该信号在用户终端结束时发出，通常在中断的控制进程结束时，所有进程组都将收到该信号，该信号的默认操作是终止进程；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGINT：程序终止信号，通常的CTRL+C产生该信号来通知终止进程；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGQUIT：类似于程序错误信号，通常的CTRL+\产生该信号通知进程退出时产生core文件；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGILL：执行了非法指令，通常数据段或者堆栈溢出可能产生该信号；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGTRAP：供调试器使用，由断电指令或其它陷阱指令产生；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGABRT：使程序非正常结束，调用abort函数会产生该信号；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGBUS：非法地址，通常是地址对齐问题导致，比如访问一个4字节长的整数，但其地址不是4的倍数；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGSEGV：合理地址的非法访问，访问了未分配的内存或者没有权限的内存区域；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGPIPE：管道破裂信号，socket通信时经常会遇到，进程写入了一个无读者的管道；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGALRM：时钟定时信号，由alarm函数设置的时间终止时产生；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGFPE：出现浮点错误（比如除0操作）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86261&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;SIGKILL：杀死进程（不能被捕捉和忽略）；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;信号量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;想必大家都听过信号量，信号量就是一个特殊的变量，程序对其访问都是原子操作，每个信号量开始都有个初始值。最简单最常见的信号量是只能取0和1的变量，也叫二值信号量。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;信号量有两个操作，P和V：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;P：如果信号量变量值大于0，则变量值减1，如果值为0，则阻塞进程；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;V：如果有进程阻塞在该信号量上，则唤醒阻塞的进程，如果没有进程阻塞，则变量值加1&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93831&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;Q&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;信号量和信号有什么关系&lt;/span&gt;？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;A&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;没有任何关系，完全是不同的东西。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93831&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;Q&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;信号量与互斥量有什么区别？&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;section&gt;A&lt;/section&gt;&lt;/section&gt;&lt;section data-bcless=&quot;spin&quot; data-bclessp=&quot;120&quot; data-bdopacity=&quot;1%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;互斥量用于&lt;/span&gt;&lt;strong&gt;&lt;span&gt;互斥&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，信号量用于&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;同步&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，互斥指的是某一资源同一时间只允许一个访问者访问，但无法限制访问顺序，访问是无序的，而同步在互斥的基础上可以控制访问者对资源的顺序。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;套接字&lt;/span&gt;&lt;/strong&gt;：就是网络传输，不用多说，网络通信都可以多机通信呢，更不用说进程间通信啦，你能看到程序喵的文章也是套接字的功劳。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;：显而易见，多个进程可以操作同一个文件，所以也可以通过文件来进行进程间通信。&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3011e8c3b58ebd31009e6a973e1edb8b</guid>
<title>[推荐] 曝光了，清华计算机系最牛的课</title>
<link>https://toutiao.io/k/71s8fte</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;大家好，我是石头哥。&lt;/p&gt;&lt;p&gt;今天这篇文章，墙裂建议想提高核心竞争力的程序员同学重点关注，并付出行动。&lt;/p&gt;&lt;p&gt;我曾经在 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247484698&amp;amp;idx=1&amp;amp;sn=03cc4636e7ee7364a85788a98809cc03&amp;amp;chksm=eb4704fedc308de8efd48ab9aed4fd1ddee5665d8e76d0d3767c1f704eac8b15a83e450a08f1&amp;amp;token=920855099&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;从一道面试题谈谈一线大厂码农应该具备的基本能力&lt;/a&gt;这篇文章中，强调我们在仓促地码着繁琐的业务代码时候，希望不要抛弃一些基础的东西，多培养一下我们的编程素养。&lt;/p&gt;&lt;p&gt;在用编程语言，利用各种工具来实现我们想要达到的目的的时候，能做到“知其然，知其所以然”更好。&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据结构&lt;/span&gt;就是其中最重要的基础之一。&lt;/p&gt;&lt;p&gt;我也曾经在多次场合推荐过（比如&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247492954&amp;amp;idx=1&amp;amp;sn=b487e0164a11e6753affc8de19c92647&amp;amp;chksm=eb44e4bedc336da843f9b0a3d9b6295727e025018b039dc654ac92672e85032307d769269ea7&amp;amp;token=920855099&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;万字长文讲述我是怎样保送清华的 | 寒门学子奋斗史（四）&lt;/a&gt;），清华计算机系的邓老师这门公开课《数据结构》。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24887556221889057&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1bPolj4q9veQXgkosN7f6WdV8ZY49xZxicfNCcbwo5UUfJYlmmXIGz2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1334&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多个场合爆吹邓老师的《数据结构》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;偶然发现这门课程，今年上半年又开课了，因此特此又来推荐给大家，发自内心推荐，实名点赞。&lt;/p&gt;&lt;p&gt;邓老师深受清华校内外的学生喜爱，他和他的课程也获奖无数，后文你将看到大家对邓老师的评价。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5817490494296578&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1Ig2e0PT35bBH2swZa1Rn2bQbiboibicyic8e8SZsagNPbnlKY6yh2mOicUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;526&quot;/&gt;&lt;figcaption&gt;43W+人学习&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;缘起&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我在清华时，上过邓老师的 2 门课程：《数据结构》、《计算几何》。《计算几何》研究生期间选修的专业课程，《数据结构》是旁听本科生的课程。&lt;/p&gt;&lt;p&gt;亲身体验过，那是真的很赞，被实力圈粉。他在讲授《数据结构》和《计算几何》方面拥有20多年的经验，课堂用的 PPT 和 动画效果也特别赞、特别赞、特别赞（还能额外学到人文知识！）。&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我上过现场效果最好，最生动的课程（没有之一）。在学校&lt;/span&gt;&lt;span&gt;时候，线下教室也饱满，线上公开课学堂在线也是爆满。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5969498910675382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia15atSkvUrdxD0pIVFXDQWfgst0vtYNC2lW6ARicGQlmibt1AcA5I3fZNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;918&quot;/&gt;&lt;figcaption&gt;我曾经报名的课程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这真不是我在这里爆吹，这门课程是清华大学评选出的首批 7 门标杆课程之一。你可以去看看知乎上的讨论（https://www.zhihu.com/question/306632594）。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8487874465049928&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1pddzEhia4xfHYXicZLy2LmX5mIibfyHHbcM1Zo2ibysELiaxlzf7QpibCNlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1402&quot;/&gt;&lt;figcaption&gt;邓公《数据结构》实至名归，截图自知乎&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.446064139941691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia16F9MoVOCgdGa8Oq7VBGIebaBUVLEVwgZMRVpJ5b1MrBrq33sqlMpVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1372&quot;/&gt;&lt;figcaption&gt;知乎评论：我从来没碰到过能如此深入浅出把数据结构讲得这么透彻又有趣的老师&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;识邓公好比遇美酒&lt;/span&gt;&lt;/h2&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.437570303712036&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1GGFNlIdEmibhBS00tdNjobOiby8icNPe4n7YGdXWJkJdIb9p17chJ08BA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;889&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;邓老师主页封面&lt;/span&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p&gt;邓俊辉，清华大学计算机系教授。1993和1997年分别于清华大学计算机系获学士、博士学位，1997年起在清华大学任教，他在讲授“数据结构”和“计算几何”方面拥有20多年的经验。&lt;/p&gt;&lt;p&gt;古人云，“天若不爱酒，酒星不在天；地若不爱酒，地应无酒泉”，天地爱酒，人亦如此。&lt;/p&gt;&lt;p&gt;有学子言：“识邓公好比路遇美酒：越存越香，越品越醇”，好比美酒的“邓公”所言即是清华大学&lt;strong&gt;新百年教学成就奖&lt;/strong&gt;的获得者，计算机系教授 —— 邓俊辉。（来源：https://news.tsinghua.edu.cn/info/1070/40526.htm）&lt;/p&gt;&lt;p&gt;邓老师说，数据结构与算法（简称DSA）是个非常开放的专题，学习过程没有终点，任何一门课程都不可能穷尽：(内容来自邓老师课程主页)&lt;/p&gt;&lt;p&gt;若将DSA比作汽车，则熟悉基本的数据结构的基本功能与使用方法，犹如拿驾照会开车能上道。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;懂得不同DSA之间的差异及其适用场合，懂得针对问题需要选取适当的DSA，犹如懂得如何选购适宜于自己的汽车。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;懂得对DSA做适当的裁剪、扩充和改造，并优化组合，犹如玩车的行家里手，有DIY的能力和乐趣。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;探索DSA的优化极限，能够完成从内部优化到外部封装的整个过程，则是设计师与工程师的任务与要求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;课程内容&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;PPT、板书、教材（示例代码）、教学演示，无一不称赞。&lt;/p&gt;&lt;h3&gt;制作精美的 PPT&lt;/h3&gt;&lt;p&gt;首先，我们来看看 PPT（文末附 PPT 下载）&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6400885935769657&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1aSnfQcY6rKaZyynPRNVAxlKmUug13UpfpwVgpNiaLd8sYQtiarAYjkEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1806&quot;/&gt;&lt;figcaption&gt;PPT，邓老师每年会更新迭代，图为 2021 年&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;大部分章节的首页，均有一两句“引言”：或是名言名句，或者名著节选，也有歌词。&lt;/p&gt;&lt;p&gt;可怕的是，还基本上都会和本节的内容有关系！有关系！有关系！（可见邓老师的用心程度之高！）&lt;/p&gt;&lt;p&gt;比如随便选了其中的 3 页 PPT：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;栈 —— “陛下用群臣，如积薪耳，后来者居上”，语出《史记·汲郑列传》。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;红黑树 —— “这时，我看见两只大蚂蚁，一只红不棱登，另一只个儿特大，差不离有半英寸长，是黑不溜秋的，它们两个正在相互凶殴...”，美国作家 亨利·戴维·梭罗 的《瓦尔登湖》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图的广度优先搜索 —— 《五环之歌》，岳云鹏&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.563&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1O57Jebgu7FU91WmQrm4pQMSyJzhEDSIaWiafXobM4PosDqH9QZHh6yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5564278704612365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1YZf2bEicRbWeAzd9ozlWKhcwJER6qPPjoVKnm9EfvJ5WrxVTrB5nxmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2038&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.554679802955665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1cBEaXWibU84pqA4sd8SSLM7TC9Iaof0rS4q36HViakt21sVOiboDIjQiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2030&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt; 记得左右滑动，一共 3 张 &amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;&lt;p&gt;不好意思，知识储备不够，看《数据结构》PPT，让我一边百度一边，学起了人文知识。难怪听说不少非计算机相关专业的学生也来旁听课程，原来是为了学人文知识，笑😁&lt;/p&gt;&lt;h3&gt;生动的板书演示&lt;/h3&gt;&lt;p&gt;我们再来看看，邓老师的板书演示。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1wGotzToe0noMbjKibc57T3SyUXFwJ62RXsibyujH8Q4S9ZZaG0KBOMEA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;figcaption&gt;看看这板书演示1&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1P1OAxH8muAeibcQMsjqj86x34F8gxjGvcOcVHLNvOLIaAn90muS0GGA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;figcaption&gt;看看这板书演示2&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;课堂效果好的背后其实还有一套软件，叫“LectureMate”，是邓老师开发的教学演讲辅助工具。&lt;/p&gt;&lt;p&gt;邓老师也是无偿捐献出来供非盈利使用，可直接到老师主页下载使用。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.42962962962962964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1IWg9KA9V9TBeeI8L9CSzfxhicnKicf4L6DTLib0TfcGwqRo2xuhHLox4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;正规院校教师可直接免费使用完整功能的教学工具&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;不得不说，邓老师的字也是非常漂亮。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3074670571010249&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1MHia4UrjOy2sjjnL7VRbLob9TJu3x0mEvdUd4AJwW3xShKiakNwn9zCA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;683&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;邓老师书法&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-tools=&quot;新媒体排版&quot; data-id=&quot;1259732&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6713754646840149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia16oibN9t1fR88aqNkNMBvkfTRzk6VLqI0Yqm1icicNkF9cs7njvLibBNgZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1345&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;邓老师写的书签送给学生，图片来源见水印&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/figure&gt;&lt;h3&gt;教材、教学演示、配套源码&lt;/h3&gt;&lt;p&gt;我们再来看看教材。（在公众号“程序猿石头”后台回复“清华数据结构” 免费下载）&lt;/p&gt;&lt;p&gt;教材，到目前为止一共出了 3 版，最新版如下所示：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7819548872180451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1xwMabc06OKV1JmdvicYq1SUl6ib1ts1YoSkWbZn8wbxhOP4f0b2NFwkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;/&gt;&lt;figcaption&gt;数据结构第三版封面&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7309697601668405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1wmIG0wdiaSSX3ea0nkicB6mLUUD6aXUbCQtpkhECzXgwgHvBXfBibQsbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;959&quot;/&gt;&lt;figcaption&gt;数据结构第三版截图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;我手里有的实体书是第二版，长这个样子：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7437145174371452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1QOR2sbDp6ic1euC3xrbuL3VaGj5ht3v65k6a964tdLNmzmtu3wJ4paA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1233&quot;/&gt;&lt;figcaption&gt;数据结构（C++语言版）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;目前，邓老师教材均以 C++语言作为示例，但其实数据结构掌握并不依赖于某一门特定的语言。重点是我们要掌握其中的思想。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9724025974025974&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1lfMD6RdaCU4bK7icu4hlzRialBQRYwM3xGZPNsdnqibURVugAWouuh7Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;配套源码&lt;/figcaption&gt;&lt;p&gt;我看邓老师，早年期间（2006年）也出过 Java 版本的教材，如下：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6190476190476191&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1d9ANs0WTib0BgpWnhtoSxoVByPiawMY5RDrPzqqUI3TZiaqDJl1LdZH8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;figcaption&gt;数据结构与算法（Java描述）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;邓老师一直把教书育人、传播知识放在首位。你看，他将上述所有相关教学材料均向公众开放。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5639913232104121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1EJTD7jPqWJu68XUP4cjxc5ukSZ4ict2qicfNwynXDLibt8GG2K9ntw0zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;figcaption&gt;邓老师相关教学资料向公共开放&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7684210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibs6vG1gRXjntxKJtgplhVia1x9U7wR4O6fjukbibAfcmKEczeh6MTZOkEKibZPe61J8IQ1hmbGSwWTzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;855&quot;/&gt;&lt;/figure&gt;&lt;p&gt;还在等什么呢？抓紧去学堂在线学习邓老师的数据结构课程吧。&lt;/p&gt;&lt;p&gt;这门课程不仅适用于在校生，工作之后，若想补齐巩固相应的基础，也是很好的选择，关键还免费（证书认证收费）。&lt;/p&gt;&lt;p&gt;这不比外面各种培训班香太多吗？&lt;/p&gt;&lt;p&gt;也感谢现在科技的发达，同时也感谢邓老师的无私，让你足不出户即可享受清华名师的教学。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;后记&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;真正能学好了这门课程，什么 BAT 大厂，都是小 case，学完后你找我，帮你推荐到各个大厂。&lt;/p&gt;&lt;p&gt;大家抓紧去清华学堂免费在线注册学习（学堂在线，打钱&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibtwNJw9tAEnJ0KgLBF9RDf1WAZuepzJBBhS9RtjbGqv6adk4pGIrETYs8mFmLUTbqYPQuIt55dbeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;）吧，视频公开课、配合邓老师的教材，真的很棒！网址点击左下角阅读原文直达。&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了方便大家，我已经把相关学习资料下载打包好了（当然你也可以到前文提到的邓老师课程主页下&lt;/span&gt;&lt;span&gt;载），你只需要在公众号后台回复“清华数据结构”，我就将上述所有资料提供给你。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3OTUzMzcwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujw8LhrKnbvzEUPibAQINJDc60oDZ9S1XrQsrxQf6M8iakCatO0YA4jXbvA/0?wx_fmt=png&quot; data-nickname=&quot;程序猿石头&quot; data-alias=&quot;tangleithu&quot; data-signature=&quot;清华毕业的打工仔，分享计算机领域的技术、职场和大学生学习方法，涉及后端技术、互联网、计算机基础、编程技术、程序员职场、程序员面试等话题。欢迎关注。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;点↑小卡片，回复“&lt;/span&gt;&lt;span&gt;&lt;strong&gt;清华数据结构&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;”获取公开学习资料&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;学习过程中，有问题欢迎交流讨论。精力有限，不然我组织一波共同学习，定期交流。感兴趣的同学可以进入交流群报团。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可能还感兴趣：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247488892&amp;amp;idx=1&amp;amp;sn=1b026c5a8688b880ca06c51c816265b1&amp;amp;chksm=eb471498dc309d8eaac5bd296a3971901e624e9abfc5a0add8928f5ebc3a83b8402ebfadd95d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;关于 AI 的数百个问题，清华男神刘云浩教授的 3 万字回复给整得明明白白&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>22ed3766d45b09a255ec0717186c4442</guid>
<title>[推荐] Redis：我是如何与客户端进行通信的</title>
<link>https://toutiao.io/k/dr4u4yt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;江湖上说，&lt;strong&gt;天下武功，无坚不摧，唯快不破&lt;/strong&gt;，这句话简直是为我量身定制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是一个Redis服务，最引以为傲的就是我的速度，我的 QPS 能达到10万级别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我的手下有数不清的小弟，他们会时不时到我这来存放或者取走一些数据，我管他们叫做客户端，还给他们起了英文名叫 Redis-client。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候一个小弟会来的非常频繁，有时候一堆小弟会同时过来，但是，即使再多的小弟我也能管理的井井有条。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一天，小弟们问我。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfoy2icYqicT72JftlHDibibSES2rlIOOYyFGNpDvc9lEy5Je4pkIpwpYjdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想当年，为了不让小弟们拖垮我傲人的速度，在设计和他们的通信协议时，我绞尽脑汁，制定了下面的三条原则：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;实现简单&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;针对计算机来说，解析速度快&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;针对人类来说，可读性强&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这么设计呢？先来看看一条指令发出的过程，首先在客户端需要对指令操作进行封装，使用网络进行传输，最后在服务端进行相应的解析、执行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.463768115942029&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicaLtJLCXG77p4PNzYoiaRAw5KYTmIWibRvsmxTp149neUMtI3gWFTiageu3ic5KFHm9HlmPkGxkCbZIMA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一过程如果设计成一种非常复杂的协议，那么封装、解析、传输的过程都将非常耗时，无疑会降低我的速度。什么，你问我为什么要遵循最后一条规则？算是对于程序员们的馈赠吧，我真是太善良了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把创造出来的这种协议称为 RESP (&lt;code&gt;REdis Serialization Protocol&lt;/code&gt;)协议，它工作在 TCP 协议的上层，作为我和客户端之间进行通讯的标准形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到这，我已经有点迫不及待想让你们看看我设计出来的杰作了，但我好歹也是个大哥，得摆点架子，不能我主动拿来给你们看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我建议你直接使用客户端发出一条向服务器的命令，然后取出这条命令对应的报文来直观的看一下。话虽如此，不过我已经被封装的很严实了，正常情况下你是看不到我内部进行通讯的具体报文的，所以，你可以&lt;strong&gt;伪装&lt;/strong&gt;成一个Redis的服务端，来截获小弟们发给我的消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现起来也很简单，我和小弟之间是基于 Socket 进行通讯，所以在本地先启动一个&lt;code&gt;ServerSocket&lt;/code&gt;，用来监听Redis服务的6379端口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;server&lt;/span&gt;() &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;    ServerSocket serverSocket = &lt;span&gt;new&lt;/span&gt; ServerSocket(&lt;span&gt;6379&lt;/span&gt;);&lt;br/&gt;    Socket socket = serverSocket.accept();&lt;br/&gt;    &lt;span&gt;byte&lt;/span&gt;[] bytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;    InputStream input = socket.getInputStream();&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt;(input.read(bytes)!=&lt;span&gt;0&lt;/span&gt;){&lt;br/&gt;        System.out.println(&lt;span&gt;new&lt;/span&gt; String(bytes));&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后启动&lt;code&gt;redis-cli&lt;/code&gt;客户端，发送一条命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;set key1 value1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，伪装的服务端就会收到报文了，在控制台打印了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;*3&lt;br/&gt;$3&lt;br/&gt;set&lt;br/&gt;$4&lt;br/&gt;key1&lt;br/&gt;$6&lt;br/&gt;value1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里，隐隐约约看到了刚才输入的几个关键字，但是还有一些其他的字符，要怎么解释呢，是时候让我对协议报文中的格式进行一下揭秘了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我对小弟们说了，对大哥说话的时候得按规矩来，这样吧，你们在请求的时候要遵循下面的规则：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;*&amp;lt;参数数量&amp;gt; CRLF&lt;br/&gt;$&amp;lt;参数1的字节长度&amp;gt; CRLF&lt;br/&gt;&amp;lt;参数1的数据&amp;gt; CRLF&lt;br/&gt;$&amp;lt;参数2的字节长度&amp;gt; CRLF&lt;br/&gt;&amp;lt;参数2的数据&amp;gt; CRLF&lt;br/&gt;...&lt;br/&gt;$&amp;lt;参数N的字节长度&amp;gt; CRLF&lt;br/&gt;&amp;lt;参数N的数据&amp;gt; CRLF&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先解释一下每行末尾的&lt;code&gt;CRLF&lt;/code&gt;，转换成程序语言就是&lt;code&gt;\r\n&lt;/code&gt;，也就是回车加换行。看到这里，你也就能够明白为什么控制台打印出的指令是竖向排列了吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在命令的解析过程中，&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;key1&lt;/code&gt;、&lt;code&gt;value1&lt;/code&gt;会被认为是3个参数，因此参数数量为3，对应第一行的&lt;code&gt;*3&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个参数&lt;code&gt;set&lt;/code&gt;，长度为3对应&lt;code&gt;$3&lt;/code&gt;；第二个参数&lt;code&gt;key1&lt;/code&gt;，长度为4对应&lt;code&gt;$4&lt;/code&gt;；第三个参数&lt;code&gt;value1&lt;/code&gt;，长度为6对应&lt;code&gt;$6&lt;/code&gt;。在每个参数长度的下一行对应真正的参数数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这，一条指令被转换为协议报文的过程是不是就很好理解了？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyf1BJ8xSic8HRQJKdbo0xVqK3ZpxPW5jFxibEcGeajCuxuoqg8PFDkINEg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当小弟对我发送完请求后，作为大哥，我就要对小弟的请求进行&lt;strong&gt;指令回复&lt;/strong&gt;了，而且我得根据回复内容进行一下分类，要不然小弟该搞不清我的指示了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简单字符串&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单字符串回复只有一行回复，回复的内容以&lt;code&gt;+&lt;/code&gt;作为开头，不允许换行，并以&lt;code&gt;\r\n&lt;/code&gt;结束。有很多指令在执行成功后只会回复一个&lt;code&gt;OK&lt;/code&gt;，使用的就是这种格式，能够有效的将传输、解析的开销降到最低。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.084033613445378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfqlJaHViaKC8OqiaoUCnUSleGjticb8hukVjQAVyzfiboxYDvhdCjbBLkgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;错误回复&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在RESP协议中，错误回复可以当做简单字符串回复的变种形式，它们之间的格式也非常类似，区别只有第一个字符是以&lt;code&gt;-&lt;/code&gt;作为开头，错误回复的内容通常是错误类型及对错误描述的字符串。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;错误回复出现在一些异常的场景，例如当发送了错误的指令、操作数的数量不对时，都会进行错误回复。在客户端收到错误回复后，会将它与简单字符串回复进行区分，视为异常。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.184873949579832&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfg3vfSI3FdGySPRlPuGDajnFfmNmqoEyDfwzDzMo1u9fWKw01Qb8PgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;整数回复&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整数回复的应用也非常广泛，它以&lt;code&gt;:&lt;/code&gt;作为开头，以&lt;code&gt;\r\n&lt;/code&gt;结束，用于返回一个整数。例如当执行&lt;code&gt;incr&lt;/code&gt;后返回自增后的值，执行&lt;code&gt;llen&lt;/code&gt;返回数组的长度，或者使用&lt;code&gt;exists&lt;/code&gt;命令返回的0或1作为判断一个&lt;code&gt;key&lt;/code&gt;是否存在的依据，这些都使用了整数回复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9537815126050421&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfa4LiaqVYk1TOahicuRq4E2ib6nxDLEyzQsLiaRXzBtoiaKWeYzlETzhDia8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;批量回复&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;批量回复，就是多行字符串的回复。它以&lt;code&gt;$&lt;/code&gt;作为开头，后面是发送的字节长度，然后是&lt;code&gt;\r\n&lt;/code&gt;，然后发送实际的数据，最终以&lt;code&gt;\r\n&lt;/code&gt;结束。如果要回复的数据不存在，那么回复长度为-1。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5126050420168067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfBnACFwLBXNNhggIcPH9K5JXQjXeJna8zEqicQBA30rYW7ZnyzfDkic5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;多条批量回复&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当服务端要返回多个值时，例如返回一些元素的集合时，就会使用多条批量回复。它以&lt;code&gt;*&lt;/code&gt;作为开头，后面是返回元素的个数，之后再跟随多个上面讲到过的批量回复。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3907563025210083&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZ08KPRWFa6JlBqaskXvoyfq3s6vL0Ud67Ivib4UE6BRUibInIkmiaOUf2OX8ibWpJ4ThDSwGQ4JJZwcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，基本上我和小弟之间的通讯协议就介绍完了。刚才你尝试了伪装成一个服务端，这会再来试一试直接写一个客户端来直接和我进行交互吧。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;client&lt;/span&gt;() &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;    String CRLF=&lt;span&gt;&quot;\r\n&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    Socket socket=&lt;span&gt;new&lt;/span&gt; Socket(&lt;span&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span&gt;6379&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; (OutputStream out = socket.getOutputStream()) {&lt;br/&gt;        StringBuffer sb=&lt;span&gt;new&lt;/span&gt; StringBuffer();&lt;br/&gt;        sb.append(&lt;span&gt;&quot;*3&quot;&lt;/span&gt;).append(CRLF)&lt;br/&gt;                .append(&lt;span&gt;&quot;$3&quot;&lt;/span&gt;).append(CRLF).append(&lt;span&gt;&quot;set&quot;&lt;/span&gt;).append(CRLF)&lt;br/&gt;                .append(&lt;span&gt;&quot;$4&quot;&lt;/span&gt;).append(CRLF).append(&lt;span&gt;&quot;key1&quot;&lt;/span&gt;).append(CRLF)&lt;br/&gt;                .append(&lt;span&gt;&quot;$6&quot;&lt;/span&gt;).append(CRLF).append(&lt;span&gt;&quot;value1&quot;&lt;/span&gt;).append(CRLF);&lt;br/&gt;        out.write(sb.toString().getBytes());&lt;br/&gt;        out.flush();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; (InputStream inputStream = socket.getInputStream()) {&lt;br/&gt;            &lt;span&gt;byte&lt;/span&gt;[] buff = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; len = inputStream.read(buff);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (len &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                String ret = &lt;span&gt;new&lt;/span&gt; String(buff, &lt;span&gt;0&lt;/span&gt;, len);&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;Recv:&quot;&lt;/span&gt; + ret);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行上面的代码，控制台输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Recv:+OK&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面模仿了客户端发出&lt;code&gt;set&lt;/code&gt;命令的过程，并收到了回复。依此类推，你也可以自己封装其他的命令，来实现一个自己的Redis客户端，作为小弟，来和我进行通信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过记住，要叫我大哥。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c673f0e51603fc6df3e3a9840bb6b328</guid>
<title>[推荐] 一些贼好用的开发原则</title>
<link>https://toutiao.io/k/qphrwr6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;这里是Z哥的个人公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每周五11：45 按时送达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当然了，也会时不时加个餐～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的第「197」篇原创敬上&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家好，我是Z哥。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不知道在看这篇文章的程序员伙计们平时是如何写代码的？有参照什么原则吗？还是说写到哪算哪？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你在搜索引擎里搜一下「软件开发原则」，可以搜到N多种原则，每一个原则看上去都很有道理，很对。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图就是我之前整理的一个与设计原则相关的思维导图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8003003003003003&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1cT2xBHHePKia1bSxwVetpCLxquI1ibyMWTg2Zf7pwLQ5lHIn1jZTwK9jPE1qeLVuUzRByEcqs0B3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是不管你整理的多好，很多人到实际写代码的时候完全想不起这些原则。&lt;/span&gt;&lt;span&gt;不用自我怀疑，大多数人都是如此，你并不是特例。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之所以会有这样的情况，是因为总结后的原则大多都太抽象了，往往只有一句话，甚至只是一个词，自然不会有太多深刻的印象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们今天不聊这些刻板的名词，来聊聊Z哥在工作中常用到的一些“原则”，以及它们的适用场景，帮助你更好地记住它们。另外，我还给它们做了一下分类，更便于你记忆。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/01  耦合/&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;避免循环依赖&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个原则不管是在单体应用，还是分布式应用里都是非常重要的一个原则，它可以避免「big ball of mud」项目的产生。而且，如果项目里存在着过多的循环依赖，也更容易一不小心写出循环调用的代码，让整个系统陷入死循环。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;尽量单向依赖&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在满足「01」的前提下，尽量做到单向依赖可以大大降低阅读代码、排查问题时的复杂度。如果实在对上游有依赖的话，尽量通过IOC的思路来处理，用隐性依赖代替显性依赖。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果实在没法通过IOC来解决的话，可以将依赖上游的数据在当前系统冗余一份，然后通过MQ来保持数据同步，在业务处理的时候直接使用本地的这份冗余数据。当然，这个方法的复杂度明显比上面的更高，所以还是优先考虑上面的方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;避免跨层调用&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在满足「1」和「2」的前提下，尽量做到避免跨层调用，可以很起到更好的封装效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个最简单的反例，就拿三层架构来说，如果应用层的代码可以直接访问数据访问层，那么业务逻辑层自然会形同虚设。而且，后续一旦涉及到某数据表增加一个参数，要修改的相关调用代码可多了……这也是为什么很多维护不善的老项目越往后大家就越不敢乱动代码的主要原因之一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  对象设计/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;单一职责原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实我在后面会提到SOLID原则，这里为什么将单一原则单独拿出来说呢，因为我觉得它是SOLID的六大原则里最重要的，虽然它看上去最简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;37&quot; data-source-title=&quot;Robert C. Martin《敏捷软件开发：原则、模式和实践》&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A37%2C%22text%22%3A%22%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99%E8%A7%84%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%BA%94%E8%AF%A5%E6%9C%89%E4%B8%94%E4%BB%85%E6%9C%89%E4%B8%80%E4%B8%AA%E5%BC%95%E8%B5%B7%E5%AE%83%E5%8F%98%E5%8C%96%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%90%A6%E5%88%99%E7%B1%BB%E5%BA%94%E8%AF%A5%E8%A2%AB%E6%8B%86%E5%88%86%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22Robert%20C.%20Martin%E3%80%8A%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5%E3%80%8B%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;Robert C. Martin《敏捷软件开发：原则、模式和实践》&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只有深刻理解这个概念，你才能真正发挥面向对象编程语言的最大优势。并且，这个思路也可以运用在模块的划分上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;遵循这一原则最关键的地方在于职责的划分，很多人其实并没有掌握好正确的划分思路。因为这个的确很难，需要你对业务有深入的了解，因为职责存在于业务里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，在电商系统里体现「一个商品在某个平台销售」这个业务，你可以既在「商品」类上设置「销售渠道」属性，也可以在「销售渠道」上设置「在售商品列表」属性，还可以单独设计一个「商品绑定销售渠道」的类。但是我们从单一职责原则来考虑的话，就应该选择最后一个方案。为什么呢？因为在不同的渠道销售商品，其实对商品和销售渠道本身都没有什么影响，商品还是那个商品、渠道还是那个渠道，因此这个业务不是它们的职责。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;减少if else&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这一点可能算不上传统意义上的原则吧。但是我觉得这是很容易体现开发水平高低的一点。所以也列了一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大部分的 if-else 都可以合理运用设计模式来消灭掉。比如， 状态模式、策略模式、命令模式、责任链模式、代理模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果对这些设计模式的形态有些模糊了，那么赶紧去回顾一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;数据冗余&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;冗余数据的确可以带来很多便利，比如减少RPC请求查询其它程序内的数据。但是副作用也是很明显的，付出了需要解决数据一致性问题为代价。因此仅当存在性能要求时，才考虑数据冗余。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在平时的代码设计中，你可以有很多方法来降低不必要的数据冗余，比如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;给每一个API或者Function区分必要参数和可选参数。如此一来，对调用方来说能够减少为了传入可选参数而做的不必要的数据冗余以及RPC请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果是会对外提供访问的API，一定要最小化参数，可以自行获取的数据尽量在内部自行获取，不要求外部传入。目的同1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我觉得能意识到上面的这些设计原则，已经算得上是一个合格的程序员了。如果想要更近一步，还可以在以下这几个方面考虑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/01  对象设计/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;SOLID原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个原则鼎鼎大名了，应该大家都知道，就不展开说了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Single Responsibility Principle：单一职责原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Open Closed Principle：开闭原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Liskov Substitution Principle：里氏替换原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Law of Demeter：迪米特法则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Interface Segregation Principle：接口隔离原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Dependence Inversion Principle：依赖倒置原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么将它们放到进阶里面呢，因为我觉得这里面除了单一职责，其它几个原则还兼顾着在可扩展性上的考量。所以，除了单一职责以外的原则没做到位，最多牺牲了可扩展性和一定的耦合度。但是单一职责没做好，可会存在非常大的耦合问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  数据准确性/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;可重试&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这点可能在单体应用中感受不明显。但是在分布式系统却重要得多。因为网络是不可靠的，如果设计的代码不可重试，那么会存在大量的数据不一致问题需要手动去处理。可头疼死你。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;幂等&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;重视「幂等」的原因和「可重试」一样，在单体应用中作用不大，最多对瞬时的重复点击有作用。但是在不可靠网络的分布式系统中，某个请求被重复提交的可能性大大增加，如何保证多次请求的结果是一致的就至关重要了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;CAP、BASE&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面的「可重试」和「幂等」更多是在代码级别的数据准确性设计。如果在整个大系统层面考虑数据准确性，需要基于经典的CAP定理、BASE理论去设计。什么业务场景需要保证强一致性，什么业务场景可以接受存在延迟的最终一致性，是需要仔细考量的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;多提一句，如果采用最终一致性方案的话，尽可能地增加一个后续的核对机制，以解决某些异步消息在中途丢失、长期异常挂起等等导致的数据不一致问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/03  数据存储/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据安全&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，要在代码设计上考虑数据安全，只需要一些非常基础的业务意识就够了。你只要能识别到哪些数据是敏感的，针对这些数据做一些保护机制，防止数据泄漏。比如，加密、脱敏、避免越权、减少非必要传输等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上的这些是我目前暂时想到的在工作中最常用的开发原则。如果后续再想到什么我会补充在评论区，也欢迎你在评论区发表你的经验之谈。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还是总结一下，这篇呢Z哥与你分享了一些我在工作中常用的开发原则。总体来说，他们分为4类。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;耦合：避免循环依赖、尽量单向依赖、避免跨层调用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对象设计：单一职责原则、减少if else、数据冗余、SOLID原则。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据准确性：可重试、幂等、CAP、BASE。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据存储：数据安全。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;希望对你有所帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“大道理都懂，但还是过不好这一生”。这句话也能适用在这里，“开发原则都懂，但发现眼前的项目还是如此不堪”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之所以如此，我觉得是因为很多时候，我们假装没看到项目里的代码坏味道，认为与自己没啥关系，孰不知，它很有可能在不久的将来给你一击“反噬”，让你不得不硬着头皮面对它。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，如果你觉得这篇文章还不错，就「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点赞&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」或者「&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;」一下吧，鼓励我的创作 ：）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以分享我的公众号名片给有需要的朋友们。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU2NzEwMDc4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1ENbrFbGjEucl1Az92hEuwmUSdaNXxibiaWuO9sLTPHokw00p8ZxAYdIJJJ7FXj77Ts0YoV5KwEKCA/0?wx_fmt=png&quot; data-nickname=&quot;跨界架构师&quot; data-alias=&quot;Zachary_ZF&quot; data-signature=&quot;坚持原创。专注大型互联网技术，涉猎产品、运营。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你有关于软件架构、分布式系统、产品、运营的困惑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以试试点击「&lt;strong&gt;阅读原文&lt;/strong&gt;」&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>