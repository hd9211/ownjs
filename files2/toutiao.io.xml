<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7cd7cc5298fc547a8624713b6f78a97a</guid>
<title>做一个很出色的程序员</title>
<link>https://toutiao.io/k/g6xlwp2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构师大刘的故事，断更有一段日子了，别着急，今天我们续上：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今年春节大刘响应国家号召，过年没有回老家。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;春节假期里，大刘约了许久不见的、同样也没回老家的小马吃了顿饭。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小马是大刘以前的同事，比大刘小好几岁。小马刚毕业的时候，去了大刘所在的公司，正好进了大刘所在的项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时的小马基本上啥也不会，大刘很是带了他一段时间。小马这人聪明、又努力，进步非常快，后来，小马换了公司，职业生涯一路高飞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小马一直认为大刘对他很好，很照顾他。其实，他不知道，是因为小马本身的出色，让大刘和他搭档非常愉快，这才是大刘非常愿意和他一起做事情的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;饭桌上，大刘和小马谈了许久，也谈到了一些他们那些曾经的同事。其中，有些同事特别优秀，他们和小马一样，年纪轻轻已经成为了极其出色的程序员，在行业中，也获得了很多的物质报酬和名誉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这次饭桌聊天中，大刘和小马一起总结了这些程序员共同共性。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 拥有旺盛的好奇心，并能转化为求知欲&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;拥有好奇心，就意味着你可能会建立求知欲。&lt;br/&gt; ——大刘&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好奇心是什么东西？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;其实就是人的一种想要探索未知的短暂行为。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有很多程序员或者在工作中偶然碰到了一些新概念，或者自己业余主动探索了一些新概念。然后，觉得这些东西很好玩儿，就兴起了探索的欲望，这玩意儿就是好奇心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但大刘也见过不少程序员，尤其是年纪大点的，那见了新概念和新技术，就跟给媳妇交公粮一样，避之唯恐不及。这对吗？这不对。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，年轻程序员的好奇心，它就跟围棋建立了先手优势一样，可以不讲武德，有了直线超车老同志的资本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，只有好奇心还不够。好奇心这玩意儿就跟普通人看明星八卦一样，是个人有兴趣了，都能追追，没啥门槛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;有门槛的是什么？求知欲。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可厉害了，就像普通人追明星八卦觉得不够，于是变身成为狗仔队，直接干成了职业的。狗仔队要追明星隐私很辛苦的，上山爬树，装电线杆子，啥都得干。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求知欲就类似这种，你得把好奇心转化成一种稳定的认知欲望，需要坚持不懈，需要付出辛苦，这就是门槛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘原来就有个同事，不知道从哪里知道了 go 语言，那时候，go 语言刚出来不久，连个成熟的编辑器也没有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘这同事，人家就有那种好奇心，先去搜了搜概念，然后又研究了下 go 语言的技术文档。顿时，他觉得 go 很有前途，好奇心就变成了求知欲，一路跟着 go 成长。工作中，也是想办法用 go 做点小项目，小工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;得，短短三四年，人家就成了 go 语言领域的大牛，出书，讲座不断。这就是好奇心转化成求知欲的好处。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了好奇心，你可能就有了一个进入新的技术蓝海的机会，而有了求知欲，就意味着你可能有了在蓝海建立自己的话语权的资格。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，大刘的那些后来发展的非常好的前同事们，大多数人都拥有这种鲜明的共性，这个共性，让你的职业生涯很可能将会拥有别人没有的先发优势。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 勇于尝试新技术并能快速掌握&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个人有了好奇心求知欲就完了吗？那不能，这可不够。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了好奇去探索外，你还得有把探索所得，转化成自己经验的能力。这种能力的外在表现就是勇于尝试新技术，而且还得快速掌握。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再举个大刘另一个同事的例子，这个同事在工作中遇到了一个问题，就是存储海量数据的问题。那时候，还是 2008 年，这人刚毕业不到一年。他知道了 HDFS 这技术，就想着能不能把这东西用到项目上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，他只是个小年轻，人微言轻，怎么办？他也有本事，人家利用业余时间，没日没夜花了一周时间，自己搞了环境，又写了 Demo，还写程序模拟了大量数据去测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后把这些拿给领导看，得，有理有据，最牛的是这哥们儿还弄了个像样的图表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，彻底 KO 了领导。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个小伙子后来逐渐成了这个项目中的最懂大数据的人。再后来，小伙子跳槽去了百度搞凤巢，如今人家又去了 Google，再 Transfer 到美国，活得有声有色的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，有了好奇心，有了求知欲，你还得把学到的东西落地，形成自己的独到经验，还得让别人知道你掌握了它，这样这个先发优势就进一步落了地，你的职业生涯可能开始有了自己的小地位了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 用批判性思维批判下&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你有了求知欲，又有了落地的能力，但是要把握好怎么落地？何时落地？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，在我们工作中，如果想应用新技术，就得找到现有方案的不足。有了不足，把不足作为切入点，和领导谈谈，在项目的某些小地方可以先尝试你想搞的新技术。一般来说也没啥问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;除了找现有项目的茬，你还得明白新技术有哪些坑。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新技术一般为了快速推广，往往夸大其词，搞得世界没了它就要灭亡一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，怎么找到新技术的问题和不足，是至关重要的。找到不足，你既可以把控落地到项目中的风险，也有了去当这项新技术 Commiter 的机会，再不济去提个 Issue 刷刷存在感也是好的。这对将来职业发展都是大有帮助的啊。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那找新技术的不足就需要批判思维了。这批判性思维的前提，就是要求你能独立思考，独立判断，不是做做样子，找个小问题就行了的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一阵子，大刘的公司项目一直是用的 Spring MVC 搞 Web 项目。有个同事用了觉得很麻烦。为啥？因为在 Spring MVC 需要大量的配置，每次搞一个小项目都需要大量的改动配置。如果再加个 Hibernate，那配置把人要搞疯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，这个同事就想到了 SpringBoot。但是在用 SpringBoot 之前，他认为，SpringBoot 也是刚推出不久的，肯定也有自己的问题。于是，他就去 Google 上用 SpringBoot challenge 这种关键字，挖出了不少坑出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，又发现 SpringBoot 封装的太好了，他又认为封装的太过易用，如果出现了一些底层问题，估计不好解决。他把这些优势和劣势统统搞了个报告，去申请 SpringBoot 试用。申请过后，他又从各方面审视项目的各种不足，不断改进问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;独立思考，以批判的眼光找到现有的不足，以批判性思维找到可以改进的方向，你将在自己的团队中拥有自己的行业话语权，项目前进的方向也可以在你的主导下进行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4. 现实点，别吹牛逼&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘和小马谈到现在行业内存在的一些弊病的时候，不禁摇头叹气。现在行业内，做事飘得多，踏实的少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;掌握点儿 Docker，就给你吹自己掌握了云技术。了解点儿 SpringBoot、SpringCloud，就告诉你精通了微服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，就大刘的经验，真能成功的，那都是脚踏实地的实干者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实干者们对一个项目，有着充分的评估，能在最坏的情况时，拿出早就准备好的方案。能在项目出现延期风险的时候，作出提前而精准的判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这些，可不是那些夸夸其谈的营销类、建立类、PPT 类程序员能搞定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要沉下心来，去了解项目可能出现的问题的每一个核心原因。沉下心了解问题核心，可不仅仅是给项目带来好处。这东西可以直接训练人们处理问题的思路，也能加强对项目风险预测的嗅觉。这两种东西对将来团队管理、项目管理的好处就不言而喻了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做事儿踏实点，错不了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;青铜圣斗士有了第七感能打败黄金圣斗士。你有了敏锐的解决问题思路和预先嗅到风险的感觉，就能踢开阻挡你突飞猛进的拦路虎。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5. 啥都知道点，关心些职责之外的&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘、小马身边那些成功的程序员们，做事可不是只闷头做自己眼前这点儿就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人家从小兵子的时候，工作除了拧螺丝，还会关心整个航母。当个后端工程师，人家把前端的活儿也揽过来，把前端框架了解的透透的。写个业务代码，顺便把底层框架摸了个滚瓜烂熟。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工作态度主动点儿，干好自己手头工作之余，尽可能的去多多了解整个项目。把项目弄的越熟悉，项目就越离不开你，这时候，别人还会把你看成小兵子吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上说了这么多，大刘自己全都做到了吗？没有，知易行难嘛，大刘只是像数学的极限一样，不断地逼近这些特点。大刘期待自己最终也会破茧而出，能变得更加出色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们下篇大刘的故事见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我准备了一些纯手打的高质量PDF：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;深入浅出Java多线程、HTTP超全汇总、Java基础核心总结、程序员必知的硬核知识大全、简历面试谈薪的超全干货。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一些&lt;span&gt; JVM、算法、MySQL、Redis、Nginx、重构&lt;/span&gt;等经典技术资料。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;领取方式：关注我的公众号，在公众号后台回复：666&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3MTg3NDYwNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRu19xsskWLWZBk2wEEmTf2kZWAH41Pptb4So66eJGXF0hLGVHWj6fDZ16m4FOicOJ9Iicj1q5xVmrQ/0?wx_fmt=png&quot; data-nickname=&quot;四猿外&quot; data-alias=&quot;si-yuanwai&quot; data-signature=&quot;上市公司技术总监，管理的团队百人以上。把自己的成长故事写成文章，把技术文章写成故事。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;架构师大刘的其他故事：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484769&amp;amp;idx=1&amp;amp;sn=e604092f8063829618e52ee3ff1f3628&amp;amp;chksm=fcd8c920cbaf4036c7e36f89b52e9b9602a3a83a66928b6d7c0a9ee911cdff670ea0198c35d1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中年架构师，悲催的一天&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484777&amp;amp;idx=1&amp;amp;sn=977e620df6c3b640985e20345aa80a12&amp;amp;chksm=fcd8c928cbaf403ed6e28e6b8aafaa851cd0a5a1404fbb34ba7eeb25b592b7a593852e9bd002&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;恕我直言，微服务挺好，但不适合你&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484792&amp;amp;idx=1&amp;amp;sn=37b3953abb879837d3ab24a2f943dba5&amp;amp;chksm=fcd8c939cbaf402f82bc0a580212f410736614cc15f1d2061d24f47ca439fa9ae2c6f22e643f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师说了：不想做背锅侠？生产问题要这样查&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484826&amp;amp;idx=1&amp;amp;sn=35378fc344195edc643c5a68f896bc40&amp;amp;chksm=fcd8c9dbcbaf40cdcad84dd15b972afed8cf477f584748167ee67dc3a2a3532474497aa4d6c1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一个技术总监的忠告：精通那么多技术，你为何还是受不到重用？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484862&amp;amp;idx=1&amp;amp;sn=be1f32643415f605da7080f791ed64f9&amp;amp;chksm=fcd8c9ffcbaf40e936ac5aedde29c3b259026a2b2945ea195613087caab036df144f7c2d8937&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;优秀！一鼓作气学会“一致性哈希”，就靠这 18 张图了&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9f608b11b36d2bee8713041b9c8ac13f</guid>
<title>Redis 专题：深入解读哨兵模式</title>
<link>https://toutiao.io/k/tm4wyb0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel是Redis在主从复制基础上构建的一套高可用解决方案，本文将从下图几个方面来介绍Redis的Sentinel模式。&lt;img data-ratio=&quot;0.8642745709828393&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4ejBOgbCLj9QSCvxJqcFCumicOB6cND1mLXOS3DwGfvZqAkfGzMSUCQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1282&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI0NTE4NDg0NA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltUJKaqQlD7oMJoZCwokhwjfJiblpUeuQY6Auvt8vPtFJRWmC1HUfNP2V2UYIVDnkzvSic8NnQy6EcQ/0?wx_fmt=png&quot; data-nickname=&quot;码路印记&quot; data-alias=&quot;&quot; data-signature=&quot;一个后端技术码农的技术笔记，专注互联网后端技术领域，涉及分布式系统、系统架构、微服务、数据库、缓存、搜索、消息队列等话题，欢迎交流！&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在前面&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上一篇文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTE4NDg0NA==&amp;amp;mid=2247483973&amp;amp;idx=1&amp;amp;sn=20a93510a2981b948de2bd1f0178bce1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Redis专题：一文搞懂主从复制原理&lt;/a&gt;》我们了解到在主从模式下，主从复制机制使得slave成为与master完全一致的副本，一旦master宕机，我们可以选择一个正常的slave成为新的主节点，实现手动的故障恢复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，人工干预效率低、易出错，并且故障感知滞后，不具备生产实用性。一个能够自动感知系统故障、自动故障转移的可靠组件，肯定是我们必须的。为此，Redis官方提供一个Redis的高可用方案——哨兵（Sentinel），使用它可以搭建一个即使无人干预也能抵抗某些类型失败的高可用的Redis分布式系统。这篇文章将对Redis的哨兵模式进行详细介绍，现在开始吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵是Redis的一种运行模式，它专注于对Redis实例（主节点、从节点）运行状态的监控，并能够在主节点发生故障时通过一系列的机制实现选主及主从切换，实现故障转移，确保整个Redis系统的可用性。结合Redis的官方文档，可以知道Redis哨兵具备的能力有如下几个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;监控（Monitoring）&lt;/strong&gt;：持续监控Redis主节点、从节点是否处于预期的工作状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通知（Notification）&lt;/strong&gt;：哨兵可以把Redis实例的运行故障信息通过API通知监控系统或者其他应用程序。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自动故障恢复（Automatic failover）&lt;/strong&gt;：当主节点运行故障时，哨兵会启动自动故障恢复流程：某个从节点会升级为主节点，其他从节点会使用新的主节点进行主从复制，通知客户端使用新的主节点进行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;配置中心（Configuration provider）&lt;/strong&gt;：哨兵可以作为客户端服务发现的授权源，客户端连接到哨兵请求给定服务的Redis主节点地址。如果发生故障转移，哨兵会通知新的地址。这里要注意：哨兵并不是Redis代理，只是为客户端提供了Redis主从节点的地址信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵模式是天然的分布式系统，它被设计为基于一套配置，并在多个哨兵实例的配合下工作。多实例共同协作有以下优势：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主节点的系统故障是在多个实例共同认可的情况下完成的，大大降低了误报的概率。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;即使不是所有的哨兵实例都正常运行哨兵集群也能正常工作，这大大增加了系统的鲁棒性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;哨兵集群演示&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说了这么多，不如实践看的直观，先通过一个例子看下Sentinel的高可用表现。由于Sentinel工作原理中需要对其他Sentinel节点和主从节点建立网络连接，其中要使用IP和端口，而Docker下采用的是端口映射或虚拟IP，导致在Docker运行需要一定的配置工作。所以，我这次直接在本地多实例运行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;搭建集群&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次实例采用三个哨兵节点、三个数据节点（一主二从）方式搭建，结构下图所示：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8179959100204499&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4tbXaY4oFpibN2D3XvBPlhkKsJN9zI32jXVEXBvmot4xIavRYP6KctxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;准备三个redis配置文件，对应Redis的一主二从，文件名称及内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# redis-6379.conf&lt;/span&gt;&lt;br/&gt;port 6379&lt;br/&gt;daemonize yes&lt;br/&gt;pidfile /var/run/redis-6379.pid&lt;br/&gt;logfile &lt;span&gt;&quot;6379.log&quot;&lt;/span&gt;&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;dbfilename dump-6379.rdb&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# redis-6380.conf&lt;/span&gt;&lt;br/&gt;port 6380&lt;br/&gt;daemonize yes&lt;br/&gt;pidfile /var/run/redis-6380.pid&lt;br/&gt;logfile &lt;span&gt;&quot;6380.log&quot;&lt;/span&gt;&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;dbfilename dump-6380.rdb&lt;br/&gt;slaveof 127.0.0.1 6379&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# redis-6381.conf&lt;/span&gt;&lt;br/&gt;port 6381&lt;br/&gt;daemonize yes&lt;br/&gt;pidfile /var/run/redis-6381.pid&lt;br/&gt;logfile &lt;span&gt;&quot;6381.log&quot;&lt;/span&gt;&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;dbfilename dump-6381.rdb&lt;br/&gt;slaveof 127.0.0.1 6379&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;准备三个Redis Sentinel配置文件，作为三个监控节点，文件及内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# sentinel-26379.conf&lt;/span&gt;&lt;br/&gt;port 26379&lt;br/&gt;daemonize yes&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;logfile &lt;span&gt;&quot;26379.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。&lt;/span&gt;&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 2   &lt;br/&gt;&lt;span&gt;# 判断主节点时间&lt;/span&gt;&lt;br/&gt;sentinel down-after-milliseconds mymaster 10000&lt;br/&gt;sentinel parallel-syncs mymaster 1    &lt;br/&gt;sentinel failover-timeout mymaster 180000&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# sentinel-26380.conf&lt;/span&gt;&lt;br/&gt;port 26380&lt;br/&gt;daemonize yes&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;logfile &lt;span&gt;&quot;26380.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。&lt;/span&gt;&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 2   &lt;br/&gt;&lt;span&gt;# 判断主节点时间&lt;/span&gt;&lt;br/&gt;sentinel down-after-milliseconds mymaster 10000 &lt;br/&gt;sentinel parallel-syncs mymaster 1    &lt;br/&gt;sentinel failover-timeout mymaster 180000&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# sentinel-26381.conf&lt;/span&gt;&lt;br/&gt;port 26381&lt;br/&gt;daemonize yes&lt;br/&gt;dir &lt;span&gt;&quot;/Users/eleme/raysonxin/docker/redis-docker/log&quot;&lt;/span&gt;&lt;br/&gt;logfile &lt;span&gt;&quot;26381.log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。&lt;/span&gt;&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 2   &lt;br/&gt;&lt;span&gt;# 判断主节点时间&lt;/span&gt;&lt;br/&gt;sentinel down-after-milliseconds mymaster 10000 &lt;br/&gt;sentinel parallel-syncs mymaster 1    &lt;br/&gt;sentinel failover-timeout mymaster 180000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依次启动三个Redis Server，命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;redis-server conf/redis-6379.conf&lt;br/&gt;redis-server conf/redis-6380.conf&lt;br/&gt;redis-server conf/redis-6381.conf&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过客户端连接至&lt;code&gt;127.0.0.1:6379&lt;/code&gt;，输入命令&lt;code&gt;info replication&lt;/code&gt;，可以看到主从复制信息，说明一主二从工作正常。&lt;img data-ratio=&quot;0.47231833910034604&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4QpOdmUzUYXQRQyvlibLKAiay4CUp0Wba1VGpeUMLvqk8zKrxd5qQyW8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1156&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依次启动三个Redis Sentinel，命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;redis-sentinel conf/redis-26379.conf&lt;br/&gt;redis-sentinel conf/redis-26380.conf&lt;br/&gt;redis-sentinel conf/redis-26381.conf&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过客户端连接至任意Sentinel节点，如&lt;code&gt;127.0.0.1:26379&lt;/code&gt;，输入命令&lt;code&gt;info sentinel&lt;/code&gt;，可以看到哨兵及主节点信息（如下图所示），主节点为6379数据节点，有两个从节点，3个哨兵节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2646616541353383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4ibeFl1a50tMsLo6YuR6XwgVTPsYRLs4Nvvhyc3Viax41F0sISa06OGOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1330&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询当前的主节点，在哨兵客户端输入命令&lt;code&gt;SENTINEL get-master-addr-by-name mymaster&lt;/code&gt;查询主节点，可以发现当前返回的是端口为6379的节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.15113871635610765&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4mRuv9MflPicXg7LpyaW2faVU7sia9zZZCOYUoEJ9ztb6n8Q0sDJdlnmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;966&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;模拟主节点宕机&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端连接至主节点，向主节点发送命令&lt;code&gt;debug sleep 30&lt;/code&gt;，它会是的主节点阻塞30秒。然后再次执行查询主节点命令，可以看到主节点切换为端口为6381的节点。&lt;img data-ratio=&quot;0.1324376199616123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4Q0ThAPLOqYjVtfO9RNGZ5NTwACSWjLygibmKLDffiba6Ea255d7ibV5xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;向6381发送命令&lt;/span&gt;&lt;code&gt;info replication&lt;/code&gt;&lt;span&gt;可以看到6381切换为主节点，6379、6389变为6381的从节点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4679376083188908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4IJbGkHnlVYk6lMhRck1v71M01uBJfZVMhicZfxEicwzP5puEqVDr33ibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个过程中，哨兵节点26380输出了以下日志内容，以下内容我们暂时不解释，等后面讲解了哨兵工作原理，谜底自然就会揭开。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4TAnv3HOiam6uQzGlPkzicKC58mnmtj26dFf5pK2EUugicUNHj1g5xV46g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Sentinel工作原理&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵是Redis的一种工作模式，以监控节点状态及执行故障转移为主要工作，哨兵总是以固定的频率去发现节点、故障检测，然后在检测到主节点故障时以安全的方式执行故障转移，确保集群的高可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下为哨兵周期性检查的核心逻辑，哨兵模式的原理部分也将以下面的代码为主线进行说明。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/* Perform scheduled operations for the specified Redis instance. */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;/* Sentinel模式下，对节点执行的定时操作。属于最核心的函数了，包含节点发现、信息更新、故障检测、故障转移等操作 */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;sentinelHandleRedisInstance&lt;/span&gt;&lt;span&gt;(sentinelRedisInstance *ri)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/* ========== MONITORING HALF ============ */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/* Every kind of instance */&lt;/span&gt;&lt;br/&gt;    sentinelReconnectInstance(ri);&lt;br/&gt;    &lt;span&gt;/* 定时向主从节点、其他Sentinel节点发送PING、INFO、Hello（仅Sentinel）消息；&lt;br/&gt;     * 以此实现了节点发现、节点信息更新、收集健康检测信息*/&lt;/span&gt;&lt;br/&gt;    sentinelSendPeriodicCommands(ri);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/* ============== ACTING HALF ============= */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/* We don&#x27;t proceed with the acting half if we are in TILT mode.&lt;br/&gt;     * TILT happens when we find something odd with the time, like a&lt;br/&gt;     * sudden change in the clock. */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (sentinel.tilt) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (mstime()-sentinel.tilt_start_time &amp;lt; SENTINEL_TILT_PERIOD) &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        sentinel.tilt = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        sentinelEvent(LL_WARNING,&lt;span&gt;&quot;-tilt&quot;&lt;/span&gt;,&lt;span&gt;NULL&lt;/span&gt;,&lt;span&gt;&quot;#tilt mode exited&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/* 检查节点是否主观下线，这个操作对主从节点、其他Sentinel节点生效 */&lt;/span&gt;&lt;br/&gt;    sentinelCheckSubjectivelyDown(ri);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/* Masters and slaves */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (ri-&amp;gt;flags &amp;amp; (SRI_MASTER|SRI_SLAVE)) {&lt;br/&gt;        &lt;span&gt;/* Nothing so far. */&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/* 以下操作仅针对主节点 */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (ri-&amp;gt;flags &amp;amp; SRI_MASTER) {&lt;br/&gt;        &lt;span&gt;/* 判断主节点是否满足客观宕机条件 */&lt;/span&gt;&lt;br/&gt;        sentinelCheckObjectivelyDown(ri);&lt;br/&gt;        &lt;span&gt;/* 检查是否可以开始故障转移操作 */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (sentinelStartFailoverIfNeeded(ri)) {&lt;br/&gt;            &lt;span&gt;/* 监控该主节点的Sentinel执行选主操作 */&lt;/span&gt;&lt;br/&gt;            sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_ASK_FORCED);&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;/* 根据failover_state状态机，逐步执行故障转移操作 */&lt;/span&gt;&lt;br/&gt;        sentinelFailoverStateMachine(ri);&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;/* 这一步是向监控该主节点的其他Sentinel询问该主节点是否主观宕机，为主观宕机收集选票 */&lt;/span&gt;&lt;br/&gt;        sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_NO_FLAGS);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;节点自动发现&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先说明一下，这里的节点指的是其他哨兵节点及从节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回过头看下上面哨兵的配置文件，会发现我们仅配置了主节点的地址信息（host和port），并没有配置从节点及其他哨兵节点的信息。但是，我们在哨兵节点和主节点客户端通过&lt;code&gt;info replication&lt;/code&gt;或&lt;code&gt;info sentinel&lt;/code&gt;命令时却能够发现它们的存在。这一功能是由哨兵的自动发现机制实现的，我们来了解下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;先看数据节点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，哨兵节点每隔10秒（故障转移时每隔1秒）向主从节点发送&lt;code&gt;INFO&lt;/code&gt;命令，以此获取主从节点的信息。第一次执行时，哨兵仅知道我们给出的主节点信息，通过对主节点执行&lt;code&gt;INFO&lt;/code&gt;命令就可以获取其从节点列表。如此周期性执行，就可以不断发现新加入的节点。&lt;img data-ratio=&quot;0.6581532416502947&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4CZ7aN3WSNzHiaQeo6vkyGkQ4sibU4kkK8nsFd7vN51q13YQ3yialXZp4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果&lt;code&gt;INFO&lt;/code&gt;命令目标是从节点：哨兵从返回信息中获取从节点所属的最新主节点ip和port，如果与历史记录不一致，则执行更新；获取从节点的优先级、复制偏移量以及与主节点的链接状态并更新。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果&lt;code&gt;INFO&lt;/code&gt;命令目标是主节点：哨兵从返回信息中获取主节点的从机列表，如果从节点是新增的，则将其加入监控列表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无论目标是主节点还是从节点，都会记录其runId。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果节点的角色发生变化，哨兵会记录节点新的角色及上报时间。若此时哨兵运行在TILT模式下，则什么都不做。否则，会执行主从切换相关的逻辑，我们后面再细说。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;INFO&lt;/code&gt;命令是Redis的管理命令，通过它我们可以了解服务运行的信息。关于&lt;code&gt;INFO&lt;/code&gt;命令的作用及返回值信息，建议大家实操看下，可参考官方文档了解每个信息的含义。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;再来看哨兵节点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了相互检查可用性及信息交互，哨兵之间是一直保持连接的，但是我们并没有显示的告知它们彼此的存在，它们之间是怎么发现对方并交互的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是这样的：通过刚才的介绍，我们了解到哨兵通过&lt;code&gt;INFO&lt;/code&gt;命令发现了主节点及从节点的地址信息，而Redis提供了一种发布订阅的消息通信模式，即Pub/Sub，哨兵们就是通过一个约定好的通道（channel）发布/订阅hello信息进行通信。结合图示说明一下：&lt;img data-ratio=&quot;0.6801541425818882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4VOKTCmatTnlbNx3HBAHK5JXzcHBQWbz7QWia1UP7ASRLIMDETPmrNjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;如上图所示：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每隔2秒，每个哨兵会通过它所监控的主节点、从节点向&lt;code&gt;__sentinel__:hello&lt;/code&gt;通道发布一条hello消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每个哨兵会通过它所监控的主节点、从节点订阅&lt;code&gt;__sentinel__:hello&lt;/code&gt;通道的消息，以此接收其他哨兵发布的信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以通过Redis客户端直接订阅该channel：连接到其中一个节点，然后输入命令：&lt;code&gt;SUBSCRIBE __sentinel__:hello&lt;/code&gt;，如下图所示：&lt;img data-ratio=&quot;0.4030054644808743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4YH088n89ibadTrMshAktWX5z6FBAl17qIttSnyeiaJqBStsWk6EmvcdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1464&quot;/&gt;如上图所示，hello信息中包含8个信息，依次是：哨兵ip、哨兵端口、哨兵runId、当前纪元、主节点名称、主节点ip、主节点端口、主节点纪元，除了纪元应该都可以理解。这样每个哨兵发布的消息都会被其他哨兵接收到，从而达到信息交换的目的。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每个哨兵都会维护其监控的主节点信息，如果它接收到其他哨兵消息后，发现自己维护的信息已经过时，则立即执行更新过程。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果哨兵接受到的信息没有在已有的监控列表中，就意味着发现了一个新的哨兵实例，此时会创建一个新的哨兵实例加入监控列表。在处理新增哨兵实例时，如果它与已存在的哨兵实例runId或者ip、port一致，将只保存最新的实例信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于其他哨兵节点及从节点的发现过程就介绍到这里了，整体还是比较容易理解的。简单总结一下：对于数据节点采用&lt;code&gt;INFO&lt;/code&gt;命令询问，从一个主节点得到从节点，再通过从节点校验主节点，实现节点发现；对于其他哨兵节点，借助正在被监控的数据节点以类似广播的方式，实现节点的发现。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障检测&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障检测是哨兵执行故障转移的前提，在知晓需要监控的目标（主从节点）后，哨兵通过&lt;code&gt;PING&lt;/code&gt;命令实现对主从节点的故障检测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵以集群方式工作，官方建议至少要有三个节点，每个节点都以相同的方式对主从节点进行监控与故障检测。由于网络抖动或者网络分区，单个哨兵对节点的故障检测可能无法代表其真实的状态，为了降低误判，哨兵之间还需要对节点的故障状态进行协商。所以这里需要引入两个概念：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主观宕机（Subjective Down, SDOWN）：是指一个哨兵实例通过检测发现某个主节点发生故障的一种状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客观宕机（Objective Down, ODOWN）：是指哨兵检测到某个主节点发生故障，通过命令&lt;code&gt;SENTINEL is-master-down-by-addr&lt;/code&gt;与其他哨兵节点协商，并且在指定时间内接收到指定数量的其他哨兵的确认反馈时的一种状态。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;简单来说，SDOWN是哨兵自己认为节点宕机，而ODOWN是不但哨兵自己认为节点宕机，而且该哨兵与其他节点沟通后，达到一定数量的哨兵都认为节点宕机了。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的“一定数量”是一个法定数量（Quorum），是由哨兵监控配置决定的，解释一下该配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;master-host&amp;gt; &amp;lt;master-port&amp;gt; &amp;lt;quorum&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 举例如下：&lt;/span&gt;&lt;br/&gt;sentinel monitor mymaster 127.0.0.1 6379 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这条配置项用于告知哨兵需要监听的主节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;sentinel monitor：代表监控。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;mymaster：代表主节点的名称，可以自定义。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;192.168.11.128：代表监控的主节点ip，6379代表端口。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2：法定数量，代表只有两个或两个以上的哨兵认为主节点不可用的时候，才会把主节点设置为ODOWN状态，然后进行failover操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例子中quorum＝2，也就是说：哨兵检测到主节点故障并设置其状态为SDOWN，然后至少得到一个其他哨兵的认可，即标记该主节点为ODWN状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个概念：config-epoch，配置纪元，它是维护集群内主从关系信息版本的配置。每次执行故障转移都会加1，用于表明一个新的集群主从关系版本。数值越大，版本越新。它由哨兵节点维护，并在哨兵节点之间相互传播。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;认识以上几个概念后，我们看下Redis是如何实现的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;主观宕机&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis以类似心跳检测的&lt;code&gt;PING&lt;/code&gt;命令对节点进行健康检查，然后根据节点的回复情况进行状态管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哨兵以字段&lt;code&gt;act_ping_time&lt;/code&gt;维护对节点执行PING命令的时间，并把它作为超时未回复的依据，通过下面的过程了解它的变化：&lt;img data-ratio=&quot;1.0178890876565294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4oUnKODibQQQ8O5QUy6ObXOibsM1icUDibNppMSHSk1jebueJJcSFS4jWQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;默认情况下，每隔1秒哨兵向节点发送一次&lt;code&gt;PING&lt;/code&gt;命令；发送成功后，设置&lt;code&gt;last_ping_time&lt;/code&gt;为当前时间，按如下规则修改&lt;code&gt;act_ping_time&lt;/code&gt;：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;若&lt;code&gt;act_ping_time&lt;/code&gt;为0，则设置为当前时间。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若&lt;code&gt;act_ping_time&lt;/code&gt;不是0，则不做任何修改。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;若收到节点回复：修改&lt;code&gt;last_pong_time&lt;/code&gt;为当前时间，并检查是否为有效回复，哨兵仅认为&lt;code&gt;+PONG&lt;/code&gt;、-LOADING&lt;code&gt;、&lt;/code&gt;-MASTERDOWN`是有效的，其他回复或未回复都是无效的。&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;若为有效回复，则修改&lt;code&gt;last_avail_time&lt;/code&gt;为当前时间，修改&lt;code&gt;act_ping_time&lt;/code&gt;为0；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若为无效回复，不做任何修改&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;每隔100毫秒，哨兵逐个检查节点是否达到SDOWN状态，具体方法在&lt;code&gt;sentinelCheckSubjectivelyDown&lt;/code&gt;，当满足以下条件（两者满足其一）时，哨兵会把节点状态置为SDOWN：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在预设时间范围内哨兵未收到节点对PING命令的有效回复。这个预设时间是由配置项&lt;code&gt;down-after-milliseconds&lt;/code&gt;决定的，默认值是30秒。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;哨兵认为它是主节点，而节点上报它正在切换为从节点，但是在指定时间范围内它没有完成角色切换。这个时间计算公式为：&lt;code&gt;down-after-milliseconds + 2 * SENTINEL_INFO_PERIOD&lt;/code&gt;，默认值是50秒（&lt;code&gt;30 + 2 * 10&lt;/code&gt;）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SDOWN状态是指在&lt;code&gt;down-after-milliseconds&lt;/code&gt;未收到节点的PING命令回复，如果该配置项为30秒，但是哨兵在29秒时收到节点的回复，哨兵也会认为节点是正常工作的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SDOWN无法触发故障转移，仅仅说明是一个哨兵认为节点发生故障（不可用）了，若要触发故障转移，必须达到ODOWN状态。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;客观宕机&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当Sentinel将一个主节点判断为主观下线之后，为了确认这个主服务器是否真的下线 了，它会向同样监视这一主服务器的其他Sentinel进行询问，看它们是否也认为主服务器已经进入了下线状态。当Sentinel从其他Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将从服务器判定为客观下线，并对主服务器执行故障转移操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;发送&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel使用&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令询问其他Sentinel节点是否已经下线。命令及参数说明如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Sentinel is-master-down-by-addr &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; &amp;lt;epoch&amp;gt; &amp;lt;runId&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 既可用于询问其他哨兵主节点是否下线，也可以用于后续故障转移的投票，这里先说第一种情况：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# ip：被Sentinel判断为主观下线主节点的ip；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# port：被Sentinel判断为主观下线主节点的port；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# epoch：Sentinel的配置纪元；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# runId：询问场景中它始终为`*`。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果被Sentinel判断为主观下线的主节点IP为127.0.0.1，端口号为6379，Sentinel的配置纪元为0，那么Sentinel将向其他Sentinel发送以下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SENTINEL is-master-down-by-addr 127.0.0.1 6379 0 *&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接收&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当Sentinel接收到其他Sentinel发过来的&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令后，会解析命令中的主节点的ip和port，检查本地缓存中主节点是否为SDOWN，然后以下三个参数进行回复：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 返回目标Sentinel对主节点的检查结果，1说明为SDOWN，0说明正常。&lt;/span&gt;&lt;br/&gt;1) &amp;lt;down_state&amp;gt;&lt;br/&gt;&lt;span&gt;# 在询问主节点是否下线的场景下，始终为 *&lt;/span&gt;&lt;br/&gt;2) &amp;lt;leader_runid&amp;gt;&lt;br/&gt;&lt;span&gt;# 在询问主节点是否下线的场景下，始终为 0&lt;/span&gt;&lt;br/&gt;3) &amp;lt;leader_epoch&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果接收&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令的Sentinel也认为主节点已经为SDOWN，则回复命令如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1) 1&lt;br/&gt;2) *&lt;br/&gt;3) 0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;处理&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;回复。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当Sentinel接收到其他Sentinel对&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;的回复后，会解析其返回的内容，然后设置该Sentinel对询问主节点的在线状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这样，Sentinel就完成了通过其他Sentinel对主节点在线状态的询问过程。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Sentinel的周期性函数中，会检查主节点是否满足客观宕机的条件。判断的过程比较简单：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从字典中取出监控当前主节点的所有Sentinel节点，然后遍历这些Sentinel的主节点状态是否为SDOWN，是就累加。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;遍历完成后，检查累加结果是否大于等于quorum（法定数量）。成立则修改主节点状态为客观宕机（ODOWN），并设置宕机时间；不成立则设置为非客观宕机。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ODOWN状态仅应用在主节点上，不对从节点及其他哨兵节点应用，但是SDOWN状态对他们都是有效的。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障转移&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel判定主节点客观宕机（ODOWN）后，将进入故障转移过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入故障转移过程有几个前提：主节点为客观宕机状态、当前没有故障转移在执行、上次故障转移已经超时。Sentinel确认可以执行故障转移后，会进行以下几项准备工作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;设置failover_state：SENTINEL_FAILOVER_STATE_WAIT_START（故障转移等待开始）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置当前主节点标识位：SRI_FAILOVER_IN_PROGRESS（主节点处于故障转移过程中）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置纪元加1，并以此作为故障转移的纪元；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;记录故障转移开始时间及failover_state状态修改时间；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个故障转移过程是依靠Sentinel周期性函数及failover_state状态机来驱动的（具体函数是&lt;code&gt;sentinelFailoverStateMachine&lt;/code&gt;），通过图示来说明：&lt;img data-ratio=&quot;0.9397944199706314&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mZx0iasykfltK0bScf7icgO0LBaia4PTCO4GvAocELQrDz3KWsUricQWMzzjRH0smGx98lOlqUZKGcLbwqde4UiavsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;681&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;如图所示，一个状态对应一个操作步骤。&lt;/span&gt;&lt;span&gt;每次&lt;/span&gt;&lt;code&gt;sentinelFailoverStateMachine&lt;/code&gt;&lt;span&gt;执行时首先判断failover_state，然后选择对应的过程执行，接下来按照上图把核心过程介绍&lt;/span&gt;一&lt;span&gt;下。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Sentinel Leader选举&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个主节点被判断为客观下线时，监控这个主节点的所有Sentinel会进行协商，选举一个Leader对下线的主节点执行故障转移操作。怎么选呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思考一下，我们可以知道：故障检测是多个Sentinel同时执行的，也就是说可能多个Sentinel在相近的时间内都判定主节点客观宕机了，因此Leader的选举过程在Sentinel集群内可能是同步进行的。所以，Sentinel需要在集群内进行“拉票”，“拉票”的依据就是配置纪元及“拉票”的时间。配置纪元越大，优先级越高；“拉票”请求越早，优先级越高。我们来看下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当Sentinel判断主节点客观下线后，会把自己的配置纪元加1，未检测到主节点ODOWN或检测慢的，自然落后于当前纪元；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentinel会使用&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;命令向其他所有Sentinel发起投票请求，与故障检测过程中的“询问“不同，这里的runId将被设置为当前Sentinel的runId，epoch为最新的纪元。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他Sentinel接收到“投票”请求后，执行以下过程：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;若请求纪元大于自身配置纪元，则更新替换；若监控主节点的配置纪元小于请求纪元，则更新替换，并“投票”给发起请求的Sentinel。这个过程是抢占式的，同一纪元，先到先得。（Redis命令处理是单线程，无并发冲突）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据判断结果，回复“投票”请求：回复内容为该Sentinel选举的Leader的runId。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;Sentinel接收并处理&lt;code&gt;Sentinel is-master-down-by-addr&lt;/code&gt;回复：把投票结果（runId）更新到该Sentinel的节点信息中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“投票”完成后就到了“唱票”环节，该过程是在&lt;code&gt;SENTINEL_FAILOVER_STATE_WAIT_START&lt;/code&gt;状态下执行的。Sentinel会遍历当前主节点下所有的Sentinel节点，把它们的投票信息进行统计；然后判断是否有Sentinel胜出。这里胜出的条件是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Sentinel必须获取集群内大多数Sentinel的选票，即票数大于50%（防止“脑裂“）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sentinel所获票数必须大于等于法定人数（quorum）；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;举例：监控主节点的Sentinel有5个，quorum为4，投票情况：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果某个Sentinel的获得3票，但是3&amp;lt;4，该Sentinel不能被选为Leader；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果某个Sentinel的获得4票，但是4&amp;gt;=4，该Sentinel可以被选为Leader;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Sentinel Leader的产生需要半数以上Sentinel的支持，并且每个Sentinel在每个配置纪元里面只能设置一次Leader，所以在一个配置纪元立main，只会出现一个Leader。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在给定时限内，没有一个Sentinel被选举为Leader，那么各个Sentinel将在一段时间后再次进行选择，直到选出Leader为止。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel Leader选举完成，设置failover_state为&lt;code&gt;SENTINEL_FAILOVER_STATE_SELECT_SLAVE&lt;/code&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;新主节点选举&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点已经客观宕机，Sentinel Leader会从该主节点存活的从节点中选出一个新的主节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，Sentinel Leader会按照以下条件剔除从节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主观宕机（SDOWN）或与处于断线状态的从节点；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最近5秒内未回复过Sentinel Leader INFO命令的从节点；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从节点的优先级为0的从节点，由配置项&lt;code&gt;replica-priority&lt;/code&gt;决定；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与主节点断开连接超过10倍&lt;code&gt;down-after-milliseconds&lt;/code&gt;的从节点；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;筛选过后，剩下的从节点都是数据比较新、与Sentinel Leader通信正常的，可以保证故障转移后最小的数据丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，按照以下规则选择新的主节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;选择&lt;code&gt;replica-priority&lt;/code&gt;最低的节点。如果存在相同，则继续；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择复制偏移量最大的的从节点。如果存在相同，则继续；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择runId最小的从节点；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果新主节点选举失败，将等待重试。选举成功，则将此从节点提升，并设置failover_state为&lt;code&gt;SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE&lt;/code&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置新主节点&amp;amp;新主节点角色提升&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选出新的主节点之后，Sentinel Leader会向它发送&lt;code&gt;slaveof NO ONE&lt;/code&gt;，把这个从节点转为主节点（这是在从节点自身来看的角色转换）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从节点接收&lt;code&gt;slaveof NO ONE&lt;/code&gt;命令后，会重置其主节点信息，断开与其主节点、从节点的网络连接，重置其复制ID，并执行持久化重写操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送命令后，Sentinel Leader会设置failover_state为&lt;code&gt;SENTINEL_FAILOVER_STATE_WAIT_PROMOTION&lt;/code&gt;，等待从节点角色提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel Leader会向它发送&lt;code&gt;slaveof NO ONE&lt;/code&gt;命令后，每隔一秒发送一次INFO命令（正常是10秒一次），并观察命令回复中的角色信息。当被升级的从节点的角色从原来的slave变为master时，Sentinel Leader就知道该从节点已经升级主节点了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从节点角色提升成功，设置failover_state状态为SENTINEL_FAILOVER_STATE_RECONF_SLAVES。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置其他从节点&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的主节点已经配置完成，接下来就是要让其他存活的从节点以该节点为主节点，然后向该节点发起主从复制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该过程原理比较简单：遍历原主节点的从节点，向这些从节点发送&lt;code&gt;slaveof &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt;命令，该部分在上一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTE4NDg0NA==&amp;amp;mid=2247483973&amp;amp;idx=1&amp;amp;sn=20a93510a2981b948de2bd1f0178bce1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Redis专题：一文搞懂主从复制原理&lt;/a&gt;》讲过，大家可以自行翻阅。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有从节点配置完成后，就会修改failover_state为&lt;code&gt;SENTINEL_FAILOVER_STATE_UPDATE_CONFIG&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，这一过程受配置项parallel_syncs（同时执行主从复制的节点数量）的影响。由于主从复制过程中从节点数据加载阶段无法对外提供服务，所以，如果同时进行主从复制的从节点数量较多，可能会导致短时间内系统不可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该配置越小，从节点完成配置的时间越长；反之，时间越短。实际环境中，我们需要根据从节点的数量，系统压力，按照比例合理设置。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;更新配置&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障转移过程中，新主节点是以“储君”的身份在工作，其他所有从节点切换至新的主节点后，就要正式把新主节点“立”起来了。简单来说有三步（实现方法在&lt;code&gt;sentinelFailoverSwitchToPromotedSlave&lt;/code&gt;，由周期函数触发）：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;重置新主节点的信息状态、清空从节点、Sentinel节点等，failover_state修改为&lt;code&gt;SENTINEL_FAILOVER_STATE_NONE&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从旧主节点中迁移Sentinel节点、从节点，迁移至新的主节点中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;释放就主节点配置信息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，故障转移工作完成。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他问题&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;主从节点移除&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sentinel从不移除从节点，即使很长时间都不可用。这一点是非常有用的，因为当发生网络分区或者故障后，Sentinel需要正确的对恢复节点进行重新配置。经过故障转移，旧主节点将以从节点的角色加入集群，Sentinel会对他进行重新配置，让它从新的主节点执行主从复制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果需要移除故障节点，需要依次向Sentinel节点发送&lt;code&gt;Sentinel Reset&lt;/code&gt;命令，经过10秒，Sentinel会重新刷新它们的从节点列表，仅保存主节点INFO命令回复内容中的从节点。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;脑裂问题&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis的主从模式下脑裂是指因为网络问题，导致redis 主节点跟从节点和Sentinel集群处于不同的网络分区，此时因为Sentinel集群无法感知到 主节点的存在，就会将某一个从节点提升为主节点。此时就存在两个不同的主节点，就像一个大脑分裂成了两个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群脑裂问题中，如果客户端还在基于原来的主节点继续写入数据，那么新的主节点将无法同步这些数据，当网络问题解决之后，Sentinel 集群将原先的主节点降为从节点，此时再从新的主中同步数据，将会造成大量的数据丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：Redis 3原来是主节点，Redis 1和2是它的从节点。由于网络分区，Sentinel 1和2提升Redis 1作为新的主节点，而Redis 3在自己所处的网络分区中仍然是主节点。Client B还会持续写入数据，但是当网络恢复后，Redis 3将被重新配置为Redis 1的从节点，Client B写入的数据将会全部丢失。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;            +-------------+&lt;br/&gt;            | Sentinel 1  |----- Client A&lt;br/&gt;            | Redis 1 (M) |&lt;br/&gt;            +-------------+&lt;br/&gt;                    |&lt;br/&gt;                    |&lt;br/&gt;+-------------+     |          +------------+&lt;br/&gt;| Sentinel 2  |-----+-- // ----| Sentinel 3 |----- Client B&lt;br/&gt;| Redis 2 (S) |                | Redis 3 (M)|&lt;br/&gt;+-------------+                +------------+&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于Redis使用异步复制，在这个场景中无法完全解决数据丢失的问题，但是可以通过以下参数把数据损失降低：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;min-replicas-to-write 1&lt;br/&gt;min-replicas-max-lag 10&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;min-replica选项的作用在上一篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0NTE4NDg0NA==&amp;amp;mid=2247483973&amp;amp;idx=1&amp;amp;sn=20a93510a2981b948de2bd1f0178bce1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Redis专题：一文搞懂主从复制原理&lt;/a&gt;》我们也说过了，这一配置要求主节点必须包含一个从节点并且主从之间的最大延迟不能超过10秒，否则主节点会拒绝客户端的写入请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是从故障发生到min-replica选项生效也需要一定的时间，这个过程中的数据丢失是无法避免的，依赖“Redis+Sentinel”的系统必须对数据的丢失有一定的容忍性，否则就需要采用支持强一致的系统了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文详细介绍了Redis Sentinel模式的工作原理，从节点发现、故障检测、故障转移等几个方面深入展开。对我个人来讲，Redis主从模式的运行原理有了更加深入的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望也能给你带来帮助！码字不易，感谢转发！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考文档&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;CSDN《Redis(设计与实现):46---Sentinel之检测服务器、Sentinel下线状态(down-after-milliseconds、quorum、is-master-down-by-addr)》：https://blog.csdn.net/qq_41453285/article/details/103354554&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;官方文档《Redis Sentinel Documentation》：https://redis.io/topics/sentinel&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis源码 tag:6.0.10&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Redis Sentinel原理解析》：https://juejin.cn/post/6921279887080849422#heading-9&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f07d587c1ed07d910ae4e1f8c2b6f36b</guid>
<title>2021 阿里淘系工程师推荐书单</title>
<link>https://toutiao.io/k/txzl2gg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot; data-backw=&quot;578&quot; data-backh=&quot;96&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;读书有点像机器学习从初始参数开始的局部最小化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无论是数学、科学、技术、管理，还是历史、文学，读书的过程，就是根据一维的文字流，在立体的思维空间中重新建构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种建构的意义，将我们自身和世界连接了起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;（阿里巴巴淘系技术部资深算法专家 乐田）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上个月，我们推出了2020淘系技术年货《技术人的百宝黑皮书》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（公众号后台回复&lt;strong&gt;“黑皮书”&lt;/strong&gt;即可获取电子书下载链接）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在书的第三部分，我们开列了来自阿里工程师倾情推荐的本年度书单，涵盖了技术硬核参考、商业思维培养以及文化、科普、工具方法等多个类别，受到不少好评。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下是关于这份书单的详细扩充介绍，希望能够帮助技术人员精进技术实力，提高思维能力和眼界认知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（收藏起来，我的懒癌还可以抢救一下）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类别一：技术硬核参考&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3284132841328413&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6AgSw8B1QXaFDD5gHgicBGw5CesJcfuCwVHT41o6Aib8QALQpiaK9L1ePw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;542&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85927&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《深度探索C++对象模型》 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Stanley B·Lippman&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这本书探索“对象导向程序所支持的C++对象模型”下的程序行为，对于“对象导向性质之基础实现技术”以及“各种性质背后的隐含利益交换”提供一个清楚的认识。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3080357142857142&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6r8Lw2Bym9SHBKV0rrkvj8rIsOWGUpW4kymxIibFMIR3FxHtzeTto4QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85927&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《你不知道的JavaScript》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Kyle Simpson&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JavaScript语言有很多复杂的概念，但却用简单的方式体现出来（比如回调函数）。“你不知道的JavaScript”系列就是要让不求甚解的JavaScript开发者迎难而上，深入语言内部，弄清楚JavaScript每一个零部件的用途。本书介绍了该系列的两个主题：“作用域和闭包”以及“this和对象原型”。掌握了这些知识之后，无论什么技术、框架和流行词语，你都能轻松理解。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3624678663239074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6aHfJEiaIBvib6vkDn8Hg2nFJmicDUpCbWiaPOicUkAXJZfTobl9rz85DS9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;389&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《深入理解ES6》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Nicholas C. Zakas&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;深入理解ES6的特性对于所有JavaScript开发者而言至关重要，在可预见的未来，ES6中引入的语言特性会成为JavaScript应用程序的主流特性。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3161434977578474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6a56NnTwiaXl0JV992hTgFYxNvNibOWdMN1ibMBHFH9ZMleQHQgkW5WvZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;446&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《程序员修炼之道》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Andrew Hunt / David Thomas&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《程序员修炼之道》由一系列的独立的部分组成，涵盖的主题从个人责任、职业发展，直到用于使代码保持灵活、并且易于改编和复用的各种架构技术。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3537549407114624&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6Ic2mHY51a7mEBB8M1jX6Y3YuvkPqdLvib1xlLUichQBfQcSkBFc3QRgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;506&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《架构整洁之道》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Robert C. Martin &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《架构整洁之道》是创造“Clean神话”的Bob大叔在架构领域的登峰之作，围绕“架构整洁”这一重要导向，系统地剖析其缘起、内涵及应用场景，涵盖软件研发完整过程及所有核心架构模式。&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.278772378516624&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6yic2QAE0hBY0pFtuok7RfiaTaFnEhEibHHRUFqSicIMxHZgFpdSfQ7mcvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;391&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《支持向量机导论》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] 克里斯蒂亚尼&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书是第一本综合介绍支持向量机（SVM）的书籍，它从机器学习算法的基本问题开始，循序渐进地介绍相关的背景知识，包括线性分类器、核函数特征空间、推广性理论和优化理论，在此基础上很自然地引出了支持向量机的算法。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2722222222222221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6vwEm2YGWgAsaXEMAxsqh2n2O1iat0stGWvf7gFhB7vtiaJ4KQWACeCXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《代码的未来》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[日] 松本行弘 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作者对云计算、大数据时代下的各种编程语言以及相关技术进行了剖析，并&lt;/span&gt;&lt;span&gt;对编程语言的未来发展趋势做出预测，内容涉及Go、VoltDB、node.js、CoffeeScript、Dart、MongoDB、摩尔定律、编程语言、多核、NoSQL等当今备受关注的话题。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.1627906976744187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6iaguqNUvVqlZw8TRW1dzMJ2plQJPAZ6QkMzSD4oMvOSP4r5phnyrb5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;172&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《Head First 设计模式》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] 弗里曼 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一本设计模式入门书籍，用实际的编程案例讲解算法设计中会遇到的各种问题和需求变更，并以此逐步推导出良好的设计模式解决办法。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2566666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6xIqLL9lqWJqAAGVUNXy5Lzc3oQc2Of6uMSI4OoqaBbZib1PCndmnKnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《领域驱动设计》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Eric Evans &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。&lt;/span&gt;&lt;span&gt;书中给出了领域驱动设计的系统化方法，并将人们普遍接受的一些最佳实践综合到一起，融入了作者的见解和经验，展现了一些可扩展的设计最佳实践、已验证过的技术以及便于应对复杂领域的软件项目开发的基本原则。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2531328320802004&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6NWxKuhGdUiarrgDqibYP5lvwVbjABibOx9gLcKPU1Vp9RkTYfFxgiayQRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《Effective Java&lt;/span&gt;&lt;/strong&gt;》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Joshua Bloch&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Eff&lt;/span&gt;&lt;span&gt;ective Java Programming Language Guide distills the hard-won wisdom of today&#x27;s best Java programmers into 50 techniques for designing and constructing more robust, high-performance software. Josh Bloch, one of Sun&#x27;s most widely respected Java developers, focuses on the practical problems virtually every Java developer encounters, offering specific solutions and top-notch code examples.&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.313572542901716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG60gbWwJribC97wfibianQciajI7KlAdm7y52dhJstKyznYKD6pq9uuvtiahA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;641&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《&lt;strong&gt;&lt;span&gt;Deep Learning&lt;/span&gt;&lt;/strong&gt;》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;Ian Goodfellow &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The text offers mathematical and conceptual background, covering relevant concepts in linear algebra, probability theory and information theory, numerical computation, and machine learning. It describes deep learning techniques used by practitioners in industry, including deep feedforward networks, regularization, optimization algorithms, convolutional networks, sequence modeling, and practical methodology; and it surveys such applications as natural language processing, speech recognition, computer vision, online recommendation systems, bioinformatics, and videogames. &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类别二：商业思维养成&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6yia4qIkyxmUE63mNJYfTwIia07wicHicZD103m7a8ibtV4ZDicdrydgyBlUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《刷新》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美]  Satya Nadella &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任何组织和个人，达到某个临界点时，都需要自我刷新。为了迎接智能时代的挑战，作者提出自我刷新的三个关键步骤：拥抱同理心，培养“无所不学”的求知欲，以及建立成长型思维。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3513513513513513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6bHWhkfFeH2ibs6AqdyxsOyJ7f5210rqNvw451MuBfxNkjM8uqUqa1XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;370&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《商业的本质》 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Jack Welch&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任何组织和个人，达到某个临界点时，都需要自我刷新。为了迎接智能时代的挑战，作者提出自我刷新的三个关键步骤：拥抱同理心，培养“无所不学”的求知欲，以及建立成长型思维。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6uZRt4LYg7RicQVVibt6lmQ17VQHcLoMC6LfVGZP9UD5EhnnRXtpZtIibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《规模: 复杂世界的简单法则》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[英] Geoffrey West &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《规模》将帮助你重新思考生命、认识自身、了解你的生活与工作，并告诉你复杂世界其实充满简单的逻辑，只要跳脱思维框架，打破学科限制，你就会重新看清你周遭的一切。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.348148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG601cu4Qf9vCOrmDIypRHvOiaAQM22VAyzickwHEwNTkM4JA9cib9HxibpTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《债务危机》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] Ray Dalio &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这本书中，达利欧通过三部分内容阐述了债务危机及其应对原则：&lt;/span&gt;&lt;span&gt;债务大周期模型（解释模型）、3个重要案例（深入考察20世纪20年代德国魏玛共和国、20世纪30年代的美国大萧条和2008年金融危机）、48个历史案例和数据对照分析，以备受启发的新方式理解经济与市场。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类别三：文化&amp;amp;科普&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4970059880239521&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6uyCGdib5NGahmJ5icRQu67MD3To7nFHgoouvKf0vIiafib10SyKBrLgxkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;334&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《&lt;strong&gt;&lt;span&gt;The Book of Why&lt;/span&gt;&lt;/strong&gt;》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[美] Judea Pearl / Dana Ma&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pearl&#x27;s work enables us to know not just whether one thing causes another: it lets us explore the world that is and the worlds that could have been. It shows us the essence of human thought and key to artificial intelligence. Anyone who wants to understand either needs The Book of Why.&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.45&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6AYJMEUibmLF20pdMMlYdoiaiazldsUwrl94A4pjYeyYN87sz59XjSgyjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;《&lt;strong&gt;&lt;span&gt;魔鬼经济学&lt;/span&gt;&lt;/strong&gt;》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;[美] 史蒂芬·列维特 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《魔鬼经济学》中确立了一个有悖于传统智慧的观点：&lt;/span&gt;&lt;span&gt;如果说伦理道德代表了我们心目中理想的社会运行模式的话，那么经济学就是在向我们描述这个社会到底是如何运行的。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.845679012345679&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6Z1tMKVxFgY5VgGuVoIJ9zoRZjVx4f6xF8ncX5BibVBUmwVOBpdC2dibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;324&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《罗马人的故事》15卷本 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[日] 盐野七生&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还原一个意大利半岛的小国成为世界帝国，持续1300年的辉煌历程，再现一个英雄辈出的时代……读懂了罗马，才能读懂过去的欧洲和今天的世界。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4356846473029046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG60sDS7jTrr74Nk2rbfKdax6rCEr0ep70s7xY8EqCX9pYqk9Ldj7IH2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;241&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《孙子兵法》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;孙武&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我国最古老最杰出的一部兵书。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6w4KrfZKltibUEzLjnZLZp6Licb26kJWsWyMHoCoV1RoduFEs6iclQEmlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;160&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《QED》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[美] 理查德·费曼&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个新的视角来看量子世界。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4598540145985401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6licjWd9RHRppWCVuFbtZrRKSyf6kfm68gzrfGxhsshj0M2yWLDZMjeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;685&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《枢纽》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;施展&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中国历史演进的逻辑，中国奇迹持续的原因，以及，该如何认知我们的世界角色。&lt;/span&gt;&lt;span&gt;在这个关键节点，每个人都在思考未来。&lt;/span&gt;&lt;span&gt;我们在思考未来的时候，最重要的事情是对目标的设定。&lt;/span&gt;&lt;span&gt;而如何设定目标，取决于你怎么理解自己、理解中国、理解世界。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.466275659824047&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6a8H2REEqRs53cuX4A2k50yle3pMUGfMNOTtibV91XPcibMxukqw3YcMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;341&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《叩响命运的门》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;马小平&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《叩响命运的门》精选了古今中外最为著名的人文素养经典文本88篇。这些篇章充满生命的智慧和力量，通过对经典的阅读，我们可以和无缘谋面的历史巨人或不相识的朋友进行精神的对话，并在这一过程中实现了文化意义的交流与传承。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.7786666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6q2CYKmjfXsyOUTBR6OibRv7MFKNQx745T0vpMoGE46XRXkedlssOR1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《星空的琴弦-天文学史话》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;汪洁&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一部人类探索天文的历史，更是一部人类理性崛起的历史。&lt;/span&gt;&lt;span&gt;跟随本书，你将回到过去，在那一个个激动人心的天文大发现的历史现场，和科学家们一起感受当时的兴奋，也体会他们探索的艰辛。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;类别四：工具&amp;amp;方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.36&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6wickprViayDaLpo2pJJu8OZxNiaYrwun3OFhibbPXbheW1rSRgOURXYf9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《金字塔原理》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[美] Barbara Minto &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一本讲解写作逻辑与思维逻辑的读物。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.4315068493150684&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6HEAibHf8n3S39clr8qC0icCX6npe6Azsu3PHgyejraIcaOF9JxzLgU3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;292&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《高效能人士的七个习惯》 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[美]  史蒂芬·柯维&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;精选柯维博士“七个习惯”的最核心思想和方法，为忙碌人士带来超价值的自我提升体验。用最少的时间，参透高效能人士的持续成功之路。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8yfAmMpLAyVPOqYaI1DLG6cRcJkx1jiawcOVeYOrwje123LcNU3MX4a8XR0V4HyCgZvTCfD12hmJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; hm_fix=&quot;390:637&quot;&gt;&lt;span data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;《软技能 - 代码之外的生存指南》&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[美]  John Z. Sonmez &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书聚焦于软件开发人员生活的方方面面，从揭秘面试的流程到精耕细作出一份杀手级简历，从创建大受欢迎的博客到打造你，从提高自己工作效率到与如何与“拖延症”做斗争，甚至包括如何投资不动产，如何关注自己的健康。本书共分为职业篇、自我营销篇、学习篇、生产力篇、理财篇、健身篇、精神篇等七篇，概括了软件行业从业人员所需的“软技能”。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今日话题：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你收藏的书单有哪些，欢迎下方留言～&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7575159facac3eb4b4377dcce5c3d753</guid>
<title>如何使用 Github Actions 自动抓取每日必应壁纸?</title>
<link>https://toutiao.io/k/njz6r2g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何使用 Github 服务器自动抓取必应搜索的每日壁纸呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你访问过必应搜索网站，那么你一定会被搜索页面的壁纸吸引，必应搜索的壁纸每日不同，自动更换，十分精美。这篇文章会介绍如何一步步分析出必应搜索壁纸 API ，如何结合 &lt;strong&gt;Github Actions&lt;/strong&gt;自动抓取每日必应壁纸到 Github 仓库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元宵节当天具有中国元素的必应搜索。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5953333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUsothFG4eGMLCcBW8RUAVGyMkd2HTOicw4enBUvAqMQo5GExQkGJOf0A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;必应搜索主页&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;平常一天的必应搜索。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUMTafloqibHONEMUyzho89dJUcqKmhJJj2NNJMdmyl6aDntE1ZbZL5wA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;必应首页&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分析必应壁纸 API&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然是网站上的背景，又是每天更换，很大概率是通过某个 API 请求返回壁纸信息的，事实真是如此吗？直接打开浏览器 network 控制台监控网络请求信息。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.63&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUPpiaaDhqYjl7ZYeg6JUiaVQ41T2ybvRnteBV4fwkXn9f3FiaomeMMbaHg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;分析必应壁纸API&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;筛选 XHR 异步请求，排除 js 文件加载请求后，在一个路径为 &lt;code&gt;HPImageArchive.aspx&lt;/code&gt;  的请求中，发现响应的信息似乎和背景图片有关，直接复制出请求的 URL ，得到了一个似乎是壁纸 API 的接口。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://cn.bing.com/HPImageArchive.aspx?format=js&amp;amp;idx=0&amp;amp;n=1&amp;amp;nc=1614319565639&amp;amp;pid=hp&amp;amp;FORM=BEHPTB&amp;amp;uhd=1&amp;amp;uhdwidth=3840&amp;amp;uhdheight=2160&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个接口返回的信息到底是不是页面上的图片信息呢？还需要进一步测试，单独请求分析这个接口，分析其中的响应信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;➜  ~ curl https:&lt;span&gt;//cn.bing.com/HPImageArchive.aspx?format=js&amp;amp;idx=0&amp;amp;n=1&amp;amp;nc=1614319565639&amp;amp;pid=hp&amp;amp;FORM=BEHPTB&amp;amp;uhd=1&amp;amp;uhdwidth=3840&amp;amp;uhdheight=2160&lt;/span&gt;&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;images&quot;&lt;/span&gt;: [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;startdate&quot;&lt;/span&gt;: &lt;span&gt;&quot;20210225&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;fullstartdate&quot;&lt;/span&gt;: &lt;span&gt;&quot;202102251600&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;enddate&quot;&lt;/span&gt;: &lt;span&gt;&quot;20210226&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;url&quot;&lt;/span&gt;: &lt;span&gt;&quot;/th?id=OHR.JinliStreet_ZH-CN3020276206_UHD.jpg&amp;amp;rf=LaDigue_UHD.jpg&amp;amp;pid=hp&amp;amp;w=3840&amp;amp;h=2160&amp;amp;rs=1&amp;amp;c=4&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;urlbase&quot;&lt;/span&gt;: &lt;span&gt;&quot;/th?id=OHR.JinliStreet_ZH-CN3020276206&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;copyright&quot;&lt;/span&gt;: &lt;span&gt;&quot;挂在锦里街上的红灯笼，中国成都 (© Philippe LEJEANVRE/Getty Images)&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;copyrightlink&quot;&lt;/span&gt;: &lt;span&gt;&quot;/search?q=%e9%94%a6%e9%87%8c%e8%a1%97&amp;amp;form=hpcapt&amp;amp;mkt=zh-cn&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;quiz&quot;&lt;/span&gt;: &lt;span&gt;&quot;/search?q=Bing+homepage+quiz&amp;amp;filters=WQOskey:%22HPQuiz_20210225_JinliStreet%22&amp;amp;FORM=HPQUIZ&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;wp&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;hsh&quot;&lt;/span&gt;: &lt;span&gt;&quot;e9b5fb1ad61034342e8d459bff8fc5c5&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;drk&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;top&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;bot&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;hs&quot;&lt;/span&gt;: []&lt;br/&gt;    }&lt;br/&gt;  ],&lt;br/&gt;  &lt;span&gt;&quot;tooltips&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;loading&quot;&lt;/span&gt;: &lt;span&gt;&quot;正在加载...&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;previous&quot;&lt;/span&gt;: &lt;span&gt;&quot;上一个图像&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;next&quot;&lt;/span&gt;: &lt;span&gt;&quot;下一个图像&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;walle&quot;&lt;/span&gt;: &lt;span&gt;&quot;此图片不能下载用作壁纸。&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;walls&quot;&lt;/span&gt;: &lt;span&gt;&quot;下载今日美图。仅限用作桌面壁纸。&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;➜  ~&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到返回的结果中有 &lt;code&gt;URL&lt;/code&gt; 信息，拼接到必应网址访问测试（其实通过响应信息里的图片描述 ”挂在锦里街上的红灯笼，中国成都“ 就已经猜到大概率是了，今日元宵节）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://bing.com/th?id=OHR.JinliStreet_ZH-CN3020276206_UHD.jpg&amp;amp;rf=LaDigue_UHD.jpg&amp;amp;pid=hp&amp;amp;w=3840&amp;amp;h=2160&amp;amp;rs=1&amp;amp;c=4&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问后发现就是必应搜索网站的当日壁纸（元宵节必应放了一张红色灯笼壁纸）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5913333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUibicR6iaWsV29wK85pVicM8EX2NAa8bqibnT9LUibUTpOzbAicnb5ic5kaicFqg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;元宵节&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，我们已经找到了必应搜索壁纸的 API 接口和响应信息中的图片地址。如果再看图片的 URL 地址，其中携带了不少参数，这些参数是什么意思呢？可以大胆猜测，其中的参数 &lt;code&gt;w=3840&amp;amp;h=2160&lt;/code&gt; 应该是指图片的宽和高，确实是这样，调整这两个参数可以返回不同分辨率的图片，如果没有这两个参数就可以返回超清原图。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;必应壁纸爬虫&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面分析出了必应壁纸的 API ，那么就不难写一个自动爬取当天必应壁纸的自动化程序。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求必应壁纸 API。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSON 解析出图片 URL。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里网络请求使用 Java 原生写法，JSON 解析使用了 FASTJSON ，代码简单直接放上来了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &amp;lt;p&amp;gt;&lt;br/&gt; * 网络请求操作工具类&lt;br/&gt; *&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; niujinpeng&lt;br/&gt; * &lt;span&gt;@link&lt;/span&gt; https://github.com/niumoo&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HttpUtls&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 获取 HTTP 连接&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; url&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; IOException&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; HttpURLConnection &lt;span&gt;getHttpUrlConnection&lt;/span&gt;&lt;span&gt;(String url)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        URL httpUrl = &lt;span&gt;new&lt;/span&gt; URL(url);&lt;br/&gt;        HttpURLConnection httpConnection = (HttpURLConnection)httpUrl.openConnection();&lt;br/&gt;        httpConnection.setRequestProperty(&lt;span&gt;&quot;User-Agent&quot;&lt;/span&gt;, &lt;span&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; httpConnection;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 请求指定 URL 的内容&lt;br/&gt;     *&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; url&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;     * &lt;span&gt;@throws&lt;/span&gt; IOException&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String &lt;span&gt;getHttpContent&lt;/span&gt;&lt;span&gt;(String url)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        HttpURLConnection httpUrlConnection = getHttpUrlConnection(url);&lt;br/&gt;        StringBuilder stringBuilder = &lt;span&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;        &lt;span&gt;// 获得输入流&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; (InputStream input = httpUrlConnection.getInputStream(); BufferedInputStream bis = &lt;span&gt;new&lt;/span&gt; BufferedInputStream(&lt;br/&gt;            input);) {&lt;br/&gt;            &lt;span&gt;byte&lt;/span&gt;[] buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1024&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; len = -&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;// 读到文件末尾则返回-1&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; ((len = bis.read(buffer)) != -&lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                stringBuilder.append(&lt;span&gt;new&lt;/span&gt; String(buffer, &lt;span&gt;0&lt;/span&gt;, len));&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            httpUrlConnection.disconnect();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; stringBuilder.toString();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果觉得 Java 原生网络请求写法繁琐，也可以使用 OkHTTP 进行请求。请求到响应结果之后，使用 FASTJSON 解析响应的结果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; niujinpeng&lt;br/&gt; * &lt;span&gt;@link&lt;/span&gt; https://github.com/niumoo&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Wallpaper&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// BING API&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String BING_API = &lt;span&gt;&quot;https://cn.bing.com/HPImageArchive.aspx?format=js&amp;amp;idx=0&amp;amp;n=1&amp;amp;nc=1612409408851&amp;amp;pid=hp&amp;amp;FORM=BEHPTB&amp;amp;uhd=1&amp;amp;uhdwidth=3840&amp;amp;uhdheight=2160&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String BING_URL = &lt;span&gt;&quot;https://cn.bing.com&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        String httpContent = HttpUtls.getHttpContent(BING_API);&lt;br/&gt;        JSONObject jsonObject = JSON.parseObject(httpContent);&lt;br/&gt;        JSONArray jsonArray = jsonObject.getJSONArray(&lt;span&gt;&quot;images&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 图片地址&lt;/span&gt;&lt;br/&gt;        String url = BING_URL + (String)jsonArray.getJSONObject(&lt;span&gt;0&lt;/span&gt;).get(&lt;span&gt;&quot;url&quot;&lt;/span&gt;);&lt;br/&gt;        url = url.substring(&lt;span&gt;0&lt;/span&gt;, url.indexOf(&lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 图片时间&lt;/span&gt;&lt;br/&gt;        String enddate = (String)jsonArray.getJSONObject(&lt;span&gt;0&lt;/span&gt;).get(&lt;span&gt;&quot;enddate&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 图片版权&lt;/span&gt;&lt;br/&gt;        String copyright = (String)jsonArray.getJSONObject(&lt;span&gt;0&lt;/span&gt;).get(&lt;span&gt;&quot;copyright&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 格式化为 MD 格式&lt;/span&gt;&lt;br/&gt;        String text = String.format(&lt;span&gt;&quot;%s | [%s](%s) &quot;&lt;/span&gt;, enddate, copyright, url) + System.lineSeparator();&lt;br/&gt;        System.out.println(text);&lt;br/&gt;      &lt;br/&gt;        &lt;span&gt;// 写入 MD 文件&lt;/span&gt;&lt;br/&gt;        Path path = Paths.get(&lt;span&gt;&quot;README.md&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!Files.exists(path)) {&lt;br/&gt;            Files.createFile(path);&lt;br/&gt;        }&lt;br/&gt;        List&amp;lt;String&amp;gt; allLines = Files.readAllLines(path);&lt;br/&gt;        allLines.set(&lt;span&gt;0&lt;/span&gt;, text);&lt;br/&gt;        Files.write(path, &lt;span&gt;&quot;## Bing Wallpaper&quot;&lt;/span&gt;.getBytes());&lt;br/&gt;        Files.write(path, System.lineSeparator().getBytes(), StandardOpenOption.APPEND);&lt;br/&gt;        Files.write(path, allLines, StandardOpenOption.APPEND);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行之后就可以得到必应网站当天的壁纸信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;20210226 | [挂在锦里街上的红灯笼，中国成都 (© Philippe LEJEANVRE/Getty Images)](https://cn.bing.com/th?id=OHR.JinliStreet_ZH-CN3020276206_UHD.jpg) &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Github Actions&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们想要收集每天的必应壁纸，岂不是每天都要运行一次爬虫程序？这显然太麻烦了。如果有个定时任务每天自动执行一次，岂不妙哉？但是挂在服务器上还需要购买一台虚拟主机，实在得不偿失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时机智的我突然想到何不利用 &lt;strong&gt;Github Actions&lt;/strong&gt; 功能呢？&lt;strong&gt;Github Actions&lt;/strong&gt; 可以执行多种常见环境的程序，而且可以定时触发，免费好用，实在是妙，心中默默的也为微软竖起了大拇指。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4lfok2icUkibSapIINibQgyjIvpmebibOiacUzh0z4e6a5Al5KsmBV83siaWQX5x01a1CIlGmGCAJeA3SMlgm6VG6p2w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;200&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面会简单介绍一下 &lt;strong&gt;Github Actions&lt;/strong&gt; 的使用，更多的关于 &lt;strong&gt;Github Actions&lt;/strong&gt; 的概念和使用的场景就不介绍了，我们只要知道利用 &lt;strong&gt;Github Actions&lt;/strong&gt; 功能，可以让我们在指定的&lt;strong&gt;事件触发&lt;/strong&gt;（代码提交事件或者&lt;strong&gt;定时&lt;/strong&gt;或者其他）时，可以运行指定的程序就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想了解更多的相关资料，可以直接参考 Github Actions 官方文档，也可以参考其他的相关中文教程，链接这里已经放在文章末尾了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Github Actions 体验&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Github 仓库页面的 Actions 页签下可以创建 Github Actions 配置，这里创建一个官方提供的简单示例进行演示。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6886666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUuBBJ9efvfSQ55eLzvFV7JqvYFbZzXTyDHdQCMH1Bic2j0ibdpLIBONlg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;Github Actions&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建后可以得到一个官方编写好的 Actions Demo，功能就是输出几个字符串。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.83&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacU58lxSpS1Z7mvbrmdUuNpnjACmTUJvQT67wAS6blGpFfxE2ibFcP7vCw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;GitHub Actions&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单介绍一下图中 Actions 配置文件中的的一些概念。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;on&lt;/code&gt; 指定此 Actions 的触发机制，这里的 &lt;code&gt;push&lt;/code&gt; 和 &lt;code&gt;pull_request&lt;/code&gt; 说明在代码提交和代码合并时会触发。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;jobs&lt;/code&gt; 代表一个任务，一个 Actions workflows 可以有多个 &lt;code&gt;jobs&lt;/code&gt; 构成。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;runs-on&lt;/code&gt; 指定运行 Actions 的系统环境，这里是 &lt;code&gt;ubuntu&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;steps&lt;/code&gt; 代表当前 &lt;code&gt;jobs&lt;/code&gt; 任务的执行步骤。示例里先检出了仓库，然后&lt;code&gt;echo&lt;/code&gt; 了几个字符串。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保存提交这个文件到仓库，因为配置里配置了触发机制有 &lt;code&gt;push&lt;/code&gt;，所以这时也会触发这个任务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6966666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUqttAxqhErVyGjd20Uq7Ckiby9G75OzheOJgdDPyFgNHkPquxyQIjamQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;Github Actions&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Github Actions 定时抓取必应壁纸&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;已经简单体验了 Github Actions 的使用方式，还记得我们上面编写了一个简单的必应壁纸 Java 版爬虫吗？如果我们把爬虫代码提交到仓库，然后使用 Github Actions 功能定时检出仓库运行 Java 代码抓取壁纸，再写入壁纸到仓库，一套下来无服务器零成本岂不是很好？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先直接附上写好的 Github 仓库地址：https://github.com/niumoo/bing-wallpaper ，已经可以每天自动抓取当天必应壁纸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是关于 Actions 内容的一些说明。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# This workflow will build a Java project with Maven&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Java&lt;/span&gt; &lt;span&gt;CI&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; &lt;span&gt;Maven&lt;/span&gt;&lt;br/&gt;&lt;span&gt;on:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;schedule:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 定时执行，Runs at 17:00 UTC every day&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;cron:&lt;/span&gt;  &lt;span&gt;&#x27;0 17 * * *&#x27;&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;&lt;span&gt;jobs:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;build:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;runs-on:&lt;/span&gt; &lt;span&gt;ubuntu-latest&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;steps:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;uses:&lt;/span&gt; &lt;span&gt;actions/checkout@v2&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Set&lt;/span&gt; &lt;span&gt;up&lt;/span&gt; &lt;span&gt;JDK&lt;/span&gt; &lt;span&gt;1.8&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;uses:&lt;/span&gt; &lt;span&gt;actions/setup-java@v1&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;with:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;java-version:&lt;/span&gt; &lt;span&gt;1.8&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Build&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; &lt;span&gt;Maven&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;mvn&lt;/span&gt; &lt;span&gt;-B&lt;/span&gt; &lt;span&gt;package&lt;/span&gt; &lt;span&gt;--file&lt;/span&gt; &lt;span&gt;pom.xml&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Run&lt;/span&gt; &lt;span&gt;Java&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;java&lt;/span&gt; &lt;span&gt;-jar&lt;/span&gt; &lt;span&gt;target/bing-wallpaper-jar-with-dependencies.jar&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Commit&lt;/span&gt; &lt;span&gt;files&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;run:&lt;/span&gt; &lt;span&gt;|&lt;br/&gt;         git config --local user.email &quot;your_github_email@126.com&quot;&lt;br/&gt;         git config --local user.name &quot;your_github_name&quot;&lt;br/&gt;         git add README.md&lt;br/&gt;         git commit -m &quot;update readme.md&quot;&lt;br/&gt;&lt;/span&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;Push&lt;/span&gt; &lt;span&gt;changes&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;uses:&lt;/span&gt;  &lt;span&gt;ad-m/github-push-action@master&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;with:&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;github_token:&lt;/span&gt; &lt;span&gt;${{&lt;/span&gt; secrets.MY_GIT_TOKEN }}&lt;br/&gt;         &lt;span&gt;branch:&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置中定时在每天 UTC 时间 17 点运行一次，从 &lt;code&gt;steps&lt;/code&gt; 可以看到执行步骤。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;检出代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设置 Java 环境为 JDK 1.8.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;maven 编译打包。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运行打包后的 Java 程序（程序中把获取到的壁纸写入到了 README.md 文件）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提交文件到 Github 仓库。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置中最后还使用了一个参数 &lt;code&gt;{{ secrets.MY_GIT_TOKEN }}&lt;/code&gt; ,这是一个用于识别是否有提交 Github权限的密文，这个密文可以在 Github 网站 -&amp;gt; 点击头像 -&amp;gt; Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens 这里创建，或者直接访问 https://github.com/settings/tokens/new 创建，创建时勾选 &lt;code&gt;repo&lt;/code&gt; 权限。保存后可以得到你的密文。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUmFc4htibH8jqX8R5J6OSqmicQlaYgMXQJ6lG1ChNm1tC5S537OTFShhQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;Github personal access tokens&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复制这串密文，配置到自己创建 Actions 的仓库。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUF4H9g3Y0EXAPZt4fVs4Id1Z0IH1wFB3DzibA0EfvKrwwE9T9OAvLkIA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;Github Actions Secrets&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，仓库和配置都已经完成，每天自动抓取必应首页壁纸写入到 README.md 文件，下图是抓取的效果。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.74&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/4lfok2icUkibSapIINibQgyjIvpmebibOiacUZYiaOwPibWzT6NDiajaELoF3qbSECcStngfm4X7uBJvtPADJDB7AWanFg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1500&quot;/&gt;&lt;figcaption&gt;bing-wallpaper&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Github 仓库地址：https://github.com/niumoo/bing-wallpaper 。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[1] https://docs.github.com/en/actions/quickstart&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[2] https://github.com/niumoo/bing-wallpaper&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9ffabedfb22ac3f152d5753c34acfff4</guid>
<title>中间件：ES 组件 RestHighLevelClient 用法详解</title>
<link>https://toutiao.io/k/wg6y6kz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;一、基础API简介&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、RestHighLevelClient&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;RestHighLevelClient的API作为ElasticSearch备受推荐的客户端组件，其封装系统操作ES的方法，包括索引结构管理，数据增删改查管理，常用查询方法，并且可以结合原生ES查询原生语法，功能十分强大。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4351535836177474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBl7UtOYPv8ibwXicIu6E3y2A98mOf0PURJicnbFjj2OcAy63vBxlnkFOWrTialibmFJY2zlMjvEXCInAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;/p&gt;&lt;p&gt;在使用RestHighLevelClient的语法时，通常涉及上面几个方面，在掌握基础用法之上可以根据业务特点进行一些自定义封装，这样可以更优雅的解决业务需求。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、核心依赖&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;使用RestHighLevelClient需要依赖&lt;code&gt;rest-high-level-client&lt;/code&gt;包，和ES相关基础依赖。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.elasticsearch&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;elasticsearch&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;elasticsearch-rest-client&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;二、索引管理&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;这里不做过多描述，注意一点：因为ES的数据结构特点，所以不需要索引更新方法，新的字段在更新数据时直接写入即可，不需要提前更新索引结构。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EsIndexOperation&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RestHighLevelClient client ;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; RequestOptions options = RequestOptions.DEFAULT;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 判断索引是否存在&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;checkIndex&lt;/span&gt; &lt;span&gt;(String index)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; client.indices().exists(&lt;span&gt;new&lt;/span&gt; GetIndexRequest(index), options);&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 创建索引&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;createIndex&lt;/span&gt; &lt;span&gt;(String indexName ,Map&amp;lt;String, Object&amp;gt; columnMap)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(!checkIndex(indexName)){&lt;br/&gt;                CreateIndexRequest request = &lt;span&gt;new&lt;/span&gt; CreateIndexRequest(indexName);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (columnMap != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; columnMap.size()&amp;gt;&lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;                    Map&amp;lt;String, Object&amp;gt; source = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;                    source.put(&lt;span&gt;&quot;properties&quot;&lt;/span&gt;, columnMap);&lt;br/&gt;                    request.mapping(source);&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.client.indices().create(request, options);&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; Boolean.TRUE ;&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 删除索引&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;deleteIndex&lt;/span&gt;&lt;span&gt;(String indexName)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(checkIndex(indexName)){&lt;br/&gt;                DeleteIndexRequest request = &lt;span&gt;new&lt;/span&gt; DeleteIndexRequest(indexName);&lt;br/&gt;                AcknowledgedResponse response = client.indices().delete(request, options);&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; response.isAcknowledged();&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;三、数据管理&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;这里在更新数据时，可以直接修改索引结构，在dataMap中放进新的字段即可。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EsDataOperation&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RestHighLevelClient client ;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; RequestOptions options = RequestOptions.DEFAULT;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 写入数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;(String indexName, Map&amp;lt;String,Object&amp;gt; dataMap)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            BulkRequest request = &lt;span&gt;new&lt;/span&gt; BulkRequest();&lt;br/&gt;            request.add(&lt;span&gt;new&lt;/span&gt; IndexRequest(indexName,&lt;span&gt;&quot;doc&quot;&lt;/span&gt;).id(dataMap.remove(&lt;span&gt;&quot;id&quot;&lt;/span&gt;).toString())&lt;br/&gt;                    .opType(&lt;span&gt;&quot;create&quot;&lt;/span&gt;).source(dataMap,XContentType.JSON));&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.client.bulk(request, options);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Boolean.TRUE ;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 批量写入数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;batchInsert&lt;/span&gt; &lt;span&gt;(String indexName, List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; userIndexList)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            BulkRequest request = &lt;span&gt;new&lt;/span&gt; BulkRequest();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (Map&amp;lt;String,Object&amp;gt; dataMap:userIndexList){&lt;br/&gt;                request.add(&lt;span&gt;new&lt;/span&gt; IndexRequest(indexName,&lt;span&gt;&quot;doc&quot;&lt;/span&gt;).id(dataMap.remove(&lt;span&gt;&quot;id&quot;&lt;/span&gt;).toString())&lt;br/&gt;                        .opType(&lt;span&gt;&quot;create&quot;&lt;/span&gt;).source(dataMap,XContentType.JSON));&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.client.bulk(request, options);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Boolean.TRUE ;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 更新数据，可以直接修改索引结构&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; &lt;span&gt;(String indexName, Map&amp;lt;String,Object&amp;gt; dataMap)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            UpdateRequest updateRequest = &lt;span&gt;new&lt;/span&gt; UpdateRequest(indexName,&lt;span&gt;&quot;doc&quot;&lt;/span&gt;, dataMap.remove(&lt;span&gt;&quot;id&quot;&lt;/span&gt;).toString());&lt;br/&gt;            updateRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);&lt;br/&gt;            updateRequest.doc(dataMap) ;&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.client.update(updateRequest, options);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Boolean.TRUE ;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 删除数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;(String indexName, String id)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            DeleteRequest deleteRequest = &lt;span&gt;new&lt;/span&gt; DeleteRequest(indexName,&lt;span&gt;&quot;doc&quot;&lt;/span&gt;, id);&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.client.delete(deleteRequest, options);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Boolean.TRUE ;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Boolean.FALSE;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;四、查询操作&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;注意：查询总数的CountRequest语法，SearchRequest查询结果中数据转换语法，分页查询中需要指定偏移位置和分页大小。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;public &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EsQueryOperation&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    private RestHighLevelClient client ;&lt;br/&gt;    private &lt;span&gt;final&lt;/span&gt; RequestOptions options = RequestOptions.DEFAULT;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 查询总数&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    public Long count (&lt;span&gt;String&lt;/span&gt; indexName){&lt;br/&gt;        &lt;span&gt;// 指定创建时间&lt;/span&gt;&lt;br/&gt;        BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();&lt;br/&gt;        queryBuilder.must(QueryBuilders.termQuery(&lt;span&gt;&quot;createTime&quot;&lt;/span&gt;, &lt;span&gt;1611378102795&lt;/span&gt;L));&lt;br/&gt;&lt;br/&gt;        SearchSourceBuilder sourceBuilder = &lt;span&gt;new&lt;/span&gt; SearchSourceBuilder();&lt;br/&gt;        sourceBuilder.query(queryBuilder);&lt;br/&gt;&lt;br/&gt;        CountRequest countRequest = &lt;span&gt;new&lt;/span&gt; CountRequest(indexName);&lt;br/&gt;        countRequest.source(sourceBuilder);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            CountResponse countResponse = client.count(countRequest, options);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; countResponse.getCount();&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;L;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 查询集合&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    public &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; list (&lt;span&gt;String&lt;/span&gt; indexName) {&lt;br/&gt;        &lt;span&gt;// 查询条件,指定时间并过滤指定字段值&lt;/span&gt;&lt;br/&gt;        SearchSourceBuilder sourceBuilder = &lt;span&gt;new&lt;/span&gt; SearchSourceBuilder();&lt;br/&gt;        BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();&lt;br/&gt;        queryBuilder.must(QueryBuilders.termQuery(&lt;span&gt;&quot;createTime&quot;&lt;/span&gt;, &lt;span&gt;1611378102795&lt;/span&gt;L));&lt;br/&gt;        queryBuilder.mustNot(QueryBuilders.termQuery(&lt;span&gt;&quot;name&quot;&lt;/span&gt;,&lt;span&gt;&quot;北京-李四&quot;&lt;/span&gt;));&lt;br/&gt;        sourceBuilder.query(queryBuilder);&lt;br/&gt;        SearchRequest searchRequest = &lt;span&gt;new&lt;/span&gt; SearchRequest(indexName);&lt;br/&gt;        searchRequest.source(sourceBuilder);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            SearchResponse searchResp = client.search(searchRequest, options);&lt;br/&gt;            &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; data = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;() ;&lt;br/&gt;            SearchHit[] searchHitArr = searchResp.getHits().getHits();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (SearchHit searchHit:searchHitArr){&lt;br/&gt;                &lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt; temp = searchHit.getSourceAsMap();&lt;br/&gt;                temp.put(&lt;span&gt;&quot;id&quot;&lt;/span&gt;,searchHit.getId()) ;&lt;br/&gt;                data.add(temp);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 分页查询&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    public &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; page (&lt;span&gt;String&lt;/span&gt; indexName,Integer offset,Integer size) {&lt;br/&gt;        &lt;span&gt;// 查询条件,指定时间并过滤指定字段值&lt;/span&gt;&lt;br/&gt;        SearchSourceBuilder sourceBuilder = &lt;span&gt;new&lt;/span&gt; SearchSourceBuilder();&lt;br/&gt;        sourceBuilder.from(offset);&lt;br/&gt;        sourceBuilder.size(size);&lt;br/&gt;        sourceBuilder.sort(&lt;span&gt;&quot;createTime&quot;&lt;/span&gt;, SortOrder.DESC);&lt;br/&gt;        SearchRequest searchRequest = &lt;span&gt;new&lt;/span&gt; SearchRequest(indexName);&lt;br/&gt;        searchRequest.source(sourceBuilder);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            SearchResponse searchResp = client.search(searchRequest, options);&lt;br/&gt;            &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt;&amp;gt; data = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;() ;&lt;br/&gt;            SearchHit[] searchHitArr = searchResp.getHits().getHits();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (SearchHit searchHit:searchHitArr){&lt;br/&gt;                &lt;span&gt;Map&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;,&lt;span&gt;Object&lt;/span&gt;&amp;gt; temp = searchHit.getSourceAsMap();&lt;br/&gt;                temp.put(&lt;span&gt;&quot;id&quot;&lt;/span&gt;,searchHit.getId()) ;&lt;br/&gt;                data.add(temp);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;五、排序方式&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;排序除了常规的指定字段升序降序规则之外，还可以基于原生的脚本语法，基于自定义规则排序让一些特定的数据沉底或者置顶。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EsSortOperation&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RestHighLevelClient client ;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; RequestOptions options = RequestOptions.DEFAULT;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 排序规则&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; sort (String indexName) {&lt;br/&gt;        &lt;span&gt;// 先升序时间，在倒序年龄&lt;/span&gt;&lt;br/&gt;        SearchSourceBuilder sourceBuilder = &lt;span&gt;new&lt;/span&gt; SearchSourceBuilder();&lt;br/&gt;        sourceBuilder.sort(&lt;span&gt;&quot;createTime&quot;&lt;/span&gt;, SortOrder.ASC);&lt;br/&gt;        sourceBuilder.sort(&lt;span&gt;&quot;age&quot;&lt;/span&gt;,SortOrder.DESC) ;&lt;br/&gt;        SearchRequest searchRequest = &lt;span&gt;new&lt;/span&gt; SearchRequest(indexName);&lt;br/&gt;        searchRequest.source(sourceBuilder);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            SearchResponse searchResp = client.search(searchRequest, options);&lt;br/&gt;            List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; data = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;() ;&lt;br/&gt;            SearchHit[] searchHitArr = searchResp.getHits().getHits();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (SearchHit searchHit:searchHitArr){&lt;br/&gt;                Map&amp;lt;String,Object&amp;gt; temp = searchHit.getSourceAsMap();&lt;br/&gt;                temp.put(&lt;span&gt;&quot;id&quot;&lt;/span&gt;,searchHit.getId()) ;&lt;br/&gt;                data.add(temp);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 自定义排序规则&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; defSort (String indexName) {&lt;br/&gt;        &lt;span&gt;// 指定置换顺序的规则&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// [age 12--&amp;gt;60]\[age 19--&amp;gt;10]\[age 13--&amp;gt;30]\[age 18--&amp;gt;40],age其他值忽略为1&lt;/span&gt;&lt;br/&gt;        Script script = &lt;span&gt;new&lt;/span&gt; Script(&lt;span&gt;&quot;def _ageSort = doc[&#x27;age&#x27;].value == 12?60:&quot;&lt;/span&gt; +&lt;br/&gt;                                                            &lt;span&gt;&quot;(doc[&#x27;age&#x27;].value == 19?10:&quot;&lt;/span&gt; +&lt;br/&gt;                                                            &lt;span&gt;&quot;(doc[&#x27;age&#x27;].value == 13?30:&quot;&lt;/span&gt; +&lt;br/&gt;                                                            &lt;span&gt;&quot;(doc[&#x27;age&#x27;].value == 18?40:1)));&quot;&lt;/span&gt; + &lt;span&gt;&quot;_ageSort;&quot;&lt;/span&gt;);&lt;br/&gt;        ScriptSortBuilder sortBuilder = SortBuilders.scriptSort(script,ScriptSortBuilder.ScriptSortType.NUMBER);&lt;br/&gt;        sortBuilder.order(SortOrder.ASC);&lt;br/&gt;        SearchSourceBuilder sourceBuilder = &lt;span&gt;new&lt;/span&gt; SearchSourceBuilder();&lt;br/&gt;        sourceBuilder.sort(sortBuilder);&lt;br/&gt;        SearchRequest searchRequest = &lt;span&gt;new&lt;/span&gt; SearchRequest(indexName);&lt;br/&gt;        searchRequest.source(sourceBuilder);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            SearchResponse searchResp = client.search(searchRequest, options);&lt;br/&gt;            List&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; data = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;() ;&lt;br/&gt;            SearchHit[] searchHitArr = searchResp.getHits().getHits();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (SearchHit searchHit:searchHitArr){&lt;br/&gt;                Map&amp;lt;String,Object&amp;gt; temp = searchHit.getSourceAsMap();&lt;br/&gt;                temp.put(&lt;span&gt;&quot;id&quot;&lt;/span&gt;,searchHit.getId()) ;&lt;br/&gt;                data.add(temp);&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            e.printStackTrace();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;六、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/data-manage-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/data-manage-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>