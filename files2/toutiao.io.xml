<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>903246a6473a01ee1e71e4c4a5e5ecb1</guid>
<title>Really? ! 1 个人就能抵 1 个团队，真能秒杀IDEA？</title>
<link>https://toutiao.io/k/76alg5z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;preview&quot;&gt;&lt;p&gt;1、背景&lt;/p&gt;

&lt;p&gt;最近，看了一个比较有意思的产品发布会，也听了各位大佬、专家的发言，比如：大卫·帕特森、倪光南院士、石勇院士等，收获良多，这里给大家分享下。&lt;/p&gt;

&lt;p&gt;会上定义了 &quot;一人一项目&quot; 的软件开发新模式，即 “一个人” 全栈解决：前端开发、后端开发、测试、运维，我们平时所说的全栈工程师是指熟悉各种前后端开发技能并能独立完成工作，而这里的全栈居然还干掉了测试、运维，这太了不起了。。&lt;/p&gt;

&lt;p&gt;一人一项目，其实这个概念我们并不陌生，在我们平时开发工作中可能也会遇到，比如说你进了一家小公司，老板让你一个人搞定一个项目，你可能同时要负责前端、后端、测试、运维，如果时间很紧，全部都要自己来，想想也要疯了，但很多时候也是身不由己。&lt;/p&gt;

&lt;p&gt;上面我说的这种情况是真实存在的，并不少见，即使 1 个人能完成 10 个人的工作，实际上也是花掉了 10 个人的时间而已，相比于 10 个人来共同完成，那效率差是显而易见的，相当于以更长的时间换更少的人力成本。&lt;/p&gt;

&lt;p&gt;而在这个软件机器人发布会上，让我见识到了什么是真正的 &quot;一人一项目&quot;：&lt;/p&gt;

&lt;p&gt;一人一项目，十人抵百人&lt;/p&gt;

&lt;p&gt;一“人”全栈解决：前端开发、后端开发、测试、运维&lt;/p&gt;

&lt;p&gt;1 人能抵 10 人，10 人就能抵 100 人，如果真有这么厉害，这样不仅能省去 10 倍以上的人力成本，还能在整体研发效率上领先 10 倍以上，还不用维护庞大技术团队，省下来的成本就更多了。&lt;/p&gt;

&lt;p&gt;2、软件机器人&lt;/p&gt;

&lt;p&gt;2.1 基本介绍&lt;/p&gt;

&lt;p&gt;据官网介绍，这款软件机器人是全球首款面向微服务架构设计和最佳实践的软件机器人，之所以叫软件机器人，我觉得肯定是少了很多人为的参与部分，栈长了解了下，它主要涉及了以下几个技术平台：&lt;/p&gt;

&lt;p&gt;· （前端）全自动开发平台&lt;/p&gt;

&lt;p&gt;· （后端）全自动开发平台&lt;/p&gt;

&lt;p&gt;· 全自动测试平台&lt;/p&gt;

&lt;p&gt;· 全自动运维平台&lt;/p&gt;

&lt;p&gt;原来，是通过这几个平台打通了开发 -&amp;gt; 测试-&amp;gt; 运维的桥梁。&lt;/p&gt;

&lt;p&gt;我们来看下这款软件机器人的生产流程：
&lt;img src=&quot;https://img.toutiao.io/attachment/5ffafa48bb97412cb86873e3a10fe400/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以看到，这款软件机器人集成了 CMMI、敏捷开发、DevOps 等所有管理模式，也整合了主流互联网架构经验，从而大大降低了整个软件开发的门槛，也改变了我们传统的软件工程作业模式。&lt;/p&gt;

&lt;p&gt;这个软件机器人形成一套自动化流水线（工具化、标准化、自动化流程），真正进入了从 &quot;人治&quot; 到 &quot;法治&quot; 的软件开发管理新模式，有助于我们解决传统软件工程的各种疑难问题，大大解放了我们程序员的双手。&lt;/p&gt;

&lt;p&gt;2.2 功能亮点&lt;/p&gt;

&lt;p&gt;说了这么多，栈长也有点迫不及待想体验下这款软件机器人的厉害了，一起来瞧瞧下这个软件机器人有什么亮点吧！&lt;/p&gt;

&lt;p&gt;2.2.1 （前端）全自动开发平台&lt;/p&gt;

&lt;p&gt;这是一个全新的前端低代码开发工具，多终端兼容，包括微信小程序、微信公众号、企业微信、web、H5、IOS、Android 等，下面是亮点介绍。&lt;/p&gt;

&lt;p&gt;支持可视化开发模式，快速开发前端界面交互：
&lt;img src=&quot;https://img.toutiao.io/attachment/4d567b08c5cd4b379cc24231fbbb16ef/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;丰富的页面控件、模板库，支持自定义页面开发，无业务场景限制：
&lt;img src=&quot;https://img.toutiao.io/attachment/9777cc9898204a6c85c759de3c419428/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;简化后端接口数据联调，降低联调成本：
&lt;img src=&quot;https://img.toutiao.io/attachment/3e645a42f27d4a57ac8cd59d9a5c2e20/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;支持生成前端部署包，快速实现应用项目私有化部署：
&lt;img src=&quot;https://img.toutiao.io/attachment/6724b067148c44cab2eaac1d09853460/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一次解决前端开发人员各种前端技能学习成本高、开发效率低、产出效果差等问题，这个全新前端开发平台太香了。&lt;/p&gt;

&lt;p&gt;2.2.2 （后端）全自动开发平台&lt;/p&gt;

&lt;p&gt;这是新一代的 Java 开发工具，下面是亮点介绍。&lt;/p&gt;

&lt;p&gt;一键创建基于微服务架构的后端系统，无需复杂环境、依赖配置，极大降低架构搭建门槛：
&lt;img src=&quot;https://img.toutiao.io/attachment/9f18b2d01aaf4f7aa9e112b7a9d76f9b/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可视化组件拖拽开发，可编写复杂代码的业务逻辑，且业务逻辑清晰、灵活、维护性较强：
&lt;img src=&quot;https://img.toutiao.io/attachment/77232c3511c84068a93f22db71744844/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;自动生成接口与 SQL 语句，大大提升开发效率：
&lt;img src=&quot;https://img.toutiao.io/attachment/099fed69dbc2474ba41c0c46b4b9dda6/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接口与配置参数快速创建，提供灵活的参数配置及验证，轻松实现接口 Mock 配置：
&lt;img src=&quot;https://img.toutiao.io/attachment/6a9f996379c340578de93b7d179ebfd4/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;快速测试，定义不同测试场景并执行查看返回结果：&lt;/p&gt;

&lt;p&gt;高效调试，可视化调试结果，快速定位问题，告别 Debug 逐行调试定位问题：
&lt;img src=&quot;https://img.toutiao.io/attachment/dd88d1b80f914cd28a871fc807d16d5e/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;另外，还支持项目导入、导出、定时任务页面配置化、参数录入检索功能，一个平台搞定 Java 后端开发，这个新一代 Java 开发工具太香了。&lt;/p&gt;

&lt;p&gt;2.2.3 全自动测试平台&lt;/p&gt;

&lt;p&gt;这是新一代的全自动测试平台，高效测试，高质量保证，下面是亮点介绍。&lt;/p&gt;

&lt;p&gt;测试生命周期管理：
&lt;img src=&quot;https://img.toutiao.io/attachment/4af8685443eb4b41b8b785312060d4e8/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;提供测试用例管理、测试用例评审、测试计划跟踪、测试报告生成等测试生命周期管理相关功能。&lt;/p&gt;

&lt;p&gt;测试用例自动生成：
&lt;img src=&quot;https://img.toutiao.io/attachment/6f7ae389298e4e4eaf377fd9a472e85f/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;用户通过录制工具把操作过程记录下来，平台自动识别相关的接口并创建相应的测试用例场景。&lt;/p&gt;

&lt;p&gt;测试数据管理：
&lt;img src=&quot;https://img.toutiao.io/attachment/1ccb65e707484e1f9b44588ea14d063f/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;基于测试脚本与测试数据分离的思路，方便研发测试协同、方便自动化测试中的测试数据使用，支持在UI、接口等自动化工具中快速可重复地使用。&lt;/p&gt;

&lt;p&gt;精准回归测试：
&lt;img src=&quot;https://img.toutiao.io/attachment/2369f2444efd4836981f77995ddaf55d/w600&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;

&lt;p&gt;项目测试时自动识别所有变动的接口，自动查找接口关联的所有测试用例进行精准回归测试。&lt;/p&gt;

&lt;p&gt;六大功能点，测试流程轻松赋能，初学者可轻松上手，方便维护，大大降低测试门槛，提高测试效率，这个全自动测试平台真的太香了。&lt;/p&gt;

&lt;p&gt;2.2.4 全自动运维平台&lt;/p&gt;

&lt;p&gt;目前这个平台官方暂未上线，静候佳音吧！&lt;/p&gt;

&lt;p&gt;但我相信，有了这个全自动运维平台，我们 Java 开发人员搞定运维也能游刃有余，比如：&lt;/p&gt;

&lt;p&gt;· 再也不用面对各种复杂的命令、环境、参数配置、问题排查等；&lt;/p&gt;

&lt;p&gt;· 项目能全自动代码管理、编译、打包、部署、升级、扩容等；&lt;/p&gt;

&lt;p&gt;· 在系统性能、漏洞、安全方面能有足够的应对能力；&lt;/p&gt;

&lt;p&gt;3、总结&lt;/p&gt;

&lt;p&gt;在上面介绍了这款软件机器人 的 4 大平台，来总结下优势吧：&lt;/p&gt;

&lt;p&gt;· 前端平台： 可视化开发、多终端兼容、丰富的组件/模板库、灵活数据对接、可私有化部署；&lt;/p&gt;

&lt;p&gt;· 后端平台： 可轻松构建微服务架构、可视化开发、组件丰富、自动生成接口和 SQL、快速测试、高效调试；&lt;/p&gt;

&lt;p&gt;· 测试平台： 测试生命周期管理、测试用例自动生成、测试数据管理、精准回归测试；&lt;/p&gt;

&lt;p&gt;· 运维平台： 轻松搞定系统运维；&lt;/p&gt;

&lt;p&gt;有没有感觉很惊艳？！&lt;/p&gt;

&lt;p&gt;这款机器人叫“SoFlu 软件机器人”，&lt;/p&gt;

&lt;p&gt;一人可抵十人用，十人可抵百人用，有了这个，现在只要一个人，不到 30 分钟，就可以完成以前 3 个资深 IT 工程师，近 2 个小时的开发工作量！&lt;/p&gt;

&lt;p&gt;这才是真正的一人一项目，还是真正的全栈工程师。只需要一个人，不仅仅是前端、后端，而是测试、运维也能轻松搞定，是真的强。&lt;/p&gt;

&lt;p&gt;看到这，你可能觉得这机器人是要干掉程序员了？也未必，毕竟这个机器人本身也是程序员造出来的，而且也需要不断技术更新和迭代，它是不会干掉程序员，但可以快速解决大部分企业的需求。&lt;/p&gt;

&lt;p&gt;有了它，八个再也不用担心：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;再也不用担心各种试错成本……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心技术人员紧缺了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心项目进度慢了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心混乱的技术体系了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心代码烂不好维护了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心 bug 不好调试了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心技术团队难管理了……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再也不用担心技术人员删库跑路了……&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SoFlu 软件机器人使用统一的平台，统一的标准和流程，告别各种复杂的技术栈和学习成本，上手还容易，方便维护，对于企业来说，最重要的是节约了大量人力成本（10 人抵 100 人），在进度和质量方面还能得到保障。&lt;/p&gt;

&lt;p&gt;个人觉得是这个软件机器人是真强，能轻松完成软件开发和管理项目，让团队变得更简单、高效，省钱又省心，真香！！&lt;/p&gt;

&lt;p&gt;说了这么多，我也是研究了个基本皮毛，更多的功能和细节，感兴趣的都可以上去体验看看，真是一个打破认知的软件机器人！&lt;/p&gt;

&lt;p&gt;你怎么看这个软件机器人？&lt;/p&gt;

&lt;p&gt;最后附上 SoFlu 软件机器人官网链接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://feisuanyz.com/&quot;&gt;https://feisuanyz.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;戳原文，直达官网！&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96965e31d1038184e073d12215e4462a</guid>
<title>B站 API 网关的发展</title>
<link>https://toutiao.io/k/1qdkfk1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;本期作者&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFzlGW8icicjNHzVuREbmtUiaFEG70CahXBic6rCh6CN8icC1bm9yEmBETiapLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;周佳辉&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哔哩哔哩资深开发工程师&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;2017 年加入 B 站，先后从事账号、网关、基础库等开发工作。编码 C/V 技能传授者，技术文档背诵者。&lt;/p&gt;&lt;p&gt;开源社区爱好者，安全技术爱好者，云计算行业活跃用户，网络工程熟练工。史诗级 bug 生产者，熟练掌握 bug 产生的各类场景。&lt;/p&gt;&lt;p&gt;始终以简单为核心设计理念，追求极致简单有效的后端架构。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;如果你在 2015 年就使用 B 站，那么你一定不会忘记那一年 B 站工作日选择性崩溃，周末必然性崩溃的一段时间。也是那一年 B 站投稿量激增，访问量随之成倍上升，而过去的 PHP 全家桶也开始逐渐展露出颓势，运维难、监控难、排查故障难、调用路径深不见底，而也就是在这一年，B 站开始正式用 Go 重构 B 站。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;B站第一个 Go 项目：bilizone 由冠冠老师（一个周末）编码完成。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;commit &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;ccb1497ca6d94cec0ea1b2555dd1859e6f4f223&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Author: felixhao &amp;lt;g******&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;@gmail.com&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Date:   Wed Jul &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;55&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2015&lt;/span&gt; +&lt;span class=&quot;code-snippet__number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    project init&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;commit &lt;span class=&quot;code-snippet__number&quot;&gt;6e338&lt;/span&gt;bc0ee638621e01918adb183747cf2a9e567&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Author: 郝冠伟 &amp;lt;h*******@bilibili.com&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Date:   Wed Jul &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2015&lt;/span&gt; +&lt;span class=&quot;code-snippet__number&quot;&gt;0800&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    readme&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;bilizone 其实还是一个大而全的应用，bilizone 在当时重构的主要意义是将谁也理不清的 PHP 逻辑梳理成了一个比较标准的 Go 应用。&lt;/p&gt;&lt;p&gt;bilizone 在当时最大的意义就是为用户终端提供了基本稳定的数据结构、相对可靠的接口和比较有效的监控。但因 bilizone 依旧是一个单体应用，所以它依旧继承了单体应用所具有的缺点：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;所以此时B站的崩溃频率虽然已经有所降低，但一炸全炸的问题依旧是一个心腹大患。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;而再接下来的一次重构，B站微服务的全局面貌就将初具雏形。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;为了实现微服务模式下的 bilibili，我们将一个 bilizone 应用拆分成多个独立业务应用，如账号、稿件、广告等等，这些业务通过 SLB 直接对外提供 API。&lt;/p&gt;&lt;p&gt;当时的调用模式如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFz1pkcicwAG4ia177O9gwlEvTmY3myicYeRqQ83stJ5ZQzJxYP0oDCsG9icA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;但是随着功能拆分后，我们对外暴露了一批微服务，但是因为缺乏统一的出口而面临了不少困难：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;基于上述问题和我们想要将对端的处理进行内聚的想法，我们自然的而然的就想到在客户端与后端服务之间加一个 app-interface 的组件，这就是接下来的 BFF（Backend for Frontend）模式。&lt;/p&gt;&lt;p&gt;app-interface 的工作模式如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0833333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFzKrHzhOu5fDv8NZVuDQ1DXxBgW2AGpvWiaRAfLicQpYicQm4Ws6RIbEUow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;有了这个 BFF 之后，我们可以在该服务内进行大量的数据聚合，按照业务场景来设计粗粒度的 API，给后续服务的演进带来的很多优势：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;BFF 可以认为是一种适配服务，将后端的微服务为客户端的需要进行适配（主要包括聚合裁剪和格式适配等逻辑），向终端设备暴露友好和统一的 API，方便无线设备接入访问后端服务，在其中可能还伴随有埋点、日志、统计等需求。&lt;/p&gt;&lt;p&gt;这个时期的 BFF 还有一个致命的一个问题是整个 app-interface 属于 single point of failure，严重代码缺陷或者流量洪峰可能引发集群宕机所有接口不可用。于是我们在上述基础上进一步迭代，将 app-interface 进行业务拆分，进而多套 BFF 的模式横空出世：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0824074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFzlnE8Vtx4Liafo5fjibicffu02t0ooq9MrNiaK5xlWjT9gmzRhIMZ3883Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由此模式开始，基本确定了 B 站微服务接口的对接模式，这套模式也随之在全公司内推广开来。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;垂直 BFF 时代 2016-2019&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;接上文当 B 站网关的架构发展为多套垂直 BFF 之后，开发团队围绕该模式平稳迭代了相当长的一段时间。而后随着B站业务的发展，团队人员的扩充和几次组织架构调整，此时开始出现直播、电商等独立业务，这些业务的发展我们之后再细说。而在这些调整之后，有一个团队的职责越来越清晰：主站网关组。&lt;/p&gt;&lt;p&gt;主站网关组的主要职责就是维护上述各类功能的 BFF 网关，此时 bilibili 的主要流量入口为粉板 App，这里可以简单细说一下粉板 App 上的所有业务组成：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;主站业务&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;网关组维护的 BFF，如推荐、稿件播放页等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;业务层自行维护的 BFF，如评论、弹幕、账号等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;独立业务&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;主站业务的 BFF 其实被分为两类，一类是由网关组负责的 BFF，另一类是业务自行维护的 BFF。&lt;/p&gt;&lt;p&gt;而这两类 BFF 的技术栈其实基本一致，基本功能职责也相差不多，如此划分的原因是让网关组可以更专注于迭代客户端特性功能，免去理解部分独立业务场景的接口，如登陆页应该让对安全更专业账号的同学自行维护。在这里我们也可以简述一下一个新需求应该如何决定参与的 BFF ：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当时主站技术部的后端同学遵循以上两个规则，基本能够满足业务的快速开发和迭代。&lt;/p&gt;&lt;p&gt;我把这段时间称为垂直 BFF 时代，因为基本主站每个业务或多或少都有各种形式的网关存在，大家通过这个网关向外提供接口，该网关和 SLB 进行直接交互。 &lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;再谈一谈电商、直播和动态&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;电商和直播其实并不是同一时期衍生的，直播在主站 PHP 时期就诞生了，而电商相对更晚一些。&lt;/p&gt;&lt;p&gt;当时直播的技术栈组成有 C++、PHP、Go，其中早期大部分业务逻辑由 PHP 和 C++ 实现，稍晚一些也开始逐步试用主站的 Go 实现部分业务逻辑。其中 PHP 负责对终端提供接口，C++ 主要实现核心业务功能。因此我们可以简单理解为直播使用由 PHP 编写的 BFF 网关。&lt;/p&gt;&lt;p&gt;动态团队其实派生自直播团队，因此技术栈和直播当时基本一致，这里可以简单省略。&lt;/p&gt;&lt;p&gt;而众所周知，大部分电商团队的技术栈都是 Java 和 Spring 或 Dubbo。&lt;/p&gt;&lt;p&gt;因这几个业务实现上几乎没有相似的地方，且大家对 gRPC 协议逐渐地认同，因此技术栈上大家基本没有大一统的想法，互相能调通即可。&lt;/p&gt;&lt;p&gt;而随着 B 站团队进一步的壮大、流量持续的增长，进而经历了诸多线上故障、事故分析之后，大家慢慢发现了这套架构下的问题：&lt;/p&gt;&lt;p&gt;此时我们可能还需要一个能协调横跨切面的组件，将路由、认证、限流、安全等组件全部上提，能够统一更新发布，把业务集成度高的 BFF 层和通用功能服务层进行分层，进而大家开始引入&lt;strong&gt;「统一 API 网关」&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0833333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFzRYd0bibEhatu8SkDYeerntYB8ia2JHPkpyVNZyWlHCIDrFaXZs1umJaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在新的架构中，统一网关承担了重要的角色，它是解耦拆分和后续升级迁移的利器。在统一网关的配合下，单块 BFF 实现了解耦拆分，各业务线团队可以独立开发和交付各自的微服务，研发效率大大提升。另外，把跨横切面逻辑从 BFF 剥离到网关上去以后，BFF 的开发人员可以更加专注业务逻辑交付，实现了架构上的关注分离（Separation of Concerns）。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;从多个网关到最后一个统一网关 2022-至今&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3759259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QME0n5gVWOCiac5K8ZClPFzX8OibpJtoRbNfw2xj36BcgMdJlicdjWG1kyCcuGx95cL7Oic2prYcTGrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在这两三年的时间里，各个业务团队或多或少都有自己业务网关组建独立的维护团队，也为网关的功能作出过相当多的投入。但随着 B 站业务的发展，公司级中间件功能的不断更替演进，如果将对接各个中间件的工作在每个网关上都实现一次的话带来的人力投入和沟通成本会相当巨大，且实现标准不统一、运营方式不统一无法起到 API 网关所带来的最佳收益。&lt;/p&gt;&lt;p&gt;因此微服务团队开发了一款 B 站内部意义上的标准 API 网关，该 API 网关汇集以往各型网关中流量治理的优秀经验，对相关功能做出完善设计改进。该 API 网关的目前的主要功能除了常规的限流、熔断、降级、染色外，还会基于这些基础功能和公司各类中间件的基础上，提供了：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;等等进阶型 API 质量治理的相关功能，这些功能业务团队在接入 API 网关后都可以一并获得，为业务的迅速迭代做出力所能及的保障。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;不仅仅是 API 网关&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在开发 API 网关的同时，我们也会更进一步关注业务团队开发、对接 API 时的体验，我们将以网关作为统一标准 API 规范的起点，为业务团队提供更有效的 API 开发生态，如：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;规划 API 业务域，简化 SRE 运维&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;标准 API 元信息平台&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;精确的 API 文档和调试工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型安全的 API 集成 SDK&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;API 兼容性保障服务&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;API 网关是我们 API 治理生态中的一个标志性里程碑，我们希望在 API 网关的开发中能够多多倾听大家的意见，希望能有更多的声音来帮助我们理清思路。本次 API 网关也以开源形式进行开发，在这里欢迎大家指导：https://github.com/go-kratos/gateway&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;END&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA4ODg0NDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbC53rq7PQziczkzCA4pIPx8Xdx2r0a6FgQWEicTOgFNY1KlJD3jSKQKlTiavwTUgHS1HMXza2RYApkDw/0?wx_fmt=png&quot; data-nickname=&quot;GoCN&quot; data-alias=&quot;golangchina&quot; data-signature=&quot;最具规模和生命力的 Go 开发者社区&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;-猜你想看-&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;想要了解Go更多内容，欢迎扫描下方👇 关注 公众号，回复关键词 [实战群]  ,就有机会进群和我们进行交流~&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5763688760806917&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbDrrBk1KBPqY1QNI320ZK2IIycDa77FcDQAeAFJRVb240xr8biceh23auy7ZpPibEYXPNOnmfsEewkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;分享、在看与点赞，至少我要拥有一个叭~&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-ratio=&quot;0.2106667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/vbERicIdYZbB79dKphkWU3rVKFiaZGWHEic0qXJ8QAeF6XRTLwTCEgUxxiamV13wPv9kMtaqrOtsrVibdHzvYiaxCwgA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-ratio=&quot;0.696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/vbERicIdYZbB79dKphkWU3rVKFiaZGWHEicOoCY9eHaUhZY0vkZibusOg9ibjGibicfyjHiaWfkN9QOiclK2DnfLh4KYTLA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e4a67b2489645d2697cdd64e578fc43e</guid>
<title>简化 Go 中对 JSON 的处理</title>
<link>https://toutiao.io/k/4bd3xnn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的第一个 Go 工程需要处理一堆 JSON 测试固件并把 JSON 数据作为参数传给我们搭建的 API 处理。另一个团队为了给 API 提供语言无关的、可预期的输入和输出，创建了这些测试固件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在强类型语言中，JSON 通常很难处理 —— JSON 类型有字符串、数字、字典和数组。如果你使用的语言是 javascript、python、ruby 或 PHP，那么 JSON 有一个很大的好处就是在解析和编码数据时你不需要考虑类型。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// &lt;span&gt;in&lt;/span&gt; PHP&lt;br/&gt;&lt;span&gt;$object&lt;/span&gt; = json_decode(&lt;span&gt;&#x27;{&quot;foo&quot;:&quot;bar&quot;}&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;// &lt;span&gt;in&lt;/span&gt; javascript&lt;br/&gt;const object = JSON.parse(&lt;span&gt;&#x27;{&quot;foo&quot;:&quot;bar&quot;}&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在强类型语言中，你需要自己去定义怎么处理 JSON 对象的字符串、数字、字典和数组。在 Go 语言中，你使用内建的 API 时需要考虑如何更好地把一个 JSON 文件转换成 Go 的数据结构。我不打算深入研究在 Go 中如何处理 JSON 这个复杂的话题，我只列出两个代码的例子来阐述下这个问题。源码详情请见 &lt;span&gt;Go 实例教程&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;解析/序列化为 map[string]interface&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，来看这个程序&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;    byt := []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;`{&lt;br/&gt;        &quot;num&quot;:6.13,&lt;br/&gt;        &quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;],&lt;br/&gt;        &quot;obj&quot;:{&quot;foo&quot;:{&quot;bar&quot;:&quot;zip&quot;,&quot;zap&quot;:6}}&lt;br/&gt;    }`&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; dat &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{}&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; err := json.Unmarshal(byt, &amp;amp;dat); err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;panic&lt;/span&gt;(err)&lt;br/&gt;    }&lt;br/&gt;    fmt.Println(dat)&lt;br/&gt;&lt;br/&gt;    num := dat[&lt;span&gt;&quot;num&quot;&lt;/span&gt;].(&lt;span&gt;float64&lt;/span&gt;)&lt;br/&gt;    fmt.Println(num)&lt;br/&gt;&lt;br/&gt;    strs := dat[&lt;span&gt;&quot;strs&quot;&lt;/span&gt;].([]&lt;span&gt;interface&lt;/span&gt;{})&lt;br/&gt;    str1 := strs[&lt;span&gt;0&lt;/span&gt;].(&lt;span&gt;string&lt;/span&gt;)&lt;br/&gt;    fmt.Println(str1)&lt;br/&gt;&lt;br/&gt;    obj := dat[&lt;span&gt;&quot;obj&quot;&lt;/span&gt;].(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{})&lt;br/&gt;    obj2 := obj[&lt;span&gt;&quot;foo&quot;&lt;/span&gt;].(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;interface&lt;/span&gt;{})&lt;br/&gt;    fmt.Println(obj2)&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把 JSON 数据从 byt 变量反序列化（如解析、解码等等）成名为 dat 的 map/字典对象。这些操作跟其他语言类似，不同的是我们的输入需要是字节数组（不是字符串），对于字典的每个值时需要有&lt;span&gt;类型断言&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;才能读取或访问该值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们处理一个多层嵌套的 JSON 对象时，这些类型断言会让处理变得非常繁琐。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;解析/序列化为 struct&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种处理如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;encoding/json&quot;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; ourData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Num   &lt;span&gt;float64&lt;/span&gt; &lt;span&gt;`json:&quot;num&quot;`&lt;/span&gt;&lt;br/&gt;    Strs []&lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;strs&quot;`&lt;/span&gt;&lt;br/&gt;    Obj &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;obj&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    byt := []&lt;span&gt;byte&lt;/span&gt;(&lt;span&gt;`{&lt;br/&gt;        &quot;num&quot;:6.13,&lt;br/&gt;        &quot;strs&quot;:[&quot;a&quot;,&quot;b&quot;],&lt;br/&gt;        &quot;obj&quot;:{&quot;foo&quot;:{&quot;bar&quot;:&quot;zip&quot;,&quot;zap&quot;:6}}&lt;br/&gt;    }`&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;    res := ourData{}&lt;br/&gt;    json.Unmarshal(byt, &amp;amp;res)&lt;br/&gt;    fmt.Println(res.Num)&lt;br/&gt;    fmt.Println(res.Strs)&lt;br/&gt;    fmt.Println(res.Obj)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们利用 Go struct 的标签功能把 byt 变量中的字节反序列化成一个具体的结构 ourData。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;标签是结构体成员定义后跟随的字符串。我们的定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ourData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Num   &lt;span&gt;float64&lt;/span&gt; &lt;span&gt;`json:&quot;num&quot;`&lt;/span&gt;&lt;br/&gt;    Strs []&lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;strs&quot;`&lt;/span&gt;&lt;br/&gt;    Obj &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;obj&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以看到 Num 成员的 JSON 标签 “num”、Str 成员的 JSON 标签 “strs”、Obj 成员的 JSON 标签 “obj”。这些字符串使用&lt;span&gt;反引号&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;把标签声明为文字串。除了反引号，你也可以使用双引号，但是使用双引号可能会需要一些额外的转义，这样看起来会很凌乱。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ourData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Num   &lt;span&gt;float64&lt;/span&gt; &lt;span&gt;&quot;json:\&quot;num\&quot;&quot;&lt;/span&gt;&lt;br/&gt;    Strs []&lt;span&gt;string&lt;/span&gt; &lt;span&gt;&quot;json:\&quot;strs\&quot;&quot;&lt;/span&gt;&lt;br/&gt;    Obj &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt; &lt;span&gt;&quot;json:\&quot;obj\&quot;&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 struct 的定义中，标签不是必需的。如果你的 struct 中包含了标签，那么它意味着 Go 的 &lt;span&gt;反射 API&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 可以&lt;span&gt;访问标签的值&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;。Go 中的包可以使用这些标签来进行某些操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 的 &lt;code&gt;encoding/json&lt;/code&gt; 包在反序列化 JSON 成员为具体的 struct 时，通过这些标签来决定每个顶层的 JSON 成员的值。换句话说，当你定义如下的 struct 时：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; ourData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Num   &lt;span&gt;float64&lt;/span&gt;   &lt;span&gt;`json:&quot;num&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意味着：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当使用 json.Unmarshal 反序列化 JSON 对象为这个 struct 时，取它顶层的 num 成员的值并把它赋给这个 struct 的 Num 成员。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个操作可以让你的反序列化代码稍微简洁一点，因为程序员不需要对每个成员取值时都显式地调用类型断言。然而，这个仍不是最佳解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先 —— 标签只对顶层的成员有效 —— 嵌套的 JSON 需要对应嵌套的类型（如 Obj map[string]map[string]string），因此繁琐的操作仍没有避免。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次 —— 它假定你的 JSON 结构不会变化。如果你运行上面的程序，你会发现 &lt;code&gt;&quot;zap&quot;:6&lt;/code&gt; 并没有被赋值到 Obj 成员。你可以通过创建类型 &lt;code&gt;map[string]map[string]interface{}&lt;/code&gt; 来处理，但是在这里你又需要进行类型断言了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我第一个 Go 工程遇到的情况，曾让我苦不堪言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸运的是，现在我们有了更有效的办法。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;SJSON 和 GJSON&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 内建的 JSON 处理并没有变化，但是已经出现了一些成熟的旨在用起来更简洁高效的处理 JSON 的包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;SJSON&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;（写 JSON）和 &lt;span&gt;GJSON&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;（读 JSON）是 &lt;span&gt;Josh Baker&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt; 开发的两个包，你可以用来读写 JSON 字符串。你可以参考 README 来获取代码实例 —— 下面是使用 GJSON 从 JSON 字符串中获取嵌套的值的示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;github.com/tidwall/gjson&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; JSON = &lt;span&gt;`{&quot;name&quot;:{&quot;first&quot;:&quot;Janet&quot;,&quot;last&quot;:&quot;Prichard&quot;},&quot;age&quot;:47}`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    value := gjson.Get(json, &lt;span&gt;&quot;name.last&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;println&lt;/span&gt;(value.String())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的，下面是使用 SJSON “设置” JSON 字符串中的值返回设置之后的字符串的示例代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;github.com/tidwall/sjson&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; JSON = &lt;span&gt;`{&quot;name&quot;:{&quot;first&quot;:&quot;Janet&quot;,&quot;last&quot;:&quot;Prichard&quot;},&quot;age&quot;:47}`&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    value, _ := sjson.Set(json, &lt;span&gt;&quot;name.last&quot;&lt;/span&gt;, &lt;span&gt;&quot;Anderson&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;println&lt;/span&gt;(value)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 SJSON 和 GJSON 不符合你的口味，还有&lt;span&gt;一些&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;span&gt;其他的&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;span&gt;第三方库&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;，可以用来在 Go 程序中稍微复杂点地处理 JSON。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;via: https://alanstorm.com/simplified-json-handling-in-go/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：&lt;span&gt;Alan&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;译者：&lt;span&gt;lxbwolf&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;校对：&lt;span&gt;polaris&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文由 &lt;span&gt;GCTT&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt; 原创编译，&lt;span&gt;Go 中文网&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt; 荣誉推出&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;Go 实例教程: &lt;em&gt;https://gobyexample.com/json&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;类型断言: &lt;em&gt;https://www.sohamkamani.com/golang/type-assertions-vs-type-conversions/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;反引号: &lt;em&gt;https://golangbyexample.com/double-single-back-quotes-go/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;反射 API: &lt;em&gt;https://pkg.go.dev/reflect&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;访问标签的值: &lt;em&gt;https://stackoverflow.com/questions/23507033/get-struct-field-tag-using-go-reflect-package/23507821#23507821&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;p&gt;SJSON: &lt;em&gt;https://github.com/tidwall/sjson&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;&lt;p&gt;GJSON: &lt;em&gt;https://github.com/tidwall/gjson&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8] &lt;/span&gt;&lt;p&gt;Josh Baker: &lt;em&gt;https://github.com/tidwall&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9] &lt;/span&gt;&lt;p&gt;一些: &lt;em&gt;https://github.com/pquerna/ffjson&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10] &lt;/span&gt;&lt;p&gt;其他的: &lt;em&gt;https://github.com/mailru/easyjson&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11] &lt;/span&gt;&lt;p&gt;第三方库: &lt;em&gt;https://github.com/Jeffail/gabs&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12] &lt;/span&gt;&lt;p&gt;Alan: &lt;em&gt;https://alanstorm.com/about/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13] &lt;/span&gt;&lt;p&gt;lxbwolf: &lt;em&gt;https://github.com/lxbwolf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14] &lt;/span&gt;&lt;p&gt;polaris: &lt;em&gt;https://github.com/polaris1119&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15] &lt;/span&gt;&lt;p&gt;GCTT: &lt;em&gt;https://github.com/studygolang/GCTT&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16] &lt;/span&gt;&lt;p&gt;Go 中文网: &lt;em&gt;https://studygolang.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b2ba43e9422b5ff68577604a45d5e56c</guid>
<title>Streaming Data Warehouse 存储：需求与架构</title>
<link>https://toutiao.io/k/rtnpqse</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;作者｜Jingsong&lt;/span&gt;&lt;span&gt; Lee &lt;/span&gt;&lt;span&gt;jingsonglee0@gmail.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 cid=&quot;n11&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;一、数仓中的计算&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在计算机领域，数据仓库（DW 或 DWH），是一个用于报告和数据分析的系统，被认为是商业智能的一个核心组成部分。它将当前和历史数据存储在一个地方，为整个企业的工作人员创建分析报&lt;/span&gt;&lt;span&gt;告。&lt;/span&gt;&lt;span&gt;&lt;sup&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;典型的基于提取、转换、加载（ETL）的数据仓库使用 ODS 层、DWD 层和 DWS 层来容纳其关键功能。数据分析师可以灵活的查询 (Query) 数仓中的每一层，获取有价值的商业信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数仓中有三个关键指标 &lt;span&gt;&lt;sup&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据的新鲜度&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：数据从产生开始，到在仓库中经过一系列处理后可供用户查询所经过的时间长度。通常 ETL 就是用来准备数据的一系列过程，ETL 更多是通过调度运行一系列流计算或者批计算的作业来完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据的查询延时&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：数据准备好后，用户通过 Query 查询表中的数据，从用户发出查询到收到查询结果的时间长度为查询延时。查询延时直接决定了终端用户的体感。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;成本&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：完成一定量的数据分析（包括 ETL 和查询等各类计算）需要的资源量。成本也是数仓中的一个关键指标。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三个指标的关系是什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以这三者构成了数仓中的一个三角 Tradeoff &lt;span&gt;&lt;sup&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6895973154362416&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zL2svsG6L3Vpkz651fGZGI8fYWC8dpsovaCJguqQN0MlkSo9lvRMZx0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(注：三角中，离顶点更近代表更好，离顶点更远代表更差)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于这个三角 Tradeoff，业界目前的主流架构有着怎么样的取舍呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 cid=&quot;n69&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;二、业界主流架构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;典型的离线数仓：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n79&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.53&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLOeJjyibtLQlBvE8MkHRC74kEnmq1GfcutOibvJ1O0sLb33PiaPgGHHkSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;离线数仓使用 Batch ETL 基于分区粒度来覆写 (INSERT OVERWRITE)，在解决超大数据的场景的同时，有着很好的成本控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是它有两个比较严重的问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新鲜度差：数据延时一般是 T + 1，即业务上当天产生的数据需要第二天才能查询到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不擅长处理更新流 (Changelog)，离线数仓里面存储的都是 Append 数据，如果需要接收类似数据库变更日志的更新流，需要反复的合并全量数据和增量数据，成本激增。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.423125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zL1RibtN8cAtRjWwtKic1hsMB7lh6cnicjnwIBz0iaffZq9F4kicgwohfHWLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决上述问题，实时数仓逐渐兴起，一个典型的实时数仓实现是使用 Flink + Kafka 的方案构建中间层，最终写到在线数据库或分析系统中，达到秒级的全链路延时，有着非常好的数据新鲜度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，它也逐渐暴露出一些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题一，中间层不可查&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;存在 Kafka 中的数据查询受限，无法灵活的进行 OLAP 查询，通常也没有保存长期历史数据。这与广泛使用的数仓有很大不同，在一个成熟的 Warehouse 体系中，数仓中的每一个数据集都应该是可供查询的 Table 抽象，而 Kafka 无法满足用户对于 Table 抽象的所有需求，比如说：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;查询能力受限。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;实时数仓架构要求所有可供查询的数据集被预先计算，并且最终写入可供查询的分析系统，但实际业务中不是所有计算都可以预先定义的，数据分析师的大量需求是临时的 Ad hoc 查询，如果中间数据 Queue 不可查，这会严重限制业务的数据分析能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题排查困难。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;实时数仓中，如果数据有问题，用户需要排查数据 Pipeline，但由于存储中间结果的 Queue 不可查，导致排查难度非常高。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综上，我们希望能有统一的架构得到一个处处可查询的实时数仓，而不是中间结果被管道化的数仓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题二，实时链路成本高&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;天下没有免费的午餐，搭建一条实时链路是比较昂贵的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;存储成本&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：不管是 Kafka 还是后面的 ADS 层，它们都是在线服务，虽然有很低的延时，但是有很高的存储成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;迁移和维护成本&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：实时链路是与独立于离线的新的一套系统，并不兼容离线的一套工具链，迁移和维护成本都很大。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此，我们希望能有一个低成本的实时数仓，它提供低运行成本并兼容离线工具链，同时加速原有的离线数仓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot; align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;离线数仓&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;实时数仓&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;成本&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;低&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;高&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;新鲜度&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;差&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;好&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;数仓中间表查询延时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;高&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;无法查询&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;数仓结果表查询延时&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;低&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;p&gt;&lt;span&gt;低&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为当前的两套架构面向不同的取舍和场景，所以业务通常只能维护两套架构，甚至需要不同的技术团队，这不仅在带来了很大的资源成本，也带来了昂贵的开发成本和运维成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么我们是不是有可能提供一个在新鲜度、查询延时、查询能力和成本等各方面比较均衡的数仓呢？为了回答这个问题，我们需要分析新鲜度和查询延时背后的技术原理，不同的 Tradeoff 导致的不同架构，以及它们背后的技术差异。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 cid=&quot;n213&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n213&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;三、ETL 新鲜度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先需要思考的是数据的新鲜度：数据的新鲜度衡量的是数据从产生开始，到在仓库中经过一系列处理后可供用户查询所经过的时间长度。数据被摄入到数仓里，并且经过一系列 ETL 的处理后，数据才进入可用的状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统的批计算是按照口径来进行 ETL 计算的，所以它的新鲜度是：口径 + ETL延时。一般的口径是天，所以传统离线数仓的新鲜度最少也是一天。按照口径来计算，计算的输入和输出是全量的。如果新鲜度要小于口径，计算的输入和输出是部分的，也就是增量的。典型的增量计算就是流计算，比如 Flink Streaming。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;增量计算也不完全等同于流计算，比如也可以有小批次的增量计算。全量计算不完全等同于批计算，比如流计算也可以做 Window 来全量的输出 (也就是说流计算的延迟也可以很大，这样可以降低成本)；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n231&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLnC1aQk2mR0hrd2ViaPtvZw0z3CtLgvkGc87AAynSTvQLD0hmuUJBQ7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 cid=&quot;n235&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n235&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;四、Query Latency&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;查询延时会直接影响数据分析效率和体验，查询是返回给人看的，这个人不是机器人，他看到的数据是经过过滤或者聚合后的数据。在传统离线数仓中，查询大表往往可能需要 10+ 分钟的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加速查询的返回最直观的方式是预计算，本质上数仓的 ETL 就是在做预计算的事情，数据分析人员查询的计算需要的时间太久时，他会通知数仓人员，建立对应的 ETL Pipeline，数据准备好后，分析人员直接查询最终结果表即可。从一个角度上看，这其实是在用新鲜度换取更快的查询延时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是在传统离线数仓中，有大量的即席查询（Ad Hoc)，用户根据自己的需求，灵活的选择查询条件。有大表参与的查询往往可能需要 10+ 分钟的时间，为了尽快的返回结果，各大存储系统使用了各种各样的优化手段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如存储更靠近计算，越靠近计算，读取越快：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如 Data Skipping，结合查询的条件和字段，跳过不相关的数据来加速数据的查找：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hive&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过分区裁剪查询特定分区，通过列存跳过不相关的字段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;湖存储&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在使用列存的基础上，引入文件的统计信息，根据文件的统计信息来尽量减少一些文件的不必要读取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;OLAP 系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在使用列存的基础上，比如使用 LSM 结构来让数据尽可能按照主键有序，有序是最利于查询的结构之一，比如 Clickhouse。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;KV 系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过数据的组织结构，使用 LSM 的结构来加速查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Message Queue&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Queue 其实是通过一种特殊的读取接口来达到快速定位数据的能力，它只提供基于 Offset / Timestamp 的定位方式来接着增量读取数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有很多优化手段，这里不一一枚举了，存储通过各种手段来配合计算加速查询，让查询找得快、读得快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上述的分析，我们可以看到，不同系统底层的技术基本都是相通的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论上来说，我们应该有可能通过底层技术的某种选择和组合搭建某种架构，来达到我们想要的 Tradeoff。这个统一的架构可能需要根据不同的 Tradeoff 解决以下场景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Streaming Warehouse 的目标是成为一个统一的架构：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n331&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6788553259141494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLIxI1jWhk9VohSthBpVymxUtjAOfdziazgx7zrRjtR3KibZ3QITDIkt2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(注：三角中，离顶点更近代表更好，离顶点更远代表更差)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个理想的数仓应该是用户可以随意调整成本、新鲜度、查询延时之间的 Tradeoff，这要求数仓能完全覆盖离线数仓、实时数仓、OLAP 的全部能力。Streaming Data Warehouse 在实时数仓的基础上往前走了一步，大幅降低了实时数仓的成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Streaming DW 在提供实时计算能力的同时，可以让用户在同套架构下覆盖离线数仓的能力。用户可以根据业务的需求作出相应的 Tradeoff，解决不同场景的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 cid=&quot;n346&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n346&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;五、Streaming Data Warehouse&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在具体看 Streaming Data Warehouse 的存储架构是如何设计之前，我们先来回顾一下之前提到的主流实时数仓的两个问题。解决了这两个问题，Streaming Data Warehouse 的架构设计也就呼之欲出了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n354&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;5.1 中间数据不可查&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然中间的 Kafka 存储不可查，一个实时离线一体化的想法是：实时离线一比一双跑，业务层去做尽可能多的封装，尽量让用户看到一套表的抽象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n364&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5842592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLOBwMwfzvcrPPS1PuAhJpH0qwRbBTGpFOM4MPmVSiclkVttqY3a1ACPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许多用户都会使用 Flink 加 Kafka 做实时数据流处理，将分析结果写入在线服务层对用户进行展示或进一步分析，与此同时将实时数仓中 Kafka 的数据导入到后台的异步离线数仓，对实时数据进行补充，每天定期大规模的批量运行/全量运行或对历史数据定期修正。&lt;span&gt;&lt;sup&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但这个架构存在着几个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n385&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4685185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLIN1s6b3ZKwl37EMiaC8DaYemjYYnTLI1oibmAibt8Njh58ZgOgL4zVPdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 Streaming Data Warehouse 中，我们希望数仓有面向查询统一的 Table 抽象，所有流动中的数据皆可分析，没有数据盲点。这就要求这个统一的 Table 抽象能够同时支持两种能力：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说在同一个 Table 上，用户可以以消息队列的方式订阅这个 Table 上的 Change Log，也可以对这个 Table 直接进行 OLAP 查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面我们再来看经典实时数仓的第二个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n417&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;5.2 实时链路成本高&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然 Streaming Data Warehouse 提供的统一 Table 抽象能够很好的解决新鲜度和查询延迟的问题，但相较于离线数仓其成本是更高的。在很多时候并非所有的业务场景都对新鲜度和查询延时有很高的要求，因此提供低成本 Table 存储能力依然是必要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里湖存储是一个不错的选择：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，Streaming Data Warehouse在保持全链路数据实时流动的同时，还需要同时提供低成本的离线存储，并且做到架构不影响实时链路。由于通常来说实时链路的 SLA 要求比离线链路要高，因此 Streaming Data Warehouse 的存储在设计和实现上要把 Queue 的写入和消费作为高优先级，对历史数据的存储不应该影响其作为 Queue 的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 cid=&quot;n447&quot; mdtype=&quot;heading&quot;/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p cid=&quot;n447&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;六、Flink Table Store&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Flink Table Store &lt;span&gt;&lt;sup&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;正是专门为 Streaming Warehouse 打造的流批一体存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去的几年里，在我们众多贡献者和用户的帮助下，Apache Flink 已经成为了最好的分布式计算引擎之一，特别是在大规模的有状态流处理方面。尽管如此，当大家试图从数据中实时获得洞察力时，仍然面临着一些挑战。在这些挑战中，一个突出的问题是缺乏能满足所有计算模式的存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到现在为止，人们为不同的目的部署一些与 Flink 一起协同的存储系统是很常见的。一个典型的做法是部署一个用于流处理的消息队列，一个用于批处理和 Ad-Hoc 查询的可扫描文件系统/对象存储，以及一个用于点查的 KV 存储。由于其复杂性和异构性，这样的架构在数据质量和系统维护方面都存在挑战。这已经成为了一个损害 Apache Flink 带来的流和批处理统一的端到端用户体验的主要问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Flink Table Store 的目标就是要解决上述问题。这对 Flink 来说是重要的一步，它将 Flink 的能力从计算领域扩展到了存储领域。也正因为这样，我们可以为用户提供更好的端到端体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n469&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;6.1 架构&lt;/strong&gt;&lt;/h3&gt;&lt;p cid=&quot;n475&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.604375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLh2iaia7diaic7BZmVN8FFUV69Emc9bvJ8oKrdTVIQ3Fgl78CoNFicficnoKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;■ &lt;/span&gt;6.1.1 Service&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Coordinator 是集群的管控节点，它主要负责管理各 Executors，主要能力有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Metastore 是个抽象的节点，它可以对接 Hive Metastore，也可以最小化依赖基于 Filesytem，也可以对接你自己的 Metastore，它保存了最基本的表信息。你不用担心性能问题，更详细的复杂的表信息放在了湖存储里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Executor 是一个单独的计算节点，作为存储的一个 Cache 和本地计算的加速单元：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个 Executor 负责一个或多个 Buckets，每个 Bucket 有对应的 Changelog，这些 Changelog 会保存在 Message Queue 里，主要用作：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;■ 6.1.2 湖存储&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Executor 的数据经过了 Checkpoint 后就落入了湖存储中，湖存储建立在列存的文件格式和共享 DFS 存储上。湖存储提供完整的 Table Format 抽象，它的主要目的是以较低的成本支撑更新和读取：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;■ 6.1.3 冷热分离&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;存储的读写路径被分为了两条：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Service 的数据是最新的，经过了分钟级的 Checkpoint 后同步到了湖存储中。所以用户读取湖存储只会读取到没那么及时的数据，本质上，两边的数据是一致的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Service 和湖存储的使用有这些区别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Service 适合最新的热数据，提供快速的逐条 Update 写入，高性能的查询延时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Service 不适合 Offline Query，一个是影响 Online 稳定性，另一个是成本会更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Service 不支持 Batch Pipeline 的 INSERT OVERWRITE。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以存储需要暴露湖存储来承担这些能力，那业务上如何判断哪些数据是在 Service 里操作，哪些数据在湖存储里操作呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有 ARCHIVE 后的分区才能在湖存储中进行 Batch 的 INSERT OVERWRITE。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n647&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;6.2 短期目标&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;■ 6.2.1 短期架构&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Streaming Data Warehouse 的整体变革是巨大的，OLAP、Queue、湖存储、流计算、批计算，每一个领域都有佼佼者在其中发力，今天还不可能短期内产出一个完整的解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，我们在前进，在 Apache Flink Table Store 中，我们首先开发了基于 LSM 的湖存储，并原生集成了 Kafka 作为 Log System。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n664&quot; mdtype=&quot;paragraph&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.551875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zL1EW7DOoL1PMk3o0ZVfvpXtVC75Gawz3T7vKrBLRmPIRotWja8mFkqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比于上述章节的完整架构，短期的架构没有 Coordinator 和 Excutors，这意味着它：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们希望从底层做起，夯实基础，首先提出一个完整的统一抽象，再在存储上做加速能力，再提供真实时的 OLAP。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前的架构它提供两个核心价值：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;■ 6.2.2 价值一：实时中间层可查&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Table Store 给原有实时数仓的 Kafka 分层存储带来查询的能力，中间数据可查；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Table Store 仍然具有流式实时 Pipeline 的能力，它原生 Log 集成，支持集成 Kafka，屏蔽掉流批的概念，用户只看到 Table 的抽象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是值得注意的是，数据写入存储不应该影响原有写入 Kafka 的稳定性，这点是需要加强和保证的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 cid=&quot;n31&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;&lt;span&gt;■ 6.2.3 价值二：离线数仓加速&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Table Store 加速离线数仓，兼容 Hive 离线数仓的同时，提供增量更新的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Table Store 提供完善的湖存储 Table Format，提供准实时 OLAP 查询，LSM 的结构不但有利于更新性能，也可以有更好的 Data Skipping，加速 OLAP 查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n723&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;6.3 后续计划&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;社区目前正在努力加强核心功能，稳定存储格式，并补全剩余的部分，使 Flink Table Store 为生产做好准备。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在即将发布的 0.2.0 版本中，我们希望可以提供流批一体的 Table Format，逐渐完善的流批一体湖存储，你可以期待（至少）以下的额外功能：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Apache Hive 引擎的 Flink Table Store Reader。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持调整 Bucket 的数量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Append Only 数据，Table Store 不只是限于更新场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;完整的 Schema Evolution，更好的元数据管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据 0.1.0 预览版的反馈进行改进。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在中期，你也可以期待：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;请试一试 0.1.0 预览版，在 Flink 邮件列表中分享您的反馈，并为项目作出贡献。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 cid=&quot;n778&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;6.4 项目信息&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;pache Flink Table Store 项目&lt;span&gt;&lt;sup&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;正在开发中，目前已经发布了第一个版本，欢迎大家试用和反馈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎大家加入下面的讨论群，一起讨论业务的需求和后续的发展：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3076923076923077&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLdcFdle7ghtQrCukD45FkMicONZcFTwiabV9XOvz24SceiaSTBAr1FJDZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n1207&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[1] &lt;strong&gt;Data warehouse &lt;/strong&gt;&lt;strong&gt;Wiki:&lt;/strong&gt; https://en.wikipedia.org/wiki/Data_warehouse&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[2] &lt;strong&gt;Napa: Powering Scalable Data Warehousing with Robust Query Performance at Google: &lt;/strong&gt;http://vldb.org/pvldb/vol14/p2986-sankaranarayanan.pdf&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[3] &lt;strong&gt;Flink Next：Beyond Stream Processing: &lt;/strong&gt;https://mp.weixin.qq.com/s/CxHzYGf2dg8amivPJzLTPQ&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;[4] https://github.com/apache/flink-table-store&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;往期精选&lt;/p&gt;&lt;/section&gt;&lt;img data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zL3NeMhcGowKuREIB0CL4iaTNvrnXwepO3jcCvfVpheFrZwNkeMwzQadg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt; &lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247496520&amp;amp;idx=1&amp;amp;sn=14dd75d6074ac362b5528f5eb0d5f9d6&amp;amp;chksm=fd387d0aca4ff41ccee5ed4a5d472ba97da2c02130d7f8118298912b92c231308d0f77481df7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLQibUapNbxl0uvqdfA09Jhh7sVBzIqMWhK4icEHqN00SzKWicvARdkrkPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247497560&amp;amp;idx=1&amp;amp;sn=873096c9428f92c9b67d245ebc4d31b2&amp;amp;chksm=fd38791aca4ff00c31fda27346f8e6af9f98f1b6b934baae047a18c24ed81a589b1ca6311c04&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLCM3Kiab1Mu9HlJGIiauEVbB5lG8mKWL5TWbTIwYCw3mmHz9a7F8GrLBQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247497552&amp;amp;idx=1&amp;amp;sn=ee56347332c3c69c33aca0de7a51c11a&amp;amp;chksm=fd387912ca4ff00432a3e0fb7f22e07d74ee30f12d708b22011e30a562df59221c90d55803d0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLmIk6vjbrw1qymHecxNx3hLfPl2S2r6g5wJhWtHVcNruu6AO3NtKGag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3Mzg4OTMyNQ==&amp;amp;mid=2247497497&amp;amp;idx=1&amp;amp;sn=a59b8d8b7eaaae1bf8a892a45e934faf&amp;amp;chksm=fd38795bca4ff04da5e571ebc742aafa0f1d670259476aeaa1912df16fc6f24b53862b953905&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu5drR06F6RsaZ3pGXzEic4zLcovp6ib8zkL0j7a8lhBdHpgWHZGe9qx6bIUh999eibxpMhsQUKKDKfSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;▼ 关注「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Apache Flink&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」，获取更多技术干货 &lt;span&gt;▼&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3Mzg4OTMyNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6FJHxaI14AsXuzeg4SybT0hiaCSohrIY75oiaOMzhQU7RouiafjNa76k2CtD6xxB2JqnawqFqV3zg3A/0?wx_fmt=png&quot; data-nickname=&quot;Apache Flink&quot; data-alias=&quot;apacheflinkcc&quot; data-signature=&quot;Flink 中文社区官微，Flink PMC 维护&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;更多 Flink 相关技术问题，可扫码加入社区钉钉交流群～&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;4&quot; data-cropselx2=&quot;204&quot; data-cropsely1=&quot;1&quot; data-cropsely2=&quot;243&quot; data-fileid=&quot;100010716&quot; data-ratio=&quot;1.162531017369727&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu573SfR5B9zrZybQe6w2yUInzu48HG5BMCDdHgE77LRzrnlGSl2kzKKfp9ypsduOukxibm1W99g26w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;806&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100010714&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Z6bicxIx5naLWBBEcl44aIic1Mthe1nZiaramW5s4e8WwyCYYbTzu6uPBpgI6sxNXNymEnOYKpJpcrItUia7lS64mA/640?wx_fmt=gif&quot;/&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;进入 Flink 中文学习网站，查看更多技术内容&lt;strong&gt;&lt;span&gt;～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d880ebe679251a6c02234053f1eec5ea</guid>
<title>赚了超过200万美元的网站设计技巧</title>
<link>https://toutiao.io/k/nu070ki</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;/p&gt;&lt;p&gt;在我作为网站设计师的职业生涯中，我已经创造了超过 2,000,000 美元的收入。我为世界上一些最大的品牌设计了网站，包括 PayPal、索尼、雀巢、Marks &amp;amp; Spencer 和三星。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这篇文章中，作者将分享 5 个重要技巧，它们将帮助您创建令人惊叹的网站设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN0Vo8mIPFl3LZxZ295PrRVFPTAGibfSCzdEoOqa2ydXP3hw3P9jrAKlrc226qVkmjI9cPnkW5FF6qg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在选择调色板时，我建议只使用 3 种颜色。一种颜色作为您的背景。您的排版的一种颜色。为您的口音选择一种颜色。我所说的口音是指按钮之类的东西。一共三种颜色！&lt;/p&gt;&lt;p&gt;查看任何流行的精心设计的网站。他们中的大多数主要只使用3种主要颜色。您可以使用 3 种颜色的变体。例如，当我使用黑色时，我确实使用了一些灰色。但我很少在设计中引入超过 3 种完全不同的颜色。&lt;/p&gt;&lt;p&gt;有时您无法选择自己的颜色。例如，当您使用品牌颜色时，只需使用黑色、白色和单一品牌颜色作为您的亮点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN0Vo8mIPFl3LZxZ295PrRVFIoAnC4Jiab2dXiaZlCibfogRf75hnSY9bfULPxMkV3mO8MgQPb1ibLZUoQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在为您的网站设计选择字体时，我建议只使用一种经典字体。您的字体系列必须包含许多不同的粗细。例如，重、粗、中和轻。要在设计中实现变化和层次结构，您可以更改字体的大小和粗细。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;超级重要！您必须选择高质量的字体。它必须在长文本中读得很好。例如你的博客文章。我建议使用经典字体，例如 Helvetica 和 Poppins。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;“但我的客户使用品牌字体 XYZ，我们必须使用它”，如果必须使用品牌字体。仅将其用于主要标题。然后将您选择的单一字体用于其余的网站设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN0Vo8mIPFl3LZxZ295PrRVFeUa36F58wGCtF46DBWVBcDib0S2iapuB9mmZlXeTNDa8jWDRKCNEYrXw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;平均网站设计将在数十种不同的设备上查看。您的设计必须能够弯曲和堆叠并且仍然看起来不错。这意味着使用模块化设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过模块化设计，我的意思是您创建的每个元素都应该是独立的。每当您布置页面元素时，请始终使用独立的独立模块。您的设计将如何垂直和水平弯曲。以及它将如何堆叠在一起。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不要使用跨越整个页面的复杂设计元素。它们在台式机上可能看起来很棒，但在移动设备上常常完全失败。使用当今互联网的模块进行设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN0Vo8mIPFl3LZxZ295PrRVF3IJsHOuuQ8JRkJs1nIbrx72oNeWHYPgHD0VawGTPuVcDlKtUyRFLzw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;我喜欢将网站设计比作烹饪。要创造令人惊叹的食物，您必须使用令人惊叹的食材。这同样适用于网站设计。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不要吝啬图像！确保在设计中使用高质量的摄影、插图或视频。我已经看到令人惊叹的网站因糟糕的库存图像而失望。你也不必花一大笔钱。网络上有一些很棒的免费图库摄影网站。这是关于花费必要的时间和金钱来找到那些完美的图像。去做吧。这很值得。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN0Vo8mIPFl3LZxZ295PrRVFgan3D0QQIWvJ6Zrv4fzDZr0uluNVypACGYI6yUrUvhfRgkQOI8yv5w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这是一个微妙的。但它创造了奇迹。在为您的设计选择摄影或插图时，将您的一种主要颜色融入您的图像中。例如，如果您的一种颜色是粉红色，则将完全相同的粉红色引入您的图像中。您可能需要编辑图像以将主要颜色融入其中。理想情况下，它应该是完全相同的颜色。或者尽可能接近。&lt;/p&gt;&lt;p&gt;当你这样做时，你会发现你的设计有一种美妙的一致感觉。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我知道其中一些技巧是限制性的。这也是他们的美丽！限制鼓励创造力。&lt;/p&gt;&lt;p&gt;直到今天，我在设计网站时仍然使用所有这些技巧。给他们一个机会。特别是如果你刚刚开始。坚持他们，你会在创造惊人设计的道路上做得很好。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp custom_select_card_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA5NjcxMjc4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN3HMDKgGdbyc4DGKBTlLCHsicBcoHynQojSmA69oNZmWiamxZQpjpRMvHrv0Cba3RXWjdRsU5iaZSHQg/0?wx_fmt=png&quot; data-nickname=&quot;程序员变现之路&quot; data-alias=&quot;changmingTalk&quot; data-signature=&quot;程序员副业项目实战，技术变现工具和思路分享，程序员变现路上，有理有据！&quot; data-from=&quot;0&quot;&gt;&lt;section class=&quot;appmsg_card_context wx_profile_card js_card&quot;&gt;&lt;section class=&quot;wx_profile_card_inner&quot;&gt;&lt;section class=&quot;wx_profile_card_bd&quot;&gt;&lt;section class=&quot;wx_profile weui-flex&quot;&gt;&lt;section class=&quot;wx_profile_hd&quot;&gt;&lt;img class=&quot;wx_profile_avatar&quot; data-ratio=&quot;0.6666666666666666&quot; data-type=&quot;png&quot; data-w=&quot;200&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3SkyOMFuaN3HMDKgGdbyc4DGKBTlLCHsicBcoHynQojSmA69oNZmWiamxZQpjpRMvHrv0Cba3RXWjdRsU5iaZSHQg/640?wx_fmt=png&quot;/&gt;
                    &lt;/section&gt;&lt;section class=&quot;wx_profile_bd weui-flex__item&quot;&gt;&lt;strong class=&quot;wx_profile_nickname&quot;&gt;程序员变现之路&lt;/strong&gt;
                    &lt;section class=&quot;wx_profile_desc&quot;&gt;程序员副业项目实战，技术变现工具和思路分享，程序员变现路上，有理有据！&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;wx_profile_ft&quot;&gt;
                  &lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;wx_profile_card_ft weui-flex&quot;&gt;公众号&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;wx_profile_msg js_msg_container&quot;&gt;&lt;section class=&quot;wx_profile_msg_inner js_msg_text&quot;&gt;该公众号已被封禁&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/mpprofile&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;推荐阅读&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>