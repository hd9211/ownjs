<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2701f876cab9e67826818234d4f16e4e</guid>
<title>工具 | 一款功能强大，开源免费的 H5 可视化页面配置解决方案</title>
<link>https://toutiao.io/k/6phg7i3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2a2e410ccdc12979d8b6665946b5d15d</guid>
<title>爬虫自我修养：有哪些屡试不爽的反反爬技巧</title>
<link>https://toutiao.io/k/wkvs6ot</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section class=&quot;xmteditor&quot; data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot; data-mpa-powered-by=&quot;yiban.io&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.25555555555555554&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJbONXXaqJyeTxLiccs0Pxj3R51nEdr4XgrHHBicznBVDNGAtAx6mLNPv1IBm47ibq6yYicGJ5QnoVic9YyXb6NGWHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着大数据的火热，谁能第一时间掌握数据就等于掌握了先机，网页数据成了大家争相掠夺的资源，大量的网页抓取工具&lt;/span&gt;&lt;strong&gt;&lt;span&gt;（爬虫）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;蜂拥而来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;网站运营者则需要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;反爬虫系统&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span/&gt;来保护自己的数据资源，以达到&lt;strong&gt;&lt;span&gt;系统稳定性保障、竞争优势保持的目的。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;爬虫与反爬虫，这相爱相杀的一对，简直可以写出一部壮观的斗争史。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;爬虫与反爬虫斗争史&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一回合：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;逗汁儿对某个网站的内容很感兴趣，于是想要写一个爬虫把信息全部抓取下来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后逗汁写了一个标准的python爬虫，&lt;span&gt;不断地遍历某站的信息列表页面，根据 Html 分析内容存进自己的数据库&lt;/span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;网站运维X监控发现&lt;/span&gt;&lt;span&gt;&lt;strong&gt;某个时段访问量陡增，ip相同，user-agent都是python&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，判断为非人类行为，封杀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二回合：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;爬虫爬到一半就停了，这可不行，这批信息我势在必得啊，于是逗汁儿针对性的变换了一下策略：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;1)user-agent 模拟firefox，获取ip代理；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2)每爬半个小时就换一个IP代理。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;运维X发现了ip变化，直接要求登陆才能访问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第三回合：&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;逗汁儿：注册账号，每次请求带cookie或者token，还多注册了几个账号联合爬取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运维X：加剧ip访问频率限制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第四回合：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;逗汁儿：模拟人的请求，限制请求速度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运维X：&lt;/span&gt;&lt;span/&gt;&lt;span&gt;弹出验证码进行识别。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第五回合：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;逗汁儿：通过学习&lt;span&gt;图像识别（关键词PIL，tesseract），再对验证码进行了二值化，分词，模式训练之后&lt;/span&gt;识别了网站验证码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运维X：增加动态网站，数据通过js动态加载，增加网络分析复杂度。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第六回合：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;逗汁儿：通过selenium和phantomjs完全模拟浏览器操作。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运维X：成本太高！放弃，猝......&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;mpa-image&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JJbONXXaqJye1dpJLMr7ibpibhDPkq4iaUalfQxbrUdMP3leQvFuR9nicdRyHHDnPYZUFMvaib8Vf7oicKI4TiaibpJQRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;240&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;爬虫和反爬虫作为相生相克的死对头，无论爬虫多厉害，都能被复杂的反爬虫机制发现，&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;同样的，无&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;论反爬虫机制多么缜密，都能被高级的网络爬虫所攻破，而&lt;span&gt;胜负的关键就看双方的资源投入多少&lt;/span&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;为什么反爬虫？&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为了更好的理解爬虫和反爬虫，我们来看一些定义：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;爬虫：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;使用任何技术手段，批量获取网站信息的一种方式。关键在于批量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;反爬虫&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。关键也在于批量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;误伤：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在反爬虫的过程中，错误的将普通用户识别为爬虫。误伤率高的反爬虫策略，效果再好也不能用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;拦截：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;成功地阻止爬虫访问。这里会有拦截率的概念。通常来说，拦截率越高的反爬虫策略，误伤的可能性就越高。因此需要做个权衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;资源：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;机器成本与人力成本的总和。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于网站&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为什么反爬虫&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;以及&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;反什么样的爬虫&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;，我们可以看看携程酒店技术部总结的关于&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000005840672&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;反爬虫的心得体会&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;对于公司来说，为什么反爬虫？&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·爬虫占总PV比例较高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有大量的硕士在写论文的时候会选择爬取OTA数据，并进行舆情分析。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为五月份交论文，到了三月份了，来不及了，赶紧抓数据，四月份分析一下，五月份交论文。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·公司可免费查询的资源被批量抓走，丧失竞争力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;OTA的价格可以在非登录状态下直接被查询，这个是底线。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果强制登陆，那么可以通过封杀账号的方式让对方付出代价，这也是很多网站的做法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是我们不能强制对方登录。那么如果没有反爬虫，对方就可以批量复制我们的信息，我们的竞争力就会大大减少。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·爬虫是否涉嫌违法？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;爬虫在国内还是擦边球，还是需要用技术手段来做最后的保障。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;反什么样的爬虫？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·十分低级的应届毕业生&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;应届毕业生的爬虫通常简单粗暴，根本不管服务器压力，加上人数不可预测，很容易把站点弄挂。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·十分低级的创业小公司&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不计其数的小爬虫，出于公司生死存亡的考虑，不断爬取数据。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·不小心写错了没人去停止的失控小爬虫&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;托管在某些服务器上的小爬虫，已经无人认领了，依然在辛勤地工作着。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·成型的商业对手&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;商业对手有钱、有技术，如果和你死磕，你就只能硬着头皮和他死磕。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;·抽风的搜索引擎&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;搜索引擎有时也会抽风，可能导致服务器性能下降，请求量跟网络攻击没什么区别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说，其实公司反爬虫的对象，都是一些会给网站本身带来困扰甚至伤害的爬虫，在爬虫与反爬虫的战役当中，最后获胜的一定是爬虫，因为网站不可能不要用户查询。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;换言之，只要你的爬虫&lt;/span&gt;&lt;span&gt;&lt;strong&gt;足够规范&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，尽可能的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;模拟正常用户行为&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，在不影响网站正常运作的情况下爬取信息，网站根本不会花大力气与你死磕。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;反反爬技巧&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;网络爬虫一般通过设置HTTP请求头信息的字段来模拟正常浏览器访问网站。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，通常网络管理员会通过检查头信息中的&lt;/span&gt;&lt;span&gt;User Agent字段、分析access_log统计访问，根据IP、请求时间、频率、访问的路径来确认黑名单。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;一般网站从三个方面反爬虫&lt;/span&gt;，请求网站访问时的请求头Headers，用户行为，目标网站的目录和数据加载方式。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;前两个方面可以说是反爬虫策略中最为常见的，而第三个则是应用ajax（异步加载）的方式加载页面目录或者内容，增大爬虫在对目标网站形成访问之后获取数据的难度。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反反爬的主要思路就是：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;尽可能的去模拟浏览器，浏览器在如何操作，代码中就如何去实现。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.Headers限制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这应该是最常见的，最基本的反爬虫手段，主要是初步判断你是否是真实的浏览器在操作。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;遇到这类反爬机制，可以直接在自己写的爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以edge浏览器为例，浏览器中打开页面；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一步：点击上图中“网络”标签，然后刷新或载入页面&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二步：在右侧“标头”下方的“请求标头”中的所有信息都是headers内容，添加到请求中即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9277620396600567&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJbONXXaqJzJb6vpQ2CmsOkfChnia0uLYnAu1qtEwkE980aLUUdiaFXFyZQhU52CC88icyeVB4eUzjEFu6UW6VKtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;代码示例如下：&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; class=&quot;mpa-template&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;headers = {&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Accept&#x27;&lt;/span&gt;: &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;image/png, image/svg+xml, image/*; q=0.8, */*; q=0.5&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;               &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Accept - Encoding&#x27;&lt;/span&gt;:&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;gzip, deflate, br&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;               &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Accept-Language&#x27;&lt;/span&gt;:&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;zh-Hans-CN, zh-Hans; q=0.5&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;               &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Connection&#x27;&lt;/span&gt;:&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Keep-Alive&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;               &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Host&#x27;&lt;/span&gt;:&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;pb.sogou.com&#x27;&lt;/span&gt;,&lt;br mpa-from-tpl=&quot;t&quot;/&gt;               &lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;User-Agent&#x27;&lt;/span&gt;:&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362&#x27;&lt;/span&gt;}&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;值得注意的是，很多网站只需要userAgent信息就可以通过，但是有的网站还需要验证一些其他的信息，比如知乎，有一些页面还需要 authorization 的信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section/&gt;&lt;section&gt;&lt;span&gt;所以需要加哪些Headers，还需要尝试，可能还需要Referer、Accept-encoding等信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.IP限制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;限制IP也是很多网站反爬虫的初衷，有些人随便写一个循环，就开始暴力爬取 ，确实会给网站服务器带来很大的负担。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而这种频繁的访问，显然也不会是真实用户行为，索性果断把你封掉。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这种情况，你可以遵守规则，把你爬取的速度变慢，每次爬取停个几秒就行了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果爬取的数据量不大，其实也浪费不了多少时间，反正你也可以利用这段时间做做其他事情，或者好好思考一下人生。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; class=&quot;mpa-template&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;section&gt;time.&lt;span class=&quot;hljs-default-keyword&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;hljs-default-number&quot;&gt;5&lt;/span&gt;)&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当然，你也可以通过不断换IP的形式来绕过这种限制，网上很多免费的IP资源，你可以自己搭一个IP池，爬到一定的量就切换IP。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.动态加载&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过异步加载，一方面是为了反爬虫，一方面也可以给网页浏览带来不同的体验，实现更多的功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多动态网站都是通过ajax或者JavaScript来加载请求的网页。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在遇到动态加载的网页的时候就需要去分析ajax请求，一般情况都能直接找到包含我们想要数据的json文件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7385057471264368&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJbONXXaqJzJb6vpQ2CmsOkfChnia0uLYVdKYtxDuUx1qjXTibfuia0uF34IaYzmtQIibXLyHb11skUyb3kbiaicIeGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果网站给文件加密，那么可以通过selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;理论上selenium是比较全能的爬虫方案，因为这个确实算是真实的用户行为。除非网站的反爬虫严苛到宁愿误杀的地步。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; class=&quot;mpa-template&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;p&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; webdriver&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.common.by &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; By&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.support.ui &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; WebDriverWait&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; selenium.webdriver.support &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; expected_conditions &lt;span class=&quot;hljs-default-keyword&quot;&gt;as&lt;/span&gt; EC&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; selenium.common.exceptions &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; TimeoutException&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; re&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; pyquery &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; PyQuery &lt;span class=&quot;hljs-default-keyword&quot;&gt;as&lt;/span&gt; pq&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;browser = webdriver.Chrome()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;wait = WebDriverWait(browser, &lt;span class=&quot;hljs-default-number&quot;&gt;10&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-function&quot;&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-default-title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;hljs-default-params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span class=&quot;hljs-default-keyword&quot;&gt;try&lt;/span&gt;:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        browser.get(&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;https://www.taobao.com&#x27;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        input =wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,&lt;span class=&quot;hljs-default-string&quot;&gt;&quot;#q&quot;&lt;/span&gt;))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        submit = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,&lt;span class=&quot;hljs-default-string&quot;&gt;&quot;#J_TSearchForm &amp;gt; div.search-button &amp;gt; button&quot;&lt;/span&gt;))）&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        input.send_keys(&lt;span class=&quot;hljs-default-string&quot;&gt;&#x27;鸡蛋&#x27;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        submit.click()&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        total = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &lt;span class=&quot;hljs-default-string&quot;&gt;&quot;#mainsrp-pager &amp;gt; div &amp;gt; div &amp;gt; div &amp;gt; div.total&quot;&lt;/span&gt;)))&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        get_products（）&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span class=&quot;hljs-default-keyword&quot;&gt;return&lt;/span&gt; total.text&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span class=&quot;hljs-default-keyword&quot;&gt;except&lt;/span&gt; TimeoutException:&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span class=&quot;hljs-default-keyword&quot;&gt;return&lt;/span&gt; search()&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.验证码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们在很多网站会遇到，如果请求量大了之后就会遇到验证码的情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最让人诟病的12306，其实也是一定程度上的防止非正当请求的产生。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于验证码，可以通过OCR来识别图片，Github上面有很多大神分享的代码可以用，可以去看看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简单的&lt;span&gt;OCR识别验证码：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; class=&quot;mpa-template&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;p&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; Image&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span class=&quot;hljs-default-keyword&quot;&gt;import&lt;/span&gt; tesserocr&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;img = Image.open(&lt;span class=&quot;hljs-default-string&quot;&gt;&quot;code.jpg&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;verify_code1 = tesserocr.image_to_text(img)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;verify_code2 = tesserocr.file_to_text(&lt;span class=&quot;hljs-default-string&quot;&gt;&quot;code.jpg&quot;&lt;/span&gt;)&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.减少返回的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;最基本的隐藏真实的数据量，只有不断加载才能刷新信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有的就更变态，会只给你展示一部分信息，人都看不到，爬虫也无能为力。&lt;/span&gt;&lt;span&gt;比如CNKI，你每次搜索能够得到的内容就是非常有限的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个貌似没有很好的解决办法，但是这么干的网站毕竟是少数，因为这种方式，其实在某种程度上是牺牲了一部分真实用户的体验。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.返回伪造的信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这个真的是程序员何苦为难程序员。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反爬虫的工程师也是煞费苦心，一方面是不让真实的数据被大规模爬取，另一方面也给你后期的数据处理增加负担。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果数据伪造的好，可能你真的不容易发现自己爬的是假数据，当然只能依靠你后期去清洗这些数据了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;常见的反爬及反爬应对措施大概就是如此了，结论的东西可以在大家在遇到问题的时候带来一些思路和参考。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;爬虫作为一门技术，意味着在真实技术场景下会发生许多变化，需要学习者在实践中去探索这些技巧并加以掌握。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;往 期 推 荐&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mpa-template&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;/&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;壹&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NzM1MzQzNg==&amp;amp;mid=2247486344&amp;amp;idx=1&amp;amp;sn=748924cc1c682a5245dacbd7d8b22194&amp;amp;chksm=e9b012bbdec79bad8c132b6133f494d86834c313bba67a347cc6c55087f8d878fd95f959e0e4&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;python爬虫，学习路径拆解及资源推荐&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;/&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;贰&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NzM1MzQzNg==&amp;amp;mid=2247486698&amp;amp;idx=1&amp;amp;sn=6993dfc51a347a1247443383a467eefc&amp;amp;chksm=e9b015d9dec79ccf745069a6d60cfbd2af25f5115c7207113776eedf6ef460b3df2a70cd18af&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;这些不用编程的爬虫工具，你一定要知道&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;/&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;叁&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NzM1MzQzNg==&amp;amp;mid=2247485693&amp;amp;idx=1&amp;amp;sn=9048e519aab2de23feace427d3a84525&amp;amp;chksm=e9b011cedec798d8dbfec62b3f8a1985fcc78092b2e970a43b3e512e0237dcd63b99e494cc23&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;听说你爬回来的都是乱码？三个案例教你破解字体加密&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4666666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJbONXXaqJwib8jRMMqAAuOEekTmhjVr6QDscGOHr1JMuy11ZsxibkJoQVRN9kX0yLBbicfpBwAB9RibwnKlkaVmXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da722aaabcdc6b40e6a359f38ea28496</guid>
<title>你还在用 Swagger？试试这个神器</title>
<link>https://toutiao.io/k/k9tsk1j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天给大家安利一款接口文档生成器——JApiDocs。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Swagger想必大家都用过吧，非常方便，功能也十分强大。如果非要说Swaager有什么缺点，想必就是注解写起来比较麻烦。如果我说有一款不用写注解，就可以生成文档的工具，你心动了吗？他就是我们今天的主角——JApiDocs。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们一起来看看如何使用！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、添加依赖&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.github.yedaxia&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;japidocs&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.3&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、配置生成参数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们新建一个项目，然后随便写一个main方法，增加生成文档的配置，然后运行main方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;DocsConfig config = &lt;span&gt;new&lt;/span&gt; DocsConfig();&lt;br/&gt;config.setProjectPath(&lt;span&gt;&quot;F:\\Java旅途\\japi-docs&quot;&lt;/span&gt;); &lt;span&gt;// 项目根目录&lt;/span&gt;&lt;br/&gt;config.setProjectName(&lt;span&gt;&quot;japi-docs&quot;&lt;/span&gt;); &lt;span&gt;// 项目名称&lt;/span&gt;&lt;br/&gt;config.setApiVersion(&lt;span&gt;&quot;V1.0&quot;&lt;/span&gt;);       &lt;span&gt;// 声明该API的版本&lt;/span&gt;&lt;br/&gt;config.setDocsPath(&lt;span&gt;&quot;F:\\test&quot;&lt;/span&gt;); &lt;span&gt;// 生成API 文档所在目录&lt;/span&gt;&lt;br/&gt;config.setAutoGenerate(Boolean.TRUE);  &lt;span&gt;// 配置自动生成&lt;/span&gt;&lt;br/&gt;Docs.buildHtmlDocs(config); &lt;span&gt;// 执行生成文档&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、编码规范&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于JApiDocs是通过解析Java源码来实现的，因此如果要想实现想要的文档，还是需要遵循一定的规范。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.1 类注释、方法注释和属性注释&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们想生成类的注释，我们可以直接在类上加注释，也可以通过加@description来生成。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 用户接口类&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/api/user&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; Java旅途&lt;br/&gt; * &lt;span&gt;@Description&lt;/span&gt; 用户接口类&lt;br/&gt; * &lt;span&gt;@Date&lt;/span&gt; 2020-06-15 21:46&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/api/user&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们想生成方法的注释，只能直接加注释，不能通过加@description来生成。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 查询用户&lt;br/&gt; * &lt;span&gt;@param&lt;/span&gt; age 年龄&lt;br/&gt; * &lt;span&gt;@return&lt;/span&gt; R&amp;lt;User&amp;gt;&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/list&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; R&amp;lt;User&amp;gt; &lt;span&gt;list&lt;/span&gt;&lt;span&gt;(@RequestParam &lt;span&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    User user = &lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;&quot;Java旅途&quot;&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; R.ok(user);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JApiDocs可以自动生成实体类，关于实体类属性的注释有三种方式，生成的效果都是一样的，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 用户名称&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 用户年龄&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 用户名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;&lt;span&gt;// 用户年龄&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; String name;&lt;span&gt;// 用户名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;span&gt;// 用户年龄&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他除了支持咱们常用的model外，还支持IOS的model生成效果如下：&lt;/p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgiaG5BicLkVfmPrsb9MqYQCVtCjB2IUZXjSBEsDhr4zicfGSNQ47u2xqkcK42zaOMNuvbicGEYwWspxAnTG4NFK5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.65406162464986&quot; data-w=&quot;714&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgiaG5BicLkVfmPrsb9MqYQCVtCjB2IUZXSuJCnaojdk5YZ7LnuH0sR5zibDdTGKibJ5BzYYKTdDDLddAIAnT6icocQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.438375350140056&quot; data-w=&quot;714&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.2 请求参数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果提交的表单是 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 类型的&lt;code&gt;key/value&lt;/code&gt;格式，则我们通过@param注解来获取参数，在参数后面添加注释，示例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt;  * &lt;span&gt;@param&lt;/span&gt; age 年龄&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/list&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; R&amp;lt;User&amp;gt; &lt;span&gt;list&lt;/span&gt;&lt;span&gt;(@RequestParam &lt;span&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    User user = &lt;span&gt;new&lt;/span&gt; User(&lt;span&gt;&quot;Java旅途&quot;&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; R.ok(user);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的文档效果如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求参数&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果提交的表单是 &lt;code&gt;application/json&lt;/code&gt; 类型的&lt;code&gt;json&lt;/code&gt;数据格式，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt;  * &lt;span&gt;@param&lt;/span&gt; user&lt;br/&gt;  * &lt;span&gt;@return&lt;/span&gt;&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/add&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; R&amp;lt;User&amp;gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(@RequestBody User user)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; R.ok(user);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的文档效果如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;string //用户名称&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;age&quot;&lt;/span&gt;: &lt;span&gt;&quot;int //用户年龄&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.3 响应结果&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们知道，如果&lt;code&gt;Controller&lt;/code&gt;声明了&lt;code&gt;@RestController&lt;/code&gt;，SpringBoot会把返回的对象直接序列成Json数据格式返回给前端。JApiDocs也利用了这一特性来解析接口返回的结果，但由于JApiDocs是静态解析源码的，因此你要明确指出返回对象的类型信息，JApiDocs支持继承、泛型、循环嵌套等复杂的类解析。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们不需要再写注释，它会根据我们的返回结果进行解析，效果如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;code&quot;&lt;/span&gt;: &lt;span&gt;&quot;int&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;msg&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;string //用户名称&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;age&quot;&lt;/span&gt;: &lt;span&gt;&quot;int //用户年龄&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终，我们生成的接口文档，如下：&lt;/p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgiaG5BicLkVfmPrsb9MqYQCVtCjB2IUZXatmESj3XfnydX7G69LicicTE8Gyb9piaduK1F2TjoXeXo67KttcrC2JdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.44537037037037036&quot; data-w=&quot;1080&quot;/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、高级配置&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.1 @ApiDoc&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不希望把所有的接口都导出，我们可以在配置中设置config.setAutoGenerate(Boolean.FALSE);然后在想要生成的接口上添加@ApiDoc。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;@ApiDoc有以下三个属性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;result: 这个可以直接声明返回的对象类型，如果你声明了，将会覆盖SpringBoot的返回对象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;url: 请求URL，扩展字段，用于支持非SpringBoot项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;method: 请求方法，扩展字段，用于支持非SpringBoot项目&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@ApiDoc&lt;/span&gt;(result = User.class, url = &lt;span&gt;&quot;/api/user/view&quot;&lt;/span&gt;, method = &lt;span&gt;&quot;post&quot;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.2 @Ignore&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你不想导出对象里面的某个字段，可以给这个字段加上&lt;code&gt;@Ignore&lt;/code&gt;注解，这样JApiDocs导出文档的时候就会自动忽略掉了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Ignore&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; age;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JApiDocs就介绍到这里了，优势劣势大家很容易就看出来了。几乎不需要注释即可生成接口文档，仅有的几个注释我们也可以通过ide来自动生成。但是JApiDocs不具备Swagger在线调试功能。如果有一天JApiDocs支持在线调试后，那时候肯定会有一大波追随者，毕竟写代码的谁喜欢写多余的注解！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5a125b0f64b3351e8e548c9f272693e7</guid>
<title>C语言发展史的点点滴滴</title>
<link>https://toutiao.io/k/hyico27</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：李彦锋，腾讯 IEG 运营开发工程师&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一直想写一篇关于C语言的文章，里面包含C语言的发展史、创始人等相关事迹。但是却迟迟未写，主要原因是因为：在我看来，这个语言太过于伟大、耀眼。作为一个仅仅使用过C语言的普通开发来说，完全没资格去写。但是，最近在看过一篇丹尼斯.里奇写的《C语言发展史》之后，坚定了我写这篇文章的决心。不是歌功颂德，仅仅是以一种客观的视角去欣赏。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. C语言发展史&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何一种新事物的出现都不是来自于偶然，而是时代所驱使的必然结果。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 C语言有多伟大&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你问我：C语言有多伟大。那么，我可能会想一下，说：多伟大我不知道，但是我知道很伟大。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2611073137388926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicDwhZ1pSibZ5mhm3PgtCBWoFpicCkIDbW2WJPrib02UTIicAgzfLPMHjYIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1463&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里，我想说一句可能有点片面的话，就是：如今这世界上，凡是带电的地方，可能都会有她(C语言)或者她的子孙的影子。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;任何比C语言更低级的语言，都不足以完整地抽象一个计算机系统；任何比C高级的语言，都可以用C来实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2 C语言之父&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5030967127203431&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicc6nBl98SpgTGV1DD6zqFNt38YV3xaEwW3aokFtpicFqcNWc9Ciam0HCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2099&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Ritchie 贝尔实验室的个人主页地址
https://www.bell-labs.com/usr/dmr/www/index.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;丹尼斯·麦卡利斯泰尔·里奇（英语：Dennis MacAlistair Ritchie，1941年9月9日－2011年10月12日），美国计算机科学家。黑客圈子通常称他为“dmr”。他是C语言的创造者、Unix操作系统的关键开发者，对计算机领域产生了深远影响，并与肯·汤普逊同为1983年图灵奖得主。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.17705854355069015&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peic6ibP2dBUGZMdqGA59zz4usFWc4zGmQ11IAOgClzhhGCdNdKuSuuDgiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2101&quot;/&gt;&lt;figcaption&gt;丹尼斯.里奇 生平时间线&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;麻省理工大学计算机系的马丁教授评价说：&quot;如果说，乔布斯是可视化产品中的国王，那么里奇就是不可见王国中的君主。乔布斯的贡献在于，他如此了解用户的需求和渴求，以至于创造出了让当代人乐不思蜀的科技产品。然而，却是里奇先生为这些产品提供了最核心的部件，人们看不到这些部件，却每天都在使用着。&quot;&lt;/p&gt;&lt;p&gt;克尼汉评价道：牛顿说他是站在巨人的肩膀上，如今，我们都站在里奇的肩膀上。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3 C语言的先辈&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为了简洁起见，我(Dennis M.Ritchie)省略了对C本身，其父级B [Johnson 73]和其祖父母BCPL [Richards 79]的完整描述，而只关注每种语言的特征元素以及它们如何演变。&lt;/p&gt;&lt;p&gt;This paper is about the development of the C programming language, the influences on it, and the conditions under which it was created. For the sake of brevity, I omit full descriptions of C itself, its parent B [Johnson 73] and its grandparent BCPL [Richards 79], and instead concentrate on characteristic elements of each language and how they evolved.&lt;/p&gt;&lt;p&gt;https://www.bell-labs.com/usr/dmr/www/chist.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段文字出自C语言之父&lt;code&gt;丹尼斯.M.里奇&lt;/code&gt;所写的一篇关于《C语言发展史》的文章，文中明确指出C语言源自于B、BCPL两种语言。可以把C语言看做是站在巨人的肩上，顺应时代潮流的后浪。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3.1 BCPL语言之父&lt;/span&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8181818181818182&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicibPwqueVyb3FBJT6vMnRWkErk0EhpEJgayuB4kPkwGaGEGs4zbiaLKHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1023&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;Martin Richards&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Martin Richards&#x27;s BCPL Reference Manual, 1967
https://web.archive.org/web/20080622171914/http://cm.bell-labs.com/cm/cs/who/dmr/bcpl.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;马丁·理察德（英语：Martin Richards，1940年7月21日－），生于英国，计算机科学家，为BCPL编程语言的发明者，发展了TRIPOS操作系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1966年，马丁·理察德在剑桥大学，以CPL编程语言为基础，发明了BCPL编程语言。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3.2 B语言之父&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6890581717451524&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicGuWvVQH2KKib1Ep1f6QXQhzk6icqoDib535V64KHbnn1ciaFyXjuFC1JLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1444&quot;/&gt;&lt;figcaption&gt;Kenneth Lane Thompson&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;肯尼斯·蓝·汤普逊（英语：Kenneth Lane Thompson，1943年2月4日－）小名肯·汤普逊（英语：Ken Thompson），美国计算机科学学者和工程师。黑客文化圈子通常称他为“ken”。在贝尔实验室工作期间，汤普逊设计和实现了Unix操作系统。他创造了B语言(基于BCPL) — C语言的前身，而且他是Plan 9操作系统的创造者和开发者之一。与丹尼斯·里奇同为1983年图灵奖得主。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2006年，汤普逊进入Google公司工作，与他人共同设计了Go语言。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3.3 一组Ken与Dennis的照片&lt;/span&gt;&lt;/h5&gt;&lt;/section&gt;&lt;section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;11&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;日益精进 &lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;  站在巨人的肩上&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7603021978021978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicUFcCDxicqZFLTibEeibxqw1icSBtrDycsfbyHTS8n7sibpDD4NqHFblOPvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1456&quot;/&gt;&lt;figcaption&gt;坐着的是Ken 站着的是Dennis&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;18&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;与优秀之人为伍 &lt;/p&gt;&lt;p&gt;&lt;span&gt;不畏得失，做有趣的事&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8584202682563339&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicJmt7pztHkPWeniaabAQgW6uia1wNQcpahicRjvT8f6OOOm3Uj28ba44fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1342&quot;/&gt;&lt;figcaption&gt;左Ken 右Dennis | 右上角：Unix标识牌&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;51&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;言传身教&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;感谢丹尼斯.里奇留给了这世界一本“C语言圣经”&lt;/p&gt;&lt;p&gt;可惜的是，当年笔者大学学的是谭浩强谭老师的C语言 &lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7221467391304348&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicxKO7CLFpYulFN0PHF0MvpL04aV1VY97axfw60oqicnr9lSXWgQe0U3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1472&quot;/&gt;&lt;figcaption&gt;Dennis与《The C Programming Language》&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;22&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;互相成就 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;终成正果 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你做了什么，最终会被世人看到&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7053422370617696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicSylIQKc19nicVnuxJMMrzS7Af11goNEtFewyW9aPFVekl8FXtUibtpyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;1999年获得美国国家技术奖 [左一：Ken | 左二：Dennis | 右一：克林顿]&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这些老照片中，我隐隐约约看到了几行小字，写着：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.与优秀之人为伍 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.互相成就&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想，有多么重要？&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.4 C语言时间线&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3628150261531146&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicq3zKQ1BvMaunntibQvl1lZmxJickqEyJ7jrQAhsib65DGib7f8MkI81ADQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2103&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Computer Languages History
https://www.levenez.com/lang/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中时间线，可以明显的看出C语言的起源以及时间节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候不得不说时势造英雄，在1969~1971年之间著名的操作系统Unix从肯.汤普逊手中诞生，作为一种大型的系统性软件来说，极其需要一种可靠的高级语言的出现(当时的低级语言指的是汇编，因为之前的操作系统是用汇编写的)。这个时候的丹尼斯.里奇也没闲着，在对B语言改良之后，就诞生了带有类型的C语言(据里奇自己说，有一段时间称这种改良的语言为&lt;code&gt;NB&lt;/code&gt;。即：&lt;code&gt;new B&lt;/code&gt;。不过，在我们这些吃瓜群众眼中看来也确实NB)。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;In 1971 I began to extend the B language by adding a character type and also rewrote its compiler to generate PDP-11 machine instructions instead of threaded code. Thus the transition from B to C was contemporaneous with the creation of a compiler capable of producing programs fast and small enough to compete with assembly language. I called the slightly-extended language NB, for `new B.&#x27;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5 unix时间线&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24619047619047618&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicIZwCBc2tHdLX6Dq1awlUOfEiaWiar5K5jlwraxdEianNjJ4Opvv6YXrtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2100&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Unix的诞生与C语言被广泛的传播、使用，有着密切的联系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图时间线只显示前几个与C语言在相同时间段内诞生的Unix版本(当然，感兴趣的话，可以查询Unix相关发展史，绝对会让你大吃一惊。其中最著名的几个分支：BSD、minix、Linux...)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，通过在网上找得到的部分Unix内核源码，来追溯一下C语言出现的时机。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5.1 PDP-Unix&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PDP-Unix系统内核代码文件&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peic5GkspibJOD3VKBO4IUdichoEvgB4UIwP72uKd6ojjEv1aS5icPdkKqQQQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;764.1028938906752&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;1431.9163987138263&quot; data-ratio=&quot;1.87565445026178&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicXqKicx5grHpsgFwEuqO9dHialYoNttgk0U5hRwQfk2BsXbJ5QdRTAfQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;764&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PDP-7 Unix
https://minnie.tuhs.org/cgi-bin/utree.pl?file=PDP7-Unix&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到基本都是用汇编写的(文件名后缀.s)。为什么用&lt;code&gt;基本&lt;/code&gt;这个词呢？因为，在系统里面有一部分命令是用B语言写的。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5.2 First Edition Unix&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;First Edition Unix系统内核代码文件&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;2.2524271844660193&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicWKDrZ2nmxibAykiaXLZtwDVV9prfyOzAljiaFxoJCibhLLDMr2btcOEafw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;721&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V1&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，还是用汇编写的(文件名后缀.s)。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5.3 Second Edition Unix&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Second Edition Unix系统内核代码文件&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peic8XRuWfNib5UyG9DPZcXWTYpLhTZHS0MheEQfJ2TDdIHjE9OBnrZhKqw/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;881.1486486486486&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;1367.4121621621623&quot; data-ratio=&quot;1.5516458569807037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicRlGDcbcDiaSuLys5fzkVXWiaxK6icDYkxX4TgXoSvtXefiaZ1pRlxAlUBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;881&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Second Edition Unix
The second edition of Unix was developed for the PDP-11 at Bell Labs by Ken Thompson, Dennis Ritchie and others. It extended the First Edition with more system calls and more commands. This edition also saw the beginning of the C language, which was used to write some of the commands.&lt;/p&gt;&lt;p&gt;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V2&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这个版本，已经可以看到C语言的身影了。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.5.4 Unix与C语言&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从C语言在Unix V2版本出现之后，Unix的V3版本开始，已经可以在Unix内核中见到大量C语言编写的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;据里奇所说：到1973年初，现代C的基本知识已经完成。C语言和编译器强大到，足以让我们在当年夏天用C重写PDP-11的Unix内核 (也就是Unix的V3版本)。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;By early 1973, the essentials of modern C were complete. The language and compiler were strong enough to permit us to rewrite the Unix kernel for the PDP-11 in C during the summer of that year.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到了这个时间节点，基本可以肯定的是C语言、Unix的大部分核心都已经完善。剩下要做的就是，可移植性、标准化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面的故事，大家可能也听说过：后来学术和政府组织中都在使用Unix，也正是由于Unix的风靡与兴盛，带动了C语言被广泛的传播、使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在1980年代，C语言的使用广泛传播，并且几乎所有机器体系结构和操作系统都可以使用编译器。尤其是，它已成为个人计算机的编程工具，无论是用于这些机器的商业软件制造商，还是对编程感兴趣的最终用户，都非常受欢迎。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;During the 1980s the use of the C language spread widely, and compilers became available on nearly every machine architecture and operating system; in particular it became popular as a programming tool for personal computers, both for manufacturers of commercial software for these machines, and for end-users interested in programming.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也就是所谓的互相成就。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一句话概括就是：不畏得失、日渐精进，最终互相成就。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.6 第一个C语言编译器是怎样编写的？&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你有没有想过，大家都用C语言或基于C语言的语言来写编译器，那么世界上第一个C语言编译器又是怎么编写的呢？这不是一个“鸡和蛋”的问题……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾一下C语言历史：Tomphson在BCPL的基础上开发了B语言，Ritchie又在B语言的基础上成功开发出了现在的C语言。在C语言被用作系统编程语言之前，Tomphson也用过B语言编写过操作系统。可见在C语言实现以前，B语言已经可以投入实用了。因此第一个C语言编译器的原型完全可能是用B语言或者混合B语言与PDP汇编语言编写的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们现在都知道，B语言的执行效率比较低，但是如果全部用汇编语言来编写，不仅开发周期长、维护难度大，更可怕的是失去了高级程序设计语言必需的移植性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以早期的C语言编译器就采取了一个取巧的办法：先用汇编语言编写一个C语言的一个子集的编译器，再通过这个子集去递推，进而完成完整的C语言编译器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;详细的过程如下：先创造一个只有C语言最基本功能的子集，记作C0语言，C0语言已经足够简单了，可以直接用汇编语言编写出C0的编译器。依靠C0已有的功能，设计比C0复杂，但仍然不完整的C语言的又一个子集C1语言，其中C0属于C1，C1属于C，用C0开发出C1语言的编译器。在C1的基础上设计C语言的又一个子集C2语言，C2语言比C1复杂，但是仍然不是完整的C语言，开发出C2语言的编译器 …… 如此直到CN，CN已经足够强大了，这时候就足够开发出完整的C语言编译器的实现了。至于这里的N是多少，这取决于你的目标语言（这里是C语言）的复杂程度和程序员的编程能力。简单地说，如果到了某个子集阶段，可以很方便地利用现有功能实现C语言时，那么你就找到N了。下面的图说明了这个抽象过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28564638783269963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicyGHgVzm6rE4oKTxG3W3hibVCZdWcNyWoYISvaby14yxQAfBzzfPgFLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://kknews.cc/tech/bx2r3j.html
介绍一个概念，“自编译”Self-Compile，也就是对于某些具有明显自举性质的强类型（所谓强类型就是程序中的每个变量必须声明类型后才能使用，比如C语言，相反有些脚本语言则根本没有类型这一说法）编程语言，可以借助它们的一个有限小子集，通过有限次数的递推来实现对它们自身的表述，这样的语言有C、Pascal、Ada等等，至于为什么可以自编译，可以参见清华大学出版社的《编译原理》，书中实现了一个Pascal的子集的编译器。&lt;/p&gt;&lt;p&gt;https://zhuanlan.zhihu.com/p/136102461&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这个过程也在Unix V2版本中找到了证据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1492329149232914&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peiccTatQy59t74B6Wh2KV62qibpsRw3Wfuoo8WY1VJRubpibeHUsdmSXWYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;肯恩·汤普森，丹尼斯·里奇和其他人在贝尔实验室为PDP-11开发了Unix的第二版。它通过更多的系统调用和更多的命令扩展了第一版。此版本还看到了C语言的开始，该语言用于编写一些命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此处的代码仅是某些命令，某些库函数和C编译器的源代码。c /中的文件来自 last1120c.tar.gz &lt;span&gt;磁带，并构成了第二版Unix的有效C编译器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载地址：&lt;span&gt;http://minnie.tuhs.org/Archive/Applications/Early_C_Compilers/last1120c.tar.gz &lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The second edition of Unix was developed for the PDP-11 at Bell Labs by Ken Thompson, Dennis Ritchie and others. It extended the First Edition with more system calls and more commands. This edition also saw the beginning of the C language, which was used to write some of the commands.&lt;/p&gt;&lt;p&gt;The code here is only the source to some of the commands, some of the library functions, and the C compiler. The files in c/ come from the last1120c.tar.gz tape, and form a working C compiler for Second Edition Unix.&lt;/p&gt;&lt;p&gt;https://minnie.tuhs.org/cgi-bin/utree.pl?file=V2&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下载源码解压缩之后，目录结构如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5242320819112628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicF6TGuicWaicXgj9t1f7XEhTRa4zHBvqRnwNHic7wlSgkR5qhVT0D9eqbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1465&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感兴趣的小伙伴可以下载下来研究一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. BCPL、B、C语言比较&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要找到一种好的方式，来进行编程语言之间比较的话，那么非代码莫属。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 3种语言代码示例&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面分别使用BCPL、B、C三种语言实现一个简单的程序：程序将三个数字a、b、c相加，并将结果赋值给sum，最后打印总和。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1.1 BCPL语言示例&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;BCPL
https://zh.wikipedia.org/wiki/BCPL&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;GET &lt;span&gt;&quot;libhdr&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;LET start() = VALOF&lt;br/&gt;{ LET a, b, c = 1, 2, ,3&lt;br/&gt;&lt;br/&gt;    sum := a + b + c&lt;br/&gt;    writen(sum)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;LET 声明变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;:=&lt;/code&gt; 符号为赋值符号
Go中也有该符号，表示函数内部局部变量。这里感觉很有意思的一点是：最初B语言之父&lt;code&gt;肯.汤普逊&lt;/code&gt;把&lt;code&gt;:=&lt;/code&gt;符号改成了&lt;code&gt;=&lt;/code&gt;符号。现在，也作为Go语言之父之一，又把&lt;code&gt;:=&lt;/code&gt;符号请回来了(冥冥之中的命运~)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;从BCPL到B的过渡中，决定使用单个字符 = 代替赋值 :=&lt;/p&gt;&lt;p&gt;Other fiddles in the transition from BCPL to B were introduced as a matter of taste, and some remain controversial, &lt;code&gt;for example the decision to use the single character = for assignment instead of :=&lt;/code&gt;. Similarly, B uses /**/ to enclose comments, where BCPL uses //, to ignore text up to the end of the line. The legacy of PL/I is evident here. (C++ has resurrected the BCPL comment convention.) Fortran influenced the syntax of declarations: B declarations begin with a specifier like auto or static, followed by a list of names, and C not only followed this style but ornamented it by placing its type keywords at the start of declarations.&lt;/p&gt;&lt;p&gt;https://www.bell-labs.com/usr/dmr/www/chist.html&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1.2 B语言示例&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;A TUTORIAL INTRODUCTION TO THE LANGUAGE B
https://web.archive.org/web/20070807110157/http://cm.bell-labs.com/cm/cs/who/dmr/btut.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;B语言的语言结构&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    -- statements --&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;newfunc(arg1, arg2) {&lt;br/&gt;    -- statements --&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;fun3(arg) {&lt;br/&gt;    -- more statements --&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;B语言代码示例&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;  auto a, b, c, sum;&lt;br/&gt;&lt;br/&gt;  a = 1; b = 2; c = 3;&lt;br/&gt;  sum = a+b+c;&lt;br/&gt;  putnumb(sum);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;语句&lt;code&gt;auto ...&lt;/code&gt;是一个声明。即，它定义了要在函数内使用的局部变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;putnumb 是一个带参数的库函数，它将在终端上打印一个数字&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1.3 C语言示例&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; a,b,c,sum;&lt;br/&gt;  &lt;br/&gt;  a=&lt;span&gt;1&lt;/span&gt;; b=&lt;span&gt;2&lt;/span&gt;; c=&lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;  sum = a+b+c;&lt;br/&gt;  &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%d&quot;&lt;/span&gt;, sum);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 示例代码中三者的区别&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面例子可以三者的区别：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;C语言写法更接近于B语言&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BCPL、B语言都是无类型的语言，用word/cell表示一个固定长度的bit。C语言是有类型的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一些地方，你可能感兴趣：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;++&lt;/code&gt;、&lt;code&gt;--&lt;/code&gt; 符号是Thompson发明的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt; 是在C语言引入的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;查了好久只找到了BCPL、B语言的部分代码片段，至于能不能跑起来，我也不知道 &lt;code&gt;^_^&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果想要知晓三者的具体区别的话，建议阅读丹尼斯.里奇关于《C语言发展史》的文章&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BCPL、B语言也有经历过若干次版本迭代 (因为，网上找到的代码片段有很多写法不一样的地方。比如说，维基百科中找到的B代码片段，与在Unix内核前几个版本中找到的B代码片段写法就不一样。个人推测是版本问题，不同的版本不同的写法)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C语言更接近与B语言，或着说是在B的基础上不断的添加了很多新特性
(抛出2个问题：&lt;code&gt;1.里奇起名字时为什么不像C++一样，起名叫B++ ？&lt;/code&gt; &lt;code&gt;2.为什么C++用了2个加号，而不是一个加号，叫C+ ？&lt;/code&gt;  欢迎脑洞够大的同学在评论留言！)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果有高手觉得上面的代码片段有问题或者知道怎么跑起来的话，可以私下交流&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 历史为什么选择C语言&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1960s年代后期，贝尔实验室对计算机系统的研究进入繁盛时期。MIT、General Electric、Bell实验室合作的Mutlics项目以失败而告终(1969年左右)。就是在这个时期，Ken Tompson开始写Mutlics的替代品，他希望按照自己的设计构造一个令人舒服的计算系统（也就是Unix）。后来在写出第一个版本的Unix时，觉得Unix上需要一个新的系统编程语言，他创造了一个B语言。B语言是没有类型的C，准确说B语言是Tompson把BCPL挤进8K内存，被其个人大脑过滤后的产生的语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于B语言存在的一些问题，导致其只是被用来写一些命令工具使用。恰好在这个时期，Ritchie在B语言的基础上，进行了重新的设计改良，从而诞生了C语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1973年，C语言基本上已经完备，从语言和编译器层面已经足够让Tompson和Ritchie使用C语言重写Unix内核。后来，Unix在一些研究机构、大学、政府机关开始慢慢流行起来，进而带动了C语言的发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1978年，K&amp;amp;R编写的《The C Programming Language》出版，进一步推动了C语言的普及。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用一句话总结就是：对的时间、对的地点，出现了对的人以及工具 (Unix与C语言的关系，有点像GNU与Linux kernel的关系，都是互相成就)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 标准C库及代码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;C语言及其标准经过若干次迭代之后，就成了今天大家看到的样子。其标准中指定了很多C标准库，而不同的系统都有自己不同的代码实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，Linux内核中也有实现了标准C库的代码，下面一起欣赏她的美。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 标准C库&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ANSI C共包括15个头文件。1995年，Normative Addendum 1（NA1）批准了3个头文件（iso646.h、wchar.h和wctype.h）增加到C标准函数库中。C99标准增加6个头文件（complex.h、fenv.h、inttypes.h、stdbool.h、stdint.h和tgmath.h）。C11标准中又新增了5个头文件（stdalign.h、stdatomic.h、stdnoreturn.h、threads.h和uchar.h）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，C标准函数库共有29个头文件：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4557392996108949&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peiccChem1qJVnRnDEG4xNY7AjpGzQ3NIVtkCuDJKsQNXlz6HlBAclmeXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2056&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://www.wikiwand.com/zh-sg/C%E6%A8%99%E6%BA%96%E5%87%BD%E5%BC%8F%E5%BA%AB#/%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 linux/lib/string.c&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;linux kernel版本：&lt;code&gt;4.18.13&lt;/code&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;lnux kernel 地址
https://www.kernel.org/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面列出3个字符串处理函数 strcpy()、strncpy()、strncat()。代码出自Linus Benedict Torvalds之手，为什么这么说？看代码头部注释，还是那个熟悉的味道&lt;code&gt;stupid&lt;/code&gt;。看过git源代码的人应该也会知道，git源码中也有类似注释。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// SPDX-License-Identifier: GPL-2.0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;/*&lt;br/&gt; *  linux/lib/string.c&lt;br/&gt; *&lt;br/&gt; *  Copyright (C) 1991, 1992  Linus Torvalds&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/*&lt;br/&gt; * stupid library routines.. The optimized versions should generally be found&lt;br/&gt; * as inline code in &amp;lt;asm-xx/string.h&amp;gt;&lt;br/&gt; *&lt;br/&gt; * These are buggy as well..&lt;br/&gt; *&lt;br/&gt; * * Fri Jun 25 1999, Ingo Oeser &amp;lt;ioe@informatik.tu-chemnitz.de&amp;gt;&lt;br/&gt; * -  Added strsep() which will replace strtok() soon (because strsep() is&lt;br/&gt; *    reentrant and should be faster). Use only strsep() in new code, please.&lt;br/&gt; *&lt;br/&gt; * * Sat Feb 09 2002, Jason Thomas &amp;lt;jason@topic.com.au&amp;gt;,&lt;br/&gt; *                    Matthew Hawkins &amp;lt;matt@mh.dropbear.id.au&amp;gt;&lt;br/&gt; * -  Kissed strtok() goodbye&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// .......omit other......&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ...... here is my love code  .....&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifndef&lt;/span&gt; __HAVE_ARCH_STRCPY&lt;/span&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * strcpy - Copy a %NUL terminated string&lt;br/&gt; * @dest: Where to copy the string to&lt;br/&gt; * @src: Where to copy the string from&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;undef&lt;/span&gt; strcpy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;strcpy&lt;/span&gt;&lt;span&gt;(&lt;span&gt;char&lt;/span&gt; *dest, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *src)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;char&lt;/span&gt; *tmp = dest;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;while&lt;/span&gt; ((*dest++ = *src++) != &lt;span&gt;&#x27;\0&#x27;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;/* nothing */&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; tmp;&lt;br/&gt;}&lt;br/&gt;EXPORT_SYMBOL(&lt;span&gt;strcpy&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifndef&lt;/span&gt; __HAVE_ARCH_STRNCPY&lt;/span&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * strncpy - Copy a length-limited, C-string&lt;br/&gt; * @dest: Where to copy the string to&lt;br/&gt; * @src: Where to copy the string from&lt;br/&gt; * @count: The maximum number of bytes to copy&lt;br/&gt; *&lt;br/&gt; * The result is not %NUL-terminated if the source exceeds&lt;br/&gt; * @count bytes.&lt;br/&gt; *&lt;br/&gt; * In the case where the length of @src is less than  that  of&lt;br/&gt; * count, the remainder of @dest will be padded with %NUL.&lt;br/&gt; *&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;strncpy&lt;/span&gt;&lt;span&gt;(&lt;span&gt;char&lt;/span&gt; *dest, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *src, &lt;span&gt;size_t&lt;/span&gt; count)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;char&lt;/span&gt; *tmp = dest;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;while&lt;/span&gt; (count) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; ((*tmp = *src) != &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;   src++;&lt;br/&gt;  tmp++;&lt;br/&gt;  count--;&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; dest;&lt;br/&gt;}&lt;br/&gt;EXPORT_SYMBOL(&lt;span&gt;strncpy&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifndef&lt;/span&gt; __HAVE_ARCH_STRLCPY&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifndef&lt;/span&gt; __HAVE_ARCH_STRNCAT&lt;/span&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * strncat - Append a length-limited, C-string to another&lt;br/&gt; * @dest: The string to be appended to&lt;br/&gt; * @src: The string to append to it&lt;br/&gt; * @count: The maximum numbers of bytes to copy&lt;br/&gt; *&lt;br/&gt; * Note that in contrast to strncpy(), strncat() ensures the result is&lt;br/&gt; * terminated.&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;strncat&lt;/span&gt;&lt;span&gt;(&lt;span&gt;char&lt;/span&gt; *dest, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *src, &lt;span&gt;size_t&lt;/span&gt; count)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;char&lt;/span&gt; *tmp = dest;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; (count) {&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (*dest)&lt;br/&gt;   dest++;&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; ((*dest++ = *src++) != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (--count == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    *dest = &lt;span&gt;&#x27;\0&#x27;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; tmp;&lt;br/&gt;}&lt;br/&gt;EXPORT_SYMBOL(&lt;span&gt;strncat&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;#&lt;span&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;ifndef&lt;/span&gt; __HAVE_ARCH_STRLCAT&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// .......omit other......&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ...... here is my love code  .....&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一次跟同学一起看这些代码的时候，他说了一句话：这才叫代码，其他的都是&lt;code&gt;s-h-X-t&lt;/code&gt;。现在回想起，自己在实现这些代码时，写了一坨不知道是什么的东西。哎，代码比代码要扔~&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;阅读他人代码, 也是一种进步、成长&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 廉颇老矣, 尚能饭否？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;《史记·廉颇蔺相如列传》记载，廉颇被免职后，跑到魏国，赵王想再用他，派人去看他的身体情况，廉颇之仇郭开贿赂使者，使者看到廉颇，廉颇为之米饭一斗，肉十斤，被甲上马，以示尚可用。使者回来报告赵王说:&quot;廉颇将军虽老，尚善饭，然与臣坐，顷之三遗矢(通假字，即屎)矣。&quot;赵王以为廉颇已老，遂不用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经历过几十年的风雨洗礼，C语言可谓风光无数，这世界上随处可见它的身影。但是，同时在一些人眼里，可能觉得C语言已是暮年(将近50岁)、老矣。如同下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3541495480690222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicnJWMa4fRMwqK6Xm5vdM2qlicS9oJYmjN1pfV8vtIjX6XxofJhv4hxQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1217&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你真这样想，那你就错了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TIOBE Index for September 2020&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.tiobe.com/tiobe-index/&quot; textvalue=&quot;https://www.tiobe.com/tiobe-index/&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TIOBE 2020-09 编程语言排行榜告诉你，C语言宝刀未老，还是那个风采耀眼的少年。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42212725546058877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicf8r6GCqia1mGb3RuRGyW80COZL4g5SsgibLy0iaSc70kv5nZlP5teffiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;个人想说的是，只要计算机还是基于冯诺依曼体系结构，芯片还是基于物理制程。那么，都会有一片C的天空。因为，她知道一个最接近天空的地方(C是最接近汇编、机器语言的高级语言之一)。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;任他上层应用改朝换代，我（C语言）自岿然不动。这就是C，我心中的C语言。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;猛然间发现已经到了总结，但是还觉得仍旧意犹未尽，这并不是我心目中最真实的那个她。但是，我还是希望你看完本文之后，能够多少了解与熟悉C的美与真实。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.121751025991792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvauJQ9hhTLHlZFBgFfR79peicViaduncNibsxox1R35FffXl0gcO3pDbcC2RG3SbXKIX2OlgZWzmygDSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1462&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后想说的是：纵使千言万语也说不尽C语言的重要性，这些文字也仅仅只是冰山一角。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鉴于个人能力有限，如有问题或者缺陷，欢迎指正。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在整理的过程中，部分参考、引用下面链接地址内容：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[1] https://www.bell-labs.com/usr/dmr/www/index.html 里奇贝尔实验室主页&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[2] https://www.bell-labs.com/usr/dmr/www/chist.html C语言发展史&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[3] https://www.bell-labs.com/usr/dmr/www/1stEdman.html Unix Programmer&#x27;s Manual&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[4] https://www.bell-labs.com/usr/dmr/www/bcpl.html Martin Richards&#x27;s BCPL  Manual&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[5] https://www.levenez.com/lang/  Computer Languages History&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[6] https://www.levenez.com/unix/  Unix History&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[7] https://minnie.tuhs.org/cgi-bin/utree.pl The Unix Tree(可以看到很多老系统的源代码)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[8] https://zh.wikipedia.org/wiki/丹尼斯·里奇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[9] https://www.tiobe.com/tiobe-index/  TIOBE&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[10] http://web.eah-jena.de/~kleine/history/ Historic Documents in Computer Science&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.729264475743349&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvatricjRxhpM1x45aB6doaVg7WMhINPwOiaqpskia1kH7hgibO0dicW2HLcW8HRGMzESQwehIcyckLXtwsA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9649812142c42d5a8938e1b64cd422dd</guid>
<title>VS Code 的 Kubernetes 扩展：实用的 Kubernetes 工具</title>
<link>https://toutiao.io/k/k5uam9i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;在开发云原生应用时，总是免不了与 Kubernetes 打交道。与 Kubernetes 进行交互的方式主要有两种：&lt;/span&gt;&lt;span&gt;&lt;span&gt;第一种方式是使用命令行工具 &lt;/span&gt;kubectl&lt;span&gt;，第二种方式是使用 Kubernetes &lt;/span&gt;仪表盘图形界面&lt;span&gt;（Kubernetes Dashboard）&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;span&gt; 的优势在于简单高效，方便进行自动化操作；图形界面的优势在于使用简单，并且直观易懂。同样的，这两种方式也有各自的缺点。本文介绍的 VS Code 的 Kubernetes 扩展是一个很好的与 Kubernetes 交互的工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;安装&lt;/h3&gt;&lt;p&gt;该扩展的安装很简单，只需要在 VS Code 扩展中搜索并下载即可。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;333&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9fTQtY5COfGAhVFBVmPryrVrAGReibl7eqHia1ricaJVxbet449WqKxhgYF8PxaILict64rcYPBlaJtkLxlFibX3QzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;资源列表&lt;/h3&gt;&lt;p&gt;扩展安装完成之后，可以在左边的侧边栏看到 Kubernetes 的图标。该扩展会自动使用本地的 &lt;code&gt;kubectl&lt;/code&gt; 配置文件 （&lt;code&gt;~/.kube/config&lt;/code&gt;）来读取可用的 Kubernetes 集群。每个集群都会列出其中包含的资源。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;928&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.6056338028169015&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9fTQtY5COfGAhVFBVmPryrVrAGReibl7eLibptm3T0smhqlrd2P1wzpjmVo54mTyAvHELC6SOGYGcoFd2IhicJXew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;710&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;资源声明&lt;/h3&gt;&lt;p&gt;当点击某个资源时，会自动打开该资源的 YAML 声明。在编辑器中打开之后，可以方便的对 YAML 声明进行查看，充分利用 VS Code 的强大编辑功能。&lt;/p&gt;&lt;h3&gt;日志&lt;/h3&gt;&lt;p&gt;对于每个 Pod，右键点击可以方便的查看容器的日志，也就是菜单中的查看日志（Show Logs）和自动更新日志（Follow Logs），分别对应于 &lt;code&gt;kubectl logs&lt;/code&gt; 和 &lt;code&gt;kubectl logs -f&lt;/code&gt; 。&lt;/p&gt;&lt;h3&gt;终端&lt;/h3&gt;&lt;p&gt;使用 Pod 右键菜单的 Terminal 可以在 VS Code 中打开连接到容器的终端。这种方式比使用 &lt;code&gt;kubectl exec&lt;/code&gt; 要简单得多。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;90&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.15546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9fTQtY5COfGAhVFBVmPryrVrAGReibl7ePEvDly59CtvyKxhafHle8B3iccq7REUO9JekYKhhZ9fp1lGJyjMvG1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;端口转发&lt;/h3&gt;&lt;p&gt;另外一个实用功能是右键菜单中的端口转发（Port Forward），相当于 &lt;code&gt;kubectl port-forward&lt;/code&gt; 命令。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;80&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.13833333333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9fTQtY5COfGAhVFBVmPryrVrAGReibl7euhVIgwbRY78bd372p7hPsVbzbya8KMNcRVgyEz6MrWost9bp2R6LOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Helm集成&lt;/h3&gt;&lt;p&gt;该扩展还提供了对 Helm 的集成，可以方便的查看 Helm 发布，以及 Helm 仓库中的图表。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;945&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.6345609065155808&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9fTQtY5COfGAhVFBVmPryrVrAGReibl7eia8GBiaVoIErXHfnI1LIwksDXwtIerqxj6J790e0IYibwoRlI3cyD5Syg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在日常的 Kubernetes 开发中，推荐使用 VS Code 上的这个扩展。&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>