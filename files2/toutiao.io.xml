<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6fdf3b29ad0c3a1497914310526523f6</guid>
<title>一文理解 Redis 底层数据结构</title>
<link>https://toutiao.io/k/a3gplbq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;Redis的5种常见数据结构：字符串(String)、列表(List)、散列(Hash)、集合(Set)、有序集合(Sorted Set)。这些都是Redis对外暴露的数据结构，本文将介绍这些数据结构的底层数据结构的实现。&lt;/p&gt;&lt;p data-source-line=&quot;3&quot;&gt;Redis底层数据结构有六种：&lt;/p&gt;&lt;ul data-source-line=&quot;4&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;简单动态字符串（SDS）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;列表&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字典&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;整数集合&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跳跃表&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;压缩列表&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;快速列表&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-source-line=&quot;12&quot;&gt;简单动态字符串（SDS）&lt;/h2&gt;&lt;p data-source-line=&quot;14&quot;&gt;SDS是&quot;simple dynamic string&quot;的缩写。Redis中所有场景中出现的字符串，基本都是由SDS来实现的。&lt;/p&gt;&lt;p data-source-line=&quot;16&quot;&gt;使用场景：&lt;/p&gt;&lt;ul data-source-line=&quot;17&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;所有非数字的key。例如：&lt;code&gt;set msg &quot;hello world&quot;&lt;/code&gt;中的key msg.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;字符串数据类型的值。例如：&lt;code&gt;set msg &quot;hello world&quot;&lt;/code&gt;中的msg的值&lt;code&gt;&quot;hello wolrd&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;非字符串数据类型中的“字符串值”。例如：&lt;code&gt;RPUSH fruits &quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;&lt;/code&gt;中的&lt;code&gt;&quot;apple&quot; &quot;banana&quot; &quot;cherry&quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;21&quot;&gt;SDS结构图：&lt;/p&gt;&lt;p data-source-line=&quot;23&quot;&gt;&lt;img data-ratio=&quot;0.37174721189591076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwQMQXH7jatA6qic7FxhOlD3lMxqC4iaGuE7grIlFJ6sicCCRbynhTicXRmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;538&quot;/&gt;&lt;/p&gt;&lt;ul data-source-line=&quot;25&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;len：记录当前已使用的字节数（不包括&#x27;\0&#x27;），获取SDS长度的复杂度为O(1)（C 语言中获取字符串长度的时间复杂度为 O(N)）。此外，len值还避免了二进制安全与缓存区溢出的问题。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;alloc：记录当前字节数组总共分配的字节数量（不包括&#x27;\0&#x27;）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;flags：标记当前字节数组的属性，是sdshdr8还是sdshdr16等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;buf：字节数组，用于保存字符串，包括结尾空白字符&#x27;\0&#x27;。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-source-line=&quot;30&quot;&gt;&lt;code&gt;&lt;span&gt;// flags&lt;span&gt;值定义&lt;/span&gt;(&lt;span&gt;为了节约头部空间，在&lt;/span&gt;Redis3.2&lt;span&gt;开始，增加&lt;/span&gt;flag&lt;span&gt;字段。&lt;/span&gt;SDS&lt;span&gt;由一种数据结构变成了&lt;/span&gt;5&lt;span&gt;种数据结构，会根据&lt;/span&gt;SDS&lt;span&gt;存储的内容长度来选择不同的结构，以达到节省内存的效果&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; SDS_TYPE_5  0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; SDS_TYPE_8  1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; SDS_TYPE_16 2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; SDS_TYPE_32 3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;define&lt;/span&gt; SDS_TYPE_64 4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-source-line=&quot;39&quot;&gt;&lt;p&gt;注：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;二进制安全：通俗的讲，C语言中，用“\0”表示字符串的结束，如果字符串本身就有“\0”字符，字符串就会被截断，即非二进制安全；若通过某种机制，保证读写字符串时不损害其内容，这就是二进制安全。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因为C字符串不记录自身的长度，所以strcat会假定用户在执行这个函数时，已经为dest分配足够多的内存了，可以容纳src字符串中的所有内容，而一旦这个假设不成立，就会产生缓存区溢出。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h3 data-source-line=&quot;43&quot;&gt;频繁内存分配问题处理&lt;/h3&gt;&lt;p data-source-line=&quot;45&quot;&gt;每次增长或者缩短一个字符，程序都需要对保存这个字符串的数组进行一次内存重新分配操作。因为内存重分配涉及复杂的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作。&lt;/p&gt;&lt;p data-source-line=&quot;47&quot;&gt;为了避免C字符串的这种缺陷，SDS通过未使用空间解除了字符串长度和底层数组长度之间的关联。通过未使用空间，SDS实现了空间预分配和惰性空间释放两种优化策略。&lt;/p&gt;&lt;ol data-source-line=&quot;49&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;空间预分配&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;51&quot;&gt;空间预分配用于优化SDS的字符串增长操作。当SDS的API对一个SDS进行修改，并且需要对SDS进行空间扩展的时候，程序不仅会为SDS分配修改所必须要的空间，还会为SDS分配额外的未使用空间。其中，额外分配的未使用空间数量由以下公式决定：&lt;/p&gt;&lt;p data-source-line=&quot;57&quot;&gt;在扩展SDS空间之前，SDS API会先检查未使用空间是否足够，如果足够的话，API就会直接使用未使用空间，而无需执行内存重分配。通过空间预分配策略，Redis可以减少连续执行字符串增长操作所需的内存重分配次数。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;59&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;惰性空间释放&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;61&quot;&gt;惰性空间释放用于优化SDS的字符串缩短操作。当SDS的API需要缩短SDS保存的字符串时，程序不会立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录下来，并等待将来使用。&lt;/p&gt;&lt;p data-source-line=&quot;63&quot;&gt;通过惰性空间释放策略，SDS避免了缩短字符串时所需的内存重分配操作，并为将来可能的增长操作提供了优化。&lt;/p&gt;&lt;p data-source-line=&quot;65&quot;&gt;与此同时，SDS也提供了响应的API可以在有需要时，真正的释放SDS里面的未使用空间，所以不用担心惰性空间释放策略会造成内存浪费。&lt;/p&gt;&lt;h2 data-source-line=&quot;67&quot;&gt;列表&lt;/h2&gt;&lt;p data-source-line=&quot;69&quot;&gt;列表在Redis中应用的非常广，列表的底层实现就是链表。此外，Redis的发布与订阅、慢查询、监视器等功能也用到了链表。&lt;/p&gt;&lt;p data-source-line=&quot;71&quot;&gt;列表特点：&lt;/p&gt;&lt;ul data-source-line=&quot;72&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;双端链表：带有指向前置节点和后置节点的指针，获取这两个节点的复杂度为O(1)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;无环：表头节点的prev和表尾节点的next都指向NULL，对链表的访问以NULL结束。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;链表长度计数器：带有len属性，获取链表长度的复杂度为O(1)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多态：链表节点使用 void*指针保存节点值，可以保存不同类型的值。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;77&quot;&gt;列表结构图：&lt;/p&gt;&lt;p data-source-line=&quot;79&quot;&gt;&lt;img data-ratio=&quot;0.5209471766848816&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwbJxwcmialX3lgnMv3gocSuvgic5bUDfNIpRiaicVXAEZTZ6icReicJMNBovQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;81&quot;&gt;列表的数据结构（adlist.h/listNode与adlist.h/list）：&lt;/p&gt;&lt;p data-source-line=&quot;83&quot;&gt;listNode：&lt;/p&gt;&lt;ul data-source-line=&quot;84&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;prev：前置节点。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;next：后置节点。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;value：节点值。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;88&quot;&gt;list：&lt;/p&gt;&lt;h2 data-source-line=&quot;96&quot;&gt;字典&lt;/h2&gt;&lt;p data-source-line=&quot;98&quot;&gt;字典，又称为符号表（symbol table）、关联数组（associative array）或映射（map），是一种用于保存键值对的抽象数据结构。字典中的每一个键都是唯一的，可以通过键查找与之关联的值，并对其修改或删除。&lt;/p&gt;&lt;p data-source-line=&quot;100&quot;&gt;Redis的键值对存储就是用字典实现的，散列（Hash）的底层实现之一也是字典。&lt;/p&gt;&lt;p data-source-line=&quot;102&quot;&gt;字典的结构图（与JDk中的HashMap结构很相似）：&lt;/p&gt;&lt;p data-source-line=&quot;104&quot;&gt;&lt;img data-ratio=&quot;0.3811074918566775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwc4KGUvAU6PYaLgaYHiaksQSZO0SHKErKibXVyWXHXTahl1UjGDr9W8xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;921&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;106&quot;&gt;字典的数据结构（dict.h/dictht与dict.h/dict）：&lt;/p&gt;&lt;p data-source-line=&quot;108&quot;&gt;dict：&lt;/p&gt;&lt;ul data-source-line=&quot;109&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;type：针对不同类型的键值对，用于创建多类型的字典&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;privdata：针对不同类型的键值对，用于创建多类型的字典&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ht：两个元素的数组，包含两个dictht哈希表，一般字典只使用ht[0]哈希表，ht[1]哈希表会在对ht[0]哈希表进行rehash（重哈希）的时候使用，即当哈希表的键值对数量超过负载数量过多的时候，会将键值对迁移到ht[1]上&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;rehashidx：rehashidx也是跟rehash相关的，rehash的操作不是瞬间完成的，rehashidx记录着rehash的进度，图中没有进行rehash，它的值为-1&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;114&quot;&gt;dictht：&lt;/p&gt;&lt;p data-source-line=&quot;120&quot;&gt;dictEntry：&lt;/p&gt;&lt;ul data-source-line=&quot;121&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;key：键&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;next：下一个dictEntry节点&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;value：union类型，支持不同类型的值&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-source-line=&quot;125&quot;&gt;渐进式hash&lt;/h3&gt;&lt;p data-source-line=&quot;127&quot;&gt;字典类型容量变化过程叫做rehash。需要满足一定的条件才能触发扩容机制：&lt;/p&gt;&lt;ol data-source-line=&quot;128&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;服务器当前没有进行BGWRITEAOF或者BGSAVE命令，且当前键值对个数超过一维数组的大小，才会触发扩容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果当前键值对个数超过一维数组大小的五倍，无论是否在进行BGWRITEAOF或者BGSAVE命令，都会强制扩容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果当前键值对个数少于一维数组大小的十分之一，则触发缩容过程。缩容不会考虑当前服务器是否在进行BGWRITEAOF或者BGSAVE命令。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;132&quot;&gt;渐进式hash的过程，简单来说类似数据库的迁移，读的时候先读ht[0]，读不到读ht[1]；写的时候只写ht[1]；ht[0]数据慢慢地往ht[1]上搬。&lt;/p&gt;&lt;p data-source-line=&quot;134&quot;&gt;当ht[0]的所有键值都迁至ht[1]之后，ht[0]变为空表，释放ht[0]。并将ht[1]设置为ht[0]，并在ht[1]新创建一个空白哈希表，将rehashidx属性的值设为-1，表示rehash操作已完成。&lt;/p&gt;&lt;p data-source-line=&quot;136&quot;&gt;具体步骤如下：&lt;/p&gt;&lt;ol data-source-line=&quot;138&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;为字典的备用哈希表分配空间：如果执行的是扩展操作，那么备用哈希表的大小为第一个大于等于(已用节点个数)*2的2n（2的n次方幂） 如果执行的是收缩操作，那么备用哈希表的大小为第一个大于等于(已用节点个数)的2n&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始（为-1时表示没有进行rehash）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当一次rehash工作完成之后，程序将rehashidx属性的值+1。同时在serverCron中调用rehash相关函数，在1ms的时间内，进行rehash处理，每次仅处理少量的转移任务(100个元素)。随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;145&quot;&gt;这里比较下Redis的渐进hash与JDk中HashMap的resize过程。如果对HashMap不了解，可以查看《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247483866&amp;amp;idx=1&amp;amp;sn=9ae4f9da57a198fdfc16265657e5efde&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;详解并发下的HashMap以及JDK8的优化&lt;/a&gt;》。&lt;/p&gt;&lt;h2 data-source-line=&quot;147&quot;&gt;整数集合&lt;/h2&gt;&lt;p data-source-line=&quot;149&quot;&gt;整数集合（intset）是Redis用于保存整数值的集合抽象数据结构，可以保存类型为int16_t、int32_t、int64_t的整数值，并且保证集合中不会出现重复元素 整数集合是集合（Set）的底层实现之一，如果一个集合只包含整数值元素，且元素数量不多时，会使用整数集合作为底层实现&lt;/p&gt;&lt;p data-source-line=&quot;152&quot;&gt;整数集合的结构图：&lt;/p&gt;&lt;p data-source-line=&quot;154&quot;&gt;&lt;img data-ratio=&quot;0.2747826086956522&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwnnOYZUcLPR1lvcM8ibLVFmXVJea0x7PDUGpPIxYdv5kytO6tUkt21Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;156&quot;&gt;整数集合的数据结构（inset.h/inset）：&lt;/p&gt;&lt;p data-source-line=&quot;158&quot;&gt;intset：&lt;/p&gt;&lt;ul data-source-line=&quot;159&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;encoding：决定contents数组的真正类型，如INTSET_ENC_INT16、INTSET_ENC_INT32、INTSET_ENC_INT64。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;length：记录整数集合的元素数量，即contents数组长度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;contents：整数集合的每个元素在数组中按值的大小从小到大排序，且不包含重复项。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-source-line=&quot;163&quot;&gt;整数集合的升级&lt;/h3&gt;&lt;p data-source-line=&quot;165&quot;&gt;当想要添加一个新元素到整数集合中时，并且新元素的类型比整数集合现有的所有元素的类型都要长，整数集合需要先进行升级，才能将新元素添加到整数集合里面。每次想整数集合中添加新元素都有可能会引起升级，每次升级都需要对底层数组已有的所有元素进行类型转换。&lt;/p&gt;&lt;p data-source-line=&quot;167&quot;&gt;升级添加新元素：&lt;/p&gt;&lt;p data-source-line=&quot;173&quot;&gt;整数集合的升级策略可以提升整数集合的灵活性，并尽可能的节约内存。另外，整数集合不支持降级，一旦升级，编码就会一直保持升级后的状态。&lt;/p&gt;&lt;h2 data-source-line=&quot;175&quot;&gt;跳跃表&lt;/h2&gt;&lt;p data-source-line=&quot;177&quot;&gt;一个普通的单链表查询一个元素的时间复杂度为O(N)，即便该单链表是有序的。使用跳跃表（SkipList）是来解决查找问题的，它是一种有序的数据结构，不属于平衡树结构，也不属于Hash结构，它通过在每个节点维持多个指向其他节点的指针，而达到快速访问节点的目的 跳跃表是有序集合（Sorted Set）的底层实现之一，如果有序集合包含的元素比较多，或者元素的成员是比较长的字符串时，Redis会使用跳跃表做有序集合的底层实现。&lt;/p&gt;&lt;p data-source-line=&quot;180&quot;&gt;跳跃表其实可以把它理解为多层的链表，它有如下的性质：&lt;/p&gt;&lt;p data-source-line=&quot;187&quot;&gt;有关跳跃表的讲解，可以查看《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247483893&amp;amp;idx=1&amp;amp;sn=04e19d3f3a424bd53937c4bca78f3003&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;有关跳跃表的干货都在这里&lt;/a&gt;》&lt;/p&gt;&lt;p data-source-line=&quot;189&quot;&gt;跳跃表的结构图：&lt;/p&gt;&lt;p data-source-line=&quot;191&quot;&gt;&lt;img data-ratio=&quot;0.49741468459152016&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwLlkfia9Via47JDhg1U2I0CicnvaItUfkMosCsn0JkZJ9whEvMjXscSacQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;967&quot;/&gt;&lt;/p&gt;&lt;h2 data-source-line=&quot;197&quot;&gt;压缩列表&lt;/h2&gt;&lt;p data-source-line=&quot;199&quot;&gt;压缩列表（ziplist）是为了节约内存而设计的，是由一系列特殊编码的连续内存块组成的顺序性（sequential）数据结构，一个压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者一个整数值。&lt;/p&gt;&lt;p data-source-line=&quot;201&quot;&gt;压缩列表是列表（List）和散列（Hash）的底层实现之一，一个列表只包含少量列表项，并且每个列表项是小整数值或比较短的字符串，会使用压缩列表作为底层实现（在3.2版本之后是使用quicklist实现）。&lt;/p&gt;&lt;p data-source-line=&quot;203&quot;&gt;压缩列表的结构图：&lt;/p&gt;&lt;p data-source-line=&quot;205&quot;&gt;&lt;img data-ratio=&quot;0.07936507936507936&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZw1gyTUNkEoFVgRIia2VmIH6LlsYu7Yzu3IcPQJxG5tRZgAUhPSgibfrYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;207&quot;&gt;一个压缩列表可以包含多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。&lt;/p&gt;&lt;p data-source-line=&quot;209&quot;&gt;压缩列表的数据结构：&lt;/p&gt;&lt;ul data-source-line=&quot;211&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;zlbytes：记录整个压缩列表占用的内存字节数，在压缩列表内存重分配，或者计算zlend的位置时使用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;zltail：记录压缩列表表尾节点距离压缩列表的起始地址有多少字节，通过该偏移量，可以不用遍历整个压缩列表就可以确定表尾节点的地址。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;zllen：记录压缩列表包含的节点数量，但该属性值小于UINT16_MAX（65535）时，该值就是压缩列表的节点数量，否则需要遍历整个压缩列表才能计算出真实的节点数量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;entryX：压缩列表的节点。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;zlend：特殊值0xFF（十进制255），用于标记压缩列表的末端。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-source-line=&quot;217&quot;&gt;压缩列表节点的构成&lt;/h3&gt;&lt;p data-source-line=&quot;219&quot;&gt;&lt;img data-ratio=&quot;0.11711711711711711&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwfnGricWnnmBUw6Lw1ricMYmXzWBiagknicIVD6EfygeNC3ib19zN9EYo5rQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;444&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;221&quot;&gt;每个压缩列表节点可以保存一个字节数字或者一个整数值。压缩列表节点的数据结构：&lt;/p&gt;&lt;ul data-source-line=&quot;222&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;previous_entry_ength：记录压缩列表前一个字节的长度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;encoding：节点的encoding保存的是节点的content的内容类型。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;content：content区域用于保存节点的内容，节点内容类型和长度由encoding决定。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-source-line=&quot;226&quot;&gt;快速列表&lt;/h2&gt;&lt;p data-source-line=&quot;228&quot;&gt;考虑到链表的附加空间相对太高，prev和next指针就要占去16个字节（64bit系统的指针是8个字节）。另外每个节点的内存都是单独分配，会加剧内存的碎片化，影响内存管理效率。因此Redis3.2版本开始对列表数据结构进行了改造，使用快速列表（quicklist）代替了压缩列表和列表。&lt;/p&gt;&lt;p data-source-line=&quot;230&quot;&gt;快速列表的结构图：&lt;/p&gt;&lt;p data-source-line=&quot;232&quot;&gt;&lt;img data-ratio=&quot;0.6107470511140236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7Gq4Mear6kfeD5qHWmojzZwibUXyMRzf0qFFCPM9NUtXwn45M69TWMdq15P4rcx9mKUZJdAKndU59w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;234&quot;&gt;快速列表的数据结构：&lt;/p&gt;&lt;p data-source-line=&quot;236&quot;&gt;quicklistNode：&lt;/p&gt;&lt;ul data-source-line=&quot;238&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;prev: 指向链表前一个节点的指针。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;next: 指向链表后一个节点的指针。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;zl: 数据指针。如果当前节点的数据没有压缩，那么它指向一个ziplist结构；否则，它指向一个quicklistLZF结构。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;sz: 表示zl指向的ziplist的总大小（包括zlbytes, zltail, zllen, zlend和各个数据项）。需要注意的是：如果ziplist被压缩了，那么这个sz的值仍然是压缩前的ziplist大小。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;count: 表示ziplist里面包含的数据项个数。这个字段只有16bit。稍后我们会一起计算一下这16bit是否够用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;encoding: 表示ziplist是否压缩了（以及用了哪个压缩算法）。目前只有两种取值：2表示被压缩了（而且用的是LZF压缩算法），1表示没有压缩。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;container: 是一个预留字段。本来设计是用来表明一个quicklist节点下面是直接存数据，还是使用ziplist存数据，或者用其它的结构来存数据（用作一个数据容器，所以叫container）。但是，在目前的实现中，这个值是一个固定的值2，表示使用ziplist作为数据容器。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;recompress: 当我们使用类似lindex这样的命令查看了某一项本来压缩的数据时，需要把数据暂时解压，这时就设置recompress=1做一个标记，等有机会再把数据重新压缩。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;attempted_compress: 这个值只对Redis的自动化测试程序有用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;extra: 其它扩展字段。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;249&quot;&gt;quickList：&lt;/p&gt;&lt;ul data-source-line=&quot;250&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;head: 指向头节点（左侧第一个节点）的指针。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;tail: 指向尾节点（右侧第一个节点）的指针。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;count: 所有ziplist数据项的个数总和。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;len: quicklist节点的个数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;fill: 16bit，ziplist大小设置，存放list-max-ziplist-size参数的值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;compress: 16bit，节点压缩深度设置，存放list-compress-depth参数的值。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-source-line=&quot;257&quot;&gt;压缩深度&lt;/h3&gt;&lt;p data-source-line=&quot;259&quot;&gt;quicklist默认的压缩深度是0，也就是不压缩。压缩的实际深度由配置参数&lt;code&gt;list-compress-depth&lt;/code&gt;决定。为了支持快速的push/pop操作，quicklist的首尾两个ziplist不压缩，此时深度就是1；如果深度为2，就表示quicklist的首尾第一个 ziplist以及首尾第二个ziplist都不压缩。&lt;/p&gt;&lt;h3 data-source-line=&quot;261&quot;&gt;zipList长度&lt;/h3&gt;&lt;p data-source-line=&quot;262&quot;&gt;quicklist 内部默认单个ziplist长度为8k字节，超出了这个字节数，就会新起一个ziplist。ziplist的长度由配置参数&lt;code&gt;list-max-ziplist-size&lt;/code&gt;决定。&lt;/p&gt;&lt;h2 data-source-line=&quot;264&quot;&gt;编码&lt;/h2&gt;&lt;p data-source-line=&quot;266&quot;&gt;上面介绍了Redis的主要底层数据结构，包括简单动态字符串（SDS）、链表、字典、跳跃表、整数集合、压缩列表。但是Redis并没有直接使用这些数据结构来构建数据库，而是基于这些数据结构创建不同的编码，然后由不同条件下的不同编码来实现Redis的这些数据类型：字符串(String)、列表(List)、散列(Hash)、集合(Set)、有序集合(Sorted Set)。&lt;/p&gt;&lt;p data-source-line=&quot;268&quot;&gt;接下来就介绍Redis五种数据结构对应的编码。&lt;/p&gt;&lt;h3 data-source-line=&quot;270&quot;&gt;字符串对象的编码&lt;/h3&gt;&lt;p data-source-line=&quot;272&quot;&gt;上面介绍了SDS，但这只是字符串对象的其中一种实现。字符串对象的编码可能有三种：int、raw、embstr。&lt;/p&gt;&lt;ol data-source-line=&quot;274&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;int&lt;br/&gt;如果一个字符串对象，保存的值是一个整数值，并且这个整数值在long的范围内，那么Redis用整数值来保存这个信息，并且将字符串编码设置为 int。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;raw&lt;br/&gt;如果字符串对象保存的是一个字符串, 并且长度大于32个字节，它就会使用前面讲过的SDS（简单动态字符串）数据结构来保存这个字符串值，并且将字符串对象的编码设置为raw。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;embstr&lt;br/&gt;如果字符串对象保存的是一个字符串，但是长度小于32个字节，它就会使用embstr来保存了，embstr编码不是一个数据结构，而是对SDS的一个小优化，当使用SDS 的时候，程序需要调用两次内存分配，来给字符串对象和SDS各自分配一块空间，而embstr只需要一次内存分配，因为他需要的空间很少，所以采用连续的空间保存，即将SDS的值和字符串对象的值放在一块连续的内存空间上。这样能在短字符串的时候提高一些效率。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;283&quot;&gt;浮点数如何保存：&lt;/p&gt;&lt;p data-source-line=&quot;285&quot;&gt;Redis的字符串数据类型是支持保存浮点数，并且支持对浮点数进行加减操作，但是Redis在底层是把浮点数转换成字符串值，然后按照上述编码规则。对浮点数进行操作时，也是从字符串转换成浮点数进行计算，然后再转换成字符串进行保存的。&lt;/p&gt;&lt;p data-source-line=&quot;287&quot;&gt;编码转换条件：&lt;/p&gt;&lt;p data-source-line=&quot;289&quot;&gt;如果对一个int编码的字符串对象，修改它成非整数值，则对象就会使用raw编码。而Redis没有为embstr编码提供任何的修改操作，embstr编码的值是只读的，只要发生修改，立刻将编码转换成raw。&lt;/p&gt;&lt;table data-source-line=&quot;291&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编码&lt;/th&gt;&lt;th&gt;使用条件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;可以用long保存的整数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;raw&lt;/td&gt;&lt;td&gt;长度大于32的字符串&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;embstr&lt;/td&gt;&lt;td&gt;字符串长度小于32字节（或者浮点数转换后满足）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 data-source-line=&quot;297&quot;&gt;列表对象的编码&lt;/h3&gt;&lt;p data-source-line=&quot;299&quot;&gt;在 Redis 3.2 版本之前，列表对象底层由 压缩列表和双向链表配合实现，当元素数量较少的时候，使用压缩列表，当元素数量增多，就开始使用普通的双向链表保存数据。&lt;/p&gt;&lt;p data-source-line=&quot;301&quot;&gt;但是这种实现方式不够好，双向链表中的每个节点，都需要保存前后指针，这个内存的使用量 对于Redis这个内存数据库来说极其不友好。&lt;/p&gt;&lt;p data-source-line=&quot;303&quot;&gt;因此在 3.2 之后的版本，Redis新实现了一个数据结构，叫做快速列表（quicklist）。所有列表的底层实现都是这个数据结构了。它的底层实现基本上就是将 双向链表和压缩列表进行了结合，用双向的指针将压缩列表进行连接，这样不仅避免了压缩列表存储大量元素的性能压力，同时避免了双向链表连接指针占用空间过多的问题。&lt;/p&gt;&lt;h3 data-source-line=&quot;309&quot;&gt;集合对象的编码&lt;/h3&gt;&lt;p data-source-line=&quot;311&quot;&gt;集合对象的编码可以是intset或者hashtable。&lt;/p&gt;&lt;p data-source-line=&quot;313&quot;&gt;当集合中的所有元素都是整数，且元素的数量不大于512个的时候，使用intset编码。&lt;/p&gt;&lt;p data-source-line=&quot;315&quot;&gt;当元素不符合全部为整数值且元素个数小于512时，集合对象使用的编码方式为 hashtable。&lt;/p&gt;&lt;table data-source-line=&quot;317&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编码&lt;/th&gt;&lt;th&gt;使用条件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;intset&lt;/td&gt;&lt;td&gt;所有元素都是整数且元素个数小于 512&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hashtable&lt;/td&gt;&lt;td&gt;其他数据&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 data-source-line=&quot;322&quot;&gt;有序集合对象的编码&lt;/h3&gt;&lt;p data-source-line=&quot;324&quot;&gt;有序集合对象的编码可以是ziplist以及skiplist。&lt;/p&gt;&lt;p data-source-line=&quot;326&quot;&gt;当使用ziplist编码时，有序集合对象的实现数据结构为压缩列表。当条件变化，ziplist编码会转换成skiplist编码。&lt;/p&gt;&lt;p data-source-line=&quot;328&quot;&gt;当使用skiplist编码的时候，内部使用zset 来实现数据的保存，zset的定义如下：&lt;/p&gt;&lt;pre data-source-line=&quot;329&quot;&gt;&lt;code&gt;typedef struct zset{&lt;br/&gt;  zskiplist *zsl&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;dict &lt;/span&gt;*&lt;span&gt;dict;&lt;br/&gt;&lt;/span&gt;}zset&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;335&quot;&gt;为什么需要同时使用跳跃表以及字典呢？&lt;/p&gt;&lt;p data-source-line=&quot;340&quot;&gt;因此，将字典和跳跃表结合进行使用，可以在O(1)的时间复杂度下完成查询分值操作，而对一些范围操作使用跳跃表可以达到O(logn)的时间复杂度。&lt;/p&gt;&lt;table data-source-line=&quot;342&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编码&lt;/th&gt;&lt;th&gt;使用条件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ziplist&lt;/td&gt;&lt;td&gt;元素数量少于128且所有元素成员的长度小于64字节&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;skiplist&lt;/td&gt;&lt;td&gt;不满足上述条件的其他情况&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 data-source-line=&quot;347&quot;&gt;散列对象&lt;/h3&gt;&lt;p data-source-line=&quot;349&quot;&gt;散列对象的编码可以是ziplist或者hashtable.&lt;/p&gt;&lt;p data-source-line=&quot;351&quot;&gt;ziplist编码下的哈希对象，使用了压缩列表作为底层实现数据结构，用两个连续的压缩列表节点来表示哈希对象中的一个键值对。实现方式类似于上面的有序集合的场景。&lt;/p&gt;&lt;p data-source-line=&quot;353&quot;&gt;哈希结构本身在结构上和字典颇为相似，因此哈希对象中的每一个键值对都是字典中的一个键值对。&lt;/p&gt;&lt;table data-source-line=&quot;357&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;编码&lt;/th&gt;&lt;th&gt;使用条件&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ziplist&lt;/td&gt;&lt;td&gt;键值对的键和值的长度都小于64字节，且键值对个数小于512&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;hastable&lt;/td&gt;&lt;td&gt;不满足上述条件的其他情况&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 data-source-line=&quot;362&quot;&gt;总结&lt;/h3&gt;&lt;table data-source-line=&quot;364&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;基础数据类型&lt;/th&gt;&lt;th&gt;可能的编码方式&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;字符串&lt;/td&gt;&lt;td&gt;int, raw, embstr&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;列表&lt;/td&gt;&lt;td&gt;之前是 ziplist, linkedlist。3.2开始都是quicklist&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;集合&lt;/td&gt;&lt;td&gt;intset, hashtable&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;有序集合&lt;/td&gt;&lt;td&gt;ziplist, skiplist&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;散列&lt;/td&gt;&lt;td&gt;ziplist, hashtable&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-source-line=&quot;374&quot;&gt;参考文档：&lt;/p&gt;&lt;ol data-source-line=&quot;376&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;《Redis设计与实现》&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://github.com/redis/redis&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;《Redis 深度历险：核心原理和应用实践》&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fab0fce4d9e555cc92dff22c2cbcfb55</guid>
<title>面试题：MySQL 一棵 B+ 树能存多少条数据？</title>
<link>https://toutiao.io/k/85kvlje</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家好，我是Tom哥~&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;今日寄语：充满活力的新人，能让身边的人都重回初心，真是不可思议。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;my&lt;/span&gt;&lt;span&gt;sql 的InnoDB存储引擎 一棵B+树可以存放多少行数据?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.41114982578397213&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzpVLicRx4bhoYFC2IyEJGQichDkNPaf1ubltvu1LibkZTwU9dP5pyVJejA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（答案在文章中！！）&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要搞清楚这个问题，首先要从InnoDB索引数据结构、数据组织方式说起。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们都知道计算机有五大组成部分：控制器，运算器，存储器，输入设备，输出设备。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其中很重要的，也跟今天这个题目有关系的是存储器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们知道万事万物都有自己的单元体系，若干个小单体组成一个个大的个体。就像拼乐高一样，可以自由组合。所以说，如果能熟悉最小单元，就意味着我们抓住了事物的本事，再复杂的问题也会迎刃而解。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;存储单元&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;存储器范围比较大，但是数据具体怎么存储，有自己的最小存储单元。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、数据持久化存储磁盘里，磁盘的最小单元是扇区，&lt;/span&gt;&lt;code&gt;&lt;span&gt;一个扇区的大小是 512个字节&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、文件系统的最小单元是块，&lt;/span&gt;&lt;code&gt;&lt;span&gt;一个块的大小是 4K&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、InnoDB存储引擎，有自己的最小单元，称之为页，&lt;/span&gt;&lt;code&gt;&lt;span&gt;一个页的大小是16K&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;扇区、块、页这三者的存储关系？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzlYj9YicSEnH5fHR3M2vhZXRAx5ziaicicGYF8ticfyhddjfoMDSsia5F2kzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;InnoDB引擎&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果mysql部署在本地，通过命令行方式连接mysql，默认的端口 &lt;/span&gt;&lt;code&gt;&lt;span&gt;3306&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ，然后输入密码即可进入&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;mysql -u root -p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;查看InnoDB的页大小&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;show variables like &lt;span&gt;&#x27;innodb_page_size&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3391304347826087&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzEFG2ibmpdO3d6tPLUeKoXj30aAaJKib31DbJrsucRC8RGAffyxIcNO6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;mysql数据库中，table表中的记录都是存储在页中，那么一页可以存多少行数据？假如一行数据的大小约为1K字节，那么按 &lt;/span&gt;&lt;code&gt;&lt;span&gt;16K / 1K = 16&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，可以计算出一页大约能存放16条数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;mysql 的最小存储单元叫做“页”，这么多的页是如何构建一个庞大的数据组织，我们又如何知道数据存储在哪一个页中？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果逐条遍历，性能肯定很差。为了提升查找速度，我们引入了&lt;/span&gt;&lt;code&gt;&lt;span&gt;B+树&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，先来看下&lt;/span&gt;&lt;code&gt;&lt;span&gt;B+树&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的存储结构&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7431972789115646&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzQoknttTWIrdxibtddSIiaXkNRwaa7nbLNhzAZic8jOx7ExBGFkDT5hZQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;页除了可以存放&lt;/span&gt;&lt;code&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（叶子节点），还可以存放&lt;/span&gt;&lt;code&gt;&lt;span&gt;健值和指针&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（非叶子节点），当然他们是有序的。这样的数据组织形式，我们称为索引组织表。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如：上图中 page number=3的页，该页存放键值和指向数据页的指针，这样的页由N个键值+指针组成&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;B+ 树是如何检索记录？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;首先找到根页，你怎么知道一张表的根页在哪呢？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;其实每张表的根页位置在表空间文件中是固定的，即page number=3的页&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;找到根页后通过二分查找法，定位到id=5的数据应该在指针P5指向的页中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后再去page number=5的页中查找，同样通过二分查询法即可找到id=5的记录&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;如何计算B+树的高度？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在&lt;/span&gt;&lt;code&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的表空间文件中，约定&lt;/span&gt;&lt;code&gt;&lt;span&gt;page number = 3&lt;/span&gt;&lt;/code&gt;&lt;span&gt;表示主键索引的根页&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SELECT&lt;br/&gt;b.name, a.name, index_id, &lt;span&gt;type&lt;/span&gt;, a.space, a.PAGE_NO&lt;br/&gt;FROM&lt;br/&gt;information_schema.INNODB_SYS_INDEXES a,&lt;br/&gt;information_schema.INNODB_SYS_TABLES b&lt;br/&gt;WHERE&lt;br/&gt;a.table_id = b.table_id AND a.space &amp;lt;&amp;gt; 0&lt;br/&gt;and b.name like &lt;span&gt;&#x27;%sp_job_log&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4416326530612245&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzDYSy4C3FBQGVAicTia8eWaE0ibSbmR1nR0fQrxvPzpH314j8wwD7BQzJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1225&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;从图中可以看出，每个表的主键索引的根页的page number都是3，而其他的二级索引page number为4&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在根页偏移量为&lt;/span&gt;&lt;code&gt;&lt;span&gt;64&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的地方存放了该B+树的&lt;/span&gt;&lt;code&gt;&lt;span&gt;page level&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。主键索引B+树的根页在整个表空间文件中的第3个页开始，所以算出它在文件中的偏移量：&lt;/span&gt;&lt;code&gt;&lt;span&gt;16384*3 + 64 = 49152 + 64 =49216&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，前2个字节中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，找到MySql数据库物理文件存放位置：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;show global variables like &lt;span&gt;&quot;%datadir%&quot;&lt;/span&gt; ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.23905723905723905&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketznDFboCv74nXKOaM99gicGfGPWOX4iaV47GdCokFqSrlUv32h8z5mS6wA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;hexdump工具，查看表空间文件指定偏移量上的数据：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;hexdump -s 49216 -n 10  sp_job_log.ibd&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.09765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzuZepNfX9ZfrDShVg5coaEoKmmZEe5jAxad1Te2Q5y8v5IcI09mzzpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;page_level 值是 1，那么 B+树高度为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;page level + 1 = 2&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;查询数据库时，不论读一行，还是读多行，都是将这些行所在的整页数据加载，然后在内存中匹配过滤出最终结果。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;表的检索速度跟树的深度有直接关系，毕竟一次页加载就是一次IO，而磁盘IO又是比较费时间。&lt;/span&gt;&lt;code&gt;&lt;span&gt;对于一张千万级条数B+树高度为3的表与几十万级B+树高度也为3的表，其实查询效率相差不大。&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;一棵树可以存放多少行数据？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;假设B+树的深度为2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这棵B+树的存储总记录数 = &lt;/span&gt;&lt;code&gt;&lt;span&gt;根节点指针数 * 单个叶子节点记录条数&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;那么指针数如何计算？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设主键ID为&lt;/span&gt;&lt;code&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;/code&gt;&lt;span&gt;类型，长度为&lt;/span&gt;&lt;code&gt;&lt;span&gt;8字节&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，而指针大小在InnoDB源码中设置为&lt;/span&gt;&lt;code&gt;&lt;span&gt;6字节&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这样一共&lt;/span&gt;&lt;code&gt;&lt;span&gt;14字节&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么一个页中能存放多少这样的组合，就代表有多少指针，即 &lt;/span&gt;&lt;code&gt;&lt;span&gt;16384 / 14 = 1170&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。那么可以算出一棵高度为2 的B+树，能存放 &lt;/span&gt;&lt;code&gt;&lt;span&gt;1170 * 16 = 18720&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 条这样的数据记录。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同理：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;高度为3的B+树可以存放的行数 =  &lt;/span&gt;&lt;code&gt;&lt;span&gt;1170 * 1170 * 16 = 21902400&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;千万级的数据存储只需要约3层B+树，查询数据时，每加载一页（page）代表一次IO。所以说，根据主键id索引查询约3次IO便可以找到目标结果。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;对于一些复杂的查询，可能需要走二级索引，那么通过二级索引查找记录最多需要花费多少次IO呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketz38TgsCyJTkFxDq7psbdsdsbYqoL9le40CKiaeaiaObAliaFWnOaGs48aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，从二级索引B+树中，根据&lt;/span&gt;&lt;code&gt;&lt;span&gt;name&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 找到对应的主键id&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.69296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzk8Vt860QGV3uwh5GjeEgfwmRcYFpADH8hZNwV2ic5eTutzYPGhVEttQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后，再根据主键id 从 聚簇索引查找到对应的记录。如上图所示，二级索引有3层，聚簇索引有3层，那么最多花费的IO次数是：3+3 = 6&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;聚簇索引默认是主键，如果表中没有定义主键，InnoDB 会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这也是为什么InnoDB表必须有主键，并且推荐使用整型的自增主键！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;举例说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、若使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;&quot;where id = 14&quot;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;这样的条件查找记录，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、若对Name列进行条件搜索，则需要两个步骤：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二步使用主键值在主索引B+树中再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。（重点在于通过其他键需要建立辅助索引）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;实战演示&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实际项目中，每个表的结构设计都不一样，占用的存储空间大小也各不相等。如何计算不同的B+树深度下，一个表可以存储的记录条数？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们以业务日志表 &lt;/span&gt;&lt;code&gt;&lt;span&gt;sp_job_log&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 为例，讲解详细的计算过程：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、查看表的状态信息&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;show table status like &lt;span&gt;&#x27;sp_job_log&#x27;&lt;/span&gt;\G&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.54140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzPSO6icytqwXDU2rF2yy2CJKyc3V4462NyPbvuVroIicBhoz7Bk5TILDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图中看到&lt;/span&gt;&lt;code&gt;&lt;span&gt;sp_job_log&lt;/span&gt;&lt;/code&gt;&lt;span&gt;表的行平均大小为&lt;/span&gt;&lt;code&gt;&lt;span&gt;153&lt;/span&gt;&lt;/code&gt;&lt;span&gt;个字节&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、查看表结构&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;desc sp_job_log;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwfxA7iaBRvMqhOtRNlUOketzlKOpFialibXWIiaZOIY26AZjhr2lTWicGTfOxAdq7xeZTzCZS0ib5ZQgVicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、计算B+树的行数&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单个叶子节点（页）中的记录数 = 16K / 153 = 105&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非叶子节点能存放多少指针， 16384 / 14 = 1170&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果树的高度为3，可以存放的记录行数 =  1170 * 1170 * 105 = 143,734,500&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;最后加餐&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;普通索引和唯一索引在查询效率上有什么不同？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;唯一索引就是在普通索引上增加了约束性，也就是关键字唯一，找到了关键字就停止检索。而普通索引，可能会存在用户记录中的关键字相同的情况，根据页结构的原理，当我们读取一条记录的时候，不是单独将这条记录从磁盘中读出去，而是将这个记录所在的页全部加载到内存中进行读取。InnoDB 存储引擎的页大小为 16KB，在一个页中可能存储着上千个记录，因此在普通索引的字段上进行查找也就是在内存中多几次&lt;/span&gt;&lt;code&gt;&lt;span&gt;判断下一条记录&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的操作，对于 CPU 来说，这些操作所消耗的时间是可以忽略不计的。所以对一个索引字段进行检索，采用普通索引还是唯一索引在检索效率上基本上没有差别。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：前阿里架构师，出过专利，竞赛拿过奖，CSDN博客专家，负责过电商交易、社区生鲜、营销、金融等业务，多年团队管理经验，爱思考，喜欢结交朋友&lt;/span&gt;&lt;/section&gt;&lt;h1 accuse=&quot;qTitle&quot;&gt;&lt;span&gt;&lt;span&gt;「长按2秒」↓↓&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;↓ 二维码，拉你进群，一线大厂技术交流&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2021660649819494&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/3Ohm6WHibeXLL4AVYEUeBKzcTZJd7mrk9XicnYiccg6n8YjsA4ibpRk6hkog7Qqx6cJNIF1rhicl992vID1IFUKWYuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484947&amp;amp;idx=1&amp;amp;sn=5a70f88fba83b435b8144bf1ddd3cc9f&amp;amp;chksm=ceb9fab8f9ce73ae97afc43f87314dd3bb61c966b9a40c12801cddc454dcf2845bbb605694e3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;亿级系统的Redis缓存如何设计？？？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484957&amp;amp;idx=1&amp;amp;sn=e50e0808cb6503ca7214bdd6fee4f134&amp;amp;chksm=ceb9fab6f9ce73a0c0725e381673fc7dc50c0594fb995b5f985b263143b34371e5e2936d7be0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【高并发、高性能、高可用】系统设计经验&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484929&amp;amp;idx=1&amp;amp;sn=d8cb3306dea9f1b92fd30d59da3f536a&amp;amp;chksm=ceb9faaaf9ce73bca59b46021a450fdc84aa0f85d6b49ff0e5578cc3abaa1433447f7dffc5e4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;人人都是架构师？？？谈何容易！！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484921&amp;amp;idx=1&amp;amp;sn=b429efe7e622759fc8f3bb24c2979a90&amp;amp;chksm=ceb9f952f9ce7044b001528ce8ae0ec89ed63727764081c21a8400e9f8f685345ec9cb0a54d7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【万级并发】电商库存扣减如何设计？不超卖！&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a158a0161495cc3053bba8e92c2da233</guid>
<title>一个地区问题引发的一些列思考</title>
<link>https://toutiao.io/k/8jbq0n3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDHlDcdbjNJic1yCwAu2dmJ9AunIQh9DXdm5JE7v9libnPgJQicoaGs9Eiaee2kPeFGWJxsPkZ9zCQbrIw/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;susanSayJava&quot; data-signature=&quot;「苏三说技术」 维护者目前就职于某知名互联网公司，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我最近参与了公司的一个新项目，需要通过openapi接口把&lt;code&gt;接入方&lt;/code&gt;的数据，比如：企业、订单、合同、物流等，同步到我们平台，然后我们平台给他们提供金融能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;code&gt;我方&lt;/code&gt;跟&lt;code&gt;对接方&lt;/code&gt;不在同一个城市，为了提高工作效率，双方进行了多次在线视频沟通。刚开始比较顺利，没想到在沟通企业信息上传接口时，接口文档中有个非常不起眼的&lt;code&gt;企业注册地id&lt;/code&gt;字段，让我们一下子进入了僵局。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到底是怎么回事呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.地区问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们平台的&lt;code&gt;企业表&lt;/code&gt;中有一个&lt;code&gt;企业注册地id&lt;/code&gt;字段，是必填的，用户在注册企业的页面需要选择一个地区，作为该企业的注册地，实际上数据库保存的是地区的id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果该企业注册成功了，会在企业详情页面上展示该地区名称。当然我们系统的后台逻辑是先通过&lt;code&gt;地区id&lt;/code&gt;到&lt;code&gt;地区表&lt;/code&gt;反查出地区名称，然后在用户界面中展示出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了跟&lt;code&gt;企业表&lt;/code&gt;保持一致，我方在定义接口文档时，企业注册地id字段也做成必填了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时的情况是这样的：我方地区表中有id、地区名称、国标码、等级等字段，但这里的id，是我方数据库的主键，对接方系统中肯定是没有的。对接方系统中也有一套地区表，不过id是他们的数据库id，他们的表中也有地区名称、国标码、等级等字段。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5217391304347826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNtfdDicsTYdXcjs2NeZt6ln1u9AT0cSNT2uKAdZy0YjI1rKBXgcn6CCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以他们系统内部需要经过一番转换，才能把我们所需的地区id传给我们。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 持久化本地地区表&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这个项目我是中途才加入的，之前在处理别的事情，我加入的时候接口文档已经定义好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我方跟对接方进行第二次在线沟通的时候，双方一起过接口文档的细节，包括：接口的作用、每个参数的含义，以及他们是否有值传过来等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中过到企业信息上传接口时，接口文档中有个&lt;code&gt;企业注册地id&lt;/code&gt;字段，对方没法传值过来。为了解决这个问题，我方第一版的方案是：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6478632478632479&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNxrjfPw1xjFAp1JPCT9iaM8Cia7wUNmfTpFG89OdGFUJ48b35DQbgUMDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对接方调用我方地区查询接口，通过多次分页查询，最终能获取我方所有地区数据，落库到他们本地的地区表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;他们在调用我方企业信息上传接口之前，先查询本地的地区表，转换成我方所需要的地区id。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在讨论的过程中，对接方觉得他们也是平台，不应该做这些额外的事情。所以在那次会议中，双方针对这个问题，谁也没有说服谁，最终也没能达成共识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来，我思考了一下，确实这个方案太过理想化了，没有真正站到用户的角度思考问题，忽略了很多细节。可能跟文档设计者不对地区表不太熟悉有关系。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 按名称调用地区查询接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那次会议当中，我们这边的几位同事，短暂的讨论了一下。既然对接方不愿意接受在他们本地持久化地区表，我们就退而求其次，不要求他们持久化了。这时我们这边有个同事提出，改成按名称调用地区查询接口，反查出地区id，具体方案如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6953271028037383&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibN2cmsfgGXdneOse4gR5ekIuk0jGOFggtia3X2iaGnZlEl6QKcbNjnYesw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1070&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方案表面上看起来没有问题，但我之前负责过区域相关功能，我知道，就怕出现如下情况：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果对接方传的地区名称不完整，比如：本来是&lt;code&gt;成都市&lt;/code&gt;，实际上传的&lt;code&gt;成都&lt;/code&gt;。这样，我们地区查询接口，需要做模糊匹配，如果并发调用接口可能影响接口性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果输入关键字&lt;code&gt;北京市&lt;/code&gt;，在我们这边的地区表中，可以找到两条数据，一条是跟&lt;code&gt;省级别&lt;/code&gt;一样的，另一条是跟&lt;code&gt;市级别&lt;/code&gt;一样的。到底对应哪条数据呢？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我当时把这两个问题抛出来了，不建议使用地区名称查询。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3 按国标码调用地区查询接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那个同事听完之后，也觉得用地区名称查询有点不靠谱。他马上修改方案，改成使用地区的国标码查询地区id，具体方案如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.662431941923775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNRnMe0ErcEsvkAolfbyKnTjbfk00sgI6gKtBZblqiayFPaQykPUYkCPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于当时讨论时间非常短，我们没来得及考虑太多，暂且打算用这套方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4 企业上传接口入参传国标码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过了一会儿，双方继续过接口文档，重新讨论企业信息上传接口中&lt;code&gt;企业注册地id&lt;/code&gt;字段传值问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们在调企业信息上传接口之前，先调一下我们地区查询接口，查出地区id，入参是国标码。然后再将这个地区id，在企业信息上传接口中传过来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对接方仔细听了我们的方案，犹豫了一下，他们觉得没有必要再调一次地区查询接口，双方都使用国标码不就行了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们的想法是：在企业信息上传接口中，入参由&lt;code&gt;企业注册地id&lt;/code&gt;改成&lt;code&gt;企业注册地国标码&lt;/code&gt;，由于国标码是国家统一的唯一编码，双方肯定是一样，能保证数据的一致性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6938775510204082&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNXcgFfZHW6qSWwGxfUCuAMzutFZf8FPDsPbUDmj6r0UbFEBwica6GtFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.想起了一个问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，如果你没接触过地区功能的话，大部分人可能会同意这套方案的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但比较巧合的是我之前正好接触过类似的功能，当时我突然想起了一个问题：&lt;strong&gt;双方数据的一致性如何保证？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道，由于国家的发展，有些城市可能会改名，比如：&lt;code&gt;襄樊&lt;/code&gt;改成了&lt;code&gt;襄阳&lt;/code&gt;，另外有时候多个地级市合并成一个市，这样国标码会变化，所以国家统计网每年都会调整地区名称和国标码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我方的地区表是两年之前创建的，数据初始化好之后没有就更新过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对接方不是跟我们在同一时刻初始化的数据，而且他们会定期更新地区数据，这样就导致了两边的数据不一致。如果对接方的业务表单中使用了新加的城市名和国标码，而这些信息在我方的地区表中没有，就无法查询出我方所需的地区id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种情况该怎么办？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.1 双方同一时刻更新地区表&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然上面的问题是一个非常棘手的问题，这时候有些小伙伴可能会说：&lt;code&gt;双方使用job同一时刻更新地区表&lt;/code&gt;，不就能解决问题了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3938931297709924&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNuj9klaCTTwQ1BHHmrsqKHicy15ibRubeM6lgtbibzZzv78vuYFV1yldFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1310&quot;/&gt;我不太赞成这种方案，主要原因如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;我方仅跟这个对接方有个同步执行的job，没问题。但如果还有其他的对接方，也需要调用企业信息上传接口，是不是也要整一个job，而且还要求大家都同一时刻执行，耦合性太大了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果我方和对接方同时执行job，但万一有任意一方执行失败了，也会导致数据不一致的情况。如果恰好这时候对接方在调用企业信息上传接口，会不会出问题？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2 以一方的地区数据为准？&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的双方同一时刻更新地区表的方案确实有点不靠谱，但有些读者可能会问，以一方的地区数据为准，另一方把数据同步过来不就行了。具体方案如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7231503579952268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNKCop5xRyf6gWdtsljy4AuzydmnLBseq6hDOAp0g7CF1LJIrBDnKQicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;这个方案其实跟之前我方给出的第一个方案很相似，已经被对接方拒绝了。站在他们的角度来说，确实没有必要因为上传企业信息，而保存我们的地区数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说实话，即使他们同意了，这种跨公司跨系统的数据一致性问题，也不好保证，因为如果对接方调用我们的地区接口失败了，此时，正好在上传企业信息，是不是也有问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们一下子进入了困境，但为了不影响整体进度，只能先记录一下问题，然后跳过这个问题，继续讨论其他字段了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.如何解决这个问题？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我当天晚上思考了良久，第二天早上，发现跟我们老大的想法不谋而合。得出的结论是，既然存在差异化，没办法避免，我们就要从系统设计上接受差异化。在企业信息上传接口中增加两个字段：&lt;code&gt;企业注册地国标码&lt;/code&gt; 和 &lt;code&gt;地区名称&lt;/code&gt;，对接方改成传入这两个字段，具体方案如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8110091743119267&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHVVicXfseO4dcSlbFdkF5ibNo1yF4AInHZomb85OykLJtCpNMretHfpH7uKj7Yp3BtI7uB6yjcm2xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1090&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在我方的企业表中增加地区名称字段，是非必填的，同时把之前的地区id字段也改成非必填。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对接方在调用我方企业信息上传接口时，同时传入地区国标码和地区名称。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我方企业信息上传接口中判断，如果通过国标码能够找到地区id，则将地区id写入db，如果找不到，则将地区名称写入db。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们评估了一下影响范围，在企业表中的地区字段，只做展示用，没有修改入口，所以上面的这套方案是可行的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来，再次跟对接方在线沟通时，把我们的这套方案告诉他们了，他们非常赞同。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽说这个地区问题，在众多技术问题中不值得一提。但是我仔细思考了一下，还是有一些宝贵的经验值得总结一下的，给有需要的小伙伴一个参考。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.1 要从用户的角度设计接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在设计接口文档时，要真正做到从用户的角度出发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尤其是像这种openapi接口，定义的参数应该尽量选择通用的，大家都认可的参数，避免出现我方定制化的参数，比如：地区id。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽量减少用户的复杂度，让他们调用接口时更简单一些。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.2 技术方案要有包容性&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术方案要有包容性，不是非黑即白，需要有柔性的思想。在分布式环境中，如果去一味地追求数据的强一致性，不会有太好的结果。就像高并发下的商品秒杀系统，如果非要用同步方案去实现，系统最终可能会挂掉，更好的方案其实是改成异步队列处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我方和对接方都有地区表，数据很难保证完全一致，我们不要为了一致性而一致性，这样会适得其反。为了工作能够顺利进行下去，必然有一方要妥协，我的建议是openapi接口方做妥协，这种技术方案才够通用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.3 没有最好的方案，只有最适合的&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我方最后的那个方案，其实并没有完全解决地区id找不到的问题，但是从业务的角度来看，即使没有地区id，有地区名称也是一样的。很显然，最后的方案是非常适合我们实际业务场景的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以没有最好的方案，只有最适合业务场景的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.4 进行有效的沟通&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在跟对接方在线沟通时，不要因为某个问题卡壳了，而一直僵持下去。如果当时没有好的技术方案，可以先选择暂时跳过这个问题，而沟通其他的内容。后面我们再私下单独花时间，仔细思考当时的问题，从而能够提出更合理的方案。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>231f4078259e4333fb0d205a416f4701</guid>
<title>故事篇：终于给老婆讲明白什么是 Logback 了</title>
<link>https://toutiao.io/k/0qku0g2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32344763670064874&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpOjRJj3rEmVIcZ4cxnPGXMbOToA3HQiafTrfmjfvOVQH0fLtCJwj3DkfC1GoPIRVmLY5oTemAhXibRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1079&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故事会迟到，但他从不会缺席。今天的故事开始了，你准备好了吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前奏&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单介绍一下我的老婆：集智慧与美貌于一身的女子——阿狸，一句“我们心有灵犀，不是吗？”让我瞬间“沦陷”。&lt;img data-ratio=&quot;0.9752808988764045&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlz44nLwoKvAHyO6RyTb4Sxfn6wTib2VFBJHXKZZKPAB5A19XmnPsI7EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;445&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7467071935157041&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlHdibkeHwCU5UVXialSzEGbqMJNqT5ZViaxC7SZtXHNxuNE9lS9IFU0vvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;987&quot;/&gt;&lt;img data-ratio=&quot;0.753061224489796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlqDjdicRIKYhO6QjLQq6slLnepqE5LYNribajwBmNUYs9iamCqicnmiadKTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;img data-ratio=&quot;0.21486761710794297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlPx509Jy94a7nypHO2jQYnxPTVpeeylrVhlicHVjCiam6CF31UBgVdPrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;正题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;LogBack简介&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.21202854230377166&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESl4kNgKOg0BzwvYHKpkK5uNqhvFicS8rp0VLXAg3RfGBZHiaTzaPS75jIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;981&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的日志框架呢有以下几种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;JUL（Java Util Logging）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Logback&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Log4j&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Log4j2&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JCL（Jakarta Commons Logging）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Slf4j（Simple Logging Facade For Java）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33706720977596744&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlib556ZKG3Iica7ybK2KIGRwj8EgLxzDGTCMjOB6mNmbnreCAVzsElpHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先它配置比较简单，比较容易上手；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次配置比较灵活，能满足大部分项目的需求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后性能比较好，可以异步存储日志。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我觉得这也是它在市面上比较流行，项目中使用比较多的原因吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3175745118191161&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESliaeeGUc1FfRuIUBJBWc2OIFH54pDia1JygzUoJFjD2eq17NVYmX6uoRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;973&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「门面与实现的关系了解一下」&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6054644808743169&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlCoZRzQNWhSS5ZsBreiaAAhbDxVomq5nvqxv6NSrx3NNgQctIqh2VqTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着奉上官网地址，它分为以下三个模块：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;logback-core：其它两个模块的基础模块；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback-classic：它是&lt;code&gt;log4j&lt;/code&gt;的一个改良版本，同时它完整实现了&lt;code&gt;slf4j API&lt;/code&gt;，你可以很方便地更换成其它日志框架（如&lt;code&gt;log4j&lt;/code&gt;或者&lt;code&gt;JUL&lt;/code&gt;）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback-access：访问模块与&lt;code&gt;Servlet&lt;/code&gt;容器集成提供通过&lt;code&gt;Http&lt;/code&gt;来访问日志的功能，可以轻松地在&lt;code&gt;logback&lt;/code&gt;核心之上构建自己的模块。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;&lt;code&gt;logback&lt;/code&gt;组件之间的关系 &lt;strong&gt;「&lt;span&gt;可以大体了解下，实战篇更容易理解&lt;/span&gt;」&lt;/strong&gt;：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Logger&lt;/code&gt;作为日志的记录器，把它关联到应用的对应的&lt;code&gt;context&lt;/code&gt;上后，主要用于存放日志对象，也可以定义日志类型、级别；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Appender&lt;/code&gt;主要用于指定日志输出的目的地，可以是控制台、文件、远程套接字服务器、&lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;PostreSQL&lt;/code&gt;、 &lt;code&gt;Oracle&lt;/code&gt;和其他数据库、 &lt;code&gt;JMS&lt;/code&gt;和远程&lt;code&gt;UNIX Syslog&lt;/code&gt;守护进程等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Layout&lt;/code&gt;负责把事件转换成字符串，格式化的日志信息的输出。在&lt;code&gt;logback&lt;/code&gt;中&lt;code&gt;Layout&lt;/code&gt;对象被封装在&lt;code&gt;encoder&lt;/code&gt;中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Logger Context&lt;/code&gt;：各个&lt;code&gt;logger&lt;/code&gt;都被关联到一个 &lt;code&gt;LoggerContext&lt;/code&gt;，它负责制造&lt;code&gt;logger&lt;/code&gt;，也负责以树结构排列各&lt;code&gt;logger&lt;/code&gt;。其他所有&lt;code&gt;logger&lt;/code&gt;也通过&lt;code&gt;org.slf4j.LoggerFactory&lt;/code&gt; 类的静态方法&lt;code&gt;getLogger&lt;/code&gt;取得。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;Logger&lt;/code&gt; 可以被分配的级别包括：&lt;code&gt;TRACE&lt;/code&gt;、&lt;code&gt;DEBUG&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt; 和 &lt;code&gt;ERROR&lt;/code&gt;，定义于&lt;code&gt;ch.qos.logback.classic.Level&lt;/code&gt;类。如果 &lt;code&gt;logger&lt;/code&gt;没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。&lt;code&gt;root logger&lt;/code&gt; 默认级别是 &lt;code&gt;DEBUG&lt;/code&gt;。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;级别排序为：&lt;code&gt;TRACE&lt;/code&gt; &amp;lt; &lt;code&gt;DEBUG&lt;/code&gt; &amp;lt; &lt;code&gt;INFO&lt;/code&gt; &amp;lt; &lt;code&gt;WARN&lt;/code&gt; &amp;lt; &lt;code&gt;ERROR&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;项目实战&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35772357723577236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlSoC8uAm5yt5JHtDMsad2BFzUibX8fTZFnetJE8ZZMglLMR9P7lAvCXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;984&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!-- slf4j日志门面 --&amp;gt;&lt;br/&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;br/&gt; &amp;lt;version&amp;gt;&lt;span&gt;1.7&lt;/span&gt;&lt;span&gt;.30&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;!-- logback日志实现 --&amp;gt;&lt;br/&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt; &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;&lt;br/&gt; &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;&lt;br/&gt; &amp;lt;version&amp;gt;&lt;span&gt;1.2&lt;/span&gt;&lt;span&gt;.3&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;logback&lt;/code&gt;会从 &lt;code&gt;classpath&lt;/code&gt; 下依次读取以下类型的配置文件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;logback.groovy&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback-test.xml&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback.xml&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果文件都不存在，&lt;code&gt;logback&lt;/code&gt;用 &lt;code&gt;BasicConfigurator&lt;/code&gt; 自动对自己进行配置，这会导致记录输出到控制台。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;基本信息配置&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码测试样例奉上：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestLogBack&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(TestLogBack&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;10000&lt;/span&gt;; i++) {&lt;br/&gt;&lt;br/&gt;            logger.error(&lt;span&gt;&quot;error&quot;&lt;/span&gt;);&lt;br/&gt;            logger.warn(&lt;span&gt;&quot;warn&quot;&lt;/span&gt;);&lt;br/&gt;            logger.info(&lt;span&gt;&quot;info&quot;&lt;/span&gt;);&lt;br/&gt;            logger.debug(&lt;span&gt;&quot;debug&quot;&lt;/span&gt;);&lt;br/&gt;            logger.trace(&lt;span&gt;&quot;trace&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们在&lt;code&gt;resources&lt;/code&gt;下创建一个&lt;code&gt;logback.xml&lt;/code&gt;,然后进行配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!--&lt;br/&gt;        配置集中管理属性&lt;br/&gt;        我们可以直接改属性的 value 值&lt;br/&gt;        格式：${name}&lt;br/&gt;     --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pattern&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!--&lt;br/&gt;        日志输出格式：&lt;br/&gt;        %-5level 日志输出级别，占5位，靠左补全&lt;br/&gt;        %d{yyyy-MM-dd HH:mm:ss.SSS} 时间&lt;br/&gt;        %c 类的完整名称&lt;br/&gt;        %M method&lt;br/&gt;        %L 行号&lt;br/&gt;        %thread 线程名称&lt;br/&gt;        %m或者%msg 信息&lt;br/&gt;        %n 换行&lt;br/&gt;     --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 控制台日志输出的 appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;console&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 控制输出流对象 默认 System.out  我们为了测试可以改为 System.err（项目中使用 System.out ） --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;System.err&lt;span&gt;&amp;lt;/&lt;span&gt;target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 日志消息格式配置 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;${pattern}&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 定义日志文件保存路径属性 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;log_dir&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;/logs&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 日志文件输出的 appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;file&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 日志文件保存路径 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;${log_dir}/logback.log&lt;span&gt;&amp;lt;/&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--  日志消息格式配置 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;${pattern}&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- html 格式文件输出的 appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;htmlFile&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 日志文件保存路径 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;${log_dir}/logback.html&lt;span&gt;&amp;lt;/&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- html消息格式配置 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;layout&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.html.HTMLLayout&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!--                &amp;lt;pattern&amp;gt;${pattern}&amp;lt;/pattern&amp;gt;--&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%-5level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;layout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;!-- root logger 配置 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;root&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;ALL&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;console&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;file&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;htmlFile&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行之后发现在控制台打印出红色字体的日志信息，在&lt;code&gt;/log&lt;/code&gt;文件下有&lt;code&gt;logback.log&lt;/code&gt;和&lt;code&gt;logback.html&lt;/code&gt;两个日志文件，在项目中一般都只会使用&lt;code&gt;.log&lt;/code&gt;结尾的日志的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33811475409836067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlE3hJdQwchGZfAzt4A1yNQtj7ErhIXOLrA7G57ZFaYLEuNuv33pZb9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;976&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 日志拆分和归档压缩的 appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;rollFile&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 日志文件保存路径（拆分的话此处可以省略） --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;${log_dir}/roll_logback.log&lt;span&gt;&amp;lt;/&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 日志消息格式配置--&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;${pattern}&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 指定拆分规则 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;rollingPolicy&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 每满1M或者 每秒 产生一个新文件，%i产生0 或者 1 的文件名 ，gz为压缩，&lt;br/&gt;        我们一般设置为每天产生一个文件%d{yyyy-MM-dd} --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 按照文件大小拆分 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;maxFileSize&lt;/span&gt;&amp;gt;&lt;/span&gt;1MB&lt;span&gt;&amp;lt;/&lt;span&gt;maxFileSize&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 按照时间和压缩格式声明拆分的文件名 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;${log_dir}/rolling.%d{yyyy-MM-dd-HH-mm-ss}.log%i.gz&lt;span&gt;&amp;lt;/&lt;span&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;rollingPolicy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时我们对测试程序加上&lt;code&gt;for&lt;/code&gt;循环，循环&lt;code&gt;1w&lt;/code&gt;次，发现每秒或者每超过&lt;code&gt;1M&lt;/code&gt;都会产生新的文件。当然也可以在&lt;code&gt;appender&lt;/code&gt;下增加过滤器，过滤需要的日志级别。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!-- 日志级别过滤器 --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;filter&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 日志过滤规则 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;ERROR&lt;span&gt;&amp;lt;/&lt;span&gt;level&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 匹配时的操作：接收（记录） --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;onMatch&lt;/span&gt;&amp;gt;&lt;/span&gt;ACCEPT&lt;span&gt;&amp;lt;/&lt;span&gt;onMatch&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 不匹配时的操作：拒绝（不记录） --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;onMismatch&lt;/span&gt;&amp;gt;&lt;/span&gt;DENY&lt;span&gt;&amp;lt;/&lt;span&gt;onMismatch&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.34493346980552714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlGeQ4QeQptov2ZDvn9CQE5ibN4hXUe5icR0AcdjT0O1OiawH6JHuxO2ecA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先打开&lt;code&gt;RollingFileAppender&lt;/code&gt;,可以看到他底下有个&lt;code&gt;RollingPolicy&lt;/code&gt;策略&lt;img data-ratio=&quot;0.4962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlM3XAclaZEJRYIhb25CE7lOtYUB2Fybicu3xoEicDO7LZLcF48Fpciab1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点进去发现它是一个接口，然后看一下它的实现类，我们找到&lt;code&gt;SizeAndTimeBasedRollingPolicy&lt;/code&gt;策略看一下&lt;img data-ratio=&quot;0.6337271750805585&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlsqZgHZuEk3LgEAjQfCKlvwczgiaiblglY9wvr35tUE2kk16o1WITLQuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;3.发现这个类里边就有文件大小的属性&lt;code&gt;maxFileSize&lt;/code&gt;，却没有找到按照时间分文件的属性，我们进入它的父类&lt;code&gt;TimeBasedRollingPolicy&lt;/code&gt;查看&lt;img data-ratio=&quot;0.5064620355411955&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESl1ic0njAt91xhms5qDXScRNql2jazXC4icvq24CBnZoFxdQfhFdF1wWqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1238&quot;/&gt;4.发现里边就有该属性，翻译一下：必须在使用&lt;code&gt;TimeBasedRollingPolicy&lt;/code&gt;之前设置&lt;code&gt;FileNamePattern&lt;/code&gt;选项&lt;img data-ratio=&quot;0.33578882750153466&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlMp1RRK9lk0mtO4HkhylrockeZY22enkodIK0Cc5iaLMedkKWblzx05g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1629&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.407061266874351&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlMDtMC8pGpTTnHJ43VKIPw8cwtNEMSWsctl5hEbnPB0iaCia7pTmxnsiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;963&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 异步日志 --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;async&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.AsyncAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 指定具体的appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;rollFile&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上边用到的&lt;code&gt;root&lt;/code&gt;，还支持自定义的&lt;code&gt;logger&lt;/code&gt;呢。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 自定义logger对象&lt;br/&gt;  additivity=&quot;false&quot; 自定义的logger 对象是否继承root logger&lt;br/&gt;  name 用来指定受此loger约束的某一个包或者具体的某一个类&lt;br/&gt;--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;com.aq.logback&quot;&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;info&quot;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;console&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;logger&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;SpringBoot中使用&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32040816326530613&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESl6ibCqj7LbKAoD91JkqadkiatvyrL5OnOVcL5sXDzhgo2jn2zLNm8ibicKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;img data-ratio=&quot;0.4243743199129489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlQ9y82MNUqicKHTCaYcQyTkgEs9hPnrpQ6FjsCwr4jafqKpGZOuZH1mA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1838&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;默认日志是&lt;code&gt;info&lt;/code&gt;级别&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还可以直接使用&lt;code&gt;@Slf4j&lt;/code&gt;的注解来代替上边的&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(TestLogBack&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用是使用&lt;code&gt;log.info(&quot;info&quot;);&lt;/code&gt;来实现。它的默认加载顺序是&lt;code&gt;logback-spring.xml&lt;/code&gt;-&amp;gt;&lt;code&gt;logback.xml&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以在&lt;code&gt;application.properties&lt;/code&gt;中简单配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;#指定自定义 logger 对象的日志级别&lt;br/&gt;logging.level.com.itzyq.sblogback=trace&lt;br/&gt;&lt;br/&gt;#指定控制台输出消息格式&lt;br/&gt;logging.pattern.console=[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] ===== %m %n&lt;br/&gt;&lt;br/&gt;#指定存放日志文件的具体路径(已经弃用)&lt;br/&gt;#logging.file=/logs/springboot.log&lt;br/&gt;#指定日志文件存放的目录，默认的文件名为spring.log&lt;br/&gt;logging.file.path=/logs/springboot/&lt;br/&gt;#指定日志文件的消息格式&lt;br/&gt;logging.pattern.file=[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] ===== %m %n&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为在&lt;code&gt;properties&lt;/code&gt;中配置功能有限，我们还是使用上文中的&lt;code&gt;logback.xml&lt;/code&gt;来配置。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESl29kpKBcJXnPVhGjIwZDC6DCedy7eiatVcBCFkGsWbk8IyThibYINTPVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;975&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;logback-spring.xml&lt;/code&gt;只有在&lt;code&gt;Spring&lt;/code&gt;应用程序运行的时候才生效，即带有&lt;code&gt;@SpringBootApplication&lt;/code&gt;注解的类启动的时候才会生效。这里我们完全可以使用它。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外它还有个特殊的功能，可以用来解析日志的配置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pattern&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 定义日志文件保存路径属性 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;property&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;log_dir&quot;&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;&quot;/logs&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!-- 日志文件输出的 appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;file&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 日志文件保存路径 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;${log_dir}/logback.log&lt;span&gt;&amp;lt;/&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!-- 日志消息格式配置--&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;springProfile&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;dev&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;${pattern}&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;springProfile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;springProfile&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;pro&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt; %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %m%n&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;springProfile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;root&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;info&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;file&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时在&lt;code&gt;application.properties&lt;/code&gt;中引入&lt;code&gt;spring.profiles.active=dev&lt;/code&gt;或者&lt;code&gt;pro&lt;/code&gt;可以切换测试和正式环境了，是不是很方便呀。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Logback-access&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3169230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlogvyAMc3b7EicHzjmNqVxZ2yH7ViaJJYoWY17iamgCFU8WzqiauJ7Hicp2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;975&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;logback-access&lt;/code&gt;模块与&lt;code&gt;Servlet&lt;/code&gt;容器（如&lt;code&gt;Tomcat&lt;/code&gt;和&lt;code&gt;jetty&lt;/code&gt;）集成，已提供&lt;code&gt;HTTP&lt;/code&gt;访问日志功能。我们可以使用&lt;code&gt;logback-access&lt;/code&gt;模块来替换&lt;code&gt;tomcat&lt;/code&gt;的访问日志;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;将&lt;code&gt;logback-access.jar&lt;/code&gt;与&lt;code&gt;logback-core.jar&lt;/code&gt; 复制到&lt;code&gt;$TOMCAT_HOME/lib/&lt;/code&gt;（安装 &lt;code&gt;Tomcat&lt;/code&gt; 的文件夹）目录下；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;修改&lt;code&gt;$TOMCAT_HOME/conf/server.xml&lt;/code&gt;中的&lt;code&gt;Host&lt;/code&gt;元素中添加：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;Value className=&lt;span&gt;&quot;ch.qos.logback.access.tomcat.LogbackValue&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一行通常嵌套在一个&lt;code&gt;&amp;lt;Engine&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;Host&amp;gt;&lt;/code&gt;元素中。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;logback&lt;/code&gt; 默认会在&lt;code&gt;$TOMCAT_HOME/conf&lt;/code&gt;下查找文件&lt;code&gt;logback-access.xml&lt;/code&gt;，该配置的官方地址：&lt;code&gt;http://logback.qos.ch/access.html#configuration&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;!-- always a good activate OnConsoleStatusListener --&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;statusListener&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.status.OnConsoleStatusListener&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;  &lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;appender&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;access.log&lt;span&gt;&amp;lt;/&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;rollingPolicy&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;access.%d{yyyy-MM-dd}.log.zip&lt;span&gt;&amp;lt;/&lt;span&gt;fileNamePattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;rollingPolicy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;!-- 日志消息表达格式 --&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%h %l %u [%t] &quot;%r&quot; %s %b &quot;%i{Referer}&quot; “%i{User-Agent}”&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;combined&lt;span&gt;&amp;lt;/&lt;span&gt;pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;encoder&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;appender&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;配置信息补充&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.381243628950051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESlqHZ4cOl7ztxXrnbcoVbicPtbZwT9GfkhyQIK1yl0MtC7rtBWNj1UEFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;981&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）根节点&lt;code&gt;configuration&lt;/code&gt;，包含下面三个属性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;scan: 当此属性设置为&lt;code&gt;true&lt;/code&gt;时，配置文件如果发生改变，将会被重新加载，默认值为&lt;code&gt;true&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当&lt;code&gt;scan&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;时，此属性生效。默认的时间间隔为1分钟。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;debug: 当此属性设置为&lt;code&gt;true&lt;/code&gt;时，将打印出&lt;code&gt;logback&lt;/code&gt;内部日志信息，实时查看&lt;code&gt;logback&lt;/code&gt;运行状态。默认值为&lt;code&gt;false&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;configuration scan=&lt;span&gt;&quot;true&quot;&lt;/span&gt; scanPeriod=&lt;span&gt;&quot;60 seconds&quot;&lt;/span&gt; debug=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;&amp;lt;/configuration&amp;gt; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）&lt;code&gt;contextName&lt;/code&gt;：用来设置上下文名称，每个&lt;code&gt;logger&lt;/code&gt;都关联到&lt;code&gt;logger&lt;/code&gt;上下文，默认上下文名称为&lt;code&gt;default&lt;/code&gt;。但可以使用&lt;code&gt;contextName&lt;/code&gt;设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;configuration scan=&lt;span&gt;&quot;true&quot;&lt;/span&gt; scanPeriod=&lt;span&gt;&quot;60 seconds&quot;&lt;/span&gt; debug=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;     &amp;lt;contextName&amp;gt;myAppName&amp;lt;/contextName&amp;gt; &lt;br/&gt;  &amp;lt;/configuration&amp;gt;    &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(3) &lt;code&gt;property&lt;/code&gt; ：用来定义变量值，它有两个属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;，通过&lt;code&gt;property&lt;/code&gt;定义的值会被插入到&lt;code&gt;logger&lt;/code&gt;上下文中，可以使“${}”来使用变量。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;name&lt;/code&gt;: 变量的名称&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;value&lt;/code&gt;: 的值是变量定义的值&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(4) &lt;code&gt;timestamp&lt;/code&gt;：获取时间戳字符串，他有两个属性&lt;code&gt;key&lt;/code&gt;和&lt;code&gt;datePattern&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;key&lt;/code&gt;: 标识此&lt;code&gt;timestamp&lt;/code&gt;的名字；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;datePattern&lt;/code&gt;: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循&lt;code&gt;java.txt.SimpleDateFormat&lt;/code&gt;的格式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;configuration scan=&lt;span&gt;&quot;true&quot;&lt;/span&gt; scanPeriod=&lt;span&gt;&quot;60 seconds&quot;&lt;/span&gt; debug=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;    &amp;lt;timestamp key=&lt;span&gt;&quot;bySecond&quot;&lt;/span&gt; datePattern=&lt;span&gt;&quot;yyyyMMdd&#x27;T&#x27;HHmmss&quot;&lt;/span&gt;/&amp;gt; &lt;br/&gt;&amp;lt;/configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（5）&lt;code&gt;appender&lt;/code&gt;：负责写日志的组件，它有两个必要属性&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;class&lt;/code&gt;。&lt;code&gt;name&lt;/code&gt;指定&lt;code&gt;appender&lt;/code&gt;名称，&lt;code&gt;class&lt;/code&gt;指定&lt;code&gt;appender&lt;/code&gt;的全限定名&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5.1、&lt;code&gt;ConsoleAppender&lt;/code&gt; 把日志输出到控制台，有以下子节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;encoder&lt;/code&gt;：对日志进行格式化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;target&lt;/code&gt;：字符串&lt;code&gt;System.out&lt;/code&gt;(默认)或者&lt;code&gt;System.err&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5.2、&lt;code&gt;FileAppender&lt;/code&gt;：把日志添加到文件，有以下子节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;file&lt;/code&gt;：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;append&lt;/code&gt;：如果是 &lt;code&gt;true&lt;/code&gt;，日志被追加到文件结尾，如果是 &lt;code&gt;false&lt;/code&gt;，清空现存文件，默认是&lt;code&gt;true&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;encoder&lt;/code&gt;：对记录事件进行格式化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;prudent&lt;/code&gt;：如果是 &lt;code&gt;true&lt;/code&gt;，日志会被安全的写入文件，即使其他的&lt;code&gt;FileAppender&lt;/code&gt;也在向此文件做写入操作，效率低，默认是 &lt;code&gt;false&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5.3、&lt;code&gt;RollingFileAppender&lt;/code&gt;：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;file&lt;/code&gt;：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;append&lt;/code&gt;：如果是 &lt;code&gt;true&lt;/code&gt;，日志被追加到文件结尾，如果是 &lt;code&gt;false&lt;/code&gt;，清空现存文件，默认是&lt;code&gt;true&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;rollingPolicy&lt;/code&gt;:当发生滚动时，决定&lt;code&gt;RollingFileAppender&lt;/code&gt;的行为，涉及文件移动和重命名。属性&lt;code&gt;class&lt;/code&gt;定义具体的滚动策略类。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5.4、策略：&lt;strong&gt;「class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;：」&lt;/strong&gt; 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。有以下子节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;fileNamePattern&lt;/code&gt;：必要节点，包含文件名及“%d”转换符，&lt;code&gt;“%d”&lt;/code&gt;可以包含一个&lt;code&gt;java.text.SimpleDateFormat&lt;/code&gt;指定的时间格式，如：&lt;code&gt;%d{yyyy-MM}&lt;/code&gt;。如果直接使用 &lt;code&gt;%d&lt;/code&gt;，默认格式是 &lt;code&gt;yyyy-MM-dd&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RollingFileAppender&lt;/code&gt;的&lt;code&gt;file&lt;/code&gt;子节点可有可无，通过设置&lt;code&gt;file&lt;/code&gt;，可以为活动文件和归档文件指定不同位置，当前日志总是记录到&lt;code&gt;file&lt;/code&gt;指定的文件（活动文件），活动文件的名字不会改变；如果没设置&lt;code&gt;file&lt;/code&gt;，活动文件的名字会根据&lt;code&gt;fileNamePattern&lt;/code&gt; 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxHistory&lt;/code&gt;:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且&lt;maxhistory&gt;是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件时，那些为了归档而创建的目录也会被删除。&lt;/maxhistory&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「class=&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;：」&lt;/strong&gt; 查看当前活动文件的大小，如果超过指定大小会告知&lt;code&gt;RollingFileAppender&lt;/code&gt; 触发当前活动文件滚动。只有一个节点:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxFileSize&lt;/code&gt;:这是活动文件的大小，默认值是&lt;code&gt;10MB&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;prudent&lt;/code&gt;：当为&lt;code&gt;true&lt;/code&gt;时，不支持&lt;code&gt;FixedWindowRollingPolicy&lt;/code&gt;。支持&lt;code&gt;TimeBasedRollingPolicy&lt;/code&gt;，但是有两个限制，1不支持也不允许文件压缩，2不能设置&lt;code&gt;file&lt;/code&gt;属性，必须留空。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;triggeringPolicy&lt;/code&gt;: 告知 &lt;code&gt;RollingFileAppender&lt;/code&gt; 合适激活滚动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「class=&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;」&lt;/strong&gt; 根据固定窗口算法重命名文件的滚动策略。有以下子节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;minIndex&lt;/code&gt;:窗口索引最小值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;maxIndex&lt;/code&gt;:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;fileNamePattern&lt;/code&gt;:必须包含&lt;code&gt;“%i”&lt;/code&gt;例如，假设最小值和最大值分别为1和2，命名模式为 &lt;code&gt;mylog%i.log&lt;/code&gt;,会产生归档文件&lt;code&gt;mylog1.log&lt;/code&gt;和&lt;code&gt;mylog2.log&lt;/code&gt;。还可以指定文件压缩选项，例如，&lt;code&gt;mylog%i.log.gz&lt;/code&gt; 或者 没有&lt;code&gt;log%i.log.zip&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;configuration&amp;gt; &lt;br/&gt;      &amp;lt;appender name=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;        &amp;lt;rollingPolicy class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;          &amp;lt;fileNamePattern&amp;gt;logFile.%d{yyyy-MM-dd}.&lt;span&gt;log&lt;/span&gt;&amp;lt;/fileNamePattern&amp;gt; &lt;br/&gt;          &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt; &lt;br/&gt;        &amp;lt;/rollingPolicy&amp;gt; &lt;br/&gt;        &amp;lt;encoder&amp;gt; &lt;br/&gt;          &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt; &lt;br/&gt;        &amp;lt;/encoder&amp;gt; &lt;br/&gt;      &amp;lt;/appender&amp;gt; &lt;br/&gt;&lt;br/&gt;      &amp;lt;root level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; /&amp;gt; &lt;br/&gt;      &amp;lt;/root&amp;gt; &lt;br/&gt;    &amp;lt;/configuration&amp;gt;&lt;br/&gt;   //上述配置表示每天生成一个日志文件，保存30天的日志文件。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;configuration&amp;gt; &lt;br/&gt;      &amp;lt;appender name=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;        &amp;lt;file&amp;gt;test.log&amp;lt;/file&amp;gt; &lt;br/&gt;&lt;br/&gt;        &amp;lt;rollingPolicy class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;          &amp;lt;fileNamePattern&amp;gt;tests.%i.log.zip&amp;lt;/fileNamePattern&amp;gt; &lt;br/&gt;          &amp;lt;minIndex&amp;gt;1&amp;lt;/minIndex&amp;gt; &lt;br/&gt;          &amp;lt;maxIndex&amp;gt;3&amp;lt;/maxIndex&amp;gt; &lt;br/&gt;        &amp;lt;/rollingPolicy&amp;gt; &lt;br/&gt;&lt;br/&gt;        &amp;lt;triggeringPolicy class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;          &amp;lt;maxFileSize&amp;gt;5MB&amp;lt;/maxFileSize&amp;gt; &lt;br/&gt;        &amp;lt;/triggeringPolicy&amp;gt; &lt;br/&gt;        &amp;lt;encoder&amp;gt; &lt;br/&gt;          &amp;lt;pattern&amp;gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&amp;lt;/pattern&amp;gt; &lt;br/&gt;        &amp;lt;/encoder&amp;gt; &lt;br/&gt;      &amp;lt;/appender&amp;gt; &lt;br/&gt;&lt;br/&gt;      &amp;lt;root level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt;&amp;gt; &lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;FILE&quot;&lt;/span&gt; /&amp;gt; &lt;br/&gt;      &amp;lt;/root&amp;gt; &lt;br/&gt;    &amp;lt;/configuration&amp;gt;&lt;br/&gt;    //上述配置表示按照固定窗口模式生成日志文件，当文件大于5MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;encoder&lt;/code&gt;：对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;PatternLayoutEncoder&lt;/code&gt; 是唯一有用的且默认的&lt;code&gt;encoder&lt;/code&gt; ，有一个&lt;code&gt;pattern&lt;/code&gt;节点，用来设置日志的输入格式。使用&lt;code&gt;“%”&lt;/code&gt;加“转换符”方式，如果要输出&lt;code&gt;“%”&lt;/code&gt;，则必须用&lt;code&gt;“\”&lt;/code&gt;对&lt;code&gt;“\%”&lt;/code&gt;进行转义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（6）子节点&lt;code&gt;logger&lt;/code&gt;：用来设置某一个包或具体的某一个类的日志打印级别、以及指定&lt;code&gt;appender&lt;/code&gt;。仅有一个&lt;code&gt;name&lt;/code&gt;属性，一个可选的&lt;code&gt;level&lt;/code&gt;和一个可选的&lt;code&gt;additivity&lt;/code&gt;（&lt;strong&gt;「单词一定要注意写对，好多地方都写成了addtivity」&lt;/strong&gt;）属性。可以包含零个或多个&lt;appender-ref&gt;元素，标识这个&lt;code&gt;appender&lt;/code&gt;将会添加到这个&lt;code&gt;logger&lt;/code&gt;&lt;/appender-ref&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;name：用来指定受此 &lt;code&gt;logger&lt;/code&gt; 约束的某一个包或者具体的某一个类；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;level：用来设置打印级别（日志级别），大小写无关：&lt;code&gt;TRACE&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ALL&lt;/code&gt; 和 &lt;code&gt;OFF&lt;/code&gt;，还有一个特殊值&lt;code&gt;INHERITED&lt;/code&gt;或者同义词&lt;code&gt;NULL&lt;/code&gt;，代表强制执行上级的级别。如果未设置此属性，那么当前 &lt;code&gt;logger&lt;/code&gt; 将会继承上级的级别。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;additivity:是否向上级&lt;code&gt;loger&lt;/code&gt;传递打印信息。默认是&lt;code&gt;true&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（7）子节点&lt;code&gt;root&lt;/code&gt;：它也是&lt;code&gt;logger&lt;/code&gt;元素，但是它是根 &lt;code&gt;logger&lt;/code&gt; ,是所有&lt;code&gt;logger&lt;/code&gt;的上级。只有一个&lt;code&gt;level&lt;/code&gt;属性，因为&lt;code&gt;name&lt;/code&gt;已经被命名为&lt;code&gt;&quot;root&quot;&lt;/code&gt;，且已经是最上级了。同&lt;code&gt;logger&lt;/code&gt;一样，可以包含零个或多个&lt;code&gt;appender-ref&lt;/code&gt;元素，标识这个&lt;code&gt;appender&lt;/code&gt;将会添加到这个&lt;code&gt;logger&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;level&lt;/code&gt;: 用来设置打印级别，大小写无关：&lt;code&gt;TRACE&lt;/code&gt;, &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ALL&lt;/code&gt;和&lt;code&gt;OFF&lt;/code&gt;，不能设置为&lt;code&gt;INHERITED&lt;/code&gt;或者同义词&lt;code&gt;NULL&lt;/code&gt;。默认是&lt;code&gt;DEBUG&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常用&lt;code&gt;logger&lt;/code&gt;配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &amp;lt;!-- show parameters &lt;span&gt;for&lt;/span&gt; hibernate sql 专为 Hibernate 定制 --&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;org.hibernate.type.descriptor.sql.BasicBinder&quot;&lt;/span&gt; level=&lt;span&gt;&quot;TRACE&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;org.hibernate.type.descriptor.sql.BasicExtractor&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;org.hibernate.SQL&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;org.hibernate.engine.QueryParameters&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;org.hibernate.engine.query.HQLQueryPlan&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;!--myibatis &lt;span&gt;log&lt;/span&gt; configure--&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;com.apache.ibatis&quot;&lt;/span&gt; level=&lt;span&gt;&quot;TRACE&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;java.sql.Connection&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;java.sql.Statement&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&amp;lt;logger name=&lt;span&gt;&quot;java.sql.PreparedStatement&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt;/&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24897959183673468&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMMlNqlfiajmbTMDnaGCnESl09jkYdx2LPPM35BZPs0WRP8snjYSVBGVeqD7MD5VVOKwPgBtsKuTkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是今天的所有内容了，如果你有不同的意见或者更好的&lt;code&gt;idea&lt;/code&gt;，欢迎联系阿Q：&lt;code&gt;qingqing-4132&lt;/code&gt;，阿Q期待你的到来！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI5MDg2NjEzNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMAn4Ha81WVBfsKnC9ficVemZff27LiaSoKX83JqwnNmrNhb4D4oAjW7wiaDwtkLTTCRs1A1hanfNu9g/0?wx_fmt=png&quot; data-nickname=&quot;阿Q说代码&quot; data-alias=&quot;AQ_Shuo&quot; data-signature=&quot;专注于后端技术栈分享：文章风格多变、配图通俗易懂、故事生动有趣&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e785f8407d5db846661207bca32c8d49</guid>
<title>通过扩展 Spark SQL ，打造自己的大数据分析引擎</title>
<link>https://toutiao.io/k/udlyg9t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p cid=&quot;n2&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;image&quot; data-src=&quot;title.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5593635250917993&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9iblyp7wFkiahkdzuCSszMFZ1hAt0GlLkvwlFmOORjegtK70ZOUicEB5oIFUA3rP0ia4sD72r6GaoZlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;817&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n101&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Spark SQL 的 Catalyst ，这部分真的很有意思，值得去仔细研究一番，今天先来说说Spark的一些扩展机制吧，上一次写Spark，对其SQL的解析进行了一定的魔改，今天我们按套路来，使用砖厂为我们提供的机制，来扩展Spark...&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n57&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n103&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;首先我们先来了解一下 Spark SQL 的整体执行流程，输入的查询先被解析成未关联元数据的逻辑计划，然后根据元数据和解析规则，生成逻辑计划，再经过优化规则，形成优化过的逻辑计划（RBO），将逻辑计划转换成物理计划在经过代价模型（CBO），输出真正的物理执行计划。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.525&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9iblyp7wFkiahkdzuCSszMFZulguBxRrmNjIk2EFax7gtJADuCIsfFuJqS62NWicSmBbictWAqrKyHkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n136&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们今天举三个扩展的例子，来进行说明。&lt;/span&gt;&lt;/p&gt;&lt;p mdtype=&quot;paragraph&quot; cid=&quot;n133&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n134&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;扩展解析器&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n91&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n138&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这个例子，我们扩展解析引擎，我们对输入的SQL，禁止泛查询即不许使用&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;select *&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;来做查询，以下是解析的代。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;scala&quot; cid=&quot;n93&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;parser&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;analysis&lt;/span&gt;.&lt;span&gt;UnresolvedStar&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;expressions&lt;/span&gt;.&lt;span&gt;Expression&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;ParserInterface&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;plans&lt;/span&gt;.&lt;span&gt;logical&lt;/span&gt;.{&lt;span&gt;LogicalPlan&lt;/span&gt;, &lt;span&gt;Project&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.{&lt;span&gt;FunctionIdentifier&lt;/span&gt;, &lt;span&gt;TableIdentifier&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;types&lt;/span&gt;.{&lt;span&gt;DataType&lt;/span&gt;, &lt;span&gt;StructType&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyParser&lt;/span&gt;(&lt;span&gt;parser&lt;/span&gt;: &lt;span&gt;ParserInterface&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;ParserInterface&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to a [[LogicalPlan]].&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parsePlan&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;LogicalPlan&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;logicalPlan&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parsePlan&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;logicalPlan&lt;/span&gt; &lt;span&gt;transform&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      &lt;span&gt;case&lt;/span&gt; &lt;span&gt;project&lt;/span&gt; &lt;span&gt;@&lt;/span&gt; &lt;span&gt;Project&lt;/span&gt;(&lt;span&gt;projectList&lt;/span&gt;, &lt;span&gt;_&lt;/span&gt;) &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;projectList&lt;/span&gt;.&lt;span&gt;foreach&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;          &lt;span&gt;name&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;name&lt;/span&gt;.&lt;span&gt;isInstanceOf&lt;/span&gt;[&lt;span&gt;UnresolvedStar&lt;/span&gt;]) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;              &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RuntimeException&lt;/span&gt;(&lt;span&gt;&quot;You must specify your project column set,&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot; * is not allowed.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;project&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;logicalPlan&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to an [[Expression]].&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parseExpression&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;Expression&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parseExpression&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to a [[TableIdentifier]].&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parseTableIdentifier&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;TableIdentifier&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parseTableIdentifier&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to a [[FunctionIdentifier]].&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parseFunctionIdentifier&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;FunctionIdentifier&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parseFunctionIdentifier&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to a [[StructType]]. The passed SQL string should be a comma separated&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* list of field definitions which will preserve the correct Hive metadata.&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parseTableSchema&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;StructType&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parseTableSchema&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;* Parse a string to a [[DataType]].&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;   &lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;override&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;parseDataType&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;): &lt;span&gt;DataType&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;parseDataType&lt;/span&gt;(&lt;span&gt;sqlText&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n95&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来，我们测试一下&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;scala&quot; cid=&quot;n109&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;parser&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.{&lt;span&gt;SparkSession&lt;/span&gt;, &lt;span&gt;SparkSessionExtensions&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;parser&lt;/span&gt;.&lt;span&gt;ParserInterface&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;MyParserApp&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;: &lt;span&gt;Array&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;]): &lt;span&gt;Unit&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;System&lt;/span&gt;.&lt;span&gt;setProperty&lt;/span&gt;(&lt;span&gt;&quot;hadoop.home.dir&quot;&lt;/span&gt;,&lt;span&gt;&quot;E:\\devlop\\envs\\hadoop-common-2.2.0-bin-master&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;type&lt;/span&gt; &lt;span&gt;ParserBuilder&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; (&lt;span&gt;SparkSession&lt;/span&gt;, &lt;span&gt;ParserInterface&lt;/span&gt;) &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;ParserInterface&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;type&lt;/span&gt; &lt;span&gt;ExtensionsBuilder&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;SparkSessionExtensions&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;Unit&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;parserBuilder&lt;/span&gt;: &lt;span&gt;ParserBuilder&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; (&lt;span&gt;_&lt;/span&gt;, &lt;span&gt;parser&lt;/span&gt;) &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;MyParser&lt;/span&gt;(&lt;span&gt;parser&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;extBuilder&lt;/span&gt;: &lt;span&gt;ExtensionsBuilder&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; { &lt;span&gt;e&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;.&lt;span&gt;injectParser&lt;/span&gt;(&lt;span&gt;parserBuilder&lt;/span&gt;)}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;spark&lt;/span&gt; &lt;span&gt;=&lt;/span&gt;  &lt;span&gt;SparkSession&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;builder&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;appName&lt;/span&gt;(&lt;span&gt;&quot;Spark SQL basic example&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;config&lt;/span&gt;(&lt;span&gt;&quot;spark.master&quot;&lt;/span&gt;, &lt;span&gt;&quot;local[*]&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;withExtensions&lt;/span&gt;(&lt;span&gt;extBuilder&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;getOrCreate&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sparkContext&lt;/span&gt;.&lt;span&gt;setLogLevel&lt;/span&gt;(&lt;span&gt;&quot;ERROR&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;import&lt;/span&gt; &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;implicits&lt;/span&gt;.&lt;span&gt;_&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;df&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Seq&lt;/span&gt;(&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      ( &lt;span&gt;&quot;First Value&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;Date&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;&quot;2010-01-01&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      ( &lt;span&gt;&quot;First Value&quot;&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;Date&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;&quot;2010-01-01&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      (&lt;span&gt;&quot;Second Value&quot;&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,  &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;Date&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;&quot;2010-02-01&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      (&lt;span&gt;&quot;Second Value&quot;&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;,  &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;Date&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;&quot;2010-02-01&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    ).&lt;span&gt;toDF&lt;/span&gt;(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, &lt;span&gt;&quot;score&quot;&lt;/span&gt;, &lt;span&gt;&quot;date_column&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;df&lt;/span&gt;.&lt;span&gt;createTempView&lt;/span&gt;(&lt;span&gt;&quot;p&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;//    val df = spark.read.json(&quot;examples/src/main/resources/people.json&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;//    df.toDF().write.saveAsTable(&quot;person&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;//,javg(score)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;// custom parser&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;//    spark.sql(&quot;select * from p &quot;).show&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;(&lt;span&gt;&quot;select * from p&quot;&lt;/span&gt;).&lt;span&gt;show&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;/pre&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;下面是执行结果，符合我们的预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.50546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9iblyp7wFkiahkdzuCSszMFZafB6GiamfPGiaccg3kUIe5KSD8tGZpN9GiaDCVsOhyxE9yrGw24RibncKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h1 mdtype=&quot;heading&quot; cid=&quot;n6&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;扩展优化器&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n8&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n10&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;接下来，我们来扩展优化器，砖厂提供了很多默认的RBO，这里可以方便的构建我们自己的优化规则，本例中我们构建一套比较奇怪的规则，而且是完全不等价的，这里只是为了说明。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n140&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;针对字段&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;+0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;的操作，规则如下：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; cid=&quot;n142&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n145&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;出现在&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;左边，则直接将字段变成右表达式，即 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;0+nr&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 等效为 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;nr&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n146&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;出现在&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;右边，则将&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;变成&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;3&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，即 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;nr+0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 变成 &lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;nr+3&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n149&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;如果没出现&lt;/span&gt;&lt;span md-inline=&quot;code&quot; spellcheck=&quot;false&quot;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，则表达式不变&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n160&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;下面是代码：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;scala&quot; cid=&quot;n36&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;optimizer&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;SparkSession&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;expressions&lt;/span&gt;.{&lt;span&gt;Add&lt;/span&gt;, &lt;span&gt;Expression&lt;/span&gt;, &lt;span&gt;Literal&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;plans&lt;/span&gt;.&lt;span&gt;logical&lt;/span&gt;.&lt;span&gt;LogicalPlan&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;rules&lt;/span&gt;.&lt;span&gt;Rule&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;MyOptimizer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Rule&lt;/span&gt;[&lt;span&gt;LogicalPlan&lt;/span&gt;] {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;apply&lt;/span&gt;(&lt;span&gt;logicalPlan&lt;/span&gt;: &lt;span&gt;LogicalPlan&lt;/span&gt;): &lt;span&gt;LogicalPlan&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;logicalPlan&lt;/span&gt;.&lt;span&gt;transformAllExpressions&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      &lt;span&gt;case&lt;/span&gt; &lt;span&gt;Add&lt;/span&gt;(&lt;span&gt;left&lt;/span&gt;, &lt;span&gt;right&lt;/span&gt;) &lt;span&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;&quot;this this my add optimizer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;isStaticAdd&lt;/span&gt;(&lt;span&gt;left&lt;/span&gt;)) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;          &lt;span&gt;right&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;isStaticAdd&lt;/span&gt;(&lt;span&gt;right&lt;/span&gt;)) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;          &lt;span&gt;Add&lt;/span&gt;(&lt;span&gt;left&lt;/span&gt;, &lt;span&gt;Literal&lt;/span&gt;(&lt;span&gt;3L&lt;/span&gt;))&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;          &lt;span&gt;Add&lt;/span&gt;(&lt;span&gt;left&lt;/span&gt;, &lt;span&gt;right&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;isStaticAdd&lt;/span&gt;(&lt;span&gt;expression&lt;/span&gt;: &lt;span&gt;Expression&lt;/span&gt;): &lt;span&gt;Boolean&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;expression&lt;/span&gt;.&lt;span&gt;isInstanceOf&lt;/span&gt;[&lt;span&gt;Literal&lt;/span&gt;] &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;expression&lt;/span&gt;.&lt;span&gt;asInstanceOf&lt;/span&gt;[&lt;span&gt;Literal&lt;/span&gt;].&lt;span&gt;toString&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&quot;0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;: &lt;span&gt;Array&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;]): &lt;span&gt;Unit&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;System&lt;/span&gt;.&lt;span&gt;setProperty&lt;/span&gt;(&lt;span&gt;&quot;hadoop.home.dir&quot;&lt;/span&gt;,&lt;span&gt;&quot;E:\\devlop\\envs\\hadoop-common-2.2.0-bin-master&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;testSparkSession&lt;/span&gt;: &lt;span&gt;SparkSession&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;SparkSession&lt;/span&gt;.&lt;span&gt;builder&lt;/span&gt;().&lt;span&gt;appName&lt;/span&gt;(&lt;span&gt;&quot;Extra optimization rules&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;master&lt;/span&gt;(&lt;span&gt;&quot;local[*]&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;withExtensions&lt;/span&gt;(&lt;span&gt;extensions&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;extensions&lt;/span&gt;.&lt;span&gt;injectOptimizerRule&lt;/span&gt;(&lt;span&gt;session&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;MyOptimizer&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      })&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;      .&lt;span&gt;getOrCreate&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;sparkContext&lt;/span&gt;.&lt;span&gt;setLogLevel&lt;/span&gt;(&lt;span&gt;&quot;ERROR&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;import&lt;/span&gt; &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;implicits&lt;/span&gt;.&lt;span&gt;_&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;experimental&lt;/span&gt;.&lt;span&gt;extraOptimizations&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Seq&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;Seq&lt;/span&gt;(&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;-&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;-&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;).&lt;span&gt;toDF&lt;/span&gt;(&lt;span&gt;&quot;nr&quot;&lt;/span&gt;).&lt;span&gt;write&lt;/span&gt;.&lt;span&gt;mode&lt;/span&gt;(&lt;span&gt;&quot;overwrite&quot;&lt;/span&gt;).&lt;span&gt;json&lt;/span&gt;(&lt;span&gt;&quot;./test_nrs&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//    val optimizedResult = testSparkSession.read.json(&quot;./test_nrs&quot;).selectExpr(&quot;nr + 0&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;read&lt;/span&gt;.&lt;span&gt;json&lt;/span&gt;(&lt;span&gt;&quot;./test_nrs&quot;&lt;/span&gt;).&lt;span&gt;createTempView&lt;/span&gt;(&lt;span&gt;&quot;p&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;sql&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;select nr+0 from p&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;t&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;t&lt;/span&gt;.&lt;span&gt;queryExecution&lt;/span&gt;.&lt;span&gt;optimizedPlan&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;t&lt;/span&gt;.&lt;span&gt;show&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;sql&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;select 0+nr from p&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;var&lt;/span&gt;  &lt;span&gt;u&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;u&lt;/span&gt;.&lt;span&gt;queryExecution&lt;/span&gt;.&lt;span&gt;optimizedPlan&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;u&lt;/span&gt;.&lt;span&gt;show&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;sql&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;select nr+8 from p&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;var&lt;/span&gt;  &lt;span&gt;v&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;testSparkSession&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;v&lt;/span&gt;.&lt;span&gt;queryExecution&lt;/span&gt;.&lt;span&gt;optimizedPlan&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;sql&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;v&lt;/span&gt;.&lt;span&gt;show&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//    println(optimizedResult.queryExecution.optimizedPlan.toString() )&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;//    optimizedResult.collect().map(row =&amp;gt; row.getAs[Long](&quot;(nr + 0)&quot;))&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;Thread&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;(&lt;span&gt;1000000&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;执行如下&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n112&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;Project [(nr#12L + 3) AS (nr + CAST(0 AS BIGINT))#14L]&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+- Relation[nr#12L] json&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;select nr+0 from p&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|(nr + CAST(0 AS BIGINT))|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       2|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       1|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       0|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;Project [nr#12L AS (CAST(0 AS BIGINT) + nr)#21L]&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+- Relation[nr#12L] json&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;select 0+nr from p&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|(CAST(0 AS BIGINT) + nr)|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                      -1|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                      -2|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                      -3|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;Project [(nr#12L + 8) AS (nr + CAST(8 AS BIGINT))#28L]&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+- Relation[nr#12L] json&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;select nr+8 from p&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;this this my add optimizer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|(nr + CAST(8 AS BIGINT))|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       7|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       6|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;|                       5|&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;+------------------------+&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;/pre&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 mdtype=&quot;heading&quot; cid=&quot;n22&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;扩展策略&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n26&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n28&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;SparkStrategies包含了一系列特定的Strategies，这些Strategies是继承自QueryPlanner中定义的Strategy，它定义接受一个Logical Plan，生成一系列的Physical Plan&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n164&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通过Strategies把逻辑计划转换成可以具体执行的物理计划，代码如下&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;scala&quot; cid=&quot;n50&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;strategy&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.{&lt;span&gt;SparkSession&lt;/span&gt;, &lt;span&gt;Strategy&lt;/span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;catalyst&lt;/span&gt;.&lt;span&gt;plans&lt;/span&gt;.&lt;span&gt;logical&lt;/span&gt;.&lt;span&gt;LogicalPlan&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;apache&lt;/span&gt;.&lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;sql&lt;/span&gt;.&lt;span&gt;execution&lt;/span&gt;.&lt;span&gt;SparkPlan&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;object&lt;/span&gt; &lt;span&gt;MyStrategy&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Strategy&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;apply&lt;/span&gt;(&lt;span&gt;plan&lt;/span&gt;: &lt;span&gt;LogicalPlan&lt;/span&gt;): &lt;span&gt;Seq&lt;/span&gt;[&lt;span&gt;SparkPlan&lt;/span&gt;] &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;println&lt;/span&gt;(&lt;span&gt;&quot;Hello world!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;Nil&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;: &lt;span&gt;Array&lt;/span&gt;[&lt;span&gt;String&lt;/span&gt;]): &lt;span&gt;Unit&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;System&lt;/span&gt;.&lt;span&gt;setProperty&lt;/span&gt;(&lt;span&gt;&quot;hadoop.home.dir&quot;&lt;/span&gt;,&lt;span&gt;&quot;E:\\devlop\\envs\\hadoop-common-2.2.0-bin-master&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;spark&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;SparkSession&lt;/span&gt;.&lt;span&gt;builder&lt;/span&gt;().&lt;span&gt;master&lt;/span&gt;(&lt;span&gt;&quot;local&quot;&lt;/span&gt;).&lt;span&gt;getOrCreate&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;experimental&lt;/span&gt;.&lt;span&gt;extraStrategies&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Seq&lt;/span&gt;(&lt;span&gt;MyStrategy&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;val&lt;/span&gt; &lt;span&gt;q&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;catalog&lt;/span&gt;.&lt;span&gt;listTables&lt;/span&gt;.&lt;span&gt;filter&lt;/span&gt;(&lt;span&gt;t&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;t&lt;/span&gt;.&lt;span&gt;name&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;&quot;six&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;q&lt;/span&gt;.&lt;span&gt;explain&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;spark&lt;/span&gt;.&lt;span&gt;stop&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n51&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;执行效果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8481152993348116&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9iblyp7wFkiahkdzuCSszMFZfIct6eafWztVeSuM2KEBlp5uryby18ogkicTYBwxI4YgwyuKVGRkoMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n169&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;好了，扩展部分就先介绍到这，接下来我计划可能会简单说说RBO和CBO，结合之前做过的一个小功能，一条SQL的查询时间预估。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注 【&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;麒思妙想&lt;/span&gt;&lt;span&gt;】解锁更多硬核。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;历史文章导读&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果文章对您有那么一点点帮助，我将倍感荣幸&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎  &lt;span&gt;&lt;strong&gt;关注、在看、点赞、转发 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8uJ0ic6nAag8EItgzqIEhe3GbK3ibibrSC3kGNLaCYoEXEEEV8vatdHqibkazrs7oLJERAG1cldW9pbVmcTKvXL3fA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>