<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fcd5533056f987461aba12153dc3ae71</guid>
<title>[推荐] 我看技术人的成长路径</title>
<link>https://toutiao.io/k/qnlw4ck</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>22aed2c10deed0d8c8d4d8e11c3df400</guid>
<title>[推荐] 大话后端开发的奇淫技巧（二）</title>
<link>https://toutiao.io/k/7eacn7b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article itemscope=&quot;&quot; itemtype=&quot;http://schema.org/BlogPosting&quot;&gt;
            &lt;p&gt;从事服务端工作，已经有大几年了，从懵懂的小菜鸡，成长为可以自由飞翔的秃鹰，那些逝去青春和的头发见证了自己的成长&lt;/p&gt;

&lt;p&gt;或许，这就是高手的应该有样子吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.thankbabe.com/imgs/tule2.jpg&quot; alt=&quot;头秃图&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里将会把类似的问题/业务场景的解决方案中，提炼出相对通用的部分，作为经验进行梳理罗列出来，共勉&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;幂等&quot;&gt;幂等&lt;/h3&gt;

&lt;h4 id=&quot;业务场景&quot;&gt;业务场景：&lt;/h4&gt;

&lt;p&gt;用户多次点击按钮，或者因为设备的性能问题，连接的网络问题，点击按钮没反应，用户就会继续尝试点击，导致触发多次请求提交&lt;/p&gt;

&lt;h4 id=&quot;解决方案&quot;&gt;解决方案：&lt;/h4&gt;

&lt;p&gt;客户端防重点击：&lt;br/&gt;
防重点击，只允许点击一次，通过记录按钮的状态值，控制按钮不可点击，等响应结果回来才能再次被点击&lt;/p&gt;

&lt;p&gt;服务端:&lt;/p&gt;

&lt;p&gt;1.表约束&lt;/p&gt;

&lt;p&gt;表设计字段的唯一约束，比如：签到记录表，用户 ID+签到日期这两个字段组合建立唯一索引 UNIQUE，使用事物操作，先 INSERT 签到记录，成功后再去 UPDATE 积分
并行执行的时候，必然只能有一个 INSERT 成功，其他都失败，最终只会累加一次积分&lt;/p&gt;

&lt;p&gt;2.分布式锁&lt;/p&gt;

&lt;p&gt;分布式锁约束，可以利用 redis incr 原子操作的特性来实现&lt;/p&gt;

&lt;p&gt;在操作业务前，先获取用户 ID 的 incr，获取到值=1，代表获取到锁成功，进行原子操作，然后执行业务逻辑，执行成功后删除掉 key&lt;/p&gt;

&lt;p&gt;如果获取到值&amp;gt;1 获取执行锁失败，代表执行没结束，锁没有释放，无法继续执行，直接返回失败&lt;/p&gt;

&lt;p&gt;这里需要注意避免网络抖动或者业务执行报错导致最终 key 删除没成功，所以再执行 incr 获取锁成功后，同时获取下 ttl 值，如果 ttl 没设置，这个时候需要对 key 设置下 ttl，超出时间后让 key 自动过期，以免锁没释放，导致死锁&lt;/p&gt;

&lt;p&gt;3.token 机制&lt;/p&gt;

&lt;p&gt;在操作前先获取令牌 token，token 只能被使用一次，执行业务逻辑前，需要去 update token 使用状态，update 成功，才能执行后续业务逻辑，update 失败，代表 token 已经被使用，返回失败&lt;/p&gt;

&lt;p&gt;可以使用 mysql token 表+redis list，list 作为令牌桶，需要的业务从队列中 pop 获取令牌，使用的时候状态 update token 表&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;主从延迟&quot;&gt;主从延迟&lt;/h3&gt;

&lt;h4 id=&quot;业务场景-1&quot;&gt;业务场景：&lt;/h4&gt;
&lt;p&gt;用户反馈说看不到刚提交的数据或者没更新成功，或者触发了非正常流程能理解的逻辑，排查后发现数据正常&lt;/p&gt;

&lt;h4 id=&quot;解决方案-1&quot;&gt;解决方案：&lt;/h4&gt;

&lt;p&gt;说到主从延迟，大家应该就不陌生了，只要数据库（mysql，redis）部署是主从分离的，多多少少都会遇到过这种问题&lt;/p&gt;

&lt;p&gt;低概率场景，就是数据写入/更新到主库，从库因为网络抖动等原因，没有及时同步到，然后查询的时候走的是从库，导致查到的是脏数据，这种情况就只能竟可能保障服务器环境稳定&lt;/p&gt;

&lt;p&gt;其实出现这种问题比较多的情况是，insert/update 到主库成功后，马上就查询数据，这个时候可能数据还没同步到从库，虽然主从同步会比较快，但是还是有一定的延迟性&lt;/p&gt;

&lt;p&gt;这种情况就需要将查询指定到主库上进行操作，就可以避免主从延迟，查询不到最新数据的问题&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;并发&quot;&gt;并发&lt;/h3&gt;

&lt;h4 id=&quot;业务场景-2&quot;&gt;业务场景：&lt;/h4&gt;

&lt;p&gt;用户快速点击按钮，或者通过压测工具，写脚本发起并发请求分发到多台服务器，多台同时接收到请求，多次/并发请求有机率会并行执行，导致超出正常逻辑范围的问题&lt;/p&gt;

&lt;p&gt;往往在这种情况下，会出现很多异常的数据，比如：同一天多条的签到记录，并且多次累加积分奖励&lt;/p&gt;

&lt;p&gt;职业羊毛党使用工具或者写脚本恶意发起并发请求接口，翻倍获利后提现，从漏洞中谋取利益&lt;/p&gt;

&lt;h4 id=&quot;解决方案-2&quot;&gt;解决方案：&lt;/h4&gt;

&lt;p&gt;表约束&lt;br/&gt;
同 ↑ 幂等的解决方案&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;安全隐私&quot;&gt;安全隐私&lt;/h3&gt;

&lt;h4 id=&quot;业务场景-3&quot;&gt;业务场景：&lt;/h4&gt;

&lt;p&gt;在涉及用户隐私数据或者一些商业性敏感数据业务，接口下发数据的时候没有做脱敏，把用户的隐私的数据赤裸裸的暴露出来，如：将用户的手机号，身份证号码，等重要信息直接明文及接口输出&lt;/p&gt;

&lt;p&gt;将用户 ID 作为图片命名，可以轻松遍历用户上传的图片，身份证照片等，用于非法用途&lt;/p&gt;

&lt;h4 id=&quot;解决方案-3&quot;&gt;解决方案：&lt;/h4&gt;

&lt;p&gt;数据脱敏：&lt;/p&gt;

&lt;p&gt;在不违反系统规则条件下，对真实数据进行改造，进行数据脱敏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据规则改造敏感数据输出
    
  &lt;/li&gt;
  &lt;li&gt;敏感数据传递，加密处理
    &lt;ul&gt;
      &lt;li&gt;aes 加密&lt;/li&gt;
      &lt;li&gt;hashids 足够短，不可预测且唯一的数字 ID&lt;/li&gt;
      &lt;li&gt;…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CND 媒体地址安全：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大部分 cdn 平台都支持&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;URL 鉴权
    
  &lt;/li&gt;
  &lt;li&gt;防盗链
    
  &lt;/li&gt;
  &lt;li&gt;限制访问
    &lt;ul&gt;
      &lt;li&gt;Referer 防盗链&lt;/li&gt;
      &lt;li&gt;UserAgent 黑白名单&lt;/li&gt;
      &lt;li&gt;IP 黑白名单&lt;/li&gt;
      &lt;li&gt;等（具体看第三支持）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;mq-业务解耦神器&quot;&gt;MQ 业务解耦神器&lt;/h3&gt;

&lt;h4 id=&quot;异步业务解耦&quot;&gt;异步业务解耦&lt;/h4&gt;

&lt;p&gt;业务场景：&lt;/p&gt;

&lt;p&gt;比如，订单下单结算成功后，发送推送通知、发放优惠券奖励，操作业务异步任务，通知用户领取，等&lt;/p&gt;

&lt;p&gt;类似这种非业务主流程里内容，主流程执行完成后可以立即返回响应给用户，其他一些成功后的附加操作通过入列到 MQ，进行异步的处理&lt;/p&gt;

&lt;p&gt;MQ也可以用于实现跨进程，跨语言消息通讯&lt;/p&gt;

&lt;p&gt;通多订阅方便业务拓展，ack 机制保障执行的完成，死信队列，进行容错处理&lt;/p&gt;

&lt;p&gt;不同的MQ中间件的支持略有差异，各有各的特性，大同小异，不同MQ优势也不一样，可以根据自己的需求场景选择合适的中间件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;rabbitmq&lt;/li&gt;
  &lt;li&gt;kafka&lt;/li&gt;
  &lt;li&gt;rocketmq&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;img src=&quot;http://blog.thankbabe.com/imgs/mq.jpg&quot; alt=&quot;&quot;/&gt;&lt;/h2&gt;

&lt;h3 id=&quot;缓存大法&quot;&gt;缓存大法&lt;/h3&gt;

&lt;p&gt;在高并发场景下，通过缓存热数据，减轻 DB 压力，提高响应速度&lt;/p&gt;

&lt;p&gt;缓存可以分为服务端缓存和客户端缓存&lt;/p&gt;

&lt;p&gt;服务端缓存：&lt;/p&gt;

&lt;p&gt;当前使用比较多的分布式内存缓存数据库就是 redis，结合支持的数据类型和特性，再加上开发的创造力，可以满足大部分需求&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;但是在使用的过程中也会遇到一些使用不当的问题，这里罗列下常见的问题：&lt;/p&gt;

&lt;p&gt;1.缓存更新&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;对于一些用户私有数据&lt;/code&gt;，一般会在数据更新的时候，del cache，然后后续获取的数据的时候，先从 cache 中获取，如果不存在，再从 db-&amp;gt;cache，最后输出给用户&lt;/p&gt;

&lt;p&gt;但是由于网络抖动等，有可能会低概率的导致 del cache 没成功，所以，一般我们会在设置 cache 的时候加过期时间，让脏数据可以在短时间内失效，这样也可以对于一些不常查询的数据进行过期清理&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;对于一些公用的热数据&lt;/code&gt;，如：商品列表等，运营人员通过后台配置商品，配置完成后，最后操作缓存更新，这个时候需要对缓存进行平滑的过度更新，不能先删除 key，再写入缓存，这种操作会导致有用户在缓存更新进去前，短暂时间区间内获取不到商品&lt;/p&gt;

&lt;p&gt;之前做过类似的需求，解决方案就是，会在创建的缓存 key 设计版本号规则，然后缓存创建成功后，在替换可以展示的版本号，把旧的版本号的数据设置过期时间&lt;/p&gt;

&lt;p&gt;旧版本数据不能马上删除，设置合理过期时间，是因为旧版本数据还会在短时间内被使用，比如：用户已经使用旧版本数据查询，并且继续后面的分页查询，设置过期时间可以合理时间内再过去清理掉旧不使用的数据&lt;/p&gt;

&lt;p&gt;数据获取就先获取当前要展示的版本号，然后获取本号对应的数据&lt;/p&gt;

&lt;p&gt;早前有写过一个类似的，场景会更佳复杂的缓存更新的方案，&lt;a href=&quot;http://blog.thankbabe.com/2017/05/21/api-design/&quot;&gt;高并发业务接口开发思路&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.穿透&lt;/p&gt;

&lt;p&gt;cache 和 db 中都没有数据，读完 cache 没有，再读 db 还是没有，每次都请求到 cache 和 db&lt;/p&gt;

&lt;p&gt;一般情况就是 null 数据问题导致，解决方案就是，可以将null也缓存起来，避免穿透到 DB
如果有较多 null 数据，可以使用 bitmaps 布隆过滤器，来标识存储 null 的数据，节约存储空间&lt;/p&gt;

&lt;p&gt;3.击穿，雪崩&lt;/p&gt;

&lt;p&gt;出现大量 cache 数据同时过期，导致大量请求同时请到 db&lt;/p&gt;

&lt;p&gt;对于高并发业务的热数据的缓存，就不能删除/设置过期时间，只能通过平滑的过度进行更新，类似上面缓存更新中提到的方案&lt;/p&gt;

&lt;p&gt;4.压缩数据，数据过期&lt;/p&gt;

&lt;p&gt;redis缓存使用的是内存空间，所以比较稀缺，即使财大气粗分布式再多的机器，也经不起不起随意的霍霍&lt;/p&gt;

&lt;p&gt;对于不使用的字段，或者数据，都不要存储到缓存，有时候就是为了方便，直接json序列化整个对象，就直接缓存起来了&lt;/p&gt;

&lt;p&gt;对于用户私有的缓存，或者热度不高的缓存，需要设置缓存过期时间，避免长期不查询的垃圾数据堆积，占用空间，后面遇到的瓶颈，再来清理就麻烦了&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;客户端缓存:&lt;/p&gt;

&lt;p&gt;1.缓存版本数据&lt;/p&gt;

&lt;p&gt;客户端缓存数据+数据版本号，每次获取数据的时候上传数据版本号参数，服务端校验是否最新数据，如果是最新就不下发数据，客户端可以继续使用本地数据&lt;/p&gt;

&lt;p&gt;2.增量拉取更新&lt;/p&gt;

&lt;p&gt;服务端接口返回数据的时候，返回当前时间戳，客户端对数据和拉取时间戳进行缓存，后续客户端请求带上时间戳，服务端匹配更新时间&amp;gt;时间戳时间的数据，进行下发，实现客户端数据的增量/修改更新&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;redis 巧用&lt;/p&gt;



&lt;hr/&gt;

&lt;h3 id=&quot;日志监控&quot;&gt;日志/监控&lt;/h3&gt;

&lt;p&gt;关于日志：&lt;/p&gt;

&lt;p&gt;当线上用户反馈问题的时候，我们需要去排查问题，就靠用户的几段描述和APP的截图，有时候很难排查出根本问题&lt;/p&gt;

&lt;p&gt;这个时候如果能提供用户的请求日志轨迹就可以很好帮助到排查&lt;/p&gt;

&lt;p&gt;我们目前对于日志这块的支持有两块，一个是nginx请求日志，通过elk搭建日志系统，进行日志的收集和展示&lt;/p&gt;

&lt;p&gt;同时在数加也会备份可一份长时间的请求日志，对于历史过长的请求日志，可以到数加进行表查询&lt;/p&gt;

&lt;p&gt;一般的错误日志也可以上报到elk中，独立出一个err group方便查询&lt;/p&gt;



&lt;hr/&gt;

&lt;p&gt;关于监控：&lt;/p&gt;

&lt;p&gt;监控可以分为，服务器的监控，业务功能的监控&lt;/p&gt;

&lt;p&gt;线上服务器稳定性，决定了业务功能的稳定一个重要因素，这部分主要是运维这边去保障&lt;/p&gt;

&lt;p&gt;业务功能的监控，除了偶尔翻下错误日志，修复异常情况以外，还需要对于一些业务进行功能的监控，比如：一些定时的服务，定时的推送，每天整点需要对没有记录的用户进行提醒推送，需要保障圈定用户的效率和推送的速度，保障在规定时间内容推送出去&lt;/p&gt;

&lt;p&gt;随着业务增长，数据不断的增加，原本一个小时搞定的执行，可能会一直的延长，最后可能一整天都执行不完，对应这种业务，就需要在用户反馈之前，优先的get到问题，然后进行优化改善&lt;/p&gt;

&lt;p&gt;这个时候就需要有一个监控功能，对业务功能进行监控，超出预警进行预警通知，尽快的改善问题&lt;/p&gt;

&lt;hr/&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;在服务端开发的这几年，参与过公司里的好几个项目，有电商相关，工具类相关，等，因为项目本身技术背景和技术改进需要，在开发语言上也涉猎了好几门，有 .net（项目），java（项目），nodejs（项目），python（采集，爬虫），php（转岗项目），golang（微服务），谈不上每个语言都有多么的熟练，一般的业务开发是没有多大问题&lt;/p&gt;

&lt;p&gt;其实语言就是一个实现业务需求的工具，就像锄头和镐子，镰刀和柴刀，菜刀和小刀，基础使用方式差不多，就是在不同的需求场景下优势不一样，适合的场景使用适合的工具&lt;/p&gt;

&lt;p&gt;参与这么多个项目和涉猎这么多的语言，会发现服务端的经验是通用的，与语言和项目无关，就是解决一些问题和业务场景的解决思路和方案&lt;/p&gt;

&lt;p&gt;竟可能在一段时间里对参与过的业务/问题的解决方案进行梳理总结，这样才能很好的把共同场景的解决方案，提炼成自己的经验，不然时间一长很多做过的内容都忘记了&lt;/p&gt;

            &lt;hr/&gt;
            
            &lt;hr/&gt;
            &lt;blockquote&gt;
                &lt;p&gt;
                    
                    有任何想说的请留言哦
                    &lt;br/&gt;
                    转载请申明原文地址，谢谢合作
                &lt;/p&gt;
            &lt;/blockquote&gt;
            
            &lt;div&gt;
                &lt;p&gt;老铁们关注我的《大话WEB开发》微信公众号，跟踪我的原创博文&lt;/p&gt;
                &lt;p&gt;并不定时推荐WEB开发相关技术博文，共勉与学习交流！二维码↓&lt;/p&gt;
                &lt;img src=&quot;http://blog.thankbabe.com/imgs/gzh.jpg&quot; alt=&quot;我的公众号&quot;/&gt;
            &lt;/div&gt;
            
            
        &lt;/article&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7cc2faa1e19f694832e73ff5e312961</guid>
<title>[推荐] 生产力工具</title>
<link>https://toutiao.io/k/ltecz1p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;生产力工具&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;当下什么才是最重要的?&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;是时间, 我加了时间 &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXhmIFpqtHiaheADHrTlqZlYqk1HPWlzm3QtJj3GJxRpIFgEeUPsiaf9Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt; &quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;省下时间才能做更多事情, 所以提高生产力才是王道啊! 文章内容均来自本人真实体验和观点, 分享一些我常用的生产力工具.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;utools&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用mac 的同学可能用过 &lt;strong&gt;Alfred&lt;/strong&gt;, &lt;strong&gt;utools&lt;/strong&gt; 功能与之类似.提供了诸多小工具, 和常用开发文档. utools 也是类 spotlight 应用. 没用过的可以体验一下.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 macOS, windows 双平台. mac 上可以通过 option + space 呼出&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.47&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUHuhbV9kicGHH30ClsB6hSxibdVsGN1TIgS0oC5NemiaM0HXJDhVETnRJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用简单支持输入, 拖拽, 自动粘贴等. 如下拖拽图片会匹配相应的插件供用户筛选使用&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUAXRYbVGA0OhttMjjASGhPDq4PVwJAGGzHPO7H254ibNOZ3rMbAGt7sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;快速启动, 对中文友好.&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.67&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUicvVV3nnFRzic5C8TDO7JEjnAeQibIxdJc6VuEexSI49prnTO1dh0D4hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;以下是我常用的工具, 推荐大家试试:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Everything(windows)&amp;amp;Everything(Mac) 可搜索搜索 文件名文件内容.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图片压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图床&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;json 编辑器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Code 计算器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hosts 切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化助手&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;各种文档&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外, utools 开放了插件系统, 用户可以自助编写, 或提交插件供其他用户使用.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;typora&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32196969696969696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWVtiaFIFEDuo1RCrdCzeeTMCrL06t1X8tjA4nppVW63HJIlgoHK8iaWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Typora 首先是一个 Markdown 文本编辑器, 它支持且仅支持 Markdown 语法的文本编辑.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;同样支持 window, macOS, linux 等多个平台. beta 版本可以免费使用. 目前只有 beta 版本&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;界面简洁美观, 写的舒服,提供多种 Markdown 选择的权利, 非常适合做笔记.&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUuVAcIYmSFZ4ZhXlYDJvRzmJ2qB8X6NYDicu9EmTuKsXAxX8fPEnS3mQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可以自定义主题, 是要你前端玩的6. 当然也提供能主题可供筛选&lt;/p&gt;&lt;p&gt;typora 主题&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUulX151EgicksDibjicA1zsVTDdzjgPaibcSH8kibJp2yWeUibia6icxh7NCKcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5657407407407408&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持导出 html, pdf, docx 等多种格式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6771844660194175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXsGX8qmsTINaRYPwnTic5OYCHqQIwSNc58SrWJletTG0BrP1pBPSUUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;412&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提一嘴, 本片文章就是使用的 typora 编写的. 在笔记工具挑选方面我做出了很多时间, 最终选择 typora + github 的方式.  想看一眼的话, 手机上可以同过 github App(未来可期) 预览.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PicGo&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图传 一开始用的是 utools 的图床插件. 没毛病的. 一样很好用, 直到我发现 typora 和 PicGo 联动功能之后, 便爱不释手.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;微博图床&lt;/code&gt; V1.0 &lt;strong&gt;微博图床从2019年4月开始进行防盗链，不建议继续使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;七牛图床&lt;/code&gt; V1.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;腾讯云COS v4\v5版本&lt;/code&gt; v1.1和v1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;又拍云&lt;/code&gt; V1.2.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GitHub&lt;/code&gt; V1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SM.MS&lt;/code&gt; V1.5.1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;阿里云OSS&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Imgur&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持 windows, macOS, linux 多个操作系统&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Typora 复制上传 PicGo&lt;/p&gt;&lt;img data-ratio=&quot;0.8650568181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvlCKpwxK97fvFLSwIEssCFqfZkf7nICTCujsq2icKJPribt8C2yNJpqw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;typora&amp;gt; 偏好设置&amp;gt;图片, 如下图设置即可&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.688034188034188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWibCX33YwMyMhJmoIIVyRztem3ickzyY2ibgnLqTJPC75ZaEoVd57JkRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Clipy&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUZibRwatibT2tsCyIs1fL9IsneAZzrOwHWpleZGYbjAttKskz05tibiafVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在 Mac 上还在使用传统的 &lt;code&gt;⌘Command-C&lt;/code&gt; 和 &lt;code&gt;⌘Command-V&lt;/code&gt; 快捷键来操作剪贴版，那样是很难谈得上有效率的。而使用剪贴板工具能够帮助你减少重复性输入，提高输入文字的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;⇧ +⌘ + V&lt;/code&gt; 呼出&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6469248291571754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUricribWQhr8MUDvKrCPMib8ObnT044YEqauYtE65WKPCpqUeXuT9sq8Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Clipy 全面支持纯文本、富文本（RTF、RTFD）、PDF、Filename、URL、TIFF Image 这些格式，能基本满足使用者们的需求。!&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持自定义分组片断(一个复制的文本)&lt;/p&gt;&lt;p&gt;⇧ +⌘ + V &amp;gt; 编辑片段 &amp;gt; 添加文件夹&amp;gt;添加片断&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.77875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNURgKCWxzrq4fiaK4uWLJ9P5pqeTIghkStGCsWjgPjddvyUTHWB4I2ZuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;OneNote&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能是工作还是学习, 可以说最接近真实是笔记本的存在. 一开始我也尝试过做自己的笔记博客载体, 但是实在是过于灵活了. 后来我选择 Markdown 编辑器 Typora . OneNote 我找到了新的使用场景  GTD (Getting Things Done).&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是 GTD? Getting Things Done 应该翻译为，“把事情处理完” 或者 “把事情做好”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是有时候会觉得&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;觉得自己每天都有好多事情要做，作业、培训、报表、项目、工作总结、微信、电话、邮箱……早上出门发现垃圾没扔，晚上回家发现洗衣机的衣服没晾……打开手机看到别人的出行照片和视频才发现，原来心心念念一年的旅行连计划都还没有做……睡前更要挣扎好久才能睡，因为你可能突然想到，单词没有背、买的几本书没看，收藏夹里还有数不清的文章在吃灰……&quot;  ----引自 topbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是这种状态建议 可以了解一下 GTD, 本文不做过多赘述 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5044444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUgQyvkcCticFicsj633Dou0Od5pNbSLzpvZomictDSuyKQNWnfylnBDFDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUl2Ll673pqcbUbG2FCcWkSyDKxWQmdkWt8QK420cpkrkWUB1LD0I7SQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataGrip&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUeFSFkvXeCDgVNBl1D4loicVkjZzXLxAOOBuES50RNH4FW6mQrOHq7lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中少不了各种可视化数据库管理工具。如果需要同时能连接多种数据库，大家肯定都会想到 &lt;strong&gt;DBeaver&lt;/strong&gt;、&lt;strong&gt;Navicat Premium&lt;/strong&gt; , 其实 DataGrip 也很香的.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Intellij 全家桶工具之一, 所以你不用担心用不习惯, 有些操作手感来了就自己会了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供多数据库驱动 比 Navicat多一些&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有智能的上下文敏感和编码语法提示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有可视化的表格编辑，你可以添加、删除、编辑和克隆数据行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供版本控制支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构支持（主要是会给你SQL优化的建议，使你能够重构sql）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1435768261964736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUTEh0qwUkanZb8ia2vDjoCC81hW4mwzBH2q667USg4iarVM83LviaCfKhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Chrome 插件&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;uBlock Origin&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一款高效的网络请求过滤工具，能去除网页的大部分广告包括视频的广告而且占用极低的内存和CPU(相对 adblock plus)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.24770642201834864&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvcScdOKyiaJB9E8dc4Qyr46PpCUfxO3mt0uAxGcTIwpuaUzEib92hJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 的拦截更新里面能添加adblock的规则&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 能拦截视频广告 直接跳过非黑屏&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Aerys - 窗口标签管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火, 清爽的网页标签管理器.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⌘+⇧+k 快捷键打开&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直接输入搜索标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类显示现有标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击跳转，方便查找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类关闭，快速清理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖动改变顺序，方便在窗口之间移动标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;显示最近关闭的标签页，点击重新开启&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5130784708249497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUyATlMNJKY5bsGZ8cAR0uiaqW6OX5XTWr7zxjibHXSLuZRXhTsoBICgVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Dark Reader&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;黑暗主题&lt;/strong&gt; 我知道很多人不喜欢. 但是我还是要说&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个护眼程序, 可以实时生成一个黑暗主题为每个网站启动夜间模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4395702775290958&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUSqRLo6XE1R11fPdhSeaAcf9AqwjBzWcYMn3xa2IlGhXpb4iaWchLuRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1117&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU19KdeEzx6JFXdUH7ttldiaFKdkPC1fOBG7xibxibE51djDAy0N8DCtotg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Git Master&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持GIt目录树查看&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件夹和 文件名搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GitHub显示仓库、文件大小，并支持文件复制下载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github 消息通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件历史浏览 GitHub &amp;amp;&amp;amp; GitLab&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些同学用过 Octotree, 但是 Octotree支持 github. Git Master 支持 github, gitLab, gitee,gitea&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0590277777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU1G5XMsdicym3K8nxWpgstrBL3bricBqjaP3XibGpLdm75hAibUtkCdOD0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;53&quot; data-cropselx2=&quot;303&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;250&quot; data-ratio=&quot;0.7015755329008341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicX09OR6yyCDtUJFIj4Xolq2r8rziaHd06LrLuor2nZQBLNibM3SYZQ4fhA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot; data-backw=&quot;356&quot; data-backh=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IDEA 插件&lt;br/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;EasyYapi&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EasyYapi 是个Idea文档生成工具 . 详情可以参考API 管理平台工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;YAPI 部署地址 http://easy-interfaces.tongdun.me:8088&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49053627760252366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXicezibn4cqmoYMc0aticSyaZiaDJpENgDHiafddh3OVuT9R2LavOLxglEFg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;导出http到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;导出rpc到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Call api 调用 API&lt;/section&gt;&lt;/li&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;MyBatisCodeHelperPro&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;406&quot; data-ratio=&quot;0.7852593266606005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmy0FkFRNRZC9fTiaKP38x2YH4881QCkvbKg40f5IT1My2U9bq3O6JPxEoQYuDohWk0JZdo1v5o1icWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1099&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;438&quot; data-ratio=&quot;0.7270560190703218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXCzhtPBjIEGEmA9JuESMvqy4icibPNkEHf8AY8GZia7SKgMAkf5bLgvwEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;839&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能点&lt;/th&gt;&lt;th&gt;未激活版&lt;/th&gt;&lt;th&gt;激活版&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;接口与xml互相跳转 更换图标&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;接口方法名重构&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加param&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml中的 param的自动提示 resultMap refid 等的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中的property的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测没有使用的xml 可一键删除&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测mybatis接口中方法是否有实现，没有则报红 可创建一个空的xml方法块&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测resultmap的property是否有误&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持spring 将mapper注入到spring中 intellij的spring注入不再报错 支持springboot&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成分页查询&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;代码模版，生成cdata和collection语句&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加resultMap中未被使用的属性&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成mybatis接口的testcase&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过方法名生成sql&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过数据库生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过java类生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml collection中的 param提示&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;识别mybatis的标签 全自动sql补全&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测#{中的参数是否正确&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;if test when test foreach collection $中的OGNL支持&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;param重构功能(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中column提示与检测(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mybatis xml代码格式化(2.8.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是收费的功能比较好用. 之前好像是 99块钱 3 年吧. 我之前买过.还是买的起的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyBatisCodeHelper-Pro插件破解版 仅供大家学习, 有能力还是要支持一下正版&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Maven Helper&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Maven Helper 用于分析依赖冲突插件, 当然使用 Maven 命令也可以完成. maven helper 提高了 maven 使用体验 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8273504273504273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXkKHTGhBhYtaXWLk6NFOh5bVSPm880efNHcLEU3viaG4bQnShibafyTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;691&quot; data-ratio=&quot;1.238709677419355&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXvbdbmvdbbmeLicskNPsWO0G0FCG6MNNBot8r9mhbJ2ibmibxS6bHOrSicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是推荐使用的生产力工具. 每个人喜好不一样. 大家酌情筛选. 顺便提一个问题 , mac 有没有什么好用的 gif 编辑器. photoshop 就算了. 想找个轻量级一点的 .&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就分享这么多,欢迎关注,评论,点赞,转载~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmzRnkibQCicbgruQJxOGOYXYE7ZOpRiafYWaqSSdGFcicCyibI50SATqjc6qT7vm2ZFO7nsA6GfqcJbqmA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aadd2981bfa43a3ffa5f56a79cc54135</guid>
<title>[推荐] ClickHouse 的实践之路</title>
<link>https://toutiao.io/k/zn7gb6j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.084375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaHql4LCOdAUeJwmvS72ibDvaMNiaLQkNZjTFquznHkHcccc2hnKS6nNAx0Y7bSUia0iaUZxQ5N5Zfxldw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;在数据量日益增长的当下，传统数据库的查询性能已满足不了我们的业务需求。而Clickhouse在OLAP领域的快速崛起引起了我们的注意,于是我们引入Clickhouse并不断优化系统性能，提供高可用集群环境。本文主要讲述如何通过Clickhouse结合大数据生态来定制一套完善的数据分析方案、如何打造完备的运维管理平台以降低维护成本，并结合具体案例说明Clickhouse的实践过程。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.为什么选择Clickhouse&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;目前企业用户行为日志每天百亿量级，虽然经过数仓的分层以及数据汇总层通用维度指标的预计算，但有些个性化的分析场景还是需要直接编写程序或sql查询，这种情况下hive sql和spark sql的查询性能已无法满足用户需求，我们迫切的需要一个OLAP引擎来支持快速的即席查询。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;BI存储库主要采用的是Infobright，在千万量级能很快的响应BI的查询请求，但随着时间推移和业务的发展，Infobright的并发量与查询瓶颈日益凸显，我们尝试将大数据量级的表导入TiDB、Hbase、ES等存储库，虽然对查询有一定的提速，但是也存在着相应的问题（后续章节会详细介绍），这时我们考虑到Clickhouse。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Clickhouse社区活跃度高、版本迭代非常快,几乎几天到十几天更新一个小版本，我们非常看好它以后的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.Clickhouse特性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Clickhouse是俄罗斯yandex公司于2016年开源的一个列式数据库管理系统，在OLAP领域像一匹黑马一样，以其超高的性能受到业界的青睐。&lt;br/&gt;&lt;strong&gt;特性：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不足：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse建设&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.整体架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5314136125654451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KkgRqkogqtnfufq4xjjkgiaqG0FwcckxHhZPD6XGINeBJxw0wx4ibREPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1910&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们依据数据的流向将Clickhouse的应用架构划分为4个层级。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;数据接入层&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;提供了数据导入相关的服务及功能，按照数据的量级和特性我们抽象出三种Clickhouse导入数据的方式。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式一：数仓应用层小表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;这类数据量级相对较小，且分布在不同的数据源如hdfs、es、hbase等，这时我们提供基于DataX自研的TaskPlus数据流转+调度平台导入数据，单分区数据无并发写入，多分区数据小并发写入，且能和线上任务形成依赖关系，确保导入程序的可靠性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式二：离线多维明细宽表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;这类数据一般是汇总层的明细数据或者是用户基于Hadoop生产的大量级数据，我们基于Spark开发了一个导入工具包，用户可以根据配置直接拉取hdfs或者hive上的数据到clickhouse，同时还能基于配置sql对数据进行ETL处理，工具包会根据配置集群的节点数以及Clickhouse集群负载情况(merges、processes)对local表进行高并发的写入，达到快速导数的目的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;方式三：实时多维明细宽表导入&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;实时数据接入场景比较固定，我们封装了通用的ClickhouseSink，将app、pc、m三端每日百亿级的数据通过Flink接入clickhouse，ClickhouseSink也提供了batchSize(单次导入数据量)及batchTime(单次导入时间间隔)供用户选择。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;数据存储层&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据存储层这里我们采用双副本机制来保证数据的高可靠，同时用nginx代理clickhouse集群，通过域名的方式进行读写操作，实现了数据均衡及高可靠写入，且对于域名的响应时间及流量有对应的实时监控，一旦响应速度出现波动或异常我们能在第一时间收到报警通知。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;nginx_one_replication：代理集群一半节点即一个完整副本，常用于写操作，在每次提交数据时由nginx均衡路由到对应的shard表，当某一个节点出现异常导致写入失败时，nginx会暂时剔除异常节点并报警，然后另选一台节点重新写入。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;nginx_two_replication：代理集群所有节点，一般用作查询和无副本表数据写入，同时也会有对于异常节点的剔除和报警机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;数据服务层&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对外：将集群查询统一封装为scf服务(RPC)，供外部调用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对内：提供了客户端工具直接供分析师及开发人员使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;数据应用层&lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;埋点系统：对接实时clickhouse集群，提供秒级别的OLAP查询功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户分析平台：通过标签筛选的方式，从用户访问总集合中根据特定的用户行为捕获所需用户集。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;BI：提供数据应用层的可视化展示，对接单分片多副本Clickhouse集群，可横向扩展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Clickhouse运维管理平台&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在Clickhouse的使用过程中我们对常见的运维操作如：增删节点、用户管理、版本升降级等封装了一系列的指令脚本,再结合业务同学使用过程中的一些诉求开发了Clickhouse管理平台,该平台集管理、运维、监控为一体，旨在让用户更方便、快捷的使用Clickhouse服务，降低运维成本，提高工作效率。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KkiaJDIxicl79IbwmwvnibcmvWE2yLKh3v7wwcjeI38JzJEWT0WEgmzrPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;配置文件结构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在自动化运维操作时会经常修改配置文件，而clickhouse大部分参数都是支持热修改的，为了降低修改配置的带来的风险和便于维护管理，我们将默认的配置文件做了如下拆解。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.6029673590504451&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4K0tNjg8y0D3zgMkuxL4NSlKOY13ib8qrL8yleYQb2bbXjZlwdkKEDYoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1685&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;默认的users.xml可分为三个部分&lt;br/&gt;用户设置users：主要配置用户信息如账号、密码、访问ip等及对应的权限映射&lt;br/&gt;配额设置quotas：用于追踪和限制用户一段时间内的资源使用&lt;br/&gt;参数权限profiles：读写权限、内存、线程等大多数参数配置&lt;br/&gt;为了统一管理权限我们在users.xml预定义了对应权限及资源的quotas及profiles，例如default_profile、readwrite_profile、readonly_profile等,新增用户无需单独配置quotas及profiles,直接关联预定义好的配置即可&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users.d/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;按不同的用户属性设置user配置，每一个xml对应一组用户,每个用户关联users.xml中的不同权限quotas及profiles&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;users_copy/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;每次有变更用户操作时备份指定属性的xml，方便回滚&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;metrika.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;默认情况下包含集群的配置、zookeeper的配置、macros的配置,当有集群节点变动时通常需要将修改后的配置文件同步整个集群,而macros是每个服务器独有的配置,如果不拆解很容易造成配置覆盖,引起macros混乱丢失数据,所以我们在metrika.xml中只保留每台服务器通用的配置信息,而将独立的配置拆解出去&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;conf.d/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;保存每台服务器独立的配置,如macros.xml&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;config_copy/xxx.xml&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;存放每次修改主配置时的备份文件，方便回滚&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;元数据管理&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;维护各个Clickhosue集群的元数据信息，包含表的元数据信息及Clickhouse服务状态信息，给用户更直观的元数据管理体验，主要有如下功能：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查询指定集群和库表信息，同时展示该表的状态：只读 or 读写。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查看表的元数据信息 行数、磁盘占用、原始大小、更新时间、分区信息等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;设定数据生命周期，基于分区数对数据进行清理操作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KjfQY88udOnMQ4e03GdrwqugvmvxgNx1cKV7wdOo7vaN8SVFhOddh0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;自动化运维&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;由于我们基于nginx代理的方式对Clickhouse进行均衡读写，同时Clickhouse的配置也是可以热修改的，所以在用户管理及资源控制方面我们直接通过web平台对Clickhosue配置文件进行修改操作。&lt;br/&gt;通过web平台展示users.xml中对应权限的profiles 和 quotas，运维人员只需根据用户属性选择对应的配置填写对应的用户名及自动生成的密文密码即可，不会影响已配置好的权限及资源，同时每次xml操作都会提前备份文件，在xml修改异常时可随时回滚。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KCWiaC3wREOpic9wqAibKCPntbeZWianmy1bWyibsrwtdqoTsiczXItPWqhKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;clickhosue管理平台的核心模块，依托于运维作业平台 API封装了一系列的运维脚本，覆盖了集群管理的常用操作。&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clickhouse服务的启动、停止、重启&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;clickhouse的安装、卸载、故障节点替换&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;升级/降级指定Clickhouse版本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;动态上下线指定节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;元数据维护 (cluster_name、metrik、macros)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KtZVVAOvkeaMJS2ZwjJzUIAgNLWkuheicCagIicrCeX94icXp0Z101H1fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;这里以新增节点为例展示整体的流程操作：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6261343012704175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KR01oINR9vwRwLvdnZA3INIYaO8jMasgTKtwE1njpGd2818w57a87RQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1653&quot;/&gt;&lt;br/&gt;&lt;span&gt;其中，较为核心的操作在于install作业的分发及对应的配置生成。&lt;br/&gt;&lt;span&gt;分发install作业&lt;/span&gt;：由Clickhouse平台调用运维作业平台服务将预定义的脚本分发到指定节点执行，同时传入用户选填的配置参数。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KHsZLexBoxjG3xrR66DVGbib2h8QK74dG7hLjbYG9vmIQrz62L0oGMFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;生成配置文件&lt;/span&gt;：通常情况下我们会在一个物理集群分别建立单副本集群和双副本集群，在为新节点生成配置文件时由clickhouse平台从元数据模块获取到新增节点的集群信息，动态生成新增节点的macros与metrika配置，然后将metrika.xml同步到所有集群。&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5959158415841584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4Kk3x7AbyOzdx4YhWcq9g01nZCsibOYwPc6sibZyzmicWAPtticCH0u1aOKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1616&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;监控与报警&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;硬件指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;硬件指标监控主要指clickhouse服务节点的负载、内存、磁盘IO、网卡流量等，这里我们依托于monitor监控平台来配置各种指标，当监控指标达到一定阈值后触发报警。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;集群指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;我们在Clickhouse管理平台中集成了grafana，采用Prometheus采集clickhosue集群信息在grafana做展现，一般的监控指标有top排名(慢查询、内存占用、查询失败 )、QPS、读写压力、HTTP&amp;amp;TCP连接数、zookeeper状态等，当这些指标出现异常时通过alertmanager插件配置的规则触发报警。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KibHvnp72iaNAog9Q29sUPia0RbBaSFQumaokuG377jl2DhZnMq3WcaAkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;流量指标监控&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;目前所有对于clickhouse的读写请求都是通过域名代理的方式，通过域名的各项指标能精准且实时的反映出用户最原始的读写请求，当域名响应时间波动较大或者响应失败时我们能在第一时间收到报警并查看原始请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Clickhouse应用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;1. BI查询引擎&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在未接入Clickhouse之前，BI的存储库有Infobright、Hbase、ES、druid等，其中主要使用的是Infobright，在千万级别以下Infobright性能出色，对于一些时间跨度较长、数据量级较大的表Infobright就有些无能为力，这种数据我们通常会存放在ES与Hbase中，这样虽然加快了查询速度但是也增大了系统适配不同数据源的复杂度，同时分析师会有直接操作表的诉求，数据存入ES与Hbase会增加对应的学习成本，基于此我们的核心诉求就是：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;(1) 大数据量级下高查询性能;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2) BI适配成本低;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3)支持sql简单易用。&lt;/span&gt;&lt;/p&gt;&lt;h3/&gt;&lt;p&gt;&lt;span&gt;基于以上诉求我们拿现有的Infobright与TiDB、Doris、Clickhouse做了如下对比。&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;功能点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Infobright&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;TiDB&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Doris&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Clickhouse&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;BI适配成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;-&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;学习使用成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;-&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;百万级查询(100w)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;84ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;24ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;25ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;41ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;千万级查询(1000w)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1330ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;332ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;130ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;71ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;亿级别查询(1.1亿)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;57000ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;16151ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;3200ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;401ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;span&gt;总体来看Clickhouse的查询性能略高于Doris，而TiDB在千万量级以上性能下降明显，且对于大数据量级下Clickhouse相比Infobright性能提升巨大，所以最终我们选择了Clikhouse作为BI的存储查询引擎。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2. 集群构建&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在评估了目前Infobright中的数据量级和Clickhouse的并发限制之后，我们决定使用单分片 多副本的方式来构建Clickhouse集群，理由如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;BI对接数仓应用层数据，总体来说量级较小，同时clickhouse有着高效的数据压缩比，采用单节点能存储当前BI的全量数据，且能满足未来几年的数据存储需求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Clickhouse默认并发数为100，采用单分片每个节点都拥有全量数据，当qps过高时可横向增加节点来增大并发数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;clickhouse对Distributed 表的join支持较差，单分片不走网络，能提高join查询速度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;服务器配置：CPU：16 × 2 cores、内存：192GB、磁盘：21TB,整体的架构图如下所示：&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.4496042216358839&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KsWpZYMnibCjN6LC8w0q3ziamSSzz65XCpU6FK8xZ7tjemcIlPOqRakkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1895&quot;/&gt;&lt;br/&gt;&lt;span&gt;在写数据时由taskplus对其中的一台节点写入，如果该节点异常可切换到其他副本节点写入，由写入副本自动同步其他副本。&lt;br/&gt;查询同样用nginx代理三台节点，由于是单分片集群所以查询视图表和本地表效果是一样的，不过视图表会自动路由健康副本，所以这里还是选择查询视图表。&lt;br/&gt;在通过Taskplus将BI的数据源切换到Clickhouse后对于大量级查询性能提升明显。&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;tp99由1184ms变为739ms&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大于1秒的查询总量日均减少4.5倍&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;大于1秒的查询总耗时日均降低6.5倍&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;img data-ratio=&quot;0.18729955099422707&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KdibyVCC7ictCuiacibCw7FBNREPKO3saJmiaXenka5maZ53IiaLib8FY9Riceg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1559&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3. 问题及优化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在接入clickhouse之前BI的平均响应时间为187.93ms，接入clickhouse之后BI的平均响应时间为84.58ms，整体响应速度提升了2.2倍，虽然查询速度有所提升但是我们在clickhouse监控日报邮件中仍发现了一些慢查询，究其原因是我们对于应用层的表默认都是以日期字段stat_date分区，而有一部分表数据量级非常小且分区较多如某产品留存表总数据量：5564行，按日期分区 851个分区，平均每天6.5条数据，以下是针对于该表执行的常规group by count查询统计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;功能点&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck日期分区(冷查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck 日期分区(热查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;ck 无分区(热查询)&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Infobright&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;query&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;12000ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;220ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;16ms&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;8ms&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可见Clickhouse对于多分区的select的查询性能很差，官方文档中也有对应的表述：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; A merge only works for data parts that have the same value for the partitioning expression. This means you shouldn’t make overly granular partitions (more than about a thousand partitions). Otherwise， the SELECT query performs poorly because of an unreasonably large number of files in the file system and open file descriptors&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;针对于这种场景我们想直接创建月或年维度的分区，但是对于增量数据会存在重跑历史等问题，而delete或ReplacingMergeTree都可能造成的数据查询不一致情况，基于此我们在mysql中做了一个中间表，每次增量导入或修改mysql表然后全量更新至clickhouse，不设置分区或不以日期为分区，保证查询的效率和一致性，经过多分区小量级表的优化之后我们的平均响应时间变为到70.66ms，相比未优化前查询性能提升了16%，最终BI的查询响应时间对比如下图所示：&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.5991649269311065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KV7fydXeSHG935469yEcdfNZZ3vHNYx8kBKYzOOu6cDuicl2wXBJEiaaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;479&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;实时数仓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.分层架构&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;由于每日用户行为数据量级已达百亿，传统的离线分析已不能满足业务方的需求，因此我们基于三端数据构建了实时数仓，整体分层架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-ratio=&quot;0.4881101376720901&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KDZlDDN4Cm1XpgtXLdgaSSh2jBHToVGcYIyTxenxFk8rLEmZ3lfP21w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;clickhouse在其中扮演的角色是秒级别的实时OLAP查询引擎，当我们DWS层的通用维度实时指标不满足用户需求时，用户可以直接通过Clickhouse编写sql查询实时数据，大大降低了实时数据查询门槛。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.数据输入与输出&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6143667296786389&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KLo3iaFDoIZiaeicuzia4L9Y7libSAehDoE7OYRyPco2S6hq701vYYVx0icgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1587&quot;/&gt;&lt;br/&gt;&lt;span&gt;在数据输入层面我们将用户的行为数据实时关联维表写入kafka，然后由Flink + JDBC写入Clickhouse，为了保证实时查询的稳定性我们采用了双副本结构，用nginx代理其中一个完整的副本，直接对域名写入.同时在程序中增加失败重试机制，当有节点不可写入时，会尝试向其他分片写入，保证了每条数据都能被写入clickhouse。&lt;br/&gt;在数据的输出层面将同样由nginx代理整个集群，对接到客户端工具及与SCF服务，其中客户端工具对接到开发人员及分析师，scf对外提供查询服务。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.数据产品&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;埋点系统是我们专为埋点管理开发的系统其主要功能有：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点报备及校验：新上线埋点的收录及校验；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需求管理：针对于新埋点上线及埋点变更的需求周期监控及状态追踪；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点多维分析：基于用户上报埋点进行多维汇总，方便用户下钻分析定位问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指标及看板：有单个或多个埋点按一定规则组合进行多维汇总，可直接在看板中配置对应的统计结果数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;埋点测试：实时收集测试埋点数并进行格式化校验及解析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5046875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KGBwfULKqHgSmj9ibAib1Riaeib8T0aKGcZicia1Ficx1xVqxhH7PHMDBvhBsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;在未接入Clickhouse前埋线系统采用MR预计算汇总用户配置的埋点指标，并将结果数据写入Hbase，预计算针对于用户侧来说查询的都是结果数据，响应速度非常快，但是同时也带来一些问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;接入对比&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;时效性&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;时间维度&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;计算方式&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;扩展性&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;未接入clickhouse&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;T+1&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;天级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;mr预计算&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;接入clickhouse&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;秒级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;分钟级&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;实时计算&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;高&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.35260416666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KxTtUQjFfy9GCcT9baJe1XJbxicicHPticZDMLDBYZG66rX9nJ19l10xMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;常见问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据写入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一个batch内不要写多个分区的数据；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据服务器配置适当增大background_pool_size，提高merge线程的数量 默认值16；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于system.merges、system.processes表做好监控，可随时感知写入压力情况作出预警，避免服务崩溃；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;索引不宜建立过多，对于大数据量高并发的写入可以考虑先做数据编排按建表索引排序在写入，减少merge压力；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;禁止对Distributed表写入，可通过代理方式如nginx或chproxy直接对local表写入，而且能基于配置实现均衡写入及动态上下线节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;JOIN操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无论什么join小表必须放在右边，可以用left、right调整join方式；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开启谓词下推：enable_optimize_predicate_expression=1(部分版本默认关闭)；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大量降低数据量的操作如where、group by、distinct操作优先在join之前做(需根据降低比例评估)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;常用参数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_execution_time 单次查询的最大时间：600s；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_memory_usage 单服务器单次查询使用的最大内存，设置总体内存的50%；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_bytes_before_external_group_by 启动外部存储 max_memory_usage/2；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;max_memory_usage_for_all_queries 单服务器所有查询使用的最大内存，设置总体内存的80%-90%，防止因clickhouse服务占用过大资源导致服务器假死。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结与展望&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前Clickhouse主要应用于数据产品、画像、BI等方向，日更新百亿数据，每日百万量级查询请求，持续对外提供高效的查询服务，我们未来将在以下两个方面加强Clickhouse的建设：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1.完善Clickhouse管理平台保障Clickhouse服务的稳定性：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;目前在删除节点时会启动一个Rebalance脚本将被删除节点上的数据重新写入其他节点,在此过程中会造成数据查询不一致的问题,我们希望能提供更高效无感的Rebalance操作方案&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;更精细化的权限控制及管理,目前最新版本中已有此实现(Role及Privileges),后续我们将尝试使用该功能并适配到Clickhouse管理平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;实时数据写入Clickhouse的一致性保证&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.优化Clickhouse性能,拓展Clickhouse使用场景：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Clickhouse在千亿级数据场景下复杂查询优化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;埋点系统基于Clickhouse统计模型拓展如访问路径、间隔、分布等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;参考文献：&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Clickhouse官网&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;作者简介：&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;杨迪，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;58同城分析与决策支持部数据高级开发工程师&lt;br/&gt;&lt;strong&gt;杨琛，&lt;/strong&gt;58同城分析与决策支持部数据高级开发工程师&lt;br/&gt;&lt;strong&gt;曹德嵩，&lt;/strong&gt;58同城分析与决策支持部数据资深开发工程师&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;福利环节&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt; 为了鼓励优质内容传播，【58技术】公众号近期会持续推出不定期活动奖励。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;欢迎在评论区留言，关于#我眼中的大数据#话题，将由作者本人在评论里抽取五名读者，送出58技术独家定制版代码台历~&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;活动时间：截至2020年12月18日。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;上期活动已在当日文章评论区开奖，欢迎各位评论区关注。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.4481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaFZgADibMwS3E7QhqDa77y4KB9KksiayQoPejSlnhaL7CkunIkF0bTTkwJPo2ia6S4iaHAZqDiaJiaCwRhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.35546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2VY3NksPSaHql4LCOdAUeJwmvS72ibDva6YTC5lzpo8tfzSSeQuxRfxPibP3ybyWlpt9d4VxXd8hO5GiaJdMhba5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2546689a2dea5df1b9d90cf601ba5ecd</guid>
<title>[推荐] 10 张图让你彻底理解回调函数</title>
<link>https://toutiao.io/k/vxd1xum</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;不知你是不是也有这样的疑惑，我们为什么需要回调函数这个概念呢？直接调用函数不就可以了？回调函数到底有什么作用？程序员到底该如何理解回调函数？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章就来为你解答这些问题，&lt;strong&gt;读完这篇文章后你的武器库将新增一件功能强大的利器&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一切要从这样的需求说起&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;假设你们公司要开发下一代国民App“明日油条”，一款主打解决国民早餐问题的App，为了加快开发进度，这款应用由A小组和B小组协同开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中有一个核心模块由A小组开发然后供B小组调用，这个核心模块被封装成了一个函数，这个函数就叫make_youtiao()。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果make_youtiao()这个函数执行的很快并可以立即返回，那么B小组的同学只需要：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调用make_youtiao()&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等待该函数执行完成&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;该函数执行完后继续后续流程&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;从程序执行的角度看这个过程是这样的：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;保存当前被执行函数的上下文&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;开始执行make_youtiao()这个函数&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;make_youtiao()执行完后，控制转回到调用函数中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8521594684385382&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDl0Two4NxibagqfQqDHs8gSkNYSO3BhQA4gGRBpjLKab3fY1POTcGhFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果世界上所有的函数都像make_youtiao()这么简单，那么程序员大概率就要失业了，还好程序的世界是复杂的，这样程序员才有了存在的价值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;现实并不容易&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;现实中make_youtiao()这个函数需要处理的数据非常庞大，假设有10000个，&lt;strong&gt;那么make_youtiao(10000)不会立刻返回&lt;/strong&gt;，而是可能需要10分钟才执行完成并返回。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时你该怎么办呢？想一想这个问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可能有的同学会问，和刚才一样直接调用不可以吗，这样多简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是的，这样做没有问题，但就像爱因斯坦说的那样“一切都应该尽可能简单，但是不能过于简单”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想一想直接调用会有什么问题？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;显然直接调用的话，那么调用线程会被阻塞暂停，在等待10分钟后才能继续运行。在这10分钟内该线程不会被操作系统分配CPU，也就是说该线程得不到任何推进。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这并不是一种高效的做法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;没有一个程序员想死盯着屏幕10分钟后才能得到结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么有没有一种更加高效的做法呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;想一想我们上一篇中那个一直盯着你写代码的老板(见《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484851&amp;amp;idx=1&amp;amp;sn=30d68a28f926b3e8b53f4d86e5630b60&amp;amp;chksm=fcb982edcbce0bfbb213afdb2f0996f11771b21b940b535171c5d974c6b0b882a9b8bb3ef192&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从小白到高手，你需要理解同步与异步&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从小白到高手，你需要理解同步与异步&lt;/a&gt;》)，我们已经知道了这种&lt;strong&gt;一直等待直到另一个任务完成的&lt;/strong&gt;模式叫做同步。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你是老板的话你会什么都不干一直盯着员工写代码吗？因此一种更好的做法是程序员在代码的时候老板该干啥干啥，程序员写完后自然会通知老板，这样老板和程序员都不需要相互等待，这种模式被称为异步。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;回到我们的主题，这里一种更好的方式是&lt;strong&gt;调用make_youtiao()这个函数后不再等待这个函数执行完成&lt;/strong&gt;，而是直接返回继续后续流程，这样A小组的程序就可以和make_youtiao()这个函数同时进行了，就像这样：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8311258278145696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDxibF5DQhH4jAuiaA8GWiblo9JoPyHqQ4Cy8w3zRDwgHdyAlAZ2EWyzzsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;604&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这种情况下，回调(callback)就必须出场了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么我们需要回调callback&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;有的同学可能还没有明白为什么在这种情况下需要回调，别着急，我们慢慢讲。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;假设我们“明日油条”App代码第一版是这样写的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make_youtiao(10000);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sell();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看到这是最简单的写法，意思很简单，制作好油条后卖出去。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7302725968436155&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDC0IR1SibsDXlqzAoPBZBnj3HJic6TwYMot8lribM93JBq3Fs1wLbicpeRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;697&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们已经知道了由于make_youtiao(10000)这个函数10分钟才能返回，你不想一直死盯着屏幕10分钟等待结果，那么一种更好的方法是让make_youtiao()这个函数知道制作完油条后该干什么，即，更好的调用make_youtiao的方式是这样的：&lt;/span&gt;&lt;span&gt;“制作10000个油条，&lt;/span&gt;&lt;strong&gt;炸好后卖出去&lt;/strong&gt;&lt;span&gt;”，因此调用make_youtiao就变出这样了：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make_youtiao(10000, sell);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看到了吧，现在make_youtiao这个函数多了一个参数，除了指定制作油条的数量外&lt;/span&gt;&lt;strong&gt;还可以指定制作好后该干什么&lt;/strong&gt;&lt;span&gt;，第二个被make_youtiao这个函数调用的函数就叫回调，callback。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在你应该看出来了吧，虽然sell函数是你定义的，但是这个函数却是被其它模块调用执行的，就像这样：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2877551020408162&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDx1fFI6FTG3BvkAfr36DaOIo4MhpdcH5IQSpibIKpvLIv4JbH6sfBMzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;make_youtiao这个函数是怎么实现的呢，很简单：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_youtiao&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; num, func call_back&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    call_back(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样你就不用死盯着屏幕了，因为你把make_youtiao这个函数执行完后该做的任务交代给make_youtiao这个函数了，该函数制作完油条后知道该干些什么，这样就解放了你的程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有的同学可能还是有疑问，为什么编写make_youtiao这个小组不直接定义sell函数然后调用呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不要忘了明日油条这个App是由A小组和B小组同时开发的，A小组在编写make_youtiao时怎么知道B小组要怎么用这个模块，假设A小组真的自己定义sell函数就会这样写：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_youtiao&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; num&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    real_make_youtiao(num);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sell(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同时A小组设计的模块非常好用，这时C小组也想用这个模块，然而C小组的需求是制作完油条后放到仓库而不是不是直接卖掉，要满足这一需求那么A小组该怎么写呢？&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_youtiao&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; num&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    real_make_youtiao(num);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (Team_B) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       sell(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (Team_D) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       store(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;故事还没完，假设这时D小组又想使用呢，难道还要接着添加if else吗？&lt;/span&gt;&lt;span&gt;这样的话A小组的同学只需要维护make_youtiao这个函数就能做到工作量饱满了，显然这是一种非常糟糕的设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以你会看到，制作完油条后接下来该做什么不是实现make_youtiao的A小组该关心的事情，很明显只有调用make_youtiao这个函数的使用方才知道。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此make_youtiao的A小组完全可以通过回调函数将接下来该干什么交给调用方实现，A小组的同学只需要针对回调函数这一抽象概念进行编程就好了，这样调用方在制作完油条后不管是卖掉、放到库存还是自己吃掉等等想做什么都可以，&lt;strong&gt;A小组的make_youtiao函数根本不用做任何改动&lt;/strong&gt;，因为A小组是针对回调函数这一抽象概念来编程的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上就是回调函数的作用，当然这也是针对抽象而不是具体实现进行编程这一思想的威力所在。面向对象中的多态本质上就是让你用来针对抽象而不是针对实现来编程的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;异步回调&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;故事到这里还没有结束。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在上面的示例中，虽然我们使用了回调这一概念，也就是调用方实现回调函数然后再将该函数当做参数传递给其它模块调用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，这里依然有一个问题，那就是make_youtiao函数的调用方式依然是同步的，关于同步异步请参考《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484851&amp;amp;idx=1&amp;amp;sn=30d68a28f926b3e8b53f4d86e5630b60&amp;amp;chksm=fcb982edcbce0bfbb213afdb2f0996f11771b21b940b535171c5d974c6b0b882a9b8bb3ef192&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从小白到高手，你需要理解同步与异步&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从小白到高手，你需要理解同步与异步&lt;/a&gt;》，也就是说调用方是这样实现的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make_youtiao(&lt;span class=&quot;code-snippet__number&quot;&gt;10000&lt;/span&gt;, sell);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2877551020408162&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDx1fFI6FTG3BvkAfr36DaOIo4MhpdcH5IQSpibIKpvLIv4JbH6sfBMzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以看到，调用方必须等待make_youtiao函数返回后才可以继续后续流程，我们再来看下make_youtiao函数的实现：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_youtiao&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; num, func call_back&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    real_make_youtiao(num);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    call_back(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看到了吧，由于我们要制作10000个油条，make_youtiao函数执行完需要10分钟，也就是说即便我们使用了回调，调用方完全不需要关心制作完油条后的后续流程，但是调用方依然会被阻塞10分钟，这就是同步调用的问题所在。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你真的理解了上一节的话应该能想到一种更好的方法了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;没错，那就是&lt;strong&gt;异步调用&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;反正制作完油条后的后续流程并不是调用方该关心的，也就是说调用方并不关心make_youtiao这一函数的返回值，那么一种更好的方式是：&lt;strong&gt;把制作油条的这一任务放到另一个线程(进程)、甚至另一台机器上&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果用线程实现的话，那么make_youtiao就是这样实现了:&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;make_youtiao&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; num, func call_back&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    create_thread(real_make_youtiao,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  num,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  call_back);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.074468085106383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDJq57truibr8GAibc1RI1mku6SJ9hbbZlxxO1xpeRiaQHA0qjAVjzJQBAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;564&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;看到了吧，这时当我们调用make_youtiao时就会&lt;/span&gt;&lt;strong&gt;立刻返回&lt;/strong&gt;&lt;span&gt;，即使油条还没有真正开始制作，而调用方也完全无需等待制作油条的过程，可以立刻执行后流程：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make_youtiao(&lt;span class=&quot;code-snippet__number&quot;&gt;10000&lt;/span&gt;, sell);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时调用方的后续流程可以和制作油条&lt;/span&gt;&lt;strong&gt;同时&lt;/strong&gt;&lt;span&gt;进行，这就是函数的&lt;/span&gt;&lt;strong&gt;异步调用&lt;/strong&gt;&lt;span&gt;，当然这也是异步的高效之处。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;新的编程思维模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;让我们再来仔细的看一下这个过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;程序员最熟悉的思维模式是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;res = request();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;handle(res);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这就是函数的同步调用，只有request()函数返回拿到结果后，才能调用handle函数进行处理，request函数返回前我们必须&lt;/span&gt;&lt;strong&gt;等待&lt;/strong&gt;&lt;span&gt;，这就是同步调用，其控制流是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.4953271028037383&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDqfoGCLtrK6HKBB4ic0icw3SefibVnj2Sk7s1rzFmwSm7P2pic8QLHRXabA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;428&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;但是如果我们想更加高效的话，那么就需要异步调用了，我们不去直接调用handle函数，而是作为参数传递给request：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;request(handle);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们根本就不关心request什么时候真正的获取的结果，这是request该关心的事情，我们只需要把获取到结果后该怎么处理告诉request就可以了，因此request函数可以立刻返回，真的获取结果的处理可能是在另一个线程、进程、甚至另一台机器上完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这就是异步调用，其控制流是这样的：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2258064516129032&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDzUHqr9H5GcDdgQicxT28m8Zjk5FN5t7NoAk1SE8iaoZ0ib4T8It60d8eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;527&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;从编程思维上看，异步调用和同步有很大的差别，如果我们把处理流程当做一个任务来的话，那么同步下整个任务都是我们来实现的，但是异步情况下任务的处理流程被分为了两部分：&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一部分是我们来处理的，也就是调用request之前的部分&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二部分不是我们处理的，而是在其它线程、进程、甚至另一个机器上处理的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;我们可以看到由于任务被分成了两部分，第二部分的调用不在我们的掌控范围内，同时只有调用方才知道该做什么，因此在这种情况下回调函数就是一种必要的机制了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也就是说回调函数的本质就是“只有我们才知道做些什么，但是我们并不清楚什么时候去做这些，只有其它模块才知道，因此我们必须把我们知道的封装成回调函数告诉其它模块”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;现在你应该能看出异步回调这种编程思维模式和同步的差异了吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来我们给回调一个较为学术的定义&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;正式定义&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;37&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;在计算机科学中，回调函数是指一段以参数的形式传递给其它代码的可执行代码。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;这就是回调函数的定义了。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;回调函数就是一个函数，和其它函数没有任何区别。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意，回调函数是一种软件设计上的概念，和某个编程语言没有关系，几乎所有的编程语言都能实现回调函数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于一般的函数来说，我们自己编写的函数会在自己的程序内部调用，也就是说函数的编写方是我们自己，调用方也是我们自己。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但回调函数不是这样的，虽然函数编写方是我们自己，但是函数调用方不是我们，而是我们引用的其它模块，也就是第三方库，我们调用第三方库中的函数，并把回调函数传递给第三方库，第三方库中的函数调用我们编写的回调函数，如图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6071019473081328&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LD5vkmLgv7xuTuO7R01U20JvGmICxramu15ibos6OMPp0yA0j5ofGibqOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;873&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;而之所以需要给第三方库指定回调函数，是因为第三方库的编写者并不清楚在某些特定节点，比如我们举的例子油条制作完成、接收到网络数据、文件读取完成等之后该做什么，这些只有库的使用方才知道，因此第三方库的编写者无法针对具体的实现来写代码，而只能对外提供一个回调函数，库的使用方来实现该函数，第三方库在特定的节点调用该回调函数就可以了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一点值得注意的是，从图中我们可以看出回调函数和我们的主程序位于&lt;strong&gt;同一层&lt;/strong&gt;中，我们只负责编写该回调函数，但并不是我们来调用的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后值得注意的一点就是回调函数被调用的时间节点，回调函数只在某些特定的节点被调用，就像上面说的油条制作完成、接收到网络数据、文件读取完成等，这些都是事件，也就是event，本质上我们编写的回调函数就是用来处理event的，因此从这个角度看回调函数不过就是event handler，因此回调函数天然适用于事件驱动编程event-driven，我们将会在后续文章中再次回到这一主题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;回调的类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;我们已经知道有两种类型的回调，这两种类型的回调区别在于回调函数被调用的时机。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意，接下来会用到同步和异步的概念，对这两个概念不熟悉的同学可以参考上一盘文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NTYyOTQ4OQ==&amp;amp;mid=2247484851&amp;amp;idx=1&amp;amp;sn=30d68a28f926b3e8b53f4d86e5630b60&amp;amp;chksm=fcb982edcbce0bfbb213afdb2f0996f11771b21b940b535171c5d974c6b0b882a9b8bb3ef192&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;从小白到高手，你需要理解同步和异步&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;从小白到高手，你需要理解同步和异步&lt;/a&gt;》。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;同步回调&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种回调就是通常所说的同步回调synchronous callbacks、也有的将其称为阻塞式回调blocking callbacks，或者什么修饰都没有，就是回调，callback，这是我们最为熟悉的回调方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当我们调用某个函数A并以参数的形式传入回调函数后，在A返回之前回调函数会被执行，也就是说我们的主程序会等待回调函数执行完成，这就是所谓的同步回调。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9868247694334651&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDShMRdDjCW6A0Z3DM8GjrWogCUULttpsJ8uU8Plmhf8fzr6Uf9LU0GQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;有同步回调就有异步回调。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;异步回调&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不同于同步回调， 当我们调用某个函数A并以参数的形式传入回调函数后，A函数会立刻返回，也就是说函数A并不会阻塞我们的主程序，一段时间后回调函数开始被执行，此时我们的主程序可能在忙其它任务，回调函数的执行和我们主程序的运行同时进行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;既然我们的主程序和回调函数的执行可以同时发生，因此一般情况下，主程序和回调函数的执行位于不同的线程或者进程中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0065876152832676&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8g3rwJPmya3KTK31oeaDK36PSaic3t9LDu2ST60GDeuXPynibBUh906xnkqicarCL5tBTmcndhwSXr2iad5OzLzddw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这就是所谓的异步回调，asynchronous callbacks，也有的资料将其称为deferred callbacks ，名字很形象，延迟回调。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从上面这两张图中我们也可以看到，异步回调要比同步回调更能充分的利用机器资源，原因就在于在同步模式下主程序会“偷懒”，因为调用其它函数被阻塞而暂停运行，但是异步调用不存在这个问题，主程序会一直运行下去。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，异步回调更常见于I/O操作，天然适用于Web服务这种高并发场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;回调对应的编程思维模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;让我们用简单的几句话来总结一下回调下与常规编程思维模式的不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;假设我们想处理某项任务，这项任务需要依赖某项服务S，我们可以将任务的处理分为两部分，调用服务S前的部分PA，和调用服务S后的部分PB。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在常规模式下，PA和PB都是服务调用方来执行的，也就是我们自己来执行PA部分，等待服务S返回后再执行PB部分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但在回调这种方式下就不一样了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这种情况下，我们自己来执行PA部分，然后告诉服务S：“等你完成服务后执行PB部分”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此我们可以看到，现在一项任务是由不同的模块来协作完成的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;即：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;常规模式：调用完S服务后后我去执行X任务，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;回调模式：调用完S服务后你接着再去执行X任务，&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;其中X是服务调用方制定的，区别在于谁来执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么异步回调越来越重要&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;在同步模式下，服务调用方会因服务执行而被阻塞暂停执行，这会导致整个线程被阻塞，因此这种编程方式天然不适用于高并发动辄几万几十万的并发连接场景，&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对高并发这一场景，异步其实是更加高效的，原因很简单，你不需要在原地等待，因此从而更好的利用机器资源，而回调函数又是异步下不可或缺的一种机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;回调地狱，callback hell &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;有的同学可能认为有了异步回调这种机制应付起一切高并发场景就可以高枕无忧了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上在计算机科学中还没有任何一种可以横扫一切包治百病的技术，现在没有，在可预见的将来也不会有，一切都是妥协的结果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么异步回调这种机制有什么问题呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实际上我们已经看到了，异步回调这种机制和程序员最熟悉的同步模式不一样，在可理解性上比不过同步，而如果业务逻辑相对复杂，比如我们处理某项任务时不止需要调用一项服务，而是几项甚至十几项，如果这些服务调用都采用异步回调的方式来处理的话，那么很有可能我们就陷入回调地狱中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个例子，假设处理某项任务我们需要调用四个服务，每一个服务都需要依赖上一个服务的结果，如果用同步方式来实现的话可能是这样的：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;a&lt;/span&gt; = GetServiceA();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;b&lt;/span&gt; = GetServiceB(a);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;c&lt;/span&gt; = GetServiceC(b);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;d&lt;/span&gt; = GetServiceD(c);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;代码很清晰，很容易理解有没有。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道异步回调的方式会更加高效，那么使用异步回调的方式来写将会是什么样的呢？&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GetServiceA(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;a&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    GetServiceB(a, &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;b&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        GetServiceC(b, &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            GetServiceD(c, &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;d&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我想不需要再强调什么了吧，你觉得这两种写法哪个更容易理解，代码更容易维护呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;博主有幸曾经维护过这种类型的代码，不得不说每次增加新功能的时候恨不得自己化为两个分身，一个不得不去重读一边代码；另一个在一旁骂自己为什么当初选择维护这个项目。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;异步回调代码稍不留意就会跌到回调陷阱中，那么有没有一种更好的办法既能结合异步回调的高效又能结合同步编码的简单易读呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;幸运的是，答案是肯定的，我们会在后续文章中详细讲解这一技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;在这篇文章中，我们从一个实际的例子出发详细讲解了回调函数这种机制的来龙去脉，这是应对高并发、高性能场景的一种极其重要的编码机制，异步加回调可以充分利用机器资源，实际上异步回调最本质上就是事件驱动编程，这是我们接下来要重点讲解的内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__0&quot;&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2934&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2935&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2936&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2937&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2938&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2939&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2940&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2941&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2942&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2943&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;伟&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2944&quot;&gt;伟&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2945&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2946&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2947&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;割&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2948&quot;&gt;割&lt;/span&gt;&lt;span data-raw-text=&quot;线&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2949&quot;&gt;线&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2950&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2951&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2952&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2953&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2954&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2955&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2956&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2957&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2958&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2959&quot;&gt;-&lt;/span&gt;&lt;span data-raw-text=&quot;-&quot; data-textnode-index=&quot;97&quot; data-index=&quot;2960&quot;&gt;-&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2961&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2962&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2963&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2964&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2965&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2966&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2967&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2968&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2969&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;p&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2970&quot;&gt;p&lt;/span&gt;&lt;span data-raw-text=&quot;f&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2971&quot;&gt;f&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2972&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2973&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2974&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2975&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;y&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2976&quot;&gt;y&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2977&quot;&gt;)&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;98&quot; data-index=&quot;2978&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2979&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2980&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2981&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;靠&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2982&quot;&gt;靠&lt;/span&gt;&lt;span data-raw-text=&quot;谱&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2983&quot;&gt;谱&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2984&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2985&quot;&gt;人&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2986&quot;&gt;建&lt;/span&gt;&lt;span data-raw-text=&quot;立&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2987&quot;&gt;立&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2988&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;愿&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2989&quot;&gt;愿&lt;/span&gt;&lt;span data-raw-text=&quot;为&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2990&quot;&gt;为&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2991&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;H&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2992&quot;&gt;H&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2993&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2994&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;r&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2995&quot;&gt;r&lt;/span&gt;&lt;span data-raw-text=&quot;带&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2996&quot;&gt;带&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2997&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2998&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;98&quot; data-index=&quot;2999&quot;&gt;些&lt;/span&gt;&lt;span data-raw-text=&quot;值&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3000&quot;&gt;值&lt;/span&gt;&lt;span data-raw-text=&quot;得&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3001&quot;&gt;得&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3002&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;细&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3003&quot;&gt;细&lt;/span&gt;&lt;span data-raw-text=&quot;品&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3004&quot;&gt;品&lt;/span&gt;&lt;span data-raw-text=&quot;味&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3005&quot;&gt;味&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3006&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;精&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3007&quot;&gt;精&lt;/span&gt;&lt;span data-raw-text=&quot;神&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3008&quot;&gt;神&lt;/span&gt;&lt;span data-raw-text=&quot;食&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3009&quot;&gt;食&lt;/span&gt;&lt;span data-raw-text=&quot;粮&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3010&quot;&gt;粮&lt;/span&gt;&lt;span data-raw-text=&quot;！&quot; data-textnode-index=&quot;98&quot; data-index=&quot;3011&quot;&gt;！&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3012&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3013&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3014&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot;只&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3015&quot;&gt;只&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3016&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3017&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;创&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3018&quot;&gt;创&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3019&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3020&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3021&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3022&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;表&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3023&quot;&gt;表&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3024&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3025&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3026&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3027&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;不&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3028&quot;&gt;不&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3029&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3030&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;网&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3031&quot;&gt;网&lt;/span&gt;&lt;span data-raw-text=&quot;上&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3032&quot;&gt;上&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3033&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3034&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;99&quot; data-index=&quot;3035&quot;&gt;章&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot;&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3036&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3037&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3038&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3039&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3040&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3041&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;均&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3042&quot;&gt;均&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3043&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;找&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3044&quot;&gt;找&lt;/span&gt;&lt;span data-raw-text=&quot;到&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3045&quot;&gt;到&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3046&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3047&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3048&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3049&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;行&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3050&quot;&gt;行&lt;/span&gt;&lt;span data-raw-text=&quot;沟&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3051&quot;&gt;沟&lt;/span&gt;&lt;span data-raw-text=&quot;通&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3052&quot;&gt;通&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index=&quot;100&quot; data-index=&quot;3053&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;也&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3054&quot;&gt;也&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3055&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3056&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;各&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3057&quot;&gt;各&lt;/span&gt;&lt;span data-raw-text=&quot;位&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3058&quot;&gt;位&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3059&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3060&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;打&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3061&quot;&gt;打&lt;/span&gt;&lt;span data-raw-text=&quot;赏&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3062&quot;&gt;赏&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3063&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;算&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3064&quot;&gt;算&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3065&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3066&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;费&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3067&quot;&gt;费&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3068&quot;&gt;给&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3069&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3070&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3071&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3072&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3073&quot;&gt;）&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3074&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;更&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3075&quot;&gt;更&lt;/span&gt;&lt;span data-raw-text=&quot;希&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3076&quot;&gt;希&lt;/span&gt;&lt;span data-raw-text=&quot;望&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3077&quot;&gt;望&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3078&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;家&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3079&quot;&gt;家&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3080&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3081&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;101&quot; data-index=&quot;3082&quot;&gt;投&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;102&quot; data-index=&quot;3083&quot;&gt;稿&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__9&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__10&quot;&gt;&lt;span data-raw-text=&quot;投&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3085&quot;&gt;投&lt;/span&gt;&lt;span data-raw-text=&quot;稿&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3086&quot;&gt;稿&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3087&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;联&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3088&quot;&gt;联&lt;/span&gt;&lt;span data-raw-text=&quot;系&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3089&quot;&gt;系&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index=&quot;104&quot; data-index=&quot;3090&quot;&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__11&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__12&quot;&gt;&lt;span data-raw-text=&quot;s&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3091&quot;&gt;s&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3092&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3093&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;n&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3094&quot;&gt;n&lt;/span&gt;&lt;span data-raw-text=&quot;z&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3095&quot;&gt;z&lt;/span&gt;&lt;span data-raw-text=&quot;h&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3096&quot;&gt;h&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3097&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3098&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;6&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3099&quot;&gt;6&lt;/span&gt;&lt;span data-raw-text=&quot;3&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3100&quot;&gt;3&lt;/span&gt;&lt;span data-raw-text=&quot;@&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3101&quot;&gt;@&lt;/span&gt;&lt;span data-raw-text=&quot;g&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3102&quot;&gt;g&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3103&quot;&gt;m&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3104&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;i&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3105&quot;&gt;i&lt;/span&gt;&lt;span data-raw-text=&quot;l&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3106&quot;&gt;l&lt;/span&gt;&lt;span data-raw-text=&quot;.&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3107&quot;&gt;.&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3108&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3109&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;m&quot; data-textnode-index=&quot;105&quot; data-index=&quot;3110&quot;&gt;m&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__13&quot;&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__14&quot;&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3111&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3112&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;由&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3113&quot;&gt;由&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3114&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;码农的荒岛求生&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;授&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3119&quot;&gt;授&lt;/span&gt;&lt;span data-raw-text=&quot;权&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3120&quot;&gt;权&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3121&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;饭&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3122&quot;&gt;饭&lt;/span&gt;&lt;span data-raw-text=&quot;米&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3123&quot;&gt;米&lt;/span&gt;&lt;span data-raw-text=&quot;粒&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3124&quot;&gt;粒&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index=&quot;106&quot; data-index=&quot;3125&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3126&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;布&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3127&quot;&gt;布&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3128&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3129&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;载&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3130&quot;&gt;载&lt;/span&gt;&lt;span data-raw-text=&quot;请&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3131&quot;&gt;请&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3132&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;明&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3133&quot;&gt;明&lt;/span&gt;&lt;span data-raw-text=&quot;本&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3134&quot;&gt;本&lt;/span&gt;&lt;span data-raw-text=&quot;来&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3135&quot;&gt;来&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3136&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;信&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3137&quot;&gt;信&lt;/span&gt;&lt;span data-raw-text=&quot;息&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3138&quot;&gt;息&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3139&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3140&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3141&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3142&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3143&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3144&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3145&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;（&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3146&quot;&gt;（&lt;/span&gt;&lt;span data-raw-text=&quot;长&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3147&quot;&gt;长&lt;/span&gt;&lt;span data-raw-text=&quot;按&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3148&quot;&gt;按&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3149&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;识&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3150&quot;&gt;识&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3151&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3152&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3153&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3154&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3155&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3156&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;）&quot; data-textnode-index=&quot;106&quot; data-index=&quot;3157&quot;&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p data-style=&quot;color: rgb(53, 53, 53); font-size: 14px; text-align: start; white-space: normal; max-width: 100%; min-height: 1em; font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__15&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/LHDiahSVnXhunbEtuowcI7kF5kmUaeTrszibibQ3st6OU8hy2CoIotHHLxicicibyF1qkNI7HibXYHXGN6hRby4ZyjR6A/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>