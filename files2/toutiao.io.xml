<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>96eadc4a735d167c81cd620a3af88417</guid>
<title>这可能是最轻量高效的运维监控工具：开源 WGCLOUD</title>
<link>https://toutiao.io/k/l55l3jp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f1f493d211a282bb989d3d7f277ec432</guid>
<title>我用 Python 画了一盘粽子送给大家</title>
<link>https://toutiao.io/k/qsz5fkd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIq22XWicwbh9WLklk2X51zvGDY3xRkicCsOhnJT9WlCz1onvvsdWwBQoB0icZfCQh9yIRoic41IXwNWEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3MzYzNzIxNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/IhkoHbB7IaCFYeyB7a25IMBkibiciaG1PpwH9KrrUhhJBibcWJU3cXBG7NIynR5lWE7srQ6A9Z4mmqcZtPicycxvMDQ/0?wx_fmt=png&quot; data-nickname=&quot;GitHub联盟&quot; data-alias=&quot;GitHubUN&quot; data-signature=&quot;每天分享 GitHub 上有趣、实用的开源项目。内容包括但不限于 Java、Python、Go、前端、数据分析、AI 等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天是端午节，首先祝大家端午安康，说到端午节，粽子则是必不可少的，现在粽子的种类也是五花八门，但我还是喜欢传统的白棕子，你喜欢哪种粽子呢？在大家吃着美味粽子的同时，本文我们画一盘粽子送给大家。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;先睹为快&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来欣赏一下最终的效果图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6727664155005382&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIpbW93CXlo5rBW3icWdbsqBGUeZIC16BjSOV4kTYflNISjScdRQKpH0asbUon61fKuqhJ6peyNWib3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;929&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中我们可以看出整体分三部分组成：盘子、粽子、文字，下面我们展开来说一下相应实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;盘子实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们来画一个盘子，盘子的组成比较简单，就是一个椭圆再加上填充色，代码实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 画盘子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;plate&lt;/span&gt;&lt;span&gt;(a, b, angle, steps, rotateAngle)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    minAngle = (&lt;span&gt;2&lt;/span&gt; * math.pi / &lt;span&gt;360&lt;/span&gt;) * angle / steps&lt;br/&gt;    rotateAngle = rotateAngle / &lt;span&gt;360&lt;/span&gt; * &lt;span&gt;2&lt;/span&gt; * math.pi&lt;br/&gt;    penup() &lt;span&gt;# 起笔&lt;/span&gt;&lt;br/&gt;    setpos(b * math.sin(rotateAngle), -b * math.cos(rotateAngle))&lt;br/&gt;    pendown() &lt;span&gt;# 落笔&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(steps):&lt;br/&gt;        nextPoint = [a * math.sin((i + &lt;span&gt;1&lt;/span&gt;) * minAngle), -b * math.cos((i + &lt;span&gt;1&lt;/span&gt;) * minAngle)]&lt;br/&gt;        nextPoint = [nextPoint[&lt;span&gt;0&lt;/span&gt;] * math.cos(rotateAngle) - nextPoint[&lt;span&gt;1&lt;/span&gt;] * math.sin(rotateAngle),&lt;br/&gt;                     nextPoint[&lt;span&gt;0&lt;/span&gt;] * math.sin(rotateAngle) + nextPoint[&lt;span&gt;1&lt;/span&gt;] * math.cos(rotateAngle)]&lt;br/&gt;        setpos(nextPoint)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6702937976060935&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIpbW93CXlo5rBW3icWdbsqBG9OdIgQzziaPQG5SxMa5V4df2acC1Of8eq0Bpu5RNtA25W4ibqZDVZ8icw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;919&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;粽子实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，我们看一下本文最核心的部分-粽子的实现，实现代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 画粽子&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;rice_dumpling&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    pensize(&lt;span&gt;2&lt;/span&gt;) &lt;span&gt;# 画笔宽度&lt;/span&gt;&lt;br/&gt;    pencolor(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;51&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;) &lt;span&gt;# 画笔颜色&lt;/span&gt;&lt;br/&gt;    fillcolor(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;77&lt;/span&gt;, &lt;span&gt;19&lt;/span&gt;) &lt;span&gt;# 填充色&lt;/span&gt;&lt;br/&gt;    begin_fill()&lt;br/&gt;    fd(&lt;span&gt;200&lt;/span&gt;) &lt;span&gt;# 向前&lt;/span&gt;&lt;br/&gt;    circle(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;) &lt;span&gt;#画圆弧&lt;/span&gt;&lt;br/&gt;    fd(&lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;    circle(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;    circle(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;120&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;200&lt;/span&gt;)&lt;br/&gt;    circle(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;    circle(&lt;span&gt;15&lt;/span&gt;, &lt;span&gt;90&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;173&lt;/span&gt;)&lt;br/&gt;    circle(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;90&lt;/span&gt;)&lt;br/&gt;    end_fill()&lt;br/&gt;    penup()&lt;br/&gt;    fd(&lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;    right(&lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;    back(&lt;span&gt;105&lt;/span&gt;)&lt;br/&gt;    a = pos()&lt;br/&gt;    pendown()&lt;br/&gt;    color(&lt;span&gt;60&lt;/span&gt;, &lt;span&gt;67&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;    fillcolor(&lt;span&gt;85&lt;/span&gt;, &lt;span&gt;97&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;)&lt;br/&gt;    begin_fill()&lt;br/&gt;    fd(&lt;span&gt;120&lt;/span&gt;)&lt;br/&gt;    goto(a)&lt;br/&gt;    penup()&lt;br/&gt;    back(&lt;span&gt;15&lt;/span&gt;)&lt;br/&gt;    left(&lt;span&gt;90&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;20&lt;/span&gt;)&lt;br/&gt;    right(&lt;span&gt;90&lt;/span&gt;)&lt;br/&gt;    pendown()&lt;br/&gt;    fd(&lt;span&gt;150&lt;/span&gt;)&lt;br/&gt;    right(&lt;span&gt;120&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;24&lt;/span&gt;)&lt;br/&gt;    right(&lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;120&lt;/span&gt;)&lt;br/&gt;    right(&lt;span&gt;60&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;24&lt;/span&gt;)&lt;br/&gt;    end_fill()&lt;br/&gt;    begin_fill()&lt;br/&gt;    left(&lt;span&gt;110&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;65&lt;/span&gt;)&lt;br/&gt;    left(&lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;24&lt;/span&gt;)&lt;br/&gt;    left(&lt;span&gt;80&lt;/span&gt;)&lt;br/&gt;    fd(&lt;span&gt;50&lt;/span&gt;)&lt;br/&gt;    end_fill()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.759765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIpbW93CXlo5rBW3icWdbsqBGUeYdptJjibc5mwrLQHr8PMKQusYXfQcDGdUwesQkksbe3uic92eficscw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;512&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;文字实现&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再接着看一下如何添加文字，比如我要添加的文字是：祝大家端午安康，添加文字实现很容易，只需一行代码即可，代码实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;write(&lt;span&gt;&quot;祝大家端午安康&quot;&lt;/span&gt;, move=&lt;span&gt;False&lt;/span&gt;, align=&lt;span&gt;&quot;center&quot;&lt;/span&gt;, font=(&lt;span&gt;&quot;Comic Sans&quot;&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;, &lt;span&gt;&quot;bold&quot;&lt;/span&gt;))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中全部代码已经为大家整理好了，有需要的在公众号&lt;strong&gt;&lt;span&gt;Python小二&lt;/span&gt;&lt;/strong&gt;后台回复&lt;strong&gt;&lt;span&gt;端午&lt;/span&gt;&lt;/strong&gt;即可获取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果大家觉得本文有一点帮助的话，记得随手点个赞支持一下~&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3Mzk1ODA5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIpUwwib3ughYzyRWGgnRezhFgwicOtsUTHoYCGlVibuic6LN0mUYjVJ3jP9W5zvwwyhdrNJEqOv8X9QSQ/0?wx_fmt=png&quot; data-nickname=&quot;Python小二&quot; data-alias=&quot;pythonXE&quot; data-signature=&quot;回复 1024 免费领取学习资料&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;分享、在看、赞是对我最大的支持&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>79b06314eac04b88114da736653a77cd</guid>
<title>一文理解 Kafka 如何消息不丢失</title>
<link>https://toutiao.io/k/rupupf1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;本文只聚焦于Kafka系统的消息丢失，如果是生产环境出现数据丢失，排查时要先从链路上分段定位，缩小问题范围。&lt;/p&gt;&lt;p data-source-line=&quot;3&quot;&gt;如果对Kafka不了解的话，可以先看这篇博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484251&amp;amp;idx=1&amp;amp;sn=92d6b50c5987f4f80316313db05b56ff&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文快速了解Kafka&lt;/a&gt;》。&lt;/p&gt;&lt;h2 data-source-line=&quot;5&quot;&gt;数据丢失的原因&lt;/h2&gt;&lt;h3 data-source-line=&quot;7&quot;&gt;生产者丢失消息的情况&lt;/h3&gt;&lt;p data-source-line=&quot;9&quot;&gt;生产者(Producer) 调用send方法发送消息之后，消息可能因为网络问题并没有发送过去。&lt;/p&gt;&lt;p data-source-line=&quot;11&quot;&gt;解决方法：&lt;/p&gt;&lt;p data-source-line=&quot;13&quot;&gt;不能认为在调用send方法发送消息之后消息消息发送成功了。为了确定消息是发送成功，需要判断消息发送的结果。但要注意的是Kafka生产者(Producer) 使用send方法发送消息实是异步的操作，虽然可以通过get()方法获取调用结果，但降低业务服务的吞吐量。优化的方式是改为回调函数的形式。&lt;/p&gt;&lt;p data-source-line=&quot;15&quot;&gt;此外，对于一致性要求不高的业务场景，可以考虑Producer端设置&lt;code&gt;retries&lt;/code&gt;（重试次数）设置一个比较合理的值，一般是3。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议将重试间隔设置长一些，因为间隔时间太小，可能一次网络波动的时间重试全部结束了。&lt;/p&gt;&lt;h3 data-source-line=&quot;17&quot;&gt;消费者丢失消息的情况&lt;/h3&gt;&lt;p data-source-line=&quot;19&quot;&gt;自动提交开启会存在这样的问题：当消费者poll到这个消息，还没进行真正消费的时候，offset被自动提交的同时消费者挂掉了。&lt;/p&gt;&lt;p data-source-line=&quot;21&quot;&gt;解决办法：&lt;/p&gt;&lt;p data-source-line=&quot;23&quot;&gt;关闭自动提交offset（即：&lt;code&gt;enable.auto.commit&lt;/code&gt;为false），每次在真正消费完消息之后，手动提交offset。&lt;/p&gt;&lt;p data-source-line=&quot;25&quot;&gt;但这样还是会存在消费者刚消费完消息，还没提交offset，结果宕机了，那么这个消息理论上就会被消费两次，因此消费端幂等性是需要保证。可以查看博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484349&amp;amp;idx=1&amp;amp;sn=b54c0819bc100db816cda52d11476401&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文理解如何实现接口的幂等性&lt;/a&gt;》，有这种问题对应的解决方案&lt;/p&gt;&lt;h3 data-source-line=&quot;27&quot;&gt;Kafka系统内丢失消息的情况&lt;/h3&gt;&lt;p data-source-line=&quot;29&quot;&gt;假如leader副本所在的broker突然挂掉，那么就要从follower副本重新选出一个leader，但是leader的数据还有一些没有被follower副本的同步的话，就会造成消息丢失。&lt;/p&gt;&lt;p data-source-line=&quot;31&quot;&gt;解决方法：&lt;/p&gt;&lt;p data-source-line=&quot;33&quot;&gt;为了减少Kafka系统内丢失消息的情况，Kafka需要配置如下几个参数：&lt;/p&gt;&lt;ol data-source-line=&quot;35&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Producer端设置&lt;code&gt;acks&lt;/code&gt;=all。&lt;code&gt;acks&lt;/code&gt;的默认值为1，代表消息被leader副本接收之后就算被成功发送。当配置&lt;code&gt;acks&lt;/code&gt;=all代表则所有副本都要接收到该消息之后该消息才算真正成功被发送。（副本只是将消息存储在PageCache上的，定期flush到磁盘上的，如果出现断电或者机器故障等，PageCache上的数据就丢失了。但设置设置了&lt;code&gt;acks&lt;/code&gt;=all，出现多个副本同时挂掉的概率比Leader挂掉的概率就小很多)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;topic设置&lt;code&gt;replication.factor&lt;/code&gt;&amp;gt;=3。为了保证leader副本能有follower 副本能同步消息，一般会设置&lt;code&gt;replication.factor&lt;/code&gt;&amp;gt;=3。这样就可以保证每个分区(partition)至少有3个副本。虽然造成了数据冗余，但是带来了数据的安全性。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;设置&lt;code&gt;min.insync.replicas&lt;/code&gt;&amp;gt;1。一般情况下需要设置&lt;code&gt;min.insync.replicas&lt;/code&gt;&amp;gt;1，这样配置代表消息至少要被写入到2个副本才算是被成功发送（默认值为1）。在实际生产中应尽量避免&lt;code&gt;min.insync.replicas&lt;/code&gt;值为1，此外，为了保证整个Kafka服务的高可用性，你需要确保&lt;code&gt;replication.factor&lt;/code&gt;&amp;gt;&lt;code&gt;min.insync.replicas&lt;/code&gt;，否则有一个副本挂掉，整个分区就无法正常工作了。推荐设置成&lt;code&gt;replication.factor&lt;/code&gt;=&lt;code&gt;min.insync.replicas&lt;/code&gt;+1。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;设置&lt;code&gt;unclean.leader.election.enable&lt;/code&gt;=false。即不允许Unclean leader选举。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Producer端设置&lt;code&gt;retries&lt;/code&gt;。配合&lt;code&gt;acks&lt;/code&gt;=all，这样可以保证leader挂掉之后，Producer会重新发送消息。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;41&quot;&gt;&lt;p&gt;Unclean leader选举：Kafka把不在ISR列表中的存活副本称为“非同步副本”，这些副本中的消息远远落后于leader，如果选举这种副本作为leader的话就可能造成数据丢失。Kafka broker端提供了一个参数unclean.leader.election.enable，用于控制是否允许非同步副本参与leader选举；如果开启，则当ISR为空时就会从这些副本中选举新的leader，这个过程称为Unclean leader选举。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-source-line=&quot;43&quot;&gt;异常导致的数据丢失&lt;/h3&gt;&lt;p data-source-line=&quot;45&quot;&gt;单条数据的长度超过限制会丢失数据，报kafka.common.MessageSizeTooLargeException异常，导致生产者消息积压，内存上升。&lt;/p&gt;&lt;p data-source-line=&quot;47&quot;&gt;解决方法：&lt;/p&gt;&lt;p data-source-line=&quot;49&quot;&gt;修改Kafka Broker的配置，修改单条消息的最大长度、单条消息的最大长度等参数配置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>55295b614fcbea228b772148b66d4e85</guid>
<title>将 Android 生物识别身份验证整合至应用中</title>
<link>https://toutiao.io/k/31et261</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;&lt;i&gt;本文是 Android 生物识别身份验证系列文章的第二篇，&lt;b&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/378815607&quot; class=&quot;internal&quot;&gt;上篇文章&lt;/a&gt;&lt;/b&gt;&lt;/i&gt; &lt;i&gt;主要通过比较传统用户名和密码的认证方式和生物识别身份认证方式的不同，以及介绍生物识别加密的不同加密方式，来向开发者展示为何需要在应用中使用生物识别身份认证技术。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;为了拓展传统的登录授权流程，使其支持生物识别身份验证，您可以在用户成功登录之后提示用户启用生物识别身份验证。图 1A 展示了一个典型的登录流程，您可能已经很熟悉了。当用户点击登录按钮，且应用获取到服务器返回的 userToken 之后，再提示用户是否启用，如图 1B 所示。一旦启用，每次用户需要登录时，应用都应当自动弹出生物识别身份验证对话框，如图 2 所示。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bad30d51c677e1b4a17742ab157b90fd_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;777&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-bad30d51c677e1b4a17742ab157b90fd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;777&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-bad30d51c677e1b4a17742ab157b90fd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-bad30d51c677e1b4a17742ab157b90fd_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 1A: 典型的登录界面&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d6446cdb273789f0866cfea57f341ea5_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;457&quot; data-rawheight=&quot;1007&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-d6446cdb273789f0866cfea57f341ea5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;457&quot; data-rawheight=&quot;1007&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-d6446cdb273789f0866cfea57f341ea5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d6446cdb273789f0866cfea57f341ea5_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 1B: 启用生物识别身份验证&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7c4f55f7b65100bb71d57b2720819559_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;496&quot; data-rawheight=&quot;1027&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-7c4f55f7b65100bb71d57b2720819559_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;496&quot; data-rawheight=&quot;1027&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-7c4f55f7b65100bb71d57b2720819559_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7c4f55f7b65100bb71d57b2720819559_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 2: 确认使用生物识别身份验证进行登录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在图 2 中的界面有一个确定按钮，实际上该按钮是可选的。举个例子，如果您开发的是一个餐厅的应用，建议显示该按钮，因为可以使用生物识别身份验证的方式让顾客支付用餐费用。对于敏感的交易和支付，我们建议您要求用户进行确认。若要在界面中包含此确认按钮，您可以在构建 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/androidx/biometric/BiometricPrompt.PromptInfo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;BiometricPrompt.PromptInfo&lt;/a&gt;&lt;/b&gt; 时调用 setConfirmationRequired(true) 即可。这里要注意的是，如果您不调用 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/androidx/biometric/BiometricPrompt.PromptInfo.Builder%23setConfirmationRequired%28boolean%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;setConfirmationRequired(true)&lt;/a&gt;&lt;/b&gt;，系统会默认将其设置为 true。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;接入生物识别的设计流程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;示例中的代码使用了带有 CryptoObject 实例的加密版 BiometricPrompt。&lt;/p&gt;&lt;p&gt;如果您的应用需要认证，那么您就应该创建一个专门的 LoginActivity 组件作为应用的登录界面。无论应用要求进行身份验证的频率多高，只要需要验证，就应该这么做。若用户之前已认证过，那么 LoginActivity 将调用 finish() 方法，让用户继续使用。如果用户还没有进行身份验证，那么您应该检查生物识别身份验证是否启用。&lt;/p&gt;&lt;p&gt;有很多方法来检查是否启用了生物识别。与其在各种不同的替代方案中周旋，不如我们直接深入研究一个特别的方法: 直接检查自定义属性 &lt;code&gt;ciphertextWrapper&lt;/code&gt; 是否是 null。当用户在您的应用中启用生物识别身份验证后，您就可以创建一个 &lt;code&gt;CiphertextWrapper&lt;/code&gt; 数据类，来将加密后的 &lt;code&gt;userToken&lt;/code&gt; (也就是 ciphertext) 存储在 &lt;code&gt;SharedPreferences&lt;/code&gt; 或 &lt;b&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/111267510&quot; class=&quot;internal&quot;&gt;Room&lt;/a&gt;&lt;/b&gt; 这样的持久性存储中。因此，若 &lt;code&gt;ciphertextWrapper&lt;/code&gt; 不是 null，就相当于您拥有了访问远程服务所需的已加密的 &lt;code&gt;userToken&lt;/code&gt;，这也意味着当前生物识别已启用。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ciphertextWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// 用户已启用了生物识别
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 生物识别未启用
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若生物识别未被启用，则用户可以单击 (如图 1B 所示) 以启用它，这时您将向用户展示生物识别身份验证提示框，如图 3 所示。&lt;/p&gt;&lt;p&gt;如下代码示例中，&lt;code&gt;showBiometricPromptForEncryption()&lt;/code&gt; 展示了如何设置与 BiometricPrompt 关联的加密密钥。本质上，就是从一个 &lt;code&gt;String&lt;/code&gt; 初始化出一个 &lt;code&gt;Cipher&lt;/code&gt;，然后将该 &lt;code&gt;Cipher&lt;/code&gt; 传递给 &lt;code&gt;CryptoObject&lt;/code&gt;。最后再将 &lt;code&gt;CryptoObject&lt;/code&gt; 传递给 &lt;code&gt;biometricPrompt.authenticate(promptInfo, cryptoObject)&lt;/code&gt; 方法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;useBiometrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;showBiometricPromptForEncryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showBiometricPromptForEncryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;canAuthenticate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canAuthenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canAuthenticate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BIOMETRIC_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;secretKeyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECRET_KEY_NAME&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cryptographyManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CryptographyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cryptographyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInitializedCipherForEncryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;biometricPrompt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;BiometricPromptUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createBiometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryptAndStoreServerToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;promptInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricPromptUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPromptInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;biometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;promptInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CryptoObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-15120357c3aaea87e1fb8c9e6c20b431_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;700&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-15120357c3aaea87e1fb8c9e6c20b431_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;700&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-15120357c3aaea87e1fb8c9e6c20b431_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-15120357c3aaea87e1fb8c9e6c20b431_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 3: 激活生物识别的提示&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在图 2 和图 3 所示的场景下，应用只有 &lt;code&gt;userToken&lt;/code&gt; 这个数据。但是除非用户每次打开应用都要输入一次密码，否则该 &lt;code&gt;userToken&lt;/code&gt; 就需要持久化用于之后的会话。然而，如果您直接存储了未加密的 &lt;code&gt;userToken&lt;/code&gt;，那么攻击者就可能侵入设备读取明文的 &lt;code&gt;userToken&lt;/code&gt;，然后使用它从远程服务器上获取数据。因此，在将 &lt;code&gt;userToken&lt;/code&gt; 保存到本地之前，最好先将其加密，这就是图 3 中 BiometricPrompt 的作用。当用户使用生物识别验证身份后，您的目标是使用 BiometricPrompt 解锁密钥 (可以使用 &lt;i&gt;auth-per-use&lt;/i&gt; 密钥，也可使用 &lt;i&gt;time-bound&lt;/i&gt; 密钥)，然后用该密钥对服务器生成的 userToken 进行加密，再将其保存到本地。自此，当用户需要登录时，就可以使用生物识别验证身份 (即生物识别认证 -&amp;gt; 解锁密钥 -&amp;gt; 解密 userToken 进行数据访问)。&lt;/p&gt;&lt;p&gt;这里要注意区分用户是第一次启用生物识别，还是在使用生物识别进行登录。启用生物识别时，应用调用 &lt;code&gt;showBiometricPromptForEncryption()&lt;/code&gt; 方法，该方法会初始化一个 &lt;code&gt;Cipher&lt;/code&gt; 用于加密 &lt;code&gt;userToken&lt;/code&gt;。另一方面，若用户是在使用生物识别进行登录，那应该调用 &lt;code&gt;showBiometricPromptForDecryption()&lt;/code&gt; 方法，它会初始化一个用于解密的 &lt;code&gt;Cipher&lt;/code&gt;，再使用该 &lt;code&gt;Cipher&lt;/code&gt; 来解密 &lt;code&gt;userToken&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;启用生物识别之后，用户下次返回应用时，会通过生物识别身份验证对话框进行认证，如图 4 所示。请注意，由于图 4 是用于登录应用，而图 2 是用于确定交易的，所以在图 4 中没有确认按钮，因为登录行为是一个被动的、易逆向恢复的行为。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-275de074244b16d3d49ad9293f4ecebf_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;683&quot; data-rawheight=&quot;812&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-275de074244b16d3d49ad9293f4ecebf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;683&quot; data-rawheight=&quot;812&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-275de074244b16d3d49ad9293f4ecebf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-275de074244b16d3d49ad9293f4ecebf_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 4&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;若要为您的用户实现这一流程，当您的 &lt;code&gt;LoginActivity&lt;/code&gt; 完成认证过程后，使用成功通过 BiometricPrompt 认证解锁的加密对象来解密 &lt;code&gt;userToken&lt;/code&gt;，然后在 &lt;code&gt;LoginActivity&lt;/code&gt; 中调用 &lt;code&gt;finish()&lt;/code&gt; 方法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ciphertextWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleAppUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;showBiometricPromptForDecryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;// 用户已经成功登录，因此直接进入接下来的应用流程
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;c1&quot;&gt;// 之后的就交给开发者您来完成了
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;n&quot;&gt;updateApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;already_signedin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showBiometricPromptForDecryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ciphertextWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;canAuthenticate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canAuthenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canAuthenticate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BIOMETRIC_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;secretKeyName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_key_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cryptographyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInitializedCipherForDecryption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;secretKeyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializationVector&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;biometricPrompt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;BiometricPromptUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createBiometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                   &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decryptServerTokenFromStorage&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;promptInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricPromptUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createPromptInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;biometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;promptInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CryptoObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decryptServerTokenFromStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiometricPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ciphertextWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;authResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cryptoObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;plaintext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;cryptographyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decryptData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ciphertext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;SampleAppUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fakeToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plaintext&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;// 现在您有了 token，就可以查询服务器上的其他数据了
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;c1&quot;&gt;// 我们之所以称这个为 fakeToken，是因为它并不是真正从服务器中获取到的
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;c1&quot;&gt;// 在真实场景下，您会在从服务器上获取到 token 数据
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;c1&quot;&gt;// 此时，它才能算是一个真正的 token
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;           &lt;span class=&quot;n&quot;&gt;updateApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;already_signedin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;完整的蓝图&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;图 5 展示了一个完整的工程设计流程图，这也是我们所推荐的流程。既然您在实际编码过程中可能会在很多地方偏离此流程，例如，您所使用的加密解决方案中解锁密钥可能只会用于加密而不用于解密，但是在这里我们仍然希望能够通过提供这样一个完整的示例为可能需要的开发者们提供帮助。&lt;/p&gt;&lt;p&gt;凡是图中提到 &lt;b&gt;密钥&lt;/b&gt; 的地方，您都可以按照需求使用 auth-per-use 密钥或是 time-bound 密钥。另外，凡是图中提到的 &quot;应用中的存储系统&quot; 的地方，您也都可以将其理解为您所偏爱的结构化存储: &lt;b&gt;&lt;code&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/reference/android/content/SharedPreferences&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SharedPreferences&lt;/a&gt;&lt;/code&gt;&lt;/b&gt;、&lt;b&gt;&lt;code&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//developer.android.google.cn/jetpack/androidx/releases/room&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Room&lt;/a&gt;&lt;/code&gt;&lt;/b&gt; 或是任何别的存储方案。最后，对于 userToken 您可以将其理解为一个令牌，有了它就可以去服务器上访问被保护的用户数据。服务器通常会将这种令牌作为调用方已被授权的证据。&lt;/p&gt;&lt;p&gt;图中的 &quot;对 userToken 进行加密&quot; 的箭头很可能会指向 &quot;登录完成&quot;，而不是回到 &quot;LoginActivity&quot;。尽管如此，我们还是在图中让其指向了 &quot;LoginActivity&quot;，就是为了提醒大家注意，在用户点击 &quot;激活生物识别&quot; 后，可以使用一个额外的 Activity (例如 EnableBiometricAuthActivity)，使代码更加模块化，更具可读性。或者，您也可以创建带有两个 Fragment 的 LoginActivity: 一个 Fragments用于实际的认证流程，另一个用来响应用户点击 &quot;启用生物识别&quot;。&lt;/p&gt;&lt;p&gt;除了下面这个流程图之外，我们还发布了一个设计指南，您可以在设计应用时进行参考。另外，我们 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/android/security-samples/tree/master/BiometricLoginKotlin&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在 Github 上的示例代码&lt;/a&gt;&lt;/b&gt; 希望也能够帮助您更好地理解如何使用生物识别身份验证技术。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0dade1949ed511b2120cdf891d6d1498_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1860&quot; data-rawheight=&quot;1999&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-0dade1949ed511b2120cdf891d6d1498_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1860&quot; data-rawheight=&quot;1999&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-0dade1949ed511b2120cdf891d6d1498_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-0dade1949ed511b2120cdf891d6d1498_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 图 5: 使用生物识别同服务器获取授权的完整蓝图&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在本篇文章中，我们介绍了:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如何扩展 UI 来支持生物识别身份验证；&lt;/li&gt;&lt;li&gt;针对生物识别身份验证的流程，您的应用应着重解决的关键点是什么；&lt;/li&gt;&lt;li&gt;如何设计您的代码来处理生物识别认证的不同场景；&lt;/li&gt;&lt;li&gt;登录流程的完整工程设计图。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;祝您编码愉快！&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d7952941da7287f1ffad877d06b8e4aa</guid>
<title>Android 进阶：组件化架构详解（放弃模块化到全面拥抱组件化开发）</title>
<link>https://toutiao.io/k/y7gk0dd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;一、为何放弃模块化？&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;模块化开发就是将常用的UI、网络请求、数据库操作、第三方库的使用等公共部分抽离封装成基础模块，&lt;/span&gt;&lt;span&gt;或者将大的业务上拆分为多个小的业务模块，这些业务模块又依赖于公共基础模块的开发方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;shape type=&quot;#_x0000_t75&quot; filled=&quot;f&quot;&gt;&lt;imagedata title=&quot;image1&quot;/&gt;&lt;/shape&gt;&lt;img data-ratio=&quot;0.6660649819494585&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhG4Aw9FO44mkriahs0xB4depl0XQicC0URM2jVODGhafZJzPRZOkCFP3DcjCjDRgtxqLdBPibG1AG90w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;模块化的弊端&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、项目&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;代码量越来越大，每次的编译速度越来越慢，哪怕几句代码的修改，都需要等待若干分钟等待编译运行查看执行结果，极大的降低了开发效率；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、业务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;模块越来越多，不可避免地产生越来越多且复杂的耦合，哪怕一次小的功能更新，也需要对修改代码耦合的模块进行充分测试；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、团队&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;人数越来越多，却要求开发人员了解与之业务相关的每一个业务模块，防止出现此开发人员修改代码导致其他模块出现bug的情况，这个要求对于开发人员显然是不友好的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;那怎样解决模块化开发的这些弊端呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;当然是组件化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二、组件化开发&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1、什么组件化？为何使用？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;组件化就是将工程按照不同的属性拆分成各个独立的子工程的过程；组件是组件化的输出产物，不同的组件最终进行组装就是完整的工程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;随着业务越来越复杂，代码量越来越盘大的时候，开发人员在开发新功能或修改bug的时候有时候会不小心将其他正常的功能修改出新bug。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;而组件化之后，每一个组件都是独立的互不影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开发完成后，也能对单个组件进行单独发布，测试人员就能对该组件进行单独的测试，而不用受其他不相关的组件的影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2、组件化好处&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1组件化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，要更关注可复用性、更注重关注点分离、功能单一、高内聚、粒度更小、是业务上能划分的最小单元；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，既可以作为library，又可以单独作为application，便于单独编译单独测试，大大的提高了编译和开发效率；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（业务）组件，可有自己独立的版本，业务线互不干扰，可单独编译、测试、打包、部署；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3各业务线共有的公共模块开发为组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，作为依赖库供各业务线调用，减少重复代码编写，减少冗余，便于维护；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.4通过gradle配置文件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，可对第三方库的引入进行统一管理，避免版本冲突，减少冗余库；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.5通过gradle配置文件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，可对各组件实现library与application间便捷切换，实现项目的按需加载。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5895117540687161&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhG4Aw9FO44mkriahs0xB4depso7xv77XXHY5kXLvcOnCYbB3s0oEdCtv7eGgiaS2y5GI9kelM6bU7BQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3、组件化实际开发&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1 library和app模式的转换&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Android Studio中的Module主要有两种属性，分别为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.1 application属性，可以独立运行的Android程序，也就是我们的APP；&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;plugin&lt;/span&gt;: ‘&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.android&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.application&lt;/span&gt;’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.2、library属性，不可以独立运行，一般是Android程序依赖的库文件；&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;plugin&lt;/span&gt;: ‘&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.android&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.library&lt;/span&gt;’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①Module&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的属性是在每个组件的 build.gradle 文件中配置的，当我们在组件模式开发时，业务组件应处于application属性，这时的业务组件就是一个 Android App，可以独立开发和调试；而当我们转换到集成模式开发时，业务组件应该处于 library 属性，这样才能被我们的“app壳工程”所依赖，组成一个具有完整功能的APP；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②但是我们如何&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;让组件在这两种模式之间自动转换呢？总不能每次需要转换模式的时候去每个业务组件的 Gralde 文件中去手动把 Application 改成 library 吧？如果我们的项目只有两三个组件那么这个办法肯定是可行的，手动去改一遍也用不了多久，但是在大型项目中我们可能会有十几个业务组件，再去手动改一遍必定费时费力，这时候就需要程序员发挥下懒的本质了；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③Gradle自动构建工&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;具有一个重要属性，可以帮助我们完成这个事情。每当我们用AndroidStudio创建一个Android项目后，就会在项目的根目录中生成一个文件 gradle.properties，&lt;/span&gt;&lt;span&gt;我们将使用这个文件的一个重要属性：&lt;/span&gt;&lt;span&gt;在Android项目中的任何一个build.gradle文件中都可以把gradle.properties中的常量读取出来；&lt;/span&gt;&lt;span&gt;那么我们在上面提到解决办法就有了实际行动的方法，首先我们在gradle.properties中定义一个常量值 isModule（是否是组件开发模式，true为是，false为否），&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每次更改“isModule”的值后，需要点击 &quot;Sync Project&quot; 按钮，&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;isModule&lt;/span&gt;=&lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;然后我们在业务组件的build.gradle中读取 isModule，&lt;/span&gt;&lt;span&gt;每次改变isModule的值后，都要同步项目才能生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;if&lt;/span&gt; (isModule.toBoolean()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;apply&lt;/span&gt; plugin: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;com.android.application&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} else {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attribute&quot;&gt;apply&lt;/span&gt; plugin: &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;com.android.library&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.2组件之间AndroidManifest合并问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;组件开发模式下的业务组件再创建一个 AndroidManifest.xml，然后根据isModule指定AndroidManifest.xml的文件路径，让业务组件在集成模式和组件模式下使用不同的AndroidManifest.xml，这样表单冲突的问题就可以规避了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样在不同的开发模式下就会读取到不同的 AndroidManifest.xml ，然后我们需要修改这两个表单的内容以为我们不同的开发模式服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务组件的 build.gradle 中指定表单的路径，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  sourceSets {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        main {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isModule.toBoolean()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                manifest.srcFile &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;src/main/module/AndroidManifest.xml&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                manifest.srcFile &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;src/main/AndroidManifest.xml&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.3全局Application问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①组件化开发的时候&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，可能为了数据的问题每一个组件都会自定义一个Application类，如果我们在自己的组件中开发时需要获取 全局的Context，一般都会直接获取 application 对象，但是当所有组件要打包合并在一起的时候就会出现问题，因为最后程序只有一个 Application，我们组件中自己定义的 Application 肯定是没法使用的，因此我们需要想办法再任何一个业务组件中都能获取到全局的 Context，而且这个 Context 不管是在组件开发模式还是在集成开发模式都是生效的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②BaseApplication&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 主要用于各个业务组件和app壳工程中声明的 Application 类继承用的，只要各个业务组件和app壳工程中声明的Application类继承了 BaseApplication，当应用启动时 BaseApplication 就会被动实例化，这样从 BaseApplication 获取的 Context 就会生效，也就从根本上解决了我们不能直接从各个组件获取全局 Context 的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③给个代码示例&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BaseApplication&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MultiDexApplication&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.onCreate();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         initGlobalConfig();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         initModuleConfit();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;initGlobalConfig&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         initARouter();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;initModuleConfit&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (String modules : ModuleConfig.MODULELIST){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 Class clz = Class.forName(modules);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 Object obj = clz.newInstance();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (obj &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; BaseApplicationImp){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     ((BaseApplicationImp) obj).onCreate(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InstantiationException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                 e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;initARouter&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         ARouter.openLog();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         ARouter.openDebug();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         ARouter.init(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;BaseApplicationImp&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Application application)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ModuleConfig&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String MODULE_PDFREADER = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com..BaseApplication&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String MODULE_LAUNCHER = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.app.AppContext&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String[] MODULELIST = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             MODULE_LAUNCHER,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             MODULE_PDFREADER&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;286&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;创建BaseApplication类，ModuleConfig类以及BaseApplicationImpl类。BaseApplication类的onCreate()方法中初始化一些全局配置并且初始化模块配置。BaseApplicationImpl类是一个接口类，需要各模块自己去实现各个模块的配置。这些配置的类是定义在ModuleConfig中，在初始化的时候会通过反射创建这些类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在各个子module中实现BaseApplicationImpl，这个类可以提供模块化的配置以及application context对象。清单文件都设置为BaseApplication即可。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4组件之间调用和通信&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;163&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;组件之间是平行结构的，它们之间相互没有交集，要实现通信只有添加一个中间层将它们连接到一起，这就是“路由”的概念路由就像一个桥梁一样让平行的河流（组件）之间可以通信和传递数据，这样看起来好像他们之间又是强耦合的关系，维护起来还是代价还有点大，那么还有没有好点的办法呢？那就是路由层使用接口和其他module之间建立弱耦合的关系。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;通信方案有以下几种：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;① 直接依赖&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种方式最直接，但是解耦不彻底，可以直接使用依赖模块的所有类。需要开发者自己规范自己的依赖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②事件通知&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过广播或Bus广播消息，性能较低，而且代码维护成本很高&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③路由&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这应该是目前比较主流的方案，方便，维护成本比较低。主要用来解决启动其他模块的Activity或Fragment的问题。但是无法直接调用其他模块的方法，而且声明方一旦修改就需要通知调用方&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;④公用模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建一个公共模块，在该模块中放入各个模块需要暴露的接口。各个模块依赖中间模块，提供服务的模块内部提供实现接口供其他模块调用，公共模块的代码都可以编辑。其他模块的人修改了接口，有可能本模块也得修改。若不想引用其他模块的实现类，还需要反射，限制实现类名称等，维护成本比较低，但是限制比较多&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;推荐的是路由框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;目前如果不考虑实现和成本，可以直接拿来使用的是&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;WMRouter&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;美团外卖Android开源路由框架&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;WMRouter最初用于解决美团外卖App在业务演进过程中的实际问题，之后逐步推广到了美团其他App。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;ARouter&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里开源的一个 Android 路由中间件，用于对页面、服务提供路由功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用方法直接网络上搜索很多的，如果找不到直接发信息给小编。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0NDE3MjM1Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhFRZkgpibUGGz2NIiaBUpj7NeBSJASje1M1ZhVvpDIGibicMUeCiad3ptsJLaLUjhrVYs5bGZWuenY6UaQ/0?wx_fmt=png&quot; data-nickname=&quot;Android开发编程&quot; data-alias=&quot;&quot; data-signature=&quot;一个有10多年经验开发的android、java、前端等语言的老程序员，在这里一起聊聊技术，一起聊聊生活、一起聊聊中年危机的生存之道，一起进步一起加油，感兴趣的欢迎订阅；不定时的更新。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>