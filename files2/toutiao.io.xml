<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c17efb7d11fbe584d9d66aa107e8f47d</guid>
<title>Spring 中那些让你爱不释手的代码技巧</title>
<link>https://toutiao.io/k/lev94mm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring源码有过一定的研究，并结合我这几年实际的工作经验，把spring中我认为不错的知识点总结一下，希望对您有所帮助。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;一 如何获取spring容器对象&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1.实现BeanFactoryAware接口&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PersonService&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BeanFactory beanFactory;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.beanFactory = beanFactory;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Person person = (Person) beanFactory.getBean(&lt;span&gt;&quot;person&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现&lt;code&gt;BeanFactoryAware&lt;/code&gt;接口，然后重写&lt;code&gt;setBeanFactory&lt;/code&gt;方法，就能从该方法中获取到spring容器对象。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.实现ApplicationContextAware接口&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PersonService2&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextAware&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationContext&lt;/span&gt;&lt;span&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext = applicationContext;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Person person = (Person) applicationContext.getBean(&lt;span&gt;&quot;person&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现&lt;code&gt;ApplicationContextAware&lt;/code&gt;接口，然后重写&lt;code&gt;setApplicationContext&lt;/code&gt;方法，也能从该方法中获取到spring容器对象。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;3.实现ApplicationListener接口&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PersonService3&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationListener&lt;/span&gt;&amp;lt;&lt;span&gt;ContextRefreshedEvent&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;&lt;span&gt;(ContextRefreshedEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        applicationContext = event.getApplicationContext();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Person person = (Person) applicationContext.getBean(&lt;span&gt;&quot;person&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现&lt;code&gt;ApplicationListener&lt;/code&gt;接口，需要注意的是该接口接收的泛型是&lt;code&gt;ContextRefreshedEvent&lt;/code&gt;类，然后重写&lt;code&gt;onApplicationEvent&lt;/code&gt;方法，也能从该方法中获取到spring容器对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，不得不提一下&lt;code&gt;Aware&lt;/code&gt;接口，它其实是一个空接口，里面不包含任何方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它表示已感知的意思，通过这类接口可以获取指定对象，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过BeanFactoryAware获取BeanFactory&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过ApplicationContextAware获取ApplicationContext&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过BeanNameAware获取BeanName等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Aware&lt;/span&gt;接口是很常用的功能，目前包含如下功能：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.4293628808864265&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEUlz2dib4YZFUs4VdbFia35G0kuZ9UQR0ENVqxshRFbmAmkRBarpQibGtJxW17r0lewVIxVug8ub4CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;722&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;二 如何初始化bean&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring中支持3种初始化bean的方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;xml中指定init-method方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用@PostConstruct注解&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现InitializingBean接口&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种方法太古老了，现在用的人不多，具体用法就不介绍了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1.使用@PostConstruct注解&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===初始化===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在需要初始化的方法上增加&lt;code&gt;@PostConstruct&lt;/code&gt;注解，这样就有初始化的能力。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.实现InitializingBean接口&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BService&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;InitializingBean&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===初始化===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现&lt;code&gt;InitializingBean&lt;/code&gt;接口，重写&lt;code&gt;afterPropertiesSet&lt;/code&gt;方法，该方法中可以完成初始化功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里顺便抛出一个有趣的问题：&lt;code&gt;init-method&lt;/code&gt;、&lt;code&gt;PostConstruct&lt;/code&gt; 和 &lt;code&gt;InitializingBean&lt;/code&gt; 的执行顺序是什么样的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;决定他们调用顺序的关键代码在&lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;类的&lt;code&gt;initializeBean&lt;/code&gt;方法中。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.38170347003154576&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7va6icTXPB2jvm3vqhYL3lia5u8Ef7Vv8aYUeXw6P3tGfD3E8kicicQqcDrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码中会先调用&lt;code&gt;BeanPostProcessor&lt;/code&gt;的&lt;code&gt;postProcessBeforeInitialization&lt;/code&gt;方法，而&lt;code&gt;PostConstruct&lt;/code&gt;是通过&lt;code&gt;InitDestroyAnnotationBeanPostProcessor&lt;/code&gt;实现的，它就是一个&lt;code&gt;BeanPostProcessor&lt;/code&gt;，所以&lt;code&gt;PostConstruct&lt;/code&gt;先执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而&lt;code&gt;invokeInitMethods&lt;/code&gt;方法中的代码：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6951566951566952&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vrKtF1W5HmRXGyFA0vYzJ670YBd406aNiatdmWxLAAhfeDdo2iadtryKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1404&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;决定了先调用&lt;code&gt;InitializingBean&lt;/code&gt;，再调用&lt;code&gt;init-method&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以得出结论，他们的调用顺序是：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1775362318840579&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vcSlRricX9ziagqZUUuFl6YrT4YyUFgOSxYEveRGLUyhuHuHoBeAVvFbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;三 自定义自己的Scope&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道&lt;code&gt;spring&lt;/code&gt;默认支持的&lt;code&gt;Scope&lt;/code&gt;只有两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;singleton 单例，每次从spring容器中获取到的bean都是同一个对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;prototype 多例，每次从spring容器中获取到的bean都是不同的对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;spring web&lt;/code&gt;又对&lt;code&gt;Scope&lt;/code&gt;进行了扩展，增加了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;RequestScope 同一次请求从spring容器中获取到的bean都是同一个对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SessionScope 同一个会话从spring容器中获取到的bean都是同一个对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即便如此，有些场景还是无法满足我们的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，我们想在同一个线程中从spring容器获取到的bean都是同一个对象，该怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就需要自定义&lt;code&gt;Scope&lt;/code&gt;了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步实现&lt;code&gt;Scope&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadLocalScope&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Scope&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;static &lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ThreadLocal THREAD_LOCAL_SCOPE = &lt;span&gt;new&lt;/span&gt; ThreadLocal();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(String name, ObjectFactory&amp;lt;?&amp;gt; objectFactory)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Object value = THREAD_LOCAL_SCOPE.get();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; value;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        Object object = objectFactory.getObject();&lt;br/&gt;        THREAD_LOCAL_SCOPE.set(object);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; object;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;remove&lt;/span&gt;&lt;span&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        THREAD_LOCAL_SCOPE.remove();&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;registerDestructionCallback&lt;/span&gt;&lt;span&gt;(String name, Runnable callback)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;resolveContextualObject&lt;/span&gt;&lt;span&gt;(String key)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getConversationId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步将新定义的&lt;code&gt;Scope&lt;/code&gt;注入到spring容器中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadLocalBeanFactoryPostProcessor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;postProcessBeanFactory&lt;/span&gt;&lt;span&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        beanFactory.registerScope(&lt;span&gt;&quot;threadLocalScope&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; ThreadLocalScope());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步使用新定义的&lt;code&gt;Scope&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Scope&lt;/span&gt;(&lt;span&gt;&quot;threadLocalScope&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;四 别说FactoryBean没用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说起&lt;code&gt;FactoryBean&lt;/code&gt;就不得不提&lt;code&gt;BeanFactory&lt;/code&gt;，因为面试官老喜欢问它们的区别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;BeanFactory：spring容器的顶级接口，管理bean的工厂。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;FactoryBean：并非普通的工厂bean，它隐藏了实例化一些复杂Bean的细节，给上层应用带来了便利。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你看过spring源码，会发现它有70多个地方在用FactoryBean接口。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0769230769230769&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vTVYWc3BZ64373MkUZRhVDe8w0uA6s9k7RSwl5siabkvMVRVa4ycpKMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这张图足以说明该接口的重要性，请勿忽略它好吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别提一句：&lt;code&gt;mybatis&lt;/code&gt;的&lt;code&gt;SqlSessionFactory&lt;/code&gt;对象就是通过&lt;code&gt;SqlSessionFactoryBean&lt;/code&gt;类创建的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们一起定义自己的&lt;code&gt;FactoryBean&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyFactoryBean&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;FactoryBean&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;getObject&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String data1 = buildData1();&lt;br/&gt;        String data2 = buildData2();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; buildData3(data1, data2);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;buildData1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;data1&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;buildData2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;data2&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; String &lt;span&gt;buildData3&lt;/span&gt;&lt;span&gt;(String data1, String data2)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; data1 + data2;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; getObjectType() {&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取&lt;code&gt;FactoryBean&lt;/code&gt;实例对象：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyFactoryBeanService&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;BeanFactoryAware&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BeanFactory beanFactory;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setBeanFactory&lt;/span&gt;&lt;span&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.beanFactory = beanFactory;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Object myFactoryBean = beanFactory.getBean(&lt;span&gt;&quot;myFactoryBean&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(myFactoryBean);&lt;br/&gt;        Object myFactoryBean1 = beanFactory.getBean(&lt;span&gt;&quot;&amp;amp;myFactoryBean&quot;&lt;/span&gt;);&lt;br/&gt;        System.out.println(myFactoryBean1);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;getBean(&quot;myFactoryBean&quot;);&lt;/code&gt;获取的是MyFactoryBeanService类中getObject方法返回的对象，&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;getBean(&quot;&amp;amp;myFactoryBean&quot;);&lt;/code&gt;获取的才是MyFactoryBean对象。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;五 轻松自定义类型转换&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring目前支持3中类型转换器：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Converter&amp;lt;S,T&amp;gt;：将 S 类型对象转为 T 类型对象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ConverterFactory&amp;lt;S, R&amp;gt;：将 S 类型对象转为 R 类型及子类对象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GenericConverter：它支持多个source和目标类型的转化，同时还提供了source和目标类型的上下文，这个上下文能让你实现基于属性上的注解或信息来进行类型转换。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这3种类型转换器使用的场景不一样，我们以&lt;code&gt;Converter&amp;lt;S,T&amp;gt;&lt;/code&gt;为例。假如：接口中接收参数的实体对象中，有个字段的类型是Date，但是实际传参的是字符串类型：2021-01-03 10:20:15，要如何处理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，定义一个实体&lt;code&gt;User&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Date registerDate;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，实现&lt;code&gt;Converter&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DateConverter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Converter&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;Date&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; SimpleDateFormat simpleDateFormat = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span&gt;&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Date &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(String source)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (source != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;&quot;&quot;&lt;/span&gt;.equals(source)) {&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                simpleDateFormat.parse(source);&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (ParseException e) {&lt;br/&gt;                e.printStackTrace();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步，将新定义的类型转换器注入到spring容器中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebConfig&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addFormatters&lt;/span&gt;&lt;span&gt;(FormatterRegistry registry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        registry.addConverter(&lt;span&gt;new&lt;/span&gt; DateConverter());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四步，调用接口&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/user&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/save&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(@RequestBody User user)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;success&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求接口时&lt;code&gt;User&lt;/code&gt;对象中&lt;code&gt;registerDate&lt;/code&gt;字段会被自动转换成&lt;code&gt;Date&lt;/code&gt;类型。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;六 spring mvc拦截器，用过的都说好&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring mvc拦截器根spring拦截器相比，它里面能够获取&lt;code&gt;HttpServletRequest&lt;/code&gt;和&lt;code&gt;HttpServletResponse&lt;/code&gt; 等web对象实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring mvc拦截器的顶层接口是：&lt;code&gt;HandlerInterceptor&lt;/code&gt;，包含三个方法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;preHandle 目标方法执行前执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;postHandle 目标方法执行后执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;afterCompletion 请求完成时执行&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便我们一般情况会用&lt;span&gt;HandlerInterceptor&lt;/span&gt;接口的实现类&lt;code&gt;HandlerInterceptorAdapter&lt;/code&gt;类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如有权限认证、日志、统计的场景，可以使用该拦截器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，继承&lt;code&gt;HandlerInterceptorAdapter&lt;/code&gt;类定义拦截器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthInterceptor&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;preHandle&lt;/span&gt;&lt;span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        String requestUrl = request.getRequestURI();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (checkAuth(requestUrl)) {&lt;br/&gt;            &lt;span&gt;return &lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;checkAuth&lt;/span&gt;&lt;span&gt;(String requestUrl)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===权限校验===&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，将该拦截器注册到spring容器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebAuthConfig&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; AuthInterceptor &lt;span&gt;getAuthInterceptor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AuthInterceptor();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addInterceptors&lt;/span&gt;&lt;span&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        registry.addInterceptor(&lt;span&gt;new&lt;/span&gt; AuthInterceptor());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步，在请求接口时spring mvc通过该拦截器，能够自动拦截该接口，并且校验权限。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该拦截器其实相对来说，比较简单，可以在&lt;code&gt;DispatcherServlet&lt;/code&gt;类的&lt;code&gt;doDispatch&lt;/code&gt;方法中看到调用过程：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7720994475138122&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDEUlz2dib4YZFUs4VdbFia35GBcWdl3e9YiaIxTMibCxQGGTbZLE9xsiadddF5QyicxH8ic8dXsMUiaYcJm2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1448&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺便说一句，这里只讲了spring mvc的拦截器，并&lt;span&gt;没有讲spring的拦截器&lt;/span&gt;，是因为我有点小私心，后面就会知道。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;七 Enable开关真香&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道你有没有用过&lt;code&gt;Enable&lt;/code&gt;开头的注解，比如：&lt;code&gt;EnableAsync&lt;/code&gt;、&lt;code&gt;EnableCaching&lt;/code&gt;、&lt;code&gt;EnableAspectJAutoProxy&lt;/code&gt;等，这类注解就像开关一样，只要在&lt;code&gt;@Configuration&lt;/code&gt;定义的配置类上加上这类注解，就能开启相关的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很酷？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们一起实现一个自己的开关：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，定义一个LogFilter：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogFilter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Filter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;(ServletRequest request, ServletResponse response, FilterChain chain)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;记录请求日志&quot;&lt;/span&gt;);&lt;br/&gt;        chain.doFilter(request, response);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;记录响应日志&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;destroy&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，注册LogFilter：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@ConditionalOnWebApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogFilterWebConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; LogFilter &lt;span&gt;timeFilter&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;new&lt;/span&gt; LogFilter();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，这里用了&lt;code&gt;@ConditionalOnWebApplication&lt;/code&gt;注解，没有直接使用&lt;code&gt;@Configuration&lt;/code&gt;注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步，定义开关&lt;code&gt;@EnableLog&lt;/code&gt;注解：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)&lt;br/&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;br/&gt;&lt;span&gt;@Documented&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Import&lt;/span&gt;(LogFilterWebConfig&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; @&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;EnableLog&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四步，只需在&lt;code&gt;springboot&lt;/code&gt;启动类加上&lt;code&gt;@EnableLog&lt;/code&gt;注解即可开启LogFilter记录请求和响应日志的功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;八 RestTemplate拦截器的春天&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们使用&lt;code&gt;RestTemplate&lt;/code&gt;调用远程接口时，有时需要在&lt;code&gt;header&lt;/code&gt;中传递信息，比如：traceId，source等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种业务场景就能通过&lt;code&gt;ClientHttpRequestInterceptor&lt;/code&gt;接口实现，具体做法如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，实现&lt;code&gt;ClientHttpRequestInterceptor&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestTemplateInterceptor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ClientHttpRequestInterceptor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ClientHttpResponse &lt;span&gt;intercept&lt;/span&gt;&lt;span&gt;(HttpRequest request, &lt;span&gt;byte&lt;/span&gt;[] body, ClientHttpRequestExecution execution)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        request.getHeaders().set(&lt;span&gt;&quot;traceId&quot;&lt;/span&gt;, MdcUtil.get());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; execution.execute(request, body);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，定义配置类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestTemplateConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RestTemplate &lt;span&gt;restTemplate&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        RestTemplate restTemplate = &lt;span&gt;new&lt;/span&gt; RestTemplate();&lt;br/&gt;        restTemplate.setInterceptors(Collections.singletonList(restTemplateInterceptor()));&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; restTemplate;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RestTemplateInterceptor &lt;span&gt;restTemplateInterceptor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RestTemplateInterceptor();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中MdcUtil其实是利用&lt;code&gt;MDC&lt;/code&gt;工具在&lt;code&gt;ThreadLocal&lt;/code&gt;中存储和获取traceId&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MdcUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;static &lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String TRACE_ID = &lt;span&gt;&quot;TRACE_ID&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; MDC.get(TRACE_ID);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(String value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        MDC.put(TRACE_ID, value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这个例子中没有演示MdcUtil类的add方法具体调的地方，我们可以在filter中执行接口方法之前，生成traceId，调用MdcUtil类的add方法添加到&lt;code&gt;MDC&lt;/code&gt;中，然后在同一个请求的其他地方就能通过MdcUtil类的get方法获取到该traceId。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;九 统一异常处理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前我们在开发接口时，如果出现异常，为了给用户一个更友好的提示，例如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/test&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/add&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;成功&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不做任何处理请求add接口结果直接报错：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.28355957767722473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vyDdyWt359lfLvZNlJpxdPpHggibXhVFWQwtwRCUUmxA75U8Y2j5Lhrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1326&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;what？用户能直接看到错误信息？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种交互方式给用户的体验非常差，为了解决这个问题，我们通常会在接口中捕获异常：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/add&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;add&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String result = &lt;span&gt;&quot;成功&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;            result = &lt;span&gt;&quot;数据异常&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口改造后，出现异常时会提示：“数据异常”，对用户来说更友好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来挺不错的，但是有问题。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果只是一个接口还好，但是如果项目中有成百上千个接口，都要加上异常捕获代码吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是否定的，这时全局异常处理就派上用场了：&lt;code&gt;RestControllerAdvice&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestControllerAdvice&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;GlobalExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;(Exception&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;handleException&lt;/span&gt;(&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt; ArithmeticException) {&lt;br/&gt;            &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;数据异常&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (e &lt;span&gt;instanceof&lt;/span&gt; Exception) {&lt;br/&gt;            &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;服务器内部异常&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;retur n&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只需在&lt;code&gt;handleException&lt;/code&gt;方法中处理异常情况，业务接口中可以放心使用，不再需要捕获异常（有人统一处理了）。真是爽歪歪。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;十 异步也可以这么优雅&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前我们在使用异步功能时，通常情况下有三种方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;继承Thread类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现Runable接口&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用线程池&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们一起回顾一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;继承Thread类&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyThread&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Thread&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===call MyThread===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; MyThread().start();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;实现Runable接口&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyWork&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===call MyWork===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; MyWork()).start();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用线程池&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyThreadPool&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ExecutorService executorService = &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;60&lt;/span&gt;, TimeUnit.SECONDS, &lt;span&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;&amp;gt;(&lt;span&gt;200&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;static &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Work&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;===call work===&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;            executorService.submit(&lt;span&gt;new&lt;/span&gt; MyThreadPool.Work());&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            executorService.shutdown();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三种实现异步的方法不能说不好，但是spring已经帮我们抽取了一些公共的地方，我们无需再继承&lt;code&gt;Thread&lt;/code&gt;类或实现&lt;code&gt;Runable&lt;/code&gt;接口，它都搞定了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何spring异步功能呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，springboot项目启动类上加&lt;code&gt;@EnableAsync&lt;/code&gt;注解。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@EnableAsync&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Application&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; SpringApplicationBuilder(Application&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;web&lt;/span&gt;(&lt;span&gt;WebApplicationType&lt;/span&gt;.&lt;span&gt;SERVLET&lt;/span&gt;).&lt;span&gt;run&lt;/span&gt;(&lt;span&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，在需要使用异步的方法上加上&lt;code&gt;@Async&lt;/code&gt;注解：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PersonService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;get&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===add==&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return &lt;/span&gt; &lt;span&gt;&quot;data&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在使用的地方调用一下：personService.get();就拥有了异步功能，是不是很神奇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，spring会为我们的异步方法创建一个线程去执行，如果该方法被调用次数非常多的话，需要创建大量的线程，会导致资源浪费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，我们可以定义一个线程池，异步方法将会被自动提交到线程池中执行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadPoolConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.corePoolSize:5}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;int&lt;/span&gt; corePoolSize;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.maxPoolSize:10}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxPoolSize;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.queueCapacity:200}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;int&lt;/span&gt; queueCapacity;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.keepAliveSeconds:30}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private &lt;/span&gt; &lt;span&gt;int&lt;/span&gt; keepAliveSeconds;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${thread.pool.threadNamePrefix:ASYNC_}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String threadNamePrefix;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Executor &lt;span&gt;MessageExecutor&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ThreadPoolTaskExecutor executor = &lt;span&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;br/&gt;        executor.setCorePoolSize(corePoolSize);&lt;br/&gt;        executor.setMaxPoolSize(maxPoolSize);&lt;br/&gt;        executor.setQueueCapacity(queueCapacity);&lt;br/&gt;        executor.setKeepAliveSeconds(keepAliveSeconds);&lt;br/&gt;        executor.setThreadNamePrefix(threadNamePrefix);&lt;br/&gt;        executor.setRejectedExecutionHandler(&lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor.CallerRunsPolicy());&lt;br/&gt;        executor.initialize();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; executor;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring异步的核心方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5619047619047619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vI9zxV1qWZZu91ls2pflUSwaNmOUckkqDogaAEEKU8IMMqvHjH92phg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1470&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据返回值不同，处理情况也不太一样，具体分为如下情况：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.34124629080118696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7veNnUBO858MkbFZIFrlicTVvHyv9eQVP3mRPBNeswWNr9eMEWqmPHoEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1348&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;十一 听说缓存好用，没想到这么好用&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring cache架构图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7011494252873564&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vdmj5ViapicuZVXEMicNXwCo2tYL38As3kgjg6YibpibhUocY4BZVOIdm9lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它目前支持多种缓存：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.31690140845070425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDELdgnZC2EVRmh8HYBrPD7vYvgErCXEn63wnQDSYgm9YEBbqK0Y2VB0JuvJDJtVab7icibQX0MSic1Vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1420&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在这里以&lt;code&gt;caffeine&lt;/code&gt;为例，它是&lt;code&gt;spring&lt;/code&gt;官方推荐的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步，引入&lt;code&gt;caffeine&lt;/code&gt;的相关jar包&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;com.github.ben-manes.caffeine&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;caffeine&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;&lt;span&gt;2.6&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步，配置&lt;code&gt;CacheManager&lt;/code&gt;，开启&lt;code&gt;EnableCaching&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@EnableCaching&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CacheConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CacheManager &lt;span&gt;cacheManager&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        CaffeineCacheManager cacheManager = &lt;span&gt;new&lt;/span&gt; CaffeineCacheManager();&lt;br/&gt;        &lt;span&gt;//Caffeine配置&lt;/span&gt;&lt;br/&gt;        Caffeine&amp;lt;Object, Object&amp;gt; caffeine = Caffeine.newBuilder()&lt;br/&gt;                &lt;span&gt;//最后一次写入后经过固定时间过期&lt;/span&gt;&lt;br/&gt;                .expireAfterWrite(&lt;span&gt;10&lt;/span&gt;, TimeUnit.SECONDS)&lt;br/&gt;                &lt;span&gt;//缓存的最大条数&lt;/span&gt;&lt;br/&gt;                .maximumSize(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        cacheManager.setCaffeine(caffeine);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; cacheManager;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步，使用&lt;code&gt;Cacheable&lt;/code&gt;注解获取数据&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public &lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CategoryService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;br/&gt;   &lt;span&gt;//category是缓存名称,#type是具体的key，可支持el表达式&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;@Cacheable&lt;/span&gt;(value = &lt;span&gt;&quot;category&quot;&lt;/span&gt;, key = &lt;span&gt;&quot;#type&quot;&lt;/span&gt;)&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CategoryModel &lt;span&gt;getCategory&lt;/span&gt;&lt;span&gt;(Integer type)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; getCategoryByType(type);&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;&lt;span&gt;private&lt;/span&gt; CategoryModel &lt;span&gt;getCategoryByType&lt;/span&gt;&lt;span&gt;(Integer type)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;       System.out.println(&lt;span&gt;&quot;根据不同的type:&quot;&lt;/span&gt; + type + &lt;span&gt;&quot;获取不同的分类数据&quot;&lt;/span&gt;);&lt;br/&gt;       CategoryModel categoryModel = &lt;span&gt;new&lt;/span&gt; CategoryModel();&lt;br/&gt;       categoryModel.setId(&lt;span&gt;1L&lt;/span&gt;);&lt;br/&gt;       categoryModel.setParentId(&lt;span&gt;0L&lt;/span&gt;);&lt;br/&gt;       categoryModel.setName(&lt;span&gt;&quot;电器&quot;&lt;/span&gt;);&lt;br/&gt;       categoryModel.setLevel(&lt;span&gt;3&lt;/span&gt;);&lt;br/&gt;       &lt;span&gt;return&lt;/span&gt; categoryModel;&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用categoryService.getCategory()方法时，先从&lt;code&gt;caffine&lt;/code&gt;缓存中获取数据，如果能够获取到数据则直接返回该数据，不会进入方法体。如果不能获取到数据，则直接方法体中的代码获取到数据，然后放到&lt;code&gt;caffine&lt;/code&gt;缓存中。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;唠唠家常&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring中不错的功能其实还有很多，比如：BeanPostProcessor,BeanFactoryPostProcessor,AOP,动态数据源，ImportSelector等等。我原本打算一篇文章写全的，但是有两件事情改变了我的注意：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有个大佬原本打算转载我文章的，却因为篇幅太长一直没有保存成功。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最近经常加班，真的没多少时间写文章，晚上还要带娃，喂奶，换尿布，其实挺累的。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;END&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;推荐好文&lt;/h4&gt;&lt;/section&gt;&lt;pre&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&amp;amp;mid=2247498557&amp;amp;idx=2&amp;amp;sn=84902d7030e174e152615d8fae3755cc&amp;amp;chksm=ebd5c411dca24d07446a4f22772cd12d2cc1143b62eb922a14500ae981cd57fb850ef74ca257&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;强大，10k+点赞的 SpringBoot 后台管理系统竟然出了详细教程！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;amp;mid=2247497288&amp;amp;idx=2&amp;amp;sn=65d7111a19e920df1e9416959594b2f4&amp;amp;chksm=fc799be6cb0e12f0b58479f8b031bc5ae79efdca1880ff9b19f0a107c3a88c37b9596dc73203&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;分享一套基于SpringBoot和Vue的企业级中后台开源项目，代码很规范！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTI4MjI0MQ==&amp;amp;mid=2247497522&amp;amp;idx=2&amp;amp;sn=c5b4e596be4ac7d7f293e7e2f0ea0769&amp;amp;chksm=fc799a9ccb0e138a64a2671f31b8d4be1b3c061a288f7b0d1d4af02a60c45a72231446b91e00&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;能挣钱的，开源 SpringBoot 商城系统，功能超全，超漂亮！&lt;/a&gt;&lt;/p&gt;&lt;/pre&gt;&lt;pre&gt;&lt;p&gt;&lt;img data-type=&quot;jpeg&quot; data-ratio=&quot;0.3648148148148148&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eQPyBffYbufRcZPYBUx7WxAoIjibsF645yGLZqfGCEn9x73bnkBLibx6TAGMpmMyib0aXeRHZsJoHBmwVQ6YIVGtw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>482b234da9abf1fef8ec8834b246b3d3</guid>
<title>我的 2020 年阅读书单</title>
<link>https://toutiao.io/k/e83kg1a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;把2020年读过的书单简单整理下分个类，把一些值得推荐的书列出来（技术书籍除外），给大家作个参考。其中有些书目，特别想推荐大家的，在之前的推文也都单独成文。&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;为什么都是不列技术书，反而都是一堆科外书？一个简单的理由：随着年龄的增长，我们需要求助于技术外的东西来安身立命。另外，由于读这篇文章的你所从事的领域不同，我去罗列技术书的局限性就比较大。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;现在回过头来看，很多书只对书名有个印象，但书中的内容都有些模糊了。不过也没关系，人脑不可能记住所有东西，留一个索引在脑海里，需要的时候，你会找到它的。&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;传记类：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《一往无前》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《我曾走在崩溃的边缘：俞敏洪亲述新东方创业发展之路》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《岁月凶猛》&lt;span&gt;（ 冯仑“商业三部曲”收官之作，前两本《野蛮生长》《理想丰满》）&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;社科类&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《裂变式创业：无边界组织的失控实践》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《第二曲线创新》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《重来：更为简单有效的商业思维》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《重来2：更为简单高效的工作方式》&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;认知探索类&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《好好学习：个人知识管理精进指南》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《一年顶十年》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《好好思考》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《洞见》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《能力陷阱》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《你要如何衡量你的人生（舒适阅读版）》&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;我在微信读书里，建了一个认识提升的书单，目前收藏量已经近1500人，看来大家还都是比较关注这块的。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;产品经营类&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《俞军产品方法论》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《决胜B端：产品经理升级之路》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《SaaS创业路线图：to B产品、营销、运营方法论及实战案例解读》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《客户成功：持续复购和利润陡增的基石》&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;子女教育类&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《阅读手册：成就孩子一生的阅读培养法》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《我用阅读教育孩子》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《养育男孩》&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《养育女孩》&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不再沿用之前的方式一一列出，今年仅仅罗列20几本，不太推荐给你读的书目不在此列，以免形成对你的干扰。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;祝你开卷有益。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;你的认可，才是对我最大的鼓励&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>89ae4371cbad6871a9102a0d61024e5b</guid>
<title>工具 | 腾讯开源的，基于 Whistle 实现的多账号多环境远程配置及抓包调试平台</title>
<link>https://toutiao.io/k/iq87lih</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;大家好，我是周刊菌。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1111&quot; data-ratio=&quot;2.002666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavicWpQhTALEcfH5yHp9JpjJKGa3Nl1KhM1bkIbCDAZ3KMMCc2qGia3oibdkxPOSRGEiahg8iclAZpdU54A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「码农周刊 VIP 会员」推出 38 周啦！感谢亲们的大力支持！第 038 期「码农周刊 VIP 会员专属邮件周报」已发送完毕，请注意查收。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;告诉大家一个好消息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：已有数位上市公司 CTO 低调订阅了我们的「码农周刊 VIP 会员专属邮件周报」，感谢肯定！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;255&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;255&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ7PeUupLzwuuAibicnrRNxKcfCY7fIva78efKsUzANlCCAeuSQEGkGm34rKkzNRpzy6IiaiaHmBNA6DcA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;「码农周刊 VIP 会员」是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简介版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊 VIP 会员 = 全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;详细版&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击「阅读原文」即可查看详细介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊 VIP 新年特惠&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原价 365 元/年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，现价仅需 108 元！&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;全年 52 期「VIP 会员专属邮件周报」&lt;br/&gt;只限 VIP 会员加入的交流圈子&lt;br/&gt;大厂「内推机会」&lt;br/&gt;N 多福利，你值得拥有！&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;CTO 们邀请你加入码农周刊 VIP，升职加薪不再难！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;31&quot; data-cropselx2=&quot;291&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav9LRTqibic3sUoh5tv76OXCpNTWbZ0gCYsFDShjwfRVvM157WDel2cr2dy5ghjxDCCwRc2Mu8bgehnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3bfe1c29e220b7fe035788f19b70f32c</guid>
<title>认识 V8 引擎（一）</title>
<link>https://toutiao.io/k/tdc9eou</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.478125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeIDb5ZT3Bs326f22KuLGbcF5xcruFSlN3lKAXHbIQ4s8xlFUr9u9Y7upL9Ebajsb00B1HR3phzpYw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;V8 是一个由 Google 开发的，开源的，高性能的， JavaScript 及 WebAssembly 引擎，使用 C++ 编写。广泛应用于 Google Chrome 浏览器、Node.js 等等。跨平台支持 Windows(Win7以上)、macOS(10.12+)，以及各种 Linux 系统，包括 ARM 的手机系统。同时，V8 也可以独立的运行使用，嵌入集成到 C++ 的应用中。&lt;/p&gt;&lt;p&gt;JavaScript 引擎的主要作用是执行 JavaScript 代码。世界上第一款 JavaScript 引擎是 SpiderMonkey，由布兰登·艾克在网景公司开发，用于 Netscape Navigator 网页浏览器。传闻艾克在 1995年 5 月仅花了十天就把原型设计了出来。&lt;/p&gt;&lt;p&gt;早期的 JavaScript 引擎是通过解释器的方式解释执行，比如将源码转成抽象语法树（AST），然后解释执行，其运行效率并不高。但由于早期的浏览器网页还是以静态网页（HTML）为主，JavaScript 并未被广泛重度的应用，所以解释执行并未遇到太大问题。后来随着动态网页兴起，网页里开始运行越来越多复杂的应用，JavaScript 的瓶颈凸显了出来。&lt;/p&gt;&lt;p&gt;既然 JavaScript 运行性能不行，为什么不替换它呢？换成 Lua，Python 不香吗？或者再重新精心设计另外一门专用语言（WebAssembly）。其实替换 JavaScript 的尝试一直都在进行，但是JavaScript 在浏览器里的地位至今无人能撼动。主要原因我认为有三个：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;经过几十年的应用，JavaScript 已经成为事实标准，改变不易&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;JavaScript 对开发者非常友好，上手较其他语言更容易&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随着 JIT 技术的引入，JavaScript 的性能已经不再是问题&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;前两个都是习惯问题，即使改变，慢慢也就适应了。但 JIT 技术的引入，几乎解决了 JavaScript 的性能问题，使得 JavaScript 的地位更加的牢固。在 JavaScript 中应用 JIT 的典型代表，就是我们今天的主角：V8。在引入我们的主题之前，我还要简要的介绍一下什么是 JIT 技术。&lt;/p&gt;&lt;p&gt;JIT 的全程是 just-in-time compilation，又译即时编译或实时编译。在 JIT 出现之前，高级编程语言要被计算机执行，通常通过两种方式来实现：AOT 和解释器。AOT 全程 ahead-of-time compilation，即代码预先通过编译器的编译，直接生成目标机器的机器码。因此它的运行效率最高，比如我们常用的 C/C++ 代码，通过 gcc/clang/msvc 等编译器，直接编译出机器码的二进制文件，其运行性能我们称之为原生性能。&lt;/p&gt;&lt;p&gt;既然 AOT 性能最高，全都用 AOT 不就得了？也不尽然。AOT 要求编译的代码是静态类型的，比如一个变量的类型在运行期间不允许变成另一种类型，也不允许动态的往类型里增加属性。而 JavaScript 是动态类型的，比如下面一段代码，变量 foo 的类型可以运行时随时变化：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; foo = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;// foo is a int&lt;/span&gt;foo = &lt;span&gt;&quot;hello&quot;&lt;/span&gt;; &lt;span&gt;// foo change to a string&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt;() {&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;foo = &lt;span&gt;new&lt;/span&gt; Point(); &lt;span&gt;// foo change to a Point&lt;/span&gt;foo.x = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;// foo add x property&lt;/span&gt;foo.y = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;// foo add y property&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;foo 类型总是变来变去，给 AOT 编译器增加了很大的麻烦。同时，AOT 还有编译时间长，生成的目标文件大的问题。它不能像 Java 一样『一次编译，到处运行』，而是针对不同平台『编译多次，到处运行』。如果想像 JavaScript 一样做到『一次编写，到处运行』，就需要在用户的浏览器端，运行时实时的进行编译。这样一来，缓慢的编译过程又拖慢了代码的启动速度。&lt;/p&gt;&lt;p&gt;JIT 结合了 AOT 和解释器两者的优势。它可以运行时根据情况在两者之间切换。比如首次启动时，使用解释器来执行，这样保证了代码的启动速度，对于一些短小的一次性执行的代码非常友好。当代码运行一段时间，编译器发现某些代码频繁的反复执行，则切换到 JIT 模式即时的将这部分代码编译成机器码，之后再运行到这类代码时，则可以做到几乎以原生的速度执行。&lt;/p&gt;&lt;p&gt;现代语言的虚拟机几乎都拥有了 JIT 的能力。如 JVM JIT，LuaJIT。几大 JavaScript 引擎，例如微软的 Chakra、Mozilla 的 SpiderMonkey、苹果的 JavaScriptCore、谷歌的 V8，JIT 已经成了标配功能。而其中谷歌的 V8，是所有的 JavaScript 引擎的佼佼者。&lt;/p&gt;&lt;p&gt;为什么 V8 能做到这么优秀呢？我们后面慢慢来讲。我们先来看看 V8 是怎样诞生出来的。从维基百科里了解到，V8 的创建者是一名叫 Lars Bak 的丹麦程序员。我们来看看这位大神的履历：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;1991 年在 Sun 工作，开发 Self 虚拟机，成为业界最佳程序员之一&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1994 年，离开 Sun，加入 LongView，设计和开发了高性能虚拟机 StrongTalk&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;1997 年，LongView 被 Sun 收购，主导开发了著名的 Java 虚拟机 HotSpot&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2002 年回到丹麦，创立名叫 OOVM 的公司。&lt;/p&gt;&lt;p&gt;2004年将公司卖给一家瑞士公司 Esmertec，随后又在该公司干了两年&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2006 年加入谷歌，在丹麦自己的农场开始开发 V8 引擎&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2008 年，开发的 V8 引擎和谷歌浏览器 Chrome 一起横空出世。&lt;/p&gt;&lt;p&gt;V8 处理 JavaScript 的速度比当时的 IE 浏览器快 56 倍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;2011 年主导开发并发布 Dart 语言。&lt;/p&gt;&lt;p&gt;如今应用火热的 Flutter 正是使用该语言进行开发&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;据说 2006 年是劈柴（Sundar Pichai，现谷歌 CEO）哥亲自给 Bak 打的电话，说谷歌正打算开发一款全新的浏览器，你来做高级经理，开发一个高性能的 JavaScript 引擎好不好？Bak 对开发 JavaScript 引擎很有兴趣，欣然接受了这份工作。但他说他不在乎当什么高级经理，在乎的是推动打破技术的边界，并且他不会回到加州，而是在丹麦自己的农场开始他的工作。他家农场距离加州总部相隔 8000 公里，相差了 9 个时区。&lt;/p&gt;&lt;p&gt;他在农场建立了办公室，家就在办公室对面。每天，他走过石子路到办公室，然后开始写代码。结束工作后，又穿过院子走回家，把工作彻底放下。他享受这种工作和生活分开的感觉。这也是他不想去硅谷的原因。他招募了自己的学生卡斯帕伦德一起来农场工作，命名了新的引擎名字叫 V8，以汽车 V 型 8 缸发动机命名，预示着这将是一款性能爆表的引擎。V8 从零开始开发的，一面世就秒杀了市面上所有的 JavaScript 引擎。&lt;/p&gt;&lt;p&gt;早期的 V8 版本，为了追求性能的极致，将源码转成抽象语法树之后，直接通过 Full-codegen 生成目标机器码。2010 年，又推出了 Crankshaft 编译优化器，在代码执行过程中，内置的 Profiler 记录热点函数，然后提交给 Crankshaft 进行优化，生成优化后的机器码，进一步提高执行的效率。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.56171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeJ47LHtlZjYT9DE7OIatKia8QbvZzjZWK0rEubg7qamC1R87S1ibObFWFvmQUicPc8TC9VVnC6ALkUbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;由于直接生成目标机器码，导致了占用内存大，编译时间长导致启动速度慢，2016 年 V8 设计了中间字节码 Ignition，以让 V8 能在内存更小的安卓设备上流畅的运行。2017 年推出 V8 5.9 版本，废弃了旧的 Full-codegen+Crankshaft 的编译架构，使用了 Ignition 字节码解释器和编译优化器 TurboFan，内存使用得到进一步降低，网页加载速度也得到大幅的提升。Ignition+TurboFan 的组合沿用至今。&lt;/p&gt;&lt;p&gt;2017 年 V8 5.7 版本，正式支持了 WebAssembly，一个基于浏览器设计的新的字节码标准。2018 年 V8 6.9 版本，引入 WebAssembly 基线编译器 Liftoff，极大提升了首次编译的效率，配合 TurboFan 编译优化器，在启动速度和运行性能上都得到了很大的提升。&lt;/p&gt;&lt;p&gt;截止目前，V8 最新的版本是 8.7，并且一直在不断的迭代进化之中。&lt;/p&gt;&lt;h4&gt;随想&lt;/h4&gt;&lt;p&gt;Lars Bak 从大学时才接触计算机，一直专注在虚拟机的领域，做出像 JVM HotSpot、V8、Dart 这样非凡的产品。这告诉我们，找准自己的兴趣和努力的方向，深耕下去，什么时候开始都不会迟。Bak 加入谷歌时，已经 41 岁。虽然之前他已经积累了不少的财富，但我相信他是由衷的不在乎谷歌的什么高级职位，在乎的只是用更好的技术，突破更多的技术边界。所以 V8 从一开始就是开源的，正如题图 2008 年 Chrome 发布时的宣传漫画里说的一样：『所以，其他浏览器也可以用它（V8），或者，如果有其他项目需要用到 JavaScript，开发者都可以直接使用 V8』&lt;/p&gt;&lt;p&gt;我喜欢写代码，但有时也因程序员 35 岁问题而困扰，了解了 Lars Bak 经历之后，我想，专研深耕自己的领域，专注到兴趣的事情来上，竞争力自然就加强了，也就真没有什么好焦虑了。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5fa01d3056cb2edb32aa4fad210f1dc8</guid>
<title>换个角度，聊聊全链路压测</title>
<link>https://toutiao.io/k/46w7ldx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h2 data-lake-id=&quot;c1b23aacfa2d4e0c74b315323ee55872&quot;&gt;前言&lt;/h2&gt;&lt;p data-lake-id=&quot;9d662396ed1135e6220cdf254cf2d659&quot;&gt;之前自己也写过好几篇关于全链路压测的文章或者博客，最近看了infoQ上&lt;strong&gt;infoQ-数列科技杨德华&lt;/strong&gt;的专栏，复盘了下自己以往在全链路压测实施方面的工作，发觉还有很多可以做的更好的地方。就以这篇文章来做个总结，顺带说说我自己实施全链路压测工作方面的一些收获和经验。&lt;/p&gt;&lt;p data-lake-id=&quot;fe66b4447d2b442578ee80d408b192af&quot;&gt;18年初：&lt;strong&gt;聊聊全链路压测&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a3dacc300190435d910a15c6e18da33c&quot;&gt;19年初：&lt;strong&gt;再谈全链路压测&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b4c43eecc56235d029ceb816c58677c&quot;&gt;20年初：&lt;strong&gt;全链路压测探索实践之路&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e60983f7c40e1a6df9a275f47e6c4555&quot;&gt;19年双十一备战：&lt;strong&gt;全链路压测第一次实践&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;216f9498c8c7e59351c558c1e05001a5&quot;&gt;20年618大促总结：&lt;strong&gt;生产全链路压测实践之道&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ab31d8a68cff48e5254c4d564ad5a910&quot;&gt;20年双11大促总结：&lt;strong&gt;全链路压测落地和演进之路&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0aa58e36a50cf0e706e51ce9909ca8fd&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;bafda4059ae66a7475d5045cb623f5c3&quot;&gt;观点&lt;/h2&gt;&lt;p data-lake-id=&quot;7fafdb1ab3ec3555a7047d7e64aa4b08&quot;&gt;很多同学问过我关于全链路压测如何实施落地，如何在生产环境实现的技术问题。这里我想借用上面infoQ专栏大佬的一句话：&lt;strong&gt;&lt;span&gt;生产全链路压测，表面是一个技术工程，实际上是一个很有难度的组织协调项目&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;0b49329486461b0a42fa6ae83d684543&quot;&gt;下面我会从几个方面来谈谈我个人现在对于全链路压测的一些思考和经验总结。&lt;/p&gt;&lt;p data-lake-id=&quot;96683ade97dd5ee312867d18e5628dd1&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;de1f1da45305460b6cb6796dd9ed291e&quot;&gt;技术&lt;/h2&gt;&lt;p data-lake-id=&quot;3551c6465b83f6dcd877760c96fc592f&quot;&gt;很多同学说起全链路压测，都喜欢深究它的技术细节，这没错。但全链路压测想要成功的在生产环境实施，更多的是考验组织协调能力的一个项目。至于技术层面，能说的有很多，这次我们先聊聊比较核心的一些技术点。&lt;/p&gt;&lt;h3 data-lake-id=&quot;41f2a101bb1e999f56d68edb53286410&quot;&gt;隔离方案&lt;/h3&gt;&lt;h4 data-lake-id=&quot;322be2ad5b8e6c5e15a90ebe0e79843f&quot;&gt;流量隔离&lt;/h4&gt;&lt;p data-lake-id=&quot;50837aab58e1d36c3f3d05a58537da4e&quot;&gt;既然我们的前提是在生产环境进行压测，那么无论是趁着业务流量低峰期，还是生产全链路压测常态化，对于压测流量的隔离区分，是一定要首先解决的。如下图所示：&lt;/p&gt;&lt;p data-lake-id=&quot;570a7568dc74a2366f97430bdc3f06e8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F403166%2F1573629693705-70ef3a68-54c1-451f-ab21-34b5c1d8e460.png%3Fx-oss-process%3Dimage%252Fresize%252Cw_393%22%2C%22originWidth%22%3A393%2C%22originHeight%22%3A356%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A393%2C%22height%22%3A356%7D&quot;&gt;&lt;img data-height=&quot;356px&quot; data-ratio=&quot;0.905852417302799&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWhibkianP1L0XuU3YMPDFadv2NhfricMLbTomLeMmbiauI0iclRTuXOQvlrzZ2YthMoO2wibvicKObN3pcicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;393&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d0cc602163dad07faf2a1f50da631261&quot;&gt;目前业内比较常见的方案，有如下两种：&lt;/p&gt;&lt;p data-lake-id=&quot;402a1be08fde5b3f981793fc368b3a8d&quot;&gt;&lt;span&gt;1）中间件改造+流量标透传（业务侵入较多）；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;76ce4682d706bbccd228e529b171d185&quot;&gt;&lt;span&gt;2）agent+字节码增强技术（业务侵入较低）；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4736fa45fa6e8689f1de2b89fd5b97f9&quot;&gt;&lt;span&gt;这两种方案的选型，需要基于研发团队的整体技术栈以及业务迭代情况等因素综合考虑。比如我司，采用的是第一种方案。基础架构团队基于spring cloud全家桶二次开发了一套全链路压测框架的脚手架，由业务研发团队接入。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;c97eae40e02249ba19fbe1b482a3b4f9&quot;&gt;&lt;span&gt;资源隔离&lt;/span&gt;&lt;/h4&gt;&lt;p data-lake-id=&quot;f6dcc72f016cce3ee3fceb992703f803&quot;&gt;&lt;span&gt;资源隔离主要指的服务器、Redis、MQ、DB等资源。一般来讲大部分企业的业务都是白天流量较高，凌晨是流量低谷。在流量低谷期，直接压测生产的服务，风险相对较小且可控。如果生产服务稳定性较好，且能做到按比例资源隔离以及压测流量识别透传，那么第二种方案反而可以考虑。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b88acb68419ce0ff36ca4f2114e5a5e8&quot;&gt;&lt;span&gt;且如果要采用资源隔离方案，那么核心链路梳理和区分工作是必须要做的。&lt;/span&gt;区分核心和非核心业务，核心业务分级（P0/P1/P2），由小及大的不断覆盖。&lt;/p&gt;&lt;h4 data-lake-id=&quot;10096c1507c9192762efcf9ad4d96778&quot;&gt;数据隔离&lt;/h4&gt;&lt;p data-lake-id=&quot;ee47fde1206f1be4293e21d3b86f0361&quot;&gt;压测会产生大量的数据，这些数据如何处理是DBA团队面临的最大挑战。目前来说，业内比较通用的方式都是采用影子库表或者压测数据带特殊标识进入生产业务库表，以tag或者特殊字段做区分。他们的区别如下：&lt;/p&gt;&lt;p data-lake-id=&quot;af7898a2d7be756dfc9306c3a3e42750&quot;&gt;1）影子库+影子表：一般生产库和影子库都是在同一个DB实例上，基础数据会脱敏后同步过去；&lt;/p&gt;&lt;p data-lake-id=&quot;45a9c781a6ffcc7996e3e86cfdda59bb&quot;&gt;2）生产业务表标识：在生产业务表中新增压测标识字段，压测数据需要定时清理（饿了么采用这套方案）；&lt;/p&gt;&lt;p data-lake-id=&quot;df73d8ed1d9839521ab8979a7d341188&quot;&gt;我司采用的方案如下：&lt;/p&gt;&lt;p data-lake-id=&quot;17c454622e1a28daf7249dac06a02b02&quot;&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;DB路由：①.同instance不同schema（风险大）；②.不同instance同schema（安全性高，成本高）；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a0eac40d3e12fcaec6f37208780e283d&quot;&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;Redis路由：①.key值加统一前缀；②.Redis-client做路由；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a9c7bdc9561fd3499ba699a197990618&quot;&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;MQ路由：采用影子topic模式，带压测标识的数据进入影子topic；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3875dc4980542fb1d579b98fbc80021a&quot;&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;ES路由：①.index统一加前缀，提供统一ES client做数据访问，由client做路由；&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;54928b5dea5f4703860f2d97074af0c4&quot;&gt;日志隔离&lt;/h4&gt;&lt;p data-lake-id=&quot;d25ec6af84f035c6ac6f79336f02a61e&quot;&gt;压测会产生大量日志，为了便于正常的业务问题跟进排查和压测区分，个人建议还是对带压测标的日志进行前缀处理，这样运维同学也可以快速的清理，以免磁盘写满导致生产故障。&lt;/p&gt;&lt;p data-lake-id=&quot;514812cfced1474216aa9368c70aae36&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;131f73aa942dc3b08a9d00f687fa679c&quot;&gt;改造工作&lt;/h3&gt;&lt;h4 data-lake-id=&quot;5e77b0041acff837d5acf41428417d41&quot;&gt;监控平台&lt;/h4&gt;&lt;p data-lake-id=&quot;1fa47b1aa8ade8e82e92ddf32d6d0fe4&quot;&gt;监控系统需要透明化，且压测监控大盘和业务监控大盘需要单独配置。其中有如下的点需要注意：&lt;/p&gt;&lt;p data-lake-id=&quot;486b52a2d4817f725decdaecbfe1dbcf&quot;&gt;1）设定告警阈值、告警降噪、专项业务告警；&lt;/p&gt;&lt;p data-lake-id=&quot;3bfdcd6e6e2ff184ffee53fede2aa7ca&quot;&gt;2）专项告警，需要覆盖核心接口、监控大盘、业务大盘；&lt;/p&gt;&lt;p data-lake-id=&quot;8a4d9bd4686f9f8d38d8bc355b36af4f&quot;&gt;3）优点：问题快速定位，避免不透明影响问题的发现和修复速率；&lt;/p&gt;&lt;p data-lake-id=&quot;6773f4a499f4c2b8ddf9c68fd53324a2&quot;&gt;4）容量规划：借助监控平台的赋能，快速梳理清楚系统架构、拓扑关系，才便于做容量规划；&lt;/p&gt;&lt;h4 data-lake-id=&quot;5162277a6f19d325ab2b1521e6456d40&quot;&gt;流控平台&lt;/h4&gt;&lt;p data-lake-id=&quot;c01b65ba4892698c550159d6806a90fe&quot;&gt;流量发起和服务保护功能是全链路压测成功开展的必要前提。服务保护方面，业内常用的组件有Sentinel、&lt;span&gt;Hystrix，他们一般都是基于线程池/信号量来进行流控。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;e1aa20f88eb980fff6124240a4c792fc&quot;&gt;预案平台&lt;/h4&gt;&lt;p data-lake-id=&quot;4ce60d9900ce84e6ea157195a427fa28&quot;&gt;常说大促时候，&lt;span&gt;&lt;strong&gt;服务稳定性有三大利器：限流、熔断和降级&lt;/strong&gt;&lt;/span&gt;。前面介绍了流控（限流和熔断），那么降级是什么呢？按照我个人的经验，降级预案一般分为主动降级和紧急降级。&lt;/p&gt;&lt;p data-lake-id=&quot;eceaba0663bd37a26cb48dc6af0ec683&quot;&gt;&lt;span&gt;主动降级：&lt;/span&gt;&lt;span&gt;商品首页缓存&amp;amp;数据兜底、小红点、客户端限流浮层、重试机制等；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fc5e91146faec1616f99bc2e0515153a&quot;&gt;&lt;span&gt;紧急降级：收货地址、浮动费率、运费计算、运营位固定等方案；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;faf3dc3340ea98bca583e04bda830997&quot;&gt;当然，无论是主动降级方案还是紧急降级方案，都是需要进行业务梳理和细化拆分的，还要和产品运营等团队的同学提前沟通好，避免跨团队沟通的Gap产生。&lt;/p&gt;&lt;p data-lake-id=&quot;e9e2d6f1610867a69cfad3d95b690c95&quot;&gt;还有些前置事项，比如业务拆分（订单拆分为正逆向），比如不同业务服务集群隔离，比如DB垂直拆分、读写分离、分库分表等方案，这些都是需要考虑的。&lt;/p&gt;&lt;p data-lake-id=&quot;8b756240b268d01aed2fbd4a88dccd16&quot;&gt;至于异地多活、故障演练、灾备演练，这些更需要成熟的技术体系建设和多方达成一致，才能更好的保障生产服务的稳定性。总的来说，全链路压测除了技术，更多的还需要沟通与协调。&lt;/p&gt;&lt;p data-lake-id=&quot;73f58d2b947dfd0e72333969cf20a0ed&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;99e49d9995be7ae649e2642e44655e4c&quot;&gt;压测实施&lt;/h3&gt;&lt;p data-lake-id=&quot;c423c10ff6701671917a0227171f67aa&quot;&gt;到了压测实施阶段，基本就只能硬着头皮硬上了，特别是第一次搞生产全链路压测，至今记忆深刻。生产全链路压测，需要注意以下几点：&lt;/p&gt;&lt;h4 data-lake-id=&quot;fd53c36ff22980132e20b8d76b8da2bd&quot;&gt;服务扩容&lt;/h4&gt;&lt;p data-lake-id=&quot;85bed012ef29d1740fbb05020b010558&quot;&gt;需要注意的是，在生产开始压测前，系统需要进行前置扩容，避免资源不足导致整体容量瓶颈。还需要注意的是，在大促峰值流量来临时，尽可能不要去执行扩容操作。&lt;/p&gt;&lt;h4 data-lake-id=&quot;15bbd5188a04c36b84847a924ed8875e&quot;&gt;压测方式&lt;/h4&gt;&lt;p data-lake-id=&quot;65c293c2c4194d9cfa1aa9f33e1773a9&quot;&gt;至于压测执行方式，业内能玩的基本就是这几种方式。当然，压测前的预热，是必不可少的。压测执行方式方面，主要有如下几项：&lt;/p&gt;&lt;p data-lake-id=&quot;0af6f405ba59b319bf7b49eacfff72ac&quot;&gt;1）阶梯递增：这种方式的目的在于不断递增流量，找到系统的性能拐点；&lt;/p&gt;&lt;p data-lake-id=&quot;463e5beee990d8e93add2841efd8de20&quot;&gt;&lt;span&gt;2）峰值脉冲：有些特殊场景，需要区分流量是逐渐变大，还是骤升后保持高峰；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0f42326494cab53e96ded0c27e49b95d&quot;&gt;&lt;span&gt;3）系统摸高：关闭熔断降级限流等fallback功能，提高压测流量观察系统性能转折点；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b3409ccbbcd8876151961b6d4aba0101&quot;&gt;&lt;span&gt;4）预案验证：开启熔断限流等fallback功能，功能是否生效，系统是否能扛得住；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;680387bd9281b601faed21dc4ef9686f&quot;&gt;&lt;span&gt;5）破坏性测试：主要为了验证预案的有效性，类似于容灾演练时的预案执行演练，验证后手抢救方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0da0da908162d789d46b61fe0397ad2e&quot;&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;执行第4/5项时，建议进行生产业务的功能正确性验证！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;6340fb24203ab32af8645390d824cc5b&quot;&gt;预案评审&lt;/h4&gt;&lt;p data-lake-id=&quot;1338a996387836e403e3791a8d4b15ed&quot;&gt;在预案评审和演练阶段，&lt;span&gt;进行预案演练的目的主要有如下几项：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6dff38b511552f554371ad2f6558ae9c&quot;&gt;&lt;span&gt;1）验证预案是否生效；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;59cac47df38502597bc62b86de388771&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;针对预案设定阈值进行测试调优；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;40062e05537c563804d517da8a629573&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;验证预案生效时服务本身的性能表现；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a5f2918aa59d0f82d39e7864457e1bd7&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;针对上述专项场景进行实战演练；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3f9a22af2c16836b2cd4152de512d64e&quot;&gt;建议：按照我个人的实施经验，建议输出对应的&lt;span&gt;&lt;strong&gt;全链路压测SOP&amp;amp;大促作战SOP&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;dd6557f03d102792ade6140cf4cd019f&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;7501e1f503283b232e61930677cadcb6&quot;&gt;管理&lt;/h2&gt;&lt;p data-lake-id=&quot;b9707999b240fff864f291d1d1430761&quot;&gt;前面关于全链路压测的观点，已经提到了：&lt;strong&gt;&lt;span&gt;生产全链路压测，表面是一个技术工程，实际上是一个很有难度的组织协调项目&lt;/span&gt;&lt;/strong&gt;。从管理的角度出发，下面三项是管理者或者项目推动者应该高度重视的。&lt;/p&gt;&lt;h3 data-lake-id=&quot;1fccac66bcb0923cdf1c27cf83e3976f&quot;&gt;目标&lt;/h3&gt;&lt;p data-lake-id=&quot;d2326b3bc7fc76ae3d932f3464d669ef&quot;&gt;大家应该都了解SMART体系，在考虑实施全链路压测时候，下面几点SMART目标，也是需要重点考虑的。&lt;/p&gt;&lt;p data-lake-id=&quot;2aaaac5066eba255e57ed3d3369af33f&quot;&gt;目标与标准：&lt;span&gt;SMART5大元素&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8035d2af8817d8cea70edef135c6d0e8&quot;&gt;&lt;span&gt;1）目标必须是具体的（Specific）——业务指标、技术指标、容量指标等；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;588dd4b53b37a9b6c9f0799c5d8df4d1&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;目标必须是可以衡量的（Measurable）——从不同的维度和数据来评估；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e936beb0f06fad9b053aadd8b0617357&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;目标必须是可以达到的（Attainable）——不要设定过高的脱离现实的目标；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4eaa26474ef42fb3c5587a249e52da79&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;目标必须和其他目标具在相关性（Relevant）——对业务以及技术团队有什么价值；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eb355c792e159dd84d681bbb87ced75f&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;目标必须说明明确的截止期限（Time-based）——根据日期和任务资源倒排期，保障项目成功；&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;19d1af4111efc68f42e094c209c590f6&quot;&gt;流程&lt;/h3&gt;&lt;p data-lake-id=&quot;fb027926ac15a5a214667fbec9975137&quot;&gt;总结一下，生产全链路压测这个技术项目，可以用三个维度和五个阶段来概括。&lt;/p&gt;&lt;p data-lake-id=&quot;57d810199b71fdd361ea69ec58b5757d&quot;&gt;&lt;span&gt;五个阶段：准备阶段、执行阶段、故障修复、项目复盘、项目结项；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;211e4e81026fffb77ddb8dedde1f6a41&quot;&gt;&lt;span&gt;三个维度：做什么、风险如何处理、事项review（保持信息同步）。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;0e39027c4e5e775fcac7e28784a802fe&quot;&gt;组织&lt;/h3&gt;&lt;p data-lake-id=&quot;8026aed23cf095a04d2c968b69f996b1&quot;&gt;日常工作中，我们一般有版本迭代的常规需求以及一些特殊的独立项目。非业务或者弱业务的事情，可以通过虚拟的组织架构来明确定义不同岗位的职责，避免混乱。&lt;/p&gt;&lt;p data-lake-id=&quot;3ad15a71192b6ddc67b3b71391a8cfda&quot;&gt;一般来说，生产全链路压测中，虚拟的组织架构一般有如下几种角色：&lt;/p&gt;&lt;p data-lake-id=&quot;295371332b545231adcaa691109d039d&quot;&gt;&lt;strong&gt;Sponsor&lt;/strong&gt;：发起&amp;amp;组织人；&lt;/p&gt;&lt;p data-lake-id=&quot;5a866bba722601a687da64eb79d019e0&quot;&gt;&lt;strong&gt;PMO&lt;/strong&gt;：项目管理、项目经理；&lt;/p&gt;&lt;p data-lake-id=&quot;246a7a2a3b6296da214c65938f9c3436&quot;&gt;&lt;strong&gt;Principal&lt;/strong&gt;：（主）负责人；&lt;/p&gt;&lt;p data-lake-id=&quot;12575340f22ebf4787849ae504be627c&quot;&gt;&lt;strong&gt;Owner&lt;/strong&gt;：业务&amp;amp;技术某一领域负责人（领头人）；&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F403166%2F1609948145179-7fdd66c6-1861-44b8-afec-f2e92c3d3165.png%22%2C%22originWidth%22%3A1215%2C%22originHeight%22%3A604%2C%22name%22%3A%22image.png%22%2C%22size%22%3A50274%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A546.4833%2C%22y%22%3A37.119183%2C%22width%22%3A44.41489999999999%2C%22height%22%3A10.977397000000003%2C%22text%22%3A%22Sponsor%22%7D%2C%7B%22x%22%3A288.62155%2C%22y%22%3A147.60716%2C%22width%22%3A30.12518%2C%22height%22%3A12.399609999999996%2C%22text%22%3A%22PMO%22%7D%2C%7B%22x%22%3A793.0449%2C%22y%22%3A149.97823%2C%22width%22%3A52.24739999999997%2C%22height%22%3A12.990890000000007%2C%22text%22%3A%22Principal%22%7D%2C%7B%22x%22%3A740.3989%2C%22y%22%3A259.8063%2C%22width%22%3A78.79147%2C%22height%22%3A17.52127999999999%2C%22text%22%3A%22%E7%A8%B3%E5%AE%9A%E6%80%A7Qwner%22%7D%2C%7B%22x%22%3A117.51802%2C%22y%22%3A267.55008%2C%22width%22%3A63.40192999999999%2C%22height%22%3A14.087280000000021%2C%22text%22%3A%22%E4%B8%9A%E5%8A%A1OwwneR%22%7D%2C%7B%22x%22%3A967.79346%2C%22y%22%3A339.94635%2C%22width%22%3A30.484370000000013%2C%22height%22%3A16.756070000000022%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%22%7D%2C%7B%22x%22%3A414.16998%2C%22y%22%3A340.04984%2C%22width%22%3A29.307469999999967%2C%22height%22%3A16.006129999999985%2C%22text%22%3A%22%E8%90%A5%E9%94%80%22%7D%2C%7B%22x%22%3A210.07838%2C%22y%22%3A340.4989%2C%22width%22%3A28.711669999999998%2C%22height%22%3A16.677999999999997%2C%22text%22%3A%22%E5%A2%9E%E9%95%BF%22%7D%2C%7B%22x%22%3A602.7969%2C%22y%22%3A340.67%2C%22width%22%3A53.41679999999997%2C%22height%22%3A16.40440000000001%2C%22text%22%3A%22%E8%AE%A2%E5%8D%95%E6%AD%A3%E5%90%91%22%7D%2C%7B%22x%22%3A803.1633%2C%22y%22%3A341.0729%2C%22width%22%3A27.122099999999932%2C%22height%22%3A14.694219999999973%2C%22text%22%3A%22%E5%8E%8B%E6%B5%8B%22%7D%2C%7B%22x%22%3A1136.0544%2C%22y%22%3A341.1849%2C%22width%22%3A27.876999999999953%2C%22height%22%3A14.889599999999973%2C%22text%22%3A%22%E9%99%90%E6%B5%81%22%7D%2C%7B%22x%22%3A52.93727%2C%22y%22%3A341.9291%2C%22width%22%3A28.679450000000003%2C%22height%22%3A15.775759999999991%2C%22text%22%3A%22%E8%90%A5%E9%94%80%22%7D%2C%7B%22x%22%3A413.0557%2C%22y%22%3A400.00604%2C%22width%22%3A29.69240000000002%2C%22height%22%3A16.981629999999996%2C%22text%22%3A%22%E5%A2%9E%E9%95%BF%22%7D%2C%7B%22x%22%3A804.07733%2C%22y%22%3A400.63562%2C%22width%22%3A27.862610000000018%2C%22height%22%3A15.288419999999974%2C%22text%22%3A%22%E7%BD%91%E5%85%B3%22%7D%2C%7B%22x%22%3A971.2611%2C%22y%22%3A400.97818%2C%22width%22%3A29.257999999999925%2C%22height%22%3A15.545379999999966%2C%22text%22%3A%22%E9%A3%8E%E6%8E%A7%22%7D%2C%7B%22x%22%3A603.2167%2C%22y%22%3A401.2381%2C%22width%22%3A52.699800000000096%2C%22height%22%3A15.062280000000044%2C%22text%22%3A%22%E8%AE%A2%E5%8D%95%E9%80%86%E5%90%91%22%7D%2C%7B%22x%22%3A1133.8527%2C%22y%22%3A401.40424%2C%22width%22%3A27.22090000000003%2C%22height%22%3A15.403930000000003%2C%22text%22%3A%22%E8%BF%90%E7%BB%B4%22%7D%2C%7B%22x%22%3A410.14447%2C%22y%22%3A455.8876%2C%22width%22%3A31.472109999999986%2C%22height%22%3A18.77157999999997%2C%22text%22%3A%22%E7%AE%97%E6%B3%95%22%7D%2C%7B%22x%22%3A791.26434%2C%22y%22%3A456.73605%2C%22width%22%3A52.91386%2C%22height%22%3A16.38480000000004%2C%22text%22%3A%22%E5%8E%8B%E6%B5%8B%E5%B9%B3%E5%8F%B0%22%7D%2C%7B%22x%22%3A969.4534%2C%22y%22%3A457.52344%2C%22width%22%3A28.154449999999997%2C%22height%22%3A16.136779999999987%2C%22text%22%3A%22%E5%95%86%E5%AE%B6%22%7D%2C%7B%22x%22%3A614.6523%2C%22y%22%3A459.07288%2C%22width%22%3A30.596200000000067%2C%22height%22%3A14.325249999999983%2C%22text%22%3A%22%E5%BA%93%E5%AD%98%22%7D%2C%7B%22x%22%3A1136.8389%2C%22y%22%3A459.5121%2C%22width%22%3A25.907899999999927%2C%22height%22%3A12.251330000000053%2C%22text%22%3A%22DBA%22%7D%2C%7B%22x%22%3A1133.3245%2C%22y%22%3A512.8176%2C%22width%22%3A28.738900000000058%2C%22height%22%3A15.723100000000045%2C%22text%22%3A%22%E7%9F%AD%E4%BF%A1%22%7D%2C%7B%22x%22%3A412.26328%2C%22y%22%3A513.1895%2C%22width%22%3A28.781090000000006%2C%22height%22%3A15.057500000000005%2C%22text%22%3A%22%E5%95%86%E5%93%81%22%7D%2C%7B%22x%22%3A613.5539%2C%22y%22%3A513.554%2C%22width%22%3A32.18690000000004%2C%22height%22%3A16.858839999999987%2C%22text%22%3A%22%E6%94%AF%E4%BB%98%22%7D%2C%7B%22x%22%3A790.3622%2C%22y%22%3A514.3902%2C%22width%22%3A55.41139999999996%2C%22height%22%3A15.337769999999978%2C%22text%22%3A%22%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%22%7D%2C%7B%22x%22%3A963.42017%2C%22y%22%3A514.4765%2C%22width%22%3A41.871579999999994%2C%22height%22%3A14.820900000000051%2C%22text%22%3A%22%E4%BE%9B%E5%BA%94%E9%93%BE%22%7D%2C%7B%22x%22%3A398.88864%2C%22y%22%3A569.3839%2C%22width%22%3A55.270159999999976%2C%22height%22%3A16.215649999999982%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B1%8F%22%7D%2C%7B%22x%22%3A1119.3054%2C%22y%22%3A569.9847%2C%22width%22%3A54.29510000000005%2C%22height%22%3A15.262699999999995%2C%22text%22%3A%22%E5%8F%91%E5%B8%83%E5%B9%B3%E5%8F%B0%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Sponsor%20PMO%20Principal%20%E7%A8%B3%E5%AE%9A%E6%80%A7Qwner%20%E4%B8%9A%E5%8A%A1OwwneR%20%E7%94%A8%E6%88%B7%20%E8%90%A5%E9%94%80%20%E5%A2%9E%E9%95%BF%20%E8%AE%A2%E5%8D%95%E6%AD%A3%E5%90%91%20%E5%8E%8B%E6%B5%8B%20%E9%99%90%E6%B5%81%20%E8%90%A5%E9%94%80%20%E5%A2%9E%E9%95%BF%20%E7%BD%91%E5%85%B3%20%E9%A3%8E%E6%8E%A7%20%E8%AE%A2%E5%8D%95%E9%80%86%E5%90%91%20%E8%BF%90%E7%BB%B4%20%E7%AE%97%E6%B3%95%20%E5%8E%8B%E6%B5%8B%E5%B9%B3%E5%8F%B0%20%E5%95%86%E5%AE%B6%20%E5%BA%93%E5%AD%98%20DBA%20%E7%9F%AD%E4%BF%A1%20%E5%95%86%E5%93%81%20%E6%94%AF%E4%BB%98%20%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%20%E4%BE%9B%E5%BA%94%E9%93%BE%20%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B1%8F%20%E5%8F%91%E5%B8%83%E5%B9%B3%E5%8F%B0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1215%2C%22height%22%3A604%7D&quot;&gt;&lt;img data-height=&quot;604px&quot; data-ratio=&quot;0.497119341563786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWhibkianP1L0XuU3YMPDFadv2HQNRv2b2A1a2fiauHmIBon18jXQicHj8XaNBPfm5pXiagttOLxjFM3XKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1215&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d876b32119305b53be2629073d3dd13b&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;850cbb19abea5e628d88783209812527&quot;&gt;价值&lt;/h2&gt;&lt;p data-lake-id=&quot;25a6415a6b8c82cb6e64ed69e5244cb4&quot;&gt;最开始我司推动实施全链路压测时，我画了下面这张图，用来体现全链路压测的价值：&lt;/p&gt;&lt;p data-lake-id=&quot;e072a3d798b3600678747d55d40c7acc&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F403166%2F1574164370117-f138ac80-f5a6-4bb9-a864-b0f6df978985.png%22%2C%22originWidth%22%3A517%2C%22originHeight%22%3A367%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A517%2C%22height%22%3A367%7D&quot;&gt;&lt;img data-height=&quot;367px&quot; data-ratio=&quot;0.7098646034816247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ftksfIbzTWhibkianP1L0XuU3YMPDFadv2d2Nwa6iaZcQUHdp8M5Q50v1DibOEndLVwp2Uk22GqoRQDZS2cqIW6RGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8b96d489368459badc6e87f433e9f4d7&quot;&gt;从我个人角度来说，全链路压测的最大价值在于：&lt;/p&gt;&lt;p data-lake-id=&quot;f87742b7dfc2917c635d8c24ba088faa&quot;&gt;&lt;span&gt;1）成本：降低环境成本，人力成本（不断实践，投入的人力越来越少）；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f62f90a8727c1fafd3fc89156faa9f6a&quot;&gt;&lt;span&gt;2）问题：提前发现大流量下系统潜在的隐患，提升系统稳定性；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9c4a395f6b995a8229c57a18f91f3ad8&quot;&gt;&lt;span&gt;3）容量：提升性能，识别短板，机器配比有了明确的数值，避免不必要的冗余；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fb56307692b0f17854fbb0a6e8eabdb6&quot;&gt;&lt;span&gt;4）限流：倒逼各个服务&amp;amp;系统进行限流降级等服务稳定性保障措施，预案验证演练；&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e8ebd827351e0740c48068262479683f&quot;&gt;&lt;span&gt;5）ROI：降低沟通成本，团队练兵协调组织能力提升，形成自己的一些技术规范和手册；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>