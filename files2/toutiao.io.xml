<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cfcbb000f0ec1b7047f68bdb3e9557c6</guid>
<title>说透分布式事务</title>
<link>https://toutiao.io/k/kx3ajgy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483696&amp;amp;idx=1&amp;amp;sn=071cb785dc5f01e53397f3995f88a5d3&amp;amp;chksm=fafdeb9ecd8a628873e20dfd813280e1e3d6bda86907de6772bf8a0a9f7e06250a5073034373&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《分布式事务：从刚性事务到柔性事务》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《分布式事务：从刚性事务到柔性事务》&lt;/a&gt;中，讲过分布式事务。晚上打开微信发现咱们【编程一生】用户群里又讨论起来了。觉得有必要再讲一遍。想加入一起讨论的，可以加我微信&lt;strong&gt;&lt;span&gt; brmayi&lt;/span&gt;&lt;/strong&gt; 注明【入群】。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分布式事务的本质&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;事务起源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事务本意就是要处理的事情。计算机中引入了这个词用来表示要处理事情的单元。单元是不可再分的，在数据库中就把这种不可再分给出了明确的特性定义，就是ACID原则。为了和分布式系统中的事务做区分，又叫刚性事务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ACID原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）&lt;/p&gt;&lt;p&gt;事务必须要么全都执行，要么全都不执行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistency):&lt;/p&gt;&lt;p&gt;保证数据的完整性。事务必须使数据库从一个一致性状态变换到另外一个一致性状态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）&lt;/p&gt;&lt;p&gt;一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durability）:&lt;br/&gt;一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响,该修改即使出现系统故障也将一直保持。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5796178343949044&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9qLxe0sQJapy2UicYLuOMVSMnWqont8opMn4oMOPMf5AYPLHZqQBDEcYWB17qJUfgglP8yGphz3Bg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;471&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;什么事儿都有个程度。人和人之间的认知是不一样的。举个真实的例子：有次我带儿子去参加公司的轰趴。大家在玩三国杀，我不会。我只是象征性的问我儿子会不会。他斩钉截铁的说会。我明知道他的水平还是让他试了试。结果十几个同事和我儿子展开了异常艰难的对决。这个对决让我充分意识到吃饭时我发的200元红包发少了，太对不起大家了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;儿子的会，连我这个不会的人都开出来他分不清敌我。我们同事们高风亮节，让这么一个人在三国沙场上活到了最后。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;回到事务的ACID特性。事务隔离性有四个级别。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485279&amp;amp;idx=1&amp;amp;sn=49ce5a8c586979388a1828686a6cbd21&amp;amp;chksm=fafdedf1cd8a64e7d95b948cd60135db1618e71c3307d405e9b3c27c5fddedeaf1b1b5f00c4b&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《MySQL常见6个考题在实际工作中的运用》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《MySQL常见6个考题在实际工作中的运用》&lt;/a&gt;中有介绍，这里不赘述。重点讲一致性的三个级别。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;数据一致性三个级别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;强一致性（Strict Consistency）&lt;/h3&gt;&lt;p&gt;也称为：&lt;strong&gt;原子一致性（Atomic Consistency）&lt;/strong&gt;&lt;strong&gt;线性一致性（Linearizable Consistency）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;强一致性有两个要求：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;顺序一致性（Sequential Consistency）&lt;/h3&gt;&lt;p&gt;有两个要求：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;弱一致性&lt;/h3&gt;&lt;p&gt;数据更新后，如果能容忍后续的访问只能访问到部分或者全部访问不到，则是弱一致性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其实每个级别都还可以细分。这里只讲一种和今天主题相关的：最终一致性。它属于弱一致性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;最终一致性&lt;/h4&gt;&lt;p&gt;不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。&lt;/p&gt;&lt;p&gt;简单说，就是在一段时间后，节点间的数据会最终达到一致状态。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在数据库事务定义ACID的时候，没有想那么多。其实数据库事务中的一致性是强一致。但是强一致到了分布式系统中就遇到了困难。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;CAP定理&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CAP定理是由加州大学伯克利分校Eric Brewer教授提出来的，他指出WEB服务无法同时满足下面3个属性：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;一致性(Consistency) ：客户端知道一系列的操作都会同时发生(生效)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可用性(Availability) ：每个操作都必须以可预期的响应结束&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区容错性(Partition tolerance) ：即使出现单个组件无法可用,操作依然可以完成&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8477611940298507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9qLxe0sQJapy2UicYLuOMVSRG7sicAx0ibQf7AMcLdicicH1TD92B7nHI4nCgWcYCgtnITsiakMLe8WFkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;670&quot;/&gt;&lt;/p&gt;&lt;p&gt;在分布式系统中，一个Web应用至多只能同时支持上面的两个属性。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;孔子曾经曰过：没有100分的爱人，只有50分的两个人的共同努力。那聪明的工程师就想了：一个WEB应用至多能支持两个属性达到100分，也就是200分。那我能不能让三个属性都支持到60分。3*60分=180分。200分是上限的话，还可以根据应用自身的需求决定把剩余20分应用到哪方面的提交。这三个60分是什么标准呢？这就是BASE理论。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;BASE理论&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9263322884012539&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicrcx7fdx1JicgmHK8H1SSnMJMvDTFl6LfRLny9ZLuZBVOL0o67JFD1m2iae4eXVH3mzcTcbAj6aNDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;638&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;BASE理论和分布式事务到底有什么关系呢？我搜索了一下，发现没有一篇文章真正把它们的关系说明白。网上的东西给我感觉：它们觉得有关系，又不明白关系到底是啥。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分布式事务与BASE理论的关系&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然是事务要遵循的是ACID特性。分布式系统与单机在隔离性和持久性上没有明显的差异。所以重点关注的是原子性和一致性。原子性是说要么全做，要么全都不做，这样数据就是一致的。所以原子性是因，根本要保证的数据一致性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以实际工作中，我很少听到谈论具体问题的时候用分布式事务这个概念，更多的是说数据一致性。我之前写的&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484990&amp;amp;idx=1&amp;amp;sn=8dc1444160af4be808f8cdbd21e6c28b&amp;amp;chksm=fafdec90cd8a65862023d129a095a286209efefcf699b28351b65128df3aa7e2c2d009ff0aa0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《数据一致性-对账》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《数据一致性-对账》&lt;/a&gt;这篇文章里提到了好几种分布式事务常用的手段，但是我没有说分布式事务这个词。工作中用这个词，具体解决的问题不明确，不建议用，建议把具体要解决的问题想清楚。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然解决的问题是数据一致性问题，web服务不能不考虑可用性，单纯只保证一致性，所以就要考虑BASE理论了。觉得我没讲清楚的扣圆周率小数点后四位。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你真的需要分布式事务吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;既然分布式事务根本上解决的是分布式数据一致性问题，在大多数问题上使用seata等框架太重了。咱们平时有很多简单有效的方法一直在用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如支付交易中，有典型的补偿型数据一致性保障：发起一笔支付没有收到响应，可以使用补偿查询作为第一层数据一致性保障；查询半小时还是查不回来，就关单操作，该冲正的冲正(取消交易，已付款退回账户中)，这是第二层数据一致性保障；清结算之前还要对账(做核对校验，对不上人工处理)，这是第三层数据一致性保障。在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484200&amp;amp;idx=1&amp;amp;sn=4ae0df004f968bb785c15d53270a5800&amp;amp;chksm=fafde986cd8a609057f4d5737ebcfce6b768f263636b9f9faf90bf30164027dd1e1014c7abce&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《程序常用的设计技巧》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《程序常用的设计技巧》&lt;/a&gt;里我也提过其他的补偿性方案。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看问题还是要从本质问题出发，最好不要引入额外的概念引起歧义。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c77debcfd8ac0e4e758e3c88a47f620b</guid>
<title>Python监控小姐姐/小哥哥微博，了解一下？</title>
<link>https://toutiao.io/k/ag0wyrr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;实现微博监控&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;步骤一：获取被监控微博用户发布的所有微博&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经抓包分析与实际测试，获取被监控微博用户发布的所有微博流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;① 获取第一个containerid&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;登录状态的session请求用户主页后通过正则表达式从session的cookies中提取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;② 获取第二个containerid&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;利用第一个containerid、user_id请求：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://m.weibo.cn/api/container/getIndex?uid={}&amp;amp;luicode=10000011&amp;amp;lfid=231093_-_selffollowed&amp;amp;type=uid&amp;amp;value={}&amp;amp;containerid={}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即可获取第二个containerid。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;③ 获取被监控微博用户发布的所有微博数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;利用第二个containerid、user_id请求：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://m.weibo.cn/api/container/getIndex?uid={}&amp;amp;luicode=10000011&amp;amp;lfid=231093_-_selffollowed&amp;amp;type=uid&amp;amp;value={}&amp;amp;containerid={}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即可获取被监控微博用户发布的所有微博数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;步骤二：实时监控&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不断重复步骤一，获取被监控微博用户发布的所有微博，将获取的数据与上一次获取的被监控微博用户发布的所有微博数据进行对比，若有新的数据，则代表被监控微博用户发布了新的微博。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体代码实现如下：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f74b46905fbc129a830cd5f0b78c15c0</guid>
<title>Vuex 更好的替代品 Pinia，真香</title>
<link>https://toutiao.io/k/2z7w7on</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pinia&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pinia 目前已经是 vue 官方正式的状态库。适用于 vue2 和 vue3，本文只描述vue3的写法。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5659411011523687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/bwG40XYiaOKkibbOM2g62O2DEqia9f57cO9eZibRy76ibGqkArvewLeibn4icVTE8hq3UHia40dEKVgFH5T8IWtaibLEgPw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;781&quot; src=&quot;&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;pinia 的优势&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相对于以前的 vuex，pinia具有以下优势&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;更简单的写法，代码更清晰简洁，支持 &lt;code&gt;composition api&lt;/code&gt; 和 &lt;code&gt;options api&lt;/code&gt; 语法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;更完善的 typescript 支持，无需创建自定义复杂的包装类型来支持 TypeScript，所有内容都是类型化的，并且 API 的设计方式尽可能利用 TS 类型推断&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;非常轻量，只有1kb的大小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不需要再注入魔法字符串等进行调用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;yarn add pinia&lt;br/&gt;&lt;span&gt;// or&lt;/span&gt;&lt;br/&gt;npm install pinia&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义、使用store&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个 pinia 并传递给 vue 应用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { createPinia } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { createApp } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; vue &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; App &lt;span&gt;from&lt;/span&gt; &lt;span&gt; ./app.vue &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;createApp(App).use(createPinia()).mount(&lt;span&gt; #app &lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义store&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;store的定义是通过 defineStore 这个函数，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它需要一个唯一的名称，该名称可以作为第一个参数传递，也可以用 id 熟悉传递。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { defineStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;  &lt;span&gt;// other options...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { defineStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; useMainStore = defineStore({&lt;br/&gt;  id: &lt;span&gt; main &lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// other options...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该 id 是必要的，主要是用于 vue devtools&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用store&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { useMainStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/stores/main &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;  setup() {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; store = useMainStore()&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;      store,&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码中，useMainStore实例化后的，我们就可以在 store 上访问 state、getters、actions 等（pinia中没有mutations）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该 store 是一个 reactive 对象，所以不需要 “.value”，也不能对其进行解构使用，否则失去响应性（类似 props）。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;storeToRefs&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一定要对其进行解构使用，可以使用 storeToRefs ，类似 vue3 中的 &lt;code&gt;toRefs&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { storeToRefs } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;  setup() {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; store = useMainStore()&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { user, company } = storeToRefs(store)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;      user, &lt;br/&gt;      company&lt;br/&gt;    }&lt;br/&gt;  },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;state&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义state&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 pinia 中，定义 state 是在函数中返回 state 初始状态&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { defineStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;    state: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({&lt;br/&gt;        teacherName: &lt;span&gt; 艾伦 &lt;/span&gt;,&lt;br/&gt;        userList: [&lt;br/&gt;            { name: &lt;span&gt; 小明 &lt;/span&gt;, age: &lt;span&gt;18&lt;/span&gt; },&lt;br/&gt;            { name: &lt;span&gt; 小李 &lt;/span&gt;, age: &lt;span&gt;15&lt;/span&gt; },&lt;br/&gt;            { name: &lt;span&gt; 小白 &lt;/span&gt;, age: &lt;span&gt;16&lt;/span&gt; },&lt;br/&gt;        ],&lt;br/&gt;    }),&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useMainStore&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;访问state&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过store 实例直接访问&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; teacherName = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; mainStore.teacherName)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; userList = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; mainStore.userList)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;            teacherName,&lt;br/&gt;            userList,&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以直接修改状态&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;change&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;            mainStore.teacherName = &lt;span&gt; 米利 &lt;/span&gt;&lt;br/&gt;            mainStore.userList.push({&lt;br/&gt;                name: &lt;span&gt; 小琪 &lt;/span&gt;,&lt;br/&gt;                age: &lt;span&gt;19&lt;/span&gt;&lt;br/&gt;            })&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;            change&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然可以直接修改，但是出于代码结构来说，全局的状态管理还是不要直接在各个组件处随意修改状态，应放于 action 中统一方法修改（没有mutation了）&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重置状态&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过调用store 上的方法将状态重置为初始状态&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;&lt;br/&gt;mainStore.$reset()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;$patch&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改state还可以通过使用 $patch 方法&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;$patch 可以同时修改多个值，举个例子&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;        &lt;br/&gt;  mainStore.$patch({&lt;br/&gt;      teacherName: &lt;span&gt; 德普 &lt;/span&gt;,&lt;br/&gt;            userList: [&lt;br/&gt;                { name: &lt;span&gt; 小明 &lt;/span&gt;, age: &lt;span&gt;18&lt;/span&gt; },&lt;br/&gt;                { name: &lt;span&gt; 小李 &lt;/span&gt;, age: &lt;span&gt;15&lt;/span&gt; },&lt;br/&gt;            ]&lt;br/&gt;  })&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {}&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这种写法的在修改数组时，例如我只想要把 userList 的中第一项&quot;小明&quot;的age 改为 20，也需要传入整个包括所有成员的数组，这无疑增加了书写成本和风险，于是一般都推荐使用以下的传入一个函数的写法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mainStore.$patch(&lt;span&gt;(&lt;span&gt;state&lt;/span&gt;)=&amp;gt;&lt;/span&gt;{&lt;br/&gt;  state.teacherName = &lt;span&gt; 德普 &lt;/span&gt;&lt;br/&gt;  state.userList[&lt;span&gt;0&lt;/span&gt;].age = &lt;span&gt;20&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;监听订阅state&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 store.$subscribe() 的方法，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法的第一个参数接受一个回调函数，该函数可以在 state 变化时触发&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; subscribe = mainStore.$subscribe(&lt;span&gt;(&lt;span&gt;mutation, state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(mutation)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(state)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上所示，该回调函数的两个参数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 state 是 mainStore 实例，而 mutation 打印如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2380191693290735&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/bwG40XYiaOKkibbOM2g62O2DEqia9f57cO9iapDrM8ibMtfWWAbibxLJ1AaUic5mUHPk78wYwyRn8ia7I2cKucHFztbCWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;626&quot; src=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以发现，打印结果的mutation对象主要包含三个属性&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;events : 是这次state改变的具体数据，包括改变前的值和改变后的值等等数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;storeId ：是当前store的id&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;type：type表示这次变化是通过什么产生的，主要有三个分别是&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;“direct” ：通过 action 变化的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;”patch object“ ：通过 $patch 传递对象的方式改变的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“patch function” ：通过 $patch 传递函数的方式改变的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;停止监听&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码中，调用mainStore.$subscribe返回的值（即上方示例的 subscribe 变量）可以停止订阅&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;subscribe()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;store.$subscribe() 的方法的第二个参数options对象，是各种配置参数，包括&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;detached属性，其值是一个布尔值，默认是 false， 正常情况下，当 订阅所在的组件被卸载时，订阅将被停止删除，如果设置detached值为 true 时，即使所在组件被卸载，订阅依然可以生效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他属性主要还有 immediate、deep、flush 等等，和 vue3 watch的对应参数效果一样。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;getter&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义getter&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;getter 是 store 中的 state 计算值，以defineStore中的&lt;code&gt;getters&lt;/code&gt;属性定义&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;getters属性的值是一个函数，该函数的第一个参数是 state&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;    state: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({&lt;br/&gt;        user: {&lt;br/&gt;            name: &lt;span&gt; 小明 &lt;/span&gt;,&lt;br/&gt;            age: &lt;span&gt;7&lt;/span&gt;,&lt;br/&gt;        },&lt;br/&gt;    }),&lt;br/&gt;&lt;br/&gt;    getters: {&lt;br/&gt;        userInfo: &lt;span&gt;(&lt;span&gt;state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span&gt;`&lt;span&gt;${state.user.name}&lt;/span&gt;今年&lt;span&gt;${state.user.age}&lt;/span&gt;岁了`&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;// 这里想要正确推断参数 state 的类型，则定义 state 时需要使用箭头函数定义&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码中，getters的值是箭头函数，当getters的值是普通函数时，可以通过 this 访问整个store实例（如下）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果是普通函数，想要通过 this 获取state的值并希望this的类型能正确推断，同时希望函数的返回值类型正确推断，我们需要声明函数的返回类型。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;getters: {&lt;br/&gt;        userDesc: &lt;span&gt;(&lt;span&gt;state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span&gt;`&lt;span&gt;${state.user.name}&lt;/span&gt;今年&lt;span&gt;${state.user.age}&lt;/span&gt;岁了`&lt;/span&gt;,&lt;br/&gt;            &lt;br/&gt;        userBesidesDesc(): &lt;span&gt;string&lt;/span&gt;{ &lt;span&gt;// 需注明类型&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.user.age}&lt;/span&gt;岁的&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.user.name}&lt;/span&gt;`&lt;/span&gt; &lt;span&gt;// 可以使用 this 获取值&lt;/span&gt;&lt;br/&gt;        },&lt;br/&gt;            &lt;br/&gt;        returnUserInfo() {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.userDesc &lt;span&gt;// 也可以使用 this 获取其他getters&lt;/span&gt;&lt;br/&gt;        },    &lt;br/&gt;},&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;访问getter&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; userDesc = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; mainStore.userDesc)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; userBesidesDesc = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; mainStore.userBesidesDesc)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; returnUserInfo = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; mainStore.returnUserInfo)&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;            userDesc,&lt;br/&gt;            userBesidesDesc,&lt;br/&gt;            returnUserInfo,&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;action&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定义action&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;action 是 store 中的 方法，支持同步或异步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;action 定义的函数可以是普通函数从而可以通过 this 访问整个store实例，同时该函数可以传入任意参数并返回任何数据&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;    state: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({&lt;br/&gt;        count: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;    }),&lt;br/&gt;&lt;br/&gt;    actions: {&lt;br/&gt;        add() {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.count++&lt;br/&gt;        },&lt;br/&gt;        &lt;br/&gt;        addCountNum(num: &lt;span&gt;number&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;.count += num&lt;br/&gt;        },&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;调用action&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;mainAction&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;            mainStore.addCount()&lt;br/&gt;        }&lt;br/&gt;    &lt;br/&gt;     &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addCountTwo&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;            mainStore.addCountNum(&lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;            mainAction,&lt;br/&gt;            addCountTwo&lt;br/&gt;        }&lt;br/&gt;},&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;监听订阅action&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 &lt;code&gt;store.$onAction()&lt;/code&gt;，可以监听action的动作及结果等&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该函数可以接收一个回调函数作为参数，回调函数的参数中有五个属性，具体如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; unsubscribe = mainStore.$onAction(({&lt;br/&gt;    name, &lt;span&gt;// action 函数的名称&lt;/span&gt;&lt;br/&gt;    store, &lt;span&gt;// store 实例，这里是 mainStore&lt;/span&gt;&lt;br/&gt;    args, &lt;span&gt;// action 函数参数数组&lt;/span&gt;&lt;br/&gt;    after, &lt;span&gt;// 钩子函数，在action函数执行完成返回或者resolves后执行&lt;/span&gt;&lt;br/&gt;    onError, &lt;span&gt;// 钩子函数，在action函数报错或者rejects后执行&lt;/span&gt;&lt;br/&gt;}) =&amp;gt; {})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，定义一个store&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { defineStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;    state: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({&lt;br/&gt;        user: {&lt;br/&gt;            name: &lt;span&gt; 小明 &lt;/span&gt;,&lt;br/&gt;            age: &lt;span&gt;7&lt;/span&gt;,&lt;br/&gt;        },&lt;br/&gt;    }),&lt;br/&gt;    actions: {&lt;br/&gt;        subscribeAction(name: &lt;span&gt;string&lt;/span&gt;, age: &lt;span&gt;number&lt;/span&gt;, manualError?: &lt;span&gt;boolean&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; subscribeAction函数执行 &lt;/span&gt;)&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (manualError) {&lt;br/&gt;                    reject(&lt;span&gt; 手动报错 &lt;/span&gt;)&lt;br/&gt;                } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;this&lt;/span&gt;.user.name = name&lt;br/&gt;                    &lt;span&gt;this&lt;/span&gt;.user.age = age&lt;br/&gt;                    resolve(&lt;span&gt;`&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.user.name}&lt;/span&gt;今年&lt;span&gt;${&lt;span&gt;this&lt;/span&gt;.user.age}&lt;/span&gt;岁了`&lt;/span&gt;)&lt;br/&gt;                }&lt;br/&gt;            })&lt;br/&gt;        },&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; useMainStore&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在 setup 中使用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { ref, defineComponent, computed } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; vue &lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;subscribeNormal&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;            mainStore.subscribeAction(&lt;span&gt; 小李 &lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;        &lt;br/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;subscribeError&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;            mainStore.subscribeAction(&lt;span&gt; 小白 &lt;/span&gt;, &lt;span&gt;17&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; unsubscribe = mainStore.$onAction(({&lt;br/&gt;            name, &lt;span&gt;// action 函数的名称&lt;/span&gt;&lt;br/&gt;            store, &lt;span&gt;// store 实例，这里是 mainStore&lt;/span&gt;&lt;br/&gt;            args, &lt;span&gt;// action 函数参数数组&lt;/span&gt;&lt;br/&gt;            after, &lt;span&gt;// 钩子函数，在action函数执行完成返回或者resolves后执行&lt;/span&gt;&lt;br/&gt;            onError, &lt;span&gt;// 钩子函数，在action函数报错或者rejects后执行&lt;/span&gt;&lt;br/&gt;        }) =&amp;gt; {&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; action的函数名 &lt;/span&gt;, name)&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; 参数数组 &lt;/span&gt;, args)&lt;br/&gt;            &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; store实例 &lt;/span&gt;, store)&lt;br/&gt;&lt;br/&gt;            after(&lt;span&gt;(&lt;span&gt;result&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; $onAction after函数 &lt;/span&gt;, result)&lt;br/&gt;            })&lt;br/&gt;&lt;br/&gt;            onError(&lt;span&gt;&lt;span&gt;error&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt; 错误捕获 &lt;/span&gt;, error)&lt;br/&gt;            })&lt;br/&gt;        })&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;            subscribeNormal,&lt;br/&gt;            subscribeError,&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上，在 setup 中，调用了 subscribeNormal 函数后，页面打印如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11555075593952484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/bwG40XYiaOKkibbOM2g62O2DEqia9f57cO9sctnmFhrGM1X2MoZiaK6Apz0juLwWhnicXDTNmTfJaVxgUTcibIU3G3gw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;926&quot; src=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用了 subscribeError 函数后，页面打印如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11082251082251082&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/bwG40XYiaOKkibbOM2g62O2DEqia9f57cO9SWTwxpBNSFU1Xy4839ZFm5CJz0kDb8OQp3NMJfibq7oicgHicA0CxXKMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1155&quot; src=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，可以通过调用 mainStore.$onAction 返回的值来手动停止订阅，在上面代码的例子中，即是&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;unsubscribe() &lt;span&gt;// 手动停止订阅&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;store.$onAction 默认在所在组件卸载时会被自动删除，可以通过传递第二个参数 true，来将action订阅和所在组件分开（即组件卸载时，订阅依然有效）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;mainStore.$onAction(callback, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;store使用位置&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在组件中使用时，useStore() 在大多数情况下都可以在调用后开箱即用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在其他地方使用时，需确保在 pinia 激活使用后（ app.use(createPinia()) ）才能使用 useStore()&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如在路由守卫中&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { createRouter } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; vue-router &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useMainStore &lt;span&gt;from&lt;/span&gt; &lt;span&gt; @/store/main &lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; router = createRouter({&lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 报错&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;&lt;br/&gt;router.beforeEach(&lt;span&gt;(&lt;span&gt;to&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// 正常使用&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在store中也可以访问其他store&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { defineStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { useUserStore } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; ./user &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; useMainStore = defineStore(&lt;span&gt; main &lt;/span&gt;, {&lt;br/&gt;  getters: {&lt;br/&gt;    otherGetter(state) {&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; userStore = useUserStore()&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; userStore.data + state.data&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;  actions: {&lt;br/&gt;    &lt;span&gt;async&lt;/span&gt; fetchUserInfo() {&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; userStore = useUserStore()&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (userStore.userInfo) {&lt;br/&gt;        ...&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;pinia插件&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pinia store 支持扩展，通过 pinia 插件我们可以实现以下&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;给 store 添加新属性&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;给 store 添加新选项&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;给 store 添加新方法&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;包装已存在的方法&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;修改甚至删除actions&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如可以写一个简单的插件来给所有store添加一个静态属性&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { createPinia } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; pinia = createPinia()&lt;br/&gt;&lt;span&gt;// 传递一个返回函数&lt;/span&gt;&lt;br/&gt;pinia.use(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; ({ env: &lt;span&gt; dev &lt;/span&gt; }))&lt;br/&gt;&lt;br/&gt;app.use(pinia)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，在所有其他的store都可以访问到上面添加的 env 属性&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(mainStore.env) &lt;span&gt;// dev&lt;/span&gt;&lt;br/&gt;}        &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;插件函数&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上方代码可以发现，pinia 插件是一个函数，这个函数有一个可选参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { PiniaPluginContext } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;myPiniaPlugin&lt;/span&gt;(&lt;span&gt;context: PiniaPluginContext&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(context)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10696266397578204&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/bwG40XYiaOKkibbOM2g62O2DEqia9f57cO9Wj0FQF82WVUeDNwKhEj6EXyAeLdOQ9qbt0xkPiaexBbChu5ENibCvjsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;991&quot; src=&quot;&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;context 打印出来主要有&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;app : 当前应用 Vue.createApp() 创建的 app&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;options : defineStore 配置的数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;pinia : 当前通过 createPinia() 创建的 pinia 实例&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;store ：当前 store 实例&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 context 我们可以在 store 上设置属性&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pinia.use(&lt;span&gt;(&lt;span&gt;{ store }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    store.env = &lt;span&gt; dev &lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，在所有其他的store都可以访问到上面添加的 env 属性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pinia 的 store 是通过 reactive 包装的，可以自动解包它包含的任何 ref 对象&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pinia.use(&lt;span&gt;(&lt;span&gt;{ store }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    store.env = ref(&lt;span&gt; dev &lt;/span&gt;)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面插件，访问store 的 env 时不需要 .value，就可以直接访问&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;setup() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; mainStore = useMainStore()&lt;br/&gt;        &lt;span&gt;console&lt;/span&gt;.log(mainStore.env) &lt;span&gt;// 不需要加 .value&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;添加外部属性&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当需要添加来自其他库或不需要响应式的数据时，应该用 markRaw() 包装传递的对象，例如&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;markRaw 来自 vue3，可以标记一个对象，使其永远不会转换为 proxy。返回对象本身。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { markRaw } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; vue &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { router } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; ./router &lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { axios } &lt;span&gt;from&lt;/span&gt; &lt;span&gt; axios &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;pinia.use(&lt;span&gt;(&lt;span&gt;{ store }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  store.router = markRaw(router)&lt;br/&gt;  store.axios = markRaw(axios)&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在插件内部使用&lt;span&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 5287.9 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(469, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1041, 0)&quot;&gt;&lt;path data-c=&quot;62&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1470, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1939, 0)&quot;&gt;&lt;path data-c=&quot;63&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2372, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2823, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3168, 0)&quot;&gt;&lt;path data-c=&quot;62&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3597, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4340.8, 0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot; font-size=&quot;947.1px&quot; font-family=&quot;serif&quot;&gt;、&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;onAction&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pinia.use(&lt;span&gt;(&lt;span&gt;{ store }&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  store.$subscribe(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// react to store changes&lt;/span&gt;&lt;br/&gt;  })&lt;br/&gt;  store.$onAction(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;// react to store actions&lt;/span&gt;&lt;br/&gt;  })&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新属性的typescript支持&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当通过插件添加新属性时，可以扩展 &lt;code&gt;PiniaCustomProperties&lt;/code&gt;接口&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用设置get，set或者简单声明值的类型，以此来安全地写入和读取新加的属性&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt; pinia &lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;  pinia  {&lt;br/&gt;    &lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; PiniaCustomProperties {&lt;br/&gt;        &lt;span&gt;set&lt;/span&gt; env(value: &lt;span&gt;string&lt;/span&gt; | Ref&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;)&lt;br/&gt;        &lt;span&gt;get&lt;/span&gt; env(): &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 或者&lt;/span&gt;&lt;br/&gt;        env: &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9378b31359c03c87766f0003db961568</guid>
<title>Python爬虫，看这几本书就够了！</title>
<link>https://toutiao.io/k/783sqir</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;‍‍&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;mpsearch class=&quot;js_mpsearch appmsg_search_iframe js_uneditable custom_select_card&quot; data-keywords=&quot;%5B%7B%22label%22%3A%22Python%22%7D%2C%7B%22label%22%3A%22PDF%22%7D%2C%7B%22label%22%3A%22%E4%B8%8B%E8%BD%BD%22%7D%5D&quot; data-parentclass=&quot;appmsg_search_iframe_wrp&quot; data-ratio=&quot;1.5664335664335665&quot; data-w=&quot;286&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;开源最前线(ID:OpenSourceTop) 猿妹编译&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;链接：https://computingforgeeks.com/top-books-to-help-you-master-web-scraping/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;网页抓取就是从网站中提取数据，因为有很多网站，已经有很多开发工具可以用来浏览网站（web爬行）寻找特定的数据片段并自动收集它们（web抓取）。收集到的数据大多是非结构化的HTML形式，之后再将其转化为结构化数据，例如电子表格或者某种形式的数据库，以便能够对这些数据加以利用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些信息对于那些希望了解趋势的公司或寻找他们感兴趣的特定信息的组织来说是非常宝贵的。因此爬虫技术是一门非常受欢迎的技术，今天我们将和大家推荐一些有关数据爬取的好书：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;1、《Python Automation Cookbook》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ICQb3ibohNoppVgJTMI3RicQMfam9Zp3H8IyiahQ9b9aqtiaA8yMichqjl7ibAgx1F0E3Msr6S516EWyzRrlwCYmvmoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本书的作者是一名全职Python开发人员，并经常在PyCon Ireland发表演讲，他已经做了20多年的专业程序员，在他的职业生涯中接触过许多不同的技术，因此，通过这本书将使你深刻地理解任务自动化的基础知识，例如开发你的第一个Web抓取应用程序、分析信息并生成带有图表的电子表格报告，以及与自动生成的电子邮件进行通信。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一旦掌握了基础知识，你 还将学习如何使用Matplotlib创建令人惊叹的图形和图表，生成包含相关信息的丰富图形，自动化营销活动，构建机器学习项目，并执行调试技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;2、《Practical Web Scraping for Data Science》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4171180931744312&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ICQb3ibohNoppVgJTMI3RicQMfam9Zp3H8XvCYlecFF9ZgiaicRc8ibhuyZojaThJHEXJ8419Oz5sxJBz6fXicD3YXrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;923&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;是由数据领域的教授Seppe vanden Broucke和Bart Baesens写的，这本书提供了一个完整和现代的Web抓取指南，使用Python作为编程语言，没有漏掉任何重要的细节或最佳实践，这本书是为数据科学专业的读者准备的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3、《Python网络数据采集》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40950455005055614&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ICQb3ibohNoppVgJTMI3RicQMfam9Zp3H89kxVXPq1v5iaukXpzwZFPUSqlpmY3wL3r6DJw7abtEPLAlicq7LtHWRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;989&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本书的作者Ryan Mitchell是波士顿LinkeDrive的软件工程师，她在那里开发他们的API和数据分析工具。这本实用书的扩展版不仅向你介绍了网络抓取，而且作为一个全面的指南，可以从现代网络上抓取几乎所有类型的数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一部分主要关注Web抓取机制：使用Python从Web服务器请求信息，执行服务器响应的基本处理，并以自动化的方式与站点交互。第二部分探讨了各种更具体的工具和应用程序，方便你应用到任何web抓取场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4、《利用Python进行数据分析（原书第2版）》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4227226202661208&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ICQb3ibohNoppVgJTMI3RicQMfam9Zp3H85IhjXLw4bKLnMf2nkDkoQma6bOwbDBNiac6VlTEKkQESN6lKzJxHf4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这本书由Python pandas项目的创建者Wes McKinney编写，是用Python介绍数据科学工具的实用书籍，本书的目标是为Python编程语言的各个部分及其面向数据的库生态系统和工具提供指导，让你成为一名优秀的数据分析师，对于刚接触Python的分析师和刚接触数据科学和科学计算的Python程序员来说，它是理想的选择。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;5、《Python编程快速上手（第2版）》&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4462311557788945&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ICQb3ibohNoppVgJTMI3RicQMfam9Zp3H87XWBNZTAXqq5Z7hf9FC7e4nibGjfrBmZNDEvpVwL1mHpialHibiarRBJtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;995&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者Al Sweigart是一名居住在旧金山的软件开发人员和科技书籍作者。在这本书中你将学习如何使用Python编写程序，这些程序在几分钟内就能完成手工完成的工作，而不需要你具备任何编程经验。你将从头开始学习Python的基础知识，并探索Python用于执行特定任务的丰富模块库，如从网站上抓取数据，阅读PDF和Word文档，以及自动点击和键入任务。&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;以上书籍电子版，需要的联系小编微信免费获取：codingSmart&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;逆锋起笔&lt;/code&gt;是一个专注于程序员圈子的技术平台，你可以收获&lt;code&gt;最新技术动态&lt;/code&gt;、&lt;code&gt;最新内测资格&lt;/code&gt;、&lt;code&gt;BAT等大厂的经验&lt;/code&gt;、&lt;code&gt;精品学习资料&lt;/code&gt;、&lt;code&gt;职业路线&lt;/code&gt;、&lt;code&gt;副业思维&lt;/code&gt;，微信搜索&lt;code&gt;逆锋起笔&lt;/code&gt;关注！&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494220&amp;amp;idx=2&amp;amp;sn=85ff8e8e724e2382877068c50bd57187&amp;amp;chksm=fa3f0b17cd488201b1973b4e7aa8ed7f19d254c125f8df9a4dcb8d83c4c4377ec523dd6d4579&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;五大自动化测试 Python 框架&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494149&amp;amp;idx=1&amp;amp;sn=7525aafe254b1a8017fee638cc5f3340&amp;amp;chksm=fa3f0b5ecd4882481060c4ccceff14d66ac9348089028ca145d07a17dbd153e46155fb2e0138&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;4 个 Python 编程游戏网站，玩嗨了~&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494882&amp;amp;idx=2&amp;amp;sn=f756e00694f41bf503ddd38165467362&amp;amp;chksm=fa3f0db9cd4884af61ac926bcd1b7ee2d1ac59f7e5db91ceed5738e8fc7af35e8b2109761d56&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;一些日常使用的 Python 技巧分享&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247494409&amp;amp;idx=2&amp;amp;sn=60f504fcb4ab4f3c5653d3e38c5d881d&amp;amp;chksm=fa3f0a52cd48834493edacaab63f11cf7d3724048a14bb96303999efd75ef3a72d6e78aeb7f6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 竟然也能做这样的进度条。。。&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247492682&amp;amp;idx=1&amp;amp;sn=bbabd4fdf5e5e8e54e93d63986af2286&amp;amp;chksm=fa3f0511cd488c07589fb7180c8d27360a0739512021b8b614f9395b0bb46983ac6f14a1df9b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;如何用 Python 爬取网易云音乐歌单&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100010006&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.20575131632239774&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaKPniafc8icFWanFqBKibEfLvQvxZs99SDAKpl4Fia8r5QQAwJxJD84kuribaLFNicy4eWDiawHu9BHMiayicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2469&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a038d5438b654cfe9d79eb6e3d3983c4</guid>
<title>使用Gin过程中的一些优化</title>
<link>https://toutiao.io/k/oaxpllk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原文：&lt;span&gt; https://hongker.github.io/2020/04/01/golang-gin/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文介绍gin的一些知识点,如自定义Response,中间件等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;gin&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Gin 是一个 go 写的 web 框架，具有高性能的优点。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初级的使用方式不介绍了，具体请查阅官方文档。官方地址：&lt;code&gt;https://github.com/gin-gonic/gin&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下介绍基于gin开发项目的一些常用模块。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;自定义Response&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个公司都会自定义接口的数据结构。故我们需要基于&lt;code&gt;Json()&lt;/code&gt;自定义一个更方便好用的response&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Response 数据结构体&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Response struct {&lt;br/&gt;    // StatusCode 业务状态码&lt;br/&gt; StatusCode int `json:&lt;span&gt;&quot;status_code&quot;&lt;/span&gt;`&lt;br/&gt;&lt;br/&gt;    // Message 提示信息&lt;br/&gt; Message    string      `json:&lt;span&gt;&quot;message&quot;&lt;/span&gt;`&lt;br/&gt;&lt;br/&gt;    // Data 数据，用interface{}的目的是可以用任意数据&lt;br/&gt; Data       interface{} `json:&lt;span&gt;&quot;data&quot;&lt;/span&gt;`&lt;br/&gt;&lt;br/&gt;    // Meta 源数据,存储如请求ID,分页等信息&lt;br/&gt; Meta       Meta        `json:&lt;span&gt;&quot;meta&quot;&lt;/span&gt;`&lt;br/&gt;&lt;br/&gt;    // Errors 错误提示，如 xx字段不能为空等&lt;br/&gt; Errors     []ErrorItem `json:&lt;span&gt;&quot;errors&quot;&lt;/span&gt;`&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Meta 元数据&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Meta struct {&lt;br/&gt; RequestId      string                 `json:&lt;span&gt;&quot;request_id&quot;&lt;/span&gt;`&lt;br/&gt; // 还可以集成分页信息等&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;// ErrorItem 错误项&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; ErrorItem struct {&lt;br/&gt; Key   string `json:&lt;span&gt;&quot;key&quot;&lt;/span&gt;`&lt;br/&gt; Value string `json:&lt;span&gt;&quot;error&quot;&lt;/span&gt;`&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// New &lt;span&gt;return&lt;/span&gt; response instance&lt;br/&gt;func New() *Response {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &amp;amp;Response{&lt;br/&gt;  StatusCode: 200,&lt;br/&gt;  Message:    &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;  Data:       nil,&lt;br/&gt;  Meta: Meta{&lt;br/&gt;   RequestId: uuid.NewV4().String(),&lt;br/&gt;  },&lt;br/&gt;  Errors: []ErrorItem{},&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;封装gin.Context以自定义一些方便的方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// Wrapper include context&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Wrapper struct {&lt;br/&gt; ctx *gin.Context&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// WrapContext&lt;br/&gt;func WrapContext(ctx *gin.Context) *Wrapper {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &amp;amp;Wrapper{ctx:ctx}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Json 输出json,支持自定义response结构体&lt;br/&gt;func (wrapper *Wrapper) Json(response *Response) {&lt;br/&gt; wrapper.ctx.JSON(200, response)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Success 成功的输出&lt;br/&gt;func (wrapper *Wrapper) Success( data interface{}) {&lt;br/&gt; response := New()&lt;br/&gt; response.Data = data&lt;br/&gt; wrapper.Json(response)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Error 错误输出&lt;br/&gt;func (wrapper *Wrapper) Error( statusCode int, message string) {&lt;br/&gt; response := New()&lt;br/&gt; response.StatusCode = statusCode&lt;br/&gt; response.Message = message&lt;br/&gt; wrapper.Json(response)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; uuid &lt;span&gt;&quot;github.com/satori/go.uuid&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;()  {&lt;br/&gt; router := gin.Default()&lt;br/&gt; router.GET(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, func(ctx *gin.Context) {&lt;br/&gt;  WrapContext(ctx).Success(&lt;span&gt;&quot;hello,world&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; router.Run(&lt;span&gt;&quot;:8088&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;code&gt;go run main.go&lt;/code&gt;运行后，浏览器访问&lt;code&gt;localhost:8088&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;中间件&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;介绍一些常用的中间件，如跨域、Jwt校验、请求日志等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;备注&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入中间件比如在注册路由之前,谨记!&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;跨域中间件&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package middleware&lt;br/&gt;import (&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;// CORS 跨域中间件&lt;br/&gt;func CORS(ctx *gin.Context) {&lt;br/&gt; method := ctx.Request.Method&lt;br/&gt;&lt;br/&gt; // &lt;span&gt;set&lt;/span&gt; response header&lt;br/&gt; ctx.Header(&lt;span&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;, ctx.Request.Header.Get(&lt;span&gt;&quot;Origin&quot;&lt;/span&gt;))&lt;br/&gt; ctx.Header(&lt;span&gt;&quot;Access-Control-Allow-Credentials&quot;&lt;/span&gt;, &lt;span&gt;&quot;true&quot;&lt;/span&gt;)&lt;br/&gt; ctx.Header(&lt;span&gt;&quot;Access-Control-Allow-Headers&quot;&lt;/span&gt;, &lt;span&gt;&quot;Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With&quot;&lt;/span&gt;)&lt;br/&gt; ctx.Header(&lt;span&gt;&quot;Access-Control-Allow-Methods&quot;&lt;/span&gt;, &lt;span&gt;&quot;GET,POST,PUT,PATCH,DELETE,OPTIONS&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;    // 默认过滤这两个请求,使用204(No Content)这个特殊的http status code&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; method == &lt;span&gt;&quot;OPTIONS&quot;&lt;/span&gt; || method == &lt;span&gt;&quot;HEAD&quot;&lt;/span&gt; { &lt;br/&gt;  ctx.AbortWithStatus(204)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; ctx.Next()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    router := gin.Default()&lt;br/&gt;    router.Use(CORS)&lt;br/&gt;    router.GET(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, func(ctx *gin.Context) {&lt;br/&gt;     WrapContext(ctx).Success(&lt;span&gt;&quot;hello,world&quot;&lt;/span&gt;)&lt;br/&gt;    })&lt;br/&gt;&lt;br/&gt;    router.Run(&lt;span&gt;&quot;:8088&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Jwt校验&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt; &lt;span&gt;&quot;errors&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/dgrijalva/jwt-go&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;strings&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;var (&lt;br/&gt; TokenNotExist       = errors.New(&lt;span&gt;&quot;token not exist&quot;&lt;/span&gt;)&lt;br/&gt; TokenValidateFailed = errors.New(&lt;span&gt;&quot;token validate failed&quot;&lt;/span&gt;)&lt;br/&gt; ClaimsKey = &lt;span&gt;&quot;uniqueClaimsKey&quot;&lt;/span&gt;&lt;br/&gt; SignKey = &lt;span&gt;&quot;test&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;// JwtAuth jwt&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; JwtAuth struct {&lt;br/&gt; SignKey []byte&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// ParseToken parse token&lt;br/&gt;func (jwtAuth JwtAuth) ParseToken(token string) (jwt.Claims, error) {&lt;br/&gt; tokenClaims, err := jwt.Parse(token, func(token *jwt.Token) (interface{}, error) {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; jwtAuth.SignKey, nil&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; tokenClaims.Claims == nil || !tokenClaims.Valid {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; nil, TokenValidateFailed&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; tokenClaims.Claims, nil&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// GenerateToken&lt;br/&gt;func (jwtAuth JwtAuth) GenerateToken(tokenExpireTime int64 /* 过期时间 */, iss string /* key*/) (string, error) {&lt;br/&gt; now := time.Now().Unix()&lt;br/&gt; exp := now + tokenExpireTime&lt;br/&gt; claim := jwt.MapClaims{&lt;br/&gt;  &lt;span&gt;&quot;iss&quot;&lt;/span&gt;: iss,&lt;br/&gt;  &lt;span&gt;&quot;iat&quot;&lt;/span&gt;: now,&lt;br/&gt;  &lt;span&gt;&quot;exp&quot;&lt;/span&gt;: exp,&lt;br/&gt; }&lt;br/&gt; token := jwt.NewWithClaims(jwt.SigningMethodHS256, claim)&lt;br/&gt; tokenStr, err := token.SignedString(jwtAuth.SignKey)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; tokenStr, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// JWT gin的jwt中间件&lt;br/&gt;func JWT(ctx *gin.Context) {&lt;br/&gt; // 解析token&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err := validateToken(ctx); err != nil {&lt;br/&gt;  WrapContext(ctx).Error(401, err.Error())&lt;br/&gt;  ctx.Abort()&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; ctx.Next()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// validateToken 验证token&lt;br/&gt;func validateToken(ctx *gin.Context) error {&lt;br/&gt; // 获取token&lt;br/&gt; tokenStr := ctx.GetHeader(&lt;span&gt;&quot;Authorization&quot;&lt;/span&gt;)&lt;br/&gt; kv := strings.Split(tokenStr, &lt;span&gt;&quot; &quot;&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; len(kv) != 2 || kv[0] != &lt;span&gt;&quot;Bearer&quot;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; TokenNotExist&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; jwtAuth := &amp;amp;JwtAuth{SignKey: []byte(SignKey)}&lt;br/&gt; claims, err := jwtAuth.ParseToken(kv[1])&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; // token存入context&lt;br/&gt; ctx.Set(ClaimsKey, claims)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; nil&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;()  {&lt;br/&gt; router := gin.Default()&lt;br/&gt; router.GET(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, func(ctx *gin.Context) {&lt;br/&gt;  WrapContext(ctx).Success(&lt;span&gt;&quot;hello,world&quot;&lt;/span&gt;)&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt;    // 指定user这组路由都需要校验jwt&lt;br/&gt; user := router.Group(&lt;span&gt;&quot;/user&quot;&lt;/span&gt;).Use(JWT)&lt;br/&gt; {&lt;br/&gt;  user.GET(&lt;span&gt;&quot;/info&quot;&lt;/span&gt;, func(ctx *gin.Context) {&lt;br/&gt;   claims, exist := ctx.Get(ClaimsKey)&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; !exist {&lt;br/&gt;    WrapContext(ctx).Error(1001, &lt;span&gt;&quot;获取用户信息失败&quot;&lt;/span&gt;)&lt;br/&gt;   }&lt;br/&gt;   WrapContext(ctx).Success(claims)&lt;br/&gt;  })&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; router.Run(&lt;span&gt;&quot;:8088&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;请求测试：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;curl  &lt;span&gt;&quot;localhost:8088/user/info&quot;&lt;/span&gt;&lt;br/&gt;// 输出:&lt;br/&gt;// {&lt;span&gt;&quot;status_code&quot;&lt;/span&gt;:401,&lt;span&gt;&quot;message&quot;&lt;/span&gt;:&lt;span&gt;&quot;token not exist&quot;&lt;/span&gt;,&lt;span&gt;&quot;data&quot;&lt;/span&gt;:null,&lt;span&gt;&quot;meta&quot;&lt;/span&gt;:{&lt;span&gt;&quot;request_id&quot;&lt;/span&gt;:&lt;span&gt;&quot;e69361cf-1fd4-42e4-8af8-d18fac1e70fb&quot;&lt;/span&gt;},&lt;span&gt;&quot;errors&quot;&lt;/span&gt;:[]}&lt;br/&gt;&lt;br/&gt;// 通过GenerateToken()生成一个token&lt;br/&gt;curl -H &lt;span&gt;&quot;Authorization:Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODU4MjQ2NzgsImlhdCI6MTU4NTgyMTA3OCwiaXNzIjoiYWEifQ.Eyo8KptVUgGfnRG8zsjDilAJOBmaXMtjqJxw__a32HY&quot;&lt;/span&gt;  localhost:8088/user/info&lt;br/&gt;// 输出：&lt;br/&gt;{&lt;span&gt;&quot;status_code&quot;&lt;/span&gt;:200,&lt;span&gt;&quot;message&quot;&lt;/span&gt;:&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;data&quot;&lt;/span&gt;:{&lt;span&gt;&quot;exp&quot;&lt;/span&gt;:1585824678,&lt;span&gt;&quot;iat&quot;&lt;/span&gt;:1585821078,&lt;span&gt;&quot;iss&quot;&lt;/span&gt;:&lt;span&gt;&quot;aa&quot;&lt;/span&gt;},&lt;span&gt;&quot;meta&quot;&lt;/span&gt;:{&lt;span&gt;&quot;request_id&quot;&lt;/span&gt;:&lt;span&gt;&quot;464743de-1033-4656-96f8-36c1529f13e0&quot;&lt;/span&gt;},&lt;span&gt;&quot;errors&quot;&lt;/span&gt;:[]}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;请求日志&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记录每个请求的重要信息&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import (&lt;br/&gt; &lt;span&gt;&quot;bytes&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;// bodyLogWriter 定义一个存储响应内容的结构体&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; bodyLogWriter struct {&lt;br/&gt; gin.ResponseWriter&lt;br/&gt; body *bytes.Buffer&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// Write 读取响应数据&lt;br/&gt;func (w bodyLogWriter) Write(b []byte) (int, error) {&lt;br/&gt; w.body.Write(b)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; w.ResponseWriter.Write(b)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// RequestLog gin的请求日志中间件&lt;br/&gt;func RequestLog(c *gin.Context) {&lt;br/&gt; // 记录请求开始时间&lt;br/&gt; t := time.Now()&lt;br/&gt; blw := &amp;amp;bodyLogWriter{body: bytes.NewBufferString(&lt;span&gt;&quot;&quot;&lt;/span&gt;), ResponseWriter: c.Writer}&lt;br/&gt; // 必须!&lt;br/&gt; c.Writer = blw&lt;br/&gt;&lt;br/&gt; // 获取请求信息&lt;br/&gt; requestBody := getRequestBody(c)&lt;br/&gt;&lt;br/&gt; c.Next()&lt;br/&gt;&lt;br/&gt; // 记录请求所用时间&lt;br/&gt; latency := time.Since(t)&lt;br/&gt;&lt;br/&gt; // 获取响应内容&lt;br/&gt; responseBody := blw.body.String()&lt;br/&gt;&lt;br/&gt; logContext := make(map[string]interface{})&lt;br/&gt; // 日志格式&lt;br/&gt; logContext[&lt;span&gt;&quot;request_uri&quot;&lt;/span&gt;] = c.Request.RequestURI&lt;br/&gt; logContext[&lt;span&gt;&quot;request_method&quot;&lt;/span&gt;] = c.Request.Method&lt;br/&gt; logContext[&lt;span&gt;&quot;refer_service_name&quot;&lt;/span&gt;] = c.Request.Referer()&lt;br/&gt; logContext[&lt;span&gt;&quot;refer_request_host&quot;&lt;/span&gt;] = c.ClientIP()&lt;br/&gt; logContext[&lt;span&gt;&quot;request_body&quot;&lt;/span&gt;] = requestBody&lt;br/&gt; logContext[&lt;span&gt;&quot;request_time&quot;&lt;/span&gt;] = t.String()&lt;br/&gt; logContext[&lt;span&gt;&quot;response_body&quot;&lt;/span&gt;] = responseBody&lt;br/&gt; logContext[&lt;span&gt;&quot;time_used&quot;&lt;/span&gt;] = fmt.Sprintf(&lt;span&gt;&quot;%v&quot;&lt;/span&gt;, latency)&lt;br/&gt; logContext[&lt;span&gt;&quot;header&quot;&lt;/span&gt;] = c.Request.Header&lt;br/&gt;&lt;br/&gt; log.Println(logContext)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// getRequestBody 获取请求参数&lt;br/&gt;func getRequestBody(c *gin.Context) interface{} {&lt;br/&gt; switch c.Request.Method {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; http.MethodGet:&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; c.Request.URL.Query()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; http.MethodPost:&lt;br/&gt;  fallthrough&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; http.MethodPut:&lt;br/&gt;  fallthrough&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; http.MethodPatch:&lt;br/&gt;  var bodyBytes []byte // 我们需要的body内容&lt;br/&gt;        // 可以用buffer代替ioutil.ReadAll提高性能&lt;br/&gt;  bodyBytes, err := ioutil.ReadAll(c.Request.Body)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != nil {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; nil&lt;br/&gt;        }&lt;br/&gt;        // 将数据还回去&lt;br/&gt;  c.Request.Body = ioutil.NopCloser(bytes.NewBuffer(bodyBytes))&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; string(bodyBytes)&lt;br/&gt;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; nil&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;router.Use(ReqeustLog)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就到这儿吧，还有一些比如全局ID中间件，后面来写。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>