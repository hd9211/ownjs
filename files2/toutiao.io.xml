<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0550979a995af898d02f3a5421c19e69</guid>
<title>我放弃上海的高薪，选择回老家了</title>
<link>https://toutiao.io/k/qkjbzpr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;&lt;span/&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwybLeJh6dT96Ihlibib6sISK8ia2mwXLTfBpa0bQHibVUFtWvcuynOB418icCia4HRFh8qA0wHZ8cj10cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section&gt;大部分放弃高薪工作的人，不是在老家有个铁饭碗，就是有一个潜在希望的未来，或者财务自由了。&lt;strong&gt;而我让所有人都失望了，我这里没有励志的鸡汤，没有绚烂的人生经历，有的只是生活的酸甜苦辣。&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;所以大家听到我要回老家，有些朋友笑称我财务自由了或老家有其他营生了，也有问我是不是疯了。&lt;/p&gt;&lt;p&gt;这里我要说一下:&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;别笑，我离财务自由差的何止十万八千里&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我在老家也没有其他的挣钱营生&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;疯不至于，但确实迷茫了，写本篇之前&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;之所以离职，完全是因为 家家有本难念的经，这里我就不描述了。但是既然已经走到这步了，那就做个计划走下去。&lt;strong&gt;上海一成不变的工作生活，我并没有厌倦，但探索一下不同的生活方式也未尝不可，做一些不一样的事情，过一点不一样的生活。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;初步计划如下:&lt;/p&gt;&lt;h3&gt;身体&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;身体是革命的本钱，然而我们平时却愿意为了钱而牺牲部分健康。&lt;/strong&gt; 在这之前的一两年间，我几乎没有睡过好觉，头发越来越稀少，肚子越来越大。虽然我心态依然年轻，但外貌已初露中年油腻男的迹象。照这样下去，朋友们都不用喊我＂哥＂了，直接称之为＂大爷＂。这谁能忍呢！&lt;/p&gt;&lt;section&gt;所以趁这个机会，恢复一下当年的腹肌和曾经的秀发。&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.864&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JJRW7FxQREwybLeJh6dT96Ihlibib6sISKySlibsHU1pzvrXn8YU8xibiczU5RcmjQHvCqeT17CGzqMNbS91H2sEVsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/section&gt;&lt;h3&gt;生存&lt;/h3&gt;&lt;p&gt;迫于生存，我不可能在家仅仅只锻炼个身体。总要有一项收入来源，不论这项收入稳定与不稳定。&lt;strong&gt;我的一技之长就在于开发，我风骚的代码走位，以及高能的输出，赢得过多位领导同事的欣赏。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我虽主攻后端Java开发，但前端也有所了解，不信你们看看我用vue写的一个比较个性的网站:https://modubox.cn  ，但老家这个n线城市肯定是不需要，恰巧开发是可以远程协作的，所以我所能做的就是寻找一个远程工作或者接外包。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有好些朋友一度想辞职接外包生活，我说先别急。这条路充满太多不确定性，如果你不是非走不可，尽量别选择这条路。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果你也想接外包干点私活，可以关注一下我，通过我的经历，你可以看看我到底能不能接到外包？怎么接外包？外包到底能月入多少钱？当然，你完全可能看到一个失败的案例。&lt;/p&gt;&lt;p&gt;看到这里，大佬们，如果有活，能否照顾一下我这个濒临吃土的人？&lt;/p&gt;&lt;h3&gt;理财&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;曾经我也梦想过：”赢了会所嫩模，输了下海干活！“&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;所以我也跳进了币圈玩了一把，我在2018年投了些钱，当时比特币新高2万一个，如今6万了，所以你以为我这回要发财了？这就可想多了，我TMD投的不是比特币，而是几个非主流币，如今也是不温不火，下场可想而知，我现在只想坐等n年后的某一天，不知不觉我成了大亨。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;255&quot; data-backw=&quot;255&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/JJRW7FxQREwybLeJh6dT96Ihlibib6sISKibyaFVsl8t7IOGic0bY9RBEX2ByCp8PpYsJfxxhzLlibhziahaW7Fh7GCg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;255&quot;/&gt;&lt;/p&gt;&lt;p&gt;关于基金，我确实挣了万把块，给你们看下其中一个：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.087962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwybLeJh6dT96Ihlibib6sISKRZyIg2L5Sm6yf3Jf1mWU37Dk22loBxSxdhYpMHpdZf7XKwjlOokKeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;不过你们也别太替我高兴，市场的阴晴谁说的定呢，你看，它反手就给了我一巴掌：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1277777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JJRW7FxQREwybLeJh6dT96Ihlibib6sISKLflvt0AYnpnVamAHoW89MgmiargSe8u7EMfxcVUqlcwAZia1PXcvdsJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过兄弟们，别慌！&lt;/span&gt;&lt;span&gt;只要我不抛，就不算输！&lt;/span&gt;&lt;span&gt;有句话说的好：&lt;/span&gt;&lt;strong&gt;别人贪婪我恐惧，别人恐惧我贪婪。&lt;/strong&gt;&lt;span&gt; 记住这句话应该能赚到一些钱，但我这几年执行下来，发现并不容易，这完全是和自己内心斗争的一个过程。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;学习&lt;/h3&gt;&lt;p&gt;这是一个终身之事，工作或外包的事情只能让我们发挥余热，输出价值。随着时间的推移，余热会被消耗殆尽，不是长久之计。&lt;strong&gt;我所要做的仍是我一直坚持的：稳打基础，顺应潮流。&lt;/strong&gt; 这让我想起了李克强总理的讲话：树高千尺，营养还在根部。把基础打牢了，将来就可以触类旁通，行行都可以写出精彩。&lt;/p&gt;&lt;p&gt;所以继续深耕基础，学习流行框架和技术是很重要的，如果有富余的时间，也要读读非专业类的书籍。&lt;/p&gt;&lt;h3&gt;自媒体&lt;/h3&gt;&lt;p&gt;说实话，运营自媒体我并不在行，从我搞公众号一两年间，关注者也是寥寥无几就可知道。所以真正想运营好自媒体，要思考两个问题：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何保证文章更新频率和质量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何推广宣传，让更多人看到&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;如今只有两项都要具备才有可能成功。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自媒体如今最热的模式当属短视频，大&lt;/span&gt;&lt;span&gt;爷大妈们都对此乐此不疲，我也试着去了解下，这也作为我的一个备选项&lt;/span&gt;&lt;span&gt;，如果你是这方面的高手，还望不吝赐教。&lt;/span&gt;&lt;span&gt;搞自媒体要先找一个方向，是选择美食，科技，搞笑还是科普？&lt;/span&gt;&lt;span&gt;如果有某方面突出的才能那当然更好，但我认为大部分人都非常平凡的，我也是其一，我也不知道该选择哪个方向才是对的，但我感觉：&lt;/span&gt;&lt;strong&gt;在不知道的情况下，先干就对了；不断的试错中，或许就能找到对的，总比一直不动要好。&lt;/strong&gt;&lt;strong/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;h3&gt;陪家人&lt;/h3&gt;&lt;p&gt;尽人事听天命。如果不幸，我没有找到远程工作或外包，自媒体也运营失败，我在老家的时间都将用来陪伴家人。陪伴并不是一个浪漫的词，对于一个成家的人来说，家人需要的不止于陪伴，还有富足的生活。最后我仍然会迫于生存重返职场，但我并不担心大龄程序员的尴尬。&lt;strong&gt;在水里我是鱼，在天空我是鸟，处于什么样的环境，就要适应什么角色，况且我仍然有足够的激情和学习能力来应对。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里是大概的计划，所以我没有加上日期时间的限制，真正从职场过度到老家，其中有许多我不确定的因素或不知道的因素。待我逐渐融入的过程中慢慢剖析出来，讲给大家听听。&lt;/p&gt;&lt;h3&gt;最后&lt;/h3&gt;&lt;p&gt;好了，准备收拾行李了。可 &lt;strong&gt;发现有许多书不方便带走，所以我准备拿出一些送给关注我的朋友们！&lt;/strong&gt; 只需要你出个运费就能得到一本免费的书。如今我无职无业，大家体谅下，就不为大家出运费了。&lt;/p&gt;&lt;p&gt;书单：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;阿里-尽在双11&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;京东-基础架构建设之路&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让未来现在就来&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;程序员的成长课&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;把时间当做朋友（纪念版）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;人人都是架构师&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PHP+MySQL网站开发全程实例&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;想要的朋友可以留言或抽奖，我将选取留言点赞的前三名赠送一本，另外几本通过抽奖(公众号回复：抽奖)，时间截止到本周五中午12点。&lt;/p&gt;&lt;p&gt;感谢你能耐心的听我说这么多，不妨动下手点个再看/赞/分享，给我这个濒临吃土的人一点慰问。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c806a48774987f78be9dceb6a1340e4f</guid>
<title>JVM 合集之开篇点题</title>
<link>https://toutiao.io/k/11ajx2d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32344763670064874&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpOjRJj3rEmVIcZ4cxnPGXMbOToA3HQiafTrfmjfvOVQH0fLtCJwj3DkfC1GoPIRVmLY5oTemAhXibRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1079&quot; data-backw=&quot;558&quot; data-backh=&quot;181&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;阅读本文大概需要 5 分钟。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家在平时的开发过程中是否遇到过&lt;code&gt;StackOverflowError&lt;/code&gt;、&lt;code&gt;OutOfMemoryError&lt;/code&gt;等类似的内存溢出错误呢？大家又是怎么解决这个问题的？再来，大家在面试过程中有没有被面试官提问过&lt;code&gt;jvm&lt;/code&gt;的内部构造及如何优化的夺命连环&lt;code&gt;call&lt;/code&gt;呢？今天就让我们来一探究竟，先从&lt;code&gt;jvm&lt;/code&gt;的内部构造及原理说起，一步一步带大家解决&lt;code&gt;jvm&lt;/code&gt;的优化问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;虚拟机简介&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟机（&lt;code&gt;Virtual Machine&lt;/code&gt;，简称&lt;code&gt;VM&lt;/code&gt;）就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;大名鼎鼎的&lt;code&gt;visual box&lt;/code&gt;、&lt;code&gt;vmware&lt;/code&gt;就属于系统虚拟机，他们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;程序虚拟机的代表就是&lt;code&gt;java&lt;/code&gt;虚拟机（&lt;code&gt;jvm&lt;/code&gt;），他专门为执行单个计算机程序而设计，在&lt;code&gt;java&lt;/code&gt;虚拟机中执行的指令我们称为&lt;code&gt;java&lt;/code&gt;字节码指令。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;无论是系统虚拟机还是程序虚拟机，在上边运行的软件都被限制于虚拟机提供的资源中。虚拟机所在的位置：硬件的操作系统之上。虚拟机与&lt;code&gt;JDK&lt;/code&gt;和&lt;code&gt;JRE&lt;/code&gt;的关系如图所示：&lt;img data-ratio=&quot;0.6693227091633466&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpNnngfibAxxwuzOwCjp8YUsDiaP3aylkg12xuElWeQJSXZKfyXxFzj1WH7oc9weXqxmzHSu3SHn8E1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;753&quot;/&gt;&lt;/section&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;架构模型&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Java&lt;/code&gt;编译器输入的指令流基本上是一种基于栈的指令集架构，另一种指令集架构则是基于寄存器的指令集架构。那么他们之间有什么区别呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;栈式架构特点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;设计和实现更简单，适用于资源受限的系统；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避开了寄存器的分配难题，使用零地址指令方式分配；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不需要硬件支持，可移植性好，更好实现跨平台。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;寄存器架构特点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;典型的应用是x86的二进制指令集：比如传统的&lt;code&gt;PC&lt;/code&gt;以及&lt;code&gt;Android&lt;/code&gt;的&lt;code&gt;Davlik&lt;/code&gt;虚拟机；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;指令集架构则完全依赖于硬件，可移植性差；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能优秀和执行更高效；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;花费更小的指令去完成一项操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;机器指令是机器语言的一条语句，是一组有意义的二进制代码，一条机器指令通常分为两个部分：操作码和地址码。操作码指出该指令应该执行什么样的操作，代表了该指令的功能。地址码指出该指令操作的对象，给出被操作对象的地址。零地址指令指机器指令中操作数地址的个数为0，一地址指令指机器指令中操作数地址的个数为1，以此类推。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于跨平台性的设计，java的指令都是根据栈来设计的，不用平台的cpu架构不同，所以不能设计为基于寄存器的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;举例&lt;/strong&gt;：同样执行2+3的逻辑操作，其指令分别如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于栈的计算流程（以Java虚拟机为例--idea中控制台使用&lt;code&gt;javap -v XXX.class&lt;/code&gt;执行）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;0&lt;/span&gt;: iconst_2  &lt;span&gt;//常量2入栈&lt;/span&gt;&lt;br/&gt; &lt;span&gt;1&lt;/span&gt;: istore_1  &lt;span&gt;//将2从操作数栈存储到局部变量表 第1个位置&lt;/span&gt;&lt;br/&gt; &lt;span&gt;2&lt;/span&gt;: iconst_3  &lt;span&gt;//常量3入栈&lt;/span&gt;&lt;br/&gt; &lt;span&gt;3&lt;/span&gt;: istore_2  &lt;span&gt;//将2从操作数栈存储到局部变量表 第2个位置&lt;/span&gt;&lt;br/&gt; &lt;span&gt;4&lt;/span&gt;: iload_1   &lt;span&gt;//位置为1的数据压入操作数栈&lt;/span&gt;&lt;br/&gt; &lt;span&gt;5&lt;/span&gt;: iload_2   &lt;span&gt;//位置为2的数据压入操作数栈&lt;/span&gt;&lt;br/&gt; &lt;span&gt;6&lt;/span&gt;: iadd      &lt;span&gt;//常量2，3出栈，执行相加，并将结果压入操作数栈顶&lt;/span&gt;&lt;br/&gt; &lt;span&gt;7&lt;/span&gt;: istore_3  &lt;span&gt;//结果5存到局部变量表 第三个位置&lt;/span&gt;&lt;br/&gt; &lt;span&gt;8&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于寄存器的计算流程：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mov eax,2  //将eax寄存器的值设为1&lt;br/&gt;add eax,3  //使eax寄存器的值加3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;java虚拟机的生命周期&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟机的启动：Java虚拟机的启动是通过引导类加载器创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟机的执行：虚拟机的任务是执行java程序，其真正执行的是一个叫做java虚拟机的进程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟机的退出：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;程序正常执行结束；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;程序在执行过程中遇到了异常或者错误而异常终止；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作系统出现错误而导致java虚拟机进程终止；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程调用Runtime类或者System类的exit方法，或者Runtime类的halt方法，并且java安全管理器也允许这次exit或halt操作；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载java虚拟机时，java虚拟机的退出情况。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;常见的JVM&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说&lt;code&gt;java&lt;/code&gt;是跨平台的语言，那&lt;code&gt;jvm&lt;/code&gt;就是跨语言的平台。只要是将该语言的文件遵循&lt;code&gt;jvm&lt;/code&gt;的规范编译成&lt;code&gt;jvm&lt;/code&gt;可以识别的字节码文件，就可以在&lt;code&gt;jvm&lt;/code&gt;上运行。&lt;code&gt;jvm&lt;/code&gt;的特点：一次编译，到处运行；自动内存管理；自动垃圾回收功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HotSpot、JRockit与J9并称三大主流JVM：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;HotSpot VM&lt;/code&gt;：从&lt;code&gt;JDK1.3&lt;/code&gt;开始使用，到现在&lt;code&gt;OpenJDK&lt;/code&gt;中也在使用。采用解释器与即时编译器并存的架构，拥有成熟的热点代码探测技术和&lt;code&gt;GC&lt;/code&gt;机制。所谓热点探测技术有以下两个方面的体现：一、通过计数器找到最具编译价值的代码，触发即时编译或者栈上替换功能--机器指令（&lt;code&gt;cpu&lt;/code&gt;可以直接执行的指令）本地缓存；二、即时编译器和解释器协同工作，在最优化的程序响应时间与最佳执行性能之间平衡。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;前端编译器(&lt;code&gt;javac&lt;/code&gt;或者&lt;code&gt;Eclipse JDT&lt;/code&gt;中的增量式编译器)把&lt;code&gt;Java&lt;/code&gt;代码编译成字节码，字节码是可以发送给任何平台并且能在那个平台上运行的独立于平台的代码。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;★&lt;/span&gt;&lt;p&gt;即时编译器（&lt;code&gt;JIT compiler，just-in-timecompiler&lt;/code&gt;）是一个把Java的字节码（包括需要被解释的指令的程序）转换成可以直接发送给处理器（&lt;code&gt;processor&lt;/code&gt;）的指令的程序。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;JRockit VM&lt;/code&gt;:最初属于&lt;code&gt;BEA&lt;/code&gt;公司，2008年被&lt;code&gt;Oracle&lt;/code&gt;收购。它专注于服务器端应用，所以不太关注程序的启动速度，里边不包含解析器，号称是世界上最快的&lt;code&gt;JVM&lt;/code&gt;。它提供的&lt;code&gt;Mission Control&lt;/code&gt;服务套件，是一组以极低的开销来监控、管理和分析生产环境中的应用程序的工具。它包括三个独立的应用程序：内存泄漏监测器（&lt;code&gt;Memory Leak Detector&lt;/code&gt;）、JVM运行时分析器（&lt;code&gt;Runtime Analyzer&lt;/code&gt;）和管理控制台（&lt;code&gt;Management Console&lt;/code&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;J9 VM&lt;/code&gt;：&lt;code&gt;J9&lt;/code&gt;是&lt;code&gt;IBM&lt;/code&gt;开发的一个高度模块化的&lt;code&gt;JVM&lt;/code&gt;，在许多平台上，&lt;code&gt;IBM J9 VM&lt;/code&gt;都只能跟&lt;code&gt;IBM&lt;/code&gt;产品一起使用。2017年&lt;code&gt;IBM&lt;/code&gt;发布开源的&lt;code&gt;OpenJ9&lt;/code&gt;，并贡献给 &lt;code&gt;Eclipse&lt;/code&gt; 基金会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;非主流&lt;code&gt;JVM&lt;/code&gt;介绍：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Azul VM&lt;/code&gt;:　是&lt;code&gt;Azul system&lt;/code&gt; 公司在&lt;code&gt;Hot Spot&lt;/code&gt;基础上进行的改进，是运行在其公司专有的硬件上，一个&lt;code&gt;Azul VM&lt;/code&gt; 实例，都可以管理数十个&lt;code&gt;CPU&lt;/code&gt;以及数百G的内存资源，而且通过巨大内存范围内，实现可控的GC事件以及垃圾回收。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Graal VM&lt;/code&gt;: 是一个高性能的通用虚拟机，可以运行使用&lt;code&gt;JavaScript&lt;/code&gt;，&lt;code&gt;Python 3&lt;/code&gt;，&lt;code&gt;Ruby&lt;/code&gt;，&lt;code&gt;R&lt;/code&gt;，基于&lt;code&gt;JVM&lt;/code&gt;的语言以及基于&lt;code&gt;LLVM&lt;/code&gt;的语言开发的应用。&lt;code&gt;GraalVM&lt;/code&gt;消除了编程语言之间的隔离性，并且通过共享运行时增强了他们的互操作性。它可以独立运行，也可以运行在&lt;code&gt;OpenJDK&lt;/code&gt;，&lt;code&gt;Node.js&lt;/code&gt;，&lt;code&gt;Oracle&lt;/code&gt;，&lt;code&gt;MySQL&lt;/code&gt;等环境中。它的口号“Run Programs Faster Anywhere”。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;HotSpot的整体架构图&lt;span/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8701298701298701&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/55HPQyguvpNnngfibAxxwuzOwCjp8YUsDicw9WsyuSQhJhu5LZ0JWGn0ib9rjYmICJGmub9Vj31syTJrDCkNKaVicg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;616&quot;/&gt;&lt;figcaption&gt;HotSpot的整体架构简图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示为HotSpot的架构简图，接下来我们会按照该图的执行顺序说一下&lt;code&gt;JVM&lt;/code&gt;里边的具体细节，如果你感兴趣的话，可以关注微信公众号“阿Q说”！你也可以后台留言说出你的疑惑，阿Q将会在后期的文章中为你解答。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;内容推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0040322580645162&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/55HPQyguvpPT7S5RYgFtCUAsTef19QwUcef3OposVMvMTicibTxGu35MiadwnDqqicK9CXgx7hG4nNxoDTY8Ql4BBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;496&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看完记得一键三连呦👇&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>961ea2c7525af1f03f3a3ddc5398603b</guid>
<title>有哪些可以提高代码质量的书籍推荐？</title>
<link>https://toutiao.io/k/pmlwnuy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;这篇文章的内容其实很早就写了，并且，我也已经同步在了我的 Github 的一个仓库中（仓库内容还在继续完善中），地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/CodingDocs/awesome-cs&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/CodingDocs/a&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;wesome-cs&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; 。对应的 Gitee地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//gitee.com/SnailClimb/awesome-cs&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;gitee.com/SnailClimb/aw&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;esome-cs&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; （Github无法访问或者访问速度比较慢的小伙伴可以看码云上的对应内容）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e82f1540f327273acb5ba349dbf26b44_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;642&quot; data-rawheight=&quot;942&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-e82f1540f327273acb5ba349dbf26b44_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;642&quot; data-rawheight=&quot;942&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-e82f1540f327273acb5ba349dbf26b44_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-e82f1540f327273acb5ba349dbf26b44_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;考虑到还未发过类似的文章，所以，今天晚上就来一篇！下面推荐都是我看过并且我觉得值得推荐的书籍。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4921c369a9cf9d9fedaf01dd34f19b8f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;660&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-4921c369a9cf9d9fedaf01dd34f19b8f_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;660&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-4921c369a9cf9d9fedaf01dd34f19b8f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4921c369a9cf9d9fedaf01dd34f19b8f_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;不过，这些书籍都比较偏理论，只能帮助你建立一个写优秀代码的意识标准。如果你想要编写更高质量的代码、更高质量的软件，还是应该多去看优秀的源码，多去学习优秀的代码实践（比如设计模式、设计原则）&lt;/p&gt;&lt;h2&gt;&lt;b&gt;代码整洁之道&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30468597/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《重构》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7168dba3218563085d6d1cadc3f77929_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7168dba3218563085d6d1cadc3f77929_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;必看书籍！无需多言。编程书籍领域的瑰宝。&lt;/p&gt;&lt;p&gt;世界顶级、国宝级别的 Martin Fowler 的书籍，可以说是软件开发领域最经典的几本书之一。目前已经出了第二版。&lt;/p&gt;&lt;p&gt;这是一本值得你看很多遍的书籍。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/4199741/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Clean Code》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-057f648da49f829e2af34de30f0e94b6_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-057f648da49f829e2af34de30f0e94b6_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;《Clean Code》是 Bob 大叔的一本经典著作，强烈建议小伙伴们一定要看看。&lt;/p&gt;&lt;p&gt;Bob 大叔将自己对整洁代码的理解浓缩在了这本书中，真可谓是对后生的一大馈赠。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1477390/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《代码大全》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-80b420b872320c5d1b35dbf1a68e7743_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;346&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;346&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-80b420b872320c5d1b35dbf1a68e7743_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其实，《代码大全（第 2 版）》这本书我本身是不太想推荐给大家了。但是，看在它的豆瓣评分这么高的份上，还是拿出来说说吧！&lt;/p&gt;&lt;p&gt;这也是一本非常经典的书籍，第二版对第一版进行了重写。&lt;/p&gt;&lt;p&gt;我简单地浏览过全书的内容，感觉内容总体比较虚，对于大部分程序员的作用其实不大。如果你想要切实地提高自己的代码质量，《Clean Code》和 《编写可读代码的艺术》我觉得都要比《代码大全》这本书更好。&lt;/p&gt;&lt;p&gt;不过，最重要的还是要多看优秀的源码，多学习优秀的代码实践。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/10797189/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《编写可读代码的艺术》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b1c8ebbfb12f4db53ebe318794cc3c5d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;351&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;351&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-b1c8ebbfb12f4db53ebe318794cc3c5d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;《编写可读代码的艺术》这本书要表达的意思和《Clean Code》很像，你看它俩的目录就可以看出来了。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7f0ae76b8e576c737f759e04e83360e1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;972&quot; data-rawheight=&quot;1584&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-7f0ae76b8e576c737f759e04e83360e1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;972&quot; data-rawheight=&quot;1584&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-7f0ae76b8e576c737f759e04e83360e1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7f0ae76b8e576c737f759e04e83360e1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在我看来，如果你看过 《Clean Code》 的话，就不需要再看这本书了。当然，如果你有时间和精力，也可以快速过一遍。&lt;/p&gt;&lt;p&gt;另外，我这里还要推荐一个叫做 &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/biezhi/write-readable-code&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;write-readable-code&lt;/a&gt;&lt;/b&gt; 的仓库。这个仓库的作者免费分享了一系列基于《编写可读代码的艺术》这本书的视频。这一系列视频会基于 Java 语言来教你如何优化咱们的代码。&lt;/p&gt;&lt;p&gt;在实践中学习的效果肯定会更好！推荐小伙伴们都抓紧学起来啊！&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a141417fdf31f4ac54705bc9ac45fd4c_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1894&quot; data-rawheight=&quot;1700&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-a141417fdf31f4ac54705bc9ac45fd4c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1894&quot; data-rawheight=&quot;1700&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-a141417fdf31f4ac54705bc9ac45fd4c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a141417fdf31f4ac54705bc9ac45fd4c_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3360807/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Effective java 》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-663df273be90e3a87d5bf2cba4cc3227_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;350&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;350&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-663df273be90e3a87d5bf2cba4cc3227_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Java 程序员必看！&lt;/p&gt;&lt;p&gt;又是一本 Java 领域国宝级别的书，非常经典。这本书主要介绍了在 Java 编程中很多极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。这篇文章能够非常实际地帮助你写出更加清晰、健壮和高效的代码。本书中的每条规则都以简短、独立的小文章形式出现，并通过例子代码加以进一步说明。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;程序员职业素养&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26919457/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《 The Clean Coder》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-eca03ac2c335c0245e78347de4c3f211_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;340&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;340&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-eca03ac2c335c0245e78347de4c3f211_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;《 The Clean Coder》是 Bob 大叔的又一经典著作。&lt;/p&gt;&lt;p&gt;《Clean Code》和《 The Clean Coder》这两本书在国内都翻译为 《代码整洁之道》，我觉得这个翻译还是不够优雅的。&lt;/p&gt;&lt;p&gt;另外，两者的内容差异也很大。《Clean Code》这本书从代码层面来讲解如何提高自己的代码质量。而《The Clean Coder》这本书则是从如何成为一名更优秀的开发者的角度来写的，比如这书会教你如何在自己的领域更专业、如何说不、如何做时间管理、如何处理压力等等。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;架构整洁之道&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30333919/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《架构整洁之道》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cd9a0a33a50807e0b44894e0eb63a02b_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;365&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;365&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cd9a0a33a50807e0b44894e0eb63a02b_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;你没看错，《架构整洁之道》这本书又是 Bob 大叔的经典之作。&lt;/p&gt;&lt;p&gt;这本书我强烈安利！认真读完之后，我保证你对编程本质、编程语言的本质、软件设计、架构设计可以有进一步的认识。&lt;/p&gt;&lt;p&gt;国内的很多书籍和专栏都借鉴了《架构整洁之道》 这本书。毫不夸张地说，《架构整洁之道》就是架构领域最经典的书籍之一。&lt;/p&gt;&lt;p&gt;正如作者说的那样：&lt;/p&gt;&lt;blockquote&gt; 如果深入研究计算机编程的本质，我们就会发现这 50 年来，计算机编程基本没有什么大的变化。编程语言稍微进步了一点，工具的质量大大提升了，但是计算机程序的基本构造没有什么变化。&lt;br/&gt; 虽然我们有了新的编程语言、新的编程框架、新的编程范式，但是软件架构的规则仍然和 1946 年阿兰·图灵写下第一行机器代码的时候一样。&lt;br/&gt; 这本书就是为了把这些永恒不变的软件架构规则展现出来。&lt;br/&gt; &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;项目管理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1102259/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《人月神话》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-874e947218716b45e7e8a63e68b4dd3d_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;383&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;383&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-874e947218716b45e7e8a63e68b4dd3d_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这本书主要描述了软件开发的基本定律：&lt;b&gt;一个需要 10 天才能干完的活，不可能让 10 个人在 1 天干完！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;看书名的第一眼，感觉不像是技术类的书籍。但是，就是这样一个看似和编程不沾边的书名，却成了编程领域长久相传的经典。&lt;/p&gt;&lt;p&gt;&lt;b&gt;这本书对于现代软件尤其是复杂软件的开发的规范化有深刻的意义。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/5344973/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《领域驱动设计:软件核心复杂性应对之道》&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3182be04f8984ad9da3f1e2e0eb7ee03_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;339&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3182be04f8984ad9da3f1e2e0eb7ee03_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这本领域驱动设计方面的经典之作一直被各种推荐，但是我还来及读。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;软件质量其他书籍推荐&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/24536403/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《代码的未来》&lt;/a&gt; ：这本书的作者是 Ruby 之父松本行弘，算是一本年代比较久远的书籍（13 年出版），不过，还是非常值得一读。这本书的内容主要介绍是编程/编程语言的本质。我个人还是比较喜欢松本行弘的文字风格，并且，你看他的文章也确实能够有所收获。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1488876/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《深入浅出设计模式》&lt;/a&gt; ： 比较有趣的风格，适合设计模式入门。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30443578/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《软件架构设计:大型网站技术架构与业务架构融合之道》&lt;/a&gt; ： 内容非常全面。适合面试前突击一些比较重要的理论知识，也适合拿来扩充/完善自己的技术广度。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//book.douban.com/subject/33425123/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《微服务架构设计模式》&lt;/a&gt; ：这本书是世界十大软件架构师之一、微服务架构先驱 Chris Richardson 亲笔撰写，豆瓣评分 9.6。示例代码使用 Java 语言和 Spring 框架。帮助你设计、实现、测试和部署基于微服务的应用程序。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后再推荐两个相关的文档：&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0c584d9f79708e6bb88699b2a03b0f29</guid>
<title>数据仓库分层存储技术揭秘</title>
<link>https://toutiao.io/k/42qs27i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4Yaqf8fhiblchGkuZGKRtpRzlPxkO9WQ8qCtFr3dGgKCgIib362Qicj6lp1Wg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  背景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;据IDC发布的《数据时代2025》报告显示，全球每年产生的数据将从2018年的33ZB增长到2025年的175ZB，平均每天约产生491EB数据。随着数据量的不断增长，数据存储成本成为企业IT预算的重要组成部分。例如1PB数据存储一年，全部放在高性能存储介质和全部放在低成本存储介质两者成本差距在一个量级以上。由于关键业务需高性能访问，因此不能简单的把所有数据存放在低速设备，企业需根据数据的访问频度，使用不同种类的存储介质获得最小化成本和最大化效率。因此，把数据存储在不同层级，并能够自动在层级间迁移数据的分层存储技术成为企业海量数据存储的首选。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文介绍数据仓库产品作为企业中数据存储和管理的基础设施，在通过分层存储技术来降低企业存储成本时的关键问题和核心技术。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  什么是分层存储&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分层存储顾名思义，就是把数据分为高频访问的热数据和低频访问的冷数据，并分别存储在热数据层和冷数据层，达到性能与成本的平衡。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;热数据层采用高性能存储介质，单位成本高，为控制预算一般容量较小，只存储关键业务数据，例如ERP，CRM数据，或者最新的订单数据等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;冷数据层则存储非关键业务数据，例如审计日志，运行日志等，或历史沉淀数据，例如一个月前的订单数据。此部分数据体量大，访问频度低，性能要求不高，因此采用单位成本低，容量大的存储介质来降低成本。同时，随着时间流逝，部分热数据访问频度会降低（一般称为数据降温），此时存储系统能够自动迁移该部分数据到冷数据层来降低成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5590361445783133&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4YaqLjxc6yo2RKHa1n9VVB8NyAUmujeVCgqr9oKdfTAwaCfR9CQKEnjxCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  数据仓库分层存储面临的挑战&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据仓库产品在实现分层存储能力时，面临的几个核心挑战如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  数据仓库分层存储关键技术解析&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本章将以阿里云数据仓库AnalyticDB MySQL版（下文简称ADB）为原型介绍如何在数据仓库产品中实现分层存储，并解决其核心挑战。&lt;/span&gt;&lt;span&gt;ADB的整体架构分为三层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.55&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4YaqXo6g2RbDhgpLZfbN6BejA5Y1rU7yZ7xsfvTUiagDxEMAx2lTJibpbDLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1300&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  冷热数据存储介质的选择&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于业务上的热数据，需采用高性能存储介质满足其快速查询需求。SSD相对HDD来说，成本较高，但其具有高IOPS和高带宽的特性，因此ADB把热数据层建立在SSD上，并使用数据多副本机制，出现存储节点异常时，通过切换服务节点来保证高可靠和高可用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务上的冷数据，一般是历史沉淀的业务数据或日志数据，这些数据体量大，访问频度低，因此容量大、成本低是存储介质的主要选择因素。对于冷数据层，ADB选择建立在阿里云OSS上。阿里云对象存储服务OSS作为阿里云提供的海量、低成本、高持久性的云存储服务，其数据设计持久性不低于99.9999999999%，服务可用性不低于99.995%。OSS提供的这些特性满足了冷数据层对成本和可靠性的需求，同时相对于自己维护HDD磁盘，OSS自身具有容量无限扩展能力，满足海量数据存储需求。并且OSS可以远程访问，因此存储节点的副本间可以共享数据来进一步降低成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5784615384615385&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4YaqG4M1shInicKsqw5icV0wQGKRrgD5cjlfwma8RibZvWibcBIvS0j7EibY9VA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1300&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  冷热数据定义问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;业务自身对冷热数据的定义比较明确。比如企业中一些需要高频访问的CRM、ERP数据均为热数据。而对于审计日志，或数天前的订单数据，其访问频度低，则可定义为冷数据。核心问题是，业务上的这些数据，如何在分层存储中描述其冷热属性并保证存储位置的准确性。例如企业促销活动，大量用户正在线上进行业务交互，此时如果分层存储错误的把客户信息、商品信息等关键数据迁移到冷区，则会引起相关查询性能受损，最终出现客户登录受阻，客户点击失败等业务异常，导致企业受损。ADB解决这个问题的方法是在用户建表时指定存储策略（storage_policy）来精确关联业务上的冷热数据和分层存储中的冷热存储，下面是示例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;全热表&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所有数据存储在SSD并且不会降温，适用于全表数据被频繁访问，且对访问性能有较高要求的场景，比如CRM、ERP数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; t1(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; dt datetime&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;distribute&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;HOT&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;全冷表&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所有数据存储在OSS，适用于体量大，访问频度低，需要减少存储成本的场景，比如审计日志数据。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; t2(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; dt datetime&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;distribute&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;COLD&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;冷热混合表&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;适用于数据冷热有明显时间窗口的场景。例如最近7天的游戏日志数据，广告点击数据等需高频访问，作为热数据存储，而7天前的数据可降温为冷数据，低成本存储。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;注：冷热混合表需配合表的分区使用。除storage_policy外，还需指定hot_partition_count属性。hot_partition_count指按分区值倒序，取最大N个分区为热分区，其余为冷分区。下例中，表按天分区，hot_partition_count = 7表示分区值最大的7个分区，也就是最近7天的数据为热数据。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; t3(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; dt datetime&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;distribute&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;date_format&lt;/span&gt;(dt, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;%Y%m%d&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;lifecycle &lt;span class=&quot;code-snippet__number&quot;&gt;365&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;MIXED&#x27;&lt;/span&gt; hot_partition_count = &lt;span class=&quot;code-snippet__number&quot;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;修改冷热策略&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随业务的变化，表的访问特性可能发生变化，企业可以随时修改表的存储策略来适应新的存储需求。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）由热表修改为冷表：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Alter&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; t1 storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;COLD&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）修改热分区的个数，修改为最近14天的数据为热数据：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Alter&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; t3 storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;MIXED&#x27;&lt;/span&gt; hot_partition_count = &lt;span class=&quot;code-snippet__number&quot;&gt;14&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  冷热数据自动迁移问题&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随时间流逝，热数据的访问频度降低，降温为冷数据。比如一些日志数据，在数天后就很少再访问，分层存储需把这部分数据由热数据层迁移到冷数据层来降低成本。这里的核心问题是如何知道哪部分数据的温度降低了需要迁移？下面通过一个冷热混合表，来说明ADB解决该问题的方法。如下是一张日志表，最近三天数据为热数据，满足高性能在线查询需求，三天前数据为冷数据，低成本存储并满足低频访问需求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; Event_log (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  event_id &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  dt datetime,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;distribute&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;hash&lt;/span&gt;(event_id)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;date_format&lt;/span&gt;(dt, &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;%Y%m%d&#x27;&lt;/span&gt;)) lifecycle &lt;span class=&quot;code-snippet__number&quot;&gt;365&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;storage_policy = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;MIXED&#x27;&lt;/span&gt; hot_partition_count = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在本例中，表首先按天分区。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;partition by value(date_format(dt, &#x27;%Y%m%d&#x27;)) lifecycle 365&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;并定义冷热策略为混合模式，最新3天的数据是热数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;storage_policy = &#x27;MIXED&#x27; hot_partition_count = 3&lt;span/&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在ADB中，冷热数据以分区为最小粒度，即一个分区要么在热区，要么在冷区，然后通过热分区窗口来判定某个分区是否为热分区（表属性中的hot_partition_count定义了热分区窗口的大小）。在本例中，假定当前日期是3月4日，则3月2日、3日、4日这三天的数据处于热分区窗口中，因此是热分区。当写入3月5日的数据后，则3月3日、4日、5日这三天数据组成了新的热分区窗口，3月2日数据降温为冷数据，后台会自动执行热冷迁移，把3月2日的数据由热区迁移到冷区。通过热分区窗口，客户根据业务场景可以明确定义冷热边界，一旦数据降温则自动迁移。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4YaqMsGEvs2JuqWia9XdG8RQuygPlCnb9pVibrnlxKsT2nEnVZ8KhZTqHlpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1296&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  冷数据访问性能问题&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;冷数据存储在OSS上，OSS是远程存储系统并通过网络访问，延迟较高。例如判断文件是否存在，获取文件长度等元信息操作，单次交互的访问延迟在毫秒级别。同时，OSS带宽有限，一个账号下整体只有GB级别带宽，提供的整体QPS也只有数十万，超过后OSS就会限流。数据仓库内部存储着大量文件，如果不对OSS访问做优化，则会出现查询异常。例如查询可能涉及数百万个文件，仅仅获取这些文件的元信息就会达到OSS的QPS上限，最终导致查询超时等异常，因此需对OSS的访问进行优化来保证业务的可用性并提高查询性能。如下对元信息访问优化和数据访问优化分别介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;元信息访问优化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ADB作为数据仓库，底层存储了大量的数据文件和索引文件。ADB优化元信息访问的方法是对文件进行归档，即把一个分区内的所有文件打包在一个归档文件中，并提供一层类POSIX的文件访问接口，通过这个接口去读取文件内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.43153846153846154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4Yaq7mjrnOmSTPLf4reo4g3hCCOaRDwLhOdXpVk9wHhmRjRBq3XevEaDYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1300&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;归档文件的Meta里内存储了每个子文件的偏移和长度等元信息。读取时，先加载归档文件的Meta，只需要一次交互即可拿到所有子文件元信息，交互次数降低数百倍。为进一步加速，ADB在存储节点的内存和SSD上分别开辟了一小块空间缓存归档文件的Meta，加载过即无需再访问OSS获取元信息。同时，归档后只需一个输入流便可读取所有子文件数据内容，避免为每个子文件单独开启输入流的开销。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;数据访问优化&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;查询中，无论是扫描索引，还是读取数据块，都需要读取OSS上文件的内容，而OSS无论访问性能还是访问带宽都有限。为加速文件内容的读取，ADB存储节点会自动利用SSD上的一块空间做数据Cache，且Cache的上层提供了类POSIX的文件访问接口，数据扫描算子（Table Scanner）可以像访问普通文件一样访问Cache中的内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5061538461538462&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naI32Z2iaDLXubIdwe6ibx4YaqwIGkEXcRibMS0leY3gx7YUkyZuyaOPovqP1ddATDMjLxYo5h3iaicz7DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1300&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;查询中对OSS的所有访问（索引、数据等）都可借助SSD Cache加速，只有当数据不在Cache中时才会访问OSS。针对这块Cache，ADB还做了如下优化：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着企业数据量的不断增长，存储成本成为企业预算中的重要组成部分，数据仓库作为企业存储和管理数据的基础设施，通过分层存储技术很好的解决了企业中存储成本与性能的平衡问题。对于分层存储技术中的关键挑战，本文以云原生数据仓库AnalyticDB MySQL为原型，介绍了其如何通过冷热策略定义，热分区窗口，文件归档，SSD Cache来解决冷热数据定义，冷热数据迁移，冷数据访问优化等关键问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;关于我们&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;AnalyticDB MySQL是阿里巴巴自主研发，经过超大规模以及核心业务验证的PB级实时OLAP数据仓库。AnalyticDB MySQL存储团队致力于实现全球领先的云原生数据仓库存储服务，提供云原生、实时化、高性能、低成本、安全可靠的企业级数仓存储能力，通过持续不断的自研存储技术积累和突破，帮助数以万计的用户享受云原生实时化分析能力，实现数据价值在线化。欢迎投递简历到 bowen.zheng@alibaba-inc.com，期待与你共同打造世界一流的数据仓库存储。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;岗位描述&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;弹性存储方向，研发计算存储分离架构下分布式强一致、冷热分层、弹性扩缩、一写多读、多租户等云原生数据库基础能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储引擎方向，研发高效行存、列存和智能化索引，结合近存储计算技术探索极致分析性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在线检索方向，研发百万并发毫秒级在线检索引擎，打造核心业务链路的高并发、高可靠、低延迟和稳定性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据库前沿技术的调研分析与落地，包括新硬件、多租户、HTAP、CloudNative数据库架构演进等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;岗位要求&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;熟练掌握C/C++或Java编程，熟悉计算机体系结构、Linux操作系统、数据结构及算法等基础知识。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;熟悉数据库内核架构，有数据库存储引擎、事务引擎、行列存及索引等内核开发经验者优先。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;熟悉大数据系统，对Hadoop生态Orc/Parquet/Kudu/Spark/Hudi/Kylin中一个或者多个有深入实践和开发经验者优先。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;熟悉开源OLAP系统，对Clickhouse/Greenplum/ElasticSearch中的一个或多个有深入实践和开发经验者优先。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对分布式一致性有深入理解，熟悉Raft/Paxos等分布式共识算法或有深入实践经验者优先。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;良好的沟通和团队协作能力，有一定的深入研究能力，对技术有好奇心，对性能优化有极致的追求者优先。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;工作地：杭州、北京&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;免费领取&lt;strong&gt;&lt;span&gt;电子书&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《阿里云技术面试红宝书》&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书公开30道阿里云技术面试真题，含云原生、大数据、IoT、数据库等领域，精准回顾相关知识点及考察要点，间接地与技术大牛们学习，温故知新！&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;扫码加阿里妹好友&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;回复“红宝书&lt;/span&gt;&lt;span&gt;”获取&lt;/span&gt;&lt;span&gt;吧~&lt;span&gt;(&lt;/span&gt;&lt;span&gt;若扫码无效，可通过&lt;/span&gt;&lt;span&gt;微信号alimei4、alimei5、alimei6、alimei7直接添加&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naL8IbUFicUtMrdMwwUmawhUkKhoPB9Fbjo3NqH9WyXCqKMtyWpRX0Iaewf6NeGkIxB8ALgJYIyHO9Q/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>384a231cf5da8868f119653aa578b097</guid>
<title>除了甘特图，你还应该了解些什么软件项目管理知识</title>
<link>https://toutiao.io/k/0hklbup</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;A bad plan is better than no plan.&lt;/p&gt;&lt;p&gt;坏计划也好过没有计划。--彼得·蒂尔《从0到1》&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在软件开发工程中，很少会有单打独斗的程序员。这是因为现代较常见的软件项目通常都非常复杂，所要求的人力、资源、时间也比较多，仅由一个开发者来完成大型软件项目无异于 “愚公移山”。因此，&lt;strong&gt;「软件开发通常离不开团队协作和项目管理」&lt;/strong&gt;。所谓项目管理（Project Management），简单来就是有序的组织、规划、执行并完成项目中各个任务的一种方法论。当然，实际项目管理的范畴还远不止这些，通常还会涉及资源调配、优先级制定、进度追踪等。它是工业革命的产物，也是现代管理学的分支，它能够大幅提高工程完成效率以及成功率。本文讨论的主要是软件项目管理，相较于传统的建筑工程、机械工程等项目管理有很大的不同。早期的 IT 项目管理来自于建筑工程等传统项目管理方法论，在信息时代早期扮演了重要的角色，大幅提高了软件开发和协同效率。然而，随着 IT 行业高速发展，消费者产品需求瞬息万变，市场形势变得越来越不确定（Volatile），传统的软件项目管理模式已经不能再满足软件开发需求。因此，现代软件开发模式，例如敏捷开发（Agile Development），应运而生，成为了很多互联网企业的首选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统项目管理模式（例如瀑布流）有什么弊端？现代项目管理模式（例如敏捷）又有什么改进？我们是否应该完全摈弃瀑布流模式，全面拥抱敏捷开发？作为一个程序员，是否应该掌握一些项目管理知识以及相关工具？作为一个团队领导，应该如何制定项目管理流程保证开发效率和质量？如果读者有类似上述问题的疑惑，本篇文章将为您详细分析和解答。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;传统方法论&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文所说的传统项目管理模式，是指历史较长、更注重框架与方法论、同时也相对更严格的项目管理框架。比较典型的传统软件项目管理模式是&lt;strong&gt;「瀑布流开发模式」&lt;/strong&gt;（Waterfall），这是很多传统软件项目采用的开发模式，其中涉及到的工具&lt;strong&gt;「甘特图」&lt;/strong&gt;也是广为人知，甚至成为了项目管理的标志；另外比较流行的传统项目管理框架有美国的 &lt;strong&gt;「PMBOK」&lt;/strong&gt;（全称 Project Management Body of Knowledge），这是一本项目管理指南，是由全球项目管理会员组织 PMI 编辑发布，也是专业项目管理认证 PMP 的基础，它基本上可以看作是项目管理中的 “驾驶执照”；英国政府发布的 IT 项目管理认证 &lt;strong&gt;「PRINCE2」&lt;/strong&gt; 跟 PMBOK 一样，也是全球权威的软件项目管理框架，比较适合大型项目；此外，还有注重质量管理的 &lt;strong&gt;「6 Sigma」&lt;/strong&gt;，这是跟其他方法论完全不一样的方法论，强调质量优先，比较适合于制造业等需要高精度质量控制的行业。本文不打算介绍所有的项目管理方法论，想详细了解的读者可以参考 &lt;span&gt;Project Manager 相关介绍&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;瀑布流开发模式&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓瀑布流开发模式（Waterfall），从字面上很容易理解：整个开发项目由很多任务及子任务组成；每个任务有对应计划的开始和结束时间；任务之间通常有依赖关系以及先后顺序；如果将任务的计划执行时间在 &lt;strong&gt;「甘特图」&lt;/strong&gt;（Gantt Chart）上可视化出来，长得就跟瀑布流一样。下面是一个典型的项目管理甘特图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5GbNEibVx8IgBoZK3fgTeTm1mTpNamujDWpR5hWEmS34e0Qo8Nz4CuvmQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2000&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;waterfall-gantt-chart&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的甘特图反映了软件项目的系统开发生命周期（SDLC，全称 System Development Lifecycle），其中包含需求分析（Requirements Analysis）、系统设计（System Design）、开发（Development）、测试（Testing）、验收（Closing）等多个阶段。需求分析通常在软件项目的最初始阶段，而测试与验收一般在项目的最后阶段。在瀑布流开发模式中，项目任务一环扣一环，紧密联系，项目管理者可以在甘特图中一目了然的看到看到项目的全貌。通过规划项目任务和设计甘特图，我们似乎期待可以准确预测项目周期与完成时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，“理想很丰满，现实很骨感”。&lt;strong&gt;「瀑布流开发模式最大的问题来自于它对不确定性的低容忍度」&lt;/strong&gt;。如今市场环境快速变化，商业机会转瞬即逝，企业的生存压力已经不允许开发团队花大量的时间在需求分析和系统设计上。很多传统软件企业花几个月甚至一年的时间在分析和设计阶段，又花几个月甚至几年的时间开发、测试和上线产品，最后却发现终端用户不满意甚至拒绝使用，大量的时间成本和人工成本打了水漂。这是很多 IT 企业用血换来的教训。现在的企业更希望有更灵活的软件项目管理框架来满足业务发展。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;PMBOK&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说过，PMBOK 支撑的 PMP 认证是&lt;strong&gt;「项目管理行业中的 “驾驶执照”」&lt;/strong&gt;，这是因为 PMBOK 中定义的管理框架几乎适用于任何一个行业。它诞生于上个世纪 70 年代，经过几十年的发展到如今已经发布到第 6 版，到如今可以说是最知名和最权威的项目管理指南。简单来说，PMBOK 把项目管理概括为 10 个领域，通过对这 10 个领域的系统管理，可以有效的控制整个项目的进度、成本、资源等因素，保证项目成功，最大限度控制风险。希望详细了解 PMBOK 的读者可以参考 &lt;span&gt;PMI 官网&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PMBOK 不只是适用于 IT 行业，各行各业都可以运用它的项目管理框架，因此是一个大而全的方法论。包括像之前提到的瀑布流开发模式，也是 PMBOK 中部分领域的实现方法而已。它们二者并不互斥。同样，PMBOK 的方法论涉及的概念较多，因此也显得比较正式，其中的工作说明（SOW，全称 Statement of Work）、Charter、Closing Report 都可以作为项目的正式文档，因此在大型项目中使用得较多。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;其他&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;笔者没有深入接触过 PRINCE2 和 6 Sigma，因此就不详细展开了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;敏捷开发模式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在如今 IT 行业快速发展的大背景下，已经很少有 IT 从业者没听说过敏捷开发（Agile Development）了。敏捷开发也如字面上的意思，是非常注重&lt;strong&gt;「灵活性」&lt;/strong&gt;和&lt;strong&gt;「交互性」&lt;/strong&gt;的项目管理方法。在实践敏捷管理的过程中，项目团队可以跳出传统项目管理框架中条条框框，变得更加 “敏捷”。那些看似不可变更的目标、截止日期甚至是交付物，在敏捷框架下都可以随实际情况灵活调整。就像没有重型铠甲和大规模辎重束缚的蒙古射骑兵，敏捷开发团队可以快速适应战场环境的变化，从而灵活而轻松的攻破敌人的防线。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6704491725768321&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5GbjwBuTOQp8C4af0KooxDQCddk3I6zsFib1icYPia3ZLce5boW5nfWrUezQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2115&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;agile-software-development&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;敏捷开发特点&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敏捷开发有三个比较大的特点。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「由开发周期驱动」&lt;/strong&gt;。每个周期通常持续 1-4 周，从而保证每个周期的交付物都可以被频繁评估，从而让开发精力聚焦于产品优化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「基于迭代周期」&lt;/strong&gt;。每个迭代周期通常是固定的，因此周期结束时总会有一个有效的交付物。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「对客户开放」&lt;/strong&gt;。客户可以在周期结束后看到半成品，从而提高了透明性与交互性。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;敏捷开发意义&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敏捷开发与传统开发模式的最大不同点，是敏捷开发不要求在项目执行前提前安排整个项目任务的执行计划。在敏捷开发中，整个项目被分割成多个更可控的阶段，在阶段完成处设定项目&lt;strong&gt;「里程碑」&lt;/strong&gt;（Milestone），而在里程碑达成时客户（Customer）及相关干系人（Statekholder）可以根据阶段交付物对半成品（WIP，全称 Work in Progress）提供反馈，为下一个阶段的开发提供参考意见。在这样不断的 “规划 -&amp;gt; 开发 -&amp;gt; 反馈 -&amp;gt; 规划 -&amp;gt; ...” 周期性的开发模式中，最终交付的产品有很大可能会&lt;strong&gt;「跟客户期待的更加接近」&lt;/strong&gt;，从而&lt;strong&gt;「提高客户的满意度」&lt;/strong&gt;，也&lt;strong&gt;「避免了大量的资源浪费」&lt;/strong&gt;。在全球畅销书《精益创业》中，作者提到：企业的最大浪费是来自于 “返工”。因此，采用敏捷开发的模式，项目团队可以&lt;strong&gt;「有效规避需求变化带来的风险」&lt;/strong&gt;。这让实践敏捷开发的企业具有&lt;strong&gt;「反脆弱性」&lt;/strong&gt;，能够在不断的迭代和学习中获得适应环境不确定性的能力。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;迭代/时期/冲刺&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敏捷开发中的一个核心概念是迭代（Iteration），也叫时期（Phase）或冲刺（Sprint）。这是敏捷开发中的&lt;strong&gt;「最小时间单元」&lt;/strong&gt;，通常持续 1-4 周。反复迭代的过程其实也就是一个不断优化产品的过程。在迭代周期结束时，项目组通常会完成一部分或整个（可能不太完善的）产品，同时也会收到来自客户或相关干系人的反馈，从而为下一次迭代提供参考。例如，在一个广告投放后台管理系统开发项目中，第一阶段开发团队根据初期的简单需求开发出了一个非常基本的后台系统，只有投放广告和查看数据的核心功能；项目组将第一阶段的交付物在Sprint 1 总结会上呈现给终端用户，并且告知这不是最终成品；终端用户根据实际使用场景提出一些改进意见，或汇报一些 Bug；在接下来的阶段中，项目组就可以根据 Sprint 1 的反馈进行调整，将优化任务和 Bug 修复任务安排在 Sprint 2；然后这样不断迭代下去。这样一来，每个迭代完成之后，最终的交付产品会越来越接近最优的状态。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;相关角色&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在敏捷开发中，有几个重要角色。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「产品负责人（Product Owner）」&lt;/strong&gt;。主要负责与客户、相关干系人以及开发团队沟通，制定用户故事（User Stories），以及需要持续与开发团队一起协作，保证开发进度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「开发团队成员（Development Team Members）」&lt;/strong&gt;。项目任务实施者，通常是开发者、设计师、测试人员等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「流程管理员（Scrum Master）」&lt;/strong&gt;。负责整个 Scrum 流程在项目中顺利实施和开发，解决客户与开发者的沟通障碍。这个角色可以是跟产品负责人重叠的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;「相关干系人（Stakeholders）」&lt;/strong&gt;。不一定直接负责产品，但可能间接参与到产品的使用流程中。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43123543123543123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5GbKJAPrEydwYwNZ6f6EpLJHg4jBrNlpa3YmlFhYbrC1MaoFBJIcAVjHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;858&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;agile-scrum-methodology&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;每日站会&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每日站会（Daily Stand Meeting）是项目组成员每日面对面沟通的一个持续大约 15 分钟的短会，主要目的是追踪项目开发任务进度，解决任务执行过程中遇到的问题，以及协调资源等。不要简单的以为站会就是 “站着开会”。首先，大家站在一起，能够让项目组成员集中注意力，将重心聚焦于项目任务上来；其次，较短的会议时间能够让整个会议不偏离主题，而且更能够节省时间，提高工作效率；另外，每日站会要求项目组成员每人都需要发言，这提高了团队成员的参与度。下图是一个每日站会的例子。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6320582877959927&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5GbhwFL9hKXXBZz10JDN8n6n9W4HbIic9icEQsE9wtd5e17F6CcQ1icfOlSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;549&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;scrum-stand-meeting&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;看板&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看板（Kanban）是丰田 JIT （Just in Time）精益生产中的管理工具。它为项目任务设置了不同的状态，通常是 Backlog、To Do、In Progress、Testing、Done 这几个状态。而每个任务会预估一个完成所需时间，通常是按小时计。另一个重要的任务属性是优先级，在积压阶段（Backlog），开发团队成员需要根据各自的经验和专业知识判断该任务所需要的时间，以及定义任务的优先级。不同类别的任务用不同的颜色标记。这样的看版在每日站会中能发挥很大作用，因为它清晰直观，能够一目了然。当任务改变状态时，例如开发者从 Backlog 取出一个任务卡片，将会被直接放在 To Do 中。下图是一个看板示意图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.52453653217012&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5Gb0KWM3iaMbAeLWI1hIfy2aMnSUPBnDHuernpMlrnVp6wIwtZ2NiaAxRKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;kanban&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，我们现在有更现代化的工具来管理看板的流程，不用人工设计一个看板或购买大量的贴纸。一些比较热门的工具包括 &lt;span&gt;Trello&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;、&lt;span&gt;禅道&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;、&lt;span&gt;Teambition&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;等。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;燃尽图&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;燃尽图（Burndown Chart）是一个追踪项目进度的有效工具。它是一个随时间递减的曲线。横轴是持续时间，纵轴是剩余故事价值总数、任务预计总工时等。燃尽图通常有两个曲线：一个是预估的理想下降曲线，通常是随时间线性下降的；另一个是实际下降曲线，表示在某个时间实际剩余的价值或工时等。如果实际曲线在某时刻高于理想曲线，则表示目前进度是落后的；相反，如果实际曲线低于理想曲线，说明进度是领先的。下图是一个燃尽图示意图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4996501049685094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5Gb6JOosFX2iaDTTBiamP4Gn2XP1UI2FyMA0C9xvMG0sThaRAtbPoXblXoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1429&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;burndown-chart&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;用户故事和项目任务&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在敏捷开发中，用户故事（User Story）跟项目任务（Project Task）比较容易混淆。它们分别是站在不同角色的角度上描述的。用户故事简单来就是的终端用户的使用场景。它通常是由项目负责人向客户或终端用户收集整理而成，并会站在业务的角度制定各个故事的&lt;strong&gt;「价值」&lt;/strong&gt;（Value）以及&lt;strong&gt;「优先级」&lt;/strong&gt;（Priority）。而项目任务是开发团队根据用户故事的描述，结合实际系统架构、技术环境等因素，分解出来的实际开发任务，相对于用户故事来说更加具有落地性。因此，可以说项目任务是为了实现用户故事而制定的。用户故事的价值和优先级通常需要结合实际业务背景以及商业价值，因此需要由产品负责人来主导制定；项目任务通常更加偏技术层面，因此需要由对技术模块比较了解的开发人员制定。这些通常都可以在初期会议以及里程碑总结会议来完成。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Scrum vs 极限编程（XP）&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于了解过敏捷开发的读者来说，可能已经听说过 Scrum，甚至将 Scrum 等同于敏捷。这个看法从技术层面上来说是不确切的。Scrum，包括之后会聊到的极限编程（XP，全称 Extreme Programming），只是敏捷开发方法论下的一种指导框架。它们的目标都是在保证项目质量的条件下，尽可能增强灵活性；很多专业术语，例如用户故事、项目任务、迭代，都是一致的。它们不同点主要在于如何执行每一次迭代或冲刺。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Scrum 中，每一个迭代中的项目计划通常是不允许变更的，一旦在迭代初期决定后，用户故事和项目任务就不允许改变了。只有当该迭代结束之后，才可以根据实际反馈做相应调整。这样做的好处在于，项目团队成员可以在每一次迭代中集中精力完成各自的任务，保证实现功能的质量和效率，以追求该迭代周期完成之后产品的稳定性和可靠性。但这样做也有缺点，那就是相对来说不够 “敏捷”，因为一旦项目计划确定，就不允许加入新的需求或更改已有需求。另外，Scrum 的迭代周期一般是 2-4 周，相对来说比较长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在 XP 中，未实现的用户故事则是可以被新的用户故事替换的，前提是实现这两个用户故事的工时是相等的。而在用户故事的优先级上，XP 更加严格，它要求实际项目任务要严格遵守用户故事的优先级。另外，XP 在软件实施过程要求也更为严格，一般需要采用测试驱动开发（TDD，全称 Test Driven Development）、自动化测试（Automated Testing）、结对编程、重构等相对严格的质量控制措施。因此，虽然 XP 在用户故事上显得比较灵活，但在软件实施流程上要求非常严格，因此对开发团队的技术和经验要求也更高。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;其他&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敏捷开发还包括不少其他方面的元素，本文限于篇幅原因就不深入介绍了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何选择项目管理模式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.65625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vh4PtSfBxFOKnJqehfF2uTwjjPFlia5GbID7evg3uickmP5hF2olxrJGibhI1VbXicfCiam7A1zUsCMVsP3XgOeyYbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2560&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;project-management&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际工作中，我们会遇到大大小小的项目需求，如何选择项目管理模式是一个重要问题。但可惜的是，目前来说没有一个完美的解决方案，能够适应所有软件类项目。本文虽然花了大量的篇幅介绍敏捷开发，但并不意味着敏捷开发是全能的。传统的瀑布流开发模式有很多弊端，但它也有不少适用场景，例如政府 IT 项目，或一些专业性很强的开发项目。而且，在做项目管理模式的选择前，还需要&lt;strong&gt;「充分了解一些表面上看不那么明显的隐性因素，例如企业文化、组织架构、行业背景、人力资源、团队经验等等」&lt;/strong&gt;。因此，笔者认为，&lt;strong&gt;「敏捷开发并不是解决一切问题的万能钥匙」&lt;/strong&gt;。我们在做实际选择前应该三思而后行。甚至在一些情况下，还需要根据实际情况综合各种管理模式做一定程度的调整，让其变得更加适合当前的项目背景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;敏捷开发的优势非常明显，它能够&lt;strong&gt;「更加适应快速变化的商业和市场环境，帮助企业克服一些不确定性因素」&lt;/strong&gt;，从而能够交付更多对用户有价值的产品。而且，敏捷开发通常比起传统的瀑布流开发来说，省略了很多不必要的文档以及繁琐的沟通流程，因此通常会&lt;strong&gt;「花更少的时间完成更多的事情」&lt;/strong&gt;。但是，敏捷开发相对于传统的瀑布流开发来说显得不那么正式，有点像 “游击队” vs “正规军” 的感觉。传统项目管理模式，例如 PMBOK，有&lt;strong&gt;「非常完备的流程管理和文档管理，对于长期性的大型项目来说是更为合适的」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，笔者认为，&lt;strong&gt;「如果你的市场环境和客户需求会频繁变化，而这种不确定性会大幅度影响企业的财务健康，那你千万不要犹豫，就选敏捷开发」&lt;/strong&gt;。相反，&lt;strong&gt;「如果市场环境变化没那么快，而客户需求相对来说比较固定，另外还具有较高的合规性以及正式文档要求，例如政府 IT 项目，那么你可以选择用传统的项目管理模式，例如瀑布流开发模式」&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章是一个关于软件开发项目管理模式的科普文。我们从传统的项目管理开始，介绍了一些常见的方法论，例如瀑布流、PMBOK 等，并分析了它们的不足。然后，根据传统项目管理方法论的缺点，引入了现在比较流行的敏捷开发，介绍了敏捷开发的特点、意义、核心概念等等。最后，本文根据传统方法论以及敏捷开发的比较，得出了传统方法论和敏捷开发分别适用的项目场景，认为敏捷开发适合更易变的市场环境，而传统项目管理适合需求变化不大的项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，敏捷开发的概念主要强调了灵活性与反馈，它能够给我们带来一些启示。读者可以试着回答一下这些笔者联想到的问题：身型巨大的恐龙为什么会灭绝？为什么说猫有九条命？三体人为什么能够在极端环境下生存？曾经的龙头企业（例如柯达）为何依然会倒下？曾经只在校园推广的 Facebook 为何能够成为社交巨无霸？笔者不打算一一讲解，相信读者可以根据自己的理解做一些判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或许部分程序员认为项目管理只是项目经理的事情，我需要做的只是写一手好代码。但笔者始终认为：&lt;strong&gt;「只会写代码的程序员叫码农，不止会写代码的程序员才叫工程师」&lt;/strong&gt;。因此，我们开发人员还是应该多了解一些技术以外的知识，例如今天介绍的项目管理知识。否则，今后能写代码的人工智能或许会抢大家的饭碗。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;社区&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您对笔者的文章感兴趣，可以加笔者微信 tikazyq1 并注明 &quot;码之道&quot;，笔者会将你拉入 &quot;码之道&quot; 交流群。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Project Manager 相关介绍: &lt;span&gt;https://www.projectmanager.com/blog/project-management-methodology&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;PMI 官网: &lt;span&gt;https://www.pmi.org/pmbok-guide-standards&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Trello: &lt;span&gt;https://www.trello.com&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;禅道: &lt;span&gt;https://www.zentao.net&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Teambition: &lt;span&gt;https://www.teambition.com&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>