<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e7942c95b96336821a87edc76a675a5d</guid>
<title>[译] Python 官方研讨会：彻底移除 GIL 真的可行么？</title>
<link>https://toutiao.io/k/nolkib0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;作者：Łukasz Langa&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;译者：豌豆花下猫，来源：Python猫&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;原文：&lt;/span&gt;&lt;span&gt;https://lukasz.langa.pl/5d044f91-49c1-4170-aed1-62b6763e6ad0&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一年一度的 Python 核心开发者 sprint 会议期间，我们与 Sam Gross 举行了一次会议，他是 nogil 的作者。nogil 是 Python 3.9 的分叉版本，移除了 GIL。这是一份非正式的会议纪要。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;简单总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sam 的工作证明了以他的方式删除 GIL 是可行的，即生成的 Python 解释器的性能良好，并且可以随着 CPU 内核的增加而扩展。为了最终达到正面的效果，还需要有其它看似无关的解释器工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前还不可能将 Sam 的更改合并到 CPython，因为他的更改是针对 3.9 分支进行的，便于用户拿当前 pip 可安装的库和 C 扩展对 nogil 解释器进行测试。如果要合并 nogil，就不得不基于 main 分支进行更改（目前 main 分支已规划为 3.11）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不要指望 Python 3.11 会移除 GIL。&lt;/strong&gt; 将 Sam 的工作合并到 CPython 本身将是一个艰苦的过程，但这仅仅是所需的一部分：在 CPython 移除 GIL 之前，需要为社区制定一个良好的向后兼容的迁移计划。这些都还没有计划好，所以我们认为时机还没到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些人在谈论如此巨大的变化时提到了 Python 4。核心开发人员当前没有计划发布 Python 4，事实上恰恰相反：我们正积极地避免发布 Python 4，因为 Python 2 到 3 的转换对社区来说已经足够困难了。现在考虑或者担心 Python 4，肯定还为时过早。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;介绍 nogil&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sam 发布了他的代码，同时还有一篇详细的文章，解释了该项目的动机和设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;nogil 代码地址：&lt;/span&gt;&lt;span&gt;https://github.com/colesbury/nogil&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他的设计可以总结为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sam 的设计文档包含了这些设计元素的细节，包含线程状态与 GIL API 的信息，以及解释器和字节码的其它修改（用带有累加器的寄存器 VM 替换堆栈VM；通过避免创建 C 语言的栈帧来优化函数调用；ceval.c 的其它变更；标签指针的使用；LOAD_ATTR、LOAD_METHOD、 LOAD_GLOBAL 操作码的线程安全的元数据；等等）。我建议你完整地阅读它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python猫注：上文出现的“stop-the-world”，有时缩写成“STW”，这是多数垃圾回收器的工作机制，表示在垃圾回收器工作时，其它线程全部暂时挂起，从而保证引用对象的准确更新，其缺点是对程序性能有所影响；“MRO”是“method resolution order”的缩写，即“类方法解析顺序”，表示在所有基类中搜索成员方法时的次序。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;早期的基准测试&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 pyperformance 基准测试套上，&lt;strong&gt;作为概念验证的 nogil 解释器比 3.9 快 10%&lt;/strong&gt;。据估计，在解释器的全部修改中，移除 GIL 会导致性能变慢 9%，主要是因为有偏见的引用计数和延迟引用计数。换句话说，Python 3.9 加上 nogil 的所有更改，但不移除 GIL 本身，可以快 19%。然而，这样并不能解决多核的可伸缩性问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顺便说一下，nogil 的一些更改，比如将 C 调用栈与 Python 调用栈解耦，已经在 Python 3.11 中实现了。事实上，我们有针对当前 main 分支的初步的基准测试 ，结果表明在单线程的性能上，&lt;strong&gt;Python 3.11 比 nogil 快 16%&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要有更多的基准测试，特别是使用 Larry Hastings 在对 Gilectomy 进行测试时使用的基准测试（当时基于 Python 3.5，后来移植到 3.6 alpha 1）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python猫注：gilectomy 是由 GIL ectomy 两个单词组合而成，ectomy 是一个医学上的术语“切除术”，可见这个项目的用意跟 nogil 是一样的！这是 5-6 年前的项目，作者曾在 PyCon 大会上做过几次分享。但这个项目反而导致 Python 总体性能下降了，最后无疾而终。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;gilectomy 项目作者在 PyCon 上的分享：&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015年分享：https://www.youtube.com/watch?v=KVKufdTphKs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年分享：https://www.youtube.com/watch?v=P3AyI_u66Bw&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2017年分享：https://www.youtube.com/watch?v=pLqv11ScGsQ&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sam 提醒我们，一个用户程序在无 GIL 的 Python 上的伸缩性实际上取决于最终的代码。如果不进行测试，就不可能预测代码在没有 GIL 的情况下表现如何。因此，如果提供一个单一的数字来说明无 GIL 的 Python 速度会提升 x 倍，这是不负责任的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;会议中向 Sam 提出的问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了清晰易懂，这里的问题基于会议上的内容进行了重新排序。答案是由 Sam 的回答转述而来的，并得到了他阅读草稿后的认可。要注意的是，核心团队的成员可能对其中一些主题有其它观点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：有哪些可感知的风险是阻碍 nogil 项目合入到 CPython 中的？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前的代码库已经证明了它在技术上的可行性。它可以运行，而且比普通的 CPython 解释器和 Gilectomy 项目更具有可伸缩性和好性能。我在该项目中投入了将近两年的全职工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这完全取决于社区对 C 扩展程序的改造程度，以确保它们不会导致解释器彻底崩溃。然后，剩下的长尾就是社区要以一种既正确又可扩展的方式在应用程序中采用自由线程。这两个是最大的挑战，但我们必须乐观应对。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你打算如何改进你的工作？对 commit 次序有什么建议吗？你将如何保持你的工作与 main 分支的同步？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sam 目前正在重构他的工作，最初是基于 3.9.0a3，将匹配 3.9.7 最终版本。这项工作的一部分是将 commit 重构为逻辑单元，以便更好地说明哪些内容需要更改（哪些地方改了，以及为什么要改）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前还不计划把这项工作移到 main 分支（未来的 3.11），因为这个分支太不稳定了。相比之下，3.9 有大量已发布的可通过 pip 安装的库和 C 扩展，可用于测试。这使得 Sam 能够评估该项目与真实世界的第三方代码的行为。基于 main 的修改将花费不少时间，而这些时间本可以花在改进无 GIL 的解释器上，所以，现在就基于主分支的话，还为时过早。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将工作进行分割然后再合并是可行的，但必须记住，许多更新需要在串联起来时，性能才会提升。单独而言，它们会导致（暂时的？）性能下降。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心开发者注：我们现在不能合并对 3.9 分支所做的更改。在项目的这个阶段使用 3.9 是有意义的，但关键的是要将它分割成可消费的数据块，然后一个一个地合并到 main 分支中。一块一块地做，很有可能会损害性能，但这是唯一现实的集成途径。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：可以只引入寄存器 VM 和编译器而不做其它更改吗？在不改变引用计数或 GIL 的情况下使用寄存器 VM 会有什么特殊的困难吗？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VM 使用延迟/永生的引用计数。可以将其转换为只使用经典的引用计数，但最终结果的效率还不清楚（例如，出于性能考虑，堆栈上的所有对象都使用了延迟引用计数）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：跟前一问相反的问题：只引入 nogil，而不使用新的寄存器 VM，会有什么困难呢？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然新的 VM 只提高了性能，而不是准确性，但它也提高了可伸缩性，使得无 GIL 的 Python 可以充分利用 CPU 内核而不发生争用。因此要使用 3.11 解释器也是可行的，但最好保留一些寄存器 VM 的设计思想，这对可伸缩性和线程安全很重要。这需要做大量的工作。但是将寄存器 VM 更新成跟 main 分支一样（以及修复遗留的 bug），也需要大量的工作。这两种选择都是可行的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：对于那些不希望自己的代码被其它线程并行运行的 C 扩展，有什么建议么？在适应新的自由线程环境之前，难道不需要 CPython 给它们提供一些 API 来弥补差距吗？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这需要花时间。目标是渐进式采纳，最终推广至大多数 C 扩展。GIL 可以作为解释器启动时的一个选项。如果没有启用 GIL，并且 C 扩展不支持新的操作模式，可能就要产生告警或者不让其导入。Python 社区不得不适配 C 扩展，让它们适应无 GIL 的模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为概念验证的 nogil 项目，默认使用无 GIL 模式，并接受任何 C 扩展。如果它被 CPython 采用了，那么在开始时默认应该启用 GIL（要求在启动 Python 时使用 &lt;code&gt;-X nogil&lt;/code&gt; 禁用 GIL），以便让第三方库做适配。然后，在发布几个版本后，默认值再切换成无 GIL 的模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然要移植全部东西并不容易（并行是很难的），但在多数情况下，移植并不会很难，特别是对于封装外部库的 C 扩展来说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心开发者注：有大量的“暗物质” Python 代码（和 C 扩展）不是开源的。我们需要小心不去破坏它们，因为它们的用户可能无法做出所需的更改，或者向上游报告问题给我们。特别地，有些 C 扩展使用 GIL 来保护它们自己的内部状态。这是一个很大的担忧，可能是采用无 GIL Python 的一个很大的障碍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你会添加一个 PEP-489 的“插槽”么，以便 C 扩展用来表示其支持 nogil，这样当遇到不支持 nogil 的库时，就不让它导入？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人也提过，这可能是一个好主意，但我不完全清楚这意味着什么。选择无 GIL 模式并不能保证没有 bug。相反，在默认情况下，我们运行所有的扩展（现在的 nogil 就是这么做的）。不兼容的扩展可以使用 PyInit 模块的代码，主动地询问解释器是否启用了 GIL，如果不兼容的话，就在导入时产生警告甚至异常。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：在运行期启用 nogil 是一项长期可行的选择，还是过渡性的功能呢？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理想的结局是 CPython 不再有 GIL，句号。然而，预计将有一个漫长的社区适应期。我们希望避免从 Python2 到 Python3 过渡时的断裂。准确地说，我们希望过渡得越平滑越好，即使这意味着需要延展更长的时间。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q: 确认一下，最终状态是只有 nogil，并且不支持再开启 GIL 么？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前我们还不确定。理想的结局是只存在一个无 GIL 的 Python，但尚不清楚这能否实现。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：如果这些特性标志会持续很长一段时间，这是否意味着我们需要大幅增加测试矩阵？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的，测试矩阵需要加倍。然而，测试无 GIL 版本可能是判断经典的 GIL 版本是否有效的一个很好的预测器。有必要偶尔（每晚？）运行启用了 GIL 的测试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心开发者注：如果不做测试，代码将加速退化。在 CPython 中，由于需要运行时间（例如测试引用泄漏时），我们不会在每次更改时都运行所有测试，但如果有更改导致每日测试失败，我们会立即回退更改，因为在已经失败的构建点之后，很可能会出现其它的回归问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你认为多个 Python 解释器并行运行，每个解释器一个 GIL 怎么样？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python猫注：给大家科普一下这个问题的背景，PEP-554 提议实现多解释器来解决 GIL 的问题。这是在 2017 年提出的，受到挺多关注。在 2019 年时，我曾翻译过《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247484233&amp;amp;idx=1&amp;amp;sn=85a59aaf933c8b048c7f20e532680ae7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Has the Python GIL been slain?&lt;/a&gt;》介绍它。但是，目前该提案依然是草稿状态，具体的开发情况不甚明朗。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跟无 GIL 提案相比，这既是互补的，又是相互竞争的。在无 GIL 解释器中也可以支持副解释器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前还不清楚多解释器方案能否实现。有了 nogil，就不需要担心跨线程共享对象，也不需要担心 C 扩展的兼容性，因为有了多解释器，就没有任何状态是真正全局的，因此需要特别地隔离。对于可变对象，在多解释器之间传递时，需要某种形式的序列化/反序列化。对于不可变对象，解释器可能会添加特殊的支持，但如果它们不是已知的不可变的内置类型，用户代码就需要适配这些对象。这是从 PyTorch 的相关工作中得到的启发，它使用了某种形式的多解释器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于我最感兴趣的用例实际上是科学数据（PyTorch 训练工作流），直接而有效地共享数据的能力对多线程性能至关重要。如果采用多解释器，这种共享只能在 C 扩展级别上开启，与无 GIL 的 Python 相比，将导致更多使用 C/C++ 代码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你已经详细介绍了字典和列表的实现。其它可变类型例如队列、集合、数组等等，是如何实现的呢？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nogil 是一个开发中的项目。由于字典和列表在解释器的内部运作中很普遍，所以它们的开发最多。同样地，队列的开发已经完成，但其它类型还没有。集合是下一个要覆盖的重要内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;队列非常重要，因为它被&lt;code&gt;concurrent.futures&lt;/code&gt; 和&lt;code&gt;asyncio&lt;/code&gt; 用于并发线程之间的通信。队列比字典和列表简单，它使用细粒度的锁而不是无锁读取。其它的对象很可能需要组合使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这项工作很棘手，因为在获取和释放锁时需要小心，例如 Py_DECREFs 是可重入的。还可以考虑使用更“粗粒度”的锁，但当然了，这些锁都有死锁的风险。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：nogil 有多依赖 mimalloc? 如果我们把它作为一个编译期选项，可以用或不用它，那么使用平台的 malloc 来代替没有 C 预处理器地狱的低性能构建是否可行？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mimalloc 不仅仅是用于线程安全。它对于启用字典的无锁读取是必要的，还支持高效的 GC 追踪。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;mimalloc 的维护者对显式地支持 CPython 很感兴趣，并且乐意为实现这一点进行必要的更改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其它实现的 malloc 据说也稳定支持 CPython：在 Facebook 中使用的&lt;code&gt;jemalloc&lt;/code&gt;，在谷歌中使用&lt;code&gt;tcmalloc&lt;/code&gt;，尽管集成得较少，更像是默认分配器的简单替换。（Python猫注：前文提到的 mimalloc 是微软的）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心开发者注：Christian Heimes 和 Pablo Galindo Salgado 正在评估 CPython 使用 mimalloc。早期测试在平均上（几何平均数）没有性能衰退，大多数基准测试做得更好，少数基准测试做得稍微差一些。还有一些待评估的问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;mimalloc 的 API 和 ABI 的稳定性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;授权许可；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跨所有 CPython 支持的平台的可移植性，例如 stdatomic.h 仅在 C11 中可用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集成分析和检测工具（Valgrind、asan、ubsan 等等）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可能还有其它。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你的项目和 Larry 的 Gilectomy 有什么相似之处？你能利用他的项目吗？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在顶层设计上，两个项目是相似的：延迟引用计数，细粒度锁，关于返回借用的引用的挑战。没有复用 Gilectomy 的代码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：你说你的项目在顶层上类似于 Larry 的 Gilectomy。他的项目也是基于延迟引用计数。然而，他在 Gilectomy 上只得到了性能下降的结果，而你的“nogil”却有很好的性能表现。你认为这种差异是怎么回事？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切换到基于寄存器的编译器和其它优化，比如由 mimalloc 提供的无锁的字典读取，以及使用延迟引用计数来避免争用，对 nogil 的扩展性和性能都至关重要。而且，在某些情况下，Python 本身变得更快了。例如， Python 3.9 中的函数调用比 Python 3.5 的要快得多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让它支持扩展，肯定比预期要花更多的工作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：有没有可能在无 GIL 模式中加入一个（不兼容的） C 扩展或剔除它吗？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，GIL 就是一个全局锁。为了保护任意一段共享数据，它需要在所有线程上开启，包括不兼容的扩展所处的线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在已经运行的进程中，将无 GIL 的解释器切换为使用 GIL 的解释器是很棘手的（反之亦然）。最好的做法是在启动时选择：要么在进程中启用 GIL，要么不启用。如果 C 扩展没有标记为兼容，就引发警告或无法导入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者，当访问 C 扩展时，也可以“stop the world”，但这与移除 GIL 而所想达成的目的不符。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心开发者注：到目前为止，还有其它的想法需要深入探讨。有种想法是将 GIL 转换为“单写多读”锁。在这种情况下，无 GIL 的模式将获取“多读”锁，也就是说，不会阻塞其它新代码做同样的事情。而历史遗留的代码将获得一个“单写”锁，阻塞其它所有线程执行，直到锁释放。这种设计需要保留获取/释放 GIL 的 api，nogil 已经这样做了，为了告知 GC 一个线程被阻塞在 I/O 上。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：有没有可能将函数标记为非线程安全的（比如使用装饰器），并让 nogil 在运行代码时加锁，以防止其它线程调用它？（有点像临时的 GIL）&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果担心的是状态被其它线程访问，则需要锁定每一次访问。这在装饰器层面上不是特别可行。正如之前说过，条件性地为不安全的代码开启 GIL 是很难实现的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Q：用你自己的锁代替 GIL 会很困难。使用 nogil，你认为与线程相关的问题会增加么？&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不清楚。对于 C API 扩展，至少有一种好的设计模式：它们通常有类似的结构，并在单个结构中保持共享状态。目前，Pybind11 看起来与这个模式距离最远，因此用它编写的 C 扩展可能需要进行大量更改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;许多复杂的 C 扩展已经不得不处理锁和多线程，因为它们的目的是尽可能多地释放 GIL，比如 numpy。所以，也许令人惊讶的是，那些项目可能更容易迁移。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下一步工作&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这次会议之后，核心开发者们讨论了将 nogil 纳入主项目的可行性，以及这对社区意味着什么。毫无疑问，这种程度的改变必须非常小心。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在作出决定之前，我们觉得先引入它的一些代码更为可行。特别地，mimalloc 看起来很有趣，已经有一个 open 的 pull 请求了(&lt;span&gt;https://github.com/python/cpython/pull/29123&lt;/span&gt;)，旨在探索引入它。在那里可以找到基准测试的链接。&lt;/p&gt;&lt;section&gt;在个人层面上，我们对 Sam 所做的工作印象深刻，并邀请他加入 CPython 项目。我很高兴地告诉大家，他对此很感兴趣，为了帮助他成为一名核心开发者，我将为他提供指导。Guido 和 Neil Schemenauer 将帮我检视我不熟悉的解释器部分的代码。&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3dfb4ef8a5feebbfd7d9393b87e99318</guid>
<title>从头开发一个迷你 Go 语言编译器（开发中）</title>
<link>https://toutiao.io/k/k3me8pr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box-body px-5 pb-5&quot;&gt;
          &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-ugo-compiler-book-从头开发一个迷你go语言&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#ugo-compiler-book-从头开发一个迷你go语言&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;ugo-compiler-book: 从头开发一个迷你Go语言&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;本书尝试以实现 µGo 编译器为线索，尝试以边学习边完善的自举方式开发一个玩具语言。&lt;/p&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-why-凹读音wa坑的起因&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#why-凹读音wa坑的起因&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Why: 凹(读音Wa)坑的起因&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;因为坑就在那里&lt;/li&gt;
&lt;li&gt;不希望被Rxxx语言把脸摁在地上摩擦&lt;/li&gt;
&lt;li&gt;凹坑的工具差不多齐全了&lt;/li&gt;
&lt;li&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-what-µgo-例子&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#what-µgo-例子&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;What: µGo 例子&lt;/h2&gt;
&lt;div class=&quot;highlight highlight-source-go position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;package main&amp;#10;&amp;#10;import &amp;quot;libc&amp;quot;&amp;#10;import m &amp;quot;libc.math&amp;quot;&amp;#10;&amp;#10;const Pi = 3.14&amp;#10;const Pi_2 = Pi * 2&amp;#10;&amp;#10;type MyInt int&amp;#10;type MyInt2 = int&amp;#10;&amp;#10;var x = println(1 + 2*(3+4) + -10 + double(50))&amp;#10;&amp;#10;func println() int&amp;#10;&amp;#10;func main() int {}&amp;#10;&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;libc&quot;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; m &lt;span class=&quot;pl-s&quot;&gt;&quot;libc.math&quot;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3.14&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;Pi_2&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;Pi&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;MyInt&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;MyInt2&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;double&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt;))

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;println&lt;/span&gt;() &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;pl-smi&quot;&gt;int&lt;/span&gt; {}&lt;/pre&gt;&lt;/div&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-output-输出的目标格式&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#output-输出的目标格式&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Output: 输出的目标格式&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;为了跨平台和方便测试，输出LLVM汇编代码，如果以后可能会增加WASM文件。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-license-版权&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#license-版权&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;License 版权&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;学习目的可自由使用。&lt;/p&gt;
&lt;/article&gt;
        &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ea17b3646bcbec34aa32eb4d6a3549b2</guid>
<title>一文教你用 Python 对 Excel 文件进行批量操作</title>
<link>https://toutiao.io/k/cx7z0gf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body detail-content&quot;&gt;&amp;#13;
                &amp;#13;
                &lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21118d4c4e2318838068&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;工作中遇到需要需要批量处理Excel文件的情况，你还在手动一个一个地处理吗？赶紧学会下面的自动化批量处理方法，告别机械式的低效工作吧！&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;h3-01-os-&quot;&gt;&lt;a name=&quot;01 OS 库介绍&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;01 OS 库介绍&lt;/h3&gt;&lt;p&gt;OS（Operation System）指操作系统。在 Python 中，OS 库主要提供了与操作系统即电脑系统之间进行交互的一些功能。很多自动化操作都会依赖该库的功能。&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;h3-02-os-&quot;&gt;&lt;a name=&quot;02 OS 库基本操作&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;02 OS 库基本操作&lt;/h3&gt;&lt;h4 id=&quot;h4-1-&quot;&gt;&lt;a name=&quot;1 获取当前工作路径&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;1 获取当前工作路径&lt;/h4&gt;&lt;p&gt;我们在《对比Excel，轻松学习Python报表自动化》一书的第2章介绍了如何安装Anaconda，以及如何利用Jupyter Notebook写代码。&lt;/p&gt;&amp;#13;
&lt;p&gt;可是你们知道写在 Jupyter Notebook 中的代码存储在电脑的哪里吗？是不是很多读者不知道？想要知道也很简单，只需要在 Jupyter Notebook 中输入如下代码，然后运行。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21114628259b50649fef&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;运行上面代码会得到如下结果。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111630dadace1142bbf&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;上面这个文件路径就是此时 Notebook 代码文件所在的路径，你的代码存储在哪个文件路径下，运行就会得到对应结果。&lt;/p&gt;&amp;#13;
&lt;h4 id=&quot;h4-2-&quot;&gt;&lt;a name=&quot;2 获取一个文件夹下的所有文件名&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;2 获取一个文件夹下的所有文件名&lt;/h4&gt;&lt;p&gt;我们经常会将电脑本地的文件导入 Python 中来处理，在导入之前需要知道文件的存储路径及文件名。如果只有一两个文件，那直接手动输入文件名和文件路径即可，但有时需要导入的文件有很多。手动输入效率就会比较低，需要借助代码来提高效率。&lt;/p&gt;&amp;#13;
&lt;p&gt;图1 所示文件夹中有 4 个 Excel 文件。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111d5accb837abf802d&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 1&amp;#13;
&lt;/p&gt;&lt;p&gt;我们可以使用 os.listdir(path)来获取 path 路径下所有的文件名。具体实现代码如下。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111c1203935a5028ee9&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;运行上面代码会得到如下结果。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21111cd29ffa95af7ac8&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-3-&quot;&gt;&lt;a name=&quot;3 对文件进行重命名&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;3 对文件进行重命名&lt;/h4&gt;&lt;p&gt;对文件进行重命名是比较高频的需求，我们可以利用 os.rename(‘old_name’,’new_name’) 来对文件进行重命名。old_name 就是旧文件名，new_name 就是新文件名。&lt;/p&gt;&amp;#13;
&lt;p&gt;我们先在 test 文件夹下新建一个名为 test_old 的文件，然后利用如下代码，就可以把 test_old 文件名改成 test_new。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111187228c5eb700e90&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;运行上面代码以后，再到 test 文件夹下面，就可以看到 test_old 文件已经不存在了，只有test_new。&lt;/p&gt;&amp;#13;
&lt;h4 id=&quot;h4-4-&quot;&gt;&lt;a name=&quot;4 创建一个文件夹&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;4 创建一个文件夹&lt;/h4&gt;&lt;p&gt;当我们想要在指定路径下创建一个新的文件夹时，可以选择手动新建文件夹，也可以利用 os.mkdir(path)新建，只需要指明具体的路径（path）即可。&lt;/p&gt;&amp;#13;
&lt;p&gt;当运行下面代码时，就表示在 D:/Data-Science/share/data 路径下新建一个名为test11 的文件夹，效果如图 2 所示。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111bae84612d8b33a96&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21114580a3cde9c39cf7&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图2&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-5-&quot;&gt;&lt;a name=&quot;5 删除一个文件夹&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;5 删除一个文件夹&lt;/h4&gt;&lt;p&gt;删除文件夹与创建文件夹是相对应的。当然，我们也可以选择手动删除一个文件夹，也可以利用 os.removedirs(path)进行删除，指明要删除的路径（path）。&lt;/p&gt;&amp;#13;
&lt;p&gt;当运行如下代码时，就表示把刚刚创建的 test11 文件夹删除了。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111c543575ef610d720&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-6-&quot;&gt;&lt;a name=&quot;6 删除一个文件&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;6 删除一个文件&lt;/h4&gt;&lt;p&gt;删除文件是删除一个具体的文件，而删除文件夹是将整个文件夹，包含文件夹中的所有文件进行删除。删除文件利用的是 os.remove(path)，指明文件所在的路径（path）。&lt;/p&gt;&amp;#13;
&lt;p&gt;当我们运行如下代码时，就表示将 test 文件夹中 test_new 文件删除了。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21115e133bf5a2391f7b&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;h3 id=&quot;h3-03-&quot;&gt;&lt;a name=&quot;03 批量操作&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;03 批量操作&lt;/h3&gt;&lt;h4 id=&quot;h4-1-&quot;&gt;&lt;a name=&quot;1 批量读取一个文件夹下的多个文件&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;1 批量读取一个文件夹下的多个文件&lt;/h4&gt;&lt;p&gt;有时一个文件夹下会包含多个类似的文件，比如一个部门不同人的绩效文件，我们需要把这些文件批量读取到 Python 中，然后进行处理。&lt;/p&gt;&amp;#13;
&lt;p&gt;我们在前面学过，如何读取一个文件，可以用 load_work()，也可以用 read_excel()，不管采用哪种方式，都只需要指明要读取文件的路径即可。&lt;/p&gt;&amp;#13;
&lt;p&gt;那如何批量读取呢？先获取该文件夹下的所有文件名，然后遍历读取每一个文件。&lt;/p&gt;&amp;#13;
&lt;p&gt;具体实现代码如下所示。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/211192ab0296474d995e&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;如果要对读取的文件的数据进行操作，那么只需把具体的操作实现代码放置在读取代码之后即可。比如我们要对每一个读取进来的文件进行删除重复值处理，实现代码如下。&amp;#13;
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21110a491e91aa7e85bc&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-2-&quot;&gt;&lt;a name=&quot;2 批量创建文件夹&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;2 批量创建文件夹&lt;/h4&gt;&lt;p&gt;有时我们需要根据特定的主题来创建特定的文件夹，比如需要根据月份创建 12个文件夹。我们前面介绍过如何创建单个文件夹，如果要批量创建多个文件夹，则只需要遍历执行单个文件夹的语句即可。具体实现代码如下。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111bf34ad8079ae8a06&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;运行上面代码以后就会在该文件路径下新建 12 个文件夹，如图3所示。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/211144ec1bded736840e&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 3&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-3-&quot;&gt;&lt;a name=&quot;3 批量重命名文件&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;3 批量重命名文件&lt;/h4&gt;&lt;p&gt;有时我们有好多相同主题的文件，但是这些文件的文件名比较混乱，比如图4所示文件，是各个员工的 3 月绩效情况，但是命名格式都不太一样，我们要将其统一成“名字+3 月绩效”这样的格式。要达到这种效果，可以通过前面学到的对文件进行重命名的操作来实现，前面只介绍了对单一文件的操作，那如何同时对多个文件进行批量操作呢？&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111af63625fbfbb9bb9&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 4&amp;#13;
&lt;/p&gt;&lt;p&gt;具体实现代码如下。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111fc7df8b1e84e0ca3&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;运行上面代码以后可以看到文件夹下的原文件名已被全部重命名完成，如图5所示。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111e426f0166e81452a&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 5&amp;#13;
&lt;/p&gt;&lt;h3 id=&quot;h3-04-&quot;&gt;&lt;a name=&quot;04 其他批量操作&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;04 其他批量操作&lt;/h3&gt;&lt;h4 id=&quot;h4-1-&quot;&gt;&lt;a name=&quot;1 批量合并多个文件&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;1 批量合并多个文件&lt;/h4&gt;&lt;p&gt;图6 所示文件夹下面有 1—6 月的分月销售日报，已知这些日报的结构是相同的，只有“日期”和“销量”两列，现在我们想要把这些不同月份的日报合并成一份。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111b7a6b87bc657a015&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 6&amp;#13;
&lt;/p&gt;&lt;p&gt;将分月销售日报合并成一份文件的具体实现代码如下。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/211194fd2437428cb4de&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 7&amp;#13;
&lt;/p&gt;&lt;h4 id=&quot;h4-2-&quot;&gt;&lt;a name=&quot;2 将一份文件按照指定列拆分成多个文件&quot; class=&quot;reference-link&quot;/&gt;&lt;span class=&quot;header-link octicon octicon-link&quot;/&gt;2 将一份文件按照指定列拆分成多个文件&lt;/h4&gt;&lt;p&gt;上面介绍了如何批量合并多个文件，我们也有合并多个文件的逆需求，即按照指定列将一个文件拆分成多个文件。&lt;/p&gt;&amp;#13;
&lt;p&gt;还是上面的数据集，假设我们现在拿到了一份 1—6 月的文件，这份文件除了“日期”和“销量”两列，还多了一列“月份”。现在需要做的是，根据“月份”列将这一份文件拆分成多个文件，每个月份单独存储为一个文件。&lt;/p&gt;&amp;#13;
&lt;p&gt;具体实现代码如下。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111084623f9d8e6a3d1&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;运行上面代码，就可以在目标路径下看到拆分后的多个文件，如图8所示。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111984d2fd0397b5170&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;图 8&amp;#13;
&lt;/p&gt;&lt;hr/&gt;&amp;#13;
&lt;p&gt;本文节选自&lt;strong&gt;《对比Excel，轻松学习Python报表自动化》&lt;/strong&gt;一书，更多关于使用Python进行报表自动化的内容，欢迎阅读本书！&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2111188d78d86b9c290f&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;《对比Excel，轻松学习Python报表自动化》&lt;/strong&gt;&lt;br/&gt;张俊红 著&amp;#13;
&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对比Excel系列畅销超15万册&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;零基础系统学Excel/Python数据处理和格式设置&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;人人都能学会的数据分析工具，加薪不加班&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;赠199元配套视频课&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;这本《对比Excel，轻松学习Python 报表自动化》继承了对比学习的特点，全书内容围绕Excel 功能区的各个模块，通过对比Excel 的方式来详细讲解每个模块中对应的Python 代码如何实现，轻松、快速地帮助职场人实现报表自动化，提高工作效率。本书主要分为4 个部分：第1 部分介绍Python 基础知识，让读者对Python 中常用的操作和概念有所了解；第2 部分介绍格式相关的设置方法，包括字体设置、条件格式设置等内容；第3 部分介绍各种类型的函数；第4 部分介绍自动化相关的其他技能，比如自动发送邮件、自动打包等操作。&lt;/p&gt;&amp;#13;
&lt;p&gt;本书适合每天需要做很多报表，希望通过学习报表自动化来提高工作效率的所有读者，包括但不限于分析师、数据运营、财务等人群。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21116dc40cae5dbfd138&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;（京东满100减50，快快扫码抢购吧！）&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&amp;#13;
            &lt;/div&gt;&amp;#13;
&amp;#13;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>39bd715c78261e9765f6e7f20303c26f</guid>
<title>尝试解析下 Epub.js：一个在浏览器上渲染 Epub 图书的工具</title>
<link>https://toutiao.io/k/rvodreq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body&quot;&gt;
      &lt;blockquote&gt;
  &lt;p&gt;一直在看 Epub 类型的图书， 很好奇一个 Epub 解析器是如果工作的。 碰巧看到了 Epub.js， 体验了一下还可以。 就尝试分析一下它的实现。本文会先介绍下 EPUB 格式,再来分析 Epubjs 的实现. 我前端经验仅限于了解常见标签含义，可能会有各种错误恳请斧正。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;epub&quot;&gt;Epub&lt;/h1&gt;
&lt;p&gt;EPub是一个自由的开放标准，属于一种可以“自动重新排版”的内容；也就是文字内容可以根据阅读设备的特性，以最适于阅读的方式显示。EPub档案内部使用了XHTML或DTBook（一种由DAISY Consortium提出的XML标准）来展现文字、并以zip压缩格式来包裹档案内容。EPub格式中包含了数位版权管理（DRM）相关功能可供选用&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;以上来自维基百科: https://zh.wikipedia.org/wiki/EPUB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本文参考的规范为: &lt;a href=&quot;https://www.w3.org/publishing/epub32/epub-spec.html#sec-epub-rs-conf&quot;&gt;Epub 3.2&lt;/a&gt;
该规范发布于 2019-05-08, 定义了 EPUB 图书格式和 EPUB 图书的浏览器应实现的功能. Epub格式由以下规范组成:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;EPUB Packages — 定义内容的每个Rendition的要求。&lt;/li&gt;
  &lt;li&gt;EPUB Content Documents — 定义了在 EPUB 出版物上下文中使用的 XHTML、SVG 和 CSS 的配置文件。&lt;/li&gt;
  &lt;li&gt;EPUB Media Overlays — 定义了文本和音频同步的格式和处理模型。&lt;/li&gt;
  &lt;li&gt;EPUB Open Container Format — 定义了一种文件格式和处理模型，用于将一组相关资源封装到单个文件 (ZIP) EPUB 容器中。&lt;/li&gt;
  &lt;li&gt;EPUB Accessibility — 定义 EPUB 出版物的可访问性一致性和发现要求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下图:
EPUB图书的内容是由一个或多个Rendition组成，每个Rendition都由所谓的EPUB Package 表示。
EPUB Package包含呈现内容所需的所有资源。其中的关键文件是Package Document，它包括阅读系统用于向用户呈现EPUB图书的所有元数据（例如标题和作者等）。它还提供了一个完整的资源清单，并包括一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPINE&lt;/code&gt;(用来表是文档出现的顺序)。
EPUB Package还包括另一个称为EPUB Navigation Document的文件。本文档提供了导航功能，例如目录，允许用户快速轻松地导航内容。
EPUB 图书的资源捆绑在一个基于 ZIP 的文件中，文件扩展名为.epub. 作为符合 ZIP 格式的文件，EPUB 出版物可以被许多软件程序解压缩，从而简化了它们的使用。
&lt;img src=&quot;/assets/img/2021/epub/epub-format.png&quot; alt=&quot;Epub Structure&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考规范来制作一个简单epub-图书&quot;&gt;参考规范来制作一个简单Epub 图书&lt;/h2&gt;
&lt;h3 id=&quot;按照下图的方式来组织目录和文件&quot;&gt;按照下图的方式来组织目录和文件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/2021/epub/director.png&quot; alt=&quot;Dirtctor&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;mimetype-文件名固定-内容也固定位-applicationepubzip&quot;&gt;mimetype 文件名固定, 内容也固定位: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/epub+zip&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;内容如下:
其中rootfile指定了package file&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;container&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;urn:oasis:names:tc:opendocument:xmlns:container&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;rootfiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;rootfile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;full-path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OPS/package.opf&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/oebps-package+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rootfiles&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;opspackageopf&quot;&gt;OPS/package.opf&lt;/h3&gt;
&lt;p&gt;Package 文件, 定义了书籍的 meta 信息, 资源列表和阅读顺序(Spine)
内容如下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;metadata: 标签定义的作者等信息&lt;/li&gt;
  &lt;li&gt;manifest: 定义了资源列表,如 正文页面, 目录, 封面图片, CSS, JS 等等&lt;/li&gt;
  &lt;li&gt;spine: 定义了书籍连续阅读的顺序.
    &lt;ul&gt;
      &lt;li&gt;Liner 代表顺序是否为必要顺序. 如目录和封面不一定强制按照这个顺序来阅读. 或者说是在做阅读器是可以把 Liner=no页面弹窗&lt;/li&gt;
      &lt;li&gt;和目录/书签最显著的区别, Spine 是按照资源文件来组织循序. 目录/书签等是可以指定到资源内的标签.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.idpf.org/2007/opf&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unique-identifier=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid_id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3.2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;prefix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;calibre: https://calibre-ebook.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;metadata&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:dc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://purl.org/dc/elements/1.1/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dc:title&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Calvin用来演示 EPUBJS 的书&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dc:title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dc:creator&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Creator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Calvin Wang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dc:creator&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dc:identifier&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid_id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;urn:uuid:5F1E4C07-2A52-48BC-BBA5-E98564559794&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dc:identifier&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dc:language&amp;gt;&lt;/span&gt;zh-CN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dc:language&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dcterms:modified&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;2021-11-14T08:32:29Z&lt;span class=&quot;nt&quot;&gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;properties=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstpage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first_page.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secondpage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;second_page.xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ncxtoc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc.ncx&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/x-dtbncx+xml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover-image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;properties=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover-image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/cover.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;spine&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;toc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ncxtoc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;itemref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;idref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;linear=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;itemref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;idref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;linear=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;ß
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;itemref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;idref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;firstpage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;linear=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;itemref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;idref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secondpage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;linear=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/spine&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/package&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;其他页面&quot;&gt;其他页面&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Cover&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:epub=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Cover Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/cover.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cover Image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cover Image&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:epub=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;First Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;epub:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bodymatter chapter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c002p0000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c002p0001&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First Page: aaaaaaaaaaaa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c002p0002&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First Page: bbbbbbbbbbbbb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TOC&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:epub=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://purl.org/dc/elements/1.1/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Cover&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.idpf.org/2007/ops&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ns0:type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cover.xhtml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cover Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc.xhtml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Nav Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first_page.xhtml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;second_page.xhtml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Second Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;把目录打包成-epub-文件&quot;&gt;把目录打包成 EPUB 文件&lt;/h3&gt;
&lt;p&gt;如下图: 用 ZIP 压缩文件至 first-epub.epub
&lt;img src=&quot;/assets/img/2021/epub/create_epub.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; ../first-epub.epub &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把做好的图书用自带的 Book 打开来看看
&lt;img src=&quot;/assets/img/2021/epub/open_by_book.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h1 id=&quot;epubjs&quot;&gt;Epub.js&lt;/h1&gt;
&lt;p&gt;Epub.js 是一个 JavaScript 库，用于在浏览器中跨多种设备呈现 ePub 文档。
Epub.js 为常见的电子书功能（如渲染、持久化和分页）提供了一个接口，而无需开发专用的应用程序或插件。 重要的是，它是 BSD 许可证。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;翻译自 项目 README&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;来看看官方的demo&quot;&gt;来看看官方的DEMO&lt;/h2&gt;
&lt;p&gt;高亮 备注 分页等等常用功能是均支持的
&lt;img src=&quot;/assets/img/2021/epub/epubjs-demo.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;来实现一个hello-word&quot;&gt;来实现一个”Hello Word”&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../assets/img/2021/epub/local_demo_for_epubjs.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Demo for Epub.js&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://futurepress.github.io/epub.js/dist/epub.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toc&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Load the opf&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ePub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://blog.calvin.wang/assets/first-epub.epub&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;epubjs-test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rendition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;displayed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rendition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;docfrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDocumentFragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;docfrag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;docfrag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;rendition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;来看看它有哪些-model&quot;&gt;来看看它有哪些 Model&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Book: 用来代表一个 Epub 图书,用来加载和解析其内容
    &lt;ul&gt;
      &lt;li&gt;Container: 用来解析 Container, 主要用来从 “META-INF/container.xml”获取 PackagePath&lt;/li&gt;
      &lt;li&gt;Packaging: 用来解析 Package, 主要用来获取manifest cover spine metadata nav ncx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rendition: 负责将 Book 的内容渲染在网页上,并进行控制.
    &lt;ul&gt;
      &lt;li&gt;Manager: 用来控制网页上的呈现方式(default: DefaultViewManager)&lt;/li&gt;
      &lt;li&gt;View: 展现在页面上的样式(default: IframeView)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EpubCFI: 是一个规范,定义了一种标准化方法，用于通过使用片段标识符来引用 EPUB® 出版物中的任意内容. 可以参考: &lt;a href=&quot;http://idpf.org/epub/linking/cfi/epub-cfi.html&quot;&gt;http://idpf.org/epub/linking/cfi/epub-cfi.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;辅助类:
    &lt;ul&gt;
      &lt;li&gt;Theme: 样式主题&lt;/li&gt;
      &lt;li&gt;Annotations: 注解&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;流程怎么控制的&quot;&gt;流程怎么控制的&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Rendition:
    &lt;ul&gt;
      &lt;li&gt;支持HOOK的阶段:
        &lt;ul&gt;
          &lt;li&gt;content: Pages/View内容被解析和加载,现有的 HOOK
            &lt;ul&gt;
              &lt;li&gt;handleLinks: 处理内容中的连接&lt;/li&gt;
              &lt;li&gt;passEvents: 内容中产生的事件同步&lt;/li&gt;
              &lt;li&gt;adjustImages: 调整图片&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;unloaded: Pages/View内容从屏幕中卸载&lt;/li&gt;
          &lt;li&gt;render: Pages/View被渲染到屏幕&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spin:
    &lt;ul&gt;
      &lt;li&gt;支持HOOK的阶段:
        &lt;ul&gt;
          &lt;li&gt;Serialize: Pages/View 被转换为 text&lt;/li&gt;
          &lt;li&gt;Content: Pages/View 被加载和解析. 现有的 HOOK
            &lt;ul&gt;
              &lt;li&gt;injectStylesheet: 注入样式表&lt;/li&gt;
              &lt;li&gt;injectScript: 注入脚本&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;还没有完全看懂的内容-感觉是语言特性&quot;&gt;还没有完全看懂的内容, 感觉是语言特性:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Promise 的用处?&lt;/li&gt;
  &lt;li&gt;Event的传递方式?&lt;/li&gt;
&lt;/ol&gt;

    &lt;/article&gt;

    
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3739622c98b0b59074fa4b49398a0f7d</guid>
<title>精卫测试系统：代码覆盖率实现之路</title>
<link>https://toutiao.io/k/igx8uiv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;目录&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;背景介绍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;工具介绍&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;精卫覆盖率统计实现原理&lt;/p&gt;&lt;p&gt;       步骤点描述&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;应用机器部署jacocoagent.jar&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;配置应用环境及用例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用例执行&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;获取exec二进制文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;获取源码及差异文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;获取应用编译包&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;覆盖率统计        &lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;覆盖率触发方式&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;构建机制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;初始化覆盖率资源文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;统计覆盖率信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;界面效果展示&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h6&gt;&lt;strong&gt;&lt;span&gt;背景介绍&lt;/span&gt;&lt;/strong&gt;&lt;/h6&gt;&lt;h6&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;span&gt;作为一名测试开发工程师，工作首要的两个目标就是测试质量和测试效率的双向提升。我们先说下如何保证被测的产品的质量呢？为了提升测试质量的目标，测试人员会通过一些手段或者工具来加以保证，而代码的覆盖率就是其中比较重要的一部分。基于目前质量部的测试现状，我们自研开发了一款代码覆盖率统计的工具，来辅助大家的日常测试，发现测试过程中漏测的代码，来补充测试场景，从而提升测试的质量及测试范围&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;工具介绍&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Jacoco 是一个开源的 Java 代码覆盖率工具，Jacoco 可以嵌入到 Ant 、Maven 中，并提供了 EclEmma Eclipse 插件,也可以使用 JavaAgent 技术监控 Java 程序。很多第三方的工具提供了对 Jacoco 的集成，如 sonar、Jenkins 等。关于 Jacoco 的注入原理以及注入方式，网上有很多资料，这里不过多赘述。在这里我们主要介绍精卫系统是如何进行代码覆盖流程统计的，为了不让研发修改自己的服务代码，我们选择的是 On-the-fly 模式。无需提前插桩，无需考虑classpath设置问题，只需在 JVM 中通过 -jacocoagent 参数指定 jar 文件，启动 Instrumentation 的代理程序，代理程序在通过 Class Loader 装载一个 class 前判断是否需要注入 class 文件，将统计代码插入 class ，测试覆盖率分析就可以在 JVM 执行测试的过程中完成，再获取到.exec文件即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面截图来自于网络，可以更快的了解jacoco代码覆盖率的获取方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4264705882352941&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOG2YKc3icwDTLzv2gmiaT9DK4pCsdRO9mVEgQ3VbnLxpD1OOvBJArcL7yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Jacoco详细介绍请见：&lt;span&gt;https://www.jacoco.org/jacoco/trunk/doc/mission.html&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;精卫覆盖率统计实现原理&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;测试环境：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5069284064665127&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOG73a0EJT1AaTa8bzQ4p5MkdBcNtmDTZh2xsahwdkKcqibj6qpxbHbg5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;步骤点描述&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;1，应用机器部署jacocoagent.jar&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;      测试人员可以通过到家运维平台，将jacocoagent.jar包部署到指定服务的机上，并且会将jacocoagent服务的启动参数配置到环境变量中，这样每次服务启动后jacocoagent服务也会一同被启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;jacocoagent代理服务启动命令参数为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-javaagent:&lt;/span&gt;&lt;span&gt;&lt;strong&gt;/export/jacoco/jacocoagent.jar&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;=includes=&lt;/span&gt;&lt;strong&gt;&lt;span&gt;*&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,output=tcpserver,port=&lt;/span&gt;&lt;strong&gt;&lt;span&gt;port&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,address=&lt;/span&gt;&lt;strong&gt;&lt;span&gt;ip&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;,append=true -Xverify:none&lt;/span&gt;&lt;/p&gt;&lt;p&gt;（命令参数中标红的部分是需要需改的）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个参数含义请见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.39145496535796764&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGWT8uc3xZR6OrsYMs3nl2KNxXic89a3pVWC5CFYmKu4wbGuZoVdAicibpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体参见：https://www.eclemma.org/jacoco/trunk/doc/agent.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遇到的问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;要确保jacocoagent.jar文件是否已经同步到服务机器的目录下，如果没有的话连带着应用服务也会启动失败，提示未找到jacocoagent.jar文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;启动参数中Includes是配置要执行分析覆盖率文件的目录，这个目录要是配置的不正确会影响界面展示的覆盖率信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Java服务的启动脚本中，要引用“$JAVA_OPTS”JVM运行参数的，如果没有配置会不能引用服务机器上面的环境变量，导致jacocoagent代理服务不能启动&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;2，配置应用环境及用例&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;测试人员在精卫测试平台中配置环境信息，以及获取代码覆盖需要的配置参数，其中包括应用服务部署的分组名称、代码库分支和需要统计覆盖率的jar包，最后添加测试需要的回归用例&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;3，用例执行&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;测试人员就可以开始测试了，既可以在平台上面进行快速回归，也可以通过工具进行接口的测试&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;4，获取exec二进制文件&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;从应用服务的机上面获取exec二进制文件，jacoco就是根据这个文件生成最终的覆盖率信息的，exec文件后面会详细说明&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;5，获取源码及差异文件&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;从Git代码库中获取指定分支的源码信息，获取源码后会将当前分支与线上分支间做个代码差异的处理，通过差异信息与分支源码文件进行数据融合，数据融合后面有介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;6，获取应用编译包&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;从应用部署平台获取到指定分支部署后class文件目录，获取覆盖率是需要源码编译后的class文件的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;7，覆盖率统计&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;测试人员即可在精卫上面通过任务的触发，待任务分析完成之后，即可在代码覆盖率界面中查看应用系统的代码覆盖率信息了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.595679012345679&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGBMdhGOyD4CSwHFmO5DRtY9pGpT3Z1L3GMicibEopTTaNkDLkPhgD81Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了可以更好地理解，先简单的介绍下，&lt;span&gt;上图&lt;/span&gt;大致可以分成四个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：统计覆盖率任务触发&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;通过精卫平台创建任务，持久化到任务队列表中，worker扫描到需要处理的任务后，进行任务的过滤，当有重复的任务只保留最新的任务，之后通过多线程进行任务的执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：初始化覆盖率资源文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;任务分配执行后，会通过三个线程分别获取.exec文件、class文件和源码文件，实现过程是调用应用部署平台和Git代码库平台的开放接口，获取指定的文件保存到指定文件目录下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：处理覆盖率资源文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;主要是对已经初始化的资源文件进行处理，将分支的源码文件线上代码文件进行差异化对比（diff代码），将差异化的文件件信息在与源码文件进行融合，主要标注出类文件中行的修改范围。之后将获取的三件套文件，统计生成代码覆盖率信息文件。持久化覆盖率信息和含有覆盖率的源码文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四步&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：前端界面渲染&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;测试人员通过前端界面，选择查看覆盖率维度，即可展示本次测试中实际的代码覆盖情况&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;实现详细解读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;覆盖率触发方式&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;精卫系统是通过应用维度进行管理的，只能有应用权限的成员才能进行应用的操作，应用下可以有多个研发或者测试以及产品成员，每个测试成员对应用用例数量贡献的数量是不等的，所以精卫获取用例的覆盖率信息没有按照个人用例统计，而是按照应用维度进行统计，即执行全部回归用例。提测之后，需要测试人员进行回归测试时，只需在创建回归任务时，任务模式选择“全量”任务，即可在全部回归用例执行完成后统计应用代码覆盖率信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.46882217090069284&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGqkxn1icTsfTgHvSbmqQWer2nYt7viaPofv6H78XAP2xW67EvibO7xcGCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;构建机制&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;任务构建机制，精卫是采用通过创建不同类型的任务进行触发，任务的类型分为“全量任务和自定义”，当创建全量任务时，会将应用所有用例类型为回归的用例全部执行一遍，执行完之后系统即可进行覆盖率统计的操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;初始化覆盖率资源文件三件套&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;统计代码覆盖率，必要通过三种类型的文件才能获取服务的覆盖率信息，分别是exec文件、项目编译后的class文件和项目分支的源码文件。有的项目编译文件和源码文件还是比较大的，考虑到性能问题精卫分别启动了三个线程进行文件的获取。服务每次重新部署后，覆盖率信息就会被初始化，这样就确保每次应用部署后测试得到的覆盖率信息是完整的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面分别介绍下三个类型文件作用以及如何获取&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;.exec二进制文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;该文件是个二进制文件，里面统计了所有探针的覆盖执行信息，并且记录了代码覆盖情况，jacocoagent代理服务启动后，就会在代码中插入探针，每个探测指针都是一个布尔变量，true表示已执行，false表示未执行，程序运行时通过改变指针的结果来检测代码的执行情况，不会改变源码的执行行为。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4006928406466513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGUlB71CuMiaQiaM4cf0XQylrViaUribb8icl1RTd0ykX2TIPTic2A5GWxFOcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;精卫是通过Socket获取的，通过与应用部署平台进行打通，调用open api接口获取IP地址列表，通过IP地址下载应用机器上的.exec文件，保存在指定的目录下，待生成覆盖率时使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心代码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5762124711316398&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGgc2jvbA5yQgeJYO1jCL3rqtiaBibvLyIf39BCejoYf1xWcDVOAvvv5vg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;c&lt;/span&gt;lass编译文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;Jacoco使用一系列的不同的计数器来做覆盖率的度量计算。所有这些计数器都是从java的class文件中获取信息，这些class文件可以（可选）包含调试的信息在里面。即使在没有源码的情况下，这种方法也可以实时有效地对应用程序进行度量和分析。在大部分情况下，收集到的信息可以映射到源码，可视化到每一行代码的粒度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      编译文件&lt;/span&gt;是调用应用部署平台open api 接口，获取到分支部署后的zip包，解压保存在指定的目录下，待生成覆盖率时使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分支源码文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;统计服务覆盖率信息需要源码文件，同时我们还将源码做持久化操作，目的就是在统计覆盖率信息后对源码文件进行类和行的一些处理，例如类文件是否为新增或者修改、每行的覆盖情况等…&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;通过与Git代码库平台打通，调用open api接口获取到分支源码文件，保存在指定的目录下，待生成覆盖率时&lt;/span&gt;&lt;span&gt;使用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;统计覆盖率信息&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    在获取覆盖率结果文件之前，还需处理两件事情&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;获取分支代码与线上代码差异信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;获取差异文件信息主要是为了获取到增量代码的覆盖率信息，获取差异文件信息是通过jgit来实现的，通过Git代码库平台获取到部署的分支代码和线上源码文件，通过两个分支间对比获取到差异化文件。对比方式我们采用多线程方式处理，提升了性能问题。在对缓存下来的源码信息标注差异信息，为之后与覆盖率数据融合使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心代码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5404157043879908&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGFjcgt9navdYj9T8Apdt19u5x7fib7ERQul1xo2aBfSVzdHicBRcY8Vrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遇到的问题及处理：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;在使用eclipse.jdt过程中，由于jgit版本升级，不支持jdk1.8，导致各种的依赖的类方法空指针。之后通过对pom文件各种排包，才找到一系列支持jdk1.8版本的相关依赖。后续计划将jgit所涉及到的部分代码进行抽离，分装成内部工具类提供使用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多个.exec文件要做merage合并&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;应用服务在部署的时候是分布式部署，所有会有多台机生成了.exec文件，所有要将所有文件进行合并，这样才能保证统计的覆盖率信息准确&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;合并exec文件使用org.jacoco.core.tools工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心代码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.27136258660508084&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGlCcghiaaZ4d2AkUpKIibJzzyvV2w6mKslGVGonKbUJq1rP5Eo6FN3ibicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;这两步操作都处理完成之后就可以统计代码覆盖率信息了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生成覆盖率结果文件有三种类型格式，分支为xml、html和csv，精卫采用生成xml文件格式，xml文件中含有nr, mi, ci, mb, cb几个字段，分别代表：行号，missed instructions (statements), covered instructions (statements)， missed branches，covered branches。当mb &amp;gt; 0或者cb &amp;gt; 0时，该行为分支行（标注钻石），当mi == 0 并且ci &amp;gt; 0，该行为全覆盖（行高亮绿色），当mi &amp;gt; 0 并且 ci == 0，该行为未覆盖（行高亮红色），当mi &amp;gt; 0 并且 ci &amp;gt; 0，该行为部分覆盖（行首添加黄色钻石及高亮黄色），其他则行无需覆盖&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4468822170900693&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGwn0CkAibNjjS2h3m9tGUOsic0WURIIicbxwvicJNGxRHWZYT7rARSw7PiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5265588914549654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGgKHibXCc4icBkP0xEEYUTTVOYX1IgZDj2LGp0LDGKbSNKIm1xhMJNIdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;统计覆盖率信息相关的功能代码大家可以下载jacoco-master源码进行查看，地址：http://www.eclemma.org/，实现方式照搬官网的代码即可，核心代码见下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6709006928406467&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGcU612JwpfcEQ3AXDd6bZYOv49N1gmAKD7nadLYliaI9GQhOa1DhZ8iaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;获取覆盖率文件信息之后还需要对数据进行处理，处理成我们需要的数据对象结构，通过对xml文件的结构我们定义了一个BaseDTO数据对象，通过处理对象的信息，进行字段信息的赋值处理，其中关键的字段信息包括：方法在类中的开始行号、总行数、行覆盖率、总指令数、指令覆盖率、总分支数、分支覆盖率、代码行覆盖状态等...。再将有覆盖率信息的源码文件持久化操作，这样前端界面就可以通过获取源码和覆盖率信息进行界面效果渲染了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对象结构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4006928406466513&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGWxGtvQUEfSaoazrOhdbMFObwJMtOaTNDCVMOmNDZFQZWNuyOavLhzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;覆盖率Xml文件转数据对象，通过javax.xml.bind工具&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5265588914549654&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOG1GyA4GcxUlA8Yj6KwM0lfXgHghGI8Ova9GaXmHFicibIHmdichlc2CUeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;界面效果展示&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      差异覆盖率维度展示：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4896073903002309&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGTuBLOibfaclZhhVYseoquRToWGDlSu6B91kTaBALqPBhW2icz3I9yibAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;span&gt;界面解读：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5475956820412169&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVMpSIrIQbicYzyXoy8dKoOGwrhkKdwH4XI1pzicHRicT7Jp8r1g8VlWkgCLticBJX5oWTEKuh8OjVoHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  红色背景：无覆盖，该行的所有指令均无执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  黄色背景：部分覆盖，该行部分指令被执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;       绿色背景：全覆盖，该行所有指令被执行&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;代码覆盖率落地情况&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;目前精卫系统已接入282个应用服务，可统计覆盖率系统160个，平均应用服务代码覆盖率覆盖60%以上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方法覆盖率指标要求：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;目前测试人员在自己所负责的测试应用中，80%方法的行覆盖率可控制在90%以上，间接的提升了测试质量，针对研发人员，部分系统陆续的通过代码圈复杂度，来降低系统代码的复杂度，从而提升代码的可读和解耦性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;/p&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;系统特性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通用：支持单元测试、手工测试、全量、diff覆盖率收集&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无侵入：采用on-the-fly模式，不需要开发代码做任何改造，即可收集覆盖率数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高可用：分布式架构，任务机可无限扩展，避免任务机down机或者任务过多时出现性能瓶颈&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可视化：提供增量和全量两种维度展示方式，覆盖率信息准确且可读性高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;后期规划&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提升异常场景的覆盖率&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;目前精卫针对代码中的try catch异常代码段，是不能进行完全覆盖的，之后会对这块功能进行完善，通过对编译后文件进行插桩的形式，模拟实现异常场景，提升异常场景的覆盖率&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;代码着色数据量的问题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;由于我们是对源码进行持久化的操作，类文件行数是通数组表示的（[0,0,0,0,…]），有的数据量还是很大的，消耗了不少资源，后期将会对这部分功能进行优化处理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;      &lt;/span&gt;在业务快速迭代的背景下，代码覆盖率已成为测试过程中重要的一环，精卫系统可方便、快捷统计java代码覆盖率信息，并为之后精准测试铺好道路。另外在说明下，代码覆盖率决不能作为测试全面的一个保证，即便是测试覆盖到了代码行，也可能受到人员的素质和能力的影响从而出现漏测的情况。我们可以认为高覆盖率的代码不一定测试的质量高，但是低覆盖率的代码质量一定不高&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.0040322580645162&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PNm6V9cebJVhWnJJQaA7pdSp4jVYpu4XeibX3JVQticZt2DMxIzIgW9LibDm1lXraK9Q5yZSWvWfegZ1h9tPPpUYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;744&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>