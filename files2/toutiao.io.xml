<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>36162b5c83a5985edd1279f7d086b428</guid>
<title>Spring：我是如何解决循环依赖的？</title>
<link>https://toutiao.io/k/ib9ck31</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;它&lt;br/&gt;&lt;/span&gt;&lt;span&gt;1.由同事抛的一个问题开始&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近项目组的一个同事遇到了一个问题，问我的意见，一下子引起的我的兴趣，因为这个问题我也是第一次遇到。平时自认为对spring循环依赖问题还是比较了解的，直到遇到这个和后面的几个问题后，重新刷新了我的认识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看当时出问题的代码片段：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两段代码中定义了两个Service类：&lt;code&gt;TestService1&lt;/code&gt;和&lt;code&gt;TestService2&lt;/code&gt;，在TestService1中注入了TestService2的实例，同时在TestService2中注入了TestService1的实例，这里构成了&lt;code&gt;循环依赖&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只不过，这不是普通的循环依赖，因为TestService1的test1方法上加了一个&lt;code&gt;@Async&lt;/code&gt;注解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家猜猜程序启动后运行结果会怎样？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &lt;span&gt;&#x27;testService1&#x27;&lt;/span&gt;: Bean with name &lt;span&gt;&#x27;testService1&#x27;&lt;/span&gt; has been injected into other beans [testService2] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans &lt;span&gt;do&lt;/span&gt; not use the &lt;span&gt;final&lt;/span&gt; version of the bean. This is often the result of over-eager type matching - consider using &lt;span&gt;&#x27;getBeanNamesOfType&#x27;&lt;/span&gt; with the &lt;span&gt;&#x27;allowEagerInit&#x27;&lt;/span&gt; flag turned off, &lt;span&gt;for&lt;/span&gt; example.&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;报错了。。。原因是出现了循环依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「不科学呀，spring不是号称能解决循环依赖问题吗，怎么还会出现？」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把上面的代码稍微调整一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把TestService1的test1方法上的&lt;code&gt;@Async&lt;/code&gt;注解去掉，&lt;code&gt;TestService1&lt;/code&gt;和&lt;code&gt;TestService2&lt;/code&gt;都需要注入对方的实例，同样构成了循环依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是重新启动项目，发现它能够正常运行。这又是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;带着这两个问题，让我们一起开始spring循环依赖的探秘之旅。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.什么是循环依赖？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;循环依赖：说白是一个或多个对象实例之间存在直接或间接的依赖关系，这种依赖关系构成了构成一个环形调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种情况：自己依赖自己的直接依赖&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8129496402877698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdab1MiacqG8bWAgwVmgR2TxRdfGQ9rXpjebRPQMYp6TWpcCP2JSnYajnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;278&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二种情况：两个对象之间的直接依赖&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7660377358490567&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdavaxrhQ63SHniaq8GRh4fUiblCiacKWUbWMszd9lCozZboxasMpib4NbxzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;530&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三种情况：多个对象之间的间接依赖&lt;img data-ratio=&quot;0.7452830188679245&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdalIzucywZiaD9H5zicryDoywZevxJxGA0JvsrwY7tFhF7HA1En7Y0CgWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面两种情况的直接循环依赖比较直观，非常好识别，但是第三种间接循环依赖的情况有时候因为业务代码调用层级很深，不容易识别出来。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.循环依赖的N种场景&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring中出现循环依赖主要有以下场景：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4099462365591398&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdaPIJyvkk8b7l74lEUVB6b1TkffX2Jve9doJia61IXhY4yOfMxibXOic0AQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1488&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;单例的setter注入&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种注入方式应该是spring用的最多的，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一个经典的循环依赖，但是它能正常运行，得益于spring的内部机制，让我们根本无法感知它有问题，因为spring默默帮我们解决了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;spring内部有三级缓存：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;singletonObjects 一级缓存，用于保存实例化、注入、初始化完成的bean实例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;earlySingletonObjects 二级缓存，用于保存实例化完成的bean实例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;singletonFactories 三级缓存，用于保存bean创建工厂，以便于后面扩展有机会创建代理对象。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面用一张图告诉你，spring是如何解决循环依赖的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42983565107458915&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdamsWdZQX6cI6JQPa3P7icoepibDXoFEhC71juibDArKblEMcoBTRLRPMCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1582&quot;/&gt;&lt;/p&gt;                           图1&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的朋友可能会发现在这种场景中第二级缓存作用不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，为什么要用第二级缓存呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想一下，如果出现以下这种情况，我们要如何处理？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService3 testService3;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService3&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test3&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TestService1依赖于TestService2和TestService3，而TestService2依赖于TestService1，同时TestService3也依赖于TestService1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照上图的流程可以把TestService1注入到TestService2，并且TestService1的实例是从第三级缓存中获取的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设不用第二级缓存，TestService1注入到TestService3的流程如图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8112745098039216&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdaiagr5yOmaJYnNrSrg3IIshKHsX7ftEplChSfcY1CJGYcaaHCJXVCQnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/p&gt;                         图2&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TestService1注入到TestService3又需要从第三级缓存中获取实例，而第三级缓存里保存的并非真正的实例对象，而是&lt;code&gt;ObjectFactory&lt;/code&gt;对象。说白了，两次从三级缓存中获取都是&lt;code&gt;ObjectFactory&lt;/code&gt;对象，而通过它创建的实例对象每次可能都不一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样不是有问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，spring引入的第二级缓存。上面图1其实TestService1对象的实例已经被添加到第二级缓存中了，而在TestService1注入到TestService3时，只用从第二级缓存中获取该对象即可。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8606965174129353&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdadMXFsagwicrE2kkH8jsyADzPWI2uzZckTlfWYKwOdC0EgDHC5ZENib4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;804&quot;/&gt;&lt;/p&gt;                         图3&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有个问题，第三级缓存中为什么要添加&lt;code&gt;ObjectFactory&lt;/code&gt;对象，直接保存实例对象不行吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：不行，因为假如你想对添加到三级缓存中的实例对象进行增强，直接用实例对象是行不通的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种场景spring是怎么做的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案就在&lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;类&lt;code&gt;doCreateBean&lt;/code&gt;方法的这段代码中：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20678513731825526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdaT8TrEslDkSfIQcjSZKUFeeRBdz9OtNOzBNpfdK6YLZNlWuvoF0KaFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1238&quot;/&gt;它定义了一个匿名内部类，通过&lt;code&gt;getEarlyBeanReference&lt;/code&gt;方法获取代理对象，其实底层是通过&lt;code&gt;AbstractAutoProxyCreator&lt;/code&gt;类的&lt;code&gt;getEarlyBeanReference&lt;/code&gt;生成代理对象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多例的setter注入&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种注入方法偶然会有，特别是在多线程的场景下，具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Scope&lt;/span&gt;(ConfigurableBeanFactory.SCOPE_PROTOTYPE)&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Scope&lt;/span&gt;(ConfigurableBeanFactory.SCOPE_PROTOTYPE)&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人说这种情况spring容器启动会报错，其实是不对的，我非常负责任的告诉你程序能够正常启动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实在&lt;code&gt;AbstractApplicationContext&lt;/code&gt;类的&lt;code&gt;refresh&lt;/code&gt;方法中告诉了我们答案，它会调用&lt;code&gt;finishBeanFactoryInitialization&lt;/code&gt;方法，该方法的作用是为了spring容器启动的时候提前初始化一些bean。该方法的内部又调用了&lt;code&gt;preInstantiateSingletons&lt;/code&gt;方法&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2989949748743719&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdaTQBCg36QQXBibaO7X3kXKibCO9QOe28icI89qnyc0Szqp2PnIs5WC4y7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1592&quot;/&gt;标红的地方明显能够看出：非抽象、单例 并且非懒加载的类才能被提前初始bean。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而多例即&lt;code&gt;SCOPE_PROTOTYPE&lt;/code&gt;类型的类，非单例，不会被提前初始化bean，所以程序能够正常启动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何让他提前初始化bean呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只需要再定义一个单例的类，在它里面注入TestService1&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService3&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新启动程序，执行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Requested bean is currently in creation: Is there an unresolvable circular reference?&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;果然出现了循环依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：这种循环依赖问题是无法解决的，因为它没有用缓存，每次都会生成一个新对象。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;构造器注入&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种注入方式现在其实用的已经非常少了，但是我们还是有必要了解一下，看看如下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt;&lt;span&gt;(TestService2 testService2)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt;&lt;span&gt;(TestService1 testService1)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Requested bean is currently in creation: Is there an unresolvable circular reference?&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出现了循环依赖，为什么呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.503125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdat0en0PHBL6WAqHKrbxU38nxZuZCDWxVTE9iazcKYA49FTseCYIlDxbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中的流程看出构造器注入没能添加到三级缓存，也没有使用缓存，所以也无法解决循环依赖问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;单例的代理对象setter注入&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种注入方式其实也比较常用，比如平时使用：&lt;code&gt;@Async&lt;/code&gt;注解的场景，会通过&lt;code&gt;AOP&lt;/code&gt;自动生成代理对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我那位同事的问题也是这种情况。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从前面得知程序启动会报错，出现了循环依赖：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name &lt;span&gt;&#x27;testService1&#x27;&lt;/span&gt;: Bean with name &lt;span&gt;&#x27;testService1&#x27;&lt;/span&gt; has been injected into other beans [testService2] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans &lt;span&gt;do&lt;/span&gt; not use the &lt;span&gt;final&lt;/span&gt; version of the bean. This is often the result of over-eager type matching - consider using &lt;span&gt;&#x27;getBeanNamesOfType&#x27;&lt;/span&gt; with the &lt;span&gt;&#x27;allowEagerInit&#x27;&lt;/span&gt; flag turned off, &lt;span&gt;for&lt;/span&gt; example.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么会循环依赖呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;答案就在下面这张图中：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4796437659033079&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFGL7IIEBJVKfAH6rmxY4x2fpBia7zqapW1Q8ZF601661Iq2NIwHYjrRv64TGnuQZy8yF3hB08RLMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1572&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说白了，bean初始化完成之后，后面还有一步去检查：第二级缓存 和 原始对象 是否相等。由于它对前面流程来说无关紧要，所以前面的流程图中省略了，但是在这里是关键点，我们重点说说：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5504694835680751&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdaljic3Aany2iagBQWRRkozUhz33XoJ7WrOyhQgdcqjcHEefic9Wcjne6FA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1704&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那位同事的问题&lt;/span&gt;正好是走到这段代码，发现第二级缓存 和 原始对象不相等，所以抛出了循环依赖的异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这时候把TestService1改个名字，改成：&lt;span&gt;TestService6，其他的都不变。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService6&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Async&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;再重新启动一下程序，神奇般的好了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;what？ 这又是为什么？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就要从spring的bean加载顺序说起了，默认情况下，spring是按照文件完整路径递归查找的，按路径+文件名排序，排在前面的先加载。所以TestService1比&lt;span&gt;TestService2先加载，而改了文件名称之后，&lt;span&gt;TestService2比&lt;span&gt;TestService6先加载。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么&lt;span&gt;TestService2比TestService6先加载就没问题呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案在下面这张图中：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42710997442455245&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDFGL7IIEBJVKfAH6rmxY4x2rJRtXBATowdxrBjNMWjQjoSicB8J62b4YmjvR0ySmB4TGCDUicdwjbFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/p&gt;&lt;p&gt;这种情况testService6中其实第二级缓存是空的，不需要跟原始对象判断，所以不会抛出循环依赖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;DependsOn循环依赖&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种有些特殊的场景，比如我们需要在实例化Bean A之前，先实例化Bean B，这个时候就可以使用&lt;code&gt;@DependsOn&lt;/code&gt;注解。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@DependsOn&lt;/span&gt;(value = &lt;span&gt;&quot;testService2&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService2 testService2;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@DependsOn&lt;/span&gt;(value = &lt;span&gt;&quot;testService1&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TestService2&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; TestService1 testService1;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序启动之后，执行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Circular depends-on relationship between &lt;span&gt;&#x27;testService2&#x27;&lt;/span&gt; and &lt;span&gt;&#x27;testService1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个例子中本来如果TestService1和TestService2都没有加&lt;code&gt;@DependsOn&lt;/code&gt;注解是没问题的，反而加了这个注解会出现循环依赖问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这又是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案在&lt;code&gt;AbstractBeanFactory&lt;/code&gt;类的&lt;code&gt;doGetBean&lt;/code&gt;方法的这段代码中：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4193121693121693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdatjJjSxMkoh2RyVA8KFJRiaedv4hibjoicKmfySdiaEs74dApoBib7T4CdfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1512&quot;/&gt;它会检查dependsOn的实例有没有循环依赖，如果有循环依赖则抛异常。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.出现循环依赖如何解决？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目中如果出现循环依赖问题，说明是spring默认无法解决的循环依赖，要看项目的打印日志，属于哪种循环依赖。目前包含下面几种情况：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3230994152046784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDF24t3FjrB8Xebx7WgkAxdasczlqnRGRlE3q0wZzZTe2OYezTV26IMTJK8W7ddViceaKLLjMM0V98A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;生成代理对象产生的循环依赖&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类循环依赖问题解决方法很多，主要有：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用&lt;code&gt;@Lazy&lt;/code&gt;注解，延迟加载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用&lt;code&gt;@DependsOn&lt;/code&gt;注解，指定加载先后关系&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改文件名称，改变循环依赖类的加载顺序&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;使用@DependsOn产生的循环依赖&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类循环依赖问题要找到&lt;code&gt;@DependsOn&lt;/code&gt;注解循环依赖的地方，迫使它不循环依赖就可以解决问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多例循环依赖&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类循环依赖问题可以通过把bean改成单例的解决。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;构造器循环依赖&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这类循环依赖问题可以通过使用&lt;code&gt;@Lazy&lt;/code&gt;注解解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>02704f09c2dfd4cceb98f7b244698104</guid>
<title>进程：程序是如何启动的</title>
<link>https://toutiao.io/k/5viayyn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;代码编译出来后得到可执行文件，也就是我们常说的程序。都说进程是运行起来的程序，那&lt;span&gt;&lt;strong&gt;程序是如何启动的呢？程序和进程究竟有哪些区别呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;早期的计算机只运行一个程序，所以可以想到的是 CPU 的利用率是多么的低，为了让 CPU 利用率得到有效的提高，工程师们设计了一个方案：加载多个程序到内存中，让它们并发运行，而操作系统控制着这些程序运行状态，这些运行的程序就是我们所谓的进程。虽然有多个程序并发执行任务，但&lt;span&gt;&lt;strong&gt;每个进程在运行过程中都会认为自己独占 CPU  资源、内存资源等，以为整个计算机的硬件资源都是它的&lt;/strong&gt;&lt;/span&gt;。这是操作系统的设计哲学：进程你尽管大胆的往前跑，你要什么我都给你准备好了，你跑起来就对了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还记得之前有篇是专门计算机是如何启动的吗？没有看过的同学可以看这里 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTM0NDEzNw==&amp;amp;mid=2247483756&amp;amp;idx=1&amp;amp;sn=067ae863c4a3fe247e2606e34cf2b104&amp;amp;chksm=fbd4890acca3001c841915c5256779127642517e31148d419a8b58d1afd5df2024b93a838ee3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;3.你知道计算机是如何启动的吗？&lt;/a&gt;。当 BIOS 固件将操作系统内核装载进内存执行后产生了第一个进程，一般来说将这个进程称为进程 0，它的作用是对所有内核核心数据结构进行预先赋值。紧接着创建出一个 init 进程。进程 0 是所有进程的祖先，其他进程要么是它的子进程，要么是它的子孙进程。既然内核进程有 BIOS 固件帮它启动，普通进程是如何启动的呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 linux 系统中提供了两个重要的系统调用（系统函数）：&lt;span&gt;&lt;strong&gt;fork()、exec()&lt;/strong&gt;&lt;/span&gt;，利用好这两个函数就可以启动一个进程。步骤是这样的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;先用 fork() 函数创建一个新的进程&lt;/strong&gt;&lt;/span&gt;。注意：这个新的进程比较特殊！它会&lt;span&gt;&lt;strong&gt;将父进程的资源内存地址都复制到自己的内存空间&lt;/strong&gt;&lt;/span&gt;，也就是说，它会和父进程共享父进程的资源。有人就问了：哪来的父进程？为什么要共享父进程的资源？第一个问题：谁来创建出这个新进程就是父进程，比如进程 1 是进程 0 创建出来，那进程 0 就是进程 1 的父进程，有没有进程是没有父进程的？有，且只有一个，就是进程 0，其他都是有父进程的，它们的关系就如同一棵树一样。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1698513800424628&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/pMAe7v8MucibAUnLWrHLMWicUpKQE2ezWD2P2EzpuWt5NzWPJmT3aLKR0kQyFyZXDHvX6HQLicUtiaRfENSquLC9LQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;471&quot;/&gt;&lt;/p&gt;&lt;p&gt;第二个问题：在早期的 linux 系统实现中，创建新的进程是会复制父进程的资源的，因为创建出来的子进程需要分配各种资源，比如进程描述符、地址空间等，如果不从父进程复制过来，那应该如何初始化这个新的进程呢？总不能给它一个空的结构吧，所以&lt;span&gt;&lt;strong&gt;最方便省事的方式就是把父进程的东西给复制过来&lt;/strong&gt;&lt;/span&gt;。&lt;span&gt;&lt;strong&gt;注意，复制父进程的资源与复制父进程资源内存地址是不一样的&lt;/strong&gt;&lt;/span&gt;。前者是所有的资源再次创建，后者是直接利用指针进行赋值，前者会在系统中增加一份与父进程一模一样的资源，后者不会增加资源。现在的操作系统都是后者，这也是现代操作系统的一个优化点，采用的是一个叫&lt;span&gt;&lt;strong&gt;写时复制&lt;/strong&gt;&lt;/span&gt;（COW，Copy On Write）的技术。为什么要这么做呢？你想，每次创建新进程都要把父进程的资源复制一遍，这得多&lt;span&gt;&lt;strong&gt;耗费 CPU 和内存资源&lt;/strong&gt;&lt;/span&gt;，而且新进程还不一定用的到父进程的资源，而且根据统计大部分情况下都是用不到的。所以如果只用指针去进行复制资源是一个很好的方式，&lt;span&gt;&lt;strong&gt;减少了很多不必要的资源损耗&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当子进程通过 fork 创建出来后，下一步需要进行 exec。&lt;span&gt;&lt;strong&gt;这步会将你指定的子进程程序加载到这个新的进程内存空间中并执行。&lt;/strong&gt;&lt;/span&gt;这两步都完成后才算完成了子进程的启动和运行。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面是一个关于利用 fork 和 execve 创建一个新进场的示例。fork 会先创建出一个新的进程，然后利用 execve 装载另外一个程序，这里用的 echo 程序向控制台打印 hello。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;code-snippet__meta-string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *arg[] = {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;echo&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(fork() == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;child process\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt;(execve(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/usr/bin/echo&quot;&lt;/span&gt;, arg, &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;parent process exit\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; EXIT_SUCCESS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;fork() 的返回值有三种：&lt;/p&gt;&lt;p&gt;所以你们会发现在示例代码里会有一个 fork() == 0 的判断，利用这个可以是否当前是否是在新的子进程内。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们都知道进程是运行起来的程序，但其实进程包括很多东西，比如：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程的运行状态&lt;/strong&gt;&lt;/span&gt;：包括就绪、运行、等待/阻塞、僵尸等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;&lt;/span&gt;：记录当前进程运行到哪条指令了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CPU 寄存器&lt;/strong&gt;&lt;/span&gt;：保存进程运行的上下文信息，以便当前进程调度出去后还能调度回来接着运行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CPU 调度信息&lt;/strong&gt;&lt;/span&gt;：包括进程优先级、调度队列、调度等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;内存信息&lt;/strong&gt;&lt;/span&gt;：进程使用的内存信息，如页表等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;文件信息&lt;/strong&gt;&lt;/span&gt;：进程打开的文件信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;资源限制信息&lt;/strong&gt;&lt;/span&gt;：CPU、内存、带宽等限制的信息，如：可以限制进程运行所能使用的 CPU 核数。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们可以把程序看做是一个人，人活着就相当于一个进程。&lt;span&gt;&lt;strong&gt;比如：进程需要 CPU，人活着需要食物；进程需要内存，人活着要房子；进程要与其他进程交流的话，需要管道、socket 等，人与人交流需要手机等；进程竞争 CPU，人竞争食物。&lt;/strong&gt;&lt;/span&gt;很多时候操作系统中的很多东西都可以类比人类社会中的某些方面，可能是工程师们在设计操作系统时参照了人类社会吧。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎关注公众号：哈扣。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pMAe7v8MucibMUgXM4Y8G0fRDBtp10qAAW1v0nQpZrjZZAs8LphiabRwv6V40RGbqJQ0ib9Tx2mMveZSibwia0mHK1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>667a4ebb60a811cb7022156569c2f29e</guid>
<title>第三方 cookie 马上就不让用了，互联网广告还怎么玩？</title>
<link>https://toutiao.io/k/dhgg2q8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-lake-id=&quot;bce22131c432b975cafeac0919902500&quot;&gt;Chrome Developer Summit 2020的一些话题挺有意思的，其中A more private way to measure ad conversions是关于互联网广告的，值得关注，这是互联网广告的未来方向。在第三方Cookie限制越来越多且很快就会被禁用的情况下，广告作为互联网最核心的商业模式之一，还怎么玩下去？&lt;/p&gt;&lt;p data-lake-id=&quot;9adee408dcc635c4be21615f1f7ac85a&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;f3d1c6247effb60e2f0cc5b6d8e482c2&quot;&gt;背景&lt;/h1&gt;&lt;p data-lake-id=&quot;27d90230dd3a0496a0f09d7789056d88&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f466d7945cd0411a08532965acfdc0db&quot;&gt;雅虎早就不存在，这个靠手动建立互联网索引的“落后”公司，现在大家应该都瞧不上了。不过，《浪潮之巅》的作者吴军老师对雅虎的评价还是很高的：&lt;/p&gt;&lt;p data-lake-id=&quot;e5111146674d3b74dd57ed796362796b&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p data-lake-id=&quot;05c46e4b4d7622520e445855ca226e80&quot;&gt;一百年后，如果人们只记得两个对互联网贡献最大的人，那么这两个人很可能是杨志远（Jerry Yang）和戴维•费罗（Davide Filo），而不是今天名气更大的互联网企业家佩奇、布林或者扎克伯格。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-lake-id=&quot;f48df2098e823a86285383506d10d1a7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ba90024e7e790267ecb9c218ef2a0c36&quot;&gt;为什么？因为雅虎制定了互联网行业的游戏规则：开放、免费和盈利。虽然这个规则现在有点被玩坏了，大体还没有变化。绝大部分互联网产品本身都是对用户免费的，获取足够流量之后，再通过广告变现，本质上，Google、Facebook、阿里巴巴、百度、美团、字节跳动、拼多多这些互联网巨头都是广告公司，只是卖的广告类型不一样而已。&lt;/p&gt;&lt;p data-lake-id=&quot;1b2bff8feb9801e30444f28d53ba8322&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7174de9e50ebe78811abd1fe7334691c&quot;&gt;不过，随着各国对于用户数据隐私的保护越来越严格，互联网广告这个商业模式当前遇到了非常大的挑战。&lt;/p&gt;&lt;p data-lake-id=&quot;b39755624351f6923bd6a135d412ebe9&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;87a346e99b9720a2f53eb03a1b9db96c&quot;&gt;因为Apple调整了隐私政策，Facebook在纽约时报、华盛顿邮报、华尔街日报上刊发整版广告反对，不难感受到，&lt;strong&gt;&lt;span&gt;小&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;扎同学已经出离的愤怒了:(&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dd39237ba453939c04bd52a785b3b5e8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8c0db7de5a1793c945376006b1598cb2&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F928098%2F1608990208282-b23d1db2-e999-4400-907b-f9da517c59c0.png%22%2C%22originWidth%22%3A1155%2C%22originHeight%22%3A2100%2C%22name%22%3A%22AD-Standing-up-to-Apple-for-small-business.png%22%2C%22size%22%3A754439%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A96.76597%2C%22y%22%3A321.878%2C%22width%22%3A638.50478%2C%22height%22%3A79.6087%2C%22text%22%3A%22Werestanding%22%7D%2C%7B%22x%22%3A92.185844%2C%22y%22%3A410.21176%2C%22width%22%3A635.2433560000001%2C%22height%22%3A91.03493999999995%2C%22text%22%3A%22uptoApplefor%22%7D%2C%7B%22x%22%3A96.90407%2C%22y%22%3A508.04288%2C%22width%22%3A704.57373%2C%22height%22%3A74.79111999999992%2C%22text%22%3A%22smallbusinesses%22%7D%2C%7B%22x%22%3A98.39567%2C%22y%22%3A608.51276%2C%22width%22%3A490.58516%2C%22height%22%3A78.37624000000005%2C%22text%22%3A%22everywhere%22%7D%2C%7B%22x%22%3A99.01163%2C%22y%22%3A752.14716%2C%22width%22%3A662.67597%2C%22height%22%3A27.807140000000004%2C%22text%22%3A%22AtFacebook%2Cmallbusinessisathecoreofour%22%7D%2C%7B%22x%22%3A96.86401%2C%22y%22%3A797.32117%2C%22width%22%3A684.23149%2C%22height%22%3A26.725229999999897%2C%22text%22%3A%22business.Morethan10milionbusinessesuseour%22%7D%2C%7B%22x%22%3A97.53739%2C%22y%22%3A836.347%2C%22width%22%3A728.7188100000001%2C%22height%22%3A29.27690000000007%2C%22text%22%3A%22advertisingtoolseachonthidw%22%7D%2C%7B%22x%22%3A96.96072%2C%22y%22%3A877.73834%2C%22width%22%3A706.9674799999999%2C%22height%22%3A29.313560000000052%2C%22text%22%3A%22hireemployeesandengagewiththeircommunities%22%7D%2C%7B%22x%22%3A97.226555%2C%22y%22%3A939.6122%2C%22width%22%3A707.734505%2C%22height%22%3A30.820799999999963%2C%22text%22%3A%22Manyinthesmallbusinesscommunityhaveshared%22%7D%2C%7B%22x%22%3A98.86648%2C%22y%22%3A982.45685%2C%22width%22%3A659.78446%2C%22height%22%3A28.30120999999997%2C%22text%22%3A%22concernsaboutApple&#x27;sforcedsoftwreuda%22%7D%2C%7B%22x%22%3A97.86004%2C%22y%22%3A1025.6931%2C%22width%22%3A743.40082%2C%22height%22%3A29.405300000000125%2C%22text%22%3A%22whichwilliitbusinesses&#x27;abilityorupsonlize%22%7D%2C%7B%22x%22%3A97.476326%2C%22y%22%3A1067.3682%2C%22width%22%3A588.0579740000001%2C%22height%22%3A28.497400000000198%2C%22text%22%3A%22adsandreachtheircustomerseffectively.%22%7D%2C%7B%22x%22%3A97.37121%2C%22y%22%3A1132.8887%2C%22width%22%3A691.04023%2C%22height%22%3A28.57030000000009%2C%22text%22%3A%22Forty-fourpercentofsmalltomediumbusinesses%22%7D%2C%7B%22x%22%3A97.91506%2C%22y%22%3A1173.9692%2C%22width%22%3A711.2559%2C%22height%22%3A26.886299999999892%2C%22text%22%3A%22startedorincreasedtheirusageofpersonalizedads%22%7D%2C%7B%22x%22%3A98.6604%2C%22y%22%3A1219.5256%2C%22width%22%3A712.0432000000001%2C%22height%22%3A24.183899999999994%2C%22text%22%3A%22onSoCialmediaduringthepandemiccodig%22%7D%2C%7B%22x%22%3A98.23592%2C%22y%22%3A1256.8875%2C%22width%22%3A630.9120800000001%2C%22height%22%3A26.797900000000027%2C%22text%22%3A%22newDeloittestudy.Withoutolizdd%22%7D%2C%7B%22x%22%3A99.332466%2C%22y%22%3A1298.2666%2C%22width%22%3A741.491834%2C%22height%22%3A26.558099999999968%2C%22text%22%3A%22Facebookdatashowthattheeragesmalbuines%22%7D%2C%7B%22x%22%3A96.54904%2C%22y%22%3A1340.2021%2C%22width%22%3A696.35436%2C%22height%22%3A28.676600000000008%2C%22text%22%3A%22advertiserstandstoseeacutofover60%25intheir%22%7D%2C%7B%22x%22%3A96.01981%2C%22y%22%3A1381.7189%2C%22width%22%3A458.92385%2C%22height%22%3A27.094699999999875%2C%22text%22%3A%22salesforeverydollartheyspend.%22%7D%2C%7B%22x%22%3A97.99627%2C%22y%22%3A1445.0077%2C%22width%22%3A735.06273%2C%22height%22%3A29.62209999999982%2C%22text%22%3A%22Whilelimitinghowpersonalizedadscanbeuseddoes%22%7D%2C%7B%22x%22%3A95.89517%2C%22y%22%3A1488.3721%2C%22width%22%3A741.9462599999999%2C%22height%22%3A25.851200000000063%2C%22text%22%3A%22impactlargercompanieslikeuthechngewille%22%7D%2C%7B%22x%22%3A97.266655%2C%22y%22%3A1530.4344%2C%22width%22%3A721.322945%2C%22height%22%3A28.79449999999997%2C%22text%22%3A%22devastatingtosmallbusinessesdigh%22%7D%2C%7B%22x%22%3A99.33822%2C%22y%22%3A1570.696%2C%22width%22%3A424.95408%2C%22height%22%3A28.82990000000018%2C%22text%22%3A%22challengestheyfacerightnow.%22%7D%2C%7B%22x%22%3A97.83285%2C%22y%22%3A1635.1951%2C%22width%22%3A524.14255%2C%22height%22%3A25.81540000000018%2C%22text%22%3A%22Smallbusinessesdeservetobeheard.%22%7D%2C%7B%22x%22%3A99.72399%2C%22y%22%3A1677.8618%2C%22width%22%3A643.5314400000001%2C%22height%22%3A26.560400000000072%2C%22text%22%3A%22Wehearyourconcerns%2Candwestandwithyou%22%7D%2C%7B%22x%22%3A99.99742%2C%22y%22%3A1737.2522%2C%22width%22%3A504.62483%2C%22height%22%3A28.879500000000007%2C%22text%22%3A%22Joinusatfb.com%2FspeakUpForSmall%22%7D%2C%7B%22x%22%3A827.8073%2C%22y%22%3A1928.7971%2C%22width%22%3A229.38389999999993%2C%22height%22%3A30.704500000000053%2C%22text%22%3A%22FACEBOOK%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Werestanding%20uptoApplefor%20smallbusinesses%20everywhere%20AtFacebook%2Cmallbusinessisathecoreofour%20business.Morethan10milionbusinessesuseour%20advertisingtoolseachonthidw%20hireemployeesandengagewiththeircommunities%20Manyinthesmallbusinesscommunityhaveshared%20concernsaboutApple&#x27;sforcedsoftwreuda%20whichwilliitbusinesses&#x27;abilityorupsonlize%20adsandreachtheircustomerseffectively.%20Forty-fourpercentofsmalltomediumbusinesses%20startedorincreasedtheirusageofpersonalizedads%20onSoCialmediaduringthepandemiccodig%20newDeloittestudy.Withoutolizdd%20Facebookdatashowthattheeragesmalbuines%20advertiserstandstoseeacutofover60%25intheir%20salesforeverydollartheyspend.%20Whilelimitinghowpersonalizedadscanbeuseddoes%20impactlargercompanieslikeuthechngewille%20devastatingtosmallbusinessesdigh%20challengestheyfacerightnow.%20Smallbusinessesdeservetobeheard.%20Wehearyourconcerns%2Candwestandwithyou%20Joinusatfb.com%2FspeakUpForSmall%20FACEBOOK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A289%2C%22height%22%3A525%7D&quot;&gt;&lt;img data-height=&quot;525px&quot; data-ratio=&quot;1.8181818181818181&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UnKibSlmUib8hcfU3x1Bh2Kmefia08PJgwib28rAary2ooEsl59BCzryuNqZ5zLNCL0qibcNbRpyzeW3wnqicicliaa6yw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot; title=&quot;AD-Standing-up-to-Apple-for-small-business.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3ce87019f39df920a9289f2a7852aff5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;69dd91df5cf31ce71f1d9ced37ffc563&quot;&gt;互联网广告现在越来越精准了，我们在A站点看的东西，怎么就跑到B站点的广告里面去了？其中关键之一就是第三方cookie，广告巨头比如Google可以通过第三方cookie把我们在很多不同网站的行为给串联起来，你说它的广告能不准吗？想要理解这一点，不妨看一下基于cookie的广告是怎么做的。&lt;/p&gt;&lt;p data-lake-id=&quot;51bc2397b1f1a57b0a34d60b229aff15&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;99eaf3b354140b20cb3fb178f8f7c346&quot;&gt;基于cookie的广告是怎么做&lt;/h1&gt;&lt;p data-lake-id=&quot;59d5da9a306e47dc48bf68c8ca92fdc9&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b77fbc55c64ea650f07207cb5c905d45&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F928098%2F1608990674137-cbba8488-becf-4ee2-a18c-bcd2066458f8.jpeg%22%2C%22originWidth%22%3A886%2C%22originHeight%22%3A953%2C%22name%22%3A%22with-cookies.jpg%22%2C%22size%22%3A72307%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A59.332253%2C%22y%22%3A24.019806%2C%22width%22%3A301.095577%2C%22height%22%3A29.433407%2C%22text%22%3A%22Withthird-partycookies%22%7D%2C%7B%22x%22%3A53.77229%2C%22y%22%3A121.73191%2C%22width%22%3A136.21654%2C%22height%22%3A14.612310000000008%2C%22text%22%3A%22Theuserseesad%22%7D%2C%7B%22x%22%3A52.914597%2C%22y%22%3A140.89595%2C%22width%22%3A140.617003%2C%22height%22%3A15.680509999999998%2C%22text%22%3A%22onnews.example%22%7D%2C%7B%22x%22%3A51.73819%2C%22y%22%3A160.76697%2C%22width%22%3A81.07132999999999%2C%22height%22%3A13.700210000000027%2C%22text%22%3A%22(PUBLISHER)%22%7D%2C%7B%22x%22%3A15.536807%2C%22y%22%3A183.8588%2C%22width%22%3A223.625393%2C%22height%22%3A14.953550000000007%2C%22text%22%3A%22click-timeorview-timedata%22%7D%2C%7B%22x%22%3A32.69634%2C%22y%22%3A233.39407%2C%22width%22%3A127.47811000000002%2C%22height%22%3A15.893910000000005%2C%22text%22%3A%22AdtechUserID%22%7D%2C%7B%22x%22%3A142.92123%2C%22y%22%3A235.19176%2C%22width%22%3A108.72709999999998%2C%22height%22%3A14.157319999999999%2C%22text%22%3A%22ID123444445%22%7D%2C%7B%22x%22%3A365.67184%2C%22y%22%3A236.00935%2C%22width%22%3A46.53403000000003%2C%22height%22%3A16.378929999999997%2C%22text%22%3A%22ADID%22%7D%2C%7B%22x%22%3A424.2317%2C%22y%22%3A236.73242%2C%22width%22%3A82.3725%2C%22height%22%3A15.726349999999996%2C%22text%22%3A%22298499698%22%7D%2C%7B%22x%22%3A531.0852%2C%22y%22%3A243.7181%2C%22width%22%3A145.65949999999998%2C%22height%22%3A15.04743000000002%2C%22text%22%3A%22Becausethisisan%22%7D%2C%7B%22x%22%3A73.66232%2C%22y%22%3A258.79276%2C%22width%22%3A74.11234999999999%2C%22height%22%3A16.54946000000001%2C%22text%22%3A%223Pcookie%22%7D%2C%7B%22x%22%3A530.9611%2C%22y%22%3A258.95386%2C%22width%22%3A142.81185000000005%2C%22height%22%3A16.672879999999964%2C%22text%22%3A%22ID(unigue).itcan%22%7D%2C%7B%22x%22%3A341.20258%2C%22y%22%3A265.6344%2C%22width%22%3A69.63603999999998%2C%22height%22%3A15.993869999999959%2C%22text%22%3A%22Viewed%3F%22%7D%2C%7B%22x%22%3A423.66913%2C%22y%22%3A267.24545%2C%22width%22%3A28.31817000000001%2C%22height%22%3A13.271180000000015%2C%22text%22%3A%22yes%22%7D%2C%7B%22x%22%3A530.9988%2C%22y%22%3A276.5813%2C%22width%22%3A128.8710000000001%2C%22height%22%3A16.572630000000004%2C%22text%22%3A%22bemappdto...%22%7D%2C%7B%22x%22%3A340.95447%2C%22y%22%3A293.4698%2C%22width%22%3A112.57747999999998%2C%22height%22%3A16.508929999999964%2C%22text%22%3A%22clicked%3Fyes%22%7D%2C%7B%22x%22%3A216.48651%2C%22y%22%3A345.65915%2C%22width%22%3A275.69209%2C%22height%22%3A16.50930999999997%2C%22text%22%3A%22adtech.example(ADTECHPLATFORM)%22%7D%2C%7B%22x%22%3A545.8549%2C%22y%22%3A351.6379%2C%22width%22%3A105.48289999999997%2C%22height%22%3A15.987700000000018%2C%22text%22%3A%22Detaileddata%22%7D%2C%7B%22x%22%3A214.34058%2C%22y%22%3A364.51743%2C%22width%22%3A240.22592000000003%2C%22height%22%3A13.809970000000021%2C%22text%22%3A%22canrecognizetheuseracross%22%7D%2C%7B%22x%22%3A563.4218%2C%22y%22%3A371.91357%2C%22width%22%3A234.87610000000006%2C%22height%22%3A15.31241%2C%22text%22%3A%22Adservedonnews.example%22%7D%2C%7B%22x%22%3A213.9777%2C%22y%22%3A379.78778%2C%22width%22%3A195.874%2C%22height%22%3A17.33141999999998%2C%22text%22%3A%22sites(andaccesshighly%22%7D%2C%7B%22x%22%3A564.04474%2C%22y%22%3A387.1911%2C%22width%22%3A151.66509999999994%2C%22height%22%3A16.223270000000014%2C%22text%22%3A%22Campaign1091733%22%7D%2C%7B%22x%22%3A213.91576%2C%22y%22%3A396.16855%2C%22width%22%3A240.41279%2C%22height%22%3A19.42288000000002%2C%22text%22%3A%22detaileddatafrombothsites).%22%7D%2C%7B%22x%22%3A564.3566%2C%22y%22%3A404.29916%2C%22width%22%3A178.6690000000001%2C%22height%22%3A14.510290000000055%2C%22text%22%3A%22Creativeversion24%22%7D%2C%7B%22x%22%3A244.5865%2C%22y%22%3A418.39346%2C%22width%22%3A184.41725000000002%2C%22height%22%3A16.664800000000014%2C%22text%22%3A%22Adspendoptimization%22%7D%2C%7B%22x%22%3A557.959%2C%22y%22%3A418.68845%2C%22width%22%3A303.5124400000001%2C%22height%22%3A15.830989999999986%2C%22text%22%3A%22%2BUseRIocatedinNewJersey87038%22%7D%2C%7B%22x%22%3A549.8456%2C%22y%22%3A434.7465%2C%22width%22%3A76.14530000000002%2C%22height%22%3A15.132249999999999%2C%22text%22%3A%22(Hoboken)%22%7D%2C%7B%22x%22%3A247.20947%2C%22y%22%3A436.66565%2C%22width%22%3A153.26709%2C%22height%22%3A17.98888999999997%2C%22text%22%3A%22Cross-sitetracking%22%7D%2C%7B%22x%22%3A561.062%2C%22y%22%3A449.09616%2C%22width%22%3A292.60749999999996%2C%22height%22%3A16.645969999999977%2C%22text%22%3A%22ViewEDTHEADonSundaY10%3A92AM%22%7D%2C%7B%22x%22%3A53.590275%2C%22y%22%3A458.79633%2C%22width%22%3A141.14937500000002%2C%22height%22%3A16.456019999999967%2C%22text%22%3A%22Theuserbuyson%22%7D%2C%7B%22x%22%3A562.654%2C%22y%22%3A465.53918%2C%22width%22%3A282.2134%2C%22height%22%3A15.979160000000036%2C%22text%22%3A%22UseRIDonnews.example%3A32555%22%7D%2C%7B%22x%22%3A53.225094%2C%22y%22%3A478.45215%2C%22width%22%3A122.970006%2C%22height%22%3A16.14855%2C%22text%22%3A%22shoes.example%22%7D%2C%7B%22x%22%3A561.54895%2C%22y%22%3A480.68457%2C%22width%22%3A262.97895000000005%2C%22height%22%3A19.314269999999965%2C%22text%22%3A%22Useremailfornews.example%3A%22%7D%2C%7B%22x%22%3A546.2632%2C%22y%22%3A497.4087%2C%22width%22%3A124.93860000000006%2C%22height%22%3A16.82480000000004%2C%22text%22%3A%22alice%40doe.com%22%7D%2C%7B%22x%22%3A53.787445%2C%22y%22%3A500.37805%2C%22width%22%3A87.30809500000001%2C%22height%22%3A13.027449999999988%2C%22text%22%3A%22ADVERTISER)%22%7D%2C%7B%22x%22%3A15.94943%2C%22y%22%3A521.8549%2C%22width%22%3A172.59224%2C%22height%22%3A15.610399999999913%2C%22text%22%3A%22Conversion-timedata%22%7D%2C%7B%22x%22%3A698.4433%2C%22y%22%3A525.6306%2C%22width%22%3A146.65639999999996%2C%22height%22%3A15.700300000000084%2C%22text%22%3A%22news.exampledata%22%7D%2C%7B%22x%22%3A301.48474%2C%22y%22%3A567.50366%2C%22width%22%3A209.88918999999999%2C%22height%22%3A15.27649000000008%2C%22text%22%3A%22ConversionID819999999%22%7D%2C%7B%22x%22%3A31.970417%2C%22y%22%3A566.8687%2C%22width%22%3A121.85494299999999%2C%22height%22%3A17.30970000000002%2C%22text%22%3A%22AdtechUserID%22%7D%2C%7B%22x%22%3A167.38016%2C%22y%22%3A568.23376%2C%22width%22%3A85.63109%2C%22height%22%3A14.87324000000001%2C%22text%22%3A%22123444445%22%7D%2C%7B%22x%22%3A535.5336%2C%22y%22%3A574.7931%2C%22width%22%3A148.57724000000007%2C%22height%22%3A14.04690000000005%2C%22text%22%3A%22Becausethisisan%22%7D%2C%7B%22x%22%3A536.2959%2C%22y%22%3A589.9688%2C%22width%22%3A143.53235000000006%2C%22height%22%3A17.830640000000017%2C%22text%22%3A%22ID(unique)%2Citcan%22%7D%2C%7B%22x%22%3A69.79144%2C%22y%22%3A591.2338%2C%22width%22%3A77.16899000000001%2C%22height%22%3A16.497799999999984%2C%22text%22%3A%223Pcookie%22%7D%2C%7B%22x%22%3A539.4863%2C%22y%22%3A608.21%2C%22width%22%3A123.96349999999995%2C%22height%22%3A14.72804999999994%2C%22text%22%3A%22bemappedto...%22%7D%2C%7B%22x%22%3A551.2191%2C%22y%22%3A687.8386%2C%22width%22%3A109.90909999999997%2C%22height%22%3A15.969099999999912%2C%22text%22%3A%22Detaileddata%22%7D%2C%7B%22x%22%3A565.01324%2C%22y%22%3A708.8659%2C%22width%22%3A241.64995999999996%2C%22height%22%3A16.225000000000023%2C%22text%22%3A%22Convertedonshoesexampe%22%7D%2C%7B%22x%22%3A562.0043%2C%22y%22%3A720.8999%2C%22width%22%3A272.7659000000001%2C%22height%22%3A20.984699999999975%2C%22text%22%3A%22useriocatedinNewYorkCity%22%7D%2C%7B%22x%22%3A546.4825%2C%22y%22%3A740.6906%2C%22width%22%3A163.78480000000002%2C%22height%22%3A15.50649999999996%2C%22text%22%3A%2218813(Manhattan)%22%7D%2C%7B%22x%22%3A563.6122%2C%22y%22%3A754.6641%2C%22width%22%3A289.6491%2C%22height%22%3A18.15975000000003%2C%22text%22%3A%22ConvertedonWednesday2%3A15pm%22%7D%2C%7B%22x%22%3A560.8311%2C%22y%22%3A770.52527%2C%22width%22%3A271.8519%2C%22height%22%3A19.229490000000055%2C%22text%22%3A%22CustomerIDonshoes.example%22%7D%2C%7B%22x%22%3A547.511%2C%22y%22%3A788.5524%2C%22width%22%3A53.50162999999998%2C%22height%22%3A14.330839999999966%2C%22text%22%3A%22118688%22%7D%2C%7B%22x%22%3A561.6942%2C%22y%22%3A803.4508%2C%22width%22%3A182.31134999999995%2C%22height%22%3A15.545900000000074%2C%22text%22%3A%22shippingaddreon%22%7D%2C%7B%22x%22%3A546.23303%2C%22y%22%3A818.91046%2C%22width%22%3A297.31232%2C%22height%22%3A16.849540000000047%2C%22text%22%3A%22shoes.example%3ANicestr3%2C87938%22%7D%2C%7B%22x%22%3A559.6205%2C%22y%22%3A836.8161%2C%22width%22%3A228.17093999999997%2C%22height%22%3A14.235540000000015%2C%22text%22%3A%22CreditcarD09011112222%22%7D%2C%7B%22x%22%3A560.8673%2C%22y%22%3A852.22516%2C%22width%22%3A254.97505%2C%22height%22%3A13.907410000000027%2C%22text%22%3A%22OrdeID93662(1xshoes1x%22%7D%2C%7B%22x%22%3A546.4308%2C%22y%22%3A868.7725%2C%22width%22%3A50.6028%2C%22height%22%3A13.12074999999993%2C%22text%22%3A%22socks%22%7D%2C%7B%22x%22%3A564.62524%2C%22y%22%3A883.2217%2C%22width%22%3A177.76146000000006%2C%22height%22%3A16.036659999999983%2C%22text%22%3A%22PURchasevalueS138%22%7D%2C%7B%22x%22%3A694.1361%2C%22y%22%3A909.1387%2C%22width%22%3A151.3823299999999%2C%22height%22%3A13.869050000000016%2C%22text%22%3A%22shoes.exampledata%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Withthird-partycookies%20Theuserseesad%20onnews.example%20(PUBLISHER)%20click-timeorview-timedata%20AdtechUserID%20ID123444445%20ADID%20298499698%20Becausethisisan%203Pcookie%20ID(unigue).itcan%20Viewed%3F%20yes%20bemappdto...%20clicked%3Fyes%20adtech.example(ADTECHPLATFORM)%20Detaileddata%20canrecognizetheuseracross%20Adservedonnews.example%20sites(andaccesshighly%20Campaign1091733%20detaileddatafrombothsites).%20Creativeversion24%20Adspendoptimization%20%2BUseRIocatedinNewJersey87038%20(Hoboken)%20Cross-sitetracking%20ViewEDTHEADonSundaY10%3A92AM%20Theuserbuyson%20UseRIDonnews.example%3A32555%20shoes.example%20Useremailfornews.example%3A%20alice%40doe.com%20ADVERTISER)%20Conversion-timedata%20news.exampledata%20ConversionID819999999%20AdtechUserID%20123444445%20Becausethisisan%20ID(unique)%2Citcan%203Pcookie%20bemappedto...%20Detaileddata%20Convertedonshoesexampe%20useriocatedinNewYorkCity%2018813(Manhattan)%20ConvertedonWednesday2%3A15pm%20CustomerIDonshoes.example%20118688%20shippingaddreon%20shoes.example%3ANicestr3%2C87938%20CreditcarD09011112222%20OrdeID93662(1xshoes1x%20socks%20PURchasevalueS138%20shoes.exampledata%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A665%2C%22height%22%3A715%7D&quot;&gt;&lt;img data-height=&quot;715px&quot; data-ratio=&quot;1.0756207674943568&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8hcfU3x1Bh2Kmefia08PJgwibYrMUHBQwuurZsGpF2U7k5db96XickaCoDNa3enyticPXEVEJNZt0Aswg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;886&quot; title=&quot;with-cookies.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f1cadfb14e8a7ef893664a50be8afb2f&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;9f9419662e3beb9f2818f8be00858b5d&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;news.example是新闻站点，流量很高，靠互联网广告赚钱&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;shoes.example是卖鞋的购物网站，需要通过投放广告获取用户&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;adtech.example是广告服务商，shoes.example可以通过adtech.example在news.example投放广告&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户在news.example站点看新闻，会加载adtech.example的广告JS脚本（用于展现广告、记录广告浏览和点击数据），点击广告就可以跳转到了shoes.example站点&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户访问shoes.example的时候，也会加载adtech.example的JS脚本（用于记录下单数据）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;adtech.example的JS脚本可以为每一个用户生成唯一的用户ID，保存到cookie中，并发送到adtech.example的服务器，通过唯一ID将用户在news.example的广告浏览、点击数据与用户在shoes.example下单数据合并分析，计算广告的转化率&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;f7b83729312fb923a4b2df8ba76142b1&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0ab05d6c89d32d26b84a0c587d89bc32&quot;&gt;广告服务商adtech.example之所以可以计算广告转化率，原因在于它为每一个用户生成了唯一ID，并保存在cookie中。adtech.example的cookie对于news.example和shoes.example来说，都是第三方cookie（third party cookie，图中缩写为3P cookie）。&lt;/p&gt;&lt;p data-lake-id=&quot;384a6272e57b2e8c4bd5c46fec22d639&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;bafa6ff37cb0c67e38e0b2e8ba2c1f98&quot;&gt;在Chrome中，第三方cookie现在还是可以用的，只要cookie的SameSite属性设为None，同时设置Secure属性即可。&lt;/p&gt;&lt;p data-lake-id=&quot;279cd8ad49f230c92bf59cc764afa6cd&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;04d25a556f9a4929fa2e8b7b22907e99&quot;&gt;但是，Chrome计划在2022年停止支持第三方Cookie，这就意味着广告服务商adtech.example无法再通过Cookie来追踪用户了。其他主流的浏览器，比如Safari 13.1已经禁止使用第三方cookie了，Firefox和Edge也在做类似的事情。所以，禁用第三方Cookie是迟早的事情，会比我们想象中快很多。&lt;/p&gt;&lt;p data-lake-id=&quot;b2d226dfa7b688f4ed174b14f2f2ba65&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8da3d0e32f584cfe576ba6666ab621f1&quot;&gt;那时候，就算你把SameSite设为None，也不管用了，所以说，&lt;strong&gt;&lt;span&gt;这是一个价值数千亿美金的None，价值数十亿美元的空指针还要贵很多。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;43f98b2a4f95072e3bbe006a0dd63838&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9321f5b33adee9e07a7d331223d6d208&quot;&gt;Google既然敢说2年内不再支持第三方Cookie，肯定有其他办法继续卖广告，毕竟它是互联网最大的广告商之一啊。&lt;/p&gt;&lt;p data-lake-id=&quot;c09d58cd546b25aa89423da186d47d79&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;424bf8685562a2376f303d5cabea3440&quot;&gt;没有cookie的广告是怎么做&lt;/h1&gt;&lt;p data-lake-id=&quot;7357df0431526c3c2f74eb047ad578e0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9c56f60e743aaac047a29f68d20c4216&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F928098%2F1609038656399-818bd5f6-b9ef-4bca-aebc-0a8e522094b4.jpeg%22%2C%22originWidth%22%3A1341%2C%22originHeight%22%3A831%2C%22name%22%3A%22diagram-overview.jpg%22%2C%22size%22%3A55824%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A28.49714%2C%22y%22%3A33.399635%2C%22width%22%3A237.08956%2C%22height%22%3A23.485062%2C%22text%22%3A%22ADTECHPLATFORM%22%7D%2C%7B%22x%22%3A39.704144%2C%22y%22%3A73.48833%2C%22width%22%3A197.24379599999997%2C%22height%22%3A26.359005999999994%2C%22text%22%3A%22adtech.example%22%7D%2C%7B%22x%22%3A782.6091%2C%22y%22%3A117.24206%2C%22width%22%3A170.84590000000003%2C%22height%22%3A24.83451000000001%2C%22text%22%3A%223.Converted!%22%7D%2C%7B%22x%22%3A235.86363%2C%22y%22%3A218.76054%2C%22width%22%3A167.22037%2C%22height%22%3A25.861530000000016%2C%22text%22%3A%221.Theadtech%22%7D%2C%7B%22x%22%3A237.27844%2C%22y%22%3A244.6973%2C%22width%22%3A197.35959000000003%2C%22height%22%3A26.89869999999999%2C%22text%22%3A%22scriptisloaded.%22%7D%2C%7B%22x%22%3A26.99633%2C%22y%22%3A275.5502%2C%22width%22%3A133.55105%2C%22height%22%3A21.30707000000001%2C%22text%22%3A%22PUBLISHER%22%7D%2C%7B%22x%22%3A456.37814%2C%22y%22%3A276.7646%2C%22width%22%3A148.01176000000004%2C%22height%22%3A20.472770000000025%2C%22text%22%3A%22ADVERTISER%22%7D%2C%7B%22x%22%3A454.93936%2C%22y%22%3A303.20642%2C%22width%22%3A188.34764%2C%22height%22%3A24.76958000000002%2C%22text%22%3A%22shoes.example%22%7D%2C%7B%22x%22%3A27.68371%2C%22y%22%3A305.28027%2C%22width%22%3A177.98142%2C%22height%22%3A21.97950000000003%2C%22text%22%3A%22news.example%22%7D%2C%7B%22x%22%3A461.7034%2C%22y%22%3A344.57794%2C%22width%22%3A121.64530000000002%2C%22height%22%3A23.008579999999995%2C%22text%22%3A%22Checkout%22%7D%2C%7B%22x%22%3A886.7098%2C%22y%22%3A369.40292%2C%22width%22%3A126.53556000000003%2C%22height%22%3A26.16122999999999%2C%22text%22%3A%224.Askthe%22%7D%2C%7B%22x%22%3A1083.4607%2C%22y%22%3A369.66614%2C%22width%22%3A148.25049999999987%2C%22height%22%3A23.423519999999996%2C%22text%22%3A%225.Later%3Athe%22%7D%2C%7B%22x%22%3A669.3989%2C%22y%22%3A386.38333%2C%22width%22%3A64.16476%2C%22height%22%3A21.48239000000001%2C%22text%22%3A%22pixel%22%7D%2C%7B%22x%22%3A1083.5656%2C%22y%22%3A397.70364%2C%22width%22%3A102.88460000000009%2C%22height%22%3A18.284119999999973%2C%22text%22%3A%22browser%22%7D%2C%7B%22x%22%3A887.31903%2C%22y%22%3A399.20856%2C%22width%22%3A135.14342999999997%2C%22height%22%3A19.745480000000043%2C%22text%22%3A%22browserto%22%7D%2C%7B%22x%22%3A1083.5386%2C%22y%22%3A421.9537%2C%22width%22%3A123.24969999999985%2C%22height%22%3A21.644049999999993%2C%22text%22%3A%22sendsthe%22%7D%2C%7B%22x%22%3A888.60913%2C%22y%22%3A426.33215%2C%22width%22%3A105.33344%2C%22height%22%3A21.47645%2C%22text%22%3A%22record_a%22%7D%2C%7B%22x%22%3A1083.6244%2C%22y%22%3A441.72906%2C%22width%22%3A228.98500000000013%2C%22height%22%3A23.358040000000017%2C%22text%22%3A%22conversionreport.%22%7D%2C%7B%22x%22%3A890.72%2C%22y%22%3A453.5275%2C%22width%22%3A137.9891%2C%22height%22%3A19.920800000000042%2C%22text%22%3A%22conversion%22%7D%2C%7B%22x%22%3A888.2231%2C%22y%22%3A476.7118%2C%22width%22%3A167.03740000000005%2C%22height%22%3A22.41735%2C%22text%22%3A%22withacertain%22%7D%2C%7B%22x%22%3A887.4352%2C%22y%22%3A505.61658%2C%22width%22%3A72.30399999999997%2C%22height%22%3A18.08001999999999%2C%22text%22%3A%22value.%22%7D%2C%7B%22x%22%3A277.0972%2C%22y%22%3A573.08105%2C%22width%22%3A167.72897%2C%22height%22%3A23.436709999999948%2C%22text%22%3A%222.Adclicked!%22%7D%2C%7B%22x%22%3A277.0213%2C%22y%22%3A600.0779%2C%22width%22%3A257.36347%2C%22height%22%3A27.633460000000014%2C%22text%22%3A%22Storetheassociated%22%7D%2C%7B%22x%22%3A275.68378%2C%22y%22%3A629.7937%2C%22width%22%3A197.01909999999998%2C%22height%22%3A21.236400000000003%2C%22text%22%3A%22datainbrowser%22%7D%2C%7B%22x%22%3A276.08875%2C%22y%22%3A655.53644%2C%22width%22%3A102.7817%2C%22height%22%3A22.634210000000053%2C%22text%22%3A%22storage.%22%7D%2C%7B%22x%22%3A27.001944%2C%22y%22%3A677.83154%2C%22width%22%3A121.465036%2C%22height%22%3A22.694560000000024%2C%22text%22%3A%22BROWSER%22%7D%2C%7B%22x%22%3A334.10333%2C%22y%22%3A723.9948%2C%22width%22%3A86.64386999999999%2C%22height%22%3A22.28895%2C%22text%22%3A%22ClickID%22%7D%2C%7B%22x%22%3A623.4695%2C%22y%22%3A725.30225%2C%22width%22%3A183.23199999999997%2C%22height%22%3A23.454450000000065%2C%22text%22%3A%22Conversiondata%22%7D%2C%7B%22x%22%3A334.04822%2C%22y%22%3A762.81885%2C%22width%22%3A114.10591999999997%2C%22height%22%3A17.22429999999997%2C%22text%22%3A%22200409698%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ADTECHPLATFORM%20adtech.example%203.Converted!%201.Theadtech%20scriptisloaded.%20PUBLISHER%20ADVERTISER%20shoes.example%20news.example%20Checkout%204.Askthe%205.Later%3Athe%20pixel%20browser%20browserto%20sendsthe%20record_a%20conversionreport.%20conversion%20withacertain%20value.%202.Adclicked!%20Storetheassociated%20datainbrowser%20storage.%20BROWSER%20ClickID%20Conversiondata%20200409698%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A671%2C%22height%22%3A416%7D&quot;&gt;&lt;img data-height=&quot;416px&quot; data-ratio=&quot;0.6196868008948546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8hcfU3x1Bh2Kmefia08PJgwib9X3qb8A2N0GbeakPdpetWLVrLuxscUnQeUlZX6MHOB4MYylSrImODA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1341&quot; title=&quot;diagram-overview.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7178d75347e6b5de6b1c24c4044aaf8c&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;cc3aa19ff3bb7437614d0699177f8f3c&quot;&gt;故事的主角没变：&lt;/p&gt;&lt;p data-lake-id=&quot;08293e629ddcc3751be684df902b0cca&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;b4659791c9d7b1667729d0cc1cf0d259&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;news.example是新闻站点，流量很高，靠互联网广告赚钱&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;shoes.example是卖鞋的购物网站，需要通过投放广告获取用户&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;adtech.example是广告服务商，shoes.example可以通过adtech.example在news.example投放广告&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;bd0d7e43a82fb9311876534af7da3c62&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;cefb9a8a4de3014c87e16359c94f329b&quot;&gt;区别在于，广告商不再使用cookie保存用户的唯一ID，没法通过cookie来把用户在news.example点击广告的行为与用户在adtech.example的下单行为关联起来了，那这广告转化率还怎么算？&lt;/p&gt;&lt;p data-lake-id=&quot;f0786d2a232ed4ece6dfa0c72819124b&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0f9b99bb86dc7624bd3431e149c90a8b&quot;&gt;这时候Chrome就出来说了，你们别想什么数据都拿走了，我来决定给你什么数据，提出了Event Conversion Measurement API。&lt;/p&gt;&lt;p data-lake-id=&quot;eee2e51ce5bfbd4fd5d9818459ba09ce&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;84b6ecd035b210504de431f3274085dd&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;用户在news.example站点看新闻，会加载adtech.example的广告JS脚本，因此可以看到shoes.example的广告，点击广告就可以跳转到了shoes.example站点，用户的点击行为会记录到浏览器，存在本地&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户访问shoes.example的时候，用户的下单行为也会记录到浏览器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据adtech.example接入广告时配置的信息，浏览器可以把在news.example点击广告的行为与用户在adtech.example的下单行为关联起来，上报给广告服务商，这样广告服务商就可以计算转化率了&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;浏览器在上报数据给广告服务商时，会进行一定的数据混淆，并且会有延时，这样可以进一步保护用户隐私。因为如果实时上报数据的话，广告服务商知道用户下单的准确时间，就能和广告主&quot;串通&quot;起来分析用户到底是谁。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;6fbcacf3788c086482c39f722b3df5a0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;44f7251dd780c777af0b9542b546608c&quot;&gt;由于跨站点的用户行为的关联是浏览器做的，因此广告服务商所能获取的用户数据将局限于浏览器所做的限制，Chrome可以决定给哪些数据、是否给完全精准的数据、什么时候给数据。Chrome的代码是开源的，Event Conversion Measurement API也是一个开放的标准，我们也不用担心Chrome会故意给自己留什么后门。&lt;/p&gt;&lt;p data-lake-id=&quot;3938258877e60af9e67f604cc48e7bb1&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5826b00f6eadec111bbdde4933cc3265&quot;&gt;看起来一切都很完美，用户隐私得到了保护，news.example、shoes.example、adtech.example也都赚到了钱。&lt;/p&gt;&lt;p data-lake-id=&quot;31051a4fdc9100006cce4135c2e14da8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;aa610c9c38e8bb7edbf46d1ac1364923&quot;&gt;但是，这事对adtech.example来说，还是有点难受，因为它没法获取全面的用户数据，也没法实时分析广告转化率了，也没法把用户在各个站点的用户行为串联起来了。用户隐私的保护确实增强了，但是互联网广告商的日子不太好过了，这也是合理并且也是趋势吧，现在的广告商们确实玩得有点过火了，搜集了太多用户数据。&lt;/p&gt;&lt;p data-lake-id=&quot;74ef2ee0294c75f2198c21a065a14bc7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b076d97d9b8cfe5501446c2899f4cb3f&quot;&gt;还有一个问题，Event Conversion Measurement API其实有点复杂的，只是我没有讲得特别细（大家估计也没兴趣），如果每一个浏览器都自己搞一套类似于Chrome的Event Conversion Measurement API，复杂度差不多，然后还不太一样，那也是一件很头疼的事情:(&lt;/p&gt;&lt;p data-lake-id=&quot;755f39288463318c709c3740de677846&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;34e280ad20a98f0152247709c32cf844&quot;&gt;思考&lt;/h1&gt;&lt;p data-lake-id=&quot;0fdf18b898adb1352f063ca69601a109&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8f82b70f61b0893ef9832cdf61806af3&quot;&gt;Chrome解决互联网广告问题的技术方案确实还有点意思，也值得关注。不过，我最大的感慨倒不是这个问题本身。说白了这只是Chrome改变互联网行业的一件比较小的事情，与其他事相比也没什么。&lt;/p&gt;&lt;p data-lake-id=&quot;73d92f176870eaa7ec5d9482a496360c&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;031db600a6713161b7cb58ce0cb3aa08&quot;&gt;正如我在1年前的博客&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MDc5NTk2NQ==&amp;amp;mid=2247485311&amp;amp;idx=1&amp;amp;sn=6a0a50bd0f77daf3cb3357ff39c9d26f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;JavaScript深入浅出第5课：Chrome是如何成功的？&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;JavaScript深入浅出第5课：Chrome是如何成功的？&lt;/a&gt;中所写的，Chrome在诞生之初，就致力于推动Web技术向前发展：&lt;/p&gt;&lt;p data-lake-id=&quot;29b92b80a2ad137a6d1ce0d37ed6c1a9&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p data-lake-id=&quot;5f00dcaa804a3eb135293d50904f484a&quot;&gt;We hope to collaborate with the entire community to help drive the web forward.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-lake-id=&quot;9ce4ecb925451a8ced399cb893edd189&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dddcb9baccfe83056e80ce5cb1fdbacc&quot;&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;这样的话在2008年大概没人相信，但是这不重要，重要的是Google真的做到了，Chrome确实推动了Web技术的发展。没有Chrome的话，就没有V8引擎，就没有Node.js，就没有NPM，就没有Babel，就没有ESLint，就没有VS Code，就没有Vue/React，就没有现在异常繁荣的前端生态系统，也没有&lt;/span&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;ECMAScript、HTTPS、HTTP/2、&lt;/span&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;HTTP/3、&lt;/span&gt;&lt;span data-mce-style=&quot;font-size: 11px&quot;&gt;WebAssemblys等Web相关技术标准的快速进步。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eb3aa5e78e48331b127151265128ee3d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6dbb95eded711200a02b18e9493f11ea&quot;&gt;功利一点，如果没有Chrome，Google这个互联网最大的广告商，它要怎么解决第三方Cookie被限制的问题，恐怕会非常被动。Facebook没有浏览器和操作系统的控制权，面对Apple，也是束手无策，沦落到在报纸上发广告自救，而这又有什么用呢？&lt;/p&gt;&lt;p data-lake-id=&quot;4e96afaf1cd673858893a98b5ac9b025&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3527bc90672f97899405918ab468a795&quot;&gt;所以，如果巨头们如果还没有危机感，还不去深入研究计算机的底层技术，搭建自己的技术生态系统，以后遇到同样的挑战的时候，大概也只能去发发报纸广告了。&lt;/p&gt;&lt;p data-lake-id=&quot;b2cf78cad4ceb024fe20510a0def87b7&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;b1961468cabea5be5e0427ece9bce9bb&quot;&gt;参考&lt;/h1&gt;&lt;ul data-lake-id=&quot;c97804cd9728857e61b1efe3f13a1e4a&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;A more private way to measure ad conversions, the Event Conversion Measurement API&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A more private way to measure ad conversions&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Using HTTP cookies&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What are Third Party Cookies, How do they work?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SameSite Cookie Attribute Explained by Example (Strict, Lax, None &amp;amp; No SameSite)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Building a more private web: A path towards making third party cookies obsolete&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MDc5NTk2NQ==&amp;amp;mid=2247485311&amp;amp;idx=1&amp;amp;sn=6a0a50bd0f77daf3cb3357ff39c9d26f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;JavaScript深入浅出第5课：Chrome是如何成功的？&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;JavaScript深入浅出第5课：Chrome是如何成功的？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;7467942e7b003185e405ad2344325e45&quot;&gt;&lt;span&gt;招聘&lt;/span&gt;&lt;/h1&gt;&lt;p data-lake-id=&quot;de4835ddf7e7a214a5403d922704bfe4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;51f066d09a71deb3b7c38119d4f34e3d&quot;&gt;&lt;span&gt;&lt;span&gt;阿里巴巴业务平台事业部长期招聘P6及以上前端大佬，参与建设最前沿的阿里前端生态系统，推动行业技术发展，内推地址：&lt;/span&gt;&lt;span&gt;hanyan.lk@alibaba-inc.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;欢迎大家关注我的微信公众号&lt;/span&gt;&lt;strong&gt;寒雁Talk&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UnKibSlmUib8hQxPlpiaFxBs15sjiaeBQicnBdZU9zDvK2siaAPK2I0Eib1m6XthEG4EDEN4AibicibyibJwtNVTRdrZib33Bw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2b043ad00bd1ea513b4df4009fe3696f</guid>
<title>让 API 并行调用变得如丝般顺滑的绝招</title>
<link>https://toutiao.io/k/itzxhci</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当数据量较大的时候，都会通过分库分表来拆分，分担读写的压力。分库分表后比较麻烦的就是查询的问题，如果不是直接根据分片键去查询的话，需要对多个表进行查询。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一些复杂的业务场景下，比如订单搜索，除了订单号，用户，商家 这些常用的搜索条件，可能还有时间，商品等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前常见的做法将数据同步到 ES 这类搜索框架中进行查询，然后通过搜出来的结果，一般是主键 ID, 再去具体的数据表中查询完整的数据，组装返回给调用方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如下面这段代码，首先查询出文章信息，然后根据文章中的用户 ID 去查询用户的昵称。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;ArticleBO&amp;gt; articleBos = articleDoPage.getRecords().stream().map(r -&amp;gt; {&lt;br/&gt;    String nickname = userManager.getNickname(r.getUserId());&lt;br/&gt;    return articleBoConvert.convertPlus(r, nickname);&lt;br/&gt;}).collect(Collectors.toList());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果文章有 10 条数据，那么就需要调用 10 次用户服务提供的接口，而且是同步调用操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以用并行流来实现并发调用，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;ArticleBO&amp;gt; articleBos = articleDoPage.getRecords().parallelStream().map(r -&amp;gt; {&lt;br/&gt;    String nickname = userManager.getNickname(r.getUserId());&lt;br/&gt;    return articleBoConvert.convertPlus(r, nickname);&lt;br/&gt;}).collect(Collectors.toList());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并行流的优点很明显，代码不用做特别大的改动。需要注意如果用并行流，最好单独定义一个 ForkJoinPool。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了用并行流，还可以使用批量查询的方式来提高性能，降低 RPC 的调用次数，代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;Long&amp;gt; userIds = articleDoPage.getRecords().stream().map(article -&amp;gt; article.getUserId()).collect(Collectors.toList());&lt;br/&gt;Map&amp;lt;Long, String&amp;gt; nickNameMap = userManager.queryByIds(userIds).stream().collect(Collectors.toMap(UserResponse::getId, UserResponse::getNickname));&lt;br/&gt;List&amp;lt;ArticleBO&amp;gt; articleBos = articleDoPage.getRecords().stream().map(r -&amp;gt; {&lt;br/&gt;    String nickname = nickNameMap.containsKey(r.getUserId()) ? nickNameMap.get(r.getUserId()) : CommonConstant.DEFAULT_EMPTY_STR;&lt;br/&gt;    return articleBoConvert.convertPlus(r, nickname);&lt;br/&gt;}).collect(Collectors.toList());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但批量查询还是同步模式，下面介绍如果使用 CompletableFuture 来实现异步并发调用，直接用原生的 CompletableFuture 也可以，但是编排能力没有那么强，这里我们选择一款基于 CompletableFuture 封装的并行编排框来实现，详细介绍查看我之前的这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMDY0Nzk2Mw==&amp;amp;mid=2650321192&amp;amp;idx=1&amp;amp;sn=8ea8cf7c4a3402bd42e74c7dbef1d5b5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;https://mp.weixin.qq.com/s/3EE8ccydK16gC1oY4AWnoA&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;稍微做了下封装，提供了更方便使用的工具类来实现并发调用多个接口的逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一种方式，适用于比如从 ES 查出了一批 ID, 然后根据 ID 去数据库中或者调用 RPC 查询真实数据，最后得到一个 Map，可以根据 Key 获取对应的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内部是多线程并发调用，会等到结果全部返回。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Object aggregationApi() {&lt;br/&gt;    long s = System.currentTimeMillis();&lt;br/&gt;    List&amp;lt;String&amp;gt; ids = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;    ids.add(&quot;1&quot;);&lt;br/&gt;    ids.add(&quot;2&quot;);&lt;br/&gt;    ids.add(&quot;3&quot;);&lt;br/&gt;    Map&amp;lt;String, UserResponse&amp;gt; callResult = AsyncTemplate.call(ids, id -&amp;gt; {&lt;br/&gt;        return userService.getUser(id);&lt;br/&gt;    }, u -&amp;gt; u.getId(), COMMON_POOL);&lt;br/&gt;    long e = System.currentTimeMillis();&lt;br/&gt;    System.out.println(&quot;耗时：&quot; + (e-s) + &quot;ms&quot;);&lt;br/&gt;    return &quot;&quot;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一个场景就是 API 聚合的场景，需要并行调用多个接口，将结果进行组装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;List&amp;lt;AsyncCall&amp;gt; params = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;AsyncCall&amp;lt;Integer, Integer&amp;gt; goodsQuery = new AsyncCall(&quot;goodsQuery&quot;, 1);&lt;br/&gt;params.add(goodsQuery);&lt;/code&gt;&lt;code&gt;AsyncCall&amp;lt;String, OrderResponse&amp;gt; orderQuery = new AsyncCall(&quot;orderQuery&quot;, &quot;100&quot;);&lt;br/&gt;params.add(orderQuery);&lt;/code&gt;&lt;code&gt;UserQuery q = new UserQuery();&lt;br/&gt;q.setAge(18);&lt;br/&gt;q.setName(&quot;yinjihuan&quot;);&lt;br/&gt;AsyncCall&amp;lt;UserQuery, UserResponse&amp;gt; userQuery = new AsyncCall(&quot;userQuery&quot;, q);&lt;br/&gt;params.add(userQuery);&lt;/code&gt;&lt;code&gt;AsyncTemplate.call(params, p -&amp;gt; {&lt;br/&gt;    if (p.getTaskId().equals(&quot;goodsQuery&quot;)) {&lt;br/&gt;        AsyncCall&amp;lt;Integer, Integer&amp;gt; query = p;&lt;br/&gt;        return goodsService.getGoodsName(query.getParam());&lt;br/&gt;    }&lt;br/&gt;    if (p.getTaskId().equals(&quot;orderQuery&quot;)) {&lt;br/&gt;        AsyncCall&amp;lt;String, OrderResponse&amp;gt; query = p;&lt;br/&gt;        return orderService.getOrder(query.getParam());&lt;br/&gt;    }&lt;br/&gt;    if (p.getTaskId().equals(&quot;userQuery&quot;)) {&lt;br/&gt;        AsyncCall&amp;lt;UserQuery, UserResponse&amp;gt; query = p;&lt;br/&gt;        return userService.getUser(query.getParam());&lt;br/&gt;    }&lt;br/&gt;    return null;&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AsyncCall 中定义参数和响应的类型，响应结果会在执行完后会自动设置到 AsyncCall 中。在 call 方法中需要根据 taskId 去做对应的处理逻辑，不同的 taskId 调用的接口不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源码参考：https://github.com/yinjihuan/kitty&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;关于作者&lt;/strong&gt;：尹吉欢，简单的技术爱好者，《Spring Cloud 微服务-全栈技术与案例解析》, 《Spring Cloud 微服务 入门 实战与进阶》作者, 公众号 &lt;strong&gt;猿天地&lt;/strong&gt; 发起人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;有收获，不要吝啬你的转发和在看。&lt;/strong&gt;&lt;/p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b88e275dfbbb78936f07398c15e9a97f</guid>
<title>对内 DDD 对外 API：对外 API 的设计理念</title>
<link>https://toutiao.io/k/zu5f1b1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/PdibpV1sFDHfGojNtRLJPxibwwnzibtuecoo4hgYJZ2yr7GOX4gnl3FaVBhiac0senCia9zobib3nJd7nOia722qoialu153DRGcH3ff/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;点击蓝字，关注我们&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/PdibpV1sFDHfGojNtRLJPxibwwnzibtuecom8rqOBO9liabZL8MQIwIu7wPyuF1FUwSc9icZ4fnozEPpsBtbr2lB3LrpUj3Zdxap2/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;100&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;100&quot; data-ratio=&quot;1.0015822784810127&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7lQuY49zT1Pb8c3Grw4G6HpXUCAZlf7f8zfOVKibn9KoHRDO18GOFbBP32ETcMAHlhYBvjupXCxibHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;632&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;李征&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;去哪儿网工程师&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;2017年2月加入去哪儿网。目前专注于领域服务治理、基于API治理的领域能力标准化。致力于通过领域化、模型化、可感知来解决业务复杂度。期望用DDD驱动，降低系统复杂度，提升团队效能。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;对内 DDD，对外 API 是去哪儿网机票目的地事业群业务研发团队2020年 Q3 重点推出的业务重塑架构设计理念。在2020年 Q3，去哪儿网在过往的基础上，在 API 标准化这个领域做出了一些进步，这篇文章主要就是把这方面的经验和大家分享一下。&lt;/p&gt;&lt;p&gt;什么是对内 DDD，对外 API 呢，这个是我们业务研发领域内使用 DDD 作为领域设计、微服务设计的理念的实践原则，领域间使用 API 进行交互的一种通俗易懂的说法。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;1 去哪儿网 API 发展的历史简述&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;去哪儿网在 API 领域其实有不少成熟的工具，常用主要包括 wiki、YAPI 和 swagger。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;wiki&lt;/strong&gt; 是去哪儿网最为传统的 API 承载工具，公司较早出现的公共平台，如支付中心，所提供的标准 API 就全部是通过 wiki 的方式呈现出来的。wiki 的优点是自由度相对较高，不受到各种规范的约束，修改也比较随意，可以非常个性化的去满足某些接口阅读者的诉求，天然的安全性较好，非公司内员工没有权限进行访问。缺点就要更多一些，例如因为没有一定的接口规范进行约束，接口的定义方式五花八门，有各种非常个性化的约定方式，相同的约定方式，呈现方式也不一样，有的倾向于给出嵌套式的呈现，有的则倾向于给出模块化的呈现，接口定义与接口之间的同步全部依赖规范和工程师的自觉，极易出现 wiki 与代码不匹配的情况。&lt;/p&gt;&lt;p&gt;正因为如此，我们可以说从提供 API 的角度看，wiki 可以提供可读性较好的 API 但是 wiki 不能提供可信、可靠的 API。&lt;/p&gt;&lt;p&gt;在去哪儿网起到支撑作用的第二个解决方案是 &lt;strong&gt;YAPI&lt;/strong&gt;，YAPI 兴起的背景是从2016年开始的前后端分离架构。前后端分离使得前端工程变得更加独立。YAPI 也在2018年成为了去哪儿网的开源项目。YAPI 作为前端同学开发的接口平台直到现在仍然是去哪儿网 API 解决方案中的基石之一。YAPI 的作用用一句话来表述就是“共同维护一份接口定义，并连接前后端”。&lt;/p&gt;&lt;p&gt;YAPI 与 wiki 的区别可以用下图来表示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3579710144927537&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AdUYsakTGibqPms7n7vjibOaLPgtLekOPibszmRogtrDS7DQrM2blfdJiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;从上图可以看出，YAPI 通过支持打桩测试这个抓手，通过运行 API 接口，测试能否得到预期中的结果来倒逼文档与接口定义一致。这个实现方式十分的巧妙，但是也十分依赖测试环境的完善以及对 API 测试的硬性要求，如果这两者得不到保障，那么这么巧妙的一个模式最终造成的结果仍然是接口与接口文档的分类和不同步。与用 wiki 差别不大，只是 YAPI 拥有着更加符合 RestFul API 规范的接口管理平台，这点与 wiki 相比对 API 的定义是一种约束。&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了防止接口定义与接口不同步（文档与代码不同步），后端同学引入了用于与代码使用 annotation 方式绑定在一起的&lt;/span&gt; &lt;strong&gt;swagger&lt;/strong&gt;，并且在 swagger 的基础之上做了一些基于 maven 的扩展，使得通过 swagger 编写的规范能够通过 maven 命令和发布等工程状态变化将接口的变化更新到 YAPI 平台，解决接口文档与接口实现不匹配的问题。&lt;/p&gt;&lt;p&gt;swagger -&amp;gt; YAPI 取得了一定的效果，但是因为使用 swagger 来编写 API 文档的工程比较少，并且少有人知道有 swagger -&amp;gt; YAPI 这个工具，使得 swagger -&amp;gt; YAPI 这种方式并没有在公司内部推广开来使用。&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2 去哪儿网推进 API 标准化建设的原因&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;2020年因为疫情的原因，去哪儿网开始了轰轰烈烈的“练内功”行动，这其中就包括核心业务领域的业务 DDD 重塑、硬件成本节约、API 内部实现重构等。&lt;/p&gt;&lt;p&gt;做这几件事情的时候我们面临了一些困难：&lt;/p&gt;&lt;p&gt;1、DDD 重构需要与领域外通过接口进行调用，那么一个领域与外部领域之间提供多少接口比较合适呢？10个？30个？50个？如果提供的 API 过多，是否意味着 API 不够标准，质量不够高呢？&lt;/p&gt;&lt;p&gt;2、硬件成本中包括实体机&amp;amp;虚拟机节点成本和离线日志、实时日志成本，那么实体机虚拟机节点多少是比较合适的？系统的离线日志、实时日志产出多少又是合适的？这部分很依赖系统 API 的数量以及 API 访问量的提供。&lt;/p&gt;&lt;p&gt;3、API 内部功能重构后，哪些下游访问了这个 API？在使用诸如 QueryDiff 等工具对接口本身进行回归之后，出于保险起见需要对哪些下游系统进行回归测试呢？这方面就很依赖于 API 的上下游关系的治理，而想实现基于治理结果的自动化测试则依赖 API 的标准化。&lt;/p&gt;&lt;p&gt;通过上面几个例子我们看到，API 重新成为重要的技术改进点是整体上对内 DDD，对外 API 系统架构理念的需要，是硬件成本管理的需要，是平台化服务重构的需要。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9684813753581661&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AHbMmGQ5FicAGekRMlJriaQicny72A1gOibI0BYTwkYdOLNouuUpO8lmITQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3 API 标准化的理论基础&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;API 标准化的理论基础来自于 Jeff Bezos 2002年提出的系统间接口化理念，后续这个理念被逐步充实成为了一种称为 SOA 成熟度的理念。&lt;/p&gt;&lt;p&gt;Bezos 是这样表述 Amazon 系统接口化的理念的：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;273&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;2002年，贝索斯突然向全公司发布了一道指令。 &lt;/p&gt;&lt;p&gt;-从今天起，所有的团队都要以服务接口的方式，提供数据和各种功能。 &lt;/p&gt;&lt;p&gt;-团队之间必须通过接口来通信。 &lt;/p&gt;&lt;p&gt;-不允许任何其他形式的互操作：不允许直接链接，不允许直接读其他团队的数据，不允许共享内存，不允许任何形式的后门。唯一许可的通信方式，就是通过网络调用服务。 &lt;/p&gt;&lt;p&gt;-具体的实现技术不做规定，HTTP、Corba、PubSub、自定义协议皆可。 &lt;/p&gt;&lt;p&gt;-所有的服务接口，必须从一开始就以可以公开作为设计导向，没有例外。这就是说，在设计接口的时候，就默认这个接口可以对外部人员开放，没有讨价还价的余地。 &lt;/p&gt;&lt;p&gt;-不遵守上面规定，就开除。&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9437428243398392&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7A1pgxibic2mWIPHd9CNG7qlYb9csticgo6MurOzSLTocnL193QIOldUPaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;871&quot;/&gt;&lt;/p&gt;&lt;p&gt;而从上面 Jeff Bezos 的决策发展出来的 SOA 成熟度模型则对于 API 的标准化有着较为明确的要求，包括：&lt;/p&gt;&lt;p&gt;从上面的一系列对 API 的要求总结下来，我们需要 API 具有如下特点：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;规范易理解&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;组件易接入&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;语法易使用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;执行易管理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;平台易应用&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;还有一个总的原则：所有功能基于已有的去哪儿网基建，不重复造轮子。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.204&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AoMH8ibsehGsicStLXtvz2ohBDxp4LibNSl6hIH26x1T8Fe9CvTD0HOiaXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;section&gt;由此得到了去哪儿网 API 标准化整体解决方案：&lt;/section&gt;&lt;p&gt;其中，API 存储平台 YAPI 是现成的，稍加改造即可支持本次 service api 标准化的诉求，应用树管理平台也是现成的，去哪儿网的现有系统叫做 Portal，应用域管理平台 qtracer 也是现成的，只是针对本次需求对功能做了扩展，网关和开放平台也是现成的，这次做了二者的系统集成。可以说，只有 QDoc-annotation 和 QDoc-maven-plugin 是新创建的插件、工具。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;4 API 标准化的具体实施过程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;4.1 规范易理解&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;首先我们要做的就是制定一套 API 书写规范，这套书写规范主要是限定我们针对 API 说明的注解或者注释如何进行组织，相当于一个业务系统 Domain 维度的实体对象关系设计。我们对于 API 大致设计了如下这些元素：&lt;/p&gt;&lt;p&gt;通过规范制定委员会规范了如下一些术语：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;领域（domain/group）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;针对某一项业务的总体系统边界，一个领域（domain）会包含多个应用（appcode），一个领域对外暴露的接口是通过 appcode 来暴露的，属于对外开放部分。注：领域可以映射到应用树的三级节点 / 四级节点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应用（appcode）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;应用特指 Qunar 体系下的 appcode，一个 appcode 即一个应用。&lt;span&gt;存在一种特殊情况，一套代码（一个 git 工程）部署多个 appcode，我们认为是多个应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;服务（service）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;同一个 appcode 下，可以提供多个服务（service）。对于不同服务实现（dubbo / http）会有不同的表现形式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;接口（interface）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是一个最细粒度的功能维度，是 service 的一个真子集。对于不同服务实现（dubbo/http）会有不同的表现形式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参数（parameter）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;参数是接口的重要组成部分。对于不同服务实现（dubbo / http）会有不同的表现形式。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;对于 dubbo，很好理解，基于 java 的方法签名的入参即可，同时包括 RpcContext 中的内容（除特殊情况，等同于 QTraceContext）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;对于 http，参数包含四部分，第一部分是由 URL 中的参数列表传递的，第二部分是放到 POST 的 http 数据中的。通常这两部分基于 Spring MVC，都是可以通过 @RequestParam 定义的。第三部分是 cookie 信息（request header），第四部分等同于 QTraceContext。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;类型（type）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;无论对于入参和出参而言，都需要用类型进行标识。类型是一个可描述的结构定义。对于不同服务实现（dubbo / http）会有不同的表现形式。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;对于 dubbo，显而易见的，Java 的类型定义，即为这里的 type。同时需要说明一种特殊情况 Object，对于 Object 而言，其代表任意结构，这在 type 里是不允许的，必须标识出对应 Object 的实际类型（具体的类定义，或 json schema定义）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于 http，入参一般是基本类型、或类 JSON 类型（包括集合等，都以 json 描述），出参都以 json 描述。http 是一个弱类型定义系统，对于文档是不友好的，因此我们规定入出参类型以 json schema 方式定义。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;规范术语后，我们开始制定与术语相对应的注解和注释，一期我们先规范了对应的注解：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领域（@QDomainDoc）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;应用（@QAppcodeDoc）
服务（@QServiceDoc）
接口（@QInterfaceDoc） 这里面存在参数注解和返回值是否可以删除
参数（@QParamDocs）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;参数（@QParamDoc）
Model参数（@QParamModel）
Model属性的注解 （@QParamModelProperty）&lt;span&gt;类型（@QTypeDoc）等同于 @RequestParam。&lt;/span&gt;目前未实现，后续支持
返回值状态码的描述（@QResponses)
返回值状态码的描述（@QResponse)
返回值数据描述说明
返回值数据（@QResponseDocs)
返回值数据（@QResponseDoc)
异常（@QExceptionDoc）
扩展（@QExtensionDoc）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相应的每一个注解我们也都会给出对应 annotation 参数使用说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;服务（@QServiceDoc）&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;描述 service 的用途：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.27109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AVtEGkZUSwWaFcVXub0IkF49aibVycxiaKrJdPPrTNke93x7UUNWxlZmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;大家可以看到，QDoc 给出的规范术语和 annotation 充分考虑到了去哪儿同学通常使用的工程上下文语境，例如 Domain、AppCode，都是去哪儿网工程语境中的常用词汇，一看到这些词就能想到是做什么用的，这些贴近工程师常用词汇的术语使得工程师对于 QDoc 规范的理解很顺畅，不需要看大段的说明就可以理解个大概，学习成本低，上手使用很快。这点是去哪儿网制定的规范与 swagger2.0，swagger3.0，smart-doc 等第三方 API 工具的很主要的区别，也是我们在支持 OpenAPI3.0 规范的前提下，采用自定义 API 术语的一个很重要的原因。&lt;/p&gt;&lt;p&gt;当完成了基于 annotation 的 API 规范化组件定义后，下一步就是对应工具、插件的开发以及工具的接入工作。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;4.2 组件易接入&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;QDoc 为了方便业务线工程师的接入，最大限度的不让业务线开发工程师在接入 QDoc 的过程中有额外的开发量，采用了 jar 包加 maven 插件的方式，接入步骤十分简单：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务接入步骤&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接入 qdoc 服务需要在 pom 中引入对应的 maven 插件，来完成 qdoc 的发布；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如需采用 Annotation 方式撰写 API 文档，则，需要 qdoc-annotation 包以便完成编写；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;具体依赖引入：&lt;span&gt;（Maven Plugin)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.qunar.fd&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;qdoc-maven-plugin&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${qdoc.maven.version}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;QDoc Annotation&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.qunar.fd&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;qdoc-annotation&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;${qdoc.annotation.version}&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;4.3 语法易使用&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;QDoc 的语法分为两部分：一部分是 git 工程侧语法，一部分是代码 API 侧语法，两部分共同构成了去哪儿网标准化的 API。&lt;/p&gt;&lt;p&gt;Git 工程侧语法如下，QDomainDoc 和 QAppcodeDoc 都采用这种方式进行应用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5011494252873563&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AibUBYuG9Kf03on963mOpdiapbMbUqZSN3kn7HDsvJeib8Rz7bvFm8htUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;435&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除 QDomainDoc 和 QAppcodeDoc 外的其他注解与 API 代码结合但非入侵式应用：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__meta&quot;&gt;@QInterfaceDoc&lt;/span&gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dubbo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            define = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;给用户发送短信验证码,dubbo接口&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            desc = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;校验手机号是否为用户所有,给用户发送短信验证码&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            scene = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;给用户发送短信验证码&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            notice = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;内网使用&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            since = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;发送短信验证码,产品需求引入&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            authors = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;fanrong.zhao&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            url = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dubbo_send&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QParamDocs&lt;/span&gt;({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@QParamDoc&lt;/span&gt;(name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;paramV1&quot;&lt;/span&gt;, value = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;第一个参数&quot;&lt;/span&gt;, paramType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;form&quot;&lt;/span&gt;, dataType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;String&quot;&lt;/span&gt;, notice = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;必须是string类型的&quot;&lt;/span&gt;, paramExample = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;username&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@QParamDoc&lt;/span&gt;(name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;paramV2&quot;&lt;/span&gt;, value = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;第二个参数&quot;&lt;/span&gt;, required = &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;, paramType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;form&quot;&lt;/span&gt;, dataType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Boolean&quot;&lt;/span&gt;, notice = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;必须是boolean类型的&quot;&lt;/span&gt;, paramExample = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;true&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QResponses&lt;/span&gt;({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@QResponse&lt;/span&gt;(code = &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;, message = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;系统异常&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@QResponse&lt;/span&gt;(code = &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;, message = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;成功&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QResponseDocs&lt;/span&gt;({&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@QResponseDoc&lt;/span&gt;(bindValueName = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;, description = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;第一个参数&quot;&lt;/span&gt;, bindValueType = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;object&quot;&lt;/span&gt;, propertys = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QProperty&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;String&quot;&lt;/span&gt;, name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;, desc = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;描述1&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QProperty&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;int&quot;&lt;/span&gt;, name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;age&quot;&lt;/span&gt;, desc = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;描述2&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__meta&quot;&gt;@QProperty&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.qunar.fd.qdoc.qdocexample.vo.ExampleResultVO&quot;&lt;/span&gt;,name = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;food&quot;&lt;/span&gt;,desc = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;描述3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ApiResponseV2&amp;lt;Food&amp;gt; example0(&lt;span class=&quot;code-snippet__meta&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; paramV1,&lt;span class=&quot;code-snippet__meta&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; paramV2) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;通过目前已经在使用的去哪儿网工程师同学们反馈，一个中等复杂度的 API，通过注解方式书写 API 只需要5分钟的时间。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;4.4 执行易管理&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;去哪儿网 QDoc 工具在 API 同步方面主要支持两种方式，maven 命令同步与发布系统同步。maven 命令同步一方面可以满足 Design2doc 的诉求，另一方面也更为灵活，也继承了去哪儿网在 swagger-YAPI 方面的积累，通过发布系统同步是本次 QDoc 的主要工作。这方面的工作解决了接口与 Master 版本不同步的所有问题，包括接口创建、更新、回滚等。&lt;/p&gt;&lt;p&gt;我们可以看到：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;服务开通步骤&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;发布系统开通展示&lt;/p&gt;&lt;p&gt;在去哪儿网应用树中，对应 appcode 下有服务列表，服务列表中【QDoc】，点击开通，即可完成应用树的集成开通。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CM 发布集成&lt;/p&gt;&lt;p&gt;在去哪儿网发布系统中，对应 appcode 下通过服务集市进行开通。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;开通后，Portal 发布线上后，会自动触发文档的更新操作，这时，就可以在应用树中看到我们的文档了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4455026455026455&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AQMUGBYDqwAib5jOMXlTYlrt1hkymatPFjRP0wBYWHLyuz2tlkpefmvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过简单的3步，我们就完成了 QDoc 与发布系统的集成。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;strong&gt;&lt;span&gt;4.5 平台易应用&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;前面的工作完成得再好，如果没有交互良好的展示平台进行支撑，那么对于使用者来说也是十分痛苦的，应用费力度高的系统也是很难进行普及的。我们最终的选择是，YAPI 嵌入到 App 管理平台，与 Appcode 管理相绑定，给与团队管理者一站式的管理体验。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;52&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;YAPI 可以参考开源版本 https://hellosean1025.github.io/yapi/&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;但是，只有&lt;/span&gt;&lt;span&gt; appcode 维度的 API 管理只能方便工程师团队进行 API 的一站式管理，不能对 DDD 业务重塑中十分重要的 Domain 维度的 API 管理产生正向的帮助。&lt;/span&gt;&lt;span&gt;目前我们正在对 Domain 维度的 API 管理平台做着不断的优化：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7A9QDzTDOMBQWTswiaiaWd04CvukeOEqicses0fHHm2OqPc6vDibIcMj5Z5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，我们建立了 Domain 维度的 API 管理体系后，顺带可以做的就是通过去哪儿网成熟的网关体系来外放我们的 API：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AX2xtdsp2nMTrkMiapjJPHxAJk2TvYJUR7EUS5y5UiaibrClj8mK1a66Hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;介绍到这里，去哪儿网通过 QDoc 工具，从代码中的 API 注解到开放平台的领域 API 的全流程就介绍完毕了。&lt;/section&gt;&lt;p&gt;那么在项目中我们遇到了哪些难点呢？&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;5 API 标准化的实施难点&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、开发资源从哪里来&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这个项目是去哪儿网机票目的地事业群业务研发 TC 发起的项目，没有直接的团队进行资源支持，所需要的资源跨 CM、YAPI 平台、工具开发、业务试点项目接入开发几大块，几乎涉及到了公司所有团队的工程师，项目采用了公司内开源项目管理的方式，成立项目组，单独立项，跨团队联合各个团队的资源完成项目，项目的完成对于项目管理人员也是不小的挑战。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Design First or Code First&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;作为项目的初始阶段，同时支持 Design First 和 Code First 两种方式是不可能的，我们通过调研发现，Design First 更加适合非 Domain 维度接口的制定，例如一个前后端联调接口，这类支撑类接口不具有通用性，会随着页面的变化而重新进行开发，通常不复用。Code First 更适合帮助 Domain 维度的长期维护支持的接口保持高质量。而我们这次做 API 标准化工作的初衷就是要帮助 DDD 业务重塑做好 Domain 维度接口的规范化维护工作。所以我们选择首先支持 Code First 的接口提供方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、Annotation or Comments&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在我们做 QDoc之前，在公司内有一定使用度的 API 标准化工具包括 swagger2.0,swagger3.0,smart-doc ， 在这点上我们通过调研发现，使用注解方式的 swagger 相关工具的工程师要明显多于使用 smart-doc 类注释方式的工程师，尽管 annotation 的方式存在 API 代码上方 annotation 堆积过多，会产生代码不美观的问题，但是既然使用 annotation 注解方式的用户明显更多，我们决定 QDoc 优先支持注解方式。这并不代表之后 QDoc 不会支持注释方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、支持完整的 OpenAPI3.0规范 or 支持 OpenAPI3.0规范的子集&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这个问题来自于我们已经有了2018年开源的已经相当成熟的 YAPI 平台，那么我们是否满足 YAPI 的接口要求就已足够？是否不必完全满足 OpenAPI3.0规范的要求，我们的回答是否定的。平台是在不断发展的，YAPI 也会有老去的一天，当 YAPI 老去的时候我们也会在支持 OpenAPI3.0规范的其他平台中作出选择，目前看 knife4j 就是一个在我们视线之内的 API 平台。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;6 项目的成果&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;DDD 与 API 最终会师。核心域、支撑域、通用域 API 均已接入。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;核心域 API 标准化有效保护了领域不被入侵&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通用域 API 化有利于实现通用域的平台化&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支撑域 API 化降低了开发量&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6588380716934487&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AEqXLSzrTbKic9eUbiaVXHqopsIzc5R1y2ze1ct5C10blagp6Dttiadggw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;809&quot;/&gt;&lt;span&gt;没有&lt;/span&gt;&lt;span&gt;重复造轮子，一切因势就形：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2477183833116037&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AQ9brp3s6qtkg4JxU859LBZ771uKnCRa5XKnraOwiby4hgQZEkyVTTfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;767&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;7 总结与项目的后续计划&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6314677930306231&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YE1dmj1Pw7kukdEybHP3KPVESiaCnHr7AxI0fhsmv5hWO4zoHeZvDFVdqUPXg3yIKud9fUuAenZHugbtQhyZ6mQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;947&quot;/&gt;&lt;/p&gt;&lt;section&gt;从之前的介绍我们可以看到，去哪儿网的 API 建设是有层次的，最内层是 AppCode 维度的 API，外一层是业务接口维度，再外一层是领域维度，通过网关将可以开放的接口配置到开放平台，形成不同维度的接口管理与接口用用。&lt;/section&gt;&lt;p&gt;后续在 AppCode 维度的接口管理方面还要做以下几件事情：&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/PdibpV1sFDHfGojNtRLJPxibwwnzibtuecoWGnGIbA2iaa12c3WRichichb7kx0TBP2oK6ria95DF6FygficWcrCc5nkEJ0Qu59ibh7RB/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/PdibpV1sFDHfGojNtRLJPxibwwnzibtuecoPDNTCFlpdShWicegQejmXrxXaJKfIZNrMmQlWVMFiaUEqYWKjVH0nY4hRFNguCqN8I/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;150&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4746666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YE1dmj1Pw7lmPPfFYjwklIwjg232Sqg8q81Q0AdYRBAcCOA8dsorJIGEu7Ln2Tht5jthVsykWiavcoONdDoia1iag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.47421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YE1dmj1Pw7kWIVFgyZ6Uicic548UiacBq2x4q98BgKgX894tVyR9xcvic2hklDxUXuBdjJF60yPeiaqoAwib01hUiaiasQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>