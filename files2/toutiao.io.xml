<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6c6b5c685e9a58703762624e865fb054</guid>
<title>五一假期不想人挤人？来这里！</title>
<link>https://toutiao.io/k/ok4mp6n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;调休凑的五一小长假终于要来了！&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;抛开 “实际只放了半天” 的小情绪，好好放松一下吧！&lt;/strong&gt;&lt;/span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.34841628959276016&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNaviceqLPCc4PwSgmSN5yTT69y8dECkDGSCSY210dpIOoKk2e5syPmOeu4yLlDpO4YgibWhYgbFAkHgSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;884&quot;/&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;假期去哪玩呢？小心人从众哦！&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/c2Sib3Mp7pOMic7Juicyxo7vsjvhibIibiayDib5VMxsrWKHhm3RvF4ZciambwKWKBaYwa9KRvzOnyDck4TOwLs0JcPcHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.7556270096463023&quot; data-w=&quot;311&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;宅吗？怕无聊的话，继续往下看！五一小长假，周刊菌陪你哦！&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.4517453798767967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AjN1jquNaviceqLPCc4PwSgmSN5yTT69yXsQGL1BvcduO2ZWcCfyE5ArUSic5pRxon4ia7M9Dn5vpRdia6573OQjhg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;487&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;&lt;span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;/span&gt;&lt;span&gt;码农周刊VIP会员&lt;/span&gt;&lt;span&gt;」服务。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何加入「码农周刊VIP会员」？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;322&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;350&quot; data-ratio=&quot;1.318840579710145&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNav8pVYfXHFZnJw6GmED4PucZvQd6m3AP8fUG1IKJyBgicmJ3P5ygQjO5r6Bib2x190MFOlb6PwExNQuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心动不如心动，赶快订阅吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8db7ef5bde3aff39cc0676fc6b5a0b01</guid>
<title>撸代码前，写下设计方案</title>
<link>https://toutiao.io/k/xdsox3x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;h1 id=&quot;什么是设计方案？&quot;&gt;&lt;a href=&quot;#什么是设计方案？&quot; class=&quot;headerlink&quot; title=&quot;什么是设计方案？&quot;/&gt;什么是设计方案？&lt;/h1&gt;&lt;p&gt;解决一个复杂的问题，一般要经过几个不同的步骤。其中最重要的是问题发现阶段，分析阶段，和构建交付阶段。在分析阶段，工程师们研究哪些方案可以解决客户需求。一个设计方案，不代表已经有了可以上线的代码，虽然在验证方案的过程中，有可能会写一些代码。设计方案，是分析阶段的成果，它告诉大家&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真正需要解决的问题是什么？&lt;/li&gt;
&lt;li&gt;为什么要现在解决？&lt;/li&gt;
&lt;li&gt;如何解决？&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;为什么要写设计方案？&quot;&gt;&lt;a href=&quot;#为什么要写设计方案？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写设计方案？&quot;/&gt;为什么要写设计方案？&lt;/h1&gt;&lt;p&gt;有始有终的团队，在每个阶段结束的时候，会审视目标是否达成。对于分析阶段，他们会查看设计方案的好坏，来鉴别工作成果。而有些团队，射出去的箭，还没看是否击中大雁，就迫不及待朝大雁跑去。没写设计方案，就撸代码，一是沟通效率低，二是容易在项目后期发现设计上的缺陷而进入令人焦虑的赶工模式。&lt;/p&gt;
&lt;h3 id=&quot;写下来一次，随时随地用&quot;&gt;&lt;a href=&quot;#写下来一次，随时随地用&quot; class=&quot;headerlink&quot; title=&quot;写下来一次，随时随地用&quot;/&gt;写下来一次，随时随地用&lt;/h3&gt;&lt;p&gt;口头交流，眉飞色舞，固然爽快，可是口说无凭，什么也留不下来。结果，嘴皮子磨烂，一遍一遍得给不同的人讲你们的方案。这里我们要学习Java的设计理念，写一次，哪哪都能用。把设计方案写下来，有助于和团队里不同职能的人沟通：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品经理： 保证对问题一致的理解，并且知道方案的优势及其劣势，不会到后期发现劣势而导致意外&lt;/li&gt;
&lt;li&gt;项目经理：阐明方案所做的假设以及可能出现的风险，帮助在项目执行过程中追踪这些风险&lt;/li&gt;
&lt;li&gt;团队成员和其他团队负责人: 收集大家对方案的看法，接受大家对所选方案的挑战，保证你的方案凝聚了各种思维的光辉&lt;/li&gt;
&lt;li&gt;老板：当成汇报，帮助老板看到你们的成果，并且给他提供一个管中窥豹的机会，让他看到你们整个团队的合作质量&lt;/li&gt;
&lt;li&gt;质量工程师： 说明你们要构造的是什么，帮助他们写出好的测试&lt;/li&gt;
&lt;li&gt;团队的新人：帮助新人获取知识，所有的设计方案积累起来，就是一部团队发展史，帮助新人了解大厦是如何一层一层建起来的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;真正的学习来自于清单检查&quot;&gt;&lt;a href=&quot;#真正的学习来自于清单检查&quot; class=&quot;headerlink&quot; title=&quot;真正的学习来自于清单检查&quot;/&gt;真正的学习来自于清单检查&lt;/h3&gt;&lt;p&gt;曾有人问一位智者，你是如何成功的？智者答，正确的决定。人又问，如何做正确的决定？智者再答，经验。人仍不解，如何获取经验？智者说，错误的决定。&lt;/p&gt;
&lt;p&gt;犯错，大家都难以避免，而有的人错了再错。真正的学习来自于错误到经验的转化。写下来你的设计方案，按照积累的清单，逐条检查，能保证方案质量，虽然不能保证不犯新错误，但至少同样的错误不犯两遍。如果你什么都不写，只是口头说说，就达不到清单检查的效果。&lt;/p&gt;
&lt;p&gt;其实清单检查不仅仅适用于设计方案，任何形式的写作都可以从中受益。秋叶在他的《写作七堂课》里也介绍了写作清单的重要性。&lt;/p&gt;
&lt;h1 id=&quot;如何写一个好的设计方案？&quot;&gt;&lt;a href=&quot;#如何写一个好的设计方案？&quot; class=&quot;headerlink&quot; title=&quot;如何写一个好的设计方案？&quot;/&gt;如何写一个好的设计方案？&lt;/h1&gt;&lt;p&gt;不幸的家庭有各种不幸的理由，而幸福的家庭，都是相同的。好的设计方案里应该都包含下面的这几点。如果你熟悉JDK里JEP(java enhancement proposal)，你会发现下面的这些关键点在JEP里也能找到，我也是受了JEP的启发。&lt;/p&gt;
&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;/&gt;目标&lt;/h3&gt;&lt;p&gt;解释你们最终想要获得的成果。目标的缺失，或者模糊的目标，说明没有真正看到问题的本质，没有真正领会用户的需求。这样做的风险是解决一个根本不存在的问题，竹篮打水一场空。&lt;/p&gt;
&lt;h3 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;/&gt;动机&lt;/h3&gt;&lt;p&gt;动机是对目标进一步的解释，特别是对现状的解释。你之所以有目标，是因为你不满意当下，在现状和目标之间有差距。这个差距是什么？为什么我们现在必须缩短这个差距？&lt;/p&gt;
&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;/&gt;描述&lt;/h3&gt;&lt;p&gt;动机回答的是为什么，描述回答的是如何做。这里要解释如何一步一步的实现解决方案。一个准确完成的描述会告诉读者你问题的复杂度。&lt;/p&gt;
&lt;h3 id=&quot;风险&quot;&gt;&lt;a href=&quot;#风险&quot; class=&quot;headerlink&quot; title=&quot;风险&quot;/&gt;风险&lt;/h3&gt;&lt;p&gt;你的方案可能无法考虑到所有的限制因素。就像分布式系统里的CAP理论一样，网线拔掉的时候，是各自为政，还是坐等网线插好。解释方案的限制因素，打好预防针，防止惊吓。&lt;/p&gt;
&lt;h3 id=&quot;测试计划&quot;&gt;&lt;a href=&quot;#测试计划&quot; class=&quot;headerlink&quot; title=&quot;测试计划&quot;/&gt;测试计划&lt;/h3&gt;&lt;p&gt;如果知道怎么测，那么表明你知道成功是什么样子。相反，如果你不知道怎么测，表明你没有想清楚你究竟要的是什么。&lt;/p&gt;
&lt;h3 id=&quot;替换方案&quot;&gt;&lt;a href=&quot;#替换方案&quot; class=&quot;headerlink&quot; title=&quot;替换方案&quot;/&gt;替换方案&lt;/h3&gt;&lt;p&gt;上面解释的都是被选中的方案。不要小瞧那些被砍掉的方案。写下那些没有被采纳的，可以证明你们想的足够全面，也可以解释你们是如何做决定的。所谓的决策，归根揭底，就是做取舍的方式。&lt;/p&gt;
&lt;h1 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;/&gt;结语&lt;/h1&gt;&lt;p&gt;新冠疫情改变了我们工作的方式，越来越多的远程工作，去中心化的办公室，让人们很难一直保持同步，对于那些队员分布在不同时区的团队，更是雪上加霜。写下来你们的设计方案，保证大家朝着同一个方向前进，比以往任何时刻都更重要。你从这篇文章里学到了什么？像以往一样，欢迎联系我。&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5cd2d8c12fbab9d057add84e037c72b4</guid>
<title>[英] BPF 极简示例：动态修改 TCP 初始 RTO（超时重传时间）</title>
<link>https://toutiao.io/k/dibsh1j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post&quot;&gt;
  
  &lt;h1 class=&quot;postTitle&quot;&gt;Customize TCP initial RTO (retransmission timeout) with BPF&lt;/h1&gt;
  &lt;p class=&quot;meta&quot;&gt;Published at 2021-04-28 | Last Update 2021-04-28&lt;/p&gt;

  
  
  &lt;h1 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h1&gt;

&lt;p&gt;On initiating a new TCP connection (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect()&lt;/code&gt;),
the initial retransmission timeout (RTO) has been set as a
&lt;strong&gt;&lt;mark&gt;harcoded value of 1 second&lt;/mark&gt;&lt;/strong&gt; in Linux kernel (not configurable).
Since 4.13, a BPF hook has been added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; operation, which provides
a chance to dynamically override the hardcode (instead of re-compiling
kernel) with custom BPF programs.&lt;/p&gt;

&lt;p&gt;This post explores that facility, and implements &lt;strong&gt;&lt;mark&gt;one such program with
several lines of BPF code&lt;/mark&gt;&lt;/strong&gt;.  Hope that it helps readers to understand why
&lt;strong&gt;&lt;mark&gt;&quot;BPF makes Linux kernel programmable&quot;&lt;/mark&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr/&gt;



&lt;hr/&gt;

&lt;h1 id=&quot;1-introduction&quot;&gt;1 Introduction&lt;/h1&gt;

&lt;h2 id=&quot;11-tcp-initial-rto-kernel--412&quot;&gt;1.1 TCP initial RTO (kernel &amp;lt;= 4.12)&lt;/h2&gt;

&lt;p&gt;In Linux kernel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;= 4.12&lt;/code&gt;), the &lt;strong&gt;&lt;mark&gt;initial RTO&lt;/mark&gt;&lt;/strong&gt; when establishing a new TCP connection
is &lt;strong&gt;&lt;mark&gt;exactly 1 second&lt;/mark&gt;&lt;/strong&gt;, which is &lt;strong&gt;&lt;mark&gt;hardcoded in the kernel code and
not configurable&lt;/mark&gt;&lt;/strong&gt;, taking &lt;a href=&quot;https://github.com/torvalds/linux/blob/v4.12/net/ipv4/tcp_output.c#L3251&quot;&gt;v4.12&lt;/a&gt;
as example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Calling stack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_connect() -&amp;gt; tcp_connect_init() -&amp;gt; tcp_timeout_init()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// net/ipv4/tcp_output.c&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_connect_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inet_csk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icsk_rto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Set initial timeout value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where macro &lt;a href=&quot;https://github.com/torvalds/linux/blob/v4.12/include/net/tcp.h#L138&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP_TIMEOUT_INIT()&lt;/code&gt;&lt;/a&gt;
is defined as a constant,&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/net/tcp.h&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* RFC6298 2.1 initial RTO value    */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define TCP_RTO_MAX    ((unsigned)(120*HZ))
#define TCP_RTO_MIN    ((unsigned)(HZ/5))
#define TCP_TIMEOUT_MIN    (2U) &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* Min timeout for TCP timers in jiffies */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which is the &lt;strong&gt;&lt;mark&gt;HZ of the machine&lt;/mark&gt;&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;CONFIG_HZ=&#x27;&lt;/span&gt; /boot/config-&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONFIG_HZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;250
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-measure-the-initial-rto-kernel--412&quot;&gt;1.2 Measure the initial RTO (kernel &amp;lt;= 4.12)&lt;/h2&gt;

&lt;p&gt;Confirm the setting by initiating a TCP request to a non-existing service (so it will always timeout):&lt;/p&gt;



&lt;p&gt;the captured traffic:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-nn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; enp0s3 host 9.9.9.9 and port 9999
21:26:43.834860 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +0s&lt;/span&gt;
21:26:44.859801 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +1s&lt;/span&gt;
21:26:46.876328 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +2s&lt;/span&gt;
21:26:51.068268 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +4s&lt;/span&gt;
21:26:59.259304 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +8s&lt;/span&gt;
21:27:15.389522 IP 192.168.1.5.53844 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;281070166, ... length 0 &lt;span class=&quot;c&quot;&gt;# +16s&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As shown in the last column (comments), &lt;strong&gt;&lt;mark&gt;the first retry got triggered after 1s&lt;/mark&gt;&lt;/strong&gt;, then 
exponentially backoffed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2-&amp;gt;4-&amp;gt;8-&amp;gt;16...&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;13-bpf-hook-in-new-kernels--413&quot;&gt;1.3 BPF hook in new kernels (&amp;gt;= 4.13)&lt;/h2&gt;

&lt;p&gt;Glancing at kernel &lt;a href=&quot;https://github.com/torvalds/linux/blob/v4.19/net/ipv4/tcp_output.c#L3348&quot;&gt;4.19&lt;/a&gt;
, the initial RTO constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP_TIMEOUT_INIT&lt;/code&gt; is &lt;strong&gt;&lt;mark&gt;replaced by an inline function call&lt;/mark&gt;&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// net/ipv4/tcp_output.c&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Do all connect socket setups that can be done AF independent. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_connect_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inet_csk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icsk_rto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_timeout_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the latter internally sets the initial RTO to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP_TIMEOUT_INIT&lt;/code&gt;, but &lt;strong&gt;&lt;mark&gt;gives us a
chance to retrieve the desired initial RTO from the BPF code attached to this socket&lt;/mark&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/net/tcp.h&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* RFC6298 2.1 initial RTO value    */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_timeout_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_call_bpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// timeout == -1, using default value in the below&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// defined as the HZ of the system, which is effectively 1 second&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_call_bpf(sk, BPF_SOCK_OPS_TIMEOUT_INIT, 0, NULL)&lt;/code&gt; return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No BPF programs attached to the socket/cgroup, or&lt;/li&gt;
  &lt;li&gt;There are BPF programs, but the the excution failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Otherwise, if &lt;strong&gt;&lt;mark&gt;it returns a positive value, that value will be used as the initial RTO&lt;/mark&gt;&lt;/strong&gt;,
instead of the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP_TIMEOUT_INIT&lt;/code&gt; (1 second).&lt;/p&gt;

&lt;h2 id=&quot;14-purpose-of-this-post-with-kernels--413&quot;&gt;1.4 Purpose of this post (with kernels &amp;gt;= 4.13)&lt;/h2&gt;

&lt;p&gt;Unless write your own BPF program and attach it to the right place, which
will later be triggered and got executed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_call_bpf()&lt;/code&gt;,
there will be no BPF programs, so it will use default RTO.&lt;/p&gt;

&lt;p&gt;This post tries to &lt;strong&gt;&lt;mark&gt;set a custom initial RTO with the BPF mechanism provided above&lt;/mark&gt;&lt;/strong&gt;.
With this piece of BPF code, we’ll be able to dynamically set/unset custom initial RTOs.&lt;/p&gt;

&lt;h1 id=&quot;2-implementation-and-verification&quot;&gt;2 Implementation and verification&lt;/h1&gt;

&lt;h2 id=&quot;21-bpf-code&quot;&gt;2.1 BPF code&lt;/h2&gt;

&lt;p&gt;It turns out that achieving our goal requires only a fairly small piece of BPF
code (for demo), as shown below (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp-rto.c&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;linux/bpf.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef __section
# define __section(NAME)                  \
    __attribute__((section(NAME), used))
#endif
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sockops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_initial_rto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// grep &#x27;CONFIG_HZ=&#x27; /boot/config-$(uname -r), HZ of my machine&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3 seconds&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_license&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GPL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s leave the explanations to the next section, and try it and see the result first.&lt;/p&gt;

&lt;h2 id=&quot;22-compile-load-and-attach&quot;&gt;2.2 Compile, load and attach&lt;/h2&gt;

&lt;p&gt;Compile to BPF object code,&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-target&lt;/span&gt; bpf &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; tcp-rto.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; tcp-rto.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Load it into kernel,&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bpftool prog load tcp-rto.o /sys/fs/bpf/tcp-rto
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bpftool prog show
...
169: sock_ops  name set_initial_rto  tag e4384b8da577553a  gpl
        loaded_at 2021-04-29T15:49:03+0800  uid 0
        xlated 296B  jited 186B  memlock 4096B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Attach to default cgroup (v2):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ PROG_ID=169
$ sudo bpftool cgroup attach /sys/fs/cgroup/unified/ sock_ops id $PROG_ID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;mark&gt;BPF programs of &lt;code&gt;sockops&lt;/code&gt; type requires cgroupv2&lt;/mark&gt;&lt;/strong&gt;. After attaching a BPF program to a cgroup,
the program will be executed for all the sockets in that cgroup.&lt;/p&gt;

  &lt;p&gt;You could also attach the program to a custom cgroup, but that’s beyong the scope
of this post. Refer to &lt;a href=&quot;/blog/cracking-k8s-node-proxy/&quot;&gt;Cracking kubernetes node proxy (aka kube-proxy)&lt;/a&gt; if you need it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;23-verify&quot;&gt;2.3 Verify&lt;/h2&gt;

&lt;p&gt;We’ve intentionally set our initial RTO as a weired value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3s&lt;/code&gt; in the BPF code, now let’s confirm it works:&lt;/p&gt;



&lt;p&gt;The captured traffic:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-nn&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; enp0s3 host 9.9.9.9 and port 9999
21:37:46.357686 IP 192.168.1.5.53866 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3392061475, .. length 0 &lt;span class=&quot;c&quot;&gt;# +0s&lt;/span&gt;
21:37:49.372053 IP 192.168.1.5.53866 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3392061475, .. length 0 &lt;span class=&quot;c&quot;&gt;# +3s&lt;/span&gt;
21:37:55.515914 IP 192.168.1.5.53866 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3392061475, .. length 0 &lt;span class=&quot;c&quot;&gt;# +6s&lt;/span&gt;
21:38:07.547362 IP 192.168.1.5.53866 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3392061475, .. length 0 &lt;span class=&quot;c&quot;&gt;# +12s&lt;/span&gt;
21:38:32.635499 IP 192.168.1.5.53866 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 9.9.9.9.9999: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;3392061475, .. length 0 &lt;span class=&quot;c&quot;&gt;# +24s&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Started with a RTO of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3s&lt;/code&gt;, then exponentially backoff-ed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3-&amp;gt;6-&amp;gt;12-&amp;gt;24...&lt;/code&gt;,
&lt;strong&gt;&lt;mark&gt;just as expected!&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;24-cleanup&quot;&gt;2.4 Cleanup&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo rm&lt;/span&gt; /sys/fs/bpf/tcp-rto
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bpftool cgroup detach /sys/fs/cgroup/unified/ sock_ops &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROG_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-explanations&quot;&gt;3 Explanations&lt;/h1&gt;

&lt;h2 id=&quot;31-hook-at-the-right-place-sockops&quot;&gt;3.1 Hook at the right place (sockops)&lt;/h2&gt;

&lt;p&gt;To fulfill our goal, &lt;strong&gt;&lt;mark&gt;our BPF program needs to be excuted whenever there
are TCP &lt;code&gt;connect&lt;/code&gt; socket operations&lt;/mark&gt;&lt;/strong&gt; (sockops).
This is achieved by declaring our BPF handler to be placed at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sockops&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sockops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_initial_rto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;32-set-custom-initial-rto&quot;&gt;3.2 Set custom initial RTO&lt;/h2&gt;

&lt;p&gt;The next task is to implement our handler, the logic is quite simple:
&lt;strong&gt;&lt;mark&gt;check socket operation type&lt;/mark&gt;&lt;/strong&gt;, then&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/code&gt; (correspoinding to the code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_timeout_init()&lt;/code&gt;),
  modify the timeout value, then return&lt;/li&gt;
  &lt;li&gt;Otherwise, do nothing, just return&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First see &lt;strong&gt;&lt;mark&gt;how the custom timeout value will be parsed by the kernel&lt;/mark&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_timeout_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcp_call_bpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// timeout == -1, using default value in the below&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCP_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// defined as the HZ of the system, which is effectively 1 second, see below&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_call_bpf()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//  include/net/tcp.h&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Call BPF_SOCK_OPS program that returns an int. If the return value
 * is &amp;lt; 0, then the BPF op failed (for example if the loaded BPF
 * program does not support the chosen operation or there is no BPF program loaded).  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tcp_call_bpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_CGROUP_RUN_PROG_SOCK_OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret == 0&lt;/code&gt;, the timeout value will be &lt;strong&gt;&lt;mark&gt;parsed from field sock_ops.reply&lt;/mark&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So for our handler, we just need to check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op&lt;/code&gt; field, if it’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/code&gt;, then change it to the desired value:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_initial_rto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// grep &#x27;CONFIG_HZ=&#x27; /boot/config-$(uname -r), HZ of my machine&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// seconds&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then only piece is missing: &lt;strong&gt;&lt;mark&gt;determine the correct return value&lt;/mark&gt;&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;RET&amp;gt;&lt;/code&gt; of our handler.&lt;/p&gt;

&lt;h2 id=&quot;33-determine-the-return-value&quot;&gt;3.3 Determine the return value&lt;/h2&gt;

&lt;p&gt;Take a further look at the calling stack:
&lt;strong&gt;&lt;mark&gt;tcp_call_bpf() -&amp;gt; BPF_CGROUP_RUN_PROG_SOCK_OPS() -&amp;gt; __cgroup_bpf_run_filter_sock_ops() -&amp;gt; set_initial_rto()&lt;/mark&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// include/linux/bpf-cgroup.h&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define BPF_CGROUP_RUN_PROG_SOCK_OPS(sock_ops)       \
({       \
int __ret = 0;       \
if (cgroup_bpf_enabled &amp;amp;&amp;amp; (sock_ops)-&amp;gt;sk) {       \
typeof(sk) __sk = sk_to_full_sk((sock_ops)-&amp;gt;sk);       \
if (__sk &amp;amp;&amp;amp; sk_fullsock(__sk))       \
__ret = __cgroup_bpf_run_filter_sock_ops(__sk,       \
 sock_ops,     \
 BPF_CGROUP_SOCK_OPS); \
}       \
__ret;       \
})
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// kernel/bpf/cgroup.c&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * __cgroup_bpf_run_filter_sock_ops() - Run a program on a sock
 * @sk: socket to get cgroup from
 * @sock_ops: bpf_sock_ops_kern struct to pass to program. Contains
 * sk with connection information (IP addresses, etc.) May not contain
 * cgroup info if it is a req sock.
 * @type: The type of program to be exectuted
 *
 * socket passed is expected to be of type INET or INET6.
 *
 * The program type passed in via @type must be suitable for sock_ops
 * filtering. No further check is performed to assert that.
 *
 * This function will return %-EPERM if any if an attached program was found
 * and if it returned != 1 during execution. In all other cases, 0 is returned.
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__cgroup_bpf_run_filter_sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops_kern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_attach_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgrp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock_cgroup_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk_cgrp_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_PROG_RUN_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgrp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;effective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;BPF_PROG_RUN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPORT_SYMBOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cgroup_bpf_run_filter_sock_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So &lt;strong&gt;&lt;mark&gt;for a successful run&lt;/mark&gt;&lt;/strong&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcp_call_bpf()&lt;/code&gt; expects a return value
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BPF_CGROUP_RUN_PROG_SOCK_OPS&lt;/code&gt;, which effectively requires our handler
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_initial_rto()&lt;/code&gt; returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s all! We’ve done with our handler.&lt;/p&gt;

&lt;h1 id=&quot;4-debug-facility&quot;&gt;4 Debug facility&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bpf_trace_printk()&lt;/code&gt; can be used to print logs to kernel’s tracing facility,
see appendix for the full code, the output looks like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /sys/kernel/debug/tracing/trace_pipe
 ...
  NetworkManager-709     &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;000] .... 1492923.972742: 0: Miss, &lt;span class=&quot;nv&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6
          &amp;lt;idle&amp;gt;-0       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;003] ..s. 1492924.174092: 0: Miss, &lt;span class=&quot;nv&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
          &amp;lt;idle&amp;gt;-0       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;002] ..s. 1492938.675528: 0: Set TCP connect &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3s
          &amp;lt;idle&amp;gt;-0       &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;002] ..s. 1492938.675575: 0: Set TCP connect &lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5-summary&quot;&gt;5 Summary&lt;/h1&gt;

&lt;p&gt;This post creates a simple BPF program to dynamically change TCP initial RTO, which
reveals the tip of the BPF iceberg.&lt;/p&gt;

&lt;p&gt;Without this facility, in some cases, we have to modify and re-compile the kernel
to achieve the same effects. In this sense, BPF make Linux kernel programmable.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lwn.net/Articles/727189/&quot;&gt;bpf: Adding support for sock_ops&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/torvalds/linux/blob/v4.19/samples/bpf/tcp_clamp_kern.c&quot;&gt;samples/bpf/tcp_clamp_kern.c&lt;/a&gt;, linux v4.19&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;appendix-full-code&quot;&gt;Appendix: full code&lt;/h1&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;linux/bpf.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef __section
# define __section(NAME)                  \
    __attribute__((section(NAME), used))
#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef BPF_FUNC
#define BPF_FUNC(NAME, ...)     \
        (*NAME)(__VA_ARGS__) = (void *) BPF_FUNC_##NAME
#endif
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BPF_FUNC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace_printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifndef printk
# define printk(fmt, ...)                                      \
    ({                                                         \
     char ____fmt[] = fmt;                                  \
     trace_printk(____fmt, sizeof(____fmt), ##__VA_ARGS__); \
     })
#endif
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sockops&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_initial_rto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpf_sock_ops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// grep &#x27;CONFIG_HZ=&#x27; /boot/config-$(uname -r), HZ of my machine&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BPF_SOCK_OPS_TIMEOUT_INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3 seconds&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set TCP connect timeout = %ds&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Miss, op=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_license&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GPL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;


  
  
&lt;/div&gt;


          

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8fc330824176d27bfd7e94f138aa309a</guid>
<title>Kubernetes 上容器的启动顺序如何把控？</title>
<link>https://toutiao.io/k/0f3ahmw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;去年写过一篇博客：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5OTg2MTM0MQ==&amp;amp;mid=2247483696&amp;amp;idx=1&amp;amp;sn=0d543da2bd4b8c542e5f334483fff596&amp;amp;scene=21#wechat_redirect&quot; title=&quot;控制 Pod 内容器的启动顺序&quot; data-linktype=&quot;2&quot;&gt;控制 Pod 内容器的启动顺序&lt;/a&gt;，分析了 &lt;span&gt;TektonCD&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 的容器启动控制的原理。&lt;/p&gt;&lt;p&gt;为什么要做容器启动顺序控制？我们都知道 Pod 中除了 &lt;code&gt;init-container&lt;/code&gt; 之外，是允许添加多个容器的。类似 TektonCD 中 &lt;code&gt;task&lt;/code&gt; 和 &lt;code&gt;step&lt;/code&gt; 的概念就分别与 &lt;code&gt;pod&lt;/code&gt; 和 &lt;code&gt;container&lt;/code&gt; 对应，而 &lt;code&gt;step&lt;/code&gt; 是按照顺序执行的。此外还有服务网格的场景，sidecar 容器需要在服务容器启动之前完成配置的加载，也需要对容器的启动顺序加以控制。否则，服务容器先启动，而 sidecar 还无法提供网络上的支持。&lt;/p&gt;&lt;h3&gt;现实&lt;/h3&gt;&lt;figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/tMghG0NOfxcmOZlb2iagl93ssECiaAGOFfwTgmT6gSibZPGLKQnV1ia1Ohbsia7asGa2J1QUUaDK6vImr8H829bIruQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;期望&lt;/h3&gt;&lt;figure&gt;&lt;span&gt;‍&lt;/span&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/tMghG0NOfxcmOZlb2iagl93ssECiaAGOFfcKgTNWZm8YGCv0BDW1rGO2ehyOJP7NDicvwAoWMtibgOn42P37DlxEZA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;到了这里肯定有同学会问，&lt;code&gt;spec.containers[]&lt;/code&gt; 是一个数组，数组是有顺序的。Kubernetes 也确实是按照顺序来创建和启动容器，但是 &lt;strong&gt;容器启动成功，并不表示容器可以对外提供服务&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;在 Kubernetes 1.18 非正式版中曾在 Lifecycle 层面提供了对 &lt;code&gt;sidecar 类型容器的&lt;/code&gt; 支持，但是最终该功能并&lt;span&gt;没有落地&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;那到底该怎么做？&lt;/p&gt;&lt;h2&gt;TL;DR&lt;/h2&gt;&lt;p&gt;笔者准备了一个简单的 &lt;span&gt;go 项目&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;，用于模拟 sidecar 的启动及配置加载。&lt;/p&gt;&lt;p&gt;克隆代码后可以通过 &lt;code&gt;make build&lt;/code&gt; 构建出镜像，假如你是用的 minikube 进行的实验，可以通过命令 &lt;code&gt;make load-2-minikube&lt;/code&gt; 将镜像加载到 minikube 节点中。&lt;/p&gt;&lt;p&gt;使用 Deployment 的方式进行部署，直接用 Pod 也可以。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;yaml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; apps&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Deployment&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sample&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sample&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  replicas&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  selector&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    matchLabels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sample&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  strategy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    metadata&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      creationTimestamp&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      labels&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        app&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sample&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    spec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      containers&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; addozhang&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sequence&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;sidecar&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; sidecar&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        imagePullPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IfNotPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        lifecycle&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;          postStart&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;exec&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;              command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;entrypoint&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; wait&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; image&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; busybox&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; app&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        imagePullPolicy&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;IfNotPresent&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        command&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;-c&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        args&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;date; echo &#x27;app container started&#x27;; tail -f /dev/null&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;下面的截图中，演示了在 &lt;code&gt;sample&lt;/code&gt; 命名空间中，pod 内两个容器的执行顺序。&lt;/p&gt;&lt;figure&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.765&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/tMghG0NOfxcmOZlb2iagl93ssECiaAGOFfkv6hrnDbwlflF9qq1YhTyKsTBIy28yatK5uBxcCCFEFJqib2XILy23Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Kubernetes 源码&lt;/h2&gt;&lt;p&gt;在 kubelet 的源码 &lt;code&gt;pkg/kubelet/kuberuntime/kuberuntime_manager.go&lt;/code&gt; 中，&lt;code&gt;#SyncPod&lt;/code&gt; 方法用于创建 Pod，步骤比较繁琐，直接看第 7 步：创建普通容器。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// SyncPod syncs the running pod into the desired pod by executing following steps:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  1. Compute sandbox and container changes.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  2. Kill pod sandbox if necessary.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  3. Kill any containers that should not be running.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  4. Create sandbox if necessary.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  5. Create ephemeral containers.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  6. Create init containers.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//  7. Create normal containers.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;func &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;m &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;kubeGenericRuntimeManager&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;SyncPod&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;pod &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; podStatus &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;kubecontainer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PodStatus&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; pullSecrets &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Secret&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; backOff &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;flowcontrol&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Backoff&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;result kubecontainer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PodSyncResult&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// Step 7: start containers in podContainerChanges.ContainersToStart.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; _&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; idx &lt;/span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;span&gt; range podContainerChanges&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ContainersToStart&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        start&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;container&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; containerStartSpec&lt;/span&gt;&lt;span&gt;(&amp;amp;&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Spec&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Containers&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;idx&lt;/span&gt;&lt;span&gt;]))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;在 &lt;code&gt;#start&lt;/code&gt; 方法中调用了 &lt;code&gt;#startContainer&lt;/code&gt; 方法，该方法会启动容器，并返回容器启动的结果。注意，这里的结果还 &lt;strong&gt;包含了容器的 Lifecycle hooks 调用&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;也就是说，假如容器的 &lt;code&gt;PostStart&lt;/code&gt; hook 没有正确的返回，kubelet 便不会去创建下一个容器。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// startContainer starts a container and returns a message indicates why it is failed on error.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// It starts the container through the following steps:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// * pull the image&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// * create the container&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// * start the container&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;// * run the post start lifecycle hooks (if applicable)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;func &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;m &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;kubeGenericRuntimeManager&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; startContainer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;podSandboxID &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; podSandboxConfig &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;runtimeapi&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PodSandboxConfig&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; spec &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;startSpec&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; pod &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; podStatus &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;kubecontainer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PodStatus&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; pullSecrets &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Secret&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; podIP &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; podIPs &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; error&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// Step 4: execute the post start hook.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Lifecycle&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Lifecycle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PostStart&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        kubeContainerID &lt;/span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;span&gt; kubecontainer&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ContainerID&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; m&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;runtimeName&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            ID&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;   containerID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        msg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; handlerErr &lt;/span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;span&gt; m&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;runner&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Run&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;kubeContainerID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Lifecycle&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;PostStart&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; handlerErr &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            m&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;recordContainerEvent&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; kubeContainerID&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; v1&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EventTypeWarning&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; events&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;FailedPostStartHook&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; msg&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; err &lt;/span&gt;&lt;span&gt;:=&lt;/span&gt;&lt;span&gt; m&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;killContainer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; kubeContainerID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;FailedPostStartHook&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; reasonFailedPostStartHook&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;span&gt; err &lt;/span&gt;&lt;span&gt;!=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                klog&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;ErrorS&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Errorf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%s: %v&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ErrPostStartHook&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; handlerErr&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;Failed to kill container&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;pod&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; klog&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;KObj&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;pod&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;                    &lt;/span&gt;&lt;span&gt;&quot;podUID&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; pod&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;UID&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;containerName&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; container&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;containerID&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; kubeContainerID&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Errorf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;%s: %v&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ErrPostStartHook&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; handlerErr&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code/&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;实现方案&lt;/h2&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/tMghG0NOfxcmOZlb2iagl93ssECiaAGOFfXvtEIpGicsc7kYfrgJFmaZoB6x7eRJt9w6GqAO0lFia2BFjbP9WrzJtw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; title=&quot;null&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;cmd/entrypoint/wait.go#L26&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt; （这里参考了 Istio 的 pilot-agent 实现 ）&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;PostStart&lt;/code&gt; 中持续的去检查 &lt;code&gt;/ready&lt;/code&gt; 断点，可以 hold 住当前容器的创建流程。保证 &lt;code&gt;/ready&lt;/code&gt; 返回 &lt;code&gt;200&lt;/code&gt; 后，kubelet 才会去创建下一个容器。&lt;/p&gt;&lt;p&gt;这样就达到了前面截图中演示的效果。&lt;/p&gt;&lt;section class=&quot;code-snippet__github&quot;&gt;&lt;pre data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Now&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;Before&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;timeoutAt&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    err &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; checkIfReady&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;client&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; err &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;sidecar is ready&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    log&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;sidecar is not ready&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Sleep&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Duration&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;periodMillis&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; time&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Millisecond&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fmt&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;Errorf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;sidecar is not ready in %d second(s)&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; timeoutSeconds&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h2&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Sidecar container lifecycle changes in Kubernetes 1.18&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;span&gt;Delaying application start until sidecar is ready&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; TektonCD: &lt;em&gt;https://github.com/tektoncd&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 没有落地: &lt;em&gt;https://github.com/kubernetes/enhancements/issues/753#issuecomment-713471597&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; go 项目: &lt;em&gt;https://github.com/addozhang/k8s-container-sequence-sample&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; cmd/entrypoint/wait.go#L26: &lt;em&gt;https://github.com/addozhang/k8s-container-sequence-sample/blob/main/cmd/entrypoint/wait.go#L26&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; Sidecar container lifecycle changes in Kubernetes 1.18: &lt;em&gt;https://banzaicloud.com/blog/k8s-sidecars/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; Delaying application start until sidecar is ready: &lt;em&gt;https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6cdafdb9f453542f20c5a3719818a04c</guid>
<title>深入理解 HTTP 缓存机制</title>
<link>https://toutiao.io/k/5jnd1a6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot; itemprop=&quot;articleBody&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;开始前先来简单看看缓存是什么，缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。&lt;/p&gt;&lt;p&gt;我们使用 HTTP 缓存，通过复用缓存资源，减少了客户端等待时间和网络流量，同时也能缓解服务器端的压力。可以显著的提升我们网站和应用的性能。虽然 HTTP 缓存不是必须的，但重用缓存的资源通常是必要的，HTTP 缓存是一个 web 性能优化的重要手段。&lt;/p&gt;&lt;h2 id=&quot;http-缓存的类型&quot;&gt;HTTP 缓存的类型&lt;/h2&gt;&lt;p&gt;通常 HTTP 缓存策略分为两种：强缓存和协商缓存。从字面意思我们可以很直观的看到它们的差别。强缓存即强制直接使用缓存。协商缓存就得和服务器协商确认下这个缓存能不能用。&lt;/p&gt;&lt;h3 id=&quot;强缓存&quot;&gt;强缓存&lt;/h3&gt;&lt;p&gt;强缓存不会向服务器发送请求，直接从缓存中读取资源，在 chrome 控制台的 network 选项中可以看到该请求返回 200 的状态码，并且&lt;code&gt;size&lt;/code&gt;显示&lt;code&gt;from disk cache&lt;/code&gt;或&lt;code&gt;from memory cache&lt;/code&gt;；&lt;/p&gt;&lt;h3 id=&quot;协商缓存&quot;&gt;协商缓存&lt;/h3&gt;&lt;p&gt;协商缓存会先向服务器发送一个请求，服务器会根据这个请求的 request header 的一些参数来判断是否命中协商缓存，如果命中，则返回 304 状态码并带上新的 response header 通知浏览器从缓存中读取资源。&lt;/p&gt;&lt;h2 id=&quot;http-缓存控制&quot;&gt;HTTP 缓存控制&lt;/h2&gt;&lt;p&gt;在 HTTP 中，我们可以通过设置响应头以及请求头来控制缓存策略。&lt;/p&gt;&lt;p&gt;强缓存可以通过设置&lt;code&gt;Expires&lt;/code&gt;和&lt;code&gt;Cache-Control&lt;/code&gt; 两种响应头实现。如果同时存在，&lt;code&gt;Cache-Control&lt;/code&gt;优先级高于&lt;code&gt;Expires&lt;/code&gt;。&lt;/p&gt;&lt;h3 id=&quot;expires&quot;&gt;Expires&lt;/h3&gt;&lt;p&gt;Expires 响应头，它是 HTTP/1.0 的产物。代表该资源的过期时间，其值为一个绝对时间。它告诉浏览器在过期时间之前可以直接从浏览器缓存中存取数据。由于是个绝对时间，客户端与服务端的时间时差或误差等因素可能造成客户端与服务端的时间不一致，将导致缓存命中的误差。如果在&lt;code&gt;Cache-Control&lt;/code&gt;响应头设置了 &lt;code&gt;max-age&lt;/code&gt; 或者 &lt;code&gt;s-max-age&lt;/code&gt; 指令，那么 &lt;code&gt;Expires&lt;/code&gt; 会被忽略。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;Expires: Wed, 21 Oct 2015 07:28:00 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;cache-control&quot;&gt;Cache-Control&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt; 出现于 HTTP/1.1。可以通过指定多个指令来实现缓存机制。主要用表示资源缓存的最大有效时间。即在该时间端内，客户端不需要向服务器发送请求。优先级高于 Expires。其过期时间指令的值是相对时间，它解决了绝对时间的带来的问题。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;Cache-Control: max-age=315360000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt; 有很多属性，不同的属性代表的意义也不同。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;可缓存性&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;public&lt;/code&gt; 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。&lt;/li&gt;&lt;li&gt;&lt;code&gt;private&lt;/code&gt; 表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）&lt;/li&gt;&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt; 不使用强缓存，需要与服务器验协商缓存验证。&lt;/li&gt;&lt;li&gt;&lt;code&gt;no-store&lt;/code&gt; 缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;过期&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;max-age=&amp;lt;seconds&amp;gt;&lt;/code&gt; 缓存存储的最大周期，超过这个周期被认为过期。&lt;/li&gt;&lt;li&gt;&lt;code&gt;s-maxage=&amp;lt;seconds&amp;gt;&lt;/code&gt; 设置共享缓存。会覆盖&lt;code&gt;max-age&lt;/code&gt;和&lt;code&gt;expires&lt;/code&gt;,私有缓存会忽略它&lt;/li&gt;&lt;li&gt;&lt;code&gt;max-stale[=&amp;lt;seconds&amp;gt;]&lt;/code&gt; 客户端愿意接收一个已经过期的资源，可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。&lt;/li&gt;&lt;li&gt;&lt;code&gt;min-fresh=&amp;lt;seconds&amp;gt;&lt;/code&gt; 客户端希望在指定的时间内获取最新的响应&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;重新验证和重新加载&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;must-revalidate&lt;/code&gt; 如页面过期，则去服务器进行获取。&lt;/li&gt;&lt;li&gt;&lt;code&gt;proxy-revalidate&lt;/code&gt; 与&lt;code&gt;must-revalidate&lt;/code&gt; 作用相同，但是用于共享缓存。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;only-if-cached&lt;/code&gt; 不进行网络请求，完全只使用缓存。&lt;/li&gt;&lt;li&gt;&lt;code&gt;no-transform&lt;/code&gt; 不得对资源进行转换和转变。例如，不得对图像格式进行转换。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;协商缓存可以通过 &lt;code&gt;Last-Modified&lt;/code&gt;/&lt;code&gt;If-Modified-Since&lt;/code&gt;和&lt;code&gt;ETag&lt;/code&gt;/&lt;code&gt;If-None-Match&lt;/code&gt;这两对 Header 来控制。&lt;/p&gt;&lt;h3 id=&quot;last-modifiedif-modified-since&quot;&gt;Last-Modified、If-Modified-Since&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt;与&lt;code&gt;If-Modified-Since&lt;/code&gt; 的值都是 GMT 格式的时间字符串，代表的是文件的最后修改时间。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;在服务器在响应请求时，会通过&lt;code&gt;Last-Modified&lt;/code&gt;告诉浏览器资源的最后修改时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;浏览器再次请求服务器的时候，请求头会包含&lt;code&gt;Last-Modified&lt;/code&gt;字段，后面跟着在缓存中获得的最后修改时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务端收到此请求头发现有&lt;code&gt;if-Modified-Since&lt;/code&gt;，则与被请求资源的最后修改时间进行对比，如果一致则返回 304 和响应报文头，浏览器只需要从缓存中获取信息即可。如果已经修改，那么开始传输响应一个整体，服务器返回：200 OK&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;但是在服务器上经常会出现这种情况，一个资源被修改了，但其实际内容根本没发生改变，会因为&lt;code&gt;Last-Modified&lt;/code&gt;时间匹配不上而返回了整个实体给客户端（即使客户端缓存里有个一模一样的资源）。为了解决这个问题，HTTP/1.1 推出了&lt;code&gt;Etag&lt;/code&gt;。Etag 优先级高与&lt;code&gt;Last-Modified&lt;/code&gt;。&lt;/p&gt;&lt;h3 id=&quot;etagif-none-match&quot;&gt;Etag、If-None-Match&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Etag&lt;/code&gt;都是服务器为每份资源生成的唯一标识，就像一个指纹，资源变化都会导致 ETag 变化，跟最后修改时间没有关系，&lt;code&gt;ETag&lt;/code&gt;可以保证每一个资源是唯一的。&lt;/p&gt;&lt;p&gt;在浏览器发起请求，浏览器的请求报文头会包含 &lt;code&gt;If-None-Match&lt;/code&gt; 字段，其值为上次返回的&lt;code&gt;Etag&lt;/code&gt;发送给服务器，服务器接收到次报文后发现 &lt;code&gt;If-None-Match&lt;/code&gt; 则与被请求资源的唯一标识进行对比。如果相同说明资源没有修改，则响应返 304，浏览器直接从缓存中获取数据信息。如果不同则说明资源被改动过，则响应整个资源内容，返回状态码 200。&lt;/p&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;通过前文，我们了解到 HTTP 缓存主要分强制缓存和协商缓存。强制缓存由 &lt;code&gt;Cache-Control&lt;/code&gt;，&lt;code&gt;Exipres&lt;/code&gt;（HTTP1.0）控制。浏览器直接读本地缓存，不会再跟服务器端交互，状态码 200。协商缓存由 &lt;code&gt;Last-Modified&lt;/code&gt; / &lt;code&gt;IfModified-Since&lt;/code&gt;， &lt;code&gt;Etag&lt;/code&gt; /&lt;code&gt;If-None-Match&lt;/code&gt;实现，每次请求需要让服务器判断一下资源是否更新过，从而决定浏览器是否使用缓存，如果是，则返回 304，否则重新完整响应。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>