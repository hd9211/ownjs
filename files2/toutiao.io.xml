<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bbe7881b9d9564a06a95cf3c1c247a5b</guid>
<title>[推荐] 面试：为了进阿里，死磕了 ConcurrentHashMap 源码和面试题（一）</title>
<link>https://toutiao.io/k/pcsh3lu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1 cid=&quot;n0&quot; mdtype=&quot;heading&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注公众号【&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;Ccww技术博客&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;】，原创技术文章第一时间推出&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n7&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p cid=&quot;n8&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在平时中集合使用中，当涉及多线程开发时，如果使用&lt;code&gt;HashMap&lt;/code&gt;可能会导致死锁问题，使用&lt;code&gt;HashTable&lt;/code&gt;效率又不高。而&lt;code&gt;ConcurrentHashMap&lt;/code&gt;在保持同步同时并发效率比较高，&lt;code&gt;ConcurrentHashmap&lt;/code&gt;是最好的选择，那面试中也会被常常问到，那可能的问题是：&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n37&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;span&gt;ConcurrentHashMap&lt;/span&gt;的实现原理&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p cid=&quot;n38&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap的出现主要为了解决hashmap在并发环境下不安全，JDK1.8ConcurrentHashMap的设计与实现非常精巧，大量的利用了volatile，CAS等乐观锁技术来减少锁竞争对于性能的影响，&lt;strong&gt;ConcurrentHashMap保证线程安全的方案是：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n44&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;JDK7 ConcurrentHashMap&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在JDK1.7中ConcurrentHashMap由Segment(分段锁)数组结构和HashEntry数组组成，且主要通过Segment(分段锁)段技术实现线程安全。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n46&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;Segment是一种可重入锁，是一种数组和链表的结构，一个Segment中包含一个HashEntry数组，每个HashEntry又是一个链表结构，因此在ConcurrentHashMap查询一个元素的过程需要进行两次Hash操作，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n47&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n49&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;第一次Hash定位到Segment，&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n51&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;第二次Hash定位到元素所在的链表的头部&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6092307692307692&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrjDjpyooXYGkFXgwNX3HLcjIEhGc3OMPyicHoicpnZHicAZ4SaBEwqrPpdia9TCH9yK9xhpesMV1qPO8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;正是通过Segment分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n54&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;这样结构会使Hash的过程要比普通的HashMap要长，影响性能，但写操作的时候可以只对元素所在的Segment进行加锁即可，不会影响到其他的Segment，ConcurrentHashMap提升了并发能力。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n55&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;JDK8 ConcurrentHashMap&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n56&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在JDK8ConcurrentHashMap内部机构：数组+链表+红黑树，Java 8在链表长度超过一定阈值(8)时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为O(long(N)))，结构基本上与功能和JDK8的HashMap一样，只不过ConcurrentHashMap保证线程安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8034188034188035&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrjDjpyooXYGkFXgwNX3HLcjFiadqnv5R3YicqfsM8laEe46R6SzZjbSa8bGGAcN7Bm11CcGghfpaibFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在JDK1.8中摒弃了Segment分段锁的数据结构，基于CAS操作保证数据的获取以及使用synchronized关键字对相应数据段加锁来实现线程安全，这进一步提高了并发性。（&lt;strong&gt;CAS原理详情&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2ODk2NDMwNw==&amp;amp;mid=2247484095&amp;amp;idx=1&amp;amp;sn=7b8da8730943c203a0d9b850fa361644&amp;amp;chksm=fc84a703cbf32e15b461357295c65fd2cc329fe636b12adcf2210e42ec1f7c57eda96ae55d30&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《面试：为了进阿里，又把并发CAS（Compare and Swap）实现重新精读一遍》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《面试：为了进阿里，又把并发CAS（Compare and Swap）实现重新精读一遍》&lt;/a&gt;）&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Node&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;code-snippet__title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Map&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Entry&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;code-snippet__title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; K key;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt; V val;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt; Node&amp;lt;K,V&amp;gt; next;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap采用Node类作为基本的存储单元，每个键值对(key-value)都存储在一个Node中，使用了volatile关键字修饰value和next，保证并发的可见性。其中Node子类有：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n61&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ForwardingNode：扩容节点，只是在扩容阶段使用的节点，主要作为一个标记，在处理并发时起着关键作用，有了ForwardingNodes，也是ConcurrentHashMap有了分段的特性，提高了并发效率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n65&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;TreeBin：TreeNode的代理节点，用于维护TreeNodes，ConcurrentHashMap的红黑树存放的是TreeBin&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n67&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;TreeNode：用于树结构中，红黑树的节点（当链表长度大于8时转化为红黑树），此节点不能直接放入桶内，只能是作为红黑树的节点&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n69&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ReservationNode：保留结点&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n70&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap中查找元素、替换元素和赋值元素都是基于&lt;code&gt;sun.misc.Unsafe&lt;/code&gt;中&lt;strong&gt;原子操作&lt;/strong&gt;实现&lt;strong&gt;多并发的无锁化&lt;/strong&gt;操作。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &amp;lt;K,V&amp;gt; &lt;span class=&quot;code-snippet__function&quot;&gt;Node&amp;lt;K,V&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;tabAt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Node&amp;lt;K,V&amp;gt;[] tab, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (Node&amp;lt;K,V&amp;gt;)U.getObjectAcquire(tab, ((&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;)i &amp;lt;&amp;lt; ASHIFT) + ABASE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &amp;lt;K,V&amp;gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;casTabAt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Node&amp;lt;K,V&amp;gt;[] tab, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                      Node&amp;lt;K,V&amp;gt; c, Node&amp;lt;K,V&amp;gt; v)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; U.compareAndSetObject(tab, ((&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;)i &amp;lt;&amp;lt; ASHIFT) + ABASE, c, v);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &amp;lt;K,V&amp;gt; &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setTabAt&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Node&amp;lt;K,V&amp;gt;[] tab, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i, Node&amp;lt;K,V&amp;gt; v)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      U.putObjectRelease(tab, ((&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt;)i &amp;lt;&amp;lt; ASHIFT) + ABASE, v);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;hr/&gt;&lt;h3 cid=&quot;n231&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;ConcurrentHashMap的put()方法&lt;span md-inline=&quot;tab&quot;/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n270&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;ConcurrentHashMap的put的流程步骤&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n234&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;1.&lt;/strong&gt;如果key或者value为null，则抛出空指针异常，和HashMap不同的是HashMap单线程是允许为Null；&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n235&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;if (key == null || value == null) throw new NullPointerException();&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n237&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;for的死循环，为了实现CAS的无锁化更新，如果table为null或者table的长度为0，则初始化table，调用&lt;code&gt;initTable()&lt;/code&gt;方法（第一次put数据，调用默认参数实现，其中重要的&lt;code&gt;sizeCtl&lt;/code&gt;参数）。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; hash = spread(key.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; binCount = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt;[] tab = table;;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       Node&amp;lt;K,V&amp;gt; f; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; n, i, fh; K fk; V fv;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tab == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; || (n = tab.length) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           tab = initTable(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p cid=&quot;n240&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;确定元素在Hash表的索引&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n241&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;通过hash算法可以将元素分散到哈希桶中。在ConcurrentHashMap中通过如下方法确定数组索引：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n242&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt; 第一步：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;spread&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; h)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (h ^ (h &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;)) &amp;amp; HASH_BITS;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n244&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;第二步：&lt;code&gt;(length-1) &amp;amp; (h ^ (h &amp;gt;&amp;gt;&amp;gt; 16)) &amp;amp; HASH_BITS);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n246&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;4.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通过&lt;code&gt;tableAt()&lt;/code&gt;方法找到位置&lt;code&gt;tab[i]&lt;/code&gt;的&lt;code&gt;Node&lt;/code&gt;,当Node为null时为没有&lt;code&gt;hash&lt;/code&gt;冲突的话，使用&lt;code&gt;casTabAt()&lt;/code&gt;方法&lt;code&gt;CAS&lt;/code&gt;操作将元素插入到&lt;code&gt;Hash&lt;/code&gt;表中，&lt;code&gt;ConcurrentHashmap&lt;/code&gt;使用&lt;code&gt;CAS&lt;/code&gt;无锁化操作，这样在高并发&lt;code&gt;hash&lt;/code&gt;冲突低的情况下，性能良好。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((f = tabAt(tab, i = (n - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; hash)) == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (casTabAt(tab, i, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;K,V&amp;gt;(hash, key, &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n249&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;5.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当f不为null时，说明发生了hash冲突，当f.hash == MOVED==-1 时，说明&lt;code&gt;ConcurrentHashmap&lt;/code&gt;正在发生&lt;code&gt;resize&lt;/code&gt;操作,使用&lt;code&gt;helpTransfer()&lt;/code&gt;方法帮助正在进行resize操作。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((fh = f.hash) == MOVED) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       tab = helpTransfer(tab, f);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n252&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;6.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;以上情况都不满足的时，使用&lt;code&gt;synchronized&lt;/code&gt;同步块上锁当前节点&lt;code&gt;Node&lt;/code&gt;,并判断有没有线程对数组进行了修改，如果没有则进行：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;synchronized (f) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tabAt(tab, i) == f) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (fh &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             binCount = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (Node&amp;lt;K,V&amp;gt; e = f;; ++binCount) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   K ek;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (e.hash == hash &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                          ((ek = e.key) == key ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                          (ek != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; key.&lt;span class=&quot;code-snippet__keyword&quot;&gt;equals&lt;/span&gt;(ek)))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           oldVal = e.val;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!onlyIfAbsent)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                               &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                               e.val = &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Node&amp;lt;K,V&amp;gt; pred = e;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((e = e.next) == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           pred.next = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;K,V&amp;gt;(hash, key, &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (f instanceof TreeBin) { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       Node&amp;lt;K,V&amp;gt; p;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       binCount = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((p = ((TreeBin&amp;lt;K,V&amp;gt;)f).putTreeVal(hash, key,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                                      &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;)) != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           oldVal = p.val;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                           &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!onlyIfAbsent)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                               &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                               p.val = &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (f instanceof ReservationNode)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                       &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Recursive update&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot; cid=&quot;n232&quot; mdtype=&quot;list&quot;/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.&lt;/strong&gt;执行完&lt;/span&gt;&lt;code&gt;&lt;span&gt;synchronized(f)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;同步代码块之后会先检查&lt;/span&gt;&lt;code&gt;&lt;span&gt;binCount&lt;/span&gt;&lt;/code&gt;&lt;span&gt;,如果大于等于TREEIFY_THRESHOLD = 8则进行treeifyBin操作尝试将该链表转换为红黑树。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (binCount != &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (binCount &amp;gt;= TREEIFY_THRESHOLD)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  treeifyBin(tab, i);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (oldVal != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; oldVal;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n263&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;8.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;执行了一个&lt;code&gt;addCount&lt;/code&gt;方法,主要用于统计数量以及决定是否需要扩容.&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;addCount(1L, binCount);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h4 cid=&quot;n265&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;ConcurrentHashmap 不支持 key 或者 value 为 null 的原因？&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n111&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;ConcurrentHashmap&lt;/code&gt;和&lt;code&gt;hashMap&lt;/code&gt;不同的是，&lt;code&gt;concurrentHashMap&lt;/code&gt;的&lt;code&gt;key&lt;/code&gt;和&lt;code&gt;value&lt;/code&gt;都不允许为null，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;因为&lt;code&gt;concurrenthashmap&lt;/code&gt;它们是用于多线程的，并发的 ，如果&lt;code&gt;map.get(key)&lt;/code&gt;得到了null，不能判断到底是映射的value是null,还是因为没有找到对应的key而为空，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;而用于单线程状态的&lt;code&gt;hashmap&lt;/code&gt;却可以用&lt;code&gt;containKey（key）&lt;/code&gt; 去判断到底是否包含了这个null。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n114&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;put()方法如何实现线程安全呢？&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n115&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在第一次put数据时，调用&lt;code&gt;initTable()&lt;/code&gt;方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; transient &lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; sizeCtl;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; final Node&amp;lt;K,V&amp;gt;[] &lt;span class=&quot;code-snippet__title&quot;&gt;initTable&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Node&amp;lt;K,V&amp;gt;[] tab; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; sc;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ((tab = table) == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; || tab.length == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((sc = sizeCtl) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Thread.&lt;span class=&quot;code-snippet__keyword&quot;&gt;yield&lt;/span&gt;(); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (U.compareAndSwapInt(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, SIZECTL, sc, &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ...  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           sizeCtl = sc;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; tab;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;使用&lt;code&gt;sizeCtl&lt;/code&gt;参数作为控制标志的作用，当在从插入元素时，才会初始化Hash表。在开始初始化的时候，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;2.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在不存在hash冲突的时&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((f = tabAt(tab, i = (n - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) &amp;amp; hash)) == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (casTabAt(tab, i, &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Node&amp;lt;K,V&amp;gt;(hash, key, &lt;span class=&quot;code-snippet__keyword&quot;&gt;value&lt;/span&gt;)))  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n125&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;code&gt;(f = tabAt(tab, i = (n - 1) &amp;amp; hash)) == null&lt;/code&gt;中使用tabAt原子操作获取数组，并利用&lt;code&gt;casTabAt(tab, i, null, new Node&amp;lt;K,V&amp;gt;(hash, key, value))&lt;/code&gt;CAS操作将元素插入到Hash表中&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;strong&gt;&lt;span&gt;3.&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在存在hash冲突时，先把当前节点使用关键字&lt;code&gt;synchronized&lt;/code&gt;加锁，然后再使用&lt;code&gt;tabAt()&lt;/code&gt;原子操作判断下有没有线程对数组进行了修改，最后再进行其他操作。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n127&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么要锁住更新操作的代码块?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n128&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;因为发生了哈希冲突，当前线程正在f所在的链表上进行更新操作，假如此时另外一个线程也需要到这个链表上进行更新操作，则需要等待当前线程更新完后再执行&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; (f) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (tabAt(tab, i) == f) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;接下来内容看&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2ODk2NDMwNw==&amp;amp;mid=2247484131&amp;amp;idx=2&amp;amp;sn=5d47abac54e039c25dbd8d34c9e4ae57&amp;amp;chksm=fc84a75fcbf32e49ed5179794aad8227cdb9ea6a26da0162947dbc2834d2cdf5e666c08f5d44&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《面试：为了进阿里，死磕了CurrentHashMap源码和面试题(二)》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《面试：为了进阿里，死磕了&lt;span&gt;ConcurrentHashMap&lt;/span&gt;源码和面试题(二)》&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;各位看官还可以吗？喜欢的话，动动手指点个再看💗呗！！谢谢支持！&lt;span md-inline=&quot;linebreak&quot;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n158&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;欢迎扫码关注，原创技术文章第一时间推出&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.36857142857142855&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;350&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgfBz2Ve78FylxcGWmXaueSuqPguurBCWEkeY1ibeLl1wlxUyibdesc4YeuiaJJjSt6HTiab2iaHyXyyicA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>69d1fc6f21d0417a1b67131594ae99df</guid>
<title>[推荐] 谈谈 MySQL 的 JSON 数据类型</title>
<link>https://toutiao.io/k/x25pdur</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;MySQL 5.7 增加了 JSON 数据类型的支持，在之前如果要存储 JSON 类型的数据的话我们只能自己做 &lt;code&gt;JSON.stringify()&lt;/code&gt; 和 &lt;code&gt;JSON.parse()&lt;/code&gt; 的操作，而且没办法针对 JSON 内的数据进行查询操作，所有的操作必须读取出来 parse 之后进行，非常的麻烦。原生的 JSON 数据类型支持之后，我们就可以直接对 JSON 进行数据查询和修改等操作了，较之前会方便非常多。&lt;/p&gt;&lt;p&gt;为了方便演示我先创建一个 &lt;code&gt;user&lt;/code&gt; 表，其中 &lt;code&gt;info&lt;/code&gt; 字段用来存储用户的基础信息。要将字段定义成 JSON 类型数据非常简单，直接字段名后接 &lt;code&gt;JSON&lt;/code&gt; 即可。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表创建成功之后我们就按照经典的 CRUD 数据操作来讲讲怎么进行 JSON 数据类型的操作。&lt;/p&gt;&lt;h2&gt;添加数据&lt;/h2&gt;&lt;p&gt;添加数据这块是比较简单，不过需要理解 MySQL 对 JSON 的存储本质上还是字符串的存储操作。只是当定义为 JSON 类型之后内部会对数据再进行一些索引的创建方便后续的操作而已。所以添加 JSON 数据的时候需要使用字符串包装。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; INSERT INTO user (`name`, `info`) VALUES(&#x27;lilei&#x27;, &#x27;{&quot;sex&quot;: &quot;male&quot;, &quot;age&quot;: 18, &quot;hobby&quot;: [&quot;basketball&quot;, &quot;football&quot;], &quot;score&quot;: [85, 90, 100]}&#x27;);
Query OK, 1 row affected (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了自己拼 JSON 之外，你还可以调用 MySQL 的 JSON 创建函数进行创建。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_OBJECT&lt;/code&gt;：快速创建 JSON 对象，奇数列为 key，偶数列为 value，使用方法 &lt;code&gt;JSON_OBJECT(key,value,key1,value1)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_ARRAY&lt;/code&gt;：快速创建 JSON 数组，使用方法 &lt;code&gt;JSON_ARRAY(item0, item1, item2)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; INSERT INTO user (`name`, `info`) VALUES(&#x27;hanmeimei&#x27;, JSON_OBJECT(
    -&amp;gt;   &#x27;sex&#x27;, &#x27;female&#x27;, 
    -&amp;gt;   &#x27;age&#x27;, 18, 
    -&amp;gt;   &#x27;hobby&#x27;, JSON_ARRAY(&#x27;badminton&#x27;, &#x27;sing&#x27;), 
    -&amp;gt;   &#x27;score&#x27;, JSON_ARRAY(90, 95, 100)
    -&amp;gt; ));
Query OK, 1 row affected (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过对于 JavaScript 工程师来说不管是使用字符串来写还是使用自带函数来创建 JSON 都是非常麻烦的一件事，远没有 JS 原生对象来的好用。所以在 &lt;code&gt;think-model&lt;/code&gt; 模块中我们增加了 JSON 数据类型的数据自动进行 &lt;code&gt;JSON.stringify()&lt;/code&gt; 的支持，所以直接传入 JS 对象数据即可。&lt;/p&gt;&lt;p&gt;由于数据的自动序列化和解析是根据字段类型来做的，为了不影响已运行的项目，需要在模块中配置 &lt;code&gt;jsonFormat: true&lt;/code&gt; 才能开启这项功能。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//adapter.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;think-model-mysql&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;mysql&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jsonFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;male&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;basketball&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;football&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面让我们来看看最终存储到数据库中的数据是什么样的&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT * FROM `user`;
+----+-----------+-----------------------------------------------------------------------------------------+
| id | name      | info                                                                                    |
+----+-----------+-----------------------------------------------------------------------------------------+
|  1 | lilei     | {&quot;age&quot;: 18, &quot;sex&quot;: &quot;male&quot;, &quot;hobby&quot;: [&quot;basketball&quot;, &quot;football&quot;], &quot;score&quot;: [85, 90, 100]} |
|  2 | hanmeimei | {&quot;age&quot;: 18, &quot;sex&quot;: &quot;female&quot;, &quot;hobby&quot;: [&quot;badminton&quot;, &quot;sing&quot;], &quot;score&quot;: [90, 95, 100]}    |
+----+-----------+-----------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;查询数据&lt;/h2&gt;&lt;p&gt;为了更好的支持 JSON 数据的操作，MySQL 提供了一些 JSON 数据操作类的方法。和查询操作相关的方法主要如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_EXTRACT()&lt;/code&gt;：根据 Path 获取部分 JSON 数据，使用方法 &lt;code&gt;JSON_EXTRACT(json_doc, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;：&lt;code&gt;JSON_EXTRACT()&lt;/code&gt; 的等价写法&lt;/li&gt;&lt;li&gt;&lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;：&lt;code&gt;JSON_EXTRACT()&lt;/code&gt; 和 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 的等价写法&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_CONTAINS()&lt;/code&gt;：查询 JSON 数据是否在指定 Path 包含指定的数据，包含则返回1，否则返回0。使用方法 &lt;code&gt;JSON_CONTAINS(json_doc, val[, path])&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_CONTAINS_PATH()&lt;/code&gt;：查询是否存在指定路径，存在则返回1，否则返回0。&lt;code&gt;one_or_all&lt;/code&gt; 只能取值 &quot;one&quot; 或 &quot;all&quot;，one 表示只要有一个存在即可，all 表示所有的都存在才行。使用方法 &lt;code&gt;JSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_KEYS()&lt;/code&gt;：获取 JSON 数据在指定路径下的所有键值。使用方法 &lt;code&gt;JSON_KEYS(json_doc[, path])&lt;/code&gt;，类似 JavaScript 中的 &lt;code&gt;Object.keys()&lt;/code&gt; 方法。&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_SEARCH()&lt;/code&gt;：查询包含指定字符串的 Paths，并作为一个 JSON Array 返回。查询的字符串可以用 LIKE 里的 &#x27;%&#x27; 或 &#x27;_&#x27; 匹配。使用方法 &lt;code&gt;JSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path] ...])&lt;/code&gt;，类似 JavaScript 中的 &lt;code&gt;findIndex()&lt;/code&gt; 操作。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们在这里不对每个方法进行逐个的举例描述，仅提出一些场景举例应该怎么操作。&lt;/p&gt;&lt;h3&gt;返回用户的年龄和性别&lt;/h3&gt;&lt;p&gt;举这个例子就是想告诉下大家怎么获取 JSON 数据中的部分内容，并按照正常的表字段进行返回。这块可以使用 &lt;code&gt;JSON_EXTRACT&lt;/code&gt; 或者等价的 &lt;code&gt;-&amp;gt;&lt;/code&gt; 操作都可以。其中根据例子可以看到 &lt;code&gt;sex&lt;/code&gt; 返回的数据都带有引号，这个时候可以使用 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 或者直接使用 &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; 就可以把引号去掉了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name`, JSON_EXTRACT(`info`, &#x27;$.age&#x27;) as `age`, `info`-&amp;gt;&#x27;$.sex&#x27; as sex FROM `user`;
+-----------+------+----------+
| name      | age  | sex      |
+-----------+------+----------+
| lilei     | 18   | &quot;male&quot;   |
| hanmeimei | 16   | &quot;female&quot; |
+-----------+------+----------+
2 rows in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们第一次接触到了 Path 的写法，MySQL 通过这种字符串的 Path 描述帮助我们映射到对应的数据。和 JavaScript 中对象的操作比较类似，通过 &lt;code&gt;.&lt;/code&gt; 获取下一级的属性，通过 &lt;code&gt;[]&lt;/code&gt; 获取数组元素。&lt;/p&gt;&lt;p&gt;不一样的地方在于需要通过 &lt;code&gt;$&lt;/code&gt; 表示本身，这个也比较好理解。另外就是可以使用 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 两个通配符，比如 &lt;code&gt;.*&lt;/code&gt; 表示当前层级的所有成员的值，&lt;code&gt;[*]&lt;/code&gt; 则表示当前数组中所有成员值。&lt;code&gt;**&lt;/code&gt; 类似 LIKE 一样可以接前缀和后缀，比如 &lt;code&gt;a**b&lt;/code&gt; 表示的是以 a 开头，b结尾的路径。&lt;/p&gt;&lt;p&gt;路径的写法非常简单，后面的内容里也会出现。上面的这个查询对应在 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name, JSON_EXTRACT(info, &#x27;$.age&#x27;) AS age, info-&amp;gt;&#x27;$.sex&#x27; as sex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;1=1&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;返回喜欢篮球的男性用户&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_CONTAINS(`info`, &#x27;&quot;male&quot;&#x27;, &#x27;$.sex&#x27;) AND JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;basketball&#x27;, null, &#x27;$.hobby&#x27;);
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set, 1 warning (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子就是简单的告诉大家怎么对属性和数组进行查询搜索。其中需要注意的是 &lt;code&gt;JSON_CONTAINS()&lt;/code&gt; 查询字符串由于不带类型转换的问题字符串需要使用加上 &lt;code&gt;&quot;&quot;&lt;/code&gt; 包裹查询，或者使用 &lt;code&gt;JSON_QUOTE(&#x27;male&#x27;)&lt;/code&gt; 也可以。&lt;/p&gt;&lt;p&gt;如果你使用的是 MySQL 8 的话，也可以使用新增的 &lt;code&gt;JSON_VALUE()&lt;/code&gt; 来代替 &lt;code&gt;JSON_CONTAINS()&lt;/code&gt;，新方法的好处是会带类型转换，避免刚才双引号的尴尬问题。不需要返回的路径的话，&lt;code&gt;JSON_SEARCH()&lt;/code&gt; 在这里也可以使用新增的 &lt;code&gt;MEMBER OF&lt;/code&gt; 或者 &lt;code&gt;JSON_OVERLAPS()&lt;/code&gt; 方法替换。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27; AND &#x27;basketball&#x27; MEMBER OF(JSON_VALUE(`info`, &#x27;$.hobby&#x27;));
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set (0.00 sec)

mysql&amp;gt; SELECT `name` FROM `user` WHERE JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27; AND JSON_OVERLAPS(JSON_VALUE(`info`, &#x27;$.hobby&#x27;), JSON_QUOTE(&#x27;basketball&#x27;));
+-------+
| name  |
+-------+
| lilei |
+-------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的这个查询对应在 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_CONTAINS(info, &#x27;\&quot;male\&quot;&#x27;, &#x27;$.sex&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_SEARCH(info, &#x27;one&#x27;, &#x27;basketball&#x27;, null, &#x27;$.hobby&#x27;)&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&#x27;basketball&#x27; MEMBER OF (JSON_VALUE(`info`, &#x27;$.hobby&#x27;))&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;where2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_VALUE(`info`, &#x27;$.sex&#x27;) = &#x27;male&#x27;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;JSON_OVERLAPS(JSON_VALUE(`info`, &#x27;$.hobby&#x27;), JSON_QUOTE(&#x27;basketball&#x27;))&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;name&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;修改数据&lt;/h2&gt;&lt;p&gt;MySQL 提供的 JSON 操作函数中，和修改操作相关的方法主要如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_APPEND/JSON_ARRAY_APPEND&lt;/code&gt;：这两个名字是同一个功能的两种叫法，MySQL 5.7 的时候为 &lt;code&gt;JSON_APPEND&lt;/code&gt;，MySQL 8 更新为 &lt;code&gt;JSON_ARRAY_APPEND&lt;/code&gt;，并且之前的名字被废弃。该方法如同字面意思，给数组添加值。使用方法 &lt;code&gt;JSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_ARRAY_INSERT&lt;/code&gt;：给数组添加值，区别于 &lt;code&gt;JSON_ARRAY_APPEND()&lt;/code&gt; 它可以在指定位置插值。使用方法 &lt;code&gt;JSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_INSERT/JSON_REPLACE/JSON_SET&lt;/code&gt;：以上三个方法都是对 JSON 插入数据的，他们的使用方法都为 &lt;code&gt;JSON_[INSERT|REPLACE|SET](json_doc, path, val[, path, val] ...)&lt;/code&gt;，不过在插入原则上存在一些差别。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_INSERT&lt;/code&gt;：当路径不存在才插入&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_REPLACE&lt;/code&gt;：当路径存在才替换&lt;/li&gt;&lt;li&gt;&lt;code&gt;JSON_SET&lt;/code&gt;：不管路径是否存在&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;JSON_REMOVE&lt;/code&gt;：移除指定路径的数据。使用方法 &lt;code&gt;JSON_REMOVE(json_doc, path[, path] ...)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于 &lt;code&gt;JSON_INSERT&lt;/code&gt;, &lt;code&gt;JSON_REPLACE&lt;/code&gt;, &lt;code&gt;JSON_SET&lt;/code&gt; 和 &lt;code&gt;JSON_REMOVE&lt;/code&gt; 几个方法支持属性和数组的操作，所以前两个 &lt;code&gt;JSON_ARRAY&lt;/code&gt; 方法用的会稍微少一点。下面我们根据之前的数据继续举几个实例看看。&lt;/p&gt;&lt;h3&gt;修改用户的年龄&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REPLACE(`info`, &#x27;$.age&#x27;, 20) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.age&#x27;) as age FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+------+
| age  |
+------+
| 20   |
+------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;JSON_INSERT&lt;/code&gt; 和 &lt;code&gt;JSON_SET&lt;/code&gt; 的例子也是类似，这里就不多做演示了。对应到 &lt;code&gt;think-model&lt;/code&gt; 中的话，需要使用 EXP 条件表达式处理，对应的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REPLACE(info, &#x27;$.age&#x27;, 20)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;修改用户的爱好&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_ARRAY_APPEND(`info`, &#x27;$.hobby&#x27;, &#x27;badminton&#x27;) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.hobby&#x27;) as hobby FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-----------------------------------------+
| hobby                                   |
+-----------------------------------------+
| [&quot;basketball&quot;, &quot;football&quot;, &quot;badminton&quot;] |
+-----------------------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;JSON_ARRAY_APPEND&lt;/code&gt; 在对数组进行操作的时候还是要比 &lt;code&gt;JSON_INSERT&lt;/code&gt; 之类的方便的，起码你不需要知道数组的长度。对应到 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_ARRAY_APPEND(info, &#x27;$.hobby&#x27;, &#x27;badminton&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;删除用户的分数&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REMOVE(`info`, &#x27;$.score[0]&#x27;) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT `name`, JSON_VALUE(`info`, &#x27;$.score&#x27;) as score FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------+-----------+
| name  | score     |
+-------+-----------+
| lilei | [90, 100] |
+-------+-----------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;删除这块和之前修改操作类似，没有什么太多需要说的。但是对数组进行操作很多时候我们可能就是想删值，但是却不知道这个值的 Path 是什么。这个时候就需要利用之前讲到的 &lt;code&gt;JSON_SEARCH()&lt;/code&gt; 方法，它是根据值去查找路径的。比如说我们要删除 lilei 兴趣中的 badminton 选项可以这么写。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; UPDATE `user` SET `info` = JSON_REMOVE(`info`, JSON_UNQUOTE(JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;badminton&#x27;))) WHERE `name` = &#x27;lilei&#x27;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.hobby&#x27;) as hobby FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+----------------------------+
| hobby                      |
+----------------------------+
| [&quot;basketball&quot;, &quot;football&quot;] |
+----------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里需要注意由于 &lt;code&gt;JSON_SEARCH&lt;/code&gt; 不会做类型转换，所以匹配出来的路径字符串需要进行 &lt;code&gt;JSON_UNQUOTE()&lt;/code&gt; 操作。另外还有非常重要的一点是 &lt;code&gt;JSON_SEARCH&lt;/code&gt; &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/44056978/how-do-i-use-json-search-to-find-the-path-of-a-number-in-a-mysql-json-array&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;无法对数值类型数据进行查找&lt;/a&gt;，也不知道这个是 Bug 还是 Feature。这也是为什么我没有使用 &lt;code&gt;score&lt;/code&gt; 来进行举例而是换成了 &lt;code&gt;hobby&lt;/code&gt; 的原因。如果数值类型的话目前只能取出来在代码中处理了。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;mysql&amp;gt; SELECT JSON_VALUE(`info`, &#x27;$.score&#x27;) FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------------------------------+
| JSON_VALUE(`info`, &#x27;$.score&#x27;) |
+-------------------------------+
| [90, 100]                     |
+-------------------------------+
1 row in set (0.00 sec)

mysql&amp;gt; SELECT JSON_SEARCH(`info`, &#x27;one&#x27;, 90, null, &#x27;$.score&#x27;) FROM `user` WHERE `name` = &#x27;lilei&#x27;;
+-------------------------------------------------+
| JSON_SEARCH(`info`, &#x27;one&#x27;, 90, null, &#x27;$.score&#x27;) |
+-------------------------------------------------+
| NULL                                            |
+-------------------------------------------------+
1 row in set (0.00 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上对应到 &lt;code&gt;think-model&lt;/code&gt; 的写法为&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//user.js
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;think&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;user&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 删除分数
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REMOVE(info, &#x27;$.score[0]&#x27;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 删除兴趣
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;nx&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;lilei&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;exp&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JSON_REMOVE(`info`, JSON_UNQUOTE(JSON_SEARCH(`info`, &#x27;one&#x27;, &#x27;badminton&#x27;)))&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;后记&lt;/h2&gt;&lt;p&gt;由于最近有一个需求，有一堆数据，要记录这堆数据的排序情况，方便根据排序进行输出。一般情况下肯定是给每条数据增加一个 &lt;code&gt;order&lt;/code&gt; 字段来记录该条数据的排序情况。但是由于有着批量操作，在这种时候使用单字段去存储会显得特别麻烦。在服务端同事的建议下，我采取了使用 JSON 字段存储数组的情况来解决这个问题。&lt;/p&gt;&lt;p&gt;也因为这样了解了一下 MySQL 对 JSON 的支持情况，同时将 &lt;code&gt;think-model&lt;/code&gt; 做了一些优化，对 JSON 数据类型增加了支持。由于大部分 JSON 操作需要通过内置的函数来操作，这个本身是可以通过 EXP 条件表达式来完成的。所以只需要对 JSON 数据的添加和查询做好优化就可以了。&lt;/p&gt;&lt;p&gt;整体来看，配合提供的 JSON 操作函数，MySQL 对 JSON 的支持完成一些日常的需求还是没有问题的。除了作为 WHERE 条件以及查询字段之外，其它的 &lt;code&gt;ORDER&lt;/code&gt;, &lt;code&gt;GROUP&lt;/code&gt;, &lt;code&gt;JOIN&lt;/code&gt; 等操作也都是支持 &lt;code&gt;JSON&lt;/code&gt; 数据的。&lt;/p&gt;&lt;p&gt;不过对比 MongoDB 这种天生支持 JSON 的话，在操作性上还是要麻烦许多。特别是在类型转换这块，使用一段时间后发现非常容易掉坑。什么时候会带引号，什么时候会不带引号，什么时候需要引号，什么时候不需要引号，这些都容易让新手发憷。另外 &lt;code&gt;JSON_SEARCH()&lt;/code&gt; 不支持数字查找这个也是一个不小的坑了。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1037b1c92165ba26a74541dc6d48023</guid>
<title>[推荐] 项目管理标准模板</title>
<link>https://toutiao.io/k/aud21gw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-content&quot;&gt;&lt;p&gt;之前写了一篇&lt;a href=&quot;https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/&quot;&gt;《技术管理标准模板》&lt;/a&gt;，其中项目管理部分并没有具体深入，而这一技能不仅仅是对于技术Leader的要求，从我的经验看来，只要是程序员，具有项目管理能力都是如虎添翼的，即使你走的是专业路线。本文即基于自己的经验，从项目的启动和迭代阶段总结了敏捷项目管理的一些标准动作。&lt;/p&gt;




&lt;h2&gt;启动阶段&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相关干系人沟通，同步项目背景、业务价值等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动会议：召集相关干系人，明确业务相关信息，确定相关流程制度等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需求收集和分析-&amp;gt;&lt;strong&gt;总体需求文档&lt;/strong&gt;，概括性的功能与非功能需求列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初步的产品规划-&amp;gt;&lt;strong&gt;每一轮迭代的需求列表、发布时间&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建项目基础设施-&amp;gt;&lt;strong&gt;可持续交付到测试环境的基础项目&lt;/strong&gt;，包括各个端的代码库、到测试环境的流水线等。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;迭代阶段&lt;/h2&gt;

&lt;p&gt;两周为一迭代，包括需求、设计、开发、测试、发布。关键点在于需求的拆分、优先级以及并行化。&lt;/p&gt;

&lt;h3&gt;1. 需求评审&lt;/h3&gt;

&lt;p&gt;对本轮迭代的需求尽心评审确认。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：产品经理对此轮迭代进行需求确认，产出需求条目，按&lt;strong&gt;优先级&lt;/strong&gt;排列；需求需要拆的足够小，把大需求拆成一个个&lt;strong&gt;能够独立开发测试发布&lt;/strong&gt;的小需求&lt;/p&gt;

&lt;h3&gt;2. 工作规划&lt;/h3&gt;

&lt;p&gt;根据本轮迭代需求做WBS任务分解&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WBS工作项分解: 甘特图&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;里程碑结点: 表格或者里程碑图&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;风险管理：风险点预估、严重程度、可能性、应对措施&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;3. 设计/技术评审&lt;/h3&gt;

&lt;p&gt;分别对交互设计和技术设计进行评审&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前置条件&lt;/strong&gt;：设计师需要输出设计图；技术部分做概要设计和系统设计，随着每一轮迭代进行更新维护&lt;/p&gt;

&lt;h3&gt;4. 测试用例评审&lt;/h3&gt;

&lt;p&gt;由QA安排，会前需要提前将测试用例文档发给产品经理与研发，提前标注有疑问的用例。&lt;/p&gt;

&lt;h3&gt;5. 开发、测试过程的监控&lt;/h3&gt;

&lt;p&gt;持续交付：开发和迭代测试，需求开发完成后即测试并进行缺陷跟踪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会议&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;项目周报&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;汇总项目总体状况，回答三个问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;项目的整体进展状态到底如何？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;风险可控吗？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标达成有没有问题？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;6. 版本全量测试&lt;/h3&gt;

&lt;p&gt;对所有已经开发完的功能进行交叉测试、全量测试、埋点测试、回归测试、第三方云测。&lt;/p&gt;

&lt;h3&gt;7. 验包发布&lt;/h3&gt;

&lt;p&gt;此迭代所有功能开发测试完成后，提交审核流程，各流程审核人验收通过后发布。&lt;/p&gt;

&lt;h3&gt;8. 复盘&lt;/h3&gt;

&lt;p&gt;项目复盘会：有意识地向过去的行为经验学习&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;团队做对了哪些事？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做错了哪些事？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再来一次，如何做得更好？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;



  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a720392ac0888efce9116e50045487e0</guid>
<title>[推荐] 《一年顶十年》干货读书笔记</title>
<link>https://toutiao.io/k/okqtla6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者彪悍一只猫是范登读书首席社群顾问，一天的咨询费20万元。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书非常薄，一共170+篇文章，每篇都很短，我花了2个多小时就读完了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下的作者观点，非常有共鸣。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;摘抄下来，和大家共勉，一起精进！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、时间更少，为何更好！&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，除了少数必须花很多时间才能做好的事情外，对于一般的事情，真没必要给自己留太多时间，完全可以把截止时间提前，甚至大大提前。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、时间投资评估&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;做这件事，其实就是回答五个问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（一）今天都做了什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（二）所做的事情分别有什么产出？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（三）做这些事情，分别花了多少时间？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（四）哪些事情是应该做的，哪些事情是不应该做的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（五）在时间花费上，还有哪些方面需要改进？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、稻盛和夫的六项精进&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（一）付出不亚于任何人的努力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（二）要谦虚，不要骄傲&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（三）要每天反省&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（四）活着，就要感谢&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（五）积善行，思利他&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（六）不要有感性的烦恼&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、为什么要帮助他人&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个内心能量不足的人，往往通过给他人提供帮助，让自己的内心变得更阳光，从而拥有更好的状态。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、爱好&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至少培养一项&lt;strong&gt;爱好&lt;/strong&gt;，做自己真正热爱的事情，你会感到很快乐。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6、为什么要尽早实战？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尽早进入实战，并不是急于求成，而是让自己在行动中得到&lt;strong&gt;反馈&lt;/strong&gt;，让自己学的更好，更能解决实际问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7、如何面对各种错误&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果犯错了，请记住，错了就是错了，你要做的不是纠结和狡辩，而是想办法去弥补过失，并让自己变得更强，成为真正的高手。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8、为何要读透几本书？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在你的专业领域，一定有非常经典、非常值得去读的书籍。你要反复去啃这些书，并反复在实践中应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;站在巨人的肩膀上创新，比纯靠自己摸索，更高效，更有优势。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9、读书一定要记住吗？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用，才是更好的读。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;（一）重复读，多读几遍。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（二）读的过程中思考怎么去用，还要真的去用，且努力做出成绩。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;（三）分享给更多人。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10、要不要写读书笔记？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是写践行清单，你不仅要思考哪些内容是真正自己用得上的，还要去琢磨自己能怎么用，接下来该怎么做。效果自然要好很多。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11、如何才能受欢迎&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你真能做到“简单易懂、非常好用、充满力量”，你的课肯定会更受欢迎。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12、为何别把顾客当爷&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你要记住，你和顾客的关系，最起码是平等的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你是去帮助顾客的，如果他买了你的产品，他的问题将得到解决，他的需求将被满足，甚至是被超预期满足。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13、为什么要成为专家&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你应该找到一个&lt;strong&gt;细分领域&lt;/strong&gt;，通过学习、实践、分享，努力成为这个领域的专家，你将得到更多机会，你的时间也会更值钱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;走专家路线，会让你更容易脱颖而出。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14、保持渴望&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我渴望成大事，而且是持续&lt;strong&gt;渴望&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15、常被碾压&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我有一个习惯，就是坚持去找能在某方面碾压我的人，跟他交流，感受差距，向他学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想要持续高效地成长，你就必须不断走出&lt;strong&gt;舒适区&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16、边学边帮&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想学得更好，发展的更快，我们不仅要不断“想上学”——向厉害的人学习，还要不断“向下帮”——帮助需要我们的人。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17、日拱一卒&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我坚信，就算底子不如人，只要保持每日精进，总有一天我会脱颖而出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你也希望自己能成为一个厉害的人，不妨找一件值得坚持的小事，每天都做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不用管什么结果，因为结果会随时间的积累而显现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18、解决一切问题的关键&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让自己变好，是解决一切问题的关键。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读书笔记摘抄日期是2020年3月29日。今天再读一遍，还是感觉能量满满，很受用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尤其：“向上学、向下帮“是新时代个人学习、精进技术、提升自己的非常重要的方法论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;向上学——开阔视野和眼界，看到自己的“圈层”看不到的东西；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;向下帮——夯实基础、加深认知，帮助别人的同时提升自己。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;推荐：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484469&amp;amp;idx=1&amp;amp;sn=1e2b354e6fd031d041f888ad6b1c0689&amp;amp;chksm=eaa82c1ddddfa50b39883162eba2e493bcde3f3e4e866bfd1a1f8c6b67a6afad9529b483313d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;升级这十点认知，你就是大佬！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484343&amp;amp;idx=1&amp;amp;sn=858e47e8aa649acebb60a800fc199aff&amp;amp;chksm=eaa82b9fdddfa28948f852d83ad861207ddf24d3270c9155224e00850d779305aacb186d5905&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;认知升级——不做开始爱好者！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;204&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.3649122807017544&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9b9Xcyef7ctwTotdPcicKx6E5CJ3iaWUjiciaBdd0ricW2ekneVvuEEpC7Lybu0Jedh0onEWia9RUzZ2g7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt; &lt;span&gt;可能&lt;/span&gt;&lt;span&gt;是中国人数最多的非官方 Elastic 公众号！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on WeChat for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>46d74f60aa7fc423e19aa5847e9408a3</guid>
<title>[推荐] 24 张图带你彻底理解 Java 中的 21 种锁</title>
<link>https://toutiao.io/k/o0417c6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇主要内容如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2268041237113403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoptQAumSKV1pb0Vn1qKI1BOzVVh2CGkVjCRMFtJxeclTzxgU8I67ctQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;582&quot;/&gt;&lt;figcaption&gt;本篇主要内容&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章已收纳到我的Java在线文档、 Github&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的SpringCloud实战项目持续更新中&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;帮你总结好的锁：&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;序号&lt;/th&gt;&lt;th&gt;锁名称&lt;/th&gt;&lt;th&gt;应用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;乐观锁&lt;/td&gt;&lt;td&gt;CAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;悲观锁&lt;/td&gt;&lt;td&gt;synchronized、vector、hashtable&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;自旋锁&lt;/td&gt;&lt;td&gt;CAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;可重入锁&lt;/td&gt;&lt;td&gt;synchronized、Reentrantlock、Lock&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;读写锁&lt;/td&gt;&lt;td&gt;ReentrantReadWriteLock，CopyOnWriteArrayList、CopyOnWriteArraySet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;公平锁&lt;/td&gt;&lt;td&gt;Reentrantlock(true)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;非公平锁&lt;/td&gt;&lt;td&gt;synchronized、reentrantlock(false)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;共享锁&lt;/td&gt;&lt;td&gt;ReentrantReadWriteLock中读锁&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;独占锁&lt;/td&gt;&lt;td&gt;synchronized、vector、hashtable、ReentrantReadWriteLock中写锁&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;重量级锁&lt;/td&gt;&lt;td&gt;synchronized&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;轻量级锁&lt;/td&gt;&lt;td&gt;锁优化技术&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;偏向锁&lt;/td&gt;&lt;td&gt;锁优化技术&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;/td&gt;&lt;td&gt;分段锁&lt;/td&gt;&lt;td&gt;concurrentHashMap&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;互斥锁&lt;/td&gt;&lt;td&gt;synchronized&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;同步锁&lt;/td&gt;&lt;td&gt;synchronized&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;死锁&lt;/td&gt;&lt;td&gt;相互请求对方的资源&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17&lt;/td&gt;&lt;td&gt;锁粗化&lt;/td&gt;&lt;td&gt;锁优化技术&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;18&lt;/td&gt;&lt;td&gt;锁消除&lt;/td&gt;&lt;td&gt;锁优化技术&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、乐观锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4790123456790123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoVR3K1eyjOWvoUs6e4QWIljYsfME0zw8hdR5x1epR5UXL7NrC7SIepg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;405&quot;/&gt;&lt;figcaption&gt;乐观锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;乐观锁&lt;/code&gt;是一种乐观思想&lt;/strong&gt;，假定当前环境是读多写少，遇到并发写的概率比较低，读数据时认为别的线程不会正在进行修改（所以没有上锁）。写数据时，判断当前 与期望值是否相同，如果相同则进行更新（更新期间加锁，保证是原子性的）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的&lt;code&gt;乐观锁&lt;/code&gt;：&lt;/strong&gt; &lt;code&gt;CAS&lt;/code&gt;，比较并替换，比较当前值（主内存中的值），与预期值（当前线程中的值，主内存中值的一份拷贝）是否一样，一样则更新，否则继续进行CAS操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，可以同时进行读操作，读的时候其他线程不能进行写操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、悲观锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5229591836734695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoq99dXSa41gFsDZybz5QmFUicJI0n0mpIV4t55er2DB5EjBY4ouAah6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;392&quot;/&gt;&lt;figcaption&gt;悲观锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;悲观锁&lt;/code&gt;是一种悲观思想&lt;/strong&gt;，即认为写多读少，遇到并发写的可能性高，每次去拿数据的时候都认为其他线程会修改，所以每次读写数据都会认为其他线程会修改，所以每次读写数据时都会上锁。其他线程想要读写这个数据时，会被这个线程block，直到这个线程释放锁然后其他线程获取到锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的&lt;code&gt;悲观锁&lt;/code&gt;：&lt;/strong&gt; &lt;code&gt;synchronized&lt;/code&gt;修饰的方法和方法块、&lt;code&gt;ReentrantLock&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，只能有一个线程进行读操作或者写操作，其他线程的读写操作均不能进行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、自旋锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4736842105263157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoFhPwicBc53VrAJS2hTichkhheowSrXXyWVIrfCArtaCdfZ2RjRrMWiaYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;399&quot;/&gt;&lt;figcaption&gt;mark&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;自旋锁&lt;/code&gt;是一种技术：&lt;/strong&gt; 为了让线程等待，我们只须让线程执行一个忙循环（自旋）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在绝大多数的个人电脑和服务器都是多路（核）处理器系统，如果物理机器有一个以上的处理器或者处理器核心，能让两个或以上的线程同时并行执行，就可以让后面请求锁的那个线程“稍等一会”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;自旋锁&lt;/code&gt;的优点：&lt;/strong&gt; 避免了线程切换的开销。挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给Java虚拟机的并发性能带来了很大的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;自旋锁&lt;/code&gt;的缺点：&lt;/strong&gt; 占用处理器的时间，如果占用的时间很长，会白白消耗处理器资源，而不会做任何有价值的工作，带来性能的浪费。因此自旋等待的时间必须有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;自旋&lt;/code&gt;次数默认值：10次，可以使用参数-XX:PreBlockSpin来自行更改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;自适应&lt;code&gt;自旋&lt;/code&gt;：&lt;/strong&gt; 自适应意味着自旋的时间不再是固定的，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。有了自适应自旋，随着程序运行时间的增长及性能监控信息的不断完善，虚拟机对程序锁的状态预测就会越来越精准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的&lt;code&gt;自旋锁&lt;/code&gt;：&lt;/strong&gt; CAS操作中的比较操作失败后的自旋等待。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、可重入锁（递归锁）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3177842565597668&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNodqYcvaJw2cwYVJicXstAyXkz6OQzqZFX6ZzUgbo2x3iaicANpc6PB0EAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;343&quot;/&gt;&lt;figcaption&gt;可重入锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;可重入锁&lt;/code&gt;是一种技术：&lt;/strong&gt; 任意线程在获取到锁之后能够再次获取该锁而不会被锁所阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;可重入锁&lt;/code&gt;的原理：&lt;/strong&gt; 通过组合自定义同步器来实现锁的获取与释放。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;再次获取锁：识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取。获取锁后，进行计数自增，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;释放锁：释放锁时，进行计数自减。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的&lt;code&gt;可重入锁&lt;/code&gt;：&lt;/strong&gt; ReentrantLock、synchronized修饰的方法或代码段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;可重入锁&lt;/code&gt;的作用：&lt;/strong&gt; 避免死锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面试题1：&lt;/strong&gt; 可重入锁如果加了两把，但是只释放了一把会出现什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：程序卡死，线程不能出来，也就是说我们申请了几把锁，就需要释放几把锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面试题2：&lt;/strong&gt; 如果只加了一把锁，释放两次会出现什么问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答：会报错，java.lang.IllegalMonitorStateException。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、读写锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;读写锁&lt;/code&gt;是一种技术：&lt;/strong&gt; 通过&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;类来实现。为了提高性能， Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的，在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;读锁：&lt;/strong&gt; 允许多个线程获取读锁，同时访问同一个资源。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3205574912891986&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoAOvd88boVFSXic2LibuS1pVYbpWvLLaQVtVib8RGsKSZ77C7FdyIX9z3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;287&quot;/&gt;&lt;figcaption&gt;读锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;写锁：&lt;/strong&gt; 只允许一个线程获取写锁，不允许同时访问同一个资源。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.46875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoTsvFW0plwibGWRzrEVCUmWbmkSMrXILXchQvyuiaicgbJL8WIStdTv9eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;288&quot;/&gt;&lt;figcaption&gt;写锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt;* 创建一个读写锁&lt;br/&gt;* 它是一个读写融为一体的锁，在使用的时候，需要转换&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; ReentrantReadWriteLock rwLock = &lt;span&gt;new&lt;/span&gt; ReentrantReadWriteLock();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取读锁和释放读锁&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 获取读锁&lt;/span&gt;&lt;br/&gt;rwLock.readLock().lock();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 释放读锁&lt;/span&gt;&lt;br/&gt;rwLock.readLock().unlock();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取写锁和释放写锁&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 创建一个写锁&lt;/span&gt;&lt;br/&gt;rwLock.writeLock().lock();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 写锁 释放&lt;/span&gt;&lt;br/&gt;rwLock.writeLock().unlock();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的读写锁：&lt;/strong&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6、公平锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0672853828306264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoJsoLEeAQ3fnga2FSDyDouciaFA3lPqcP6fuugHujSHD5Oxyvo3pZfCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;431&quot;/&gt;&lt;figcaption&gt;公平锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;公平锁&lt;/code&gt;是一种思想：&lt;/strong&gt; 多个线程按照申请锁的顺序来获取锁。在并发环境中，每个线程会先查看此锁维护的等待队列，如果当前等待队列为空，则占有锁，如果等待队列不为空，则加入到等待队列的末尾，按照FIFO的原则从队列中拿到线程，然后占有锁。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7、非公平锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2782874617737003&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoc2hjBbxH2eY14AB40V07xcSjtVSjXIgl7yiarWl46fgoCcXxgveXWOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;327&quot;/&gt;&lt;figcaption&gt;非公平锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;非公平锁&lt;/code&gt;是一种思想：&lt;/strong&gt; 线程尝试获取锁，如果获取不到，则再采用公平锁的方式。多个线程获取锁的顺序，不是按照先到先得的顺序，有可能后申请锁的线程比先申请的线程优先获取锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt; 非公平锁的性能高于公平锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 有可能造成线程饥饿（某个线程很长一段时间获取不到锁）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的非公平锁：&lt;/strong&gt;synchronized是非公平锁，ReentrantLock通过构造函数指定该锁是公平的还是非公平的，默认是非公平的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8、共享锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4842105263157894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoVglYXOHfOWZOZPGHXxThmLzOhiafUYicWTdMCumgBdHW3b3S8kY1Vmgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;285&quot;/&gt;&lt;figcaption&gt;共享锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;共享锁&lt;/code&gt;是一种思想：&lt;/strong&gt; 可以有多个线程获取读锁，以共享的方式持有锁。和乐观锁、读写锁同义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中用到的共享锁：&lt;/strong&gt;  &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9、独占锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4982332155477032&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoCTrtvDl6W7ruc8UsO9Wj69HTRQ88ddYoF7E6p7q5fyicoHF3ese8TWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;283&quot;/&gt;&lt;figcaption&gt;独占锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;独占锁&lt;/code&gt;是一种思想：&lt;/strong&gt; 只能有一个线程获取锁，以独占的方式持有锁。和悲观锁、互斥锁同义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中用到的独占锁：&lt;/strong&gt; synchronized，ReentrantLock&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10、重量级锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3362068965517242&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNo7NaqA98cOtRU4Eendngdu947SrRQrC2BSicJtoYnXeARmmEO5PRulNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;348&quot;/&gt;&lt;figcaption&gt;重量级锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;重量级锁是一种称谓：&lt;/strong&gt; &lt;code&gt;synchronized&lt;/code&gt;是通过对象内部的一个叫做监视器锁（&lt;code&gt;monitor&lt;/code&gt;）来实现的，监视器锁本身依赖底层的操作系统的 &lt;code&gt;Mutex Lock&lt;/code&gt;来实现。操作系统实现线程的切换需要从用户态切换到核心态，成本非常高。这种依赖于操作系统 &lt;code&gt;Mutex Lock&lt;/code&gt;来实现的锁称为重量级锁。为了优化&lt;code&gt;synchonized&lt;/code&gt;，引入了&lt;code&gt;轻量级锁&lt;/code&gt;，&lt;code&gt;偏向锁&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的重量级锁：&lt;/strong&gt; synchronized&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11、轻量级锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5633245382585752&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNor2xzVJho1WJ5xBSy9icKEoO1DiciasBUcAvfdiaC462qclaWWgX5ic5lCPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;758&quot;/&gt;&lt;figcaption&gt;轻量级锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;轻量级锁&lt;/code&gt;是JDK6时加入的一种锁优化机制：&lt;/strong&gt; 轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量。轻量级是相对于使用操作系统互斥量来实现的重量级锁而言的。轻量级锁在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁将不会有效，必须膨胀为重量级锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt; 如果没有竞争，通过CAS操作成功避免了使用互斥量的开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 如果存在竞争，除了互斥量本身的开销外，还额外产生了CAS操作的开销，因此在有竞争的情况下，轻量级锁比传统的重量级锁更慢。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12、偏向锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5325034578146611&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNouDVfkR4g9wmz6GqRYZy3ictCuqUa9v0Dv5A9KW0Sczq4NiakYaTrG1EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;figcaption&gt;偏向锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;偏向锁&lt;/code&gt;是JDK6时加入的一种锁优化机制：&lt;/strong&gt; 在无竞争的情况下把整个同步都消除掉，连CAS操作都不去做了。偏是指偏心，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作（例如加锁、解锁及对Mark Word的更新操作等）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt; 把整个同步都消除掉，连CAS操作都不去做了，优于轻量级锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 如果程序中大多数的锁都总是被多个不同的线程访问，那偏向锁就是多余的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13、分段锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.036096256684492&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoKT7PPibwHtsmHHjXHZsG936jaUGO1coCZbSiaiabMTjdDJdtPZIPeugaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;748&quot;/&gt;&lt;figcaption&gt;分段锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;分段锁&lt;/code&gt;是一种机制：&lt;/strong&gt; 最好的例子来说明分段锁是ConcurrentHashMap。&lt;strong&gt;&lt;span&gt;ConcurrentHashMap原理：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;它内部细分了若干个小的 HashMap，称之为段(Segment)。&lt;/span&gt;&lt;span&gt;默认情况下一个 ConcurrentHashMap 被进一步细分为 16 个段，既就是锁的并发度。&lt;/span&gt;&lt;span&gt;如果需要在 ConcurrentHashMap 添加一项key-value，并不是将整个 HashMap 加锁，而是首先根据 hashcode 得到该key-value应该存放在哪个段中，然后对该段加锁，并完成 put 操作。&lt;/span&gt;&lt;span&gt;在多线程环境中，如果多个线程同时进行put操作，只要被加入的key-value不存放在同一个段中，则线程间可以做到真正的并行。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;线程安全：&lt;/strong&gt;ConcurrentHashMap 是一个 Segment 数组， Segment 通过继承ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14、互斥锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4642857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNowyossO0I7fmXBfO1iabgp2kQzm6jIICS1dEGWz1ZO1K2rfhT07Ixgpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;392&quot;/&gt;&lt;figcaption&gt;互斥锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;互斥锁与悲观锁、独占锁同义，表示某个资源只能被一个线程访问，其他线程不能访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的同步锁：&lt;/strong&gt; synchronized&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15、同步锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.510548523206751&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoLQdSAahGFGgNpbzIcaJOCn3FreyAY0SW30CgyKOtjBlfJabaWicKXibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;237&quot;/&gt;&lt;figcaption&gt;同步锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步锁与互斥锁同义，表示并发执行的多个线程，在同一时间内只允许一个线程访问共享数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Java中的同步锁：&lt;/strong&gt; synchronized&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16、死锁&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9722735674676525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNohOTgI7dwMB8HWBNDzvxSA6Mljbib5MibtzjgmLgryhpuxedia0TcoYHTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;&lt;figcaption&gt;死锁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;死锁是一种现象：&lt;/strong&gt;如线程A持有资源x，线程B持有资源y，线程A等待线程B释放资源y，线程B等待线程A释放资源x，两个线程都不释放自己持有的资源，则两个线程都获取不到对方的资源，就会造成死锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java中的死锁不能自行打破，所以线程死锁后，线程不能进行响应。所以一定要注意程序的并发场景，避免造成死锁。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17、锁粗化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7953296703296703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoL5Hib77aXO1Y3bGN3OviaREx7buMnVGxqMTY4J97p8KtxsL7m2kicdbNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;figcaption&gt;锁粗化&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;锁粗化&lt;/code&gt;是一种优化技术：&lt;/strong&gt; 如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作都是出现在循环体体之中，就算真的没有线程竞争，频繁地进行互斥同步操作将会导致不必要的性能损耗，所以就采取了一种方案：把加锁的范围扩展（粗化）到整个操作序列的外部，这样加锁解锁的频率就会大大降低，从而减少了性能损耗。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18、锁消除&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0845986984815619&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoniatjiaAkKIyicqibFS1BJMOkfpJIvSHaWa4KY3JClfxFUXEUaL97jlv7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;461&quot;/&gt;&lt;figcaption&gt;锁消除&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;锁消除&lt;/code&gt;是一种优化技术：&lt;/strong&gt; 就是把锁干掉。当Java虚拟机运行时发现有些共享数据不会被线程竞争时就可以进行锁消除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何判断共享数据不会被线程竞争？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;利用&lt;code&gt;逃逸分析技术&lt;/code&gt;：分析对象的作用域，如果对象在A方法中定义后，被作为参数传递到B方法中，则称为方法逃逸；如果被其他线程访问，则称为线程逃逸。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在堆上的某个数据不会逃逸出去被其他线程访问到，就可以把它当作栈上数据对待，认为它是线程私有的，同步加锁就不需要了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;19、synchronized&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7395833333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoQxzIwj6icvic4Bw7iaPJibY52eMHfXzzfgTBHlglGsuwz8eADSgZNrPVIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;figcaption&gt;synchronized&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt;是Java中的关键字：用来修饰方法、对象实例。属于独占锁、悲观锁、可重入锁、非公平锁。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1.作用于实例方法时，锁住的是对象的实例(this)；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2.当作用于静态方法时，锁住的是 Class类，相当于类的一个全局锁，
会锁所有调用该方法的线程；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3.synchronized 作用于一个非 NULL的对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个对象都有个 monitor 对象， 加锁就是在竞争 monitor 对象，代码块加锁是在代码块前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;20、Lock和synchronized的区别&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9742120343839542&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNotokWDIYQr8uP7jM9icmy94OfRiccrl3FNWr3UQUicSoOhkXTGjucibicYug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;349&quot;/&gt;&lt;figcaption&gt;自动挡和手动挡的区别&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;Lock&lt;/code&gt;：&lt;/strong&gt; 是Java中的接口，可重入锁、悲观锁、独占锁、互斥锁、同步锁。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.Lock需要手动获取锁和释放锁。就好比自动挡和手动挡的区别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.Lock 是一个接口，而 synchronized 是 Java 中的关键字， synchronized 是内置的语言实现。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4.Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5.通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;6.Lock 可以通过实现读写锁提高多个线程进行读操作的效率。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;synchronized的优势：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;足够清晰简单，只需要基础的同步功能时，用synchronized。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Lock应该确保在finally块中释放锁。如果使用synchronized，JVM确保即使出现异常，锁也能被自动释放。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用Lock时，Java虚拟机很难得知哪些锁对象是由特定线程锁持有的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;21、ReentrantLock 和synchronized的区别&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0541401273885351&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNouUoRKL8cib6KR5uftGGQ2LiauX1OLAicrW7KFCtNZIwyLUkvBEkadyPiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;314&quot;/&gt;&lt;figcaption&gt;Lock、ReentrantLock、shnchronzied&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;是Java中的类 ：&lt;/strong&gt; 继承了Lock类，可重入锁、悲观锁、独占锁、互斥锁、同步锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;划重点&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;相同点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1.主要解决共享变量如何安全访问的问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2.都是可重入锁，也叫做递归锁，同一线程可以多次获得同一个锁，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3.保证了线程安全的两大特性：可见性、原子性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;不同点：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;1.ReentrantLock 就像手动汽车，需要显示的调用lock和unlock方法， synchronized 隐式获得释放锁。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;2.ReentrantLock 可响应中断， synchronized 是不可以响应中断的，ReentrantLock 为处理锁的不可用性提供了更高的灵活性&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;3.ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;4.ReentrantLock 可以实现公平锁、非公平锁，默认非公平锁，synchronized 是非公平锁，且不可更改。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;5.ReentrantLock 通过 Condition 可以绑定多个条件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;彩蛋：&lt;/strong&gt; 讲了那么多锁，都跟阻塞相关，宝宝想听阻塞呀！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我是悟空，一只努力变强的码农！我要变身超级赛亚人啦！&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.471264367816092&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ3aISBxMNeDoWYI3Q5jHTNoL7pTHG9Jlwzmy1wKHRxZU043EEVmWAKNJic4TPwxFBOvmLWRbClJBzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;figcaption&gt;我的资料&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是&lt;code&gt;悟空哥&lt;/code&gt;，&lt;strong&gt;7年项目开发经验，全栈工程师，开发组长，超喜欢&lt;code&gt;图解编程&lt;/code&gt;底层原理&lt;/strong&gt;。正在编写两本PDF，分别是 1、Spring Cloud实战项目（佳必过），2、Java并发必知必会。我还&lt;code&gt;手写了2个小程序&lt;/code&gt;，Java刷题小程序，PMP刷题小程序，点击我的公众号菜单打开！另外有111本架构师资料以及1000道Java面试题，都整理成了PDF，可以关注公众号 悟空聊架构 回复 &lt;code&gt;悟空&lt;/code&gt; 领取优质资料。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;转发-&amp;gt;在看-&amp;gt;点赞-&amp;gt;收藏-&amp;gt;评论！！！是对我最大的支持！&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>