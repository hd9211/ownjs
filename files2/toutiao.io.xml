<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3028527a88064f549b970132bf756aaa</guid>
<title>多线程之 AsyncTask 使用详解和从源码中深入理解 AsyncTask 机制</title>
<link>https://toutiao.io/k/4w0ue69</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;AsyncTask是Android提供的一个助手类，它对Thread和Handler进行了封装，方便我们使用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Android之所以提供AsyncTask这个类，就是为了方便我们在后台线程中执行操作，然后将结果发送给主线程，从而在主线程中进行UI更新等操作。在使用AsyncTask时，我们无需关注Thread和Handler，AsyncTask内部会对其进行管理，这样我们就只需要关注于我们的业务逻辑即可；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、AsyncTask介绍和使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、AsyncTask介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;AsyncTask有四个重要的回调方法，分别是：onPreExecute、doInBackground, onProgressUpdate 和 onPostExecute。这四个方法会在AsyncTask的不同时期进行自动调用，我们只需要实现这几个方法的内部逻辑即可；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这四个方法的一些参数和返回值都是基于泛型的，而且泛型的类型还不一样，所以在AsyncTask的使用中会遇到三种泛型参数：Params, Progress 和 Result；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public abstract &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;Params, &lt;span class=&quot;code-snippet__title&quot;&gt;Progress&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;AsyncTask是一个抽象泛型类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中，三个泛型类型参数的含义如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、AsyncTask的简单使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DownloadTask&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Void&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Boolean&lt;/span&gt;&amp;gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Boolean &lt;span class=&quot;code-snippet__title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Void... params)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; downloadPercent = doDownload();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                publishProgress(downloadPercent);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (downloadPercent &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Integer... values)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.setMessage(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;当前下载进度：&quot;&lt;/span&gt; + values[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Boolean result)&lt;/span&gt; &lt;/span&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        progressDialog.dismiss();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (result) {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Toast.makeText(context, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下载成功&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Toast.makeText(context, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;下载失败&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;模拟了一个下载任务，在doInBackground()方法中去执行具体的下载逻辑，在onProgressUpdate()方法中显示当前的下载进度，在onPostExecute()方法中来提示任务的执行结果。如果想要启动这个任务，只需要简单地调用以下代码即可：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; DownloadTask().execute();  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、使用AsyncTask的注意事项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;①异步任务的实例必须在UI线程中创建，即AsyncTask对象必须在UI线程中创建；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;②execute(Params... params)方法必须在UI线程中调用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③不要手动调用onPreExecute()，doInBackground(Params... params)，onProgressUpdate(Progress... values)，onPostExecute(Result result)这几个方法；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;④不能在doInBackground(Params... params)中更改UI组件的信息；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;⑤一个任务实例只能执行一次，如果执行第二次将会抛出异常；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、AsyncTask的源码分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6595174262734584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhEkjTLwljVKkQdddQrviaHGSKnTC5n8kMjfye1MFM4e8iagZTxQ7TKr2AiatvYaownM7LhsZ7jgBvlMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、AsyncTask的构造函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  MyTask mTask = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MyTask();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WorkerRunnable&amp;lt;Params, Result&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mTaskInvoked.set(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Result result = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result = doInBackground(mParams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Binder.flushPendingCommands();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable tr) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mCancelled.set(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; tr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResult(result); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mFuture = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; FutureTask&amp;lt;Result&amp;gt;(mWorker) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResultIfNotInvoked(get());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    android.util.Log.w(LOG_TAG, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (ExecutionException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;An error occurred while executing doInBackground()&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            e.getCause());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (CancellationException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResultIfNotInvoked(&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;WorkerRunnable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Params&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;code-snippet__title&quot;&gt;Result&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Params[] mParams;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;FutureTask&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Callable&amp;lt;V&amp;gt; callable)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (callable == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; NullPointerException();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.callable = callable;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.state = NEW;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;postResultIfNotInvoked&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Result result)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; wasTaskInvoked = mTaskInvoked.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!wasTaskInvoked) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            postResult(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、execute(Params... params)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  mTask.execute()；&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Params... &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; executeOnExecutor(sDefaultExecutor, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;executeOnExecutor&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Executor exec,Params... &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mStatus != Status.PENDING) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (mStatus) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; RUNNING:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Cannot execute task:&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; the task is already running.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; FINISHED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Cannot execute task:&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; the task has already been executed &quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;(a task can be executed only once)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mStatus = Status.RUNNING;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        onPreExecute();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker.mParams = &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        exec.execute(mFuture);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SerialExecutor&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Executor&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt; mTasks = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ArrayDeque&amp;lt;Runnable&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Runnable mActive;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Runnable r)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mTasks.offer(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Runnable() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        r.run();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        scheduleNext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mActive == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                scheduleNext();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;scheduleNext&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((mActive = mTasks.poll()) != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                THREAD_POOL_EXECUTOR.execute(mActive);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;执行任务前，通过 任务队列 线程池类（SerialExecutor）将任务按顺序放入到队列中；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过同步锁修饰execute（）从而保证AsyncTask中的任务是串行执行的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;之后的线程任务执行是 通过任务线程池类（THREAD_POOL_EXECUTOR） 进行的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、THREAD_POOL_EXECUTOR.execute（）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; CPU_COUNT = Runtime.getRuntime().availableProcessors();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; CORE_POOL_SIZE = Math.max(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, Math.min(CPU_COUNT - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; MAXIMUM_POOL_SIZE = CPU_COUNT * &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; KEEP_ALIVE_SECONDS = &lt;span class=&quot;code-snippet__number&quot;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ThreadFactory sThreadFactory = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadFactory() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; AtomicInteger mCount = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AtomicInteger(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Thread &lt;span class=&quot;code-snippet__title&quot;&gt;newThread&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Runnable r)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Thread(r, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;AsyncTask #&quot;&lt;/span&gt; + mCount.getAndIncrement());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; BlockingQueue&amp;lt;Runnable&amp;gt; sPoolWorkQueue =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Executor THREAD_POOL_EXECUTOR;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ThreadPoolExecutor threadPoolExecutor = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ThreadPoolExecutor(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sPoolWorkQueue, sThreadFactory);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        threadPoolExecutor.allowCoreThreadTimeOut(&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        THREAD_POOL_EXECUTOR = threadPoolExecutor;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、call（）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;AsyncTask&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWorker = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WorkerRunnable&amp;lt;Params, Result&amp;gt;() {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;) throws Exception&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mTaskInvoked.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                Result result = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result = doInBackground(mParams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    Binder.flushPendingCommands();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (Throwable tr) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mCancelled.&lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; tr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    postResult(result); &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Result &lt;span class=&quot;code-snippet__title&quot;&gt;postResult&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Result result&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @SuppressWarnings(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; AsyncTaskResult&amp;lt;Result&amp;gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, result));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        message.sendToTarget();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InternalHandler&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Handler&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;InternalHandler&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            super(Looper.getMainLooper());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;handleMessage&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Message msg&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            AsyncTaskResult&amp;lt;?&amp;gt; result = (AsyncTaskResult&amp;lt;?&amp;gt;) msg.obj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (msg.what) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; MESSAGE_POST_RESULT:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result.mTask.finish(result.mData[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]); -&amp;gt;&amp;gt;分析&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; MESSAGE_POST_PROGRESS:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    result.mTask.onProgressUpdate(result.mData);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;finish&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Result result&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isCancelled()) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                onCancelled(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                onPostExecute(result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mStatus = Status.FINISHED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务线程池类（THREAD_POOL_EXECUTOR）实际上是1个已配置好的可执行并行任务的线程池；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调用THREAD_POOL_EXECUTOR.execute（）实际上是调用线程池的execute()去执行具体耗时任务；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;而该耗时任务则是步骤2中初始化 WorkerRunnable实例对象时复写的call（）内容；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在call（）方法里，先调用 我们复写的doInBackground(mParams)执行耗时操作；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;再调用postResult(result)， 通过 InternalHandler 类 将任务消息传递到主线程；根据消息标识（MESSAGE_POST_RESULT）判断，最终通过finish(）调用我们复写的onPostExecute(result)，从而实现UI更新操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;AsyncTask的源码 分析完毕；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;生命周期：AsyncTask不与任何组件绑定生命周期，所以在Activity/或者Fragment中创建执行AsyncTask时，最好在Activity/Fragment的onDestory()调用 cancel(boolean)；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内存泄漏：如果AsyncTask被声明为Activity的非静态的内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;结果丢失：屏幕旋转或Activity在后台被系统杀掉等情况会导致Activity的重新创建，之前运行的AsyncTask（非静态的内部类）会持有一个之前Activity的引用，这个引用已经无效，这时调用onPostExecute()再去更新界面将不再生效；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2b9eaf61f4efb97baaf19d3691036a71</guid>
<title>区块链 101：绝对初学者的快速入门</title>
<link>https://toutiao.io/k/ubgukqi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content custom&quot;&gt;&lt;h1 id=&quot;区块链101-绝对初学者的快速入门&quot;&gt;&lt;a href=&quot;#区块链101-绝对初学者的快速入门&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 区块链101: 绝对初学者的快速入门&lt;/h1&gt; &lt;p&gt;最近，我听到了很多关于加密、区块链、比特币、 Ethereum、智能合同、 defi (分散金融)、 dapps (分散应用)、 DAOs (分散自治组织)、 NFTs (不可替换令牌)、 web3等等。&lt;/p&gt; &lt;p&gt;我想了解更多关于这些东西的知识，所以我开始四处寻找教程。我发现自己在开始后不久就暂停了每一个，因为他们似乎都认为我对这些意味着什么有一丁点的了解。我感到特别困惑，因为他们称之为初学者指南，但又参考了其他一些术语，好像我已经知道它们的意思。读者，我不知道！&lt;/p&gt; &lt;p&gt;最终，我在免费代码营找到了一个很棒的教程。这个视频教程长达16个小时，所以这可能是一系列的博客文章。&lt;/p&gt; &lt;p&gt;https://www.youtube.com/watch?v=M576WGiDBdQ&lt;/p&gt; &lt;p&gt;以下是我对这些概念的笔记——从一个完全初学者的角度来看。&lt;/p&gt; &lt;p&gt;如果不知道新概念的用途，就很难理解它们，所以让我们从这里开始。&lt;/p&gt; &lt;p&gt;实物货币和我们的支出方式受到诸如国家领导人、银行和其他金融机构等实体的控制。最近我想到的几个案例是关于罗宾汉和只有粉丝的。&lt;/p&gt; &lt;p&gt;在 Reddit 用户的共同努力下，Robinhood 购买了 GameStop 的股票(至少对一些人来说是这样) ，这使得股价飙升。虽然罗宾汉的举动激怒了很多人，但他们也无能为力，因为罗宾汉管理着谁可以在他们的平台上买卖东西。&lt;/p&gt; &lt;p&gt;在来自 Visa 和 Mastercard 等支付服务提供商的压力越来越大之后，OnlyFans 宣布他们将禁止色情内容。由于这些金融机构的权力，该公司感到被迫按照他们的规则行事，或者失去了接受这些形式付款的能力。&lt;/p&gt; &lt;p&gt;一个不受单个实体控制的分散网络可以解决这些问题。通过分散的网络，我们获得了透明度、自由和安全性。&lt;/p&gt; &lt;p&gt;BLOCKCHAIN 区块链
起点是块环链-一种类型的数据库，存储信息在单个块是链接在一起。&lt;/p&gt; &lt;p&gt;一个区块链是共享的许多计算机(称为节点) ，所以没有单一的记录，而是多个副本的记录，使它几乎不可能被黑客。所有这些记录对每个人都是可见的。&lt;/p&gt; &lt;p&gt;与传统数据库不同，块环链中的块是不可变的，这意味着它们不能被改变。因此，当一些东西被写到区块链，它作为一个永久的记录。&lt;/p&gt; &lt;p&gt;当新的数据需要添加到块环链，它必须写在一个新的块，然后链接在一起的最后一个块。这些块是按顺序排列的。&lt;/p&gt; &lt;p&gt;因为区块链是分散的，没有中央管理控制什么可以发生，什么不可以发生。&lt;/p&gt; &lt;p&gt;BITCOIN 比特币
比特币是最早使用区块链的协议之一。它是一种加密货币(我认为它是“数字货币”) ，用于在分散的网络中进行点对点交易来买卖东西。所有这些交易的记录都存储在区块链上。&lt;/p&gt; &lt;p&gt;但是仅仅因为它是数字化的并不意味着它有无限的数量。比特币的数量是有限的，就像实物货币一样。&lt;/p&gt; &lt;p&gt;ETHEREUM 以太属
以太是另一种区块链协议，该协议的加密货币称为以太币(ETH)。
比起比特币，Ethereum 更进一步使用区块链。有了 Ethereum，你不仅仅局限于分散的货币，而且它使人们能够构建分散的应用程序(也称为 dapps)和分散的组织(也称为 DAOs)。&lt;/p&gt; &lt;p&gt;以太网不是唯一利用区块链的先进协议，但它是目前最流行的。&lt;/p&gt; &lt;p&gt;这意味着我们可以用它来编写任何程序! 这些程序被称为智能合同。&lt;/p&gt; &lt;p&gt;SMART CONTRACTS 精明合约
智能合同是描述当事人之间的协议并自行执行协议条款的代码。智能合同在区块链上执行。在 Ethereum 上，智能合同使用 solideity 编程语言编码。&lt;/p&gt; &lt;p&gt;智能合约的伟大之处在于，各方之间不需要信任。条款和条件是编码和自动执行，所以你不必担心对方(如保险公司)不履行他们的协议。&lt;/p&gt; &lt;p&gt;这是以太坊协议相对于比特币协议的主要优势之一。比特币也有智能合约，但是，从设计上来说，它们不是图灵完备的，这意味着它们不能具备以太坊可能具备的广泛功能。比特币更多地被视为一种资产，而以太坊是一种资产，也是构建智能合约的平台。
发生在块环链停留在块环链(这个概念也被称为在链) ，这对需要访问外部数据或计算的智能合同提出了一个问题。块链神谕解决了这个问题。&lt;/p&gt; &lt;p&gt;神谕能够执行计算，并提供信息的封锁链条上的智能合同。但是因为先知是外部的块链，我们需要确保他们提供的数据是分散的，然后再发送给块链。&lt;/p&gt; &lt;p&gt;链接是一个分散的预言网络(最流行的一个) ，将促进外部数据传输到区块链，确保它是干净的。使用外部数据的智能合同在技术上被称为混合智能合同，但这个术语可以与智能合同互换。如果有人明确地说“混合智能合同”，他们是有意指出外部数据(外链)被使用的事实。链接可以用于任何区块链和智能合同平台，而不仅仅是以太网。&lt;/p&gt; &lt;p&gt;Dapps 是分散的应用程序，通常由多个智能合同组成。&lt;/p&gt; &lt;p&gt;好吧，这就是我现在所知道的。请继续关注，我将获得更多信息，与此同时，加入关于这篇文章的讨论:&lt;/p&gt; &lt;h3 id=&quot;author&quot;&gt;&lt;a href=&quot;#author&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; author&lt;/h3&gt; &lt;p&gt;石头 磊哥 seven 随便叫&lt;/p&gt; &lt;h3 id=&quot;company&quot;&gt;&lt;a href=&quot;#company&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; company&lt;/h3&gt; &lt;p&gt;HSBC
大家好，我已经加入了HSBC&lt;/p&gt; &lt;h3 id=&quot;roles&quot;&gt;&lt;a href=&quot;#roles&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; roles&lt;/h3&gt; &lt;p&gt;QA（营生） dev（front-end dev 兴趣爱好）&lt;/p&gt; &lt;h3 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 联系方式&lt;/h3&gt; &lt;p&gt;如果想转载或者高薪挖我 请直接联系我 哈哈&lt;/p&gt; &lt;h4 id=&quot;wechat&quot;&gt;&lt;a href=&quot;#wechat&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; wechat:&lt;/h4&gt; &lt;p&gt;qileiwangnan&lt;/p&gt; &lt;h4 id=&quot;email&quot;&gt;&lt;a href=&quot;#email&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; email:&lt;/h4&gt; &lt;p&gt;qileilove@gmail.com&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2140bfe9864280f498b5e1dd5ff212c2</guid>
<title>语言可解释性工具 (LIT)：NLP 模型的交互式探索和分析</title>
<link>https://toutiao.io/k/g1d1ws2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;随着自然语言处理 (NLP) 模型变得更加强大并部署在更真实的环境中，了解它们的行为变得越来越重要。虽然建模的进步为许多 NLP 任务带来了前所未有的性能，但许多研究问题仍然不仅涉及这些模型在域转移和对抗性设置下的行为，还涉及它们根据社会偏见或浅层启发式行为的倾向。&lt;/p&gt;&lt;p&gt;对于任何新模型，人们可能想知道模型在哪些情况下表现不佳，为什么模型会做出特定预测，或者模型在不同输入（例如文本样式或代词性别的变化）下的行为是否一致。但是，尽管最近在模型理解和评估方面的工作呈爆炸式增长，但还没有分析的“灵丹妙药”。从业者必须经常试验多种技术，查看输入的局部解释、汇总指标和反事实变化，以更好地理解模型行为，其中每一种技术通常都需要自己的软件包或定制工具。我们之前发布的假设分析工具旨在通过启用分类和回归模型的黑盒探测来应对这一挑战，从而使研究人员能够更轻松地调试性能并通过交互和可视化分析机器学习模型的公平性。但是仍然需要一个工具包来解决 NLP 模型特有的挑战。&lt;/p&gt;&lt;p&gt;考虑到这些挑战，我们构建并开源了语言可解释性工具(LIT)，这是一个用于 NLP 模型理解的交互式平台。LIT 建立在从What-If 工具中汲取的经验教训之上，具有极大的扩展能力，涵盖了广泛的 NLP 任务，包括序列生成、跨度标记、分类和回归，以及可定制和可扩展的可视化和模型分析。&lt;/p&gt;&lt;p&gt;LIT 支持局部解释，包括显着图、注意力和模型预测的丰富可视化，以及包括度量、嵌入空间和灵活切片的聚合分析。它允许用户轻松地在可视化之间跳转以测试本地假设并通过数据集验证它们。LIT 为反事实生成提供支持，其中可以动态添加新数据点，并立即可视化它们对模型的影响。并排比较允许同时可视化两个模型或两个单独的数据点。&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000321&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1icg4EZzdKWiczQgReZgQw90cgMcn8eicZf3nOzMj3Ahg4SNVx3cxRC2h4g/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;可定制性&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为了更好地满足我们希望使用 LIT 的具有不同兴趣和优先级的广泛用户的需求，我们从一开始就构建了易于定制和扩展的工具。在特定的 NLP 模型和数据集上使用 LIT 只需要编写一小段 Python 代码。自定义组件，例如特定于任务的指标计算或反事实生成器，可以用 Python 编写并通过我们提供的 API 添加到 LIT 实例。此外，前端本身可以自定义，新模块直接集成到 UI 中。&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;演示&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为了说明 LIT 的一些功能，我们使用预先训练的模型创建了一些演示。完整列表可在 LIT网站上找到，我们在此处描述其中的两个：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-fileid=&quot;100000322&quot; data-ratio=&quot;0.19140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1iczgBHVs169PBvgkggOxnVSjib7j8Au9qlOQsTDIJB1Tic9Q3vEaY3dFPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000320&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEo1ZibYd7tvWcbQHk9TCI1icWaiaJZVe6ibKn4oVVHLg4u0QEzHnhcfXgsoiasju15b73DclYf4kQXyJg/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;em&gt;LIT 的实践和未来工作&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;虽然 LIT 是一种新工具，但我们已经看到了它可以为模型理解提供的价值。它的可视化可用于查找模型行为中的模式，例如嵌入空间中的外围集群，或对预测具有极大重要性的单词。LIT 中的探索可以测试模型中的潜在偏差，正如我们在 LIT 探索共同指代模型中的性别偏差的案例研究中所证明的那样。这种类型的分析可以为改进模型性能的后续步骤提供信息，例如应用 MinDiff 来减轻系统偏差。它还可以用作为任何 NLP 模型创建交互式演示的简单快捷方式。&lt;/p&gt;&lt;p&gt;通过我们提供的演示或通过为您自己的模型和数据集启动 LIT 服务器来查看该工具。LIT 的工作才刚刚开始，并且有许多新功能和改进计划，包括从前沿 ML 和 NLP 研究中添加新的可解释性技术。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb050dee009e66b5d9295065af076d5f</guid>
<title>Go 切片导致内存泄露，被坑两次了</title>
<link>https://toutiao.io/k/5wgsihi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间在我的 Go 读者群里，有小伙伴们在纠结切片（slice）的问题，我写了这篇《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&amp;amp;mid=2247491675&amp;amp;idx=1&amp;amp;sn=5a887e874999251201c90744434d2471&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go 切片这道题，吵了一个下午！&lt;/a&gt;》，引起了一拨各种讨论，还是比较欣慰的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不，有小伙伴给我提出了新的题材：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31152204836415365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIVSOeDS7aC6Oz4B8EYc0DJoxq7dUJ42ibV06IoOOLtCURxjrmGN8Yzng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1406&quot;/&gt;&lt;figcaption&gt;来自读者微信提问&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提出的是 Go 中很容易踩坑的切片内存泄露问题。作为宠粉的煎鱼肯定不会放过，争取让大家都避开这个 “坑”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章，就由煎鱼带大家来了解这个问题：Go 切片可能可以怎么泄露法？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;切片泄露的可能&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在业务代码的编写上，我们经常会接受来自外部的接口数据，再把他插入到对应的数据结构中去，再进行下一步的业务聚合、裁剪、封装、处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像在 PHP 语言，常常会放到数组（array）中。在 Go 语言，会放到切片（slice）中。因此在 Go 的切片处理逻辑中，常常会涉及到如下类似的动作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a []&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(b []&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; []&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; a = b[:&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仔细想想，&lt;strong&gt;这段程序有没有问题&lt;/strong&gt;，是否存在内存泄露的风险？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是：有的。有明确的切片内存泄露的可能性和风险。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;切片底层结构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些小伙伴会疑惑，怎么就有问题了，是哪里有问题？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就得复习一下切片的底层基本数据结构了，切片在运行时的表现是 SliceHeader 结构体，定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; SliceHeader &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Data &lt;span&gt;uintptr&lt;/span&gt;&lt;br/&gt; Len  &lt;span&gt;int&lt;/span&gt;&lt;br/&gt; Cap  &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Data：指向具体的底层数组。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Len：代表切片的长度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cap：代表切片的容量。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要点是：切片真正存储数据的地方，是一个数组。切片的 Data 属性中&lt;strong&gt;存储的是指向所引用的数组指针地址&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;背后的原因&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上述案例中，我们有一个包全局变量 a，共有 2 个切片 a 和 b，截取了 b 的一部分赋值给了 a，两者存在着关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从程序的直面来看，截取了 b 的一部分赋值给了 a，结构似乎是如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApINGu2Ocq59mT1Doae58v8G4sicehLIkLOkrRW66dX8ohncgcoLhO42Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但我们进一步打开程序底层来看，他应该是如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIJu5OuHfsUzJ86Y5hh68ibNgFfLUMNU8XZgLXanOHIP0HMibmpviasZGZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片 a 和 b 都共享着同一个底层数组（共享内存块），sliceB 包含全部所引用的字符。sliceA 只包含了 [:2]，也就是 0 和 1 两个索引位的字符。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那他们泄露在哪里了？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;泄露的点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泄露的点，就在于虽然切片 b 已经在函数内结束了他的使命了，不再使用了。但切片 a 还在使用，切片 a 和 切片 b 引用的是同一块底层数组（共享内存块）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键点：&lt;strong&gt;切片 a 引用了底层数组中的一段&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5061728395061729&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KVl0giak5ib4jj1a9E6xtI8gtoShDuDApIAIvjs7ibqib9ewGNCyZUhNbiaRaicYXIchIBfBApeA6ibF9qcYKasJv24fQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然切片 a 只有底层数组中 0 和 1 两个索引位正在被使用，其余未使用的底层数组空间毫无作用。但由于正在被引用，他们也不会被 GC，因此造成了泄露。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解决办法&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决的办法，就是利用切片的特性。当切片的容量空间不足时，会&lt;strong&gt;重新申请一个新的底层数组来存储，让两者彻底分手&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a []&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; c []&lt;span&gt;int&lt;/span&gt;    &lt;span&gt;// 第三者&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;(b []&lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; []&lt;span&gt;int&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; a = b[:&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;// 新的切片 append 导致切片扩容&lt;/span&gt;&lt;br/&gt; c = &lt;span&gt;append&lt;/span&gt;(c, b[:&lt;span&gt;2&lt;/span&gt;]...)&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;a: %p\nc: %p\nb: %p\n&quot;&lt;/span&gt;, &amp;amp;a[&lt;span&gt;0&lt;/span&gt;], &amp;amp;c[&lt;span&gt;0&lt;/span&gt;], &amp;amp;b[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;  &lt;br/&gt; &lt;span&gt;return&lt;/span&gt; a&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a: 0xc000102060&lt;br/&gt;c: 0xc000124010&lt;br/&gt;b: 0xc000102060&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段程序，新增了一个变量 c，他容量为 0。此时将期望的数据，追加过去。自然而然他就会遇到容量空间不足的情况，也就能实现申请新底层数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再将原本的切片置为 nil，就能成功实现两者分手的目标了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在今天这篇文章中，我们介绍了 Go 切片的一种常见的内存泄露方式。虽然我们在日常使用的时候可能没关注到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要原因还是由于切片的大多数使用场景，体量都比较小。又或是不知不觉就自己扩容了，就变成暂时性泄露了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这依然是存在风险的，在编写 Go 代码时需要谨慎。毕竟这可是 &lt;strong&gt;Go 语言官方自己都踩过坑的 “坑”&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;An interesting way to leak memory with Go slices&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;internal/poll: avoid memory leak in Writev&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;slice 类型内存泄露的逻辑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;golang slice内存泄露回收&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6e68048ae38760c9b78367a5a95f08d9</guid>
<title>像用户一样测试：打破知识诅咒</title>
<link>https://toutiao.io/k/voiq26i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&gt;&amp;#13;
&lt;h4&gt;引子&lt;/h4&gt;
&lt;p&gt;先来玩个视觉小游戏，请在下图中找到隐藏的五角星。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/1-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/1-test-like-user-1-768x765.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没找到的朋友，答案在文末。请看完答案再回到这里。&lt;/p&gt;
&lt;p&gt;现在我们回看上图，是不是很容易就找到五角星，甚至第一眼就看到它了？&lt;/p&gt;
&lt;h3&gt;知识诅咒&lt;/h3&gt;
&lt;h4&gt;“有些事知道了，就再也回不去了。”&lt;/h4&gt;
&lt;p&gt;知识诅咒，指的就是一旦我们自己知道某样东西，就会发现我们很难想象不知道它的时候会是什么样子。 我们的知识“诅咒”了我们。 对于我们自己来说，同别人分享我们的知识变得很困难，因为我们不易重造听众的心境。&lt;/p&gt;
&lt;p&gt;那这件事和测试有什么关系呢？我们看一个典型的测试用例是什么样的：&lt;br/&gt;
&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/2-test-like-user-1-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/2-test-like-user-1-1-768x409.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照用例执行，假设执行结果符合预期，我们就可以验证系统的注册功能确实是正常的，新用户可以注册并登录。但问题在于，真实的用户并不是这样使用软件的。&lt;/p&gt;
&lt;p&gt;下面让我们来看看真实用户是怎么想的（斜体字）、怎么做的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开网站，找到注册按钮，点击进入注册页，如①，&lt;em&gt;好像没有必填哎&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;输入昵称，提示昵称重复，如②，&lt;em&gt;样式真不讲究，差评~&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;点击注册，提示手机号不正确，如③，&lt;em&gt;手机号必填？随便输一个&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;输入手机号，没填验证码，点注册，如④，&lt;em&gt;密码忘填了&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;输入密码，点注册，如⑤，验证码也要填啊，&lt;em&gt;早不说，哎麻烦死了，算了不注册了！&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&quot;attachment_14845&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/3-test-like-user-1.png&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-14845&quot; src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/3-test-like-user-1-768x422.png&quot; alt=&quot;&quot; class=&quot;size-medium_large wp-image-14845&quot; srcset=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/3-test-like-user-1-768x422.png 768w, https://insights.thoughtworks.cn/wp-content/uploads/2021/10/3-test-like-user-1-300x165.png 300w, https://insights.thoughtworks.cn/wp-content/uploads/2021/10/3-test-like-user-1.png 936w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/a&gt;&lt;p id=&quot;caption-attachment-14845&quot; class=&quot;wp-caption-text&quot;&gt;注：图片来自真实的互联网软件产品，截图日期2020年11月25日&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;我们来回顾一下上面这个过程：用户每一步都是按照软件提示做的，但并没有得到想要的结果，在注册过程中负面情绪不断累积，直到最后一根稻草压上来，最终放弃了使用。但用户的需求还在，他会找到注册功能好用的竞争对手的软件，边开心的使用，边在心里暗暗下决心：再也不用那个破网站了。&lt;/p&gt;
&lt;p&gt;当测试执行完用例，确认注册功能没问题的时候，用户已经在注册完成前就跑了。究其根本，测试人员在测试时使用的还是“测试心智”，对被测软件的熟悉和了解是内化在心里的，测试时主要发挥的是测试领域的专业技能；而用户在使用软件时，是不会带有“测试心智”的，不会预知软件的表现，注册的过程对新用户来讲是全新的体验。测试人员和真实用户在使用软件上的差异是很明显的，这也是为什么尽管经过大量测试，用户仍然会吐槽软件难用的主要原因。&lt;/p&gt;
&lt;p&gt;看看在小猪佩奇里怎么解决这个问题。猪爸爸是跳泥坑届的世界冠军，他对佩奇说：“要想跳好泥坑，秘诀是与泥坑融为一体。要想获得跳泥坑冠军，就要学会像泥坑一样思考！” 所以在准备阶段，猪爸爸并没有一上来就疯狂的练习跳泥坑，而是花大量的时间在思考，到底怎样才能和泥坑融为一体。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/4-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/4-test-like-user-1-768x432.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;测试人员想像用户一样测试，要学会像用户一样思考，打破知识的诅咒，真正带着初心的使用软件。这并不容易，但也是有迹可循的。这也是目前测试领域关注度相对较少的、但却是打造完美软件不可或缺的重要一环。&lt;/p&gt;
&lt;h3&gt;破局&lt;/h3&gt;
&lt;h4&gt;“愿你出走半生，归来仍是少年。”&lt;/h4&gt;
&lt;p&gt;怎样像用户一样测试，这道题考的到底是什么？考的是测试人员同理用户的能力，能否做到还原真实用户的使用场景，还原用户在使用产品时的真实心理。说起来有点玄，但其实思路很简单。第一步就是先了解用户，只有了解用户的所思所想，才能知道用户会怎样使用软件；第二步是弥补测试人员和用户之间的断层，这有两层含义，第一层是让用户跟测试对齐，指导用户更好的使用软件；第二层面是让测试跟用户对齐，指导测试更有同理心。下面我们展开详细的讨论。&lt;/p&gt;
&lt;h4&gt;第一步：了解用户&lt;/h4&gt;
&lt;h5&gt;明确对象&lt;/h5&gt;
&lt;p&gt;首先澄清一下测试的目标，测试的终极目标并不是提供零缺陷的软件，而是提供好用的软件，只有软件好用，用户用脚投票时才会投给它。好用是个主观评价，谁来评价很重要。测试人员需要明确软件真实的用户到底是怎样的群体，他们评价软件好用与否的标准是什么。&lt;/p&gt;
&lt;p&gt;明显的，软件好用与否取决于很多因素，产品是面向C端、B端还是G端？产品形态是小程序、App还是平台网站？产品的用户和客户评价标准是否一致？这都影响用户和干系人对软件的最终评价。因此，充分的需求背景分析和用户调研不仅仅是产品经理需要考虑的事情，也应该是测试人员关心的范围。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/5-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/5-test-like-user-1-768x450.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;换位思考&lt;/h5&gt;
&lt;p&gt;在明确对象之后，我们大概率能知道用户群体是谁，他的典型画像是什么样的，这也是我们进行换位思考的基础。还是以登录为例，假设我们目标用户的特征是：高知宝妈、价格不敏感、时间宝贵、愿意为知识和体验付费。这时采用移形换影大法，我就是这位宝妈，我希望注册过程可以尽量简洁，让我能花较少的时间完成，同时也尽量优雅，从界面到操作都浑然天成，注册的过程本身就是一种享受。&lt;/p&gt;
&lt;p&gt;有了这个视角，易得出优秀软件的一个通用标准，即：让用户在使用软件时，尽可能感受不到软件的存在，好像世界本应如此，自然而顺畅。具体可参考用户体验三大要素及相关资料：别让我等、别让我想、别让我烦。&lt;/p&gt;
&lt;h5&gt;频繁沟通&lt;/h5&gt;
&lt;p&gt;频繁沟通有助于更好的了解用户，建立用户同理心。当我们通过倾听用户获得更多的细节时，就更容易了解用户的所思所想，了解尴尬的现状和切肤的痛点，从而更容易做出满足用户真正需求的决策。&lt;/p&gt;
&lt;p&gt;建立一个负担不重的沟通机制是至关重要的，让用户在想沟通时能够随时找到沟通的渠道。另一个重要的点是，要真正的倾听，既不能盲从也不能盲不从，太南了。怎样避免鸡同鸭讲，真正听出用户的弦外之音，我也还在探索。但相信建立意识是艰难的第一步，抬腿迈步ing~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/6-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/6-test-like-user-1.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;第二步：弥补断层&lt;/h4&gt;
&lt;h5&gt;搭梯子&lt;/h5&gt;
&lt;p&gt;让用户跟测试对齐，可以通过简明的文字或图形指引，如下图：我们很容易看出，这个流程共7步，当前在第3步。在测试时，需要检验软件功能针对长流程的指引是否完备且准确。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/7-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/7-test-like-user-1-768x148.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搭梯子的另一种方式是，建立基于业务的用户文档。言外之意是，写出用户能看懂的、贴近用户使用场景的使用手册。哪怕我的功能是提供一个接口，我也不应该仅仅贴出接口文档，而更应该补充该接口的使用场景：在什么情况下使用接口，应该以什么频率调用，最多支持多大的并发量，各字段枚举值所代表的具体业务含义是什么，不同的用户调用接口时的注意事项……&lt;/p&gt;
&lt;h5&gt;建场景&lt;/h5&gt;
&lt;p&gt;让测试跟用户对齐，需要给测试补充真实用户的使用场景，可以采用场景法来分析用户的使用场景。还是以注册为例，真实用的使用场景可能是这样：注册→验证账号→登录账号→长时间未操作后重新登录。考虑到这样的场景，我们就不能要求用户在登录以后必须注销，或者下次登录的操作依赖于用户注销的状态。我在测试工作中就遇到过这样的缺陷：用户登录后长时间未操作，但也未注销，再次登录提示：“登录失败，用户已登录。”&lt;/p&gt;
&lt;p&gt;还是上面的场景，在邮箱验证账号时，可能由于网络问题，没有收到验证成功的返回，而服务器端其实已经验证通过了，那么用户就会重复发送验证请求，服务器端处理后发现该链接已被验证过，于是返回：“验证失败，验证链接已失效。” 按照程序逻辑讲是没问题的，但以前端用户视角来看，就是验证链接不能用于验证，妥妥的功能缺陷。比较理想的做法可能是，服务器端如能判断两次验证来自同一设备，直接返回 “已验证通过，正在跳转登录页……”。&lt;/p&gt;
&lt;p&gt;还原真实用户的使用场景，有助于测试人员设计出更符合用户特征的测试用例。以后在写测试用例的时候，还可以加上一个用例分类：用户场景测试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/8-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/8-test-like-user-1-768x622.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;拓展阅读：&lt;a href=&quot;https://www.cnblogs.com/liangshi/archive/2011/05/09/2041028.html&quot; title=&quot;《肥皂剧测试》&quot;&gt;《肥皂剧测试》&lt;/a&gt;，作者史亮&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;勤观察&lt;/h5&gt;
&lt;p&gt;测试人员应培养敏锐的观察力，在日常时时观察用户的特质，以及用户在使用软件时的微小反馈。不愁没有用户，我们可以随机从同事中抽取非研发部的伙伴来帮忙快速验证，或者在需求验收时收集并记录大家的反馈。任何一个细节都可能成就一款产品，也可能失去一部分用户。以认真细致著称的测试人员，如能投入更多精力在贴近用户的测试中，这将为软件质量的评价带来非常积极的影响。&lt;/p&gt;
&lt;h3&gt;结语：“从前一叶障目，现在我看见。”&lt;/h3&gt;
&lt;p&gt;附：怎么样，找到五角星了吗？它在这里。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/9-test-like-user-1.png&quot;&gt;&lt;img src=&quot;https://insights.thoughtworks.cn/wp-content/uploads/2021/10/9-test-like-user-1-768x768.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&amp;#13;
&lt;/div&gt;&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>