<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>2b2e79f82840def05f6cf5466b4f2abd</guid>
<title>读者诉苦：Redis 宕机，数据丢了，老板要辞退我</title>
<link>https://toutiao.io/k/xa7jahy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近跟一位读者聊天，小哥非常郁闷，公司的Redis宕机了，线上业务受到了影响，老板非常愤怒，小哥担心会不会被辞退！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也很好奇，问小哥Redis主节点挂了，还有备机啊。怎么会影响到业务呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小哥说，他们的系统架构只部署一个Redis单实例。节点挂了，数据也丢了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbh7ZuYw10eCACPJ8Ikuibe3R1vCQgJXZ9aITaUDpdE4shXKjjb8ZMpXfw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好吧，既然提到了备份，那今天，我们就来聊下 Redis的主从同步&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;首先，什么是主从？&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主从也称主从集群，部署了多个Redis实例，如下图所示：&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8604651162790697&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhRtbSrB1Yj0LlJ0LhbVTA9YjHicicEqiatCUy2OcTqGVq1hrEd2eool9aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;688&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，每个实例又有自己的专属职责&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主库：负责接收读操作、写操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库：定期同步主库的数据，对外提供读操作&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;好奇的宝宝可能要问了，为什么从库不能写？&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到数据合并的复杂性，假如一个key，多次更新，每次操作在不同的实例上执行，为了保证数据的全局一致性，势必要加全局锁，保证在集群范围上串行化操作且在最新的数据基础上更新，这个成本还是很大的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了降低系统复杂度，节约成本。主从同步架构方案一般都是在主库上写，在从库上读。分工明确，职责单一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有同学会提到 Redis Cluster 模式，这个是另一种设计方案。采用水平分割方式，通过CRC16（key）算法，将数据拆分到若干个实例中，每个实例只对自己负责的槽位的数据读、写，从而分摊集群压力。这个属于另一种玩法，本期就不深入展开了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为了保证数据不丢失，Redis提供两种数据同步方式&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、RDB，全量数据同步&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、AOF，增量数据同步，回放日志&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两者有什么区别？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么时候采用 RDB ? 什么时候采用 AOF ?&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们逐步分析展开&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;建立主从关系&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，启动两个redis 实例，IP地址分别是 &lt;code&gt;192.168.0.1&lt;/code&gt; 和 &lt;code&gt;192.168.0.2&lt;/code&gt; ，开始时，他们之间没有任何关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们通过终端命令，登录 &lt;code&gt;192.168.0.2&lt;/code&gt; 机器，执行命令&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;replicaof 192.168.0.1 6379&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时 &lt;code&gt;192.168.0.2&lt;/code&gt; 实例就成了  &lt;code&gt;192.168.0.1&lt;/code&gt;  的从库。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.5804878048780489&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhSDic3NicyUKICzzlLyWx63mgvMTaGQ9rmwDLsEy0wNZh6ic6R4SRQOPDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;410&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当主从实例建立好关联后，接下来，就开始进入数据同步环节&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主从同步&lt;/strong&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7664783427495292&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhTfxrVSf2vXcoate8uLqDQ9xJwoEDM4645PNL8GxRzCllXNm4d8MSzA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1062&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;strong&gt;主从库数据同步分为三步：&lt;/strong&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1、第一步&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从库（192.1768.0.2）向主库（192.168.0.1）发送 psync 命令，带了两个参数（主库的runID和同步进度offset）。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次建立连接时，从库并不知道主库的runID，所以会设置为 ？。offset = -1，表示第一次复制。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;说明：每个 Redis 实例初始启动时，会自动生成一个随机ID，用来标识当前实例。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主库接收到psync请求后，会响应 FULLRESYNC ，带有两个参数（主库的runID和同步进度offset）&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;说明：FULLRESYNC 表示采用全量复制&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2、第二步&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主库fork子进程，执行 &lt;code&gt;bgsave&lt;/code&gt; 命令，生成 RDB 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主库将 RDB 文件发给从库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库接到响应后，会先清空当前数据库，然后加载 RDB 文件&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;说明：主库在生成RDB文件时，主线程是阻塞的，对外不提供服务。一旦RDB文件生成，在数据同步过程中，不受影响，主库可以对外服务。后续的写命令数据会存到 replication buffer&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3、第三步&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主库将增量写命令发送给从库，从库放映式执行这些命令，从而实现了主从同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，主从的核心逻辑基本讲完了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但生产环境，通常是一主多从，每个从库初始同步时，都要主库生成RDB文件，显然开销很大。有什么解决方案？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;一主多从，主库减压&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当从节点存在多个时，主库的压力显著增加，具体体现在两个方面：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、当从库同步主库时，要fork子进程，有多少个从节点，就要fork多少个子进程，每个子进程都要生成RDB。导致主库系统压力过大&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、生成的RDB要同步给从库，占用网络带宽&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于上面的困境，演化出新的模式，“主--从--从”模式，具体玩法如下图：&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8278829604130808&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhCgbznqzqtP1C9WLbC1tOcTf4BKn0LIxKBrD5cYyhUicE5CuxQQTJIJw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1162&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现有虽然有四个从库，但直接跟主库关联同步数据的只有 &lt;code&gt;192.168.0.2&lt;/code&gt; 和 &lt;code&gt;192.168.0.3&lt;/code&gt; 两个实例，大大减轻了主库的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何事情都不是一成不变的，网络传输就存在很大的风险，网络闪断了怎么办？对主从同步有什么影响？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;网络闪断对主从同步的影响&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们知道主从实例间同步数据主要有两种方式：&lt;code&gt;全量同步&lt;/code&gt; 和 &lt;code&gt;增量同步&lt;/code&gt; 。 全量同步就是同步RDB文件，那增量同步是如何实现的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里要引入一个缓冲区，&lt;code&gt;repl_backlog_buffer&lt;/code&gt;，它是一个环形设计，增量命令都是先存入这个缓冲区的。主库有生产位移，称之为&lt;code&gt;master_repl_offset&lt;/code&gt; 。从库有拉取位移，称之为&lt;code&gt;slave_repl_offset&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.56796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhKRjXG3VTRxgeZTAzHOBwdHiakxLRsruaUoXkmSggUPcN9fv3HHrNEqA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正常情况下，&lt;code&gt;master_repl_offset&lt;/code&gt; 和 &lt;code&gt;slave_repl_offset&lt;/code&gt; 大小是接近的，也就是说主从库两者间的数据近乎同步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次同步数据时，从库向主库发送 psync 命令，把自己的 &lt;code&gt;slave_repl_offset&lt;/code&gt; 发给主库，主库基于此偏移位置，向从库发送增量数据。这个很容易理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是就万无一失了呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于采用了环形结构，如果主库的生产速度比从库的拉取速度快很多时，就会出现套圈现象。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;为什么采用环形？主要为了让空间循环使用，像市场的行车记录仪、监控设备等，大多都是采用循环覆盖式存储。如果空间满了，将之前最老的数据覆盖掉。虽然可能丢失了部分数据，但是性价比高。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到上面的问题，如果被套圈了怎么办？&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.58828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhCtywZ8LVEcp11eMcXlnObattJriba7skL6s6MibRqVJyiap32rv96wdkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图所示，从库 psync 命令，请求的offset 是 4，但是主节点已经生产到了 15 ，将之前的 1、2、3、4、5 全部覆盖掉了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这下傻眼了，需要同步的数据被覆盖了，惹大麻烦了....&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9Yshwd3OukgnlK7bFxjfRyqeUbhRANcZaeKlcOLaof69Taq5IDX2AnnfrjibDT3PtN6BhQEibCyUdzQm79Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;有两个解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、调大 &lt;code&gt;repl_backlog_buffer&lt;/code&gt; 缓冲区大小，该值是由 &lt;code&gt;repl_backlog_size&lt;/code&gt;参数控制&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;缓冲空间大小 = 主库写入速度 * 操作大小 - 从库拉取速度 * 操作大小&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我们能主观控制的。比如担心大促带来的流量高峰，可以将这个值调大2倍、3倍、4倍，大家可以根据自己的业务情况自由设置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、还有一种方式是Redis 自身提供的解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时会触发&lt;code&gt;全量复制&lt;/code&gt;，跟第一次建立主从关系同步数据一样。通过全量方式，一次性弥补主从间的数据大缺口。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主节&lt;/strong&gt;&lt;strong&gt;点挂了怎么办&lt;/strong&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果只是传统意义上的主从模式，主节点挂了，通常要手工完成切换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效率不言而喻了，尤其是线上生产系统，根本没法接受这种方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，要引入哨兵机制了，哨兵机制可以实现主从库的自动切换，有效解决了故障转移。整个过程分为三个阶段：监控、选主、通知。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、监控。哨兵进程会周期给所有的主库、从库发送 PING 命令，检测机器是否处于服务状态。如果没有在设置时间内收到回复，则判定为下线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;当然，网络抖动，也会存在误判可能，如何避免？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入哨兵集群，多个哨兵实例一起判断，降低误判率。判断标准就是，假如 n 个哨兵实例，至少有 n/2+1 个判定一致，才可以定论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、选主。主要是看各个节点的打分情况，打分规则分为 &lt;code&gt;从库优先级&lt;/code&gt;、&lt;code&gt;从库复制进度&lt;/code&gt;、&lt;code&gt;从库ID号&lt;/code&gt;。只要有一轮，某个从库得分最高，则选举它为主库。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从库优先级，主要是考虑到不同的机器可能配置不一样，配置高的机器，优先级高一些，通过&lt;code&gt;slave-priority&lt;/code&gt; 来配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库复制进度，主要是看&lt;code&gt;slave_repl_offset&lt;/code&gt; 的值大小，值越大表示已经同步的数据越多，得分越高。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从库ID号，每个Redis 实例启动时，都会生成一个 ID，在优先级和复制进度相同的条件下，ID号最小的从库分数最高，会被选为新主库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、通知。把选举后的新主库发送给所有节点，让所有的从库执行 &lt;code&gt;replicaof&lt;/code&gt; 命令，和master建立主从关系、数据同步复制。另外，也会把最新的主库信息同步给客户端。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于我：Tom哥，前阿里P7技术专家，出过专利，多年大厂实战经验。欢迎关注，我会持续输出更多经典原创文章，为你大厂助力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎小伙伴找Tom哥唠嗑聊天， 技术交流，围观朋友圈，人生&lt;span&gt;打怪&lt;/span&gt;不再寂寞。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100003916&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.069090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwcdJhGaQRdAk0VWLIAIU548z3Izf6mwqwwUX9X86hvNHZq158VYMEaxegjfRg8ic02O0HeWD4xIsiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247487139&amp;amp;idx=1&amp;amp;sn=4ae53bf8e20aab324f58e85deedff42a&amp;amp;chksm=ceb9f208f9ce7b1e5d2882601ff2890ae9bef5584b6730c2b0b30c527340b4529b85cc636954&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;团队管理那点破事！OKR绩效、核心人才、面试、技术分享、研发流程....&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247486515&amp;amp;idx=1&amp;amp;sn=62a75d90d76a7f0c4cb01a64db8f4e2e&amp;amp;chksm=ceb9f098f9ce798eafec5c1e01aaeaedc00163e5c4925931da7a1b6184365d474fb1562cb664&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Redis缓存那点破事 | 绝杀面试官 25 问！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247486281&amp;amp;idx=1&amp;amp;sn=2c0fc614dd94c93aa1172413fb340c6d&amp;amp;chksm=ceb9f7e2f9ce7ef46b0832f69b2e6e6e66d1d10c6db94fedb381da886894a1a622086e64f68a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;MYSQL 那点破事！索引、SQL调优、事务、B+树、分表 ....&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485888&amp;amp;idx=1&amp;amp;sn=60304679c226fb6b2ebaba5bb6ad5485&amp;amp;chksm=ceb9f56bf9ce7c7d7c87fa4aa7cb70aba7af6b4aefbf1f8b3e331d5a443ccc91b3ba2fb95b9e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;TCP网络那点破事！三次握手、四次挥手、TIME-WAIT ....&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原创不易，看到这里，还请点个&lt;/span&gt;&lt;span&gt;「赞」&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;「在看」&lt;/span&gt;&lt;span&gt;，谢谢大家支持&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e463d15a0d4b3657d7ffb494e66c31b</guid>
<title>GitHub上有不错的 C 开源项目？</title>
<link>https://toutiao.io/k/ijt6ncp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e1e3cc3ab6476445c12957da98416601</guid>
<title>代码精准分析在闲鱼接口测试中的应用</title>
<link>https://toutiao.io/k/uwa3xas</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fcf2c8f3d5b3fc1c9b8e911fcb9f79e2</guid>
<title>云原生 Spring Boot 应用配置 Prometheus + Grafana 监控（保姆级）</title>
<link>https://toutiao.io/k/d24s5yw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;markdown编辑器&quot; data-website=&quot;https://markdown.com.cn/editor&quot;&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;最近想要配置Spring Boot应用Prometheus+Grafana监控的demo，发现网上的很多中英文资料，内容过时或者配置不对。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;因此写一个文章来说明整个体系是怎么工作的。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;Demo的源码地址：&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;https://github.com/hengyunabc/spring-boot-prometheus-grafana-demo&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;spring boot应用metrics配置&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;首先，我们直接到官网创建一个spring boot demo应用：&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;创建好后，我们在&lt;code&gt;pom.xml&lt;/code&gt;里加入下面的依赖：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.micrometer&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;micrometer-registry-prometheus&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;spring-boot-starter-actuator 支持spring boot暴露http endpoint&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;micrometer-registry-prometheus 支持prometheus endpoint，这个暴露的是&lt;code&gt;OpenMetrics&lt;/code&gt;的格式，prometheus从这里采集数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;再看下 &lt;code&gt;application.properties&lt;/code&gt;文件：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;spring.application.name=expose-prometheus-demo&lt;br/&gt;server.port=8080&lt;br/&gt;&lt;br/&gt;management.endpoints.web.exposure.include=*&lt;br/&gt;management.server.port=8090&lt;br/&gt;management.metrics.tags.application=${spring.application.name}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;management.server.port&lt;/code&gt;配置endpoint为独立端口，和应用混用同一端口容易有安全问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;management.metrics.tags.application&lt;/code&gt;配置metric里&lt;code&gt;application&lt;/code&gt;的tag&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;本地启动应用之后，访问 http://localhost:8090/actuator/prometheus ，可以看到metrics数据里带上了&lt;code&gt;application&lt;/code&gt;的tag：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;# TYPE jvm_classes_unloaded_classes_total counter&lt;br/&gt;jvm_classes_unloaded_classes_total{application=&quot;expose-prometheus-demo&quot;,} 0.0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;配置k8s环境&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;启动minikube k8s集群&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;minikube start --image-mirror-country=&#x27;cn&#x27; --nodes 2 --kubernetes-version=v1.18.3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;$ kubectl get nodes&lt;br/&gt;NAME           STATUS     ROLES    AGE   VERSION&lt;br/&gt;minikube       Ready      master   65s   v1.18.3&lt;br/&gt;minikube-m02   NotReady   &amp;lt;none&amp;gt;   30s   v1.18.3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;构建docker镜像&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;打包spring boot fat jar：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;./mvnw clean package -DskipTests&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;docker build . -t hengyunabc/expose-prometheus-demo:0.0.1-SNAPSHOT&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;本地启动测试：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;docker run -it -p8080:8080 -p8090:8090 hengyunabc/expose-prometheus-demo:0.0.1-SNAPSHOT&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;访问：http://localhost:8090/actuator/prometheus&lt;/p&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;安装prometheus&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;helm repo add prometheus-community https://prometheus-community.github.io/helm-charts&lt;br/&gt;helm repo update&lt;br/&gt;helm install prometheus prometheus-community/kube-prometheus-stack&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;开启Prometheus UI端口转发：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;kubectl port-forward $(kubectl get pods --selector &quot;app.kubernetes.io/name=prometheus&quot; --output=name) 9090&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;开启grafana UI端口转发：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;kubectl port-forward $(kubectl get pods --selector &quot;app.kubernetes.io/name=grafana&quot; --output=name) 3000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;发布spring boot应用到k8s&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;kubectl apply -f ./servicemonitor-deployment.yaml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;在&lt;code&gt;servicemonitor-deployment.yaml&lt;/code&gt;里定义了三个东东。要注意的是&lt;code&gt;Service&lt;/code&gt;和&lt;code&gt;ServiceMonitor&lt;/code&gt;都要打上label: &lt;code&gt;release: prometheus&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;Deployment&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;apps/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Deployment&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;replicas:&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;template:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;containers:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;-&lt;/span&gt; &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;image:&lt;/span&gt; &lt;span&gt;hengyunabc/expose-prometheus-demo:0.0.1-SNAPSHOT&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;imagePullPolicy:&lt;/span&gt; &lt;span&gt;Always&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;containerPort:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;-&lt;/span&gt; &lt;span&gt;containerPort:&lt;/span&gt; &lt;span&gt;8090&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;Service&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo-service&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;release:&lt;/span&gt; &lt;span&gt;prometheus&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;ports:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;protocol:&lt;/span&gt; &lt;span&gt;TCP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;http-traffic&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;targetPort:&lt;/span&gt; &lt;span&gt;8080&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;protocol:&lt;/span&gt; &lt;span&gt;TCP&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;metric-traffic&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;8090&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;targetPort:&lt;/span&gt; &lt;span&gt;8090&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;ServiceMonitor&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;---&lt;/span&gt;&lt;br/&gt;&lt;span&gt;apiVersion:&lt;/span&gt; &lt;span&gt;monitoring.coreos.com/v1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;kind:&lt;/span&gt; &lt;span&gt;ServiceMonitor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;metadata:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo-service-monitor&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;labels:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;release:&lt;/span&gt; &lt;span&gt;prometheus&lt;/span&gt;&lt;br/&gt;&lt;span&gt;spec:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;selector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;app:&lt;/span&gt; &lt;span&gt;expose-prometheus-demo&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;endpoints:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;metric-traffic&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;path:&lt;/span&gt; &lt;span&gt;&quot;/actuator/prometheus&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;应用发布到k8s里之后，访问Prometheus UI，可以查看到是否发现了demo的&lt;code&gt;Service Discovery&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;http://localhost:9090/service-discovery&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.32421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWSrL4e0XsZg6Iib6iccgw0JzgxMibHXuJR7yk7tIBsLsViciajDZfzUIXCD4eVhd77VficGibeZLpYMwyIEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;工作原理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;下面分两部分详细解析下整个流程是怎么工作的。&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;第一部分：&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;spring boot应用通过引入&lt;code&gt;prometheus&lt;/code&gt; endpoint，数据暴露在 http://localhost:8090/actuator/prometheus&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;prometheus已在k8s里部署好，它是一个无情的抓取机器，现在要想办法让它去拉spring boot应用的数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;prometheus的运行里的实际配置，可以访问 http://localhost:9090/config 查看。这里也是校验&lt;code&gt;ServiceMonitor&lt;/code&gt;是否生效的一个地方。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;第二部分：&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;部署kind &lt;code&gt;Service&lt;/code&gt;，label带有&lt;code&gt;release: prometheus&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部署kind &lt;code&gt;ServiceMonitor&lt;/code&gt;，label带有&lt;code&gt;release: prometheus&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Prometheus operator会发现新部署的&lt;code&gt;ServiceMonitor&lt;/code&gt;，然后生成新的prometheus配置，保存到k8s的Secrets里，实际保存文件是压缩过的：&lt;code&gt;prometheus.yaml.gz&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;prometheus-config-reloader会把这个&lt;code&gt;prometheus.yaml.gz&lt;/code&gt;解压到&lt;code&gt;/etc/prometheus/config_out/prometheus.env.yaml&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;prometheus&lt;/code&gt;启动时正是以&lt;code&gt;--config.file&lt;/code&gt;参数指定了上面的&lt;code&gt;prometheus.env.yaml&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;可以参考官方的图片：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5419039869812856&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWSrL4e0XsZg6Iib6iccgw0Jzgsn62cBMxwkviaZAeD79065klwttYicISefJ2EGVyNwd3IwYUyIur5Mzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1229&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;配置grafana&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;p&gt;grafana 默认的用户名密码是：&lt;code&gt;admin/prom-operator&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;首先导入下面的开源&lt;code&gt;JVM (Micrometer)&lt;/code&gt; dashboard：&lt;/p&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;https://grafana.com/grafana/dashboards/4701&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;在Grafana UI里，在&lt;code&gt;Dashboards&lt;/code&gt;,&lt;code&gt;Manage&lt;/code&gt;,&lt;code&gt;Import&lt;/code&gt;，填入&lt;code&gt;4701&lt;/code&gt;。导入成功之后，就可以在Dashboards里找到&lt;code&gt;JVM (Micrometer)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.44140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWSrL4e0XsZg6Iib6iccgw0JzgPdEiavAfwRkodafJoOE7OC0hbeW3Yjtz8aBAvVLCJ0tRibPqW0taCBBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;打开之后可以看到 expose-prometheus-demo的监控信息。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.60859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2CINxh93CWSrL4e0XsZg6Iib6iccgw0JzgfLrKYOiaYbfzamwbcvHbf149oHdMNVgz2AlFwKU80xSrowjo86CjQXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;排查问题方法&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;现在是重点了，为什么按网上的一些资料去配置却不能工作呢？因为Prometheus Operator本身也是在不断更新，所以一些配置过时了。&lt;/p&gt;&lt;ol data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;熟练查看k8s里的各种资源&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;比如查看k8s里Prometheus相关的pod信息：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;kubectl get pod prometheus-prometheus-kube-prometheus-prometheus-0 -o yaml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;从结果我们可以知道&lt;code&gt;prometheus-config-reloader&lt;/code&gt;的配置是怎样的：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;args:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;--listen-address=:8080&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;--reload-url=http://127.0.0.1:9090/-/reload&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;--config-file=/etc/prometheus/config/prometheus.yaml.gz&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;--config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;--watched-dir=/etc/prometheus/rules/prometheus-prometheus-kube-prometheus-prometheus-rulefiles-0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;command:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;/bin/prometheus-config-reloader&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;理解&lt;code&gt;ServiceMonitor&lt;/code&gt;是怎么工作的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;在&lt;code&gt;工作原理&lt;/code&gt;一节里，官方的原理图里有&lt;code&gt;kind&lt;/code&gt;为&lt;code&gt;Prometheus&lt;/code&gt;的资源。因此我们安装好prometheus operator之后，可以查看具体的yaml配置。&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;$ kubectl get Prometheus&lt;br/&gt;NAME                                    VERSION   REPLICAS   AGE&lt;br/&gt;prometheus-kube-prometheus-prometheus   v2.28.1   1          2d23h&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;$ kubectl get Prometheus prometheus-kube-prometheus-prometheus -o yaml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;在结果的yaml里，我们可以找到&lt;code&gt;serviceMonitorSelector&lt;/code&gt;的配置信息：&lt;/p&gt;&lt;pre data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;code&gt;  &lt;span&gt;serviceMonitorSelector:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;matchLabels:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;release:&lt;/span&gt; &lt;span&gt;prometheus&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;strong&gt;所以我们要在Demo里的&lt;code&gt;servicemonitor-deployment.yaml&lt;/code&gt;里配置上&lt;code&gt;release: prometheus&lt;/code&gt;，这个是很多教程不工作的原因。&lt;/strong&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置流程是异步触发的&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;markdown.com.cn编辑器&quot;&gt;从应用deploy，到operator变更，到prometheus reload，再真正抓取到配置，整个过程是异步的。变更之后可能要一两分钟才会生效。&lt;/p&gt;&lt;h2 data-tool=&quot;markdown.com.cn编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;markdown.com.cn编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;k8s的整套监控是很强大的，但也比较复杂，在原来的组件上套了一层Operator，从而实现自动发现，自动更新。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于用户来说，Operator既是蜜糖也是砒霜，虽然简化了使用，但要理解更多的概念。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0829650c3db9c3a507ac4ce79d75638b</guid>
<title>面试官又整新活，居然问我 for 循环用 i++ 和 ++i 哪个效率高？</title>
<link>https://toutiao.io/k/nrhelk4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前几天，一个小伙伴告诉我，他在面试的时候被面试官问了这么一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在for循环中，到底应该用 i++ 还是 ++i ？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;听到这，我感觉这面试官确实有点不按套路出牌了，放着好好的八股文不问，净整些幺蛾子的东西。在临走的时候，小伙伴问面试官这道题的答案是什么，面试官没有明确告诉答案，只是说让从程序执行的效率角度自己思考一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好吧，既然这个问题被抛了出来，那我们就见招拆招，也给以后面试的小伙伴们排一下坑。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到，这个搞事情的面试官说要从&lt;strong&gt;执行效率&lt;/strong&gt;的角度思考，那我们就抛开语义上的区别，从运行结果以外的效率来找找线索。回想一下，我们在以前介绍CAS的文章中提到过，后置自增&lt;code&gt;i++&lt;/code&gt;和前置自增&lt;code&gt;++i&lt;/code&gt;都不是原子操作，那么实际在执行过程中是什么样的呢？下面，我们从字节码指令的角度，从底层进行一波分析。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;i++ 执行过程&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先写一段简单的代码，核心功能就只有赋值和自增操作：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; j=i++;&lt;br/&gt;    System.out.println(j);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面用&lt;code&gt;javap&lt;/code&gt;对字节码文件进行反编译，看一下实际执行的字节码指令：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28888888888888886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicayeInakIv4AoPnrTaHPFV31toocgMY2j9kFnYfNqFMJ86Kgopbznj4WicGwH7Cedw1Md0jf6vgxxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;990&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是有点难懂？没关系，接下来我们用图解的形式来直观地看看具体执行的过程，也帮大家解释一下晦涩的字节码指令是如何操作栈帧中的数据结构的，为了简洁起见，在图中只列出栈帧中比较重要的&lt;strong&gt;操作数栈&lt;/strong&gt;和&lt;strong&gt;局部变量表&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码中除去打印语句，整体可以拆分成两步，我们先看第一步 &lt;code&gt;int i=3&lt;/code&gt; 是如何执行的 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6052631578947368&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicayeInakIv4AoPnrTaHPFV392Xq1e4AOy6BTX2OhzbicqmVruNiacRvT6qA4V6BrwUrcyJwlqlTh2cw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;646&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面两条操作数栈和局部变量表相关的字节码指令还是比较容易理解的，下面再看一下第二步&lt;code&gt;int j=i++&lt;/code&gt;的执行过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8993808049535603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicayeInakIv4AoPnrTaHPFV3ib6czWPicl3ibGAtWXxgokyEUFjfpCbIYCFhVSCmcRILFhHUqRFxId7gA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;646&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上图中需要注意的是，&lt;code&gt;iinc&lt;/code&gt;能够直接更新局部变量表中的变量值，它不需要把数值压到操作数栈中就能够直接进行操作。在上面的过程中，抛去赋值等其他操作，&lt;code&gt;i++&lt;/code&gt;实际执行的字节码指令是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2&lt;/span&gt;: iload_1&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;: iinc    &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把它翻译成我们能看懂的java代码，可以理解为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; temp=i;&lt;br/&gt;i=i+&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说在这个过程中，除了必须的自增操作以外，又引入了一个新的局部变量，接下来我们再看看&lt;code&gt;++i&lt;/code&gt;的执行过程。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;++i 执行过程&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们对上面的代码做一点小小的改动，仅把&lt;code&gt;i++&lt;/code&gt;换成&lt;code&gt;++i&lt;/code&gt;，再来分析一下&lt;code&gt;++i&lt;/code&gt;的执行过程是怎样的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; j=++i;&lt;br/&gt;    System.out.println(j);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，用&lt;code&gt;javap&lt;/code&gt;反编译字节码文件：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.283851554663992&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicayeInakIv4AoPnrTaHPFV3VIIicj5GEFcQcULNqRp8XoUZEUMVf0jFZSV6wzicILYNsA2sx1ibuIcLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;997&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;int i=3&lt;/code&gt;对应前两行字节码指令，执行过程和前面&lt;code&gt;i++&lt;/code&gt;例子中完全相同，可以忽略不计，重点还是通过图解的方式看一下&lt;code&gt;int j=++i&lt;/code&gt;对应的字节码指令的执行过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8993808049535603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicayeInakIv4AoPnrTaHPFV3YvajXwzxM8VHHej524L2MoIAekiclQaxAiaMdxeJ9ibicicxJVCqKdZ8MyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;646&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抛去赋值操作，&lt;code&gt;++i&lt;/code&gt;实际执行过程只有一行字节码指令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;2&lt;/span&gt;: iinc    &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;转换成能理解的java代码的话，&lt;code&gt;++i&lt;/code&gt;实际执行的就在局部变量中执行的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;i=i+&lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么看来，在使用&lt;code&gt;++i&lt;/code&gt;时确实比&lt;code&gt;i++&lt;/code&gt;少了一步操作，少引入了一个局部变量，如果在运算结果相同的场景下，使用&lt;code&gt;++i&lt;/code&gt;的话的确效率会比&lt;code&gt;i++&lt;/code&gt;高那么一点点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么回到开头的问题，两种自增方式应用在for循环中执行的时候，那种效率更高呢？刚才得出的结论仍然适用于for循环中吗，别急，让我们接着往下看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;for循环中的自增&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面准备两段包含了for循环的代码，分别使用&lt;code&gt;i++&lt;/code&gt;后置自增和&lt;code&gt;++i&lt;/code&gt;前置自增：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;//i++ 后置自增&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ForIpp&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; i++) {&lt;br/&gt;            System.out.println(i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//++i 前置自增&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ForPpi&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;5&lt;/span&gt;; ++i) {&lt;br/&gt;            System.out.println(i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老规矩，还是直接反编译后的字节码文件，然后对比一下指令的执行过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4429916317991632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicayeInakIv4AoPnrTaHPFV3Bx1iaJOfBibIOicqgKhsDglw7byzibiazWD0xIqdOwtWhrs2aFvMpV2icGQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，有趣的现象出现了，两段程序执行的字节码指令部分居然&lt;strong&gt;一模一样&lt;/strong&gt;。先不考虑为什么会有这种现象，我们还是通过图解来看一下字节码指令的执行过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.564073226544622&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicayeInakIv4AoPnrTaHPFV3hIEtqiarqiafJ4oxIRiarDHgdkgzQJuLHmicL3j2VmzqwUe1PJgK2OU2Dw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;874&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以清晰的看到，在进行自增时，都是直接执行的&lt;code&gt;iinc&lt;/code&gt;，在之前并没有执行&lt;code&gt;iload&lt;/code&gt;的过程，也就是说，两段代码执行的都是&lt;code&gt;++i&lt;/code&gt;。这一过程的验证其实还有更简单的方法，直接使用idea打开字节码文件，就可以看到最终for循环中使用的相同的&lt;strong&gt;前置自增&lt;/strong&gt;方式。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4534005037783375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicayeInakIv4AoPnrTaHPFV3EWShSrNRiaficdberNdXiccU9VgUjGibyblz5C44BArLTyRJ0g3AK7SjLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1191&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，为什么会出现这种现象呢？归根结底，还是java编译器对于代码的优化，在两种自增方式中，如果没有赋值操作，那么都会被优化成一种方式，就像下面的两个方法的代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;ipp&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;    i++;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;ppi&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;    ++i;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终执行时的字节码指令都是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;0&lt;/span&gt;: iconst_3&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;: istore_1&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;: iinc    &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，在上面的这种特定情况下，代码经过编译器的优化，保持了语义不变，并通过转换语法的形式提高了代码的运行效率。所以再回到我们开头的问题，就可以得出结论，在for循环中，通过jvm进行编译优化后，不论是&lt;code&gt;i++&lt;/code&gt;还是&lt;code&gt;++i&lt;/code&gt;，最终执行的方式都是&lt;code&gt;++i&lt;/code&gt;，因此执行效率是相同的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，以后再碰到这种半吊子的面试官，和你谈for循环中&lt;code&gt;i++&lt;/code&gt;和&lt;code&gt;++i&lt;/code&gt;的效率问题，自信点，直接把答案甩在他的脸上，&lt;strong&gt;两种方式效率一样！&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>