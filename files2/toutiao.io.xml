<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f2714a6e862ac70abccad2990f481e92</guid>
<title>成为更好的开发者！行动起来！</title>
<link>https://toutiao.io/k/bcodelm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>403860aa2c5964ea49088ab33d7db829</guid>
<title>快手抓包问题分析</title>
<link>https://toutiao.io/k/ef3rtq9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section class=&quot;toc-content post tag-spider tag-linux no-image&quot;&gt;
      &lt;h2 id=&quot;%E8%83%8C%E6%99%AF&quot;&gt;背景&lt;/h2&gt;&lt;p&gt;不知从什么版本后，对快手进行简单抓包似乎“不可行”了。表现就是使用常规的 HTTP 正向代理抓包工具（&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;charles&lt;/a&gt;、&lt;a href=&quot;https://mitmproxy.org/&quot;&gt;mitmproxy&lt;/a&gt;、&lt;a href=&quot;https://www.telerik.com/fiddler&quot;&gt;fiddler&lt;/a&gt; 之类）并且把自签名证书种到系统证书里后，数据依然能刷出来，也能抓到一些零星的报文，但是关键出数据的那些接口报文都没有。&lt;/p&gt;&lt;p&gt;一般来说，常规方法无法抓安卓应用的 https 包，通常有以下几种可能：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;证书信任问题。在 Android 7 以上，应用会默认不信任用户证书，只信任系统证书，如果配置不得当则是抓不到包的。&lt;/li&gt;&lt;li&gt;应用配置了 SSL pinning，强制只信任自己的证书。这样一来由于客户端不信任我们种的证书，因此也无法抓包。&lt;/li&gt;&lt;li&gt;应用使用了纯 TCP 传输私有协议（通常也会套上一层 TLS）。由于甚至都不是 HTTP 协议，当然就抓不到包了。&lt;/li&gt;&lt;li&gt;应用使用 WebSocket 长链接，将不同的接口封装在这个长链接里。在 WebSocket 里承载的协议一般是用某种自定义方式来模拟 http 请求，因此也难以抓包。&lt;/li&gt;&lt;li&gt;应用使用了基于 UDP 的 http3.0协议等。大部分代理工具目前还不支持 quic 等协议，所以这样一般是抓不到包的。&lt;/li&gt;&lt;li&gt;应用配置了 Proxy.NO_PROXY ，强制不走系统代理。这样http流量就绕过我们配置的代理，自然抓不到包。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当前的现象是数据能刷出来，那就说明并不是证书信任相关的问题。接下来就需要验证它究竟是使用了什么样的传输方式，对症下药。&lt;/p&gt;&lt;p&gt;最稳妥的验证方式当然是白盒测试看源码，不过快手反编译的代码看起来也费劲，于是考虑直接当成黑盒来测试看看。以下验证方式均以 &lt;strong&gt; 快手 8.2.31.17191&lt;/strong&gt; 版本为例。&lt;/p&gt;&lt;h2 id=&quot;%E5%88%86%E6%9E%90&quot;&gt;分析&lt;/h2&gt;&lt;h3 id=&quot;%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2&quot;&gt;环境部署&lt;/h3&gt;&lt;h4 id=&quot;%E5%87%86%E5%A4%87%E8%87%AA%E7%AD%BE%E5%90%8Dca%E8%AF%81%E4%B9%A6&quot;&gt;准备自签名CA证书&lt;/h4&gt;&lt;p&gt;需要在 Linux 主机上使用 openssl 工具生成一波证书。当然，这一步可以忽略，直接使用mitmproxy生成的证书。只是手动配置一下能够加深一下对 openssl 的理解。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 生成RSA私钥 cert.key 
openssl genrsa -out cert.key 2048

# 生成有效期为15年的X509证书 cert.crt（DN信息随便填填似乎都行，但是不能全空）
openssl req -new -x509 -key cert.key -out -days 5480 cert.crt

# 私钥和证书放一起，构成PEM格式的 cert.pem
cat cert.key cert.crt &amp;gt; cert.pem

# 将之前生成的pem证书作为mitmproxy使用的根证书
cp cert.pem ~/.mitmproxy/mitmproxy-ca.pem

# 以普通正向代理模式启动在8000端口，并配合curl简单验证证书可用性
mitmproxy -p 8000 

# 能正常访问没有SSL相关报错，就说明之前生成的自签名证书是OK的
curl -x localhost:8000 --cacert ~/.mitmproxy/mitmproxy-ca.pem https://www.baidu.com

# 从证书文件中计算出用于放置在安卓中的文件hash名，假设结果为 a5176621 
openssl x509 -subject_hash_old -in cert.crt -noout

# 将cert.crt复制出一个上述hash结果的新文件
cp cert.crt a5176621.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，不要尝试使用 &lt;code&gt;mitmproxy --certs&lt;/code&gt; 来配置证书，这种方式只能配置 leaf 证书，而不能配置根 CA 证书。因此还是老老实实的把根证书放在默认路径下。&lt;/p&gt;&lt;h4 id=&quot;%E5%87%86%E5%A4%87%E8%AE%BE%E5%A4%87&quot;&gt;准备设备&lt;/h4&gt;&lt;p&gt;为了方便测试，我在 arm 服务器上使用 &lt;a href=&quot;https://github.com/remote-android/redroid-doc&quot;&gt;redroid&lt;/a&gt; 准备了一台安卓虚拟机。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;docker run -itd --rm --memory-swappiness=0 \
--privileged --name redroid \
--mount type=bind,source=/home/myths/exp/a5176621.0,target=/system/etc/security/cacerts/a5176621.0 \
-p 5555:5555 \
redroid/redroid:11.0.0-arm64 \
redroid.width=720 \
redroid.height=1280 \
redroid.fps=15 \
redroid.gpu.mode=guest&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 /home/myths/exp/a5176621.0 替换成实际文件所在路径。&lt;/p&gt;&lt;p&gt;然后在arm主机上用 adb 连接安卓的 tcpip 端口，下载并安装快手 8.2.31.17191 版本。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 在arm服务器上用adb连接安卓虚拟机
adb connect localhost:5555

# 安装快手
adb install kuaishou.apk&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了方便远程操作，需要在本地机器上连接 arm 服务器上的安卓虚拟机，并用scrcpy操作。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 在本地主机上连接远程arm服务器上的安卓虚拟机
adb connect &amp;lt;ip for arm server&amp;gt;:5555

# 启动scrcpy
scrcpy&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到这一步骤时，可以检测安卓中的网络应该都已经是通的了。&lt;/p&gt;&lt;h3 id=&quot;%E5%A4%8D%E7%8E%B0%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98&quot;&gt;复现抓包问题&lt;/h3&gt;&lt;p&gt;先尝试使用传统正向代理的方式进行抓包。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 在arm服务器上用正向代理启动mitmproxy
mitmproxy -p 8000

# 对安卓设置正向代理，其中 172.17.0.1 为安卓下访问arm主机的ip
adb shell settings put global http_proxy 172.17.0.1:8000&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置完成后，观察手机的网络状况，现象如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用浏览器访问普通网站，返回均正常，mitmproxy也能抓到包。&lt;/li&gt;&lt;li&gt;刷快手推荐页，返回也正常，但是mitmproxy只能抓到一些静态资源，无法抓到接口。&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://blog.mythsman.com/content/images/2022/02/Xnip2022-02-20_15-30-21.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; srcset=&quot;https://blog.mythsman.com/content/images/size/w600/2022/02/Xnip2022-02-20_15-30-21.png 600w, https://blog.mythsman.com/content/images/size/w1000/2022/02/Xnip2022-02-20_15-30-21.png 1000w, https://blog.mythsman.com/content/images/2022/02/Xnip2022-02-20_15-30-21.png 1024w&quot; sizes=&quot;(min-width: 720px) 720px&quot;/&gt;&lt;/figure&gt;&lt;h3 id=&quot;ban%E6%8E%89%E4%B8%8D%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%81%E9%87%8F&quot;&gt;Ban掉不走代理的所有流量&lt;/h3&gt;&lt;p&gt;有数据但是抓不到包，怀疑应当是有些流量漏掉了，于是尝试把这些流量Ban掉看看效果。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 首先需要打开内核的 ip_forward 功能
echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward

# 依然在arm服务器上用正向代理启动mitmproxy
mitmproxy -p 8000

# 继续在手机上配置http代理，其中172.17.0.1为安卓下访问arm主机的ip
adb shell settings put global http_proxy 172.17.0.1:8000

# 在 arm 服务器上配置iptables，将来源于安卓虚拟机但目的地不是arm服务器的流量重定向到一个无用端口。
# 其中 172.17.0.12 位安卓虚拟机的ip，1234为一个无用端口。
sudo iptables -t nat -I PREROUTING -p tcp -s 172.17.0.12 ! -d 172.17.0.1 -j REDIRECT --to-ports 1234
# 如果上述操作报了 Couldn&#x27;t load match `owner&#x27;:No such file or directory 的错，那么需要在 arm 服务器上启动下相关模块。
sudo modprobe ipt_owner

# 记得测试完成后，将上面这个记录干掉
iptables -t nat -D PREROUTING 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置完成后，观察手机的网络状况，现象如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用浏览器访问普通网站，返回均正常，mitmproxy也能抓到包。&lt;/li&gt;&lt;li&gt;刷快手推荐页，显示“无网络连接“。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;说明这里的确是有流量漏了，没有走正向代理，但是依然出了外网。&lt;/p&gt;&lt;h3 id=&quot;ban%E6%8E%89%E4%B8%8D%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%8444380%E6%B5%81%E9%87%8F&quot;&gt;Ban掉不走代理的443/80流量&lt;/h3&gt;&lt;p&gt;那么这些流量到底是私有的四层TCP流量、还是没走正向代理的80/443流量呢？因此尝试把非80/443的流量放开试试。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 依然在arm服务器上用正向代理启动mitmproxy
mitmproxy -p 8000

# 继续在手机上配置http代理
adb shell settings put global http_proxy 172.17.0.1:8000

# 在 arm 服务器上配置iptables，将来源于安卓虚拟机但目的端口不是80/443的流量重定向到一个无用端口。
# 其中 172.17.0.12 位安卓虚拟机的ip，1234为一个无用端口。
sudo iptables -t nat -I PREROUTING -p tcp -s 172.17.0.12  --dport 80 -j REDIRECT --to-ports 1234
sudo iptables -t nat -I PREROUTING -p tcp -s 172.17.0.12  --dport 443 -j REDIRECT --to-ports 1234

# 记得测试完成后，将上面这两条记录干掉
iptables -t nat -D PREROUTING 1
iptables -t nat -D PREROUTING 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置完成后，观察手机的网络状况，现象如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用浏览器访问普通网站，返回均正常，mitmproxy也能抓到包。&lt;/li&gt;&lt;li&gt;刷快手推荐页，依然显示“无网络连接“。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这就说明，控制快手推荐页的流量并不是所谓私有流量，而就是走的80/443端口，只是没有走正向代理。&lt;/p&gt;&lt;h3 id=&quot;%E6%94%B9%E7%94%A8%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F&quot;&gt;改用透明代理模式&lt;/h3&gt;&lt;p&gt;既然七层的代理配置会被忽略，那就尝试使用四层的透明代理，将流量强制转到透明代理服务器上即可。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 在arm服务器上以透明代理模式启动mitmproxy
mitmproxy -p 8000 -m transparent

# 将手机上的http代理移除
adb shell settings put global http_proxy :0

# 在arm服务器上配置将来源于安卓虚拟机的的80/443流量直接路由到mitmproxy
# 其中 172.17.0.12 位安卓虚拟机的ip
sudo iptables -t nat -I PREROUTING -p tcp  -s 172.17.0.12 --dport 80 -j REDIRECT --to-ports 8000
sudo iptables -t nat -I PREROUTING -p tcp  -s 172.17.0.12 --dport 443 -j REDIRECT --to-ports 8000

# 记得测试完成后，将上面这两个记录干掉
iptables -t nat -D PREROUTING 1
iptables -t nat -D PREROUTING 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置完成后，观察手机的网络状况，现象如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;使用浏览器访问普通网站，返回均正常，mitmproxy也能抓到包。&lt;/li&gt;&lt;li&gt;刷快手推荐页，能成功刷出，并且mitmproxy也抓到了包。&lt;/li&gt;&lt;/ol&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://blog.mythsman.com/content/images/2022/02/K20220220-174206.png&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; srcset=&quot;https://blog.mythsman.com/content/images/size/w600/2022/02/K20220220-174206.png 600w, https://blog.mythsman.com/content/images/2022/02/K20220220-174206.png 720w&quot; sizes=&quot;(min-width: 720px) 720px&quot;/&gt;&lt;/figure&gt;&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;/h2&gt;&lt;p&gt;目前看来，快手并非像很多网上传的那样，大多数接口都走了 kquic 协议导致无法抓包。其实很多接口只是做了一个禁止走系统代理的设置，简单使用透明代理模式进行抓包即可轻松绕过。当然，不排除有些关键接口也做了SSL pinning、走私有协议之类的。。。&lt;/p&gt;&lt;h2 id=&quot;%E5%8F%82%E8%80%83&quot;&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.mitmproxy.org/stable/concepts-certificates/&quot;&gt;https://docs.mitmproxy.org/stable/concepts-certificates/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/56830858&quot;&gt;https://stackoverflow.com/questions/56830858&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy/&quot;&gt;https://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/-builder/proxy/&lt;/a&gt;&lt;/p&gt;
    &lt;/section&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a224987e80d8478f78f3364aff518a2a</guid>
<title>TikTok或将与甲骨文达成数据存储协议；董明珠建议对996开展公益诉讼；苹果举办春季新品发布会｜开发者头条</title>
<link>https://toutiao.io/k/fxpbkrf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;321&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavic1fOib9UibTAaeyqeBO36abkLDWcNJ5QDQnHI7sueAAuXFsaYzBy2N2IGSL31ic9nNekm5HjRZ1TeWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;来源&lt;/strong&gt;：网络整理&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;头条菌微信号：&lt;/span&gt;&lt;span&gt;toutiaoio007&lt;/span&gt;&lt;span&gt; ，欢迎加我，交个朋友！&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数字人民币试点“10+1”有望扩围 全面铺开尚存阻力&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数字人民币试点将在“10+1”格局下迎来进一步扩围。日前，有媒体报道，全国第三批数字人民币试点地区即将亮相，天津市、杭州市、福州市等地区有望入选。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多位业内人士分析称，通过此前在“10+1”地区的试点，数字人民币应用场景、技术架构均已得到市场认可，监管部门、商业银行以及相关服务商在此过程中也积累了丰富的经验，当前数字人民币进一步扩大试点的条件已经成熟。尽管如此，数字人民币全面铺开尚存阻力，还需在持续提高用户使用体验、测试完善底层技术、保护数据安全、制定相关法律法规和配套政策等方面努力。（证券日报）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;拜登下令研究加密货币风险，探索美国中央银行数字货币&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当地时间周三，美国总统拜登将签署一项行政命令，要求美国政府机构仔细研究加密货币激增可能带来的风险，并考虑创建「数字美元」的可能性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;白宫在一份信息简报中表示，拜登政府的目标是充分利用数字资产的「潜在优势」，同时消除这个超过 3 万亿美元的市场给约 4000 万美国投资者甚至是整个经济带来的风险。据彭博社，美国政府一名高级官员表示，各机构将有 60 至 180 天的时间来完成他们的研究报告，之后政府计划迅速采取行动，执行优秀的提议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据华尔街日报，美国一名高级政府官员表示：「这不再是一个小众问题，我们需要拥有正确的工具来减小消费者、投资者甚至整个金融体系的风险，这一点非常重要。」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此前一位官员分析，一个关键目标是改善当前美国支付系统的低效率，并促进金融包容性。由于费用高昂，约 5% 的美国穷人目前还没有银行账户。（中财网）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;腾讯、网易和米哈游位列全球手游发行商收入榜前五&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 月 8 日，Sensor Tower 公布了 2022 年 2 月中国手游发行商在全球 App Store 和 Google Play 的收入排名。其中，腾讯游戏、网易游戏和米哈游继续占据全球手游发行商收入榜 TOP 5 的 3 个席位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此次一共有 36 个中国厂商入围全球手游发行商收入榜 TOP 100，还包括心动网络、创酷互动、竞技世界、哔哩哔哩、露珠科技和紫龙游戏等。它们合计吸金近 20 亿美元，占全球 TOP 100 手游发行商收入近 37.9%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而在 2022 年 2 月中国 App Store 手游收入排行榜中，腾讯、米哈游、网易旗下的游戏也位列前四。其中，第一名是腾讯旗下的王者荣耀，第二名是腾讯旗下的和平精英，第三名是米哈游旗下的原神，第四名是网易旗下的梦幻西游。（Sensor Tower）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;微信正在测试半屏小程序&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近日，微信小程序官方开发文档上线了一个新功能，从基础库 2.20.1 开始，将支持「半屏小程序」，目前还处于内测阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据文档定义，该功能为「当小程序需要打开另一个小程序让用户进行快捷操作时，可将要打开的小程序通过半屏的形态快速拉起。」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，当用户通过微信小程序打开另一个微信小程序时，将会以全新界面打开的方式进行跳转。而在内测的功能中，当开发者进行配置后，就可以从下方拉起，以卡片的形式展现。（IT 之家）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;抖音电商运营团队调整薪资：降低每月基本工资，15薪改18薪&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从字节跳动旗下抖音电商内部人员获悉，近期抖音电商开启了新一轮薪资改革，覆盖旗下大部分运营团队：原有的15薪改为18薪，降低每个月的基本工资，而年终奖比例有所提升，从原有的3个月绩效改为6个月绩效。此次改革主要针对的是运营岗位，产品研发等其他岗位并未涉及。（澎湃）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;京东：应届博士生年薪最高达 200 万元，近 50% 应届生获得晋升&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 月 7 日消息，京东数据显示，京东物流一线员工中超过 80% 来自农村地区。一线员工中在本省就业的人数占比超过 60%。京东物流 2021 中报数据显示， 半年间为一线员工的薪酬福利开支达到 172 亿元；全员缴纳五险一金等；2022 年“我在京东过大年”投入超 4 亿元，对春节坚守一线的员工加大福利补贴。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据了解，应届生方面，京东称四年间为应届毕业生提供近 6 万个就业机会，累计开放岗位 358 个，且呈逐年递增趋势。2021 年晋升数据显示，近 50% 应届生获得晋升，25% 应届生年内连续两次晋升。技术人才投入方面，应届博士生年薪最高可达 200 万元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从京东物流公布的数据来看，2019 至 2021 年，应届生中硕士及以上学历占比近半。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2021 年，京东物流招聘超过 500 名双一流大学应届生，作为专业人才培养；超过 4000 名“双非应届生”，作为基层管理者储备人才。（IT之家）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;董明珠建议对996开展公益诉讼&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“有些岗位由于特殊原因，在八小时工作制上适当延长，是可以理解的。但如果企业置员工的身体和心理健康于不顾，实行“996”工作制，这是绝对不可行的。”全国人大代表、格力电器董事长兼总裁董明珠建议检察机关对“996”工作制进行监督，为相关劳动者开展公益诉讼工作。检察机关应充分发挥职能，最大限度保护劳动者合法权益。（检察日报）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;俄罗斯曾经最大资源网站 RuTracker.org 近日解封&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据俄罗斯媒体报道，俄罗斯曾经最大的盗版资源站 RuTracker.org 已经于近日解锁，该网站曾在 2015 年被俄罗斯通信监管机构 Roskomnadzor 永封。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此前，不少游戏厂商、音乐和电影流媒体也终止了俄区服务。于是，俄罗斯当局取消了对盗版网站 RuTracker.org 的封锁，用户可以在其中下载破解的 Windows、Microsoft Office、AutoCAD 等版本，还有好莱坞电影、电视节目。（IT 之家）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;苹果举办春季新品发布会，Mac Studio 最低售价 12600 元起&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 月 9 日凌晨 2 点，苹果春季新品发布会正式举行。与之前的曝光内容接近，苹果发布了 iPhone SE3、iPad Air 5、M1 Ultra 芯片、新款 Mac 等产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最先登场的产品是 iPhone 13 系列苍岭绿配色，本周五开启预购。随后，搭载 A15 仿生芯片的 iPhone SE3 登场。这款产品保留了苹果的 Home 键，库克表示果粉们对 SE 系列一直青睐有加。iPhone SE3 拥有三种配色，正面采用 4.7 英寸玻璃，起售价为 429 美元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随后，库克为用户带来了 iPad Air5。它搭载了全新 M1 芯片，相比同价位 Windows 平板更轻，性能更强。此外它有前置 1200 万像素超广角摄像头，支持 5G 连接。iPad Air5 支持 5 种配色，64GB、256GB 两种规格，起售价 599 美元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着发布会宣布了 M1 芯片家族的新成员 M1 Ultra。它采用 UltraFusion 架构将两颗 M1 Max 连接在一起，20 颗 CPU+64 核 GPU 的配置使得其性能相比 M1 芯片高 8 倍。这颗芯片包含 1140 亿晶体管，支持 800GB/s 内存带宽，32 核心神经引擎每秒可执行 22 亿次神经元网络计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后是桌面电脑系列。其中，Mac Studio 桌面台式机采用类似 Mac Pro/mini 的外观，其 M1 Ultra 版本相比顶配 MacBook Pro 性能仍提升 80%。而显示器 Studio Display 拥有 27 英寸大屏，支持 5K Retina 显示，600nits 亮度。Mac Studio 的 M1 Max/Ultra 版本售价为 1999、3999 美元，Studio Display 售价 1599 美元。（中关村在线）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;TikTok 或将与甲骨文达成数据存储协议&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 月 11 日讯，据报道，消息人士透露，TikTok 即将与甲骨文达成协议，在后者服务器上存储美国用户的数据。 据悉，甲骨文将把 TikTok 的所有美国用户数据存储在甲骨文的数据服务器上。根据协议，将成立一个由数百人组成的美国数据管理团队，作为美国用户信息的「看门人」。这两家公司正在讨论一种结构，在这种结构下，美国数据管理团队将不受 TikTok 的控制或监督。（智通财经）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Intel 中国董事长称国内没有竞争对手，依然是行业老大&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近日，Intel 中国董事长王锐接受凤凰《封面》采访时表示，目前来看中国本土还没有竞争对手，Intel 综合实力依然是行业老大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;被问及中国本土公司的发展是否已经对 Intel 构成了实质性的威胁，王锐表示，现在还没有，但是她相信中国会出现扎扎实实做好设计的公司的，也非常希望中国本土公司有这样的竞争力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「我觉得在未来的三到五年，应该可以看到中国本土企业（对我们构成竞争威胁）的这个势头。」王锐表示，Intel 的综合能力绝对是老大，从单一领域看，比如显卡、CPU 芯片，我们的确暂时落后于一些公司，比如制程工艺落后于台积电，但她相信以 Intel 这么多年的底蕴，完全有追回来的把握。（TechWeb）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;光刻机大厂 ASML 重金招人：硕士年薪 36 万元&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3 月 5 日消息，据报道，ASML 公司将从 3 月 5 日开始今年的校招，目标是招聘 1000 名半导体行业的人才，其中 90% 的人才是工程相关，10% 人才是后勤支援的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前半导体人才抢人大战激烈，ASML 开出的薪资也很诱人，根据 ASML 公司 HR 高管公布的数据，新招的硕士毕业生加入 ASML 之后，工资及加班津贴等算进来之后，最高可达 160 万新台币，约合 36 万人民币。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ASML 强调，从去年 7 月份以来，ASML 员工的涨薪幅度已经达到了 15-19%，同时福利也不少，年假从 10 天起跳，还提供弹性工作制，每周有一天在家办公，可以兼顾家庭与工作。（中关村在线）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;谷歌、微软、苹果、Mozilla 浏览器「四巨头」将首度合作，解决网页适配老大难问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据外媒报道，苹果、Google、微软和 Mozilla，以及软件顾问公司 Bocoup 和 Igalia 已经同意共同合作，致力于改善网络浏览器的互操作性和用户体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些公司制定了一项名为「Interop 2022」的新标准，主要针对市面上主流的四大浏览器：Safari、Chrome、Edge 和 Firefox，改善 15 个网络平台规范中的表现，以及目前正在调查的三个未完全指定的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单来说，通过该标准，Web 开发人员不必考虑多个浏览器之间的兼容差异，只要标准互通，页面实现的效果是一致的。（快科技）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;迈克尔·乔丹推出 NFT 项目「6 Rings」&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传奇球星迈克尔·乔丹在新平台 HEIR 上推出 NFT 项目「6 Rings」，以其生涯在芝加哥公牛获得的六座总冠军为灵感，每个持有者都被视为创始粉丝，未来将提供对独家内容或其他项目的访问权限。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目原计划推出 10010 个 NFT，不过因反响低于预期，改为 5005 个，每个售价 2.3 SOL。（Hypebeast）&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;加入「码农周刊VIP会员」，成为更好的开发者！&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>12ad7953af18eabad555b03b71a2bbfc</guid>
<title>Decorator 装饰器</title>
<link>https://toutiao.io/k/4m72ib3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第 27 期前端食堂技术周刊视频版&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.bilibili.com/video/BV17q4y1i7zz&lt;/p&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为公众号推荐机制变更，如果不想错过食堂的文章，可以将食堂设置为星标，这样就会出现在你的公众号置顶列表里。设置星标方式：先进入公众号后台(点击本文标题下方蓝色的字“前端食堂”)，再点击右上角三个点，就可以看到设置星标啦。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;给前端食堂标星标，吃好每一顿饭！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;前言&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家在前端开发过程中有遇到过 &lt;code&gt;@ + 方法名&lt;/code&gt; 这种写法吗？当我第一次看到的时候，直接懵了，这是什么东东……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;遇到困难解决困难，在我的一番查找后，我知道了，原来这东西叫&lt;strong&gt;装饰器&lt;/strong&gt;，英文名叫 &lt;strong&gt;&lt;code&gt;Decorator&lt;/code&gt;&lt;/strong&gt; ，那它到底是干什么的呢？接下来就让我跟大家说道说道～&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是装饰器&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;装饰者模式&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;装饰者模式就是能够在不改变对象自身的基础上，在程序运行期间给对象动态地添加职责。打个比方，一个人在天气冷的时候要穿棉衣，天气热的时候穿短袖，可无论穿什么，本质上他还是一个人，只不过身上穿了不同的衣服。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以简单来说， &lt;code&gt;Decorator&lt;/code&gt; 就是一种动态地往一个类中添加新的行为的设计模式， 它可以在类运行时， 扩展一个类的功能， 并且去修改类本身的属性和方法， 使其可以在不同类之间更灵活的共用一些属性和方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@&lt;/code&gt; 是针对这种设计模式的一个语法糖，不过目前还处于第 2 阶段提案中，使用它之前需要使用 Babel 模块编译成 ES5 或 ES6。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;怎么使用装饰器&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三方库使用&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Babel 版本 ≥ 7.x&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果项目的 Babel 版本大于等于 7.x，那么可以使用 &lt;code&gt;@babel/plugin-proposal-decorators&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;安装&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;npm install --save-dev @babel/plugin-proposal-decorators&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;配置 .babelrc&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;br/&gt;    [&lt;span&gt;&quot;@babel/plugin-proposal-decorators&quot;&lt;/span&gt;, { &lt;span&gt;&quot;legacy&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; }],&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Babel 版本 ≤ 6.x&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果小于等于 6.x，则可以使用 &lt;code&gt;babel-plugin-transform-decorators-legacy&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;安装&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;npm install --save-dev @babel/plugin-proposal-decorators&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;配置 .babelrc&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;    &lt;span&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;span&gt;&quot;transform-decorators-legacy&quot;&lt;/span&gt;]&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用方法&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;装饰器的写法是 &lt;code&gt;@ + 返回装饰器函数的表达式&lt;/code&gt;，所以其使用方法如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@classDecorator&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ &lt;span&gt;// 类&lt;/span&gt;&lt;br/&gt;  @fieldDecorator&lt;br/&gt;  targetField = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;// 类实例属性&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  @funDecorator&lt;br/&gt;  targetFun() { } &lt;span&gt;// 类方法&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  @accessorDecorator&lt;br/&gt;  &lt;span&gt;get&lt;/span&gt; targetGetFun() { } &lt;span&gt;// 类访问器&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一个对象使用多个装饰器，那么执行顺序是什么呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decorator1&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;decorator1&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decFn1&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;decFn1&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; targetClass;&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decorator2&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;decorator2&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decFn2&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;decFn2&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; targetClass;&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行顺序：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17362817362817362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOnZHexjtLEIhYzNHXHzt0u67n1K6LQR7273eOvFiaiaS0XzRJYh36lr9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1221&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打印结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5759493670886076&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOibv2ozatwI8p3EwAg9Efe0QRiaU6I66AHpg4vKMeHKEB7GsGhbVLpSdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;316&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据以上，我们可知，装饰器的执行顺序为由外向内进入，由内向外执行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用范围&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据使用方法，我们可以看出装饰器可以应用于以下几种类型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;类（class）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类实例属性（公共、私有和静态）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类方法（公共、私有和静态）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类访问器（公共、私有和静态）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;函数的装饰&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们看完装饰器的使用方法和使用范围时，我们发现，装饰器不能修饰函数，那原因到底是什么呢？原因就是函数有&lt;strong&gt;函数提升&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; num = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;add&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  num ++;&lt;br/&gt;}&lt;br/&gt;@add&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;fn&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个例子中，我们想要在执行后让 num 等于 1，但其实结果并不是这样，因为函数提升，实际上代码是这样执行的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;add&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  num ++;&lt;br/&gt;}&lt;br/&gt;@add&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;fn&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{}&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; num;&lt;br/&gt;num = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一定要装饰函数的话，可以采用高阶函数的形式，这篇文章主要讲装饰器，有关高阶函数就不在此赘述了，不了解的小伙伴们可自行查阅资料哈～&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;装饰器原理&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据装饰器的使用范围，可以把它分为两大类：类的装饰与类方法的装饰，下面就让我为大家逐个分享一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;类的装饰&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;传参&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们先根据一个小例子看一下装饰器接收参数的情况：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decorator&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  args.forEach(&lt;span&gt;(&lt;span&gt;arg, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`参数&lt;span&gt;${index}&lt;/span&gt;`&lt;/span&gt;, arg);&lt;br/&gt;  });&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@decorator&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;targetClass:&#x27;&lt;/span&gt;, TargetClass);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打印结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1287037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOJLW8o08WoR1NmAcxRpFD1pYN6XiaiaxUB0FQeaslPzNJ2vPZjgOzAuPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到结果，我们发现装饰器只接收一个参数，就是被装饰的类定义本身。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;返回值&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们继续通过一个小例子来看返回值的情况：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;returnStr&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&#x27;hello world~&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;returnClass&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; targetClass;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@returnStr&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassA&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;@returnClass&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassB&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;ClassA:&#x27;&lt;/span&gt;, ClassA);&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;ClassB:&#x27;&lt;/span&gt;, ClassB);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09314359637774904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLO2YXsHFqAXGX0g9lZdVuOHWOyYNiaQA90dQyXf6AzJcliagBrQGeIN7BQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1546&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据结果，我们发现装饰器返回什么输出的就是什么。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上的两个例子，我们可以得出以下这个结论：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@decorator&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 等同于&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;TargetClass = decorator(TargetClass) || TargetClass;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说，装饰器的第一个参数就是要装饰的类，它的功能就是对类进行处理。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;类装饰器的使用&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;添加属性&lt;/p&gt;&lt;p&gt;因为装饰器接收的参数就是类定义本身，所以我们可以给类添加属性：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addAttribute&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  targetClass.isUseDecorator = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@addAttribute&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(TargetClass.isUseDecorator); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个例子中，我们定义了 &lt;code&gt;addAttribute&lt;/code&gt; 的装饰器，用于对 &lt;code&gt;TargetClass&lt;/code&gt; 添加 &lt;code&gt;isUseDecorator&lt;/code&gt; 标记，这个用法就跟 Java 中的注解比较相似，仅仅是对目标类型打上一些标记。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;返回装饰器函数的表达式&lt;/p&gt;&lt;p&gt;上面有说装饰器的写法是 &lt;code&gt;@ + 返回装饰器函数的表达式&lt;/code&gt;，也就是说，&lt;code&gt;@&lt;/code&gt; 后边可以不是一个方法名，还可以是&lt;strong&gt;能返回装饰器函数的表达式&lt;/strong&gt;：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addAttribute&lt;/span&gt;(&lt;span&gt;content&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decFn&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    targetClass.content = content;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; targetClass;&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@addAttribute(&lt;span&gt;&#x27;这是内容～～～&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(TargetClass.content); &lt;span&gt;// 这是内容～～～&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们看到 &lt;code&gt;TargetClass&lt;/code&gt; 通过 &lt;code&gt;addAttribute&lt;/code&gt; 的装饰，添加了 &lt;code&gt;content&lt;/code&gt; 这个属性，并且可以向 &lt;code&gt;addAttribute&lt;/code&gt; 传参来给 &lt;code&gt;content&lt;/code&gt; 属性赋值，这种使用方法使装饰器变得更加灵活。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;添加原型方法&lt;/p&gt;&lt;p&gt;在前面的例子中我们添加的都是类的静态属性，但是既然装饰器接收的参数就是类定义本身，那么它也可以通过访问类的 &lt;code&gt;prototype&lt;/code&gt; 属性来添加或修改原型方法：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decorator&lt;/span&gt;(&lt;span&gt;targetClass&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  targetClass.prototype.decFun = &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;这里是装饰器 decorator 添加的原型方法 decFun~&#x27;&lt;/span&gt;);&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@decorator&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{ }&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; targetClass = &lt;span&gt;new&lt;/span&gt; TargetClass();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(targetClass);&lt;br/&gt;targetClass.decFun();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果如下：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29745042492917845&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOrJSibL4wGpOOwMVxAT41n7sUyWMvJcYxvodzYILMksRlib5fISoSibnxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是类装饰器的使用，由此我们可以得出，装饰器还可以对类型进行静态标记和方法扩展，还挺有用的对吧～那么看到这里，小伙伴们是不是发现了在实际项目中就有类装饰器的使用，比如 react-redux 的 connect 就是一个类装饰器、Antd 中的 Form.create 也是一个类装饰器。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// connect&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; connect(mapStateToProps, mapDispatchToProps)(App);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 等同于&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;@connect(mapStateToProps, mapDispatchToProps)&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Form.create&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; WrappedApp = Form.create()(App);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 等同于&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;@Form.create()&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;类方法的装饰&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;传参&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把类实例属性、类方法、类访问器都归到这一类中的原因其实是因为它们三个就是作为某个对象的属性(实例属性、原型方法、实例访问器属性)，也就是说它们接收的参数是类似的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;decorator&lt;/span&gt;(&lt;span&gt;...args&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  args.forEach(&lt;span&gt;(&lt;span&gt;arg, index&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`参数&lt;span&gt;${index}&lt;/span&gt;`&lt;/span&gt;, arg);&lt;br/&gt;  });&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;****************&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TargetClass&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  @decorator&lt;br/&gt;  field = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  @decorator&lt;br/&gt;  fn() { }&lt;br/&gt;&lt;br/&gt;  @decorator&lt;br/&gt;  &lt;span&gt;get&lt;/span&gt; getFn() { }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; targetOne = &lt;span&gt;new&lt;/span&gt; TargetClass();&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(targetOne.field, &lt;span&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(targetOne, &lt;span&gt;&#x27;field&#x27;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4629032258064516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOmXBGsAc0RXExmnISqibL6tMrEWIicCRVUXCqlUuVTiaR0gAowvDYDI37g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据结果我们发现，类方法装饰器接收了三个参数：类定义对象、实例属性/方法/实例访问器属性名、属性操作符。眼熟吧，没错，它与 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 接收的参数很像。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Object.defineProperty(obj, props, descriptor)&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt; 的作用就是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。该方法一共接收三个参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;要定义属性的对象&lt;/strong&gt;（obj）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;要定义或修改的属性名或 &lt;code&gt;Symbol&lt;/code&gt;&lt;/strong&gt; （props）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;要定义或修改的属性描述符&lt;/strong&gt;（descriptor）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对象里目前存在的&lt;strong&gt;属性描述符&lt;/strong&gt;有两种主要形式：&lt;em&gt;数据描述符&lt;/em&gt;和&lt;em&gt;存取描述符&lt;/em&gt;。&lt;em&gt;数据描述符&lt;/em&gt;是一个具有值的属性，该值可以是可写的，也可以是不可写的；&lt;em&gt;存取描述符&lt;/em&gt;是由 getter 函数和 setter 函数所描述的属性。一个描述符只能是这两者其中之一，不能同时是两者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们共享以下可选键值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;configurable&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;属性是否可以被删除和重新定义特性，默认值为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;enumerable&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;是否会出现在对象的枚举属性中，默认值为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据描述符特有键值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;该属性对应的值，默认值为 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;writable&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;是否可以被更改，默认值为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存取操作符特有键值：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;属性的 &lt;code&gt;getter&lt;/code&gt; 函数，如果没有 &lt;code&gt;getter&lt;/code&gt;，则为 &lt;code&gt;undefined&lt;/code&gt;；默认为 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;set&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;属性的 &lt;code&gt;setter&lt;/code&gt; 函数，如果没有 &lt;code&gt;setter&lt;/code&gt;，则为 &lt;code&gt;undefined&lt;/code&gt;；默认为 &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲完 &lt;code&gt;Object.defineProperty()&lt;/code&gt;，接下来就让我们看看该怎么使用它吧～&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;类方法装饰器的使用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们通过一个例子来了解一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;(&lt;span&gt;target, name, descriptor&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  descriptor.writable = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; descriptor;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  @readonly&lt;br/&gt;  name = &lt;span&gt;&#x27;zhangsan&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; person = &lt;span&gt;new&lt;/span&gt; Person();&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(person.name, &lt;span&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(person, &lt;span&gt;&#x27;name&#x27;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打印结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.03834355828220859&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vzEib9IRhZD67mAibPqbDoOluV2KjSNQLOIF9v7evNtRnpib6RHN71cibBsheC94l1bpJ5IxS7IGSsTCSfXf9rJVkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1304&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码说明，装饰器会修改属性的描述对象，然后被修改的描述对象再用来定义属性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此我们可以得出结论：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;changeName&lt;/span&gt;(&lt;span&gt;target, name, descriptor&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  descriptor.value = &lt;span&gt;&#x27;lisi&#x27;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; descriptor;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  @changeName&lt;br/&gt;  name = &lt;span&gt;&#x27;zhangsan&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; person = &lt;span&gt;new&lt;/span&gt; Person();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 等同于&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  name = &lt;span&gt;&#x27;zhangsan&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; person = &lt;span&gt;new&lt;/span&gt; Person();&lt;br/&gt;&lt;span&gt;Object&lt;/span&gt;.defineProperty(person, &lt;span&gt;&#x27;name&#x27;&lt;/span&gt;, {&lt;br/&gt;  &lt;span&gt;value&lt;/span&gt;: &lt;span&gt;&#x27;lisi&#x27;&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;装饰器的应用&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中，可能会遇到这样一种情况，好几个组件的数据都是调用同一个后端接口获得，只是传参不同，有些小伙伴们在写代码的时候可能就是每个组件都去手动调用一次后端接口（以 React 项目为例）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;...&lt;br/&gt;export &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CompOne&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  ...&lt;br/&gt;  getData = &lt;span&gt;async&lt;/span&gt; () =&amp;gt; { &lt;span&gt;// 调用后端接口&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; data = &lt;span&gt;await&lt;/span&gt; request(&lt;span&gt;&#x27;/xxx&#x27;&lt;/span&gt;, {&lt;br/&gt;      &lt;span&gt;params&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;&#x27;123&#x27;&lt;/span&gt;, &lt;span&gt;// 不同组件传参不同&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.setState({ data });&lt;br/&gt;  }&lt;br/&gt;  render() {&lt;br/&gt;    ...&lt;br/&gt;    return (&lt;br/&gt;      &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        ...&lt;br/&gt;        我是组件一: {data}&lt;br/&gt;        ...&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;遇到这种情况，我们就可以用装饰器解决呀～&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 装饰器&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getData&lt;/span&gt;(&lt;span&gt;params&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;span&gt;Comp&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WrapperComponent&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      ...&lt;br/&gt;      getData = &lt;span&gt;async&lt;/span&gt; () =&amp;gt; {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; data = &lt;span&gt;await&lt;/span&gt; request(&lt;span&gt;&#x27;/xxx&#x27;&lt;/span&gt;, {&lt;br/&gt;          params,&lt;br/&gt;        });&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setState({ data });&lt;br/&gt;      }&lt;br/&gt;      render() {&lt;br/&gt;        ...&lt;br/&gt;        return (&lt;br/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;Comp&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;=&lt;span&gt;{data}&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;        )&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Comp;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 组件&lt;/span&gt;&lt;br/&gt;...&lt;br/&gt;@getData({&lt;br/&gt;  &lt;span&gt;id&lt;/span&gt;: &lt;span&gt;&#x27;123&#x27;&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  ...&lt;br/&gt;  render() {&lt;br/&gt;    ...&lt;br/&gt;    const data = &lt;span&gt;this&lt;/span&gt;.props.data; &lt;span&gt;// 直接从 this.props 中获取想要的数据&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;      &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        ...&lt;br/&gt;        我是组件一: {data}&lt;br/&gt;        ...&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好啦，今天的分享就要到此结束了哦，希望通过这篇文章大家能够对装饰器有一定的了解，如有不同意见，欢迎在评论区评论呦～就让暴风雨来得更猛烈些吧！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参考链接&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;装饰器（https://www.bookstack.cn/read/es6-3rd/docs-decorator.md）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ES7 提案: Decorators 装饰器（https://blog.csdn.net/weixin_44691608/article/details/117180409）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Object.defineProperty()（https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;babel-plugin-transform-decorators-legacy（https://www.npmjs.com/package/babel-plugin-transform-decorators-legacy）&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>511a0692b9a4f1386621563ff2df29fc</guid>
<title>设计一个靠谱的监控告警平台</title>
<link>https://toutiao.io/k/tyojqf4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;通过上面两个重要指标的分析，我们总结出要从告警数量、告警收敛、告警升级等方面着手，减少告警发送的数量，提升告警准确性，最终提升解决问题的效率，降低问题恢复时长。下面我们从系统和功能层面说明如何降低告警量，把真正有价值的告警信息发送到用户手中。&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwNjQwNzU2NQ==&amp;amp;mid=2650353674&amp;amp;idx=1&amp;amp;sn=b4a3ee14bd4a4d2ce8ed60f988477ec9&amp;amp;chksm=830044e8b477cdfe965fe129e5d700393fa83aee084f708c6af9035e27f5f902fe9958e6d83e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;本文也将重点围绕告警消息收敛进行讲解。&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;本文也将重点围绕告警消息收敛进行讲解。&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;从图1中可以看出各个监控系统中都有很多重复的功能模块，所以针对这些功能模块我们可以将其抽离出来，如图7所示将告警收敛、告警屏蔽、告警升级等能力统一建设在统一告警服务中。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;这种架构下统一告警服务与检测相关服务完全解耦，在能力上具有一定的通用性。例如其它有告警或消息收敛需求的业务团队想接入统一告警，统一告警要能满足消息收敛发送的需求，同时也要满足消息直接发送的需求。统一告警会提供灵活可配置的消息发送方式，提供简单、多样的功能满足各类需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3435185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNmcoBCPyxagmsvC3R6iacWfYesfKs2rzTlf4lhiceaGVmuvDL2GBsAnMOaPtsp1GPAsfo1khdf1eiaQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图7 统一告警系统结构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;告警收敛&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;对于告警平台每天会产生数以万计的告警，这些告警对于运维或开发人员都需要去分析、甄别优先级、并处理故障。数以万计的告警如果不加收敛每条异常都发送告警，势必会增大运维人员的工作压力，当然也不是所有的告警都需要并且有必要发送给运维人员进行处理。所以我们需要对告警通过多种手段进行收敛，下面我们从四个方面介绍一下如何进行告警收敛。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首次告警等待&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，&lt;/span&gt;&lt;span&gt;当一个异常产生之后我们不会立即去做告警，而是通过等待一段时间才会去做告警发送，一般这个时间可以通过系统自定义，这个值如果太大就会影响告警延迟，太小不能提升告警合并效果。例如首次告警等待时间为5s，当一个服务下节点1出现A指标异常，5s内节点2也出现了A指标异常，那么发送告警时节点1和节点2会被合并到一起发送告警通知。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;告警间隔&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，&lt;/span&gt;&lt;span&gt;问题在没有恢复前，系统会根据告警间隔的配置每隔一段时间发送一条告警信息，告警间隔用来控制告警发送的频率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异常收敛维度&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，&lt;/span&gt;&lt;span&gt;异常收敛维度用来将同个维度下的异常合并在一起。例如同个节点路径A下，通过同一个检测规则产生的异常，会在告警发送的时候根据配置的异常收敛维度合并在一起。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息合并维度&lt;/span&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;，&lt;/span&gt;&lt;span&gt;当多个异常收敛成一个问题，在发送告警的时候会涉及到消息合并，消息合并维度就是用来指定哪些维度可以合并。可能这样理解有些晦涩，我们可以通过图8看一下从异常到消息的转换过程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;假如一个异常有两个维度名字和性别，当这两个异常经过统一告警，我们会根据配置的收敛策略进行合并，从图中我们可以看到性别被定义为异常收敛维度，通常异常收敛维度的选择一定是两个或两个以上具有相同的属性的异常，这样在消息合并后只取相同属性的同一个值，对应到示例图，我们会将${sex}占位符替换成男。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;而名字是被定义为告警合并维度，就表示所有异常中名字是都要展示在消息文本中，所以在消息合并的时候我们会将${name}占位符对应的信息一一拼接在消息文本中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3497164461247637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNmcoBCPyxagmsvC3R6iacWfY6uRqzoo2JiaSUC1nMK4juDaPbOhCYUJnBBJuXBtwt8BliacgpoOyXbdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图8 消息文本替换示意图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;告警认领&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;当出现告警后如果有人认领了该告警，那么后续相同告警只会发送给告警认领人。告警认领主要是为了解决告警有人跟进后，减少将告警发给其他人员，也能从一定程度上解决告警被重复处理的问题。被认领的告警可以取消认领。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;告警屏蔽&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;对于同一个问题，可以设置告警屏蔽，后续如果有该问题对应的告警产生，那么将不会被发送出去。告警屏蔽能减少故障在定位解决过程中，或者服务在发版变更过程中造成的告警，能有效减少无效告警对运维人员造成的困扰，屏蔽可以设置为周期性的，也可以设置为屏蔽某一时段，当然也可以取消屏蔽。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;告警回调&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;当告警规则配置了回调，那么当产生告警，就会调用回调接口，使服务或业务恢复正常。告警回调的目的是当某个服务有告警产生，希望系统能够通过一些自动化的配置，使服务恢复到正常状态，缩短故障恢复的时间，也能够紧急情况下第一时间快速恢复服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;误告标注&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;对于一个问题，用户可以通过误告标注备注该异常是否为误告警。误告标注的主要目的是通过标注让系统开发人员知道异常检测过程中，哪些点还需要提升优化，提高告警的准确性，为用户提供真实有效的告警提供保障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;告警升级&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;当告警发生一定时间仍没有恢复，那么系统就会根据配置自动进行告警升级处理，然后将告警升级信息通过配置发送给对应的人员。告警升级一定程度上是为了缩短MTTA，当告警长时间未恢复，可以认为故障没有及时得到响应，这时就需要更高级别的人员介入处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;如图9所示，每天告警系统会发送大量的告警，当然这些告警会分别发送给不同服务的告警接收人。告警并不是越多越好，而是应该第一时间准确反映出服务的异常情况，所以如何提升有效告警，提高告警准确性，减少告警量至关重要。通过以上系统设计和功能设计能够有效减少重复告警发送。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7583732057416268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/A1HKVXsfHNmcoBCPyxagmsvC3R6iacWfYZ17d59O5jkkiagbMCUfBFwAqH0bW1Zr0UQgjd2IQI0msby5glYU7IUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;836&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图9 主机监控告警次数图&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>