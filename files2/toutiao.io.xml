<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3710ea4f23dcd9ac075e641311ac4367</guid>
<title>iOS 混淆工具探索</title>
<link>https://toutiao.io/k/izfw6j4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7acd7b7a2498a76e2d32fa7cdd17f421</guid>
<title>值得收藏，揭秘 MySQL 多版本并发控制实现原理</title>
<link>https://toutiao.io/k/r59u142</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;▲&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 点击上方“架构精进之路”&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;“01”&lt;/span&gt;&lt;span&gt;领&lt;/span&gt;&lt;span&gt;取「&lt;/span&gt;&lt;span&gt;程序员进阶大礼包&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;这是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;「&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;架构精进之路」公众号&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的第&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;73&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;篇原创文章&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;MySQL 中多版本并发控制（MVCC），是现代数据库引擎实现中常用的处理读写冲突的手段，MVCC 作为 MySQL 高级应用特性，目的在于提高数据库高并发场景下的吞吐性能。&lt;/section&gt;&lt;h2&gt;一、MVCC出现背景是什么？&lt;/h2&gt;&lt;section&gt;事务的4个隔离级别以及对应的3种异常：&lt;br/&gt;&lt;img data-ratio=&quot;0.521412471825695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibzmFlVkPTnUJnF2CsFRGlCHZAdibiaeeNptfr2uEJvOMBh88mhASv5JZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1331&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;脏读：一个事务读取到了另外一个事务没有提交的数据；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不可重复读：&lt;span&gt;在同一事务中，两次读取同一数据，得到内容不同；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;幻读：&lt;/span&gt;&lt;span&gt;同一事务中，用同样的操作读取两次，得到的记录数不相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;在 MySQL 中，&lt;span&gt;默认的隔离级别是可重复读&lt;/span&gt;，可以解决脏读和不可重复读的问题，但不能解决幻读问题。如果我们想要解决幻读问题，就需要采用串行化的方式，也就是将隔离级别提升到最高，但这样一来就会大幅降低数据库的事务并发能力。&lt;/section&gt;&lt;section&gt;&lt;span&gt;而MVCC就是通过乐观锁的方式来解决不可重复读和幻读问题，它可以在大多数情况下替代行级锁，降低系统的开销。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;MySQL 并发事务会引起更新丢失问题，解决办法是锁，主要分两类：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;二、什么是MVCC，它解决了什么问题？&lt;/h2&gt;&lt;section&gt;MVCC 是通过数据行的多个版本管理来实现数据库的并发控制，简单来说它的思想就是保存数据的历史版本。&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;我们可以通过比较版本号决定数据是否显示出来（具体的规则后面会介绍到），读取数据的时候不需要加锁也可以保证事务的隔离效果。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;通过 MVCC 我们可以解决以下几个问题：&lt;/section&gt;&lt;section&gt;（1）读写之间阻塞的问题，通过 MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力。&lt;/section&gt;&lt;section&gt;（2）降低了死锁的概率。这是因为 MVCC 采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁定必要的行。&lt;/section&gt;&lt;section&gt;（3）解决一致性读的问题。一致性读也被称为快照读，当我们查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果。&lt;/section&gt;&lt;section&gt;解释一下可能难以理解的几个词汇：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;三、应用举例分析&lt;/h2&gt;&lt;section&gt;为了更好地让大家理解MVCC，我们用一个示例场景来说明。&lt;/section&gt;&lt;section&gt;假设有个账户金额表 user_balance，包括三个字段，分别是 username 用户名、balance 余额和 bankcard 卡号，表数据如下所示：&lt;br/&gt;&lt;img data-ratio=&quot;0.41872791519434627&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibparMgWpZztr8GYbIF0KBV2weALNNGj3du2UFot8MzickFkicgfhKzbOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1132&quot;/&gt;&lt;/section&gt;&lt;section&gt;用户 A 和用户 B 之间进行转账，此时数据库管理员想要查询 user_balance 表中的总金额，两个场景存在并发情况，在没有MVCC的情况下，会出现哪些问题呢。&lt;/section&gt;&lt;section&gt;&lt;span&gt;Case1&lt;/span&gt;：因为需要采用加行锁的方式，用户 A 给 B 转账时间等待很久，如下图所示。&lt;br/&gt;&lt;img data-ratio=&quot;0.46637744034707157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ib5ianYUAjlHDGr4baraZdWU1yVJdAibJFicPBXPlvotnCNWhqzWbn6HpRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;922&quot;/&gt;&lt;br/&gt;&lt;span&gt;Case2&lt;/span&gt;：当我们读取的时候用了加行锁，可能会出现死锁的情况，如下图所示。&lt;br/&gt;&lt;img data-ratio=&quot;0.48579545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibjic0XbLW04lLRFGYzhgv76UeZtjpFD1C24SYHkDpA40Jwgxqhf3v0WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot;/&gt;&lt;br/&gt;比如当我们读到 A 有 1000 元的时候，此时 B 开始执行给 A 转账。&lt;/section&gt;&lt;h2&gt;四、InnoDB如何实现MVCC？&lt;/h2&gt;&lt;section&gt;当查询一条记录的时候，执行流程如下：&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;首先获取事务自己的版本号，也就是事务 ID；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;获取 Read View；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;查询得到的数据，然后与 Read View 中的事务版本号进行比较；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最后返回符合规则的数据。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;相关概念&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 事务版本号&lt;/span&gt;&lt;/section&gt;&lt;section&gt;一个自增长的事务ID，用于标记事务执行的先后顺序。&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. Read View&lt;/span&gt;&lt;/section&gt;&lt;section&gt;在 MVCC 机制中，多个事务对同一个行记录进行更新会产生多个历史快照，这些历史快照保存在 Undo Log 里。如果一个事务想要查询这个行记录，需要读取哪个版本的行记录呢？&lt;/section&gt;&lt;section&gt;这时就需要用到 Read View 了，它帮我们解决了行的可见性问题。Read View 保存了当前事务开启时所有活跃（还没有提交）的事务列表，换个角度，可以理解为 Read View 保存了不应该让这个事务看到的其他的事务 ID 列表。&lt;/section&gt;&lt;section&gt;Read VIew 中的几个重要属性：&lt;br/&gt;&lt;img data-ratio=&quot;0.29342105263157897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibUBtWQrUzWJxh0pbutac3pia3tYtG5Wlicof8OKf0B5tLYuVEp76HttiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;760&quot;/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;up_limit_id，活跃的事务中最小的事务 ID；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;trx_ids，系统当前正在活跃的事务 ID 集合；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;low_limit_id，活跃的事务中最大的事务 ID；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;creator_trx_id，创建这个 Read View 的事务 ID。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 行记录的隐藏列&lt;/span&gt;&lt;/section&gt;&lt;section&gt;InnoDB 的叶子节点段存储了数据页，数据页中保存了行记录，在这些行记录中有一些重要的隐藏字段：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. 聚集索引&lt;/span&gt;&lt;/section&gt;&lt;section&gt;聚集索引是指数据库表行中数据的物理顺序与键值的逻辑（索引）顺序相同。一个表只能有一个聚集索引，因为一个表的物理顺序只有一种情况，所以，对应的聚集索引只能有一个。&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. Undo Log&lt;/span&gt;&lt;/section&gt;&lt;section&gt;InnoDB 将行记录快照保存在 Undo Log，可以在回滚段中找到它们，主要用于记录数据被修改之前的日志，在对表信息做修改之前先会把数据拷贝到Undo Log里，当事务进行回滚时可以通过Undo Log里的日志进行数据还原。&lt;/section&gt;&lt;section&gt;回滚段中回滚指针间关联关系，如下图所示：&lt;br/&gt;&lt;img data-ratio=&quot;0.6420047732696897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibOgOQqJruiaTh6FAICEYgHpy9yGFvqL3joLF2yszhtMS5K6HmpxdIIVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;838&quot;/&gt;&lt;span&gt;五、InnoDB是如何解决幻读的？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1、在读已提交的情况下，即使采用了 MVCC 方式也会出现幻读&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.5613425925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ib7xhCkia2PRja08oCFxSNf2UkgHo2u6KVAy3reXZd1yWRO1wbHaT5Dnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;我们同时开启事务 A 和事务 B，先在事务 A 中进行某个条件范围的查询，读取的时候采用排它锁，在事务 B 中增加一条符合该条件范围的数据，并进行提交，然后我们在事务 A 中再次查询该条件范围的数据，就会发现结果集中多出一个符合条件的数据，这样就出现了幻读。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;出现幻读的原因是在读已提交的情况下，InnoDB 只采用记录锁（Record Locking）。&lt;/section&gt;&lt;section&gt;InnoDB 三种行锁的方式：&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2、在可重复读的情况下，InnoDB 可以通过 Next-Key 锁 +MVCC 来解决幻读问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;想插入球员艾利克斯·伦（身高 2.16 米）的时候，事务 B 会超时，无法插入该数据。&lt;/section&gt;&lt;section&gt;这是因为采用了 Next-Key 锁，会将 height&amp;gt;2.08 的范围都进行锁定，就无法插入符合这个范围的数据了。然后事务 A 重新进行条件范围的查询，就不会出现幻读的情况。&lt;img data-ratio=&quot;0.5605726872246696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgSWF9lHzdyW8leTRuN8I92ibAmJT4ekba2QL5LExGBbztAMsPMyeJG9Kn4syOWCYdMaicTpfZnHicvmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1816&quot;/&gt;&lt;/section&gt;&lt;h2&gt;六、总结&lt;/h2&gt;&lt;p&gt;&lt;span&gt;MVCC 的核心就是 Undo Log+ Read View。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时针对不同的隔离级别，Read View 的生成策略不同，也就实现了不同的隔离级别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;🎉&lt;/span&gt; 福利&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;关注公众号回复关键字：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MySQL&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，即可免费获取&lt;strong&gt;《&lt;span&gt;高性能MySQL 第3版》&lt;/span&gt;一套&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;·················· &lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt; ··················&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注公众号，免费领学习资料&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;十年研发路，大厂架构师，&lt;/span&gt;&lt;span&gt;CSDN博客专家&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;专注架构技术学习及分享，职业与认知升级&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;坚持分享接地气儿的干货，&lt;span&gt;期待与你一起成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;往期热文推荐：&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「架构精进之路」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97708&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;点“赞”和“在看”哦&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.5925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/noz2jw2hPlWiaCrGuJxBicU5mcib3QapDLyo6eKnNVm9dPTV4Z1SicHLtrCCwOG9gblMBFlKf7p9cvwL6wIkZJvamg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;135&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fa9d7005e91a8e974312da240e159e7d</guid>
<title>如何做到 4 天上线一个小程序？</title>
<link>https://toutiao.io/k/4w4by6z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5472222222222223&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnMnSl9vAghH8hS3ibsckPOfcFHicAMdiaI4UZiaETIic5uvicC5nDLsticDpGpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自 6 月 6 号上线 “黑客说” 网页版（hackertalk.net）以来吸引了很多用户，为了进一步完善终端体验，我们决定复用已有的技术栈，实现微信端小程序，前后开发仅花了4天，本文主要从技术的角度讨论我们如何快速上线小程序。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7289719626168224&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnM3INq4SAWdibiaUbrYkFBrBztRt7sAcxxwiagq4Dxu8k1d2maGnRgibhqYA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;黑客说是什么 ？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我们专门为程序员群体定制的交流平台，有及时技术资讯、高质量技术问答、实用编程经验分享，还有程序员的日常生活。接近 500 个编程相关垂直话题。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32297447280799113&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnM1qeW3xAFHBY0aZZhm6rZpTriakpwfjIialW4xtSNIibdeEO7lbqSuIFNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;901&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个高度定制的 Markdown 编辑器：所见即所得，再也不用分屏预览了～&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4826086956521739&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnMRJQjzwvF8ibHTBOibM0anniaFsCkjlKoibVKCv2DeWtMCWuwEXESvYibicEA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;690&quot;/&gt;&lt;figcaption&gt;网页版编辑器：插入 latex 公式&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4826086956521739&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnMicDcDlyHvSvysZEPry2e3ibzIeNvAqbhQlvILxB2qrCFbYUFaBjNwc9Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;690&quot;/&gt;&lt;figcaption&gt;网页版编辑器：插入 markdown 文本&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感兴趣的小伙伴可以戳下面链接直接体验小程序版本 👇👇&lt;/p&gt;&lt;p&gt;&lt;mp-miniprogram data-miniprogram-appid=&quot;wx815bfb420a5256e3&quot; data-miniprogram-path=&quot;pages/post/index?id=189392795524841472&quot; data-miniprogram-nickname=&quot;黑客说&quot; data-miniprogram-avatar=&quot;http://mmbiz.qpic.cn/mmbiz_png/UAvN7J9XxS85wcQ2kbPrpp1dEd68bUtdI9PPmbEjG8YgZ9ibtzqn7SHH0IFUotqItjqSUZVyjv6Po6hd0STEYQw/640?wx_fmt=png&amp;amp;wxfrom=200&quot; data-miniprogram-title=&quot;黑客说第一帖：Happy hacking!&quot; data-miniprogram-imageurl=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnMJB90XF7f8vMFAknwsphO04lQXdS4H7g3D8szGSGe1uhIYZUFeBBKRw/0?wx_fmt=jpeg&quot; data-miniprogram-type=&quot;card&quot; data-miniprogram-servicetype=&quot;0&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;网页端技术栈&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了代码更好地复用和维护，我们在 Vue 和 React 中选择了 React，网页端主要技术栈如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;react + typescript + redux + immer + redux-saga + axios + tailwindcss + fakerjs&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;typescript 项目必备，极大提高代码正确性和可维护性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;immer 替代了传统的 immutablejs 方案，在 reducer 中实现类似 vue 的直接数值操作（简洁性），同时保持 immutable 数据流的优点（可维护性）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;saga 保持了API接口调用的简洁性、可调试性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;axios 封装了 http 请求，可以通过自定义 adapter 适应不同终端运行环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;tailwindcss 通过原子化的 css 大大降低了样式文件体积，加快网页加载速度，也很大程度降低了小程序包体积（2MB 限制），更多的代码空间可以用于 UI 界面和 JS 逻辑&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;fakerjs 用于模拟数据，在开发环境中注入数据到 redux，方便调试&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小程序端技术栈&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序端技术栈和网页端高度重合（这也是我们能够快速上线应用的原因），其中最大的变化是由 react 变为 react + taro。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Taro 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN 等应用&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序端开发可谓混乱至极，原生代码难以组织、难以维护，通常都需要一些框架进行封装，Taro 是我们在使用了几个不同方案后决定采纳的，和 react 高度重合，可以直接使用 hook，极大提高代码复用的可能性（这是以前积累的经验基础）。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;APP 端技术栈&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前黑客说还没有上线相关 APP，技术栈复用可以直接将 react 换为 react-native。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;代码文件组织&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组织良好的代码是高度复用的关键，我们采用 components + containers 的代码分割方式，严格规范代码组织方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;UI 界面相关组件只能放在 components 文件夹，无状态，不能耦合任何状态管理库相关代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据注入的容器组件只能放于 containers 文件夹，不能包含任何 UI 相关代码，比如 &lt;code&gt;div&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块化、原子化：代码分层设计，实现组件高度复用，保持应用一致性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件夹布局如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;├── assets     固定资源文件：图片、文字、svg 等&lt;br/&gt;├── components 纯 UI 组件&lt;br/&gt;├── constants  全局常量&lt;br/&gt;├── containers 纯容器组件&lt;br/&gt;├── hooks      自定义 hooks&lt;br/&gt;├── layout     布局相关 UI 逻辑&lt;br/&gt;├── locales    国际化相关&lt;br/&gt;├── pages      整页逻辑&lt;br/&gt;├── services   API 接口代码&lt;br/&gt;├── store      状态管理代码&lt;br/&gt;├── styles     样式代码&lt;br/&gt;├── types      ts 类型声明&lt;br/&gt;└── utils      公共工具类&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Store 状态管理&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;├── actions&lt;br/&gt;├── reducers&lt;br/&gt;├── sagas&lt;br/&gt;├── selectors&lt;br/&gt;└── types&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;saga 调用 API 代码组织如下：调用调试非常方便&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;* &lt;span&gt;getPostById&lt;/span&gt;(&lt;span&gt;action: ReduxAction&lt;/span&gt;): &lt;span&gt;any&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; res = &lt;span&gt;yield&lt;/span&gt; call(postApi.getPostById, action.payload);&lt;br/&gt;    &lt;span&gt;yield&lt;/span&gt; put({ &lt;span&gt;type&lt;/span&gt;: T.GET_POST_SUCCESS, payload: res.data.data });&lt;br/&gt;    action.resolve?.();&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;    action.reject?.();&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中的 postApi 来自 services 文件夹：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPostById&lt;/span&gt;(&lt;span&gt;id: &lt;span&gt;string&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; axios.get&amp;lt;R&amp;lt;Post&amp;gt;&amp;gt;(&lt;span&gt;`/v1/posts/by_id/&lt;span&gt;${id}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小程序端特殊适配&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Cookie&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于小程序端无法支持 http cookie，无法像浏览器一样使用 cookie 机制保证安全性和维护用户登录状态，我们需要手动模拟一个 cookie 机制，这里我们推荐使用京东开源的一个方案：&lt;strong&gt;京东购物小程序cookie方案实践&lt;/strong&gt;，可以实现 cookie 过期、多 cookie 功能。其原理使用了 localstorage 替代 cookie。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Http Request&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序端只能使用 &lt;code&gt;wx.request&lt;/code&gt; 进行 http 请求，如果大量 API 直接使用这个接口编写，代码将难以维护和复用，我们使用 axios 的 adapter 模式封装 &lt;code&gt;wx.request&lt;/code&gt; ，请求结果和 error 都按 axios 数据格式进行加工。这样我们就能够直接在小程序端使用 axios 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;转换请求参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;toQueryStr&lt;/span&gt;(&lt;span&gt;obj: &lt;span&gt;any&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!obj) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; arr: &lt;span&gt;string&lt;/span&gt;[] = [];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;const&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; obj) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (obj.hasOwnProperty(p)) {&lt;br/&gt;      arr.push(p + &lt;span&gt;&#x27;=&#x27;&lt;/span&gt; + &lt;span&gt;encodeURIComponent&lt;/span&gt;(obj[p]));&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&#x27;?&#x27;&lt;/span&gt; + arr.join(&lt;span&gt;&#x27;&amp;amp;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;axios 适配器模式（CookieUtil 代码参考上文京东的例子）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;axios.defaults.adapter = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;config: AxiosRequestConfig&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 请求字段拼接&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; url = &lt;span&gt;&#x27;https://api.example.com&#x27;&lt;/span&gt; + config.url;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (config.params) {&lt;br/&gt;      url += toQueryStr(config.params);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 常规请求封装&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;(&lt;span&gt;resolve: (&lt;span&gt;r: AxiosResponse&lt;/span&gt;) =&amp;gt; &lt;span&gt;void&lt;/span&gt;, reject: (&lt;span&gt;e: AxiosError&lt;/span&gt;) =&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      wx.request({&lt;br/&gt;        url: url,&lt;br/&gt;        method: config.method,&lt;br/&gt;        data: config.data,&lt;br/&gt;        header: {&lt;br/&gt;          &lt;span&gt;&#x27;Cookie&#x27;&lt;/span&gt;: CookieUtil.getCookiesStr(),&lt;br/&gt;          &lt;span&gt;&#x27;X-XSRF-TOKEN&#x27;&lt;/span&gt;: CookieUtil.getCookie(&lt;span&gt;&#x27;XSRF-TOKEN&#x27;&lt;/span&gt;)&lt;br/&gt;        },&lt;br/&gt;        success: &lt;span&gt;(&lt;span&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;          &lt;span&gt;const&lt;/span&gt; setCookieStr = res.header[&lt;span&gt;&#x27;Set-Cookie&#x27;&lt;/span&gt;] || res.header[&lt;span&gt;&#x27;set-cookie&#x27;&lt;/span&gt;];&lt;br/&gt;          CookieUtil.setCookieFromHeader(setCookieStr);&lt;br/&gt;&lt;br/&gt;          &lt;span&gt;const&lt;/span&gt; axiosRes: AxiosResponse = {&lt;br/&gt;            data: res.data,&lt;br/&gt;            status: res.statusCode,&lt;br/&gt;            statusText: StatusText[res.statusCode] &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;,&lt;br/&gt;            headers: res.header,&lt;br/&gt;            config&lt;br/&gt;          };&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (res.statusCode &amp;lt; &lt;span&gt;400&lt;/span&gt;) {&lt;br/&gt;            resolve(axiosRes);&lt;br/&gt;          } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; axiosErr: AxiosError = {&lt;br/&gt;              name: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;              message: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;              config,&lt;br/&gt;              response: axiosRes,&lt;br/&gt;              isAxiosError: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;              toJSON: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; res&lt;br/&gt;            };&lt;br/&gt;            reject(axiosErr);&lt;br/&gt;          }&lt;br/&gt;        },&lt;br/&gt;        fail: &lt;span&gt;(&lt;span&gt;e: &lt;span&gt;any&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;          &lt;span&gt;const&lt;/span&gt; axiosErr: AxiosError = {&lt;br/&gt;            name: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;            message: &lt;span&gt;&#x27;&#x27;&lt;/span&gt;,&lt;br/&gt;            config,&lt;br/&gt;            isAxiosError: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;            toJSON: &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; e&lt;br/&gt;          };&lt;br/&gt;          reject(axiosErr);&lt;br/&gt;        }&lt;br/&gt;      });&lt;br/&gt;    });&lt;br/&gt;  };&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;axios 适配完成后原先 API 相关代码无需改动一行即可直接复用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Message&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息弹窗和 toast 不能运行在小程序端，我们通过接口兼容实现代码复用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * @author z0000&lt;br/&gt; * @version 1.0&lt;br/&gt; * message 弹窗，api 接口参考 antd，小程序向此接口兼容&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Taro &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@tarojs/taro&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; log &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./log&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; message = {&lt;br/&gt;  info(content: &lt;span&gt;string&lt;/span&gt;, duration = &lt;span&gt;1500&lt;/span&gt;) {&lt;br/&gt;    Taro.showToast({ title: content, icon: &lt;span&gt;&#x27;none&#x27;&lt;/span&gt;, duration })&lt;br/&gt;      .catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;showToast error: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  success(content: &lt;span&gt;string&lt;/span&gt;, duration = &lt;span&gt;1500&lt;/span&gt;) {&lt;br/&gt;    Taro.showToast({ title: content, icon: &lt;span&gt;&#x27;success&#x27;&lt;/span&gt;, duration })&lt;br/&gt;      .catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;showToast error: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  warn(content: &lt;span&gt;string&lt;/span&gt;, duration = &lt;span&gt;1500&lt;/span&gt;) {&lt;br/&gt;    Taro.showToast({ title: content, icon: &lt;span&gt;&#x27;none&#x27;&lt;/span&gt;, duration })&lt;br/&gt;      .catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;showToast error: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  error(content: &lt;span&gt;string&lt;/span&gt;, duration = &lt;span&gt;1500&lt;/span&gt;) {&lt;br/&gt;    Taro.showToast({ title: content, icon: &lt;span&gt;&#x27;none&#x27;&lt;/span&gt;, duration })&lt;br/&gt;      .catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;showToast error: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars&lt;/span&gt;&lt;br/&gt;  loading(content: &lt;span&gt;string&lt;/span&gt;, _duration = &lt;span&gt;1500&lt;/span&gt;) {&lt;br/&gt;    Taro.showLoading({ title: content })&lt;br/&gt;      .catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;showLoading error: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  destroy() {&lt;br/&gt;    Taro.hideLoading();&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; message;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里接口参考的 Antd 的 Message API，实现浏览器端和小程序端的兼容。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;History&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序端 history 机制和浏览器端不一样，为了代码复用，我们将小程序路由 API 转换适配浏览器端接口（react router 的 history 方法）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * common api 小程序向 react router 的 history 方法兼容&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Taro &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@tarojs/taro&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; log &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./log&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; history = {&lt;br/&gt;  &lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 增加query对象方法&lt;/span&gt;&lt;br/&gt;  push(path: &lt;span&gt;string&lt;/span&gt;) {&lt;br/&gt;    Taro.navigateTo({ url: &lt;span&gt;&#x27;/pages&#x27;&lt;/span&gt; + path }).catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;navigateTo fail: &#x27;&lt;/span&gt;, e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  replace(path: &lt;span&gt;string&lt;/span&gt;) {&lt;br/&gt;    Taro.redirectTo({ url: path }).catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;redirectTo fail: &#x27;&lt;/span&gt;,e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  go(n: &lt;span&gt;number&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (n &amp;gt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.error(&lt;span&gt;&#x27;positive number not support in wx environment&#x27;&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    Taro.navigateBack({ delta: &lt;span&gt;-1&lt;/span&gt; * n }).catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;navigateBack fail: &#x27;&lt;/span&gt;,e));&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  goBack() {&lt;br/&gt;    Taro.navigateBack({ delta: &lt;span&gt;1&lt;/span&gt; }).catch(&lt;span&gt;&lt;span&gt;e&lt;/span&gt; =&amp;gt;&lt;/span&gt; log.error(&lt;span&gt;&#x27;navigateBack fail: &#x27;&lt;/span&gt;,e));&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; history;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后批量搜索代码中 &lt;code&gt;useHistory&lt;/code&gt; 相关 hook 代码，转换为上述实现即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Router&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序端不能直接使用 react-router 类似的路由管理方案，受益于代码模块化分割，大部分代码并没有耦合 react-router-dom 相关的东西，最多的就是 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 组件，这里我们小小改造一下 Link 组件，批量替代即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import { FC, useCallback } from &#x27;react&#x27;;&lt;br/&gt;import Taro from &#x27;@tarojs/taro&#x27;;&lt;br/&gt;import { View } from &#x27;@tarojs/components&#x27;;&lt;br/&gt;import { LinkProps } from &#x27;react-router-dom&#x27;;&lt;br/&gt;&lt;br/&gt;const Index: FC&amp;lt;LinkProps&amp;gt; = ({ to, ...props}) =&amp;gt; {&lt;br/&gt;&lt;br/&gt;  const onClick = useCallback(e =&amp;gt; {&lt;br/&gt;    e.stopPropagation();&lt;br/&gt;    Taro.navigateTo({ url: &#x27;/pages&#x27; + to as string });&lt;br/&gt;  }, [to]);&lt;br/&gt;&lt;br/&gt;  // @ts-ignore&lt;br/&gt;  return &amp;lt;View {...props} onClick={onClick}&amp;gt;{props.children}&amp;lt;/View&amp;gt;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;export default Index;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是 &lt;code&gt;Taro.navigateTo&lt;/code&gt; 不能直接跳转 Tab 页面，所有最终代码完成后需要 search + 测试覆盖检查相关问题。当然，你也可以在上面代码中检查 to 参数是否为 tab 页面，切换成 &lt;code&gt;Taro.switchTab&lt;/code&gt; 方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Path Params&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小程序不支持类似 &lt;code&gt;/post/:id&lt;/code&gt; 的路由参数，我们需要将路由参数转换为：&lt;code&gt;/post?id=xx&lt;/code&gt;，这个转换通过 IDE 搜索，批量 replace 即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CSS&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于小程序端的 rpx 单位、px 单位直接使用会有很大的复用问题，导致网页端往小程序端迁移时需要大量改造 HTML 代码，这里我们使用 sass 实现了 tailwindcss 类似的功能（针对小程序端进行改造），通过变量开关切换单位，可以做到不同设计稿代码也能兼容（375px 和 750px 或者 rpx，rem 单位都可以直接兼容）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设计复用有时比代码复用更加重要，这是用户体验一致性的前提，幸运的是 tailwincss 之类的方案选型让我们很容易做到这一点，我们后续将开源小程序端 tailwindcss 代码，敬请期待。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;团队协作&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;协作也是很重要的一环，产品成功离不开高效合作，我们使用 google doc 全家桶进行协作，包括项目文档、需求、任务管理、邮件，google 全家桶最大的好处就是多端支持，这是目前支持终端最多、协作最方便的工具。linux + android + ios + ipad + windows + mac 都能无缝同步协作。方便设计师、产品经理、程序员共同工作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎各位体验～&lt;/p&gt;&lt;p&gt;&lt;mp-miniprogram data-miniprogram-appid=&quot;wx815bfb420a5256e3&quot; data-miniprogram-path=&quot;pages/post/index?id=189392795524841472&quot; data-miniprogram-nickname=&quot;黑客说&quot; data-miniprogram-avatar=&quot;http://mmbiz.qpic.cn/mmbiz_png/UAvN7J9XxS85wcQ2kbPrpp1dEd68bUtdI9PPmbEjG8YgZ9ibtzqn7SHH0IFUotqItjqSUZVyjv6Po6hd0STEYQw/640?wx_fmt=png&amp;amp;wxfrom=200&quot; data-miniprogram-title=&quot;黑客说第一帖：Happy hacking!&quot; data-miniprogram-imageurl=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/XyyqpRDrAeNH25ickiaKXrlj76LWRkObnMJB90XF7f8vMFAknwsphO04lQXdS4H7g3D8szGSGe1uhIYZUFeBBKRw/0?wx_fmt=jpeg&quot; data-miniprogram-type=&quot;card&quot; data-miniprogram-servicetype=&quot;0&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5bb7d83e06a7f560d6f440a257610026</guid>
<title>Docker 安装 Jenkins</title>
<link>https://toutiao.io/k/rw7auj4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 部署jenkins&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 创建jenkins的工作目录&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;//创建工作目录 &lt;br/&gt;mkdir /var/jenkins_home&lt;br/&gt;&lt;br/&gt;//赋予权限 &lt;br/&gt;chown -R 1000 /var/jenkins_home&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2 通过docker部署&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2.1 拉取镜像&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;docker pull  jenkinsci/blueocean&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2.2 生成容器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#注意：切换一行执行命令 &lt;/span&gt;&lt;br/&gt;docker run -u root -d -p 8080:8080 -p 50000:50000 &lt;br/&gt; -v /var/jenkins_home:/var/jenkins_home &lt;br/&gt; -v /usr/bin/docker:/usr/bin/docker  &lt;br/&gt; -v /var/run/docker.sock:/var/run/docker.sock  &lt;br/&gt; -v /usr/&lt;span&gt;local&lt;/span&gt;/bin/docker-compose:/usr/&lt;span&gt;local&lt;/span&gt;/bin/docker-compose &lt;br/&gt; jenkinsci/blueocean &lt;br/&gt; &lt;br/&gt; 一行显示:&lt;br/&gt;docker run -u root -d -p 8080:8080 -p 50000:50000 -v /var/jenkins_home:/var/jenkins_home  -v /usr/bin/docker:/usr/bin/docker   -v /var/run/docker.sock:/var/run/docker.sock   -v /usr/&lt;span&gt;local&lt;/span&gt;/bin/docker-compose:/usr/&lt;span&gt;local&lt;/span&gt;/bin/docker-compose  jenkinsci/blueocean &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3 通过docker-compose部署&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行docker-compose脚本&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;version: &lt;span&gt;&#x27;3.4&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;services:&lt;br/&gt;  jenkins:&lt;br/&gt;    container_name: jenkins&lt;br/&gt;    image: jenkinsci/blueocean&lt;br/&gt;    ports:&lt;br/&gt;      - &lt;span&gt;&quot;8080:8080&quot;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&quot;50000:50000&quot;&lt;/span&gt;&lt;br/&gt;    restart: always&lt;br/&gt;    user: root&lt;br/&gt;    volumes:&lt;br/&gt;      - &lt;span&gt;&#x27;/var/jenkins_home:/var/jenkins_home&#x27;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&#x27;/usr/bin/docker:/usr/bin/docker&#x27;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&#x27;/var/run/docker.sock:/var/run/docker.sock&#x27;&lt;/span&gt;&lt;br/&gt;      - &lt;span&gt;&#x27;/usr/local/bin/docker-compose:/usr/local/bin/docker-compose&#x27;&lt;/span&gt;&lt;br/&gt;    environment:&lt;br/&gt;      - TZ=Asia/Shanghai&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3.1 执行命令生成容器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;docker-compose -f docker-compose.yaml up --build -d jenkins&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 访问jenkins网站&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问地址：http://IP:8080&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5780998389694042&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqLxLeo3bVTuM356YYGHyvj01u5QHVaEUbNPCa4iaJUmB8dDf77ApI2jM3U12fHFuRkibQ6zxH8veuEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;621&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 寻找超级管理员密码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入容器，然后去容器的执行目录下查找管理员的密码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 进入容器 &lt;br/&gt;docker &lt;span&gt;exec&lt;/span&gt; -it 容器ID bash &lt;br/&gt;// 查看密码 &lt;br/&gt;cat /var/jenkins_home/secrets/initialAdminPassword&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1523046092184369&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqLxLeo3bVTuM356YYGHyvj0UYqlDcVHkGqdWnbIib8vzdwdsViaBEBWicyMlUibRlV3ACzr5HC7IrecoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;499&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入找到的管理员密码然后进入系统&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 进入jenkins&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新手入门，选择安装插件的方式，这里我们直接选择安装推荐的插件然后进入系统&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：安装插件报错的话继续在执行一遍。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 设置管理员用户密码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建管理员用户密码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5379061371841155&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gtQF7ojZDqLxLeo3bVTuM356YYGHyvj0KSfQ2me5FrWQAW0OZ9gNsbmjghjYM0AqSxibF6eL9Mn9zDGUmqmulibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4 系统界面&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果系统管理里面有错误，那么我们可以手动安装和修改。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.5 修改镜像源&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件管理-&amp;gt;高级-&amp;gt;升级站点，修改为清华大学插件源&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 清华大学官方镜像&lt;/span&gt;&lt;br/&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3 错误&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果出现错误，那么就需要去查看控制台输出，根据错误找原因。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 IPv4 forwarding is disabled&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意思就是linux没有开启 Ipv4 数据包转发功能&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以先尝试重启docker，如果没有作用可以修改下面配置&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# 1. 打开 sysctl.conf&lt;/span&gt;&lt;br/&gt;vim /etc/sysctl.conf&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 2.添加下面一行&lt;/span&gt;&lt;br/&gt;net.ipv4.ip_forward=1&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 3.重启 network 和 docker&lt;/span&gt;&lt;br/&gt;systemctl restart network &amp;amp;&amp;amp; systemctl restart docker&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4 参考文档&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;官方文档：https://www.jenkins.io/doc/book/installing/docker/&lt;/p&gt;&lt;p&gt;xiaoxiaotank：https://www.cnblogs.com/xiaoxiaotank/p/14762665.html&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>47c98034d0f2b300dda92501a8c461fb</guid>
<title>Spring Boot 实战笔记：记一次接口 406 错误的解决</title>
<link>https://toutiao.io/k/k5cwr0j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;　　在对一个遗留老系统使用SpringBoot框架进行重写的过程中，遇到了一个奇怪的问题：即当服务使用SpringBoot的main入口独立启动的时候，接口访问一切正常，但是当项目被打成war包运行在Tomcat中时，调用接口就会返回&lt;code&gt;406 Not Acceptable&lt;/code&gt;错误，而由于运维等层面考虑，服务仍然要在Tomcat中运行一段时间作为过渡，因此不管是从对技术追求的态度上，还是从实际需求出发，这都是个不得不解决的问题。&lt;/p&gt;&lt;h2&gt;错误原因分析&lt;/h2&gt;&lt;p&gt;　　要解决问题，首先我们需要知道，406错误出现的直接原因是什么。在一次HTTP请求中，如果服务端对于body内容的类型（即Content-Type）处理上产生了冲突，即会返回406错误状态。&lt;/p&gt;&lt;p&gt;　　SpringBoot处理Content-Type的具体代码入口在&lt;br/&gt;&lt;code&gt;org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor&lt;/code&gt;的方法&lt;code&gt;writeWithMessageConverters&lt;/code&gt;中，其中一段如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;HttpServletRequest request &lt;span&gt;=&lt;/span&gt; inputMessage&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getServletRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; requestedMediaTypes &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getAcceptableMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; producibleMediaTypes &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getProducibleMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;,&lt;/span&gt; valueType&lt;span&gt;,&lt;/span&gt; declaredType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;outputValue &lt;span&gt;!=&lt;/span&gt; null &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; producibleMediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;IllegalArgumentException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;No converter found for return value of type: &quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; valueType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Set&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; compatibleMediaTypes &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;LinkedHashSet&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;MediaType requestedType &lt;span&gt;:&lt;/span&gt; requestedMediaTypes&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;MediaType producibleType &lt;span&gt;:&lt;/span&gt; producibleMediaTypes&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;requestedType&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isCompatibleWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;producibleType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            compatibleMediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;getMostSpecificMediaType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;requestedType&lt;span&gt;,&lt;/span&gt; producibleType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;compatibleMediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;outputValue &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;HttpMediaTypeNotAcceptableException&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;producibleMediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　可看到，其逻辑是，在当前请求可选的MediaType和接口要生成的MediaType中进行匹配，如果匹配不到，即会抛出&lt;code&gt;HttpMediaTypeNotAcceptableException&lt;/code&gt;异常从而导致返回406错误。回到我们的项目，接口都是@RestController注解，因此producibleMediaTypes只能是&lt;code&gt;application/json&lt;/code&gt;这一类，所以我们需要看requestedMediaTypes是什么。&lt;/p&gt;&lt;p&gt;　　继续深入源码，getAcceptableMediaTypes方法如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;getAcceptableMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;HttpServletRequest request&lt;span&gt;)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; HttpMediaTypeNotAcceptableException &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; mediaTypes &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;contentNegotiationManager&lt;span&gt;.&lt;/span&gt;&lt;span&gt;resolveMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;ServletWebRequest&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; Collections&lt;span&gt;.&lt;/span&gt;&lt;span&gt;singletonList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MediaType&lt;span&gt;.&lt;/span&gt;ALL&lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就走到了&lt;code&gt;org.springframework.web.accept.ContentNegotiationManager&lt;/code&gt;的&lt;code&gt;resolveMediaTypes&lt;/code&gt;方法&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;resolveMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;NativeWebRequest request&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throws&lt;/span&gt; HttpMediaTypeNotAcceptableException &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;ContentNegotiationStrategy strategy &lt;span&gt;:&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;strategies&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; mediaTypes &lt;span&gt;=&lt;/span&gt; strategy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;resolveMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;request&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;equals&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;MEDIA_TYPE_ALL&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; mediaTypes&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Collections&lt;span&gt;.&lt;/span&gt;&lt;span&gt;emptyList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的strategies集合通过&lt;code&gt;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&lt;/code&gt;进行初始化&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ContentNegotiationStrategy&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; strategies &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;ContentNegotiationStrategy&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;favorPathExtension&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        PathExtensionContentNegotiationStrategy strategy&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;servletContext &lt;span&gt;!=&lt;/span&gt; null &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;!&lt;/span&gt;&lt;span&gt;isUseJafTurnedOff&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            strategy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ServletPathExtensionContentNegotiationStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;servletContext&lt;span&gt;,&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            strategy &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;PathExtensionContentNegotiationStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        strategy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setIgnoreUnknownExtensions&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ignoreUnknownPathExtensions&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;useJaf &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            strategy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setUseJaf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;useJaf&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        strategies&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;favorParameter&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        ParameterContentNegotiationStrategy strategy &lt;span&gt;=&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ParameterContentNegotiationStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        strategy&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setParameterName&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;parameterName&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        strategies&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;ignoreAcceptHeader&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        strategies&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; &lt;span&gt;HeaderContentNegotiationStrategy&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;defaultNegotiationStrategy &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        strategies&lt;span&gt;.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;defaultNegotiationStrategy&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;contentNegotiationManager &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ContentNegotiationManager&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;strategies&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按照SpringBoot的默认逻辑，如果运行在容器中，会产生&lt;code&gt;ServletPathExtensionContentNegotiationStrategy, HeaderContentNegotiationStrategy&lt;/code&gt;策略集合，而如果独立运行的话，产生的策略集合是&lt;code&gt;PathExtensionContentNegotiationStrategy, HeaderContentNegotiationStrategy&lt;/code&gt;，可以看到两者的默认首选策略不一样。&lt;/p&gt;&lt;p&gt;　　再回到我们的项目，由于是一个遗留老系统，可能前人是为了安全考虑，接口命名都是类似&lt;code&gt;xxx_json.so&lt;/code&gt;这样的，而&lt;code&gt;.so&lt;/code&gt;后缀通常代表类unix系统的库文件。在SpringBoot独立运行的时候，首选使用&lt;code&gt;PathExtensionContentNegotiationStrategy&lt;/code&gt;来决定media type，这个类使用的是SpringBoot自带的&lt;code&gt;org/springframework/mail/javamail/mime.types&lt;/code&gt;映射文件，里面没有针对&lt;code&gt;.so&lt;/code&gt;的映射关系，所以接着调用&lt;code&gt;HeaderContentNegotiationStrategy&lt;/code&gt;策略，这个策略顾名思义，就是读取请求方&lt;code&gt;Accept&lt;/code&gt;头里面的内容，而这个头通常都是&lt;code&gt;*/*&lt;/code&gt;全匹配，所以一切都能够正常运行。当SpringBoot运行在Tomcat中的时候，首选&lt;code&gt;ServletPathExtensionContentNegotiationStrategy&lt;/code&gt;来进行media type判断，这个类是通过调用&lt;code&gt;servletContext.getMimeType()&lt;/code&gt;方法交由容器来进行处理，而在Tomcat中，就没有那么幸运了，&lt;code&gt;.so&lt;/code&gt;被视为二进制文件映射成了&lt;code&gt;application/octet-stream&lt;/code&gt;，因此和接口返回格式不匹配，导致SpringBoot产生了406错误。&lt;/p&gt;&lt;h2&gt;解决方案&lt;/h2&gt;&lt;p&gt;　　找到了问题根源，解决办法也就有了，在不修改接口命名的前提下，就是想办法人为的把&lt;code&gt;.so&lt;/code&gt;映射到&lt;code&gt;application/json&lt;/code&gt;就行了。那么回到上面的&lt;code&gt;org.springframework.web.accept.ContentNegotiationStrategy&lt;/code&gt;接口的&lt;code&gt;resolveMediaTypes&lt;/code&gt;方法中，看到在默认抽象类&lt;code&gt;org.springframework.web.accept.AbstractMappingContentNegotiationStrategy&lt;/code&gt;中的实现方式如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;resolveMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;NativeWebRequest webRequest&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throws&lt;/span&gt; HttpMediaTypeNotAcceptableException &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;resolveMediaTypeKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;webRequest&lt;span&gt;,&lt;/span&gt; &lt;span&gt;getMediaTypeKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;webRequest&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * An alternative to {@link #resolveMediaTypes(NativeWebRequest)} that accepts&lt;br/&gt; * an already extracted key.&lt;br/&gt; * @since 3.2.16&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; List&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;resolveMediaTypeKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;NativeWebRequest webRequest&lt;span&gt;,&lt;/span&gt; String key&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;throws&lt;/span&gt; HttpMediaTypeNotAcceptableException &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;StringUtils&lt;span&gt;.&lt;/span&gt;&lt;span&gt;hasText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        MediaType mediaType &lt;span&gt;=&lt;/span&gt; &lt;span&gt;lookupMediaType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;mediaType &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;handleMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Collections&lt;span&gt;.&lt;/span&gt;&lt;span&gt;singletonList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;        mediaType &lt;span&gt;=&lt;/span&gt; &lt;span&gt;handleNoMatch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;webRequest&lt;span&gt;,&lt;/span&gt; key&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;mediaType &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;addMapping&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;key&lt;span&gt;,&lt;/span&gt; mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; Collections&lt;span&gt;.&lt;/span&gt;&lt;span&gt;singletonList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Collections&lt;span&gt;.&lt;/span&gt;&lt;span&gt;emptyList&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要提到的是，以上说的逻辑，无论&lt;code&gt;PathExtensionContentNegotiationStrategy&lt;/code&gt;还是&lt;code&gt;ServletPathExtensionContentNegotiationStrategy&lt;/code&gt;都是发生在&lt;code&gt;handleNoMatch&lt;/code&gt;中的，如果&lt;code&gt;lookupMediaType&lt;/code&gt;方法能直接查到的话，就可以避免这个问题了， 查看lookupMediaType方法如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * Use this method for a reverse lookup from extension to MediaType.&lt;br/&gt; * @return a MediaType for the key, or {@code null} if none found&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;protected&lt;/span&gt; MediaType &lt;span&gt;lookupMediaType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String extension&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;extension&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toLowerCase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Locale&lt;span&gt;.&lt;/span&gt;ENGLISH&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这其中的mediaTypes就是通过上面的&lt;code&gt;ContentNegotiationManagerFactoryBean&lt;/code&gt;进行设置的，那么回到这个类中，可以看到有如下方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * Add a mapping from a key, extracted from a path extension or a query&lt;br/&gt; * parameter, to a MediaType. This is required in order for the parameter&lt;br/&gt; * strategy to work. Any extensions explicitly registered here are also&lt;br/&gt; * whitelisted for the purpose of Reflected File Download attack detection&lt;br/&gt; * (see Spring Framework reference documentation for more details on RFD&lt;br/&gt; * attack protection).&lt;br/&gt; * &amp;lt;p&amp;gt;The path extension strategy will also try to use&lt;br/&gt; * {@link ServletContext#getMimeType} and JAF (if present) to resolve path&lt;br/&gt; * extensions. To change this behavior see the {@link #useJaf} property.&lt;br/&gt; * @param mediaTypes media type mappings&lt;br/&gt; * @see #addMediaType(String, MediaType)&lt;br/&gt; * @see #addMediaTypes(Map)&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Properties mediaTypes&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;CollectionUtils&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;Entry&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;Object&lt;span&gt;,&lt;/span&gt; Object&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; entry &lt;span&gt;:&lt;/span&gt; mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;entrySet&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;            String extension &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String&lt;span&gt;)&lt;/span&gt;entry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getKey&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;toLowerCase&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Locale&lt;span&gt;.&lt;/span&gt;ENGLISH&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;            MediaType mediaType &lt;span&gt;=&lt;/span&gt; MediaType&lt;span&gt;.&lt;/span&gt;&lt;span&gt;valueOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String&lt;span&gt;)&lt;/span&gt; entry&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getValue&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;extension&lt;span&gt;,&lt;/span&gt; mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * An alternative to {@link #setMediaTypes} for use in Java code.&lt;br/&gt; * @see #setMediaTypes&lt;br/&gt; * @see #addMediaTypes&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addMediaType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;String fileExtension&lt;span&gt;,&lt;/span&gt; MediaType mediaType&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;fileExtension&lt;span&gt;,&lt;/span&gt; mediaType&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * An alternative to {@link #setMediaTypes} for use in Java code.&lt;br/&gt; * @see #setMediaTypes&lt;br/&gt; * @see #addMediaType&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addMediaTypes&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;Map&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;String&lt;span&gt;,&lt;/span&gt; MediaType&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; mediaTypes&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;mediaTypes &lt;span&gt;!=&lt;/span&gt; null&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;mediaTypes&lt;span&gt;.&lt;/span&gt;&lt;span&gt;putAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;mediaTypes&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这几个方法都可以去手动添加media type映射，那么就简单了，在SpringBoot启动的时候，获取&lt;code&gt;ContentNegotiationManagerFactoryBean&lt;/code&gt;对象，手动添加映射就可以了&lt;/p&gt;&lt;p&gt;　　具体实现方式如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;MyWebMvcConfig&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;WebMvcConfigurerAdapter&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;configureContentNegotiation&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;ContentNegotiationConfigurer configurer&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;        configurer&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mediaType&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;so&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; MediaType&lt;span&gt;.&lt;/span&gt;APPLICATION_JSON_UTF8&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　补充：&lt;/p&gt;&lt;p&gt;　　在stackoverflow上面，也有人提到了这个问题，参见http://stackoverflow.com/questions/21235472/http-status-406-spring-mvc-4-0-jquery-json/21236862#21236862，提供了一些不同的解决思路，大家也可以去参考&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The main issue here is that the path &lt;code&gt;&quot;/test.htm&quot;&lt;/code&gt; is going to use content negotiation first before checking the value of an &lt;code&gt;Accept&lt;/code&gt; header. With an extension like &lt;code&gt;*.htm&lt;/code&gt;, Spring will use a &lt;code&gt;org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy&lt;/code&gt; and resolve that the acceptable media type to return is &lt;code&gt;text/html&lt;/code&gt; which does not match what &lt;code&gt;MappingJacksonHttpMessageConverter&lt;/code&gt; produces, ie. &lt;code&gt;application/json&lt;/code&gt; and therefore a 406 is returned.&lt;/p&gt;&lt;p&gt;The simple solution is to change the path to something like &lt;code&gt;/test&lt;/code&gt;, in which content negotiation based on the path won&#x27;t resolve any content type for the response. Instead, a different &lt;code&gt;ContentNegotiationStrategy&lt;/code&gt; based on headers will resolve the value of the &lt;code&gt;Accept&lt;/code&gt; header.&lt;/p&gt;&lt;p&gt;The complicated solution is to change the order of the &lt;code&gt;ContentNegotiationStrategy&lt;/code&gt; objects registered with the &lt;code&gt;RequestResponseBodyMethodProcessor&lt;/code&gt; which handles your &lt;code&gt;@ResponseBody&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>