<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c36ddbf0c57ed408bf4e2b29aef66ae5</guid>
<title>[推荐] Go 错误处理最佳实践</title>
<link>https://toutiao.io/k/lodfgxd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body&quot; id=&quot;post-body&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本系列为极客时间 Go 进阶训练营笔记，同步直播更新，预计一周更新 1 ~ 2 篇文章，到 202103 月更新完成&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;/&gt;最佳实践&lt;/h2&gt;&lt;p&gt;太长不看系列，我们总结一下在 go 中 如何处理 error，具体的原因我们会在下面的内容中进行详细的解释&lt;/p&gt;&lt;h3 id=&quot;panic&quot;&gt;&lt;a href=&quot;#panic&quot; class=&quot;headerlink&quot; title=&quot;panic&quot;/&gt;panic&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;在程序启动的时候，如果有强依赖的服务出现故障时 &lt;code&gt;panic&lt;/code&gt; 退出&lt;/li&gt;&lt;li&gt;在程序启动的时候，如果发现有配置明显不符合要求， 可以 &lt;code&gt;panic&lt;/code&gt; 退出（防御编程）&lt;/li&gt;&lt;li&gt;其他情况下只要不是不可恢复的程序错误，都不应该直接 &lt;code&gt;panic&lt;/code&gt; 应该返回 &lt;code&gt;error&lt;/code&gt;&lt;/li&gt;&lt;li&gt;在程序入口处，例如 &lt;code&gt;gin&lt;/code&gt; 中间件需要使用 &lt;code&gt;recovery&lt;/code&gt; 预防 &lt;code&gt;panic&lt;/code&gt; 程序退出&lt;/li&gt;&lt;li&gt;在程序中我们应该避免使用野生的 &lt;code&gt;goroutine&lt;/code&gt;&lt;ol&gt;&lt;li&gt;如果是在请求中需要执行异步任务，应该使用异步 &lt;code&gt;worker&lt;/code&gt; ，消息通知的方式进行处理，避免请求量大时大量 &lt;code&gt;goroutine&lt;/code&gt; 创建&lt;/li&gt;&lt;li&gt;如果需要使用 &lt;code&gt;goroutine&lt;/code&gt; 时，应该使用同一的 &lt;code&gt;Go&lt;/code&gt; 函数进行创建，这个函数中会进行 &lt;code&gt;recovery&lt;/code&gt; ，避免因为野生 &lt;code&gt;goroutine&lt;/code&gt; panic 导致主进程退出&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Go&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f &lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;()&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err := recovery(); err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
                log.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;panic: %+v&quot;&lt;/span&gt;, err)
            }
        }()

        f()
    }()
}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;error&quot;&gt;&lt;a href=&quot;#error&quot; class=&quot;headerlink&quot; title=&quot;error&quot;/&gt;error&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;我们在应用程序中使用 &lt;code&gt;github.com/pkg/errors&lt;/code&gt; 处理应用错误，&lt;strong&gt;注意在公共库当中，我们一般不使用这个&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 应该是函数的最后一个返回值，当 &lt;code&gt;error&lt;/code&gt; 不为 &lt;code&gt;nil&lt;/code&gt; 时，函数的其他返回值是不可用的状态，不应该对其他返回值做任何期待&lt;ol&gt;&lt;li&gt;&lt;code&gt;func f() (io.Reader, *S1, error)&lt;/code&gt; 在这里，我们不知道 &lt;code&gt;io.Reader&lt;/code&gt; 中是否有数据，可能有，也有可能有一部分&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;错误处理的时候应该先判断错误， &lt;code&gt;if err != nil&lt;/code&gt; 出现错误及时返回，使代码是一条流畅的直线，避免过多的嵌套&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// good case&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    a, err := A()
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// ... 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// bad case&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    a, err := A()
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;在&lt;strong&gt;应用程序&lt;/strong&gt;中出现错误时，使用 &lt;code&gt;errors.New&lt;/code&gt; 或者 &lt;code&gt;errors.Errorf&lt;/code&gt; 返回错误&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(u *usecese)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;usecase1&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    money := u.repo.getMoney(uid)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; money &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; {
        errors.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;用户余额不足, uid: %d, money: %d&quot;&lt;/span&gt;, uid, money)
    }
    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;5&quot;&gt;&lt;li&gt;如果是调用&lt;strong&gt;应用程序的&lt;/strong&gt;其他函数出现错误，请直接返回，如果需要携带信息，请使用 &lt;code&gt;errors.WithMessage&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(u *usecese)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;usecase2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    name, err := u.repo.getUserName(uid)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.WithMessage(err, &lt;span class=&quot;hljs-string&quot;&gt;&quot;其他附加信息&quot;&lt;/span&gt;)
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用 &lt;code&gt;errors.Wrap&lt;/code&gt; 添加堆栈信息&lt;ol&gt;&lt;li&gt;切记，不要每个地方都是用 &lt;code&gt;errors.Wrap&lt;/code&gt; 只需要在错误第一次出现时进行 &lt;code&gt;errors.Wrap&lt;/code&gt; 即可&lt;/li&gt;&lt;li&gt;根据场景进行判断是否需要将其他库的原始错误吞掉，例如可以把 &lt;code&gt;repository&lt;/code&gt; 层的数据库相关错误吞掉，返回业务错误码，避免后续我们分割微服务或者更换 &lt;code&gt;ORM&lt;/code&gt; 库时需要去修改上层代码&lt;/li&gt;&lt;li&gt;注意我们在基础库，被大量引入的第三方库编写时一般不使用 &lt;code&gt;errors.Wrap&lt;/code&gt; 避免堆栈信息重复&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    err := json.Unmashal(&amp;amp;a, data)
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(err, &lt;span class=&quot;hljs-string&quot;&gt;&quot;其他附加信息&quot;&lt;/span&gt;)
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;&lt;strong&gt;禁止&lt;/strong&gt;每个出错的地方都打日志，&lt;strong&gt;只需要&lt;/strong&gt;在进程的最开始的地方使用 &lt;code&gt;%+v&lt;/code&gt; 进行统一打印，例如 http/rpc 服务的中间件&lt;/li&gt;&lt;li&gt;错误判断使用 &lt;code&gt;errors.Is&lt;/code&gt; 进行比较&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    err := A()
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; errors.Is(err, io.EOF){
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;9&quot;&gt;&lt;li&gt;错误类型判断，使用 &lt;code&gt;errors.As&lt;/code&gt; 进行赋值&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
    err := A()

    &lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; errA errorA
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; errors.As(err, &amp;amp;errA){
    &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
    }

    &lt;span class=&quot;hljs-comment&quot;&gt;// 其他逻辑&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;10&quot;&gt;&lt;li&gt;如何判定错误的信息是否足够，想一想当你的代码出现问题需要排查的时候你的错误信息是否可以帮助你快速的定位问题，例如我们在请求中一般会输出参数信息，用于辅助判断错误&lt;/li&gt;&lt;li&gt;对于业务错误，推荐在一个统一的地方创建一个错误字典，错误字典里面应该包含错误的 code，并且在日志中作为独立字段打印，方便做业务告警的判断，错误必须有清晰的错误文档&lt;/li&gt;&lt;li&gt;不需要返回，被忽略的错误&lt;strong&gt;必须&lt;/strong&gt;输出日志信息&lt;/li&gt;&lt;li&gt;同一个地方不停的报错，最好不要不停输出错误日志，这样可能会导致被大量的错误日志信息淹没，无法排查问题，比较好的做法是打印一次错误详情，然后打印出错误出现的次数&lt;/li&gt;&lt;li&gt;对同一个类型的错误，采用相同的模式，例如参数错误，不要有的返回 404 有的返回 200&lt;/li&gt;&lt;li&gt;处理错误的时候，需要处理已分配的资源，使用 &lt;code&gt;defer&lt;/code&gt; 进行清理，例如文件句柄&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;panic-or-error&quot;&gt;&lt;a href=&quot;#panic-or-error&quot; class=&quot;headerlink&quot; title=&quot;panic or error?&quot;/&gt;panic or error?&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;在 Go 中 panic 会导致程序直接退出，是一个致命的错误，如果使用 &lt;code&gt;panic&lt;/code&gt; &lt;code&gt;recovery&lt;/code&gt; 进行处理的话，会存在很多问题&lt;ol&gt;&lt;li&gt;性能问题，频繁 panic recovery 性能不好&lt;/li&gt;&lt;li&gt;容易导致程序异常退出，只要有一个地方没有处理到就会导致程序进程整个退出&lt;/li&gt;&lt;li&gt;不可控，一旦 panic 就将处理逻辑移交给了外部，我们并不能预设外部包一定会进行处理&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;什么时候使用 panic 呢？&lt;ol&gt;&lt;li&gt;对于真正意外的情况，那些表示不可恢复的程序错误，例如索引越界、不可恢复的环境问题、栈溢出，我们才使用 panic&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;使用 error 处理有哪些好处？&lt;ol&gt;&lt;li&gt;简单。&lt;/li&gt;&lt;li&gt;考虑失败，而不是成功(Plan for failure, not success)。&lt;/li&gt;&lt;li&gt;没有隐藏的控制流。&lt;/li&gt;&lt;li&gt;完全交给你来控制 error。&lt;/li&gt;&lt;li&gt;Error are values。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;为什么标准库中-errors-New-会返回一个指针&quot;&gt;&lt;a href=&quot;#为什么标准库中-errors-New-会返回一个指针&quot; class=&quot;headerlink&quot; title=&quot;为什么标准库中 errors.New 会返回一个指针&quot;/&gt;为什么标准库中 errors.New 会返回一个指针&lt;/h2&gt;&lt;p&gt;翻看标准库的源代码我们可以发现， &lt;code&gt;errors&lt;/code&gt; 库中的 &lt;code&gt;errorString&lt;/code&gt; 结构体实现了 &lt;code&gt;error&lt;/code&gt; 接口，为什么在 &lt;code&gt;New&lt;/code&gt; 一个 error 的时候会返回一个结构体的指针呢？&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// New returns an error that formats as the given text.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// Each call to New returns a distinct error value even if the text is identical.&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(text &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;errorString{text}
}

&lt;span class=&quot;hljs-comment&quot;&gt;// errorString is a trivial implementation of error.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; errorString &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
s &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e *errorString)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.s
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们先来看一个例子，我们同样创建了 errorString 的结构体，我们自定义的和标准库中的唯一不同就是，自建的这个返回的是值，而不是指针。&lt;br/&gt;在 &lt;code&gt;main&lt;/code&gt; 函数的对比中我们就可以发现，我们自定义的 &lt;code&gt;errorString&lt;/code&gt; 在对比的时候只要对应的字符串相同就会返回 true，但是标准库的包不会。&lt;br/&gt;这是因为，在对比两个 struct 是否相同的时候，会去对比，这两个 struct 里面的各个字段是否是相同的，如果相同就返回 true，但是对比指针的时候会去判断两个指针的地址是否一致。&lt;br/&gt;&lt;strong&gt;如果字符串相等就返回 true 会导致什么问题呢？&lt;/strong&gt;&lt;br/&gt;如果我有两个包定义了字符串相同的想个错误，在其他库调用对比的时候，可能会由于不同的书写顺序走进不同的分支导致一些不可预期的奇奇怪怪的错误&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; errorString &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
text &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e errorString)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.text
}

&lt;span class=&quot;hljs-comment&quot;&gt;// New 创建一个自定义错误&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(s &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errorString{text: s}
}

&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; errorString1 = New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test a&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; err1 = errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test b&quot;&lt;/span&gt;)

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; errorString1 == New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test a&quot;&lt;/span&gt;) {
fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err string a&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 会输出&lt;/span&gt;
}

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err1 == errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;test b&quot;&lt;/span&gt;) {
fmt.Println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err b&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// 不会输出&lt;/span&gt;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;error-type-错误定义与判断&quot;&gt;&lt;a href=&quot;#error-type-错误定义与判断&quot; class=&quot;headerlink&quot; title=&quot;error type: 错误定义与判断&quot;/&gt;error type: 错误定义与判断&lt;/h2&gt;&lt;h3 id=&quot;Sentinel-Error&quot;&gt;&lt;a href=&quot;#Sentinel-Error&quot; class=&quot;headerlink&quot; title=&quot;Sentinel Error&quot;/&gt;Sentinel Error&lt;/h3&gt;&lt;p&gt;哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式&lt;br/&gt;例如下方 &lt;code&gt;io&lt;/code&gt; 库中定义的错误&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// EOF is the error returned by Read when no more input is available.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// Functions should return EOF only to signal a graceful end of input.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// If the EOF occurs unexpectedly in a structured data stream,&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// the appropriate error is either ErrUnexpectedEOF or some other error&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// giving more detail.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; EOF = errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;EOF&quot;&lt;/span&gt;)

&lt;span class=&quot;hljs-comment&quot;&gt;// ErrUnexpectedEOF means that EOF was encountered in the&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// middle of reading a fixed-size block or data structure.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ErrUnexpectedEOF = errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;unexpected EOF&quot;&lt;/span&gt;)

&lt;span class=&quot;hljs-comment&quot;&gt;// ErrNoProgress is returned by some clients of an io.Reader when&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// many calls to Read have failed to return any data or error,&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// usually the sign of a broken io.Reader implementation.&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; ErrNoProgress = errors.New(&lt;span class=&quot;hljs-string&quot;&gt;&quot;multiple Read calls return no data or error&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在外部判定的时候一般使用等值判定或者使用 &lt;code&gt;errors.Is&lt;/code&gt; 进行判断&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == io.EOF {
&lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;
}

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; errors.Is(err, io.EOF){
&lt;span class=&quot;hljs-comment&quot;&gt;//...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种错误处理方式有一个问题是，将 error 当做包的 API 暴露给了第三方，这样会导致在做重构或者升级的时候很麻烦，并且这种方式包含的错误信息会十分的有限&lt;/p&gt;&lt;h3 id=&quot;error-types&quot;&gt;&lt;a href=&quot;#error-types&quot; class=&quot;headerlink&quot; title=&quot;error types&quot;/&gt;error types&lt;/h3&gt;&lt;p&gt;这个就类似我们前面定义的 &lt;code&gt;errorString&lt;/code&gt; 一样实现了 &lt;code&gt;error&lt;/code&gt; 的接口，然后在外部是否类型断言来判断是否是这种错误类型&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; MyStruct &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
s &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
    name &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
    path &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
}



&lt;span class=&quot;hljs-comment&quot;&gt;// 使用的时候&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; err.(&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt;) {
        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; *MyStruct:
        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; others:
        &lt;span class=&quot;hljs-comment&quot;&gt;// ...&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式相对于哨兵来说，可以包含更加丰富的信息，但是同样也将错误的类型暴露给了外部，例如标准库中的 &lt;code&gt;os.PathError&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;Opaque-errors&quot;&gt;&lt;a href=&quot;#Opaque-errors&quot; class=&quot;headerlink&quot; title=&quot;Opaque errors&quot;/&gt;Opaque errors&lt;/h3&gt;&lt;p&gt;不透明的错误处理，这种方式最大的特点就是只返回错误，暴露错误判定接口，不返回类型，这样可以减少 API 的暴露，后续的处理会比较灵活，这个一般用在公共库会比较好&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; temporary &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; {
Temporary() &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IsTemporary&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err error)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {
te, ok := err.(temporary)
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ok &amp;amp;&amp;amp; te.Temporary()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式我们可以断言错误实现了特定的行为，而不是断言错误是特定的类型或值&lt;/p&gt;&lt;h2 id=&quot;error-handle-错误处理优化&quot;&gt;&lt;a href=&quot;#error-handle-错误处理优化&quot; class=&quot;headerlink&quot; title=&quot;error handle: 错误处理优化&quot;/&gt;error handle: 错误处理优化&lt;/h2&gt;&lt;p&gt;在 go 中常常会存在大量的 &lt;code&gt;if err&lt;/code&gt; 代码，下面介绍两种常见的减少这种代码的方式&lt;/p&gt;&lt;h3 id=&quot;bufio-scan&quot;&gt;&lt;a href=&quot;#bufio-scan&quot; class=&quot;headerlink&quot; title=&quot;bufio.scan&quot;/&gt;bufio.scan&lt;/h3&gt;&lt;p&gt;对比下面两个函数的处理我们可以发现， &lt;code&gt;count2&lt;/code&gt; 使用 &lt;code&gt;sc.Scan&lt;/code&gt; 之后一个 &lt;code&gt;if err&lt;/code&gt; 的判断都没有，极大的简化了代码，这是因为在 &lt;code&gt;sc.Scan&lt;/code&gt; 做了很多处理，像很多类似的，需要循环读取的都可以考虑像这样包装之后进行处理，这样外部包调用的时候就会非常简洁&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 统计文件行数&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(r io.Reader)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; (
br    = bufio.NewReader(r)
lines &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;
err   error
)

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; {
&lt;span class=&quot;hljs-comment&quot;&gt;// 读取到换行符就说明是一行&lt;/span&gt;
_, err = br.ReadString(&lt;span class=&quot;hljs-string&quot;&gt;&#x27;\n&#x27;&lt;/span&gt;)
lines++
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;
}
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 当错误是 EOF 的时候说明文件读取完毕了&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != io.EOF {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, err
}

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lines, err
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;count2&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(r io.Reader)&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; (
sc    = bufio.NewScanner(r)
lines &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;
)

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; sc.Scan() {
lines++
}

&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; lines, sc.Err()
}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;error-writer&quot;&gt;&lt;a href=&quot;#error-writer&quot; class=&quot;headerlink&quot; title=&quot;error writer&quot;/&gt;error writer&lt;/h3&gt;&lt;p&gt;看一个来自 go blog 的例子：&lt;a href=&quot;https://blog.golang.org/errors-are-values&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.golang.org/errors-are-values&lt;/a&gt;&lt;br/&gt;一般代码&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;_, err = fd.Write(p0[a:b])
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
}
_, err = fd.Write(p1[c:d])
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
}
_, err = fd.Write(p2[e:f])
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
}
&lt;span class=&quot;hljs-comment&quot;&gt;// and so on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;errWriter&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; errWriter &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
    w   io.Writer
    err error
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(ew *errWriter)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(buf []&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ew.err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;
    }
    _, ew.err = ew.w.Write(buf)
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 使用时&lt;/span&gt;
ew := &amp;amp;errWriter{w: fd}
ew.write(p0[a:b])
ew.write(p1[c:d])
ew.write(p2[e:f])
&lt;span class=&quot;hljs-comment&quot;&gt;// and so on&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ew.err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ew.err
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果去翻 标准库中 bufio.Writer 的源代码，你会发现也有这种用法，这种就是将重复的逻辑进行了封装，然后把 error 暂存，然后我们就只需要在最后判断一下 error 就行了&lt;/p&gt;&lt;h2 id=&quot;wrap-error-错误包装&quot;&gt;&lt;a href=&quot;#wrap-error-错误包装&quot; class=&quot;headerlink&quot; title=&quot;wrap error: 错误包装&quot;/&gt;wrap error: 错误包装&lt;/h2&gt;&lt;h3 id=&quot;errors-wrap-有何作用，为什么不用标准库的-fmt-Errorf-quot-w-quot&quot;&gt;&lt;a href=&quot;#errors-wrap-有何作用，为什么不用标准库的-fmt-Errorf-quot-w-quot&quot; class=&quot;headerlink&quot; title=&quot;errors.wrap 有何作用，为什么不用标准库的 fmt.Errorf(&amp;quot;%w&amp;quot;)&quot;/&gt;errors.wrap 有何作用，为什么不用标准库的 &lt;code&gt;fmt.Errorf(&quot;%w&quot;)&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;我们先看一下标准库的源码，我们可以发现当 &lt;code&gt;p.wrappedErr != nil&lt;/code&gt; 的时候（也就是有 %w）的时候，会使用一个 &lt;code&gt;wrapError&lt;/code&gt; 将错误包装，看 &lt;code&gt;wrapError&lt;/code&gt; 的源码可以发现，这个方法只是包装了一下原始错误，并且可以做到附加一些文本信息，但是没有堆栈信息。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(format &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;, a ...&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
p := newPrinter()
p.wrapErrs = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
p.doPrintf(format, a)
s := &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;(p.buf)
&lt;span class=&quot;hljs-keyword&quot;&gt;var&lt;/span&gt; err error
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; p.wrappedErr == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
err = errors.New(s)
} &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
err = &amp;amp;wrapError{s, p.wrappedErr}
}
p.free()
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err
}

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; wrapError &lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; {
msg &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;
err error
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e *wrapError)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.msg
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;(e *wrapError)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Unwrap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; e.err
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在看一下 pkg/errors 的源码，我肯可以发现除了使用 &lt;code&gt;withMessage&lt;/code&gt; 附加了错误信息之外还使用 &lt;code&gt;withStack&lt;/code&gt; 附加了堆栈信息，这样我们在程序入口处打印日志信息的时候就可以将堆栈信息一并打出了&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Wrap returns an error annotating err with a stack trace&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// at the point Wrap is called, and the supplied message.&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// If err is nil, Wrap returns nil.&lt;/span&gt;
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Wrap&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err error, message &lt;span class=&quot;hljs-keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt;
}
err = &amp;amp;withMessage{
cause: err,
msg:   message,
}
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &amp;amp;withStack{
err,
callers(),
}
}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;为什么不允许处处使用-errors-Wrap&quot;&gt;&lt;a href=&quot;#为什么不允许处处使用-errors-Wrap&quot; class=&quot;headerlink&quot; title=&quot;为什么不允许处处使用 errors.Wrap&quot;/&gt;为什么不允许处处使用 errors.Wrap&lt;/h3&gt;&lt;p&gt;因为每一次 &lt;code&gt;errors.Wrap&lt;/code&gt; 的调用都会为错误添加堆栈信息，如果处处调用那会有大量的无用堆栈&lt;br/&gt;我们先看一下只有一处 wrap&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err: %+v&quot;&lt;/span&gt;, c())
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;test&quot;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; a()
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; b()
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看结果我们可以发现已经可以打印出全部的堆栈信息了&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;err: xxx
test
main.a
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;
main.b
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;
main.c
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
main.main
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
runtime.main
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/proc.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;
runtime.goexit
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/asm_amd64.s:&lt;span class=&quot;hljs-number&quot;&gt;1374&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再看多处 wrap 的现象&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {
fmt.Printf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err: %+v&quot;&lt;/span&gt;, c())
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(fmt.Errorf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;), &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(a(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;)
}

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;error&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; errors.Wrap(b(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到每一处 wrap 都添加了一次堆栈信息&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;err: xxx
a
main.a
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;
main.b
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;
main.c
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
main.main
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
runtime.main
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/proc.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;
runtime.goexit
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/asm_amd64.s:&lt;span class=&quot;hljs-number&quot;&gt;1374&lt;/span&gt;
b
main.b
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;
main.c
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
main.main
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
runtime.main
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/proc.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;
runtime.goexit
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/asm_amd64.s:&lt;span class=&quot;hljs-number&quot;&gt;1374&lt;/span&gt;
c
main.c
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
main.main
        /home/ll/project/Go&lt;span class=&quot;hljs-number&quot;&gt;-000&lt;/span&gt;/Week02/blog/wrap.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
runtime.main
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/proc.&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;204&lt;/span&gt;
runtime.goexit
        /usr/local/&lt;span class=&quot;hljs-keyword&quot;&gt;go&lt;/span&gt;/src/runtime/asm_amd64.s:&lt;span class=&quot;hljs-number&quot;&gt;1374&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;标准库-errors-Is-As-怎么判断错误&quot;&gt;&lt;a href=&quot;#标准库-errors-Is-As-怎么判断错误&quot; class=&quot;headerlink&quot; title=&quot;标准库 errors.Is / As 怎么判断错误&quot;/&gt;标准库 errors.Is / As 怎么判断错误&lt;/h2&gt;&lt;h3 id=&quot;errors-Is&quot;&gt;&lt;a href=&quot;#errors-Is&quot; class=&quot;headerlink&quot; title=&quot;errors.Is&quot;/&gt;errors.Is&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Is&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err, target error)&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; target == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; err == target
}
&lt;span class=&quot;hljs-comment&quot;&gt;// 通过反射判读 target 是否可以被比较&lt;/span&gt;
isComparable := reflectlite.TypeOf(target).Comparable()
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; {
        &lt;span class=&quot;hljs-comment&quot;&gt;// 循环判断是否相等&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isComparable &amp;amp;&amp;amp; err == target {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}
        &lt;span class=&quot;hljs-comment&quot;&gt;// 判断是否实现了 is 接口，如果有实现就直接判断&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x, ok := err.(&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{ Is(error) &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; }); ok &amp;amp;&amp;amp; x.Is(target) {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}

&lt;span class=&quot;hljs-comment&quot;&gt;// 去判断是否实现了 unwrap 的接口，如果实现了就进行 unwrap&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; err = Unwrap(err); err == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
}
}
}&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;errors-As&quot;&gt;&lt;a href=&quot;#errors-As&quot; class=&quot;headerlink&quot; title=&quot;errors.As&quot;/&gt;errors.As&lt;/h3&gt;&lt;p&gt;和 is 的逻辑类似，就是不断的进行 unwrap 进行比较，只要有一个相同就返回，如果一直到底都不行就返回 false&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;hljs go&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;As&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(err error, target &lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{})&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; target == &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;errors: target cannot be nil&quot;&lt;/span&gt;)
}
val := reflectlite.ValueOf(target)
typ := val.Type()
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; typ.Kind() != reflectlite.Ptr || val.IsNil() {
&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;errors: target must be a non-nil pointer&quot;&lt;/span&gt;)
}
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; e := typ.Elem(); e.Kind() != reflectlite.Interface &amp;amp;&amp;amp; !e.Implements(errorType) {
&lt;span class=&quot;hljs-built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;errors: *target must be interface or implement error&quot;&lt;/span&gt;)
}
targetType := typ.Elem()
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; err != &lt;span class=&quot;hljs-literal&quot;&gt;nil&lt;/span&gt; {
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; reflectlite.TypeOf(err).AssignableTo(targetType) {
val.Elem().Set(reflectlite.ValueOf(err))
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; x, ok := err.(&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{ As(&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; }); ok &amp;amp;&amp;amp; x.As(target) {
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
}
err = Unwrap(err)
}
&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;关注我获取更新&quot;&gt;&lt;a href=&quot;#关注我获取更新&quot; class=&quot;headerlink&quot; title=&quot;关注我获取更新&quot;/&gt;关注我获取更新&lt;/h2&gt;&lt;p&gt;看到这里了还不点个关注走一波&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54d75d086b23d1b1a1035a4e79e89acf</guid>
<title>[推荐] 记一次 MySQL 的 insert 死锁</title>
<link>https://toutiao.io/k/mbyee1y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
      

      
        &lt;p&gt;先update再insert的并发死锁问题分析。&lt;/p&gt;



&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;“如果库里有对应记录，就更新，没有就插入”&lt;/p&gt;

&lt;p&gt;很简单的一个逻辑，相信很多人都会遇到。&lt;/p&gt;

&lt;p&gt;最近看一个工程里实现代码是这样的，mysql数据库走的是默认的事务级别:可重复读。包在一个事务中执行：&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;更新结果&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;一条新记录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来似乎没什么问题，线上频频出现insert死锁。&lt;/p&gt;

&lt;p&gt;这里总结下，分享下实验SQL，便于有兴趣研究的同学去复现。&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;用户id&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;活动id&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`time_count`&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#x27;活动参与次数&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;更新语句&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;插入语句&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;并发执行现场&quot;&gt;并发执行现场&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/geqiandebei/picture/raw/master/2020-12-6/1607270021456-QQ20201205-0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;死锁日志分析&quot;&gt;死锁日志分析&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;查看最近的死锁日志mysql命令：show engine innodb status&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f7aeb30c700&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25906&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTIVE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserting&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5509&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7f7b0d6f2700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51970&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;4&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25906&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intention&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTIVE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5510&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7f7aeb30c700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51971&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`user_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;5&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;2020&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOLDS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAITING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THIS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LOCK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intention&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROLL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql死锁日志中,不同类型锁对应的日志信息如下&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;记录锁&lt;/strong&gt;(LOCK_REC_NOT_GAP): lock_mode X locks rec but not gap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;间隙锁&lt;/strong&gt;(LOCK_GAP): lock_mode X locks gap before rec&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Next-key&lt;/strong&gt;锁(LOCK_ORNIDARY): lock_mode X&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;插入意向锁&lt;/strong&gt;(LOCK_INSERT_INTENTION): lock_mode X locks gap before rec insert intention&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;例外情况&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果在supremum record 上加锁，locks gap before rec 会省略掉，间隙锁会显示成 lock_mode X，插入意向锁会显示成 lock_mode X insert intention。譬如上面的&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;RECORD&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LOCKS&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`uniq_uid_activity_id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`activity_log`&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25907&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lock_mode&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Record&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHYSICAL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RECORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n_fields&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bits&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73757072656&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d756d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;supremum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来像是 Next-key 锁,但是看下面的 heap no 1 表示这个记录是 supremum record（另外.infimum record 的 heap no 为 0），所以这个锁应该看作是一个间隙锁。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在InnoDB存储引擎中，每个数据页中有两个虚拟的行记录，用来界定记录的边界。Infimum 是比该页中任何主键值都要小的值。Supremum 指的是比任何可能打的值还要大的值。这两个值在页创建时被建立，并且任何情况下不会删除。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最终分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;两个事务update不存在的记录，先后获得了间隙锁（gap锁），gap锁之间是兼容的所以在update环节不会阻塞。&lt;/p&gt;

&lt;p&gt;二者都持有gap锁，然后去竞争插入意向锁。当存在其他会话持有gap锁的时候，当前会话申请不了插入意向锁，导致死锁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.qianshan.tech/mysql/%E8%AE%B0%E4%B8%80%E6%AC%A1mysql%E7%9A%84update%E6%AD%BB%E9%94%81.html&quot;&gt;《记一次mysql的update死锁》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gitee.com/geqiandebei/picture/raw/master/2020-12-6/1607270117025-QQ20201205-1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

      
    &lt;/div&gt;

    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4ea3f74eb50de5cd226e5e4155226148</guid>
<title>[推荐] 关于 Elasticsearch 集群核心配置，腾讯大佬的灵魂 9 问，你能接住几个？</title>
<link>https://toutiao.io/k/i41dalm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;题记&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一位腾讯大佬 2020年4月份在死磕 Elasticsearch技术交流微信群里发起讨论的问题，之前初步讨论了答案，但是不够细或者说讲解不透，所以一直没有成文。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一次，加上了实践验证，说透。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;1、上问题&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是没太搞懂 seed_hosts 和 cluster.initial_master_nodes 的区别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1、 seed_hosts里面一定是配置 master eligible节点吗?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2、还是说data节点也可以配置到 master eligible&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;3、是如何发现潜在机器的呢?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;4、initial_master一定是master eligible节点吧?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;5、集群初始启动时, 这几个节点一定都要在是吗?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;6 、初始的时候是不是可以配置一个, 然后集群初始化后, 再加master eligible节点也可以的是吗?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;7 、多加几个以后, 把initial_master里的几个去掉是不是也可以了?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;8、如果一个集群当前master为7，那他的quorum是4。es 是支持慢慢去掉节点，quorum慢慢降低的吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;9、 那假如慢慢去掉了3个节点，原集群正常工作，那这三个节点重启后网络分区在一起了，那会不会自己形成集群啊？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望大佬们点拨一下... ...&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;2、拆解一把&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题的核心是：seed_host 和 cluster.initial_master_nodes 的区别？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.0 认知前提&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为避免认知偏差，将常用英文词汇做基础释义：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Discovery ：发现是节点间在形成集群之前发现其他节点的过程。当你启动Elasticsearch节点时，或者当节点认为主节点发生故障时，此过程将运行，并持续到找到主节点或选择新的主节点为止。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;master-eligible nodes：候选主节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;master-ineligible nodes：非候选主节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;coordinating-only nodes：仅协调节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;data-only nodes：仅数据节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;seed hosts providers：种子主机列表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;voting configuration：投票配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;split brain：脑裂&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;initial quorum：初始仲裁——仅在整个集群首次启动时才需要初始仲裁&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.1 主节点职责&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点负责集群范围内的轻量级操作，例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;创建或删除索引&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;跟踪哪些节点是集群的一部分&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;确定将哪些分片分配给哪些节点。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拥有稳定的主节点对于集群健康非常重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;候选主节点通过主选举过程成为主节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个集群中：选举后只有一个主节点。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.2 脑裂&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下脑裂是我的通俗解释：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设在 2.1 选举主节点过程中，一个集群中出现了 2个或者2个以上的主节点，也就是说一个集群形式上划分为两个或两个以上的孤立集群，这就被称为脑裂。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.3 候选主节点两大基本任务&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;候选主节点必须合力完成的两个基本任务：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即时某些节点故障，也要保住以上两活动正常运行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.4 投票配置&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个 Elasticsearch 集群都有一组投票配置，这是一组候选主节点的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么时候使用呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么时候做决策？——仅在投票配置中超过一半节点做出响应后才做决策。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常：投票配置和集群中所有候选主节点集合相同。但，某些情况下可以不同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是要强调的也是被问最多的问题之一：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为确保集群仍然可用，请勿同时停止投票配置中的一半或更多节点。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;只要有一半以上的投票节点可用，集群就可以正常工作。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果有三个或四个候选主机节点，则集群可以容忍一个候选主节点不可用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;如果有两个或更少的候选主节点，则它们必须全部保持可用。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面的实战验证举例，你会进一步看到结论。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.5 集群规划时设置奇数个候选主节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群中通常应有奇数个候选主节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有偶数个，Elasticsearch将其中一个排除在投票配置之外，以确保其大小为奇数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换种通俗说法：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4个候选主节点和3个候选主节点本质一样，只容许一个候选主节点失效。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.6 discovery.seed_hosts  和 initial_master_nodes 作用&lt;/h2&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;7.x&lt;/th&gt;&lt;th&gt;7.X 之前&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;discovery.seed_hosts&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;discovery.zen.ping.unicast.hosts&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cluster.initial_master_nodes&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;minimum_master_nodes  min_master_count&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;discovery.seed_hosts 的来龙去脉&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6.X 5.X对应名字：discovery.zen.ping.unicast.hosts。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看如下截图，对比：除了名称不同，释义部分一模一样。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.08339124391938846&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ493MjcpKQIyntPTnu2cicsMz23K1QmicnSkIO6IX13vUiaXIVrclwvrzMIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1439&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果多节点集群，discovery.seed_hosts 应该配置为候选主节点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;cluster.initial_master_nodes&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也是7.X的特性，区别于之前设置min_master_count候选主节点的个数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;白话文：设置候选主机节点的主机名称列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在7.x节点上，discovery.zen.minimum_master_nodes设置是允许的，但被忽略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群首次启动的时候，cluster.initial_master_nodes 必须设置为执行集群引导。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在集群初始化阶段，cluster.initial_master_nodes 应该包含候选主节点的名称，并在集群中每个候选主节点上进行定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本质区别：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;cluster.initial_master_nodes：仅在集群首次启动会使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;discovery.seed_hosts：每次启动都需要。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.7 Discovery 过程解读&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Discovery 过程从一个或多个种子主机列表以及集群中已知的任何一个候选主节点地址开始。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该过程分两个阶段进行：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个节点通过连接到每个地址并尝试识别其连接的节点是否是候选主节点来探测种子地址。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其次，如果成功，它将与远程节点共享其所有已知的候选主机节点列表，并且远程节点将依次与其做对等回应。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，该节点将探测刚刚发现的所有新节点，请求其对等节点，依此类推。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果该节点不是候选主节点，则它将继续此 Discovery 过程，直到发现了选举的主节点为止。如果未发现选择的主节点，则该节点将在默认值为 1s 之后重试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果该节点是候选主节点，则它将继续此 Discovery 过程，直到它找到了选举的主节点，或者它找到了足够的候选主节点来完成选举。同样的，如果这两种方法都没有很快的进行，则该节点将在 1s 后重试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有点绕，需要结合英文文档多读几遍，加深 Discovery 理解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.8 elasticsearch.yml 配置注意&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，7.X Elasticsearch 的生产部署需要至少在 elasticsearch.yml 配置文件中指定以下设置之一：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;discovery.seed_hosts&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;discovery.seed_providers&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;cluster.initial_master_nodes&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;discovery.zen.ping.unicast.hosts&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;discovery.zen.hosts_provider&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.9  非候选主节点在 discovery  阶段被忽略&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 7.X 之前早期版本中，有可能在 discovery 过程中使用非候选主节点作为种子节点或在符合条件的主机之间间接传输信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像这样的依赖非候选主节点的集群非常脆弱，无法自动从某些故障中恢复。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7.X 版本之后，discovery 仅涉及集群中候选主节点，不会像早期版本一样依赖于非候选主节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何在7.X 中配置呢？应该在配置中将  discovery.seed_hosts 或者  discovery.seed_providers 设置为所有候选主节点的地址。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.10 关于故障检测超时时间&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7.X 默认情况下，如果集群节点未能响应 3 个连续的 ping（每个 ping 在 10 秒后超时），则集群故障检测子系统现在将其视为故障节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，响应时间超过 &lt;strong&gt;30&lt;/strong&gt; 秒 的节点可能会从集群中删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7.X 以前，每个ping的默认超时为 30 秒，因此，无响应的节点可能会在集群中保留 90 秒以上。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.11  删除候选主节点有时需要做排除投票&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你希望从集群中删除一半或更多的候选主节点，则必须首先使用投票配置排除API从投票配置中排除受影响的节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;排除 API 如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;POST _cluster/voting_config_exclusions?node_names=&amp;lt;node_names&amp;gt;&lt;br/&gt;POST _cluster/voting_config_exclusions?node_ids=&amp;lt;node_ids&amp;gt;&lt;br/&gt;DELETE _cluster/voting_config_exclusions&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你同时删除少于一半的候选主节点，则不需要做投票排除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果仅删除非候选主节点（例如仅数据节点或仅协调节点），则不需要做投票排除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，如果将节点添加到集群，也不需要投票排除。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;3、实践一把&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.1 场景1：一主节点、一仅数据节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据节点配置：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18867924528301888&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49XaPBJaETMiblM3Jrsqu21rz908HsChcdJq8taYMkoWwC6KRF2Ftnzyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;seed host 和  initial_master_nodes 只设置主节点配置。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5475409836065573&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49oFVwhhJj7vK2pKy8DmciawOhpXqqUnbwBWPLiaZSGPwHMQV86EhgRvlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;305&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.2 场景二：一主节点、二仅数据节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个数据节点配置：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18932874354561102&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49UasIT75eZxKRjzvkgibZCMYsF46EicUHNRfUDpRY3MafzqN7HZAsSZYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;581&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;seed host 和  initial_master_nodes 只设置主节点配置。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7010309278350515&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ491SsJFhzSicXV7XLK63icc6icMhH7gS7kfPLkxEpPyEe9Pa4P9hXsZGicicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;291&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.3 场景三：三个节点都是主节点同时也是数据节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三节点相同配置如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19270833333333334&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ4985qs9hRDBTESzPzLibib0reBkhb7sPKRF4bicZPPyNibW8IAK6fNM6G7ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;576&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8175438596491228&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49QbYtv9hjiaib5M8xL1244V7OVarTOEVhkJTmx3WO2KHBQMibvzleI6yJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;285&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，这时候，我把node-1 强制杀掉？大家猜会发生什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说宕机，你错了！集群进行了重新选主：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.09097633136094675&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49Pg2ZconoIYPCVn3DXDyumJdfHkNmnwNeaNQtEG7xHVuAkbpJu2MyoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1352&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下：节点2 成为主节点。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5906040268456376&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49kYTNCA1DHnNJcHNibVmmYaCcOnicXE92ywYKJkgDX2NIfF0bBPTDcAKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;298&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际业务场景不建议这么做，&lt;span&gt;数据节点在没有设置主节点角色：node.master: true 的前提下，成为了主节点&lt;/span&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.4 场景四：三个节点都是主节点同时也是数据节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三节点相同配置如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1396551724137931&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49Ewmk30P0Nx2OsSBia17CicWdeUrYJOIpZJXuZj48hBxmNBp7a3Q1YS9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7551724137931034&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ4989ZYVCpjWyMhNuickZrrrsZmbG8WBjZzyGcT4yohmfVjDTCrquicff0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逐个kill 掉 节点2、节点 1 看看结果？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先干掉节点2：节点1成为了主节点。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7689655172413793&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49VxMZLndhDOiavg0yc3R8guZR03XG55BCtXaiceicf5MWBmMHtdXrVV5ew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再干掉节点1：集群已无法访问和使用。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.07332854061826025&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49ib9IrNcZ40S6p82frAPSRrCe3g6Uk03EaAEHA9DJB7S9unkr4qdhmOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1391&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候，错误日志如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心错误说明：候选主节点要求至少 2个节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;an election requires at least 2 nodes  .....  which is not a quorum.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;详细报错如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; [node-3] master not discovered or elected yet, an election requires at least 2 nodes with ids from [0bozQB4VRZWB4TuzjRahAw, Z7PxWN_bQEeeI6KOlQT8pw, AWDZHrxaTd2qmOB1e8kadQ], have discovered [] &lt;span&gt;which&lt;/span&gt; is not a quorum; discovery will &lt;span&gt;continue&lt;/span&gt; using [172.21.0.14:9300, 172.21.0.14:9302] from hosts providers and [{node-3}{Z7PxWN_bQEeeI6KOlQT8pw}{ejRvW9egTrum3G5DrwmrIA}{172.21.0.14}{172.21.0.14:9303}{ml.machine_memory=8200851456, xpack.installed=&lt;span&gt;true&lt;/span&gt;, ml.max_open_jobs=20}, {node-1}{AWDZHrxaTd2qmOB1e8kadQ}{FFIDQcynQMGHqPwCW9lFfw}{172.21.0.14}{172.21.0.14:9300}{ml.machine_memory=8200851456, ml.max_open_jobs=20, xpack.installed=&lt;span&gt;true&lt;/span&gt;}] from last-known cluster state; node term 8, last-accepted version 92 &lt;span&gt;in&lt;/span&gt; term 8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如官方文档所示：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为确保集群仍然可用，你不得同时停止投票配置中的&lt;span&gt;一半或更多&lt;/span&gt;节点。只要有一半以上的投票节点可用，集群可以正常工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如前所述：投票配置中配置的就是候选主节点！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.5 场景五：三个节点都是主节点同时也是数据节点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在老配置基础上修改，注释掉：initial_master_nodes 的配置。配置如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.14166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49JFyD7gCtsGWK0ka9ncrDEfLzgibwM3wb7cXNGDetfZajtsTsAOgXsfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群结果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8245614035087719&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9YAgjy4V7ByPpzvzcs9IQ49MJPFFz3oxDLXPQxVricclxTkib1OwvibMsI478bNnXWR7O1sy1R4eNarg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;285&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群也能正常启动。结合 2.6 小节看能更好理解一些。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;4、再回答腾讯大佬的问题&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1、 seed_hosts里面一定是配置 master eligible节点吗?&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的，必须候选主节点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;2、还是说data节点也可以配置到 master eligible&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;理论可以，实际不推荐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Discovery 过程就是发现过程。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;4、initial_master一定是master eligible节点吧?&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大规模集群要注意：集群规划阶段要考虑设置：奇数个候选主节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群初始启动阶段之前候选主节点配置要设置合理。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;6 、初始的时候是不是可以配置一个, 然后集群初始化后, 再加master eligible节点也可以的是吗?&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以，但不推荐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果多节点集群，建议一步到位。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;7 、多加几个以后, 把initial_master里的几个去掉是不是也可以了?&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仅在集群首次启动会使用，其他阶段可以去掉。详见案例五。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，规范管理起见，配置上不用动就可以了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;8、如果一个集群当前master为7，那他的quorum是4。es 是支持慢慢去掉节点，quorum慢慢降低的吗？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换个思维理解，这里如果有 7 个候选主节点，意味着至少要一半以上有效集群才能存活。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是干掉3个候选主节点，集群依然是存活状态的。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;9、 那假如慢慢去掉了3个节点，原集群正常工作，那这三个节点重启后网络分区在一起了，那会不会自己形成集群啊？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不会，去掉的3个节点，还会继续加入原来的集群啊！&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;5、小结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似概念的确单纯看文档不好理解，甚至你看完本文还是有点糊涂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要为了区分概念而区分概念，实践一把，把理论概念转成实践、再结合理论，就好理解了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎留言写下你的思考！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-voting.html8&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加微信：&lt;strong&gt;elastic6&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;（仅有少量坑位了），和 BAT 大佬一起精进 Elastic 技术！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7cc2faa1e19f694832e73ff5e312961</guid>
<title>[推荐] 生产力工具</title>
<link>https://toutiao.io/k/ltecz1p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;生产力工具&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;当下什么才是最重要的?&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;是时间, 我加了时间 &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXhmIFpqtHiaheADHrTlqZlYqk1HPWlzm3QtJj3GJxRpIFgEeUPsiaf9Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt; &quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;省下时间才能做更多事情, 所以提高生产力才是王道啊! 文章内容均来自本人真实体验和观点, 分享一些我常用的生产力工具.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;utools&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用mac 的同学可能用过 &lt;strong&gt;Alfred&lt;/strong&gt;, &lt;strong&gt;utools&lt;/strong&gt; 功能与之类似.提供了诸多小工具, 和常用开发文档. utools 也是类 spotlight 应用. 没用过的可以体验一下.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 macOS, windows 双平台. mac 上可以通过 option + space 呼出&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.47&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUHuhbV9kicGHH30ClsB6hSxibdVsGN1TIgS0oC5NemiaM0HXJDhVETnRJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用简单支持输入, 拖拽, 自动粘贴等. 如下拖拽图片会匹配相应的插件供用户筛选使用&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUAXRYbVGA0OhttMjjASGhPDq4PVwJAGGzHPO7H254ibNOZ3rMbAGt7sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;快速启动, 对中文友好.&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.67&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUicvVV3nnFRzic5C8TDO7JEjnAeQibIxdJc6VuEexSI49prnTO1dh0D4hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;以下是我常用的工具, 推荐大家试试:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Everything(windows)&amp;amp;Everything(Mac) 可搜索搜索 文件名文件内容.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图片压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图床&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;json 编辑器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Code 计算器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hosts 切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化助手&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;各种文档&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外, utools 开放了插件系统, 用户可以自助编写, 或提交插件供其他用户使用.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;typora&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32196969696969696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWVtiaFIFEDuo1RCrdCzeeTMCrL06t1X8tjA4nppVW63HJIlgoHK8iaWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Typora 首先是一个 Markdown 文本编辑器, 它支持且仅支持 Markdown 语法的文本编辑.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;同样支持 window, macOS, linux 等多个平台. beta 版本可以免费使用. 目前只有 beta 版本&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;界面简洁美观, 写的舒服,提供多种 Markdown 选择的权利, 非常适合做笔记.&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUuVAcIYmSFZ4ZhXlYDJvRzmJ2qB8X6NYDicu9EmTuKsXAxX8fPEnS3mQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可以自定义主题, 是要你前端玩的6. 当然也提供能主题可供筛选&lt;/p&gt;&lt;p&gt;typora 主题&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUulX151EgicksDibjicA1zsVTDdzjgPaibcSH8kibJp2yWeUibia6icxh7NCKcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5657407407407408&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持导出 html, pdf, docx 等多种格式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6771844660194175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXsGX8qmsTINaRYPwnTic5OYCHqQIwSNc58SrWJletTG0BrP1pBPSUUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;412&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提一嘴, 本片文章就是使用的 typora 编写的. 在笔记工具挑选方面我做出了很多时间, 最终选择 typora + github 的方式.  想看一眼的话, 手机上可以同过 github App(未来可期) 预览.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PicGo&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图传 一开始用的是 utools 的图床插件. 没毛病的. 一样很好用, 直到我发现 typora 和 PicGo 联动功能之后, 便爱不释手.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;微博图床&lt;/code&gt; V1.0 &lt;strong&gt;微博图床从2019年4月开始进行防盗链，不建议继续使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;七牛图床&lt;/code&gt; V1.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;腾讯云COS v4\v5版本&lt;/code&gt; v1.1和v1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;又拍云&lt;/code&gt; V1.2.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GitHub&lt;/code&gt; V1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SM.MS&lt;/code&gt; V1.5.1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;阿里云OSS&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Imgur&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持 windows, macOS, linux 多个操作系统&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Typora 复制上传 PicGo&lt;/p&gt;&lt;img data-ratio=&quot;0.8650568181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvlCKpwxK97fvFLSwIEssCFqfZkf7nICTCujsq2icKJPribt8C2yNJpqw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;typora&amp;gt; 偏好设置&amp;gt;图片, 如下图设置即可&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.688034188034188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWibCX33YwMyMhJmoIIVyRztem3ickzyY2ibgnLqTJPC75ZaEoVd57JkRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Clipy&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUZibRwatibT2tsCyIs1fL9IsneAZzrOwHWpleZGYbjAttKskz05tibiafVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在 Mac 上还在使用传统的 &lt;code&gt;⌘Command-C&lt;/code&gt; 和 &lt;code&gt;⌘Command-V&lt;/code&gt; 快捷键来操作剪贴版，那样是很难谈得上有效率的。而使用剪贴板工具能够帮助你减少重复性输入，提高输入文字的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;⇧ +⌘ + V&lt;/code&gt; 呼出&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6469248291571754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUricribWQhr8MUDvKrCPMib8ObnT044YEqauYtE65WKPCpqUeXuT9sq8Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Clipy 全面支持纯文本、富文本（RTF、RTFD）、PDF、Filename、URL、TIFF Image 这些格式，能基本满足使用者们的需求。!&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持自定义分组片断(一个复制的文本)&lt;/p&gt;&lt;p&gt;⇧ +⌘ + V &amp;gt; 编辑片段 &amp;gt; 添加文件夹&amp;gt;添加片断&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.77875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNURgKCWxzrq4fiaK4uWLJ9P5pqeTIghkStGCsWjgPjddvyUTHWB4I2ZuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;OneNote&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能是工作还是学习, 可以说最接近真实是笔记本的存在. 一开始我也尝试过做自己的笔记博客载体, 但是实在是过于灵活了. 后来我选择 Markdown 编辑器 Typora . OneNote 我找到了新的使用场景  GTD (Getting Things Done).&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是 GTD? Getting Things Done 应该翻译为，“把事情处理完” 或者 “把事情做好”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是有时候会觉得&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;觉得自己每天都有好多事情要做，作业、培训、报表、项目、工作总结、微信、电话、邮箱……早上出门发现垃圾没扔，晚上回家发现洗衣机的衣服没晾……打开手机看到别人的出行照片和视频才发现，原来心心念念一年的旅行连计划都还没有做……睡前更要挣扎好久才能睡，因为你可能突然想到，单词没有背、买的几本书没看，收藏夹里还有数不清的文章在吃灰……&quot;  ----引自 topbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是这种状态建议 可以了解一下 GTD, 本文不做过多赘述 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5044444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUgQyvkcCticFicsj633Dou0Od5pNbSLzpvZomictDSuyKQNWnfylnBDFDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUl2Ll673pqcbUbG2FCcWkSyDKxWQmdkWt8QK420cpkrkWUB1LD0I7SQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataGrip&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUeFSFkvXeCDgVNBl1D4loicVkjZzXLxAOOBuES50RNH4FW6mQrOHq7lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中少不了各种可视化数据库管理工具。如果需要同时能连接多种数据库，大家肯定都会想到 &lt;strong&gt;DBeaver&lt;/strong&gt;、&lt;strong&gt;Navicat Premium&lt;/strong&gt; , 其实 DataGrip 也很香的.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Intellij 全家桶工具之一, 所以你不用担心用不习惯, 有些操作手感来了就自己会了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供多数据库驱动 比 Navicat多一些&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有智能的上下文敏感和编码语法提示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有可视化的表格编辑，你可以添加、删除、编辑和克隆数据行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供版本控制支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构支持（主要是会给你SQL优化的建议，使你能够重构sql）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1435768261964736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUTEh0qwUkanZb8ia2vDjoCC81hW4mwzBH2q667USg4iarVM83LviaCfKhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Chrome 插件&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;uBlock Origin&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一款高效的网络请求过滤工具，能去除网页的大部分广告包括视频的广告而且占用极低的内存和CPU(相对 adblock plus)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.24770642201834864&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvcScdOKyiaJB9E8dc4Qyr46PpCUfxO3mt0uAxGcTIwpuaUzEib92hJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 的拦截更新里面能添加adblock的规则&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 能拦截视频广告 直接跳过非黑屏&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Aerys - 窗口标签管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火, 清爽的网页标签管理器.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⌘+⇧+k 快捷键打开&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直接输入搜索标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类显示现有标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击跳转，方便查找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类关闭，快速清理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖动改变顺序，方便在窗口之间移动标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;显示最近关闭的标签页，点击重新开启&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5130784708249497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUyATlMNJKY5bsGZ8cAR0uiaqW6OX5XTWr7zxjibHXSLuZRXhTsoBICgVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Dark Reader&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;黑暗主题&lt;/strong&gt; 我知道很多人不喜欢. 但是我还是要说&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个护眼程序, 可以实时生成一个黑暗主题为每个网站启动夜间模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4395702775290958&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUSqRLo6XE1R11fPdhSeaAcf9AqwjBzWcYMn3xa2IlGhXpb4iaWchLuRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1117&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU19KdeEzx6JFXdUH7ttldiaFKdkPC1fOBG7xibxibE51djDAy0N8DCtotg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Git Master&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持GIt目录树查看&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件夹和 文件名搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GitHub显示仓库、文件大小，并支持文件复制下载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github 消息通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件历史浏览 GitHub &amp;amp;&amp;amp; GitLab&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些同学用过 Octotree, 但是 Octotree支持 github. Git Master 支持 github, gitLab, gitee,gitea&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0590277777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU1G5XMsdicym3K8nxWpgstrBL3bricBqjaP3XibGpLdm75hAibUtkCdOD0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;53&quot; data-cropselx2=&quot;303&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;250&quot; data-ratio=&quot;0.7015755329008341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicX09OR6yyCDtUJFIj4Xolq2r8rziaHd06LrLuor2nZQBLNibM3SYZQ4fhA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot; data-backw=&quot;356&quot; data-backh=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IDEA 插件&lt;br/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;EasyYapi&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EasyYapi 是个Idea文档生成工具 . 详情可以参考API 管理平台工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;YAPI 部署地址 http://easy-interfaces.tongdun.me:8088&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49053627760252366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXicezibn4cqmoYMc0aticSyaZiaDJpENgDHiafddh3OVuT9R2LavOLxglEFg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;导出http到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;导出rpc到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Call api 调用 API&lt;/section&gt;&lt;/li&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;MyBatisCodeHelperPro&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;406&quot; data-ratio=&quot;0.7852593266606005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmy0FkFRNRZC9fTiaKP38x2YH4881QCkvbKg40f5IT1My2U9bq3O6JPxEoQYuDohWk0JZdo1v5o1icWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1099&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;438&quot; data-ratio=&quot;0.7270560190703218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXCzhtPBjIEGEmA9JuESMvqy4icibPNkEHf8AY8GZia7SKgMAkf5bLgvwEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;839&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能点&lt;/th&gt;&lt;th&gt;未激活版&lt;/th&gt;&lt;th&gt;激活版&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;接口与xml互相跳转 更换图标&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;接口方法名重构&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加param&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml中的 param的自动提示 resultMap refid 等的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中的property的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测没有使用的xml 可一键删除&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测mybatis接口中方法是否有实现，没有则报红 可创建一个空的xml方法块&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测resultmap的property是否有误&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持spring 将mapper注入到spring中 intellij的spring注入不再报错 支持springboot&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成分页查询&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;代码模版，生成cdata和collection语句&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加resultMap中未被使用的属性&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成mybatis接口的testcase&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过方法名生成sql&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过数据库生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过java类生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml collection中的 param提示&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;识别mybatis的标签 全自动sql补全&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测#{中的参数是否正确&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;if test when test foreach collection $中的OGNL支持&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;param重构功能(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中column提示与检测(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mybatis xml代码格式化(2.8.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是收费的功能比较好用. 之前好像是 99块钱 3 年吧. 我之前买过.还是买的起的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyBatisCodeHelper-Pro插件破解版 仅供大家学习, 有能力还是要支持一下正版&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Maven Helper&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Maven Helper 用于分析依赖冲突插件, 当然使用 Maven 命令也可以完成. maven helper 提高了 maven 使用体验 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8273504273504273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXkKHTGhBhYtaXWLk6NFOh5bVSPm880efNHcLEU3viaG4bQnShibafyTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;691&quot; data-ratio=&quot;1.238709677419355&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXvbdbmvdbbmeLicskNPsWO0G0FCG6MNNBot8r9mhbJ2ibmibxS6bHOrSicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是推荐使用的生产力工具. 每个人喜好不一样. 大家酌情筛选. 顺便提一个问题 , mac 有没有什么好用的 gif 编辑器. photoshop 就算了. 想找个轻量级一点的 .&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就分享这么多,欢迎关注,评论,点赞,转载~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmzRnkibQCicbgruQJxOGOYXYE7ZOpRiafYWaqSSdGFcicCyibI50SATqjc6qT7vm2ZFO7nsA6GfqcJbqmA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bb87d443e2815865dd73123f1b06cec4</guid>
<title>[推荐] 爱奇艺微服务标准技术架构实践</title>
<link>https://toutiao.io/k/nm97hxh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;标准架构生态建设&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;以下将从微服务SDK、注册中心、监控体系、熔断限流、API网关、微服务平台等几个微服务标准架构的核心点做一些展开的介绍。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;开源SDK定制&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;根据各个业务团队的需求，爱奇艺中间件团队主要对Dubbo SDK做了以下几方面的扩展：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.基础设施的适配：包括注册中心、监控系统、内部的容器平台等等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.可用性增强：包括非健康实例隔离以及区域就近路由的机制；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.安全性增强：支持了服务间调用的认证机制；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.序列化：增加了对protobuf序列化方式的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4349514563106796&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYD1J7qJwQyARzzJfbohNISsIQ7p4SOR4nwXTeAiaxnFLWeuvyDFHfqwRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这部分内容已通过其他的公众号文章进行了详细的介绍，这里不再展开，有兴趣的读者可以参考&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247486220&amp;amp;idx=1&amp;amp;sn=aea45fdaec720c8a5234ffedbbdf6be8&amp;amp;chksm=e976972fde011e39f7bdd97246a0d30edaa48f57196c50a1d5229f54702084164f67e5098693&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Apache Dubbo的爱奇艺之旅&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;Apache Dubbo的爱奇艺之旅&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;注册中心演进&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;注册中心在微服务应用中是最重要的基础设施之一，原先在爱奇艺内部，注册中心的选型并不统一，之前在线上运行的注册中心有ZooKeeper、eureka、consul等。事实上，ZooKeeper、eureka等并不是当前业界中微服务注册中心的最佳选型，以Zookeeper为例，其主要缺点包括：&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.无法横向扩展；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.作为一个一致性的系统，在网络分区会产生不可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在调研了业界的各个方案后，我们选用了Nacos作为我们下一代的微服务注册中心。右下角是Nacos的整体介绍图，选用Nacos的主要原因是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1.高性能，可以横向扩展；&lt;/p&gt;&lt;p&gt;2.既适用于传统为服务架构，也能适用于云原生环境，包括支持与Istio控制面对接；&lt;/p&gt;&lt;p&gt;3.提供了Nacos-Sync组件，可与其他注册中心进行数据同步，也使注册中心的迁移变得简便。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.39977220956719817&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDDic7cqqCEQbYG24GJa7f6CvIn0uu7lqpEaxHVXicr4L0rn8TF2ZsiaQLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Nacos高可用部署&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在部署Nacos服务时，我们充分考虑了服务部署架构方面的高可用性。目前我们的Nacos服务是一个大集群，实例分布在多个不同的可用区中，在每个可用区内部，我们会申请不同的VIP，最终的内网域名是绑定在这些VIP上。另外其底层所使用的MySQL也采用了多机房部署。这样的架构可以避免单个Nacos实例或者单机房故障造成整个Nacos服务的不可用。以下是一些可能的故障场景的模拟：&lt;/p&gt;&lt;p&gt;1.单个Nacos实例故障：利用Load Balancer集群提供的健康检查能力自动从VIP中摘除；&lt;/p&gt;&lt;p&gt;2.某个VIP集群故障：利用客户端重试机制解决；&lt;/p&gt;&lt;p&gt;3.单个AZ故障：利用客户端重试机制解决；&lt;/p&gt;&lt;p&gt;4.MySQL集群故障：MySQL与注册发现过程无关，不受影响；&lt;/p&gt;&lt;p&gt;5.整个Nacos服务故障：客户端兜底机制，如服务实例缓存等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6313253012048192&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDo7GazYRMgFVJ4ibxSzerbg8BCbnMyex2kzs6xGEgfCVB5UtQwr92s7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;注册中心平滑迁移方案&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;接下来将简单介绍一下如何使用Nacos-Sync进行注册中心的平滑迁移。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1.首先要部署一个Nacos-Sync服务，从旧的注册中心向Nacos同步数据。Nacos-Sync支持集群化部署，部署多个实例时，其向新注册中心的写入时幂等的，并且它原生支持Dubbo的注册数据格式；&lt;/p&gt;&lt;p&gt;2.检查数据无误后，首先升级Consumer端，改为从Nacos注册中心进行发现。这时的服务发现的数据均是由Nacos-Sync从旧的注册中心同步过来的；&lt;/p&gt;&lt;p&gt;3.再升级Provider端，改为向Nacos进行服务注册；&lt;/p&gt;&lt;p&gt;4.下线Nacos-Sync服务及旧的注册中心，整个迁移流程就结束了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4007009345794392&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDQvl4ibUuKCn0qrRHXUZG2Kdb0ZLFOxbluNVGfHP75BibKQbVTyXUnq4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;856&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上方案的主要优点包括：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt;服务提供方和消费方的升级完全独立，可以自行进行；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt;迁移涉及的应用仅需升级一次。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;监控体系建设&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;服务监控是所有业务团队都极为关注的主题。完整的微服务监控体系一般需要有以下3个方面组成：&lt;/p&gt;&lt;p&gt;1.指标监控：包括QPS/响应延时/错误率等黄金指标、业务的自定义指标、JAVA应用的JVM指标，此外还需要采集和基础环境的相关指标，包括CPU/内存利用率等；&lt;/p&gt;&lt;p&gt;2.日志监控：如错误日志的数量；也可以利用AI技术，对日志的模式进行统计分析等；&lt;/p&gt;&lt;p&gt;3.链路监控：由于微服务调用关系的复杂性，调用链追踪也是非常必要的，它可以帮助业务人员更好地分析应用间的依赖关系，并能够监控各个调用关系上的核心指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5065543071161048&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYD7mEfmPPU4mb8FnWAkFMBGdWsDCFsLePlnoU6eEwYT8beRHgDuCEPUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1068&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;指标监控&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;指标监控方面，我们内部围绕着Prometheus建设了一套较为完整的监控和告警的标准化方案。这里面要解决几个问题：&lt;/p&gt;&lt;p&gt;首先是指标计算的问题，为了降低侵入性，我们在skywalking agent的基础上进行了二次开发，可以自动拦截Spring MVC/Dubbo等主流框架的调用，统计其调用次数、处理耗时、是否错误等等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次是指标采集的问题，Prometheus是采用拉模式采集指标的，对于微服务场景一般是利用Prometheus的服务发现机制。Prometheus默认集成了consul、k8s等服务发现方式，不过并未对Nacos注册中心直接提供支持，我们在开源的Nacos adapter的基础上进行了改造，使得Prometheus能够从Nacos中发现要采集的应用实例信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;指标查看主要采用了基于skywalking UI开发界面及grafana，我们提供了一套通用化的配置模板，业务也可以根据需要自行扩展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;告警方面，我们将告警策略设置在Prometheus中，具体的告警会由alert-manager通过adapter发送给内部的监控告警平台。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;监控dashboard查看、告警策略设置、订阅的入口统一设置在我们内部的全链路监控平台上，用户可以在该平台上查看进行相应的操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5846938775510204&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDLftgSiceCLrwVx0X6YIkwbMtDwQ4P2gWvx8P9rplJEA4ZfUouX2ZX3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下图展示了服务监控界面：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.46153846153846156&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDeDtE4cdibv9Lcjnd13IknrFLUE03Bf2VGRd9kJibdt549DqpQp6icRR4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;链路追踪&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;链路追踪的基本原理也和google关于Dapper的论文一致，应用程序通过埋点的agent产生调用链数据，通过日志采集或者网络直接上报的方式统一汇总至kafka，通过我们的实时分析程序进行分析。分析结果大致可以分为三类，原始的调用链数据我们会使用ES+HBase进行存储，调用关系上的实时监控数据我们采用时序数据库druid进行存储，拓扑关系采用图数据存储。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3988486842105263&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDm0eGOdL6TbfuGqNlV6uMylicLibhlDKF40mSMb10yuMkVmAL5ahpnPcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1216&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;链路追踪主要提供了一下功能：&lt;/p&gt;&lt;p&gt;1.调用依赖关系分析：提供了服务间依赖及接口间依赖的多个层次粒度，支持MySQL/Redis等各类中间件，为开发人员提供各种上下游依赖的直观展示；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2.服务间调用关系指标：提供QPS/响应延时错误率等核心指标监控，且能在一个调用关系上同时提供客户端及服务端两个视角的监控值，便于进行问题定位；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3.程序异常分析：在调用链数据中心记录异常类型及堆栈信息并进行分析，支持展示某个应用的程序异常种类及每分钟发生次数等；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4.日志关联：将调用链与业务日志进行关联查询，便于获取程序运行的详细信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;熔断限流方案&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;由于微服务架构的特点，上下游依赖和网络通信都比较多，这些因素都会对应用本身产生一定的风险，比如上游系统的突发流量或者热点参数；下游系统服务不可用、延时增大、错误率升高等等。如果缺少对自身系统的保护，有可能产生雪崩的效应。为了应对这些场景，我们主要引入了Sentinel框架进行解决。Sentinel的核心原理是用户可以定义各类资源（资源可以是本地的一个接口，或者远程的某个依赖），并在资源上设置各种规则（比如限流规则），在访问某个资源时，Sentinel组件会检查这些规则是否满足，在不满足的情况下会抛出特定的异常。用户可以通过捕捉这些异常实现快速失败或者降级等业务逻辑。Sentinel还提供了一个控制台，可以用来管理规则的参数设置以及查看实时监控等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.601081081081081&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDB9ARBZdkFHD2k5ME21R6SHdNHWV82g3o8EcJiawmicb3h6cD2WDoa7zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;925&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了适应爱奇艺各个业务团队的需求，我们对sentinel框架做了一定的扩展，下面的例子即是我们实现的复杂参数限流功能。Sentinel框架本身就自带热点参数限流的功能，不过仅支持一些简单类型的参数（如String、int等）。在有些情况下，限流的场景可能比较复杂，比如下图中，可能要根据第一个参数的id属性进行限流，这种场景原生的sentinel并未提供支持。针对这种情况，我们提供了一个抽象的接口，允许用户通过自己的实现从参数中提取出需要限流的资源。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4939759036144578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDVwyjW5ticdECNkjT1NkE83MdUwh1XWdLdv2Dibxsae1ickAnOmptqo8tQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了实现规则参数的动态下发，我们将sentinel与内部的配置中心进行了适配。在sentinel dashboard上进行的参数改动，最后都会保存至配置中心，业务系统通过引入配置中心的SDK，即可实现在不重启应用的前提下进行参数的动态调整。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.579520697167756&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYD2ESHEbQTCvic8lWbJQJ46uRfz41IbveASicqFPM58ia6ucTDDicuIibCAQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;918&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在QDAS管理平台上，我们还利用k8s技术提供了sentinel dashboard的托管功能，省去了各业务团队在这方面的部署维护成本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5043310875842156&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDiacwtH25w6WYRdKTJ9rKkXqCOZh8BiaYjxlrDrxO1A5c0vDK8UicdXZIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1039&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;API网关&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;爱奇艺 API 网关底层基于开源项目 Kong 实现，旨在为开发者提供稳定、便捷、高性能、可扩展的服务入口功能，一站式管理API 配置和生命周期，对微服务治理具有重要意义。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 API 网关控制流架构设计中，微服务平台 API 网关模块通过内部系统集成及服务化实现，为开发者提供全部所需入口配置及管理功能，且无需代码侵入、工单申请等人工干涉，实现API 创建即可用。API 网关支持认证、限流、访问控制等通用功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结构如下图所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5132530120481927&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDsUFocCMHiaLBKyLxe8ZtQEPn5iadqQAIxENiaE9vFa7EiaekBroNn9qfxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;API网关的具体功能及实现原理也已通过公众号文章进行了介绍，有兴趣的读者可以参考&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247485845&amp;amp;idx=1&amp;amp;sn=8ca94a01410d1fbf85cb1eaadca29c3e&amp;amp;chksm=e97695b6de011ca02c9f438ec5246faa06ed176526022308269a2e867743254bfab9572263e9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一站式入口服务|爱奇艺微服务平台 API 网关实战&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;&lt;span&gt;一站式入口服务|爱奇艺微服务平台 API 网关实战&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;QDAS&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在完善的微服务体系架构中，微服务治理平台也必不可少。QDAS是一个以应用为中心的一站式平台，通过功能插件的形式，对微服务应用的开发、部署、运维各个环节进行全生命周期的支持，同时兼容Dubbo/Spring Cloud 传统微服务框架和Istio服务网格架构。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6942823803967327&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDKHugg7HCbazEmrwvWRuwB0ibg41eypog4sHEXPPaAoVgrLVbQ1oDBew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;857&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;QDAS平台主要支持的功能包括：&lt;/p&gt;&lt;p&gt;1.应用基本信息维护&lt;/p&gt;&lt;p&gt;2.传统微服务治理&lt;/p&gt;&lt;p&gt;    (1)实例列表及与Nacos注册中心集成的实例上下线管理；&lt;/p&gt;&lt;p&gt;    (2)Grafana核心指标监控大盘；&lt;/p&gt;&lt;p&gt;    (3)Sentinel dashboard托管；&lt;/p&gt;&lt;p&gt;   (4)基于Sentinel的接口鉴权和流量配额管理（开发中）；&lt;/p&gt;&lt;p&gt;3.应用生命周期管理&lt;/p&gt;&lt;p&gt;    支持在各类平台（容器/虚机）上的应用部署和版本升级功能&lt;/p&gt;&lt;p&gt;4服务市场&lt;/p&gt;&lt;p&gt;    接口契约管理：包括基于Swagger UI的接口描述查看等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;混沌工程&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Netflix最早系统化地提出了混沌工程的概念，目的是尽早的识别风险，对薄弱的地方做针对性的加强。我们也一直在注重自己的故障演练，借助一些内部的工具跟外部开源项目，逐步演化出自己的故障注入平台——小鹿乱撞。借助平台，可以编排自己的演练方案进行演练，检验服务的健壮性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.48031496062992124&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/unymlvueOvvY6VYsQ2s2SgUeB9Wt0FYDIpicDe58zEt2diaiayakIuEZl270EPQlIEyRx52ZNo1uurynibNwBRicjCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1270&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;目前小鹿乱撞平台已经支持包括服务器、容器(docker)、数据库、中间件、网路设备、k8s集群等进行故障注入，并可在演练过程中实时展示关联的监控、日志以及报警等，演练结束后自动生成演练报告。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外，借助平台定时演练的能力，用户可以方便的实现周期性演练的效果。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>