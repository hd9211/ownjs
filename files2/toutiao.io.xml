<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>10ac28c3428f467114daa33047013a1c</guid>
<title>[译] Kubernetes 要弃用 Docker 了，我们该怎么办？</title>
<link>https://toutiao.io/k/chy4vw3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h2 data-lake-id=&quot;3f936b94119aa9ccaab803c4d9f414a7&quot;&gt;对于开发人员&lt;/h2&gt;&lt;p data-lake-id=&quot;814a82640cf52aac1dc997570ebf073d&quot;&gt;不用过度惊慌，Docker容器和映像仍然存在。不是说世界末日来了，实际上它不会改变一切。&lt;/p&gt;&lt;p data-lake-id=&quot;ee9a88fd85e362549fde5126fc06bdb9&quot;&gt;但是值得一读背后的原因：&lt;/p&gt;&lt;p data-lake-id=&quot;60e5d5cb8f3b8eef525d33e1a84b5002&quot;&gt;https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/&lt;/p&gt;&lt;p data-lake-id=&quot;990ef017f1049c7f1a90b409714c66a7&quot;&gt;https://kubernetes.io/blog/2020/12/02/dockershim-faq/&lt;/p&gt;&lt;p data-lake-id=&quot;fc7a77105964eb85a63cc476443a8252&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;1dd2191f1ab759e5fca74a889fdb9f5e&quot;&gt;对于K8s管理员&lt;/h2&gt;&lt;p data-lake-id=&quot;6c5535ff1558dca45dd9cb38b0fed1ef&quot;&gt;仔细阅读并开始考虑Docker替代方案&lt;/p&gt;&lt;p data-lake-id=&quot;9c697dfc2dae351147fcaf424d6f8b16&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;52cd7765efb729389417787ac29158e8&quot;&gt;是标题党吗&lt;/h2&gt;&lt;p data-lake-id=&quot;9e73880a2317757db642d29797d307de&quot;&gt;不，这是真的发生了。Docker现在在Kubernetes中已弃用。&lt;/p&gt;&lt;p data-lake-id=&quot;7b8929f85cc0df11b5d929a261278663&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;1abdbbb50e875fbe9e7b07ee782a70ee&quot;&gt;参考&lt;/h2&gt;&lt;p data-lake-id=&quot;ba8f8953cfc0dd6d5e4435ef7782c839&quot;&gt;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation&lt;/p&gt;&lt;p data-lake-id=&quot;4b7361d6c776a78819e203f822cfb6a1&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7a95461d11c46c097a1d83e4e5e8dc26&quot;&gt;kubelet中的Docker支持现已弃用，并将在以后的版本中删除。Kubelet使用一个名为“ dockershim”的模块，该模块实现了对Docker的CRI支持，并且在Kubernetes社区中看到了维护问题。我们鼓励您评估在可用的容器运行时，它是CRI的完整实现（兼容v1alpha1或v1）。&lt;/p&gt;&lt;p data-lake-id=&quot;47c565fe3db0279f230f122ff33ab348&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4cf70c07c58f512dd4db0eac385e1e96&quot;&gt;简而言之，这意味着Docker不支持称为CRI（容器运行时接口）的Kubernetes运行时API，并且Kubernetes人们一直在使用名为“ dockershim”的桥接服务。它转换了Docker API和CRI，但在一些次要版本中将不再从Kubernetes方面提供它。&lt;/p&gt;&lt;p data-lake-id=&quot;394a97ee61882a976fe833d21de1e178&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1d45520d47376cd4099c6aa4ecf98840&quot;&gt;当然，本地Docker是一个非常强大的工具，可以用来创建开发环境，但是为了了解造成这种情况的原因，您需要了解Docker在当前Kubernetes体系结构中的作用。&lt;/p&gt;&lt;p data-lake-id=&quot;57e32734711b008bbdf43cf6a7787540&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;bbece2894cd2252f08378f94d94fd7d8&quot;&gt;Kubernetes是一种基础架构工具，可对许多不同的计算资源（例如虚拟/物理机）进行分组，使它看起来像是巨大的计算资源，可让您的应用程序运行并与他人共享。在这种架构中，Docker（或容器运行时）仅用于通过Kubernetes控制平面进行调度，从而在实际主机中运行这些应用程序。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46704545454545454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbBesvxlJeX5KRyLhmiaVicmWInVCic6gPQibulbWyNzZQevjIAaNPrjWT9wNSyAkmD8PKIzIFwicupJ3uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看一下架构图。&lt;/span&gt;&lt;span&gt;您可以看到每个Kubernetes节点都与控制平面通信。&lt;/span&gt;&lt;span&gt;kubelet在每个节点上获取元数据，并执行CRI以在该节点上运行创建/删除容器。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;30737ab78cc733cb96ebf66bc119b866&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;ae5f8db101d5a67cb12dda437e420f74&quot;&gt;但是为什么不再使用Docker？&lt;/h2&gt;&lt;p data-lake-id=&quot;7853c541aa2ff2fc218b0bb5d8da9c84&quot;&gt;同样，Kubernetes仅使用CRI进行内部通信，而与Docker通信则需要桥接服务。这就是原因一。&lt;/p&gt;&lt;p data-lake-id=&quot;e3bbcfa54a282d1b754ee3febd6609d1&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b28288a7bd29535b367db17ec8e86db0&quot;&gt;为了解释下一个原因，我们必须稍微了解一下Docker架构。这是Docker的架构图。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5545454545454546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbBesvxlJeX5KRyLhmiaVicmWIqbibUJkwIhK195yXCI4NA8yTgibFoR3MBfFvmhf73DibAoTnbjCeT41uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2655dc7206c595fc96136d35dd0705da&quot;&gt;是的，Kubernetes实际上需要在红色区域内运行，但是Kubernetes不使用Docker Network和Volume。&lt;/p&gt;&lt;p data-lake-id=&quot;19a45a06057bd4769384c6f28973337d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;19a45a06057bd4769384c6f28973337d&quot;&gt;&lt;span&gt;如果一个东西拥有很多用户不用的功能，这本身可能会带来安全隐患。&lt;/span&gt;&lt;span&gt;您拥有的功能越少，攻击面就越小。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3e0a61dcf6ca5f3033db15e036566616&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d48bdd75150b2adeaf926ba5e3f5a696&quot;&gt;因此，这是后面社区提出来考虑替代方案的地方，称为CRI运行时。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CRI运行时&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;37d47e86ac572eac8d1efee69de67e0f&quot;&gt;有两种主要的CRI运行时实现。&lt;/p&gt;&lt;p data-lake-id=&quot;500cab46d1c2c6bbbe8891b03ef965a8&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;6732dd3bcec72ba49433fe98bbcf20c3&quot;&gt;containerd&lt;/h3&gt;&lt;p data-lake-id=&quot;0ffe5be26d86e6a543b239b7d86e110a&quot;&gt;如果您只想从Docker迁移，这是最好的选择，因为容器实际上是在Docker内部使用的，可以完成所有“运行时”工作，如上图所示。他们提供了CRI，这也是Docker提供的100％。&lt;/p&gt;&lt;p data-lake-id=&quot;5c6dfe6fa9c47fd2dca335d25dc2eb9a&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;09eb616fed465198d3c3d8adbbd5681b&quot;&gt;containerd是100％开放源代码，因此您可以在GitHub上查看文档，甚至也可以为此做出贡献。&lt;/p&gt;&lt;p data-lake-id=&quot;223fa7e9ab4047d8563470feecbbb78d&quot;&gt;https://github.com/containerd/containerd/&lt;/p&gt;&lt;p data-lake-id=&quot;5077637f8e480fc1755e6474793ee9ec&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;232874a9c936234abecb2cab5bafd292&quot;&gt;CRI-O&lt;/h3&gt;&lt;p data-lake-id=&quot;d23c919aa3e9ddcbfa3a991bc8f812c0&quot;&gt;CRI-O是主要由Red Hat员工开发的CRI运行时。实际上，此运行时现在已在Red Hat OpenShift中使用。是的，他们不再依赖Docker。&lt;/p&gt;&lt;p data-lake-id=&quot;58d323d1d299f3b5fc54f1f3fe2b17f5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;983c0e38599cf3764076f37ce58eaf04&quot;&gt;有趣的是，RHEL 7也开始不正式支持Docker。相反，它们为容器环境提供Podman，Buildah和CRI-O。&lt;/p&gt;&lt;p data-lake-id=&quot;1b59b6d2f67f7a5463b831427cd7f724&quot;&gt;https://github.com/cri-o/cri-o&lt;/p&gt;&lt;p data-lake-id=&quot;3813f397484218de8234826107e8779c&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;cdd95d9f2277d2f62afa470ec2f6d73a&quot;&gt;我认为CRI-O的优势在于它的极简风格，因为它被创建为“ CRI”运行时。尽管容器化作为Docker的一部分试图变得更加开源，但它们是纯CRI运行时，因此CRI-O没有CRI不需要的任何内容。&lt;/p&gt;&lt;p data-lake-id=&quot;8254b554f5ca53dc58b3d8db90b9ad88&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ad50a2db6997646143e56b6e1cd32a6f&quot;&gt;从Docker迁移到CRI-O可能会更具挑战性，因为它仍然可以提供在Kubernetes上运行应用程序所需的功能。&lt;/p&gt;&lt;p data-lake-id=&quot;a3e28c6e8711f72d3bd45d5aa674e83b&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d39748062ff4901b8cd9c68e5d0cca5a&quot;&gt;还有一件事...&lt;/p&gt;&lt;p data-lake-id=&quot;c3f449d930be2f477e6853e7adeff699&quot;&gt;当我们谈论容器运行时时，我们需要注意您在谈论哪种类型的运行时。我们确实有两种类型的运行时；CRI运行时和OCI运行时。&lt;/p&gt;&lt;p data-lake-id=&quot;a4332d9b901f96e83a86e4eb322f3f69&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e4efafe744dc444e0f0d1d7d36b0c90a&quot;&gt;CRI运行时&lt;/p&gt;&lt;p data-lake-id=&quot;507ffa7ba06eef542a77ff7b78534aa5&quot;&gt;正如我所描述的，CRI是Kubernetes提供的API，用于与容器运行时进行对话，以创建/删除容器化的应用程序。&lt;/p&gt;&lt;p data-lake-id=&quot;531c5ccf24261be09502e05dd3d11ae4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b4b9c944eb754c3e387a3168f54c1739&quot;&gt;它们通过IPC在gRPC中作为kubelet进行通信，并且运行时在同一主机上运行，并且CRI运行时负责从kubelet获取请求并执行OCI容器运行时以运行容器。等一下 也许我应该用一张图表来解释。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6363636363636364&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbBesvxlJeX5KRyLhmiaVicmWINnXc9j7fMVSibFwFGiaWNXuas8HMSj2hKLm83vZZHMnTsL6TO4v1ryPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9d195756ae98f2d57d11da53b66b0762&quot;&gt;因此，CRI运行时将执行以下操作&lt;/p&gt;&lt;ul data-lake-id=&quot;737e5890e792067ed6c52e94bb9bd5e6&quot; start=&quot;*&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;从kubelet获取gRPC请求&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;按照规范创建OCI json配置&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-lake-id=&quot;99d9e2ba111d4d0e6d88fe5466d6a97e&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;99d9e2ba111d4d0e6d88fe5466d6a97e&quot;&gt;OCI运行时&lt;/h3&gt;&lt;p data-lake-id=&quot;6e8753dcb6b508eae0b2345de08ba505&quot;&gt;OCI运行时负责使用Linux内核系统调用（例如cgroups和命名空间）生成容器。您可能听说过runc或gVisor。&lt;/p&gt;&lt;p data-lake-id=&quot;6e8753dcb6b508eae0b2345de08ba505&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6e8753dcb6b508eae0b2345de08ba505&quot;&gt;&lt;span&gt;附录1：&lt;/span&gt;&lt;span&gt;runC如何工作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6261363636363636&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbBesvxlJeX5KRyLhmiaVicmWIkRAyDUDakWeLtiaV995jeSq4tW8fys3sKl58Zfibicxibwt8zv9WCzwnLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1263c54eebf3f06995a18d746e7da3dd&quot;&gt;CRI通过调用Linux系统调用执行二进制文件后，runC生成容器。这表明runC依赖Linux计算机上运行的内核。&lt;/p&gt;&lt;p data-lake-id=&quot;eb6904dd3eb2172cd2318fbab6a3ab1e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5e266462cb36b83bc25591a4d1b22fac&quot;&gt;这也意味着，如果您发现runC的漏洞获得了主机的root特权，那么容器化的应用程序也可以这样做。一个厉害的黑客可能会使您的主机彻底报废！事情肯定会变糟。这就是为什么您也应该不断更新Docker（或任何其他容器运行时）的原因之一，而不仅仅是容器化的应用程序。&lt;/p&gt;&lt;p data-lake-id=&quot;7f99411cae7f42b76d03e3bac00f7e49&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;附录2：gVisor的工作方式&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.634090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbBesvxlJeX5KRyLhmiaVicmWItEibLPTqM8BKoAynUibqqfk38vAUkyOzTCvlLic7rBmjxuq9iaOvTppvlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3dbbdaa1a958b06ea5e0c8892242674b&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5ff64af18ffcfa3041e1ce307087cfbb&quot;&gt;gVisor最初由Google员工创建的OCI运行时。它实际上在其基础结构上运行，以运行其云服务，例如Google Cloud Run，Google App Engine（第二代）和Google Cloud Functions（甚至更多！）。&lt;/p&gt;&lt;p data-lake-id=&quot;51a314dc602bb732c6824b94fcbffec4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;38da88ab99d7ce436a5485f0c8f9d79a&quot;&gt;这里有趣的是gVisor具有“guest 内核”层，这意味着容器化的应用程序无法直接接触主机内核层。即使他们认为这样做，也只能接触gVisor的guest内核。&lt;/p&gt;&lt;p data-lake-id=&quot;dae78e8a3b7ad415c31fcc880ee20870&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3eb70f04866fdc7abaa9b83f7211b802&quot;&gt;gVisor的安全模型实际上非常有趣，值得阅读官方文档，&lt;span&gt;与runC的显着区别如下。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3bf59b0ae1a1544cd4e67553fe0d8da8&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3bf59b0ae1a1544cd4e67553fe0d8da8&quot;&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fd51ff98718b7d0e5a9691f97b143cfe&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da314c9ead841b3b835dbceceefe9689&quot;&gt;根据您的实际工作负载与业务需求，runC 可能并不总是最好的选择，请酌情做出考量！&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文链接：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://dev.to/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>49ab22a7a55737c32d1b1497c281ffa7</guid>
<title>详解数据仓库的实施步骤</title>
<link>https://toutiao.io/k/gzqpdu5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.29928172386272944&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbYaiapGBKxVhppoo6Bc30ztty9pImrkiaAibn87SCbtbMgPIdF0XhGmxYBZBAyXXU1vrjtHTMtZ7RcQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;接下来本公众号将陆续分享一些数仓、商业智能领域的干货。本期数仓系列将从项目和开发角度，详解BI数仓，包括一些概念和方法论，以及几个行业和企业实践过的实施经验。大家有其他想看的，欢迎留言！&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;本文共4000字，读完需要10分钟！&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建立数据仓库是一个解决企业数据问题应用的过程，是企业信息化发展到一定阶段必不可少的一步，也是发展数据化管理的重要基础。数仓的知识市面上的书籍和文章不少，但是实际实施依据行业不同，企业核心诉求不同，从技术到方法论各有不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何实施数仓项目，本文先以传统行业的数仓切入，从整体上讲下数据仓库的实施方法论！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7172503242542153&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6P20zcrSgzoHiastL4HRpZr9QjyFDbrbPSuGGiahUkcKs0I4C8xo9tdLIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;771&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据仓库的通用实施步骤&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、需求分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需求分析是数据仓库项目最重要的一个环节，数仓说到底还是服务于业务，支撑于业务，如果需求分析不准确，做了没人用，上了不好用，会直接影响业务/客户的使用，最终导致项目的失败。为了避免最坏的情况，磨刀不误砍柴工，前期一定要重视需求的调研、挖掘和分析，并采用一些严谨科学的措施和方法去做需求分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实际调研过程中分享几个经验：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、尽可能与业务方/客户方一起分析需求，引导对方将项目所要实现的整体框架和业务细节部分述清楚，最好的方式就是需求人员和设计人员基于原型来讨论，从而正确理解实际的业务需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、必须实事求是地将数据仓库所能实现的目标和不容易解决的问题与协商清楚。这一个环节趟过不少坑，IT方急着上线，业务方对于项目还处于一知半解，甚至在推动的时候可能避重就轻，比如一期不满足的需求强行上，长远来看项目会产生不少推诿和扯皮，消磨的是对方的信任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在需求讨论的基础上，需要理解业务工作流程，当然如果你已经具备了这个行业丰富的业务知识，那可以在需求调研的时候尽可能地让对方按照自己的思路去完成数据仓库系统的功能设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、需求方群体的分类，BI项目最终的使用对象可以分为以下几类：数据查询者、报表查询者、企业决策者&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4965277777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6Pke3LoV2GHAdvmiaLJgRFFVOy7LficUYictqhVbUMGn5yb7aGZH6iaur49g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1152&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三类人群的需求特点完全不一样，沟通的时候需要注意区分并深刻理解&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、需求调研的再完美，也避免不了需求变更。现实是很多情况下需求是不确定的，业务方是提不出有价值的需求的，需求今天是A明天又变成B无法一步做到位的，这都很正常，作为项目实施者要做好心理预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般情况下，业务方能够提供的都是需求的整体框架部分或者是实际需求的一部分内容，不能预见未来需要增加的需求，这也注定了数仓项目是一个不断循环、反馈，使系统不断完善增长的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不能规避风险但是可以减少风险，所以科学的调研尤为重要。以下是调研模板，当需求调研完成时，需要对采集结果进行分析、归纳、整理，最终形成完整的需求分析报告。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8409742120343839&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6P7LGhrC4RmZoufQJh6klJjHUiahOspnXSQMLeoXrGSgYbQv899v9P3pQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;摘于《数据化建设知识图谱》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务需求的实施目的就是真正理解企业决策者的战略性目标。在理解建立商业智能系统目标的基础上，建立有效的企业管理模式，制定出详细的企业数据仓库业务管理规范，设计出常用的ETL数据采集规范和工作流程，从而明确商业智能系统的实施范围和目标。为了提高企业的分析决策能力，可以利用当下的局域网技术和互联网技术实现企业对各种信息的查询和分析，通过建立企业业务数据模型，分析商业智能系统的系统架构、数据源之间的差异、对数据质量的评估和各种信息的处理方法，有效地提高企业商业智能系统的分析和决策能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、数据仓库的逻辑分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据仓库在逻辑上可以分成操作型数据库、数据仓库层、数据集市层、数据分析应用层和报表展示层，其架构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9742990654205608&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6PgFLILRflBibJn07Ovt8TGSuodFqF9ZvjWfrdfr81icRhbgCbaMnYPUXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;856&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、设计ODS系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ODS 可以有两种形式：ODS 数据缓冲区和ODS统一信息视图区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;① ODS数据缓冲区&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ODS数据缓冲区是业务数据流动过程的第一个存储区，实现了数据仓库从各个业务系统的数据源中将数据抽取出来，并且装载到ODS数据缓冲区的这一过程，从而实现统一的全局的企业数据平台，为以后的数据抽取、清洗、转换过程打下坚实的基础。对于数据的数据源可以采用增量的方式进行抽取，对于经常变化更新的数据一般采用全量的方式进抽取。ODS数据缓冲区具有实时性的特征，ODS系统将各个孤立的业务系统的生产运营数据集成起来，组成统一的、全局的企业数据交换平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;② ODS统一信息视图区&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ODS统一信息视图区是指有选择地集成各类业务源数据，对数据进行抽取、清洗、转换操作，以数据主题域为数据集成的基础，对数据进行分类和组织，使用户能够通过统一信心视图区获得跟某个主题域相关的实时性数据。各业务系统和ODS统一信息视图区可以互相访问，可以生成具有实时性的操作性报表和查询某一主题的近期全部信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;③ ODS数据缓冲区和ODS统一信息视图区的区别和共同点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ODS 数据缓冲区主要为业务源数据抽取到数据仓库中提供中间数据缓冲的功能，与&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ODS 统一信息视图区最大的区别就是数据抽取、清洗、转换、加载的转换规则和数据存储的方式不同。ODS统一信息视图区是完全按照主题的方式进行数据存储，向用户提供快速的报表展示和数据实时查询的功能。而ODS数据缓冲区的ETL规则一般只进行简单的汇总、计算，或者从操作型数据库中直接抽取而中间不进行任何转化。ODS 统一信息视图区的数据一般都是从ODS数据缓冲区中抽取过来的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、数据仓库建模&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据仓库建模在前面已经有了详细的介绍，数据仓库模型是IT技术开发人员、业务人员、决策管理者相互沟通的一套语言和平台。对于数据建模工程师来说，对业务的深刻理解是首要任务，因为数据仓库建模分为概念模型设计、逻辑模型设计和物理模型设计3个阶段，一般按照自顶向下的顺序依次对模型进行设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;概念模型主要是模型设计人员对业务规则的理解，是最高层次的数据模型，几乎涵盖了业务所有的核心概念和重要的主题，为以后逻辑模型的建设打下了基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;逻辑模型是对概念模型的分解、细化，将数据主题划分成一个个的实体和实体关系，一般将第三范式作为设计的模板。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;物理模型在逻辑模型的基础上对模型实体进行细节性的描述，包括字段类型、长度、索引等因素，最后转化成数据库存储的物理表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1642276422764228&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6PeVxibzv0lUYI7hXlwAJ44Qz9S6T54EknHbdwDOs1Q3VooR0StpjXBcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.37373737373737376&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6Po08cozGBUQLLHGnHPMcr0SQMPGhDfRNlCTbeVzte7GGH0Jj2pbzb8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;摘于《数据化建设知识图谱》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、数据集市建模&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般数据集市模型的建设是基于需求分析得到的结果，数据集巾的建模主要针对事实表和维表的设计。例如，部门员工关系表，如果事实表包含部门编码，则数据可以分析到部门。如果事实表又包含员工编码，则数据既可以分析到部门，又可以分析到员工。一张事实表除了包含所要分析的维度编码外，还包括需要分析的度量值。例如，用户用电分析事实表，它的主题描述就是按地区、时间、电压等级统计用户的耗电量、应收电费，并进行同期对比；它的维度就是地区、时间、电压等级，度量值包括耗电量、应收电费等；指标来源就是数据仓库中的计费结果表、用户基本信息表。维表一般采用增量的方式进行抽取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.26776519052523173&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6P4u66EaA5cDiccOZCpdUSC1sD8ULeMum7cdgbpucGVhfT9YXumm880Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;971&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、数据源分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;所谓数据源分析，就是对源数据进行分析和总结，得出源数据的范围、格式、更新方式、更新频率和质量好坏的过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据源分析是指通过需求调研得知业务数据源的基本情况，并且加以详细说明，具体内容包括数据源中存在哪些物理表，表之间的关系和表中每个字段的数据类型和含义等。一般来说，业务数据源通常会有数据不完整、口径不一致，或者各个数据源存在业务规则不统一的情况。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，在分析的过程中，需要确定业务源数据中哪些数据需要被抽取。为了确定合适的抽取方&lt;/span&gt;&lt;span&gt;式，需要在抽取之前对数据源进行分析，分析的范围一般包括数据的格式、数据的范围、更新的方式、数据质量的好坏。在分析的过程中，应该尽可能获取分析的结果，形成数据源分析报告，在仔细研究分析报告后，再选择合适的抽取、加载方式。&lt;span&gt;了解这些数据源的特点，有利于ETL 抽取时对数据的整合和统一，从而保证数据的质量和可信度。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、数据的获取与整合&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的获取与整合存在于数据仓库项目中的各个阶段。数据仓库很重要的一个作用就是将散落在各业务系统的数据整合起来，不规范的数据规范起来，以一种便于分析和应用的方式放到数据仓库里，供前端应用分析。ETL 过程实际上就是数据流动的过程，即从不同的数据源流向统一的目标数据库。数据的获取与整合是完成数据仓库建设取复杂的过程，它关系到数据的质量，是数据仓库项目建设的根基。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;八、数据应用和报表展现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;报表绝对是让人痛苦的东西。格式复杂、需求多变，业务没事就改需求或者增加几个。虽然说起报表感觉很老土，但确实是整个数仓项目价值落地呈现的东西。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;做报表多的人，基本上都会做一个自己的工具，至少也会做一个引擎，按照自己的理解用一种结构化加动态的方式去定义所需要的报表，可以灵活的选择所需要的数据，设计展现样式生成报表。现在一般都是采用专业的低代码的报表工具来做报表，比如FineReport去做报表，提升开发效率，侧重应用分析，毕竟没有谁想一天到晚被报表缠身。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结合前面谈到的数据分层的机制，会发现，不管基于哪一层，都有做报表的需求。个人认为报表的重点不在与报表的制作，而在于如何利用报表为业务为项目谋价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4965277777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p2v54xNeNEbgVnvbIqTRuaqMuM0iaibI6Pke3LoV2GHAdvmiaLJgRFFVOy7LficUYictqhVbUMGn5yb7aGZH6iaur49g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1152&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;大公司都会有负责报表分析这块的项目人员，那针对报表延伸出来的工作，报表需求分析、指标体系规划、以及各位为经营为管理为基层人员的报表分类，还有围绕业务的分层设计。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于基层员工，报表使用的最多的就是录数据，查询数据。比如商场售货员浏览数据来查看商品的售卖情况，以此来及时补货，还有每天的日销售数据录入&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于部分业务人员，报表的不再是简单的展示和录入，会衍生出一些分析的需求，比如采购经理，他需要决定采购哪些品牌的商品，从哪一家供应商来采购，如何规划商店的商品。那方法就是看报表看哪些商品买的好，以此来考虑是否需要加购哪些品牌商品，放弃那些品牌商品或者搞促销。高大上一点的说辞就是利用数据&lt;span&gt;优化商品结构，选择供应商。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于企业管理层，更多的说是做dashboard进行指标的监控，做的业绩分析&lt;em&gt;(时间、地区纬度等)&lt;/em&gt;。&lt;/span&gt;&lt;span&gt;而这一过程，也是通过数据使管理层可以更容易的按照标准的管理方法进行决策(如果说员工是判断，领导就是决策了...)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【END】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;最后，感兴趣的公众号后台回复&lt;span&gt;&lt;strong&gt;“资料”&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，我们整理了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6个G数据平台、数据仓库、数据仓库、数据治理、企业数据化管&lt;/span&gt;&lt;span&gt;理案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，供大家免费领取！&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8118081180811808&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p2v54xNeNEbYaiapGBKxVhppoo6Bc30ztk0x00qAKk4hYcKo0sGooK3iaVDJZe4ibAoX3Cr2tiaukpvO6ykJXw8ydg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>48cf584d0a3197736e876d1d829609b6</guid>
<title>你们公司分支策略是什么样的</title>
<link>https://toutiao.io/k/irwn6dy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;div data-md-url=&quot;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;amp;action=edit&amp;amp;isNew=1&amp;amp;type=10&amp;amp;createType=0&amp;amp;token=233077590&amp;amp;lang=zh_CN&quot; markdown-here-wrapper-content-modified=&quot;true&quot;&gt;&lt;p&gt;在基于git的工作流中，master一般是做持续集成的，开发人员在特性分支开发，经过测试后，就会merge到master做集成测试，测试通过就表示master可部署了。&lt;/p&gt;&lt;p&gt;可现实情况下，特性分支自测没问题，不代表就真的没问题，测试人员还没测试呢，所以此时的master分支其实是没准备好的（从master特定commit id到生成分支其实是有一定难度的）&lt;/p&gt;&lt;p&gt;我们目前的做法，在master分支之前还有一个SIT系统集成分支，也就是说这个分支是专门给QA人员测试的，测试没问题后，将特性分支的代码合并到pre分支，仿真环境如果没问题，再将特性分支合并到master分支，然后进行发布。&lt;/p&gt;&lt;p&gt;SIT分支相当于做集成测试了，保证了master的代码是相对可靠的。&lt;/p&gt;&lt;p&gt;那什么代码合并到SIT分支呢？不管几个项目，也不管这些项目具体的上线时间，特性分支都可以合并到SIT分支，然后统一给QA人员测试（相当于提前测试多个项目了），正因为这样，上线的时候无法从SIT分支merge到master分支。&lt;/p&gt;&lt;p&gt;这种工作流多了一个步骤，必然会有副作用，首先merge到SIT分支的时候，如果有冲突，SIT分支不应该解决冲突，因为SIT分支只是为了测试，不会上线的，所以不应该解决冲突；其次很多人说为了避免有冲突，那么我就经常性的将SIT分支上的代码merge（也就是pull）到特性分支，这也非常不好，因为这个特性分支就不隔离了。所以正确的做法，如果merge到SIT分支产生冲突，应该自己去解决冲突，可如何找到和那个分支冲突呢？&lt;/p&gt;&lt;p&gt;还有SIT分支和master分支因为时间点和作用不一样，没有必要保持代码是同步，可pre分支和master分支理论上应该保持同步，上线的时候没有选择merge SIT分支到master分支的原因是cherry-pick还是有一定复杂度的，merge特定commit id也是有复杂度的，所以我们选择从特性分支合并到master，那必然要思考一个问题，pre分支测试通过代表master分支测试通过吗？如果pre到master是一个fast forward，理论上不用再重复测试。&lt;/p&gt;&lt;p&gt;还有一种做法和我们的做法类似，就是有一个隐形的SIT分支，特性分支一旦提交到远端，就自动merge到SIT分支，查看是否有冲突，如果有冲突，就提醒开发者去解决，从而保障能够持续集成。&lt;/p&gt;&lt;p&gt;最后说说特性分支，我们还喜欢根据迭代周期去弄一个大分支，实际上这个大分支包含了很多子功能，也就是说可以拆分为多个子分支，那这两种方式有什么优缺点呢？&lt;/p&gt;&lt;p&gt;如果在一个大分支，能够减少一些冲突，但做不到隔离了，如果频繁的pull，是选择merge还是rebase呢？应该选择merge，推送到远端的分支不建议做rebase，会产生很多问题。其实既然选择了一个大分支，那git历史记录必然会很难看的，基本没有追朔性。如果实在要使用一个大分支，建议不要太频繁的提交到远端，尽量做好自测再提交。SIT部署的环境（QA）是为了测试人员测试的，应该保障一定的稳定性，它们不是给开发人员调试用的。&lt;/p&gt;&lt;p&gt;建议还是子分支，一方面说不定有一天就上线部分功能，子分支就合适了；另外子分支也能做到隔离；当然可能会遇到很多merge冲突的问题，这时候就需要自己甄别与那个分支发生冲突了（目前没有想到办法）。&lt;/p&gt;&lt;p&gt;git工作流有多种选择，主要看整个团队对git的理解程度，并行项目数量，CI/CD方式等等，没有绝对的好坏，只要能说得通，没有明显的缺点，那就是好的工作流。&lt;/p&gt;&lt;p title=&quot;MDH:PHA+5Zyo5Z+65LqOZ2l055qE5bel5L2c5rWB5Lit77yMbWFzdGVy5LiA6Iis5piv5YGa5oyB57ut&amp;#10;6ZuG5oiQ55qE77yM5byA5Y+R5Lq65ZGY5Zyo54m55oCn5YiG5pSv5byA5Y+R77yM57uP6L+H5rWL&amp;#10;6K+V5ZCO77yM5bCx5LyabWVyZ2XliLBtYXN0ZXLlgZrpm4bmiJDmtYvor5XvvIzmtYvor5XpgJro&amp;#10;v4flsLHooajnpLptYXN0ZXLlj6/pg6jnvbLkuobjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRh&amp;#10;YmxlPSJmYWxzZSIgaWQ9IjE2MDY5MTczMjc4NTBfMC44OTI1ODMyNjE4OTkwOTUiPjwvbXBjaGVj&amp;#10;a3RleHQ+PC9wPjxwPjxicj48L3A+PHA+5Y+v546w5a6e5oOF5Ya15LiL77yM54m55oCn5YiG5pSv&amp;#10;6Ieq5rWL5rKh6Zeu6aKY77yM5LiN5Luj6KGo5bCx55yf55qE5rKh6Zeu6aKY77yM5rWL6K+V5Lq6&amp;#10;5ZGY6L+Y5rKh5rWL6K+V5ZGi77yM5omA5Lul5q2k5pe255qEbWFzdGVy5YiG5pSv5YW25a6e5piv&amp;#10;5rKh5YeG5aSH5aW955qE77yI5LuObWFzdGVy54m55a6a5o+Q5Lqk5Yiw55Sf5oiQ5YiG5pSv5YW2&amp;#10;5a6e5piv5pyJ5LiA5a6a6Zq+5bqm55qE77yJPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0i&amp;#10;ZmFsc2UiIGlkPSIxNjA2OTE3MzI3ODUxXzAuMDYyNjY1NTc2MzM1ODU4NzkiPjwvbXBjaGVja3Rl&amp;#10;eHQ+PC9wPjxwPjxicj48L3A+PHA+5oiR5Lus55uu5YmN55qE5YGa5rOV77yM5ZyobWFzdGVy5YiG&amp;#10;5pSv5LmL5YmN6L+Y5pyJ5LiA5LiqU0lU57O757uf6ZuG5oiQ5YiG5pSv77yM5Lmf5bCx5piv6K+0&amp;#10;6L+Z5Liq5YiG5pSv5piv5LiT6Zeo57uZUUHkurrlkZjmtYvor5XnmoTvvIzmtYvor5XmsqHpl67p&amp;#10;opjlkI7vvIzlho3lsIbnibnmgKfliIbmlK/nmoTku6PnoIHlkIjlubbliLBwcmXliIbmlK/vvIzk&amp;#10;u7/nnJ/njq/looPlpoLmnpzmsqHpl67popjvvIzlho3lsIbnibnmgKfliIbmlK/lkIjlubbliLBt&amp;#10;YXN0ZXLliIbmlK/vvIznhLblkI7ov5vooYzlj5HluIPjgII8bXBjaGVja3RleHQgY29udGVudGVk&amp;#10;aXRhYmxlPSJmYWxzZSIgaWQ9IjE2MDY5MTczMjc4NTJfMC45MDIzMDQ0MTk1MzM5MDI3Ij48L21w&amp;#10;Y2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPlNJVOWIhuaUr+ebuOW9k+S6juWBmumbhuaIkOa1&amp;#10;i+ivleS6hu+8jOS/neivgeS6hm1hc3RlcueahOS7o+eggeaYr+ebuOWvueWPr+mdoOeahOOAgjxt&amp;#10;cGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYwNjkxNzMyNzg1M18wLjUy&amp;#10;MDU5NzM5MjU1MTM5NzQiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+6YKj5LuA5LmI&amp;#10;5Luj56CB5ZCI5bm25YiwU0lU5YiG5pSv5ZGi77yfPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjA2OTE3MzI3ODU0XzAuMTQzNDA5NjQyODgzODM2NSI+PC9tcGNoZWNr&amp;#10;dGV4dD7kuI3nrqHlh6DkuKrpobnnm67vvIzkuZ/kuI3nrqHov5nkupvpobnnm67lhbfkvZPnmoTk&amp;#10;uIrnur/ml7bpl7TvvIznibnmgKfliIbmlK/pg73lj6/ku6XlkIjlubbliLBTSVTliIbmlK/vvIzn&amp;#10;hLblkI7nu5/kuIDnu5lRQeS6uuWRmOa1i+ivle+8iOebuOW9k+S6juaPkOWJjea1i+ivleWkmuS4&amp;#10;qumhueebruS6hu+8ie+8jOato+WboOS4uui/meagt++8jOS4iue6v+eahOaXtuWAmeaXoOazleS7&amp;#10;jlNJVOWIhuaUr21lcmdl5YiwbWFzdGVy5YiG5pSv44CCPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0&amp;#10;YWJsZT0iZmFsc2UiIGlkPSIxNjA2OTE3MzI3ODU1XzAuODYxNjc4NDIwMjg0MTEwMSI+PC9tcGNo&amp;#10;ZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48cD7ov5nnp43lt6XkvZzmtYHlpJrkuobkuIDkuKrmraXp&amp;#10;qqTvvIzlv4XnhLbkvJrmnInlia/kvZznlKjvvIzpppblhYhtZXJnZeWIsFNJVOWIhuaUr+eahOaX&amp;#10;tuWAme+8jOWmguaenOacieWGsueqge+8jFNJVOWIhuaUr+S4jeW6lOivpeino+WGs+WGsueqge+8&amp;#10;jOWboOS4ulNJVOWIhuaUr+WPquaYr+S4uuS6hua1i+ivle+8jOS4jeS8muS4iue6v+eahO+8jOaJ&amp;#10;gOS7peS4jeW6lOivpeino+WGs+WGsueqge+8mzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9&amp;#10;ImZhbHNlIiBpZD0iMTYwNjkxNzMyNzg1OF8wLjQ1ODY0ODc5ODIwMzEyMiI+PC9tcGNoZWNrdGV4&amp;#10;dD7lhbbmrKHlvojlpJrkurror7TkuLrkuobpgb/lhY3mnInlhrLnqoHvvIzpgqPkuYjmiJHlsLHn&amp;#10;u4/luLjmgKfnmoTlsIZTSVTliIbmlK/kuIrnmoTku6PnoIFtZXJnZe+8iOS5n+WwseaYr3B1bGzv&amp;#10;vInliLDnibnmgKfliIbmlK/vvIzov5nkuZ/pnZ7luLjkuI3lpb3vvIzlm6DkuLrov5nkuKrnibnm&amp;#10;gKfliIbmlK/lsLHkuI3pmpTnprvkuobjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJm&amp;#10;YWxzZSIgaWQ9IjE2MDY5MTczMjc4NTdfMC41Mzc4MjE0NTEwNDk2MjgiPjwvbXBjaGVja3RleHQ+&amp;#10;5omA5Lul5q2j56Gu55qE5YGa5rOV77yM5aaC5p6cbWVyZ2XliLBTSVTliIbmlK/kuqfnlJ/lhrLn&amp;#10;qoHvvIzlupTor6Xoh6rlt7Hljrvop6PlhrPlhrLnqoHvvIzlj6/lpoLkvZXmib7liLDlkozpgqPk&amp;#10;uKrliIbmlK/lhrLnqoHlkaLvvJ88bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIg&amp;#10;aWQ9IjE2MDY5MTczMjc4NTZfMC4wMjU2OTYxNTc4MDY5NDU0NTIiPjwvbXBjaGVja3RleHQ+PC9w&amp;#10;PjxwPjxicj48L3A+PHA+6L+Y5pyJU0lU5YiG5pSv5ZKMbWFzdGVy5YiG5pSv5Zug5Li65pe26Ze0&amp;#10;54K55ZKM5L2c55So5LiN5LiA5qC377yM5rKh5pyJ5b+F6KaB5L+d5oyB5Luj56CB5piv5ZCM5q2l&amp;#10;77yM5Y+vcHJl5YiG5pSv5ZKMbWFzdGVy5YiG5pSv55CG6K665LiK5bqU6K+l5L+d5oyB5ZCM5q2l&amp;#10;77yM5LiK57q/55qE5pe25YCZ5rKh5pyJ6YCJ5oupbWVyZ2UgU0lU5YiG5pSv5YiwbWFzdGVy5YiG&amp;#10;5pSv55qE5Y6f5Zug5pivY2hlcnJ5LXBpY2vov5jmmK/mnInkuIDlrprlpI3mnYLluqbnmoTvvIxt&amp;#10;ZXJnZeeJueWummNvbW1pdCBpZOS5n+aYr+acieWkjeadguW6pueahO+8jOaJgOS7peaIkeS7rOmA&amp;#10;ieaLqeS7jueJueaAp+WIhuaUr+WQiOW5tuWIsG1hc3Rlcu+8jOmCo+W/heeEtuimgeaAneiAg+S4&amp;#10;gOS4qumXrumimO+8jHByZeWIhuaUr+a1i+ivlemAmui/h+S7o+ihqG1hc3RlcuWIhuaUr+a1i+iv&amp;#10;lemAmui/h+WQl++8nzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYw&amp;#10;NjkxNzMyNzg1OV8wLjIwMzM3Njg2MzUzODAxNjQzIj48L21wY2hlY2t0ZXh0PuWmguaenHByZeWI&amp;#10;sG1hc3RlcuaYr+S4gOS4qmZhc3QgZm9yd2FyZO+8jOeQhuiuuuS4iuS4jeeUqOWGjemHjeWkjea1&amp;#10;i+ivleOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYwNjkxNzMy&amp;#10;Nzg2MF8wLjMwOTA4MTU2MTExNjQ0ODYiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+&amp;#10;6L+Y5pyJ5LiA56eN5YGa5rOV5ZKM5oiR5Lus55qE5YGa5rOV57G75Ly877yM5bCx5piv5pyJ5LiA&amp;#10;5Liq6ZqQ5b2i55qEU0lU5YiG5pSv77yM54m55oCn5YiG5pSv5LiA5pem5o+Q5Lqk5Yiw6L+c56uv&amp;#10;77yM5bCx6Ieq5YqobWVyZ2XliLBTSVTliIbmlK/vvIzmn6XnnIvmmK/lkKbmnInlhrLnqoHvvIzl&amp;#10;poLmnpzmnInlhrLnqoHvvIzlsLHmj5DphpLlvIDlj5HogIXljrvop6PlhrPvvIzku47ogIzkv53p&amp;#10;mpzog73lpJ/mjIHnu63pm4bmiJDjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxz&amp;#10;ZSIgaWQ9IjE2MDY5MTczMjc4NjFfMC45MjQ4OTkxNzE5Mzg2MjgxIj48L21wY2hlY2t0ZXh0Pjwv&amp;#10;cD48cD48YnI+PC9wPjxwPuacgOWQjuivtOivtOeJueaAp+WIhuaUr++8jOaIkeS7rOi/mOWWnOas&amp;#10;ouagueaNrui/reS7o+WRqOacn+WOu+W8hOS4gOS4quWkp+WIhuaUr++8jOWunumZheS4iui/meS4&amp;#10;quWkp+WIhuaUr+WMheWQq+S6huW+iOWkmuWtkOWKn+iDve+8jOS5n+WwseaYr+ivtOWPr+S7peaL&amp;#10;huWIhuS4uuWkmuS4quWtkOWIhuaUr++8jOmCo+i/meS4pOenjeaWueW8j+acieS7gOS5iOS8mOe8&amp;#10;uueCueWRou+8nzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYwNjkx&amp;#10;NzMyNzg2Ml8wLjY1NzM0MTYwNDg3NDIyNTUiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+&amp;#10;PHA+5aaC5p6c5Zyo5LiA5Liq5aSn5YiG5pSv77yM6IO95aSf5YeP5bCR5LiA5Lqb5Yay56qB77yM&amp;#10;5L2G5YGa5LiN5Yiw6ZqU56a75LqG77yM5aaC5p6c6aKR57mB55qEcHVsbO+8jOaYr+mAieaLqW1l&amp;#10;cmdl6L+Y5pivcmViYXNl5ZGi77yfPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2Ui&amp;#10;IGlkPSIxNjA2OTE3MzI3ODYzXzAuODc1OTM2MjI3MjYyNjQyNSI+PC9tcGNoZWNrdGV4dD7lupTo&amp;#10;r6XpgInmi6ltZXJnZe+8jOaOqOmAgeWIsOi/nOerr+eahOWIhuaUr+S4jeW7uuiuruWBmnJlYmFz&amp;#10;Ze+8jOS8muS6p+eUn+W+iOWkmumXrumimOOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9&amp;#10;ImZhbHNlIiBpZD0iMTYwNjkxNzMyNzg2NF8wLjI2MjU3MDg2MzI2NDM2NzA3Ij48L21wY2hlY2t0&amp;#10;ZXh0PuWFtuWunuaXoueEtumAieaLqeS6huS4gOS4quWkp+WIhuaUr++8jOmCo2dpdOWOhuWPsuiu&amp;#10;sOW9leW/heeEtuS8muW+iOmavueci+eahO+8jOWfuuacrOayoeaciei/veaclOaAp+OAgjxtcGNo&amp;#10;ZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYwNjkxNzMyNzg2NV8wLjY0NDQz&amp;#10;MTM1NjMxODE4NDciPjwvbXBjaGVja3RleHQ+5aaC5p6c5a6e5Zyo6KaB5L2/55So5LiA5Liq5aSn&amp;#10;5YiG5pSv77yM5bu66K6u5LiN6KaB5aSq6aKR57mB55qE5o+Q5Lqk5Yiw6L+c56uv77yM5bC96YeP&amp;#10;5YGa5aW96Ieq5rWL5YaN5o+Q5Lqk44CCPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFs&amp;#10;c2UiIGlkPSIxNjA2OTE3MzI3ODY2XzAuNDI2NjMyODI2NjY5NTY2MjYiPjwvbXBjaGVja3RleHQ+&amp;#10;U0lU6YOo572y55qE546v5aKD77yIUUHvvInmmK/kuLrkuobmtYvor5XkurrlkZjmtYvor5XnmoTv&amp;#10;vIzlupTor6Xkv53pmpzkuIDlrprnmoTnqLPlrprmgKfvvIzlroPku6zkuI3mmK/nu5nlvIDlj5Hk&amp;#10;urrlkZjosIPor5XnlKjnmoTjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIg&amp;#10;aWQ9IjE2MDY5MTczMjc4NjdfMC4wNTc5OTM1MDQ3MjUyNzc1MzQiPjwvbXBjaGVja3RleHQ+PC9w&amp;#10;PjxwPjxicj48L3A+PHA+5bu66K6u6L+Y5piv5a2Q5YiG5pSv77yM5LiA5pa56Z2i6K+05LiN5a6a&amp;#10;5pyJ5LiA5aSp5bCx5LiK57q/6YOo5YiG5Yqf6IO977yM5a2Q5YiG5pSv5bCx5ZCI6YCC5LqG77yb&amp;#10;PG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjA2OTE3MzI3ODY5XzAu&amp;#10;MDI3MTUxMzM1ODczMDA3MzMyIj48L21wY2hlY2t0ZXh0PuWPpuWkluWtkOWIhuaUr+S5n+iDveWB&amp;#10;muWIsOmalOemu++8mzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYw&amp;#10;NjkxNzMyNzg3MF8wLjUxMDEyNDEzNDU5OTc4ODkiPjwvbXBjaGVja3RleHQ+5b2T54S25Y+v6IO9&amp;#10;5Lya6YGH5Yiw5b6I5aSabWVyZ2XlhrLnqoHnmoTpl67popjvvIzov5nml7blgJnlsLHpnIDopoHo&amp;#10;h6rlt7HnlITliKvkuI7pgqPkuKrliIbmlK/lj5HnlJ/lhrLnqoHkuobvvIjnm67liY3msqHmnInm&amp;#10;g7PliLDlip7ms5XvvInjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9&amp;#10;IjE2MDY5MTczMjc4NjhfMC44ODIzOTY2MzkzNDYzODQ5Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48&amp;#10;YnI+PC9wPjxwPmdpdOW3peS9nOa1geacieWkmuenjemAieaLqe+8jOS4u+imgeeci+aVtOS4quWb&amp;#10;oumYn+WvuWdpdOeahOeQhuino+eoi+W6pu+8jOW5tuihjOmhueebruaVsOmHj++8jENJL0NE5pa5&amp;#10;5byP562J562J77yM5rKh5pyJ57ud5a+555qE5aW95Z2P77yM5Y+q6KaB6IO96K+05b6X6YCa77yM&amp;#10;5rKh5pyJ5piO5pi+55qE57y654K577yM6YKj5bCx5piv5aW955qE5bel5L2c5rWB44CCPG1wY2hl&amp;#10;Y2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjA2OTE3MzI3ODcxXzAuMTA4OTkx&amp;#10;Njk3MjAyNzY5MzYiPjwvbXBjaGVja3RleHQ+PC9wPjxwPuKAizxicj48L3A+&quot;/&gt;&lt;/div&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;觉得写得还不错？就鼓励一下吧！&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>73c34f761867da0a134724c41cbd52ca</guid>
<title>Golang 程序性能分析（三）：用 pprof 分析 gRPC 服务的性能</title>
<link>https://toutiao.io/k/kbj19fj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是Golang程序性能分析系列文章的最后一篇，这次我们的主要内容是&lt;strong&gt;如何使用&lt;code&gt;pprof&lt;/code&gt;工具对&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247483894&amp;amp;idx=1&amp;amp;sn=9bad832154f63015096debcb7fcdca63&amp;amp;chksm=fa80d061cdf75977db9171ee6bbf4fac3919743c8700ebd49671a170a8ceb5f314e74f15b2fb&amp;amp;scene=21&amp;amp;cur_album_id=1576438069854027776#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;gRPC服务&lt;/a&gt;的程序性能进行分析&lt;/strong&gt;。关于&lt;code&gt;&lt;span&gt;gRPC&lt;/span&gt;&lt;/code&gt;这个框架的文章之前已经写过不少文章了，如果你对它还不太熟悉，不知道它是用来干什么的，可以通过&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247483889&amp;amp;idx=1&amp;amp;sn=141ab10eb58a3df89dba390fd5df0b1f&amp;amp;chksm=fa80d066cdf759705afbaf5b3a83df9783611665c3cb03d2a6605359e9ccdb70b836143f9fb7&amp;amp;scene=21&amp;amp;cur_album_id=1576438069854027776#wechat_redirect&quot; textvalue=&quot;gRPC入门系列&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;gRPC入门系列&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/a&gt;的文章对它先做个了解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;怎么用pprof分析gRPC的性能&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;gRPC&lt;/code&gt;底层基于&lt;code&gt;HTTP&lt;/code&gt;协议的，一个典型的gRPC服务的启动程序可能像下面这样&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  lis, err := net.Listen(&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span&gt;10000&lt;/span&gt;)&lt;br/&gt;  grpcServer := grpc.NewServer()&lt;br/&gt;  pb.RegisterRouteGuideServer(grpcServer, &amp;amp;routeGuideServer{})&lt;br/&gt;  grpcServer.Serve(lis)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是一个&lt;code&gt;RPC&lt;/code&gt;框架不是&lt;code&gt;Web&lt;/code&gt;框架，不支持浏览器用&lt;code&gt;URL&lt;/code&gt;访问，所以也就没法向上一节给&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486654&amp;amp;idx=1&amp;amp;sn=ea7171f58254dfecebc61cfbec7b64e5&amp;amp;chksm=fa80dd29cdf7543f97f90723e0470fbcb437f9a614a44c51ccf64e98f56e54711d713e204ab0&amp;amp;token=1150263485&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;code&gt;Echo&lt;/code&gt;和&lt;code&gt;Gin&lt;/code&gt;框架单独注册&lt;code&gt;pprof&lt;/code&gt;采集数据用的那些路由&lt;/a&gt;。但是我们可以换个角度来看这个问题，&lt;code&gt;pprof&lt;/code&gt;做CPU分析原理是按照一定的频率采集程序CPU（包括寄存器）的使用情况，确定应用程序在主动消耗 CPU 周期时花费时间的位置。所以我们可以在&lt;code&gt;gRPC&lt;/code&gt;服务启动时，异步启动一个监听其他端口的&lt;code&gt;HTTP&lt;/code&gt;服务，通过这个&lt;code&gt;HTTP&lt;/code&gt;服务间接获取&lt;code&gt;gRPC&lt;/code&gt;服务的分析数据。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;go &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;   http.ListenAndServe(&lt;span&gt;&quot;:10001&quot;&lt;/span&gt;, nil)&lt;br/&gt;}()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于使用默认的&lt;code&gt;ServerMux&lt;/code&gt;（服务复用器），所以只要匿名导入&lt;code&gt;net/http/pprof&lt;/code&gt;包，这个&lt;code&gt;HTTP&lt;/code&gt;的复用器默认就会注册&lt;code&gt;pprof&lt;/code&gt;相关的路由。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外建议在启动程序的最开端，调用&lt;code&gt;runtime.SetBlockProfileRate(1)&lt;/code&gt;指示对阻塞超过1纳秒的&lt;code&gt;goroutine&lt;/code&gt;进行数据采集。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;  runtime.SetBlockProfileRate(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    http.ListenAndServe(&lt;span&gt;&quot;:10001&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;  }()&lt;br/&gt;  &lt;br/&gt;  lis, err := net.Listen(&lt;span&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span&gt;10000&lt;/span&gt;)&lt;br/&gt;  grpcServer := grpc.NewServer()&lt;br/&gt;  pb.RegisterRouteGuideServer(grpcServer, &amp;amp;routeGuideServer{})&lt;br/&gt;  grpcServer.Serve(lis)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务启动后就能通过&lt;code&gt;{server_ip}:10001/debug/pprof/profile&lt;/code&gt;采集CPU的使用情况了，具体&lt;code&gt;pprof&lt;/code&gt;工具的使用方法的详细说明参考系列的&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486618&amp;amp;idx=1&amp;amp;sn=bb5e76e011ba99ebc2ffb8f9d3c00b89&amp;amp;chksm=fa80dd0dcdf7541b641be90bdf39001a8ac417c418bb19b9ee7d9e493a0627cfe7d144bb2163&amp;amp;token=1150263485&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;第一篇文章&lt;/a&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是我用分析数据生成的函数调用图的一部分，可以看到虽然是用另外一个端口的&lt;code&gt;HTTP&lt;/code&gt;服务拿到的分析数据，但依然能采集到监听另一个端口的&lt;code&gt;gRPC&lt;/code&gt;服务程序的CPU使用情况。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6433007985803016&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4iaaTkrDicicucniapfr1IYvibPrmY9IQibkOqNdbDqRibpciaRjPNUwsSBzGG2kRNL1Z9oEhgTLSdXantVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1127&quot;/&gt;&lt;figcaption&gt;gRPC服务的函数调用图&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;pprof的局限&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pprof这些功能虽然很有用，但是想分析出程序的性能问题还是挺费事儿的，从我使用下来的感觉主要有两点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，因为调用图里把所有函数调用都显示出来了，有些耗时长的还是Go底层的&lt;code&gt;runtime&lt;/code&gt;包内函数的直接，想要在这一堆里找到慢的业务函数还是得花不少力气。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再一个现在很多服务都是分布式的，如果服务A调用了服务B，服务B里的方法执行的比较耗时的话，在A的分析数据里只能知道&lt;code&gt;grpc.invoke&lt;/code&gt;（客户端调用&lt;code&gt;gRPC&lt;/code&gt;方法的请求都是由&lt;code&gt;invoke&lt;/code&gt;发出的）耗时长，这时又得去服务B上采集数据，做不到全链路服务性能的采集，这块如果谁知道好的解决方案可以在留言里说一下。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这期的文章就到这里，欢迎在留言里多交流。下期会推送一篇关于用Kubernetes StatefulSet控制器编排有状态应用的超长文章，同时会对Headless Service做一个详细的分析，想入门K8s的铁汁儿们，微信还没关注公众号「网管叨bi叨」的，赶紧关注一波呀！！！&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486618&amp;amp;idx=1&amp;amp;sn=bb5e76e011ba99ebc2ffb8f9d3c00b89&amp;amp;chksm=fa80dd0dcdf7541b641be90bdf39001a8ac417c418bb19b9ee7d9e493a0627cfe7d144bb2163&amp;amp;token=1150263485&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Golang程序性能分析（一）pprof和go-torch&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247486654&amp;amp;idx=1&amp;amp;sn=ea7171f58254dfecebc61cfbec7b64e5&amp;amp;chksm=fa80dd29cdf7543f97f90723e0470fbcb437f9a614a44c51ccf64e98f56e54711d713e204ab0&amp;amp;token=1150263485&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Golang程序性能分析（二）在Echo和Gin框架中使用pprof&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注公众号，每周教会你一个进阶知识&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0188679245283019&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;318&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4icJbGAQ8RjXUUVdUZsGADuMBVWePgn7tfrWjjHyc6b8kXTQ7Sdkp0QQFFK4mel5tniczqooMna1CA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;点在看支持我的创作&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f2c1f3c42c0732185a747eb0baf2325a</guid>
<title>列举一些 Go 1.16 中可能对大家有影响的变化</title>
<link>https://toutiao.io/k/gep4k6z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;
&lt;p&gt;大家好，我是站长 polarisxu。&lt;/p&gt;
&lt;p&gt;先说一下我一般怎么了解 Go 最新的一些动态。&lt;/p&gt;
&lt;h2 id=&quot;01-从哪获取信息&quot;&gt;01 从哪获取信息&lt;a href=&quot;#01-从哪获取信息&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主要通过以下方式：&lt;/p&gt;

&lt;p&gt;此外，Reddit 的 r/golang 频道也会有很多信息。&lt;/p&gt;
&lt;h2 id=&quot;02-go-116-的一些改动&quot;&gt;02 Go 1.16 的一些改动&lt;a href=&quot;#02-go-116-的一些改动&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;按计划，Go1.16 会在 2021 年 2 月份发布。目前 Release Notes 中已经有部分内容了。&lt;/p&gt;
&lt;h3 id=&quot;module-模式会默认开启&quot;&gt;Module 模式会默认开启&lt;a href=&quot;#module-模式会默认开启&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;经过了这么多版本，终于默认开启了。默认开启是什么意思？即 GO111MODULE 环境变量的默认值将从 auto 改变为 on。这将解决一些目前使用 go 命令时的尴尬 。比如有些人可能说，明明我设置了 GOPROXY，但是 go get 依然没有经过它，下载依然失败。这是因为在非 modules 感知目录下运行 go get 时，自动选择了 GOPATH 模式而忽略了 GOPROXY 环境变量。如果你现在遇到这种情况，请手动将 GO111MODULE 环境变量更改为 on。&lt;/p&gt;
&lt;h3 id=&quot;内嵌静态资源&quot;&gt;内嵌静态资源&lt;a href=&quot;#内嵌静态资源&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;支持内嵌静态资源（文件或者文件夹）至生成的二进制文件中。这部分之前写文章介绍过，&lt;a href=&quot;https://mp.weixin.qq.com/s/SiCTV7R2wA_I2nCQkC3GGQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;见这里&lt;/a&gt;
。&lt;/p&gt;
&lt;h3 id=&quot;支持最新版本-mac&quot;&gt;支持最新版本 Mac&lt;a href=&quot;#支持最新版本-mac&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最新版 Mac 使用了 ARM 架构，因此 Go 1.16 增加 &lt;code&gt;GOOS=darwin, GOARCH=arm64&lt;/code&gt; 支持，而这之前是用于 iOS 的，以后 iOS port 改为 &lt;code&gt;GOOS=ios, GOARCH=arm64&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;linux-系统下-rss-会更准确&quot;&gt;Linux 系统下 RSS 会更准确&lt;a href=&quot;#linux-系统下-rss-会更准确&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 Linux 上，runtime 现在默认会迅速地（使用 MADV_DONTNEED）向操作系统释放内存，而不是在操作系统面临内存压力时（使用 MADV_FREE）惰性地释放内存。&lt;/p&gt;
&lt;p&gt;这意味着像 RSS 这样的进程级内存统计信息将更准确地反映 Go 进程所使用的物理内存数量。因此 Go1.16 中，不再需要配置 GODEBUG=madvdontneed=1 来改善内存监控行为。&lt;/p&gt;
&lt;h3 id=&quot;切片扩容策略改变&quot;&gt;切片扩容策略改变&lt;a href=&quot;#切片扩容策略改变&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果一个 &lt;code&gt;append(x, values…)&lt;/code&gt; 调用需要扩容，则基础切片 x 的容量将决定结果切片的容量（而不是原来的基础切片 x 的长度决定结果切片的容量）。&lt;/p&gt;
&lt;p&gt;借用&lt;a href=&quot;https://mp.weixin.qq.com/s/JAWKZeDSNYJlVc6GPNKqlg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公众号 Go101&lt;/a&gt;
 中的例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go 1.15 将输出 2048 1280，但是使用 Go 1.16 将输出 1280 1280。&lt;/p&gt;
&lt;p&gt;具体提交见：&lt;a href=&quot;https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97?branch=2333c6299f340a5f76a73a4fec6db23ffa388e97&amp;amp;diff=unified&quot;&gt;https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97?branch=2333c6299f340a5f76a73a4fec6db23ffa388e97&amp;amp;diff=unified&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;标准库&quot;&gt;标准库&lt;a href=&quot;#标准库&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1）增加了 io/fs、embed 等库。&lt;/p&gt;
&lt;p&gt;2）template 允许跨行。例如：&lt;/p&gt;
&lt;p&gt;3）strconv.ParseFloat 性能提升 2 倍。原因是它改为使用 &lt;a href=&quot;https://nigeltao.github.io/blog/2020/eisel-lemire.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eisel-Lemire 算法&lt;/a&gt;
。这也会加速解码诸如 encoding/json 这样的文本格式。&lt;/p&gt;
&lt;h3 id=&quot;简化的结构体字段标签写法&quot;&gt;简化的结构体字段标签写法&lt;a href=&quot;#简化的结构体字段标签写法&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在进行 Web 开发时，Model 类可能会有好几种标签，写起来很繁琐，因此还出现了不少这样辅助写标签的工具。Go 1.16 开始，结构体字段的标签中的值相同的键值对可以合并写成一个，方便很多，比如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`json bson gorm:&quot;user_name,omitempty&quot;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;知晓-init-函数的执行时间和内存消耗&quot;&gt;知晓 init 函数的执行时间和内存消耗&lt;a href=&quot;#知晓-init-函数的执行时间和内存消耗&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;关于该函数，大家都建议尽量别用，至少不能依赖它。同时不应该在其中处理耗时的事情。但之前没有很好地方法检测。Go 1.16 为 GODEBUG 环境变量增加了 inittrace=1 选项，可以输出 init 函数的执行时间和内存消耗。&lt;/p&gt;
&lt;p&gt;再次借用 &lt;a href=&quot;https://mp.weixin.qq.com/s/Lz1PwW0mzWMNxiuJBvdcXA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go101 的例子&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;对于下面的程序：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用下面的命令运行（Linux 系统，Go tip rev:7f688d18c0）:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ &lt;span class=&quot;nv&quot;&gt;GODEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inittrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; go run main.go 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;的输出为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;chroma&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;init internal/bytealg @0.018 ms, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
init runtime @0.15 ms, 0.56 ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
init errors @1.7 ms, 0.010 ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
init sync @1.8 ms, 0.001 ms clock, &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; allocs
init internal/oserror @1.8 ms, 0.001 ms clock, &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; allocs
init syscall @1.9 ms, 0.010 ms clock, &lt;span class=&quot;m&quot;&gt;944&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; allocs
init &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; @1.9 ms, 0.014 ms clock, &lt;span class=&quot;m&quot;&gt;400&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; allocs
init context @2.0 ms, 0.002 ms clock, &lt;span class=&quot;m&quot;&gt;128&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; allocs
init math @2.0 ms, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
init strconv @2.1 ms, 0.006 ms clock, &lt;span class=&quot;m&quot;&gt;32&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; allocs
init unicode @2.1 ms, 0.086 ms clock, &lt;span class=&quot;m&quot;&gt;23944&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;27&lt;/span&gt; allocs
...
init internal/bytealg @0 ms, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
init runtime @0.048 ms, 0.042 ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
hello
init main @0.21 ms, 0.004 ms clock, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; bytes, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs
bye
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可见此 GODEBUG 环境变量选项对于查找 init 函数中的瓶颈很有帮助。&lt;/p&gt;
&lt;p&gt;相关 issue: &lt;a href=&quot;https://github.com/golang/go/issues/41378&quot;&gt;https://github.com/golang/go/issues/41378&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;03-总结&quot;&gt;03 总结&lt;a href=&quot;#03-总结&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;path d=&quot;M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3&quot;/&gt;&lt;line x1=&quot;8&quot; y1=&quot;12&quot; x2=&quot;16&quot; y2=&quot;12&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Go 1.16 相比 Go 1.15 改动多不少，更多内容等待明年 2 月份发布。&lt;/p&gt;
&lt;p&gt;另外推荐 Go101 这本开源书，作者对 Go 的细节掌握的很深，而且他写了双语版，这里是中文版：&lt;a href=&quot;https://github.com/golang101/golang101&quot;&gt;https://github.com/golang101/golang101&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>