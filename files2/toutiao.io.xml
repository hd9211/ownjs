<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3ea540d4cb7275bfdcd38cceaca361b8</guid>
<title>大流量场景下如何云淡风轻地进行线上发布？</title>
<link>https://toutiao.io/k/mg7l9r4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.14106583072100312&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/qdzZBE73hWtObtu43aftW8t1XhQRHbvibHWNuYah3xo5Ymgh501WEo6xrricTstkOyK6iaYamOBKPia2cRFhkCrvdA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;201193eab47385ae8de111beb6fc2fa5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-lake-id=&quot;201193eab47385ae8de111beb6fc2fa5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文，我们继续聊聊&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247491451&amp;amp;idx=2&amp;amp;sn=7af1277fcfb9fac8add8c199e52faac4&amp;amp;chksm=fdeb2d1bca9ca40dabd216cc9e9a1d4927be4a31da90afe77f1a3860daeae36373225227c7b0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《揭秘大流量场景下发布如丝般顺滑背后的原因》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《揭秘大流量场景下发布如丝般顺滑背后的原因》&lt;/a&gt;中的另外一环，灰度发布，也叫金丝雀发布。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多互联网公司在半夜发布的另外一个重要原因是不具备可灰度能力，新版本存在 bug 或者其它原因会影响线上的客户，无奈之下只能选择在半夜进行发布来减少影响面。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道默认情况下，无论是 Kubernetes 还是 ECS，新老版本都存在的情况下会根据特定的负载均衡算法随机地路由到不同的实例上，随机意味着出问题也会随机出现。我们需要一套动态路由来完成灰度发布的解决方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 RPC 领域，我们称灰度发布为动态路由，动态路由的意思是指流量可以动态地路由到指定的实例上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;65a43c0f89b73a18ec554dcdb07c220c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;动态路由场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;动态路由是微服务里非常核心的功能，流量动态路由意味着可以做非常多的事情。由此衍生出各个场景:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;c8430a1b73b62c45171b48eb6a0418f9&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;金丝雀发布：只有满足特定规则(比如 Query Parameter、HEADER、COOKIE 中某些 KEY 满足一些条件)或者是固定流量比例的流量才会进入新版本，其它流量都路由到老版本上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609759080125-388f6b86-9fca-4090-a232-6961fdc1e9fd.png%22%2C%22originWidth%22%3A880%2C%22originHeight%22%3A583%2C%22name%22%3A%22image.png%22%2C%22size%22%3A63120%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A608.8318%2C%22y%22%3A50.914165%2C%22width%22%3A122.09699999999998%2C%22height%22%3A21.994034999999997%2C%22text%22%3A%22UserTraffic%22%7D%2C%7B%22x%22%3A145.85858%2C%22y%22%3A51.488503%2C%22width%22%3A122.17114000000001%2C%22height%22%3A21.572916999999997%2C%22text%22%3A%22UserTraffic%22%7D%2C%7B%22x%22%3A595.4345%2C%22y%22%3A222.78072%2C%22width%22%3A148.11897%2C%22height%22%3A34.17814000000001%2C%22text%22%3A%22ooo%22%7D%2C%7B%22x%22%3A133.82988%2C%22y%22%3A225.2745%2C%22width%22%3A30.953339999999997%2C%22height%22%3A30.90075999999999%2C%22text%22%3A%22.%22%7D%2C%7B%22x%22%3A190.1125%2C%22y%22%3A224.72052%2C%22width%22%3A89.75329999999997%2C%22height%22%3A29.713930000000005%2C%22text%22%3A%22.o%22%7D%2C%7B%22x%22%3A593.0762%2C%22y%22%3A272.9332%2C%22width%22%3A151.31375000000003%2C%22height%22%3A22.560540000000003%2C%22text%22%3A%22LoadBalancer%22%7D%2C%7B%22x%22%3A130.8733%2C%22y%22%3A272.93945%2C%22width%22%3A150.2531%2C%22height%22%3A22.068089999999984%2C%22text%22%3A%22LoadBalancer%22%7D%2C%7B%22x%22%3A546.34607%2C%22y%22%3A292.72876%2C%22width%22%3A417.3397299999999%2C%22height%22%3A94.54226999999997%2C%22text%22%3A%22%2C%E4%BA%AE%22%7D%2C%7B%22x%22%3A249.46048%2C%22y%22%3A320.03683%2C%22width%22%3A75.9025%2C%22height%22%3A20.400239999999997%2C%22text%22%3A%22FewUsers%22%7D%2C%7B%22x%22%3A56.522655%2C%22y%22%3A322.99805%2C%22width%22%3A84.48695500000001%2C%22height%22%3A16.77895000000001%2C%22text%22%3A%22MostUsers%22%7D%2C%7B%22x%22%3A70.56067%2C%22y%22%3A425.86646%2C%22width%22%3A166.79834%2C%22height%22%3A21.20641999999998%2C%22text%22%3A%22Majoritylnfrastruciture%22%7D%2C%7B%22x%22%3A607.4084%2C%22y%22%3A426.28235%2C%22width%22%3A124.45195000000001%2C%22height%22%3A17.308749999999975%2C%22text%22%3A%22AllInfrastructure%22%7D%2C%7B%22x%22%3A76.10236%2C%22y%22%3A504.3715%2C%22width%22%3A345.70665999999994%2C%22height%22%3A21.87470000000002%2C%22text%22%3A%22CodeVersion1CodeVersion2%22%7D%2C%7B%22x%22%3A586.7273%2C%22y%22%3A504.6309%2C%22width%22%3A156.16570000000002%2C%22height%22%3A23.363849999999957%2C%22text%22%3A%22CodeVersion2%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22UserTraffic%20UserTraffic%20ooo%20.%20.o%20LoadBalancer%20LoadBalancer%20%2C%E4%BA%AE%20FewUsers%20MostUsers%20Majoritylnfrastruciture%20AllInfrastructure%20CodeVersion1CodeVersion2%20CodeVersion2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A440%2C%22height%22%3A292%7D&quot;&gt;&lt;img data-backh=&quot;292&quot; data-backw=&quot;440&quot; data-height=&quot;292px&quot; data-ratio=&quot;0.6625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZxl5Cuiaaw3QG9icCWSWfdQnYibibib0oxGPvia4puXnx40s0nGyu9TrYgmVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;d9d406f9f2794055d2ff27b5710e41dd&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同机房优先路由：当公司规模扩大之后，应用会跨机房部署来达到高可用的目的。由于异地跨机房调用出现的网络延迟问题，需要确保服务消费方能优先调用相同机房的服务消费方，这就需要同机房优先路由的能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609759063464-da4e76e8-0606-4b98-a543-28ebb9e96e88.png%22%2C%22originWidth%22%3A1265%2C%22originHeight%22%3A788%2C%22name%22%3A%22image.png%22%2C%22size%22%3A116787%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A994.3393%2C%22y%22%3A53.22948%2C%22width%22%3A183.15510000000006%2C%22height%22%3A37.957879999999996%2C%22text%22%3A%22hangzhou-C%22%7D%2C%7B%22x%22%3A215.39128%2C%22y%22%3A54.18452%2C%22width%22%3A179.00408%2C%22height%22%3A39.61663000000001%2C%22text%22%3A%22hangzhou-A%22%7D%2C%7B%22x%22%3A604.99097%2C%22y%22%3A55.61174%2C%22width%22%3A178.71869000000004%2C%22height%22%3A32.58253500000001%2C%22text%22%3A%22hangzhou-B%22%7D%2C%7B%22x%22%3A249.94164%2C%22y%22%3A196.06496%2C%22width%22%3A105.61025999999998%2C%22height%22%3A22.876439999999974%2C%22text%22%3A%22Provider%22%7D%2C%7B%22x%22%3A636.57965%2C%22y%22%3A236.8855%2C%22width%22%3A104.92115000000001%2C%22height%22%3A24.289199999999965%2C%22text%22%3A%22Provider%22%7D%2C%7B%22x%22%3A1033.9591%2C%22y%22%3A378.48544%2C%22width%22%3A103.19209999999998%2C%22height%22%3A22.416560000000004%2C%22text%22%3A%22Provider%22%7D%2C%7B%22x%22%3A250.89476%2C%22y%22%3A398.716%2C%22width%22%3A105.41109000000003%2C%22height%22%3A22.389830000000018%2C%22text%22%3A%22Provider%22%7D%2C%7B%22x%22%3A635.7625%2C%22y%22%3A493.82718%2C%22width%22%3A106.64139999999998%2C%22height%22%3A26.334820000000036%2C%22text%22%3A%22Provider%22%7D%2C%7B%22x%22%3A239.88666%2C%22y%22%3A604.5171%2C%22width%22%3A128.10962%2C%22height%22%3A22.820499999999925%2C%22text%22%3A%22Consumer%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22hangzhou-C%20hangzhou-A%20hangzhou-B%20Provider%20Provider%20Provider%20Provider%20Provider%20Consumer%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1265%2C%22height%22%3A788%7D&quot;&gt;&lt;img data-backh=&quot;360&quot; data-backw=&quot;578&quot; data-height=&quot;788px&quot; data-ratio=&quot;0.6229249011857707&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZev24GCfQqeHfkB95K2QeyEcM5YT7GPR1ZcMQFlsb9SbPqZ8Bu4yo3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1265&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f340cd4bd1045cfe7f4016c7d4ebad41&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;标签路由：金丝雀发布的新场景。金丝雀发布一般只有新和老两个版本，标签路由可以在线上部署多个版本，每个版本都对于一个标签。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全链路灰度：在业务比较复杂，服务调用链路较长的场景下，每个应用都需要设置路由规则会显得非常繁琐，全链路灰度在金丝雀/标签路由的基础上加上了 &quot;标签透传&quot; 的能力，让灰度流量只在灰度版本之间路由。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609759282795-7d5325cb-47e4-43b2-af61-7e43eb0faa52.png%22%2C%22originWidth%22%3A2136%2C%22originHeight%22%3A770%2C%22name%22%3A%22image.png%22%2C%22size%22%3A118232%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1664.125%2C%22y%22%3A91.36546%2C%22width%22%3A85.67489999999998%2C%22height%22%3A30.150104%2C%22text%22%3A%22%E5%BA%94%E7%94%A8C%22%7D%2C%7B%22x%22%3A923.2909%2C%22y%22%3A91.85726%2C%22width%22%3A83.24440000000004%2C%22height%22%3A26.944370000000006%2C%22text%22%3A%22%E5%BA%94%E7%94%A8A%22%7D%2C%7B%22x%22%3A1292.7726%2C%22y%22%3A91.8509%2C%22width%22%3A82.04029999999989%2C%22height%22%3A28.701346%2C%22text%22%3A%22%E5%BA%94%E7%94%A8B%22%7D%2C%7B%22x%22%3A1652.6956%2C%22y%22%3A123.98776%2C%22width%22%3A110.7654%2C%22height%22%3A28.461470000000006%2C%22text%22%3A%22%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A1280.54%2C%22y%22%3A124.27207%2C%22width%22%3A108.25649999999996%2C%22height%22%3A28.521280000000004%2C%22text%22%3A%22%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A911.31647%2C%22y%22%3A124.78835%2C%22width%22%3A106.83143000000007%2C%22height%22%3A27.921450000000007%2C%22text%22%3A%22%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A107.12639%2C%22y%22%3A314.15518%2C%22width%22%3A110.63357%2C%22height%22%3A30.739870000000053%2C%22text%22%3A%22%E5%85%B6%E4%BB%96%E6%B5%81%E9%87%8F%22%7D%2C%7B%22x%22%3A1648.9474%2C%22y%22%3A351.54688%2C%22width%22%3A110.11729999999989%2C%22height%22%3A25.741919999999993%2C%22text%22%3A%22Dubboc%22%7D%2C%7B%22x%22%3A923.1861%2C%22y%22%3A353.76508%2C%22width%22%3A82.41449999999998%2C%22height%22%3A29.50155000000001%2C%22text%22%3A%22%E5%BA%94%E7%94%A8A%22%7D%2C%7B%22x%22%3A449.99677%2C%22y%22%3A364.97894%2C%22width%22%3A107.88756999999993%2C%22height%22%3A30.742529999999988%2C%22text%22%3A%22%E5%85%A5%E5%8F%A3%E5%BA%94%E7%94%A8%22%7D%2C%7B%22x%22%3A51.8243%2C%22y%22%3A371.37177%2C%22width%22%3A166.58135000000001%2C%22height%22%3A24.75795999999997%2C%22text%22%3A%22header-env1%22%7D%2C%7B%22x%22%3A1645.9277%2C%22y%22%3A381.78296%2C%22width%22%3A118.50209999999993%2C%22height%22%3A28.37781000000001%2C%22text%22%3A%22%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC1%22%7D%2C%7B%22x%22%3A903.2683%2C%22y%22%3A385.79233%2C%22width%22%3A120.4637600000001%2C%22height%22%3A28.80757%2C%22text%22%3A%22%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC1%22%7D%2C%7B%22x%22%3A52.093967%2C%22y%22%3A420.0319%2C%22width%22%3A165.91798300000002%2C%22height%22%3A22.609519999999975%2C%22text%22%3A%22header-env2%22%7D%2C%7B%22x%22%3A1664.9218%2C%22y%22%3A605.89734%2C%22width%22%3A82.47540000000004%2C%22height%22%3A27.91021999999998%2C%22text%22%3A%22%E5%BA%94%E7%94%A8C%22%7D%2C%7B%22x%22%3A1291.6973%2C%22y%22%3A606.8409%2C%22width%22%3A81.85709999999995%2C%22height%22%3A27.02329999999995%2C%22text%22%3A%22%E5%BA%94%E7%94%A8B%22%7D%2C%7B%22x%22%3A1273.554%2C%22y%22%3A638.00433%2C%22width%22%3A123.49889999999982%2C%22height%22%3A26.63062000000002%2C%22text%22%3A%22%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC2%22%7D%2C%7B%22x%22%3A1646.6042%2C%22y%22%3A639.0509%2C%22width%22%3A120.64010000000007%2C%22height%22%3A27.962800000000016%2C%22text%22%3A%22%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC2%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%BA%94%E7%94%A8C%20%E5%BA%94%E7%94%A8A%20%E5%BA%94%E7%94%A8B%20%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%20%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%20%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC%20%E5%85%B6%E4%BB%96%E6%B5%81%E9%87%8F%20Dubboc%20%E5%BA%94%E7%94%A8A%20%E5%85%A5%E5%8F%A3%E5%BA%94%E7%94%A8%20header-env1%20%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC1%20%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC1%20header-env2%20%E5%BA%94%E7%94%A8C%20%E5%BA%94%E7%94%A8B%20%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC2%20%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A2136%2C%22height%22%3A770%7D&quot;&gt;&lt;img data-backh=&quot;208&quot; data-backw=&quot;578&quot; data-height=&quot;770px&quot; data-ratio=&quot;0.3606666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZQwjjxibtfwvMVYbf2tKS3h1ZXiaMnVdfCuBIeuaIUHsRYnIWia5kZNLnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;98f328b4bf4711fdae18a4c93e8bc655&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;接下来我会分几篇文章详细讲一下这几个场景，今天我们先来聊聊金丝雀发布。金丝雀发布可以让我们在白天流量高峰喝着茶吃着瓜子进行线上发布，不需要在半夜为发布的事情而苦恼。&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;a9f656152f97ae70b3722c65eda143d8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a9f656152f97ae70b3722c65eda143d8&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;f1361acf1d0718ee57de85b95e561a76&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;大流量下的应用部署现状&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;h3 data-lake-id=&quot;749ea17f2d0feb4c780b6bfa24580216&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;749ea17f2d0feb4c780b6bfa24580216&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;应用 Demo&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Demo 以 Spring Cloud 为例，服务调用链路如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609815086306-423fc3e8-f8c7-4b8c-81f1-a77196df9a19.png%22%2C%22originWidth%22%3A2098%2C%22originHeight%22%3A520%2C%22name%22%3A%22image.png%22%2C%22size%22%3A68989%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1118.6282%2C%22y%22%3A94.13535%2C%22width%22%3A66.90119999999979%2C%22height%22%3A25.415800000000004%2C%22text%22%3A%22SC-A%22%7D%2C%7B%22x%22%3A1089.0717%2C%22y%22%3A124.47603%2C%22width%22%3A124.67090000000007%2C%22height%22%3A29.327370000000016%2C%22text%22%3A%22(%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC)%22%7D%2C%7B%22x%22%3A753.265%2C%22y%22%3A233.24213%2C%22width%22%3A83.41676000000007%2C%22height%22%3A25.58428999999998%2C%22text%22%3A%22Netflix%22%7D%2C%7B%22x%22%3A1544.5842%2C%22y%22%3A247.86069%2C%22width%22%3A63.216899999999896%2C%22height%22%3A26.39656999999997%2C%22text%22%3A%22SC-B%22%7D%2C%7B%22x%22%3A1913.4114%2C%22y%22%3A248.41885%2C%22width%22%3A66.83460000000014%2C%22height%22%3A25.563950000000006%2C%22text%22%3A%22SC-C%22%7D%2C%7B%22x%22%3A380.76385%2C%22y%22%3A249.69931%2C%22width%22%3A95.5188%2C%22height%22%3A26.87514999999999%2C%22text%22%3A%22Ingress%22%7D%2C%7B%22x%22%3A764.48047%2C%22y%22%3A264.82233%2C%22width%22%3A60.645830000000046%2C%22height%22%3A25.928949999999986%2C%22text%22%3A%22Zuul%22%7D%2C%7B%22x%22%3A1113.6028%2C%22y%22%3A373.72675%2C%22width%22%3A71.45450000000005%2C%22height%22%3A25.71228000000002%2C%22text%22%3A%22SC-A%22%7D%2C%7B%22x%22%3A1092.1115%2C%22y%22%3A403.1996%2C%22width%22%3A117.20090000000005%2C%22height%22%3A29.749950000000013%2C%22text%22%3A%22(%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SC-A%20(%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC)%20Netflix%20SC-B%20SC-C%20Ingress%20Zuul%20SC-A%20(%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC)%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A2098%2C%22height%22%3A520%7D&quot;&gt;&lt;img data-backh=&quot;143&quot; data-backw=&quot;578&quot; data-height=&quot;520px&quot; data-ratio=&quot;0.248&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZibWKqIm1sbEqqkvVVzaYIprOFia2bLQTvamQ3jicanib4boXUKtAibFdoRg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流量从 Netflix Zuul 对应的 Ingress 进来，会调用 SC-A 应用对应的服务，SC-A 应用内部调用 SC-B 应用的服务，SC-B 应用内部调用 SC-C 应用的服务。SC-A 有线上版本和灰度版本这两个版本。&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;d677b8506f8b2c2a7d70c162940d3ff1&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;69831c9d283b178271926f4db7d06e93&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;Helm 部署 Demo&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Demo 为纯开源 Spring Cloud 架构，项目地址：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/aliyun/alibabacloud-microservice-demo/tree/master/microservice-doc-demo/traffic-management&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;部署完毕后，阿里云容器服务上的工作负载情况如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609772425335-164cbbc4-beb3-4e4e-b7c5-f9d634f4541c.png%22%2C%22originWidth%22%3A1596%2C%22originHeight%22%3A618%2C%22name%22%3A%22image.png%22%2C%22size%22%3A230144%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A991.4093%2C%22y%22%3A34.569035%2C%22width%22%3A564.6459%2C%22height%22%3A29.427595000000004%2C%22text%22%3A%22registry.cn-hangzhou.aliyunc.com%2Falibabacloud%22%7D%2C%7B%22x%22%3A856.9357%2C%22y%22%3A55.946194%2C%22width%22%3A34.11220000000003%2C%22height%22%3A22.570286000000003%2C%22text%22%3A%221%2F1%22%7D%2C%7B%22x%22%3A511.95465%2C%22y%22%3A58.502174%2C%22width%22%3A163.32285000000002%2C%22height%22%3A23.787186000000005%2C%22text%22%3A%22app%3Asc-a-gray%22%7D%2C%7B%22x%22%3A78.60345%2C%22y%22%3A60.354073%2C%22width%22%3A113.69912000000001%2C%22height%22%3A22.314637000000005%2C%22text%22%3A%22sC-a-gray%22%7D%2C%7B%22x%22%3A990.96075%2C%22y%22%3A70.59068%2C%22width%22%3A321.6974500000001%2C%22height%22%3A25.616229999999987%2C%22text%22%3A%22microservice-demo%2Fsc-a%3A1.0%22%7D%2C%7B%22x%22%3A992.1194%2C%22y%22%3A161.88397%2C%22width%22%3A560.2293999999999%2C%22height%22%3A26.091260000000005%2C%22text%22%3A%22registry.cn-hangzhou.aliy.co%2Fbblo%22%7D%2C%7B%22x%22%3A857.93976%2C%22y%22%3A178.45898%2C%22width%22%3A33.35694000000001%2C%22height%22%3A24.869050000000016%2C%22text%22%3A%221%2F1%22%7D%2C%7B%22x%22%3A511.8864%2C%22y%22%3A181.53201%2C%22width%22%3A191.51344000000006%2C%22height%22%3A20.552969999999988%2C%22text%22%3A%22app%3Asc-a-normal%22%7D%2C%7B%22x%22%3A78.00898%2C%22y%22%3A182.18066%2C%22width%22%3A143.02918%2C%22height%22%3A21.868870000000015%2C%22text%22%3A%22sC-a-normal%22%7D%2C%7B%22x%22%3A991.833%2C%22y%22%3A195.7801%2C%22width%22%3A354.1924%2C%22height%22%3A24.508399999999995%2C%22text%22%3A%22microservice-demo%2Fsc-a%3Alatest%22%7D%2C%7B%22x%22%3A991.2504%2C%22y%22%3A283.08206%2C%22width%22%3A560.7597%2C%22height%22%3A27.500239999999962%2C%22text%22%3A%22registry.cn-hangzhou.aliyunc.com%2Falibabacloud%22%7D%2C%7B%22x%22%3A855.9027%2C%22y%22%3A301.50894%2C%22width%22%3A36.402900000000045%2C%22height%22%3A26.109219999999993%2C%22text%22%3A%221%2F1%22%7D%2C%7B%22x%22%3A77.688095%2C%22y%22%3A306.01807%2C%22width%22%3A143.370625%2C%22height%22%3A20.995929999999987%2C%22text%22%3A%22sc-b-normal%22%7D%2C%7B%22x%22%3A510.58353%2C%22y%22%3A305.5457%2C%22width%22%3A194.13197000000002%2C%22height%22%3A22.162059999999997%2C%22text%22%3A%22app%3Asc-b-normal%22%7D%2C%7B%22x%22%3A991.291%2C%22y%22%3A320.52417%2C%22width%22%3A355.1774999999999%2C%22height%22%3A24.823789999999974%2C%22text%22%3A%22microservice-demo%2Fsc-b%3Alatest%22%7D%2C%7B%22x%22%3A992.0295%2C%22y%22%3A409.97403%2C%22width%22%3A558.6206000000001%2C%22height%22%3A25.038329999999974%2C%22text%22%3A%22registry.cn-hangzhou.aliyuco%2Flibblo%22%7D%2C%7B%22x%22%3A856.2211%2C%22y%22%3A425.38474%2C%22width%22%3A38.40750000000003%2C%22height%22%3A27.376729999999952%2C%22text%22%3A%221%2F1%22%7D%2C%7B%22x%22%3A509.21225%2C%22y%22%3A430.45163%2C%22width%22%3A105.26749000000001%2C%22height%22%3A21.784549999999967%2C%22text%22%3A%22app%3Asc-c%22%7D%2C%7B%22x%22%3A78.23428%2C%22y%22%3A431.42352%2C%22width%22%3A53.065340000000006%2C%22height%22%3A19.43738000000002%2C%22text%22%3A%22SC-C%22%7D%2C%7B%22x%22%3A992.46375%2C%22y%22%3A445.73044%2C%22width%22%3A353.08035000000007%2C%22height%22%3A21.909260000000017%2C%22text%22%3A%22microservice-demo%2Fsc-c%3Alatest%22%7D%2C%7B%22x%22%3A993.5295%2C%22y%22%3A532.1944%2C%22width%22%3A557.4852999999999%2C%22height%22%3A26.440900000000056%2C%22text%22%3A%22registry.cn-hangzhou.aliyuncs.com%2Falibabacloud%22%7D%2C%7B%22x%22%3A856.09576%2C%22y%22%3A548.965%2C%22width%22%3A37.854799999999955%2C%22height%22%3A28.598049999999944%2C%22text%22%3A%221%2F1%22%7D%2C%7B%22x%22%3A78.64487%2C%22y%22%3A550.968%2C%22width%22%3A157.1555%2C%22height%22%3A25.31844000000001%2C%22text%22%3A%22zuul-gateway%22%7D%2C%7B%22x%22%3A511.1738%2C%22y%22%3A551.94073%2C%22width%22%3A205.25220000000002%2C%22height%22%3A24.59726999999998%2C%22text%22%3A%22app%3Azuul-gateway%22%7D%2C%7B%22x%22%3A990.936%2C%22y%22%3A568.5578%2C%22width%22%3A385.49750000000006%2C%22height%22%3A22.279699999999934%2C%22text%22%3A%22microservice-demo%2Fsc-zuul%3Alatest%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22registry.cn-hangzhou.aliyunc.com%2Falibabacloud%201%2F1%20app%3Asc-a-gray%20sC-a-gray%20microservice-demo%2Fsc-a%3A1.0%20registry.cn-hangzhou.aliy.co%2Fbblo%201%2F1%20app%3Asc-a-normal%20sC-a-normal%20microservice-demo%2Fsc-a%3Alatest%20registry.cn-hangzhou.aliyunc.com%2Falibabacloud%201%2F1%20sc-b-normal%20app%3Asc-b-normal%20microservice-demo%2Fsc-b%3Alatest%20registry.cn-hangzhou.aliyuco%2Flibblo%201%2F1%20app%3Asc-c%20SC-C%20microservice-demo%2Fsc-c%3Alatest%20registry.cn-hangzhou.aliyuncs.com%2Falibabacloud%201%2F1%20zuul-gateway%20app%3Azuul-gateway%20microservice-demo%2Fsc-zuul%3Alatest%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A798%2C%22height%22%3A309%7D&quot;&gt;&lt;img data-backh=&quot;224&quot; data-backw=&quot;578&quot; data-height=&quot;309px&quot; data-ratio=&quot;0.3873333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZQtgOkStVht1c0xJuCnUbCEYJERibnvWUb8PSPPYdIjGYk1a12LAMCmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们通过 &quot;while true; do curl http://{ip:port}/A/a;echo;done&quot; shell 命令不断地去访问 Spring Cloud 服务，各个服务的作用仅仅是打印当前服务的IP，这样我们可以看到整体调用链路:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; curl http:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从这个过程我们明显可以看出 Netflix Zuul -&amp;gt; SC-A 这条链路是随机访问的，由于 SC-A 的线上版本和灰度版本各只有 1 个 Pod，所以随机打印了这两个 POD 的 IP。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;f7c9f8d98b4ec63be8a0157d9910dcd4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开源金丝雀的实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;动态路由的本质就是寻址过程中去找符合条件的实例地址。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Apache Dubbo 提供了 RouterChain 的能力去过滤 Invoker 列表，RouterChain 内部维护着 Router 列表，每个 Router 都会做过滤 Invoker 的逻辑，最后将 Invoker 列表交付给 LoadBalance 做负载均衡获取最后的 Invoker。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ScriptRouter，ConditionRouter 和 TagRouter 这些内置的 Router 内部都是 Dubbo 自带的动态路由能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Spring Cloud 的路由能力由 Ribbon 实现。Ribbon 设计了 ILoadBalancer 接口用于获取 Server 列表，最后将这个列表交付给 IRule 做负载均衡策略获取最后的 Server。这块在设计上跟 Dubbo 相比是有缺陷的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Spring Cloud Ribbon 里的 ILoadBalancer 相当于是 Dubbo RouterChain 里的一个 Router，IRule 相当于是 Dubbo LoadBalance。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最新版本的 Spring Cloud 新增了 Spring Cloud LoadBalancer 组件代替 Ribbon 用于做负载均衡，Spring Cloud LoadBalancer 里的 ServiceInstanceListSupplier 用于获取实例列表信息，ReactiveLoadBalancer 使用负载均衡策略获取最后的实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是 3 者对应组件的说明:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Apache Dubbo&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring Cloud Ribbon&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Spring Cloud LoadBalancer&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;路由&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Router &amp;amp; RouterChain&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;ILoadBalancer&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;ServiceInstanceListSupplier&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;负载均衡策略&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;LoadBalance&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;IRule&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;ReactiveLoadBalancer&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;服务实例&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Invoker&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Server&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;ServiceInstance&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Apache Dubbo 虽然内置了各种 Router，但实际使用下来却有非常多的问题。比如 TagRouter 跟 IP 绑定，在 Kubernetes 下无法工作；ScriptRouter 用了 ScriptEngine 去做脚本的处理，会有性能问题；Dubbo Admin 的使用体验非常糟糕等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Spring Cloud 官方并没有提供动态路由的能力，只有社区上的一些开发者自己去扩展了这个能力，社区上也没有任何的 UI 交互界面。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这时候 MSE 告诉你，MSE 的微服务解决方案提供了动态路由的能力，不需要做任何的代码和配置的修改，就能使用 OPEN API 或者 UI 交互去完成金丝雀发布。只需将您的应用接入 MSE 服务治理，您就能享受到金丝雀能力。&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;31914bed54fa3e7a25cc2c8e6fc46132&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;只要你的应用是基于 Spring Cloud 或 Dubbo 最近五年内的版本开发，就能直接使用完整的 MSE 微服务治理能力，不需要修改任何代码和配置。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无需任何代码修改就可以做到动态路由的能力，这不香吗？&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;7dca163a274255e6bafaf43b7554a6a4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7dca163a274255e6bafaf43b7554a6a4&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;54be58ce526473401f632b85a9ce6e36&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MSE 金丝雀能力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;应用接入 MSE 即可享受 MSE 提供的动态路由能力，无需任何代码修改。&lt;/span&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;75c379bdee82a8825b6536e141ad3898&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;c37a4626062a3a312f4f753675c88137&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;引入标签概念&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p data-lake-id=&quot;9af18015651737f4389af93921d0df67&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;MSE 引入了标签的概念，可以针对每个标签设置路由规则，满足该路由规则的流量会路由到这个标签对应的实例下。我们将 Spring Cloud Demo 进行一点改造，给 SC-A 的灰度版本打上 &quot;blue&quot; 标签( Helm 已经完成了这个步骤)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609815347816-9282d23d-bfa9-4123-acef-41029067c151.png%22%2C%22originWidth%22%3A2098%2C%22originHeight%22%3A746%2C%22name%22%3A%22image.png%22%2C%22size%22%3A90655%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1118.7727%2C%22y%22%3A94.150856%2C%22width%22%3A66.78629999999998%2C%22height%22%3A25.299223999999995%2C%22text%22%3A%22SC-A%22%7D%2C%7B%22x%22%3A1089.586%2C%22y%22%3A124.48145%2C%22width%22%3A124.01209999999992%2C%22height%22%3A29.160320000000013%2C%22text%22%3A%22(%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC)%22%7D%2C%7B%22x%22%3A752.7747%2C%22y%22%3A233.06825%2C%22width%22%3A84.18043999999998%2C%22height%22%3A25.729349999999982%2C%22text%22%3A%22Netflix%22%7D%2C%7B%22x%22%3A1544.9305%2C%22y%22%3A248.24399%2C%22width%22%3A62.542900000000145%2C%22height%22%3A25.31900999999999%2C%22text%22%3A%22SC-B%22%7D%2C%7B%22x%22%3A1913.9048%2C%22y%22%3A248.67781%2C%22width%22%3A66.46969999999988%2C%22height%22%3A24.86368999999999%2C%22text%22%3A%22SC-C%22%7D%2C%7B%22x%22%3A381.38745%2C%22y%22%3A249.97418%2C%22width%22%3A94.51391999999998%2C%22height%22%3A26.491719999999987%2C%22text%22%3A%22Ingress%22%7D%2C%7B%22x%22%3A763.5983%2C%22y%22%3A264.01077%2C%22width%22%3A61.97230000000002%2C%22height%22%3A26.819800000000043%2C%22text%22%3A%22Zuul%22%7D%2C%7B%22x%22%3A196.48936%2C%22y%22%3A318.0588%2C%22width%22%3A99.68870999999999%2C%22height%22%3A22.842349999999954%2C%22text%22%3A%22HEADER%22%7D%2C%7B%22x%22%3A193.7656%2C%22y%22%3A350.84195%2C%22width%22%3A106.33733999999998%2C%22height%22%3A23.128719999999987%2C%22text%22%3A%22env%E4%B8%89test%22%7D%2C%7B%22x%22%3A1115.6063%2C%22y%22%3A370.80292%2C%22width%22%3A69.60120000000006%2C%22height%22%3A27.202330000000018%2C%22text%22%3A%22SC-A%22%7D%2C%7B%22x%22%3A1091.4746%2C%22y%22%3A404.8491%2C%22width%22%3A117.72399999999993%2C%22height%22%3A27.757469999999955%2C%22text%22%3A%22(%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC)%22%7D%2C%7B%22x%22%3A1120.746%2C%22y%22%3A600.0537%2C%22width%22%3A56.791099999999915%2C%22height%22%3A24.790539999999964%2C%22text%22%3A%22blue%22%7D%2C%7B%22x%22%3A1122.2123%2C%22y%22%3A630.127%2C%22width%22%3A56.27040000000011%2C%22height%22%3A28.483600000000024%2C%22text%22%3A%22%E6%A0%87%E7%AD%BE%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SC-A%20(%E7%BA%BF%E4%B8%8A%E7%89%88%E6%9C%AC)%20Netflix%20SC-B%20SC-C%20Ingress%20Zuul%20HEADER%20env%E4%B8%89test%20SC-A%20(%E7%81%B0%E5%BA%A6%E7%89%88%E6%9C%AC)%20blue%20%E6%A0%87%E7%AD%BE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A2098%2C%22height%22%3A746%7D&quot;&gt;&lt;img data-backh=&quot;205&quot; data-backw=&quot;578&quot; data-height=&quot;746px&quot; data-ratio=&quot;0.35533333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZDslfIjX32eicicicZVWxZAnIP6uuv2MSjicHwbTiamS2mbOL91NvJQP8ArA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接入 MSE 后，MSE 默认会给应用分配一个 100% 路由到未打标实例的路由规则。此时，我们继续通过 &quot;while true; do curl http://{ip:port}/A/a;echo;done&quot; shell 命令去执行，这个时候调用 SC-A 全部返回线上版本的 IP:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; curl http:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.73&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;476d0d7beab686d859a2e72f348c364a&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;设置金丝雀路由规则&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们在 MSE 上的应用详情页里的金丝雀 Tab 页里设置 HEADER 里 env 这个 KEY 的值为 test 的金丝雀路由条件:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609827104808-7020de60-d5d6-42d4-a9a5-d05537efe500.png%22%2C%22originWidth%22%3A2298%2C%22originHeight%22%3A942%2C%22name%22%3A%22image.png%22%2C%22size%22%3A261131%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A8.482821%2C%22y%22%3A22.686354%2C%22width%22%3A115.986619%2C%22height%22%3A31.375700000000002%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%22%7D%2C%7B%22x%22%3A219.91974%2C%22y%22%3A99.66533%2C%22width%22%3A114.09012000000001%2C%22height%22%3A30.137559999999993%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E9%89%B4%E6%9D%83%22%7D%2C%7B%22x%22%3A41.17525%2C%22y%22%3A99.86459%2C%22width%22%3A116.01121%2C%22height%22%3A31.277509999999992%2C%22text%22%3A%22%E6%A0%87%E7%AD%BE%E8%B7%AF%E7%94%B1%22%7D%2C%7B%22x%22%3A397.79654%2C%22y%22%3A100.53702%2C%22width%22%3A89.45944000000003%2C%22height%22%3A32.04938%2C%22text%22%3A%22%E9%87%91%E4%B8%9D%E9%9B%80%22%7D%2C%7B%22x%22%3A6.127155%2C%22y%22%3A206.74725%2C%22width%22%3A121.98957499999999%2C%22height%22%3A31.57687999999999%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%22%7D%2C%7B%22x%22%3A1993.1351%2C%22y%22%3A207.28635%2C%22width%22%3A96.61810000000014%2C%22height%22%3A27.215300000000013%2C%22text%22%3A%22%E5%8F%91%E5%B8%83%E5%AE%8C%E6%88%90%22%7D%2C%7B%22x%22%3A2172.4614%2C%22y%22%3A208.34557%2C%22width%22%3A50.56860000000006%2C%22height%22%3A27.27786999999998%2C%22text%22%3A%22%E5%9B%9E%E6%BB%9A%22%7D%2C%7B%22x%22%3A232.94102%2C%22y%22%3A212.74146%2C%22width%22%3A58.3185%2C%22height%22%3A25.21031000000002%2C%22text%22%3A%22%E7%BC%96%E8%BE%91%22%7D%2C%7B%22x%22%3A1051.6833%2C%22y%22%3A281.01187%2C%22width%22%3A151.702%2C%22height%22%3A29.98541%2C%22text%22%3A%22%E5%AE%9E%E4%BE%8B%E6%AF%94%E4%BE%8B(%25)%22%7D%2C%7B%22x%22%3A1430.4568%2C%22y%22%3A282.28345%2C%22width%22%3A145.25130000000013%2C%22height%22%3A26.05914999999999%2C%22text%22%3A%22%E6%9C%80%E5%90%8E%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A1922.0925%2C%22y%22%3A282.2028%2C%22width%22%3A150.67049999999995%2C%22height%22%3A27.940999999999974%2C%22text%22%3A%22%E6%B5%81%E5%93%81%E6%AF%94%E4%BE%8B(%25)%22%7D%2C%7B%22x%22%3A442.71567%2C%22y%22%3A283.5822%2C%22width%22%3A147.21863000000002%2C%22height%22%3A27.250380000000007%2C%22text%22%3A%22%E6%98%AF%E5%90%A6%E9%93%BE%E8%B7%AF%E4%BC%A0%E9%80%92%22%7D%2C%7B%22x%22%3A786.8557%2C%22y%22%3A283.37558%2C%22width%22%3A94.95060000000001%2C%22height%22%3A26.678439999999966%2C%22text%22%3A%22%E5%AE%9E%E4%BE%8B%E6%95%B0%E9%87%8F%22%7D%2C%7B%22x%22%3A41.737457%2C%22y%22%3A283.80856%2C%22width%22%3A53.180457999999994%2C%22height%22%3A26.575339999999983%2C%22text%22%3A%22%E6%A0%87%E7%AD%BE%22%7D%2C%7B%22x%22%3A1428.1622%2C%22y%22%3A347.64017%2C%22width%22%3A237.59230000000002%2C%22height%22%3A24.666259999999966%2C%22text%22%3A%222021-01-0514%3A11%3A31%22%7D%2C%7B%22x%22%3A114.41736%2C%22y%22%3A348.15012%2C%22width%22%3A90.64418%2C%22height%22%3A25.28294999999997%2C%22text%22%3A%22(%E7%81%B0%E5%BA%A6%E4%B8%AD)%22%7D%2C%7B%22x%22%3A42.22555%2C%22y%22%3A350.08484%2C%22width%22%3A51.3668%2C%22height%22%3A21.726499999999987%2C%22text%22%3A%22blue%22%7D%2C%7B%22x%22%3A41.11651%2C%22y%22%3A411.028%2C%22width%22%3A75.89572000000001%2C%22height%22%3A25.97202999999996%2C%22text%22%3A%22%E6%9C%AA%E6%89%93%E6%A0%87%22%7D%2C%7B%22x%22%3A1921.9531%2C%22y%22%3A411.12653%2C%22width%22%3A44.733799999999974%2C%22height%22%3A25.942499999999995%2C%22text%22%3A%22100%22%7D%2C%7B%22x%22%3A6.822554%2C%22y%22%3A496.8885%2C%22width%22%3A115.698466%2C%22height%22%3A31.292299999999955%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A39.532925%2C%22y%22%3A572.40295%2C%22width%22%3A62.943315000000005%2C%22height%22%3A26.725849999999923%2C%22text%22%3A%22%E8%A7%84%E5%88%991%22%7D%2C%7B%22x%22%3A41.13452%2C%22y%22%3A641.2208%2C%22width%22%3A97.98954999999998%2C%22height%22%3A26.580099999999902%2C%22text%22%3A%22%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A1491.3822%2C%22y%22%3A642.12823%2C%22width%22%3A194.4302%2C%22height%22%3A26.947869999999966%2C%22text%22%3A%22%E5%90%8C%E6%97%B6%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A1172.8654%2C%22y%22%3A642.5092%2C%22width%22%3A97.62950000000001%2C%22height%22%3A27.13600000000008%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%E6%A8%A1%E5%BC%8F%22%7D%2C%7B%22x%22%3A362.48398%2C%22y%22%3A645.26117%2C%22width%22%3A138.22348000000005%2C%22height%22%3A25.591980000000035%2C%22text%22%3A%22springcloud%22%7D%2C%7B%22x%22%3A42.08489%2C%22y%22%3A700.7929%2C%22width%22%3A54.69305%2C%22height%22%3A21.96519999999998%2C%22text%22%3A%22Path%22%7D%2C%7B%22x%22%3A42.19554%2C%22y%22%3A753.89185%2C%22width%22%3A97.75314%2C%22height%22%3A25.56804999999997%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%E5%88%97%E8%A1%A8%22%7D%2C%7B%22x%22%3A786.95404%2C%22y%22%3A766.59845%2C%22width%22%3A54.814820000000054%2C%22height%22%3A29.32294999999999%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A395.2395%2C%22y%22%3A767.46924%2C%22width%22%3A97.11179999999996%2C%22height%22%3A26.36396000000002%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A1377.6497%2C%22y%22%3A768.3199%2C%22width%22%3A51.88630000000012%2C%22height%22%3A27.934000000000083%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A393.23257%2C%22y%22%3A843.94476%2C%22width%22%3A82.29226999999997%2C%22height%22%3A24.210390000000075%2C%22text%22%3A%22header%22%7D%2C%7B%22x%22%3A1677.5009%2C%22y%22%3A847.26184%2C%22width%22%3A45.772500000000036%2C%22height%22%3A21.66106000000002%2C%22text%22%3A%22test%22%7D%2C%7B%22x%22%3A788.33496%2C%22y%22%3A847.3097%2C%22width%22%3A44.914339999999925%2C%22height%22%3A20.82370000000003%2C%22text%22%3A%22env%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%20%E6%9C%8D%E5%8A%A1%E9%89%B4%E6%9D%83%20%E6%A0%87%E7%AD%BE%E8%B7%AF%E7%94%B1%20%E9%87%91%E4%B8%9D%E9%9B%80%20%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%20%E5%8F%91%E5%B8%83%E5%AE%8C%E6%88%90%20%E5%9B%9E%E6%BB%9A%20%E7%BC%96%E8%BE%91%20%E5%AE%9E%E4%BE%8B%E6%AF%94%E4%BE%8B(%25)%20%E6%9C%80%E5%90%8E%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%20%E6%B5%81%E5%93%81%E6%AF%94%E4%BE%8B(%25)%20%E6%98%AF%E5%90%A6%E9%93%BE%E8%B7%AF%E4%BC%A0%E9%80%92%20%E5%AE%9E%E4%BE%8B%E6%95%B0%E9%87%8F%20%E6%A0%87%E7%AD%BE%202021-01-0514%3A11%3A31%20(%E7%81%B0%E5%BA%A6%E4%B8%AD)%20blue%20%E6%9C%AA%E6%89%93%E6%A0%87%20100%20%E6%B5%81%E9%87%8F%E8%A7%84%E5%88%99%20%E8%A7%84%E5%88%991%20%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9E%8B%20%E5%90%8C%E6%97%B6%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E6%9D%A1%E4%BB%B6%20%E6%9D%A1%E4%BB%B6%E6%A8%A1%E5%BC%8F%20springcloud%20Path%20%E6%9D%A1%E4%BB%B6%E5%88%97%E8%A1%A8%20%E5%8F%82%E6%95%B0%20%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E6%9D%A1%E4%BB%B6%20header%20test%20env%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1149%2C%22height%22%3A471%7D&quot;&gt;&lt;img data-backh=&quot;237&quot; data-backw=&quot;578&quot; data-height=&quot;471px&quot; data-ratio=&quot;0.41&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZXHGZm3wgmibvaLtCN8zvozu4ZZQDsOwgRnBv2bNVouMfckmjY7F8sZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;传入 HEADER 继续使用 shell 执行:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; curl -H &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;env:test&quot;&lt;/span&gt; http:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;A1[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.20&lt;/span&gt;] -&amp;gt; B[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.180&lt;/span&gt;] -&amp;gt; C[&lt;span class=&quot;code-snippet__number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.72&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个时候我们发现满足金丝雀规则的流量都去了 SC-A 的灰度版本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-lake-id=&quot;a3e2c5fb84292c7e2285c932370d1e9d&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;金丝雀路由规则解析&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家看到金丝雀路由规则界面上有两种分别，分别是&lt;strong&gt;流量比例&lt;/strong&gt;和&lt;strong&gt;流量规则&lt;/strong&gt;:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609827326905-e666d1d9-83ee-4a2d-801c-fbc2605b1ddd.png%22%2C%22originWidth%22%3A1820%2C%22originHeight%22%3A1352%2C%22name%22%3A%22image.png%22%2C%22size%22%3A313886%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A32.13881%2C%22y%22%3A11.313746%2C%22width%22%3A147.37672%2C%22height%22%3A25.830683999999998%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B(2)%22%7D%2C%7B%22x%22%3A1367.3953%2C%22y%22%3A87.48957%2C%22width%22%3A152.6251000000002%2C%22height%22%3A27.43477%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%E6%AF%94%E4%BE%8B(%25)%22%7D%2C%7B%22x%22%3A64.111275%2C%22y%22%3A87.510704%2C%22width%22%3A54.560475%2C%22height%22%3A26.059305999999992%2C%22text%22%3A%22%E6%A0%87%E7%AD%BE%22%7D%2C%7B%22x%22%3A764.8802%2C%22y%22%3A87.18126%2C%22width%22%3A152.32180000000005%2C%22height%22%3A27.804990000000004%2C%22text%22%3A%22%E5%AE%9E%E4%BE%8B%E6%AF%94%E4%BE%8B(%25)%22%7D%2C%7B%22x%22%3A581.37634%2C%22y%22%3A88.12884%2C%22width%22%3A100.14585999999997%2C%22height%22%3A25.84644%2C%22text%22%3A%22%E5%AE%9E%E4%BE%8B%E6%95%B0%E9%87%8F%22%7D%2C%7B%22x%22%3A343.6008%2C%22y%22%3A88.13122%2C%22width%22%3A147.36636%2C%22height%22%3A25.74024%2C%22text%22%3A%22%E6%98%AF%E5%90%A6%E9%93%BE%E8%B7%AF%E4%BC%A0%E9%80%92%22%7D%2C%7B%22x%22%3A1026.9268%2C%22y%22%3A88.034805%2C%22width%22%3A146.17420000000016%2C%22height%22%3A25.67072499999999%2C%22text%22%3A%22%E6%9C%80%E5%90%8E%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A140.6838%2C%22y%22%3A167.21333%2C%22width%22%3A90.41244%2C%22height%22%3A27.299909999999983%2C%22text%22%3A%22(%E7%81%B0%E5%BA%A6%E4%B8%AD)%22%7D%2C%7B%22x%22%3A767.9423%2C%22y%22%3A169.05223%2C%22width%22%3A30.779139999999984%2C%22height%22%3A21.790239999999983%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A1029.4417%2C%22y%22%3A168.81287%2C%22width%22%3A231.8092999999999%2C%22height%22%3A23.436289999999985%2C%22text%22%3A%222021-01-0514%3A11%3A31%22%7D%2C%7B%22x%22%3A64.910934%2C%22y%22%3A169.39963%2C%22width%22%3A52.20324600000001%2C%22height%22%3A22.67482000000001%2C%22text%22%3A%22blue%22%7D%2C%7B%22x%22%3A765.9974%2C%22y%22%3A265.8954%2C%22width%22%3A33.99459999999999%2C%22height%22%3A23.99482999999998%2C%22text%22%3A%2250%22%7D%2C%7B%22x%22%3A65.981064%2C%22y%22%3A266.16272%2C%22width%22%3A75.17093599999998%2C%22height%22%3A25.158180000000016%2C%22text%22%3A%22%E6%9C%AA%E6%89%93%E6%A0%87%22%7D%2C%7B%22x%22%3A1402.8301%2C%22y%22%3A268.59515%2C%22width%22%3A43.21980000000008%2C%22height%22%3A24.24961000000002%2C%22text%22%3A%22100%22%7D%2C%7B%22x%22%3A51.517647%2C%22y%22%3A379.57098%2C%22width%22%3A98.52834299999999%2C%22height%22%3A24.87576999999999%2C%22text%22%3A%22%E6%B5%81%E9%87%8F%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A66.091446%2C%22y%22%3A456.00677%2C%22width%22%3A62.21312400000001%2C%22height%22%3A25.769569999999987%2C%22text%22%3A%22%E8%A7%84%E5%88%991%22%7D%2C%7B%22x%22%3A84.341545%2C%22y%22%3A520.48267%2C%22width%22%3A99.477835%2C%22height%22%3A24.781830000000014%2C%22text%22%3A%22%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A111.385284%2C%22y%22%3A595.96265%2C%22width%22%3A159.316216%2C%22height%22%3A25.141109999999912%2C%22text%22%3A%22SpringCloud%22%7D%2C%7B%22x%22%3A65.192055%2C%22y%22%3A695.62775%2C%22width%22%3A57.999785%2C%22height%22%3A21.812149999999974%2C%22text%22%3A%22Path%22%7D%2C%7B%22x%22%3A1512.351%2C%22y%22%3A765.251%2C%22width%22%3A195.43979999999988%2C%22height%22%3A26.739100000000008%2C%22text%22%3A%22%E5%88%87%E6%8D%A2%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%22%7D%2C%7B%22x%22%3A97.65679%2C%22y%22%3A768.5626%2C%22width%22%3A660.12501%2C%22height%22%3A27.948600000000056%2C%22text%22%3A%22HTTP%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%2C%E4%BE%8B%E5%A6%82%2Fa%2Fb%2C%E6%B3%A8%E6%84%8F%E4%B8%A5%E6%A0%BC%E5%8C%B9%E9%85%8D%2C%E7%95%99%E7%A9%BA%E4%BB%A3%E8%A1%A8%E4%BB%BB%E4%BD%95%E8%B7%AF%E5%BE%84.%22%7D%2C%7B%22x%22%3A86.66287%2C%22y%22%3A863.06683%2C%22width%22%3A97.94381999999999%2C%22height%22%3A26.614670000000046%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%E6%A8%A1%E5%BC%8F%22%7D%2C%7B%22x%22%3A377.15308%2C%22y%22%3A935.3832%2C%22width%22%3A195.13592%2C%22height%22%3A26.84710000000007%2C%22text%22%3A%22%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E4%BB%BB%E4%B8%80%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A110.834854%2C%22y%22%3A935.2305%2C%22width%22%3A193.101446%2C%22height%22%3A26.414199999999937%2C%22text%22%3A%22%E5%90%8C%E6%97%B6%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A85.9481%2C%22y%22%3A1036.086%2C%22width%22%3A99.8016%2C%22height%22%3A25.065599999999904%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%E5%88%97%E8%A1%A8%22%7D%2C%7B%22x%22%3A98.955826%2C%22y%22%3A1108.9467%2C%22width%22%3A97.522794%2C%22height%22%3A25.595299999999952%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A906.8033%2C%22y%22%3A1110.4578%2C%22width%22%3A50.990459999999985%2C%22height%22%3A25.610200000000077%2C%22text%22%3A%22%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A1628.3538%2C%22y%22%3A1111.302%2C%22width%22%3A49.89909999999986%2C%22height%22%3A24.42970000000014%2C%22text%22%3A%22%E6%93%8D%E4%BD%9C%22%7D%2C%7B%22x%22%3A450.7275%2C%22y%22%3A1110.833%2C%22width%22%3A49.200229999999976%2C%22height%22%3A24.849099999999908%2C%22text%22%3A%22%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A132.46729%2C%22y%22%3A1192.8375%2C%22width%22%3A83.67936%2C%22height%22%3A21.79379999999992%2C%22text%22%3A%22Header%22%7D%2C%7B%22x%22%3A770.5105%2C%22y%22%3A1192.8417%2C%22width%22%3A55.310299999999984%2C%22height%22%3A21.520700000000033%2C%22text%22%3A%223%2F64%22%7D%2C%7B%22x%22%3A1227.852%2C%22y%22%3A1196.3085%2C%22width%22%3A48.37429999999995%2C%22height%22%3A19.75909999999999%2C%22text%22%3A%22test%22%7D%2C%7B%22x%22%3A481.94574%2C%22y%22%3A1197.1864%2C%22width%22%3A44.02426000000003%2C%22height%22%3A18.949299999999994%2C%22text%22%3A%22env%22%7D%2C%7B%22x%22%3A87.514145%2C%22y%22%3A1270.3042%2C%22width%22%3A208.39167500000002%2C%22height%22%3A29.607799999999997%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E8%A7%84%E5%88%99%E6%9D%A1%E4%BB%B6%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B(2)%20%E6%B5%81%E9%87%8F%E6%AF%94%E4%BE%8B(%25)%20%E6%A0%87%E7%AD%BE%20%E5%AE%9E%E4%BE%8B%E6%AF%94%E4%BE%8B(%25)%20%E5%AE%9E%E4%BE%8B%E6%95%B0%E9%87%8F%20%E6%98%AF%E5%90%A6%E9%93%BE%E8%B7%AF%E4%BC%A0%E9%80%92%20%E6%9C%80%E5%90%8E%E6%93%8D%E4%BD%9C%E6%97%B6%E9%97%B4%20(%E7%81%B0%E5%BA%A6%E4%B8%AD)%2050%202021-01-0514%3A11%3A31%20blue%2050%20%E6%9C%AA%E6%89%93%E6%A0%87%20100%20%E6%B5%81%E9%87%8F%E8%A7%84%E5%88%99%20%E8%A7%84%E5%88%991%20%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9E%8B%20SpringCloud%20Path%20%E5%88%87%E6%8D%A2%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%20HTTP%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%2C%E4%BE%8B%E5%A6%82%2Fa%2Fb%2C%E6%B3%A8%E6%84%8F%E4%B8%A5%E6%A0%BC%E5%8C%B9%E9%85%8D%2C%E7%95%99%E7%A9%BA%E4%BB%A3%E8%A1%A8%E4%BB%BB%E4%BD%95%E8%B7%AF%E5%BE%84.%20%E6%9D%A1%E4%BB%B6%E6%A8%A1%E5%BC%8F%20%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E4%BB%BB%E4%B8%80%E6%9D%A1%E4%BB%B6%20%E5%90%8C%E6%97%B6%E6%BB%A1%E8%B6%B3%E4%B8%8B%E5%88%97%E6%9D%A1%E4%BB%B6%20%E6%9D%A1%E4%BB%B6%E5%88%97%E8%A1%A8%20%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%20%E6%9D%A1%E4%BB%B6%20%E6%93%8D%E4%BD%9C%20%E5%8F%82%E6%95%B0%20Header%203%2F64%20test%20env%20%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%E8%A7%84%E5%88%99%E6%9D%A1%E4%BB%B6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A910%2C%22height%22%3A676%7D&quot;&gt;&lt;img data-backh=&quot;429&quot; data-backw=&quot;578&quot; data-height=&quot;676px&quot; data-ratio=&quot;0.7426666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZBUgZKI6XtvCFR8wUbD63AUpBFDU0m4icyLBB4ibPD47VRC7Ew8vXdMyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1500&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流量规则：表示满足该规则的流量会路由到对应标签(本文使用 blue 作为灰度标签)实例上。比如本文例子中 HEADER 里 env=test 的流量一定会去 blue 标签对应的实例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流量比例：不满足任何流量规则的流量会按照流量百分比进行路由。比如本文例子中不满足 HEADER 里 env=test 的流量会以 100% 的规则路由到未打标的实例上，由于是 100%，所以那些不满足规则的流量全部都去了未打标实例上(本文未打标表示线上版本)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MSE 提供的流量规则里的条件支持 &lt;strong&gt;HEADER、Query Parameter、COOKIE 以及 Request BODY。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Query Parameter、HEADER、COOKIE 和 Request Body 除了支持常规的运算符外，还支持 in(白名单)，对 100 取模和百分比。这里的百分比并不是比例规则中的总流量百分比，而是指对应参数的 hash 值取模，这样就可以让固定的值永远满足路由条件(如果按照流量比例，用户 A 这次访问的是线上版本，下次可能会访问灰度版本)。举个例子，如果 HEADER 中带有用户 ID，我让想部分用户永远能够访问灰度实例，这个时候可以对用户 ID 的 hash 值取模去完成(当然，这个也可以通过白名单去操作，白名单的缺点并不随机，需要输入各个名单)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Request Body 目前支持解析 json 字符串，比如如下字符串:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;aa&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;b&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;c&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;d&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dd&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ],&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;e&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;f&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ff&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JSON 访问表达式 .a 的值为 aa。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JSON 访问表达式 .b[0] 的值为 1。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JSON 访问表达式 .c[0].d 的值为 dd。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JSON 访问表达式 .e.f 的值为 ff。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;0d2283e3dc4c1d7117f1cab419606943&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文介绍了微服务治理下金丝雀发布的能力，解决了发布期间少量流量验证新功能的问题。您的应用只需接入 MSE 服务治理，无需任何操作即可享受到动态路由的能力。除了 MSE（微服务引擎），金丝雀发布还被 EDAS、SAE 等云产品集成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下一篇，我会给大家分享 MSE 全链路灰度能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;a0d5be04e3fc0752285182e47eca5331&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;微服务引擎用户交流群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果您在微服务引擎MSE使用过程中有任何疑问，欢迎您搜索钉钉群号 23371469 或者使用钉钉扫描如下二维码加入钉钉群进行反馈。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2021%2Fpng%2F64647%2F1609824412630-11b0701f-24a0-4079-8598-013ed468b7c7.png%22%2C%22originWidth%22%3A378%2C%22originHeight%22%3A492%2C%22name%22%3A%22image.png%22%2C%22size%22%3A132704%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.874634%2C%22y%22%3A32.96756%2C%22width%22%3A245.81973599999998%2C%22height%22%3A22.055248%2C%22text%22%3A%22MSE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E6%B5%81%E7%BE%A4%22%7D%2C%7B%22x%22%3A23.079275%2C%22y%22%3A59.237537%2C%22width%22%3A36.121825%2C%22height%22%3A11.50165299999999%2C%22text%22%3A%22838%E4%BA%BA%22%7D%2C%7B%22x%22%3A101.00989%2C%22y%22%3A459.12936%2C%22width%22%3A176.45821%2C%22height%22%3A14.712709999999959%2C%22text%22%3A%22%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MSE%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%95%E6%93%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E6%B5%81%E7%BE%A4%20838%E4%BA%BA%20%E6%89%AB%E4%B8%80%E6%89%AB%E7%BE%A4%E4%BA%8C%E7%BB%B4%E7%A0%81%2C%E7%AB%8B%E5%88%BB%E5%8A%A0%E5%85%A5%E8%AF%A5%E7%BE%A4.%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A189%2C%22height%22%3A246%7D&quot;&gt;&lt;img data-height=&quot;246px&quot; data-ratio=&quot;1.3015873015873016&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWsO4AwBibp1kzfgzMCQfNJnZcXC06Z0tt8D6NoxTMcoLoEnVEsqlicIyapASVicn031Un6Jtdw9T8W0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;378&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;Tips：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 点下“在看”❤️&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 在【阿里巴巴中间件】公众号对话框内发送“抽奖”，试试手气？ &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>57f9dcabe36f391843f6e276502b6a01</guid>
<title>Linux：为什么性能工具需要 BPF 技术</title>
<link>https://toutiao.io/k/b4cvbcq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;markdown-body detail-content&quot;&gt;&amp;#13;
                &amp;#13;
                &lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101f920b6b84fd0fecf&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101c50946281568d30e&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;了解更多BPF技术内幕，推荐阅读《BPF之巅：洞悉Linux系统和应用性能》一书。&lt;br/&gt;▼&lt;br/&gt;BPF是近年来Linux 系统技术领域一个巨大的创新。作为 Linux 内核的一个关键发展节点，其重要程度不亚于虚拟化、容器、SDN 等技术。&amp;#13;
&lt;/p&gt;&lt;p&gt;▼BPF 的工作方式十分有趣 ：&lt;/p&gt;&amp;#13;
&lt;p&gt;最终用户使用 BPF 虚拟机的指令集（也称 BPF 字节码）定义过滤器表达式，然后传递给内核，由解释器执行。这使得包过滤可以在内核中直接进行，避免了向用户态进程复制每个数据包，从而提升了数据包过滤的性能，tcpdump(8) 就是这样工作的。 &lt;/p&gt;&amp;#13;
&lt;p&gt;BPF 还提供了安全性保障，因为用户定义的过滤器在执行前必须首先通过安全性验证。&lt;/p&gt;&amp;#13;
&lt;p&gt;早期的包过滤必须在内核空间执行，安全是一个硬性要求。大家可以从下图了解这一切是如何工作的。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101de23614a9fdb1405&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;tcpdump 和 BPF&amp;#13;
&lt;/p&gt;&lt;p&gt;在运行 tcpdump(8) 时带上命令行参数 -d，可以打印出使用过滤器表达式的 BPF 指令。例如 ：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101600712550d20819c&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;▊ 经典 BPF 与扩展版 BPF&lt;/p&gt;&amp;#13;
&lt;p&gt;最初的 BPF 现在被称为“经典 BPF”，它是一个功能有限的虚拟机。它有两个寄存器，一个由 16 个内存槽位组成的临时存储区域和一个程序计数器。以上部件均按 32 位寄存器大小运行。经典 BPF 于 1997 年进入 Linux 内核版本 2.1.75。&lt;/p&gt;&amp;#13;
&lt;p&gt;而后Alexei Starovoitov 创造了扩展版 BPF（eBPF）。这是 20 年来 BPF 的第一次重大更新，此举也将 BPF 扩展为一个通用的虚拟机。&lt;/p&gt;&amp;#13;
&lt;p&gt;虽然BPF通常被称为虚拟机，不过这往往指的是它的实现规范。BPF在Linux中的实际实现（运行时支持）同时包括一个解释器和一个可即时编译为本机指令的编译器。&lt;br/&gt;“虚拟机”一词似乎意味着在处理器之上运行另一个机器层，而实际BPF执行并非如此。JIT编译后的代码会像任何其他本地内核代码一样，直接在处理器上运行。要注意，在Spectre漏洞公布之后，一些发行版默认在x86架构上启用JIT，完全移除了内核中的解释器实现（通过条件编译直接排除了相关代码）。&lt;br/&gt;扩展版的 BPF 中增加了更多寄存器，并将字长从 32 位增至 64 位，创建了灵活的BPF 映射型存储（map），并允许调用一些受限制的内核功能。同时，eBPF 被设计为可以使用即时编译（JIT），机器指令与寄存器可以一对一映射。这就使得先前的处理器本地指令优化技术，可以重用于 BPF 之上。BPF 验证器也进行了更新以便支持这些扩展，而且能够拒绝任何不安全的代码。&amp;#13;
&lt;/p&gt;&lt;p&gt;经典 BPF 和扩展版 BPF 之间的差异如下。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101808c6c8a2dd17137&quot; alt=&quot;&quot;/&gt;&amp;#13;
&lt;/p&gt;&lt;p&gt;在最早的代码补丁中，扩展版BPF曾被简写为 eBPF，不过如今有关的开发讨论中，都直接使用BPF 这种叫法。&lt;br/&gt;Linux BPF 运行时（runtime）的各模块的架构如下图。&amp;#13;
&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/210195aca46c520d733a&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;BPF 运行时的内部结构&amp;#13;
&lt;/p&gt;&lt;p&gt;上图展示了 BPF 指令如何通过 BPF 验证器验证，再由 BPF 虚拟机执行。&lt;/p&gt;&amp;#13;
&lt;p&gt;BPF 虚拟机的实现既包括一个解释器，又包括一个 JIT 编译器 ：JIT 编译器负责生成处理器可直接执行的机器指令。验证器会拒绝那些不安全的操作，这包括针对无界循环的检查 ：BPF 程序必须在有限的时间内完成。&lt;/p&gt;&amp;#13;
&lt;p&gt;BPF 可以利用辅助函数获取内核状态，利用 BPF 映射表进行存储。BPF 程序在特定事件发生时执行，包括 kprobes、uprobes 和跟踪点等事件。&lt;/p&gt;&amp;#13;
&lt;p&gt;接下来我们来讨论一下，为什么性能工具需要 BPF 技术。&lt;/p&gt;&amp;#13;
&lt;p&gt;▊ 为什么性能工具需要 BPF 技术&lt;/p&gt;&amp;#13;
&lt;p&gt;性能工具使用扩展版 BPF 来实现可编程性。BPF 程序可以执行自定义的延迟计算和统计摘要等功能。这些特性本身就足够使 BPF 成为一个有趣的工具。&lt;/p&gt;&amp;#13;
&lt;p&gt;不过事实上有很多跟踪工具都具备了这些功能。BPF 与众不同之处在于，它还同时具备高效率和生产环境安全性的特点，并且它已经被内置在 Linux 内核中。&lt;/p&gt;&amp;#13;
&lt;p&gt;有了 BPF，你就可以在生产环境中直接运行这些工具，而无须增加新的内核组件。&lt;/p&gt;&amp;#13;
&lt;p&gt;▼&lt;/p&gt;&amp;#13;
&lt;p&gt;下面我们通过一个工具的输出和一幅图来看一下性能工具是如何使用 BPF 的。&lt;/p&gt;&amp;#13;
&lt;p&gt;这个 例子的输出来自性能优化大师Gregg以前发布的一个叫作 bitehist 的 BPF 工具，它用直方图的形式展示磁盘 I/O 的尺寸分布：&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/21016d8507ed95ea675f&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;下图显示了使用 BPF 之前和之后的直方图生成过程。&lt;br/&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/210178db58d1609275ce&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;使用 BPF 之前和之后生成直方图过程的对比&amp;#13;
&lt;/p&gt;&lt;p&gt;这里的关键变化是，直方图可以在内核上下文中生成，这大大减少了需要复制到用户空间的数据量。这里的效率提升是如此的显著，以至于工具的额外开销减小到可以在生产环境下直接运行的程度。&lt;/p&gt;&amp;#13;
&lt;p&gt;使用 BPF 之前，制作这一直方图摘要的最佳步骤如下。&lt;/p&gt;&amp;#13;
&lt;p&gt;1.在内核中 ：开启磁盘 I/O 事件的插桩观测。&lt;/p&gt;&amp;#13;
&lt;p&gt;2.在内核中，针对每个事件 ：向 perf 缓冲区写入一条记录。如果使用了跟踪点技术（推荐方式），记录中会包含关于磁盘 I/O 的几个元数据字段。&lt;/p&gt;&amp;#13;
&lt;p&gt;3.在用户空间 ：周期性地将所有事件的缓冲区内容复制到用户空间。&lt;/p&gt;&amp;#13;
&lt;p&gt;4.在用户空间 ：遍历每个事件，解析字节字段的事件元数据字段。其他字段会被忽略。&lt;/p&gt;&amp;#13;
&lt;p&gt;5.在用户空间 ：生成字节字段的直方图摘要&lt;/p&gt;&amp;#13;
&lt;p&gt;其中步骤 2 到步骤 4 对于高 I/O 的系统来说性能开销非常大。可以想象一下，将 10000个磁盘 I/O 跟踪记录复制到用户空间程序中，然后解析以生成摘要信息—每秒执行 1 次。&lt;br/&gt;使用 BPF 之后，bitesize 程序执行的步骤如下。&amp;#13;
&lt;/p&gt;&lt;p&gt;1.在内核中：启用磁盘 I/O 事件的插桩观测，并挂载一个由 bitesize 工具定义的BPF 程序。&lt;/p&gt;&amp;#13;
&lt;p&gt;2.在内核中，对每次事件 ：运行 BPF 程序。它只获取字节字段，并将其保存到自定义的 BPF 直方图映射数据结构中。&lt;/p&gt;&amp;#13;
&lt;p&gt;3.在用户空间 ：一次性读取 BPF 直方图映射表并输出结果。&lt;/p&gt;&amp;#13;
&lt;p&gt;这个过程避免了将事件复制到用户空间并再次对其处理的成本，也避免了对未使用的元数据字段的复制。如前面的程序输出截图所示，唯一需要复制到用户空间的数据是“count”列，其是一个数字数组。&lt;/p&gt;&amp;#13;
&lt;p&gt;▊ BPF 与内核模块的对比&lt;/p&gt;&amp;#13;
&lt;p&gt;还有一种方法可以理解 BPF 在可观测性方面的优势 ：将其与内核模块进行比较。&lt;/p&gt;&amp;#13;
&lt;p&gt;kprobes 和跟踪点已经出现多年了，可以直接从可加载的内核模块中使用。与使用内核模块相比，使用 BPF 进行跟踪的优势如下 ：&lt;/p&gt;&amp;#13;
&lt;p&gt;● BPF 程序会通过验证器的安全性检查 ；内核模块则可能会引入 bug（内核崩溃）或安全漏洞。&lt;/p&gt;&amp;#13;
&lt;p&gt;● BPF 通过映射提供丰富的数据结构支持。&lt;/p&gt;&amp;#13;
&lt;p&gt;● BPF 程序可以一次编译，然后在任何地方运行，因为 BPF 指令集、映射表结构、辅助函数和相关基础设施属于稳定的 ABI。（当然，有些 BPF 程序包含了不稳定的因素，比如使用了 kprobes 来观测内核数据结构，这会影响 BPF 程序的自身稳定性）&lt;/p&gt;&amp;#13;
&lt;p&gt;● BPF 程序的编译不依赖内核编译过程的中间结果。&lt;/p&gt;&amp;#13;
&lt;p&gt;● 与开发内核模块所需的工程量相比，BPF 编程更加易学，可以让更多人上手。&lt;/p&gt;&amp;#13;
&lt;p&gt;请注意，在网络领域应用 BPF 还有额外的好处，包括原子性替换 BPF 程序的能力。如果使用内核模块，则需要先从内核中将其完全卸载，然后再次加载，这可能会导致相关服务中断。&lt;/p&gt;&amp;#13;
&lt;p&gt;使用内核模块的一个好处是 ：在模块中可以使用其他内核函数和内核设施，而不仅限于 BPF 提供的辅助函数。&lt;/p&gt;&amp;#13;
&lt;p&gt;不过，如果调用任意内核函数的能力被滥用，也会带来引入bug 的额外风险。&lt;/p&gt;&amp;#13;
&lt;p&gt;了解更多BPF技术内幕，推荐阅读《BPF之巅：洞悉Linux系统和应用性能》一书。&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;http://download.broadview.com.cn/Original/2101acaebc7ab09e4280&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;▊《BPF之巅：洞悉Linux系统和应用性能》&lt;br/&gt;【美】Brendan Gregg 著&lt;br/&gt;孙宇聪 吕宏利 刘晓舟 译&amp;#13;
&lt;/p&gt;&lt;p&gt;Gregg大师新作，《性能之巅》再续新篇&lt;br/&gt;性能优化的万用金典，150+分析调试工具深度剖析&lt;br/&gt;本书作为全面介绍 BPF 技术的图书，从 BPF 技术的起源到未来发展方向都有涵盖，不仅全面介绍了 BPF 的编程模型，还完整介绍了两个主要的 BPF 前端编程框架 — BCC 和 bpftrace，更给出了一系列实现范例，生动展示了 BPF技术的实际能力和未来发展前景。&amp;#13;
&amp;#13;
            &lt;/p&gt;&lt;/div&gt;&amp;#13;
&amp;#13;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b745b7a38dfb09fe4b9023655ade4ef6</guid>
<title>再议 DDD 分层</title>
<link>https://toutiao.io/k/frwc7b5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;之前整理过&lt;span&gt;《DDD分层》&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 以及&lt;span&gt;《分层架构》&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;最近看网友讨论，整理一些有亮点的地方&lt;/p&gt;&lt;p&gt;现在分层架构+整洁架构似乎是个万金油组合了&lt;/p&gt;&lt;p&gt;之前DDD的标准分层结构：&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/8NiclBICI8Kib7AkRofxtk6SaAKMHfue7NEukJEQ3ec4p2LzicfFPNcxnZgzkYwHVlNR6d18B8UgcTcJF4dnrEibpw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; title=&quot;null&quot; data-ratio=&quot;0.6134122287968442&quot; data-w=&quot;507&quot;/&gt;&lt;/p&gt;&lt;p&gt;右边传统分层，左边经过DIP改进型，两者有什么区别呢？&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/8NiclBICI8Kib7AkRofxtk6SaAKMHfue7NcsVtmibyLBuO56wegdRQdpWo4EHBBWX7edMia1FCK48rTOiccN0wBhKdA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; title=&quot;null&quot; data-ratio=&quot;1.1232394366197183&quot; data-w=&quot;284&quot;/&gt;&lt;/p&gt;&lt;p&gt;眼尖的人可以看出来，两者确实差了不少&lt;/p&gt;&lt;p&gt;线条1：application到infrastructure被反转了&lt;/p&gt;&lt;p&gt;线条2：这条线没有了，在MVC里面这线是常见的，applicaton与domain没分开，但DDD中这条线是不推荐的，就算在松散分层架构中也一般不使用,除非简单的CRUD项目&lt;/p&gt;&lt;p&gt;线条3：也被反转了，这其实类似CQRS中的Q部分&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;以上来源于群友的讨论，真的是世上无难事，只怕有心人；这点区别真没留意过&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/8NiclBICI8Kib7AkRofxtk6SaAKMHfue7Nb0OMIjBFFS2T07uPqEMcicE32rE2ah26gWpbQiaVjSK8OEnuNJFPGgZg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; title=&quot;null&quot; data-ratio=&quot;0.23055555555555557&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;这图来源于阿里大牛殷浩之手，&lt;span&gt;《阿里DDD四弹》&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;中进行过总结，DTOAssembler放在了application层,有些不太合理&lt;/p&gt;&lt;p&gt;在《分层架构》中thrift的TService，为了不与controller重复，所以需要一个application service,此时thrift与controller可以有相同的业务请求&lt;/p&gt;&lt;p&gt;也就是说controller对外有多种输入，但对应用层来说都是同一个user case，如果放在应用层内转化，是不是应该层为了同一个use case要爆露多过方法&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/8NiclBICI8Kib7AkRofxtk6SaAKMHfue7No7WHwcLe5MreNibxQibXB7lby2VKkcZCaOrp59WNMXn4KySFjZZLOCxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; title=&quot;null&quot; data-ratio=&quot;0.8601851851851852&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;适配层做三件事：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;协议适配（如采用controller，通过 @RequestMapping 注解和 JSON 序列化)&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;参数规则验证（如，不能为空、手机是数字并且11位、邮箱要有@之类简单验证）&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;为调用下层（应用层）转化输入（assembler）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果说分4层的话：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;controller （assembler、转化）&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;appliction&lt;/span&gt;&lt;span&gt;&lt;span&gt;3.&lt;/span&gt;domain&lt;/span&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;repository（convertor、转化）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;应用层是真正的业务入口，是很披的一层：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;用来协调领域操作 这里一般看系统架构不一样会有所不同，主要再分为同步调用的方式，和步骤事件的方式。&lt;/span&gt;&lt;span&gt;&lt;span&gt;2.&lt;/span&gt;关注点分离的操作（如日志、通知等）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;application service编排业务，domain service编排领域&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/8NiclBICI8Kib7AkRofxtk6SaAKMHfue7NBQyJxwFYicIk5xMbTV6dYicibV2NcrwlgUVkic7ibAaibGF8FRzuNaCKrevw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; title=&quot;null&quot; data-ratio=&quot;0.7474226804123711&quot; data-w=&quot;582&quot;/&gt;&lt;/p&gt;&lt;h3&gt;References&lt;/h3&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 《DDD分层》: &lt;em&gt;http://www.zhuxingsheng.com/blog/ddd-layering.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 《分层架构》: &lt;em&gt;http://www.zhuxingsheng.com/blog/layered-architecture.html&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 《阿里DDD四弹》: &lt;em&gt;http://www.zhuxingsheng.com/blog/ali-ddd-four-bombs-to-read.html&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5b03bc7da2cb2521cda19c40af4681b0</guid>
<title>Spring Boot 2.0 中 HikariCP 数据库连接池原理解析</title>
<link>https://toutiao.io/k/c42bstk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;作为后台服务开发，在日常工作中我们天天都在跟数据库打交道，一直在进行各种CRUD操作，都会使用到数据库连接池。按照发展历程，业界知名的数据库连接池有以下几种：c3p0、DBCP、Tomcat JDBC Connection Pool、Druid 等，不过最近最火的是 HiKariCP。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;HiKariCP 号称是业界跑得最快的数据库连接池，自从 SpringBoot 2.0 将其作为默认数据库连接池后，其发展势头锐不可当。那它为什么那么快呢？今天咱们就重点聊聊其中的原因。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;一、什么是数据库连接池&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在讲解HiKariCP之前，我们先简单介绍下什么是数据库连接池（Database Connection Pooling），以及为什么要有数据库连接池。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从根本上而言，数据库连接池和我们常用的线程池一样，都属于池化资源，它在程序初始化时创建一定数量的数据库连接对象并将其保存在一块内存区中。它允许应用程序重复使用一个现有的数据库连接，当需要执行 SQL 时，我们是直接从连接池中获取一个连接，而不是重新建立一个数据库连接，当 SQL 执行完，也并不是将数据库连接真的关掉，而是将其归还到数据库连接池中。我们可以通过配置连接池的参数来控制连接池中的初始连接数、最小连接、最大连接、最大空闲时间等参数，来保证访问数据库的数量在一定可控制的范围类，防止系统崩溃，同时保证用户良好的体验。数据库连接池示意图如下所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3628620102214651&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l66JBg25Y6icKeY9zjITm3hvytBWwYEl8job55EH6SGqniaPAoTmPeKteQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;因此使用数据库连接池的核心作用，就是避免数据库连接频繁创建和销毁，节省系统开销。因为数据库连接是有限且代价昂贵，创建和释放数据库连接都非常耗时，频繁地进行这样的操作将占用大量的性能开销，进而导致网站的响应速度下降，甚至引起服务器崩溃。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;二、常见数据库连接池对比分析&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这里详细总结了常见数据库连接池的各项功能比较，我们重点分析下当前主流的阿里巴巴Druid与HikariCP，HikariCP在性能上是完全优于Druid连接池的。而Druid的性能稍微差点是由于锁机制的不同，并且Druid提供更丰富的功能，包括监控、sql拦截与解析等功能，两者的侧重点不一样，HikariCP追求极致的高性能。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.44902634593356244&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6zaC0Onn9guHBTibYibygKTRfqmSdZC8L6wMAUTucyXico7yqaPDibibG4sg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;873&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;下面是官网提供的性能对比图，在性能上面这五种数据库连接池的排序如下：HikariCP&amp;gt;druid&amp;gt;tomcat-jdbc&amp;gt;dbcp&amp;gt;c3p0：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.41898148148148145&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6tfuyRIjJGXrphSUTIgqfHvajj4jXvJaxWsLD0ZmWib6Yr8b647jicATA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;三、HikariCP 数据库连接池简介&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;HikariCP 号称是史上性能最好的数据库连接池，SpringBoot 2.0将它设置为默认的数据源连接池。Hikari相比起其它连接池的性能高了非常多，那么，这是怎么做到的呢？通过查看HikariCP官网介绍，对于HikariCP所做优化总结如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;1. 字节码精简 ：&lt;/strong&gt;优化代码，编译后的字节码量极少，使得CPU缓存可以加载更多的程序代码；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;HikariCP在优化并精简字节码上也下了功夫，使用第三方的Java字节码修改类库Javassist来生成委托实现动态代理.动态代理的实现在ProxyFactory类，速度更快，相比于JDK Proxy生成的字节码更少，精简了很多不必要的字节码。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 优化代理和拦截器：&lt;/strong&gt;减少代码，例如HikariCP的Statement proxy只有100行代码，只有BoneCP的十分之一；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 自定义数组类型（FastStatementList）代替ArrayList：&lt;/strong&gt;避免ArrayList每次get()都要进行range check，避免调用remove()时的从头到尾的扫描（由于连接的特点是后获取连接的先释放）；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 自定义集合类型（ConcurrentBag）：&lt;/strong&gt;提高并发读写的效率；&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5. 其他针对BoneCP缺陷的优化&lt;/strong&gt;，比如对于耗时超过一个CPU时间片的方法调用的研究。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当然作为一个数据库连接池，不能说快就会被消费者所推崇，它还具有非常好的健壮性及稳定性。HikariCP从15年推出以来，已经经受了广大应用市场的考验，并且成功地被SpringBoot2.0作为默认数据库连接池进行推广，在可靠性上面是值得信任的。其次借助于其代码量少，占用cpu和内存量小的优点，使得它的执行率非常高。最后，Spring配置HikariCP和druid基本没什么区别，迁移过来非常方便，这些都是为什么HikariCP目前如此受欢迎的原因。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;字节码精简、优化代理和拦截器、自定义数组类型。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;四、HikariCP 核心源码解析&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;4.1 FastList 是如何优化性能问题的&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt; 首先我们来看一下执行数据库操作规范化的操作步骤：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;通过数据源获取一个数据库连接；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;创建 Statement；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;执行 SQL；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过 ResultSet 获取 SQL 执行结果；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;释放 ResultSet；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;释放 Statement；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;释放数据库连接。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当前所有数据库连接池都是严格地根据这个顺序来进行数据库操作的，为了防止最后的释放操作，各类数据库连接池都会把创建的 Statement 保存在数组 ArrayList 里，来保证当关闭连接的时候，可以依次将数组中的所有 Statement 关闭。HiKariCP 在处理这一步骤中，认为 ArrayList 的某些方法操作存在优化空间，因此对List接口的精简实现，针对List接口中核心的几个方法进行优化，其他部分与ArrayList基本一致 。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先是get()方法，ArrayList每次调用get()方法时都会进行rangeCheck检查索引是否越界，FastList的实现中去除了这一检查，是因为数据库连接池满足索引的合法性，能保证不会越界，此时rangeCheck就属于无效的计算开销，所以不用每次都进行越界检查。省去频繁的无效操作，可以明显地减少性能消耗。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;code-snippet__title&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; elementData[index];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次是remove方法，当通过 conn.createStatement() 创建一个 Statement 时，需要调用 ArrayList 的 add() 方法加入到 ArrayList 中，这个是没有问题的；但是当通过 stmt.close() 关闭 Statement 的时候，需要调用 ArrayList 的 remove() 方法来将其从 ArrayList 中删除，而ArrayList的remove(Object)方法是从头开始遍历数组，而FastList是从数组的尾部开始遍历，因此更为高效。假设一个 Connection 依次创建 6 个 Statement，分别是 S1、S2、S3、S4、S5、S6，而关闭 Statement 的顺序一般都是逆序的，从S6 到 S1，而 ArrayList 的 remove(Object o) 方法是顺序遍历查找，逆序删除而顺序查找，这样的查找效率就太慢了。因此FastList对其进行优化，改成了逆序查找。如下代码为FastList 实现的数据移除操作，相比于ArrayList的 remove()代码， FastList 去除了检查范围 和 从头到尾遍历检查元素的步骤，其性能更快。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3469055374592834&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6SpCQmz6sEM8rN6rDQyicOgQ33D1UuSWUTqlkTVljyOJYPUmTloWs3bA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Object element)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index = size - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; index &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; index--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (element == elementData[index]) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; numMoved = size - index - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.arraycopy(elementData, index + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, elementData, index, numMoved);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         elementData[--size] = &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过上述源码分析，FastList 的优化点还是很简单的。相比ArrayList仅仅是去掉了rage检查，扩容优化等细节处，删除时数组从后往前遍历查找元素等微小的调整，从而追求性能极致。当然FastList 对于 ArrayList 的优化，我们不能说ArrayList不好。所谓定位不同、追求不同，ArrayList作为通用容器，更追求安全、稳定，操作前rangeCheck检查，对非法请求直接抛出异常，更符合 fail-fast(快速失败)机制，而FastList追求的是性能极致。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面我们再来聊聊 HiKariCP 中的另外一个数据结构 ConcurrentBag，看看它又是如何提升性能的。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;4.2 ConcurrentBag 实现原理分析   &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;当前主流数据库连接池实现方式，大都用两个阻塞队列来实现。一个用于保存空闲数据库连接的队列 idle，另一个用于保存忙碌数据库连接的队列 busy；获取连接时将空闲的数据库连接从 idle 队列移动到 busy 队列，而关闭连接时将数据库连接从 busy 移动到 idle。这种方案将并发问题委托给了阻塞队列，实现简单，但是性能并不是很理想。因为 Java SDK 中的阻塞队列是用锁实现的，而高并发场景下锁的争用对性能影响很大。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;HiKariCP 并没有使用 Java SDK 中的阻塞队列，而是自己实现了一个叫做 ConcurrentBag 的并发容器，在连接池（多线程数据交互）的实现上具有比LinkedBlockingQueue和LinkedTransferQueue更优越的性能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;ConcurrentBag 中最关键的属性有 4 个，分别是：用于存储所有的数据库连接的共享队列 sharedList、线程本地存储 threadList、等待数据库连接的线程数 waiters 以及分配数据库连接的工具 handoffQueue。其中，handoffQueue 用的是 Java SDK 提供的 SynchronousQueue，SynchronousQueue 主要用于线程之间传递数据。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; CopyOnWriteArrayList&amp;lt;T&amp;gt; sharedList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; ThreadLocal&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Object&amp;gt;&amp;gt; threadList;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; AtomicInteger waiters;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; SynchronousQueue&amp;lt;T&amp;gt; handoffQueue;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ConcurrentBag 保证了全部的资源均只能通过 add() 方法进行添加，当线程池创建了一个数据库连接时，通过调用 ConcurrentBag 的 add() 方法加入到 ConcurrentBag 中，并通过 remove() 方法进行移出。下面是 add() 方法和 remove() 方法的具体实现，添加时实现了将这个连接加入到共享队列 sharedList 中，如果此时有线程在等待数据库连接，那么就通过 handoffQueue 将这个连接分配给等待的线程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;ConcurrentBag 的 add() 与 remove() 方法&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; T bagEntry)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (closed) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      LOGGER.info(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ConcurrentBag has been closed, ignoring add()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ConcurrentBag has been closed, ignoring add()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   sharedList.add(bagEntry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (waiters.get() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; bagEntry.getState() == STATE_NOT_IN_USE &amp;amp;&amp;amp; !handoffQueue.offer(bagEntry)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      yield();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; T bagEntry)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!bagEntry.compareAndSet(STATE_IN_USE, STATE_REMOVED) &amp;amp;&amp;amp; !bagEntry.compareAndSet(STATE_RESERVED, STATE_REMOVED) &amp;amp;&amp;amp; !closed) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      LOGGER.warn(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Attempt to remove an object from the bag that was not borrowed or reserved: {}&quot;&lt;/span&gt;, bagEntry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; removed = sharedList.remove(bagEntry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!removed &amp;amp;&amp;amp; !closed) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      LOGGER.warn(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Attempt to remove an object from the bag that does not exist: {}&quot;&lt;/span&gt;, bagEntry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; removed;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;同时ConcurrentBag通过提供的 borrow() 方法来获取一个空闲的数据库连接，并通过requite()方法进行资源回收，borrow() 的主要逻辑是：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;查看线程本地存储 threadList 中是否有空闲连接，如果有，则返回一个空闲的连接；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果线程本地存储中无空闲连接，则从共享队列 sharedList 中获取；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果共享队列中也没有空闲的连接，则请求线程需要等待。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;code-snippet__title&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; timeout, &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; TimeUnit timeUnit)&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; InterruptedException&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Object&amp;gt; list = threadList.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = list.size() - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Object entry = list.remove(i);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; T bagEntry = weakThreadLocals ? ((WeakReference&amp;lt;T&amp;gt;) entry).get() : (T) entry;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bagEntry != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bagEntry;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; waiting = waiters.incrementAndGet();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (T bagEntry : sharedList) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (waiting &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               listener.addBagItem(waiting - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bagEntry;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      listener.addBagItem(waiting);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      timeout = timeUnit.toNanos(timeout);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;do&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; start = currentTime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bagEntry == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt; || bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bagEntry;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         timeout -= elapsedNanos(start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      } &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (timeout &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;10_000&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      waiters.decrementAndGet();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;requite&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; T bagEntry)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   bagEntry.setState(STATE_NOT_IN_USE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; waiters.get() &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((i &amp;amp; &lt;span class=&quot;code-snippet__number&quot;&gt;0xff&lt;/span&gt;) == &lt;span class=&quot;code-snippet__number&quot;&gt;0xff&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         parkNanos(MICROSECONDS.toNanos(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         yield();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Object&amp;gt; threadLocalList = threadList.get();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (threadLocalList.size() &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      threadLocalList.add(weakThreadLocals ? &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WeakReference&amp;lt;&amp;gt;(bagEntry) : bagEntry);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;borrow() 方法可以说是整个 HikariCP 中最核心的方法，它是我们从连接池中获取连接的时候最终会调用到的方法。需要注意的是 borrow() 方法只提供对象引用，不移除对象，因此使用时必须通过 requite() 方法进行放回，否则容易导致内存泄露。requite() 方法首先将数据库连接状态改为未使用，之后查看是否存在等待线程，如果有则分配给等待线程；否则将该数据库连接保存到线程本地存储里。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;ConcurrentBag 实现采用了queue-stealing的机制获取元素：首先尝试从ThreadLocal中获取属于当前线程的元素来避免锁竞争，如果没有可用元素则再次从共享的CopyOnWriteArrayList中获取。此外，ThreadLocal和CopyOnWriteArrayList在ConcurrentBag中都是成员变量，线程间不共享，避免了伪共享(false sharing)的发生。同时因为线程本地存储中的连接是可以被其他线程窃取的，在共享队列中获取空闲连接，所以需要用 CAS 方法防止重复分配。 &lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;五、总结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;本文首先对为什么使用数据库连接池，以及常见的数据库连接池的功能及性能进行了简单介绍，通过分析HiKariCP官网介绍及其源码，可以发现HiKariCP主要通过对字节码进行精简、优化代理和拦截器、自定义数组类型 FastList 及自定义并发集合类型 ConcurrentBag 等内容进行优化，文中重点讲解了FastList 与ConcurrentBag 的优化原理（FastList 适用于逆序删除场景；而 ConcurrentBag 本质上是通过 ThreadLocal 将连接池中的连接按照线程做一次预分配，避免直接竞争共享资源，减少并发CAS带来的CPU CACHE的频繁失效，从而提高性能，非常适合池化资源的分配），达到显著提升数据库连接池性能的效果。需要注意的是threadLocal可能带来连接池关闭时引用还存在的情况，有可能导致内存泄露，因此一定要使用requite()方法来进行资源回收处理。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;Hikari 作为 SpringBoot2.0默认的连接池，目前在行业内使用范围非常广，对于大部分业务来说，都可以实现快速接入使用，做到高效连接。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;参考资料&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/brettwooldridge/HikariCP&quot; textvalue=&quot;https://github.com/brettwooldridge/HikariCP&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/brettwooldridge/HikariCP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/alibaba/druid&quot; textvalue=&quot;https://github.com/alibaba/druid&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;https://github.com/alibaba/druid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;END&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span title=&quot;&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:0.title1&quot;&gt;&lt;p&gt;猜你喜欢&lt;/p&gt;&lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.1730382&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6LNIuw2A2PWYI6qBCMcckeg5q5TMgOVXd7VSHDnu4c0NibJPVmt0weAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6XA4hCNqNnSHY7AL55UOPSZlfiaibRLibicZveicGbWVJbafSctAOrLONgdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;vivo互联网技术&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;vivo移动互联网是基于vivo 智能手机所建立的完整移动互联网生态圈，围绕vivo大数据运营，打造包括应用、游戏、资讯、品牌、电商、内容、金融、搜索的全方位服务生态，满足海量用户的多样化需求。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;点一下，代码无 Bug&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8808777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4g5IMGibSxt7WQcGb59I9KnwAHkqFic5l6ORtXicicibLmZ95VmPiaBLkwg0tmbmVmFHMuOZYmHbYicdqxs1Q8LDA7nmw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7478a1a9c7a98c7565064dfc2a6158ff</guid>
<title>在冷风中我凌乱了半小时，只因健康码刷不出来</title>
<link>https://toutiao.io/k/7mpibr5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;聊聊小背景&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前几天的早晨我早写字楼门口干等了半小时，背后的原因竟然是健康码的二维码刷不出来，保安小哥还一直跟我讲，支付宝出不来你用微信啊，用微信啊。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们用的相同的接口，我用微信有卵用啊，冷风中我甩了甩仅有的几根秀发，扬长而去。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为程序员的我就开始了内心的吐槽大会：这咋做的啊，不行呀，这就打不开了，肯定没做优化，肯定没用缓存，肯定没做压力测试。。。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面作为技术的视角来分析下这个场景的实现，以及可以怎么去优化。这只是我 YY 哈，真实场景别人是怎么实现的我也不清楚哈。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;需求剖析&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个人都有一个对应的健康码，健康码分为几种颜色，也就对应了几个状态。本质上就是通过健康码的颜色能否区分这个用户是否去过高风险地址。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先第一个问题就是需要根据多维度的数据去计算出这个码的颜色，比如根据用户的行动轨迹去分析。至于实际上有哪些维度我也不知道，大概猜测行动轨迹肯定是其中一点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大概的存储也很简单，就是 userId code 等字段，这个场景如果需要历史数据可以单独归档即可，只留最近一天的数据提供查询即可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;实现剖析&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最简单的方案就是每次查询实时去分析，这样结果的真实性更高，不足点在于体验不是很好，如果逻辑多的话肯定是无法在 1s 内给用户响应的，所以在上面分析的时候我们设计了一张表进行存储，肯定是提前计算好的，比如一天一次，半天一次之类的形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那我们基于已经有表的形式去做分析，这个业务场景就是很典型的读多写（凌晨写）少的场景。如果不做任何改动，每次请求直接查询表直接响应即可。在高并发场景下只能依赖数据库的并发能力来扛住这些请求，很容易出现系统挂掉，响应慢的情况，也就是为什么我在门口等了半小时的原因。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;增加缓存&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最好的方式就是加缓存了，直接将码的内容缓存起来，前端根据内容生成健康码即可。首先这种场景不能再查询之后加缓存，因为大部分人的监控码可能也就早晨进公司的时候用一次，所以不适合查询后再写缓存的操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要在凌晨计算每个人健康码的时候，同时将数据写一份到缓存中，当然这个可以根据平时的访问的数据进行分析，哪部分人每天都会用到，只预先缓存这一部分人的即可。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7251461988304093&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39w9Wqx5hQ4gThJUkaXjy9gJWeXMKLlzuicbKgTgaLVwwNSYzAUhasOe8FWGKr1NN1BJY9Cc7C3bKtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;684&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存后，基本上 90%的请求都能命中缓存了，因为每天上班的这部分人基本上不会有太大的变化。剩下的请求用数据库去扛，如果还是扛不住可以加大缓存存储量，用空间换时间。或者数据库多搞几个从节点即可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;内外部隔离&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在架构设计中，隔离也是非常重要的一环。隔离的作用就是为了在出问题的时候将故障范围降低到最小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这健康码的这个场景中，首先健康码自己有一个专属的 APP，在支付宝刷不出来的时候我特意用它自己的 APP 去试了一下，同样也是打不开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说查询健康码是一个独立的服务，这个服务可能会被内部的产品，比如 APP 调用，也有可能会通过 Open API 暴露给外部渠道调用，比如支付宝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这个健康码需要做什么隔离？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以独立出一个或多个从节点给对应的服务进行隔离，比如内部服务用库 1，外部服务用库 2，相互不影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;库隔离了不能解决根据问题，服务还得隔离。区分内部服务，外部服务。Open API 只连接外部服务，内部的网关只连接内部服务。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39w9Wqx5hQ4gThJUkaXjy9gJus1OdEcuuQxF65b4avQXQEmMombpD3F9XpxaUfKutrcXdbdA2AGX3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对不同的调用方做不同的限制，内部服务允许 80%的量都可以满足。外部服务 20%的量可以满足。这样在压力大的情况下，自己内部的产品是影响最小的。也就是你在支付宝可能打不开健康码，在我自己的 APP 可以打开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这种还是得根据实际场景去分析，像健康码这种场景，也许外部的访问量远远超过了内部的量，因为大部分人可能都是用支付宝，微信啊去打开。所以可以根据实际场景去限制流量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;em&gt;关于作者&lt;/em&gt;&lt;/strong&gt;：尹吉欢，简单的技术爱好者，《Spring Cloud 微服务-全栈技术与案例解析》, 《Spring Cloud 微服务 入门 实战与进阶》作者, 公众号 &lt;strong&gt;&lt;em&gt;猿天地&lt;/em&gt;&lt;/strong&gt; 发起人。&lt;/p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;后台回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;学习资料&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;领取学习视频&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-mpa-template-id=&quot;112&quot; data-mpa-category=&quot;quote&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.511002444987775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39zWmaics1nAAwT4NCD77uDcf6vcXE1DAHybibTY0V3XDmf4YX1q9qYibIwz9xmRVTkEvTjP87gaKEZrQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;我不差钱啊&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>