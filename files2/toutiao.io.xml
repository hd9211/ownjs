<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>15db75dd326e6ad839ddb2b0ed915438</guid>
<title>我是怎么写 Git Commit message 的？</title>
<link>https://toutiao.io/k/ku5u7q8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文章目录：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;作用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用的什么规范？&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;type&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;scope&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;subject&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;body&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;footer&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;参考文章&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;用的什么辅助工具？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;作用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编写格式化的 &lt;code&gt;commit message&lt;/code&gt; 能够大大提高代码的维护效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可以提供更多的历史信息，方便快速浏览；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以过滤某些 &lt;code&gt;commit&lt;/code&gt;（比如文档改动），便于快速查找信息；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以直接从 &lt;code&gt;commit&lt;/code&gt; 生成 &lt;code&gt;Change log&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;用的什么规范？&lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;&lt;span&gt;type&lt;/span&gt;&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&lt;br/&gt;// 空一行&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;// 空一行&lt;br/&gt;&amp;lt;footer&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，Header 是必需的，Body 和 Footer 可以省略。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;type&lt;/code&gt; 用于说明 commit 的类别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;feature&lt;/code&gt; A new feature&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;fix&lt;/code&gt; A bug fix&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;docs&lt;/code&gt; Documentation only changes&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;style&lt;/code&gt; Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;refactor&lt;/code&gt; A code change that neither fixes a bug nor adds a feature&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;perf&lt;/code&gt; A code change that improves performance&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;test&lt;/code&gt; Adding missing tests or correcting existing tests&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;build&lt;/code&gt; Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ci&lt;/code&gt; Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;chore&lt;/code&gt; Other changes that don&#x27;t modify src or test files&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;revert&lt;/code&gt; Reverts a previous commit&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;scope&lt;/code&gt; 用于说明 commit 影响的范围，比如数据层、控制层、视图层、具体模块等等，视项目不同而不同。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;subject&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;subject&lt;/code&gt; 是 commit 目的的简短描述，不超过50个字符。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;body&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Body&lt;/code&gt; 部分是对本次 commit 的详细描述，可以分成多行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;BREAKING CHANGE&lt;/code&gt;，用来描述当前 commit 与上一个版本不兼容的地方。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Issue&lt;/code&gt;，用来描述当前 commit 针对的某个issue。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;参考文章&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Commit message 和 Change log 编写指南&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;用的什么辅助工具？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;太教条了，太累... 给大家分享一个我使用的工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;JetBrains IDE&lt;/code&gt; 插件，在 &lt;code&gt;GoLand&lt;/code&gt;、&lt;code&gt;PhpStorm&lt;/code&gt; 中 都可以在插件市场搜索 &lt;code&gt;Git Commit Message Helper&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件地址：&lt;span&gt;Git Commit Message Helper&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装后效果，在 git commit 时：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;269&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.48264984227129337&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTeZ7l6VWd4dDJPaS99ys2VB5jOhIcnOdHnkBaWhKhmPzpbob6t27ibpkBKLBAPKkWDpahQg83vcAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;180&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.3223684210526316&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTeZ7l6VWd4dDJPaS99ys2VoLfl1ibiaf9x9yiauDjsice0ic1JxTfX7Nm04fdLkpUVnaiblkYvwWwWSZqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们看一下效果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;180&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.32346491228070173&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTeZ7l6VWd4dDJPaS99ys2VBial7jEQn0oubDEe5Gqia4Z1kD7vlW781Eu86UU3sdicJn2icTxulygIRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;266&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.47634069400630913&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTeZ7l6VWd4dDJPaS99ys2VDprFKUkP5NkFDzIvQyOVvgMyIqLIDk4wDXWcpkQM7dF05DgonxibzUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，点击 Commit 或 Commit and Push... 即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;赶快去体验吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Commit message 和 Change log 编写指南: &lt;span&gt;http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Git Commit Message Helper: &lt;span&gt;https://plugins.jetbrains.com/plugin/13477-git-commit-message-helper&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NDM4MDIwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/go9jpG3BuhQHrM0sshKxdaibyDNjXooZvnwwy0yRjdhlXrtVUkJSvQib4Ppwib1v5HucaRc8WPtgvhPBicMeiadAv9Q/0?wx_fmt=png&quot; data-nickname=&quot;新亮笔记&quot; data-alias=&quot;XinLiangTalk&quot; data-signature=&quot;程序猿的打怪升级之路。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;307&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/go9jpG3BuhSP7wibS4BHtlu4hduFYq8VbSAgRic8ib6hdd6qTRGxYSic7UFF9yPyGd4pGUw1XicibFRlGHBe9RJ09Smw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3001218b216b46a08e9cdab9c5a13e88</guid>
<title>一些贼好用的开发原则</title>
<link>https://toutiao.io/k/qphrwr6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;这里是Z哥的个人公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每周五11：45 按时送达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当然了，也会时不时加个餐～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的第「197」篇原创敬上&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大家好，我是Z哥。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;不知道在看这篇文章的程序员伙计们平时是如何写代码的？有参照什么原则吗？还是说写到哪算哪？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你在搜索引擎里搜一下「软件开发原则」，可以搜到N多种原则，每一个原则看上去都很有道理，很对。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图就是我之前整理的一个与设计原则相关的思维导图。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8003003003003003&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1cT2xBHHePKia1bSxwVetpCLxquI1ibyMWTg2Zf7pwLQ5lHIn1jZTwK9jPE1qeLVuUzRByEcqs0B3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是不管你整理的多好，很多人到实际写代码的时候完全想不起这些原则。&lt;/span&gt;&lt;span&gt;不用自我怀疑，大多数人都是如此，你并不是特例。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之所以会有这样的情况，是因为总结后的原则大多都太抽象了，往往只有一句话，甚至只是一个词，自然不会有太多深刻的印象。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们今天不聊这些刻板的名词，来聊聊Z哥在工作中常用到的一些“原则”，以及它们的适用场景，帮助你更好地记住它们。另外，我还给它们做了一下分类，更便于你记忆。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;/01  耦合/&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;避免循环依赖&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个原则不管是在单体应用，还是分布式应用里都是非常重要的一个原则，它可以避免「big ball of mud」项目的产生。而且，如果项目里存在着过多的循环依赖，也更容易一不小心写出循环调用的代码，让整个系统陷入死循环。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;尽量单向依赖&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在满足「01」的前提下，尽量做到单向依赖可以大大降低阅读代码、排查问题时的复杂度。如果实在对上游有依赖的话，尽量通过IOC的思路来处理，用隐性依赖代替显性依赖。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果实在没法通过IOC来解决的话，可以将依赖上游的数据在当前系统冗余一份，然后通过MQ来保持数据同步，在业务处理的时候直接使用本地的这份冗余数据。当然，这个方法的复杂度明显比上面的更高，所以还是优先考虑上面的方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;避免跨层调用&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在满足「1」和「2」的前提下，尽量做到避免跨层调用，可以很起到更好的封装效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个最简单的反例，就拿三层架构来说，如果应用层的代码可以直接访问数据访问层，那么业务逻辑层自然会形同虚设。而且，后续一旦涉及到某数据表增加一个参数，要修改的相关调用代码可多了……这也是为什么很多维护不善的老项目越往后大家就越不敢乱动代码的主要原因之一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  对象设计/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;单一职责原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实我在后面会提到SOLID原则，这里为什么将单一原则单独拿出来说呢，因为我觉得它是SOLID的六大原则里最重要的，虽然它看上去最简单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;37&quot; data-source-title=&quot;Robert C. Martin《敏捷软件开发：原则、模式和实践》&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A37%2C%22text%22%3A%22%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99%E8%A7%84%E5%AE%9A%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%BA%94%E8%AF%A5%E6%9C%89%E4%B8%94%E4%BB%85%E6%9C%89%E4%B8%80%E4%B8%AA%E5%BC%95%E8%B5%B7%E5%AE%83%E5%8F%98%E5%8C%96%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%8C%E5%90%A6%E5%88%99%E7%B1%BB%E5%BA%94%E8%AF%A5%E8%A2%AB%E6%8B%86%E5%88%86%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22Robert%20C.%20Martin%E3%80%8A%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5%E3%80%8B%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;Robert C. Martin《敏捷软件开发：原则、模式和实践》&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;只有深刻理解这个概念，你才能真正发挥面向对象编程语言的最大优势。并且，这个思路也可以运用在模块的划分上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;遵循这一原则最关键的地方在于职责的划分，很多人其实并没有掌握好正确的划分思路。因为这个的确很难，需要你对业务有深入的了解，因为职责存在于业务里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，在电商系统里体现「一个商品在某个平台销售」这个业务，你可以既在「商品」类上设置「销售渠道」属性，也可以在「销售渠道」上设置「在售商品列表」属性，还可以单独设计一个「商品绑定销售渠道」的类。但是我们从单一职责原则来考虑的话，就应该选择最后一个方案。为什么呢？因为在不同的渠道销售商品，其实对商品和销售渠道本身都没有什么影响，商品还是那个商品、渠道还是那个渠道，因此这个业务不是它们的职责。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;减少if else&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这一点可能算不上传统意义上的原则吧。但是我觉得这是很容易体现开发水平高低的一点。所以也列了一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大部分的 if-else 都可以合理运用设计模式来消灭掉。比如， 状态模式、策略模式、命令模式、责任链模式、代理模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果对这些设计模式的形态有些模糊了，那么赶紧去回顾一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;数据冗余&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;冗余数据的确可以带来很多便利，比如减少RPC请求查询其它程序内的数据。但是副作用也是很明显的，付出了需要解决数据一致性问题为代价。因此仅当存在性能要求时，才考虑数据冗余。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在平时的代码设计中，你可以有很多方法来降低不必要的数据冗余，比如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;给每一个API或者Function区分必要参数和可选参数。如此一来，对调用方来说能够减少为了传入可选参数而做的不必要的数据冗余以及RPC请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果是会对外提供访问的API，一定要最小化参数，可以自行获取的数据尽量在内部自行获取，不要求外部传入。目的同1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我觉得能意识到上面的这些设计原则，已经算得上是一个合格的程序员了。如果想要更近一步，还可以在以下这几个方面考虑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/01  对象设计/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;SOLID原则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个原则鼎鼎大名了，应该大家都知道，就不展开说了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Single Responsibility Principle：单一职责原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Open Closed Principle：开闭原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Liskov Substitution Principle：里氏替换原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Law of Demeter：迪米特法则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Interface Segregation Principle：接口隔离原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Dependence Inversion Principle：依赖倒置原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我为什么将它们放到进阶里面呢，因为我觉得这里面除了单一职责，其它几个原则还兼顾着在可扩展性上的考量。所以，除了单一职责以外的原则没做到位，最多牺牲了可扩展性和一定的耦合度。但是单一职责没做好，可会存在非常大的耦合问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  数据准确性/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;可重试&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这点可能在单体应用中感受不明显。但是在分布式系统却重要得多。因为网络是不可靠的，如果设计的代码不可重试，那么会存在大量的数据不一致问题需要手动去处理。可头疼死你。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;幂等&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;重视「幂等」的原因和「可重试」一样，在单体应用中作用不大，最多对瞬时的重复点击有作用。但是在不可靠网络的分布式系统中，某个请求被重复提交的可能性大大增加，如何保证多次请求的结果是一致的就至关重要了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;CAP、BASE&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;前面的「可重试」和「幂等」更多是在代码级别的数据准确性设计。如果在整个大系统层面考虑数据准确性，需要基于经典的CAP定理、BASE理论去设计。什么业务场景需要保证强一致性，什么业务场景可以接受存在延迟的最终一致性，是需要仔细考量的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;多提一句，如果采用最终一致性方案的话，尽可能地增加一个后续的核对机制，以解决某些异步消息在中途丢失、长期异常挂起等等导致的数据不一致问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/03  数据存储/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;strong&gt;&lt;span&gt;数据安全&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，要在代码设计上考虑数据安全，只需要一些非常基础的业务意识就够了。你只要能识别到哪些数据是敏感的，针对这些数据做一些保护机制，防止数据泄漏。比如，加密、脱敏、避免越权、减少非必要传输等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上的这些是我目前暂时想到的在工作中最常用的开发原则。如果后续再想到什么我会补充在评论区，也欢迎你在评论区发表你的经验之谈。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还是总结一下，这篇呢Z哥与你分享了一些我在工作中常用的开发原则。总体来说，他们分为4类。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;耦合：避免循环依赖、尽量单向依赖、避免跨层调用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对象设计：单一职责原则、减少if else、数据冗余、SOLID原则。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据准确性：可重试、幂等、CAP、BASE。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据存储：数据安全。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;希望对你有所帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“大道理都懂，但还是过不好这一生”。这句话也能适用在这里，“开发原则都懂，但发现眼前的项目还是如此不堪”。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之所以如此，我觉得是因为很多时候，我们假装没看到项目里的代码坏味道，认为与自己没啥关系，孰不知，它很有可能在不久的将来给你一击“反噬”，让你不得不硬着头皮面对它。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，如果你觉得这篇文章还不错，就「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;点赞&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」或者「&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;」一下吧，鼓励我的创作 ：）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以分享我的公众号名片给有需要的朋友们。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU2NzEwMDc4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1ENbrFbGjEucl1Az92hEuwmUSdaNXxibiaWuO9sLTPHokw00p8ZxAYdIJJJ7FXj77Ts0YoV5KwEKCA/0?wx_fmt=png&quot; data-nickname=&quot;跨界架构师&quot; data-alias=&quot;Zachary_ZF&quot; data-signature=&quot;坚持原创。专注大型互联网技术，涉猎产品、运营。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果你有关于软件架构、分布式系统、产品、运营的困惑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以试试点击「&lt;strong&gt;阅读原文&lt;/strong&gt;」&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e66656504c25d856d187da28a3a23aa1</guid>
<title>我招了个 “水货” 程序员</title>
<link>https://toutiao.io/k/n5mpiqb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;em&gt;昨天写文章到凌晨3点，写完迷迷糊糊的忘了标原创了。所以标了原创再发一次，已经看过的忽略即可。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章对很多没有高并发经验的程序员来说，会非常有帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多程序员可能都遇到过类似的困惑：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我没有高并发项目经验，但是面试的时候经常被问到高并发、性能调优方面的问题，该怎么办？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题怎么解决？和大家说说我招人的一个经历。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员小张参加工作已 5 年，是一位高级工程师，是我亲自招进公司，表现很出色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前一阵子，我把小张叫进会议室，想让他单独带个团队。其中，我谈到了面试时，他简历注水的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事情是这样的，大概两年前，公司有个核心项目缺人，需要一位高级程序员。这个岗位非常重要，所以对面试人要求不低：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有高性能、高并发开发经验&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有高可用系统经验&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参与中间件研发、优化和系统存储优化&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;招聘持续了两个月，面试了许多工作五年以上甚至十年的人选，却依然没有招到一个特别合适的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就在我们快不抱希望的时候，同事让我去面试一个有趣的人，他强烈推荐，并顺手把简历递给了我，这人正是小张。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接过简历后，我先翻了翻。这一翻，让我皱起了眉头。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简历里，小张的工作经验只有区区三年，这三年全都在一家公司，公司本身还没有什么名气。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更重要的是，我怀疑他的简历做了手脚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他说自己三年里，负责过两个项目，一个是电商项目，一个是关于这个电商项目的对外开放平台。对这两个项目，他着重强调了项目的高并发，并说自己解决了很多技术难题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是这里出现了问题。我们当时也有电商项目，市面上稍微有点名气的电商平台我都非常清楚，却没听说过他简历里的产品。所以我怀疑，这份简历是包装过度了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，对于这么明显的问题，我不信前面的面试官们都没看出来。那么，为什么他们还推荐我去见见呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说心里话，对简历包装过度我是比较恼火的，但是这只是我的怀疑。同时，前面的面试官竟然是带着一种从未有过的满意语气，叫我一定面面他，对同事们的认可我又比较好奇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样，我带着恼火又好奇的矛盾心思见到了小张。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;见到小张的时候，我由于有点恼火，脸色显得非常严肃。他可能看到我如此严肃，不禁局促了起来。但是，从他的眼神中，我又看到了很强的自信。我心里想，确实挺有趣的人。我决定要好好的面试下这个人，看看他到底有什么本事，能让我的同事如此满意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问了下他大概背景后，开始了进入了正题。当进入了正题之后，小张的回答态度就让我大加赞赏。态度自信，不卑不亢，逻辑表达也十分清晰明白。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，我心里决定，如果小张后续的回答，能证明他的实力达到简历描述的八成水平，我会倾向于把 offer 给他。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我先问了问他对高并发的理解，比如&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;高并发需要参考哪些指标？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他告诉我，高并发由于产品类型不同，所以指标都不一样。以他负责的电商系统来说，根据模块的不同，关注的指标不同。商品浏览看得是 QPS，订单模块则是看得 TPS。同时，他们还需要关注活跃的用户量等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这回答真不错。面试以来，哪怕是工作多年的人，绝大多数的答案就是 QPS，无非再多一个 TPS。能把产品类型的不同和不同的高并发指标之间关联起来，这说明小张是仔细对这个问题思考过的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我愈发满意了。在后面，我又追问了集群部署、多级缓存、复杂查询优化等有关性能优化的问题，还附加了系统高可用的各种策略，和如何拆分去保证灵活扩展等实际中我们正在采用的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等面试完毕后，时间已经过了一个多小时。小张当时并没有百分百答好我问的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从实际回答来看，关于性能优化的细节，比如，系统瓶颈的检测和优化，程序逻辑的优化，JVM 优化甚至数据库的优化都答得异乎寻常的出色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，对于高可用的大概策略，比如降级处理，限流处理等，他只知道大的方向，很多答案一听就知道是从书本上或者互联网上看来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而对于系统的扩展性相关问题，他甚至答的非常差，很多都回答不上来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过瑕不掩瑜，小张依然拿到了 offer，他期望的薪资我也没有打任何折扣，这足以给他一份大大的惊喜了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在后来的两年里，小张的出色表现，证明我没有看错他。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他为了公司的核心项目做出了巨大贡献，而他的技术水平，也有了肉眼可见的巨大提升。他成为了一名高并发经验丰富的高级程序员。所以，现在打算让他带团队了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“那么，就剩一个问题了。你面试之前到底是如何做到熟悉高并发的性能优化的？” 我好奇的问出了我压在心底的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张不太好意思的挠了挠头，他详细给我讲述了他是如何搞定高并发经验的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我听完后，真的是对他这些准备赞不绝口。我认为该分享出来，让更多的人看到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;划重点！如果你也渴望有高并发经验，那么下面的内容你要格外关注了。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张确实是做了电商平台开发的。但是，这个电商平台没多少访问量，QPS 可能一只手都能数的过来。说句难听话，也就是挂在网上而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他刚毕业入职开始，就参与维护了这套电商平台。就这样持续了一年后，他发现自己已经无法再有任何提高了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他想跳槽，但是发现很多高级岗位都是要求高并发经验的，他对此很着急。如果他继续在以前的公司发展，就势必接触不了什么高并发。但是跳槽的话，他又必须有高并发经验才能找到一个不错的岗位去继续提升自己。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这貌似成了一个死结。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在百般无奈之下，他决定自己模拟高并发去获得经验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在总结下来，其实他的练习可以粗略分为三个阶段:&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;第一阶段&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个阶段，小张完成了在高并发条件下，对&lt;strong&gt;单机性能优化&lt;/strong&gt;的学习。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张用 Docker 容器去运行他维护的电商项目。然后用 jmeter、wrk 等工具去压测。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在压测期间，他敏锐地发现了由于系统每个模块不同，所以性能表现就不一样，这种现象引发了他的思考。他经过网络搜索和查询资料，明白了不同模块、不同产品对并发指标的要求是不一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于这种情况，他又根据产品的业务逻辑编写了复杂的压测脚本，能自动实现不同模块的压测任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就是在这种不断地压测探测下，他明白了如何探测问题，如何通过优化代码、JVM 去解决问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，解决误用 HashMap 导致死循环的问题。又比如，误用不带缓存的文件 IO 流，去读取文件的问题等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在程序和 JVM 优化完毕后，他又发现数据库也存在问题。于是，他又学会了如何优化数据库 SQL，如何对数据库分表等问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也是在这个阶段，他认识到了缓存的必要性以及同步缓存数据状态的重要性等重要知识点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张在搞了单机优化后，他觉得也没有办法再通过单机的压测学到什么新的东西了。于是，他转向了第二阶段。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;第二阶段&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张从阿里云买了两台机器，他开始尝试&lt;strong&gt;使用负载均衡去分担高并发的压力&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的，也是借助压测工具去模拟了高并发。在压测期间，负载均衡和系统屡屡出现和单机完全不一样的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，负载均衡本身的性能问题。比如，在一些时候，负载均衡后面的机器负载是不平衡的，需要对负载算法进行调整。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个阶段，小张理解了负载均衡中大部分的细节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，高并发中，很多系统的构成会很复杂，以至于需要分布式架构系统的程度。他们需要各种中间件做通信，做存储。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，小张根据招聘的一些需求，他做了第三阶段的练习。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;第三阶段&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能&lt;strong&gt;熟悉市面上各中间件的使用&lt;/strong&gt;，小张把他那套电商平台改了又改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，一些本地调用的方法，被他替换成了 Dubbo 远程调用。比如，一些模块间调用，被他替换成了 MQ 中间件传消息。再比如，一些放在关系数据库的被频繁访问的数据，被他改存在了 MongoDB 中……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，压测依然继续。就这样，小张又实践了很多中间件和分布式框架的使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在模拟高并发练习的同时，小张不忘去读各种高并发高性能的书籍。比如，《大型网站服务器容量规划》、《互联网创业核心技术：构建可伸缩的web应用》等书籍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在来到我们公司面试之前，小张如此练习了两年左右。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然小张面试的时候表现也存在很多不足，但是我当时看中他的一些优点是:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1. 小张满足具有高并发经验的要求&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么我们需要找有高并发经验的人？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说白了，我们想找的程序员其实是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不会乱写性能很差的代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能敏锐感知到影响系统的问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;能独立的处理由于高并发引发的问题&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张通过他的练习是掌握了这些技能的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2. 小张满足熟悉高可用的要求&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们找熟悉高可用的人，其实并不要求这个人一定能给出什么独特的高可用方案。我们要求的是，他能知道高可用的知识后，去意识到高可用的重要性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如限流功能出现问题，他要能马上认识到这是个很重要的问题，从而把解决的优先级提到很高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张通过学习，明白了高可用的重要性，也知道了高可用的大方向，这就够了，剩下的细节，我们有信心带小张在实际工作中学出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3. 小张能参与我们的中间件研发和存储优化&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张主动改造过他们的电商系统，而且使用了很多的中间件，并对这些中间件都进行过优化。对这些中间件的特性比较熟悉，并且在实践中，他也了解了很多原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，小张的主观能动性尤其打动我们。他对技术的主动钻研、主动学习，表明了他是一个喜欢走出舒适区，愿意挑战自己的人。而这样的人，有哪个团队不欢迎呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，其实没有高并发经验并不可怕。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在工作中你接触不到高并发的项目，那么也没必要太纠结。公司做什么项目你改变不了，你能改变的只有你自己。关键还是自己要去主动学习，主动练习，主动提升。只有这样的人，机会才会去垂青。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，毕竟在程序员这个圈子，90% 以上的人可能都没有真正的高并发经验，所以在此也希望各位面试官，在招人的时候，如果遇到好苗子可以适当宽容一些，给新人们一点机会，说不定能找到一匹千里马。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;码字不易，看完之后如果觉得有帮助，希望你能帮忙转发、随手点个在看，&lt;strong&gt;你的支持对我很重要&lt;/strong&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是四猿外。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一家上市公司的技术总监，管理的技术团队一百余人。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我从一名非计算机专业的毕业生，转行到程序员，一路打拼，一路成长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会通过公众号，&lt;br/&gt;把自己的成长故事写成文章，&lt;br/&gt;把枯燥的技术文章写成故事。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0456c97446d01a69446a1f7ced73a473</guid>
<title>三平面分离架构</title>
<link>https://toutiao.io/k/fjeahz4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;编程一生&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;cloudrise1986&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;致力于写大家都能看懂的、有深度的技术文章&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b36a5ed6db981adde69838bfb21b4e1a</guid>
<title>创业者需要知道的 13 种思维模型</title>
<link>https://toutiao.io/k/mf76vyg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img data-ratio=&quot;0.6678321678321678&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKwyYyyqGsciawhMicAr8QM2YetEJSlTylueuxTiaibFnZB7bIpVh2DZZ6kQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1430&quot;/&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;优秀的创业者擅长利用经过验证的模型指导自己的行动、检验自己的想法，从而提高创业成功的概率。这篇文章介绍了 13 个对创业者很有帮助的思维模型，特别是文中列出的参考链接，提供了非常有价值的内容，每一篇都值得仔细阅读。原文链接：[13 Mental Models Every Founder Should Know](https://links.jianshu.com/go?to=https%3A%2F%2Fmedium.com%2Fthe-mission%2F13-mental-models-every-founder-should-know-c4d44afdcdd)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;思维模型之于大脑，就像应用之于智能手机。我们平时会利用各种应用程序处理生活、工作中的事情，同样的，也有大量的思维模型可以用来帮助我们做出决定、解决问题，使我们有机会用一种全新的方式看待世界……可以说是这些思维模型让我们的大脑更有用。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;查理·芒格(Charlie Munger)、埃隆·马斯克(Elon Musk)、以及其他很多人都曾经说过：你的头脑中必须有一系列的模型，才能理解周围的世界。试图记住所有的事实并不是一个制胜的策略。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;“你可能已经注意到了，有些学生只是试图记住并在生活中照搬书本上的东西，他们在学校里和在生活中都失败了。你需要把经验和脑海里的模型结合在一起才有可能取得成就。”-- 查理·芒格&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;在创业圈里，永远不缺新东西。每天有无数的信息通过 ProductHunt，Medium, twitter, quibb, TechCrunch, HackerNews, Quora，TheMacro 和无数的播客传播出来。在尝试做点新东西时，很多时候就会忘记那些真正基础的、重要的东西。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;多亏了巴菲特和芒格，现在有大量的思维模型被整理了出来，可以用来识别和保护我们的投资和生意。怎样构建我们企业的护城河？怎样提升我们企业的防御能力？创业需要什么样的思维模式？&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;以下是作为一个创业者所需要的一些最重要的思维模型的总结。上面那些信息源可以帮助你了解哪些东西值得思考，下面的思维模型将帮助你学会如何思考。&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading0&quot; data-type=&quot;heading&quot; top=&quot;1546.984375&quot;&gt;RMF（遗憾最小化框架，Regret Minimization Framework）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：杰夫·贝索斯（Jeff Bezos，亚马逊创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;“遗憾最小化框架”通过设想未来的自己，回顾当前的决定，帮助你做出艰难的决定。RMF 将帮助你下决心放弃当前的工作，并尝试去创建那些一直在你心里的东西。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;“我知道，当我 80 岁的时候，我不会后悔尝试做这件事情，我不会后悔尝试参与这个叫做互联网的东西，我认为它会成为一件大事。我知道，即使失败了，我也不会后悔。但我也知道，如果我从未尝试过，一定会后悔。”-- 杰夫·贝索斯&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3787313432835821&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKXTF9ER8GPQicNSjjFmW0Ik0KsYWSXchbHUBmyxt9Y1rmMiaIG8Qxql9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;536&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading1&quot; data-type=&quot;heading&quot; top=&quot;2256.984375&quot;&gt;创意迷宫（The Idea Maze）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：巴拉吉·斯里尼瓦桑（Balaji S. Srinivasan，Coinbase CTO）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;创意迷宫是一个框架，用来思考和规划你的初创公司有可能采取的多条路径。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;&quot;一个好的创始人能够预见到哪些会带来财富，哪些必然会失败。糟糕的创始人只会从迷宫（比方说电源/音乐/P2P 文件分享或者照片分享行业）入口直冲进去，却对行业的历史、公司的兴衰、曾经的失败、现有的技术等没有任何的了解。要知道任何条件和假设都是会变的。&quot;-- Balaji S. Srinivasan&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6542857142857142&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKaxichUt8ZLd4qiceabA18ib2RcAR2BrTb4lDwDiaib7o43qQuibEa0DfMATA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[创意迷宫](http://cdixon.org/2013/08/04/the-idea-maze/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[市场调研，线框图和设计](https://spark-public.s3.amazonaws.com/startup/lecture_slides/lecture5-market-wireframing-design.pdf)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[VR创意迷宫](http://ben-evans.com/benedictevans/2016/4/13/the-vr-idea-maze)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[人工智能初创公司的创意迷宫](http://cdixon.org/2015/02/01/the-ai-startup-idea-maze/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading2&quot; data-type=&quot;heading&quot; top=&quot;3158.171875&quot;&gt;厌恶性盲区（Schlep Blindness）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：保罗·格雷厄姆（Paul Graham，Y Combinator 创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;厌恶性盲区阻止创业者看到可能的商业机会。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;&quot;一家公司是由它所要承担的各种责任和麻烦所定义的。面对那些麻烦事儿就像你面对一个冰冷的泳池一样：直接跳进去吧。-- 保罗·格雷厄姆&quot;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7028571428571428&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKURmayOgFSp8MAxcmcN4pYEEkXxv6N9dg8dJF3Va6ngevtM6j75TNgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading3&quot; data-type=&quot;heading&quot; top=&quot;3999.96875&quot;&gt;JTBD（Jobs to be Done）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：克莱顿·克里斯坦森（Clayton Christensen，哈佛商学院教授，《创新者的窘境》作者）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;JTBD 可以帮助我们理解为什么客户会选择我们产品，了解这一点将帮助我们更准确地开发市场、满足客户需求。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;如果你了解你的工作，那么如何改进产品就变得显而易见了。-- 克莱顿·克里斯坦森&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKhwDVe2qOtdKk6bvfwLJcqDwaklEzcmpQU5ApypvhpMFIyItabm1NjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[理解你的工作（视频）](https://www.youtube.com/watch?v=Kjcx87JmhvM)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[Jobs to be Done](http://www.christenseninstitute.org/key-concepts/jobs-to-be-done/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[将克里斯坦森的JTBD理论付诸实践的六个步骤](http://www.forbes.com/sites/stephenwunker/2012/02/07/six-steps-to-put-christensens-jobs-to-be-done-theory-into-practice/#29a62f895396)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[Intercom谈JTBD（书籍）](https://www.intercom.com/resources/books/intercom-jobs-to-be-done)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading4&quot; data-type=&quot;heading&quot; top=&quot;4668.96875&quot;&gt;MVP（最小可行产品，Minimum Viable Product）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：弗兰克·罗宾逊（Frank Robinson，SyncDev CEO）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;最小可行产品是一个用来测试你的假设是否合理，以及确保你的想法反映了真实需求的一个过程。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span data-type=&quot;strong&quot;&gt;MVP 流程：&lt;/span&gt;&lt;/p&gt;&lt;ol data-type=&quot;numberedlist&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-number=&quot;1&quot; data-type=&quot;paragraph&quot;&gt;我的假设里最大的风险是什么？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-number=&quot;2&quot; data-type=&quot;paragraph&quot;&gt;为了验证这个假设，我至少需要做什么样的实验?&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6314285714285715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyK46LDWoLdaEneyaSD7ictzM3KAxNiajmicGjNpsR0LE4ib3qNJaMWPF5BLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[最小可行产品的价值并不在于产品，而在于过程](http://www.themacro.com/articles/2016/01/minimum-viable-product-process/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[最小可行产品--尽快交付客户价值](https://leanstack.com/minimum-viable-product/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[MVP:最大化风险回报的方法](http://www.syncdev.com/minimum-viable-product/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading5&quot; data-type=&quot;heading&quot; top=&quot;5555.765625&quot;&gt;确认偏误（Confirmation Bias）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：修昔底德（Thucydides，古希腊历史学家）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;确认偏误是一种思维模式，人们倾向于注意或寻找能证实自己信念的东西，而不是与之相矛盾的东西。当你正在创意迷宫中探寻，或者正在构建 MVP 的过程中时，这种思维模式是非常危险的。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;“肯定比否定更能使人感动和兴奋，这是人类的一个奇特而持久的错误。”-- 弗朗西斯·培根&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6657142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKbapjLT4yFiaQJ21zoKlzW4ib89enBVRfjTPHKmwniaaac76ZicQAcorqtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[思维模型:确认偏误](https://www.farnamstreetblog.com/2017/05/confirmation-bias/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[弗朗西斯·培根:关于确认偏误](https://www.farnamstreetblog.com/2010/02/francis-bacon-on-the-confirmation-bias/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[确认偏误:你的大脑太主观了（视频）](https://www.youtube.com/watch?v=tZvDaPBqAyg)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading6&quot; data-type=&quot;heading&quot; top=&quot;6404.15625&quot;&gt;PMF（Product Market Fit）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：Andy Rachleff（Wealthfront 联合创始人/CEO，Benchmark Capital 联合创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;PMF 是指你找到了一个很好的市场，并且你所开发的产品满足了市场的需求。PMF 对于创业公司来说是至关重要的，因为最大的公司杀手就是产品没有市场。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5733333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKMfibCJwczjEUhSmKTMk2G8kS9G6BYaGZYDQoWKqiacPhy1C2fHEGMRCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[唯一重要的事情](http://pmarchive.com/guide_to_startups_part4.html)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[真正的PMF](http://themacro.com/articles/2016/06/the-real-product-market-fit/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[PMF: 含义、指标和实践](https://medium.com/evergreen-business-weekly/product-market-fit-what-it-really-means-how-to-measure-it-and-where-to-find-it-70e746be907b#.5zqew1za5)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[创业公司点石成金：PMF之前投资，PMF之后加注](http://500hats.typepad.com/500blogs/2010/07/moneyball-for-startups.html)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[消费品创业公司什么时候达到PMF?](http://andrewchen.co/when-has-a-consumer-startup-hit-productmarket-fit/)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading7&quot; data-type=&quot;heading&quot; top=&quot;7207.15625&quot;&gt;100 人原则（100 People Love）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：保罗·格雷厄姆（Paul Graham，Y Combinator 创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;让 100 个人爱上你的产品比让 100 万人仅仅喜欢你的产品要好得多。100 个爱你的客户/用户会向全世界推荐你这家小公司，给你反馈和建议，帮助你改善用户体验。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;&quot;让一小部分人真正快乐起来，好过让很多人只是有点儿开心。&quot;-- Paul Buchheit（Gmail 创始人）&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.002857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKRoBibM2Fxgsib3VwtVtSdIQbDMOleGwn1FQAIdkf0O4bBs0BsViaUwtHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;350&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading8&quot; data-type=&quot;heading&quot; top=&quot;7957.15625&quot;&gt;AARRR（海盗指标）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：Dave McClure（500 Startups 创始人，Practical Venture Capital 创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;AARRR(获取 Acquisition，激活 Activation，留存 Retention，推荐 Referral，收益 Revenue )是一个客户生命周期框架。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7701421800947867&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKo4Uf2cmcuWrSHeOaT11Zibz6LmReicCSiau8gVb7e7EaV7mRG4nWFIVIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;422&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[创业公司海盗指标：AARRR](http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[创业公司海盗指标（演示文档）](http://www.slideshare.net/dmc500hats/startup-metrics-for-pirates-long-version)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[AARRR：SaaS的海盗指标](https://www.pierrelechelle.com/aarrr-pirate-metrics)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading9&quot; data-type=&quot;heading&quot; top=&quot;8681.15625&quot;&gt;网络效应（Network Effects）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：罗伯特·梅特卡夫（Robert Metcalfe，以太网发明人，3Com 创始人）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;当一个产品或服务随着越来越多的人使用而变得更有价值时，就会产生网络效应。网络效应可以帮助你建立更好、更快、更有价值的产品和业务。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.28583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKicXwZdPgGjegiaAXob9GVw0BDq9AGtsFJ5SPibo1rf2b5ib5JwlS2iasU5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading10&quot; data-type=&quot;heading&quot; top=&quot;9230.21875&quot;&gt;规模经济（Economies of Scale）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：亚当·斯密（Adam Smith，苏格兰哲学家、经济学家、《国富论》作者）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;规模经济是一种很容易理解的经济模型，即单位产品或服务的成本会随着生产量的增加而降低。Facebook、亚马逊、苹果和谷歌都拥有强大的规模经济。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;&quot;规模经济是一件好事。如果没有规模经济，我们现在还在帐篷里啃着生牛肉。&quot;-- 杰米·戴蒙(Jamie Dimon, 摩根大通 CEO)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8071428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKhZic5tGz6vvKicibeoz6JrNSFomnGD9eqDCpfjyOviciaxkUn79sUTVgdqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span&gt;具有规模经济的产品:单位成本随着生成量的增加而下降。&lt;/span&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading11&quot; data-type=&quot;heading&quot; top=&quot;10197.71875&quot;&gt;颠覆式创新（Disruptive Innovation）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：Clayton Christensen，哈佛商学院教授，《创新者的窘境》作者&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;颠覆式创新指的是，你的产品或服务最初只是市场底部的一个简单解决方案，然后无情地向市场上部扩张，最终取代现有竞争对手，重新定义行业。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;“如果我问人们想要什么，他们会说想要更快的马。”--亨利·福特&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7571428571428571&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKJsjADcwVju9fFl0dia2ueWj1S5nCe7LrxGF65aoibCxhHmHrbOtCp3dA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;h1 data-id=&quot;heading12&quot; data-type=&quot;heading&quot; top=&quot;11073.71875&quot;&gt;CToS（Conjoined Triangles of Success）&lt;/h1&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;提出者：’Action’ Jack Barker（美剧《硅谷》角色）&lt;/em&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;CToS 能很好地帮助你理解创业世界有多荒谬。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;&quot;这两个三角形合起来是什么?一个盒子里。他们做了一个盒子。你可不能胡说八道。&quot;-- Jack Barker&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0W3Iw4X42j92ial6sKZLrmyKgNRib5gTBqFib9pib7Kmsnx8iaw8ul9ib3v6ed0zrb4WWOvK9TJIVVkTA1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[连体三角形和创业成功](https://medium.com/@UditSabharwal93/the-conjoined-triangles-and-startup-success-3bc2dd54ace6#.6mz2tvkem)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;[CToS是真的吗?《硅谷》模仿了一个著名的商业模式](http://www.bustle.com/articles/157415-are-the-conjoined-triangles-of-success-real-silicon-valley-mocks-a-famous-business-model)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-type=&quot;horizontalrule&quot;/&gt;&lt;p data-type=&quot;paragraph&quot;&gt;还有很多本文没有提到的思维模型。比如：创新扩散理论（Diffusion of innovations）、摩尔定律（Moore’s law）、Do Things that Don&#x27;t Scale、Founder Market Fit、长尾理论（Longtail）、价值迁移（Value migration）、反事实思维（Counterfactual thinking）、Voice vs. Exit、等等等等(在这里能找到更多信息：https://www.farnamstreetblog.com/mental-models/)，这些都同样重要，也同样有用。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span data-size=&quot;9&quot; data-type=&quot;size&quot;&gt;封面图片来自：&lt;/span&gt;&lt;span data-size=&quot;9&quot; data-type=&quot;size&quot;&gt;https://stocksnap.io/author/liammckay&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>