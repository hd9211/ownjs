<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ea242feaff4ff5361472afa10d756a6d</guid>
<title>十佳 AI 产品工具，为生活添彩</title>
<link>https://toutiao.io/k/7j8f97c</link>
<content:encoded>&lt;div&gt;&lt;html lang=&quot;zh-CN&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;/&gt;
  

    &lt;title&gt;十佳 AI 产品工具，为生活添彩 | 晚晴幽草轩&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;/&gt;
    
    &lt;meta name=&quot;author&quot; content=&quot;晚晴幽草轩轩主&quot;/&gt;
    
    &lt;meta name=&quot;theme-color&quot; content=&quot;#fffffb&quot;/&gt;
    &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;PKEtLPjO56&quot;/&gt;
    

    &lt;meta name=&quot;keywords&quot; content=&quot;网站, 倾城之链, 图标, ICON, icons, 新世界, 产品, svg, icon font, png, jpg, 图标搜索引擎, Iconfont, 图标下载&quot;/&gt;
    &lt;meta name=&quot;description&quot; content=&quot;随着第四次工业革命的来临，人工智能（AI）已经从科幻逐步走入现实，成为人尽皆知的概念；智能支付、无人超市、AI 美图已然融入日常生活，更有 AI 写作，邮件智能助理等四处开花；除此之外，人工智能在 Web 应用这一块，也不遑多让：如智能网页设计排版，PPT 制作，音乐艺术，图片处理，应用配色，文字翻译等相关应用已在市场掀起波澜，层出不穷的设计让人叹为观止。这里整理了倾城之链所收录的，可为生活添彩的&quot;/&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;
&lt;meta property=&quot;og:title&quot; content=&quot;十佳 AI 产品工具，为生活添彩&quot;/&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;https://www.jeffjade.com/2020/09/23/170-list-of-top-20-ai-product-tools/index.html&quot;/&gt;
&lt;meta property=&quot;og:site_name&quot; content=&quot;晚晴幽草轩&quot;/&gt;
&lt;meta property=&quot;og:description&quot; content=&quot;随着第四次工业革命的来临，人工智能（AI）已经从科幻逐步走入现实，成为人尽皆知的概念；智能支付、无人超市、AI 美图已然融入日常生活，更有 AI 写作，邮件智能助理等四处开花；除此之外，人工智能在 Web 应用这一块，也不遑多让：如智能网页设计排版，PPT 制作，音乐艺术，图片处理，应用配色，文字翻译等相关应用已在市场掀起波澜，层出不穷的设计让人叹为观止。这里整理了倾城之链所收录的，可为生活添彩的&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.beautiful.ai.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/tara.ai.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.deepl.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.synthesia.io.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.unscreen.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.aiva.ai.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.remove.bg.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/slazzer.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/bigjpg.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.pickpik.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/khroma.co.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.myquark.cn.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/magi.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.allhistory.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&quot;/&gt;
&lt;meta property=&quot;og:updated_time&quot; content=&quot;2020-09-23T06:15:42.778Z&quot;/&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;十佳 AI 产品工具，为生活添彩&quot;/&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;随着第四次工业革命的来临，人工智能（AI）已经从科幻逐步走入现实，成为人尽皆知的概念；智能支付、无人超市、AI 美图已然融入日常生活，更有 AI 写作，邮件智能助理等四处开花；除此之外，人工智能在 Web 应用这一块，也不遑多让：如智能网页设计排版，PPT 制作，音乐艺术，图片处理，应用配色，文字翻译等相关应用已在市场掀起波澜，层出不穷的设计让人叹为观止。这里整理了倾城之链所收录的，可为生活添彩的&quot;/&gt;
&lt;meta name=&quot;twitter:image&quot; content=&quot;https://oss.nicelinks.site/www.beautiful.ai.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@nicejadeyang&quot;/&gt;

    
    
    
    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    

    
    
    
    
    
    
&lt;/head&gt;&lt;/html&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3b04cba88096cb04ada6b91d8cd32c15</guid>
<title>如何设计一个牛逼的 API 接口</title>
<link>https://toutiao.io/k/j1aredh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日常开发中，总会接触到各种接口。前后端数据传输接口，第三方业务平台接口。一个平台的前后端数据传输接口一般都会在内网环境下通信，而且会使用安全框架，所以安全性可以得到很好的保护。这篇文章重点讨论一下提供给第三方平台的业务接口应当如何设计？我们应该考虑哪些问题？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6288659793814433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lgiaG5BicLkVecicCqe1jClBRZd1d7AB7ysyBqCXszBDLVTiasaBWZKDKxO3xVdMha3Mm4blXCUS5dU0kVMKdW91Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要从以上三个方面来设计一个安全的API接口。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一 安全性问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安全性问题是一个接口必须要保证的规范。如果接口保证不了安全性，那么你的接口相当于直接暴露在公网环境中任人蹂躏。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1 调用接口的先决条件-token&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取token一般会涉及到几个参数&lt;code&gt;appid&lt;/code&gt;，&lt;code&gt;appkey&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;，&lt;code&gt;sign&lt;/code&gt;。我们通过以上几个参数来获取调用系统的凭证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;appid&lt;/code&gt;和&lt;code&gt;appkey&lt;/code&gt;可以直接通过平台线上申请，也可以线下直接颁发。&lt;code&gt;appid&lt;/code&gt;是全局唯一的，每个&lt;code&gt;appid&lt;/code&gt;将对应一个客户，&lt;code&gt;appkey&lt;/code&gt;需要高度保密。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;是时间戳，使用系统当前的unix时间戳。时间戳的目的就是为了减轻DOS攻击。防止请求被拦截后一直尝试请求接口。服务器端设置时间戳阀值，如果请求时间戳和服务器时间超过阀值，则响应失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;nonce&lt;/code&gt;是随机值。随机值主要是为了增加&lt;code&gt;sign&lt;/code&gt;的多变性，也可以保护接口的幂等性，相邻的两次请求&lt;code&gt;nonce&lt;/code&gt;不允许重复，如果重复则认为是重复提交，响应失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sign&lt;/code&gt;是参数签名，将&lt;code&gt;appkey&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;拼接起来进行md5加密（当然使用其他方式进行不可逆加密也没问题）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;token&lt;/code&gt;，使用参数&lt;code&gt;appid&lt;/code&gt;，&lt;code&gt;timestamp&lt;/code&gt;，&lt;code&gt;nonce&lt;/code&gt;，&lt;code&gt;sign&lt;/code&gt;来获取token，作为系统调用的唯一凭证。&lt;code&gt;token&lt;/code&gt;可以设置一次有效（这样安全性更高），也可以设置时效性，这里推荐设置时效性。如果一次有效的话这个接口的请求频率可能会很高。&lt;code&gt;token&lt;/code&gt;推荐加到请求头上，这样可以跟业务参数完全区分开来。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2 使用POST作为接口请求方式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般调用接口最常用的两种方式就是GET和POST。两者的区别也很明显，GET请求会将参数暴露在浏览器URL中，而且对长度也有限制。为了更高的安全性，所有接口都采用POST方式请求。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3 客户端IP白名单&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ip白名单是指将接口的访问权限对部分ip进行开放。这样就能避免其他ip进行访问攻击，设置ip白名单比较麻烦的一点就是当你的客户端进行迁移后，就需要重新联系服务提供者添加新的ip白名单。设置ip白名单的方式很多，除了传统的防火墙之外，spring cloud alibaba提供的组件sentinel也支持白名单设置。为了降低api的复杂度，推荐使用防火墙规则进行白名单设置。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4 单个接口针对ip限流&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流是为了更好的维护系统稳定性。使用redis进行接口调用次数统计，ip+接口地址作为key，访问次数作为value，每次请求value+1，设置过期时长来限制接口的调用频率。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.5 记录接口请求日志&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用aop全局记录请求日志，快速定位异常请求位置，排查问题原因。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.6 敏感数据脱敏&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接口调用过程中，可能会涉及到订单号等敏感数据，这类数据通常需要脱敏处理，最常用的方式就是加密。加密方式使用安全性比较高的&lt;code&gt;RSA&lt;/code&gt;非对称加密。非对称加密算法有两个密钥，这两个密钥完全不同但又完全匹配。只有使用匹配的一对公钥和私钥，才能完成对明文的加密和解密过程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二 幂等性问题&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等性是指任意多次请求的执行结果和一次请求的执行结果所产生的影响相同。说的直白一点就是查询操作无论查询多少次都不会影响数据本身，因此查询操作本身就是幂等的。但是新增操作，每执行一次数据库就会发生变化，所以它是非幂等的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幂等问题的解决有很多思路，这里讲一种比较严谨的。提供一个生成随机数的接口，随机数全局唯一。调用接口的时候带入随机数。第一次调用，业务处理成功后，将随机数作为key，操作结果作为value，存入redis，同时设置过期时长。第二次调用，查询redis，如果key存在，则证明是重复提交，直接返回错误。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三 数据规范问题&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.1 版本控制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套成熟的API文档，一旦发布是不允许随意修改接口的。这时候如果想新增或者修改接口，就需要加入版本控制，版本号可以是整数类型，也可以是浮点数类型。一般接口地址都会带上版本号，http://ip:port//v1/list。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.2 响应状态码规范&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个牛逼的API，还需要提供简单明了的响应值，根据状态码就可以大概知道问题所在。我们采用http的状态码进行数据封装，例如200表示请求成功，4xx表示客户端错误，5xx表示服务器内部发生错误。状态码设计参考如下：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分类&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1xx&lt;/td&gt;&lt;td&gt;信息，服务器收到请求，需要请求者继续执行操作&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2xx&lt;/td&gt;&lt;td&gt;成功&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3xx&lt;/td&gt;&lt;td&gt;重定向，需要进一步的操作以完成请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4xx&lt;/td&gt;&lt;td&gt;客户端错误，请求包含语法错误或无法完成请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5xx&lt;/td&gt;&lt;td&gt;服务端错误&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;状态码枚举类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; CodeEnum {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 根据业务需求进行添加&lt;/span&gt;&lt;br/&gt;    SUCCESS(&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;&quot;处理成功&quot;&lt;/span&gt;),&lt;br/&gt;    ERROR_PATH(&lt;span&gt;404&lt;/span&gt;,&lt;span&gt;&quot;请求地址错误&quot;&lt;/span&gt;),&lt;br/&gt;    ERROR_SERVER(&lt;span&gt;505&lt;/span&gt;,&lt;span&gt;&quot;服务器内部发生错误&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;    &lt;br/&gt;    CodeEnum(&lt;span&gt;int&lt;/span&gt; code, String message) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessage&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.3 统一响应数据格式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便给客户端响应，响应数据会包含三个属性，状态码（code）,信息描述（message）,响应数据（data）。客户端根据状态码及信息描述可快速知道接口，如果状态码返回成功，再开始处理数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;响应结果定义及常用方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;R&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = &lt;span&gt;793034041048451317L&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Object data = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.code = code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setMessage&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;getData&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; data;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 放入响应枚举&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillCode&lt;/span&gt;&lt;span&gt;(CodeEnum codeEnum)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(codeEnum.getCode());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(codeEnum.getMessage());&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 放入响应码及信息&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillCode&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code, String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(code);&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(message);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 处理成功，放入自定义业务数据集合&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; R &lt;span&gt;fillData&lt;/span&gt;&lt;span&gt;(Object data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setCode(CodeEnum.SUCCESS.getCode());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.setMessage(CodeEnum.SUCCESS.getMessage());&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.data = data;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇文章从安全性、幂等性、数据规范等方面讨论了API设计规范。除此之外，一个好的API还少不了一个优秀的接口文档。接口文档的可读性非常重要，虽然很多程序员都不喜欢写文档，而且不喜欢别人不写文档。为了不增加程序员的压力，推荐使用swagger或其他接口管理工具，通过简单配置，就可以在开发中测试接口的连通性，上线后也可以生成离线文档用于管理API。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9273932874fc786e9ac675d3ab0f6936</guid>
<title>浅谈如何搭建知识体系 | 码农周刊第 319 期</title>
<link>https://toutiao.io/k/dufazik</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;浅谈如何搭建知识体系 | 码农周刊第 319 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第319期（2020-09-23）&lt;/h2&gt;
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3190&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_316.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19803&amp;amp;url=https%3A%2F%2Fwww.sheca.com%2Fassets%2Fwwx%2Fpage1.html%3Fsite%3Dkaifazhe02&quot; target=&quot;_blank&quot;&gt;SHECA 提供 SSL 证书一站式服务，为你的网络安全保驾护航，上海 CA 权威认证&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;HDFS + Clickhouse + Spark&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;致力于提供一套简单方便、专业可靠、无限可能的 H5 落地页最佳实践。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;9NFL 是京东自研的联邦学习平台。整个平台的内核基于 TensorFlow，并根据业务进行了性能优化，调度则基于 k8s。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;ChatUI 是由达摩院阿里小蜜孵化的对话式界面组件，目前支持阿里经济体 80 多个事业部，数千个 Chatbot，承载着达摩院前沿技术，专注于智能对话领域的设计和技术研发体系，应用至消费者可体验的对话式界面。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;模型性能杀器解读&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;有用&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;第二弹&lt;/p&gt;
        
        &lt;p&gt;customize personal network&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/aweiu/scroll-switch&quot; target=&quot;_blank&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;两种不错的思路&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://golang.design/history/&quot; target=&quot;_blank&quot;&gt;文档地址&lt;/a&gt;&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一枚有趣的程序员&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 436138 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;致力于为企业提供性能优化领域的全方位解决方案&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 423497 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;分享一些信息安全相关的文章&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 393298 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;编程、成长、正能量！&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 381811 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;分享Go语言相关内容&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 133906 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=319&amp;amp;aid=19892&amp;amp;url=http%3A%2F%2Fstore.dangdang.com%2Fgys_04001_3tk3&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_319.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;擦亮慧眼&lt;/p&gt;
        
        &lt;p&gt;个人经历&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1f1efe9eef72a40ed6508fec04464031</guid>
<title>轻松玩转函数式编程</title>
<link>https://toutiao.io/k/zmm264v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近和一些同学讨论了函数式编程，很多同学总觉得听起来很高大上，但用起来却无从下手。于是我抽时间捋了捋，将平时工作中用到的函数式编程案例和思想整理了出来，相信阅读本文后，大家都能快速上手函数式编程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数式编程目前使用范围非常广，常用的框架，语言几乎都能看到它的身影。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;前端框架：react、vue 的 hooks 用法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打包工具：webpack 的 webpack-chain 用法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;工具库：underscore、lodash、ramda。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部署方式：serverless。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后端：java、c# 中的 lamda 表达式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文将通过以下 3 个部分来深入函数式编程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;编程范式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;编程范式&lt;/strong&gt; 指的是一种编程风格，它描述了程序员对程序执行的看法。在编程的世界中，同一个问题，可以站在多个角度去分析解决，这些不同的解决方案就对应了不同的编程风格。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的编程范式有：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;命令式编程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;命令式编程&lt;/strong&gt; 是使用最广的一种编程风格，它是站在计算机的角度去思考问题，主要思想是 &lt;strong&gt;关注计算机执行的步骤，即一步一步告诉计算机先做什么再做什么&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于存在很多需要控制的步骤，所以命令式编程普遍存在以下特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;控制语句&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;循环语句：while、for&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;条件分支语句：if else、switch&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无条件分支语句：return、break、continue&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;变量&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据这些特点，我们来分析一个命令式编程案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 需求：筛选出数组中为奇数的子集合&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; array = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;// 步骤1：定义执行结果变量&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; reult = [];&lt;br/&gt;&lt;span&gt;// 步骤2：控制程序循环调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) {&lt;br/&gt;  &lt;span&gt;// 步骤3：判断筛选条件&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (array[i] % &lt;span&gt;2&lt;/span&gt; !== &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;// 步骤4：加入执行结果&lt;/span&gt;&lt;br/&gt;    reult.push(array[i]);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 步骤5：得到最终的结果 result&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上代码通过 5 个步骤，实现了数组的筛选，这并没有什么问题，但细心的同学可能会感到疑惑：这样写的代码量太长了，而且并不语义化，只有阅读完每一行的代码，才知道具体执行的是什么逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，这就是命令式编程的典型特点，除此之外，还有以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;命令式编程的每一个步骤都可以由程序员定义，这样可以更精细化、更严谨地控制代码，从而提高程序的性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;命令式编程的每一个步骤都可以记录中间结果，方便调试代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;命令式编程需要大量的流程控制语句，在处理多线程状态同步问题时，容易造成逻辑混乱，通常需要加锁来解决。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;声明式编程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;声明式编程&lt;/strong&gt; 同样是一种编程风格，它通过定义具体的规则，以便系统底层可以自动实现具体功能。主要思想是 &lt;strong&gt;告诉计算机应该做什么，但不指定具体要怎么做&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于需要定义规则来表达含义，所以声明式编程普遍存在以下特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;代码更加语义化，便于理解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码量更少。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不需要流程控制代码，如：for、while、if 等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们将上文中的数组筛选，用声明式的方式重构一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 筛选出数组中为奇数的子集合&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; array = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; reult = array.filter(&lt;span&gt;(&lt;span&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; item % &lt;span&gt;2&lt;/span&gt; !== &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，声明式编程没有冗余的操作步骤，代码量非常少，并且非常语义化，当我们读到 filter 的时候，自然而然就知道是在做筛选。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再看一个案例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 使用 sql 语句，查询 id 为 25 的学生&lt;/span&gt;&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; students &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;25&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上述代码中，我们只是告诉计算机，我想查找 id 为 25 的同学，计算机就能给我们返回对应的数据了，至于是怎么查找出来的，我们并不需要关心，只要结果是正确的即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了上述例子之外，还有很多声明式编程的案例：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;html 用来声明了网页的内容。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;css 用来声明网页中元素的外观。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;正则表达式，声明匹配的规则。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了以上几个案例，我们来总结一下声明式编程的优缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;声明式编程不需要编写复杂的操作步骤，可以大大减少开发者的工作量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;声明式编程的具体操作都是底层统一管理，可以降低重复工作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;声明式编程底层实现的逻辑并不可控，不适合做更精细化的优化。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;函数式编程&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;函数式编程&lt;/strong&gt; 属于声明式编程中的一种，它的主要思想是 &lt;strong&gt;将计算机运算看作为函数的计算&lt;/strong&gt;，也就是把程序问题抽象成数学问题去解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数式编程中，我们可以充分利用数学公式来解决问题。也就是说，任何问题都可以通过函数（加减乘除）和数学定律（交换律、结合律等），一步一步计算，最终得到答案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数式编程中，所有的变量都是唯一的值，就像是数学中的代数 x、y，它们要么还未解出来，要么已经被解出为固定值，所以对于：&lt;code&gt;x=x+1&lt;/code&gt; 这样的自增是不合法的，因为修改了代数值，不符合数学逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，严格意义上的函数式编程也不包括循环、条件判断等控制语句，如果需要条件判断，可以使用三元运算符代替。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章开头我们提到了 webpack-chain，我们一起来看一下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 使用 webpack-chain 来编写 webpack 配置。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Config = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;webpack-chain&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; config = &lt;span&gt;new&lt;/span&gt; Config();&lt;br/&gt;config.&lt;br/&gt;    .entry(&lt;span&gt;&#x27;index&#x27;&lt;/span&gt;)&lt;br/&gt;        .add(&lt;span&gt;&#x27;src/index.js&#x27;&lt;/span&gt;)&lt;br/&gt;        .end()&lt;br/&gt;    .output&lt;br/&gt;         .path(&lt;span&gt;&#x27;dist&#x27;&lt;/span&gt;)&lt;br/&gt;         filename(&lt;span&gt;&#x27;my-first-webpack.bundle.js&#x27;&lt;/span&gt;);&lt;br/&gt;config.module&lt;br/&gt;    .rule(&lt;span&gt;&#x27;compile&#x27;&lt;/span&gt;)&lt;br/&gt;        .test(&lt;span&gt;/\.js$/&lt;/span&gt;)&lt;br/&gt;        .use(&lt;span&gt;&#x27;babel&#x27;&lt;/span&gt;)&lt;br/&gt;        .loader(&lt;span&gt;&#x27;babel-loader&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = config;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，webpack-chain 可以通过链式的函数 api 来创建和修改 webpack 配置，从而更方便地创建和修改 webpack 配置。试想一下，如果一份 webpack 配置需要用于多个项目，但每个项目又有一些细微的不同配置，这个应该怎么处理呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用 webpack-chain 去修改配置，一个函数 api 就搞定了，而使用命令式的编程，则需要去逐步遍历整个 webpack 配置文件，找出需要修改的点，才能进行修改，这无疑就大大减少了我们的工作量。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;函数式编程的特点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据维基百科权威定义，函数式编程有以下几个特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;函数是一等公民&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;函数可以和变量一样，可以赋值给其他变量，也可以作为参数，传入一个函数，或者作为别的函数返回值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;只用表达式，不用语句：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;表达式是一段单纯的运算过程，总是有返回值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;语句是执行某种操作，没有返回值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;也就是说，函数式编程中的每一步都是单纯的运算，而且都有返回值。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;无副作用&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不会产生除运算以外的其他结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同一个输入永远得到同一个数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;不可变性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;引用透明&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上的特点都是函数式编程的核心，基于这些特点，又衍生出了许多应用场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;纯函数：同样的输入得到同样的输出，无副作用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;函数组合：将多个依次调用的函数，组合成一个大函数，简化操作步骤。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高阶函数：可以加工函数的函数，接收一个或多个函数作为输入、输出一个函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;闭包：函数作用域嵌套，实现的不同作用域变量共享。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;柯里化：将一个多参数函数转化为多个嵌套的单参数函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;偏函数：缓存一部分参数，然后让另一些参数在使用时传入。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;惰性求值：预先定义多个操作，但不立即求值，在需要使用值时才去求值，可以避免不必要的求值，提升性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;递归：控制函数循环调用的一种方式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;尾递归：避免多层级函数嵌套导致的内存溢出的优化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;链式调用：让代码更加优雅。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些应用场景都大量存在于我们的日常工作中，接下来我们通过几个案例来实战一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;函数式编程常见案例&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于函数式编程的应用场景，我们来实现几个具体的案例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、函数组合，组合多个函数步骤。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;compose&lt;/span&gt;(&lt;span&gt;f, g&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; f.call(&lt;span&gt;this&lt;/span&gt;, g.apply(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;arguments&lt;/span&gt;));&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;toLocaleUpperCase&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; str.toLocaleUpperCase();&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;toSigh&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; str + &lt;span&gt;&quot;!&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 将多个函数按照先后执行顺序组合成一个函数，简化多个调用步骤。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; composedFn = compose(toSigh, toLocaleUpperCase);&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;函数组合：&quot;&lt;/span&gt;, composedFn(&lt;span&gt;&quot;msx&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span&gt;// 函数组合：MSX!&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、柯里化，将一个多参数函数转化为多个嵌套的单参数函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 柯里化&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;curry&lt;/span&gt;(&lt;span&gt;targetfn&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; numOfArgs = targetfn.length;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;fn&lt;/span&gt;(&lt;span&gt;...rest&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (rest.length &amp;lt; numOfArgs) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; fn.bind(&lt;span&gt;null&lt;/span&gt;, ...rest);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; targetfn.apply(&lt;span&gt;null&lt;/span&gt;, rest);&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 加法函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;(&lt;span&gt;a, b, c, d&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a + b + c + d;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 将一个多参数函数转化为多个嵌套的单参数函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;柯里化：&quot;&lt;/span&gt;, curry(add)(&lt;span&gt;1&lt;/span&gt;)(&lt;span&gt;2&lt;/span&gt;)(&lt;span&gt;3&lt;/span&gt;)(&lt;span&gt;4&lt;/span&gt;));&lt;br/&gt;&lt;span&gt;// 柯里化：10&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、偏函数，缓存一部分参数，然后让另一些参数在使用时传入。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 偏函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isTypeX&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;obj&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;.prototype.toString.call(obj) === &lt;span&gt;`[object &lt;span&gt;${type}&lt;/span&gt;]`&lt;/span&gt;;&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 缓存一部分参数，然后让另一些参数在使用时传入。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; isObject = isTypeX(&lt;span&gt;&quot;Object&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; isNumber = isTypeX(&lt;span&gt;&quot;Number&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;偏函数测试：&quot;&lt;/span&gt;, isObject({ &lt;span&gt;a&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt; }, &lt;span&gt;123&lt;/span&gt;)); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;偏函数测试：&quot;&lt;/span&gt;, isNumber(&lt;span&gt;1&lt;/span&gt;)); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、惰性求值，预先定义多个操作，但不立即求值，在需要使用值时才去求值，可以避免不必要的求值，提升性能。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 这里使用 C# 中的 LINQ 来演示&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 假设数据库中有这样一段数据 db.Gems [4,15,20,7,3,13,2,20];&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; q =&lt;br/&gt;    db.Gems&lt;br/&gt;    .Select(c =&amp;gt; c &amp;lt; &lt;span&gt;10&lt;/span&gt;)&lt;br/&gt;   .Take(&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;   &lt;span&gt;// 只要不调用 ToList 就不会求值&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// 在具体求值的时候，会将预先定义的方法进行优化整合，以产生一个最优的解决方案，才会去求值。&lt;/span&gt;&lt;br/&gt;    .ToList();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述代码中，传统的求值会遍历 2 次，第一次遍历整个数组（8 项），筛选出小于 10 的项，输出 &lt;code&gt;[4,7,3,2]&lt;/code&gt;，第二次遍历这个数组（4 项），输出 &lt;code&gt;[4,7,3]&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果使用惰性求值，则会将预先定义的所有操作放在一起进行判断，所以只需要遍历 1 次就可以了。在遍历的同时判断 &lt;code&gt;是否小于 10&lt;/code&gt; 和 &lt;code&gt;小于 10 的个数是否为 3&lt;/code&gt;，当遍历到第 5 项时，就能输出 &lt;code&gt;[4,7,3]&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比传统求值遍历的 8+4=12 项，使用惰性求值则只需遍历 5 项，程序的运行效率也就自然而然地得到了提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、高阶函数，可以加工函数的函数（接收一个或多个函数作为输入、输出一个函数）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// React 组件中，将一个组件，封装为带默认背景色的新组件。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// styled-components 就是这个原理&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;withBackgroundRedColor&lt;/span&gt; (&lt;span&gt;wrapedComponent&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    render () {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; (&lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{backgroundColor:&lt;/span&gt; &#x27;&lt;span&gt;red&lt;/span&gt;} &amp;gt;&lt;/span&gt;&lt;br/&gt;                 &lt;span&gt;&amp;lt;&lt;span&gt;wrapedComponent&lt;/span&gt; {&lt;span&gt;...this.props&lt;/span&gt;} /&amp;gt;&lt;/span&gt;&lt;br/&gt;             &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、递归和尾递归。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 普通递归，控制函数循环调用的一种方式。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;fibonacci&lt;/span&gt;(&lt;span&gt;n&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n === &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; fibonacci(n - &lt;span&gt;1&lt;/span&gt;) + fibonacci(n - &lt;span&gt;2&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;没有使用尾递归，导致栈溢出&quot;&lt;/span&gt;, fibonacci(&lt;span&gt;100&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 尾递归，避免多层级函数嵌套导致的内存溢出的优化。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;fibonacci2&lt;/span&gt;(&lt;span&gt;n, result, preValue&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (n == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; fibonacci2(n - &lt;span&gt;1&lt;/span&gt;, preValue, result + preValue);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// result = 0, preValue = 1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;使用了尾递归，不会栈溢出&quot;&lt;/span&gt;, fibonacci2(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6、链式调用&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// lodash 中，一个方法调用完成之后，可以继续链式调用其他的方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; users = [&lt;br/&gt;  { &lt;span&gt;user&lt;/span&gt;: &lt;span&gt;&quot;barney&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;36&lt;/span&gt; },&lt;br/&gt;  { &lt;span&gt;user&lt;/span&gt;: &lt;span&gt;&quot;fred&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;40&lt;/span&gt; },&lt;br/&gt;  { &lt;span&gt;user&lt;/span&gt;: &lt;span&gt;&quot;pebbles&quot;&lt;/span&gt;, &lt;span&gt;age&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt; },&lt;br/&gt;];&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; youngest = _.chain(users)&lt;br/&gt;  .sortBy(&lt;span&gt;&quot;age&quot;&lt;/span&gt;)&lt;br/&gt;  .map(&lt;span&gt;&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;o&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; o.user + &lt;span&gt;&quot; is &quot;&lt;/span&gt; + o.age;&lt;br/&gt;  })&lt;br/&gt;  .head()&lt;br/&gt;  .value();&lt;br/&gt;&lt;span&gt;// =&amp;gt; &#x27;pebbles is 1&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思考与总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从编程范式开始，分析了函数式编程的定位，进一步引申出函数式编程的概念，然后基于一些工作中的案例，实战了函数式编程的应用场景，希望大家都能轻松地认识函数式编程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，如果你对此有任何想法，欢迎留言评论！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SM05zvmibH7KVsb0AmaBOr9GiblgWGMZnRqWN8yslvcTauwHNfq6XzyicXiaLy4UHPASyyvRtvB0LyAia67mABPVm7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1ac4c6eec3c88ee3ce3dfd420d2a8eb4</guid>
<title>资料 |《JavaScript 20 年》</title>
<link>https://toutiao.io/k/fgeg3yt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>