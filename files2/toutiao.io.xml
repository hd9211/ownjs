<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cb3a8058d0a1a8fd30b5801e2d60ed92</guid>
<title>为什么要鼓励重复造轮子？| 码农周刊第 327 期</title>
<link>https://toutiao.io/k/fvbrmmu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;为什么要鼓励重复造轮子？| 码农周刊第 327 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第327期（2020-12-23）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=327&amp;amp;aid=20216&amp;amp;url=http%3A%2F%2Fwww.huodongxing.com%2Fevent%2F1573487912300%3Fcoupon%3DMNZK&quot; target=&quot;_blank&quot;&gt;汇聚云计算、区块链、数据等技术顶级大咖！点击抢购&lt;font&gt;限时早鸟票&lt;/font&gt;！&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=327&amp;amp;aid=20216&amp;amp;url=http%3A%2F%2Fwww.huodongxing.com%2Fevent%2F1573487912300%3Fcoupon%3DMNZK&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/qiniu_326.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=327&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;关注云计算、数据、区块链三大技术主题，云集十余位业内大咖和顶尖技术人。&lt;font&gt;早鸟票限时抢购中&lt;/font&gt;&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;从 Druid 到 ClickHouse&lt;/p&gt;
        
        &lt;p&gt;实战总结&lt;/p&gt;
        
        &lt;p&gt;实践验证&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;能够低成本、无侵入的收集代码覆盖率数据&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;通过它可以在异常时直接 dump 出一个迷你内存快照。快照中没有任何敏感信息，更重要的是文件非常小的同时数据也相对完整，非常适合离线分析 OOM 及其他类型异常的调查定位。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;适合新手&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;在传统的计算机科学课程中，从操作系统、编程语言到机器学习，这些高大上课程和主题已经非常多了。然而有一个至关重要的主题却很少被专门讲授，而是留给学生们自己去探索。这部分内容就是：精通工具。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;干货满满&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;关注云计算、数据、区块链三大技术主题，云集十余位业内大咖和顶尖技术人。&lt;font&gt;早鸟票限时抢购中&lt;/font&gt;&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;Service Mesh 篇&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;入门介绍&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验总结&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;完整代码&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;关注云计算、数据、区块链三大技术主题，云集十余位业内大咖和顶尖技术人。&lt;font&gt;早鸟票限时抢购中&lt;/font&gt;&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;值得收藏&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;背景介绍&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;一步步教你&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 429587 即可&lt;/p&gt;
        
        &lt;p&gt;分享OPPO前沿互联网技术及活动&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 429344 即可&lt;/p&gt;
        
        &lt;p&gt;实时分享K8S等云原生技术、教程、资讯&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 392908 即可&lt;/p&gt;
        
        &lt;p&gt;一群靠谱的人，愿为phper带来一些值得细细品味的精神食粮&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 56197 即可&lt;/p&gt;
        
        &lt;p&gt;关注系统架构，做到实现功能、可靠、易用、高效率、可维护、可移植和优雅。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 42200 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书从一些经典算法出发，为读者展示了 100 个 Python 趣味编程实例。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;关注云计算、数据、区块链三大技术主题，云集十余位业内大咖和顶尖技术人。&lt;font&gt;早鸟票限时抢购中&lt;/font&gt;&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;欢迎探讨&lt;/p&gt;
        
        &lt;p&gt;经验总结&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>89bb006dad6eedebcdf44562d105f0d0</guid>
<title>硬核 Redis 总结，看这篇就够了</title>
<link>https://toutiao.io/k/z01bcz5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;高清思维导图已同步Git：https://github.com/SoWhat1412/xmindfile&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7044917257683215&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic11xjTRhZ3nznmDHYPeJITy3WYoK9BWpf8caywU41IibkSzz26v5Acrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;423&quot;/&gt;&lt;figcaption&gt;总感觉哪里不对，但是又说不上来&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、基本类型及底层实现&lt;/span&gt;&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6174418604651163&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicRdRFqeTHHLZZhV8HdQBzLZqIib0Rxx4dOpZaM8icQ0tf9U9ibBwpgPZAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.1、String&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用途：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;适用于简单key-value存储、setnx key value实现分布式锁、计数器(原子性)、分布式全局唯一ID。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;底层&lt;/strong&gt;：C语言中String用char[]数组表示，源码中用&lt;code&gt;SDS&lt;/code&gt;(simple dynamic string)封装char[]，这是是Redis存储的&lt;code&gt;最小单元&lt;/code&gt;，一个SDS最大可以存储512M信息。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;sdshdr&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; len; &lt;span&gt;// 标记char[]的长度&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;free&lt;/span&gt;; &lt;span&gt;//标记char[]中未使用的元素个数&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;char&lt;/span&gt; buf[]; &lt;span&gt;// 存放元素的坑&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis对SDS再次封装生成了&lt;code&gt;RedisObject&lt;/code&gt;，核心有两个作用：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;说明是5种类型哪一种。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;里面有指针用来指向 SDS。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你执行&lt;code&gt;set name sowhat&lt;/code&gt;的时候，其实Redis会创建两个RedisObject对象，键的RedisObject 和 值的RedisOjbect 其中它们type = REDIS_STRING，而SDS分别存储的就是 name 跟 sowhat 字符串咯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且Redis底层对SDS有如下优化：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;SDS修改后大小 &amp;gt; 1M时 系统会多分配空间来进行&lt;code&gt;空间预分配&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SDS是&lt;code&gt;惰性释放空间&lt;/code&gt;的，你free了空间，可是系统把数据记录下来下次想用时候可直接使用。不用新申请空间。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.2、List&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26504065040650404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicdleKtF3rSw0s7qBoxq2ChknlXQocEPkEqicpiaqoAhuZ6dGjJvn7Tb8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;查看源码底层 &lt;code&gt;adlist.h&lt;/code&gt; 会发现底层就是个 &lt;strong&gt;双端链表&lt;/strong&gt;，该链表最大长度为2^32-1。常用就这几个组合。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;lpush + lpop = stack 先进后出的栈 &lt;/p&gt;&lt;p&gt;lpush + rpop = queue 先进先出的队列 &lt;/p&gt;&lt;p&gt;lpush + ltrim = capped collection 有限集合&lt;/p&gt;&lt;p&gt;lpush + brpop = message queue 消息队列&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般可以用来做简单的消息队列，并且当数据量小的时候可能用到独有的压缩列表来提升性能。当然专业点还是要 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247488121&amp;amp;idx=1&amp;amp;sn=1ca9adc665b9ba0fc68c2d647b967d7c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;RabbitMQ&lt;/a&gt;、ActiveMQ等&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.3、Hash&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;散列非常适用于将一些相关的数据存储在一起，比如用户的购物车。该类型在日常用途还是挺多的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要明确一点：Redis中只有一个K，一个V。其中 K 绝对是字符串对象，而 V 可以是String、List、Hash、Set、ZSet任意一种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hash的底层主要是采用字典dict的结构，整体呈现层层封装。从小到大如下：&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.1、dictEntry&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;真正的数据节点，包括key、value 和 next 节点。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32432432432432434&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicSmO2YequSYVWCbRaYxsLziaVHBIcqjhxzSO53Ra1icW1gSnicytaTU1gA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;148&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br/&gt;1.3.2、dictht&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、数据 dictEntry 类型的数组，每个数组的item可能都指向一个链表。&lt;/p&gt;&lt;p&gt;2、数组长度 size。&lt;/p&gt;&lt;p&gt;3、sizemask 等于 size - 1。&lt;/p&gt;&lt;p&gt;4、当前 dictEntry 数组中包含总共多少节点。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9851851851851852&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRictDslPRoCZ9eo1Jyd1cI5TjGEKQ9zBpS7rKV1G1x0NHnrjqeA51NVWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;135&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3.3、dict&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、dictType 类型，包括一些自定义函数，这些函数使得key和value能够存储&lt;/p&gt;&lt;p&gt;2、rehashidx 其实是一个标志量，如果为&lt;code&gt;-1&lt;/code&gt;说明当前没有扩容，如果&lt;code&gt;不为 -1&lt;/code&gt; 则记录扩容位置。&lt;/p&gt;&lt;p&gt;3、dictht数组，两个Hash表。&lt;/p&gt;&lt;p&gt;4、iterators 记录了当前字典正在进行中的迭代器&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0461538461538462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRiceHpj6ByMtiaHicXibk2Gib0CicxJFCL79Tfzadbpt7S7k6R289ib8dp0rv1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;130&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;组合后结构就是如下&lt;/strong&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3394683026584867&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicO2vGDPPL75yR6J0hNetEmJCR5GDNrfPbhLOTiaC9IcEO0Tnoc6GrWsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br/&gt;1.3.4、渐进式扩容&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么 dictht ht[2]是两个呢？&lt;strong&gt;目的是在扩容的同时不影响前端的CURD&lt;/strong&gt;，慢慢的把数据从ht[0]转移到ht[1]中，同时&lt;code&gt;rehashindex&lt;/code&gt;来记录转移的情况，当全部转移完成，将ht[1]改成ht[0]使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;rehashidx = -1说明当前没有扩容，rehashidx != -1则表示扩容到数组中的第几个了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扩容之后的数组大小为大于used*2的&lt;strong&gt;2的n次方&lt;/strong&gt;的最小值，跟 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247485513&amp;amp;idx=1&amp;amp;sn=340e879f3197ae9e3d8789a1ad55a76e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;HashMap&lt;/a&gt; 类似。然后挨个遍历数组同时调整rehashidx的值，对每个dictEntry[i] 再挨个遍历链表将数据 Hash 后重新映射到 dictht[1]里面。并且 &lt;strong&gt;dictht[0].use&lt;/strong&gt; 跟 &lt;strong&gt;dictht[1].use&lt;/strong&gt; 是动态变化的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8831295843520782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicnAYFia6e6tnNjwW51AIibvibQKdicDKwOFmPDIUVOS5jobkj2iaTFX7bxfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2045&quot;/&gt;整个过程的重点在于&lt;code&gt;rehashidx&lt;/code&gt;，其为第一个数组正在移动的下标位置，如果当前内存不够，或者操作系统繁忙，扩容的过程可以随时停止。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;停止之后如果对该对象进行操作，那是什么样子的呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、如果是新增，则直接新增后第二个数组，因为如果新增到第一个数组，以后还是要移过来，没必要浪费时间&lt;/p&gt;&lt;p&gt;2、如果是删除，更新，查询，则先查找第一个数组，如果没找到，则再查询第二个数组。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.22213047068538397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRictPUUngUHIshLguZF60FLKfdBF2RCJmEFa0ibC37c3wcTrdZyGHh9w6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1211&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.4、Set&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你明白Java中HashSet是&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247485513&amp;amp;idx=1&amp;amp;sn=340e879f3197ae9e3d8789a1ad55a76e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;HashMap&lt;/a&gt;的简化版那么这个Set应该也理解了。都是一样的套路而已。这里你可以认为是没有Value的Dict。看源码 &lt;code&gt;t.set.c&lt;/code&gt; 就可以了解本质了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;setTypeAdd&lt;/span&gt;&lt;span&gt;(robj *subject, robj *value)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; llval;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (subject-&amp;gt;encoding == REDIS_ENCODING_HT) {&lt;br/&gt;         &lt;span&gt;// 看到底层调用的还是dictAdd，只不过第三个参数= NULL&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (dictAdd(subject-&amp;gt;ptr,value,&lt;span&gt;NULL&lt;/span&gt;) == DICT_OK) {&lt;br/&gt;            incrRefCount(value);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        ....&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.5、ZSet&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;范围查找 的天敌就是 有序集合，看底层 &lt;code&gt;redis.h&lt;/code&gt; 后就会发现 Zset用的就是可以跟二叉树媲美的&lt;code&gt;跳跃表&lt;/code&gt;来实现有序。跳表就是多层&lt;strong&gt;链表&lt;/strong&gt;的结合体，跳表分为许多层(level)，每一层都可以看作是数据的&lt;strong&gt;索引&lt;/strong&gt;，&lt;strong&gt;这些索引的意义就是加快跳表查找数据速度&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一层的数据都是有序的，上一层数据是下一层数据的子集，并且第一层(level 1)包含了全部的数据；层次越高，跳跃性越大，包含的数据越少。并且随便插入一个数据该数据是否会是跳表索引完全随机的跟玩骰子一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跳表包含一个表头，它查找数据时，是&lt;code&gt;从上往下，从左往右&lt;/code&gt;进行查找。现在找出值为37的节点为例，来对比说明跳表和普遍的链表。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;没有跳表查询
比如我查询数据37，如果没有上面的索引时候路线如下图：&lt;img data-ratio=&quot;0.05128205128205128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicWUGnibe3m19L0dNe3DMpMuJdQUCnQzzoNTHoOC0MlzTTFqOJXfdYiaGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2106&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有跳表查询
有跳表查询37的时候路线如下图：&lt;img data-ratio=&quot;0.2850467289719626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicg9m0y3mg1NQ7RnLPaoAjiaV2ePz06P5Y9jiaojiaY11ibiadygEBPVg2Asw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2140&quot;/&gt;应用场景：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;积分排行榜、时间排序新闻、延时队列。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.6、Redis Geo&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以前写过&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247485957&amp;amp;idx=2&amp;amp;sn=a5a75f2f9053cfd40df2d0d7a16389ef&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Redis Geo核心原理解析&lt;/a&gt;，想看的直接跳转即可。他的核心思想就是将地球近似为球体来看待，然后 GEO利用 GeoHash 将二维的经纬度转换成字符串，来实现位置的划分跟指定距离的查询。&lt;img data-ratio=&quot;1.0128205128205128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicFYicGibuzic9CrX7vDQkbEndv9pdGiaEiaL6zD1xNMKpEmQicTtezib4JBDOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;234&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.7、HyperLogLog&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HyperLogLog ：是一种&lt;code&gt;概率&lt;/code&gt;数据结构，它使用概率算法来统计集合的近似基数。而它算法的最本源则是&lt;code&gt;伯努利过程 + 分桶 + 调和平均数&lt;/code&gt;。具体实现可看  HyperLogLog 讲解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;功能&lt;/strong&gt;：误差允许范围内做基数统计 (基数就是指一个集合中不同值的个数) 的时候非常有用，每个HyperLogLog的键可以计算接近&lt;strong&gt;2^64&lt;/strong&gt;不同元素的基数，而大小只需要12KB。错误率大概在0.81%。所以如果用做 UV 统计很合适。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HyperLogLog底层 一共分了 &lt;strong&gt;2^14&lt;/strong&gt; 个桶，也就是 16384 个桶。每个(registers)桶中是一个 6 bit 的数组，这里有个骚操作就是一般人可能直接用一个字节当桶浪费2个bit空间，但是Redis底层只用6个然后通过前后拼接实现对内存用到了极致，最终就是 16384*6/8/1024 = 12KB。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.8、bitmap&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;BitMap 原本的含义是用一个比特位来映射某个元素的状态。由于一个比特位只能表示 0 和 1 两种状态，所以 BitMap 能映射的状态有限，但是使用比特位的优势是能大量的节省内存空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Redis 中BitMap 底层是基于字符串类型实现的，可以把 Bitmaps 想象成一个以比特位为单位的数组，数组的每个单元只能存储0和1，数组的下标在 Bitmaps 中叫做偏移量，BitMap 的 offset 值上限 &lt;strong&gt;2^32 - 1&lt;/strong&gt;。&lt;img data-ratio=&quot;0.17474048442906576&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic9gbIkzHhat4licrMDFto2EI9H4sv8fEib74SUZC90WP3YmsgibjoAjFiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;用户签到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;key = 年份：用户id  offset = （今天是一年中的第几天） % （今年的天数）&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;统计活跃用户&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;使用日期作为 key，然后用户 id 为 offset 设置不同offset为0 1 即可。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;PS&lt;/strong&gt; : Redis 它的通讯协议是基于TCP的应用层协议 RESP(REdis Serialization Protocol)。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.9、Bloom Filter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用布隆过滤器得到的判断结果：&lt;code&gt;不存在的一定不存在，存在的不一定存在&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;布隆过滤器 原理：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点(有效降低冲突概率)，把它们置为1。检索时，我们只要看看这些点是不是都是1就知道集合中有没有它了：如果这些点有任何一个为0，则被检元素一定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想玩的话可以用Google的&lt;code&gt;guava&lt;/code&gt;包玩耍一番。&lt;img data-ratio=&quot;0.5396825396825397&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic4nG6bxaV4zdIpGjBqzdhicMicC8tqv3pyDNDXVg1tHZRyugicicVhrzX8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.10 发布订阅&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis提供了&lt;code&gt;发布、订阅&lt;/code&gt;模式的消息机制，其中消息订阅者与发布者不直接通信，发布者向指定的频道（channel）发布消息，订阅该频道的每个客户端都可以接收到消息。不过比专业的MQ(RabbitMQ RocketMQ ActiveMQ Kafka)相比不值一提，这个功能就算球了。&lt;img data-ratio=&quot;0.6065573770491803&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicqtv8HbndEFZzO0QVPxtoJ9yK2CKAgWE0qIwFm63rj8v3QnznRO5QDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;427&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、持久化&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Redis数据在内存，断电既丢，因此持久化到磁盘是必须得有的，Redis提供了RDB跟AOF两种模式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.1、RDB&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。更适合做冷备。优点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、压缩后的二进制文，适用于备份、全量复制，用于灾难恢复加载RDB恢复数据远快于AOF方式，适合大规模的数据恢复。&lt;/p&gt;&lt;p&gt;2、如果业务对数据完整性和一致性要求不高，RDB是很好的选择。数据恢复比AOF快。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、RDB是&lt;strong&gt;周期间隔性的快照文件&lt;/strong&gt;，数据的完整性和一致性不高，因为RDB可能在最后一次备份时宕机了。&lt;/p&gt;&lt;p&gt;2、备份时占用内存，因为Redis 在备份时会独立fork一个&lt;strong&gt;子进程&lt;/strong&gt;，将数据写入到一个临时文件（此时内存中的数据是原来的两倍哦），最后再将临时文件替换之前的备份文件。所以要考虑到大概两倍的数据膨胀性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意手动触发及COW：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、&lt;code&gt;SAVE&lt;/code&gt; 直接调用 rdbSave ，&lt;code&gt;阻塞&lt;/code&gt; Redis 主进程，导致无法提供服务。2、&lt;code&gt;BGSAVE&lt;/code&gt; 则 fork 出一个子进程，子进程负责调用 rdbSave ，在保存完成后向主进程发送信号告知完成。在BGSAVE 执行期间&lt;strong&gt;仍可以继续处理客户端的请求&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;3、Copy On Write 机制，备份的是开始那个时刻内存中的数据，只复制被修改内存页数据，不是全部内存数据。&lt;/p&gt;&lt;p&gt;4、Copy On Write 时如果父子进程大量写操作会导致分页错误。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0936454849498327&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicxbyGBcnRxurGthc70mwHZLbUqL0cfk1vt6w3upia5quwGfPujREDspg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;299&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.2、AOF&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AOF 机制对每条写入命令作为日志，以 append-only 的模式写入一个日志文件中，因为这个模式是&lt;strong&gt;只追加&lt;/strong&gt;的方式，所以没有任何磁盘寻址的开销，所以很快，有点像 Mysql 中的binlog。AOF更适合做热备。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;AOF是一秒一次去通过一个后台的线程fsync操作，数据丢失不用怕。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在&lt;strong&gt;恢复&lt;/strong&gt;大数据集时的速度比 AOF 的恢复速度要快。&lt;/p&gt;&lt;p&gt;2、根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;AOF整个流程分两步&lt;/strong&gt;：第一步是命令的实时写入，不同级别可能有1秒数据损失。命令先追加到&lt;code&gt;aof_buf&lt;/code&gt;然后再同步到AO磁盘，&lt;strong&gt;如果实时写入磁盘会带来非常高的磁盘IO，影响整体性能&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步是对aof文件的&lt;strong&gt;重写&lt;/strong&gt;，目的是为了减少AOF文件的大小，可以自动触发或者手动触发(&lt;strong&gt;BGREWRITEAOF&lt;/strong&gt;)，是Fork出子进程操作，期间Redis服务仍可用。&lt;img data-ratio=&quot;0.6868686868686869&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic8YDTXRLm1sPmRWOlEG8gKNBQj5LHicgaQmIibxXHOluSe10MR9Yo7KuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;693&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、在重写期间，由于主进程依然在响应命令，为了保证最终备份的完整性；它&lt;code&gt;依然会写入旧&lt;/code&gt;的AOF中，如果重写失败，能够保证数据不丢失。&lt;/p&gt;&lt;p&gt;2、为了把重写期间响应的写入信息也写入到新的文件中，因此也会&lt;code&gt;为子进程保留一个buf&lt;/code&gt;，防止新写的file丢失数据。&lt;/p&gt;&lt;p&gt;3、重写是直接把&lt;code&gt;当前内存的数据生成对应命令&lt;/code&gt;，并不需要读取老的AOF文件进行分析、命令合并。&lt;/p&gt;&lt;p&gt;4、&lt;strong&gt;无论是 RDB 还是 AOF 都是先写入一个临时文件，然后通过&lt;code&gt;rename&lt;/code&gt;完成文件的替换工作&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于Fork的建议：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、降低fork的频率，比如可以手动来触发RDB生成快照、与AOF重写；&lt;/p&gt;&lt;p&gt;2、控制Redis最大使用内存，防止fork耗时过长；&lt;/p&gt;&lt;p&gt;3、配置牛逼点，合理配置Linux的内存分配策略，避免因为物理内存不足导致fork失败。&lt;/p&gt;&lt;p&gt;4、Redis在执行&lt;code&gt;BGSAVE&lt;/code&gt;和&lt;code&gt;BGREWRITEAOF&lt;/code&gt;命令时，哈希表的负载因子&amp;gt;=5，而未执行这两个命令时&amp;gt;=1。目的是&lt;strong&gt;尽量减少写操作&lt;/strong&gt;，避免不必要的内存写入操作。&lt;/p&gt;&lt;p&gt;5、&lt;strong&gt;哈希表的扩展因子&lt;/strong&gt;：哈希表已保存节点数量 / 哈希表大小。因子决定了是否扩展哈希表。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.3、恢复&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动时会先检查AOF(数据更完整)文件是否存在，如果不存在就尝试加载RDB。&lt;img data-ratio=&quot;1.4227941176470589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicFRKa0t7iciaRP0Tm4ogjUUc65RoGZC0VAdicBWrFiboofwNujkPJIPB4hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;272&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.4、建议&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然单独用RDB会丢失很多数据。单独用AOF，数据恢复没RDB来的快，所以出现问题了第一时间用RDB恢复，然后AOF做数据补全才说王道。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、Redis为什么那么快&lt;/span&gt;&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.1、 基于内存实现：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;数据都存储在内存里，相比磁盘IO操作快百倍，操作速率很快。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.2、高效的数据结构：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Redis底层多种数据结构支持不同的数据类型，比如HyperLogLog它连2个字节都不想浪费。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.3、丰富而合理的编码：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis底层提供了 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzNzk1NTU2Mg==&amp;amp;mid=2247486037&amp;amp;idx=1&amp;amp;sn=0f5507a683ffab4f8dcd8f947e473cf6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;丰富而合理的编码&lt;/a&gt;  ，五种数据类型根据长度及元素的个数适配不同的编码格式。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、String：自动存储int类型，非int类型用raw编码。&lt;/p&gt;&lt;p&gt;2、List：字符串长度且元素个数小于一定范围使用 &lt;strong&gt;ziplist&lt;/strong&gt; 编码，否则转化为 &lt;strong&gt;linkedlist&lt;/strong&gt; 编码。&lt;/p&gt;&lt;p&gt;3、Hash：hash 对象保存的键值对内的键和值字符串长度小于一定值及键值对。&lt;/p&gt;&lt;p&gt;4、Set：保存元素为整数及元素个数小于一定范围使用 intset 编码，任意条件不满足，则使用 &lt;strong&gt;hashtable&lt;/strong&gt; 编码。&lt;/p&gt;&lt;p&gt;5、Zset：保存的元素个数小于定值且成员长度小于定值使用 &lt;strong&gt;ziplist&lt;/strong&gt; 编码，任意条件不满足，则使用 &lt;strong&gt;skiplist&lt;/strong&gt; 编码。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.4、合适的线程模型：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;I/O 多路复用&lt;/code&gt;模型同时监听客户端连接，多线程是需要上下文切换的，对于内存数据库来说这点很致命。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7313019390581718&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicKADFgJeRqx92JxQLGicLfm6QaicJRc6fO1DFx02MuBUM3Jarl8XP5eLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;361&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt;3.5、 Redis6.0后引入&lt;code&gt;多线程&lt;/code&gt;提速：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道 读写网络的read/write系统耗时 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; Redis运行执行耗时，Redis的瓶颈主要在于&lt;strong&gt;网络的 IO 消耗&lt;/strong&gt;, 优化主要有两个方向:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、提高网络 IO 性能，典型的实现比如使用 DPDK 来替代内核网络栈的方式 &lt;/p&gt;&lt;p&gt;2、使用多线程充分利用多核，典型的实现比如 Memcached。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;协议栈优化的这种方式跟 Redis 关系不大，支持多线程是一种最有效最便捷的操作方式。所以Redis支持多线程主要就是两个原因：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、可以充分利用服务器 CPU 资源，目前主线程只能利用一个核&lt;/p&gt;&lt;p&gt;2、多线程任务可以分摊 Redis 同步 IO 读写负荷&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于多线程须知:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 6.0 版本 默认多线程是关闭的 io-threads-do-reads no&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis 6.0 版本 开启多线程后 线程数也要 谨慎设置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多线程可以使得性能翻倍，但是多线程只是用来处理网络数据的读写和协议解析，&lt;strong&gt;执行命令仍然是单线程顺序执行&lt;/strong&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、常见问题&lt;/span&gt;&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.1、缓存雪崩&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6817288801571709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicNBzpbYBopNbibW1L8OUZtoADBWfFtkibmH54bibOOe9GZPvaeiaLJBCyfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;509&quot;/&gt;雪崩定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Redis中大批量key在同一时间同时失效导致所有请求都打到了MySQL。而MySQL扛不住导致大面积崩塌。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;雪崩解决方案：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、缓存数据的过期时间加上个随机值，防止同一时间大量数据过期现象发生。&lt;/p&gt;&lt;p&gt;2、如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。&lt;/p&gt;&lt;p&gt;3、设置热点数据永远不过期。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.2、缓存穿透&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;穿透定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;缓存穿透 是 指缓存和数据库中&lt;code&gt;都没有&lt;/code&gt;的数据，比如ID默认&amp;gt;0，黑客一直 请求ID= -12的数据那么就会导致数据库压力过大，严重会击垮数据库。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;穿透解决方案：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、后端接口层增加 用户&lt;strong&gt;鉴权校验&lt;/strong&gt;，&lt;strong&gt;参数做校验&lt;/strong&gt;等。&lt;/p&gt;&lt;p&gt;2、单个IP每秒访问次数超过阈值&lt;strong&gt;直接拉黑IP&lt;/strong&gt;，关进小黑屋1天，在获取IP代理池的时候我就被拉黑过。&lt;/p&gt;&lt;p&gt;3、从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null 失效时间可以为15秒&lt;strong&gt;防止恶意攻击&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;4、用Redis提供的  &lt;strong&gt;Bloom Filter&lt;/strong&gt; 特性也OK。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.3、缓存击穿&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7506234413965087&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicwJ13hgUjL0DELJtAiawswotPb7yAgVSShvMe2WMx0xmicMh6Zia8xbPew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;401&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;击穿定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;现象：大并发集中对这一个热点key进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;击穿解决：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;设置热点数据永远不过期
加上互斥锁也能搞定了&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.4、双写一致性&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;双写：&lt;code&gt;缓存&lt;/code&gt;跟&lt;code&gt;数据库&lt;/code&gt;均更新数据，如何保证数据一致性？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、先更新数据库，再更新缓存&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;安全问题：线程A更新数据库-&amp;gt;线程B更新数据库-&amp;gt;线程B更新缓存-&amp;gt;线程A更新缓存。&lt;code&gt;导致脏读&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;业务场景：读多写少场景，频繁更新数据库而缓存根本没用。更何况如果缓存是叠加计算后结果更&lt;code&gt;浪费性能&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、先删缓存，再更新数据库&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;A 请求写来更新缓存。&lt;/p&gt;&lt;p&gt;B 发现缓存不在去数据查询旧值后写入缓存。&lt;/p&gt;&lt;p&gt;A 将数据写入数据库，此时缓存跟数据库&lt;strong&gt;不一致&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此 &lt;strong&gt;FackBook&lt;/strong&gt; 提出了  &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&amp;amp;mid=2247486125&amp;amp;idx=1&amp;amp;sn=9a263b9bb7f1abdf249a0011e7996a5e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Cache Aside Pattern&lt;/a&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。&lt;/p&gt;&lt;p&gt;命中：应用程序从cache中取数据，取到后返回。&lt;/p&gt;&lt;p&gt;更新：&lt;code&gt;先把数据存到数据库中，成功后，再让缓存失效&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.5、脑裂&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.128440366972477&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicD8WoZiaibZzfouZUZnRbMrB5vBMRYpQ8DvNiaoCaKqyUsCUDz7dfXThGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot;/&gt;脑裂是指因为网络原因，导致master节点、slave节点 和 sentinel集群处于不用的网络分区，此时因为sentinel集群&lt;strong&gt;无法感知&lt;/strong&gt;到master的存在，所以将slave节点提升为master节点 此时存在两个不同的master节点就像一个大脑分裂成了两个。其实在&lt;code&gt;Hadoop&lt;/code&gt; 、&lt;code&gt;Spark&lt;/code&gt;集群中都会出现这样的情况，只是解决方法不同而已(用ZK配合强制杀死)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群脑裂问题中，如果客户端还在基于原来的master节点继续写入数据那么新的master节点将无法同步这些数据，当网络问题解决后sentinel集群将原先的master节点降为slave节点，此时再从新的master中同步数据将造成大量的数据丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis处理方案是redis的配置文件中存在两个参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;min-replicas-to-write 3  表示连接到master的最少slave数量&lt;br/&gt;min-replicas-max-lag 10  表示slave连接到master的最大延迟时间&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果连接到master的slave数量 &amp;lt; 第一个参数 且 ping的延迟时间 &amp;lt;= 第二个参数那么master就会拒绝写请求，配置了这两个参数后如果发生了集群脑裂则原先的master节点接收到客户端的写入请求会拒绝就可以减少数据同步之后的数据丢失。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.6、事务&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247488721&amp;amp;idx=1&amp;amp;sn=eead82d2b7a0fdf993beacc4dfd60313&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;MySQL&lt;/a&gt; 中的事务还是挺多道道的还要，而在Redis中的事务只要有如下三步：&lt;img data-ratio=&quot;0.12289156626506025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic9SnZEfPvPRtKZe5CeaCGoQqXNOtB2ueRBTwTxvIRpO6BcvtiaRUmANw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;415&quot;/&gt;关于事务具体结论：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、redis事务就是一次性、顺序性、排他性的执行一个队列中的&lt;strong&gt;一系列命令&lt;/strong&gt;。　 &lt;/p&gt;&lt;p&gt;2、Redis事务&lt;strong&gt;没有隔离级别&lt;/strong&gt;的概念：批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就&lt;strong&gt;不存在事务内的查询要看到事务里的更新，事务外查询不能看到&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;3、Redis&lt;strong&gt;不保证原子性&lt;/strong&gt;：Redis中单条命令是原子性执行的，但事务不保证原子性。&lt;/p&gt;&lt;p&gt;4、Redis编译型错误事务中所有代码均不执行，指令使用错误。运行时异常是错误命令导致异常，其他命令可正常执行。&lt;/p&gt;&lt;p&gt;5、watch指令类似于&lt;strong&gt;乐观锁&lt;/strong&gt;，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用EXEC执行事务时，事务队列将不会被执行。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;4.7、正确开发步骤&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;上线前&lt;/code&gt;：Redis &lt;strong&gt;高可用&lt;/strong&gt;，主从+哨兵，Redis cluster，避免全盘崩溃。&lt;/p&gt;&lt;p&gt;&lt;code&gt;上线时&lt;/code&gt;：本地 ehcache 缓存 + Hystrix 限流 + 降级，避免MySQL扛不住。&lt;code&gt;上线后&lt;/code&gt;：Redis &lt;strong&gt;持久化&lt;/strong&gt;采用 RDB + AOF 来保证断点后自动从磁盘上加载数据，快速恢复缓存数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、分布式锁&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中我们可以用 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247488320&amp;amp;idx=1&amp;amp;sn=6fd5cddf2a0ff68fe00ccc834e90521b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;synchronized&lt;/a&gt; 、&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI1OTI4Nw==&amp;amp;mid=2247488426&amp;amp;idx=1&amp;amp;sn=705cace6ce7fbc2d6f141e8b03623fff&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Lock&lt;/a&gt;  实现并发编程。但是Java中的锁&lt;strong&gt;只能保证在同一个JVM进程内中执行&lt;/strong&gt;。如果在分布式集群环境下用锁呢？日常一般有两种选择方案。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;5.1、 Zookeeper实现分布式锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你需要知道一点基本&lt;code&gt;zookeeper&lt;/code&gt;知识：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、持久节点：客户端断开连接zk不删除persistent类型节点
2、临时节点：客户端断开连接zk删除ephemeral类型节点
3、顺序节点：节点后面会自动生成类似0000001的数字表示顺序
4、节点变化的通知：客户端注册了监听节点变化的时候，会&lt;strong&gt;调用回调方法&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大致流程如下，其中注意每个节点&lt;code&gt;只&lt;/code&gt;监控它前面那个节点状态，从而避免&lt;code&gt;羊群效应&lt;/code&gt;。关于模板代码百度即可。&lt;img data-ratio=&quot;1.0018832391713748&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicdb140o3zZL4TYhEj4tQzrHgu0Ye8Tczlick0n4VbJDygkmzvZia4htNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;缺点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;频繁的创建删除节点，加上注册watch事件，对于zookeeper集群的压力比较大，性能也比不上Redis实现的分布式锁。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;5.2、 Redis实现分布式锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本身原理也比较简单，Redis 自身就是一个单线程处理器，具备互斥的特性，通过setNX，exist等命令就可以完成简单的分布式锁，处理好超时释放锁的逻辑即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SETNX&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;SETNX 是SET if Not eXists的简写，日常指令是&lt;code&gt;SETNX key value&lt;/code&gt;，如果 key 不存在则set成功返回 1，如果这个key已经存在了返回0。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SETEX&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;SETEX key seconds value 表达的意思是 将值 value 关联到 key ，并将 key 的生存时间设为多少秒。如果 key 已经存在，setex命令将覆写旧值。并且 setex是一个&lt;code&gt;原子性&lt;/code&gt;(atomic)操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加锁：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一般就是用一个标识唯一性的字符串比如UUID 配合 SETNX 实现加锁。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解锁：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这里用到了LUA脚本，LUA可以保证是&lt;strong&gt;原子性&lt;/strong&gt;的，思路就是判断一下Key和入参是否相等，是的话就删除，返回成功1，0就是失败。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这个锁是&lt;strong&gt;无法重入的&lt;/strong&gt;，且自己实心的话各种边边角角都要考虑到，所以了解个大致思路流程即可，&lt;strong&gt;工程化还是用开源工具包就行&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;5.3、 Redisson实现分布式锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redisson&lt;/strong&gt; 是在Redis基础上的一个服务，采用了基于NIO的Netty框架，不仅能作为Redis底层驱动&lt;strong&gt;客户端&lt;/strong&gt;，还能将原生的RedisHash，List，Set，String，Geo，HyperLogLog等数据结构封装为Java里大家最熟悉的映射（Map），列表（List），集（Set），通用对象桶（Object Bucket），地理空间对象桶（Geospatial Bucket），基数估计算法（HyperLogLog）等结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们只是用到了关于分布式锁的几个指令，他的大致底层原理：&lt;img data-ratio=&quot;0.5554123711340206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicRaUQXoFScciaiaHcB6LlHos9vDJoHicgJUNeFW3RgoLDJ2ONRYu5ywyFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;776&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0OTk3ODQ3Ng==&amp;amp;mid=2247483893&amp;amp;idx=1&amp;amp;sn=32e7051116ab60e41f72e6c6e29876d9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Redisson加锁解锁&lt;/a&gt; 大致流程图如下：&lt;img data-ratio=&quot;0.4293527803099362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic1XZAnCVbERicaa9ia9fmb5k6Qia6I8S8uXWW8sAhYe7hBb8A9VGZrbB1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6、Redis 过期策略和内存淘汰策略&lt;/span&gt;&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.1、Redis的过期策略&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis中 过期策略 通常有以下三种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、&lt;strong&gt;定时过期&lt;/strong&gt;：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即对key进行清除。该策略可以立即清除过期的数据，对内存很友好；但是&lt;strong&gt;会占用大量的CPU资源去处理过期的数据&lt;/strong&gt;，从而影响缓存的响应时间和吞吐量。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、&lt;strong&gt;惰性过期&lt;/strong&gt;：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却&lt;strong&gt;对内存非常不友好&lt;/strong&gt;。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、&lt;strong&gt;定期过期&lt;/strong&gt;：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源&lt;strong&gt;达到最优&lt;/strong&gt;的平衡效果。&lt;/p&gt;&lt;p&gt;expires字典会保存所有设置了过期时间的key的过期时间数据，其中 key 是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis采用的过期策略：&lt;code&gt;惰性删除&lt;/code&gt; + &lt;code&gt;定期删除&lt;/code&gt;。memcached采用的过期策略：&lt;code&gt;惰性删除&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.2、6种内存淘汰策略&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选&lt;strong&gt;最近最少使用&lt;/strong&gt;的数据淘汰 &lt;/p&gt;&lt;p&gt;2、volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选&lt;strong&gt;将要过期&lt;/strong&gt;的数据淘汰 &lt;/p&gt;&lt;p&gt;3、volatile-random：从已设置过期时间的数据集（server.db[i].expires）中&lt;strong&gt;任意选择&lt;/strong&gt;数据淘汰 &lt;/p&gt;&lt;p&gt;4、allkeys-lru：从数据集（server.db[i].dict）中挑选&lt;strong&gt;最近最少使用&lt;/strong&gt;的数据淘汰 &lt;/p&gt;&lt;p&gt;5、allkeys-random：从数据集（server.db[i].dict）中&lt;strong&gt;任意选择数&lt;/strong&gt;据淘汰
6、no-enviction（驱逐）：禁止驱逐数据，&lt;strong&gt;不删除&lt;/strong&gt;的意思。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试常问常考的也就是&lt;strong&gt;LRU&lt;/strong&gt;了，大家熟悉的&lt;code&gt;LinkedHashMap&lt;/code&gt;中也实现了&lt;code&gt;LRU&lt;/code&gt;算法的，实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;SelfLRUCache&lt;/span&gt;&amp;lt;&lt;span&gt;K&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;LinkedHashMap&lt;/span&gt;&amp;lt;&lt;span&gt;K&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; CACHE_SIZE;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 传递进来最多能缓存多少数据&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; cacheSize 缓存大小&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;SelfLRUCache&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; cacheSize)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// true 表示让 linkedHashMap 按照访问顺序来进行排序，最近访问的放在头部，最老访问的放在尾部。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;((&lt;span&gt;int&lt;/span&gt;) Math.ceil(cacheSize / &lt;span&gt;0.75&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0.75f&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        CACHE_SIZE = cacheSize;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;removeEldestEntry&lt;/span&gt;&lt;span&gt;(Map.Entry&amp;lt;K, V&amp;gt; eldest)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 当 map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据。&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; size() &amp;gt; CACHE_SIZE;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;6.2、总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据，过期策略用于处理过期的缓存数据&lt;/strong&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7、Redis 集群高可用&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单机问题有机器故障、容量瓶颈、QPS瓶颈。在实际应用中，Redis的多机部署时候会涉及到&lt;code&gt;redis主从复制&lt;/code&gt;、&lt;code&gt;Sentinel哨兵模式&lt;/code&gt;、&lt;code&gt;Redis Cluster&lt;/code&gt;。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;模式&lt;/th&gt;&lt;th&gt;优点&lt;/th&gt;&lt;th&gt;缺点&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;单机版&lt;/td&gt;&lt;td&gt;架构简单，部署方便&lt;/td&gt;&lt;td&gt;机器故障、容量瓶颈、QPS瓶颈&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;主从复制&lt;/td&gt;&lt;td&gt;高可靠性，读写分离&lt;/td&gt;&lt;td&gt;故障恢复复杂，主库的写跟存受单机限制&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sentinel 哨兵&lt;/td&gt;&lt;td&gt;集群部署简单，HA&lt;/td&gt;&lt;td&gt;原理繁琐，slave存在资源浪费，不能解决读写分离问题&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Redis Cluster&lt;/td&gt;&lt;td&gt;数据动态存储solt，可扩展，高可用&lt;/td&gt;&lt;td&gt;客户端动态感知后端变更，批量操作支持查&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.1、redis主从复制&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该模式下 具有高可用性且读写分离， 会采用 &lt;code&gt;增量同步&lt;/code&gt; 跟 &lt;code&gt;全量同步&lt;/code&gt; 两种机制。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1.1、全量同步&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1963882618510158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicAhskdG8GFVN7KosOFbKyb57I1NbY5dp0YGre7g9Sib13kcNacntAt1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;443&quot;/&gt;Redis全量复制一般发生在&lt;strong&gt;Slave初始化阶段&lt;/strong&gt;，这时Slave需要将Master上的&lt;strong&gt;所有数据&lt;/strong&gt;都复制一份：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、slave连接master，发送&lt;code&gt;psync&lt;/code&gt;命令。&lt;/p&gt;&lt;p&gt;2、master接收到&lt;code&gt;psync&lt;/code&gt;命名后，开始执行bgsave命令生成RDB文件并使用缓冲区记录此后执行的所有写命令。&lt;/p&gt;&lt;p&gt;3、master发送快照文件到slave，并在发送期间继续记录被执行的写命令。4、slave收到快照文件后丢弃所有旧数据，载入收到的快照。&lt;/p&gt;&lt;p&gt;5、master快照发送完毕后开始向slave发送缓冲区中的写命令。&lt;/p&gt;&lt;p&gt;6、slave完成对快照的载入，开始接收命令请求，并执行来自master缓冲区的写命令。&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1.2、增量同步&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也叫&lt;strong&gt;指令同步&lt;/strong&gt;，就是从库重放在主库中进行的指令。Redis会把指令存放在一个&lt;strong&gt;环形队列&lt;/strong&gt;当中，因为内存容量有限，如果备机一直起不来，不可能把所有的内存都去存指令，也就是说，如果备机一直未同步，指令可能会被覆盖掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis增量复制是指Slave初始化后开始正常工作时master发生的写操作同步到slave的过程。增量复制的过程主要是master每执行一个写命令就会向slave发送相同的写命令。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.023728813559322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicHaIXZDQYwicxrdF0LZQ7KsbYnRZzEqk77iaXicf41GJcvwhv77nRgGspg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;295&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1.3、Redis主从同步策略：&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、&lt;code&gt;主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步&lt;/code&gt;。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。2、slave在同步master数据时候如果slave丢失连接不用怕，slave在重新连接之后&lt;code&gt;丢失重补&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;3、一般通过主从来实现读写分离，但是如果master挂掉后如何保证Redis的 HA呢？引入&lt;code&gt;Sentinel&lt;/code&gt;进行master的选择。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.2、高可用之哨兵模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7382413087934561&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicqGTaNm4WNiaxHXg0vvxrcicbG99eWkuQjuia9VgZnqf06iaFC4MFiap6UMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;489&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;Redis-sentinel  本身是一个&lt;strong&gt;独立&lt;/strong&gt;运行的进程，一般sentinel集群 节点数至少三个且奇数个，它能监控多个master-slave集群，sentinel节点发现master宕机后能进行自动切换。Sentinel可以监视任意多个主服务器以及主服务器属下的从服务器，并在被监视的主服务器下线时，&lt;strong&gt;自动执行故障转移操作&lt;/strong&gt;。这里需注意&lt;code&gt;sentinel&lt;/code&gt;也有&lt;code&gt;single-point-of-failure&lt;/code&gt;问题。大致罗列下哨兵用途：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;集群监控：循环监控master跟slave节点。&lt;/p&gt;&lt;p&gt;消息通知：当它发现有redis实例有故障的话，就会发送消息给管理员 &lt;/p&gt;&lt;p&gt;故障转移：这里分为主观下线(单独一个哨兵发现master故障了)。客观下线(多个哨兵进行抉择发现达到quorum数时候开始进行切换)。&lt;/p&gt;&lt;p&gt;配置中心：如果发生了故障转移，它会通知将master的新地址写在配置中心告诉客户端。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;7.3、Redis Cluster&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RedisCluster是Redis的分布式解决方案，在3.0版本后推出的方案，有效地解决了Redis分布式的需求。&lt;img data-ratio=&quot;0.6059957173447538&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRic9kicG37hoLHYI5rgokUdyjoqmicB7nxdHvibZg0Vtictsm6GJwIkGgILnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;467&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.3.1、分区规则&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31044776119402984&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicdt9GcFtcd23aQ02J1AaoIvd9Sp1bNMgL6rf5iaTiaP3reNUhutVJ49sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;常见的分区规则&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;节点取余&lt;/code&gt;：hash(key) % N&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;一致性哈希&lt;/code&gt;：一致性哈希环&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;虚拟槽哈希&lt;/code&gt;：CRC16[key] &amp;amp; 16383&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RedisCluster采用了&lt;code&gt;虚拟槽分区&lt;/code&gt;方式，具题的实现细节如下：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、采用去&lt;strong&gt;中心化&lt;/strong&gt;的思想，它使用&lt;strong&gt;虚拟槽solt分区&lt;/strong&gt;覆盖到所有节点上，取数据一样的流程，节点之间使用轻量协议通信&lt;strong&gt;Gossip&lt;/strong&gt;来减少带宽占用所以性能很高， &lt;/p&gt;&lt;p&gt;2、自动实现&lt;strong&gt;负载均衡与高可用&lt;/strong&gt;，自动实现&lt;strong&gt;failover&lt;/strong&gt;并且支持&lt;strong&gt;动态扩展&lt;/strong&gt;，官方已经玩到可以1000个节点 实现的复杂度低。&lt;/p&gt;&lt;p&gt;3、每个Master也需要配置主从，并且内部也是采用&lt;strong&gt;哨兵模式&lt;/strong&gt;，如果有半数节点发现某个异常节点会共同决定更改异常节点的状态。&lt;/p&gt;&lt;p&gt;4、如果集群中的master没有slave节点，则master挂掉后整个集群就会进入&lt;strong&gt;fail&lt;/strong&gt;状态，因为集群的slot映射不完整。&lt;strong&gt;如果集群超过半数以上的master挂掉，集群都会进入fail状态&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;5、官方推荐 &lt;strong&gt;集群部署至少要3台以上的master节点&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8、Redis 限流&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经常乘坐北京西二旗地铁或者在北京西站乘坐的时候经常会遇到一种情况就是如果人很多，地铁的工作人员拿个小牌前面一档让你等会儿再检票，这就是实际生活应对人流量巨大的措施。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开发高并发系统时，有三把利器用来保护系统：&lt;code&gt;缓存&lt;/code&gt;、&lt;code&gt;降级&lt;/code&gt;和&lt;code&gt;限流&lt;/code&gt;。那么何为限流呢？顾名思义，限流就是限制流量，就像你宽带包了1个G的流量，用完了就没了。通过限流，我们可以很好地控制系统的qps，从而达到保护系统的目的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1、基于Redis的setnx、zset&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2、setnx&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们需要在10秒内限定20个请求，那么我们在setnx的时候可以设置过期时间10，当请求的setnx数量达到20时候即达到了限流效果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点&lt;/strong&gt;：比如当统计1-10秒的时候，无法统计2-11秒之内，如果需要统计N秒内的M个请求，那么我们的Redis中&lt;strong&gt;需要保持N个key等等问题&lt;/strong&gt;。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.3、zset&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实限流涉及的最主要的就是滑动窗口，上面也提到1-10怎么变成2-11。其实也就是起始值和末端值都各+1即可。我们可以将请求打造成一个&lt;strong&gt;zset数组&lt;/strong&gt;，当每一次请求进来的时候，value保持唯一，可以用UUID生成，而score可以用当前时间戳表示，因为score我们可以用来计算当前时间戳之内有多少的请求数量。而zset数据结构也提供了&lt;strong&gt;range&lt;/strong&gt;方法让我们可以很轻易的获取到2个时间戳内有多少请求，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;缺点&lt;/strong&gt;：就是zset的数据结构会越来越大。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2、漏桶算法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;漏桶算法思路：把水比作是请求，漏桶比作是系统处理能力极限，水先进入到漏桶里，漏桶里的水&lt;strong&gt;按一定速率流出&lt;/strong&gt;，当流出的速率小于流入的速率时，由于漏桶容量有限，后续进入的水直接溢出（拒绝请求），以此实现限流。&lt;img data-ratio=&quot;0.5493421052631579&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicxvnHbjoxtZoGYfnoH2GhkHBVTJtLGRgDgxcqgriaPkpIT1aST3gLaEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;608&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3、令牌桶算法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令牌桶算法的原理：可以理解成医院的挂号看病，只有拿到号以后才可以进行诊病。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8552380952380952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRicNjicWnydjDCHISvBzjmXnHQLke08tYjVWa6xR2tiazNzJ5ImqXCguHfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot;/&gt;细节流程大致：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、所有的请求在处理之前都需要&lt;strong&gt;拿到一个可用的令牌才会被处理&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;2、根据限流大小，设置按照一定的速率往桶里添加令牌。&lt;/p&gt;&lt;p&gt;3、设置桶最大可容纳值，当桶满时新添加的令牌就被丢弃或者拒绝。&lt;/p&gt;&lt;p&gt;4、请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除。&lt;/p&gt;&lt;p&gt;5、令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工程化：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNTM4NzAyNg==&amp;amp;mid=2247484077&amp;amp;idx=1&amp;amp;sn=c873e011a3c921737c1b0bf24ddc6c68&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;自定义注解、aop、Redis + Lua&lt;/a&gt; 实现限流。&lt;/p&gt;&lt;p&gt;2、推荐 &lt;strong&gt;guava&lt;/strong&gt; 的&lt;strong&gt;RateLimiter&lt;/strong&gt;实现。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9、常见知识点&lt;/span&gt;&lt;/h1&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;字符串模糊查询时用&lt;code&gt;Keys&lt;/code&gt;可能导致线程阻塞，尽量用&lt;code&gt;scan&lt;/code&gt;指令进行无阻塞的取出数据然后去重下即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多个操作的情况下记得用&lt;code&gt;pipeLine&lt;/code&gt;把所有的命令一次发过去，避免频繁的发送、接收带来的网络开销，提升性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;bigkeys可以扫描redis中的大key，底层是使用scan命令去遍历所有的键，对每个键根据其类型执行STRLEN、LLEN、SCARD、HLEN、ZCARD这些命令获取其长度或者元素个数。缺陷是线上试用并且个数多不一定空间大，&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线上应用记得开启Redis慢查询日志哦，基本思路跟MySQL类似。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis中因为内存分配策略跟增删数据是会导致&lt;code&gt;内存碎片&lt;/code&gt;，你可以重启服务也可以执行&lt;code&gt;activedefrag yes&lt;/code&gt;进行内存重新整理来解决此问题。&lt;img data-ratio=&quot;0.14913657770800628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wJvXicD0z2dX4ksecYaj2nLDUQtGalKRiceatj5q5PgGsbibicbVvxBaSDAibL1DVYU1stK0kcQOMibEmB98llI7fhyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;637&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;1、Ratio &amp;gt;1 表明有内存碎片，越大表明越多严重。&lt;/p&gt;&lt;p&gt;2、&lt;span&gt;Ratio &lt;/span&gt;&amp;lt; 1 表明正在使用虚拟内存，虚拟内存其实就是硬盘，性能比内存低得多，这是应该增强机器的内存以提高性能。&lt;/p&gt;&lt;p&gt;3、一般来说，mem_fragmentation_ratio的数值在&lt;span&gt;1 ~ 1.5&lt;/span&gt;之间是比较健康的&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94155&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9831460674157303&quot; data-type=&quot;gif&quot; data-w=&quot;178&quot; data-width=&quot;100%&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/b96CibCt70iabwjyojLhA03PtxUnkNPREnt2F48ywfXLpDdDAjicOTPI8Q94tVLbJ58tbRs12iaXDKhUOW9gd4NlFA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-style=&quot;white-space: normal; background-color: rgb(255, 255, 255); color: rgb(62, 62, 62); letter-spacing: 0.544px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot; class=&quot;js_darkmode__155&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93589&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;往期推荐&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247492339_1&quot; data-recommend-article-time=&quot;1608135720&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsiazvlTvR0m4WxycPRkDc8elocOlB2xcqgK9E0JLc89V2ORIbicCesP0ccvqPPXndt0VtGyNnH61MZw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;线程池的7种创建方式，强烈推荐你用它...&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247492339&amp;amp;idx=1&amp;amp;sn=3667ed5b8e437b40024f5c3ba9f16789&amp;amp;chksm=fbcf8fcbccb806dd5cd7c63cca08103028bcdb36010636cdb30f8a3af506c3528075d9be1c12#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247492339&amp;amp;idx=1&amp;amp;sn=3667ed5b8e437b40024f5c3ba9f16789&amp;amp;chksm=fbcf8fcbccb806dd5cd7c63cca08103028bcdb36010636cdb30f8a3af506c3528075d9be1c12&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4266666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsiazvlTvR0m4WxycPRkDc8elocOlB2xcqgK9E0JLc89V2ORIbicCesP0ccvqPPXndt0VtGyNnH61MZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;线程池的7种创建方式，强烈推荐你用它...&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485452_1&quot; data-recommend-article-time=&quot;1589413500&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsiaXlw8IZYAfrsVrrG9ebvQGuTnqkGOrc5hE0hxPdcNBtZeHrPj6XEO2WaoKhUnhPCmJia8JibL71GfA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;Redis的自白：我为什么在单线程的这条路上越走越远？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247485452&amp;amp;idx=1&amp;amp;sn=ff1bebebf723979ef0b0de4633f9b8f1&amp;amp;chksm=fbcc6534ccbbec22c8b48646aa37787a08a407dfeb64dedbc422a73396d9d8ee5c89a45d3626#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247485452&amp;amp;idx=1&amp;amp;sn=ff1bebebf723979ef0b0de4633f9b8f1&amp;amp;chksm=fbcc6534ccbbec22c8b48646aa37787a08a407dfeb64dedbc422a73396d9d8ee5c89a45d3626&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCsiaXlw8IZYAfrsVrrG9ebvQGuTnqkGOrc5hE0hxPdcNBtZeHrPj6XEO2WaoKhUnhPCmJia8JibL71GfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;Redis的自白：我为什么在单线程的这条路上越走越远？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247485196_1&quot; data-recommend-article-time=&quot;1588435320&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCshGO7TzAM2pQ3hRhjQ8HkUxK6PXJ0hHvNGb40yJca5ZI4R6rJryicg1dyoqmpmOibmS2Bjvia8lfCjDg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;Redis 6.0 正式版终于发布了！除了多线程还有什么新功能？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247485196&amp;amp;idx=1&amp;amp;sn=278cfee6157e0040f24c4428cb328325&amp;amp;chksm=fbcc6a34ccbbe32226634da5a12cf8e966189785131e2e994ab11450fa42d0e189adbad80983#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTkwODE4Mw==&amp;amp;mid=2247485196&amp;amp;idx=1&amp;amp;sn=278cfee6157e0040f24c4428cb328325&amp;amp;chksm=fbcc6a34ccbbe32226634da5a12cf8e966189785131e2e994ab11450fa42d0e189adbad80983&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4266666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/HrWw6ZuXCshGO7TzAM2pQ3hRhjQ8HkUxK6PXJ0hHvNGb40yJca5ZI4R6rJryicg1dyoqmpmOibmS2Bjvia8lfCjDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;Redis 6.0 正式版终于发布了！除了多线程还有什么新功能？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;关注我，每天陪你进步一点点！&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template-id=&quot;1025112&quot; data-mpa-category=&quot;fav&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;174&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;174&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sZyAJtiaesWcjj4Y6b2RsYjjO4cmsA79vJcdrcO4D6qokzWYz648KfPTSlIhByeJlfsBkKiasXtxkbRLTTILQpibw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7bc4d3f0b84ef3d61e1b43565fc93ed5</guid>
<title>上新了 Spring，全新一代类型转换机制</title>
<link>https://toutiao.io/k/b04brot</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBqRgicGZnrPKlZPP8tnwvdHTQ9vfOI6XfJfBkKlNMZze9ibYBtazkc4jhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✍前言&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是YourBatman。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MTUwOTgyOQ==&amp;amp;mid=2247490866&amp;amp;idx=1&amp;amp;sn=9f9dafce23d861dc93dc5600852ab017&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;上篇文章&lt;/a&gt; 介绍完了Spring类型转换早期使用的PropertyEditor详细介绍，关于PropertyEditor现存的资料其实还蛮少的，希望这几篇文章能弥补这块空白，贡献一份微薄之力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你也吐槽过PropertyEditor不好用，那么本文将对会有帮助。Spring自&lt;strong&gt;3.0版本&lt;/strong&gt;开始自建了一套全新类型转换接口，这就是本文的主要内容，接下来逐步展开。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;说明：Spring自3.0后笑傲群雄，进入大一统。Java从此步入Spring的时代&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;版本约定&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Spring Framework：5.3.1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring Boot：2.4.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5807200929152149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBqdqKrF5SGs4mianXm7g31wsic9UP9HLPzc1ZYc72SZuWBtbicVhMtm0RBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;861&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✍正文&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在了解新一代的转换接口之前，先思考一个问题：&lt;strong&gt;Spring为何要自己造一套轮子呢？&lt;/strong&gt;  一向秉承不重复造轮子原则的Spring，不是迫不得已的话是不会去动他人奶酪的，毕竟互利共生才能长久。类型转换，作为Spring框架的基石，扮演着异常重要的角色，因此对其可扩展性、可维护性、高效性均有很高要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于此，我们先来了解下PropertyEditor设计上到底有哪些缺陷/不足（不能满足现代化需求），让Spring“被迫”走上了自建道路。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;PropertyEditor设计缺陷&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前提说明：本文指出它的设计缺陷，只讨论把它当做类型转换器在转换场景下存在的一些缺陷。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;职责不单一：该接口有非常多的方法，但只用到2个而已&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;类型不安全：setValue()方法入参是Object，getValue()返回值是Object，依赖于约定好的类型&lt;strong&gt;强转&lt;/strong&gt;，不安全&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;线程不安全：依赖于setValue()后getValue()，实例是线程不安全的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;语义不清晰：从语义上根本不能知道它是用于类型转换的组件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;只能用于String类型&lt;/strong&gt;：它只能进行&lt;strong&gt;String &amp;lt;-&amp;gt; 其它类型&lt;/strong&gt;的转换，而非更灵活的&lt;strong&gt;Object &amp;lt;-&amp;gt; Object&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PropertyEditor存在这五宗“罪”，让Spring决定自己设计一套全新API用于专门服务于类型转换，这就是本文标题所述：新一代类型转换Converter、ConverterFactory、GenericConverter。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;关于PropertyEditor在Spring中的详情介绍，请参见文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MTUwOTgyOQ==&amp;amp;mid=2247490866&amp;amp;idx=1&amp;amp;sn=9f9dafce23d861dc93dc5600852ab017&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;3. 搞定收工，PropertyEditor就到这&lt;/a&gt;&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;新一代类型转换&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决PropertyEditor作为类型转换方式的设计缺陷，Spring 3.0版本重新设计了一套类型转换接口，有3个核心接口：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Converter&amp;lt;S, T&amp;gt;&lt;/code&gt;：Source -&amp;gt; Target类型转换接口，适用于1:1转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ConverterFactory&amp;lt;S, R&amp;gt;&lt;/code&gt;：Source -&amp;gt; R类型转换接口，适用于1:N转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GenericConverter&lt;/code&gt;：更为通用的类型转换接口，适用于N:N转换&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;注意：就它没有泛型约束，因为是通用&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，还有一个条件接口&lt;code&gt;ConditionalConverter&lt;/code&gt;，可跟上面3个接口搭配组合使用，提供前置条件判断验证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套接口，解决了PropertyEditor做类型转换存在的&lt;strong&gt;所有缺陷&lt;/strong&gt;，且具有非常高的灵活性和可扩展性。下面进入详细了解。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Converter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将源类型S转换为目标类型T。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@FunctionalInterface&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Converter&lt;/span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;, &lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;T &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(S source)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是个函数式接口，接口定义非常简单。适合1:1转换场景：可以将任意类型 转换为 任意类型。它的实现类非常多，部分截图如下：&lt;img data-ratio=&quot;0.6566523605150214&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBqFGPicXc9haFjAic18EAlarm7keKud1BA6pP00vjWLxQxljT0oKdBf0yA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;466&quot;/&gt;值得注意的是：几乎所有实现类的访问权限都是&lt;code&gt;default/private&lt;/code&gt;，只有少数几个是public公开的，下面我用代码示例来“近距离”感受一下。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码示例&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * Converter：1:1&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;----------------StringToBooleanConverter---------------&quot;&lt;/span&gt;);&lt;br/&gt;    Converter&amp;lt;String, Boolean&amp;gt; converter = &lt;span&gt;new&lt;/span&gt; StringToBooleanConverter();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// trueValues.add(&quot;true&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// trueValues.add(&quot;on&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// trueValues.add(&quot;yes&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// trueValues.add(&quot;1&quot;);&lt;/span&gt;&lt;br/&gt;    System.out.println(converter.convert(&lt;span&gt;&quot;true&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(converter.convert(&lt;span&gt;&quot;1&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// falseValues.add(&quot;false&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// falseValues.add(&quot;off&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// falseValues.add(&quot;no&quot;);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// falseValues.add(&quot;0&quot;);&lt;/span&gt;&lt;br/&gt;    System.out.println(converter.convert(&lt;span&gt;&quot;FalSe&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(converter.convert(&lt;span&gt;&quot;off&quot;&lt;/span&gt;));&lt;br/&gt;    &lt;span&gt;// 注意：空串返回的是null&lt;/span&gt;&lt;br/&gt;    System.out.println(converter.convert(&lt;span&gt;&quot;&quot;&lt;/span&gt;));&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;----------------StringToCharsetConverter---------------&quot;&lt;/span&gt;);&lt;br/&gt;    Converter&amp;lt;String, Charset&amp;gt; converter2 = &lt;span&gt;new&lt;/span&gt; StringToCharsetConverter();&lt;br/&gt;    &lt;span&gt;// 中间横杠非必须，但强烈建议写上   不区分大小写&lt;/span&gt;&lt;br/&gt;    System.out.println(converter2.convert(&lt;span&gt;&quot;uTf-8&quot;&lt;/span&gt;));&lt;br/&gt;    System.out.println(converter2.convert(&lt;span&gt;&quot;utF8&quot;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，正常输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;----------------StringToBooleanConverter---------------&lt;br/&gt;&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;span&gt;null&lt;/span&gt;&lt;br/&gt;----------------StringToCharsetConverter---------------&lt;br/&gt;UTF-&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;UTF-&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说明：StringToBooleanConverter/StringToCharsetConverter访问权限都是default，外部不可直接使用。此处为了做示例用到一个小技巧 -&amp;gt; &lt;strong&gt;将Demo的报名调整为和转换器的一样，这样就可以直接访问&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注点：true/on/yes/1都能被正确转换为&lt;code&gt;true&lt;/code&gt;的，且对于英文字母来说一般都不区分大小写，增加了容错性（包括Charset的转换）。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;不足&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Converter用于解决1:1的任意类型转换，因此它必然存在一个不足：解决1:N转换问题需要写N遍，造成重复冗余代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;譬如：输入是字符串，它可以转为任意数字类型，包括byte、short、int、long、double等等，如果用Converter来转换的话每个类型都得写个转换器，想想都麻烦有木有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring早早就考虑到了该场景，提供了相应的接口来处理，它就是&lt;code&gt;ConverterFactory&amp;lt;S, R&amp;gt;&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;ConverterFactory&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从名称上看它代表一个转换工厂：可以将对象S转换为R的所有&lt;strong&gt;子类型&lt;/strong&gt;，从而形成1:N的关系。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;该接口描述为xxxFactory是非常合适的，很好的表达了1:N的关系&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ConverterFactory&lt;/span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;, &lt;span&gt;R&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt; &amp;lt;T extends R&amp;gt; &lt;span&gt;Converter&amp;lt;S, T&amp;gt; &lt;span&gt;getConverter&lt;/span&gt;&lt;span&gt;(Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它同样也是个函数式接口。该接口的实现类并不多，Spring Framework共提供了5个内建实现（访问权限全部为default）：&lt;img data-ratio=&quot;0.2555746140651801&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBq7uvVOxvjHQHOVj9YVnbMp9rdZDxJ97s6JmvBy8Ul3fHQyM6WBUa3hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;以StringToNumberConverterFactory为例看看实现的套路：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;StringToNumberConverterFactory&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConverterFactory&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;Number&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;public&lt;/span&gt; &amp;lt;T extends Number&amp;gt; &lt;span&gt;Converter&amp;lt;String, T&amp;gt; &lt;span&gt;getConverter&lt;/span&gt;&lt;span&gt;(Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; StringToNumber&amp;lt;T&amp;gt;(targetType);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 私有内部类：实现Converter接口。用泛型边界约束一类类型&lt;/span&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;StringToNumber&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Number&lt;/span&gt;&amp;gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Converter&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;, &lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Class&amp;lt;T&amp;gt; targetType;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;StringToNumber&lt;/span&gt;&lt;span&gt;(Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.targetType = targetType;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; T &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(String source)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (source.isEmpty()) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; NumberUtils.parseNumber(source, &lt;span&gt;this&lt;/span&gt;.targetType);&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由点知面，ConverterFactory作为Converter的工厂，对Converter进行包装，从而达到屏蔽内部实现的目的，对使用者友好，这不正是工厂模式的优点么，符合xxxFactory的语义。但你需要清除的是，工厂内部实现其实也是通过众多if else之类的去完成的，本质上并无差异。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码示例&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * ConverterFactory：1:N&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;----------------StringToNumberConverterFactory---------------&quot;&lt;/span&gt;);&lt;br/&gt;    ConverterFactory&amp;lt;String, Number&amp;gt; converterFactory = &lt;span&gt;new&lt;/span&gt; StringToNumberConverterFactory();&lt;br/&gt;    &lt;span&gt;// 注意：这里不能写基本数据类型。如int.class将抛错&lt;/span&gt;&lt;br/&gt;    System.out.println(converterFactory.getConverter(Integer&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;convert&lt;/span&gt;(&quot;1&quot;).&lt;span&gt;getClass&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;    System.out.println(converterFactory.getConverter(Double&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;convert&lt;/span&gt;(&quot;1.1&quot;).&lt;span&gt;getClass&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;    System.out.println(converterFactory.getConverter(Byte&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;convert&lt;/span&gt;(&quot;0&lt;span&gt;x11&lt;/span&gt;&quot;).&lt;span&gt;getClass&lt;/span&gt;())&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，正常输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;----------------StringToNumberConverterFactory---------------&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;lang&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;lang&lt;/span&gt;.&lt;span&gt;Double&lt;/span&gt;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;lang&lt;/span&gt;.&lt;span&gt;Byte&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注点：数字类型的字符串，是可以被转换为任意Java中的数字类型的，&lt;code&gt;String(1) -&amp;gt; Number(N)&lt;/code&gt;。这便就是ConverterFactory的功劳，它能处理这一类转换问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;不足&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然有了1:1、1:N，自然就有N:N。比如集合转换、数组转换、Map到Map的转换等等，这些N:N的场景，就需要借助下一个接口GenericConverter来实现。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;GenericConverter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它是一个&lt;strong&gt;通用的&lt;/strong&gt;转换接口，用于在两个或多个类型之间进行转换。相较于前两个，这是&lt;strong&gt;最灵活&lt;/strong&gt;的SPI转换器接口，但也是&lt;strong&gt;最复杂&lt;/strong&gt;的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;GenericConverter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;Set&amp;lt;ConvertiblePair&amp;gt; &lt;span&gt;getConvertibleTypes&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt; &lt;span&gt;Object &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;// 普通POJO&lt;/span&gt;&lt;br/&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConvertiblePair&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt; sourceType;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt; targetType;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该接口并非函数式接口，虽然方法不多但稍显复杂。现对出现的几个类型做简单介绍：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ConvertiblePair&lt;/code&gt;：维护sourceType和targetType的POJO&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;getConvertibleTypes()方法返回此Pair的&lt;strong&gt;Set集合&lt;/strong&gt;。由此也能看出该转换器是可以支持N:N的（大多数情况下只写一对值而已，也有写多对的）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;TypeDescriptor&lt;/code&gt;：类型描述。该类专用于Spring的类型转换场景，用于描述from or to的类型&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;比单独的Type类型强大，内部借助了ResolvableType来解决泛型议题&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GenericConverter的内置实现也比较多，部分截图如下：&lt;img data-ratio=&quot;0.6823308270676691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBqW7MoTAIE74V28lUEsXHrr3X5LwzOibfCnBv2N8C6Alrqcfq60BxLDjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;532&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;ConditionalGenericConverter&lt;/code&gt;是GenericConverter和条件接口ConditionalConverter的组合，作用是在执行GenericConverter转换时增加一个&lt;strong&gt;前置条件判断&lt;/strong&gt;方法。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;转换器&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;th&gt;示例&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ArrayToArrayConverter&lt;/td&gt;&lt;td&gt;数组转数组Object[] -&amp;gt; Object[]&lt;/td&gt;&lt;td&gt;[&quot;1&quot;,&quot;2&quot;] -&amp;gt; [1,2]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ArrayToCollectionConverter&lt;/td&gt;&lt;td&gt;数组转集合 Object[] -&amp;gt; Collection&lt;/td&gt;&lt;td&gt;同上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CollectionToCollectionConverter&lt;/td&gt;&lt;td&gt;数组转集合 Collection -&amp;gt; Collection&lt;/td&gt;&lt;td&gt;同上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;StringToCollectionConverter&lt;/td&gt;&lt;td&gt;字符串转集合String -&amp;gt; Collection&lt;/td&gt;&lt;td&gt;1,2 -&amp;gt; [1,2]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;StringToArrayConverter&lt;/td&gt;&lt;td&gt;字符串转数组String -&amp;gt; Array&lt;/td&gt;&lt;td&gt;同上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MapToMapConverter&lt;/td&gt;&lt;td&gt;Map -&amp;gt; Map(需特别注意：key和value都支持转换才行)&lt;/td&gt;&lt;td&gt;略&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CollectionToStringConverter&lt;/td&gt;&lt;td&gt;集合转字符串Collection -&amp;gt; String&lt;/td&gt;&lt;td&gt;[1,2] -&amp;gt; 1,2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ArrayToStringConverter&lt;/td&gt;&lt;td&gt;委托给CollectionToStringConverter完成&lt;/td&gt;&lt;td&gt;同上&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;「StreamConverter」&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;集合/数组 &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; Stream互转&lt;/td&gt;&lt;td&gt;集合/数组类型 -&amp;gt; Stream类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;「IdToEntityConverter」&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;ID-&amp;gt;Entity的转换&lt;/td&gt;&lt;td&gt;传入任意类型ID -&amp;gt; 一个Entity实例&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;「ObjectToObjectConverter」&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;很复杂的对象转换，任意对象之间&lt;/td&gt;&lt;td&gt;obj -&amp;gt; obj&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;「FallbackObjectToStringConverter」&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;上个转换器的兜底，调用Obj.toString()转换&lt;/td&gt;&lt;td&gt;obj -&amp;gt; String&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;说明：分割线下面的4个转换器比较特殊，字面上不好理解其实际作用，比较“高级”。它们如果能被运用在日常工作中可以&lt;strong&gt;事半功弎&lt;/strong&gt;，因此放在在下篇文章专门给你介绍&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以CollectionToCollectionConverter为例分析此转换器的“复杂”之处：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CollectionToCollectionConverter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ConditionalGenericConverter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ConversionService conversionService;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;CollectionToCollectionConverter&lt;/span&gt;&lt;span&gt;(ConversionService conversionService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.conversionService = conversionService;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;br/&gt; &lt;span&gt;// 集合转集合：如String集合转为Integer集合&lt;/span&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Set&amp;lt;ConvertiblePair&amp;gt; &lt;span&gt;getConvertibleTypes&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; Collections.singleton(&lt;span&gt;new&lt;/span&gt; ConvertiblePair(Collection&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;Collection&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;))&lt;/span&gt;;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是唯一构造器，必须传入ConversionService：元素与元素之间的转换是依赖于conversionService转换服务去完成的，最终完成集合到集合的转换。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CollectionToCollectionConverter：&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(TypeDescriptor sourceType, TypeDescriptor targetType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), &lt;span&gt;this&lt;/span&gt;.conversionService);&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断能否转换的依据：集合里的&lt;strong&gt;元素与元素之间&lt;/strong&gt;是否能够转换，底层依赖于&lt;code&gt;ConversionService#canConvert()&lt;/code&gt;这个API去完成判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来再看&lt;strong&gt;最复杂&lt;/strong&gt;的转换方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CollectionToCollectionConverter：&lt;br/&gt;&lt;br/&gt; &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (source == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  Collection&amp;lt;?&amp;gt; sourceCollection = (Collection&amp;lt;?&amp;gt;) source;&lt;br/&gt;&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;// 判断：这些情况下，将不用执行后续转换动作了，直接返回即可&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;boolean&lt;/span&gt; copyRequired = !targetType.getType().isInstance(source);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!copyRequired &amp;amp;&amp;amp; sourceCollection.isEmpty()) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; source;&lt;br/&gt;  }&lt;br/&gt;  TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (elementDesc == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !copyRequired) {&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; source;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  Collection&amp;lt;Object&amp;gt; target = CollectionFactory.createCollection(targetType.getType(),&lt;br/&gt;    (elementDesc != &lt;span&gt;null&lt;/span&gt; ? elementDesc.getType() : &lt;span&gt;null&lt;/span&gt;), sourceCollection.size());&lt;br/&gt;  &lt;span&gt;// 若目标类型没有指定泛型（没指定就是Object），不用遍历直接添加全部即可&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (elementDesc == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;   target.addAll(sourceCollection);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;   &lt;span&gt;// 遍历：一个一个元素的转，时间复杂度还是蛮高的&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;// 元素转元素委托给conversionService去完成&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;for&lt;/span&gt; (Object sourceElement : sourceCollection) {&lt;br/&gt;    Object targetElement = &lt;span&gt;this&lt;/span&gt;.conversionService.convert(sourceElement,&lt;br/&gt;      sourceType.elementTypeDescriptor(sourceElement), elementDesc);&lt;br/&gt;    target.add(targetElement);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (sourceElement != targetElement) {&lt;br/&gt;     copyRequired = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;   }&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (copyRequired ? target : source);&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该转换步骤稍微有点复杂，我帮你屡清楚后有这几个关键步骤：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;快速返回：对于特殊情况，做快速返回处理&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源集合为空，还转换个啥&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;目标集合没指定泛型，那就是Object，因此可以接纳一切，还转换个啥&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若目标元素类型是&lt;strong&gt;源&lt;/strong&gt;元素类型的子类型（或相同），就没有转换的必要了（copyRequired = false）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若源集合为空，或者目标集合&lt;strong&gt;没指定泛型&lt;/strong&gt;，也不需要做转换动作&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;若没有触发快速返回。给目标创建一个&lt;strong&gt;新集合&lt;/strong&gt;，然后把source的元素&lt;strong&gt;一个一个的&lt;/strong&gt;放进新集合里去，这里又分为两种处理case&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;若新集合（目标集合）没有指定泛型类型（那就是Object），就直接putAll即可，并不需要做类型转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若新集合（目标集合指定了泛型类型），就&lt;strong&gt;遍历&lt;/strong&gt;源集合委托&lt;code&gt;conversionService.convert()&lt;/code&gt;对元素一个一个的转&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码示例&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以CollectionToCollectionConverter做示范：&lt;code&gt;List&amp;lt;String&amp;gt; -&amp;gt; Set&amp;lt;Integer&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test3&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    System.out.println(&lt;span&gt;&quot;----------------CollectionToCollectionConverter---------------&quot;&lt;/span&gt;);&lt;br/&gt;    ConditionalGenericConverter conditionalGenericConverter = &lt;span&gt;new&lt;/span&gt; CollectionToCollectionConverter(&lt;span&gt;new&lt;/span&gt; DefaultConversionService());&lt;br/&gt;    &lt;span&gt;// 将Collection转为Collection（注意：没有指定泛型类型哦）&lt;/span&gt;&lt;br/&gt;    System.out.println(conditionalGenericConverter.getConvertibleTypes());&lt;br/&gt;&lt;br/&gt;    List&amp;lt;String&amp;gt; sourceList = Arrays.asList(&lt;span&gt;&quot;1&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;&quot;2&quot;&lt;/span&gt;, &lt;span&gt;&quot;3&quot;&lt;/span&gt;, &lt;span&gt;&quot;4&quot;&lt;/span&gt;);&lt;br/&gt;    TypeDescriptor sourceTypeDesp = TypeDescriptor.collection(List&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;TypeDescriptor&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;))&lt;/span&gt;;&lt;br/&gt;    TypeDescriptor targetTypeDesp = TypeDescriptor.collection(Set&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;TypeDescriptor&lt;/span&gt;.&lt;span&gt;valueOf&lt;/span&gt;(&lt;span&gt;Integer&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;))&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    System.out.println(conditionalGenericConverter.matches(sourceTypeDesp, targetTypeDesp));&lt;br/&gt;    Object convert = conditionalGenericConverter.convert(sourceList, sourceTypeDesp, targetTypeDesp);&lt;br/&gt;    System.out.println(convert.getClass());&lt;br/&gt;    System.out.println(convert);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行程序，正常输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[java.util.Collection -&amp;gt; java.util.Collection]&lt;br/&gt;&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;util&lt;/span&gt;.&lt;span&gt;LinkedHashSet&lt;/span&gt;&lt;br/&gt;[1, 2, 3, 4]&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注点：target最终使用的是LinkedHashSet来存储，这结果和&lt;code&gt;CollectionFactory#createCollection&lt;/code&gt;该API的实现逻辑是相关（Set类型默认创建的是LinkedHashSet实例）。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;不足&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说它的优点是功能强大，能够处理复杂类型的转换（PropertyEditor和前2个接口都只能转换&lt;strong&gt;单元素&lt;/strong&gt;类型），那么缺点就是使用、自定义实现起来比较复杂。这不&lt;strong&gt;官方&lt;/strong&gt;也给出了使用指导意见：在Converter/ConverterFactory接口能够满足条件的情况下，可不使用此接口就不使用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;ConditionalConverter&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;条件接口，@since 3.2。它可以为Converter、GenericConverter、ConverterFactory转换增加一个&lt;strong&gt;前置判断条件&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ConditionalConverter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;matches&lt;/span&gt;&lt;span&gt;(TypeDescriptor sourceType, TypeDescriptor targetType)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该接口的实现，截图如下：&lt;img data-ratio=&quot;1.022887323943662&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKLLXbx6ciciaw2Z7AwC5oAyBqCYs4Ov0l3LER2OiazHmhJc53GTeJuqjJGTBxP2lgGRjf9hIamA2g2zA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;568&quot;/&gt;可以看到，只有通用转换器GenericConverter和它进行了&lt;strong&gt;合体&lt;/strong&gt;。这也很容易理解，作为通用的转换器，加个前置判断将更加严谨和更安全。对于专用的转换器如Converter，它已明确规定了转换的类型，自然就不需要做前置判断喽。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;✍总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文详细介绍了Spring新一代的类型转换接口，类型转换作为Spring的基石，其重要性可见一斑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PropertyEditor作为Spring早期使用“转换器”，因存在众多设计缺陷自Spring 3.0起被新一代转换接口所取代，主要有：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Converter&amp;lt;S, T&amp;gt;&lt;/code&gt;：Source -&amp;gt; Target类型转换接口，适用于1:1转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ConverterFactory&amp;lt;S, R&amp;gt;&lt;/code&gt;：Source -&amp;gt; R类型转换接口，适用于1:N转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GenericConverter&lt;/code&gt;：更为通用的类型转换接口，适用于N:N转换&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下篇文章将针对于GenericConverter的几个特殊实现撰专文为你讲解，你也知道做难事必有所得，做难事才有可能破局、破圈，欢迎保持关注。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;✔✔✔推荐阅读✔✔✔&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【Spring类型转换】系列：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【Jackson】系列：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【数据校验Bean Validation】系列：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【新特性】系列：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;【程序人生】系列：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有诸如【Spring配置类】【Spring-static】【Spring数据绑定】【Spring Cloud Netflix】【Feign】【Ribbon】【Hystrix】...更多原创专栏，关注&lt;code&gt;BAT的乌托邦&lt;/code&gt;回复&lt;code&gt;专栏&lt;/code&gt;二字即可全部获取，分享、成长，拒绝浅藏辄止。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;有些专栏&lt;strong&gt;已完结&lt;/strong&gt;，有些正在&lt;strong&gt;连载中&lt;/strong&gt;，期待你的关注、共同进步&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>32ccb72bc3f7f8dcb2e0eb6a2a4ff736</guid>
<title>Golang 语言怎么使用 Viper 管理配置信息？</title>
<link>https://toutiao.io/k/dx10rju</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;什么是 Viper？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 是适用于 Go 应用程序（包括 Twelve-Factor App）的完整配置解决方案。它被设计为在应用程序中工作，并且可以处理所有类型的配置需求和格式。它支持：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可以将 Viper 视为满足您所有应用程序配置需求的注册表。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;为什么使用 Viper？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在构建现代应用程序时，您无需担心配置文件格式；您想专注于构建出色的软件。Viper 的出现就是为了在这方面给您提供帮助。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 为您执行以下操作：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;查找，加载和反序列化 JSON，TOML，YAML，HCL，INI，envfile 或 Java properties 格式的配置文件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供一种机制来为您的不同配置选项设置默认值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供一种机制来通过命令行参数覆盖指定的选项的值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提供别名系统，以在不会破坏现有代码的情况下轻松重命名参数。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户提供了与默认值相同的命令行或配置文件时，可以容易地于区分它们的区别。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 使用以下优先顺序。每个项目优先于其下面的项目：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;显式调用 Set 方法设置值&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;flag（命令行参数）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;env（环境变量）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;config（配置文件）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;key/value 存储&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认值&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重要：&lt;/strong&gt;Viper 配置项的 Key 不区分大小写。正在讨论是否设置为可选项。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;怎么将配置项写入 Viper？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;go &lt;span class=&quot;code-snippet__keyword&quot;&gt;get&lt;/span&gt; github.com/spf13/viper&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建立默认值&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一个好的配置系统应该支持默认值。默认值对于 Key 不是必须的，但是如果未通过配置文件，环境变量，远程配置或标志（flag）设置 Key 的值，那么 Key 的默认值很有用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;示例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ContentDir&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;content&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;LayoutDir&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;layouts&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Taxonomies&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__built_in&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tags&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;category&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;categories&quot;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;读取配置文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Viper 需要最少的配置，以便它知道在哪里寻找配置文件。Viper 支持JSON，TOML，YAML，HCL，INI，envfile 和 Java Properties 格式的文件。Viper 可以搜索多个路径，但是当前单个 Viper 实例仅支持单个配置文件。Viper 不会默认使用任何配置搜索路径，而会将默认决定留给应用程序。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面是如何使用 Viper 搜索和读取配置文件的示例。不需要任何特定路径，但至少需要提供一个配置文件的预期路径（见代码 3-5 行）。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;config&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddConfigPath(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/etc/appname/&quot;&lt;/span&gt;)   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddConfigPath(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;$HOME/.appname&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddConfigPath(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.&quot;&lt;/span&gt;)               &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.ReadInConfig() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Fatal error config file: %s \n&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;您可以处理未找到配置文件的特定情况，如下所示：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := viper.ReadInConfig(); err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; _, ok := err.(viper.ConfigFileNotFoundError); ok {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意 &lt;/strong&gt;[自 1.6]：您也可以有一个没有扩展名的文件， 并以编程方式指定格式。对于位于用户 $HOME 目录中的配置文件，没有任何扩展名，如 .bashrc&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写入配置文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从配置文件中读取文件很有用，但有时您希望存储运行时所做的所有修改。为此，有一堆命令可用，每个命令都有自己的用途：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;WriteConfig - 将当前 viper 配置写入预定义路径并覆盖（如果存在）。如果没有预定义的路径，则返回错误。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SafeWriteConfig - 将当前 viper 配置写入预定义路径。如果没有预定义的路径，则返回错误。如果存在，不会覆盖当前配置文件。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WriteConfigAs - 将当前 viper 配置写入给定的文件路径。将覆盖给定的文件（如果存在）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;SafeWriteConfigAs - 将当前 viper 配置写入给定的文件路径。如果存在，不会覆盖给定文件。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据经验，所有标有 safe 标记的方法都不会覆盖任何文件，而是直接创建（如果不存在），而默认行为是创建或截断。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个小示例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.WriteConfig() // writes current config to predefined path &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;viper.AddConfigPath()&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;viper.SetConfigName&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SafeWriteConfig()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.WriteConfigAs(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/path/to/my/.config&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SafeWriteConfigAs(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/path/to/my/.config&quot;&lt;/span&gt;) // will &lt;span class=&quot;code-snippet__keyword&quot;&gt;error&lt;/span&gt; since it has already been written&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SafeWriteConfigAs(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/path/to/my/.other_config&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;监控和重新读取配置文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Viper 支持在运行时让应用程序实时读取配置文件的能力。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要重新启动服务器才能使配置生效的日子已经一去不复返了，viper 支持的应用程序可以在运行时读取对配置文件的更新，并且不会错过任何更新。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;只需告诉 viper 实例 watchConfig。您可以为 Viper 提供一个回调函数，在每次发生更改时运行的该函数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;请确保在调用 WatchConfig() 之前添加了所有配置路径&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.&lt;span class=&quot;code-snippet__type&quot;&gt;WatchConfig&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.&lt;span class=&quot;code-snippet__type&quot;&gt;OnConfigChange&lt;/span&gt;(&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(e fsnotify.Event)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Config file changed:&quot;&lt;/span&gt;, e.&lt;span class=&quot;code-snippet__type&quot;&gt;Name&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从 io.Reader 读取配置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Viper 预定义许多配置源（如文件、环境变量、命令行参数和远程 K/V 存储，但您不受他们的约束。您还可以实现自己所需的配置源，并提供给 viper。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; yamlExample = []&lt;span class=&quot;code-snippet__keyword&quot;&gt;byte&lt;/span&gt;(`&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Hacker: &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;name: steve&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;hobbies:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- skateboarding&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- snowboarding&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;- go&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;clothing:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  jacket: leather&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  trousers: denim&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;age: &lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eyes : brown&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;beard: &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;`)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.ReadConfig(bytes.NewBuffer(yamlExample))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;name&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;覆盖设置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这些可能是来自命令行参数，也可以来自您自己的应用程序逻辑。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Verbose&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;LogFile&quot;&lt;/span&gt;, LogFile)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注册和使用别名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;别名允许由多个键引用单个值&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.RegisterAlias(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;loud&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Verbose&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;verbose&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;loud&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;)   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.GetBool(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;loud&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.GetBool(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;verbose&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用环境变量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Viper 完全支持环境变量。这使 Twelve-Factor App 开箱即用。有五种方法可以帮助使用 ENV：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 ENV 变量时，必须认识到 Viper 将 ENV 变量视为对大小敏感。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 提供了一种机制，用于尝试确保 ENV 变量是唯一的。通过使用 SetEnvPrefix，您可以告诉 Viper 在从环境变量读取时使用前缀。BindEnv 和AutomaticEnv 都将使用前缀。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;BindEnv 采用一个或多个参数。第一个参数是键名称，其余参数是要绑定到此键的环境变量的名称。如果提供了多个，它们将按指定顺序优先。环境变量的名称是大小写敏感。如果未提供 ENV 变量名称，则 Viper 将自动假定 ENV 变量与以下格式匹配：前缀 + &quot;_&quot; + 所有 CAPS 中的键名称。当您显式提供 ENV 变量名称（第二个参数）时，它不会自动添加前缀。例如，如果第二个参数为&quot;id&quot;，Viper 将查找 ENV 变量&quot;ID&quot;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 ENV 变量时，需要注意的一个重要问题是每次访问该值时都会重新读取该值。调用 BindEnv 时，viper 不会固定该值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;AutomaticEnv 是一个强大的帮助器，尤其是当与SerenvPrefix 结合。调用时，viper 将会在发出 viper.Get 请求时&lt;span&gt;，&lt;/span&gt;随时检查环境变量。它将应用以下规则。如果使用 EnvPrefix 设置了前缀，它将检查一个环境变量的名称是否与键匹配。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SetEnvKeyReplacer 允许您使用 strings.Replacer 对象将 Env 键在一定程度上重写。如果您想要使用 - 或者其它符号在 Get() 调用中，但希望环境变量使用 _ 分隔符，这非常有用。使用它的示例可以在 viper_test.go 中找到。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;或者，您也可以将 EnvKeyReplacer 与 NewWithOptions 工厂函数一起使用。与 SetEnvKeyReplacer 不同，它接受 StringReplacer 接口，允许您编写自定义字符串替换逻辑。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;默认情况下，空环境变量被视为未设置，并将回退到下一个配置源。若要将空环境变量视为已设置，请使用 AllowEmptyEnv 方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;环境变量-示例代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SetEnvPrefix(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;spf&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;BindEnv(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;os.Setenv(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;SPF_ID&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;13&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; := Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;id&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 Flags&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Viper 能够绑定到 flags。具体来说，viper 支持 Cobra 库中使用的 Pflags。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;与 BindEnv 一样，在调用绑定方法时，不会设置该值，而是在访问绑定方法时设置该值。这意味着您可以尽早绑定，即使在 init() 函数中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于单个 Flag，BindPFlag() 方法提供此功能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;serverCmd&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Flags&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Int&lt;/span&gt;(&quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;port&lt;/span&gt;&quot;, 1138, &quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;on&lt;/span&gt;&quot;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.BindPFlag&lt;/span&gt;(&quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;port&lt;/span&gt;&quot;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;serverCmd&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Flags&lt;/span&gt;()&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Lookup&lt;/span&gt;(&quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;port&lt;/span&gt;&quot;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;您还可以绑定一组现有的 pflags（pflag.FlagSet）：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pflag.Int(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;flagname&quot;&lt;/span&gt;, 1234, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;help message for flagname&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pflag.Parse()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.BindPFlags(pflag.CommandLine)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;i := viper.GetInt(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;flagname&quot;&lt;/span&gt;) // retrieve values from viper instead of pflag&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Viper 中使用 pflag 并不阻碍&lt;span&gt;其他包中&lt;/span&gt;使用标准库中的 flag 包。pflag 包可以通过导入这些 flags 来处理为 flag 包定义的 flags。这是通过调用一个&lt;span&gt;pflag 包提供的便利&lt;/span&gt;函数&lt;span&gt; AddGoFlagSet() &lt;/span&gt;实现的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;flag&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/spf13/pflag&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  flag.Int(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;flagname&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;1234&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;help message for flagname&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pflag.CommandLine.AddGoFlagSet(flag.CommandLine)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  pflag.Parse()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  viper.BindPFlags(pflag.CommandLine)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  i := viper.GetInt(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;flagname&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;flag 接口&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果您不使用 Pflags，&lt;/span&gt;Viper 提供两个 Go 接口来绑定其他 flag 系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;FlagValue 表示单个 flag。这是一个说明如何实现此接口的非常简单的示例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myFlag &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f myFlag)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;HasChanged&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; { &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f myFlag)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; { &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;my-flag-name&quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f myFlag)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ValueString&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; { &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;my-flag-value&quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f myFlag)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ValueType&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;string&lt;/span&gt;&lt;/span&gt; { &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;string&quot;&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一旦您的 flag 实现此接口，您只需告诉 Viper 将其绑定：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;viper&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.BindFlagValue&lt;/span&gt;(&quot;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;my-flag-name&lt;/span&gt;&quot;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;myFlag&lt;/span&gt;{})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;FlagValueSet&lt;span&gt; &lt;/span&gt;表示一组 flags。这是一个说明如何实现此接口的非常简单的示例：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; myFlagSet &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  flags []myFlag&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f myFlagSet)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;VisitAll&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(fn &lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;(FlagValue)&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, flag := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; flags {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fn(flag)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一旦您的 flag 集合实现此接口，您只需告诉 Viper 绑定它：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fSet := myFlagSet{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  flags: []myFlag{myFlag{}, myFlag{}},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.BindFlagValues(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;my-flags&quot;&lt;/span&gt;, fSet)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;远程 Key/Value 存储支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;若要在 Viper 中启用远程支持，请对 viper/remote 包进行空白导入：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; _ &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/spf13/viper/remote&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 将读取从 Key/Value 存储（例如 etcd 或 Consul ）中的路径检索到的配置字符串（如JSON，TOML，YAML，HCL 或 envfile）。这些值优先级高于默认值，但会被从磁盘，命令行参数（flag）或环境变量检索的配置值覆盖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 使用 crypt 从 K / V 存储中检索配置，这意味着如果您具有正确的 gpg 密钥，您可以将配置值加密后存储，并可以自动将其解密。加密是可选的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;您可以将远程配置与本地配置结合使用，也可以独立使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;crypt 有一个命令行帮助程序，您可以用来将配置放入 K / V 存储中。crypt 默认使用在 http://127.0.0.1:4001 上的 etcd。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; go get github.com/bketelsen/crypt/bin/crypt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; crypt &lt;span class=&quot;code-snippet__built_in&quot;&gt;set&lt;/span&gt; -plaintext /config/hugo.json /Users/hugo/settings/config.json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;确认已设置值：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; crypt get -plaintext /config/hugo.json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有关如何设置加密值或如何使用 Consul 的示例，请参见 crypt 文档。&lt;/p&gt;&lt;p&gt;https://github.com/bketelsen/crypt&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;远程 Key/Value 存储示例 - 未加密&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddRemoteProvider(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;etcd&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://127.0.0.1:4001&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/config/hugo.json&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;) // because there is no file extension in a stream of bytes, supported extensions are &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;toml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;properties&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;props&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;env&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dotenv&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.ReadRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Consul&lt;/span&gt;&lt;/p&gt;&lt;p&gt;您需要使用具有所需配置的 JSON 值设置 Consul 存储中的 key。例如，创建一个具有 JSON 值得 Consul key/value &lt;span&gt;存储的 &lt;/span&gt;key MY_CONSUL_KEY。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;8080&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;hostname&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;myhostname.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddRemoteProvider(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;consul&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;localhost:8500&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MY_CONSUL_KEY&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.ReadRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(viper.Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;fmt.Println(viper.Get(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Firestore&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddRemoteProvider(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;firestore&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;google-cloud-project-id&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;collection/document&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;) // Config&#x27;s format: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;toml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yml&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.ReadRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;当然，您也可以使用 SecureRemoteProvider&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;远程 Key/Value 存储示例 - 加密&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.AddSecureRemoteProvider(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;etcd&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://127.0.0.1:4001&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/config/hugo.json&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/etc/secrets/mykeyring.gpg&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;) // because there &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; no file extension &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; a stream of bytes,  supported extensions are &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;toml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;properties&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;props&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;env&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dotenv&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.ReadRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;监控 etcd 中的更改 - 未加密&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// alternatively, you can &lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; a &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; viper instance.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; runtime_viper = viper.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;runtime_viper.AddRemoteProvider(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;etcd&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;http://127.0.0.1:4001&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/config/hugo.yml&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;runtime_viper.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;) // because there &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;file&lt;/span&gt; extension &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; a stream &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;bytes&lt;/span&gt;, supported extensions &lt;span class=&quot;code-snippet__keyword&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;json&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;toml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yml&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;properties&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;props&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;env&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dotenv&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// &lt;span class=&quot;code-snippet__keyword&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; remote config the &lt;span class=&quot;code-snippet__keyword&quot;&gt;first&lt;/span&gt; time.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := runtime_viper.ReadRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// unmarshal config&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;runtime_viper.Unmarshal(&amp;amp;runtime_conf)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// &lt;span class=&quot;code-snippet__keyword&quot;&gt;open&lt;/span&gt; a goroutine &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; watch remote changes forever&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;go&lt;/span&gt; func(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      time.Sleep(time.Second * &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;) // delay &lt;span class=&quot;code-snippet__keyword&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;each&lt;/span&gt; request&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      // currently, &lt;span class=&quot;code-snippet__keyword&quot;&gt;only&lt;/span&gt; tested &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; etcd support&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      err := runtime_viper.WatchRemoteConfig()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != nil {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          log.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unable to read remote config: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          continue&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      // unmarshal &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; config &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; our runtime config struct. you can also &lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; channel&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      // &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; implement a signal &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; notify the &lt;span class=&quot;code-snippet__keyword&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; the changes&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      runtime_viper.Unmarshal(&amp;amp;runtime_conf)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;怎么在 Viper 中获取配置项？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Viper 中，有几种&lt;span&gt;根据值的类型&lt;/span&gt;获取值的方法。存在以下功能和方法：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Get(key string) : interface{}&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetBool(key string) : bool&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetFloat64(key string) : float64&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetInt(key string) : int&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetIntSlice(key string) : []int&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetString(key string) : string&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetStringMap(key string) : map[string]interface{}&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetStringMapString(key string) : map[string]string&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetStringSlice(key string) : []string&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetTime(key string) : time.Time&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GetDuration(key string) : time.Duration&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IsSet(key string) : bool&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;AllSettings() : map[string]interface{}&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;认识到的一件重要事情是，每个 Get 函数&lt;span&gt;如果&lt;/span&gt;&lt;span&gt;找&lt;/span&gt;&lt;span&gt;不到值&lt;/span&gt;，它将返回零值。为了检查给定键是否存在，提供了 IsSet() 方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;viper.GetString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;logfile&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; viper.GetBool(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;verbose&quot;&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    fmt.Println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;verbose enabled&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;访问嵌套键&lt;/span&gt;&lt;/p&gt;&lt;p&gt;访问器方法还接受深度嵌套键的格式化路径。例如，如果加载了以下JSON文件：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;host&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;5799&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;datastore&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;metric&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;3099&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;warehouse&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;198.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2112&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 可以通过传递「.」&lt;span&gt;分隔键的路径&lt;/span&gt;来访问嵌套字段：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GetString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;datastore.metric.host&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;遵守上面建立的优先级规则；搜索路径将遍历其余配置注册表，直到找到为止。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如，在给定此配置文件的情况下，datastore.metric.host 和 datastore.metric.port 均已定义（并且可以被覆盖）。如果另外在默认设置中定义了 datastore.metric.protocol，Viper 也会找到它。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是，如果 datastore.metric 被直接赋值覆盖（通过 flag，环境变量，Set() 方法等），则 datastore.metric 的所有子键也都变为未定义状态，它们被较高的优先级配置遮蔽（&lt;span&gt;shadowed&lt;/span&gt;）了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 可以使用路径中的数字访问数组索引。例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ports&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__number&quot;&gt;5799&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__number&quot;&gt;6029&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;datastore&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metric&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;3099&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;warehouse&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;198.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2112&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GetInt(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host.ports.1&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，如果存在与分隔的键路径匹配的键，则将返回其值。例如&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;datastore.metric.host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;5799&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;datastore&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metric&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;3099&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;warehouse&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;host&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;198.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;port&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;2112&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;GetString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;datastore.metric.host&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提取子树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在开发可重用模块时，提取配置的子集并传递给模块通常很有用。这样，模块可以实例化一次，就获取到不同的配置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如，应用程序可能出于不同的目的使用多个不同的缓存存储：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;cache&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  cache1:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;max&lt;/span&gt;-items: &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    item-&lt;span class=&quot;code-snippet__keyword&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  cache2:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;max&lt;/span&gt;-items: &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    item-&lt;span class=&quot;code-snippet__keyword&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们可以将缓存名称传递给模块（例如 NewCache(&quot;缓存1&quot;)，但访问配置键需要奇怪的串联，并且与全局配置的分离更少。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，与其这样做，我们不要将 Viper 实例传递给表示配置子集的构造函数：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cache1Config := viper.Sub(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;cache.cache1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; cache1Config == &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;cache configuration not found&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cache1 := NewCache(cache1Config)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;注意：始终检查 Sub 的返回值。如果找不到 Key，则返回 nil。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在内部，NewCache 函数可以直接处理 max-items 和 item-size 的键：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NewCache&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(v *Viper)&lt;/span&gt;&lt;/span&gt; *&lt;span class=&quot;code-snippet__type&quot;&gt;Cache&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&quot;code-snippet__type&quot;&gt;Cache&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;MaxItems&lt;/span&gt;: v.&lt;span class=&quot;code-snippet__type&quot;&gt;GetInt&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;max-items&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__type&quot;&gt;ItemSize&lt;/span&gt;: v.&lt;span class=&quot;code-snippet__type&quot;&gt;GetInt&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;item-size&quot;&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;生成的代码易于测试，因为它与主配置结构分离，并且更易于重用（出于同样的原因）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反序列化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;您还可以选择将所有值或特定值解析到 struct、map 和 etc。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有两种方法可以做到这一点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; config &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Port &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Name &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  PathMap &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`mapstructure:&quot;path_map&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; C config&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.Unmarshal(&amp;amp;C)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  t.Fatalf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unable to decode into struct, %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果要解析 Key 本身包含「.」（默认键分隔符）的配置，必须更改分隔符：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v := viper.NewWithOptions(viper.KeyDelimiter(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;::&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;chart::values&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ingress&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;annotations&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;traefik.frontend.rule.type&quot;&lt;/span&gt;:                 &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PathPrefix&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;traefik.ingress.kubernetes.io/ssl-redirect&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;true&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; config &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Chart &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Values &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]&lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; C config&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v.Unmarshal(&amp;amp;C)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 还支持解析到嵌入结构体：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; config &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Module &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Enabled &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    moduleConfig &lt;span class=&quot;code-snippet__string&quot;&gt;`mapstructure:&quot;,squash&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; moduleConfig &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Token &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; C config&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;err := viper.Unmarshal(&amp;amp;C)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  t.Fatalf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unable to decode into struct, %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 在内部使用 &lt;/p&gt;&lt;p&gt;github.com/mitchellh/mapstructure 解析值，默认情况下使用 mapstructure tag。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;序列化为字符串&lt;/span&gt;&lt;/p&gt;&lt;p&gt;您可能需要将 viper 中保存的所有设置序列化到字符串中，而不是将它们写入文件。您可以将您最喜爱的格式的序列化程序与 AllSettings() 返回的配置一起使用。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    yaml &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;gopkg.in/yaml.v2&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;yamlStringSettings&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; string {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; := viper.&lt;span class=&quot;code-snippet__type&quot;&gt;AllSettings&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    bs, err := yaml.&lt;span class=&quot;code-snippet__type&quot;&gt;Marshal&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        log.&lt;span class=&quot;code-snippet__type&quot;&gt;Fatalf&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unable to marshal config to YAML: %v&quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; string(bs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;05&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;使用单个 Viper 实例，还是使用多个 Viper 实例？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Viper 可以开箱即用。无需配置或初始化，就可以使用 Viper。由于大多数应用程序都希望使用单个中央存储库进行配置，因此 viper 包提供了此功能。它类似于单例模式。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在上面的所有示例中，他们都以单例模式风格演示了使用 Viper 的使用方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用多个 Viper 实例&lt;/span&gt;&lt;/p&gt;&lt;p&gt;您还可以创建许多不同的 Viper 实例，供应用程序使用。每个都有其独特的配置和值集。每个都可以从不同的配置文件、Key/Value 存储等读取。Viper 包支持的所有函数都镜像为 Viper 上的方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x := viper.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;y := viper.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ContentDir&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;content&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;y.SetDefault(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ContentDir&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;foobar&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;//...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当使用多个 Viper 时，由用户管理不同的 Viper。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;使用 Viper 读取配置文件的模拟示例&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;模拟示例的项目目录：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;configs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;│   └── &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.mod&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;├── &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.sum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;└── &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.go&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;配置文件：&lt;/p&gt;&lt;p&gt;configs/config.yaml&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Server&lt;/span&gt;:&lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;RunMode&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;debug&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;HttpPort&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;ReadTimeout&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;WriteTimeout&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 Viper 读取配置文件中的内容，并解码到 struct 中：&lt;/p&gt;&lt;p&gt;main.go&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; ServerSetting &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  RunMode      &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  HttpPort     &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ReadTimeout  time.Duration&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  WriteTimeout time.Duration&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; server ServerSetting&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vp := viper.New()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vp.SetConfigName(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;config&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vp.SetConfigType(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yaml&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  vp.AddConfigPath(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;configs/&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  err := vp.ReadInConfig()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Fatal error config file: %s\n&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  err = vp.UnmarshalKey(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Server&quot;&lt;/span&gt;, &amp;amp;server)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;panic&lt;/span&gt;(fmt.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;unable to decode into struct, %v&quot;&lt;/span&gt;, err))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Server: %+v\n&quot;&lt;/span&gt;, server)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;07&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;总结&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文是 Viper 开源库的 README 的中文翻译，文章内容介绍了什么是 Viper，Viper 包含哪些功能和 Viper 管理配置信息的不同方式的使用方法，以及不同方式之间的优先级顺序。翻译内容难免有不准确的地方，建议对照英文原稿阅读。文章结尾，还给出了一个使用 Viper 读取配置文件的模拟示例。截止发稿，Viper 的最新版本为 v1.7.1，并且作者目前正在收集使用反馈，为开发 v2.0 做准备。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5405405405405406&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gf7zJ2NXUibHrBBNc13c09hsck0LRuBWagGRXUlOPE7Nto7kj7M5peJTpdZlgatE5HwOkQibCPDOjUC0FfcboIbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;370&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注微信公众号，发送关键字「资料」，免费获取 Go 语言学习资料。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2982791586998088&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gf7zJ2NXUibGbVGM5xO1ib6r186S7X2WosN3GweyuAWdrDywTvE0DYoE6xa1ndbatz9QkuGwSysTNCKVSzjV9Qcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2092&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;https://github.com/spf13/viper&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Viper v2 反馈：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>00104a4e5ba7ead9af036ccb841613d1</guid>
<title>DataVisor 创始人谢映莲：智能生意应坚守数据道德，性别偏见存在但可以克服</title>
<link>https://toutiao.io/k/3pou4xw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;恐惧于一眼到底的人生&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;放弃教职加入微软&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;2005年，谢映莲完成卡内基梅隆计算机专业的博士学位，开始纠结于未来选择。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;卡内基梅隆位于美国匹兹堡，是计算机工业最初的推动者之一，计算机专业排名高居全美第二。有别于硅谷“技术创新+商业模式+金融资本”构成的自由氛围，匹兹堡的空气中弥漫着Old-School的保守醇香，“留在学界获得教职是更被尊敬的选择，不能留在学校的人才会考虑进入工业界。谷歌最早期的员工中有一位就是我导师带过的学生，他在商业领域取得了巨大成就，但导师一直很遗憾没能留住他任教”。在这样的氛围熏陶之下，谢映莲也拿到了一些大学的教职录取资格，但她迟迟没有下定决心：“一方面，我希望做学术研究，学院体系内部有着优良的学术环境；可另一方面，教职这条路一眼看得到头，做研究、发paper、拿到终身教职、做一辈子研究、发一辈子paper……一毕业就能看到自己退休的样子，这让我有些害怕。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最终，谢映莲做出了一个相对折衷的选择：在众多邀请中选择加入位于硅谷的微软研究院，“做学术研究、技术研究的同时，也能近距离观察工业界的运转模式。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“稳定”与“可能性”，每个人成长过程中都要面临的选择题，谢映莲选择了后者。这份发自心底的自信与好奇心，注定她日后会走上创业之路。但在当年走进微软研究院的她，对自己的定位还是一位学术研究者，在那里，她的30多位同事无一不是计算机某一领域内的顶级大牛，仅图灵奖得主就有三人。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;让人意想不到的是，大牛、巨佬环伺之下，这位被同事视作初丁的年轻人，迅速折腾出了一份巨大的声浪。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;遇见世界上另一个自己&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;微软经历奠定创业坚实基础&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;谢映莲对微软研究院有两个深刻的第一印象，“一是拿着螺丝刀给你装机器的人，是整个团队的director；二是他不负责指派工作，要自力更生，每个人都要找到自己感兴趣的项目去做”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入微软的第一个月，谢映莲先是尝试与团队的多位前辈大牛进行沟通，发现他们正在进行的项目并非自己志趣所在。也正是在这段时间里，她意外收获了自己的灵魂伴侣、至交好友，也是日后的创业搭档，同样来自江苏的俞舫。二人兴趣、背景接近，略一商议，决定合作创立一个网络信息安全项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一决定最初并不被团队内的前辈与同事看好，大家很友善地提醒她们，团队里有很多位资历极深、地位极高的巨咖，可以学习一下再考虑独立，但谢俞二人心意已决，项目旋即启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;出乎众人意料，仅仅半年之后，她们合作的论文便以极高的初审分数、“没有经过激烈的辩论讨论”便被全球顶级会议SIGCOMM收录，谢俞搭档在短短时间内取得了显著成绩令同事们刮目相看，“对于新加入的同事，大家本能地会观察一段时间，但只要你能展现出足够的能力，大家便会发自内心的祝贺并尊重你”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来7年，谢俞团队将大数据与大规模并行计算算法相结合，围绕“新的并行计算算法为安全反欺诈领域带来的革新”这一命题发表了大量论文，逐渐打造出了一套兼具技术核心竞争力和应用场景价值的数据智能体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了在学术领域不断精进，在这7年时间里，谢映莲和俞舫还锻炼出了相当不俗的沟通、推广等能力，“项目做大了，要寻找能够解决实际问题、有意义的课题，需要跟微软内部不同产品部门的同事打交道，要自己招实习生、创建和高校的合作……微软每年还有一个展会，研究院的各个项目组要向微软的工业体系介绍自己的项目，本质上是一次市场推广。现在想起来，在微软研究院这7年中培养了自己多方面的能力，比如沟通能力、合作能力、技术与商业价值场景结合的思维能力等等。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;强劲地向上成长，同时也不断刺激着内在自我认知的觉醒，谢映莲越来越清楚地意识到，研究领域与工业领域在很多地方存在明显脱节，她的兴趣逐渐从学术项目转向思考科技如何为工业界产生价值，怎样才能缩短工业界落地产品与最顶尖科技之间的距离、让技术落地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;显然，实现这一愿景不能只靠发论文、做项目，谢映莲不得不正视一个事实：微软研究院体系已经无法承载自己的梦想。在研究院的最后两年中，一面是难以施展抱负的委屈，一面是外界不断抛来的橄榄枝，许多公司找到谢俞团队——包括Yelp，询问“把数据给你们，希望你们帮助分析”的可能性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“继续从事科研，无非是一年再发几篇paper，这对我们的吸引力已经没有那么强了，我相信我们可以做更大的事情，这种想法，促使我们彻底迈出创业这一步。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2013年感恩节，谢映莲、俞舫告别微软研究院。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;没有投资、没有产品、没有团队，甚至没有一份成型的商业计划书——彻底到不能再彻底的裸辞。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;创业第一个冬天&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;被跳闸暖气冻伤的热情&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;2013年，DataVisor创建，次年成为陌陌的网络安全服务商。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015年9月，DataVisor完成一轮来自金沙江创投和恩颐投资（NEA）的融资。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年，滴滴投资人彭志坚决定投资&lt;span&gt;DataVisor&lt;/span&gt;，谢映莲第一反应“我们不需要融钱”……随后被说服，并决定正式进军中国市场。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年底，DataVisor分公司在北京成立，不到一年时间内先后与平安银行、京东、财付通、大众点评、阿里巴巴、陌陌等企业达成服务协议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2018年，华尔街评选全球25家最具潜力初创，DataVisor 赫然在列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2019年，DataVisor在2019网络安全卓越大奖斩获六项大奖，谢映莲被评为网络安全北美“年度女性”金奖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看着这条大跨步向前的发展时间线，让人难免好奇：2013年的那个冬天究竟发生了什么事，让DataVisor能够从没钱、没人、没产品的三无状态迅速启动？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大洋彼岸的爽快笑声自听筒传来：“其实我们那个冬天过得并不容易，创业是一件严肃的事情，创业起步还是非常艰苦的一个过程。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谢俞二人的创业构想之简单，可以用“天真”来形容：“找一个能静下心思考事情的办公室，偏一点也好。不着急招很大的团队，先找客户，有客户明确意向买单了再考虑融资和下一步。虽然对创业没有特别具体的构想，但就是想做这件事情，之前也有一些表达过意向的客户，还有口头打招呼想投资的朋友，让我们对这件事情多少有些信心。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2013年冬天，旧金山多雨。在研究院那些年里，谢俞出差常去西雅图，对通往旧金山的道路并不熟悉，偶尔出行也以火车为交通工具。可独立创业之后，为了尽量多的面见客户，二人不得不一次次顶风冒雨驱车前往，“把我们累得够呛。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗憾的是，客户反馈与她们的期待落差甚大，“即便之前表示过兴趣，可一看你们就两个人、什么都没有，大家难免会担心，其实可以理解。那时算是真正体会到了，事业起步阶段客户这一关真的不容易过。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“在见客户的同时，有一位在一家大企业供职的朋友说比较看好我们的东西，没准他的公司可以把我们收购了。我和俞舫一核计，两个人从微软研究院出来是为了做一番事业，不是为了马上再去另一个大公司，这条路我们不考虑。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;屋漏偏逢连夜雨，便宜租来的办公室也跟着添乱，暖气、电脑一起用一定跳闸，要工作就不能开暖气，要暖和就得关电脑……两位习惯了微软研究院舒适环境的IT巾帼豪杰，面对创业之初的艰苦与挫折，坚定推进着梦想。在旧金山冬雨的午后，她们搓着手、哈着气写下代码、构建模式，微笑着彼此鼓励，乐观拥抱一切的不顺遂、不尽意，不为外界的干扰所动摇。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生活总是奖励自信的强者。2014年初，旧金山一家咖啡店，谢映莲俞舫见到了陌陌创始人唐岩夫妇。对于这次见面她起初并没有抱太大希望，可唐岩夫妇却展示出了莫大的诚意与热情。彼时的陌陌已经出现成规模的欺诈现象，用户的迅猛增长使陌陌变成了被违法份子攻击的优选对象，而陌陌技术团队的注意力聚焦应对产品迅猛增长之上，没有余力解决安全问题。DataVisor利用无监督学习技术识别用户行为、预防欺诈等有害行为发生的技术方案，恰好与陌陌的需求完美契合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;客户到位的同时，融资与团队招募也取得了重大进展。谢俞二人的声名与学术成就吸引来了不少投资商， 同时随着数位技术大牛加盟团队，DataVisor突破了初创阶段，进入发展快车道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DataVisor的工作并非微软期间研究的延续，但“推动科技进步”的使命感与创新精神一脉相承，这种创新精神七年间持续鼓舞谢、俞二人在研究领域实现重大突破，并被她们带入到DataVisor，持续推动团队保持科技前沿水平。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;持续创新的同时，DataVisor也非常重视工业界影响力，注重培养将新技术工业化并带向市场的转化能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“DataVisor团队的使命就是要把最前沿的科技带到工业界，这也是DataVisor和其他公司的区别之处——持续创新。比如特斯拉，也是在创新的同时又实实在在为工业界作出价值”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;合伙默契·性别偏见·数据道德&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在采访最后，《科创人》问到了三个相对敏感的问题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;科创人：创业领域有一句俚语，“不要跟你的朋友合伙创业”，虽然有些极端但确实出现过友情与商业关系的冲突，您与俞舫的合作创业是否产生过类似的问题？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;谢映莲：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;业务技术层面肯定有过意见不一致、想法不同的情况，但通过长时间的合作，我们能够沟通和讨论来一起决定下一步。感情上也是非常要好的朋友，我们是技术上的同行、生活上的朋友，甚至老家都离得很近，性格也比较互补，我偏激进、性格相对外向，俞舫总是说“如果你面试的时候没有跳起来，那这个人一定不是你满意的”。她相对偏保守一些，我们搭档起来感觉很棒（笑）。其实最初我们考虑过，女性创业可能会遇到一些问题，所以我们也试着找了一些男性合伙人，不巧的是没有找到太合适的，我们看好的人对DataVisor兴趣不大，对DataVisor有兴趣的人我们又觉得方向不匹配。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;科创人：在IT领域女性从业者占比明显偏低，您如何看待这个现象？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;谢映莲：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;我认为性别偏见确实在一些情况下客观存在，这种偏见未必一定是恶意的，可总归会影响人们对一些事情的判断和看法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我自己的经历告诉我，要正视这些偏见的存在，偏见的严重性因人而异，无法对其严重性作出评价。我的想法是正视这些偏见的存在，但不要让偏见阻止你想做的事。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;科创人：DataVisor同时发力于中美两国市场，客观地说，两个市场对于数据安全的道德标准要求有差异，有人觉得数据应当更自由被使用，来产生更多价值，也有人说要更强力的保护好数据。DataVisor是否会在不同的市场中进行不同标准的操作？&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;谢映莲：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;创建DataVisor的初心，是维护互联网信息安全，数据安全显然在此范围之内，所以我们一定不会跨过数据道德的边界，试探都不会，这是非黑即白的事情，是企业存在的底线。无论在全球任何一个市场，我们的行为原则都是一致的。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>