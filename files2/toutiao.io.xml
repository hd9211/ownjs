<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>89ad2d48c5dffe72695c11323c3898de</guid>
<title>神奇！可在浏览器中运行终端命令行的开源工具</title>
<link>https://toutiao.io/k/hbxr41j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;【导语】：将 CLI 工具变成 Web 应用在浏览器端访问。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;GoTTY 是一个简单的命令行工具，可以将 CLI 工具转换为 Web 应用程序。GoTTY 是使用 xterm.js 和 hterm 在 Web 浏览器上运行基于 JavaScript 的终端。&lt;/p&gt;&lt;p&gt;GoTTY 本身提供了一个 websocket 服务器，它简单地将来自 TTY 的输出中转到客户端，并接收来自客户端的输入并将其转发到 TTY。这个 hterm + websocket 的想法受到 Wetty 的启发。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.gif&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;604&quot; data-rawheight=&quot;480&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;604&quot; data-rawheight=&quot;480&quot; data-thumbnail=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-b3bdeb6e57b24c0f211786d09dcb901c_b.gif&quot;/&gt;&lt;/figure&gt;&lt;p&gt;项目地址是：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/sorenisanerd/gotty&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/sorenisanerd&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/gotty&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;安装&lt;/b&gt;&lt;/h3&gt;&lt;h3&gt;&lt;b&gt;安装包安装&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;可以从 Releases 页面下载最新的稳定二进制文件进行安装，文件名中包含 darwin_amd64 的适用于 Mac 系统。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;https://github.com/sorenisanerd/gotty/releases  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;使用 Homebrew 安装&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ brew install sorenisanerd/gotty/gotty  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1020&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1020&quot; data-rawheight=&quot;554&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-5c81db5d629086fee8b7bb5d17dc7b77_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h3&gt;&lt;b&gt;使用 Go 安装&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;如果有 Go 语言环境，可以使用 go get 命令安装 GoTTY 。但是，此命令会从最新的 master 分支构建一个二进制文件，其中可能包含不稳定的代码。GoTTY 需要 go 1.9 或以上版本。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$ go get github.com/sorenisanerd/gotty  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;用法&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;gotty [options] &amp;lt;command&amp;gt; [&amp;lt;arguments...&amp;gt;]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用终端命令作为 gotty 的参数，如 gotty top。默认情况下，GoTTY 在端口 8080 启动 Web 服务器。在 Web 浏览器上打开 URL，可以看到正在运行的命令，就像在终端上运行一样。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;命令参数&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;--address value, -a value     要监听的 IP 地址(默认: &quot;0.0.0.0&quot;) [$GOTTY_ADDRESS]  
   --port value, -p value        要监听的端口号(默认: &quot;8080&quot;) [$GOTTY_PORT]  
   --path value, -m value        访问路径url(默认: &quot;/&quot;) [$GOTTY_PATH]  
   --permit-write, -w            允许客户端执行写操作(默认: false) [$GOTTY_PERMIT_WRITE]  
   --credential value, -c value  身份验证的凭证(如: 用户名:密码, 默认禁用) [$GOTTY_CREDENTIAL]  
   --random-url, -r              向 URL 添加一个随机字符串(默认: false) [$GOTTY_RANDOM_URL]  
   --random-url-length value     随机 URL 字符串的长度(默认: 8) [$GOTTY_RANDOM_URL_LENGTH]  
   --tls, -t                     启用 TLS/SSL (默认: false) [$GOTTY_TLS]  
   --tls-crt value               TLS/SSL 证书文件路径(默认: &quot;~/.gotty.crt&quot;) [$GOTTY_TLS_CRT]  
   --tls-key value               TLS/SSL 密钥文件路径(默认: &quot;~/.gotty.key&quot;) [$GOTTY_TLS_KEY]  
   --tls-ca-crt value            TLS/SSL 用于客户端认证的证书(默认: &quot;~/.gotty.ca.crt&quot;) [$GOTTY_TLS_CA_CRT]  
   --index value                 自定义 index.html 文件[$GOTTY_INDEX]  
   --title-format value          浏览器窗口的标题格式(默认: &quot;{{ .command }}@{{ .hostname }}&quot;) [$GOTTY_TITLE_FORMAT]  
   --reconnect                   启用重新连接(默认: false) [$GOTTY_RECONNECT]  
   --reconnect-time value        重新连接的时间(默认: 10) [$GOTTY_RECONNECT_TIME]  
   --max-connection value        gotty 的最大连接数(默认: 0) [$GOTTY_MAX_CONNECTION]  
   --once                        只接受一个客户端并在断开连接后退出(默认: false) [$GOTTY_ONCE]  
   --timeout value               等待客户端连接超时时间(0 表示禁用) (默认: 0) [$GOTTY_TIMEOUT]  
   --permit-arguments            允许客户端在 URL 中发送命令行参数(e.g. http://example.com:8080/?arg=AAA&amp;amp;arg=BBB) (默认: false) [$GOTTY_PERMIT_ARGUMENTS]  
   --width value                 屏幕的静态宽度，0(默认)表示动态调整大小 [$GOTTY_WIDTH]  
   --height value                屏幕的静态高度，0(默认)表示动态调整大小 [$GOTTY_HEIGHT]  
   --ws-origin value             与 WebSocket 源 URL 匹配的正则表达式。默认情况下不接受跨源请求 [$GOTTY_WS_ORIGIN]  
   --term value                  要在浏览器上使用的终端名称，xterm 或 hterm 之一. (默认: &quot;xterm&quot;) [$GOTTY_TERM]  
   --enable-webgl                启用 WebGL 渲染器(默认: true) [$GOTTY_ENABLE_WEBGL]  
   --close-signal value          当 gotty 停止命令时，发送到命令进程的信号(默认: SIGHUP) [$GOTTY_CLOSE_SIGNAL]  
   --close-timeout value         客户端断开后关闭进程的时间(默认: -1) [$GOTTY_CLOSE_TIMEOUT]  
   --config value                配置文件路径(默认: &quot;~/.gotty&quot;) [$GOTTY_CONFIG]  
   --help, -h                    查看帮助文档 (默认: false)  
   --version, -v                 打印当前版本 (默认: false)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;配置文件&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;可以通过配置文件来修改 gotty 的一些默认行为，默认会从 ~/.gotty 路径加载配置文件。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 使用 9000 端口进行监听  
port = &quot;9000&quot;  
  
// 启用 TSL/SSL  
enable_tls = true  
  
// 修改终端显示字体、颜色  
preferences {  
    font_size = 5  
    background_color = &quot;rgb(16, 16, 32)&quot;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;安全配置&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;默认情况下，GoTTY 只允许调整终端窗口大小，不允许客户端发送可能导致写入的命令。如果要允许客户端将输入写入 TTY 时，请添加 -w 选项。不过，接受来自远程客户端的输入对于大多数命令来说是危险的操作。&lt;/p&gt;&lt;p&gt;要限制客户端访问，可以使用 -c 选项启用基本身份验证。使用此选项，客户端需要输入指定的用户名和密码才能连接到 GoTTY 服务器。这种情况下，用户名和密码会以纯文本形式在服务器和客户端之间传输。如果对安全要求更高，请使用 SSL/TLS 证书身份验证。&lt;/p&gt;&lt;p&gt;-r 选项是一种更随意的限制访问方式。GoTTY 会生成一个随机 URL，以便只有知道该 URL 的人才能访问服务器。&lt;/p&gt;&lt;p&gt;默认情况下，服务器和客户端之间的所有流量都未加密。如果通过 GoTTY 发送机密信息，官方强烈建议使用 -t 在会话中启用 TLS/SSL。默认情况下，GoTTY 加载的 CRT和密钥文件放在 ~/.gotty.crt 和 ~/.gotty.key。可以使用 --tls-crt 和 --tls-key 选项指定证书文件路径。如果需要生成自签名认证文件时，可以使用openssl命令：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;openssl req -x509 -nodes -days 9999 -newkey rsa:2048 -keyout ~/.gotty.key -out ~/.gotty.crt  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>446c921068a05ba747dbe411ee8ea818</guid>
<title>聊聊 Spring Boot 项目引用第三平台私有 jar 踩到的坑</title>
<link>https://toutiao.io/k/lwp4q3t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.4482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/x3PUSozJwwAaJw4zXjqfPRUA7lJmekCwibg7BQjEA5DnAL3micemNQFaQ8qM1HKwxibZS7icibtYnBfZjXwSAice1RqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.4482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hY4KIU3VygBDHnandGNlscl5JDiaYsa0ADibK059RiaNjG21YZJZgr9qNRqjvDMQtbh0EqnBylWaIdBVB9vxfSibmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;最近和朋友闲聊，他说他遇到一个问题，他引用了第三方公司私有API包，他在本地项目启动没问题，打包运行却找不到这个API包，于是我就问他怎么引用这个jar。&lt;/p&gt;&lt;p&gt;他工程项目第三jar存放的位置类似如下&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7557077625570776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxIdkf8Ta2OMxib11Y5Bty7HgIXyQKhJLnPiaHOcKGfxwvsI7n5pM93QO4Ec06PmibzLELqr4rRHbWZsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;438&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在pom做如下引用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pom打包插件用springboot自带的插件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;看到这个插件，大概就知道问题所在了，springboot默认的打包插件是不会把systemscope的jar打进springboot项目的BOOT-INF/lib/。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; springboot项目默认会引用BOOT-INF/lib/里面的jar&lt;/p&gt;&lt;p&gt;于是我就跟朋友说，不要用systemscope了，直接搭建maven私仓，然后把第三方jar上传到私仓中，pom做如下引用&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;朋友给回复是公司没有私仓，我一脸懵逼，我就问他应该不至于吧，再次确认，得到他同样的回复后。后边就提供了下边的几种方案，让他参考选择&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;springboot如何引用没有发布到私仓的第三jar&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;strong&gt;整体思路&lt;/strong&gt;&lt;span&gt;：因为springboot提供的打包插件，默认是会把位于BOOT-INF/lib/里面的jar编译成class文件然后供项目引用。因此我们只需确保BOOT-INF/lib/里面含有我们要引用的第三方jar即可&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案一：pom指定jar范围为system+springboot插件加入includeSystemScope标签的属性为true&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;includeSystemScope&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;span&gt;includeSystemScope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案二：pom指定jar范围为system+resources标签引入要包含的jar&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;system&lt;span&gt;&amp;lt;/&lt;span&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib/demo-api.jar&lt;span&gt;&amp;lt;/&lt;span&gt;systemPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;resources&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;${project.basedir}/lib&lt;span&gt;&amp;lt;/&lt;span&gt;directory&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;targetPath&lt;/span&gt;&amp;gt;&lt;/span&gt;BOOT-INF/lib/&lt;span&gt;&amp;lt;/&lt;span&gt;targetPath&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;**/*.jar&lt;span&gt;&amp;lt;/&lt;span&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;includes&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;resource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;resources&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                            &lt;span&gt;&amp;lt;&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;repackage&lt;span&gt;&amp;lt;/&lt;span&gt;goal&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                        &lt;span&gt;&amp;lt;/&lt;span&gt;goals&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                    &lt;span&gt;&amp;lt;/&lt;span&gt;execution&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;executions&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案三：直接将第三方jar打进要发布的本地仓库&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.856020942408377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxIdkf8Ta2OMxib11Y5Bty7Hg85Pdria48HU2ibqHEIjGAK0Bz3dOh0Xmg4iasEOmdhVkvKfRNr7OAYTyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;/p&gt;&lt;p&gt;上图是maven官方的仓库流程图，其实对maven比较熟悉的朋友应该会知道，maven会先从本地仓库找jar，本地仓库找不到jar，就会再从私仓（如果有搭建私仓）里面找，私仓没有再从中央仓库找，然后找到的jar再存放到本地仓库。&lt;/p&gt;&lt;p&gt;因此我们执行如下命令就可以将第三方jar直接打进本地仓库&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn &lt;span&gt;install&lt;/span&gt;:&lt;span&gt;install&lt;/span&gt;-&lt;span&gt;file&lt;/span&gt; -DgroupId=org.example -DartifactId=demo-api -Dversion=&lt;span&gt;1.0&lt;/span&gt;-&lt;span&gt;SNAPSHOT&lt;/span&gt; -Dfile=F:\boot-thirdparty\lib\demo-api.jar -Dpackaging=jar&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;项目的pom直接像如下引入第三方jar即可&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo-api&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mYa0sCia1qwCvHOMJjG9CpYS2Dxg4BTswGyYqHicBiblUPjYtNVRRV8FfvmjHGrv2QDbXSTonQI2cxWbClolxgR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zG8IRvK3Jv7v7KkHWz3icB3KyTibM5FHc8agmPbXe6JmlEBp8DaAicJnXP6uGW3ib9GC27vCvuiadzB0wiaticmUqWAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方案四：搭建maven私仓，将第三方jar上传到maven私仓&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DVZP48AYchdT255kFMRWTzyhjz4G7gCkibZoIZzGyRL8tC8TmnwMNRXvnQzXIQfpXicBhryMc8v4iczz9jcOKVTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9411764705882353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O8ibmtKwBdw2y81ibxiaccicUBbaVmPQtu2EYiaUDwicb704E6QHad6o5oJhLeibDSMewvakJR9UNJ43ibibLCyYeAkWZVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 搭建私仓不在本文论述范围，就讲下如何将第三方jar上传到私仓&lt;/p&gt;&lt;p&gt;&lt;strong&gt;a、&lt;/strong&gt; 先在maven的settings.xml的servers标签配置如下内容&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;b、&lt;/strong&gt;&lt;span&gt; 执行发布命令行，如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn deploy:deploy-&lt;span&gt;file&lt;/span&gt; -DgroupId=org.example -DartifactId=demo-api -Dversion=&lt;span&gt;1.0&lt;/span&gt;-SNAPSHOT -Dpackaging=jar -Dfile=F:\boot-thirdparty\lib\demo-api.jar -Durl=你的私仓地址 -DrepositoryId=和settings.xml配置server标签id一致，如上的nexus&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;或者也可以利用maven私仓自带的可视化界面进行上传&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面几种方案，个人是比较倾向方案三和方案四，因为本来就是用maven来管理jar了，在项目中还要额外把jar引进来，然后再修改插件，看着就感觉有点变扭&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1be0c52e53a5f85dd8745edf06df0386</guid>
<title>一文理解 Kafka 的选举机制与 Rebalance 机制</title>
<link>https://toutiao.io/k/oaspge5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-source-line=&quot;1&quot;&gt;Kafka是一个高性能，高容错，多副本，可复制的分布式消息系统。在整个系统中，涉及到多处选举机制，被不少人搞混，这里总结一下，本篇文章大概会从三个方面来讲解。&lt;/p&gt;&lt;ol data-source-line=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;控制器（Broker）选举机制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区副本选举机制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消费组选举机制&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;7&quot;&gt;如果对Kafka不了解的话，可以先看这篇博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484251&amp;amp;idx=1&amp;amp;sn=92d6b50c5987f4f80316313db05b56ff&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文快速了解Kafka&lt;/a&gt;》。&lt;/p&gt;&lt;h2 data-source-line=&quot;9&quot;&gt;控制器选举&lt;/h2&gt;&lt;p data-source-line=&quot;11&quot;&gt;控制器是Kafka的核心组件，它的主要作用是在Zookeeper的帮助下管理和协调整个Kafka集群。集群中任意一个Broker都能充当控制器的角色，但在运行过程中，只能有一个Broker成为控制器。&lt;/p&gt;&lt;blockquote data-source-line=&quot;13&quot;&gt;&lt;p&gt;控制器的作用可以查看文末&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;15&quot;&gt;控制器选举可以认为是Broker的选举。&lt;/p&gt;&lt;p data-source-line=&quot;17&quot;&gt;集群中第一个启动的Broker会通过在Zookeeper中创建临时节点/controller来让自己成为控制器，其他Broker启动时也会在zookeeper中创建临时节点，但是发现节点已经存在，所以它们会收到一个异常，意识到控制器已经存在，那么就会在Zookeeper中创建watch对象，便于它们收到控制器变更的通知。&lt;/p&gt;&lt;p data-source-line=&quot;19&quot;&gt;那么如果控制器由于网络原因与Zookeeper断开连接或者异常退出，那么其他broker通过watch收到控制器变更的通知，就会去尝试创建临时节点/controller，如果有一个Broker创建成功，那么其他broker就会收到创建异常通知，也就意味着集群中已经有了控制器，其他Broker只需创建watch对象即可。&lt;/p&gt;&lt;p data-source-line=&quot;21&quot;&gt;如果集群中有一个Broker发生异常退出了，那么控制器就会检查这个broker是否有分区的副本leader，如果有那么这个分区就需要一个新的leader，此时控制器就会去遍历其他副本，决定哪一个成为新的leader，同时更新分区的ISR集合。&lt;/p&gt;&lt;p data-source-line=&quot;23&quot;&gt;如果有一个Broker加入集群中，那么控制器就会通过Broker ID去判断新加入的Broker中是否含有现有分区的副本，如果有，就会从分区副本中去同步数据。&lt;/p&gt;&lt;h3 data-source-line=&quot;25&quot;&gt;防止控制器脑裂&lt;/h3&gt;&lt;p data-source-line=&quot;27&quot;&gt;如果控制器所在broker挂掉了或者Full GC停顿时间太长超过zookeeper&lt;code&gt;session timeout&lt;/code&gt;出现假死，Kafka集群必须选举出新的控制器，但如果之前被取代的控制器又恢复正常了，它依旧是控制器身份，这样集群就会出现两个控制器，这就是控制器脑裂问题。&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;解决方法：&lt;/p&gt;&lt;p data-source-line=&quot;31&quot;&gt;为了解决Controller脑裂问题，ZooKeeper中还有一个与Controller有关的持久节点/controller_epoch，存放的是一个整形值的epoch number（纪元编号，也称为隔离令牌），集群中每选举一次控制器，就会通过Zookeeper创建一个数值更大的epoch number，如果有broker收到比这个epoch数值小的数据，就会忽略消息。&lt;/p&gt;&lt;h2 data-source-line=&quot;33&quot;&gt;分区副本选举机制&lt;/h2&gt;&lt;p data-source-line=&quot;35&quot;&gt;由控制器执行。&lt;/p&gt;&lt;ol data-source-line=&quot;37&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;从Zookeeper中读取当前分区的所有ISR(in-sync replicas)集合。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;调用配置的分区选择算法选择分区的leader。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;40&quot;&gt;Unclean leader选举&lt;/h3&gt;&lt;p data-source-line=&quot;42&quot;&gt;ISR是动态变化的，所以ISR列表就有为空的时候，ISR为空说明leader副本也挂掉了。此时Kafka要重新选举出新的leader。但ISR为空，怎么进行leader选举呢？&lt;/p&gt;&lt;p data-source-line=&quot;44&quot;&gt;Kafka把不在ISR列表中的存活副本称为“非同步副本”，这些副本中的消息远远落后于leader，如果选举这种副本作为leader的话就可能造成数据丢失。所以Kafka broker端提供了一个参数&lt;code&gt;unclean.leader.election.enable&lt;/code&gt;，用于控制是否允许非同步副本参与leader选举；如果开启，则当 ISR为空时就会从这些副本中选举新的leader，这个过程称为 Unclean leader选举。&lt;/p&gt;&lt;p data-source-line=&quot;46&quot;&gt;可以根据实际的业务场景选择是否开启Unclean leader选举。一般建议是关闭Unclean leader选举，因为通常数据的一致性要比可用性重要。&lt;/p&gt;&lt;h2 data-source-line=&quot;48&quot;&gt;消费组选主&lt;/h2&gt;&lt;p data-source-line=&quot;50&quot;&gt;在Kafka的消费端，会有一个消费者协调器以及消费组，组协调器（Group Coordinator）需要为消费组内的消费者选举出一个消费组的leader。&lt;/p&gt;&lt;p data-source-line=&quot;52&quot;&gt;如果消费组内还没有leader，那么第一个加入消费组的消费者即为消费组的leader，如果某一个时刻leader消费者由于某些原因退出了消费组，那么就会重新选举leader，选举方式如下：&lt;/p&gt;&lt;pre data-source-line=&quot;53&quot;&gt;&lt;code&gt;private val members = new mutable&lt;span&gt;.HashMap&lt;/span&gt;[String, MemberMetadata]&lt;br/&gt;leaderId = members&lt;span&gt;.keys&lt;/span&gt;&lt;span&gt;.headOption&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-source-line=&quot;57&quot;&gt;在组协调器中消费者的信息是以HashMap的形式存储的，其中key为消费者的member_id，而value是消费者相关的元数据信息。而leader的取值为HashMap中的第一个键值对的key（等同于随机）。&lt;/p&gt;&lt;blockquote data-source-line=&quot;59&quot;&gt;&lt;p&gt;消费组的Leader和Coordinator没有关联。消费组的leader负责Rebalance过程中消费分配方案的制定。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-source-line=&quot;61&quot;&gt;消费端Rebalance机制&lt;/h2&gt;&lt;p data-source-line=&quot;63&quot;&gt;就Kafka消费端而言，有一个难以避免的问题就是消费者的重平衡即Rebalance。Rebalance是让一个消费组的所有消费者就如何消费订阅topic的所有分区达成共识的过程，在Rebalance过程中，所有Consumer实例都会停止消费，等待Rebalance的完成。因为要停止消费等待重平衡完成，因此Rebalance会严重影响消费端的TPS，是应当尽量避免的。&lt;/p&gt;&lt;h3 data-source-line=&quot;65&quot;&gt;触发Rebalance的时机&lt;/h3&gt;&lt;p data-source-line=&quot;67&quot;&gt;Rebalance 的触发条件有3个。&lt;/p&gt;&lt;ol data-source-line=&quot;69&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;消费组成员个数发生变化。例如有新的Consumer实例加入或离开该消费组。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;订阅的 Topic 个数发生变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;订阅 Topic 的分区数发生变化。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;73&quot;&gt;Rebalance 发生时，Group 下所有Consumer 实例都会协调在一起共同参与，kafka 能够保证尽量达到最公平的分配。但是 Rebalance 过程对 consumer group 会造成比较严重的影响。在 Rebalance 的过程中 consumer group 下的所有消费者实例都会停止工作，等待 Rebalance 过程完成。&lt;/p&gt;&lt;h3 data-source-line=&quot;75&quot;&gt;Rebalance过程&lt;/h3&gt;&lt;p data-source-line=&quot;77&quot;&gt;Rebalance过程分为两步：Join和Sync。&lt;/p&gt;&lt;ol data-source-line=&quot;79&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Join。所有成员都向Group Coordinator发送JoinGroup请求，请求加入消费组。一旦所有成员都发送了JoinGroup请求，Coordinator会从中选择一个Consumer担任leader的角色，并把组成员信息以及订阅信息发给leader——注意leader和coordinator不是一个概念。leader负责消费分配方案的制定。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;81&quot;&gt;&lt;img data-ratio=&quot;0.3856812933025404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8weyPqYO6CLpXT6VBCqOOk6lufAZF72wCaMfEWg3GQfricGZrVnHI5DyZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;83&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Sync。这一步leader开始分配消费方案，即哪个consumer负责消费哪些topic的哪些partition。一旦完成分配，leader会将这个方案封装进SyncGroup请求中发给coordinator，非leader也会发SyncGroup请求，只是内容为空。coordinator接收到分配方案之后会把方案塞进SyncGroup的response中发给各个consumer。这样组内的所有成员就都知道自己应该消费哪些分区了。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;85&quot;&gt;&lt;img data-ratio=&quot;0.42032332563510394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8wehribjEppQw8B1zjpqOmgPkicKDsSLkjGO55SvbURnI5RrGs8VibLVY9xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;h3 data-source-line=&quot;87&quot;&gt;避免不必要的Rebalance&lt;/h3&gt;&lt;p data-source-line=&quot;89&quot;&gt;前面说过Rebalance发生的时机有三个，后两个时机是可以人为避免的。发生Rebalance最常见的原因是消费组成员个数发生变化。&lt;/p&gt;&lt;p data-source-line=&quot;91&quot;&gt;这其中消费者成员正常的添加和停掉导致Rebalance，也是无法避免。但是在某些情况下，Consumer实例会被Coordinator错误地认为已停止从而被踢出Group。从而导致rebalance。&lt;/p&gt;&lt;p data-source-line=&quot;93&quot;&gt;这种情况可以通过Consumer端的参数&lt;code&gt;session.timeout.ms&lt;/code&gt;和&lt;code&gt;max.poll.interval.ms&lt;/code&gt;进行配置。&lt;/p&gt;&lt;blockquote data-source-line=&quot;95&quot;&gt;&lt;p&gt;有关这种情况，可以查看博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247484391&amp;amp;idx=1&amp;amp;sn=09fc29827f315a20619551473f009531&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;一文理解Kafka重复消费的原因和解决方案&lt;/a&gt;》&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;97&quot;&gt;除了这个参数，Consumer还提供了控制发送心跳请求频率的参数，就是&lt;code&gt;heartbeat.interval.ms&lt;/code&gt;。这个值设置得越小，Consumer实例发送心跳请求的频率就越高。频繁地发送心跳请求会额外消耗带宽资源，但好处是能够更快地知道是否开启Rebalance，因为Coordinator通知各个Consumer实例是否开启Rebalance就是将REBALANCE_NEEDED标志封装进心跳请求的响应体中。&lt;/p&gt;&lt;p data-source-line=&quot;99&quot;&gt;总之，要为业务处理逻辑留下充足的时间使Consumer不会因为处理这些消息的时间太长而引发Rebalance，但也不能时间设置过长导致Consumer宕机但迟迟没有被踢出Group。&lt;/p&gt;&lt;h2 data-source-line=&quot;101&quot;&gt;补充&lt;/h2&gt;&lt;h3 data-source-line=&quot;103&quot;&gt;Kafka控制器的作用&lt;/h3&gt;&lt;p data-source-line=&quot;105&quot;&gt;Kafka控制器的作用是管理和协调Kafka集群，具体如下：&lt;/p&gt;&lt;ol data-source-line=&quot;107&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;主题管理：创建、删除Topic，以及增加Topic分区等操作都是由控制器执行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区重分配：执行Kafka的reassign脚本对Topic分区重分配的操作，也是由控制器实现。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Preferred leader选举。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;111&quot;&gt;&lt;p&gt;因为在Kafka集群长时间运行中，broker的宕机或崩溃是不可避免的，leader就会发生转移，即使broker重新回来，也不会是leader了。在众多leader的转移过程中，就会产生leader不均衡现象，可能一小部分broker上有大量的leader，影响了整个集群的性能，所以就需要把leader调整回最初的broker上，这就需要Preferred leader选举。&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;4&quot; data-source-line=&quot;113&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;集群成员管理：控制器能够监控新broker的增加，broker的主动关闭与被动宕机，进而做其他工作。这也是利用Zookeeper的ZNode模型和Watcher机制，控制器会监听Zookeeper中/brokers/ids下临时节点的变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据服务：控制器上保存了最全的集群元数据信息，其他所有broker会定期接收控制器发来的元数据更新请求，从而更新其内存中的缓存数据。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-source-line=&quot;116&quot;&gt;Kafka协调器&lt;/h3&gt;&lt;p data-source-line=&quot;118&quot;&gt;Kafka中主要有两种协调器：&lt;/p&gt;&lt;ol data-source-line=&quot;120&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;组协调器（Group Coordinator）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消费者协调器（Consumer Coordinator）&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;123&quot;&gt;Kafka为了更好的实现消费组成员管理、位移管理以及Rebalance等，broker服务端引入了组协调器（Group Coordinator），消费端引入了消费者协调器（Consumer Coordinator）。&lt;/p&gt;&lt;p data-source-line=&quot;125&quot;&gt;每个broker启动时，都会创建一个组协调器实例，负责监控这个消费组里的所有消费者的心跳以及判断是否宕机，然后开启消费者Rebalance。&lt;/p&gt;&lt;p data-source-line=&quot;127&quot;&gt;每个Consumer启动时，会创建一个消费者协调器实例并会向Kafka集群中的某个节点发送FindCoordinatorRequest请求来查找对应的组协调器，并跟其建立网络连接。&lt;/p&gt;&lt;p data-source-line=&quot;129&quot;&gt;&lt;img data-ratio=&quot;0.4222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7GkYyUQ3uicbnn8hX8n5Q8wefvcZJkrXDj6aj1ibwM2QXUtakFZ5ZfEpU5BLwHo9vDGk0EOIdCtTxxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;131&quot;&gt;客户端的消费者协调器和服务端的组协调器会通过心跳保持通信。&lt;/p&gt;&lt;h3 data-source-line=&quot;133&quot;&gt;Kafka舍弃ZooKeeper的理由&lt;/h3&gt;&lt;p data-source-line=&quot;135&quot;&gt;Kafka目前强依赖于ZooKeeper：ZooKeeper为Kafka提供了元数据的管理，例如一些Broker的信息、主题数据、分区数据等等，还有一些选举、扩容等机制也都依赖ZooKeeper。&lt;/p&gt;&lt;ol data-source-line=&quot;137&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;运维复杂度&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;139&quot;&gt;运维Kafka的同时需要保证一个高可用的Zookeeper集群，增加了运维和故障排查的复杂度。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;141&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;性能差&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-source-line=&quot;143&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;在一些大公司，Kafka集群比较大，分区数很多的时候，ZooKeeper存储的元数据就会很多，性能就会变差。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;ZooKeeper需要选举，选举的过程中是无法提供服务的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Zookeeper节点如果频繁发生Full Gc，与客户端的会话将超时，由于无法响应客户端的心跳请求，从而与会话相关联的临时节点也会被删除。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-source-line=&quot;147&quot;&gt;所以Kafka 2.8版本上支持内部的quorum服务来替换ZooKeeper的工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ce9eda7226d96190e5c59b4b637b3edb</guid>
<title>PHP 祖传代码拯救者 Deliverer 他，来了</title>
<link>https://toutiao.io/k/6w9ol9z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;blog-content&quot; class=&quot;blog-content smoothing markdown-body&quot;&gt;
    



    &lt;p&gt;前几日有位群友接手一段祖传代码，排查很久没有解决，准备提桶跑路，最终帮其解决，完整的过程见 &lt;a href=&quot;https://mengkang.net/1470.html&quot;&gt;https://mengkang.net/1470.html&lt;/a&gt; 但是最后代码的定位我有一些基于个人经验，实际调用的链路和我预计的不一样，都是靠猜。没有看到完整的调用链路，所以我想着需要一个工具来辅助明确查询到整个完整的调用链。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;所以搞了这么个工具，主要是用于一些不熟悉的项目，而且日常环境不好复现的线上场景。&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;&lt;code&gt;deliverer&lt;/code&gt; 祖传代码跑路拯救者 &lt;a href=&quot;https://github.com/zhoumengkang/deliverer&quot;&gt;https://github.com/zhoumengkang/deliverer&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果你的项目不是那么糟糕，日常环境都 ok，那么熟悉一个项目最好的方式还是 xdebug，这个工具主要是排查线上问题。&lt;br/&gt;类似的工具有 360 的 phptrace 实现原理上稍微有点不同&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;blog-title-1&quot;&gt;功能点&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;可以根据&lt;code&gt;函数名&lt;/code&gt;、&lt;code&gt;类名&lt;/code&gt;、&lt;code&gt;方法名&lt;/code&gt;、&lt;code&gt;路由&lt;/code&gt;来过滤输出&lt;/li&gt;&lt;li&gt;可以在查询到指定过滤内容 n 次之后退出&lt;/li&gt;&lt;li&gt;可以根据 request id 回放细看整个完整的调用链&lt;/li&gt;&lt;li&gt;过滤的内容会高亮显示&lt;/li&gt;&lt;li&gt;调用栈比较深的可以指定 -l 来隐藏深度调用的展示&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;blog-title-2&quot;&gt;原理&lt;/h1&gt;&lt;p&gt;其实比较简单，分两步，第一步收集日志，第二步分析日志。&lt;/p&gt;&lt;h2 id=&quot;blog-title-3&quot;&gt;第一步&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;PHP_MINIT&lt;/code&gt;阶段，通过&lt;code&gt;zend_set_user_opcode_handler&lt;/code&gt; 来设置对 &lt;code&gt;ZEND_DO_UCALL&lt;/code&gt; 、&lt;code&gt;ZEND_DO_FCALL_BY_NAME&lt;/code&gt;、&lt;code&gt;ZEND_DO_FCALL&lt;/code&gt; 三类 &lt;code&gt;opcode&lt;/code&gt; 的处理分析。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注意其中会涵盖一些内置函数和方法的调用，我们可以通过类型进行过滤。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后在&lt;code&gt;PHP_RINIT&lt;/code&gt;阶段新建日志文件，写入请求的信息&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pid-ts sapi http_method http_url&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请求过程中在自定义的 handler 里面打印调用栈信息&lt;/p&gt;&lt;p&gt;最后在&lt;code&gt;PHP_RSHUTDOWN&lt;/code&gt;关闭日志文件的写入&lt;/p&gt;&lt;h2 id=&quot;blog-title-4&quot;&gt;第二步&lt;/h2&gt;&lt;p&gt;对收集好的日志，利用&lt;code&gt;bin/deliverer&lt;/code&gt;进行分析和整理，这块是 php 脚本，就不赘述了。&lt;/p&gt;&lt;h1 id=&quot;blog-title-5&quot;&gt;安装使用&lt;/h1&gt;&lt;h2 id=&quot;blog-title-6&quot;&gt;编译&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ phpize
$ ./configure --with-php-config=/usr/local/php/bin/php-config
$ make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-7&quot;&gt;配置 php.ini&lt;/h2&gt;&lt;p&gt;追加&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;[deliverer]
extension=deliverer.so&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-8&quot;&gt;重启 php-fpm&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo service php-fpm restart&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;blog-title-9&quot;&gt;使用分析工具&lt;/h2&gt;&lt;p&gt;可以移动&lt;code&gt;./bin/deliverer&lt;/code&gt;到你觉得合适的目录，假如在当前目录&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ chmod +x deliverer&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用一段我自己很久之前的祖传代码（我的博客）来跑下&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -t&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样会一直监控所有的 php 进程的执行&lt;/p&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420468155102.jpg&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -tAction::initUser -n3 -l5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420481407372.jpg&quot;/&gt;&lt;br/&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420488305285.jpg&quot;/&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;值&lt;/th&gt;&lt;th&gt;解释&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;-t&lt;/td&gt;&lt;td&gt;Action::initUser&lt;/td&gt;&lt;td&gt;过滤包含该调用的请求&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-n&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;统计三次然后退出&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;-l&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;函数（方法）调用深度显示，最多显示 5 层，超出部分在末尾标出&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -v7979-1624369150991941&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过 &lt;code&gt;-v&lt;/code&gt; &lt;code&gt;requestId&lt;/code&gt; 来详细查看完整调用栈&lt;/p&gt;&lt;p&gt;&lt;img data-original=&quot;/upload/image/2021/0623/1624420502378165.jpg&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./bin/deliverer -tSqlExecute::getAll -n1 -l3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当要查询方法，函数调用栈过深，不在层级查询范围之内，则其外层调用显示红色&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/upload/image/2021/0623/1624420511944914.jpg&quot; alt=&quot;PHP 祖传代码拯救者 Deliverer 他，来了！&quot;/&gt;&lt;/p&gt;&lt;h1 id=&quot;blog-title-10&quot;&gt;todo&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;配置项优化&lt;/li&gt;&lt;li&gt;命令行和扩展联动配置&lt;/li&gt;&lt;li&gt;其他版本还未做兼容，本周跟上&lt;/li&gt;&lt;/ol&gt;            &lt;blockquote class=&quot;blog-header-tip&quot;&gt;
            &lt;p&gt;原创博客，如需转载，请联系 i@mengkang.net&lt;br/&gt;链接：&lt;a href=&quot;https://mengkang.net/1473.html&quot;&gt;https://mengkang.net/1473.html&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;img data-original=&quot;/upload/image/2021/0615/1623765378553484.jpg&quot;/&gt;
&lt;/div&gt;            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5ab65a7719282265e4369f2af7f1fafe</guid>
<title>查找字符串的 KMP 算法</title>
<link>https://toutiao.io/k/juf2z47</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span/&gt;“在一个字符串S中查找一个词W出现的位”是一道常见的面试题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相对于那些要对树、图进行操作的算法，这个算法要处理的是一维线性的字符序列。看起来似乎简单不少，那么算法难度会更低吗？让我们来看看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简单直接的字符串查找算法 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算法原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，如果只是笼统地从一个字符串中查找另一个字符串，有一种很&lt;strong&gt;直接的方法&lt;/strong&gt;，那就是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;算法流程图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本算法流程图如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9920159680638723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdibB3t2jCibulTkOOibicNW1XGErp2dyG4Qb4cSdgHd2dtlAookEXb6vCkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;算法运行示例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照它进行字符串查找的案例如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.93671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdxUDa7ibNv7KsMCHoDibbJZMNh5tBHmYvDaXCxSKOj68Ep3e2hGe4acrg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算法性能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个算法又简单又好操作，唯一的缺点&lt;/span&gt;&lt;span&gt;是有点慢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUd6KptMhbF6NAKgsqTW0QazJapOEzHF2NnI2F3y7ibd0BOuc5mF1gwu0w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设 S 的长度为 n 而 W的长度为 m，则这个直接算法的时间复杂度是 O(n*m)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有没有效率更高的，时间复杂度类似 O(n)的算法呢？&lt;/span&gt;&lt;span&gt;还真的有，这个算法的名字叫做 KMP算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高效率的 KMP 算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算法历史&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;K, M, P 这三个字母是本算法的三位发明人名字的缩写，这三位是：Knuth (大名鼎鼎的高德纳)，Morris，和 Pratt。三人于1977年联合发表了该算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.43434343434343436&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdtzbibKxcdMuN0KkwJL6UTSxU2jNTJ2pt4qpIbmAibhIMEJlOAnMnoVhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;对直接匹配法的改进&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面直接匹配算法中，为什么每次匹配失败后，重新开始匹配后S上的基点都只是相较上一次后移一个位置，而不是将之前匹配过的部分都跳过呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如上面的例子，为什么不能像下面这样运行呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdocc8XXxXxCwbgSmr2SUIBX9smCxvxPrHoGRdJPnUHJ5oqf7YztBHgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样看起来也挺好嘛。如果把匹配过的都跳过去，那整个算法的时间复杂度不就变成 O（n）了吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;改进引出的错误&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么不跳？那是因为，如果这么跳的化就会出现下面这样的情况：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设我们在&quot;ababababcdcd&quot; 中查找&quot;abababc&quot;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一轮匹配我们就能匹配上6个字符。&lt;/span&gt;&lt;span&gt;如果第二轮匹配我们一下子就跳过这 6 &lt;/span&gt;&lt;span&gt;个字符，直接从s &lt;/span&gt;&lt;span&gt;的第7个字符开&lt;/span&gt;&lt;span&gt;始，那最终的结果肯定是&lt;/span&gt;&lt;span&gt;从 s &lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span&gt;无法查找到w&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;abcdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w: &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;cdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w:             &lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;ababc&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;cdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w:                 &lt;/span&gt;&lt;span&gt;abababc  --&amp;gt; &lt;/span&gt;&lt;span&gt;Fail&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而如果一个个字符向后挪，则会在 s 的第三个字符处匹配上 w ——&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;abcdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w: &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Round 2&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;abcdcd&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w:   ababbabc&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;abababc&lt;/span&gt;&lt;span&gt;dcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w:     &lt;/span&gt;&lt;span&gt;abababc         &lt;/span&gt;&lt;span&gt;--&amp;gt; &lt;/span&gt;&lt;span&gt;Success&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是为什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家仔细看，w 的前 6 个字符是 ababab，这 6 个字符，除了和 s 中第 1 到第  6 个字符匹配，还和第 3 到第 8 个字符匹配，这两次匹配中，s 中的一段区间，也就是第 3 到第 6 个字符是重合的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 1 -- s: &lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;abab&lt;/span&gt;&lt;span&gt;abcdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Round 2 -- s: ab&lt;/span&gt;&lt;span&gt;abab&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;cdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重合的这段字符 “abab” 和匹配上的那段字符 “ababab” 之间，又是什么关系呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单而言，abab 既是 ababab 的前缀，又是 ababab 的后缀，这就是它们之间的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;字符串的前缀和后缀&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里要解释一下字符串的前缀和后缀。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果字符串 A 和 X，存在 A = XB，其中 B 是任意的非空字符串，那就称 X 为A的前缀。&lt;span&gt;所有前缀构成&lt;strong&gt;前缀集合&lt;/strong&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，“Great”的前缀有：“G”, “Gr”, “Gre”, 和 “Grea”，它的前缀集合: {&lt;span&gt;“G”, “Gr”, “Gre”&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;“G&lt;/span&gt;&lt;span&gt;rea&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;}。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;反之，如果字符串 A 和 X 存在 A = BX，其中 B 是任意的非空字符串，那就称 X 为 A 的后缀。所有后缀构成&lt;strong&gt;后缀集合&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“Great” 的后缀集合为：{&lt;span&gt;“&lt;/span&gt;reat”, &lt;span&gt;“&lt;/span&gt;eat”, &lt;span&gt;“&lt;/span&gt;at”, “t” }。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前后缀集合交集中的最长元素&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我们来看看ababab。它的前缀集合是：{“ababa&lt;span&gt;”&lt;/span&gt;, &lt;span&gt;“&lt;/span&gt;abab&lt;span&gt;”&lt;/span&gt;, &lt;span&gt;“&lt;/span&gt;aba”, “ab” , “a”}；而它的后缀集合为：{“babab”, “abab&lt;span&gt;”, &lt;/span&gt;&lt;span&gt;“&lt;/span&gt;bab&lt;span&gt;”,&lt;/span&gt; &lt;span&gt;“&lt;/span&gt;ab&lt;span&gt;”&lt;/span&gt;, &lt;span&gt;“&lt;/span&gt;b&lt;span&gt;”&lt;/span&gt;}。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看这两个集合的并集为 {“abab”, “ab”}，而显然 &lt;span&gt;“abab”&lt;/span&gt; 比 &lt;span&gt;“ab”&lt;/span&gt; 要长，那么也就是说 “ababab” 这个字符串的子字串 “abab” 同时是&lt;em&gt;&lt;strong&gt;原字串的前缀和后缀&lt;/strong&gt;&lt;/em&gt;，而且是&lt;em&gt;&lt;strong&gt;所有满足这一条件的子字串中最长的那个&lt;/strong&gt;&lt;/em&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;此时我们回到原题，在 s：&lt;/span&gt;&lt;span&gt;“ababababcdcd” 中查找 w：&lt;/span&gt;&lt;span&gt;“abababc”。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;第一次匹配前 6 个字符都相符，而第 7 个字符不符时，我们就要将 w 向后移动了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;s:  &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;bcdcd&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w: &lt;/span&gt;&lt;span&gt;ababab&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;这个时候，如果我们已经知道了刚刚匹配上的 6 个字符 “ababab” 有一个子字符串 “abab” 是 s 中匹配中的前 6 个字符组成的字串的后缀，而偏偏又是 w 中前 6 个字符组成字符串的前缀！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;那么在下次匹配的时候，我们&lt;span/&gt;&lt;span&gt;怎么能一下跳到&lt;/span&gt;刚巧在 s 中重用这几个字符（&lt;span&gt;“&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;bab”&lt;/span&gt;）的位呢？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3338658146964857&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdUjQF3iat80TpGV5nUBnUfEj1vHcBoD4kImx7x4wVOEPd7rmL4KBLwyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;首先我们知道现在错配的位置为第 7 个字符，如果整个跳过已经匹配的字符下一次就该从第7个字符开始，但是因为我们要重用前 6 个字符的一部分，因此要退回来一段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;那一段有多长呢？&lt;/span&gt;&lt;span&gt;就是就是 “abab” 的长度：&lt;/span&gt;&lt;span&gt;4！下次我们不是从第 7 个字符，而是再往前退 4 步，从第 3 个字符开始下一轮匹配。&lt;/span&gt;&lt;span&gt;如此，就找到 w 了。&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次是匹配上了6个字符，那如果只匹配上了5个或者4个呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同理，我们只要知道&lt;em&gt;&lt;strong&gt;匹配上的那个字符串的前后缀交集中最长的子字串长度&lt;/strong&gt;&lt;/em&gt;，在下次移动时重用这个最长前缀兼后缀就好了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Partial Match Table (PMT)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综上，我们需要做的就是将 w 的所有前缀罗列出来，然后分别统计这一个个前缀字符串的前缀集合与后缀集合并集中子串的最大长度，我们把这个长度称为 Partial Match Value，简称 PM Value。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如当前这个 w，它一共有6个前缀:  “ababab”, “ababa”, “abab”, “aba”, “ab”, 和 “a”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们分别统计这 6 个字符串的 Partial Match Value ——  前后缀交集中元素长度的最大值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚才已经计算了Partial Match Value对于“ababab”而言是4，对于 “ababa” 而言，是3 （对应子串为 “aba”），“abab” 而言是2（对应子串为 “ab”），对于 “aba” 而言是1（对应 “a”）。而“ab”的前后缀没有交集，“a”干脆没有前后缀，于是他们俩的 Partial Match Value 为 0。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以把这些值放在一个表格（Table）里面，以供查询，这个表格就叫做 Partial Match Table（缩写为PMT），下面就是 “abababc” 的PMT：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.20610687022900764&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdaDHia6vicszsCXI8kXTL2bk2cENFnEklNjxmCVicRicib4h3GqKPczriccAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;655&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Partial Match Table，PMT&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算出了 PMT  之后，我们就可以进入到 KMP 算法了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;KMP 算法详解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;法原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，KMP算法可以用我们前面说的直接算法来套用：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;算&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;法流程图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;下图是 KMP 算法的流程图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2340425531914894&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdCLPibwNXAeceea5hu07YTjIjTXHMQvcEYptY0lzleD6kAZlztKrpwHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1034&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;与直接算&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;法的对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们横向对比一下直接查找字符串算法和 KMP 算法，会发现，其实就是紫色框内的部分不同而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdydwFhFyyxkPZ7uuZG16OGHdBG29YW4FkNJCwBib53t9AexyUgT2INqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;算&lt;/span&gt;&lt;span&gt;法性能&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;KMP 算法的时间复杂度是 O(n+m)，因为正常情况下m 小于等于n，因此 O（n+m) 也就是 O(n).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;两种算法的编程实现&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;直接匹配算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了流程图，我们来实现代码就容易多了，我们可以先从直接匹配算法开始：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.4647377938517179&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdMN8aicHBKoOH43QLC3YAKkwoomCicNibCMO1xkBZrGnJu7e54HuPFKLJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;KMP 算法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对应的 KMP 算法&lt;/span&gt;&lt;span&gt;代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.5091514143094842&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zxQkPcwCBCHVJYxL5wFHjeM5XPEooicUdYARIwgnBuvE2ELDaricrO0HsWibd1YibsSTI7ibgdgpnDpnwsbrtX5XlTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PMT 的生成&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要注意一点，对于 KMP 算法本身而言，我们把 PMT 作为已知条件，在代码中 PMT 作为算法函数的输入参数直接传入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在面试的时候，一般不需要写 PMT 的生成部分，毕竟考察的是 KMP 算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，如果真的要运行程序，还是需要现针对 w 生成 PMT 的。&lt;/span&gt;&lt;span&gt;这部分代码大家可以到 github文件中查看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;完整代码和数据请见： &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;https://github.com/juliali/ClassicAlgorithms/tree/main/str_match&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-id=&quot;90150&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;“众智汇”&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;愿景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;尽职尽才，允公允能 &lt;/span&gt;—— &lt;/strong&gt;本社群不定期举行线上分享，组织群友分享知识、经验、资源，以达到&lt;strong&gt;让我们每个人的职业生涯得到最大程度的发展&lt;/strong&gt;的目的&lt;/span&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎扫面下列二维码关注“悦思悦读”公众微信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zxQkPcwCBCEmlJImTeETa35r88nRpT8dFLhcEjFmYqBg8picmuaCZUbtXY2EEx9FLNCkNUy1nBEibHicqUfJZ9yeg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>