<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>21efe7542d81852799be8af79a377aef</guid>
<title>内存数据库解析与主流产品对比（三）</title>
<link>https://toutiao.io/k/9qv70vb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mpa-category=&quot;模板&quot; data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;在上一篇文章&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247489169&amp;amp;idx=1&amp;amp;sn=3be9ce6999b1bde68dc38fa8f5dd3459&amp;amp;chksm=e8c7b1b2dfb038a4708d6200402350563b3e9df0df4dbf8000dda51c67ff9b4ba6354b6877b3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《内存数据库解析与主流产品对比（二）》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《内存数据库解析与主流产品对比（二）》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;中，我们从数据组织和索引的角度介绍了内存数据库的特点和几款产品的技术实现。本文将继续解析内存数据库，从并发控制、持久化和查询处理的角度介绍几款技术，带来更多维度、更细致的内存数据库技术讨论。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的并发控制&lt;/strong&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 内存数据库并发控制的两种策略&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;a. 多版本的并发控制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;内存数据库中的并发控制主要采用两类策略：1. 多版本的并发控制；2. 分Partition处理。并发控制机制可以分为乐观和悲观两种类型。悲观并发控制则认为进程竞争资源总是存在的，因此访问时先加锁，访问完再释放；乐观并发控制认为大多数情况不需要竞争资源，只在最后提交前检查是否存在冲突，有冲突就回滚，没有就提交。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;乐观并发控制大多数不采用基于锁的技术实现，并且通常是多版本的。多版本意味着每次更新都会产生新的版本，读操作根据可见范围选取合适的老版本，读操作不阻塞写操作，所以并发程度比较高。其缺点是会产生额外开销，例如更新要创建新版本，而且随着版本越来越多，还需要额外开销收回老版本。内存数据库多采用乐观的多版本并发控制机制，相比于基于锁的悲观并发控制其优势是开销较小，而且支持并发程度较高的场景；缺点是在有大量写竞争的场景下，事务间冲突概率比较高时，大量事务会失败和回滚。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;b. 分Partition处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;内存数据库并发控制的另外一类策略是把数据库分成多个Partition，每个Partition采用串行方式处理事务。优势是单Partition业务的执行没有用于并发控制的额外开销，缺点是存在跨Partition事务时系统的吞吐率会直线下降。因此，如果不能保证所有业务都是单Partition进行，将导致性能不可预测。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 多版本并发控制之 Hekaton&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hekaton采用乐观的多版本并发控制。Transaction开始时，系统为事务分配读时间戳，并将Transaction标记为active，然后开始执行事务，在操作过程中系统记录被读取/扫描/写入的数据。随后，在Pre-commit阶段，先获取一个结束的时间戳，然后验证读和扫描数据的版本是否仍然有效。如果验证通过，就写一个新版本到日志，执行Commit，然后把所有的新版本设置为可见。Commit之后，Post-Processing记录版本时间戳，之后Transaction才真正结束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;268.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.4649350649350649&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2FfMrPibBFH5CToLFjGhjklOeXIbaH2IxN9CF4ibzFWbvO62KajaNM3uQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;a. Hekaton 的事务验证&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;i) Read Stability：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Hekaton系统能够保证数据的读稳定性（Read Stability），比如交易开始时读到的每条记录版本，在Commit时仍然可见，从而实现Read Stability。&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h5&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ii) Phantom Avoidances：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Phantom指一个事务在开始和结束时执行相同的条件查询，两次结果不一样。出现幻影的原因是该事务执行过程中，其他事务对相同数据集进行了增加/删除/更新操作。应该如何避免幻影现象呢？可通过重复扫描，检查所读取的数据是否有新版本，保证记录在事务开始时的版本和在结束时一致。&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Hekaton并发控制的好处在于，不需要对Read-Only事务做验证，因为多版本能够保证事务开始时的记录版本在结束时依然存在。对于执行更新的事务，是否做验证由事务的隔离级别决定。例如如果快照隔离级别，就不需要做任何验证；如果要做可重复读，就要做Read Stability；如果是串行化隔离级别，既要保证Read Stability，又要保证Phantom Avoidance。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;b. Hekaton的&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;回收策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;Hekaton中的回收任务并不由独立的线程处理，而是每个事务自己回收。如下图所示，Transaction ID为250的事务结束时间戳为150且状态为terminated，此时会有一个Write Set获取所有老版本，并判断当前所有active的Transaction的开始时间戳是否大于ID为250的事务结束时间，即150。如果都大于150，说明不可能再基于时间戳早于150的旧版本进行修改，因而由事务回收旧版本，这部分工作是每个线程在处理Transaction时的额外工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;207.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.3595706618962433&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ27Cdn3bJHUue9DBfeQjHMbzK7v8kReErAaH9zJPcWdUz5PGMCXqUo5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1118&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 多版本并发控制之Hyper&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hyper的并发控制和Hekaton的区别主要有以下三点：1. 直接在记录位置进行更新，通过undo buffer来保存对数据的修改，数据和所有修改被链接在一起；2. 验证是根据最近的更新与读的记录进行比较来实现（后续会涉及到）；3. 串行化处理commit，对提交的事务进行排序，并依次处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;238.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.413290113452188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2XfZZhN6DdUgT7S0VyI7LVQEpW0wkiauwgdqwYTQgNb7GkA3458Z9n0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1234&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在事务验证方面，Hyper的验证需要在日志中记录Read Predictates，包括查询或Range Scan，而且要记录插入、删除和更新的记录。在Hyper模式中，插入/删除/更新通过对应的Undo Buffer获悉被修改过的记录，所以记录改动对于Hyper而言是容易的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于每个Transaction，只需要比较该事务从开始到Commit之间，是否存在其他Transaction对满足搜索条件的数据集进行过增/删/改，从而判断是否存在幻影现象，如果存在，就直接终止事务。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 多版本并发控制&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;之HANA和&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;HStore/VoltDB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HANA并行控制方式比较简单，采用悲观的多版本控制，由行级锁保护数据结构，每行由时间戳决定每个版本的可见范围。每个Transaction在更新或删除时都需要申请写锁，而且要做死锁检测。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;HStore/VoltDB是一个Partition系统，锁的粒度很粗，每个Partition对应一把锁，因此Transaction在某节点上执行时，需要拿到该节点所有资源。一旦一个事务可能涉及到两个Partition，就需要把两个Partition的锁都拿到。所以Partition系统的优点是单Partition处理速度非常快，缺点是多Partition效率很低。同时，系统对于负载的偏斜非常敏感，如果有热点数据，那么热点数据就构成系统瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 多版本并发控制之负载预知&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;假设一个工作负载中，事务需要读和写的数据集可以提前获得，就可以在执行前确定所有事务的执行顺序。Calvin就是基于这样的假设设计的VLL (Very Lightweight Locking）超轻量级锁数据库原型系统。通用场景的工作负载是无法提前知道读写集合的，但在存储过程业务的应用中，可以提前确定读写集合，对于这些场景就可以考虑类似Calvin的系统。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的持久化技术—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对于内存数据库而言，和基于磁盘的数据库相同也需要日志和Checkpoint。Checkpoint的目的是恢复可以从最近的检查点开始，而不需要回放所有数据。因为Checkpoint涉及写入磁盘的操作，所以影响性能，因此要尽量加快相关的处理。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;一个不同是内存数据库的日志和Checkpoint可以不包含索引，在恢复时通过基础数据重新构造索引。内存数据库中的索引在恢复时重新构造，构造完成后也放在内存中而不用落盘，内存索引数据丢失了再重构即可。另外一个不同是内存数据库Checkpoint的数据量更大。面向磁盘的数据库在Checkpoint时，只需要把内存中所有Dirty Page写到磁盘上即可，但是内存数据库Checkpoint要把所有数据全部写到磁盘，数据量无论多大都要全量写一遍，所以内存数据库Checkpoint时写入磁盘的数据远大于基于磁盘的数据库。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Hekaton Checkpoint&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;对于持久化的性能优化，第一要保证写日志时的高吞吐量和低延迟，第二要考虑恢复时如何快速重构整个数据库。Hekaton的记录和索引存放在内存，所有操作写日志到磁盘。日志只记录数据的更新，而不记录索引的更新。进行Checkpoint时，Hekaton会从日志中恢复，并根据主键范围并行处理。如下图，分三个主键范围：100~199、200~299、300~399，绿色代表数据，红色代表删除的记录（单独保存被删除的文件）。在恢复时，Hekaton用并行算法在内存中重构索引和数据，过程中根据删除记录过滤数据文件，去除被删除的数据，然后从Checkpoint点开始，根据日志回放数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;250.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.43378607809847197&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ21QQKeN56UcEAr47yU4piaya6crtKUVDRTnsdLlwbHDSAaMmHxMxW1jA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1178&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;其他系统的Checkpoints&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;1. 采用Logic Logging的系统如H-Store/VoltDB，即不记录具体的数据改动，而是记录执行过的操作、指令。它的优势是记录的日志信息比较少。写日志时，HStore/VoltDB采用COW(Copy-on-Write)模式，即正常状态是单版本，但在写日志时会另外“复制”一个版本，待写完再合并版本。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;2. 另一种是定期把Snapshot写入磁盘（不包括索引），比如Hyper就是基于操作系统Folk功能来提供Snapshot。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;— 数据库管理系统中的查询处理—&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统的查询处理采用火山模型，查询树上的每个节点是一个通用的Operator，优势在于Operator可以任意组合。但Operator拿到的记录只是一个字节数组，还需要调用另一个方法来解析属性以及属性类型。如果这种设计放到内存数据库中，属性以及类型的解析都是在Runtime而非编译时进行的，会对性能产生影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外对于get-next，如果有百万个数据就要调用百万次，同时get-next通常实现是一个虚函数，通过指针调用，相比直接通过内存地址调用，这些都会影响性能。此外，这样的函数代码在内存中的分布是非连续的，要不断跳转。综上，传统DBMS的查询处理方式在内存数据库当中并不适用，尤其体现在在底层执行时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;504.011364&quot; data-backw=&quot;547.011364&quot; data-ratio=&quot;0.9213893967093236&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ22QYcKvSJb1s0NM4p1m36uBwXrKzicaNiaSDjoT3giceQ666Y9wpW3UNHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;547&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内存数据库通常采用编译执行的方式，首先对查询进行解析，然后优化解析后的语句，并生成执行计划，然后根据模板对执行计划进行编译产生可执行的机器代码，随后把机器代码加载到数据库引擎，执行时直接调用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;203.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.3520456707897241&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2NO5kQ5cIGtnSq2MJ3iaOSX59a3K6icTPFEXvJBq7ib8aSo5rN3xYfLSibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图是对不同查询方式的耗时分析，可以看出编译执行方式中Resource Stall的占比很少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;439.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.7608695652173914&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2AGYhRicjN9ibZoAdmAxNQ8OJRz2CCLdqvqs2wCORd07LX9FbUg58Lib4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外一张图解释了目前的CPU架构实现，L2 Cache和主存之间存在Hardware Pre-fetcher。L2 Cache分为指令Cache和Data Cache，指令Cache会由Branch Prediction实现分支预测，Data Cache会由基于Sequential Pattern的Pre-fetcher实现预测。因此，数据库系统的设计需要考虑该架构下如何充分发挥Pre-fetcher功能，让Cache可以不断为 CPU计算单元提供指令和数据，避免出现Cache Stall。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;463.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.801994301994302&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2ickiaNV9qkvu6FpTHmLO3s8By6gqd26AdI3B4gBmvyrcICHQZ4I4Xbmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Hekaton编译查询处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Hekaton的编译采用T-SQL存储过程，编译的中间形式叫做MAT Generator，生成最终的C代码在编译器中执行。它产生的库和通用Operator的区别在于：通用Operator需要在运行时解释数据类型；而Hekaton编译方式是把表的定义和查询编译在一起，每个库只能处理对应的表而不能通用，自然就能拿到数据类型，这样的实现能获得3~4倍的性能提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;724.011364&quot; data-backw=&quot;518.011364&quot; data-ratio=&quot;1.3976833976833978&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2kRlNEcOv9BC2aO9jFjU3Laq9DpcpuPr5OdLHicbM9j2v1y9G6ZDBCJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HyPer和MemSQL编译查询处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;HyPer的编译方式是把查询树按照Pipeline的分割点每段编译。而MemSQL采用LLVM做编译，把MPI语言编译成代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;327.011364&quot; data-backw=&quot;576.011364&quot; data-ratio=&quot;0.5676937441643324&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2gjdic4m3qMBoncaYXpbvSOUNt0Aic5UmDViaAISDe3CGPMfu5kTWJk4cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1071&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;下图是一个对MemSQL性能的测试。没有采用编译执行时，MemSQL两次执行相同查询的时间都是0.05秒；如果采用编译执行，第一次耗时0.08秒，但是再执行时耗时仅0.02秒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.35177865612648224&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ2q7icL3jX7e0xbibXIEonibAonRPjwVcG25gf9vxu99YK6JUvzr08pMoKA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;506&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33969465648854963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWcqKhJXHJuXehzMHflDhVJ29XZjgSyicyymgB5N2NpXWQIlPia5KJZDwYwiaph4ZnJ6mVBiaKOrHnbdicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;524&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;— 其他内存数据库系统—&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;除了之前提到的几种内存数据库外，还有其他一些著名的内存DBMS出现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;i) SolidDB：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;诞生于1992年的混合型数据库系统，同时具备基于磁盘和内存的优化引擎，使用VTRIE（Variable-length Trie）树索引和悲观锁机制进行并发控制，通过Snapshot Checkpoints恢复。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ii) Oracle Times Ten&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;早期是惠普实验室名为Smallbase的研究项目，在2005年被Oracle收购，现在多作为大型数据库系统的前端内存加速引擎。Oracle Times Ten支持灵活部署，具有独立的DBMS引擎和基于RDBMS的事务缓存；在BI工作时支持Memory Repository，通过Locking进行并发控制；使用行级Latching处理写冲突，采用Write-Ahead Logging和Checkpoint机制提高持久性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;iii) Altibase&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;于1999年在韩国成立，在电信、金融和制造业应用广泛。Altibase在Page上存储记录，以Page为粒度进行Checkpoint且兼容传统DBMS引擎；支持多版本并发控制，使用预写日志记录和检查点实现持久性和恢复能力，通过Latching-Free对Page的数据进行Checkpoint。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;iv) P*Time:&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 21世纪起源于韩国，2005年出售给SAP，现在是SAP HANA的一部分。P*Time具备极佳的性能处理，对日志记录使用差分编码（XOR），采用混合存储布局，支持大于内存（Larger-than-Memory）的数据库管理系统。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;— 本文小结—&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;每一个数据库系统都是针对特定的硬件环境设计，基于磁盘的数据库系统面临CPU单核、内存小、磁盘慢的场景设计。而内存数据库以内存为主存，不需要再重复读写磁盘，磁盘I/O不再是性能瓶颈，而要解决其他瓶颈，比如：1. Locking/Latching的开销；2. Cache-Line Miss，即如果数据结构定义的不够好或在内存中组织的不好，无法匹配CPU的层级缓存，会导致计算性能变差；3. Pointer Chasing，即需要另一个指针解释，或者查另外的表才能查到记录地址，也是主要的性能开销。此外，还有Predicate Evaluation计算、数据迁移/存储时的大量拷贝、分布式系统应用与数据库系统的网络通信等开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本专栏中，我们介绍了传统基于磁盘的DBMS和内存数据库的特点，并从数据组织、索引、并发控制、语句处理编译、持久化几个方面对内存数据库与基于磁盘数据库的相同和差异性进行了介绍：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 数据组织：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;内存数据库中，把记录分成定长和变长管理，不需要数据连续存储，用指针替代了Page ID + Offset的间接访问；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 索引优化：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;考虑面向内存中的Cach Line优化、快速的内存访问等Latch-Free技术，以及索引的更新不记录日志等；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 并发控制：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以采用悲观和乐观的并发控制方式，但是与传统基于磁盘数据库的区别是，内存数据库锁信息和数据绑定，而不用单独的Lock Table管理；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 查询处理：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;内存数据库场景下的顺序访问和随机访问性能差别不大。可以通过编译执行提高查询性能；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 持久化：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;仍然通过WAL（Write-Ahead Logging）做Logging，并采用轻量级的日志，日志记录的内容尽量少，目的是降低日志写入磁盘延迟。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;内存数据库从1970s开始出现经历了理论成熟、投入生产、市场验证等发展环节。随着当前互联网秒杀、移动支付、短视频平台等高并发、大流量、低时延的平台出现，对于数据库性能提出了巨大需求和挑战。同时，内存本身在容量、单位价格友好度上不断提升，以及近期非容失性存储（NVM）的发展，促进了内存数据库的发展，这些因素使得内存数据库在未来有着广阔的市场和落地机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：本文相关内容参照以下资料：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;. Pavlo, Andrew &amp;amp; Curino, Carlo &amp;amp; Zdonik, Stan. (2012). Skew-aware automatic database partitioning in shared-nothing, parallel OLTP systems. Proceedings of the ACM SIGMOD International Conference on Management of Data. DOI: 10.1145/2213836.2213844. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. &lt;span&gt;Kemper, Alfons &amp;amp; Neumann, Thomas. (2011). HyPer: A hybrid OLTP&amp;amp;OLAP main memory database system based on virtual memory snapshots. Proceedings - International Conference on Data Engineering. 195-206. &lt;/span&gt;&lt;/span&gt;&lt;span&gt;DOI: 10.1109/ICDE.2011.5767867. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. Faerber, Frans &amp;amp; Kemper, Alfons &amp;amp; Larson, Per-Åke &amp;amp; Levandoski, Justin &amp;amp; Neumann, Tjomas &amp;amp; Pavlo, Andrew. (2017). Main Memory Database Systems. Foundations and Trends in Databases. 8. 1-130. DOI: 10.1561/1900000058. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. Sikka, Vishal &amp;amp; Färber, Franz &amp;amp; Lehner, Wolfgang &amp;amp; Cha, Sang &amp;amp; Peh, Thomas &amp;amp; Bornhövd, Christof. (2012). Efficient Transaction Processing in SAP HANA Database –The End of a Column Store Myth. DOI: 10.1145/2213836.2213946. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. Diaconu, Cristian &amp;amp; Freedman, Craig &amp;amp; Ismert, Erik &amp;amp; Larson, Per-Åke &amp;amp; Mittal, Pravin &amp;amp; Stonecipher, Ryan &amp;amp; Verma, Nitin &amp;amp; Zwilling, Mike. (2013). Hekaton: SQL server&#x27;s memory-optimized OLTP engine. 1243-1254. DOI: 10.1145/2463676.2463710. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(126, 157, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(9, 29, 83)&quot;&gt;往期原创文章&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247489169&amp;amp;idx=1&amp;amp;sn=3be9ce6999b1bde68dc38fa8f5dd3459&amp;amp;chksm=e8c7b1b2dfb038a4708d6200402350563b3e9df0df4dbf8000dda51c67ff9b4ba6354b6877b3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;内存数据库解析与主流产品对比（二）&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247487789&amp;amp;idx=1&amp;amp;sn=7872b03b049c600c8ef3123c0b36de89&amp;amp;chksm=e8c7b60edfb03f1894e6e7b2ec2d8d90a96ba001ceb379bb3723c09391b74409a5a1fcab2d83&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;内存数据库解析与主流产品对比（一）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247487280&amp;amp;idx=1&amp;amp;sn=9e8f0ed06f371f22a649daf3d3a7e2bd&amp;amp;chksm=e8c7a813dfb0210543c7f33bfb2f53e36665ad2f38a3a25052143b84dadcfe65e73c971c6266&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;font-size: 14px; text-decoration: underline; color: rgb(10, 42, 129);&quot; class=&quot;js_darkmode__58&quot;&gt;企业数据质量提升实践的几个关键点&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486933&amp;amp;idx=1&amp;amp;sn=6562407bcdcc1a7e97598681ac7369f1&amp;amp;chksm=e8c7aaf6dfb023e0b106b421dd5a9828b174e0c1cf2eac502c34852dd1fe8222b2866cd39684&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;font-size: 14px; text-decoration: underline; color: rgb(10, 42, 129);&quot; class=&quot;js_darkmode__56&quot;&gt;十分钟漫谈容器网络方案01—Flannel&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486583&amp;amp;idx=1&amp;amp;sn=66912de8836056ebf0163d3f61f05518&amp;amp;chksm=e8c7ab54dfb0224290df954f503dabd6f77b98a0c777d3718c1f0556d0860ec30424f2363da7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; font-size: 14px;&quot; class=&quot;js_darkmode__53&quot;&gt;DevOps与SRE在容器时代下的发展与变化&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486294&amp;amp;idx=1&amp;amp;sn=ad01a81146ebeb835ba46f572e476a93&amp;amp;chksm=e8c7ac75dfb025634abc7207817a8c16eb574675b873689afcf85778e41fb7b1994e00b45c6d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span&gt;Docker和Kubernetes的前世今生（下）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247486079&amp;amp;idx=1&amp;amp;sn=f6f2ff5c7d0fd3c046594ff8774cf850&amp;amp;chksm=e8c7ad5cdfb0244a21250aea5ab05f96512943ddd6ee317d6b22b8228a5a62661ff05f0011de&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; letter-spacing: 0.544px; font-size: 14px;&quot; class=&quot;js_darkmode__49&quot;&gt;Docker与Kubernetes的前世今生（上）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU0ODEwOA==&amp;amp;mid=2247485345&amp;amp;idx=1&amp;amp;sn=ff4a4e8d929aa73135222ad0d0bd2b1d&amp;amp;chksm=e8c7a082dfb029940204f8bf12634cc720f5eec302841aba707967a884eda4f3b58e646d1bf6&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(79, 122, 241)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(10, 42, 129)&quot; data-style=&quot;color: rgb(10, 42, 129); text-decoration: underline; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); cursor: pointer; font-size: 14px;&quot; class=&quot;js_darkmode__47&quot;&gt;TCOS 2.0 发布 | 面向异构联邦的容器操作系统&lt;/a&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px 16px; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 2em;&quot; class=&quot;js_darkmode__60&quot;&gt;&lt;br data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section title=&quot;152，更新于2015-06-14 09:25&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px auto; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 25.6px;&quot; class=&quot;js_darkmode__61&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-style=&quot;margin: 15px; line-height: 2em; color: rgb(62, 62, 62);&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(62, 62, 62)&quot; class=&quot;js_darkmode__62&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(62, 62, 62)&quot;&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(0, 0, 0)&quot;&gt;大数据开放实验室由星环信息科技（上海）有限公司运营，专门致力于大数据技术的研究和传播。&lt;/span&gt;&lt;span data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16025633506361=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16025633506361=&quot;rgb(0, 0, 0)&quot;&gt;若转载请在文章开头明显注明“文章来源于微信订阅号——大数据开放实验室”，并保留作者和账号介绍。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section title=&quot;499，更新于2015-12-09 17:34&quot; data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 5px auto; white-space: normal; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); line-height: 25.6px; text-align: center;&quot; class=&quot;js_darkmode__64&quot;&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16025633506361=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16025633506361=&quot;rgb(255, 255, 255)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/S0GvtHOgkWdTEyia1gXviasstgbicicxHdPvibu0ZlC4iaRCJuyGkxxMzOBP87pKZX73kdcA5roW25HH2icAc1jXaUYqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;258&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f06a22e68546939003be28a1bf91b21c</guid>
<title>7 年，从 “游戏少年” 到大厂技术总监的逆袭之路</title>
<link>https://toutiao.io/k/9dk11zm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;▲ &lt;/span&gt;&lt;span&gt;点击上方&quot;pointers&quot;&lt;/span&gt;&lt;span&gt;关注公众号&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx5goZfBeXlEAXKs4NWzw4NicUh9cibYTkicNGvnKxDEic4tgm0CVlGYj9ib9o9FW4LGcpR7q3lEeA3yVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;成长&amp;amp;认知 &lt;/span&gt;&lt;/strong&gt;丨 作者&lt;/span&gt;&lt;span&gt; / &lt;/span&gt;&lt;span&gt;袁吴范&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;pointers公众号&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;分享的第&lt;/span&gt;&lt;span&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;篇原创文章&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;写了20篇原创文章，一直没有正式的介绍过自己，一方面粉丝太少，另一方面确实没有时间写。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;算一算在杭州已经有11个年头了。算是一个彻头彻尾的杭漂，现在已经在杭州安家立业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;希望大家看过我的经历，能够给到北漂、深漂和杭漂们一些&lt;/span&gt;鼓&lt;span&gt;励。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 1&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;无知&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我是浙江人，出生在浙北的一个普通农村家庭，按照我老婆的话说是自带土气，这恐怕是农村人与生俱来的气质了吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从小家里条件不是很好，在我模糊的印象中，冬天家里总是断电，父亲就会肩扛竹竿，在竹林里寻找断开的电线，再用竹竿把两头断线接上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时年小的我还不知道这个小小操作是如此的危险，就是觉得父亲总是什么都能搞定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;应该是“开窍”晚的原因吧，直到一年级前，还不会从1数到10，别人家的娃已经可以加减乘除了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在小学期间，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;我的成绩表现的可以用糟糕来形容&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小学的成绩一直排名垫底，行动表现上，一直后知后觉，呆头呆脑，用我妈的话说就是傻傻的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从那个时候开始就被我妈一直用别人家娃来激励我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你看别人芳芳又拿三好学生了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你看别&lt;/span&gt;人&lt;span&gt;优优又考试第一名了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不过还好，我有一点还可以的，就是体育&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在四年级的时候还获得镇上同年级200米和50米短跑比赛的第一名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此学校的领导还在国旗前给我了奖状。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这个奖状也就成为我小学期间唯一的奖状，有点心酸。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以我一直认为在小学期间，体育是最重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般体育好的学生，文化课都不会差，就算现在差，以后也会追上来的。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 2&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;懵懂&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初中的时候，进入到了镇上的中心学校，这所学校在县里应该算是最差的那种了吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在学校里，我第一次看到了电脑，当时看这个屁股大大的东西，看着很高科技感觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时并不知道，这还只是个显示器，主机是在桌子下面的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初一开始有了电脑课，当时的电脑课的机房是这样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.752&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4XQ0RVoHjpwNmxAHfN2Sm5WGKL0QEVndLcoxwMMaeYibBJr0dJ7ZacKlibQK5In8eRbvK5ITrPnBQO89nq2R0aRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用的已经是xp系统了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01年xp系统发布，03年我初一，现在想想当时用的还是挺先进的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最开始学习的就是word，然后还学了flash制作动画，我也不知道学校为什么让学这个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前对电脑只是存在脑海中的一个静态画面，当我第一次看到电脑能够通过笨拙的鼠标控制，我被震撼了，还可以这样用？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我就被这个样子看起来怪怪的东西，深深的吸引了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速发展20年的互联网，让人感到唏嘘，新技术层出不穷，微软还是那么的能打，从pc时代到移动互联时代，强者恒强，office套件已经家喻户晓，而flash逐渐快被淘汰。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扯远了，话题拉回来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在当时，电脑课是我最喜欢的课程，因为我学的很快，每次课堂作业，都是第一个完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就因为接受的比较快，还经常被老师在课堂上，点名表扬。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这在其他课上还不可能存在的。不被老师抓到办公室批评就不错了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在那时，就是比较简单的想法，下定决心，一定要熟练的操作电脑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就因为对电脑的热爱，心中的火苗彻底被点燃，学会了一样对我之后的发展影响极大的技能，就是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;盲打字的习惯&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高中&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入高中后，学习成绩突飞猛进，一直在前十的状态，在县里的排名一直在前100名。按照以前的经验，前60名，就可以进入浙大了。所以高中阶段，一直是把浙大当做我的大学目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可是高考成绩彻底将我的梦击碎，我的成绩只高出一本线20分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那段时间，情绪一直比较低迷，感觉世界都要崩塌，又来经过家人、朋友和老师的辅导下，渐渐缓了过来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;填报志愿时候，没有选择离开浙江，还是填报了杭州的一所双非学校。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;浙江只有一所985、211高校，大家都懂了吧，浙江的学生难啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 大学&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入大学之后，下定决定刻苦学习，发誓要考上浙大研究生，去实现自己未完成的梦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可我的毅力弱的性格，再一次击败了我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个大学四年，都沉迷在dota这款游戏当中。就是下图这个，大家好好看看，是不是很熟悉？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpwNmxAHfN2Sm5WGKL0QEVnddoQ0TicJDS7sDpgl9bVzPfiaWUNPVfWTssjw6Ea2c71U8icicBsHzm7rjw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最疯狂的一次，在天梯平台上，为了冲分数，从早上的八点，一直打到第二天的晚上的八点。整整36个小时，除了上厕所没有离开过凳子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个大学生涯中，除了必须要签到的课，其他的基本没有参加过。不过还好，我没有挂科，我总是能最后时间内，完成临时抱佛脚，考试通过。顺利完成了毕业。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心心念念的考研，去浙大上学，在颓废中，逐渐的放弃了。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 3&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;初露锋芒&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的人生转折点，是在毕业找工作的那段时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;找了好几个月，都是产线普工的岗位，或者是需要经常出差的技术支持岗，又或者是销售岗位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根本不是我想要做的研发岗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在一次和我妈妈电话的过程中，我哭了。这是我大学四年来第一次流泪。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;男儿有泪不轻弹啊&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;感谢残酷而又现实的社会，让我感受到了可能会饿死的危机感和城市中无法生存的绝望感。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一下子就把我迷迷糊糊的脑子，彻底打醒了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;心灰意冷的我，我静下心想了一个星期，下定决心，给自己定了一个小目标&lt;/span&gt;&lt;span&gt;&lt;strong&gt;：一周之内把常见的面试题全部刷了一遍，先找一个小厂，干几年学到技术之后，最终跳槽去大厂。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了实现这个目标，我近乎疯狂的学习，每天睡4个小时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;终于功夫不负有心人，有一家新成立的创业公司，面试期间，我表现出的基础能力得到了面试官的认可，顺利拿到了研发岗的offer。不知道那天晚上多开心，立即给我妈打电话报喜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那家创业公司是要开发一款智能机器人，带队的是浙大航天学院的一个副教授，擅长机器视觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我实现目标过程中的选择，我到现在都觉得是一个正确的选择，也感谢当时给我机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的氛围是科研氛围，感觉能够学到东西（虽然工资很低，但是当时没有考虑薪资方面，有自知之明，管饱就行）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来就是没日没夜的看书，弥补自己的大学欠下的债。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;晚上9点下班，骑车回家，洗漱好，10点钟看书到12点睡觉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早上6点起床，看书到9点，骑车上班。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;甚至不放过吃饭时间——边吃饭边看书，这样的状态一直持续了2年。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我毕业后，工作前期这个阶段，我觉得需要做到3点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.深蹲&amp;amp;积累&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段，认知收益和认知成本的比值非常小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好在我自己深知能力积累的“非线性增长”规律，所以也并没有过于气馁和急躁，一直积攒着能量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我觉得，造成我们和优秀同事之间的能力巨大鸿沟的决定性因素其实是“知识能力”积累到一定程度带来的自身增值速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只有深蹲，积攒强大的能量，在某个时刻能瞬间打通了任督二脉，厚积薄发，职场中一路飙升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.整合&amp;amp;建立认知链接&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我认识到了积累的重要性了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是对不起，即便是日以继夜的积累，也可能达不到能力提升的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最好还差一步，就是需要系统性思维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过长期积累的知识并没有纳入到你自己的知识体系中去，他们还只是单纯的孤立的知识点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的记忆本质就是记忆逻辑，也就是记忆关联。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要将新知识和已有的认知进行连接。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样才能达到融会贯通，才能达到信手拈来的程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;那如何培养自己的系统思维呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我自己的学习方式是每当我学习到一个全新知识的时候，我会去思考这个知识点与我脑中现有的知识系统有何联系。然后再去想，我该去如何使用这些知识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打一个比方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我学习数据结构的时候，其中有链表，二叉树等等，这时候你就要去想，这些数据结构是怎么使用的？在你的工作中哪些地方可以用到。跟你脑中的已经学习到的例如Linux内核有关系吗？是不是Linux内核中也使用这些数据结构？内核中为什么要这样使用的？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这一番深度思考之后，是不是对知识的理解更加深刻，也就真正成为了我自己的东西了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仔细想想为什么常常我们道理都明白，却很难做到？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;其实很多时候我们都犯了一个巨大的错误，那就是误把“知道”当作“明白”或者“感悟”。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想知道，道理很容易，那些祖训大家都耳熟能详，但往往真正明白并内化到自己的骨子里却需要付出不少的精力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看极少数身边优秀的人，在年轻时就能把这些有价值的道理真正内化到了自己的行动上，不得不说这才是他们身上一直被人们忽略的最大的天赋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.起跳&amp;amp;突破&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不要满足于当前的得过且过状态，你身边的同事们正在暗暗较劲，拼劲学习，努力积累经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时将你们进行横向对比，确实差别不大。正所谓逆水行舟不进则退，倘若再过几年呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在认知收益和认知成本比值不断增大的情况下，在温水煮青蛙的状态下，在你还没有意识到时，对方能力的已经把你甩的老远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时，对方已经开始崭露头角，领导的资源就慢慢向他倾斜。那时，你该如何是好呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;不要在本该奋斗的年纪选择安逸，那样以后的路越来越难走。天底下没有速成的秘诀，没有捷径可走。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;时刻保持危机感，设立高标准，严格要求自己。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要相信，能力是存在跃升，只是时间未到，多点耐心。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要相信，认知收益和成本会急剧的增大，要多积累。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你要对自己的认知进行整合，建立认知链接，打造自己的知识体系。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 4&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;披荆斩棘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这小厂的2年时间内，我就像井底的青蛙，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;虽然练就了“一身武艺”&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，但并不知道外面大厂的流程制度规范，技术能力到底是怎样的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，我决定跳出这个小圈子，去外面看一看、闯一闯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来大家也知道了，我进入了海康。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.赢得好印象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;进入海康，第一件事情就是，赢得好印象。怎么做呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚来第一个月里，一般情况下就是熟悉团队氛围和公司制度、文化的阶段，而我发现代码中的兼容性、扩展性都比较差，而且耦合特别大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就强制要求自己每天早上非常早的就来公司，晚上几乎11、12点下班，在一个月时间内就输出了一份软件架构方案，递到了领导的手上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后虽然方案还是有漏洞，但是大的问题没有，在第二年就慢慢切换使用我设计的架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过这件事情，我获得了什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在领导、同事心里：“能力强”，“有拼劲”，“执行力强”的标签，就一直伴随着我。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;获取正面的标签，这还不够，还需要做一件事情，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;持续增加曝光&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;好印象=好的第一印象＋持续增加曝光&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时作为新员工进来，一直非常的拼，在别人的印象中就是有拼劲，同时能力非常强，而且这种状态一直保持了5年，这就是持续地曝光。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;凡是都是有因果的，没有无缘无故的成功，只是很多的“因”由于自身的认知局限而被忽视了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个阶段，我已经完成了领导心中的好印象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我要成功真正的管理者，必须要完成管理跃升&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.完成管理跃升&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次的跃升，是我真正叩开了管理的大门。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然只是叩开了大门，但这对我来说，是整个能力系统的改变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我还是个人贡献者时，我的能力是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发现问题、解决问题、总结和反思&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而我是基层管理者时，我的能力要求，完全发生了变化：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自己的工作发生了彻底的变化，要求变成了&lt;/span&gt;&lt;span&gt;协调、组织、反馈&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以下面这4个升级一定要做到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一个升级，叫责任升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在个人贡献者的时候，我是对任务负责，领导交给我一件事情，把任务的细节和deadline告诉我。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我只需要在deadline之前，把这件事干好，就OK了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：领导让我开发一个界面，开发一个测试工具等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而现在我需要对这个事情的结果负责。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是，同样是一样事情，不是由我亲自去干，而是由我分配任务给到下属，教练指导下属去完成这个任务，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个任务的结果好坏都是由我自己来承担&lt;/span&gt;&lt;span&gt;。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;切记中间多坎坷，作为基层管理者，都需要想方设法的达成目标&lt;/span&gt;&lt;span&gt;，因为这是你的责任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个升级，叫做行动升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在从单打独斗，成为了一个团队的管理者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一个新经理，总是会犯的一个错误，就是“总是觉得别人做的不好，自己亲自来”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个想法是非常愚蠢的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个人能力再强，也干不过一个有组织的团队。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;有一次一个系统崩溃问题，我并没有亲自去解决，而是&lt;/span&gt;&lt;span&gt;安排好计划，定好合适的责任人，下达任务命令。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;记住，千万不要替代他们解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三个升级，叫做协作升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在个人贡献者时，我的工作关系，比较简单，组内同事和领导。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当成为管理者时，工作关系，会变得复杂，领导、下属、兄弟同事、外部客户等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时候的协作方式就需要发生大的变化，我不仅仅需要考虑下属和领导，还需要考虑其他外部关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;在这期间我组织完成了一件重大的技术方案落地的项目，项目人员涉及到全公司各个领域，公共项目人员在&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;+人。关系变得复杂，工作的协作方式也需要升级。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从单纯的组内同事之间的技术协作，升级为组间的配合协作和技术协作的混合模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从封闭的协作范围，升级为开发的协作范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关注的不仅仅是组内的工作，还需要考虑其他部门的工作情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如数学概念中的面升级到立体三维空间，协作方式也需要进行全新的升级&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第四个升级，叫做成就升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我从个人成就，升级到团队成就。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过我的管理，我的下属持续成长，团队能力越来越强，这就是团队成就。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为基层管理者，只是单单做到个人成就，不注重成就下属，我们的团队是很难做强的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个团队的不强，想想你还能晋升吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为一个团队的老大，需要有成就下属的胸怀，才能走的更远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;就这样，&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;年时间，我完成了&lt;/span&gt;&lt;span&gt;责任升级，行动升级，协作升级，成就升级&lt;/span&gt;&lt;span&gt;，这个阶段也算真正的一名管理者了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终，&lt;/span&gt;&lt;span&gt;事实也证明了，&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;年后，也就是&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;年，我成功晋升为技术经理，带领着10+人的团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 5&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;笑傲江湖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2018年至2020年，这段时间是我的另一次的自我进化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我称之为领导跃升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我从技术经理晋升到了技术总监。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次跃升，是从基层管理者，跃升到团队的领导者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;成为领导者需要从局部把控，变为对全局的掌握，领导团队运筹帷幄，披荆斩棘，以弱胜强，最终走向胜利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是从下面2个升级，完成了这个跃升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一个就是战略升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;战略相对于战术，而战术只为实现战略的手段之一，基层管理者做的就是战术。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;争一时之长短，用战术就可以达到！如果是“争一世之雌雄”，就需要从全局出发去规划，这就是战略！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么意思？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运用到企业管理上就是要”&lt;/span&gt;&lt;span&gt;做正确的事情&lt;/span&gt;&lt;span&gt;“。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而团队领导者，最重要的职责，是制定部门的战略目标、组织文化建设。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要完成什么目标，怎么和供应商合作？规划未来3到5年做什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队需要怎样的组织架构，需要怎样的文化氛围等等。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个就是影响力升级&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响力是用一种别人所乐于接受的方式，改变他人的思想和行动的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响力，是一个非常重要的武器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我通过影响力，建立了部门内的文化价值观，愿景，并且以身作则，激励团队，可以产生巨大的凝聚力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我们的团队正在破釜沉舟，越战越勇，期待我们部门分拆，独立上市的一天到来&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;strong&gt; 6&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;—&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们职场生涯就是一次次对自己能力重构的过程，保持持续突破。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当你学会了走路，就要想学着跑步，当你学会了跑步，就要想着到水里，学着游泳。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一直在不断的超越自我的路上，终生学习。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是袁吴范，帮助你提升认知和能力提升。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__134&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;&lt;span&gt;推荐阅读（干货）&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484039&amp;amp;idx=1&amp;amp;sn=64ff331bd87889216754aa60311a493e&amp;amp;chksm=cf209795f8571e83b586a3211a4bea0343b053ba347ccb5c6b89b4c410a396ce90ee23049de5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;面试过200人的经验，都在这里了&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484027&amp;amp;idx=1&amp;amp;sn=fb6fe35037e1693bf0f1c0a81d059bdc&amp;amp;chksm=cf209769f8571e7f311b5195d1f4c8fc1dc7f6905375bbdc6b0afbec0abc4775889b1012db7c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;程序员成为高级管理者的三次跃升&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg3NzUxMTgwNQ==&amp;amp;mid=2247484011&amp;amp;idx=1&amp;amp;sn=e52d915760314e3300c145039ede831b&amp;amp;chksm=cf209779f8571e6f81be5951b70607c2a2518fd0fc94c80c8f96c3331f82bdd6e07807179ce4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;技术总监7年总结，如何进行正确的沟通？&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-right: 8px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__135&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__141&quot;&gt;&lt;span&gt;从业7年。从软件开发、高级软件开发、技术经理再到技术总监，分享职业发展、技术管理、职场晋升、技术成长等个人多年经验和心得。一起成长！有问题可以加我微信交流：&lt;/span&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__145&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;pointersss&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__146&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;关注我&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;↓&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;↓&lt;/strong&gt;，帮你答疑解惑！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot; data-style=&quot;margin-right: 8px; margin-bottom: 10px; margin-left: 8px; white-space: normal; max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; color: rgb(77, 77, 77); font-size: 16px; background-color: rgb(255, 255, 255); line-height: 25.5px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;strong data-darkmode-bgcolor-16029336602567=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16029336602567=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16029336602567=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16029336602567=&quot;rgb(77, 77, 77)&quot; data-darkmode-bgcolor-16030173785544=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030173785544=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030173785544=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16030173785544=&quot;rgb(77, 77, 77)&quot; data-style=&quot;max-width: 100%; background-color: rgb(255, 255, 255); color: rgb(77, 77, 77); font-size: 14px; letter-spacing: 0.544px; white-space: normal; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot; data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(153, 153, 153)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(77, 77, 77)&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4XQ0RVoHjpx4fJoOHia8o9pebg6ffoYJ3SueWibyfyfUpyBqtcmMwSUg5DrJ3bXLPnhrJya3Xjk0JHkJ9uJu7IrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;430&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span data-darkmode-bgcolor-16033270487548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033270487548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16033270487548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16033270487548=&quot;rgb(49, 49, 49)&quot; data-style=&quot;max-width: 100%; color: rgb(49, 49, 49); font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 15px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__1&quot;&gt;觉得不错，记得关注、转发和在看！多年经验分享，实属不易，感谢支持！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1609666334655643654&quot; data-bizuin=&quot;Mzg3NzUxMTgwNQ==&quot; data-title=&quot;只求点个在看，谢谢啦！&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>18d1a5f8a966b980bfd83864488d166a</guid>
<title>Golang 单元测试：有哪些误区和实践？</title>
<link>https://toutiao.io/k/5szw95c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6240234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIAEqmsP2V6rWPXEgRWFJHgjhYwezNIFksedqSHGzWla2Ghfp6mHsvSc4qu3LEuvxIwB98LIwEqDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;p&gt;&lt;span&gt;阿里妹导读：&lt;/span&gt;&lt;span&gt;单元测试作为开发的有力武器，应该在软件开发的各个流程中发挥它的价值。原始的开发模式（开发完毕，交给测试团队进行端到端测试）的流程，应该逐步向 devops 的方向转变。本文是一个转型的具体实践过程，以一个实际的业务应用项目为例，介绍了在展开单测实践过程中遇到的一些常见问题的思考，并着重介绍了几种 mock 方法，对于一些相对复杂依赖项较多的业务也可以作为借鉴。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文末福利：云服务器怎么选？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;测试是保证代码质量的有效手段，而单元测试是程序模块儿的最小化验证。单元测试的重要性是不言而喻的。相对手工测试，单元测试具有自动化执行、可自动回归，效率较高的特点。对于问题的发现效率，单测的也相对较高。在开发阶段编写单测 case ，daily push daily test，并通过单测的成功率、覆盖率来衡量代码的质量，能有效保证项目的整体质量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.16636528028933092&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKz9mUAsHNkr6Il2Jlia9H5vlg8kb5UoO8YMianx1DEfMUvDz2icyzjvWCyqRzpRvUibpiabNn4JNaN24g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;单测准则&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;什么是好的单测？阿里巴巴的&lt;/span&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;amp;mid=2247498279&amp;amp;idx=1&amp;amp;sn=313d9b047d8fc7aff7c1f90dc4a3c7e7&amp;amp;chksm=e92ac728de5d4e3e1678a7480752eb92d6346a20804101a7f6d49d0a9f101145fee0f8c033e0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《Java 开发手册》&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《Java 开发手册》&lt;/a&gt;&lt;/span&gt;&lt;span&gt;（点击下载）中描述了好的单测的特征：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单测应该是可重复执行的，对外部的依赖、环境的变化要通过 mock 或其他手段屏蔽掉。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 On the architecture for unit testing[1]中对好的单测有以下描述：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;单测的误区&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多人不愿意写单测，是因为项目依赖很多，各个函数之间各种调用，不知道如何在一个隔离的测试环境下进行测试。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在实践中我们调研了几种隔离&lt;span&gt;（&lt;/span&gt;mock&lt;span&gt;）&lt;/span&gt;的手段。下面进行逐一介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;单测实践&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本次实践的工程项目是一个 http（基于 gin 的http 框架） 的服务。以入口的 controller 层的函数为被测函数，介绍下对它的单测过程。下面的函数的作用是根据工号输出该用户下的代码仓库的 CodeReview 数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看到这个函数作为入口层还是比较简单的，只是做了一个参数校验后调用下游并将结果透出。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ListRepoCrAggregateMetrics&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    workNo := &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Query&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;work_no&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; workNo == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorWarpper&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrParamError&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorCode&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;work no miss&quot;&lt;/span&gt;), &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    crCtx := code_review.&lt;span class=&quot;code-snippet__type&quot;&gt;NewCrCtx&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rsp, err := crCtx.&lt;span class=&quot;code-snippet__type&quot;&gt;ListRepoCrAggregateMetrics&lt;/span&gt;(workNo)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorWarpper&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrDbQueryError&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorCode&lt;/span&gt;, err.&lt;span class=&quot;code-snippet__type&quot;&gt;Error&lt;/span&gt;()), rsp))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrSuccess&lt;/span&gt;, rsp))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它的结果大致如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;json&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;data&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;total&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;code_review&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;repo&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;project_id&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;repo_url&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;metrics&quot;&lt;/span&gt;: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;code_review_rate&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0.0977918&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;thousand_comment_count&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;self_submit_code_review_rate&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;average_merge_cost&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;30462.584&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;average_accept_cost&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;30388.75&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attr&quot;&gt;&quot;errorMsg&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;成功&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对这个函数测试，我们预期覆盖以下场景：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;方案一：不 mock 下游， mock 依赖存储 (不建议）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这种方式是通过配置文件，将依赖的存储都连接到本地（比如 sqlite , redis）。这种方式下游没有 mock 而是会继续调用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; db *gorm.DB&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getMetricsRepo&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;MetricsRepo&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    repo := model.MetricsRepo{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ProjectID:     &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        RepoPath:      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        FileCount:     &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CodeLineCount: &lt;span class=&quot;code-snippet__number&quot;&gt;76&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        OwnerWorkNo:   &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;999999&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;repo&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getTeam&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Teams&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    team := model.Teams{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        WorkNo: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;999999&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;team&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db, err := gorm.Open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;sqlite3&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;test.db&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        os.Exit(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.Debug()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.DropTableIfExists(model.MetricsRepo{})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.DropTableIfExists(model.Teams{})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.CreateTable(model.MetricsRepo{})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.CreateTable(model.Teams{})&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.FirstOrCreate(getMetricsRepo())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    db.FirstOrCreate(getTeam())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; RepoMetrics &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CodeReviewRate           &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;code_review_rate&quot;`&lt;/span&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ThousandCommentCount     &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;thousand_comment_count&quot;`&lt;/span&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SelfSubmitCodeReviewRate &lt;span class=&quot;code-snippet__keyword&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;self_submit_code_review_rate&quot;`&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; RepoCodeReview &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Repo        repo.Repo   &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;repo&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RepoMetrics RepoMetrics &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;metrics&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; RepoCrMetricsRsp &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Total          &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;               &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;total&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RepoCodeReview []*RepoCodeReview &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;code_review&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestListRepoCrAggregateMetrics&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    w := httptest.NewRecorder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _, engine := gin.CreateTestContext(w)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.GET(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo&quot;&lt;/span&gt;, ListRepoCrAggregateMetrics)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    req, _ := http.NewRequest(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo?work_no=999999&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.ServeHTTP(w, req)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.Equal(t, w.Code, &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]RepoCrMetricsRsp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    json.Unmarshal(w.Body.Bytes(), &amp;amp;v)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, v[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;].Total)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, v[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;].RepoCodeReview[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].Repo.ProjectID)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, v[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;].RepoCodeReview[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoMetrics.CodeReviewRate)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上面的代码，我们没有对被测代码做改动。但是在运行 go test 进行测试时，需要指定配置到测试配置。被测项目是通过环境变量设置的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;RDSC_CONF=&lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/&lt;span class=&quot;code-snippet__built_in&quot;&gt;test&lt;/span&gt;/data/config.yml go &lt;span class=&quot;code-snippet__built_in&quot;&gt;test&lt;/span&gt; -v -cover=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt; -coverprofile=&lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/cover/cover.cover ./...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;方案二：下游通过 interface 被 mock（推荐）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;gomock[2] 是 Golang 官方提供的 Go 语言 mock 框架。它能够很好的和 Go testing 模块儿结合，也能用于其他的测试环境中。Gomock 包括依赖库 gomock 和接口生成工具 mockgen 两部分，gomock 用于完成桩对象的管理， mockgen 用于生成对应的 mock 文件。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; Foo &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Bar(x &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SUT&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(f Foo)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ctrl := gomock.NewController(t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt; ctrl.Finish()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  m := NewMockFoo(ctrl)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  m.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    EXPECT().&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Bar(gomock.Eq(&lt;span class=&quot;code-snippet__number&quot;&gt;99&lt;/span&gt;)).&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Return(&lt;span class=&quot;code-snippet__number&quot;&gt;101&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SUT(m)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上面的例子，接口 Foo 被 mock。回到我们的项目，在我们上面的被测代码中是通过内部声明对象进行调用的。使用 gomock 需要修改代码，把依赖通过参数暴露出来，然后初始化时。下面是修改后的被测函数：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;RepoCrCRController&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;     *gin.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    crCtx code_review.&lt;span class=&quot;code-snippet__type&quot;&gt;CrCtxInterface&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;NewRepoCrCRController&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx *gin.Context, cr code_review.CrCtxInterface)&lt;/span&gt;&lt;/span&gt; *&lt;span class=&quot;code-snippet__type&quot;&gt;TeamCRController&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&quot;code-snippet__type&quot;&gt;TeamCRController&lt;/span&gt;{&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;: ctx, crCtx: cr}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(ctrl *RepoCrCRController)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;code-snippet__type&quot;&gt;ListRepoCrAggregateMetrics&lt;/span&gt;(&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; *gin.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    workNo := &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;Query&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;work_no&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; workNo == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorWarpper&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrParamError&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorCode&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;员工工号信息错误&quot;&lt;/span&gt;), &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rsp, err := ctrl.crCtx.&lt;span class=&quot;code-snippet__type&quot;&gt;ListRepoCrAggregateMetrics&lt;/span&gt;(workNo)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorWarpper&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrDbQueryError&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrorCode&lt;/span&gt;, err.&lt;span class=&quot;code-snippet__type&quot;&gt;Error&lt;/span&gt;()), rsp))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;code-snippet__type&quot;&gt;JSON&lt;/span&gt;(http.&lt;span class=&quot;code-snippet__type&quot;&gt;StatusOK&lt;/span&gt;, errors.&lt;span class=&quot;code-snippet__type&quot;&gt;BuildRsp&lt;/span&gt;(errors.&lt;span class=&quot;code-snippet__type&quot;&gt;ErrSuccess&lt;/span&gt;, rsp))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样通过 gomock 生成 mock 接口可以进行测试了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestListRepoCrAggregateMetrics&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; { &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ctrl := gomock.NewController(t)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;defer&lt;/span&gt; ctrl.Finish()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    m := mock.NewMockCrCtxInterface(ctrl)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    resp := &amp;amp;code_review.RepoCrMetricsRsp{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    m.EXPECT().ListRepoCrAggregateMetrics(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;999999&quot;&lt;/span&gt;).Return(resp, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    w := httptest.NewRecorder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ctx, engine := gin.CreateTestContext(w)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    repoCtrl := NewRepoCrCRController(ctx, m)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.GET(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo&quot;&lt;/span&gt;, repoCtrl.ListRepoCrAggregateMetrics)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    req, _ := http.NewRequest(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo?work_no=999999&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.ServeHTTP(w, req)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.Equal(t, w.Code, &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    got := gin.H{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    json.NewDecoder(w.Body).Decode(&amp;amp;got)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.EqualValues(t, got[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;], &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;方案三：通过 monkey patch 方式 mock 下游 （推荐）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在上面的例子中，我们需要修改代码来实现 interface 的mock，对于对象成员函数，无法进行 mock。monkey patch 通过运行时对底层指针内容修改的方式，实现对 instance method 的 mock （注意，这里要求 instance 的 method 必须是可以暴露的）。用 monkey 方式测试如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestListRepoCrAggregateMetrics&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    w := httptest.NewRecorder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    _, engine := gin.CreateTestContext(w)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.GET(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo&quot;&lt;/span&gt;, ListRepoCrAggregateMetrics)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; crCtx *code_review.CrCtx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    repoRet := code_review.RepoCrMetricsRsp{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    monkey.PatchInstanceMethod(reflect.TypeOf(crCtx), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;ListRepoCrAggregateMetrics&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx *code_review.CrCtx, workNo &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(*code_review.RepoCrMetricsRsp, error)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; workNo == &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;999999&quot;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                repoRet.Total = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                repoRet.RepoCodeReview = []*code_review.RepoCodeReview{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &amp;amp;repoRet, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    req, _ := http.NewRequest(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;GET&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/api/test/code_review/repo?work_no=999999&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    engine.ServeHTTP(w, req)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.Equal(t, w.Code, &lt;span class=&quot;code-snippet__number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;code-snippet__keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;]code_review.RepoCrMetricsRsp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    json.Unmarshal(w.Body.Bytes(), &amp;amp;v)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, v[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;].Total)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    assert.Len(t, v[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;data&quot;&lt;/span&gt;].RepoCodeReview, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;存储层 mock&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Go-sqlmock 可以针对接口 sql/driver[3] 进行 mock。它可以不用真实的 db ，而模拟 sql driver 行为，实现强大的底层数据测试。下面是我们采用 table driven[4] 写法来进行数据相关测试的例子。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;package&lt;/span&gt; store&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;database/sql/driver&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/DATA-DOG/go-sqlmock&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/jinzhu/gorm&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;github.com/stretchr/testify/assert&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;net/http/httptest&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; RepoCommitAndCRCountMetric &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ProjectID                 &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;project_id&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RepoCommitCount           &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;repo_commit_count&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    RepoCodeReviewCommitCount &lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`json:&quot;repo_code_review_commit_count&quot;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    w      = httptest.NewRecorder()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ctx, _ = gin.CreateTestContext(w)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ret    = []RepoCommitAndCRCountMetric{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TestCrStore_FindColumnValues1&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; fields &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        g  *gin.Context&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        db &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;gorm&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;struct&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        table      &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        column     &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        whereAndOr []SqlFilter&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        group      &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        out        &lt;span class=&quot;code-snippet__keyword&quot;&gt;interface&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    tests := []&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        name      &lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fields    fields&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        args      args&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        wantErr   &lt;span class=&quot;code-snippet__keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        checkFunc &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            name: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;whereAndOr is null&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fields: fields{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                db: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;gorm&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DB&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sqlDb, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    rs1 := sqlmock.NewRows([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_commit_count&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_code_review_commit_count&quot;&lt;/span&gt;}).FromCSVString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mock.ExpectQuery(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;SELECT project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count FROM `metrics_repo_cr` GROUP BY project_id&quot;&lt;/span&gt;).WillReturnRows(rs1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb, _ := gorm.Open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;, sqlDb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb.Debug()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; gdb&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            args: args{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                table:      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metrics_repo_cr&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                column:     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                whereAndOr: []SqlFilter{},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                group:      &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                out:        &amp;amp;ret,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            checkFunc: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].ProjectID, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project id should be 1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCommitCount id should be 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCodeReviewCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCodeReviewCommitCount should be 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            name: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;whereAndOr is not null&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fields: fields{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                db: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;gorm&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DB&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sqlDb, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    rs1 := sqlmock.NewRows([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_commit_count&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_code_review_commit_count&quot;&lt;/span&gt;}).FromCSVString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mock.ExpectQuery(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;SELECT project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count FROM `metrics_repo_cr` WHERE (metrics_repo_cr.project_id in (?)) GROUP BY project_id&quot;&lt;/span&gt;).&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        WithArgs(driver.Value(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)).WillReturnRows(rs1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb, _ := gorm.Open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;, sqlDb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb.Debug()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; gdb&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            args: args{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                table:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metrics_repo_cr&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                column: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                whereAndOr: []SqlFilter{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Condition: SQLWHERE,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Query:     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metrics_repo_cr.project_id in (?)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Arg:       []&lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                group: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                out:   &amp;amp;ret,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            checkFunc: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].ProjectID, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project id should be 1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCommitCount id should be 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCodeReviewCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCodeReviewCommitCount should be 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            name: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;group is null&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            fields: fields{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                db: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;gorm&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;DB&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sqlDb, mock, _ := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    rs1 := sqlmock.NewRows([]&lt;span class=&quot;code-snippet__keyword&quot;&gt;string&lt;/span&gt;{&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_commit_count&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;repo_code_review_commit_count&quot;&lt;/span&gt;}).FromCSVString(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    mock.ExpectQuery(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;SELECT project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count FROM `metrics_repo_cr` WHERE (metrics_repo_cr.project_id in (?))&quot;&lt;/span&gt;).&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        WithArgs(driver.Value(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)).WillReturnRows(rs1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb, _ := gorm.Open(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;, sqlDb)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    gdb.Debug()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; gdb&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            args: args{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                table:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metrics_repo_cr&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                column: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project_id, sum(commit_count) as repo_commit_count, sum(code_review_commit_count) as repo_code_review_commit_count&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                whereAndOr: []SqlFilter{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Condition: SQLWHERE,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Query:     &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;metrics_repo_cr.project_id in (?)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        Arg:       []&lt;span class=&quot;code-snippet__keyword&quot;&gt;uint&lt;/span&gt;{&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;},&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                group: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                out:   &amp;amp;ret,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            checkFunc: &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].ProjectID, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;project id should be 1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCommitCount id should be 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                assert.EqualValues(t, &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;, ret[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].RepoCodeReviewCommitCount, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;RepoCodeReviewCommitCount should be 3&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        },&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; _, tt := &lt;span class=&quot;code-snippet__keyword&quot;&gt;range&lt;/span&gt; tests {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        t.Run(tt.name, &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            cs := &amp;amp;CrStore{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                g: ctx,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            db = tt.fields.db()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; err := cs.FindColumnValues(tt.args.table, tt.args.column, tt.args.whereAndOr, tt.args.group, tt.args.out); (err != &lt;span class=&quot;code-snippet__literal&quot;&gt;nil&lt;/span&gt;) != tt.wantErr {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                t.Errorf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;FindColumnValues() error = %v, wantErr %v&quot;&lt;/span&gt;, err, tt.wantErr)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            tt.checkFunc()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;持续集成&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Aone （阿里&lt;span&gt;内部项目协作管理平台&lt;/span&gt;）提供了类似 travis-ci[5] 的功能：测试服务[6]。我们可以通过创建单测类型的任务或者直接使用实验室进行单测集成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mkdir -p &lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/cover&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;RDSC_CONF=&lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/config/config.yaml go &lt;span class=&quot;code-snippet__built_in&quot;&gt;test&lt;/span&gt; -v -cover=&lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt; -coverprofile=&lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/cover/cover.cover ./...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ret=$?; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; [[ &lt;span class=&quot;code-snippet__variable&quot;&gt;$ret&lt;/span&gt; -ne 0 &amp;amp;&amp;amp; &lt;span class=&quot;code-snippet__variable&quot;&gt;$ret&lt;/span&gt; -ne 1 ]]; &lt;span class=&quot;code-snippet__keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;code-snippet__variable&quot;&gt;$ret&lt;/span&gt;; &lt;span class=&quot;code-snippet__keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;增量覆盖率可以通过 gocov/gocov-xml 转换成 xml 报告，然后通过 diff_cover 输出增量报告：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;cp &lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/cover/cover.cover /root/cover/cover.cover&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install diff-cover==2.6.1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gocov convert cover/cover.cover | gocov-xml &amp;gt; coverage.xml&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;diff-cover &lt;span class=&quot;code-snippet__variable&quot;&gt;$sourcepath&lt;/span&gt;/coverage.xml --compare-branch=remotes/origin/develop &amp;gt; diff.out&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;设置触发的集成阶段：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.13200723327305605&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIAEqmsP2V6rWPXEgRWFJHgzd5YDNPxQBBwPKfdr6JiaqPbyGKHowvo4eMPoxUQvO2W54Bx7RbTpMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5393939393939394&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIAEqmsP2V6rWPXEgRWFJHggV87uibHjyHIFOY93icsOL18JN6n6VBzp1aDMuhWY7TmhngeQLpz4krA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;495&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;参考资料&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[1]https://thomasvilhena.com/2020/04/on-the-architecture-for-unit-testing&lt;/p&gt;&lt;p&gt;[2]https://github.com/golang/mock&lt;/p&gt;&lt;p&gt;[3]https://godoc.org/database/sql/driver&lt;/p&gt;&lt;p&gt;[4]https://github.com/golang/go/wiki/TableDrivenTests&lt;/p&gt;&lt;p&gt;[5]https://travis-ci.org/&lt;/p&gt;&lt;p&gt;[6]https://help.aliyun.com/document_detail/64021.html&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;云服务器优惠攻略&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;低至1元起&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.32&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIAEqmsP2V6rWPXEgRWFJHgI5jvymGEv760kwrxc0btqZddfuIaHgzB57hPVrKdQk77yto55xzYgg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;阿里云开发者成长计划面向全年龄段开发者，依托免费资源、免费体验、免费学习、免费实践 4 大场景，全面助力开发者轻松掌握云上技能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;开发者专属的特价云服务器，涵盖ECS、MySQL、Flink等多个爆款，低至1元起！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;识别下方二维码，或点击 “阅读原文” ，快去优惠购买吧~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;256&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naLNRWBibb7nyL2Zqkn0nibK2oxiamZZlNtMF95mEzuHwjnrBSaNeC19l4pGD1t3vMoCWELXpAf8UggMg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Z6bicxIx5naLWBBEcl44aIic1Mthe1nZiaramW5s4e8WwyCYYbTzu6uPBpgI6sxNXNymEnOYKpJpcrItUia7lS64mA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;戳我，享优惠。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>735578bd83b932df3c0dcb5a6fbd63bb</guid>
<title>详解 JavaScript 中的模块、Import 和 Export</title>
<link>https://toutiao.io/k/545z46w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// 每日前端夜话 第436篇&lt;br/&gt;// 正文共：3000 字&lt;br/&gt;// 预计阅读时间：12 分钟&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.525&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRgY6a6zzeWDFSKsficGDodruDP2WtueacVXUkF9cExTvickm7cOrXWrnJcGICcqmcj7NZXKXd0ibGBJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在互联网的洪荒时代，网站主要用 HTML和 CSS 开发的。如果将 JavaScript 加载到页面中，通常是以小片段的形式提供效果和交互，一般会把所有的 JavaScript 代码全都写在一个文件中，并加载到一个 &lt;code&gt;script&lt;/code&gt; 标签中。尽管可以把 JavaScript 拆分为多个文件，但是所有的变量和函数仍然会被添加到全局作用域中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是后来 JavaScript 在浏览器中发挥着重要的作用，迫切需要使用第三方代码来完成常见任务，并且需要把代码分解为模块化的文件，避免污染全局命名空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECMAScript 2015 规范在 JavaScript 语言中引入了 &lt;span&gt;module&lt;/span&gt;，也有了 import 和 export 语句。在本文中，我们一起来学习 JavaScript 模块，以及怎样用 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 来组织代码。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;模块化编程&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 JavaScript 中出现模块的概念之前，当我们想要把自己的代码组织为多个块时，一般会创建多个文件，并且将它们链接为单独的脚本。下面先举例说明，首先创建一个 &lt;code&gt;index.html&lt;/code&gt; 文件和两个JavaScript文件“ &lt;code&gt;functions.js&lt;/code&gt; 和 &lt;code&gt;script.js&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;index.html&lt;/code&gt; 文件用来显示两个数字的和、差、乘积和商，并链接到 &lt;code&gt;script&lt;/code&gt; 标签中的两个 JavaScript 文件。打开 &lt;code&gt;index.html&lt;/code&gt; 并添加以下代码：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE &lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;html&lt;/span&gt; &lt;span&gt;lang&lt;/span&gt;=&lt;span&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;meta&lt;/span&gt; &lt;span&gt;charset&lt;/span&gt;=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;meta&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span&gt;content&lt;/span&gt;=&lt;span&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;JavaScript Modules&lt;span&gt;&amp;lt;/&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Answers&lt;span&gt;&amp;lt;/&lt;span&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;strong&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;x&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt; and &lt;span&gt;&amp;lt;&lt;span&gt;strong&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;y&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Addition&lt;span&gt;&amp;lt;/&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;addition&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Subtraction&lt;span&gt;&amp;lt;/&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;subtraction&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Multiplication&lt;span&gt;&amp;lt;/&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;multiplication&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Division&lt;span&gt;&amp;lt;/&lt;span&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;division&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;functions.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个页面很简单，就不详细说明了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;functions.js&lt;/code&gt; 文件中包含将会在第二个脚本中用到的数学函数。打开文件并添加以下内容：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;difference&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x - y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;product&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x * y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;quotient&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x / y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，&lt;code&gt;script.js&lt;/code&gt; 文件用来确定 x 和 y 的值，以及调用前面那些函数并显示结果：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; x = &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; y = &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;x&#x27;&lt;/span&gt;).textContent = x&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;y&#x27;&lt;/span&gt;).textContent = y&lt;br/&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;addition&#x27;&lt;/span&gt;).textContent = sum(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;subtraction&#x27;&lt;/span&gt;).textContent = difference(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;multiplication&#x27;&lt;/span&gt;).textContent = product(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;division&#x27;&lt;/span&gt;).textContent = quotient(x, y)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保存之后在浏览器中打开 &lt;code&gt;index.html&lt;/code&gt; 可以看到所有结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.023076923076923&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRgY6a6zzeWDFSKsficGDodruiaPt7R41stlTkm00nRPaQjUBTB4JS3V4qx4icftEhpNXPVwjMUa17K8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于只需要一些小脚本的网站，这不失为一种有效的组织代码的方法。但是这种方法存在一些问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;污染全局命名空间&lt;/strong&gt;：你在脚本中创建的所有变量（&lt;code&gt;sum&lt;/code&gt;、 &lt;code&gt;difference&lt;/code&gt; 等）现在都存在于 &lt;code&gt;window&lt;/code&gt; 对象中。如果你打算在另一个文件中使用另一个名为 &lt;code&gt;sum&lt;/code&gt; 的变量，会很难知道在脚本的其它位置到底用的是哪一个值变量，因为它们用的都是相同的 &lt;code&gt;window.sum&lt;/code&gt; 变量。唯一可以使变量私有的方法是将其放在函数的作用域中。甚至在 DOM 中名为 &lt;code&gt;x&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt; 可能会和 &lt;code&gt;var x&lt;/code&gt; 存在冲突。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;：必须从上到下依次加载脚本来确保可以使用正确的变量。将脚本分别保存存为不同文件会产生分离的错觉，但本质上与放在页面中的单个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 中相同。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 ES6 把原生模块添加到 JavaScript 语言之前，社区曾经尝试着提供了几种解决方案。第一个解决方案是用原生 JavaScript 编写的，例如将所有代码都写在 objects 或立即调用的函数表达式（IIFE）中，并将它们放在全局命名空间中的单个对象上。这是对多脚本方法的一种改进，但是仍然存在将至少一个对象放入全局命名空间的问题，并没有使在第三方之间一致地共享代码的问题变得更加容易。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后又出现了一些模块解决方案：CommonJS 是一种在 Node.js 实现的同步方法，异步模块定义（AMD）是一种异步方法，还有支持前面两种样式的通用方法——通用模块定义（UMD）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些解决方案的出现使我们可以更轻松地以&lt;strong&gt;包&lt;/strong&gt;的形式共享和重用代码，也就是可以分发和共享的模块，例如 npm。但是由于存在许多解决方案，并且都不是 JavaScript 原生的，所以需要依靠 Babel、Webpack 或 Browserify之类的工具才能在浏览器中使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于多文件方法存在许多问题，并且解决方案很复杂，所以开发人员对把模块化开发的方法引入 JavaScript 语言非常感兴趣。于是 ECMAScript 2015 开始支持 JavaScript &lt;span&gt;module&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;module&lt;/span&gt; 是一组代码，用来提供其他模块所使用的功能，并能使用其他模块的功能。&lt;span&gt;export&lt;/span&gt; 模块提供代码，&lt;span&gt;import&lt;/span&gt; 模块使用其他代码。模块之所以有用，是因为它们允许我们重用代码，它们提供了许多可用的稳定、一致的接口，并且不会污染全局命名空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块（有时称为 ES 模块）现在可以在原生 JavaScript 中使用，在本文中，我们一起来探索怎样在代码中使用及实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;原生 JavaScript 模块&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JavaScript 中的模块使用&lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 关键字：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;import&lt;/code&gt;：用于读取从另一个模块导出的代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;export&lt;/code&gt;：用于向其他模块提供代码。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来把前面的的 &lt;code&gt;functions.js&lt;/code&gt; 文件更新为模块并导出函数。在每个函数的前面添加 &lt;code&gt;export&lt;/code&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;difference&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x - y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;product&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x * y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;quotient&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x / y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;script.js&lt;/code&gt; 中用 &lt;code&gt;import&lt;/code&gt; 从前面的 &lt;code&gt;functions.js&lt;/code&gt; 模块中检索代码。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;import&lt;/code&gt; 必须始终位于文件的顶部，然后再写其他代码，并且还必须包括相对路径（在这个例子里为 &lt;code&gt;./&lt;/code&gt;）。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 &lt;code&gt;script.js&lt;/code&gt; 中的代码改成下面的样子：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { sum, difference, product, quotient } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; x = &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; y = &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;x&#x27;&lt;/span&gt;).textContent = x&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;y&#x27;&lt;/span&gt;).textContent = y&lt;br/&gt;&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;addition&#x27;&lt;/span&gt;).textContent = sum(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;subtraction&#x27;&lt;/span&gt;).textContent = difference(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;multiplication&#x27;&lt;/span&gt;).textContent = product(x, y)&lt;br/&gt;&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&#x27;division&#x27;&lt;/span&gt;).textContent = quotient(x, y)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：要通过在花括号中命名单个函数来导入。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了确保代码作为模块导入，而不是作为常规脚本加载，要在 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;script&lt;/code&gt; 标签中添加&lt;code&gt;type=&quot;module&quot;&lt;/code&gt;。任何使用 &lt;code&gt;import&lt;/code&gt; 或 &lt;code&gt;export&lt;/code&gt; 的代码都必须使用这个属性：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;br/&gt;  &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;module&quot;&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;functions.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;br/&gt;  &lt;span&gt;type&lt;/span&gt;=&lt;span&gt;&quot;module&quot;&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于受限于 CORS 策略，必须在服务器环境中使用模块，否则会出现下面的错误：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Access to script at &#x27;file:///Users/your_file_path/script.js&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块与常规脚本不一样的地方：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;模块不会向全局（&lt;code&gt;window&lt;/code&gt;）作用域添加任何内容。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块始终处于严格模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在同一文件中把同一模块加载两次不会出问题，因为模块仅执行一次&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块需要服务器环境。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块仍然经常与打包程序（如 Webpack）一起配合使用，用来增加对浏览器的支持和附加功能，但它们也可以直接用在浏览器中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来探索更多使用 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 语法的方式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;命名导出&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如前所述，使用 &lt;code&gt;export&lt;/code&gt; 语法允许你分别导入按名称导出的值。以这个 &lt;code&gt;function.js&lt;/code&gt; 的简化版本为例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{}&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;difference&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样允许你用花括号按名称导入 &lt;code&gt;sum&lt;/code&gt; 和 &lt;code&gt;difference&lt;/code&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; {sum, difference} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以用别名来重命名该函数。这样可以避免在同一模块中产生命名冲突。在这个例子中，&lt;code&gt;sum&lt;/code&gt; 将重命名为 &lt;code&gt;add&lt;/code&gt;，而 &lt;code&gt;difference&lt;/code&gt; 将重命名为 &lt;code&gt;subtract&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; {&lt;br/&gt;  sum &lt;span&gt;as&lt;/span&gt; add,&lt;br/&gt;  difference &lt;span&gt;as&lt;/span&gt; subtract&lt;br/&gt;} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;add(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;// 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里调用 &lt;code&gt;add()&lt;/code&gt; 将产生 &lt;code&gt;sum()&lt;/code&gt; 函数的结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;*&lt;/code&gt; 语法可以将整个模块的内容导入到一个对象中。在这种情况下，&lt;code&gt;sum&lt;/code&gt; 和 &lt;code&gt;difference&lt;/code&gt; 将成为 &lt;code&gt;mathFunctions&lt;/code&gt; 对象上的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; * &lt;span&gt;as&lt;/span&gt; mathFunctions &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;mathFunctions.sum(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;// 3&lt;/span&gt;&lt;br/&gt;mathFunctions.difference(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;) &lt;span&gt;// 7&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原始值、函数表达式和定义、异步函数、类和实例化的类都可以导出，只要它们有标识符就行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 原始值&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; number = &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; string = &lt;span&gt;&#x27;string&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; undef = &lt;span&gt;undefined&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; empty = &lt;span&gt;null&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; obj = {&lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;Homer&#x27;&lt;/span&gt;}&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; array = [&lt;span&gt;&#x27;Bart&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Lisa&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;Maggie&#x27;&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 函数表达式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; sum = &lt;span&gt;(&lt;span&gt;x, y&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x + y&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 函数定义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;difference&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x - y&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 匿名函数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getBooks&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 类&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Book&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;constructor&lt;/span&gt;(name, author) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.name = name&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.author = author&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 实例化类&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; book = &lt;span&gt;new&lt;/span&gt; Book(&lt;span&gt;&#x27;Lord of the Rings&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;J. R. R. Tolkein&#x27;&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有这些导出都可以成功被导入。接下来要探讨的另一种导出类型称为默认导出。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;默认导出&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面的例子中我们导出了多个命名的导出，并分别或作为一个对象导入了每个导出，将每个导出作为对象上的方法。模块也可以用关键字 &lt;code&gt;default&lt;/code&gt; 包含默认导出。默认导出不使用大括号导入，而是直接导入到命名标识符中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 &lt;code&gt;functions.js&lt;/code&gt; 文件为例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; x + y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;script.js&lt;/code&gt; 文件中，可以用以下命令将默认函数导入为 &lt;code&gt;sum&lt;/code&gt;：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; sum &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;sum(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;// 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这样做很危险，因为在导入过程中对默认导出的命名没有做任何限制。在这个例子中，默认函数被导入为 &lt;code&gt;difference&lt;/code&gt;，尽管它实际上是 &lt;code&gt;sum&lt;/code&gt; 函数：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; difference &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;difference(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;) &lt;span&gt;// 3&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以一般首选使用命名导出。与命名导出不同，默认导出不需要标识符——原始值本身或匿名函数都可以用作默认导出。以下是用作默认导出的对象的示例：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;Lord of the Rings&#x27;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;author&lt;/span&gt;: &lt;span&gt;&#x27;J. R. R. Tolkein&#x27;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用以下命令将其作为 &lt;code&gt;book&lt;/code&gt; 导入：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; book &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，下面的例子演示了如何将匿名箭头函数导出为默认导出：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; () =&amp;gt; &lt;span&gt;&#x27;This function is anonymous&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以这样导入：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; anonymousFunction &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;命名导出和默认导出可以彼此并用，例如在这个模块中，导出两个命名值和一个默认值：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;functions.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; length = &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; width = &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;perimeter&lt;/span&gt;(&lt;span&gt;x, y&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; * (x + y)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用以下命令导入这些变量和默认函数：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;script.js&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; calculatePerimeter, {length, width} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./functions.js&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;calculatePerimeter(length, width) &lt;span&gt;// 30&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在默认值和命名值都可用于脚本了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块化编程设计允许我们把代码分成单个组件，这有助于代码重用，同时还可以保护全局命名空间。一个模块接口可以在原生 JavaScript 中用关键字 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 来实现。&lt;/p&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/ttJazfuZaRhicyXjTlZhd1BYzPSicArYzVjZeXNfvbSXIEBKCC5IUq8iacDUbwtooY4Jqz2G6MrRVoqRkXoocO01w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-ratio=&quot;0.5555555555555556&quot; data-w=&quot;639&quot;/&gt;&lt;/figure&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3NzIzMDY0NA==&amp;amp;mid=2247489495&amp;amp;idx=2&amp;amp;sn=c1299551dd5bf4ec8e18ea6880f3a82b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRiaibmffk3MM8pQDGeMgP3avSPSia3K9AFfOhSaa7rADybxYm0MksaiaqsZy1hH4KiaAtMfSwsZBeLBBBg/640?wx_fmt=png&quot; title=&quot;![精彩文章回顾,点击直达&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5238095238095238&quot; data-w=&quot;945&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;span/&gt;精彩文章回顾,点击直达&lt;/figcaption&gt;&lt;/figure&gt;&lt;br data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ttJazfuZaRiaLn2kDibyZPS4qzOXvOgvu5llnTZUodVhKpd6X19rnKTAiaxBHibyicwRia7XUBJWdgSyNuPuOQQmya2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.257847533632287&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9c843de582c692c50edef5ad79876df1</guid>
<title>Python 源码混淆与加密</title>
<link>https://toutiao.io/k/3g7dp26</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/pajG4l5Gnt55HcTYDo5mBdiaV28ZRC2VhLwD8yr2ySHApdcEPddVhGu5jBNuSNY0go6HJMCbeibDMAUKiaUvSGucg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Python 是一种解释型语言，没有编译过程，发布程序的同时就相当于公开了源码，这也是其作为开源语言的一个特性。但在某些场景下，我们的源码是不想被别人看到的，例如开发商业软件、编写 0day 漏洞 POC/EXP、免杀 shellcode 等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以免杀为例，如果打包的源码没做任何处理，安全研究人员在捕获到样本后连分析的过程都省掉了，直接通过源码锁定特征，很快免杀就会失效，这显然不是我们想看到的。因此对源码做相应的保护还是有必要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：本文代码只为介绍源码保护方法，不涉及免杀姿势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目前保护 Python 代码主要有以下几种方式：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n6&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对代码进行混淆以降低源码可读性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py 文件编译为二进制 pyc 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Pyinstaller 打包源码为二进制可执行文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 PyArmor 加密脚本&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py/pyc 文件使用 AES 加密为 pye 文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;将 py 文件转为 c 文件后编译为动态链接库文件&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;代码混淆&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码混淆是指在不改变代码逻辑的情况下，对代码结构进行变换，通过一些带有混淆性质的命名、注释等，使代码变得晦涩难懂，从而达到保护代码的作用。这里提供两种代码混淆的方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;代码混淆库 pyobfuscate&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyobfuscate 会对代码中用户定义的类、函数、变量等进行重命名、更改代码缩进(默认1)、移除注释、添加不影响逻辑的代码语句，最终起到混淆的作用。不过 pyobfuscate 使用 Python2 编写，无法解析 Python3 中的 f-string 等特殊语法，因此使用前需要将源码进行一定程度的修改，当然也可以直接修改 pyobfuscate 库，增加对 Python3 版本的支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;样例 (对 malicious.py 文件进行混淆)：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n26&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python2 pyobfuscate.py malicious.py &amp;gt; malicious_obfuscated.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4118457300275482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joIia2IicuUgVwpxD2XREYOIU6kC6JfOxz7AoQawibGpI7FYvcBKU7yg7MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果如下图所示，左侧为一段从云端获取 shellcode 加载进内存执行的代码，右图为其混淆后的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4759581881533101&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joJdoicMn6Hm0OIRbpDvnao4eiaNTTrECRaibhicIeCQD3iaX7L6Fjialqna0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1435&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看出代码虽然进行了一定程度的变换，但代码结构基本还是原来的样子，并不能很有效的增加破解难度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;利用 AST 混淆源码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AST，即抽象语法树，它可以将源代码以树状结构表示。Python 内置了 ast 模块，该模块通过内置函数 compile() 和 parse() 将  Python 源代码解析为 AST，之后可以利用 ast 模块内的方法对 ast 节点进行相应的操作，混淆处理后使用 codegen 库将 AST 重新生成为 Python 源码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;样例：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n35&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python2 astobf.py malicious.py &amp;gt; malicious_astobfed.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3852040816326531&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo4wlTIiaRT76hYXhZibYZ8UHBfBoZS4Iv2kLtyQTAGT8T6JsBOwVjnAjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;784&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果如下图所示，AST 混淆后的代码略有修改，以保证 Python3 下脚本可正常执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4944769330734243&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo1yDXSXrvz5pjicUyPDBm9ichLdVZ6vxicX8Gf3TWJjcD2XrqTVEZDLA0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1539&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;混淆后的代码使用 __import__ 动态导入模块、使用 getattr 调用类方法，这样就可以以字符串方式传入模块名和方法名，借由字符串翻转拼接、数字计算等方式达到混淆目的，相比之下，AST 方式的混淆效果明显要优于 pyobfuscate 库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;编译为 pyc 文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyc 文件是 Python 的字节码文件，其存在的意义在于每次调用模块时，不用重新对该模块进行解释，从而提高效率，减少性能损耗。但是在运行一个单独的脚本时，该脚本是不会被编译为 pyc 文件的，这是由于 Python 的解释器认为只有导入的包才会被不断复用，才有编译的价值。不过 Python 提供了 py_compile 库和 compileall 程序用于手动编译 py 文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;py_compile&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n42&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;import py_compile&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;py_compile.compile(file=&quot;malicious.py&quot;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;compileall&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n44&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python -m compileall ./&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.25196850393700787&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joq9m9F1vQVF0H2gq0PzLtheqQtH0F5NUvSTGxPuBAAzsCAnMvfK7ictg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译为字节码文件后，确实没办法直接读取源码了，但是 Python 有 uncompyle6 这么一个跨版本反编译器，可以将 Python 字节码转换回等效的 Python 源代码。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n47&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;python -m pip install uncompyle6&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;uncompyle6 malicious.cpython-37.pyc &amp;gt; malicious_Decompiled.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3840104849279161&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jovEK7cETNQH2AYKqOySoBopQags76x2N78GeymyAu1mJw4pTCk0nAIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;763&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4966722129783694&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jokHFlJdlgx4Ryvw8UW3ic2qOPvgJmr8biawSHvic8VtR06icFMklaP7VibEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且 pyc 还有一个弊端，就是它依赖于 Python 解释器的版本，使用某版本解释器编译的 pyc 文件必须使用相同版本解释器运行才能正常工作， 所以实际上将 py 文件编译为 pyc 文件的实用性并不是很大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;打包为独立可执行程序&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过将 Python 文件打包为独立可执行程序也是一种保护源码的方式。Windows 平台下 ，有 Pyinstaller 、 py2exe 和 cx_Freeze 等多种打包程序可以使用，以 Pyinstaller 为例，打包 malicious.py 命令如下：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n53&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;python -m pip install pyinstaller&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;pyinstaller -Fw -i myicon.ico malicious.py&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;-F 表示生成单文件，-w 表示隐藏控制台窗口，-i 表示为生成的 exe 文件添加图标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4313326551373347&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joqUFTbpewQJnOSsy6aYvuwniaiaIaI4M4dDBm4D05Zoibz9gWv2IuNjxicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;983&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Python 打包的 exe 程序并不是将文件编译为真正的机器码，而是将脚本编译为 pyc 后连同依赖文件、当前的 Python 解释器一同打包起来，根据命令参数生成文件夹或打包成单独的可执行文件。之后运行 exe 时，实际运行的是一个引导加载程序，引导加载程序会创建一个临时的 Python 环境，通过解释器副本来执行 pyc 文件。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于这种运行方式的特殊性，Pyinstaller 打包的 exe 文件也是可以被还原出源码的。使用 pyinstxtractor 解包 exe：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n58&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python pyinstxtractor.py malicious.exe&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41230551626591233&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joqVlrnQ0h0ia9f2C5xUOIJBGzxHibF1aztjJnByribvR0icMJxYJdyv0TiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1414&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解包后的文件夹内包含了 malicious.pyc 文件，之后使用 uncompyle6 反编译该文件就可以拿到源码。所以将 Python 打包为 exe 只相当于在编译为 pyc 的基础上添加了一步打包操作，同样不能很有效的对源码进行保护。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用 PyArmor 加密代码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n62&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p&gt;&lt;span&gt;PyArmor 是一个用于加密和保护 Python 脚本的工具。它能够在运行时刻保护 Python 脚本的二进制代码不被泄露，设置加密后 Python 源代码的有效期限，绑定加密后的 Python 源代码到硬盘、网卡等硬件设备。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它的保障机制主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n65&quot; mdtype=&quot;list&quot; data-mark=&quot;-&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;加密编译后的代码块，保护模块中的字符串和常量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在脚本运行时候动态加密和解密每一个函数（代码块）的二进制代码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码块执行完成之后清空堆栈局部变量&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过授权文件限制加密后脚本的有效期和设备环境&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PyArmor 的工作原理相对复杂，有兴趣的朋友可以参考官方的说明文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://pyarmor.readthedocs.io/。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 PyArmor 默认加密方式加密 malicious.py：&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n77&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;pyarmor obfuscate malicious.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5500878734622144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo7csSqg4bicTWSDL3ZPXvZl8ZszuoobkujwxU3bDqiblHtNAtqUg0cs0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1138&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.155467720685112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joBE3WUg7nUSy7RNLczCQ4R1ybalDgw93SwIUb6SHKh4iboQfyRwLEp3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;759&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加密后的文件前两行代码是引导代码，用于加载 pytransform 动态链接库和添加三个内置函数到 builtins 模块，之后调用 __pyarmor__ 导入加密模块执行加密代码。加密后的文件目录还有一个名叫 pytransform 的运行辅助包，它是解密文件所必须的，因此打包加密文件时需要同时将运行辅助包打包进去。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n81&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;pyinstaller -Fw --add-data &quot;pytransform;pytransform&quot; malicious.py&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44569288389513106&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5josN61LRXTLyJsqViaokicId9mzXhBrxFoIcXM0a25smFQZwv45FdGHmSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1335&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PyArmor 使用分片式技术来保护 Python 脚本。所谓分片保护，就是单独加密每一个函数，在运行脚本的时候，只有当前调用的函数被解密，其他函数都没有解密。而一旦函数执行完成，就又会重新加密。这种方式相对于混淆来说，效果明显要好的多。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;加密为 pye 文件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyconcrete 是另一个 python 的文件加密库，安装它需要提供一个密钥，用于之后对源码文件进行加密，同时由于过程中涉及 .c 文件的编译，因此 Windows 下需要安装 VC++ build tools，Linux 下需要安装 GCC。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解压出 pyconcrete 库源码后，使用 setup 进行安装。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n87&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python setup.py install&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6798457087753134&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joZHzylkhIecXnwOdppYd1tMcqYW917EZBJDL6EQObriafqk3uEqvho8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1037&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装成功后复制 pyconcrete-admin.py 文件到项目文件夹就可以使用了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyconcrete 可以将源码文件夹下所有 py/pyc 文件通过 AES128 加密为 pye 文件，该文件无法被正常的 Pyhon 解释器解释，需要使用 pyconcrete 程序加载运行。当然也可以将函数定义部分提出来作为库文件单独加密，函数调用部分独立出来作为一个入口，如下，将 malicious.py 文件拆分为 malicious_func.py 和 malicious_enter.py。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5199686765857479&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joAu97n8umW9fHNmOrgnZXgpcwDQVtLzrY1y0B6Xwpo7Dq4eKbahT7vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1277&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对 malicious_func.py 文件单独加密。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n93&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;python pyconcrete-admin.py compile --source=malicious_func.py --pye&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joCjGibkDmV0MgjkZWSln1VSv0nojQg5NauKu33VZJVic9NO9zErfsMyicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加密后在只有 malicious_enter.py 和 malicious_func.pye 两个文件的情况下运行 malicious_enter.py 文件，脚本是可以在本地正常运行的，因为解释器在导入 pye 文件时会自动调用环境变量中的 pyconcrete 进行解密。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1962233169129721&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joGmNLkGko8QyYMnyxic8omUwtLT1LLBKTGkZ8Mgw2WDZ18OII0QvH0Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想将其打包为 exe 在其他机器上运行，还需要进行一些修改：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot; start=&quot;&quot; cid=&quot;n98&quot; mdtype=&quot;list&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;修改 malicious_enter.py 文件，在首部导入 pyconcrete，以及加密脚本中需要用到的库，这是为了在调用 Pyinstaller 时，将 pyconcrete 解密程序和脚本依赖的库同时打包进 exe。pyconcrete 库需要在其他库之前导入，它会自动和其他模块挂钩，在其目录寻找 pye 文件，然后通过 _pyconcrete.pyd 对 pye 文件进行解密。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pyinstaller 不会将 pye 文件主动打包进 exe，需要在打包时通过 --add-data 添加。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5247813411078717&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo2bcuXpkGpsULUSlyicKGWgcNXZIxYzicOSRLyDm621EHnO7WuQicazMkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样打包出的 exe 就可以执行了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4096244131455399&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jobmg8DzUdTibUP6JDR9NHPEevFsUhe1nwO9ib0bbOadUVfQr0QvopHzsg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;852&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 pyconcrete 加密的源码在运行时会调用 _pyconcrete.pyd 文件进行解密，该文件内存储了用于解密源码的密钥。由于其密钥隐藏在二进制数据中，无法通过十六进制编辑器直接看到，因此想要解密源码，就必须对 _pyconcrete.pyd 文件进行逆向分析，提取密钥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;编译为 pyd 文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面提到的 pyd 文件是 Python 的动态链接库，类似 Windows 下的 DLL 和 Linux 下的 SO，它是 Cython 结合 C 的编译器编译而来，涉及 C 的编译， 因此同样需要 VC++ build tools 或 GCC。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上，Cython 是一门单独的语言，专门用来写 Python 的 C 扩展。原本是为了解决 Python 语言的效率问题，但由于其有专门的转换器可以将 .py 文件转换为 .c 文件 (自动加入大量 C-Python API ) 后编译为 pyd，因此也可以利用这个特点来保护 Python 源码，下面为编译方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;pyd 的文件为库文件，所以也需要一个 py 文件进行调用，这里还是使用 malicious_enter.py 和 malicious_func.py 作为示例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;创建一个 py 文件，用于将 malicious_func.py 编译为 pyd。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;python&quot; cid=&quot;n112&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span role=&quot;presentation&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;from distutils.core import setup&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;from Cython.Build import cythonize&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;setup(&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    ext_modules = cythonize([&#x27;malicious_func.py&#x27;,]),&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;cythonize 方法会将 malicious_func.py 的 Python 代码转换为 Cython 代码，之后调用 setup 将 .c 文件编译为 pyd。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;shell&quot; cid=&quot;n114&quot; mdtype=&quot;fences&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;python build_pyd.py build_ext --inpla&lt;/span&gt;&lt;span role=&quot;presentation&quot;&gt;ce&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6796714579055442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joDgUcibduNZNOBTos0gokSZhAn0kBdooLqYMiab2THnVIFKciaibLsibgUUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以直接运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.20134228187919462&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5joQxogL4K5ib596eLdjtwWsCUhciafvnXQVBSOFxJ1ZGtOCPcsLZiamibq3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也可以打包为 exe，Pyinstaller 会自动将 pyd 文件作为依赖导入。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.17105263157894737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jomNPJdPJ16O3U50QaL9aLjc8NkWlo423SyzrcCNNvFXiaiaS2YxFbK1Bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1292&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;编译为 pyd 后，想要了解源码的逻辑就必须通过逆向来分析，相较于从 _pyconcrete.pyd 中提取密钥解密 pye，这种直接将完整逻辑代码编译为二进制文件的方式更不容易被逆向出来，逻辑写的越复杂，逆向分析的代价就越高。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;最后，&lt;/span&gt;&lt;span&gt;上面说的这些 Python 源码保护方法其实正常情况下很少会用得到，既然使用了 Python，一般也不会有人刻意去隐藏自己的代码。不过对于安全领域，这些方法还是有一定价值的。拿免杀来说，复杂的加解密流程，配合上面某些方法，说不定就能很好的隐藏自己的特征，养出一匹低调的马儿。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;未完待续...&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;&gt;&lt;p class=&quot;js_darkmode__5&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;360BugCloud开源漏洞响应平台，国内自主议价漏洞收录模式开拓者！&lt;/span&gt;聚焦收录未被披露的开源以及通用组件高危漏洞，致力于维护开源软件和供应链安全。平台采用入驻邀请制，只面向成功提交未被披露漏洞的安全研究员开放。&lt;/span&gt;&lt;span&gt;360BugCloud开源漏洞响应平台首创“自主议价”模式及“第三方专家评审”机制，先议价后交洞，仅需提交漏洞影响力描述即可进行议价，让安全研究员完全掌握漏洞提交主动权，高额奖金上不封顶，让漏洞价值得到充分保障与肯定。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;步轻松实现在360BugCloud提交漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.12660135644310475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt47NrPdS5Fjg9X5ELN8k4ERHSNkViaRyJQ223ic9W4VRobKYicfic4oaIhibuO1PBrbV5K5YrGBoye67IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1327&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;360BugCloud漏洞提交地址&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt6MgPpQNjUVSTFfmoOribhBO9lz5OuynFTDtpGCZYjLxqjRyFqJTKRfpjDibuR0NISwgHyHyOIxnHhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;360BugCloud开源漏洞响应平台秉承“Trust信任、Tenet原则、Top权威、Together共建”的04T宗旨，力争打造以技术为驱动、以安全专家为核心的应急响应平台，提升网络安全防护能力，为国家、企业、用户打造最安全的网络环境。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;2.1653333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt7KKiblia7tEibDwwjwicoly5jo7Naa7aqkia6qPd2gf5JzZ38mh5aX9qJiclO2rZZIRJlwQ3EFYdAcB2vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1125&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; font-family: -apple-system-font, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; letter-spacing: 0.544px; white-space: normal; background-color: rgb(255, 255, 255); box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin: 0.5em 16px; max-width: 100%; width: 636.375px; min-height: 1em; white-space: pre-wrap; border-color: rgb(68, 231, 172); border-top-width: 1px; color: transparent; border-top-style: dashed; line-height: normal; text-align: center; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot;&gt;&lt;br data-darkmode-bgcolor-16033623352947=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16033623352947=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.67265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pajG4l5Gnt55HcTYDo5mBdiaV28ZRC2Vh0Qzjvba44iaLcKJiaWbaWeQdbDoRRe0mGIspGYjQUTWoHicHbSia8icOFgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>