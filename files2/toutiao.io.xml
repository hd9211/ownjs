<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>e091a5073751bbcfb343dcbddc5a8d78</guid>
<title>单体服务开发最佳实践</title>
<link>https://toutiao.io/k/3hm17du</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单体最佳实践的由来&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于很多初创公司来说，业务的早期我们更应该关注于业务价值的交付，并且此时用户体量也很小，&lt;code&gt;QPS&lt;/code&gt; 也非常低，我们应该使用更简单的技术架构来加速业务价值的交付，此时单体的优势就体现出来了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;正如我直播分享时经常提到，我们在使用单体快速交付业务价值的同时，也需要为业务的发展预留可能性，我们可以在单体里面清晰的拆分业务模块。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;go-zero&lt;/code&gt; 社区里也有很多小伙伴在问，咱们单体开发的最佳实践应该是怎样的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 &lt;code&gt;go-zero&lt;/code&gt; 作为一个被广泛使用的渐进式微服务框架来说，也是我在多个大型项目完整发展过程中沉淀出来的，自然我们也充分考虑了单体服务开发的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图所示的使用 &lt;code&gt;go-zero&lt;/code&gt; 的单体架构，也可以支撑很大体量的业务规模，其中 &lt;code&gt;Service&lt;/code&gt; 是单体服务的多个 &lt;code&gt;Pod&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5455820476858345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1iaoN3SX9sZPEexM2K52YmnlXIXNs8SJfY7FWRZVcSOXx3bttvSqzIKKpPHYsp5YAaVz9ib8WydaMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2852&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我就通过本文详细跟大家分享一下如何使用 &lt;code&gt;go-zero&lt;/code&gt; 快速开发一个有多个模块的单体服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单体示例&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用一个上传下载的单体服务来讲解 &lt;code&gt;go-zero&lt;/code&gt; 单体服务开发的最佳实践，为啥用这么个示例呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;go-zero&lt;/code&gt; 社区里经常有同学会问上传文件怎么定义 &lt;code&gt;API&lt;/code&gt; 文件，然后用 &lt;code&gt;goctl&lt;/code&gt; 自动生成。初见此类问题会觉得比较奇怪，为啥不用 &lt;code&gt;OSS&lt;/code&gt; 之类的服务呢？发现很多场景是用户需要上传一个excel，然后服务端解析完也就丢弃此文件了。一是文件较小，二是用户量也不大，就不用那么复杂的通过 &lt;code&gt;OSS&lt;/code&gt; 来绕一圈了，我觉得也挺合理的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;go-zero&lt;/code&gt; 社区也有同学问下载文件怎么通过定义一个 &lt;code&gt;API&lt;/code&gt; 文件然后 &lt;code&gt;goctl&lt;/code&gt; 自动生成。此类问题之所以通过 Go 来做，问下来一般两个原因，一是业务刚开始，能简单点布一个服务搞定就一个吧；二是希望能吃上 &lt;code&gt;go-zero&lt;/code&gt; 的内置 &lt;code&gt;JWT&lt;/code&gt; 自动鉴权。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仅以此为示例，无需深入探讨上传下载是否应该通过 &lt;code&gt;Go&lt;/code&gt; 来实现。那么接下来我们就看看我们怎么通过 &lt;code&gt;go-zero&lt;/code&gt; 来解决这么一个单体服务，我们称之为文件（file）服务。架构如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5824175824175825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg1iaoN3SX9sZPEexM2K52YmnTgVU9ySicvtVib98iaJjS9ZMSr1zoIRdVNSMxSlNFicwfQxjkfZJibAZibAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单体实现&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;API&lt;/code&gt; 定义&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用过 &lt;code&gt;go-zero&lt;/code&gt; 的同学都知道，我们提供了一个 &lt;code&gt;API&lt;/code&gt; 格式的文件来描述 &lt;code&gt;RESTful API&lt;/code&gt;，然后可以通过 &lt;code&gt;goctl&lt;/code&gt; 一键生成对应的代码，我们只需要在 &lt;code&gt;logic&lt;/code&gt; 文件里填写对应的业务逻辑即可。我们就来看看 &lt;code&gt;download&lt;/code&gt; 和 &lt;code&gt;upload&lt;/code&gt; 服务怎么定义 &lt;code&gt;API&lt;/code&gt;.&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Download&lt;/code&gt; 服务定义&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例需求如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过  &lt;code&gt;/static/&amp;lt;filename&amp;gt;&lt;/code&gt; 路径下载名为 &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; 的文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接返回文件内容即可&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在 &lt;code&gt;api&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;download.api&lt;/code&gt; 的文件，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;syntax = &quot;v1&quot;&lt;br/&gt;&lt;br/&gt;type DownloadRequest {&lt;br/&gt;  File string `path:&quot;file&quot;`&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;service file-api {&lt;br/&gt;  @handler DownloadHandler&lt;br/&gt;  get /static/:file(DownloadRequest)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;zero-api&lt;/code&gt; 的语法还是比较能自解释的，含义如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;syntax = “v1”&lt;/code&gt; 表示这是 &lt;code&gt;zero-api&lt;/code&gt; 的 &lt;code&gt;v1&lt;/code&gt; 语法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;type DownloadRequest&lt;/code&gt; 定义了 &lt;code&gt;Download&lt;/code&gt; 的请求格式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;service file-api&lt;/code&gt; 定义了 &lt;code&gt;Download&lt;/code&gt; 的请求路由&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Upload&lt;/code&gt; 服务定义&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例需求如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;/upload&lt;/code&gt; 路径上传文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;json&lt;/code&gt; 返回上传状态，其中的 &lt;code&gt;code&lt;/code&gt; 可用于表达比 &lt;code&gt;HTTP code&lt;/code&gt; 更丰富的场景&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在 &lt;code&gt;api&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;upload.api&lt;/code&gt; 的文件，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;syntax = &quot;v1&quot;&lt;br/&gt;&lt;br/&gt;type UploadResponse {&lt;br/&gt;  Code int `json:&quot;code&quot;`&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;service file-api {&lt;br/&gt;  @handler UploadHandler&lt;br/&gt;  post /upload returns (UploadResponse)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;syntax = “v1”&lt;/code&gt; 表示这是 &lt;code&gt;zero-api&lt;/code&gt; 的 &lt;code&gt;v1&lt;/code&gt; 语法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;type UploadResponse&lt;/code&gt; 定义了 &lt;code&gt;Upload&lt;/code&gt; 的返回格式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;service file-api&lt;/code&gt; 定义了 &lt;code&gt;Upload&lt;/code&gt; 的请求路由&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题来了&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Download&lt;/code&gt; 和 &lt;code&gt;Upload&lt;/code&gt; 服务我们都定义好了，那怎么才能放到一个服务里给用户提供服务呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道细心的你有没注意到一些细节：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;不管是 &lt;code&gt;Download&lt;/code&gt; 还是 &lt;code&gt;Upload&lt;/code&gt; 我们在 &lt;code&gt;request&lt;/code&gt; 和 &lt;code&gt;response&lt;/code&gt; 数据定义的时候都加了前缀，并没有直接使用诸如 &lt;code&gt;Request&lt;/code&gt; 或 &lt;code&gt;Response&lt;/code&gt; 这样的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们在 &lt;code&gt;download.api&lt;/code&gt; 和 &lt;code&gt;upload.api&lt;/code&gt; 里面定义 &lt;code&gt;service&lt;/code&gt; 的时候都是用的 &lt;code&gt;file-api&lt;/code&gt; 这个 &lt;code&gt;service name&lt;/code&gt;，并没有分别用 &lt;code&gt;download-api&lt;/code&gt; 和 &lt;code&gt;upload-api&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么做的目的其实就是为了我们接下来把这两个服务放到同一个单体里自动生成对应的 &lt;code&gt;Go&lt;/code&gt; 代码。让我们来看看怎么把 &lt;code&gt;Download&lt;/code&gt; 和 &lt;code&gt;Upload&lt;/code&gt; 合并起来~&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;定义单体服务接口&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出于简单考虑，&lt;code&gt;goctl&lt;/code&gt; 只支持接受单一 &lt;code&gt;API&lt;/code&gt; 文件作为参数，同时接受多个 &lt;code&gt;API&lt;/code&gt; 文件的问题不在此讨论，如有简单高效的方案，后续可能支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在 &lt;code&gt;api&lt;/code&gt; 目录下创建一个新的 &lt;code&gt;file.api&lt;/code&gt; 的文件，内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;syntax = &quot;v1&quot;&lt;br/&gt;&lt;br/&gt;import &quot;download.api&quot;&lt;br/&gt;import &quot;upload.api&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样我们就像 &lt;code&gt;C/C++&lt;/code&gt; 的 &lt;code&gt;#include&lt;/code&gt; 一样把 &lt;code&gt;Download&lt;/code&gt; 和 &lt;code&gt;Upload&lt;/code&gt; 服务都导入进来了。但其中有几点需要注意的：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;定义的结构体不能重名&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所有文件里包含的 &lt;code&gt;service name&lt;/code&gt; 必须是同一个&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;最外层的 &lt;code&gt;API&lt;/code&gt; 文件也可以包含同一个 &lt;code&gt;service&lt;/code&gt; 的部分定义，但我们推荐保持对称，除非这些 &lt;code&gt;API&lt;/code&gt; 确实属于父层级，比如跟 &lt;code&gt;Download&lt;/code&gt; 和 &lt;code&gt;Upload&lt;/code&gt; 属于同一个逻辑层次，那么就不应该放到 &lt;code&gt;file.api&lt;/code&gt; 里面定义。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，我们的文件结构如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;.&lt;br/&gt;└── api&lt;br/&gt;    ├── download.api&lt;br/&gt;    ├── file.api&lt;br/&gt;    └── upload.api&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;生成单体服务&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然已经有了 &lt;code&gt;API&lt;/code&gt; 接口定义，那么对于 &lt;code&gt;go-zero&lt;/code&gt; 来说，接下来的事情就很简单直接了（当然，定义 &lt;code&gt;API&lt;/code&gt; 也挺简单的，不是吗？），让我们来使用 &lt;code&gt;goctl&lt;/code&gt; 生成单体服务代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; goctl api go -api api/file.api -dir .&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看看生成后的文件结构：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;.&lt;br/&gt;├── api&lt;br/&gt;│   ├── download.api&lt;br/&gt;│   ├── file.api&lt;br/&gt;│   └── upload.api&lt;br/&gt;├── etc&lt;br/&gt;│   └── file-api.yaml&lt;br/&gt;├── file.go&lt;br/&gt;├── go.mod&lt;br/&gt;├── go.sum&lt;br/&gt;└── internal&lt;br/&gt;    ├── config&lt;br/&gt;    │   └── config.go&lt;br/&gt;    ├── handler&lt;br/&gt;    │   ├── downloadhandler.go&lt;br/&gt;    │   ├── routes.go&lt;br/&gt;    │   └── uploadhandler.go&lt;br/&gt;    ├── logic&lt;br/&gt;    │   ├── downloadlogic.go&lt;br/&gt;    │   └── uploadlogic.go&lt;br/&gt;    ├── svc&lt;br/&gt;    │   └── servicecontext.go&lt;br/&gt;    └── types&lt;br/&gt;        └── types.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来按目录解释一下项目代码的构成：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;api&lt;/code&gt; 目录：我们前面定义的 &lt;code&gt;API&lt;/code&gt; 接口描述文件，无需多言&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;etc&lt;/code&gt; 目录：这个是用来放置 &lt;code&gt;yaml&lt;/code&gt; 配置文件的，所有的配置项都可以写在 &lt;code&gt;file-api.yaml&lt;/code&gt; 文件里&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;file.go&lt;/code&gt;：&lt;code&gt;main&lt;/code&gt; 函数所在文件，文件名跟 &lt;code&gt;service&lt;/code&gt; 同名，去掉了后缀 &lt;code&gt;-api&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;internal/config&lt;/code&gt; 目录：服务的配置定义&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;internal/handler&lt;/code&gt; 目录：&lt;code&gt;API&lt;/code&gt; 文件里定义的路由对应的 &lt;code&gt;handler&lt;/code&gt; 实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;internal/logic&lt;/code&gt; 目录：用来放每个路由对应的业务处理逻辑，之所以区分 &lt;code&gt;handler&lt;/code&gt; 和 &lt;code&gt;logic&lt;/code&gt; 是为了让业务处理部分尽可能减少依赖，把 &lt;code&gt;HTTP requests&lt;/code&gt; 和逻辑处理代码隔离开，便于后续按需拆分成 &lt;code&gt;RPC service&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;internal/svc&lt;/code&gt; 目录：用来定义业务逻辑处理的依赖，我们可以在 &lt;code&gt;main&lt;/code&gt; 里面创建依赖的资源，然后通过 &lt;code&gt;ServiceContext&lt;/code&gt; 传递给 &lt;code&gt;handler&lt;/code&gt; 和 &lt;code&gt;logic&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;internal/types&lt;/code&gt; 目录：定义了 &lt;code&gt;API&lt;/code&gt; 请求和返回数据结构&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们什么也不改，先来跑一下看看效果。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go run file.go -f etc/file-api.yaml&lt;/span&gt;&lt;br/&gt;Starting server at 0.0.0.0:8888...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;实现业务逻辑&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们需要实现相关的业务逻辑，但是这里的逻辑其实只是一个演示用途，无需过于关注实现细节，只需要理解我们应该把业务逻辑写在 &lt;code&gt;logic&lt;/code&gt; 层即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里一共做了以&lt;span&gt;下&lt;/span&gt;几件事：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;增加配置项里的 &lt;code&gt;Path&lt;/code&gt; 设置，用来放置上传文件，默认值我写了当前目录，因为是示例，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Config &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;  rest.RestConf&lt;br/&gt;  &lt;span&gt;// 新增&lt;/span&gt;&lt;br/&gt;  Path &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;,default=.&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;调整了请求体的大小限制，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;Name:&lt;/span&gt; &lt;span&gt;file-api&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Host:&lt;/span&gt; &lt;span&gt;localhost&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Port:&lt;/span&gt; &lt;span&gt;8888&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 新增&lt;/span&gt;&lt;br/&gt;&lt;span&gt;MaxBytes:&lt;/span&gt; &lt;span&gt;1073741824&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于 &lt;code&gt;Download&lt;/code&gt; 需要写文件给客户端，所以我们把 &lt;code&gt;ResponseWriter&lt;/code&gt; 当成 &lt;code&gt;io.Writer&lt;/code&gt; 传递给了 &lt;code&gt;logic&lt;/code&gt; 层，修改后的代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(l *DownloadLogic)&lt;/span&gt; &lt;span&gt;Download&lt;/span&gt;&lt;span&gt;(req *types.DownloadRequest)&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  logx.Infof(&lt;span&gt;&quot;download %s&quot;&lt;/span&gt;, req.File)&lt;br/&gt;  body, err := ioutil.ReadFile(req.File)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  n, err := l.writer.Write(body)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; err&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; n &amp;lt; &lt;span&gt;len&lt;/span&gt;(body) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; io.ErrClosedPipe&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;由于 &lt;code&gt;Upload&lt;/code&gt; 需要读取用户上传的文件，所以我们把 &lt;code&gt;http.Request&lt;/code&gt; 传递给了 &lt;code&gt;logic&lt;/code&gt;  层，修改后的代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(l *UploadLogic)&lt;/span&gt; &lt;span&gt;Upload&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;(resp *types.UploadResponse, err error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  l.r.ParseMultipartForm(maxFileSize)&lt;br/&gt;  file, handler, err := l.r.FormFile(&lt;span&gt;&quot;myFile&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;defer&lt;/span&gt; file.Close()&lt;br/&gt;&lt;br/&gt;  logx.Infof(&lt;span&gt;&quot;upload file: %+v, file size: %d, MIME header: %+v&quot;&lt;/span&gt;,&lt;br/&gt;    handler.Filename, handler.Size, handler.Header)&lt;br/&gt;&lt;br/&gt;  tempFile, err := os.Create(path.Join(l.svcCtx.Config.Path, handler.Filename))&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;defer&lt;/span&gt; tempFile.Close()&lt;br/&gt;  io.Copy(tempFile, file)&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &amp;amp;types.UploadResponse{&lt;br/&gt;    Code: &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;  }, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整代码：https://github.com/zeromicro/zero-examples/tree/main/monolithic&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以通过启动 &lt;code&gt;file&lt;/code&gt; 单体服务：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; go run file.go -f etc/file-api.yaml&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以通过 &lt;code&gt;curl&lt;/code&gt; 来验证 &lt;code&gt;Download&lt;/code&gt; 服务：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; curl -i &lt;span&gt;&quot;http://localhost:8888/static/file.go&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;HTTP/1.1 200 OK&lt;br/&gt;Traceparent: 00-831431c47d162b4decfb6b30fb232556-dd3b383feb1f13a9-00&lt;br/&gt;Date: Mon, 25 Apr 2022 01:50:58 GMT&lt;br/&gt;Content-Length: 584&lt;br/&gt;Content-Type: text/plain; charset=utf-8&lt;br/&gt;&lt;br/&gt;...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;示例仓库里包含了 &lt;code&gt;upload.html&lt;/code&gt;，浏览器打开这个文件就可以尝试 &lt;code&gt;Upload&lt;/code&gt; 服务了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单体开发的总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把用 &lt;code&gt;go-zero&lt;/code&gt; 开发单体服务的完整流程归纳如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;定义各个子模块的 &lt;code&gt;API&lt;/code&gt; 文件，比如：&lt;code&gt;download.api&lt;/code&gt; 和 &lt;code&gt;upload.api&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定义总的 &lt;code&gt;API&lt;/code&gt; 文件，比如：&lt;code&gt;file.api&lt;/code&gt;。用来 &lt;code&gt;import&lt;/code&gt; 步骤一定义的各个子模块的 &lt;code&gt;API&lt;/code&gt; 文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;goctl api go&lt;/code&gt; 命令生成单体服务框架代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增加和调整配置，实现对应的子模块的业务逻辑&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，&lt;code&gt;goctl&lt;/code&gt; 可以根据 &lt;code&gt;SQL&lt;/code&gt; 一键生成 &lt;code&gt;CRUD&lt;/code&gt; 以及 &lt;code&gt;cache&lt;/code&gt; 代码，可以帮助大家更快速的开发单体服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;微信交流群&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注『&lt;strong&gt;微服务实践&lt;/strong&gt;』公众号并点击 &lt;strong&gt;交流群&lt;/strong&gt; 获取社区群二维码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你有 &lt;code&gt;go-zero&lt;/code&gt; 的使用心得文章，或者源码学习笔记，欢迎通过公众号联系投稿！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>21b14330a09d6149a5242c134137f70c</guid>
<title>Websocket 被玩出了多种花样！</title>
<link>https://toutiao.io/k/hrbfj5q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、首先我们要了解 Websocket 握手的原理&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5540752351097179&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpoC4GCCpgaSlCwdbzUhSsKqiaHrg5DsFPGAwNklcR0vj8eUBN1UyVMsB0SHd6frF2QtDmjCUfEJQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1276&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请求头特征&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP Header 中 Connection 字段的值必须为 Upgrade&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP Header 中 Upgrade 字段必须为 websocket&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Sec-WebSocket-Key 字段的值是采用 base64 编码的随机 16 字节字符串&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Sec-WebSocket-Protocol 字段的值记录使用的子协议，比如 binary base64&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MjcxNTQ0Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0dLQzNJW15CVaCoNjposvTpccciaj05o5nPiaqfLRRfTQiaYFYPN41Etrrqt8jPOWukPmJWt3lYxwuA/0?wx_fmt=png&quot; data-nickname=&quot;全栈修仙之路&quot; data-alias=&quot;FerRoad&quot; data-signature=&quot;专注分享 TS、Vue3、前端架构和源码解析等技术干货。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;响应头特征&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;状态码是 101 表示 Switching Protocols&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Upgrade / Connection / Sec-WebSocket-Protocol 和请求头一致&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Sec-WebSocket-Accept 是通过请求头的 Sec-WebSocket-Key 生成&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、短连接轮询、长连接、Websocket 横向对比&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 短连接轮询&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;且通过宏任务发起，受限于 Event Loop，无法保证及时性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 长连接&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;HTTP keep-alive 开启后虽然 TCP 可以复用，但是 Header 重复的问题并没有解决&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;同时 HTTP keep-alive 还有一个有效期，有效期结束后服务端会发侦查帧探查 TCP 是否有效&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;题外话：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;HTTP keep-alive 的作用是，告知服务端持久化当前的&lt;/strong&gt; &lt;strong&gt;TCP&lt;/strong&gt; &lt;strong&gt;连接，不要立即断开，以便后续的 HTTP 请求复用它，也就是我们所说的「长连接」&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;HTTP 的 keep-alive 是为了让 TCP 活久一点，而 TCP 本身也有一个 keepalive（注意没有横杠哦）机制。这是 TCP 的一种检测连接状况的保活机制，keepalive 是 TCP 保活定时器：TCP 建立后，如果闲置没用，服务器不可能白等下去，闲置一段时间[可设置]后，服务器就会尝试向客户端发送侦测包，来判断 TCP 连接状况，如果没有收到对方的回答（ACK包），就会过一会[可设置]再侦测一次，如果多次[可设置]都没回答，就会丢弃这个 TCP 连接&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5097087378640777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIpoC4GCCpgaSlCwdbzUhSsK3npTWK7U1oib2GNFbXHnGLIPCmyjot9iaVGlxyczibtVRRXcJHaR2qwsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;618&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（TCP keepalive 保活示意图）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. Websocket&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;和 HTTP 一样都是建立在 TCP 协议之上，但只需一次 HTTP 握手，就能建立持久性连接，后续就不走 HTTP 了,而是 WebSocket 特有的数据帧&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;数据格式轻量，且支持发送二进制数据，支持 ws 和加密的 wss&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、我在微信小程序中利用 WebSocket 都捣鼓了什么？&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 验签鉴权及对应的容错策略（登录态要求、峰值访问、服务端宕机异常）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;websocket 握手后，接口请求即可以放弃 HTTP 改走 weboskcet，但大部分业务接口都要求登录态，因此握手成功后必须先走一次签名鉴权，获取登录态&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当出现大流量访问的场景（如大促、热点活动等）或服务端出 bug 而导致服务端宕机，前端会做 对应容错，将位于内存的等待队列中的待发送请求立即降级成 HTTP 发送出去&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SocketTask.onOpen(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;  SocketTask.sendSocketMessage({&lt;br/&gt;     msg_type: &lt;span&gt;&#x27;验签&#x27;&lt;/span&gt;，&lt;br/&gt;     token: &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;&lt;br/&gt;  }, (response) =&amp;gt; {&lt;br/&gt;      console.log(response.user_id, response.access_token)&lt;br/&gt;&lt;br/&gt;      // 通道可用，打个标记&lt;br/&gt;      global.isSocketAvaliable = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  })&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 心跳保活（减少 TCP 占用）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：为了减少 TCP 连接的无效占用，客户端定时发送一个空包到服务端，告知服务端不要销毁这条 socket，如果服务端超过一定时间都没收到心跳包，则将关闭并销毁该 socket&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SocketTask.onOpen(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;  SocketTask.sendSocketMessage({&lt;br/&gt;     msg_type: &lt;span&gt;&#x27;验签&#x27;&lt;/span&gt;，&lt;br/&gt;     token: &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;&lt;br/&gt;  }, (response) =&amp;gt; {&lt;br/&gt;      console.log(response.user_id, response.access_token)&lt;br/&gt;&lt;br/&gt;      // 通道可用，打个标记&lt;br/&gt;      global.isSocketAvaliable = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;      &lt;br/&gt;      // 验签成功，开始定时发送心跳包&lt;br/&gt;      setInterval(() =&amp;gt; {&lt;br/&gt;          SocketTask.sendSocketMessage({&lt;br/&gt;            msg_type: &lt;span&gt;&#x27;心跳&#x27;&lt;/span&gt;&lt;br/&gt;          });&lt;br/&gt;      });&lt;br/&gt;   });&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3 模拟 RTT（用于弱网体验优化）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：在发送心跳包时，可得知一个心跳包的 RTT，以此模拟当前用户网络环境的 TCP RTT，并据此计算出平滑 RTO，用于弱网体验优化&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SocketTask.onOpen(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;  SocketTask.sendSocketMessage({&lt;br/&gt;     msg_type: &lt;span&gt;&#x27;验签&#x27;&lt;/span&gt;，&lt;br/&gt;     token: &lt;span&gt;&#x27;xxx&#x27;&lt;/span&gt;&lt;br/&gt;  }, (response) =&amp;gt; {&lt;br/&gt;      console.log(response.user_id, response.access_token)&lt;br/&gt;&lt;br/&gt;      // 通道可用，打个标记&lt;br/&gt;      global.isSocketAvaliable = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;      &lt;br/&gt;      // 验签成功，开始定时发送心跳包&lt;br/&gt;      setInterval(() =&amp;gt; {&lt;br/&gt;          // 计算 RTT&lt;br/&gt;          const begin = Date.now();&lt;br/&gt;&lt;br/&gt;          SocketTask.sendSocketMessage({&lt;br/&gt;            msg_type: &lt;span&gt;&#x27;心跳&#x27;&lt;/span&gt;&lt;br/&gt;          }, () =&amp;gt; {&lt;br/&gt;            const end = Date.now();&lt;br/&gt;            &lt;br/&gt;            const RTT = begin - end;&lt;br/&gt;            &lt;br/&gt;            const smoothedRTO = cal(RTT);&lt;br/&gt;            &lt;br/&gt;            global.smoothedRTO = smoothedRTO;&lt;br/&gt;          });&lt;br/&gt;      });&lt;br/&gt;   });&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4 Snappy 压缩（横向对比了 gzip / zip / 7z）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：在小程序中引入第三方压缩包（牺牲小程序包体积），减少 websocket 传输的字节数&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  import Snappy from &lt;span&gt;&#x27;snappy&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;  SocketTask.sendSocketMessage = &lt;span&gt;function&lt;/span&gt; (msg) {&lt;br/&gt;     const encryptedMsg = Snappy.encode(msg);&lt;br/&gt;     &lt;br/&gt;     wx.send(encryptedMsg);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 重连（阶梯式错位重连，避免拥挤）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：用户的网络环境不稳定，可能会存在主动 / 被动断开 socket 的情况，需要进行自动重连&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SocketTask.onClose(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;&lt;/span&gt; () {&lt;br/&gt;  // 限定最大重连次数&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (retryCount &amp;gt; maxCount) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  retryCount++;&lt;br/&gt;&lt;br/&gt;  setTimeout(() =&amp;gt; {&lt;br/&gt;    SocketTask.connectSocket();&lt;br/&gt;  }, retryCount * 1000 + Math.random() * 1000);&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6 埋点中间层缓存（重复的用户信息可以不用每次都上报，支持刷新缓存）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;背景与目的：为减少网络传输的包体积，通过 websocket 上报埋点日志时，可以把部分重复字段值在第一次上报时缓存在服务端，从第二次上报开始只上报值不重复的字段，然后由服务端做日志合并&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪码示意：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SocketTask.sendSocketMessage({&lt;br/&gt;     msg_type: &lt;span&gt;&#x27;埋点日志&#x27;&lt;/span&gt;，&lt;br/&gt;     logs: {&lt;br/&gt;       country: &lt;span&gt;&#x27;China&#x27;&lt;/span&gt;, // 可缓存字段&lt;br/&gt;       city: &lt;span&gt;&#x27;北京&#x27;&lt;/span&gt;, // 可缓存字段&lt;br/&gt;       platform: &lt;span&gt;&#x27;安卓&#x27;&lt;/span&gt;, // 可缓存字段&lt;br/&gt;       click_some_btn: &lt;span&gt;true&lt;/span&gt; // 动态变化的埋点字段&lt;br/&gt;     },&lt;br/&gt;     cacheFields: [&lt;span&gt;&#x27;country&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;city&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;platform&#x27;&lt;/span&gt;] // 只在第一次上报时携带&lt;br/&gt; });&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7 启用 TCP_NODELAY&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;TCP_NODELAY 是用来禁用 Nagle 算法的。Nagle 算法设计的目的是提高网络带宽利用率，其核心思路是「合并小的 TCP 包为一个大的 TCP 包」，避免过多的小包的 TCP 头部浪费网络带宽&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考资料：https://www.zhihu.com/question/42308970&lt;/p&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: 0px; text-align: left; white-space: normal; font-size: 16px; line-height: 1.6; word-break: break-word;&quot; data-darkmode-color-16072568501583=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(0, 0, 0)&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; color: rgb(89, 89, 89); line-height: 26px;&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span&gt;如果你觉得这篇内容对你有帮助，我想请你帮我2个小忙：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;1. 点个&lt;/span&gt;&lt;span&gt;「在看」&lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;，让更多人也能看到这篇文章&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;2. 订阅官方博客 &lt;/span&gt;&lt;span&gt;www.inode.club &lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;让我们一起成长&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>77b1c9fd822dac62c3638b367c4cf5b5</guid>
<title>Istio 基础架构及应用</title>
<link>https://toutiao.io/k/2eztxv1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前几天被问到项目中使用的服务网格核心 &lt;strong&gt;Istio&lt;/strong&gt; 的架构及改进问题，一时语塞！😓&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;当时项目紧急只顾着调研方案及快速应用了，并未对其清奇骨骼及丰腻肌理进行深入了解，&lt;strong&gt;Istio 是怎么进行流量拦截治理的&lt;/strong&gt;，&lt;strong&gt;Istio 架构都包含哪些组件，分别负责什么功能&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;本着对行业发展主流技术的好奇和敏感，随即系统性学习了解了下，分享给大家，有不对的地方还望见谅并帮忙批评指正~~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、服务网格ServiceMesh&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为技术背景，谈论 Istio 之前不能免俗必得谈及服务网格 ServiceMesh。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;时下微服务大行其道，单体应用被拆分为较多相对独立的微小服务，单个服务的复杂度及维护成本大幅降低，却碰壁了另外一个难题--众多微服务之间的通信联动管理及监控，如服务发现、负载均衡、版本控制、故障转移、灰度发布、熔断限流及监控追踪等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;业界大牛们解决这个难题也经过了多次架构演进，大致分为&lt;strong&gt;服务内嵌代理&lt;/strong&gt;、&lt;strong&gt;代理分离多服务复用&lt;/strong&gt;、&lt;strong&gt;代理和服务一对一匹配(sidecar 边车模式)&lt;/strong&gt; 三个阶段。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.11875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvvicAFgOONlOAPP2Akn5SfAVu7dNiaLgGaoe7Nf3ueFYm0gquY0ibKgsLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Service Mesh 就是为微服务而生的专用基础设施层，像网格一样连接所有的微服务通信，是一套轻量级高性能网络代理。它提供安全的、快速的、可靠地服务间通讯，与实际应用部署一起，但对应用透明。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6369137670196672&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvicqHk0PmGMZMyCWOiabb0WPgb4HveyZFDVoLOBVbUkoVKV8VEQyibQf1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;661&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;283&quot; data-backw=&quot;490&quot; data-ratio=&quot;0.5775510204081633&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvu7qnce9bD4icBvY0hibWyLZEWAE7tgaFNFGmWXP9NE2yVty7sHkiaicDog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、Istio 核心架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ServiceMesh 和 sidecar 都是一种架构思想，具体的技术生态比较庞大，Istio、Envoy、MOSN、Linkerd、Kong、Nginxmesh、Jaeger、Zipkin、Kiali、Grafana、Prometheus等等。我们今天不发散，集中看下 Istio。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;Istio 是由 IBM、Google 和 Lyft 开发的一套服务网格的开源实现。目前 Istio 市场占有率70%+，已经算是事实上的服务网格技术标准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;Istio 默认使用 Lyft 的 Envoy 作为数据平面 sidecar 控制器，控制平面控制器则主要包括 Pilot 司令官、Mixer 守护神、安全碉堡 Citadel 、配置中心 Galley 等。（Istio1.5之后整体架构变动较大，将控制平面众多组件合为一体收归Istiod 统一控制，但为了更清楚的讲述我们暂且先分开看）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9085545722713865&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvbUvmIflWJMugTEUR1Vuzxib5TUicyIsDbutmvALZs2JEwInvjTNkSIFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1356&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Envoy数据代理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Envoy 是用 C++ 开发的高性能网络代理，它是 Istio 数据平面的核心组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;它作为 sidecar 和服务部署在同一个 Pod 中，通过 sidecar-injector 自动注入，通过容器启动时初始化设定一堆 ipatables 规则来拦截代理服务网格中所有服务的入站和出站流量，从而进行相应的服务及流量治理维护，这块的详细内容上一篇文章中已经详细讲述了，可以参见 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg5OTYyMjA1Mg==&amp;amp;mid=2247484036&amp;amp;idx=1&amp;amp;sn=ca104319694cc51c440dd5c1965c8f45&amp;amp;chksm=c051374ff726be597e949050cd2cb8e53fd70b0216b91b471306b04b1031bebcef64f376d14f&amp;amp;token=94132427&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;?&lt;/span&gt;从iptables谈ServiceMesh流量拦截&lt;/a&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;istio-iptables -p 15001 -z 15006 -u 1337 -m REDIRECT -i &lt;span&gt;&#x27;*&#x27;&lt;/span&gt; -x &lt;span&gt;&quot;&quot;&lt;/span&gt; -b &lt;span&gt;&#x27;*&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Pilot司令官&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pilot 是 Istio 控制平面流量管理的核心组件。管理和配置部署在 Istio 服务网格中的所有 Envoy 数据代理实例，允许用户配置 Envoy 代理之间的流量转发路由规则及故障转移恢复如超时重试熔断等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Pilot-agent 代理守护进程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pilot-agent 在启动 Envoy 时将 xDS server 信息通过静态资源的方式配置到 Envoy 的初始化配置文件中，Envoy 启动后再通过 xDS server 获取网格中的服务信息、路由规则等动态资源。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5135802469135803&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvmjl7u72x2ib20J2vlrNtlCuokj6pnp1EhUuqzlkot3ibXxz0ydTA5YwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;405&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ ps -ef&lt;br/&gt;UID          PID    PPID  C STIME TTY          TIME CMD&lt;br/&gt;istio-p+       1       0  0 Mar25 ?        00:30:10 /usr/&lt;span&gt;local&lt;/span&gt;/bin/pilot-agent proxy sidecar --domain bpd-ie.svc&lt;br/&gt;istio-p+      70       1 30 Mar25 ?        16-14:25:11 /usr/&lt;span&gt;local&lt;/span&gt;/bin/envoy -c etc/istio/proxy/envoy-rev0.json -&lt;br/&gt;istio-p+      95       0  0 08:24 pts/0    00:00:00 /bin/sh&lt;br/&gt;istio-p+     104      95  0 08:33 pts/0    00:00:00 ps -ef&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Mixer守护神&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mixer 是 Istio 中负责执行服务间的访问策略和收集遥测数据的组件。服务间请求转发时，Envoy 会对 Mixer 发起 check 和 report 两次请求执行访问策略与管理配额，并在请求转发后上报遥测数据。我们看到的可视化的日志监控，jaeger、zipkin、kiali、prometheus 等基础设施的数据都是Mixer 通过 Adapter 机制遥测上报的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Citadel安全碉堡&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Citadel 主要负责 Istio 的安全问题。负责证书的颁发及校验，通过内置身份和凭证管理提供强大的服务间和最终用户身份验证。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Galley配置中心&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Galley 主要负责用户配置信息的管理，从底层平台接受并验证分发配置信息到其他组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Istio1.5 版本后架构变动较大，全面拥抱变化的一个版本，重建了整个控制平面，将各个组件多进程合并打造了全新的部署模式 istiod，降低部署成本；摒弃了拖累系统性能的 Mixer；保证兼容性也不忘持续优化和引入新的功能。在彻底抛弃历史包袱的同时，Istio 团队也用他们的勇气践行了敏捷开发的真谛，并且功能、性能、灵活性等各方面都得到了改进。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6006144393241167&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvvv7w7ILMma8UjOn0jTtnicLiaic75RCsHrLmaol0Y4WibHBpLsDJvh3Fnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1302&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、Istio 应用&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来结合我们项目中实际应用简单介绍 Istio 的一些规则配置用法，主要包括 Virtualservice、DestinationRule、GateWay、ServiceEntry、Sidecar等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看基础服务搭建好（我这里用的是Istio 1.7）以后系统中都有哪些组件（不一定都一样，可以自己选择遥测相关组件）。搭建过程略，大家可以参考官网详细说明。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;kubectl get svc -n istio-system --kubeconfig ~/.kube/config.thanos&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.26334841628959277&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvGxWgibEr0sCnhlCqSNLtur73SugmQmIMF58k64P7JhFic6nUu8O8UXKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2210&quot;/&gt;&lt;/p&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;VirtualService&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义了一组路由规则，当流量进入时逐个规则进行匹配，直到匹配成功后将流量转发给给定的路由地址，同时可以进行灰度发布、超时重试、故障转移、流量镜像等多种服务治理。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;apiVersion: networking.istio.io/v1beta1&lt;br/&gt;kind: VirtualService&lt;br/&gt;metadata:&lt;br/&gt;  name: **-virtualservice&lt;br/&gt;  namespace: **&lt;br/&gt;spec:&lt;br/&gt;  hosts:&lt;br/&gt;    - **.**.svc.cluster.local&lt;br/&gt;    - **.**&lt;br/&gt;  gateways:&lt;br/&gt;    - istio-system/default-gateway&lt;br/&gt;    - mesh&lt;br/&gt;  http:&lt;br/&gt;    - match:   &lt;br/&gt;        - port: 9090   &lt;span&gt;## rpc走9090端口&lt;/span&gt;&lt;br/&gt;      route:&lt;br/&gt;        - destination:&lt;br/&gt;            host: **.**.svc.cluster.local&lt;br/&gt;            port:&lt;br/&gt;              number: 9090&lt;br/&gt;    - route:          &lt;span&gt;## http默认走8080端口&lt;/span&gt;&lt;br/&gt;        - destination:&lt;br/&gt;            host: **.**.svc.cluster.local&lt;br/&gt;            port:&lt;br/&gt;              number: 8080&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还可以应用更多治理策略, 下面简单列举几个，具体参见官网规则。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    - match:&lt;br/&gt;        - uri:   &lt;span&gt;## 流量重定向&lt;/span&gt;&lt;br/&gt;            prefix: /checkparam&lt;br/&gt;        rewrite:&lt;br/&gt;            uri: /check&lt;br/&gt;        route:&lt;br/&gt;        - destination:&lt;br/&gt;            host: **&lt;br/&gt;            subset: v1   &lt;span&gt;##灰度&lt;/span&gt;&lt;br/&gt;        timeout: 0.5s  &lt;span&gt;## 超时重试 重试条件 重试间隔 重试次数等&lt;/span&gt;&lt;br/&gt;        retries:&lt;br/&gt;          attempts: 3&lt;br/&gt;          perTryTimeout: 1s&lt;br/&gt;          retryOn: 5xx&lt;br/&gt;        mirror:       &lt;span&gt;## 流量镜像&lt;/span&gt;&lt;br/&gt;          host: **&lt;br/&gt;          subset: v2&lt;br/&gt;        mirror_percent: 100  &lt;span&gt;##镜像比例&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DestinationRule&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义了网格中某个 Service 对外提供服务的策略及规则，这包括负载均衡策略、异常点检测、熔断控制、访问连接池等。负载均衡策略支持简单的负载策略（ROUND_ROBIN、LEAST_CONN、RANDOM、PASSTHROUGH）、一致性 Hash 策略和区域性负载均衡策略。我们服务中用的比较简单这里就不列了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Gateway&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义了所有 HTTP/TCP 流量进入网格或者从网格中出站的统一入口和出口。它描述了一组对外公开的端口、协议、负载均衡、以及 SNI 配置。Istio Gateway 包括 Ingress Gateway 与 Egress Gateway，分别用来配置网格的入口流量与出口流量。这个可以多服务复用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ServiceEntry&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以将网格外的服务注册到 Istio 的注册表中去，这样就可以把外部服务当做网格内部的服务一样进行管理和操作。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Sidecar&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要用来定义控制 Envoy 代理转发和接收的端口协议等，并可以限制 Sidecar 出站流量允许到达的目标服务集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终，我们服务通过 Kiali 展示的服务拓扑图如下所示。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6112334801762115&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rJDC5vuwJCOBZDgPSnkaVRK9wRs1DPQvCRrMLRKPD5fpb2lxrDlyJSYntgzX6abLMu44ajOYUJQ9p3QqwGP1lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1816&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相应的 jaeger 和 prometheus 等展示的追踪及监控也都一应俱全，这里就不展示了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合服务网格的实际应用，我们一起回顾了微服务治理的架构演进，一起简单探讨了 Istio 的核心架构及1.5版本以后的变革，进而简单介绍了 Istio 服务治理的一些简单应用规则配置。至于单个组件的具体工作深入原理后面有机会我们再逐个探讨。本人也是一边学一边用，过程中如果有什么描述不恰当的地方还请各位看官见谅。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>18d8e1d09809e17b5026bc156569baf1</guid>
<title>Golang开发gRPC应用服务</title>
<link>https://toutiao.io/k/5emed8u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;gRPC是Google发起的一个开源RPC框架，使用HTTP/2传输协议，使用Protocol Buffers编码协议，相比RESTful框架的程序性能提高不少，而且当前流行的编程语言基本都已经支持。&lt;/p&gt;&lt;p&gt;Golang开发gRPC应用程序的套路也已经很清晰，这篇文章就来做一个简单的介绍，算是入门。&lt;/p&gt;&lt;h1&gt;1、安装protoc&lt;/h1&gt;&lt;p&gt;这个工具也称为proto编译器，可以用来生成各种开发语言使用proto协议的代码。&lt;/p&gt;&lt;p&gt;下载地址：https://github.com/protocolbuffers/protobuf/releases&lt;/p&gt;&lt;p&gt;一般下载最新版本就行，注意要符合自己当前的操作系统。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6965065502183406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kayBfHYOoNh336obA2fK3RtxiaudBh7Shf9ja8PvguuCcpJYrj7JKNx4XuelzOG86SCibLWMpWB97uJZKG0CWYUQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;458&quot;/&gt;&lt;/p&gt;&lt;p&gt;解压后里边有个 &lt;em&gt;protoc.exe&lt;/em&gt; ，拷贝到 &lt;em&gt;GOPATH&lt;/em&gt; 的 bin 目录下，我这里就是 &lt;em&gt;C:/Users/PC-001/go/bin&lt;/em&gt; ，PC-&lt;em&gt;001&lt;/em&gt; 是登录当前操作系统的用户名，需要换成你自己的。&lt;em&gt;GOPATH&lt;/em&gt; 可以通过执行 &lt;em&gt;go env&lt;/em&gt; 查看到。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6895787139689579&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kayBfHYOoNh336obA2fK3RtxiaudBh7ShiaQMzLyJauXdf6FYnauy2RibPBlqA6KjWhO3t4yf2Qz1I2vWxA8b3VAA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;451&quot;/&gt;&lt;/p&gt;&lt;p&gt;一般都是把 &lt;em&gt;GOPATH&lt;/em&gt; 的 &lt;em&gt;bin&lt;/em&gt; 目录添加到环境变量的 &lt;em&gt;PATH&lt;/em&gt; 变量中，如果没有，请自行添加上。&lt;/p&gt;&lt;h1&gt;2、安装protoc的Golang gRPC插件&lt;/h1&gt;&lt;p&gt;执行如下命令，会在 &lt;em&gt;GOPATH&lt;/em&gt; 的 &lt;em&gt;bin&lt;/em&gt; 目录下生成两个可执行文件：protoc-gen-go.exe 和 protoc-gen-go-grpc.exe。这两个插件可以用来生成Golang版本的proto协议代码和gRPC代理代码。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;go install google.golang.org/protobuf/cmd/protoc-gen-go&lt;br/&gt;go install google.golang.org/grpc/cmd/protoc-gen-go-grpc&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;3、编写proto文件&lt;/h1&gt;&lt;p&gt;proto文件是符合Protocol Buffers语言规范的数据交换协议文件，就像以前WebService定义服务时使用的XML文件。现在一般都是用proto3了，这里创建一个名为 &lt;em&gt;hello.proto&lt;/em&gt; 的文件，放到项目的proto目录下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;syntax = &quot;proto3&quot;;&lt;br/&gt;&lt;br/&gt;option go_package=&quot;/proto&quot;;&lt;br/&gt;&lt;br/&gt;package Business;&lt;br/&gt;&lt;br/&gt;service Hello {&lt;br/&gt;  rpc Say (SayRequest) returns (SayResponse);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;message SayResponse {&lt;br/&gt;  string Message = 1;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;message SayRequest {&lt;br/&gt;  string Name = 1;&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个协议很简单，有个名字为Hello的服务，提供一个名字为Say的rpc方法，这个方法有输入输出，输入信息中有一个名为Name的参数，输出信息中有一个名为Message的返回值。&lt;/p&gt;&lt;h1&gt;4、生成gRPC代理代码&lt;/h1&gt;&lt;p&gt;在项目根目录中执行如下命令，会在proto目录下生成两个文件：hello.pb.go 和 hello_grpc.pb.go。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/hello.proto&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hello.pb.go 中是输入输出数据类型的Golang定义，hello_grpc.pb.go 中是客户端和服务端的gRPC代理类型和方法的Golang定义。&lt;/p&gt;&lt;p&gt;也可以将文件生成到别的目录中，比如修改 &lt;em&gt;proto&lt;/em&gt; 文件中 &lt;em&gt;go_package&lt;/em&gt; 的配置为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;option go_package=&quot;/business&quot;;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行下面的命令，会生成到项目下的business目录中：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;protoc --go_out=.  --go-grpc_out=. proto/hello.proto&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体这个命令还有哪些参数，可以执行 &lt;em&gt;protoc -help&lt;/em&gt; 去探索下，这里就不啰嗦了。&lt;/p&gt;&lt;h1&gt;5、编写gRPC服务端程序&lt;/h1&gt;&lt;p&gt;这里先上代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &quot;context&quot;&lt;br/&gt;    &quot;fmt&quot;&lt;br/&gt;    &quot;grpcdemo/proto&quot;&lt;br/&gt;    &quot;net&quot;&lt;br/&gt;&lt;br/&gt;    &quot;google.golang.org/grpc&quot;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;type server struct {&lt;br/&gt;    proto.UnimplementedHelloServer&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func (s *server) Say(ctx context.Context, req *proto.SayRequest) (*proto.SayResponse, error) {&lt;br/&gt;    fmt.Println(&quot;request:&quot;, req.Name)&lt;br/&gt;    return &amp;amp;proto.SayResponse{Message: &quot;Hello &quot; + req.Name}, nil&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;func main() {&lt;br/&gt;    listen, err := net.Listen(&quot;tcp&quot;, &quot;:8001&quot;)&lt;br/&gt;    if err != nil {&lt;br/&gt;        fmt.Printf(&quot;failed to listen: %v&quot;, err)&lt;br/&gt;        return&lt;br/&gt;    }&lt;br/&gt;    s := grpc.NewServer()&lt;br/&gt;    proto.RegisterHelloServer(s, &amp;amp;server{})&lt;br/&gt;    //reflection.Register(s)&lt;br/&gt;&lt;br/&gt;    defer func() {&lt;br/&gt;        s.Stop()&lt;br/&gt;        listen.Close()&lt;br/&gt;    }()&lt;br/&gt;&lt;br/&gt;    fmt.Println(&quot;Serving 8001...&quot;)&lt;br/&gt;    err = s.Serve(listen)&lt;br/&gt;    if err != nil {&lt;br/&gt;        fmt.Printf(&quot;failed to serve: %v&quot;, err)&lt;br/&gt;        return&lt;br/&gt;    }&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整个过程如下：先定义一个名为 server 的类型，它去实现hello_grpc.pb.go中生成的HelloServer接口；然后通过grpc.NewServer创建一个gRPC服务器；然后将server类型的实例注册到这个gRPC服务器；最后让这个gRPC服务器在某个本地网络端口监听上开始接受客户端请求。&lt;/p&gt;&lt;p&gt;代码中注释了一行：&lt;em&gt;reflection.Register(s)&lt;/em&gt; 它是注册了一个特殊的service，能让外部获得server中已注册的服务和方法。这对于开发时可能比较有用，具体细节可以看这里：https://github.com/grpc/grpc-go/blob/master/Documentation/server-reflection-tutorial.md&lt;/p&gt;&lt;p&gt;如果直接粘贴这段代码的话，会有很多包没有引用进来，可以通过 &lt;em&gt;go get&lt;/em&gt; 获取这些包，也可以执行命令：&lt;em&gt;go mod tidy&lt;/em&gt; 来引入需要的包。&lt;/p&gt;&lt;p&gt;这里边还import了一个 &lt;em&gt;grpcdemo/proto&lt;/em&gt; ，这个是我这边项目的mod是grpcdemo，gRPC代理程序的package是proto，如果你的不一样，需要修改下。&lt;/p&gt;&lt;h1&gt;6、编写gRPC客户端程序&lt;/h1&gt;&lt;p&gt;访问gRPC服务也是通过hello_grpc.pb.go中生成的方法，直接上代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import (&lt;br/&gt;    &quot;bufio&quot;&lt;br/&gt;    &quot;context&quot;&lt;br/&gt;    &quot;fmt&quot;&lt;br/&gt;    &quot;grpchello/proto&quot;&lt;br/&gt;    &quot;os&quot;&lt;br/&gt;&lt;br/&gt;    &quot;google.golang.org/grpc&quot;&lt;br/&gt;    &quot;google.golang.org/grpc/credentials/insecure&quot;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;func main() {&lt;br/&gt;&lt;br/&gt;    var serviceHost = &quot;127.0.0.1:8001&quot;&lt;br/&gt;&lt;br/&gt;    conn, err := grpc.Dial(serviceHost, grpc.WithTransportCredentials(insecure.NewCredentials()))&lt;br/&gt;    if err != nil {&lt;br/&gt;        fmt.Println(err)&lt;br/&gt;    }&lt;br/&gt;    defer conn.Close()&lt;br/&gt;&lt;br/&gt;    client := proto.NewHelloClient(conn)&lt;br/&gt;    rsp, err := client.Say(context.TODO(), &amp;amp;proto.SayRequest{&lt;br/&gt;        Name: &quot;BOSIMA&quot;,&lt;br/&gt;    })&lt;br/&gt;&lt;br/&gt;    if err != nil {&lt;br/&gt;        fmt.Println(err)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    fmt.Println(rsp)&lt;br/&gt;&lt;br/&gt;    fmt.Println(&quot;按回车键退出程序...&quot;)&lt;br/&gt;    in := bufio.NewReader(os.Stdin)&lt;br/&gt;    _, _, _ = in.ReadLine()&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上边服务端程序的监听端口指定的 &lt;em&gt;8001*，所以这里先创建了一个到 *127.0.0.1:8001&lt;/em&gt; 的连接；然后使用这个连接创建指定服务的客户端 &lt;em&gt;proto.NewHelloClient(conn)&lt;/em&gt; ；然后使用这个客户端调用相应的方法。&lt;/p&gt;&lt;p&gt;hello_grpc.pb.go 已经生成了创建客户端的函数以及调用方法的函数，开发人员直接调用就好了。&lt;/p&gt;&lt;h1&gt;7、运行程序&lt;/h1&gt;&lt;p&gt;可以使用 &lt;em&gt;go run xxx.go&lt;/em&gt; 来编译并运行程序。这里为了方便测试，先使用 &lt;em&gt;go build&lt;/em&gt; 将它们编译为exe，然后再双击运行。实际运行效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41509433962264153&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/kayBfHYOoNh336obA2fK3RtxiaudBh7Shfe6fLHU9AkiceokdbaAbN9eNeln2dDLbWvKKfNG9jLWDm2ZlicL0iagFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;424&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;以上就是本文的主要内容了，protoc-gen-go 和 protoc-gen-go-grpc 这两个插件都是gPRC官方提供的，官方也提供了其它多种语言的代理生成插件，其它框架或者语言开发的gRPC程序，只要符合gRPC规范，就能实现相互之间的互相访问。&lt;/p&gt;&lt;p&gt;完整代码示例已经上传到Github：https://github.com/bosima/go-demo/tree/main/grpc-hello&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1c9a7cdfd9f7dc8e34642c4012674fae</guid>
<title>干货 | Elasticsearch 数据建模指南</title>
<link>https://toutiao.io/k/n0gqyj1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;0、题记&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我在做 Elasticsearch 相关咨询和培训过程中，发现大家普遍更关注实战中涉及的问题，下面我选取几个常见且典型的问题，和大家一起分析一下。&lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;订单表、账单表父子文档可以实现类似 SQL 的左连接吗？通过 canal 同步到 ES 中，能否实现类似左连接的效果？具体应该如何建模？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个人管理 1000  家连锁门店，如何更高效地查询自己管辖的商品类目？企微 一个人维护了 1000 个员工，如何快速查询自己管辖的员工信息？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;随着业务的增长，一个索引的字段数据不断膨胀（商品场景变化，业务一直加字段），有什么解决方法？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一个索引字段个数设置为 1500 个，超出这个限制，会不会消耗 CPU 资源和造成写入堆积？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;日志诊断用于机器学习基线，需要将 message 分离出来，怎么在写入前搞定？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果我们对上述实战问题进行归类，就都可以归结为 Elasticsearch &lt;/span&gt;&lt;code&gt;&lt;span&gt;数据建模&lt;/span&gt;&lt;/code&gt;&lt;span&gt;问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文将以实战问题为基准，手把手带你实践 Elasticsearch 数据建模全流程，重点解析基于业务角度、数据量角度、Setting 、Mapping ，以及复杂索引关联，这五个层面中涉及的数据建模实战问题，让你学完即可应用到工作中。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、为什么要做数据建模？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们选型传统的数据库，这里以 MySQL 为例，做数据存储前需要考虑的问题如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据库要不要做读写分离？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分几张表存储？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个表的名是什么？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个表是按照业务划分吗？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单表数据大了怎么搞？分库分表还是其他？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个表要有哪些字段？每个字段设置什么类型？如何设计合理的字段类型，才能保证节省存储？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些字段需要建索引？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;哪些字段需要设置外键？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;表之间要不要建立关联？如何实现关联联动查询？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;关联查询可能会很慢？如何设计阶段优化建模才能提高响应速度？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上这些疑问也均是&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484159&amp;amp;idx=1&amp;amp;sn=731562a8bb89c9c81b4fd6a8e92e1a99&amp;amp;chksm=eaa82ad7dddfa3c11e5b63a41b0e8bc10d12f1b8439398e490086ddc6b4107b7864dbb9f891a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数据建模&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;数据建模&lt;/a&gt;问题。在 MySQL 中我们往往认为建模非常有必要，但反观 Elasticsearch ，“上手快”这类先入为主的观念已根植在很多同学心中，使得大家忽略了 Elasticsearch 数据建模的重要性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，我们基于 MySQL 做数据存储需要考虑的问题，重新审视数据建模的定义，内容如下。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据模型是对描述数据、数据联系、数据语义和一致性约束进行标准化的抽象模型。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据建模是为存储在数据库中的资源创建和分析数据模型的过程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据建模主要目的是表示系统内的数据类型、对象之间的关系及其属性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数据模型有助于了解需要哪些数据以及应如何组织数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;到这里，相信你已经初步明晰了数据建模的重要性。但我还想提醒你的是，“&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484640&amp;amp;idx=1&amp;amp;sn=2e734c41667751f17261731692c1555b&amp;amp;chksm=eaa82cc8dddfa5dee4e33400306ee00bc3d3d697dd41f643444f2ffcd3c95309e07ff22d9286&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一把梭&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;一把梭&lt;/span&gt;&lt;/a&gt;&lt;span&gt;用法，上来就是干”并不是捷径，尤其到了项目中后期，极易暴露出问题。经历的项目越多，你会发现建模的时间不能省。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我们具体分析一下为什么要数据建模？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相比于 MySQL，Elasticsearch 有非常快捷的&lt;/span&gt;&lt;code&gt;&lt;span&gt;优势&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Elasticsearch 支持动态类型检查和匹配。也就是说，当我们写入索引数据的时候，可以不提前指定数据类型，直接插入数据。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以类似天眼查、企查查的工商实战数据为例（已做脱敏处理），如果利用以下语句直接创建索引和写入一条数据，岂不是很快？&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT company_index/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;regist_id&quot;&lt;/span&gt;: 1XX1600000000012,&lt;br/&gt;  &lt;span&gt;&quot;company_name&quot;&lt;/span&gt;: &lt;span&gt;&quot;北京XX长江创业投资有限公司&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;regist_id_new&quot;&lt;/span&gt;: &lt;span&gt;&quot;191XX160066933968XC&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;legal_representative&quot;&lt;/span&gt;: &lt;span&gt;&quot;徐X武&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;scope_bussiness&quot;&lt;/span&gt;: &lt;span&gt;&quot;创业投资业务；代理其他创业投资企业等机构或个人的创业投资业务；创业投资咨询业务；为创业企业提供管理服务业务；参与设立创业投资企业与企业投资管理顾问机(依法须经批准的项目，经相关部门批准后方可开展经营活)&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;registration_status&quot;&lt;/span&gt;: &lt;span&gt;&quot;在营（开业）企业&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;approval_date&quot;&lt;/span&gt;: &lt;span&gt;&quot;201X年04月13日&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;registration_number&quot;&lt;/span&gt;: &lt;span&gt;&quot;191XX160066933968XC&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;establishment_time&quot;&lt;/span&gt;: &lt;span&gt;&quot;200X年12月03日&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;address&quot;&lt;/span&gt;: &lt;span&gt;&quot;北京市黄河XX路西首育青小区&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;register_capital&quot;&lt;/span&gt;: 3000,&lt;br/&gt;  &lt;span&gt;&quot;business_starttime&quot;&lt;/span&gt;: &lt;span&gt;&quot;20XX年12月03日&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;registration_authority&quot;&lt;/span&gt;: &lt;span&gt;&quot;北XX工商行政管理局&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;company_type&quot;&lt;/span&gt;: &lt;span&gt;&quot;其他有限责任公司&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;enttype&quot;&lt;/span&gt;: 1190,&lt;br/&gt;  &lt;span&gt;&quot;enttypename&quot;&lt;/span&gt;: &lt;span&gt;&quot;法定代表人:&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;pripid&quot;&lt;/span&gt;: &lt;span&gt;&quot;1XXX102201305305801X&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;uniscid&quot;&lt;/span&gt;: &lt;span&gt;&quot;1XXX160066933968XC&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相比于 MySQL 中一个字段一个字段地敲定，这样操作确实节省了很多时间。但随着后续数据量激增，副作用便会很快显现出来。该处理方式的弊端：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;首先是极大地浪费了存储空间，所有字符串类型数据都存储为 text + keyword 组合类型，这种很多业务字段都是非必须的；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;其次字符串类型默认分词 standard，无法满足中文精细化分词检索的需求。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来，结合我自己工作中早期系统的一个案例，我们做进一步分析。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 个数据节点集群（5 个分片，1 个副本），微博数据每日增量 5000W+（增量存储 150GB），核心数据磁盘 10TB 左右，很明显该系统面临存储上限问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们当时就上述业务数据规划了一个大索引，比如微博数据一个索引，微信数据一个索引。但微博索引最多只能存储 20 天左右的数据，然后就得走删除索引数据的操作。由于 1 个索引只能通过 delete_by_query 删除部分数据，而 delete_by_query 的特点是版本号更新的逻辑删除，实际效果是越删数据量越大，磁盘占用率激增。加上是线上环境，压力之大，处理难度之大，经历过你就知道有多苦。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这也是很多大厂在面试候选人的时候，尤其偏爱数据建模能力强的工程师的主要原因之一。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如下图是美团对大数据开发高级工程师的岗位要求，第一条就是“深入理解业务，对业务服务流程进行合理的抽象和建模。”&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3562091503267974&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab708rRibcuXcnvXey0hicbwxXTiajiae0478yPhTPGpuctib4H3batMMRlwBwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从以上两个反例，以及这条招聘信息中便可以窥探出数据建模的重要性。下面我们具体说说如何做数据建模。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、Elasticsearch 如何数据建模？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在做数据建模之前，会先进行架构设计，架构环节涉及选型、集群规划、节点角色划分。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文涉及的建模倾向于索引层面、数据层面的建模。为了让你学完即可应用到工作中，我会结合项目实战进行讲解。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.1 基于业务角度建模&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Elasticsearch 适用范围非常广，包括电商、快递、日志等各行各业。涉及索引层面的设计，和业务贴合紧密。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其一：业务一定要细分。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分成哪几类数据，每类数据归结为一个索引还是多个索引，这是产品经理、架构师、项目经理要讨论敲定的问题。比如大数据类的数据，可以按照业务数据分为微博索引、微信索引、Twiiter 索引、Facebook 索引等。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其二：多个业务类型需不需要跨索引检索？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跨索引检索的痛点是字段不统一、不一致，需要写非常复杂的 bool 组合查询语句来实现。为了避免这种情况，最好的方式就是提前建模。每一类业务数据的相同或者相似字段，采取统一建模的方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下面我们举一个实际的例子加以分析。微博、微信、Twitter、Facebook 都有的字段，可以设计如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;字段名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;字段中文含义&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;字段类型&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;publish_time&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;发布时间&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;date&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;author&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;keyword&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;cont&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;正文内容&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;text&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样设计的好处是：字段统一，写查询 DSL 无需特殊处理，非常快捷方便。所以，在设计阶段，多个业务索引数据要尽可能地“求同存异”。具体来说：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;求同&lt;/span&gt;&lt;span&gt;指的是相同或者相近含义字段，一定要统一字段名、统一字段类型；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;存异&lt;/span&gt;&lt;span&gt;指的则是特定业务数据特有字段类型，可以独立设计字段名称和类型。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如微博信息来源字段有手机 App 或者网页等，别的业务索引如果没有，独立建模就可以。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;类似这些建模信息可以统一 Excel 存储，统一 git 多人协作管理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多索引管理一般优先推荐使用&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484584&amp;amp;idx=1&amp;amp;sn=accfb65830255f00c28ac1571725e493&amp;amp;chksm=eaa82c80dddfa596bef19161d713fe935142eda894f11d065a38495cd3e7ec59157403c5393f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;模板&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;模板&lt;/a&gt;（template）和 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484454&amp;amp;idx=1&amp;amp;sn=43e95a27bd8635b73d78a23db79407fe&amp;amp;chksm=eaa82c0edddfa518e979b4b4fe5f6b6cf933b30f6177c663bb006148e5a1ef0d47684a8aac92&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;别名&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;别名&lt;/a&gt;（alias）结合的方式。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484584&amp;amp;idx=1&amp;amp;sn=accfb65830255f00c28ac1571725e493&amp;amp;chksm=eaa82c80dddfa596bef19161d713fe935142eda894f11d065a38495cd3e7ec59157403c5393f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;模板&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;模板&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的特点：相同前缀名称的索引可以归结为一大类，一次创建，N 多索引共享，非常方便。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484454&amp;amp;idx=1&amp;amp;sn=43e95a27bd8635b73d78a23db79407fe&amp;amp;chksm=eaa82c0edddfa518e979b4b4fe5f6b6cf933b30f6177c663bb006148e5a1ef0d47684a8aac92&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;别名&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;别名&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的特点：多个索引可以映射到一个别名，方便多索引以相同的名称统一对外提供服务。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8746987951807229&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab70vBbK88Touq35WMic6ISOibCzzU9jpvr3B53y1zcWYv0AIvRS2M8WU9QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;415&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.2 基于数据量角度建模&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如本文前面所述，我是吃过单索引激增的亏，所以对于时序性数据（日志数据、大数据类数据）等，我强烈建议你&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247486630&amp;amp;idx=1&amp;amp;sn=caaee097196cd6047c212593ee5d340d&amp;amp;chksm=eaa8248edddfad98facc2b771a9993cd0372c9cf12a63fda8ad60dc9e6812fda722e56b3fb77&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;基于时间切分索引&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;5&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;基于时间切分索引&lt;/a&gt;，具体如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5879518072289157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab70jyr81FLDncHkTGsic0CgnfKmVMYH52bkYRaHRIUdaeDuK1nJS3IlFlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;415&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，其他可用的方案非常多，这里我列举如下，供你选型参考。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22875816993464052&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab70ZicC4jtFDNQV2oKR0TWV1I7e0y0DRvBxz3WTXSvKc1zFT0rwm2E0hZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由此可见，时序管理数据的优点非常明显。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;其一是灵活。基于时间切分索引非常方便，删除数据属于物理删除。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;其二则是快速。特定业务数据配合冷热集群架构，确保高配机器对应热数据，提升检索效率和用户体验。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.3 基于 Setting 层面建模&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Setting 层面又分为静态 Setting 和动态 Setting 两种。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一种是静态 Settings，一旦设置后，后续不可修改。如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;number_of_shards&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;另一种是动态 Setting，索引创建后，后面随时可以更新。如 &lt;/span&gt;&lt;code&gt;&lt;span&gt;number_of_replicas&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, &lt;/span&gt;&lt;code&gt;&lt;span&gt;max_result_window&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, &lt;/span&gt;&lt;code&gt;&lt;span&gt;refresh_interval&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;仅就建模阶段最核心的问题，拆解如下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里有个认知前提，就是主分片数一旦设置后就不可以修改，副本分片数可以灵活动态调整。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;主分片设计一般会考量总体数据量、集群节点规模，这点在集群规划层面会着重强调。一般主分片数要考虑集群未来动态扩展，通常设置为数据节点的 1 倍或者 1~3 倍之间的值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;副本分片是保证集群的高可用性，普通业务场景建议至少设置一个副本。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题二：refresh_interval 一般设置多大？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;默认值 1s，这意味着在写入阶段，每秒都会生成一个分段。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;refresh_interval&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的目的是：数据由 &lt;/span&gt;&lt;code&gt;&lt;span&gt;index buffer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的堆内存缓存区刷新到堆外内存区域，形成 &lt;/span&gt;&lt;code&gt;&lt;span&gt;segment&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，以使得搜索可见。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在实际业务场景里，如果写入的数据不需要近实时搜索可见，可以适当地在模板、索引层面调大这个值，当然也可以动态调整，比如调整为 30s 或者  60s。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;问题三：max_result_window 要不要修改默认值？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里同样有个认知前提，就是对于&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247486505&amp;amp;idx=1&amp;amp;sn=857774dce3511cf8c28c3b35f61a607a&amp;amp;chksm=eaa82401dddfad174463cf172755abfd6fd0c6fccfca72bcbe00c41d8208046485c62a4b901c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深度翻页&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;深度翻页&lt;/a&gt;的 from + size 实现，越往后翻页越慢。其实你对比看主流搜索引擎，比如 Google、百度、360、Bing 均不支持一下跳转到最后一页，这就是最大翻页上限限制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实在基本业务层面也很好理解，按照相关度返回结果，前面几页是最相关的，越往后相关度越低。比如默认值 10000，也就是说如果每页显示 10 条数据，可以翻 1000 页。基本业务场景已经足够了。因此不建议调大该值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果需要向后翻页查询，推荐 search_after 查询方式。如果需要全量遍历或者全量导出数据，推荐 scroll 查询方式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247485003&amp;amp;idx=1&amp;amp;sn=1f0d1c933d458bb9e3c71794d354aff1&amp;amp;chksm=eaa82e63dddfa77584bde5083adcdb4b33ef0c35fce8749dd6b6980ff92071b567a6a7ff93f7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;管道预处理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;管道预处理&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的好处很多，虽然 5.X 版本就有了这个功能，但实战环境用起来还不多。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;管道 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ingest pipeline&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 就相当于大数据的 ETL 抽取、转换、加载的环节，或者类似 &lt;/span&gt;&lt;code&gt;&lt;span&gt;logstash filter &lt;/span&gt;&lt;/code&gt;&lt;span&gt;处理环节。一些数据打标签、字段类型切分、加默认字段、加默认值等的预处理操作都可以借助 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ingest pipelie&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里给出索引层面 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Setting&lt;/span&gt;&lt;/code&gt;&lt;span&gt;  设置的简单模板，供你进一步学习参考，如下定义了 indexed_at 缺省的管道，同时在索引 my_index_0001 指定了该缺省管道，这样做的好处，是每个新增的数据都会加了插入时刻的时间戳：indexed_at 字段，无需我们在业务层面手动处理，非常灵活和方便。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更多设置，推荐阅读官方文档，地址如下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT _ingest/pipeline/indexed_at&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;description&quot;&lt;/span&gt;: &lt;span&gt;&quot;Adds indexed_at timestamp to documents&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;processors&quot;&lt;/span&gt;: [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;set&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;_source.indexed_at&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;{{_ingest.timestamp}}&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;PUT my_index_0001&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;settings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;number_of_replicas&quot;&lt;/span&gt;: 1,&lt;br/&gt;    &lt;span&gt;&quot;number_of_shards&quot;&lt;/span&gt;: 3,&lt;br/&gt;    &lt;span&gt;&quot;refresh_interval&quot;&lt;/span&gt;: &lt;span&gt;&quot;30s&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;default_pipeline&quot;&lt;/span&gt;: &lt;span&gt;&quot;indexed_at&quot;&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  }, &lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;cont&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;ik_max_word&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;fields&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.4 基于 Mapping 层面建模&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Mapping 层面核心是字段名称、字段类型、分词器选型、多字段 multi_fields 选型，以及字段细节（是否索引、是否存储等）的敲定。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）字段命名要规范&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引名称不允许用大写，字段名称官方没有限制，但是可以参考 Java 编码规范。我还真见过学员用中文或者拼音命名的，非常不专业，大家一定要避免。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）字段类型要合理&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要结合业务类型选择合适的字段类型。比如 integer 能搞定的，就不要用 long、float 或 double。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意，字符串类型在 5.X 版本之后分为两种类型:&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;一种是 keyword，适合精准匹配、排序和聚合操作；&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;另一种是 text，适合全文检索。默认值 text &amp;amp; keyword 组合不见得是最优的，选型时候要结合业务选择。比如优先选择 keyword 类型，keyword 走倒排索引更快。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;再举个例子，实战中情感值介于 0~100 之间，50 代表中性，0~50 代表负面，50~100 代表正面。如果使用 integer 查询的时候要 range query，而实际存储可以增加字段：0~50 设置为 -1，50 设置为 0，50~100 设置为 1，三种都是 keyword 类型，检索时直接走 term 检索会非常快。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（3）分词器要灵活&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实战中中文分词器用得比较多，中文分词又分为 ansj，结巴，IK 等。以 IK 举例，可以细分为 ik_smart 粗粒度分词、ik_max_word 细粒度分词。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在工作中，要结合业务选择合适的分词器，分词器一旦设定是不可以修改的，除非 reindex。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分词器选型后，都会有动态词典的更新问题。更新的前提是不要仅使用开源插件原生词典，而是要在平时业务中自己多积累特定业务数据词典、词库。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果要动态更新：一般推荐第三方更新插件借助数据库更新实现。如果普通分词都不能满足业务需要，可以考虑 &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484728&amp;amp;idx=1&amp;amp;sn=eeb76ad84c98af16fc16d6dc5d5d11af&amp;amp;chksm=eaa82d10dddfa406e5847d61a0ef2cd1230cb10185dd32bf0e1d1a64c7980658f0268264af96&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;ngram 自定义分词&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;code&gt;&lt;span&gt;ngram&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 自定义分词&lt;/span&gt;&lt;/a&gt;&lt;span&gt;方式实现更细粒度分词。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（4）multi_fields 适机使用&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同一个字段根据需要可以设置多种类型。实战业务中，对用特定中文词明明存在，却无法召回的情况，采用字词混合索引的方式得以满足。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所谓字词混合，实际就是 standard 分词器实现单字拆解，以及 ik_max_word 实现中文切词结合的方式。检索的时候 bool 对两种分词器结合，就可以实现相对精准的召回效果。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT mix_index&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;content&quot;&lt;/span&gt;: {&lt;br/&gt;          &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;ik_max_word&quot;&lt;/span&gt;,&lt;br/&gt;          &lt;span&gt;&quot;fields&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;standard&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;text&quot;&lt;/span&gt;,&lt;br/&gt;              &lt;span&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span&gt;&quot;standard&quot;&lt;/span&gt;&lt;br/&gt;            },&lt;br/&gt;            &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;: {&lt;br/&gt;              &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;,&lt;br/&gt;              &lt;span&gt;&quot;ignore_above&quot;&lt;/span&gt;: 256&lt;br/&gt;            }&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;POST mix_index/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;bool&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;should&quot;&lt;/span&gt;: [&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;&quot;match_phrase&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;content&quot;&lt;/span&gt;: &lt;span&gt;&quot;佟大&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        },&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;&quot;match_phrase&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;content.standard&quot;&lt;/span&gt;: &lt;span&gt;&quot;佟大&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      ]&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了方便你记忆和使用，这里我把字段细节总结在如下这张表格中。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;核心参数&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;默认值&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;释义&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;仅适用于 Mapping 顶层以及 Object 对象，设置为 false 后该字段将不再被解析。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;index&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;控制是否对字段值进行索引，设置为 false 的字段不能被查询。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;doc_values&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;正排索引，除了 text 类型外的其他类型默认开启，用于聚合和排序分析。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;fielddata&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;false&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是否为 text 类型启动 fielddata，实现 text 字段排序和聚合分析。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;store&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;false&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是否存储该字段值。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;coerce&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是否开启自动数据类型转换功能，比如 字符串转数字、浮点转整型。true 代表可以转换，false 代表不可以转换。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;fields&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;根据业务需要而定&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;灵活使用多字段解决多样的业务需求。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;dynamic&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;控制 mapping 的动态自动更新。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;date_detection&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是否自动识别类型。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们再来分析一下数据建模的流程，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.714975845410628&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab70bs0QR3eQ8H1TpJUiamBcSkedTxCxEoVWYTsMrgbAnr1IadPCdgc6STQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;414&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据建模的流程图&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，根据业务选择合适的数据类型。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意字符串类型分为两种 text 和 keyword类型；尽量选择贴近实际大小的数据类型；nested 和 join &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484382&amp;amp;idx=1&amp;amp;sn=da073a257575867b8d979dac850c3f8e&amp;amp;chksm=eaa82bf6dddfa2e0bf920f0a3a63cb635277be2ae286a2a6d3fff905ad913ebf1f43051609e8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;复杂类型&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;复杂类型&lt;/a&gt;需根据业务特点选型，具体会在下一部分详细阐述。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其次，判定是否需要检索，如果不需要，index 设置为 false 即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后，判定是否需要排序和聚合操作，如果不需要可以设置 doc_values 为 false。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，考虑一下是否需要另行存储，会结合使用 store 和  _source 字段。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Mapping 层面要&lt;/span&gt;&lt;strong&gt;&lt;span&gt;强调&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的是：尽量不要使用默认的 dynamic 动态字段类型，强烈建议 strict 严格控制字段，避免字段“暴涨”导致不可预知的风险，比如字段数超过默认 1000 个的上限、磁盘大于预期的激增等。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;2.5 基于复杂索引关联建模&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要摒弃 MySQL 的多表关联建模思想，因为 MySQL 中的范式思想都不再适用于 Elasticsearch。回顾文章开头的几个多表关联问题，Elasticsearch 能提供的核心解决方案如下。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1） 宽表方案&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是空间换时间的方案，就是允许部分字段冗余存储的存储方式。实战举例如下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用户索引：user。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;博客索引：blogpost。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一个用户可以发表多篇博客。按照传统的 MySQL 建表思想：两个表建立个用户外键，即可搞定一切。而对于 Elasticsearch，我们更愿意在每篇博文后面都加上用户信息（这就是宽表存储的方案），看似存储量大了，但是一次检索就能搞定搜索结果。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;PUT user/_doc/1&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;:     &lt;span&gt;&quot;John Smith&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;email&quot;&lt;/span&gt;:    &lt;span&gt;&quot;john@smith.com&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;dob&quot;&lt;/span&gt;:      &lt;span&gt;&quot;1970/10/24&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;PUT blogpost/_doc/2&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;title&quot;&lt;/span&gt;:    &lt;span&gt;&quot;Relationships&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;body&quot;&lt;/span&gt;:     &lt;span&gt;&quot;It&#x27;s complicated...&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;user&quot;&lt;/span&gt;:     {&lt;br/&gt;    &lt;span&gt;&quot;id&quot;&lt;/span&gt;:       1,&lt;br/&gt;    &lt;span&gt;&quot;name&quot;&lt;/span&gt;:     &lt;span&gt;&quot;John Smith&quot;&lt;/span&gt; &lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;GET /blogpost/_search&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;query&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;bool&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;must&quot;&lt;/span&gt;: [&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;relationships&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        },&lt;br/&gt;        {&lt;br/&gt;          &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;            &lt;span&gt;&quot;user.name&quot;&lt;/span&gt;: &lt;span&gt;&quot;John&quot;&lt;/span&gt;&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;      ]&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2） nested 方案&lt;/span&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;适用场景：1 对少量，子文档偶尔更新、查询频繁的场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果需要索引对象数组并保持数组中每个对象的独立性，则应使用嵌套 Nested 数据类型而不是对象 Oject 数据类型。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487231&amp;amp;idx=2&amp;amp;sn=fbe1b054b2f6eaa0d5e98911b837a51b&amp;amp;chksm=eaa826d7dddfafc1b7c9d1b4df4b0064ce62558458f08f4b7b4a1e00c4f691a9f63bb5fc4c10&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;nested 文档&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;nested 文档&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的优点是可以将父子关系的两部分数据（如博客+评论）关联起来，我们可以基于nested 类型做任何的查询。但缺点是查询速度相对较慢，更新子文档需要更新整篇文档。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;适用场景：子文档数据量要明显多于父文档的数据量，存在 1 对多量的关系；子文档更新频繁的场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如 1 个产品和供应商之间就是 1 对 N 的关联关系。当使用父子文档时，使用 has_child 或者 has_parent 做父子关联查询。优点是父子文档可独立更新，但维护 Join 关系需要占据部分内存，查询较 Nested 更耗资源。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注意：5.X 之前版本叫父子文档（多 type 实现），6.X 之后高版本是 join 类型（单 type 类型）。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（4） 业务层面实现关联&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需通过多次检索获取所需的关键字段，业务层面自己写代码实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这里小结一下，以上四种方式便是 Elasticsearch 能实现的全量多表关联方案。实战建模阶段，一定要结合自己的业务场景，尽量往上靠，先通过 kibana dev tool 模拟实现，找到契合自己业务的多表关联方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;此外我还要强调的是：多表关联都会有性能问题，数据量极大且检索性能要求高的场景需要慎用。这里我摘取了官方文档对应的描述如下，供你参考。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;尤其应该&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484282&amp;amp;idx=1&amp;amp;sn=4f2aee1c83f7b3742ed34897b1b2390d&amp;amp;chksm=eaa82b52dddfa2448d850f00e9be5f8302df06a9b1fe3e0c071811f86fb84216aca4e803ec2a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;避免多表关联&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;避免多表关联&lt;/a&gt;。Nested 嵌套可以使查询慢几倍，而 Join 父子关系可以使查询慢数百倍。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后，我们再来总结一下建模其他核心考量因素。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9a2p3HdfNVKjklm5YTDab70aFqzMP6TMGGoqy4mo5LlJXdWrFwSpXbaa4nRTFQEzSZibOsdMVKdL0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;尽量&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484728&amp;amp;idx=1&amp;amp;sn=eeb76ad84c98af16fc16d6dc5d5d11af&amp;amp;chksm=eaa82d10dddfa406e5847d61a0ef2cd1230cb10185dd32bf0e1d1a64c7980658f0268264af96&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;空间换时间&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;空间换时间&lt;/a&gt;：能多个字段解决的不要用脚本实现。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;尽量&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247485003&amp;amp;idx=1&amp;amp;sn=1f0d1c933d458bb9e3c71794d354aff1&amp;amp;chksm=eaa82e63dddfa77584bde5083adcdb4b33ef0c35fce8749dd6b6980ff92071b567a6a7ff93f7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前期数据预处理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;前期数据预处理&lt;/a&gt;，不要后期脚本。优先选择 ingest process 数据预处理实现，尽量不要留到后面 script 脚本实现。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;能指定路由的提前指定路由。写入的时候指定路由，检索的时候也同样适用路由。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;能前置的尽量前置，让后面检索聚合更加清爽。比如 index sorting 前置索引字段排序是非常好的方式。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据建模是 Elasticsearch 开发实战中非常重要的一环，也是项目管理角度中的设计环节的重中之重，你一定要重视！千万不要着急写业务代码，以“&lt;/span&gt;&lt;strong&gt;&lt;span&gt;代码之前，设计先行&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;”作为行动准绳。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;感谢你的时间！有 Elasticsearch 建模问题欢迎留言交流。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文成文于：2021年8月11日&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487494&amp;amp;idx=1&amp;amp;sn=731687e8a09d2da56fa844c4e494ab62&amp;amp;chksm=eaa8382edddfb138627d276b4f60f4245d457a8a5f787daf65a0c0be95231f67b55d871b907f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;、重磅 | 死磕 Elasticsearch 方法论认知清单（2021年国庆更新版）&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487494&amp;amp;idx=1&amp;amp;sn=731687e8a09d2da56fa844c4e494ab62&amp;amp;chksm=eaa8382edddfb138627d276b4f60f4245d457a8a5f787daf65a0c0be95231f67b55d871b907f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487072&amp;amp;idx=1&amp;amp;sn=13694eb4b907ae5cffa7ac37bb1ed248&amp;amp;chksm=eaa82648dddfaf5edb55fcc5ea74021367b81f03a22d9fb5655409adcb3e400e6da19f945ed3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1、&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;、&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247488915&amp;amp;idx=1&amp;amp;sn=a086a4f5a598f77d1c3a047c5d843cf0&amp;amp;chksm=eaa83dbbdddfb4adb8ef2573cd1f7fb725d250860b8f57616be38a0b7c900028c43abb411cd6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何从0到1打磨一门 Elasticsearch 线上直播课？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;如何从0到1打磨一门 Elasticsearch 线上直播课？&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（口碑不错）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247486294&amp;amp;idx=1&amp;amp;sn=50b43356e3a236df90773b4991819a9d&amp;amp;chksm=eaa8237edddfaa6828367df84d3697e99f3f3023d544bfb3446d9fe45d7b2e5e8ea0c89a4cbb&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何系统的学习 Elasticsearch ？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;如何系统的学习 Elasticsearch ？&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484640&amp;amp;idx=1&amp;amp;sn=2e734c41667751f17261731692c1555b&amp;amp;chksm=eaa82cc8dddfa5dee4e33400306ee00bc3d3d697dd41f643444f2ffcd3c95309e07ff22d9286&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Elasticsearch是一把梭，用起来再说？！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;Elasticsearch是一把梭，用起来再说？！&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484159&amp;amp;idx=1&amp;amp;sn=731562a8bb89c9c81b4fd6a8e92e1a99&amp;amp;chksm=eaa82ad7dddfa3c11e5b63a41b0e8bc10d12f1b8439398e490086ddc6b4107b7864dbb9f891a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | 论Elasticsearch数据建模的重要性&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货 | 论Elasticsearch数据建模的重要性&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100004130&quot; data-ratio=&quot;0.596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZoCQGlxWp4G56gqia6ANT1Z9WB22YUEZ2Xib9YBZ90fLUQLyudxgjENibxzn9wCtBx3sQeE5CJnRE1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;更&lt;/span&gt;短时间&lt;span&gt;更&lt;/span&gt;快习得&lt;span&gt;更&lt;/span&gt;多干货！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;和全球&lt;/span&gt;&lt;span&gt; 1600+&lt;/span&gt;&lt;span&gt; Elastic 爱好者一起精进！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100004129&quot; data-ratio=&quot;0.4592901878914405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/mjl8GCpsL9aP1cRicwD8ibiaWicGzrrI5hFt9BVtE6mkbaIePyxJ1ic0SicaUEzTI3mhrgjNvLvJprDmf8Sqk9EphbRw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;479&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;比同事&lt;/span&gt;&lt;span&gt;抢先&lt;/span&gt;&lt;span&gt;&lt;span&gt;一步学习进阶干货&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>