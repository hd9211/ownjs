<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>07312fc3dfc3c9b5c65794f1d6580560</guid>
<title>优质网站同好者周刊（第 071 期） | 倾城博客</title>
<link>https://toutiao.io/k/txv870b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%95%99%E7%A8%8B&quot;&gt;&lt;code&gt;教程&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;现代 JavaScript 教程：有关示例和任务的简单但详细的解释包括：闭包、文档和事件，以及面向对象编程等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/zh.javascript.info.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 现代 JavaScript 教程&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://zh.javascript.info/&quot;&gt;现代 JavaScript 教程&lt;/a&gt;，以最新的 JavaScript 标准为基准。通过简单但足够详细的内容，为你讲解从基础到高阶的 JavaScript 相关知识。该课程的核心内容，包含 2 部分，涵盖了 JavaScript 编程语言相关知识，以及浏览器行为。此外还有一系列的专题文章。其内容广泛，诸如：JavaScript 基础知识、代码质量、数据类型、函数进阶内容、原型，继承、错误处理、Promise，async/await、网络请求、动画、浏览器中存储数据、Web components、正则表达式等等，读了几篇，如 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://zh.javascript.info/currying-partials&quot;&gt;柯里化（Currying）&lt;/a&gt;，讲解深入浅出，通俗易懂，令人受益良多。无论您是前端入门初学者，还是资深开发，相信这份教程，都会产生积极作用。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b460783cc95e702564e0d0&quot;&gt;倾城之链 - 现代 JavaScript 教程&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE&quot;&gt;&lt;code&gt;树莓派&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%B5%84%E8%AE%AF&quot;&gt;&lt;code&gt;资讯&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%AD%A6%E4%B9%A0&quot;&gt;&lt;code&gt;学习&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：树莓派, raspberry pi, ARM, 单板机, 树莓派论坛&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;树莓派（Raspberry Pi）中文资讯站，提供丰富的树莓派教程和 DIY 资讯。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/shumeipai.nxez.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 树莓派实验室 | Raspberry Pi 中文资讯站，提供丰富的树莓派使用教程和DIY资讯&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://shumeipai.nxez.com/&quot;&gt;树莓派实验室&lt;/a&gt;，树莓派（Raspberry Pi）中文资讯站，旨在提供丰富的&lt;code&gt;树莓派&lt;/code&gt;教程和 DIY 资讯。您可以在这里看到关于树莓派相关的分享（如相关导航、教程、资源下载等）；当然，您也可以在此分享内容，给予相当数量的树莓派玩家（该站每月有数万的树莓派爱好者访问），对于优质内容，他们会在微信公众号和姊妹站（&lt;a href=&quot;https://nicelinks.site/post/614836c548b293062990b35f&quot;&gt;趣小组&lt;/a&gt; 等）同步推送。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b346983cc95e702564e0cd&quot;&gt;倾城之链 - 树莓派实验室 | Raspberry Pi 中文资讯站，提供丰富的树莓派使用教程和 DIY 资讯&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/GraphQL&quot;&gt;&lt;code&gt;GraphQL&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Grow from side project to startup with RedwoodJS. Combines React, GraphQL, and Prisma for a full-stack app framework.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/redwoodjs.com.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - RedwoodJS: The App Framework for Startups&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;： &lt;a href=&quot;https://nicelinks.site/redirect?url=https://redwoodjs.com/&quot;&gt;RedwoodJS&lt;/a&gt; ，是一个开源的全栈 Web 框架，旨在帮助您从业余项目成长为初创公司。其使命是：帮助更多的初创公司，更快地探索更多的领域。RedwoodJS 制作一个更集成的框架，Redwood 具有端到端的开发工作流程， &lt;a href=&quot;https://nicelinks.site/post/5b1294b5e93ed2618cfac134&quot;&gt;将 React&lt;/a&gt; 、 &lt;a href=&quot;https://nicelinks.site/post/61c9a2d25be6454b4e3d5148&quot;&gt;GraphQL&lt;/a&gt; 、Prisma、 &lt;a href=&quot;https://nicelinks.site/post/6278fdeaac00ce3f9b11a8ef&quot;&gt;TypeScript&lt;/a&gt; 、Jest 和 Storybook 的最佳部分结合在一起。有关完整的灵感和愿景，请参阅 Redwood 的 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/redwoodjs/redwood/blob/main/README.md&quot;&gt;README.md 文件&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;选择了世界上最受欢迎的渲染引擎，来支持 Redwood 的 Web 前端。使用 React，您可以选择学习材料、设计系统和训练有素的员工。&lt;/p&gt;&lt;p&gt;随着项目的增长，需要与后端通信的客户端应用程序的数量也会增加。以 GraphQL API 为基础，您可以轻松地生活在多客户端世界中。&lt;/p&gt;&lt;p&gt;可选的 TypeScript 支持为您提供最好的 JavaScript 和最好的类型系统。即使你用 JS 构建你的应用程序，你仍然会得到杀手级的自动完成，因为 Redwood 本身是用 TypeScript 编写的。&lt;/p&gt;&lt;h3 id=&quot;prisma&quot;&gt;&lt;a href=&quot;#prisma&quot; aria-label=&quot;prisma permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Prisma&lt;/h3&gt;&lt;p&gt;与您的数据库交互从未如此简单。Prisma 极受欢迎的 ORM 允许您更多地关注您的业务逻辑，而不是 SQL 的复杂性。&lt;/p&gt;&lt;h3 id=&quot;jest&quot;&gt;&lt;a href=&quot;#jest&quot; aria-label=&quot;jest permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Jest&lt;/h3&gt;&lt;p&gt;知道您的关键代码路径已经过良好测试，晚上睡得很好。Redwood 通过“场景”增强了 Jest，使您可以轻松地为给定场景设置数据库，加上 GraphQL 模拟以轻松测试数据流。&lt;/p&gt;&lt;h3 id=&quot;storybook&quot;&gt;&lt;a href=&quot;#storybook&quot; aria-label=&quot;storybook permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Storybook&lt;/h3&gt;&lt;p&gt;如果您使用 Storybook 单独设计您的组件，您不仅不必与您的框架争吵以查看它处于特定状态，而且您还可以免费构建一个全面的设计参考！&lt;/p&gt;&lt;p&gt;Redwood 应用程序，是一个 React 前端，与一个定制的 GraphQL API 对话。该 API 使用 Prisma 来操作数据库。开箱即可获得与 Jest 紧密集成的测试，与 Pino 的日志，以及与 Storybook 的 UI 组件目录。设置认证（如 Auth0）或 CSS 框架（如 Tailwind CSS）只需在一个命令行中调用。最重要的是，Redwood 的架构允许你部署到无服务器供应商（如 Netlify、Vercel），或传统的服务器和容器供应商（如 AWS、Render），两者之间几乎不需要改变代码。如果您在构建 Web 应用领域，没有足够的经验，Redwood 是非常值得运用起来的框架，它能免去您在各种技术中选择的苦恼。&lt;/p&gt;&lt;p&gt;另外值得一提的是， &lt;a href=&quot;https://nicelinks.site/redirect?url=https://redwoodjs.com/&quot;&gt;RedwoodJS&lt;/a&gt; 是由 Tom Preston-Werner 发起的最新&lt;strong&gt;开源&lt;/strong&gt;项目，他是 &lt;a href=&quot;https://nicelinks.site/post/59ba80d93df6765c75b77911&quot;&gt;GitHub&lt;/a&gt; 的联合创始人， &lt;a href=&quot;https://nicelinks.site/post/5c4c59c1a5957e07a40b3118&quot;&gt;Jekyll&lt;/a&gt; （最早也是最受欢迎的静态站点生成器之一）的创建者，Gravatar（最受欢迎的 avatar service)，语义版本控制规范的作者（为 Node 打包生态系统提供支持），以及 TOML（许多项目使用的一种明显的、最小的配置语言）的发明者。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b1c13ba00b101b220aa7f1&quot;&gt;倾城之链 - RedwoodJS: The App Framework for Startups&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%BC%96%E7%A8%8B&quot;&gt;&lt;code&gt;编程&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A practical functional library for JavaScript programmers. 一款实用的 JavaScript 函数式编程库。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/ramda.cn.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - Ramda Documentation&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://ramda.cn/&quot;&gt;Ramda&lt;/a&gt;，一款实用的 JavaScript 函数式编程库。它具备以下特性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ramda 强调更加&lt;strong&gt;纯粹的函数式&lt;/strong&gt;风格。数据不变性和函数无副作用是其核心设计理念。这可以帮助你使用简洁、优雅的代码来完成工作。&lt;/li&gt;&lt;li&gt;Ramda 函数本身都是自动&lt;code&gt;柯里化&lt;/code&gt;的。这可以让你在只提供部分参数的情况下，轻松地在已有函数的基础上创建新函数。&lt;/li&gt;&lt;li&gt;Ramda 函数参数的排列顺序更便于柯里化。要操作的数据通常在最后面。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;最后两点一起，使得将多个函数构建为简单的函数序列变得非常容易，每个函数对数据进行变换，并将结果传递给下一个函数。Ramda 的设计能很好地支持这种风格的编程。&lt;/p&gt;&lt;h3 id=&quot;ramda-理念&quot;&gt;&lt;a href=&quot;#ramda-%E7%90%86%E5%BF%B5&quot; aria-label=&quot;ramda 理念 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Ramda 理念&lt;/h3&gt;&lt;p&gt;使用 Ramda 时，应该感觉像使用原生 JavaScript 一样，它是实用且函数式的 JavaScript。Ramda 没有在字符串中引入 lambda 表达式，也没有借用 consed 列表，更不是要移植所有的 Clojure 函数。Ramda 基本的数据结构都是原生 JavaScript 对象，常用的集合是 JavaScript 的数组。&lt;/p&gt;&lt;p&gt;Ramda 还保留了许多其他原生 JavaScript 特性，例如，函数是具有属性的对象。函数式编程，优势主要体现在：&lt;strong&gt;数据不变性&lt;/strong&gt;和&lt;strong&gt;函数无副作用&lt;/strong&gt;两方面。虽然 Ramda 没有对此特别加强，但它在这两方面支持的非常好。最后但同样重要的是，Ramda 追求性能。可靠且快速的实现胜过任何功能纯度的概念。&lt;/p&gt;&lt;p&gt;目前已经存在许多优秀的函数式的库。通常它们作为通用工具包，可以用于多种编程范式。Ramda 的目标更为专注：专门为函数式编程风格而设计，更容易创建函数式 pipeline、且从不改变用户已有数据。&lt;/p&gt;&lt;p&gt;就个人多年编程开发而言，没有更好和更坏的范式。有经验的开发人员，可以看到每种范式的优点，并为给定的问题选择相对更合适的。过程式编程，并不是说你不能使用函数；函数式编程也不会阻止你使用“类”。这些范式，只是以一种随代码增长而有益的方式，来帮助解决问题。关于&lt;strong&gt;函数式编程&lt;/strong&gt;，有参考各种资料，梳理出博文：&lt;a href=&quot;https://forum.lovejade.cn/d/182&quot;&gt;浅谈关于「函数式编程」的理解&lt;/a&gt;；感兴趣的朋友可以了解下，相信当您恰当运行函数式编程思想，可以让您的代码更为优雅，易于阅读、扩展、维护。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b1b5cba00b101b220aa7ef&quot;&gt;倾城之链 - Ramda Documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Deno&quot;&gt;&lt;code&gt;Deno&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Just in time edge rendering, island based interactivity, and no configuration TypeScript support using Deno.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/fresh.deno.dev.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - fresh - The next-gen web framework.&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://fresh.deno.dev/&quot;&gt;Fresh&lt;/a&gt; ，是下一代 Web 框架，基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot;&gt;Deno&lt;/a&gt; ，专为速度、可靠性和简单性而构建（在 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/lucacasonato/fresh&quot;&gt;Github 开源&lt;/a&gt;）。它具备一些突出的特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;边缘&lt;strong&gt;实时渲染。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;基于岛屿的客户水合作用&lt;/strong&gt;可实现最大的互动性。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;零运行时开销&lt;/strong&gt;：默认情况下不向客户端发送 JS。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;没有构建步骤&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;无需配置&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;开箱即用的&lt;strong&gt;TypeScript 支持&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Fresh 采用了久经考验的服务器端渲染设计和客户端的渐进增强。它是一个面向 JavaScript 和 TypeScript 开发人员的全栈现代 Web 框架，旨在&lt;strong&gt;让创建高质量、高性能和个性化的 Web 应用程序变得轻而易举&lt;/strong&gt;。您可以使用它来创建您的主页、博客、大型 Web 应用程序（如 GitHub 或 Twitter）或您能想到的任何其他内容。&lt;/p&gt;&lt;p&gt;Fresh 的核心是&lt;strong&gt;路由框架和模板引擎的组合&lt;/strong&gt;，可在服务器上按需呈现页面。除了在服务器上的这种即时 (JIT) 渲染之外，Fresh 还提供了一个接口，用于在客户端无缝渲染一些组件，以实现最大的交互性。该框架使用 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://preactjs.com/&quot;&gt;Preact&lt;/a&gt; 和 JSX 在服务器和客户端上进行渲染和模板化。&lt;/p&gt;&lt;p&gt;Fresh 也没有构建步骤。你写的代码也直接是在服务器上运行的代码，在客户端上执行的代码。将 TypeScript 或 JSX 转换为纯 JavaScript 的任何必要转换都是在需要时即时完成的。这允许非常快速的迭代循环和非常非常快速的部署。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b07261a00b101b220aa7ec&quot;&gt;倾城之链 - fresh - The next-gen web framework.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;&lt;code&gt;编辑器&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Markdown&quot;&gt;&lt;code&gt;Markdown&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E8%BD%AF%E4%BB%B6&quot;&gt;&lt;code&gt;软件&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：Markdown, Tw93, MiaoYan, MacApp&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;轻灵的 Markdown 笔记本伴你写出妙言~&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/miaoyan.app.png?x-oss-process=style/png2jpg&quot; alt=&quot;倾城之链 - 妙言 - 轻灵的 Markdown 笔记本&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;： &lt;a href=&quot;https://nicelinks.site/redirect?url=https://miaoyan.app/&quot;&gt;妙言&lt;/a&gt;,⛷ 轻灵的 &lt;a href=&quot;https://nicelinks.site/tags/Markdown&quot;&gt;Markdown&lt;/a&gt; 笔记本伴你写出妙言；根据其主页文档介绍，妙言具有以下功能特征：&lt;/p&gt;&lt;h3 id=&quot;妙&quot;&gt;&lt;a href=&quot;#%E5%A6%99&quot; aria-label=&quot;妙 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;妙&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;纯本地使用，无需联网即可使用，源文件保存；&lt;/li&gt;&lt;li&gt;安全，完全开源 Github，不会上传用户信息；&lt;/li&gt;&lt;li&gt;支持语法高亮、黑暗模式、国际化、演示模式、文档自动排版；&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;美&quot;&gt;&lt;a href=&quot;#%E7%BE%8E&quot; aria-label=&quot;美 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;美&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;极简的设计风格，没有多余的东西；&lt;/li&gt;&lt;li&gt;&lt;code&gt;文件夹&lt;/code&gt; + &lt;code&gt;文件列表&lt;/code&gt; + &lt;code&gt;编辑器&lt;/code&gt;三栏设计，可收起；&lt;/li&gt;&lt;li&gt;中文默认使用霞鹜文楷字体，让文字也很美；&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;快&quot;&gt;&lt;a href=&quot;#%E5%BF%AB&quot; aria-label=&quot;快 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;快&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;使用 &lt;a href=&quot;https://nicelinks.site/post/6232f5ca77e4352be838a308&quot;&gt;Swift5&lt;/a&gt; 开发，原生极致性能；&lt;/li&gt;&lt;li&gt;对多文件做了特别的性能优化，确保不卡顿；&lt;/li&gt;&lt;li&gt;相比当前市面上套壳 Web 的方式轻巧很多；&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;简&quot;&gt;&lt;a href=&quot;#%E7%AE%80&quot; aria-label=&quot;简 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;简&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;操作过程很轻巧，不耽误你的时间；&lt;/li&gt;&lt;li&gt;编辑体验媲美原生代码编辑器；&lt;/li&gt;&lt;li&gt;内置众多快捷键助你快人一步；&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;安装使用&quot;&gt;&lt;a href=&quot;#%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8&quot; aria-label=&quot;安装使用 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;安装使用&lt;/h3&gt;&lt;p&gt;您可从  &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/tw93/MiaoYan/releases&quot;&gt;GitHub Releases&lt;/a&gt;  中下载最新的 MiaoYan.dmg 安装包，双击安装即可。具体使用方式如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可以在 iCloud 或根目录下创建一个  &lt;code&gt;MiaoYan&lt;/code&gt;  的文件夹，打开妙言的设置，将默认存储地址修改成这个。&lt;/li&gt;&lt;li&gt;点击妙言左上角新增文件夹的图标，创建好自己的文档分类文件夹，就可以开始使用了。&lt;/li&gt;&lt;li&gt;同样假如你不习惯默认的字体，可以在设置中修改成其他的正常字体。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;为什么要做妙言&lt;/strong&gt;？作者在 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://github.com/tw93/MiaoYan&quot;&gt;Github MiaoYan&lt;/a&gt; 写道：之前有尝试过众多的笔记应用，大学时期为知笔记、印象笔记，工作时候用过 Ulysses(无预览)、Quiver(多年不更新)、MWeb(功能复杂)、&lt;a href=&quot;https://nicelinks.site/post/5ccd4213b448cf0a336a8aa3&quot;&gt;Bear&lt;/a&gt;(Markdown 图片等富格式不支持)，种种原因，没有找到一个好用的 Markdown 应用，才有了做妙言的想法。（作者）本职工作为前端开发，会一点 iOS 开发，喜欢折腾，借妙言来玩一下 &lt;a href=&quot;https://nicelinks.site/post/6232f5ca77e4352be838a308&quot;&gt;Swift&lt;/a&gt; 以及 OSX 开发，当做一个很愉快的事情。&lt;/p&gt;&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/62b070a3a00b101b220aa7ea&quot;&gt;倾城之链 - 妙言 - 轻灵的 Markdown 笔记本&lt;/a&gt;&lt;/p&gt;&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;&lt;h2 id=&quot;本期文末寄语&quot;&gt;&lt;a href=&quot;#%E6%9C%AC%E6%9C%9F%E6%96%87%E6%9C%AB%E5%AF%84%E8%AF%AD&quot; aria-label=&quot;本期文末寄语 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;本期文末寄语&lt;/h2&gt;&lt;p&gt;清夜无尘，月色如银。酒斟时、须满十分。浮名浮利，虚苦劳神。叹隙中驹，石中火，梦中身。&lt;br/&gt;虽抱文章，开口谁亲。且陶陶、乐尽天真。几时归去，作个闲人。对一张琴，一壶酒，一溪云。&lt;br/&gt;── 北宋 · 苏轼《行香子》&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/250/h/250/interlace/1/ignore-error/1&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;&lt;h3 id=&quot;您可能感兴趣的文章&quot;&gt;&lt;a href=&quot;#%E6%82%A8%E5%8F%AF%E8%83%BD%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%96%87%E7%AB%A0&quot; aria-label=&quot;您可能感兴趣的文章 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; version=&quot;1.1&quot; viewbox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;您可能感兴趣的文章&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e6254a714d4096eb97244353196a63c0</guid>
<title>5000字解析：实战化场景下的容器安全攻防之道</title>
<link>https://toutiao.io/k/byhhxco</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;p&gt;在这个数字化转型关键时期，以容器为代表的云原生技术凭借自身的优势，正在逐渐成为核心IT基础设施。云原生已经不再是少部分“创新者”的特权，而是成为了市场主流选择，容器、容器云逐渐成为工作负载的主流形态。&lt;/p&gt;&lt;p&gt;与此相随，云原生大量的新技术，也带来了众多未知的风险敞口，安全防护对象也发生了颠覆性变化，容器正在逐渐成为黑客新的演练场。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132&quot;&gt;&lt;section label=&quot;powered by wxb-style.com&quot;&gt;&lt;section data-id=&quot;86318&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span data-brushtype=&quot;&quot;&gt;容器成为重要的攻击目标&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在容器时代，安全面临新旧威胁的双重挑战。一方面，那些传统旧的攻击手段依然有效，包括漏洞利用、暴力破解、权限提升等等。另一方面，新的攻击姿势也是层出不穷，例如投毒镜像、容器逃逸、集群API调用等等，让人防不胜防。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;在过去的攻防演练中，就曾发现多起针对容器、集群攻击事件。容器带来新的风险暴露面，给了攻击者众多可乘之机。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为什么容器会成为黑客重点攻击目标？笔者认为核心原因有以下6个方面：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;容器虽然可以实现更加灵活、更加低成本的软件开发和应用部署，但是对应的容器安全建设却远远滞后于业务发展速度，大量“裸奔”的容器成为了攻击者眼中“香饽饽”。&lt;/p&gt;&lt;p&gt;在容器集群中，只要攻陷一个容器，就可以横向移动到其它容器上，或者逃逸到node节点上进行持久化，控制整个节点。下一步，攻击者还可以通过漏洞利用或者调用API SERVER控制整个集群。&lt;strong&gt;而集群作为集权类系统，一旦失陷，防守方“血条”减少一大截就不可避免了&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;除了应用本身的脆弱性引入的攻击外，集群、容器运行时本身的脆弱性问题也不容忽视。例如攻击者通过k8s、docker未授权访问长驱直入；集群权限配置不当，攻击者可创建高权容器进行逃逸；利用Linux内核cgroups模块（CVE-2022-0492）进行逃逸。&lt;/p&gt;&lt;p&gt;在传统操作模式中，所部署的软件在其运行的主机上更新，而容器则必须在上游的镜像中进行更新，然后重新部署。因此，若镜像或基础镜像存在问题，则将至少影响一个或多个集群。&lt;/p&gt;&lt;p&gt;容器安全防护需要覆盖容器构建、部署、运行整个生命周期，所涉及的环节和流程链路都非常复杂。例如，在构建阶段，可能会遇到的软件供应链攻击，包括基础镜像污染、CI工具攻击、制品库漏洞攻击等。在部署阶段也可能面临针对云原生基础设施平台攻击，包括开源组件编排工具等。在运行时阶段，还可能面临针对云原生应用的攻击，包括SQL注入、漏洞、弱口令等。&lt;/p&gt;&lt;p&gt;容器的生命周期短，动态变化快，超过50%容器从上线到下架的整个生命周期不超过1天。如何在检测到异常入侵事件之后，快速进行安全响应，把损失降到最低成为了一大安全难题。 &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132&quot;&gt;&lt;section label=&quot;powered by wxb-style.com&quot;&gt;&lt;section data-id=&quot;86318&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span data-brushtype=&quot;&quot;&gt;容器缺乏有效的安全手段&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在传统的安全防护范畴中，组织的“端点、网络、边界”，各个层级相对清晰，但是在云原生环境下这些边界消失了。&lt;/p&gt;&lt;p&gt;近年来，虽然企业组织的安全建设投入大幅度提升，企业组织都部署了基本的防火墙、漏扫、终端安全等常规的安全设备。&lt;/p&gt;&lt;p&gt;但是当容器面临攻击时，传统安全防护手段，无法有效保护容器安全。例如，在IT架构中，如果包含容器、K8S等新型的云原生基础设施时。举个简单的例子，攻击者可以通过多种方式轻松完成一次攻击。一个个小小的漏洞就有可能打穿容器节点，甚至整个集群。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一步：通过容器应用攻击容器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;攻击者通过weblogic远程代码执行漏洞（CVE-2021-2382），获取了一个容器的控制权。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二步：通过失陷容器攻击其它容器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;获取容器控制权后，可通过nmap等网络探测方式发现可访问的容器端口。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三步：通过容器攻击宿主机&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;若docker、containered等存在容器逃逸漏洞，可利用此漏洞获取宿主机的控制权。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第四步：通过容器攻击集群&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;若K8S存在8080、6443未授权访问，可通过容器访问K8S master api进行恶意调用。&lt;/p&gt;&lt;p&gt;试想，面对这样的攻击，不管是边界防火墙，还是终端的安全产品，都无法完成有效安全防护，也无法隔离容器或杀掉容器内恶意进程，更无法提供行之有效的溯源分析，只能通过下线业务的方式缓解影响，但是这无法从根上解决容器的安全问题。&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132&quot;&gt;&lt;section label=&quot;powered by wxb-style.com&quot;&gt;&lt;section data-id=&quot;86318&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span data-brushtype=&quot;&quot;&gt;实战化定制容器安全方案&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;在这样的背景下，青藤基于多年实战化攻防演练的经验，不断升级迭代方案，&lt;strong&gt;正式推出升级版《容器安全实战化解决方案V2.0》&lt;/strong&gt;，感兴趣的读者可扫码领取电子版方案。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgCia0feCPN6Nfe1K8EJuUjNNJ7tgQOts53ggVFev5wUnAWXzN2PssnaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;182&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;扫码下载《容器安全实战化解决方案V2.0》&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;该方案覆盖了几个核心环节，包括&lt;strong&gt;攻击风险评估、风险收敛整改、攻击行为监控、攻击事件响应、溯源分析报告共五个环节，&lt;/strong&gt;可实现容器全生命周期的主动防御效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26832151300236406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgCe83icicdAHdiahPg0slkeHoiaFmleTss60tnhsG1qokzH0wJjmFm2VrTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;846&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图1：攻防演练5个核心环节&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;第一阶段：容器攻击风险评估&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在攻防演习前期，最重要就是做好攻击风险评估，包括资产梳理、漏洞检查、基线检查、弱口令检查等等。其中最重要就是做好资产梳理。&lt;/p&gt;&lt;p&gt;根据过去攻防实战演练的经验，有不少组织机构对于自己的资产情况把控不够，导致部分资产未能纳入有效监测，形成了防护薄弱点。&lt;/p&gt;&lt;p&gt;攻击队在发起进攻前，会先收集这些薄弱点，并以此为跳板攻入企业关键系统。所以，提前对资产进行评估，收敛对外暴露的攻击面变得尤为重要。&lt;/p&gt;&lt;p&gt;在云原生环境下，防守方在演习前期一定要对容器资产进行清点，&lt;strong&gt;尤其是梳理内网集群&amp;amp;非集群管理的系统资产，并且把资产对应到人。&lt;/strong&gt;最重要的是要对核心业务资产进行深度透视，尤其是靶标系统、集权系统等。&lt;/p&gt;&lt;p&gt;有了上述详细的资产看板之后，在发生入侵事件时，就可以快速反查容器业务应用，协助定位入侵的入口点以及影响范围。例如，在攻击者利用0day/1day漏洞时，防守方可通过应用级别的资产排查，分析现有业务受漏洞影响范围。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4954648526077097&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjg5QeEbvHAn87txUdaDjEGpiabmgXFtelGVY97p1hibicTLn16NmBUN2vvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;882&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图2：重点关注容器资产类别&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;此外，还需要梳理容器内的应用资产，发现边角系统和废弃资产、发现不合规的资产，为后续系统加固和应急响应做铺垫。这个过程需要重点关注三个方面：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）梳理集群与外部系统的边界&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;首先，梳理集群对外暴露服务，如使用主机网络暴露服务，使用nodeport暴露服务。其次，梳理集群内对外访问情况，发现不合规的对外访问行为。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）梳理高权、特权容器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;主要包括Privileged 特权容器、高Capabilities的容器、挂载敏感目录的容器、Root账号的容器、Host模式运行的容器、共享主机namespace的容器 、共享主机设备的容器 、CPU/内存使用不设限的容器等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（3）发现不合规应用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;主要是针对容器中的ssh、sudo、ftp、vsftp等资产。&lt;/p&gt;&lt;p&gt;通过资产细粒度清点，还能实现供应链的安全管控。对于企业组织来说，容器制品供应链环节的安全性也非常重要。尤其是随着云原生应用制品越来越多样化，像容器镜像、 helm charts 都是常见的制品格式。&lt;/p&gt;&lt;p&gt;一方面，需要在应用构建阶段保证制品的安全性；另一方面需要在制品入库；分发和部署时刻建立对应的合规检查、访问控制，安全扫描、审计和准入、准出的校验机制，保证制品源头的安全性。&lt;/p&gt;&lt;p&gt;因此，在攻防演习前，要做好软件供应链的资产台账，包括运行的应用、中间件、数据库、安装包、框架语言包（java、go、ruby、nodejs、python、php）等，发现其安装路径、版本信息和配置情况。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5122850122850123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgekegpibEnvfvictdFXQkGBKz4YQ22pk3Sg1vk9XdndzDELpJHMyiaQVhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图3：青藤蜂巢可细粒度梳理供应链软件成分&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二阶段：容器风险收敛加固&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;在攻防演练中，前期的准备工作包括脆弱性整改、漏洞缓解、靶机加固整改、集权系统监控等。我们可以把这些技术性工作概括为风险收敛与安全加固两个方向。对防守方来说，针对云原生风险收敛加固，可以从梳理系统脆弱性&amp;amp;整改、微隔离加固等方面实现风险收敛与安全加固。&lt;/p&gt;&lt;p&gt;攻防演习前，需要全面排查内网安全隐患，发现并协助整改容器环境的脆弱性存留。通过各种不同的方法修复可能被攻击者利用的漏洞，加强系统安全配置，增加攻击者入侵的难度，提升安全防范水平。它与攻击面收敛、漏洞修复、安全策略优化等工作形成了完整的风险管理闭环。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2759259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgZCoz4Niaicg8vhH9CgEbZwAvHCpFNXxfPJbe9l6dyJ8iaAicy2tZHN1Avg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图4：运行时脆弱性评估&amp;amp;整改&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;但是在攻防演练中高强度的攻击下，即便前期做了很好风险收敛加固工作，仍然有可能出现一些0day/1day的高危漏洞，导致被攻破的局面。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因此，企业组织需要那些具备专业的漏洞研究人员和漏洞应急响应流程的安全厂商，能够在24小时内，提供应急响应方案。一旦演习期间发现有高危漏洞的情报，需要第一时间跟进。青藤拥有非常健全的应急响应团队和完善的响应流程，可以很好应对实战化背景下容器安全应急处置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11944444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgsFaA0iaT1zK1vvmYARQiaSoQ9icRwJ760rbloicFB2NIYJFVtxq6NET3rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;&lt;strong&gt;图5：青藤漏洞应急响应和处置流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在实战化对抗中，可以预见的是攻击者一定会对演习目标系统展开高强度的远程攻击。在不限制攻击路径的前提下，以控制业务系统、获取重要数据为最终目的，全面展开攻击。为此防守方需要在演习前期对重要系统进行微隔离控制，主要包括两个方面工作：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对外&lt;/strong&gt;，需要梳理容器集群与外部系统的边界，梳理集群对外暴露的服务及集群内对外访问情况，进行合规控制。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对内&lt;/strong&gt;，需要梳理容器内的重要系统（集群系统、靶标系统）在内网的访问模型，形成访问控制基线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4327651515151515&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgrtVPATcoSgzc44sBJibztGiczUXmT2w9VYUxqqCAd6tZ1TnxDl2tdY8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1056&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图6：重点系统微隔离控制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三阶段：容器攻击行为监控&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;攻防演练开始之后，红队完全按照攻击者的思维，发起高强度、高水平的网络攻击。因此，对蓝队来说，监控是能够及时发现攻击至关重要的一步。青藤蜂巢能够提供多锚点的检测能力，能够实时、准确地感知入侵事件，发现失陷容器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39866666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjg0CdAJDvib6JWGibLePoMWibBZ9M4N2U2oDlyQMm6RtZib6z8EtC5lluMoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图7：覆盖攻击链路的多锚点监控&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;虽然预防性安全技术能够应对已知的基于签名的威胁，但蓝队仍需要网络安全监控来识别更复杂的威胁。&lt;/p&gt;&lt;p&gt;因此，防守方需要利用前期部署的主机、容器攻击监控体系，实时发现攻击行为，并按照攻击告警监控流程进行上报。青藤蜂巢除了能够对已知特征威胁进行检测，也能对恶意行为进行检测，还能进行异常检测。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3972222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgO04395NMrMLsVMKWyiascntE3jU4VWaqVSfiaSy5tZamsZJG7Y0iabHog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图8：青藤蜂巢立体入侵监测体系&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;（1）基于已知特征的威胁检测&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;青藤蜂巢可对容器内的文件、代码、脚本等进行已知特征的检测，可实时发现容器中的病毒、挖矿、webshell等已知威胁。以webshell检测为例，青藤雷火根据AI推理发现Webshell中存在的可疑内容，其Webshell检测率超越历史最强水平，高达99.99%，并且整个使用过程无需长期训练，可即插即用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6239396795475967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgl1w2ajpbfTI6HyBWSQLS0bZmic7BgTYe3BKCLnYy7xu3hodU8GSyrVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1061&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图9：已知威胁检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;（2）基于恶意行为的检测&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;青藤蜂巢，基于对恶意行为模式的定义，可对容器及编排工具的黑客攻击行为进行实时检测。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先，可检测容器内无文件攻击，&lt;/strong&gt;支持发现内存webshell、shellcode和加载动态链接库等多种内存码。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;其次，可检测容器逃逸行为，&lt;/strong&gt;支持发现K8S组件漏洞逃逸、内核漏洞逃逸、容器漏洞逃逸、敏感挂载逃逸等行为。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后，可检测K8S API恶意行为，&lt;/strong&gt;支持包括匿名用户登陆、secrets获取、API server可疑操作等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;14988&quot;&gt;&lt;section&gt;&lt;section data-svg-role=&quot;block&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;565&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;376&quot; data-ratio=&quot;1.4066091954022988&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjg1z5p6MmHcDRyQ3wYV6DUkROVia2WIomIzRu50R2ckiaV5RHpphQgca2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot; data-width=&quot;100%&quot;/&gt;&lt;p data-class=&quot;mbImgTitle&quot;&gt;▲ 10-1检测容器内无文件攻击&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;565&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;376&quot; data-ratio=&quot;1.3451776649746192&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgJGAkwlfGFNA0ibH0llCuU6ickMuTrMgVWib43p3GDyxIVHly0ricicY9TIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;394&quot; data-width=&quot;100%&quot;/&gt;&lt;p data-class=&quot;mbImgTitle&quot;&gt;▲ 10-2检测容器逃逸行为&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;565&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;376&quot; data-ratio=&quot;1.4066091954022988&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjg1z5p6MmHcDRyQ3wYV6DUkROVia2WIomIzRu50R2ckiaV5RHpphQgca2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot; data-width=&quot;100%&quot;/&gt;&lt;p data-class=&quot;mbImgTitle&quot;&gt;▲ 10-3 检测K8S API恶意行为&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-svg-role=&quot;block&quot; data-svg-op=&quot;delete&quot; data-svg-blockname=&quot;描述性文字&quot;&gt;&lt;p&gt;&lt;span&gt;左右滑动查看更多&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图10：重点恶意行为检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（3）基于异常行为的检测&lt;/strong&gt;青藤蜂巢，可对容器内进程、网络等行为进行学习建立模型，从而发现异常入侵。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;针对重要的容器靶机、集群系统进行提前学习，形成稳定的模型&lt;/strong&gt;，一旦发现异常进程启动、异常端口监听、异常网络连接和异常文件操作就立即报警。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5491891891891892&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjg0M04oTj5lrbEASwFRCH3S15QjVH31GwcjhTI4kEIfbHgicDWm9X8kIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;925&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图11：未知威胁检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在检测到⼊侵事件之后，对于失陷容器需要进⾏快速的安全响应，把损失降到最低。青藤蜂巢能够实施不同细粒度的管控措施，在容器层面可以直接隔离、暂停、查杀容器，在容器行为层面可以阻断进程、隔离文件、封禁IP，不允许有问题的工作负载进行访问或被访问。&lt;/p&gt;&lt;p&gt;青藤在收集到攻防过程中新型的入侵姿势等信息之后，会快速响应生成系统规则，通过规则更新的方式增强产品入侵检测能力。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;目前，青藤蜂巢最新的产品功能，已经拥有自定义威胁情报和检测能力。&lt;/strong&gt;例如，用户一线人员发现攻防演习过程中披露的入侵信息，可通过产品&lt;strong&gt;自定义锚点式检测规则和自定义威胁情报，&lt;/strong&gt;增强补充产品入侵检测能力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;第四阶段：容器攻击事件响应&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一旦确定了告警的真实性，安全专家要通过主机、容器上的日志以及系统告警等信息，对攻击事件进行调查，并生成《XXX事件调查报告》。最重要2个方面是：做失陷范围排查、攻击过程还原。&lt;/p&gt;&lt;p&gt;通过对被攻击资产的分析与溯源，还原攻击路径与攻击手法，用户不仅能够有效提升攻防演练效果，还可增强常态化安全防御能力，将攻击事件转换为防御势能，避免二次攻击事件的发生。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3314814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgP1GhTdXeyMWNkT6Unic1j4BLrsdqMpP6ibZgx5DQ2HyBaV0DJ9GIZteQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图12：攻击过程还原&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;根据现有信息找出一台确认失陷的主机/容器信息，然后以这台失陷主机的数据以及它的互联关系为线索，在用户系统中展开内网溯源，确认是否存在被横向渗透的主机/容器，并循环此过程，逐步找出所有失陷主机/容器，确认攻击影响面及具体的失陷范围，将攻击队彻底清除出内网。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17037037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjguuT0LRBMKbKGQayBa9oCqTXNibqyicVuDWp6vITjsWglbGyw6Wibon1Iw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt;&lt;strong&gt;图13：失陷范围排查&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;第五阶段：容器溯源分析报告&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;青藤蜂巢，可通过收集容器相关行为数据，包括API调用行为日志、容器进程事件、容器网络事件、容器文件事件、k8s审计日志事件等等，结合ATT&amp;amp;CK框架模型，通过大数据工具来进行安全威胁分析，确定攻击的影响范围和入侵路径，通过威胁狩猎主动发现内部潜在的其它威胁。&lt;/p&gt;&lt;p&gt;防守方在完成攻击确认到调查、还原的整个流程之后，需要整理出一份防守报告，阐述攻击的真实性、攻击的覆盖范围、攻击者的攻击路径及行为，并将报告提交给组织方。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4848800834202294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgw96GeTfWgojA6Lmy5l894KdLYNnL7b4kaPzDvvQtibEAibWlT7NibTLTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;959&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;图14：形成防守报告&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;section data-class=&quot;_mbEditor&quot; data-id=&quot;132&quot;&gt;&lt;section label=&quot;powered by wxb-style.com&quot;&gt;&lt;section data-id=&quot;86318&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span data-brushtype=&quot;&quot;&gt;写在最后&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;正如前文所述，容器已经成为黑客重要的攻击目标，但是目前非常缺乏有效的安全手段。可预见，未来容器、容器集群将成为最重要的IT基础设施。不管是在真实网络实战中，还是在相关的攻防演习中，以容器为代表云原生基础设施都将是攻防双方必争之地。&lt;/p&gt;&lt;p&gt;如果您有关于攻防演练或容器安全方面的任何问题，&lt;strong&gt;欢迎致电400-188-9287转1，或直接扫描下方二维码，领取《容器安全实战化解决方案V2.0》&lt;/strong&gt;。您也可以点击“&lt;strong&gt;阅读原文&lt;/strong&gt;”&lt;strong&gt;免费申请试用&lt;/strong&gt;青藤的容器安全产品~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jVCRndy8Lr7DvvDzWz0MjbUdcqWyKAjgCia0feCPN6Nfe1K8EJuUjNNJ7tgQOts53ggVFev5wUnAWXzN2PssnaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;182&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt; 扫码下载《容器安全实战化解决方案V2.0》&lt;/strong&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9653104c7c65e9c646c0c399c707a8ef</guid>
<title>快手实时数仓保障体系研发实践</title>
<link>https://toutiao.io/k/juj49do</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;Apache Flink&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;apacheflinkcc&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;Flink 中文社区官微，Flink PMC 维护&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f8028b4fcba6fdffdceecadd411cf538</guid>
<title>欢迎加入读者圈子，一起交流！</title>
<link>https://toutiao.io/k/92wl596</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                           autoTypeSetting24psection&amp;#10;                          &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;欢迎加入读者圈子，一起交流！&lt;br/&gt;↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;圈子剧透&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、600+圈子成员，以中高级程序员为主，更有架构师、CTO坐镇交流；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、1000+优质主题，数十G独家资料，每日分享，精挑细选；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、全年52期专属邮件周报，让你轻松掌握业界资讯、技术干货，提升认知水平；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、全年52本好书共读，让你花最少的时间，获取更好的知识；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;心动不如行动，赶快加入吧！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0fd2a601f472b4fb83252ad2870e278d</guid>
<title>[推荐] 肝了一个月的 DDD，一文带你掌握！</title>
<link>https://toutiao.io/k/bclz2n6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3OTU5NzQ1Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFTdSvrrpJnCZ0Fp5Z1wKkhKFQBxTaFfxOpib3E2zgUu39BFbsBqqJbEpxicUvz3H6csoL2JQ9EP1yQ/0?wx_fmt=png&quot; data-nickname=&quot;楼仔&quot; data-alias=&quot;&quot; data-signature=&quot;7 年一线大厂经验（百度/小米/滴滴），带你进大厂，不限于Java、Go、高并发、架构选型、消息队列、设计模式、MySQL、Redis、DDD、项目管理、软技能等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5010706638115632&quot; data-type=&quot;jpeg&quot; data-w=&quot;1868&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gLEtiaF0kBhicwhUNx0lUnzDGdOj5Lvs3Q848jM91TOglvW1o7xtLuZzQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;整体阅读时间，在 30 分钟左右。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是楼仔！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去年倒腾了一个半月，写过一篇 DDD 的文章，当时没有推广，完全自嗨，为了不让这篇好文被埋没，现重新整理，突出重点，可读性更强！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;为了证明该文没有注水，列一下当时的学习资料：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;小米内部 DDD 系列分享；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;小米内部 DDD 脚手架；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;小米内部授权认证项目（应用 DDD）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;极客时间欧创新的《 DDD 实战课》；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;掘金“柏炎”的 DDD 系列文档和 DDD Demo；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;美团技术团队、阿里云开发社区、网上博客等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不 BB，直接上思维导图！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5296404275996113&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gQysHznWicFBVfUNmFXeJB8sjYBRVuNjsN4qnicNQH1u2jZXVOaV5JFmw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 走进 DDD&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 为什么要用 DDD ？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;面向对象设计，数据行为绑定，告别贫血模型；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;降低复杂度，分而治之；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;优先考虑领域模型，而不是切割数据和行为；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;准确传达业务规则，业务优先；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码即设计；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它通过边界划分将复杂业务领域简单化，帮我们设计出清晰的领域和应用边界，可以很容易地实现业务和技术统一的架构演进；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;领域知识共享，提升协助效率；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;增加可维护性和可读性，延长软件生命周期；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;中台化的基石。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39765625&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gcibPaJcRMCM40R7SLW2cCxVs09pFQShIv8QkRkUXx28OWYRN3pF1icjg/640?wx_fmt=jpeg&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2 DDD 作用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到 DDD，绕不开 MVC，在 MVC 三层架构中，我们进行功能开发的之前，拿到需求，解读需求。往往最先做的一步就是先设计表结构，在逐层设计上层 dao，service，controller。对于产品或者用户的需求都做了一层自我理解的转化。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;1632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gxfcvFgsx9IKicEGmiaaBic8OVWSdAemib1EhdqvyvqK63Z5QMmVKz6C0aw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户需求在被提出之后经过这么多层的转化后，特别是研发需求在数据库结构这一层转化后，将业务以主观臆断行为进行了转化。一旦业务边界划分模糊，考虑不全，大量的逻辑补充堆积到了代码层实现，变得越来越难维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们现在要做一个电商订单下单的需求，涉及到用户选定商品，下订单、支付订单、对用户下单时的订单发货：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;MVC 架构&lt;/strong&gt;：我们常见的做法是在分析好业务需求之后，就开始设计表结构了，订单表，支付表，商品表等等。然后编写业务逻辑。这是第一个版本的需求，功能迭代饿了，订单支付后我可以取消，下单的商品我们退换货，是不是又需要进行加表，紧跟着对于的实现逻辑也进行修改。功能不断迭代，代码就不断的层层往上叠。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DDD 架构&lt;/strong&gt;：我们先进行划分业务边界。这里面核心是订单。那么订单就是这个业务领域里面的聚合逻辑体现。支付，商品信息，地址等等都是围绕着订单实体。订单本身的属性决定之后，类似于地址只是一个属性的体现。当你将订单的领域模型构建好之后，后续的逻辑边界与仓储设计也就随之而来了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;DDD 整体作用总结如下：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;消除信息不对称；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常规MVC三层架构中自底向上的设计方式做一个反转，以业务为主导，自顶向下的进行业务领域划分；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将大的业务需求进行拆分，分而治之。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. DDD 架构&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 DDD 分层架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;严格分层架构：某层只能与直接位于的下层发生耦合。&lt;/p&gt;&lt;p&gt;松散分层架构：允许上层与任意下层发生耦合。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在领域驱动设计（DDD）中采用的是松散分层架构，层间关系不那么严格。每层都可能使用它下面所有层的服务，而不仅仅是下一层的服务。每层都可能是半透明的，这意味着有些服务只对上一层可见，而有些服务对上面的所有层都可见。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6012364760432767&quot; data-type=&quot;png&quot; data-w=&quot;1294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gH4zTYicZIwYwpa46cW4g4apHxCD9IehxDhc6V37kDSnsia8SQHKIhZ4Q/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分层的作用，从上往下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;用户交互层&lt;/strong&gt;：web 请求，rpc 请求，mq 消息等外部输入均被视为外部输入的请求，可能修改到内部的业务数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;业务应用层&lt;/strong&gt;：与 MVC 中的 service 不同的不是，service 中存储着大量业务逻辑。但在应用服务的实现中，它负责编排、转发、校验等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;领域层&lt;/strong&gt;：或称为模型层，系统的核心，负责表达业务概念，业务状态信息以及业务规则。即包含了该领域所有复杂的业务知识抽象和规则定义。该层主要精力要放在领域对象分析上，可以从实体，值对象，聚合（聚合根），领域服务，领域事件，仓储，工厂等方面入手。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;基础设施层&lt;/strong&gt;：主要有 2 方面内容，一是为领域模型提供持久化机制，当软件需要持久化能力时候才需要进行规划；一是对其他层提供通用的技术支持能力，如消息通信，通用工具，配置等的实现。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在设计和开发时，不要将本该放在领域层的业务逻辑放到应用层中实现，因为庞大的应用层会使领域模型失焦，时间一长你的服务就会演化为传统的三层架构，业务逻辑会变得混乱。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 各层数据转换&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一层都有自己特定的数据，可以做如下区分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;VO（View Object）&lt;/strong&gt;：视图对象，主要对应界面显示的数据对象。对于一个WEB页面，或者SWT、SWING的一个界面，用一个VO对象对应整个界面的值。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DTO（Data Transfer Object）&lt;/strong&gt;：数据传输对象，主要用于远程调用等需要大量传输对象的地方。比如我们一张表有 100 个字段，那么对应的 PO 就有 100 个属性。但是我们界面上只要显示 10 个字段，客户端用 WEB service 来获取数据，没有必要把整个 PO 对象传递到客户端，这时我们就可以用只有这 10 个属性的 DTO 来传递结果到客户端，这样也不会暴露服务端表结构。到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为 VO。在这里，我泛指用于展示层与服务层之间的数据传输对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DO（Domain Object）&lt;/strong&gt;：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;PO（Persistent Object）&lt;/strong&gt;：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应 PO 的一个（或若干个）属性。最形象的理解就是一个 PO 就是数据库中的一条记录，好处是可以把一条记录作为一个对象处理，可以方便的转为其它对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. DDD 基础&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.790273556231003&quot; data-type=&quot;png&quot; data-w=&quot;987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4g1H77UIiaarqZyRCdtyibq12D99axNhibaGtMlibiaAQFpmxbaZmHkh3zP4A/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习 DDD 前，有很多基础概念需要掌握，这幅图总结的很全，他把 DDD 划分不同的层级：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;最里层是值、属性、唯一标识等，这个是最基本的数据单位，但不能直接使用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后是实体，这个把基础的数据进行封装，可以直接使用，在代码中就是封装好的一个个实体对象。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;之后就是领域层，它按照业务划分为不同的领域，比如订单领域、商品领域、支付领域等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后是应用服务，它对业务逻辑进行编排，也可以理解为业务层。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 领域和子域&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在研究和解决业务问题时，DDD 会按照一定的规则将业务领域进行细分，当领域细分到一定的程度后，DDD 会将问题范围限定在特定的边界内，在这个边界内建立领域模型，进而用代码实现该领域模型，解决相应的业务问题。简言之，DDD 的领域就是这个边界内要解决的业务问题域。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;领域可以进一步划分为子领域。我们把划分出来的多个子领域称为子域，每个子域对应一个更小的问题域或更小的业务范围。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;领域的核心思想就是将问题域逐级细分，来降低业务理解和系统实现的复杂度。通过领域细分，逐步缩小服务需要解决的问题域，构建合适的领域模型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;举个简单的例子&lt;/strong&gt;，对于保险领域，我们可以把保险细分为承保、收付、再保以及理赔等子域，而承保子域还可以继续细分为投保、保全（寿险）、批改（财险）等子子域。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 核心域、通用域和支撑域&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;子域可以根据重要程度和功能属性划分为如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;核心域&lt;/strong&gt;：决定产品和公司核心竞争力的子域，它是业务成功的主要因素和公司的核心竞争力。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通用域&lt;/strong&gt;：没有太多个性化的诉求，同时被多个子域使用的通用功能的子域。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;支撑域&lt;/strong&gt;：但既不包含决定产品和公司核心竞争力的功能，也不包含通用功能的子域。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;核心域、支撑域和通用域的主要目标&lt;/strong&gt;：通过领域划分，区分不同子域在公司内的不同功能属性和重要性，从而公司可对不同子域采取不同的资源投入和建设策略，其关注度也会不一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多公司的业务，表面看上去相似，但商业模式和战略方向是存在很大差异的，因此公司的关注点会不一样，在划分核心域、通用域和支撑域时，其结果也会出现非常大的差异。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如同样都是电商平台的淘宝、天猫、京东和苏宁易购，他们的商业模式是不同的。淘宝是 C2C 网站，个人卖家对个人买家，而天猫、京东和苏宁易购则是 B2C 网站，是公司卖家对个人买家。即便是苏宁易购与京东都是 B2C 的模式，苏宁易购是典型的传统线下卖场转型成为电商，京东则是直营加部分平台模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，在公司建立领域模型时，我们就要结合公司战略重点和商业模式，重点关注核心域。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 通用语言和限界上下文&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;通用语言&lt;/strong&gt;：就是能够简单、清晰、准确描述业务涵义和规则的语言。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;限界上下文&lt;/strong&gt;：用来封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语、业务相关对象等（通用语言）有一个确切的含义，没有二义性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.1 通用语言&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通用语言是团队统一的语言，不管你在团队中承担什么角色，在同一个领域的软件生命周期里都使用统一的语言进行交流。那么，通用语言的价值也就很明了，它可以解决交流障碍这个问题，使领域专家和开发人员能够协同合作，从而确保业务需求的正确表达。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个通用语言到场景落地，大家可能还很模糊，其实就是把领域对象、属性、代码模型对象等，通过代码和文字建立映射关系，可以通过 Excel 记录这个关系，这样研发可以通过代码知道这个含义，产品或者业务方可以通过文字知道这个含义，沟通起来就不会有歧义，说的简单一点，其实就是统一产品和研发的话术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接看下面这幅图（来源于极客时间欧创新的 DDD 实战课）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46597812879708383&quot; data-type=&quot;png&quot; data-w=&quot;1646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gfKFMUOOUT7n1venjo2biaNaVNA2oicgEiaWfoecD35LKGqX692EzhO6LQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3.2 限界上下文&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通用语言也有它的上下文环境，为了避免同样的概念或语义在不同的上下文环境中产生歧义，DDD 在战略设计上提出了“限界上下文”这个概念，用来确定语义所在的领域边界。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限界上下文是一个显式的语义和语境上的边界，领域模型便存在于边界之内。边界内，通用语言中的所有术语和词组都有特定的含义。把限界上下文拆解开看，限界就是领域的边界，而上下文则是语义环境。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过领域的限界上下文，我们就可以在统一的领域边界内用统一的语言进行交流。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4 实体和值对象&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4.1 实体&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;实体 = 唯一身份标识 + 可变性【状态 + 行为】&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DDD 中要求实体是唯一的且可持续变化的。意思是说在实体的生命周期内，无论其如何变化，其仍旧是同一个实体。唯一性由唯一的身份标识来决定的。可变性也正反映了实体本身的状态和行为。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;实体以 DO（领域对象）的形式存在&lt;/strong&gt;，每个实体对象都有唯一的 ID。我们可以对一个实体对象进行多次修改，修改后的数据和原来的数据可能会大不相同。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，由于它们拥有相同的 ID，它们依然是同一个实体。比如商品是商品上下文的一个实体，通过唯一的商品 ID 来标识，不管这个商品的数据如何变化，商品的 ID 一直保持不变，它始终是同一个商品。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4.2 值对象&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;值对象 = 将一个值用对象的方式进行表述，来表达一个具体的固定不变的概念。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你只关心某个对象的属性时，该对象便可作为一个值对象。 我们需要将值对象看成不变对象，不要给它任何身份标识，还应该尽量避免像实体对象一样的复杂性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是举个订单的例子，订单是一个实体，里面包含地址，这个地址可以只通过属性嵌入的方式形成的订单实体对象，也可以将地址通过 json 序列化一个 string 类型的数据，存到 DB 的一个字段中，那么这个 Json 串就是一个值对象，是不是很好理解？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面给个简单的图（同样是源于极客时间欧创新的 DDD 实战课）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24033613445378152&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4giabLQgdFH95qmHjMToKfelbQCicTicdOBHh5m2dh8thvw1e1Rm8x6SwUw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3280943025540275&quot; data-type=&quot;png&quot; data-w=&quot;1018&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gJbnlkngwfbp2D2OxicF9DI4zVFdzzr3YFvpJajPXA5urCibVqsjCJ0Xg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.5 聚合和聚合根&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.5.1 聚合&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;聚合&lt;/strong&gt;：我们把一些关联性极强、生命周期一致的实体、值对象放到一个聚合里。聚合是领域对象的显式分组，旨在支持领域模型的行为和不变性，同时充当一致性和事务性边界。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚合有一个聚合根和上下文边界，这个边界根据业务单一职责和高内聚原则，定义了聚合内部应该包含哪些实体和值对象，而聚合之间的边界是松耦合的。按照这种方式设计出来的服务很自然就是“高内聚、低耦合”的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚合在 DDD 分层架构里属于领域层，领域层包含了多个聚合，共同实现核心业务逻辑。跨多个实体的业务逻辑通过领域服务来实现，跨多个聚合的业务逻辑通过应用服务来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有的业务场景需要同一个聚合的 A 和 B 两个实体来共同完成，我们就可以将这段业务逻辑用领域服务来实现；而有的业务逻辑需要聚合 C 和聚合 D 中的两个服务共同完成，这时你就可以用应用服务来组合这两个服务。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.5.2 聚合根&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把聚合比作组织，那聚合根就是这个组织的负责人。&lt;strong&gt;聚合根也称为根实体，它不仅是实体，还是聚合的管理者。&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先它作为实体本身，拥有实体的属性和业务行为，实现自身的业务逻辑。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其次它作为聚合的管理者，在聚合内部负责协调实体和值对象按照固定的业务规则协同完成共同的业务逻辑。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后在聚合之间，它还是聚合对外的接口人，以聚合根 ID 关联的方式接受外部任务和请求，在上下文内实现聚合之间的业务协同。也就是说，聚合之间通过聚合根 ID 关联引用，如果需要访问其它聚合的实体，就要先访问聚合根，再导航到聚合内部实体，外部对象不能直接访问聚合内实体。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面讲的还是有些抽象，下面看一个图就能很好理解（同样是源于极客时间欧创新的DDD实战课）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5461441213653603&quot; data-type=&quot;png&quot; data-w=&quot;1582&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gUNqMr7v4mS1Ikv4m3UcmNUJMUgPFrP37pbw4mcuicUYRSbbOdM8Xabg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单概括一下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过事件风暴（我理解就是头脑风暴，不过我们一般都是先通过个人理解，然后再和相关核心同学进行沟通），得到实体和值对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将这些实体和值对象聚合为“投保聚合”和“客户聚合”，其中“投保单”和“客户”是两者的聚合根；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;找出与聚合根“投保单”和“客户”关联的所有紧密依赖的实体和值对象；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在聚合内根据聚合根、实体和值对象的依赖关系，画出对象的引用和依赖模型。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.6 领域服务和应用服务&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.6.1 领域服务&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一些逻辑不属于某个实体时，可以把这些逻辑单独拿出来放到领域服务中，理想的情况是没有领域服务，如果领域服务使用不恰当，慢慢又演化回了以前逻辑都在 service 层的局面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用领域服务的情况：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;执行一个显著的业务操作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对领域对象进行转换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以多个领域对象作为输入参数进行计算，结果产生一个值对象&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.6.2 应用服务&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用层作为展现层与领域层的桥梁，是用来表达用例和用户故事的主要手段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用层通过应用服务接口来暴露系统的全部功能。在应用服务的实现中，它负责编排和转发，它将要实现的功能委托给一个或多个领域对象来实现，它本身只负责处理业务用例的执行顺序以及结果的拼装。通过这样一种方式，它隐藏了领域层的复杂性及其内部实现机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用层相对来说是较“薄”的一层，除了定义应用服务之外，在该层我们可以进行安全认证，权限校验，持久化事务控制，或者向其他系统发生基于事件的消息通知，另外还可以用于创建邮件以发送给客户等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.7 领域事件&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;领域事件 = 事件发布 + 事件存储 + 事件分发 + 事件处理。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;领域事件是一个领域模型中极其重要的部分，用来表示领域中发生的事件。忽略不相关的领域活动，同时明确领域专家要跟踪或希望被通知的事情，或与其他模型对象中的状态更改相关联。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面简单说明领域事件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;事件发布&lt;/strong&gt;：构建一个事件，需要唯一标识，然后发布；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;事件存储&lt;/strong&gt;：发布事件前需要存储，因为接收后的事建也会存储，可用于重试或对账等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;事件分发&lt;/strong&gt;：服务内直接发布给订阅者，服务外需要借助消息中间件，比如Kafka，RabbitMQ等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;事件处理&lt;/strong&gt;：先将事件存储，然后再处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如下订单后，给用户增长积分与赠送优惠券的需求。如果使用瀑布流的方式写代码。一个个逻辑调用，那么不同用户，赠送的东西不同，逻辑就会变得又臭又长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的比较好的方式是，用户下订单成功后，发布领域事件，积分聚合与优惠券聚合监听订单发布的领域事件进行处理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.8 资源库【仓储】&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仓储介于领域模型和数据模型之间，主要用于聚合的持久化和检索。它隔离了领域模型和数据模型，以便我们关注于领域模型而不需要考虑如何进行持久化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将暂时不使用的领域对象从内存中持久化存储到磁盘中。当日后需要再次使用这个领域对象时，根据 key 值到数据库查找到这条记录，然后将其恢复成领域对象，应用程序就可以继续使用它了，这就是领域对象持久化存储的设计思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是感觉这块内容比较抽象？直接对着Demo学习吧，很多东西你就会豁然开朗。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. DDD实战&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1 项目介绍&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;主要是围绕用户、角色和两者的关系，构建权限分配领域模型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;采用 DDD 4 层架构，包括用户接口层、应用层、领域层和基础服务层。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据通过 VO、DTO、DO、PO 转换，进行分层隔离。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;采用 SpringBoot + MyBatis Plus 框架，存储用 MySQL。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2 工程目录&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目划分为用户接口层、应用层、领域层和基础服务层，每一层的代码结构都非常清晰，包括每一层 VO、DTO、DO、PO 的数据定义，对于每一层的公共代码，比如常量、接口等，都抽离到 ddd-common 中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;./ddd-application  // 应用层&lt;br/&gt;├── pom.xml&lt;br/&gt;└── src&lt;br/&gt;    └── main&lt;br/&gt;        └── java&lt;br/&gt;            └── com&lt;br/&gt;                └── ddd&lt;br/&gt;                    └── applicaiton&lt;br/&gt;                        ├── converter&lt;br/&gt;                        │   └── UserApplicationConverter.java // 类型转换器&lt;br/&gt;                        └── impl&lt;br/&gt;                            └── AuthrizeApplicationServiceImpl.java // 业务逻辑&lt;br/&gt;./ddd-common&lt;br/&gt;├── ddd-common // 通用类库&lt;br/&gt;│   ├── pom.xml&lt;br/&gt;│   └── src&lt;br/&gt;│       └── main&lt;br/&gt;│           └── java&lt;br/&gt;│               └── com&lt;br/&gt;│                   └── ddd&lt;br/&gt;│                       └── common&lt;br/&gt;│                           ├── exception // 异常&lt;br/&gt;│                           │   ├── ServiceException.java&lt;br/&gt;│                           │   └── ValidationException.java&lt;br/&gt;│                           ├── result // 返回结果集&lt;br/&gt;│                           │   ├── BaseResult.javar&lt;br/&gt;│                           │   ├── Page.java&lt;br/&gt;│                           │   ├── PageResult.java&lt;br/&gt;│                           │   └── Result.java&lt;br/&gt;│                           └── util // 通用工具&lt;br/&gt;│                               ├── GsonUtil.java&lt;br/&gt;│                               └── ValidationUtil.java&lt;br/&gt;├── ddd-common-application // 业务层通用模块&lt;br/&gt;│   ├── pom.xml&lt;br/&gt;│   └── src&lt;br/&gt;│       └── main&lt;br/&gt;│           └── java&lt;br/&gt;│               └── com&lt;br/&gt;│                   └── ddd&lt;br/&gt;│                       └── applicaiton&lt;br/&gt;│                           ├── dto // DTO&lt;br/&gt;│                           │   ├── RoleInfoDTO.java&lt;br/&gt;│                           │   └── UserRoleDTO.java&lt;br/&gt;│                           └── servic // 业务接口&lt;br/&gt;│                               └── AuthrizeApplicationService.java&lt;br/&gt;├── ddd-common-domain&lt;br/&gt;│   ├── pom.xml&lt;br/&gt;│   └── src&lt;br/&gt;│       └── main&lt;br/&gt;│           └── java&lt;br/&gt;│               └── com&lt;br/&gt;│                   └── ddd&lt;br/&gt;│                       └── domain&lt;br/&gt;│                           ├── event // 领域事件&lt;br/&gt;│                           │   ├── BaseDomainEvent.java&lt;br/&gt;│                           │   └── DomainEventPublisher.java&lt;br/&gt;│                           └── service // 领域接口&lt;br/&gt;│                               └── AuthorizeDomainService.java&lt;br/&gt;└── ddd-common-infra&lt;br/&gt;    ├── pom.xml&lt;br/&gt;    └── src&lt;br/&gt;        └── main&lt;br/&gt;            └── java&lt;br/&gt;                └── com&lt;br/&gt;                    └── ddd&lt;br/&gt;                        └── infra&lt;br/&gt;                            ├── domain // DO&lt;br/&gt;                            │   └── AuthorizeDO.java&lt;br/&gt;                            ├── dto &lt;br/&gt;                            │   ├── AddressDTO.java&lt;br/&gt;                            │   ├── RoleDTO.java&lt;br/&gt;                            │   ├── UnitDTO.java&lt;br/&gt;                            │   └── UserRoleDTO.java&lt;br/&gt;                            └── repository&lt;br/&gt;                                ├── UserRepository.java // 领域仓库&lt;br/&gt;                                └── mybatis&lt;br/&gt;                                    └── entity // PO&lt;br/&gt;                                        ├── BaseUuidEntity.java&lt;br/&gt;                                        ├── RolePO.java&lt;br/&gt;                                        ├── UserPO.java&lt;br/&gt;                                        └── UserRolePO.java&lt;br/&gt;./ddd-domian  // 领域层&lt;br/&gt;├── pom.xml&lt;br/&gt;└── src&lt;br/&gt;    └── main&lt;br/&gt;        └── java&lt;br/&gt;            └── com&lt;br/&gt;                └── ddd&lt;br/&gt;                    └── domain&lt;br/&gt;                        ├── event // 领域事件&lt;br/&gt;                        │   ├── DomainEventPublisherImpl.java&lt;br/&gt;                        │   ├── UserCreateEvent.java&lt;br/&gt;                        │   ├── UserDeleteEvent.java&lt;br/&gt;                        │   └── UserUpdateEvent.java&lt;br/&gt;                        └── impl // 领域逻辑&lt;br/&gt;                            └── AuthorizeDomainServiceImpl.java&lt;br/&gt;./ddd-infra  // 基础服务层&lt;br/&gt;├── pom.xml&lt;br/&gt;└── src&lt;br/&gt;    └── main&lt;br/&gt;        └── java&lt;br/&gt;            └── com&lt;br/&gt;                └── ddd&lt;br/&gt;                    └── infra&lt;br/&gt;                        ├── config&lt;br/&gt;                        │   └── InfraCoreConfig.java  // 扫描Mapper文件&lt;br/&gt;                        └── repository&lt;br/&gt;                            ├── converter&lt;br/&gt;                            │   └── UserConverter.java // 类型转换器&lt;br/&gt;                            ├── impl&lt;br/&gt;                            │   └── UserRepositoryImpl.java&lt;br/&gt;                            └── mapper&lt;br/&gt;                                ├── RoleMapper.java&lt;br/&gt;                                ├── UserMapper.java&lt;br/&gt;                                └── UserRoleMapper.java&lt;br/&gt;./ddd-interface&lt;br/&gt;├── ddd-api  // 用户接口层&lt;br/&gt;│   ├── pom.xml&lt;br/&gt;│   └── src&lt;br/&gt;│       └── main&lt;br/&gt;│           ├── java&lt;br/&gt;│           │   └── com&lt;br/&gt;│           │       └── ddd&lt;br/&gt;│           │           └── api&lt;br/&gt;│           │               ├── DDDFrameworkApiApplication.java // 启动入口&lt;br/&gt;│           │               ├── converter&lt;br/&gt;│           │               │   └── AuthorizeConverter.java // 类型转换器&lt;br/&gt;│           │               ├── model&lt;br/&gt;│           │               │   ├── req // 入参 req&lt;br/&gt;│           │               │   │   ├── AuthorizeCreateReq.java&lt;br/&gt;│           │               │   │   └── AuthorizeUpdateReq.java&lt;br/&gt;│           │               │   └── vo  // 输出 VO&lt;br/&gt;│           │               │       └── UserAuthorizeVO.java&lt;br/&gt;│           │               └── web     // API&lt;br/&gt;│           │                   └── AuthorizeController.java&lt;br/&gt;│           └── resources // 系统配置&lt;br/&gt;│               ├── application.yml&lt;br/&gt;│           └── resources // Sql文件&lt;br/&gt;│               └── init.sql&lt;br/&gt;└── ddd-task&lt;br/&gt;    └── pom.xml&lt;br/&gt;./pom.xml&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.3 数据库&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包括 3 张表，分别为用户、角色和用户角色表，一个用户可以拥有多个角色，一个角色可以分配给多个用户。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t_user&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;           &lt;span&gt;bigint&lt;/span&gt; auto_increment &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;主键&#x27;&lt;/span&gt; primary &lt;span&gt;key&lt;/span&gt;,&lt;br/&gt;    user_name    &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户名&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;password&lt;/span&gt;     &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;)                       &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;密码&#x27;&lt;/span&gt;,&lt;br/&gt;    real_name    &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;真实姓名&#x27;&lt;/span&gt;,&lt;br/&gt;    phone        &lt;span&gt;bigint&lt;/span&gt;                             &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;手机号&#x27;&lt;/span&gt;,&lt;br/&gt;    province     &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户名&#x27;&lt;/span&gt;,&lt;br/&gt;    city         &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户名&#x27;&lt;/span&gt;,&lt;br/&gt;    county       &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户名&#x27;&lt;/span&gt;,&lt;br/&gt;    unit_id      &lt;span&gt;bigint&lt;/span&gt;                             &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;单位id&#x27;&lt;/span&gt;,&lt;br/&gt;    unit_name    &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;单位名称&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_create   datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;创建时间&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_modified datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;修改时间&#x27;&lt;/span&gt;,&lt;br/&gt;    deleted      &lt;span&gt;bigint&lt;/span&gt;   &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;                 &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;是否删除，非0为已删除&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户表&#x27;&lt;/span&gt; &lt;span&gt;collate&lt;/span&gt; = utf8_bin;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t_role&lt;br/&gt;(&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;           &lt;span&gt;bigint&lt;/span&gt; auto_increment &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;主键&#x27;&lt;/span&gt; primary &lt;span&gt;key&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;         &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;256&lt;/span&gt;)                       &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;名称&#x27;&lt;/span&gt;,&lt;br/&gt;    code         &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;64&lt;/span&gt;)                        &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;角色code&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_create   datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;创建时间&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_modified datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;修改时间&#x27;&lt;/span&gt;,&lt;br/&gt;    deleted      &lt;span&gt;bigint&lt;/span&gt;   &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;                 &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;是否已删除&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;角色表&#x27;&lt;/span&gt; &lt;span&gt;charset&lt;/span&gt; = utf8;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; t_user_role (&lt;br/&gt;    &lt;span&gt;id&lt;/span&gt;           &lt;span&gt;bigint&lt;/span&gt; auto_increment &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;主键id&#x27;&lt;/span&gt; primary &lt;span&gt;key&lt;/span&gt;,&lt;br/&gt;    user_id      &lt;span&gt;bigint&lt;/span&gt;                             &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户id&#x27;&lt;/span&gt;,&lt;br/&gt;    role_id      &lt;span&gt;bigint&lt;/span&gt;                             &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;角色id&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_create   datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;创建时间&#x27;&lt;/span&gt;,&lt;br/&gt;    gmt_modified datetime &lt;span&gt;default&lt;/span&gt; &lt;span&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;修改时间&#x27;&lt;/span&gt;,&lt;br/&gt;    deleted      &lt;span&gt;bigint&lt;/span&gt;   &lt;span&gt;default&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;                 &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;是否已删除&#x27;&lt;/span&gt;&lt;br/&gt;)&lt;span&gt;comment&lt;/span&gt; &lt;span&gt;&#x27;用户角色关联表&#x27;&lt;/span&gt; &lt;span&gt;charset&lt;/span&gt; = utf8;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.4 基础服务层&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仓储（资源库）介于领域模型和数据模型之间，主要用于聚合的持久化和检索。它隔离了领域模型和数据模型，以便我们关注于领域模型而不需要考虑如何进行持久化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如保存用户，需要将用户和角色一起保存，也就是创建用户的同时，需要新建用户的角色权限，这个可以直接全部放到仓储中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; AuthorizeDO &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(AuthorizeDO user)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    UserPO userPo = userConverter.toUserPo(user);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(Objects.isNull(user.getUserId())){&lt;br/&gt;        userMapper.insert(userPo);&lt;br/&gt;        user.setUserId(userPo.getId());&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        userMapper.updateById(userPo);&lt;br/&gt;        userRoleMapper.delete(Wrappers.&amp;lt;UserRolePO&amp;gt;lambdaQuery()&lt;br/&gt;                .eq(UserRolePO::getUserId, user.getUserId()));&lt;br/&gt;    }&lt;br/&gt;    List&amp;lt;UserRolePO&amp;gt; userRolePos = userConverter.toUserRolePo(user);&lt;br/&gt;    userRolePos.forEach(userRoleMapper::insert);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.query(user.getUserId());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;仓储对外暴露的接口如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 用户领域仓储&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;UserRepository&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 删除&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;&lt;span&gt;(Long userId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 查询&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AuthorizeDO &lt;span&gt;query&lt;/span&gt;&lt;span&gt;(Long userId)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 保存&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;AuthorizeDO &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(AuthorizeDO user)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基础服务层不仅仅包括资源库，与第三方的调用，都需要放到该层，Demo 中没有该示例，我们可以看一个小米内部具体的实际项目，他把第三方的调用放到了 remote 目录中：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9962121212121212&quot; data-type=&quot;png&quot; data-w=&quot;528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gPYETyldgWBibEwayiaHvUpqlrlrMYEx1AKp66NKGAwrA6PWKib1LgCic2w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.5 领域层&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.5.1 聚合&amp;amp;聚合根&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们有用户和角色两个实体，可以将用户、角色和两者关系进行聚合，然后用户就是聚合根，聚合之后的属性，我们称之为“权限”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于地址 Address，目前是作为字段属性存储到 DB 中，如果对地址无需进行检索，可以把地址作为“值对象”进行存储，即把地址序列化为 Json 存，存储到 DB 的一个字段中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthorizeDO&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 用户ID&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long userId;&lt;br/&gt;    &lt;span&gt;// 用户名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;    &lt;span&gt;// 真实姓名&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String realName;&lt;br/&gt;    &lt;span&gt;// 手机号&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String phone;&lt;br/&gt;    &lt;span&gt;// 密码&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String password;&lt;br/&gt;    &lt;span&gt;// 用户单位&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; UnitDTO unit;&lt;br/&gt;    &lt;span&gt;// 用户地址&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; AddressDTO address;&lt;br/&gt;    &lt;span&gt;// 用户角色&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; List&amp;lt;RoleDTO&amp;gt; roles;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.5.2 领域服务&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Demo中的领域服务比较薄，通过单位ID后去获取单位名称，构建单位信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AuthorizeDomainServiceImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AuthorizeDomainService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 设置单位信息&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;associatedUnit&lt;/span&gt;&lt;span&gt;(AuthorizeDO authorizeDO)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String unitName = &lt;span&gt;&quot;武汉小米&quot;&lt;/span&gt;;&lt;span&gt;// &lt;span&gt;TODO:&lt;/span&gt; 通过第三方获取&lt;/span&gt;&lt;br/&gt;        authorizeDO.getUnit().setUnitName(unitName);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们其实可以把领域服务再进一步抽象，可以抽象出领域能力，通过这些领域能力去构建应用层逻辑，比如账号相关的领域能力可以包括授权领域能力、身份认证领域能力等，这样每个领域能力相对独立，就不会全部揉到一个文件中，下面是实际项目的领域层截图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.796875&quot; data-type=&quot;png&quot; data-w=&quot;512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4gmkUttpBicdc9jg9iaKqYWqL1VQG4mJ8BFEgxZXpqCOaHyofUwqOpENibg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.5.3 领域事件&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;领域事件 = 事件发布 + 事件存储 + 事件分发 + 事件处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个 Demo 中，对领域事件的处理非常简单，还是一个应用内部的领域事件，就是每次执行一次具体的操作时，把行为记录下来。Demo 中没有记录事件的库表，事件的分发还是同步的方式，所以 Demo 中的领域事件还不完善，后面我会再继续完善 Demo 中的领域事件，通过 Java 消息机制实现解耦，甚至可以借助消息队列，实现异步。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 领域事件基类&lt;br/&gt; *&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; louzai&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 2021/11/22&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Getter&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Setter&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@NoArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;BaseDomainEvent&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = &lt;span&gt;1465328245048581896L&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 发生时间&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; LocalDateTime occurredOn;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 领域事件数据&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; T data;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;BaseDomainEvent&lt;/span&gt;&lt;span&gt;(T data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.data = data;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.occurredOn = LocalDateTime.now();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 用户新增领域事件&lt;br/&gt; *&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; louzai&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 2021/11/20&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;UserCreateEvent&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseDomainEvent&lt;/span&gt;&amp;lt;&lt;span&gt;AuthorizeDO&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;UserCreateEvent&lt;/span&gt;&lt;span&gt;(AuthorizeDO user)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(user);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * 领域事件发布实现类&lt;br/&gt; *&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; louzai&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 2021/11/20&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DomainEventPublisherImpl&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;DomainEventPublisher&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationEventPublisher applicationEventPublisher;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;publishEvent&lt;/span&gt;&lt;span&gt;(BaseDomainEvent event)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        log.debug(&lt;span&gt;&quot;发布事件,event:{}&quot;&lt;/span&gt;, GsonUtil.gsonToString(event));&lt;br/&gt;        applicationEventPublisher.publishEvent(event);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.4 应用层&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用层就非常好理解了，只负责简单的逻辑编排，比如创建用户授权：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;createUserAuthorize&lt;/span&gt;(&lt;span&gt;UserRoleDTO&lt;/span&gt; &lt;span&gt;userRoleDTO&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// DTO转为DO&lt;/span&gt;&lt;br/&gt;    AuthorizeDO authorizeDO = userApplicationConverter.toAuthorizeDo(userRoleDTO);&lt;br/&gt;    &lt;span&gt;// 关联单位单位信息&lt;/span&gt;&lt;br/&gt;    authorizeDomainService.associatedUnit(authorizeDO);&lt;br/&gt;    &lt;span&gt;// 存储用户&lt;/span&gt;&lt;br/&gt;    AuthorizeDO saveAuthorizeDO = userRepository.save(authorizeDO);&lt;br/&gt;    &lt;span&gt;// 发布用户新建的领域事件&lt;/span&gt;&lt;br/&gt;    domainEventPublisher.publishEvent(&lt;span&gt;new&lt;/span&gt; UserCreateEvent(saveAuthorizeDO));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询用户授权信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; UserRoleDTO &lt;span&gt;queryUserAuthorize&lt;/span&gt;&lt;span&gt;(Long userId)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;      &lt;span&gt;// 查询用户授权领域数据&lt;/span&gt;&lt;br/&gt;      AuthorizeDO authorizeDO = userRepository.query(userId);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (Objects.isNull(authorizeDO)) {&lt;br/&gt;          &lt;span&gt;throw&lt;/span&gt; ValidationException.of(&lt;span&gt;&quot;UserId is not exist.&quot;&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;// DO转DTO&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; userApplicationConverter.toAuthorizeDTO(authorizeDO);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的同学可以发现，我们应用层和领域层，通过 DTO 和 DO 进行数据转换。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.5 用户接口层&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后就是提供 API 接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/query&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Result&amp;lt;UserAuthorizeVO&amp;gt; &lt;span&gt;query&lt;/span&gt;&lt;span&gt;(@RequestParam(&lt;span&gt;&quot;userId&quot;&lt;/span&gt;)&lt;/span&gt; Long userId)&lt;/span&gt;{&lt;br/&gt;    UserRoleDTO userRoleDTO = authrizeApplicationService.queryUserAuthorize(userId);&lt;br/&gt;    Result&amp;lt;UserAuthorizeVO&amp;gt; result = &lt;span&gt;new&lt;/span&gt; Result&amp;lt;&amp;gt;();&lt;br/&gt;    result.setData(authorizeConverter.toVO(userRoleDTO));&lt;br/&gt;    result.setCode(BaseResult.CODE_SUCCESS);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@PostMapping&lt;/span&gt;(&lt;span&gt;&quot;/save&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Result&amp;lt;Object&amp;gt; &lt;span&gt;create&lt;/span&gt;&lt;span&gt;(@RequestBody AuthorizeCreateReq authorizeCreateReq)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    authrizeApplicationService.createUserAuthorize(authorizeConverter.toDTO(authorizeCreateReq));&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Result.ok(BaseResult.INSERT_SUCCESS);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据的交互，包括入参、DTO 和 VO，都需要对数据进行转换。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.6 项目运行&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;新建库表：通过文件 &quot;ddd-interface/ddd-api/src/main/resources/init.sql&quot; 新建库表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改 SQL 配置：修改 &quot;ddd-interface/ddd-api/src/main/resources/application.yml&quot; 的数据库配置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;启动服务：直接启动服务即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;测试用例：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;请求 URL：http://127.0.0.1:8087/api/user/save&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Post body：{&quot;userName&quot;:&quot;louzai&quot;,&quot;realName&quot;:&quot;楼&quot;,&quot;phone&quot;:13123676844,&quot;password&quot;:&quot;***&quot;,&quot;unitId&quot;:2,&quot;province&quot;:&quot;湖北省&quot;,&quot;city&quot;:&quot;鄂州市&quot;,&quot;county&quot;:&quot;葛店开发区&quot;,&quot;roles&quot;:[{&quot;roleId&quot;:2}]}&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.7 项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DDD Demo 代码已经上传到 GitHub 中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://github.com/lml200701158/ddd-framework&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者通过下面命令直接获取：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;git &lt;span&gt;clone&lt;/span&gt; git@github.com:lml200701158/ddd-framework.git&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. 结语&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;谈谈我对 DDD 的理解，我觉得 DDD 不像一门技术，我理解的技术比如高并发、缓存、消息队列等，&lt;strong&gt;DDD 更像是一项软技能，一种方法论，包含了很多设计理念。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章写于去年，所以当时对 DDD 理解的其实还不够深入，今年做过一些 DDD 的项目，所以现在对 DDD 的理解又加深了几分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家不要认为，掌握了一些概念，以及 DDD 的基本思想，就掌握了 DDD，然后做项目时，照葫芦画瓢，这样你会死的很惨！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只掌握 DDD 表面的东西，其实是不够的，&lt;strong&gt;我觉得 DDD 最复杂的地方，其实是在它的领域设计部分&lt;/strong&gt;，项目启动前，你一定要设计各个领域对象，以及它们直接的交互关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们之前做过一个项目，因为这块没有做好，大家一边写代码，一边还在思考，这个领域对象该如何构造，严重影响开发效率，&lt;strong&gt;最后又不得不回退到 MVC 的模式。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要为了炫技，啥都要搞个 DDD，两者如何选择：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;MVC&lt;/strong&gt;：上来就可以开干，短平快，&lt;strong&gt;前期用起来很香，整体开发效率也更高&lt;/strong&gt;，所以对于紧急，或者不那么重要的项目，我会直接用 MVC 怼，不好的地方就是，后面会越来越复杂，可能最后就是一坨屎山，&lt;strong&gt;但是很多时候，比如老板进度催的紧，我哪想到那么多以后呢？&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;DDD&lt;/strong&gt;：前期需要花大量时间设计好领域模型，&lt;strong&gt;对于一些基础组件，或者一些核心服务，如果对象模型非常复杂，建议采用 DDD&lt;/strong&gt;，前期可能会稍微痛苦一些，但是后期维护起来会非常方便。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. 参考文章&lt;/h1&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;极客时间：https://time.geekbang.org/column/intro/100037301?tab=catalog&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一文带你落地DDD：https://juejin.cn/post/7004002483601145863&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;领域驱动设计在互联网业务开发中的实践：https://tech.meituan.com/2017/12/22/ddd-in-practice.html&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;浅析VO、DTO、DO、PO：https://developer.aliyun.com/article/269676&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;「文章汇总」&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;汇总目录&lt;/strong&gt;：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTU5NzQ1Mw==&amp;amp;mid=2247487713&amp;amp;idx=1&amp;amp;sn=9661f1520e6237d18536ccf496f8793a&amp;amp;chksm=cf035203f874db157eb05a3909725daeadd4625b8702f358abe9d77dd52fefd08c50279ce771&amp;amp;token=1760780777&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;楼仔原创精选荟萃&lt;/a&gt; 🔥🔥🔥&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;推荐理由&lt;/strong&gt;：一百多篇原创好文，近 2 年的坚持，&lt;strong&gt;无论你是小白，还是资深大佬，总能找到属于你自己的段位。&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3OTU5NzQ1Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLFTdSvrrpJnCZ0Fp5Z1wKkhKFQBxTaFfxOpib3E2zgUu39BFbsBqqJbEpxicUvz3H6csoL2JQ9EP1yQ/0?wx_fmt=png&quot; data-nickname=&quot;楼仔&quot; data-alias=&quot;&quot; data-signature=&quot;7 年一线大厂经验（百度/小米/滴滴），带你进大厂，不限于Java、Go、高并发、架构选型、消息队列、设计模式、MySQL、Redis、DDD、项目管理、软技能等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;「学习交流」&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前我们已经成立多个技术交流群！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;长按二维码，回复 &lt;strong&gt;「加群」&lt;/strong&gt;，欢迎一起学习交流哈~~ 👏🏻👏🏻👏🏻&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5726210350584308&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sXFqMxQoVLESpJibWtYnlHsuuI2wOYE4ghmO8iaBZQUKAsgOicu9oDImWqhd3OGic2Pm8esPd0PLWBrKXGUbl6InDQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;尽信书则不如无书，因个人能力有限，难免有疏漏和错误之处，如发现 bug 或者有更好的建议，欢迎批评指正，不吝感激。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>