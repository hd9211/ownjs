<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>33085700e02cec92060ed57a3b2edd69</guid>
<title>[推荐] 聊聊接口设计的36个小技巧</title>
<link>https://toutiao.io/k/yqm776v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;l前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是苏三。作为后端开发，不管是什么语言，&lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;Go&lt;/code&gt;还是&lt;code&gt;C++&lt;/code&gt;，其背后的后端思想都是类似的。后面打算出一个后端思想的技术专栏，主要包括后端的一些设计、或者后端规范相关的，希望对大家日常工作有帮助哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们做后端开发工程师，主要工作就是：&lt;strong&gt;如何把一个接口设计好&lt;/strong&gt;。所以，今天就给大家介绍，设计好接口的36个锦囊。本文就是后端思想专栏的第一篇哈。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8443782576321668&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1343&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdHrWl1Oiaw2S7hpicOL0Vb4v5wHRCXejQwFArOlBdwSWic1YY4dQBZeATQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 接口参数校验&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;入参出参校验是每个程序员必备的基本素养。你设计的接口，必须先校验参数。比如入参是否允许为空，入参长度是否符合你的预期长度。这个要养成习惯哈，日常开发中，很多低级bug都是不校验参数导致的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如你的数据库表字段设置为&lt;code&gt;varchar(16)&lt;/code&gt;,对方传了一个32位的字符串过来，如果你不校验参数，&lt;strong&gt;插入数据库直接异常了&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出参也是，比如你定义的接口报文，参数是不为空的，但是你的接口返回参数，没有做校验，因为程序某些原因，直返回别人一个&lt;code&gt;null&lt;/code&gt;值。。。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7933333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;150&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdreK8hYeFhMDP8HUJQ7lBszcb85BG3zdgtUGdeHQn4ic5EGMRJMIEZDQ/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 修改老接口时，注意接口的兼容性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多bug都是因为修改了对外旧接口，但是却&lt;strong&gt;不做兼容&lt;/strong&gt;导致的。关键这个问题多数是比较严重的，可能直接导致系统发版失败的。新手程序员很容易犯这个错误哦~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7916666666666666&quot; data-type=&quot;png&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdtoaYQsvtjUX6oGmJbReda6qJlJM1I98DL44R6Tp2vnsR59NTt96g1g/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，如果你的需求是在原来接口上修改，尤其这个接口是对外提供服务的话，一定要考虑接口兼容。举个例子吧，比如dubbo接口，原本是只接收A，B参数，现在你加了一个参数C，就可以考虑这样处理：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//老接口&lt;br/&gt;void oldService(A,B){&lt;br/&gt;  //兼容新接口，传个null代替C&lt;br/&gt;  newService(A,B,null);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//新接口，暂时不能删掉老接口，需要做兼容。&lt;br/&gt;void newService(A,B,C){&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.  设计接口时，充分考虑接口的可扩展性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要根据实际业务场景设计接口，充分考虑接口的可扩展性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如你接到一个需求：是用户添加或者修改员工时，需要刷脸。那你是反手提供一个员工管理的提交刷脸信息接口？还是先思考：提交刷脸是不是通用流程呢？比如转账或者一键贴现需要接入刷脸的话，你是否需要重新实现一个接口呢？还是当前按业务类型划分模块，复用这个接口就好，保留接口的可扩展性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果按模块划分的话，未来如果其他场景比如一键贴现接入刷脸的话，不用再搞一套新的接口，只需要新增枚举，然后复用刷脸通过流程接口，实现一键贴现刷脸的差异化即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4934696195343555&quot; data-type=&quot;png&quot; data-w=&quot;1761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdQZdAGK3sj9C1EZUYayIQKX4NTBIZ51vlVaITsR1P9uQtibA42h5f9nQ/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.接口考虑是否需要防重处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果前端重复请求，你的逻辑如何处理？是不是考虑接口去重处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，如果是查询类的请求，其实不用防重。如果是更新修改类的话，尤其金融转账类的，就要过滤重复请求了。简单点，你可以使用Redis防重复请求，同样的请求方，一定时间间隔内的相同请求，考虑是否过滤。当然，转账类接口，并发不高的话，&lt;strong&gt;推荐使用数据库防重表&lt;/strong&gt;，以&lt;strong&gt;唯一流水号作为主键或者唯一索引&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37011173184357543&quot; data-type=&quot;png&quot; data-w=&quot;716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdUJvMPHnj5mpLpgH8o1pRxfyL0Q7mr4PNcePwLEibYIPpxROfN5hIyrg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 重点接口，考虑线程池隔离。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一些登陆、转账交易、下单等重要接口，考虑线程池隔离哈。如果你所有业务都共用一个线程池，有些业务出bug导致线程池阻塞打满的话，那就杯具了，&lt;strong&gt;所有业务都影响了&lt;/strong&gt;。因此进行线程池隔离，重要业务分配多一点的核心线程，就更好保护重要业务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3845454545454545&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdPiazEAHIKgvhaYpJoa6o3bXSzbrFqdjgcgEFdFBB7ntrl7wZuLsiawag/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 调用第三方接口要考虑异常和超时处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你调用第三方接口，或者分布式远程服务的的话，需要考虑：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如，你调别人的接口，如果异常了，怎么处理，是重试还是当做失败还是告警处理。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;没法预估对方接口一般多久返回，一般设置个超时断开时间，以保护你的接口。&lt;strong&gt;之前见过一个生产问题&lt;/strong&gt;，就是http调用不设置超时时间，最后响应方进程假死，请求一直占着线程不释放，拖垮线程池。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你的接口调失败，需不需要重试？重试几次？需要站在业务上角度思考这个问题&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6174496644295302&quot; data-type=&quot;gif&quot; data-w=&quot;298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdaHcCQm2HDIPNQJwS58B4b4Wv8CCbOkjnnUj8V3LOusaANY5PMJYtcw/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 接口实现考虑熔断和降级&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前互联网系统一般都是分布式部署的。而分布式系统中经常会出现某个基础服务不可用，最终导致整个系统不可用的情况, 这种现象被称为&lt;strong&gt;服务雪崩效应&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如分布式调用链路&lt;code&gt;A-&amp;gt;B-&amp;gt;C....&lt;/code&gt;，下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5128983308042488&quot; data-type=&quot;png&quot; data-w=&quot;659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpd8YswPLVF768Tsia939UnlzYxicwqgr4Vb3ibBsmRnHZPhqfTWZXsjBibeA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果服务C出现问题，比如是&lt;strong&gt;因为慢SQL导致调用缓慢&lt;/strong&gt;，那将导致B也会延迟，从而A也会延迟。堵住的A请求会消耗占用系统的线程、IO等资源。当请求A的服务越来越多，占用计算机的资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统崩溃。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了应对服务雪崩, 常见的做法是&lt;strong&gt;熔断和降级&lt;/strong&gt;。最简单是加开关控制，当下游系统出问题时，开关降级，不再调用下游系统。还可以选用开源组件&lt;code&gt;Hystrix&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8. 日志打印好，接口的关键代码，要有日志保驾护航。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键业务代码无论身处何地，都应该有足够的日志保驾护航。比如：你实现转账业务，转个几百万，然后转失败了，接着客户投诉，然后你还没有打印到日志，想想那种水深火热的困境下，你却毫无办法。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，你的转账业务都需要哪些日志信息呢？至少，方法调用前，入参需要打印需要吧，接口调用后，需要捕获一下异常吧，同时打印异常相关日志吧，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public void transfer(TransferDTO transferDTO){&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer begin&quot;&lt;/span&gt;);&lt;br/&gt;    //打印入参&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer,paramters:{}&quot;&lt;/span&gt;,transferDTO);&lt;br/&gt;    try {&lt;br/&gt;      res=  transferService.transfer(transferDTO);&lt;br/&gt;    }catch(Exception e){&lt;br/&gt;     log.error(&lt;span&gt;&quot;transfer fail,account：{}&quot;&lt;/span&gt;,&lt;br/&gt;     transferDTO.getAccount（）)&lt;br/&gt;     log.error(&lt;span&gt;&quot;transfer fail,exception:{}&quot;&lt;/span&gt;,e);&lt;br/&gt;    }&lt;br/&gt;    log.info(&lt;span&gt;&quot;invoke tranfer end&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前写过一篇打印日志的15个建议，大家可以看看哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247494838&amp;amp;idx=1&amp;amp;sn=cdb15fd346bddf3f8c1c99f0efbd67d8&amp;amp;chksm=cf22339ff855ba891616c79d4f4855e228e34a9fb45088d7acbe421ad511b8d090a90f5b019f&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;工作总结！日志打印的15个建议&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9. 接口的功能定义要具备单一性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单一性是指接口做的事情比较单一、专一。比如一个登陆接口，它做的事情就只是校验账户名密码，然后返回登陆成功以及&lt;code&gt;userId&lt;/code&gt;即可。&lt;strong&gt;但是如果你为了减少接口交互，把一些注册、一些配置查询等全放到登陆接口，就不太妥。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这也是微服务一些思想，接口的功能单一、明确。比如订单服务、积分、商品信息相关的接口都是划分开的。将来拆分微服务的话，是不是就比较简便啦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.接口有些场景，使用异步更合理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个简单的例子，比如你实现一个用户注册的接口。用户注册成功时，发个邮件或者短信去通知用户。这个邮件或者发短信，就更适合异步处理。因为总不能一个通知类的失败，导致注册失败吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于做异步的方式，简单的就是&lt;strong&gt;用线程池&lt;/strong&gt;。还可以使用消息队列，就是用户注册成功后，生产者产生一个注册成功的消息，消费者拉到注册成功的消息，就发送通知。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2038327526132404&quot; data-type=&quot;png&quot; data-w=&quot;1148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdoQxBiczYHqAa1EEU2m8Mb5Zp47bFWzpBwSOjtHx6wCNRebiaZ5hHibspw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不是所有的接口都适合设计为同步接口。比如你要做一个转账的功能，如果你是单笔的转账，你是可以把接口设计同步。用户发起转账时，客户端在静静等待转账结果就好。如果你是批量转账，一个批次一千笔，甚至一万笔的，你则可以把接口设计为异步。就是用户发起批量转账时，持久化成功就先返回受理成功。然后用户隔十分钟或者十五分钟等再来查转账结果就好。又或者，批量转账成功后，再回调上游系统。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44280442804428044&quot; data-type=&quot;png&quot; data-w=&quot;813&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdBtDw9Yible4HIThFHj9stia1iaTLC3XNXn6PHwTBxXL1AU4XcKv8nhLAA/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;11. 优化接口耗时，远程串行考虑改并行调用&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。那你是一个一个接口串行调，还是并行调用呢？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2056239015817223&quot; data-type=&quot;png&quot; data-w=&quot;1138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdT2V3RMiavvZnKM6aibzI9VicpsETGxiaaicbvuwlHzaau0IzSW6Sia2iaFV7w/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是串行一个一个查，比如查用户信息200ms，查banner信息100ms、查弹窗信息50ms，那一共就耗时&lt;code&gt;350ms&lt;/code&gt;了，如果还查其他信息，那耗时就更大了。这种场景是可以改为并行调用的。也就是说查用户信息、查banner信息、查弹窗信息，可以同时发起。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5670731707317073&quot; data-type=&quot;png&quot; data-w=&quot;820&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdbkvw3UO2e6WL0ZYsVVyHw3kpFERdVY2es04w1IETXicuPbj4TcDGVBw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java中有个异步编程利器：&lt;code&gt;CompletableFuture&lt;/code&gt;，就可以很好实现这个功能。有兴趣的小伙伴可以看我之前这个文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490456&amp;amp;idx=1&amp;amp;sn=95836324db57673a4d7aea4fb233c0d2&amp;amp;chksm=cf21c4b1f8564da72dc7b39279362bcf965b1374540f3b339413d138599f7de59a5f977e3b0e&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;CompletableFuture详解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;12. 接口合并或者说考虑批量处理思想&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据库操作或或者是远程调用时，能批量操作就不要for循环调用。&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0433333333333332&quot; data-type=&quot;png&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdgc2flibD2xrMbfvMVnpC3mmQYDDH7MwmHkkuzqabmiasib6iaQqPMM3VuA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个简单例子，我们平时一个列表明细数据插入数据库时，不要在for循环一条一条插入，建议一个批次几百条，进行批量插入。同理远程调用也类似想法，比如你查询营销标签是否命中，可以一个标签一个标签去查，也可以批量标签去查，那批量进行，效率就更高嘛。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//反例&lt;br/&gt;&lt;span&gt;for&lt;/span&gt;(int i=0;i&amp;lt;n;i++){&lt;br/&gt;  remoteSingleQuery(param)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//正例&lt;br/&gt;remoteBatchQuery(param);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们是否了解过&lt;code&gt;kafka&lt;/code&gt;为什么这么快呢？其实其中一点原因，就是kafka&lt;strong&gt;使用批量消息&lt;/strong&gt;提升服务端处理能力。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;13. 接口实现过程中，恰当使用缓存&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哪些场景适合使用缓存？&lt;strong&gt;读多写少且数据时效要求越低的场景&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存用得好，可以承载更多的请求，提升查询效率，减少数据库的压力。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如一些平时变动很小或者说几乎不会变的商品信息，可以放到缓存，请求过来时，先查询缓存，如果没有再查数据库，并且把数据库的数据更新到缓存。但是，使用缓存增加了需要考虑这些点：缓存和数据库一致性如何保证、集群、缓存击穿、缓存雪崩、缓存穿透等问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;保证数据库和缓存一致性：&lt;strong&gt;缓存延时双删、删除缓存重试机制、读取biglog异步删除缓存&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存击穿：设置数据永不过期&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存&lt;span&gt;雪崩&lt;/span&gt;：Redis集群高可用、均匀设置过期时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缓存穿透：接口层校验、查询为空设置个默认空值标记、布隆过滤器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般用&lt;code&gt;Redis&lt;/code&gt;分布式缓存，当然有些时候也可以考虑使用本地缓存，如&lt;code&gt;Guava Cache、Caffeine&lt;/code&gt;等。使用本地缓存有些缺点，就是无法进行大数据存储，并且应用进程的重启，缓存会失效。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;14. 接口考虑热点数据隔离性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;瞬时间的高并发，可能会打垮你的系统。可以做一些热点数据的隔离。比如&lt;strong&gt;业务隔离、系统隔离、用户隔离、数据隔离&lt;/strong&gt;等。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;业务隔离性，比如12306的分时段售票，将热点数据分散处理，降低系统负载压力。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统隔离：比如把系统分成了用户、商品、社区三个板块。这三个块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用户隔离：重点用户请求到配置更好的机器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据隔离：使用单独的缓存集群或者数据库服务热点数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;15. 可变参数配置化，比如红包皮肤切换等&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如产品经理提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关的，春节的时候，为春节红包皮肤等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果在代码写死控制，可有类似以下代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(duringChristmas){&lt;br/&gt;   img = redPacketChristmasSkin;&lt;br/&gt;}&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(duringSpringFestival){&lt;br/&gt;   img =  redSpringFestivalSkin;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果到了元宵节的时候，运营小姐姐突然又有想法，红包皮肤换成灯笼相关的，这时候，是不是要去修改代码了，重新发布了？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从一开始接口设计时，可以实现&lt;strong&gt;一张红包皮肤的配置表&lt;/strong&gt;，将红包皮肤做成配置化呢？更换红包皮肤，只需修改一下表数据就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，还有一些场景适合一些配置化的参数：一个分页多少数量控制、某个抢红包多久时间过期这些，都可以搞到参数配置化表里面。&lt;strong&gt;这也是扩展性思想的一种体现。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;16.接口考虑幂等性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口是需要考虑幂等性的，尤其抢红包、转账这些重要接口。最直观的业务场景，就是&lt;strong&gt;用户连着点击两次&lt;/strong&gt;，你的接口有没有&lt;strong&gt;hold住&lt;/strong&gt;。或者消息队列出现重复消费的情况，你的业务逻辑怎么控制？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆下，&lt;strong&gt;什么是幂等？&lt;/strong&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;计算机科学中，幂等表示一次和多次请求某一个资源应该具有同样的副作用，或者说，多次请求所产生的影响与一次请求执行的影响效果相同。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家别搞混哈，&lt;strong&gt;防重和幂等设计其实是有区别的&lt;/strong&gt;。防重主要为了避免产生重复数据，把重复请求拦截下来即可。而幂等设计除了拦截已经处理的请求，还要求每次相同的请求都返回一样的效果。不过呢，很多时候，它们的处理流程、方案是类似的哈。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.75&quot; data-type=&quot;gif&quot; data-w=&quot;240&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdhJNGyOUwiaicpD6Q1Rvzz9yVhXDYHIcyGibER7y1P6KCviatIlb2355pyw/640?wx_fmt=gif&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口幂等实现方案主要有8种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;select+insert+主键/唯一索引冲突&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;直接insert + 主键/唯一索引冲突&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;状态机幂等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;抽取防重表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;token令牌&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;悲观锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;乐观锁&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式锁&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看我这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247497427&amp;amp;idx=1&amp;amp;sn=2ed160c9917ad989eee1ac60d6122855&amp;amp;chksm=cf2229faf855a0ecf5eb34c7335acdf6420426490ee99fc2b602d54ff4ffcecfdab24eeab0a3&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊幂等设计&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;17. 读写分离，优先考虑读从库，注意主从延迟问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的数据库都是集群部署的，有主库也有从库，当前一般都是读写分离的。比如你写入数据，肯定是写入主库，但是对于读取实时性要求不高的数据，则优先考虑读从库，因为可以分担主库的压力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果读取从库的话，需要考虑主从延迟的问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;18.接口注意返回的数据量，如果数据量大需要分页&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个接口返回报文，不应该包含过多的数据量。过多的数据量不仅处理复杂，并且数据量传输的压力也非常大。因此数量实在是比较大，可以分页返回，如果是功能不相关的报文，那应该考虑接口拆分。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;19. 好的接口实现，离不开SQL优化&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们做后端的，写好一个接口，离不开SQL优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQL优化从这几个维度思考：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;explain 分析SQL查询计划（重点关注type、extra、filtered字段）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;show profile分析，了解SQL执行的线程的状态以及消耗的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;索引优化 （覆盖索引、最左前缀原则、隐式转换、order by以及group by的优化、join优化）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大分页问题优化（延迟关联、记录上一页最大ID）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据量太大（&lt;strong&gt;分库分表&lt;/strong&gt;、同步到es，用es查询）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;20.代码锁的粒度控制好&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是加锁粒度呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;其实就是就是你要锁住的范围是多大。比如你在家上卫生间，你只要锁住卫生间就可以了吧，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们写代码时，如果不涉及到共享资源，就没有必要锁住的。这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，在业务代码中，有一个ArrayList因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的&lt;code&gt;slowNotShare&lt;/code&gt;方法）不涉及线程安全问题，你会如何加锁呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;//不涉及共享资源的慢方法&lt;br/&gt;private void &lt;span&gt;&lt;span&gt;slowNotShare&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    try {&lt;br/&gt;        TimeUnit.MILLISECONDS.sleep(100);&lt;br/&gt;    } catch (InterruptedException e) {&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//错误的加锁方法&lt;br/&gt;public int &lt;span&gt;&lt;span&gt;wrong&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    long beginTime = System.currentTimeMillis();&lt;br/&gt;    IntStream.rangeClosed(1, 10000).parallel().forEach(i -&amp;gt; {&lt;br/&gt;        //加锁粒度太粗了，slowNotShare其实不涉及共享资源&lt;br/&gt;        synchronized (this) {&lt;br/&gt;            slowNotShare();&lt;br/&gt;            data.add(i);&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;    log.info(&lt;span&gt;&quot;cosume time:{}&quot;&lt;/span&gt;, System.currentTimeMillis() - beginTime);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; data.size();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public int &lt;span&gt;&lt;span&gt;right&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    long beginTime = System.currentTimeMillis();&lt;br/&gt;    IntStream.rangeClosed(1, 10000).parallel().forEach(i -&amp;gt; {&lt;br/&gt;        slowNotShare();//可以不加锁&lt;br/&gt;        //只对List这部分加锁&lt;br/&gt;        synchronized (data) {&lt;br/&gt;            data.add(i);&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;    log.info(&lt;span&gt;&quot;cosume time:{}&quot;&lt;/span&gt;, System.currentTimeMillis() - beginTime);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; data.size();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;21.接口状态和错误需要统一明确&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供必要的接口调用状态信息。比如你的一个转账接口调用是成功、失败、处理中还是受理成功等，需要明确告诉客户端。如果接口失败，那么具体失败的原因是什么。这些必要的信息都必须要告诉给客户端，因此需要定义明确的错误码和对应的描述。同时，尽量对报错信息封装一下，不要把后端的异常信息完全抛出到客户端。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6051282051282051&quot; data-type=&quot;png&quot; data-w=&quot;975&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdzFZ69ufhLVpJa3oxOKUDia0acvqia0GJOCRqKwlRz7qxdibtzrQ7TU4kg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;22.接口要考虑异常处理&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现一个好的接口，离不开优雅的异常处理。对于异常处理，提十个小建议吧：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;尽量不要使用&lt;code&gt;e.printStackTrace()&lt;/code&gt;,而是使用&lt;code&gt;log&lt;/code&gt;打印。因为&lt;code&gt;e.printStackTrace()&lt;/code&gt;语句可能会导致内存占满。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;catch&lt;/code&gt;住异常时，建议打印出具体的&lt;code&gt;exception&lt;/code&gt;，利于更好定位问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不要用一个&lt;code&gt;Exception&lt;/code&gt;捕捉所有可能的异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;记得使用&lt;code&gt;finally&lt;/code&gt;关闭流资源或者直接使用&lt;code&gt;try-with-resource&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;捕获异常与抛出异常必须是完全匹配，或者捕获异常是抛异常的父类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;捕获到的异常，不能忽略它，至少打点日志吧&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意异常对你的代码层次结构的侵染&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自定义封装异常，不要丢弃原始异常的信息&lt;code&gt;Throwable cause&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运行时异常&lt;code&gt;RuntimeException&lt;/code&gt; ，不应该通过&lt;code&gt;catch&lt;/code&gt;的方式来处理，而是先预检查，比如：&lt;code&gt;NullPointerException&lt;/code&gt;处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意异常匹配的顺序，优先捕获具体的异常&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们有兴趣可以看下我之前写的这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488009&amp;amp;idx=1&amp;amp;sn=7c27849c67476143660e3ea0dcdfae3d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Java 异常处理的十个建议&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;23. 优化程序逻辑&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优化程序逻辑这块还是挺重要的，也就是说，你实现的业务代码，&lt;strong&gt;如果是比较复杂的话，建议把注释写清楚&lt;/strong&gt;。还有，代码逻辑尽量清晰，代码尽量高效。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如，你要使用用户信息的属性，你根据session已经获取到&lt;code&gt;userId&lt;/code&gt;了，然后就把用户信息从数据库查询出来，使用完后，后面可能又要用到用户信息的属性，有些小伙伴没想太多，反手就把&lt;code&gt;userId&lt;/code&gt;再传进去，再查一次数据库。。。我在项目中，见过这种代码。。。直接把用户对象传下来不好嘛。。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反例伪代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Response &lt;span&gt;test&lt;/span&gt;(Session session){&lt;br/&gt;    UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(user==null){&lt;br/&gt;       reutrn new Response();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;(session.getUserId());&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;public Response &lt;span&gt;do&lt;/span&gt;(String UserId){&lt;br/&gt;  //多查了一次数据库&lt;br/&gt;  UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;  ......&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; new Response(); &lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public Response &lt;span&gt;test&lt;/span&gt;(Session session){&lt;br/&gt;    UserInfo user = UserDao.queryByUserId(session.getUserId());&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(user==null){&lt;br/&gt;       reutrn new Response();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;(session.getUserId());&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;//直接传UserInfo对象过来即可，不用再多查一次数据库&lt;br/&gt;public Response &lt;span&gt;do&lt;/span&gt;(UserInfo user){&lt;br/&gt;  ......&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; new Response(); &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，这只是一些很小的一个例子，还有很多类似的例子，需要大家开发过程中，多点思考的哈。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;24. 接口实现过程中，注意大文件、大事务、大对象&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;读取大文件时，不要&lt;code&gt;Files.readAllBytes&lt;/code&gt;直接读取到内存，这样会OOM的，建议使用&lt;code&gt;BufferedReader&lt;/code&gt;一行一行来。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大事务可能导致死锁、回滚时间长、主从延迟等问题，开发中尽量避免大事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;注意一些大对象的使用，因为大对象是直接进入老年代的，可能会触发fullGC&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;25. 你的接口，需要考虑限流&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的系统每秒扛住的请求是1000，如果一秒钟来了十万请求呢？换个角度就是说，高并发的时候，流量洪峰来了，超过系统的承载能力，怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不采取措施，所有的请求打过来，系统CPU、内存、Load负载飚的很高，最后请求处理不过来，所有的请求无法正常响应。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种场景，我们可以采用限流方案。就是为了保护系统，多余的请求，直接丢弃。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限流定义：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在计算机网络中，限流就是控制网络接口发送或接收请求的速率，它可防止DoS攻击和限制Web爬虫。限流，也称流量控制。是指系统在面临高并发，或者大流量请求的情况下，限制新的请求对系统的访问，从而保证系统的稳定性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用Guava的&lt;code&gt;RateLimiter&lt;/code&gt;单机版限流，也可以使用&lt;code&gt;Redis&lt;/code&gt;分布式限流，还可以使用阿里开源组件&lt;code&gt;sentinel&lt;/code&gt;限流&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看下我之前这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490393&amp;amp;idx=1&amp;amp;sn=98189caa486406f8fa94d84ba0667604&amp;amp;chksm=cf21c470f8564d665ce04ccb9dc7502633246da87a0541b07ba4ac99423b28ce544cdd6c036b&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;4种经典限流算法讲解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;26.代码实现时，注意运行时异常（比如空指针、下标越界等）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中，我们需要采取措施&lt;strong&gt;规避数组边界溢出，被零整除，空指针&lt;/strong&gt;等运行时错误。类似代码比较常见：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;String name = list.get(1).getName(); //list可能越界，因为不一定有2个元素哈&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应该采取措施，预防一下数组边界溢出。正例如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(CollectionsUtil.isNotEmpty(list)&amp;amp;&amp;amp; list.size()&amp;gt;1){&lt;br/&gt;  String name = list.get(1).getName(); &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.95&quot; data-type=&quot;png&quot; data-w=&quot;280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpd6upNCOzmYTazr6H8pDta2VUJLHq0SMCBFmIBmMVo7hDorrObibK6XYw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;27.保证接口安全性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的API接口是对外提供的，需要保证接口的安全性。保证接口的安全性有&lt;strong&gt;token机制和接口签名&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;token机制身份验证&lt;/strong&gt;方案还比较简单的，就是&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5981481481481481&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdeujCpQs8KLHTQN0sDyqiaRIuMbo71Nh3jOxFnRibvXXNOtb7OaRPaaXg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发起请求，申请获取token。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端生成全局唯一的token，保存到redis中（一般会设置一个过期时间），然后返回给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端带着token，发起请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端去redis确认token是否存在，一般用 redis.del(token)的方式，如果存在会删除成功，即处理业务逻辑，如果删除失败不处理业务逻辑，直接返回结果。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;接口签名&lt;/strong&gt;的方式，就是把接口请求相关信息（请求报文，包括请求时间戳、版本号、appid等），客户端私钥加签，然后服务端用公钥验签，验证通过才认为是合法的、没有被篡改过的请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有关于加签验签的，大家可以看下我这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488022&amp;amp;idx=1&amp;amp;sn=70484a48173d36006c8db1dfb74ab64d&amp;amp;chksm=cf21cd3ff8564429a1205f6c1d78757faae543111c8461d16c71aaee092fe3e0fed870cc5e0e&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;程序员必备基础：加签验签&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了&lt;strong&gt;加签验签和token机制，接口报文一般是要加密的&lt;/strong&gt;。当然，用https协议是会对报文加密的。如果是我们服务层的话，如何加解密呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以参考HTTPS的原理，就是服务端把公钥给客户端，然后客户端生成对称密钥，接着客户端用服务端的公钥加密对称密钥，再发到服务端，服务端用自己的私钥解密，得到客户端的对称密钥。这时候就可以愉快传输报文啦，客户端用&lt;strong&gt;对称密钥加密请求报文&lt;/strong&gt;，&lt;strong&gt;服务端用对应的对称密钥解密报文&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，接口的安全性，还包括&lt;strong&gt;手机号、身份证等信息的脱敏&lt;/strong&gt;。就是说，&lt;strong&gt;用户的隐私数据，不能随便暴露&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;28.分布式事务，如何保证&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;分布式事务：就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。简单来说，分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式事务的几种解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;2PC(二阶段提交)方案、3PC&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCC（Try、Confirm、Cancel）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本地消息表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最大努力通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;seata&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家可以看下这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247498358&amp;amp;idx=1&amp;amp;sn=aa6c7ceb61b73267d68d1b4fb7ccc2ed&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;看一遍就理解：分布式事务详解&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;29. 事务失效的一些经典场景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的接口开发过程中，经常需要使用到事务。所以需要避开事务失效的一些经典场景。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;方法的访问权限必须是public，其他private等权限，事务失效&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法被定义成了final的，这样会导致事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在同一个类中的方法直接内部调用，会导致事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个方法如果没交给spring管理，就不会生成spring事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多线程调用，两个方法不在同一个线程中，获取到的数据库连接不一样的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表的存储引擎不支持事务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果自己try...catch误吞了异常，事务失效。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;错误的传播特性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐大家看下这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247494570&amp;amp;idx=2&amp;amp;sn=17357bcd328b2d1d83f4a72c47daac1b&amp;amp;chksm=cf223483f855bd95351a778d5f48ddd37917ce2790ebbbcd1d6ee4f27f7f4b147f0d41101dcc&amp;amp;token=2044040586&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;聊聊spring事务失效的12种场景，太坑了&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;30. 掌握常用的设计模式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把代码写好，还是需要熟练常用的设计模式，比如策略模式、工厂模式、模板方法模式、观察者模式等等。设计模式，是代码设计经验的总结。使用设计模式可以可重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我之前写过一篇总结工作中常用设计模式的文章，写得挺不错的，大家可以看下：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247495616&amp;amp;idx=1&amp;amp;sn=e74c733d26351eab22646e44ea74d233&amp;amp;chksm=cf2230e9f855b9ffe1ddb9fe15f72a273d5de02ed91cc97f3066d4162af027299718e2bf748e&amp;amp;token=1260947715&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;实战！工作中常用到哪些设计模式&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;31. 写代码时，考虑线性安全问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;strong&gt;高并发&lt;/strong&gt;情况下，&lt;code&gt;HashMap&lt;/code&gt;可能会出现死循环。因为它是非线性安全的，可以考虑使用&lt;code&gt;ConcurrentHashMap&lt;/code&gt;。所以这个也尽量养成习惯，不要上来反手就是一个&lt;code&gt;new HashMap()&lt;/code&gt;;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Hashmap、Arraylist、LinkedList、TreeMap等都是线性不安全的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Vector、Hashtable、ConcurrentHashMap等都是线性安全的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9540540540540541&quot; data-type=&quot;png&quot; data-w=&quot;370&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PoF8jo1PmpwtZZzVTaZ1SJg4ytV0rhpdd0qF9txicn0icllddBtYLr3dMmkM4JXkWgJYFcrguPOs7xOb5Lhv4icqg/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;32.接口定义清晰易懂，命名规范。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们写代码，不仅仅是为了实现当前的功能，也要有利于后面的维护。说到维护，代码不仅仅是写给自己看的，也是给别人看的。所以接口定义要清晰易懂，命名规范。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;33. 接口的版本控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口要做好版本控制。就是说，请求基础报文，应该包含&lt;code&gt;version&lt;/code&gt;接口版本号字段，方便未来做接口兼容。其实这个点也算接口扩展性的一个体现点吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如客户端APP某个功能优化了，新老版本会共存，这时候我们的&lt;code&gt;version&lt;/code&gt;版本号就派上用场了，对&lt;code&gt;version&lt;/code&gt;做升级，做好版本控制。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;34. 注意代码规范问题&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意一些常见的代码坏味道：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;大量重复代码（抽共用方法，设计模式）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法参数过多（可封装成一个DTO对象）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;方法过长（抽小函数）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;判断条件太多（优化if...else）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不处理没用的代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不注重代码格式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免过度设计&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码的坏味道，这里我都写到啦：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247490148&amp;amp;idx=1&amp;amp;sn=00a181bf74313f751b3ea15ebc303545&amp;amp;chksm=cf21c54df8564c5bc5b4600fce46619f175f7ae557956f449629c470a08e20580feef4ea8d53&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;25种代码坏味道总结+优化示例&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;35.保证接口正确性，其实就是保证更少的bug&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;保证接口的正确性，换个角度讲，就是保证更少的bug，甚至是没有bug。所以接口开发完后，一般需要开发&lt;strong&gt;自测一下&lt;/strong&gt;。然后的话，接口的正确还体现在，多线程并发的时候，&lt;strong&gt;保证数据的正确性&lt;/strong&gt;,等等。比如你做一笔转账交易，扣减余额的时候，可以通过CAS乐观锁的方式保证余额扣减正确吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是实现秒杀接口，得防止超卖问题吧。你可以使用Redis分布式锁防止超卖问题。使用Redis分布式锁，有几个注意要点，大家可以看下我之前这篇文章哈：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&amp;amp;mid=2247488142&amp;amp;idx=1&amp;amp;sn=79a304efae7a814b6f71bbbc53810c0c&amp;amp;chksm=cf21cda7f85644b11ff80323defb90193bc1780b45c1c6081f00da85d665fd9eb32cc934b5cf&amp;amp;token=162724582&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;七种方案！探讨Redis分布式锁的正确使用姿势&lt;/a&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;36.学会沟通，跟前端沟通，跟产品沟通&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我把这一点放到最后，学会沟通是非常非常重要的。比如你开发定义接口时，&lt;strong&gt;一定不能上来就自己埋头把接口定义完了&lt;/strong&gt;，&lt;strong&gt;需要跟客户端先对齐接口&lt;/strong&gt;。遇到一些难点时，跟技术leader对齐方案。实现需求的过程中，有什么问题，及时跟产品沟通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之就是，开发接口过程中，一定要沟通好~&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后(求关注，别白嫖我)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，求一键三连：点赞、转发、在看，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>da3ec943998d971aa08f108836f825b6</guid>
<title>[推荐] 性能提升40倍——线上真实重构案例分享</title>
<link>https://toutiao.io/k/izbqpxo</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;写在前面&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章和大家分享一下最近和团队成员一起重构的围栏服务真实案例分享，二话不说，先上图:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49940023990403837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8icZBialGwyfQOtCEAIt7ucMsaldHpic9KLyXMJdH1vZzglibkUzpgXocWJzhvOslmVLHDT3icRm3VXFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2501&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重构前后对比(单台docker服务压测结果)&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;对比项&lt;/th&gt;&lt;th&gt;QPS&lt;/th&gt;&lt;th&gt;平均RT&lt;/th&gt;&lt;th&gt;P995耗时&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;重构前&lt;/td&gt;&lt;td&gt;120&lt;/td&gt;&lt;td&gt;50ms&lt;/td&gt;&lt;td&gt;800ms&lt;/td&gt;&lt;td&gt;压测达到性能瓶颈&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;重构后&lt;/td&gt;&lt;td&gt;5000&lt;/td&gt;&lt;td&gt;5ms&lt;/td&gt;&lt;td&gt;50ms&lt;/td&gt;&lt;td&gt;压测未到达性能瓶颈&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重构之后性能提升40倍，效果非常明显。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面分享详细技术方案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;技术方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、背景/现状&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;多次压测反馈，目前线上机器8台docker大概只能支撑1k/QPS, 单机120/QPS。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;无城市查询围栏场景，会循环判断该业务线下全国的围栏是否命中，耗CPU严重，高峰期性能瓶颈特别明显。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、目标&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;派单围栏服务流程重构，通过派单系统自建空间索引RTree方式， 利用空间换时间的方式，先通过RTree搜索围栏，再判断坐标是否在围栏内。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;现有资源不变情况下，提升接口性能，并且支持水平扩展。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;重构方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;重构前流程图&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.232527759634226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8icZBialGwyfQOtCEAIt7ucMdBVictZiaV3jvHMeJLLumEQoRWAh7f2UZcjwe7frEDWAvtwnjnklsvAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1531&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;重构后流程图&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.46730571722013&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8icZBialGwyfQOtCEAIt7ucMbhDFyCdUplBIy0TgtwRRWBIqcxTcNCpAF2nOayv8gF9jcDjGZenibtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2921&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;RTREE数据结构简介:
每个节点是能把对应的围栏包起来 的最小外包矩形&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9079754601226994&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kulR6Bq67W8icZBialGwyfQOtCEAIt7ucMVEtNwyECqGxRYLbZ7SeXLJ8OAUOEybgCUib5Vl6NEL9YfZ1enmteUfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;489&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、里程碑节点&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;阶段&lt;/th&gt;&lt;th&gt;事项&lt;/th&gt;&lt;th&gt;开发时间&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;开发阶段&lt;/td&gt;&lt;td&gt;1. 围栏系统自建Rtree开发&lt;br/&gt;2. 灰度方案开发(按流量灰度，支持header指定强制走新系统(方便压测)， &lt;br/&gt;3. 数据对比: 通过抓取线上日志，通过流量回放，同时请求新老围栏系统，判断结果是否完全一致。&lt;br/&gt;4. 异常补偿: 强制刷新Rtree接口)&lt;/td&gt;&lt;td&gt;5d&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;测试阶段&lt;/td&gt;&lt;td&gt;由测试同学评估,开发提供影响范围&lt;/td&gt;&lt;td&gt;2d&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;灰度阶段&lt;/td&gt;&lt;td&gt;1. 按流量灰度平滑迁移  2. 压测&lt;/td&gt;&lt;td&gt;5d&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;五、灰度方案&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按接口请求流量灰度&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;一阶段&lt;/th&gt;&lt;th&gt;二阶段【压测】&lt;/th&gt;&lt;th&gt;三阶段&lt;/th&gt;&lt;th&gt;四阶段&lt;/th&gt;&lt;th&gt;阶段&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;万分之一&lt;/td&gt;&lt;td&gt;1%&lt;/td&gt;&lt;td&gt;20%&lt;/td&gt;&lt;td&gt;50%&lt;/td&gt;&lt;td&gt;100%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;六、所需资源&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无需新增资源&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结:&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次重构优化效果很明显，其实改动并不是很大，可见合理的技术方案是非常重要的。作为技术人，我认为写代码是其次的，也是最基本的，除此之外应该多深入思考一下，多问问自己:&quot;这样实现会不会有什么瓶颈？有没有更好的方案？我这样实现之后能不能水平扩展？如果不能，我有什么应对方案？&quot;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，借鉴之前老大说的一句话:&quot;只要人觉得可能出现问题的地方，就一定会出问题！&quot; ，敬畏心也是非常重要的，所以灰度方案，也是非常重要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚接手这个新团队不久，重构之路刚刚启程，这篇文章也是记录一下心路历程，希望对大家也有所感悟和帮助。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                  &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                    &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                  &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                  &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                &lt;/div&gt;
                                              
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a979dde6a234599b29f32e6a6ab09160</guid>
<title>[推荐] 阿里10年沉淀｜那些技术实战中的架构设计方法</title>
<link>https://toutiao.io/k/e9vlh55</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;阿里开发者&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;ali_tech&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;阿里巴巴官方技术号，关于阿里的技术创新均呈现于此。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>eda6d7bfbc43e1c31af61cfd21188a13</guid>
<title>[推荐] 架构师成长路线图</title>
<link>https://toutiao.io/k/27b6p2e</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;成长为软件架构师不是一件容易的事，这篇文章列举了架构师需要学习的技术储备，给出了成为软件架构师的路线图，帮助有志于在架构领域成长的同学可以明确学习的方向。原文：Master Plan for becoming a Software Architect&lt;sup&gt;[1]&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7325714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOlK2Eh3KcickTTicvG6K8SMNa3dFw9yME2YmoXWOfIuXicyodmBegjZJJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;figcaption&gt;Danist Soh@Unsplash&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软件架构师在软件开发团队中扮演着高级的角色，这一角色需要时间和经验的积累，需要跨职能的技能和知识。除了技术方面的挑战，还要求架构师具备良好的社交能力。在开始考虑成为软件架构师的计划之前，我们先来看看典型的软件架构师类型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;解决方案架构师/软件架构师（Solution Architect/Software Architect）&lt;/strong&gt; —— 低级架构师，通常由之前或现在的高级软件工程师担任，负责与业务人员沟通产品的技术设计和架构，开发人员通常都可胜任。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;企业级架构师（Enterprise Architect）&lt;/strong&gt; —— 高级架构师，把控产品“大局”，但很少关注细节。这个职位大多出现在非常复杂的大型软件产品中，有时甚至直接汇报给CTO。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;领域架构师（Domain Architect）&lt;/strong&gt; —— 这是比较流行的软件架构师类型，在很多公司都可以看到。这个职位的目的是成为特定用例或技术栈的架构师。例如:云架构师负责特定的云供应商，数据架构师负责数据库的操作、设计、协调，移动架构师负责软件产品的移动版本，等等等等……&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;业务架构师（Functional Architect）&lt;/strong&gt; —— 这类架构师主要负责业务方面，对技术世界了解较少，大多是经验丰富的业务分析师，设计并领导软件产品的业务逻辑。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以进一步扩展这个列表，每个公司可能对某个特定职位有不同的名称。上述给定的软件架构职位的角色和职责可能因公司而异，但本质是相同的。请看下面的图表，以便更好的理解不同架构师角色在技术/业务技能和知识方面的关系。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7062857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOWNP08NYXDviaKQVKhYuXQicU5eZNkZqPqyBUmI51TUxoK1xx7Q9OjlFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;figcaption&gt;业务与技术关系图&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总体规划&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到目前为止，有一件事应该非常清楚: 除了那些真正来自业务背景的人，软件架构师通常是超级高级开发人员。下面是软件架构师应该熟悉的不同主题领域:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;&lt;strong&gt;数据结构和算法&lt;/strong&gt;&lt;/em&gt; —— 基本的编程原理对软件架构师来说应该不成问题，包括数组、队列、栈、链表、不同类型的树、图等数据结构，软件架构师不仅应该熟悉，而且应该能够识别出在什么时候应该使用哪个数据结构。优秀的软件架构师应该知道不同的算法，如搜索、排序、递归、动态规划等。在日常生活中，没有架构师会从头开始编写“合并排序”算法，或者发明新的数据结构。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3192307692307692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOsUbpUj56hfhd0IVmdx9zkRPwy6cpVOyVRic9iboeZlkfHRWDbrhlHbibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;figcaption&gt;算法导论&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;《算法导论》是一本全方位介绍算法和数据结构的经典作品。&lt;/p&gt;&lt;section&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-goodssouce=&quot;0&quot; data-templateid=&quot;list&quot; data-pid=&quot;11144230&quot; data-appuin=&quot;3208869061&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:3,&amp;quot;pid&amp;quot;:&amp;quot;11144230&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;9133fd3c-a2e9-4196-83b3-f6d757461ee8&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;sku_id&amp;quot;:&amp;quot;11144230&amp;quot;,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;source_logo&amp;quot;:&amp;quot;http://mmbiz.qpic.cn/mmbiz_png/iaTN9c8XhrVwaSjUy7F9iaXoleXjq0kgwuyFqajcYDD6s920hhjjs8tFEmc6q6VrL5jv7pQicGm0nKlmsMx74JkUg/0&amp;quot;,&amp;quot;main_img&amp;quot;:&amp;quot;https://res.wx.qq.com/product_material/R6WVe2d5yftvZK8027QTiqCIpKMLTKkYyZNKkDF3VdUEj6BcweonfpGub4IxVjRA&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;算法导论（原书第3版）/计算机科学丛书&amp;quot;,&amp;quot;current_price&amp;quot;:8830,&amp;quot;first_category_id&amp;quot;:3,&amp;quot;movie&amp;quot;:{&amp;quot;en_name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt_name&amp;quot;:[],&amp;quot;director&amp;quot;:[],&amp;quot;actor&amp;quot;:[],&amp;quot;movie_len&amp;quot;:0,&amp;quot;rating&amp;quot;:0,&amp;quot;release_time&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;classify&amp;quot;:[]},&amp;quot;book&amp;quot;:{&amp;quot;book_desc&amp;quot;:&amp;quot;&amp;lt;p&amp;gt;　　在有关算法的书中，有一些叙述非常严谨，但不够全面;另一些涉及了大量的题材，但又缺乏严谨性。《算法导论（原书第3版）/计算机科学丛书》将严谨性和全面性融为一体，深入讨论各类算法，并着力使这些算法的设计和分析能为各个层次的读者接受。全书各章自成体系，可以作为独立的学习单元;算法以英语和伪代码的形式描述，具备初步程序设计经验的人就能看懂;说明和解释力求浅显易懂，不失深度和数学严谨性。&amp;lt;br /&amp;gt;　　《算法导论（原书第3版）/计算机科学丛书》全书选材经典、内容丰富、结构合理、逻辑清晰，对本科生的数据结构课程和研究生的算法课程都是非常实用的教材，在IT专业人员的职业生涯中，《算法导论（原书第3版）/计算机科学丛书》�......&amp;quot;,&amp;quot;author&amp;quot;:[&amp;quot;[美]Thomas H.Cormen，[美]Charles E.Leiserson，[美]Ronald L.Rivest，[美]Clifford Stein&amp;quot;],&amp;quot;publisher&amp;quot;:&amp;quot;机械工业出版社&amp;quot;},&amp;quot;appuin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:0}&quot;/&gt;&lt;/section&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;&lt;strong&gt;技术栈&lt;/strong&gt;&lt;/em&gt; —— 无论是后端还是前端，软件架构师必须非常了解当前使用的技术栈。学习特定编程语言的语法是最简单的方法，但需要时间积累经验。不同的库和框架也是值得了解的宝贵资产。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3359375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOqNF4rdtkIDBtXWp79EZibUt9q5sibOxMibIfLlbUpFfwywRicia3xJs04rA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;figcaption&gt;代码整洁之道&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;简洁的编码&lt;/strong&gt;&lt;/em&gt; —— 让软件系统工作并不是软件架构师的最终目标。每次评审代码时，他/她首先想到的问题是: 我能使这段代码更高效吗? 我能让代码占用更少内存吗? 简洁的代码标准是否被正确应用? 我可以使用不同的OOP技术吗? 《代码整洁之道》无疑可以帮助我们提高重构技能。&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-goodssouce=&quot;0&quot; data-templateid=&quot;list&quot; data-pid=&quot;24035493&quot; data-appuin=&quot;3084391334&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:3,&amp;quot;pid&amp;quot;:&amp;quot;24035493&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3084391334&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;b872fac8-70e0-4945-a614-8eb04a6ef73a&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;sku_id&amp;quot;:&amp;quot;24035493&amp;quot;,&amp;quot;source_name&amp;quot;:&amp;quot;当当&amp;quot;,&amp;quot;source_logo&amp;quot;:&amp;quot;http://mmbiz.qpic.cn/mmbiz_png/6nVmK0mHaRr8fd8C4yNUm5BrcwmJ17I867w7sZwrxtAmG0NdTKhZj8eAEeRt0Ycgc9pnL4ib77PJ0UKDoT43MsA/0&amp;quot;,&amp;quot;main_img&amp;quot;:&amp;quot;https://res.wx.qq.com/product_material/NKOm4S2lp0v7QToNz6YT6g5cqXkSuAnxabnGBtnCU6fBxAhd3Pm78xBDPc5hn5UU&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;代码整洁之道 程序员的职业素养&amp;quot;,&amp;quot;current_price&amp;quot;:4690,&amp;quot;first_category_id&amp;quot;:3,&amp;quot;movie&amp;quot;:{&amp;quot;en_name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt_name&amp;quot;:[],&amp;quot;director&amp;quot;:[],&amp;quot;actor&amp;quot;:[],&amp;quot;movie_len&amp;quot;:0,&amp;quot;rating&amp;quot;:0,&amp;quot;release_time&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;classify&amp;quot;:[]},&amp;quot;book&amp;quot;:{&amp;quot;book_desc&amp;quot;:&amp;quot;&amp;lt;p&amp;gt;本书是编程大师&amp;amp;ldquo;Bob 大叔&amp;amp;rdquo;40余年编程生涯的心得体会的总结，讲解要成为真正专业的程序员需要具备什么样的态度，需要遵循什么样的原则，需要采取什么样的行动。作者以自己以及身边的同事走过的弯路、犯过的错误为例，意在为后来者引路，助其职业生涯迈上更高台阶。&amp;lt;/p&amp;gt;&amp;quot;,&amp;quot;author&amp;quot;:[&amp;quot;[美]罗伯特 C. 马丁（Robert C. Martin）&amp;quot;],&amp;quot;publisher&amp;quot;:&amp;quot;人民邮电出版社&amp;quot;},&amp;quot;appuin&amp;quot;:&amp;quot;3084391334&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:0}&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;OOP&lt;/strong&gt;&lt;/em&gt; —— 面向对象编程帮助我们可以构建更灵活、高效、可读性高的软件系统。有经验的软件架构师会经常使用这些技术(如果技术堆栈合适……)。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.238532110091743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfO9lyXVwhia1P0dNsrDbx4RsMQ17fPyWshtzicxXysCC4yffAtV1JmJ9sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;218&quot;/&gt;&lt;figcaption&gt;设计模式&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;&lt;strong&gt;软件设计模式&lt;/strong&gt;&lt;/em&gt; —— 说到面向对象，不应该忘记不同的设计模式的重要性，它们首先是由GoF&lt;sup&gt;[2]&lt;/sup&gt;收集和引入的。了解这些设计模式肯定会帮助我们更好的利用软件系统的面向对象设计。&lt;/section&gt;&lt;section&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-goodssouce=&quot;0&quot; data-templateid=&quot;list&quot; data-pid=&quot;13643482&quot; data-appuin=&quot;3208869061&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:3,&amp;quot;pid&amp;quot;:&amp;quot;13643482&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;d674a4f8-adc3-41bd-b4c5-79a361679110&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;sku_id&amp;quot;:&amp;quot;13643482&amp;quot;,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;source_logo&amp;quot;:&amp;quot;http://mmbiz.qpic.cn/mmbiz_png/iaTN9c8XhrVwaSjUy7F9iaXoleXjq0kgwuyFqajcYDD6s920hhjjs8tFEmc6q6VrL5jv7pQicGm0nKlmsMx74JkUg/0&amp;quot;,&amp;quot;main_img&amp;quot;:&amp;quot;https://res.wx.qq.com/product_material/gdgvc6hmAZ7QaTbHwQBamcUGTlHgvUImlXWLMwZ6LepQpA2QrttpheHPra7Z1dCx&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;设计模式：可复用面向对象软件的基础（典藏版）&amp;quot;,&amp;quot;current_price&amp;quot;:6510,&amp;quot;first_category_id&amp;quot;:3,&amp;quot;movie&amp;quot;:{&amp;quot;en_name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt_name&amp;quot;:[],&amp;quot;director&amp;quot;:[],&amp;quot;actor&amp;quot;:[],&amp;quot;movie_len&amp;quot;:0,&amp;quot;rating&amp;quot;:0,&amp;quot;release_time&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;classify&amp;quot;:[]},&amp;quot;book&amp;quot;:{&amp;quot;book_desc&amp;quot;:&amp;quot;本书结合设计实例从面向对象的设计中精选出23个设计模式, 总结了面向对象设计中*有价值的经验, 并且用简洁可复用的形式表达出来。本书分类描述了一组设计良好、 表达清楚的软件设计模式, 这些模式在实用环境下特别有用。 本书适合大学计算机专业的学生、研究生及相关人员参考。&amp;quot;,&amp;quot;author&amp;quot;:[&amp;quot;[美]埃里克·伽玛（Erich Gamma），等&amp;quot;],&amp;quot;publisher&amp;quot;:&amp;quot;机械工业出版社&amp;quot;},&amp;quot;appuin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:0}&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2863636363636364&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOia0tOJ0fVcTL9926UicszMd3NSIlRryzbI0e7FhibibHEpUKLQqEvFGsSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;220&quot;/&gt;&lt;figcaption&gt;架构整洁之道&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从R.C.Martins的著作《架构整洁之道》中可以学到如下原则。&lt;/p&gt;&lt;section&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-goodssouce=&quot;0&quot; data-templateid=&quot;list&quot; data-pid=&quot;13090297&quot; data-appuin=&quot;3208869061&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:3,&amp;quot;pid&amp;quot;:&amp;quot;13090297&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;c54ccafc-9eb8-4e9a-937a-dae2b929f78d&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;sku_id&amp;quot;:&amp;quot;13090297&amp;quot;,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;source_logo&amp;quot;:&amp;quot;http://mmbiz.qpic.cn/mmbiz_png/iaTN9c8XhrVwaSjUy7F9iaXoleXjq0kgwuyFqajcYDD6s920hhjjs8tFEmc6q6VrL5jv7pQicGm0nKlmsMx74JkUg/0&amp;quot;,&amp;quot;main_img&amp;quot;:&amp;quot;https://res.wx.qq.com/product_material/rK2n1eFSML0ZRNu8jsu5TAD8l8Ff8M1cSw8T4CyKEn6M2k9NdKxC_XNTJcRs45V3&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;架构整洁之道(博文视点出品)&amp;quot;,&amp;quot;current_price&amp;quot;:8290,&amp;quot;first_category_id&amp;quot;:3,&amp;quot;movie&amp;quot;:{&amp;quot;en_name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt_name&amp;quot;:[],&amp;quot;director&amp;quot;:[],&amp;quot;actor&amp;quot;:[],&amp;quot;movie_len&amp;quot;:0,&amp;quot;rating&amp;quot;:0,&amp;quot;release_time&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;classify&amp;quot;:[]},&amp;quot;book&amp;quot;:{&amp;quot;book_desc&amp;quot;:&amp;quot;&amp;lt;p&amp;gt;《架构整洁之道》是创造“Clean神话”的Bob大叔在架构领域的登峰之作，围绕“架构整洁”这一重要导向，系统地剖析其缘起、内涵及应用场景，涵盖软件研发完整过程及所有核心架构模式。《架构整洁之道》分为6部分，第1部分纲领性地提出软件架构设计的终目标，描述软件架构设计的重点与模式;第2~4部分从软件开发中三个基础编程范式的定义和特征出发，进一步描述函数、组件、服务设计与实现的定律，以及它们是如何有效构建软件系统的整体架构的;第5部分从整洁架构的定义开始，详细阐述软件架构设计过程中涉及的方方面面，包括划分内部组件边界、应用常见设计模式、避开错误、降低成本、处理特殊情况等，并以实战案例将内容有机整合起来;第6部分讲述具......&amp;quot;,&amp;quot;author&amp;quot;:[&amp;quot;[美]Robert C. Martin（罗伯特C.马丁）&amp;quot;],&amp;quot;publisher&amp;quot;:&amp;quot;电子工业出版社&amp;quot;},&amp;quot;appuin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:0}&quot;/&gt;&lt;/section&gt;&lt;ol start=&quot;6&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;S.O.L.I.D.原则&lt;/strong&gt;&lt;/em&gt; —— 这一组件原则是软件组件设计中需要考虑的基本技术。有经验的软件架构师如果掌握了这些原则，可以很快识别出代码中的违规行为。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;高内聚/低耦合原则&lt;/strong&gt;&lt;/em&gt; —— REP、CRP、ADP等原则对于软件架构师来说非常重要，尤其是在构建、整合/解耦插件时，这些技术可以处理更高级的设计。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4702970297029703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9utHkjMdE0UiaAiay7NGBVlPvLibaL9yLfOkcNFYbPxywghXNU8ZGInhp5svoFMYf6fcoWjItYRCVVpNMic7zQglug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;202&quot;/&gt;&lt;figcaption&gt;软件构架实践&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol start=&quot;8&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;系统设计&lt;/strong&gt;&lt;/em&gt; —— 有很多软件体系架构模式，如:主从、客户端-服务器、微服务、MVC、单向体系架构等，需要根据不同的前后端项目做出选择。当然不太可能有人能够掌握所有这些模式，但是根据项目的不同，软件架构师应该精通底层设计，领域驱动设计可以作为最基本的出发点。&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;mpcps class=&quot;js_editor_new_cps&quot; data-goodssouce=&quot;0&quot; data-templateid=&quot;list&quot; data-pid=&quot;13067151&quot; data-appuin=&quot;3208869061&quot; data-buffer=&quot;{&amp;quot;category_id&amp;quot;:3,&amp;quot;pid&amp;quot;:&amp;quot;13067151&amp;quot;,&amp;quot;biz_uin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;trace_id&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;audit_state&amp;quot;:1,&amp;quot;sku_id&amp;quot;:&amp;quot;13067151&amp;quot;,&amp;quot;source_name&amp;quot;:&amp;quot;京东&amp;quot;,&amp;quot;source_logo&amp;quot;:&amp;quot;http://mmbiz.qpic.cn/mmbiz_png/iaTN9c8XhrVwaSjUy7F9iaXoleXjq0kgwuyFqajcYDD6s920hhjjs8tFEmc6q6VrL5jv7pQicGm0nKlmsMx74JkUg/0&amp;quot;,&amp;quot;main_img&amp;quot;:&amp;quot;https://res.wx.qq.com/product_material/PszMlHC24CEx6-v4HbQhNTBHiGbQXU6UtrhFlsIsR7Cd5JBJtDVPhb2AqsEIcIAE&amp;quot;,&amp;quot;product_name&amp;quot;:&amp;quot;软件架构实践（英文版·原书第4版）&amp;quot;,&amp;quot;current_price&amp;quot;:9590,&amp;quot;first_category_id&amp;quot;:3,&amp;quot;movie&amp;quot;:{&amp;quot;en_name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;alt_name&amp;quot;:[],&amp;quot;director&amp;quot;:[],&amp;quot;actor&amp;quot;:[],&amp;quot;movie_len&amp;quot;:0,&amp;quot;rating&amp;quot;:0,&amp;quot;release_time&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;classify&amp;quot;:[]},&amp;quot;book&amp;quot;:{&amp;quot;book_desc&amp;quot;:&amp;quot;　　《软件架构实践（英文版·原书第4版）》着重讨论以下核心内容，并层层递进，逐步深入。&amp;lt;br&amp;gt;　　首先解释了什么是软件架构，为什么它很重要，以及如何以规范和有效的方式设计、实现、分析、演进和管理它。&amp;lt;br&amp;gt;　　其次系统阐述如何使用架构来应对需求和系统规模的加速增长，以及如何管理新增的质量属性。&amp;lt;br&amp;gt;　　最后讲解如何利用架构优化关键质量属性（包括性能、可修改性、防护性、可用性、互操作性、可测试性、易用性、可部署性等），如何管理和优化现有架构，如何将它们用于解决新问题并构建成可作为战略资产的可重用架构。&amp;lt;br&amp;gt;　　自第3版出版以来，计算机领域发生了很大变化。一些之前没有被考虑的质量属性在许多架构师的日常实践中变得重要。�............&amp;quot;,&amp;quot;author&amp;quot;:[&amp;quot;[美]伦·巴斯，[美]保罗·克莱门茨，[美]瑞克·凯兹曼&amp;quot;],&amp;quot;publisher&amp;quot;:&amp;quot;机械工业出版社&amp;quot;},&amp;quot;appuin&amp;quot;:&amp;quot;3208869061&amp;quot;,&amp;quot;isNewCpsKOL&amp;quot;:0}&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;文档&lt;/strong&gt;&lt;/em&gt; —— 这是软件架构师日常工作中的重要环节。绘制不同的UML图，ARC42文档是这个职位不可避免的工作。这方面有很多工具，如:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;draw.io&lt;sup&gt;[3]&lt;/sup&gt; —— 简单易用的免费工具&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PlantUML&lt;sup&gt;[4]&lt;/sup&gt; —— 提供Eclipse、Intellij等IDE插件，可以通过脚本绘图，非常有用，也是我最喜欢的工具。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;yEd&lt;sup&gt;[5]&lt;/sup&gt; —— 很方便的工具，可作为桌面应用程序运行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MS Visio&lt;sup&gt;[6]&lt;/sup&gt; —— 拥有丰富的功能，但不是免费的!&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;10&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;em&gt;&lt;strong&gt;证书&lt;/strong&gt;&lt;/em&gt; —— 对于软件架构师来说，没有太多的认证选择，但国际软件架构资格认证委员会(iSAQB®)提供了&lt;em&gt;Certified Professional for Software Architecture&lt;/em&gt;(CPSA®)认证计划，该认证得到全球认可。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如从上面的列表中可以看到的那样，成为软件架构师需要付出时间和精力，但这绝对是可行并且值得的:)。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要了解更多软件架构方面的主题，请参阅下面的列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;相关文章：&lt;/em&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Software Architecture Patterns for Front-End Development&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Software Architecture Cheat Sheet for Daily Usage&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;How to apply Component Cohesion Principles to Spring Boot Application&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;How to apply SOLID Software Design Principles to Spring Boot Application&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br/&gt;[1] Master Plan for becoming a Software Architect: https://azeynalli1990.medium.com/master-plan-for-becoming-a-software-architect-be7ba13f0999 &lt;br/&gt;[2] Design Patterns: https://en.wikipedia.org/wiki/Design_Patterns &lt;br/&gt;[3] draw.io: https://draw.io &lt;br/&gt;[4] PlantUML: https://plantuml.com/ &lt;br/&gt;[5] yEd: https://www.yworks.com/products/yed &lt;br/&gt;[6] MS Visio: https://www.microsoft.com/en-ww/microsoft-365/visio/flowchart-software &lt;br/&gt;[7] Software Architecture Patterns for Front-End Development: https://azeynalli1990.medium.com/software-architecture-patterns-for-front-end-development-9e43e43cdfb3 &lt;br/&gt;[8] Software Architecture Cheat Sheet for Daily Usage: https://azeynalli1990.medium.com/software-architecture-cheat-sheet-for-daily-usage-9923922ea75b &lt;br/&gt;[9] How to apply Component Cohesion Principles to Spring Boot Application: https://azeynalli1990.medium.com/how-to-apply-component-cohesion-principles-to-spring-boot-application-12d932be7282 &lt;br/&gt;[10] How to apply SOLID Software Design Principles to Spring Boot Application: https://medium.com/geekculture/how-to-apply-solid-software-design-principles-to-spring-boot-application-part-1-6b886f6d943e&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d40b16b238b368bdc17fe89c0f55851d</guid>
<title>[推荐] 不可错过的程序员续命科技</title>
<link>https://toutiao.io/k/wooq1pu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-背景&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#背景&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;背景&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;去年 5 月曾经写了一篇文章介绍了下 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/371254789&quot; rel=&quot;nofollow&quot;&gt;Lex Fridman 大佬的日常生活安排&lt;/a&gt;，后续我也根据他的方法对自己的日常生活做了一系列规范和改进。这一年整体实行下来，效果还是非常显著的，本文的最后会对我的一些实践以及借助的工具做一些分享。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;最近几个月，偶然在油管上看到了个 &lt;a href=&quot;https://youtu.be/2ekdc6jCu2E&quot; rel=&quot;nofollow&quot;&gt;Rich Roll 采访 Andrew Huberman 的 podcast&lt;/a&gt;，介绍了如何提升我们日常工作，学习表现的相关神经科学原理与可以利用的“工具”，瞬间打开了一扇新世界的大门。后续又一连追了好几集 Huberman 自己的 podcast，从各个方面了解了一下跟我们日常生活，健康，学习，工作，锻炼等方面相关的知识。与其它很多讲“养生”的文章和视频最大的区别在于，Huberman 本身是斯坦福的神经科学教授，其中讲述的内容都是&lt;strong&gt;来自于高质量，peer reviewed 的科学研究成果&lt;/strong&gt;，从机体工作原理出发，非常细致的介绍了相关的实验和结论，并给出了很多实操建议（很多都是零成本，不是搞推销的……）。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;通过一系列的学习，逐渐有种学习了各种人类的“组成和操作原理”的感觉。通过一系列的工具和实践，我们也可以&lt;strong&gt;像调优软件程序那样来“调优”我们自身的人体系统&lt;/strong&gt;。这篇文章就来介绍一些相关的知识内容。注意，原版的 podcast 中有非常多专业性的阐述，在这篇文章中基本都去掉了，尽量以故事性的描述来讲解，相对会比较好理解。当然准确性也会因此有所下降，如果希望获取更专业的内容，强烈建议观看 &lt;a href=&quot;https://hubermanlab.com/&quot; rel=&quot;nofollow&quot;&gt;原版的 podcast 内容&lt;/a&gt;。&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-睡眠&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#睡眠&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;睡眠&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;如果你想要获得健康，更好的工作学习状态，提升生理健康如免疫，新陈代谢，以及心理健康如更好的心情，专注能力等，最最重要的前提是拥有一个良好的睡眠。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-原理&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#原理&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;原理&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;睡眠最重要的控制机理是我们内在的生物钟。随着生物钟的影响，我们体内的各类化学物质会发生变化，体温也随之改变，会影响我们的各种内在状态和外在行为。Huberman 教授很形象的描述了这个“生物钟”的具体作用方式：在早上，身体释放的皮质醇（cortisol）和肾上腺素（aderenaline）会让我们醒来，同时还会设定松果体释放褪黑素的倒计时钟，会在十多个小时之后让我们感到困意再次入睡。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;影响这个生物钟的最大因素是光照。我们的眼睛除了能够看到东西，另外一个重大的作用就是&lt;strong&gt;通过黑视素神经节细胞来接收光照信息，用以设定我们的内在生物钟&lt;/strong&gt;。这也是为什么有时候我们通宵工作之后，虽然已经持续很久时间没有睡眠了，但随着太阳升起，整体的生物钟被设定到了类似起床时的状态，各类化学物质的释放会让我们突然感觉又有精神了。后续很多最佳实践里也都跟这个原理相关，我们需要控制自己接收光照的时间点，类型和时长。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;此外，&lt;strong&gt;体温也是一个用于控制我们生物钟的手段&lt;/strong&gt;。一般来说我们的体温会从深睡眠中比较低的状态逐渐升高，到醒来后持续上升。到了一天的后半段会开始逐渐下降，直到再次进入睡眠。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-实践&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#实践&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;实践&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;基于上面的原理，Huberman 教授提供了一系列提升睡眠的最佳实践：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;皮质醇的释放与接触阳光有关，因此如果想尽快醒来且保持日间良好的精神状态，&lt;strong&gt;起床后应该到外面去接触阳光，持续 2-10 分钟&lt;/strong&gt;。这对于血压控制，心理状态，设定睡眠的“倒计时钟”等都有很大好处。户外日光的效果最好，如果是人造光源，蓝光的效果会比较好，且最好是上部（天空的位置）的光源。根据光照强度推算，隔着窗户接收日光的强度会降低 50%以上，而达到同样效果所需要的光照时间则需要 50 到 100 倍。有意思的是，这一点对于视障人士也有效，因为前面提到的黑视素神经节细胞并不是用于视觉成像的细胞。&lt;/li&gt;
&lt;li&gt;对应的，&lt;strong&gt;在晚上要尽量减少光源的接触&lt;/strong&gt;，因为这会扰乱我们的生物钟，让身体系统误以为是在白天。尤其是晚上 11 点到次日凌晨 4 点之间接收光源，会抑制后续几天的多巴胺的释放，影响心情，心理健康，专注度，学习能力，新陈代谢等等。关于多巴胺的作用和机理，后面会再单独介绍。&lt;/li&gt;
&lt;li&gt;如果不可避免需要在晚上接触光源，处于较低位置，暗淡的红光，蜡烛之类的会相对好一些。如果要看电脑，建议使用 blue blockers 眼镜，这跟一些电脑软件会自动调节屏幕色温的效果可能类似。&lt;/li&gt;
&lt;li&gt;傍晚观察落日，对于后续入睡也有帮助，甚至能减轻晚上摄入光照的负面影响，有点神奇。&lt;/li&gt;
&lt;li&gt;人一天中的精神状态一般会在中间有个短暂的低谷，所以午睡对于有些人可能是有帮助的。也可以用一些其它的非睡眠深度休息的方式来替代，如 &lt;a href=&quot;https://youtu.be/M0u9GST_j3s&quot; rel=&quot;nofollow&quot;&gt;Yoga Nidra&lt;/a&gt;，冥想，自我催眠（可以利用一些 App）等。&lt;/li&gt;
&lt;li&gt;体温对生物钟周期的影响：
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;早上洗冷水澡，会让人快速升温，从而把睡眠周期往前移（早起）。&lt;/li&gt;
&lt;li&gt;晚上锻炼身体，会让人保持高体温，从而延后周期（晚睡）。&lt;/li&gt;
&lt;li&gt;可以选购一些自动控制体温的智能床垫来提升睡眠质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般建议的锻炼时间：醒来后 30 分钟，3 小时和 11 小时这三个时间点。不过总体来看好像影响度比较小。&lt;/li&gt;
&lt;li&gt;饮食和药物因素：
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;咖啡因会占据腺苷（adenosine）的受体，阻断入睡的信号。有不少文章都提到中午之后尽量不要喝咖啡，但 Huberman 表示没有科学实验表明咖啡因对所有人的效果是一样的，得根据自己的测试情况来。比如他自己在下午 5 点喝咖啡也能正常入睡。&lt;/li&gt;
&lt;li&gt;镁，对入睡有帮助。&lt;/li&gt;
&lt;li&gt;芹黄素也能帮助入睡，但要注意对雌性激素的影响。&lt;/li&gt;
&lt;li&gt;建议不要摄入太多牛磺酸。&lt;/li&gt;
&lt;li&gt;不建议通过摄入褪黑素来帮助入睡，褪黑素药物本身的规格把控不严格，且褪黑素容易引起抑郁情绪。&lt;/li&gt;
&lt;li&gt;中午可以吃低卡路里以及含酪氨酸的食物，如坚果，大豆，部分蔬菜等，提升多巴胺，肾上腺素，保持清醒。&lt;/li&gt;
&lt;li&gt;晚上则可以吃点淀粉，白肉等富含色氨酸的食物，进而转化为血清素，会让人更加平静，容易入睡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于绝大多数人，6-8 小时的睡眠时长是比较健康的。&lt;/li&gt;
&lt;li&gt;对于各类药物的检索可以参考：&lt;a href=&quot;https://examine.com/&quot; rel=&quot;nofollow&quot;&gt;examine.com&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-饮食&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#饮食&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;饮食&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;在前面 Lex 的分享中，提到了他采取了生酮饮食以及 fasting（禁食）的习惯，这引起了我对于饮食习惯的注意。Huberman 教授正好也有几个 podcast 介绍了 fasting，肠道健康等话题，很有意思。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-fasting-的背景&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#fasting-的背景&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Fasting 的背景&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;我们可以把身体跟进食相关的化学状态分成 2 类：&lt;/p&gt;
&lt;ol dir=&quot;auto&quot;&gt;
&lt;li&gt;吃饱了的状态，也就是血糖含量较高的状态。此时我们身体会更活跃的进行体内细胞的复制与成长。&lt;/li&gt;
&lt;li&gt;禁食的状态，也就是血糖含量较低的状态。此时我们的身体会更活跃的进行体内细胞的修复与清理（autophagic）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p dir=&quot;auto&quot;&gt;由于睡眠时我们天然是不吃东西的，所以一般来说睡眠中的一部分时间会使我们处于禁食状态，饮食时间的选择实际上就是在控制上述两个状态的持续时间和平衡关系。比较有意思的是世界上很多民族文化和宗教中，都有一些跟禁食相关的习俗，甚至会持续很多天。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;在 2012 年，科学家开始对小白鼠做实验，把他们分成两大组，一组可以在一天中的任何时间吃东西，而另一组只能在固定的 8 小时里吃东西。在大组里再区分小组，给小白鼠吃健康的和不健康的食物。结果发现，只能在 8 小时里吃东西的小白鼠们，即使吃的是不健康的高脂肪食物，他们的健康水平仍然得到了保持甚至提高，相比所有不做限制的组都有明显的提升。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;这个研究震动了学术界，后续又有非常多的针对人类，不同性别，不同年龄，不同职业（包括运动员）的各种实验与论文发表，科学家们发现这种&lt;strong&gt;间歇性禁食状态对于身体有非常多的好处&lt;/strong&gt;，包括：促进肝脏健康，胆汁酸代谢，炎症自愈，保持体重，提升 brown fat 储备（对健康有益），防止非酒精性脂肪肝，血糖控制，肠道健康等等。如果养成间歇性禁食的习惯 60 天以上，还会让我们的身体倾向于代谢脂肪来供能，控制体重。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;因此，Huberman 教授指出，&lt;strong&gt;何时进食，与吃什么东西，其实是同等重要的&lt;/strong&gt;。这个研究也让很多学术界的研究人员自己也都养成了 fasting 的习惯，包括 Huberman 自己。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-fasting-的实践&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#fasting-的实践&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;Fasting 的实践&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;由于长时间的禁食难度较大，所以绝大多数的研究都专注于间歇性禁食，也就是 time restricted feeding。简单来说就是跟前面的小白鼠实验一样，在一天的固定时间段来吃东西（跟睡眠周期对齐），而其它时间段都不摄入任何食物的做法。这里简单整理为基础和高阶两个版本：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;基础：如果想享受 fasting 的基础收益，最简单的执行原则是&lt;strong&gt;起床后至少 1 小时内不要吃东西，同时睡前的 2-3 小时不要吃任何东西&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;高阶：目前研究结果中&lt;strong&gt;最理想的进食窗口是 8 小时&lt;/strong&gt;，结合社会习俗等，一般比较合理的时间在 10-18 点或 12-20 点的范围。看起来&lt;strong&gt;不吃早饭并不是什么坏事&lt;/strong&gt; :)&lt;/li&gt;
&lt;li&gt;作者特地温馨提醒，如果想通过健身来增肌，建议可以把这个时间窗口往前移，因为早上摄入蛋白质会对肌肉增长有益。而健身的时间可以自由选择。&lt;/li&gt;
&lt;li&gt;尽量&lt;strong&gt;保证这个窗口时间的稳定性&lt;/strong&gt;，也非常重要。否则就跟频繁倒时差产生的效果差不多，会打不少收益折扣。&lt;/li&gt;
&lt;li&gt;如果想尝试高阶 fasting，建议逐渐切换进食习惯，例如每两天缩短 1 小时的进食窗口，逐渐达到理想的 8 小时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;值得注意的是，这里说的不吃任何东西，并不是说连水也不能喝。从前面的背景可以看到，是否处于禁食状态，主要依据是血糖水平，因此：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;喝水，茶，咖啡（不加牛奶）等，并不会中断禁食。但一勺糖的摄入就会中断。&lt;/li&gt;
&lt;li&gt;晚饭后想尽快进入禁食状态，可以做一些轻量运动，比如散步等，加快血糖清理。&lt;/li&gt;
&lt;li&gt;二甲双胍，黄连素（berberine）等可以直接促进血糖清理。肉桂皮，柠檬汁，也能轻微降低血糖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;最后，如果禁食期间觉得有些头晕，颤抖，并不需要立刻进食或摄入糖分。可以喝一点盐水（可以加柠檬汁），一般就能很好的缓解症状。这让我想起 Lex 会提到了会服用药片来补充各种电解质元素，比如钠，镁，钾等。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-饮食与消化道健康&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#饮食与消化道健康&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;饮食与消化道健康&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;由于我个人的肠胃功能比较差，所以也特别关注了一下消化道健康的话题。Huberman 邀请了一位非常知名的微生物学家 Sonnenburg 来介绍肠胃微生物群落与我们的健康之间的关系，也是学到了很多新的知识：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;肠道的微生物群不仅影响消化系统的健康运作，&lt;strong&gt;对人体的免疫系统也起到了非常关键的因素&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;婴儿出生，成长的方式会形成非常不同的肠道菌群生态。暴露在微生物环境中（但要注意会引起疾病的情况），对于维持菌群环境是有益的，比如家里养宠物，让孩子自由玩耍等，不需要过度清洁与消毒。&lt;/li&gt;
&lt;li&gt;什么是健康的肠道菌群生态，目前没有一个标准的结论。不过总体来看，&lt;strong&gt;菌群的多样性程度高，一般就表示更加健康&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;抗生素会严重破坏肠道菌群生态，需要谨慎使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;在访谈中，两位重点讨论了一个实验，就是什么样的饮食方式会让我们更好的维持肠道菌群的多样性和健康。实验主要对比了两种附加饮食：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;高纤维食物：全谷类，豆类，蔬菜，坚果。这也是传统上被认为非常健康的食物，其中很多纤维的分解都需要肠道菌群的帮助，换句话说，纤维就是它们的“食物”。&lt;/li&gt;
&lt;li&gt;发酵类食物：酸奶，牛奶酒（kefir），康普茶，酸菜，泡菜，纳豆等。注意需要是自然发酵，一般是冷藏且非罐装的食品。而且像酸奶这类要格外注意不要加糖等添加剂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;实验的结果也颇令人意外：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;摄入发酵类食品的组，显著提升了肠道菌群的多样性。被试者&lt;strong&gt;几十个免疫标志物的显著降低，对各类炎症都有更好的抑制作用&lt;/strong&gt;。没想到吧，肠道菌群还能调节炎症。&lt;/li&gt;
&lt;li&gt;肠道菌群本来的多样化程度比较高的人，摄入高纤维食物是有帮助的。如果不是，则摄入高纤维食物的帮助不大。在工业化进程中，人类的进食习惯已经有很多代都转变为了摄入大量肉类，加工食品等，肠道菌群的生态无法仅通过提高纤维食物的量来改变其族群结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;此外在访谈中，两位还讨论了具体食谱推荐的问题，引用了 &lt;a href=&quot;https://youtu.be/sJLK3sVexIk&quot; rel=&quot;nofollow&quot;&gt;Christopher Gardner 关于生酮饮食与地中海饮食比较的研究&lt;/a&gt;。这里总结一下实践建议：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;strong&gt;如果要改善肠道菌群生态，最好的方式是一天两次摄入天然发酵类食品&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;高纤维食物对于肠道菌群生态的维护是有益的，建议日常饮食以植物类食物为主，尽量避免深度加工食品的摄入，控制糖的摄入。Sonnenburg 教授还讲了个故事，说微生物学家参加的会议，一般餐厅的沙拉吧总是会供不应求 :) 前面提到的 Rich Roll 大佬也是个素食者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;益生菌的效果没有广泛研究支持&lt;/strong&gt;，且这类产品的监管很有限。&lt;strong&gt;益生元的效果也是好坏参半&lt;/strong&gt;，缺乏多样性，溶解速度太快等问题都使总体效果存疑。&lt;/li&gt;
&lt;li&gt;地中海饮食相比生酮饮食来说对健康的影响效果接近，但更容易坚持遵循。另外生酮饮食如果长期实践可能有一定的风险。所以&lt;strong&gt;总体更推荐地中海饮食结构&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;另外值得参考的是我们也有官方的 &lt;a href=&quot;https://sspai.com/post/72984&quot; rel=&quot;nofollow&quot;&gt;中国居民膳食指南&lt;/a&gt;，或许更适合东方人的饮食习惯。&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-心态与动力&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#心态与动力&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;心态与动力&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;这一部分主要介绍的是人体的多巴胺系统原理，以及如何利用它来形成健康，自律的生活方式。这一集是 Huberman 开播以来播放量最高的一集，对于强健我们的心智有着非常好的指导作用。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-原理-1&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#原理-1&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;原理&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;多巴胺是一种非常重要的化学物质，主要作用于两个神经回路：一个影响身体的运动，例如帕金森病与多巴胺的分泌不足有关；另一个则影响我们的动机，欲望与快乐，这几乎与我们从事的各种活动有关，无论是工作，学习还是社交，休闲娱乐。这里我们会主要讨论多巴胺的后者影响能力。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;神经系统中多巴胺含量水平的高低会影响我们的情绪，当多巴胺水平低时，我们会感到情绪低落，没有动力，而多巴胺水平高时，我们会感到兴奋和快乐。在通常情况下，我们的身体处于多巴胺 baseline 的状态，当我们达成一些令人兴奋的目标（比如玩游戏胜利，考试拿高分）后，多巴胺的水平会达到一个高峰，此时我们就会获得巨大的愉悦感。在高峰之后，多巴胺水平会回落到比 baseline 更低的一个水平，且这个状态会持续一段时间。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;这里有两个非常重要的原理：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;多巴胺绝对值含量的高低只是一方面，&lt;strong&gt;更重要的是其“相对变化量”的多少&lt;/strong&gt;。比如在刷抖音时看到了一个很有趣的视频，多巴胺水平升高，你会感到快乐，刷到下一个视频时，你感到的快乐程度好像不会那么强烈了，因为多巴胺已经在一个比较高的水平，难以形成更大的变化量。而同样的视频，如果你是几天之后看到，或许你会觉得有意思的多。所以&lt;strong&gt;当你持续做一件喜欢的事情时，你感受到快乐的阈值也会不断提高&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多巴胺的总体“储备”是有限的&lt;/strong&gt;！也就是说无论你是通过学习，工作，娱乐，社交，运动等不同方式来获得快乐，所消耗的“快乐货币”都是同一种：多巴胺。举几个例子来看下这个原理带来的影响：
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;很多自律的人都会说自己是 work hard，play hard 的生活方式，比如工作日通过高强度的工作来获得成就和满足感，休息日进行各种休闲娱乐，运动，社交等方式来获得快乐，其实背后都是在释放多巴胺来获取快乐。长期持续，我们身体的多巴胺 baseline 会逐渐下降，出现一种耗尽（burn out）的心理感觉，对很多事物无法保持之前的兴趣与精力。&lt;/li&gt;
&lt;li&gt;很多人会对玩电子游戏着迷，因为它们能带来巨大的多巴胺释放刺激让人感到快乐。但要意识到，多巴胺的储备是有限的，如果对此上瘾，你的多巴胺耗尽问题就会变得非常严重：一方面能够引起你兴趣的事物会变少，可能只有玩游戏才能带来快乐；另一方面，后续甚至会导致玩游戏本身也无法触发多巴胺释放，引起严重的抑郁问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;另外，&lt;strong&gt;多巴胺也具有叠加效应&lt;/strong&gt;。比如你喜欢健身，那么运动就会刺激多巴胺的释放。而我们实际去健身时，可能会不自觉的安排了很多其它的“快乐因素”，比如选一个精神状态比较好的日子，运动前喝一些能量饮料，跟认识的朋友一起去，边健身边 social，听一些自己喜欢的音乐或 podcast，等等。这些因素也都会促进多巴胺的释放，让你感到“前所未有的快乐”。但要注意前面的原理，多巴胺的高峰越高，后面随之而来持续的低谷也会越长，而且长此以往，可能会降低你单纯从运动中获取快乐的能力。这样的例子还有很多，比如边跟朋友吃饭，边玩手机，拍照发朋友圈，可以计算一下叠加了几种快乐因素 :)&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-影响多巴胺的外界因素&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#影响多巴胺的外界因素&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;影响多巴胺的外界因素&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;我们来看下具体影响多巴胺释放的各类因素有哪些，首先是促进多巴胺分泌的：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;巧克力，提升到 1.5 倍的多巴胺 baseline&lt;/li&gt;
&lt;li&gt;性行为，提升到 2 倍&lt;/li&gt;
&lt;li&gt;尼古丁，提升到 2.5 倍&lt;/li&gt;
&lt;li&gt;可卡因，提升到 2.5 倍&lt;/li&gt;
&lt;li&gt;安非他命，提升到 10 倍&lt;/li&gt;
&lt;li&gt;咖啡因本身只会少量提升多巴胺，但它会抑制一些多巴胺受体，提升同等多巴胺造成感受的效果&lt;/li&gt;
&lt;li&gt;马黛茶，包含咖啡因，能控制血糖，还能保护多巴胺神经元&lt;/li&gt;
&lt;li&gt;刺蒺藜豆也能提升多巴胺（基本等同于 L-DOPA），还能提升男性精子数量和质量&lt;/li&gt;
&lt;li&gt;运动，带有主观成分，喜欢跑步的人，可以提升到 2 倍 baseline&lt;/li&gt;
&lt;li&gt;健康的社交关系也会促进多巴胺释放&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;食物方面感觉 Huberman 教授&lt;strong&gt;非常推荐马黛茶&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;也有很多提升多巴胺释放或影响其效果的药物：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;L-Tyrosine（酪氨酸），提升多巴胺&lt;/li&gt;
&lt;li&gt;Phenethylamine（PEA），巧克力中也包含，能够提升多巴胺&lt;/li&gt;
&lt;li&gt;Huperzine A，提升多巴胺&lt;/li&gt;
&lt;li&gt;各种“聪明药”，如 Adderall, Modafinil, Alpha-GPC, Ginkgo 等，留学党应该很多都有耳闻&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;通常来说，&lt;strong&gt;不推荐持续使用这些药物&lt;/strong&gt;，因为多巴胺释放之后的高峰会带来 baseline 水平的降低，导致无法享受活动的快乐，无法专注，限制学习能力和神经元可塑性等。Huberman 表示&lt;strong&gt;一周使用一次的频率应该是安全的&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;最后还有一个比较特别的研究，就是&lt;strong&gt;冷水浴能够提升多巴胺释放到 baseline 的 2.5 倍左右&lt;/strong&gt;，且持续时间更长，能达到 3 小时左右。建议使用 10-14 摄氏度的水温，注意安全。此外冷水浴也不需要太频繁，每周 11 分钟左右足够。如果已经习惯了冷水浴，那么也就没有释放多巴胺的效果了。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;还有一些因素会降低多巴胺，如：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;strong&gt;褪黑素，会引起多巴胺的减少&lt;/strong&gt;。前面也提到过并不建议使用褪黑素来帮助入睡，或者适应时差等。&lt;/li&gt;
&lt;li&gt;睡眠时段接触光源，也会引起接下来几天的多巴胺水平下降。&lt;strong&gt;半夜睡不着刷手机是很有害的哦&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-维持健康的多巴胺水平&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#维持健康的多巴胺水平&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;维持健康的多巴胺水平&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;了解了原理和各种影响因素后，我们来看下如何有效设计我们的生活工作方式来维持健康，可持续的多巴胺水平。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;简单回顾一下，前面我们已经知道了多巴胺储备有限，且对一件事物上瘾会不断提高感受快乐的阈值，那么如何让我们能对一件事情保持长时间的兴趣和投入度，又不至于耗尽多巴胺呢？一个经典的例子是赌场的运作方式，我们并不是每一次下注都能赢，偶尔赢一次会释放多巴胺，而且根据赢得钱的多少有所上下浮动，这会吸引玩家持续参与。这就是一种非常有效的&lt;strong&gt;间歇性且随机的奖励机制&lt;/strong&gt;。感觉很多游戏，社交网络产品也借鉴了这个思路来进行设计。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;对于我们经常需要从事的活动，我们也可以模拟这个机制。还记得前面提到的&lt;strong&gt;多巴胺叠加效应&lt;/strong&gt;吗？我们可以&lt;strong&gt;通过随机化叠加因素的多少，来实现多巴胺释放的差异性&lt;/strong&gt;。还是以健身为例，我们可以随机决定今天是否要听音乐，是否去健身时带手机，是否要在健身前喝能量饮料等因素。如果其它什么都不做，只是单纯健身，那么多巴胺的释放量就会相对较低。如此就能模拟多巴胺释放有高有低的随机奖励机制。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-成长型思维&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#成长型思维&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;成长型思维&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;最后来看下如何构建良好的思维方式来利用多巴胺系统提升自我。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;有一个非常知名的实验，挑选了一群天生喜爱画画的小朋友，在他们完成画作后给与一些奖励。后面在移除这些奖励后，小朋友们对于画画的兴趣和动力大大降低了。这个实验说明，当我们因为一个活动收到奖励（比如金钱，美食等）时，我们&lt;strong&gt;反而会降低活动本身的愉悦程度&lt;/strong&gt;。而且多巴胺本身影响我们对时间的认知，同时也影响我们的情绪状态，如果我们&lt;strong&gt;始终以完成活动后的奖励为目标，则整个过程中就很少释放多巴胺，让原本困难的过程变得更加难以坚持&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;仔细想一下，这是一个非常有意思的观察。多巴胺有点像我们的“本能系统”，决定了我们是否有动力做一件事。但反过来&lt;strong&gt;我们的主观思想却可以影响这个系统起作用的方式&lt;/strong&gt;，这也是人类为何能摆脱动物本能，达成很多需要“反人性”的投入才能取得的成就的原因吧。上述的实验是我们的主观思想造成的一个反面作用的例子，我们自然也可以实现正面作用，那就是成长型思维。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;具体来说，就是&lt;strong&gt;通过自我暗示，把努力过程本身当作一种“奖励”&lt;/strong&gt;。我在努力学习，这个过程本身就是有趣的，会让我不断变得更强，这样的想法会在过程中激发身体系统释放多巴胺，而多巴胺提升了我们的情绪和动力水平，也会让努力的过程中碰到的困难变得相对容易克服。专注于这个过程的本身，而不是在过程前进行各种外界刺激（如前面提到的药物），或者在过程后给自己巨大的奖励。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;这种思维方式看起来很主观，但这就是我们的神经系统工作的方式，虽然人类的“硬件系统”都差不多，但知识，思维这些运行之上的“软件”却可以千差万别。&lt;strong&gt;我们可以通过自律，自我暗示来改变自身对各类活动的喜好&lt;/strong&gt;。例如通过暗示 fasting 对我们健康的益处，来获取满足感，而不是借助于 fasting 结束后的大快朵颐。通过自律抵御高油盐食物的吸引力，并且自我暗示植物类食物对身体的好处，坚持一段时间，会觉得花椰菜也挺美味的。这也是为什么我们在这篇文章中介绍了很多原理性的内容，而不仅仅是行为建议。因为这些原理知识能够让我们做更好的自我暗示 :)&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;这一节的 podcast 对我本人的冲击非常大，强烈建议大家观看这期 &lt;a href=&quot;https://hubermanlab.com/controlling-your-dopamine-for-motivation-focus-and-satisfaction/&quot; rel=&quot;nofollow&quot;&gt;Mindset &amp;amp; Drive&lt;/a&gt;，相信也会有不同的收获。&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-学习与专注&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#学习与专注&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;学习与专注&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;在了解了多巴胺的运作机制基础上，我们可以继续探究一些跟大脑健康，专注度，如何进行高效学习相关的话题。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-学习的原理&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#学习的原理&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;学习的原理&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;从脑神经科学来看，学习的本质是神经元的重新连接（rewire），进一步来看，需要大脑处在一种学习的化学状态下，也就是 Huberman 经常提到的神经可塑性（neuroplasticity）状态。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;简单来说，当我们尝试做一些事情，但没有达到预期目标时，身体会给大脑发信号，“我犯错了”。处在这种犯错，沮丧的认知状态下，神经系统会释放肾上腺素（提升 alertness），乙醯胆碱（提升 focus），多巴胺（促进神经元的 change，rewire）等化学物质，激活神经元的可塑性。也就是说，&lt;strong&gt;犯错是我们进入学习状态的重要前提&lt;/strong&gt;。搞机器学习的同学应该很熟悉了吧，这跟我们训练模型不是一模一样么 :) 另外很多人可能觉得心流（flow）状态是学习的最佳状态，而 Huberman 则不这么认为。&lt;strong&gt;心流是一种精神高度集中且接近于自动化的状态，是在做我们已经知道怎么做的事情，而不是在学习新的知识技能&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;对于这个学习状态，经典的实验是给人们戴上一些能转变角度的眼镜，然后执行一些类似物体抓取的任务。由于看到的东西通过眼镜改变了其本来的位置，一开始在尝试时总会出现抓取动作的偏离。但后续在进入神经可塑性状态后，我们能逐渐适应相关的视觉偏移，协调自己的听觉，动作等都与之协同，顺利完成任务。更有意思的是，&lt;strong&gt;这个“神经可塑性”的化学状态是可以持续的&lt;/strong&gt;，我们甚至可以先通过一些其它操作触发大脑的这个机制，再去进行真正的学习，以加快学习的速度。这里还有一个隐藏逻辑，当你在遇到挫折困难时，大脑进入了可塑性状态，而此时你却放弃了，那么&lt;strong&gt;神经元也会重新连接到这种容易放弃的行为模式，形成恶性循环&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;人在年幼时期大脑天然的神经可塑性会比较好，而在 25 岁以后则会大大下降。我们后面会提到如何来进行克服。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;另外，&lt;strong&gt;休息和睡眠时也会发生大量的神经元重连接的活动&lt;/strong&gt;，这也是之前我们就提到过的，高质量的睡眠是实现很多生理，心理健康强壮的先决条件。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-利用神经可塑性&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#利用神经可塑性&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;利用神经可塑性&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;如果正在阅读文章的你还未满 25 岁，那么恭喜你，你的神经可塑性仍然非常的好，可以&lt;strong&gt;尽可能广泛的学习各种知识和技能&lt;/strong&gt;。比如你可以很快学会各种乐器，新的语言，新的运动，新的专业技能等等。通过更广阔领域的体验接触，尽量找到你最有兴趣的方向，可以后续再不断深入经营。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;如果已经像我一样超过了 25 岁，那么还有很多办法来提升神经可塑性：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;通过实验发现，&lt;strong&gt;成年人对于小幅度的增量学习是完全可以适应与掌握的&lt;/strong&gt;。例如每次视觉上的偏差只有 7 度，而不是一下子就来个 180 的大颠倒，那么成年人也能很快从错误中学习纠正。应用到实际学习中，我们每次学习的内容可以控制一下不要太多（本文有点违反了，建议收藏慢慢学习），多次积累来完成神经系统的调整学习。&lt;/li&gt;
&lt;li&gt;对于达成目标的渴求度越高，重要性越大，奖励的刺激越大（比如为了生存），则神经可塑性就会越容易出现。这个比较符合直觉，但是现实中可操作性可能不高。&lt;/li&gt;
&lt;li&gt;第三点最有意思，&lt;strong&gt;通过扰乱前庭神经系统（vestibular system），能够达到神经元可塑性的状态&lt;/strong&gt;。简单来说，就是让你的身体有一些“新颖的重力体验”，如倒立，瑜伽，体操，滑板，任何让身体会失去平衡的一些状态等，会快速激发“我犯错了”的信号，进入学习状态，甚至可以在之后去做别的任务的学习。这一下子就让我想到了&lt;strong&gt;淘宝成立初期的“倒立文化”，没想到还真的有科学依据&lt;/strong&gt;。需要注意的是，这个体验必须要新颖，也就是说如果你已经倒立很熟练了，那么去做倒立就是个日常行为，并不会给身体一种在犯错边缘，需要纠正的刺激。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-学习的理想状态&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#学习的理想状态&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;学习的理想状态&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;除了神经可塑性的化学状态外，我们也需要注意其它的因素。例如我们&lt;strong&gt;不能太放松以至于有些昏昏欲睡，也不能太紧张激动，无法控制自己拥有清晰的思考&lt;/strong&gt;等。这些也都跟我们体内的多巴胺，肾上腺素，乙醯胆碱，血清素，褪黑素等化学物质的水平有关，需要做好调节。在之前 Rich Roll 的访谈节目中，Huberman 提了一个非常有效的“呼吸工具”，叫&lt;strong&gt;生理叹息&lt;/strong&gt;（Physiological Sigh）。操作方法上简单来说就是吸两口气，然后出一口长气。通常情况下，只要一两次生理叹息就足以使我们的压力和警觉水平迅速下降，让人感到更加平静，提升学习表现。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;前面提到的成长型思维也很重要，在遇到错误导致的沮丧感觉时，可以不断增强自我暗示，失败是帮助我们学习成长的唯一路径，对我们是有益的，以此增加多巴胺的释放，提升学习动力和过程中的愉悦感。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;联系到睡眠对学习的促进作用，也有一些研究提供了一些相关的 tips：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;在学习时听一些有规律的节拍，在入睡时也播放同样的微弱节拍，能够提升学习和记忆的效果。&lt;/li&gt;
&lt;li&gt;一般在 90 分钟的学习后（人体生物钟的周期），可以选择进行 20 分钟的休息（non sleep deep rest），也会加强学习的效果。&lt;/li&gt;
&lt;li&gt;Gap effect，在学习中随机停止 10 秒钟，这些停止会在睡眠中加速“播放”，提升学习效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-提升专注&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#提升专注&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;提升专注&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;“专注”背后的机理是大脑中两种“网络模式”的协调，一种叫 Default network，在我们不做任何事情时被激活，另一种叫 Task networks，在我们专注于做某些事情时被激活。普通人的大脑能够很好地协调这两个模式，两者像跷跷板一样，当一种模式被激活时另一种模式会被抑制。而具有专注障碍（比如多动症）的人来说，这两者无法很好的进行协调，因此会出现无法专注的现象。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;通过提升多巴胺水平，可以有效促进这两种网络模式的协调，因此有非常多的多动症治疗药物都跟提升多巴胺有关，例如 &lt;strong&gt;Adderall，Modafinil&lt;/strong&gt; 等。一些调查表明，这些药物（经常被称为聪明药，nootropics）在美国被滥用的程度甚至超过了大麻，不少“学霸”都以此来提升注意力，减少对睡眠的需求。但 Huberman 教授表示，一方面多巴胺的刺激提升后都会带来多巴胺水平的低谷，另一方面这些药物也可能导致上瘾，对新陈代谢作用造成扰动，有很多负面影响，&lt;strong&gt;对长期的学习与记忆效果可能并没有提升作用&lt;/strong&gt;。在之前介绍多巴胺的章节也有提到，应该谨慎使用这类药物，并严格控制使用频率不能过高。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;一些安全有效的提升专注力的方法包括：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;适量补充 &lt;strong&gt;Omega-3 EPA 鱼油&lt;/strong&gt;，这是神经细胞的组成原料之一，能够有效减轻抑郁，对治疗多动症（ADHD）也有帮助。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过身体其它部分释放运动，可以帮助提升注意力&lt;/strong&gt;。教授举的例子是作为神经科医生在开刀时，如果采用半蹲半站的姿态（运动释放），拿手术刀的手更稳定不容易颤抖。这让我想起以前读书时很多同学习惯转笔，现在工作了也有不少人喜欢玩指尖陀螺，或者站立办公，可能都是类似效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限制视野范围，能够提升专注度&lt;/strong&gt;。比如我们经常因为眼睛瞟到了任务栏上的消息提示闪动而分心，可以通过一些设置来进入“专注模式”。&lt;/li&gt;
&lt;li&gt;视线的高低也会影响神经状态，&lt;strong&gt;视线往下看会让神经系统偏向镇静，放松，甚至困倦，而视线向上则会让系统提升警惕&lt;/strong&gt;。工作时一般至少把显示器放置在鼻子位置之上。&lt;/li&gt;
&lt;li&gt;大脑不擅长处理大量频繁的 context switch，典型的比如刷抖音，不同的信息以非常快的速度频繁切换，这对我们的注意力是有伤害作用的。2014 年的一项研究表示，&lt;strong&gt;我们每天在手机上花费的时间应该少于 60 分钟（青少年）/120 分钟（成年）&lt;/strong&gt;，以免引起注意力障碍问题。&lt;/li&gt;
&lt;li&gt;还有研究表明，&lt;strong&gt;17 分钟的冥想，能够对大脑中的神经元做重新连接，永久地改善注意力&lt;/strong&gt;。只要做一次就可以，完全可以尝试一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-大脑健康&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#大脑健康&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;大脑健康&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;最后来看下提升大脑健康和效能的一些方法。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;首先是前面提到过的，保证高质量的睡眠。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;运动方面，&lt;strong&gt;对大脑直接帮助最大的是有氧运动&lt;/strong&gt;，提升心肺功能，支持大脑供能。建议每周 150-180 分钟的有氧训练。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;对于大脑健康有帮助的食物，其中前三点是比较重要的，后面的部分涉及的研究没有那么多：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;&lt;strong&gt;Omega3, 尤其是 EPA 等脂肪酸&lt;/strong&gt;，是大脑组成的重要部分，且一般人都容易摄入不足。多吃鱼，牡蛎，鱼子酱，奇亚籽，核桃，大豆。一天至少摄入 1.5 克，理想情况需要 3 克以上。不喜欢吃鱼的话可以辅助摄入鱼油。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;磷脂酰丝氨酸&lt;/strong&gt;，也对认知能力有帮助。通过鱼，肉类，卷心菜来摄入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;乙酰胆碱&lt;/strong&gt;，重要的神经调质，提升注意力。摄入胆碱的重要来源是鸡蛋，尤其是蛋黄。土豆，坚果，水果中也含有，虽然没有蛋黄中的含量那么丰富。可以通过 Alpha-GPC 等补充剂来获取。&lt;/li&gt;
&lt;li&gt;肌酸，尤其对于不吃肉的人，一天需要摄入 5 克左右。&lt;/li&gt;
&lt;li&gt;花青素，在蓝莓，黑莓，葡萄等食物中有提供。可以降低 DNA 损伤，缓解认知下降等问题。大约每天需要 60-120 克蓝莓的补充。&lt;/li&gt;
&lt;li&gt;谷氨酰胺，可以通过牛肉，鸡肉，鱼肉，鸡蛋，大豆，卷心菜，菠菜，芹菜等食物来摄取。提升大脑在缺氧（高海拔地区）下的表现，还能够抑制对糖的需求。&lt;/li&gt;
&lt;li&gt;水，钠，钾，镁等电解质是神经元信号传递所需的基础元素，需要保证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;这一节中还讨论了我们身体对各种食物喜好进行判断的三个渠道，前两个分别是味觉判断和营养成分的下意识判断。第三个比较有意思，也跟多巴胺有关，即我们可以&lt;strong&gt;通过提升大脑代谢的活跃度来增加对某种食物的喜好&lt;/strong&gt;。比如你如果不喜欢吃鱼，一种方法是你可以把鱼跟你平时爱吃的食物一起吃，另一种是给自己足够的心理暗示，说服自己吃鱼是有益身体健康的。通过这两种办法，你都可以让大脑释放多巴胺，从而逐渐提升对鱼类食物的喜好程度。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;最后，如果你对膳食补充剂感兴趣，还可以看看 &lt;a href=&quot;https://www.thorne.com/u/huberman&quot; rel=&quot;nofollow&quot;&gt;Huberman 教授平时会吃的补充剂有哪些&lt;/a&gt;。&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-长寿&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#长寿&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;长寿&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;最后我们来看下如何延年益寿，这是 Huberman 跟这个领域的专家，来自哈佛的 David Sinclair 的一集访谈节目。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-衰老的本质&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#衰老的本质&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;衰老的本质&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;Sinclair 认为，衰老是一种疾病，它本身导致了非常多通常意义上的疾病的出现，比如阿尔兹海默症，癌症等。我们可以通过科学的手段来“治疗”衰老，甚至逆转它。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;从本质上来说，衰老是&lt;strong&gt;基因信息的损失&lt;/strong&gt;，这分为两部分：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;DNA 本身的信息，比如细胞中的 DNA 结构会在辐射等情况下受到破坏。&lt;/li&gt;
&lt;li&gt;控制哪些基因进行表达的信息受到了破坏，也就是所谓的表观基因组（epigenome）。这部分在衰老的因素中占了 80%。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;人体内有一个天然的“衰老时钟”，而且并不是以匀速走的。在年轻时我们的生长发育过程中，这个时钟走得更快。所以如果青春期发育比较迅速的人，一般来说整体的时钟走的比较快，寿命也会相对短，是不是有点吓人……而且，一般比较矮小的人，像侏儒很少会得心脏病，癌症，也会明显更长寿。不过不要紧张，前面提到了，基因本身的信息只占了衰老因素的 20%，&lt;strong&gt;控制基因表达这部分占了大多数&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;这里有点意外的是 Sinclair 教授介绍的最重要的几个实验，都跟前面我们提到的 fasting 有关。比如一般老鼠的寿命大概是 2 年，他们实验室有一只叫 Yoda 的老鼠，活了足足 5 年。其主要的做法就是选取了侏儒基因，以及执行 fasting。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;教授详细介绍了 &lt;strong&gt;fasting 为何能提升动物/人类 30% 以上的寿命&lt;/strong&gt;：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;在低血糖水平时，身体会抑制哺乳动物雷帕霉素靶蛋白（mTOR），激活去乙酰化酶（sirtuin），形成一个非常良好的化学状态，清理旧蛋白质，提高胰岛素敏感度，提供更多能量，修复细胞等等。后面这个乙酰化酶是我们抵御衰老的一个重要武器。&lt;/li&gt;
&lt;li&gt;当胰岛素水平低时，“长寿基因”会被激活，如 SIRT1 等。&lt;/li&gt;
&lt;li&gt;fasting 会给细胞足够的“休息时间”。&lt;/li&gt;
&lt;li&gt;血糖水平低，会让身体对胰岛素更敏感，更快吸收血糖，也对健康有益。&lt;/li&gt;
&lt;li&gt;当你从来不感受饥饿时，你的衰老时钟也走的更快。&lt;/li&gt;
&lt;li&gt;除了 24 小时周期 fasting 触发的 autophagic，还有更深层次的清理机制，会在禁食第二，三天启动。在老年老鼠上的实验表明，这种长时间的禁食可以让他们延长寿命 35%。不过这个实操难度对普通人来说有点大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;Sinclair 也对比了一些上个世纪失败的研究，比如通过抗氧化剂来抵御衰老。现代长寿研究的核心思想是，如何&lt;strong&gt;通过一些机制手段来触发身体自身的衰老抵抗机制&lt;/strong&gt;。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;此外 Sinclair 也介绍了一些激动人心的前沿技术，例如&lt;strong&gt;通过基因治疗方法，可以重启我们的 DNA 表达系统&lt;/strong&gt;。通过一次注射，可以让盲人恢复视力，这已经在老鼠身上得到了验证。或许几年后，我们可以像死侍那样实现身体各部分的逆转老化。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-实践-1&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#实践-1&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;实践&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;这里列出一些 Sinclair 自己的实践方式，如果想要采纳还是要结合自身的情况来看。有意思的是这集节目下有个热门留言是这个教授竟然已经 52 岁了，完全看不出来……所以你懂的。&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;不吃早饭，午饭也吃的比较少，酸奶或者橄榄油，晚饭吃蔬菜为主，加鱼和虾，基本不吃牛排。不吃糖，甜品，面包。基本达到了 2 小时进食窗口的高阶 fasting 状态。他偶尔也会尝试一整天都不吃东西，但比较难坚持。&lt;/li&gt;
&lt;li&gt;每天摄入 1 克的白藜芦醇（resveratrol），1 克的 NMN（进而会转化为 NAD，which is sirtuin 的“燃料”），还有二甲双胍（metformin）。其中锻炼的日子可能会跳过一些补充品。他并不吃复合维生素。&lt;/li&gt;
&lt;li&gt;以蔬菜为主食的好处：富含各种营养，维生素；包含异种激素（Xenohormesis），植物基于“压力”之下产生的物质，对长寿有益。后者也可以通过槲皮素（quercetin）来做膳食补充。&lt;/li&gt;
&lt;li&gt;一般会隔一天进行有氧运动和力量训练。有氧运动能提升 NAD 水平。&lt;/li&gt;
&lt;li&gt;根据家族病史来决定一些药物摄入，如他 29 岁就开始服用降胆固醇药物。&lt;/li&gt;
&lt;li&gt;对于人造甜味剂，教授认为总体来说是安全的。他偶尔也会喝健怡可乐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;对于这一系列实践，Sinclair 教授都进行了 10 多年的自身实验，并使用各种手段来监控身体数据。通过监控数据可以推测出一个人的“生理年龄”如何（不是光看脸），他自己在上述实践下，生理年龄在持续下降，现在已经达到了 30 岁左右的水平（实际年龄 52 岁）。另外，他认为每个人的身体情况不一样，医院约定俗成的生理指标范围也不一定适合每个人。&lt;strong&gt;未来这种健康数据的实时监控与个性化诊断会成为主流&lt;/strong&gt;。他举了一些例子：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;监控血糖水平 HbA1c，观察 fasting 的影响等。&lt;/li&gt;
&lt;li&gt;监控炎症指标 CRP，与心脏病等各种疾病的诱发相关。&lt;/li&gt;
&lt;li&gt;监控 LDL，通过药物等进行控制。膳食胆固醇对血液胆固醇几乎没有影响，不需要戒红肉，黄油等。&lt;/li&gt;
&lt;li&gt;补充铁元素可能加速衰老。医学指标需要个性化，低铁元素含量并不一定导致贫血。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;还有一些影响寿命的负面因素：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;肥胖症会加速衰老。&lt;/li&gt;
&lt;li&gt;吸烟，会破坏基因表达，加速衰老。&lt;/li&gt;
&lt;li&gt;X 光检查同理，没有必要时，避免接触。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;展望一下 longevity 研究的未来，还是挺激动人心的。现代科学每一年能让我们的平均寿命延长 1/4 年，如果每一年能让我们的平均寿命延长超过 1 年，则达到了&lt;strong&gt;寿命“逃逸速度”&lt;/strong&gt;（类比以 1000 英里每小时的速度往西飞行，太阳永远不会落下），实现了“永生”。著名的未来学家 Ray Kurzweil 预测，大约 12 年后（2034 年）就能实现，让我们拭目以待。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;除了这集 podcast，也必须附上吴承霖大佬的万星项目 &lt;a href=&quot;https://github.com/geekan/HowToLiveLonger&quot;&gt;程序员延寿指南&lt;/a&gt;。&lt;/p&gt;
&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-个人实践&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#个人实践&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;个人实践&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;前面介绍的内容有点多，这篇文章篇幅也有些超了。最后来简单介绍下我个人目前采纳的一些行动和辅助工具。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;睡眠方面暂时没有什么特别的措施，现在带娃基本上晚上睡眠质量也比较一般。只是会稍稍注意一下晚上 11 点后尽量不接触手机光源。早起接收光照这点，基本上就是早上遛狗或者开车通勤时间来接触，基本压力不大。如果比较讲究的同学，还可以下一个 &lt;a href=&quot;https://mycircadianclock.org/&quot; rel=&quot;nofollow&quot;&gt;My Circadian Clock App&lt;/a&gt; 来追踪一下生物钟，也是 Satchin Panda 等大佬参与开发的项目，值得信赖。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;饮食方面，开始尝试 8 小时进食窗口的 fasting，目前感觉良好。中饭一般吃蔬菜为主的轻食，晚上就比较放飞自我，想吃啥吃啥。早上会看情况喝点盐水，茶或者 AG1 的补充剂。膳食补充剂目前基本只有复合维生素和 EPA 鱼油在使用，后面可以参考下 Huberman 的“配方”增加一些。Huberman 自己也在节目中表示&lt;strong&gt;对白藜芦醇和 NMN 还在观望状态&lt;/strong&gt;，我查了些资料发现有争议的地方还不少，所以我个人建议先采纳广受认可和使用的一些补充剂，如 EPA 鱼油，二甲双胍等。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;很多人都关心 fasting 可能引发胆结石，这里提供一些补充信息：&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;从这篇 &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1419405/&quot; rel=&quot;nofollow&quot;&gt;Bloch, H. M. 等人的论文&lt;/a&gt; 来看，fasting 过程中胆汁的饱和度有一个先上升后下降的过程，&lt;a href=&quot;https://youtu.be/2lGuXBwudKw&quot; rel=&quot;nofollow&quot;&gt;Dr. Berg 也以此做了解释&lt;/a&gt;，认为 fasting 加生酮饮食（摄入脂肪）对胆囊健康反而是有益的。&lt;/li&gt;
&lt;li&gt;从这篇 &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1405175/&quot; rel=&quot;nofollow&quot;&gt;Sichieri, R. 等人的论文&lt;/a&gt; 的结果来看，long overnight fasting 和节食会提升得胆结石得概率。不过减肥（减少脂肪）本身就会提升得胆结石得概率。&lt;/li&gt;
&lt;li&gt;持续 24 小时以上的禁食相关的研究比较少（比较难执行），但从机理上来说长时间的禁食应该会增加得胆结石得概率。&lt;/li&gt;
&lt;li&gt;饮食结构，自身状况对胆结石的形成也会有很大影响，例如高胆固醇，高胰岛素水平，高碳水饮食等。高纤维食物，健康的脂肪摄入，有助于降低得胆结石得概率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;总体看下来，我个人感觉这块的实验上没有一个定论（就跟 &lt;a href=&quot;https://www.coffeeandhealth.org/factsheet/gallstones-factsheet&quot; rel=&quot;nofollow&quot;&gt;咖啡是否会引发胆结石&lt;/a&gt; 一样），但应该不是一个概率很大的问题，起码 Huberman 教授跟这个领域的另一位权威 Satchin Panda 教授都没有提到这块的问题。理想情况是执行 fasting 时持续对你的身体状况做医学指标的跟踪。其它就看个人选择了 :)&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;工作，学习，专注方面，主要看自律了。这方面我总体控制还可以，在了解了多巴胺的工作原理之后就更加有自信了，主要靠各种软件的专注模式来近似执行番茄时钟法，此外也采用了升降桌，大概有 30% 的时间站立办公。工作间歇会尝试一下 Yoga Nidra。此外晚上学习时段会用 iPad 的 Books 来记录一下阅读时间，基本上每天保持 30 分钟以上，持续坚持。后面考虑试试工作时喝马黛茶，以及夏天开始尝试冷水澡。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;运动方面是这一年来改观最大的一项，依靠小米手环 PAI 指数功能的督促，基本上做到了每周平均 3 次的跑步或者羽毛球活动，持续把 PAI 值保持在 200 左右。总体来说对于精神状态的改观还是很大的，肚子上的脂肪也减少了很多。唯一比较困扰的是一般下班后运动都要 9，10 点开始了，结束后会离入睡的时间比较近，有时候会对睡眠质量有所影响。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;最后，Huberman 教授的 podcast 中还有很多其它内容，比如习惯养成，健身增肌，应对恐惧与创伤，情绪管理等，感兴趣的朋友可以进一步挖掘。本文以实验事实与原理假设的陈述为主，以上所有的行动方案都需要在咨询医师，专业人员的条件下，结合自身情况执行，注意自身安全，本人与 Huberman 都不负相关后果责任。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;备注：这篇文章也同时发布到了 &lt;a href=&quot;https://github.com/zijie0/HumanSystemOptimization&quot;&gt;Github&lt;/a&gt;，欢迎大家 Star 并提出宝贵建议，谢谢！如果你对我的其它作品感兴趣，也欢迎搜索关注公众号：RandomGenerator。&lt;/p&gt;
&lt;/article&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>