<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8d2eb9e82fb2d35f8507216647dd9299</guid>
<title>别再说你不懂规则引擎了！</title>
<link>https://toutiao.io/k/edts5o5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;/p&gt;&lt;h1&gt;背景&lt;/h1&gt;&lt;p&gt;一提到规则引擎这四个字，大家肯定多多少少在工作中或者各种文章里面都有过听说，但是很多同学往往被引擎这两个字吓到了，以为这是什么黑科技。时值最近在调研规则引擎，在这里给大家介绍一下什么是规则引擎。&lt;/p&gt;&lt;h1&gt;为什么需要规则引擎&lt;/h1&gt;&lt;p&gt;规则引擎带来的好处是比较多的，这里我们从不同的角度去剖析一下。&lt;/p&gt;&lt;h2&gt;从开发人员视角来看&lt;/h2&gt;&lt;p&gt;在没有规则引擎的时代，有些逻辑比较复杂的业务，只有不断的增添if-else去满足我们这个复杂的业务场景，对于开发者来说还好，对于后面接手的同学一看到处都是if-else，体验过的同学就会知道，当然if-else可以通过一些模式去优化，比如使用策略模式，或者使用一些注解进行扩展点优化，这样的确可以解决一部分代码不清晰的问题，但是依然无法解决开发缓慢，需要上线等问题。举个例子，在风控系统中，因为风控的逻辑在不断的发生一个改变，如果我们在代码中去写死，那么发生一个改变就改一下代码，上一下线，这明显是我们不能接受的。所以我们需要规则引擎去改变这个现状，通过高效可靠的方式去做这些业务规则的改变。&lt;/p&gt;&lt;h2&gt;从业务人员视角来看&lt;/h2&gt;&lt;p&gt;以前的开发模式是业务人员提出业务规则叫开发人员做出相对应的业务开发，到底这个最后开发出来的业务规则是否和业务人员所提出来的是否一致，需要通过大量的测试去进行验证。而我们的开发人员理解业务很容易和业务人员的提出的业务有偏差，就会导致开发成本上升。有了规则引擎之后，我们就可以有下面几点提升：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;业务人员独立配置业务规则，开发人员无需理解，让业务人员的规则和真正的实际情况一致。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;增加业务的透明程度，业务人员配置了之后其他业务人员也能够知道，以前只能通过代码扣扣相传。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;规则高效改动和上线，一般业务人员提出需求之后都是希望能尽快上线，但是之前都需要有代码开发，项目上线等环节，现在业务人员配置好了之后即配即用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;减少业务人员和开发人员的矛盾，开发人员通常会因为一些时间因素或者一些理解不到位导致业务人员的规则实现有偏差，最后业务同学会对开发同学产生一些小小的矛盾，这下完全业务配置解除开了之后，只要不断的升级规则引擎，业务规则就不会再对开发人员有依赖。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;什么是规则引擎&lt;/h1&gt;&lt;p&gt;说了这么多好处可能很多同学都会疑问，规则引擎到底长啥样呢？一般来说分为下面三类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;低配版：没有配置界面，靠业务人员编写引擎规则DSL，一般存储在数据库或者文件中，这种没有彻底解放业务人员和开发人员的耦合，但是加快了业务代码的上线速度，以及很容易就能进行规则变更。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;进阶版：这个一般是某种特定的系统，我们针对这种系统设置一些有针对性的页面，比如下面是某风控系统的截图，风控系统的规则引擎是相对来说比较简单的，只需要判断某些参数是否符合某些条件即可，然后返回固定的值即可。 &lt;img data-ratio=&quot;0.218705035971223&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobtwaWrJp1N63yC33J5eKUFsZicib5u5vE618EW6icV0OKyjgXsvpK9qMCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;完全版：在进阶版中规则引擎只是其中的一个部件，一般这种都很难复用于其他场景。但是一个完全版的规则引擎，追求的超高的通用性，下面是从一个商业的规则引擎中截图：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.1428571428571428&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobSIrxLq58yZc81zvhMHsoHaFCRiaWTmLKArhutCcLQybjo1OHbDnSIGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;259&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以看见提供了多种规则引擎的表达：比如决策集，决策表，决策树等等，适用于我们很多需要使用规则引擎的地方，下面暂时了一下决策树的配置，这个就和我们上面风控的配置有点类似，只不过通用性更强。 &lt;img data-ratio=&quot;0.5575221238938053&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobdsFyaDgR7qJGgGm09KrmGDYXWlCt05LQvbPOm6ToedsbATgNiawFibUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1921&quot;/&gt;&lt;/p&gt;&lt;p&gt;讲到这里基本上规则引擎是什么大家基本上心里面有个大概了，下面我们来讲下有哪些开源的规则引擎。&lt;/p&gt;&lt;h1&gt;有哪些规则引擎&lt;/h1&gt;&lt;p&gt;在社区中开源的规则引擎是比较多的，说明不同的业务团队，公司都对这个是比较看中的，但是整体上大的分类分为下面几类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;通过界面配置的成熟规则引擎：这种规则引擎相对来说就比较重，但是因为功能全，也有部分业务会选择这个，一般出名的有:drools,urule。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基于jvm脚本语言：这种其实不是一个成熟的规则引擎，他应该算是规则引擎中的核心技术，有很多公司比如美团，他会觉得drools这种太重了，然后会基于一些jvm的脚本语言，去自己开发一个轻量级的规则引擎，这里比较出名的有，groovy,aviator,qlexpress。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;基于java代码的规则引擎：上面是基于jvm脚本语言去做的，会有一些语法学习的成本，所以就有基于java代码去做的规则引擎，比如通过一些注解实现抽象的方式去做到规则的扩展，比较出名的有: easyRules。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;成熟的规则引擎&lt;/h2&gt;&lt;p&gt;作为完全版的成熟的规则引擎，往往可以当作sass产品进行售卖，urule再开源部分的同时，也再卖着自己的高级功能，drools是一个纯开源的产品，如果想体验这种规则引擎可以直接去http://urule.bstek.com/可以体验他的产品，不需要自行搭建。&lt;/p&gt;&lt;p&gt;作为完全版到底是怎么满足各种奇奇怪怪的规则场景呢？在这些规则引擎里面都会分为好几种规则设计器来满足你想要的规则场景：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5416666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobQNAVBmqkR5vhVXZ3RDib7bnA0bibyndghFBNWicK13qfueRmGuBmM4Tmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;p&gt;这个是我们的向导式规则集，比如我们要写一些if/else/and/or 以及 while循环逻辑的时候我们的规则集是一个非常好的选择。如果要用dsl去写他，需要遵循一些规则语法，下面是drools的dsl： &lt;img data-ratio=&quot;0.6468172484599589&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobPsRh7TNhSwpzokkeNTc258tPln97rdicahic3LPyj0ibFC1ZeUR2UQWAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot;/&gt;&lt;/p&gt;&lt;p&gt;整体语法来说和我们java差别还是挺大的，有一定的学习成本。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.34552845528455284&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobRMvcl6icSn4vAY1a0ibuOUnEpDZy32YrtIN3Rfc60doVJ8mLq9Sk0Agw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;738&quot;/&gt; 如果我们想用规则集来实现，也是可以的，但是整体比较复杂，需要大量的写if/else，所以直接使用我们的决策表，就能完成我们的需求：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5206106870229008&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobn2VwQOr8j7giaNRM4Vdsjadxz2agggTyQofibsQCD2Sic0ybbIzplzaHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;655&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.42410714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobxb0aDy7hcsHib5Aj5fN4VicJE7SibNkWBjA3RKs6gc3nqtaicRbysWHdpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;896&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6814469078179697&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z62dlFO8L5otKLY57v4qmobszYnd09icpfhxDribCDoVOZCq90IUvjuMkicQFUKzotP3lYkgnNURZicfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;857&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们通过这些不同的规则设计器，可以设计出我们不同的规则场景，那么我们应该怎么去调用这些规则呢，一般来说提供了下面三种方式：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;生成jar包：配置好了之后会生成jar包，然后我们引入到我们项目中，项目调用这个jar包即可。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;热更新模式：由规则引擎帮助你对这个jar包文件进行热更新，动态的加载到我们的jvm内存中，这种方式不需要重启机器。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务模式：规则引擎自己提供机器，然后通过远程调用的方式，进行规则的计算。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以根据自己的场景选择合适的调用模式。&lt;/p&gt;&lt;h3&gt;Rete算法&lt;/h3&gt;&lt;p&gt;不论是drools还是urule，他们都选择了rete算法用作规则匹配。Rete 是一种进行大量模式集合和大量对象集合间比较的高效方法，通过网络筛选的方法找出所有匹配各个模式的对象和规则。其基本原理是通过空间换时间，达到了规则匹配的加速。有兴趣的同学可以下来自行搜索。&lt;/p&gt;&lt;h2&gt;jvm脚本语言的规则引擎&lt;/h2&gt;&lt;p&gt;drools在互联网公司进行规则引擎调研的时候都会进入备选项，但是往往最后都会以太重，学习成本高而最终落选。往往这种轻量级的脚本语言受互联网公司的青睐。一般来说有下面三种脚本语言比较多的被大家用来做规则引擎：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Groovy:Groovy是Apache基金会维护的一个脚本语言，它是基于JVM的语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy也可以使用其他非Java语言编写的库。开源的风控引擎radar就是使用的Groovy去实现的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;aviator：aviator又叫AviatorScript，是一门高性能、轻量级寄宿于 JVM 之上的脚本语言。又叫做表达式语言，提供的语法有限制，和js一样函数是一等公民，支持闭包和函数式编程。最主要它是google开源出来的一个项目，对于他的品质还是非常有保证的。在美团内部基本大部分使用规则引擎的场景比如风控，数据规则等等都选择了aviator这个轻量级的语言作为规则引擎。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;qlexpress：qlexpress是阿里开发的一个脚本语言，在阿里内部以及部分java系的公司都有使用，但是这个我不是太推荐，因为现在这个的社区活跃程度整体的确比较低，上一次更新是一年多前了。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么这三个jvm脚本语言我们怎么做选择呢？我个人来看的话还是比较推荐aviator，aviator和其他的两个语言不同，他只提供了有限的语法功能，不像groovy是一整套完整的语言，比如可以做一些危险的操作,如果输入了 &lt;code&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;可以直接退出我们的进程，但是在aviator是不会提供这种能力的，aviator最开始的时候连if/else,循环都不支持，在最新的5.0版本才支持这些功能，所以他提供的整体功能算是一个安全的沙箱。&lt;/p&gt;&lt;p&gt;Aviator 的基本过程是将表达式直接翻译成对应的 java 字节码执行，整个过程最多扫两趟（开启执行优先模式，如果是编译优先模式下就一趟），这样就保证了它的性能超越绝大部分解释性的表达式引擎，测试也证明如此；其次，除了依赖 commons-beanutils 这个库之外（用于做反射）不依赖任何第三方库，因此整体非常轻量级，整个 jar 包大小哪怕发展到现在 5.0 这个大版本，也才 430K。&lt;/p&gt;&lt;p&gt;回到上面的风控规则引擎，如果我们想实现订单金额大于100元并且用户属于vip这个规则在aviator中应该怎么做呢？&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; main&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;[]&lt;/span&gt;&lt;span&gt; args&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;//首先构造参数&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Map&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; env &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;HashMap&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Object&lt;/span&gt;&lt;span&gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        env&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;orderAmount&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;101&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        env&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;vip&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// 执行表达式逻辑&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AviatorEvaluator&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;execute&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;orderAmount &amp;gt; 100 &amp;amp;&amp;amp; vip&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; env&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// 输出true&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;可以看见首先我们构造用户是否是vip和订单金额这两个属性，接下来只需要定义 &lt;code&gt;&lt;span&gt;orderAmount&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span/&gt;&lt;span&gt;100&lt;/span&gt;&lt;span/&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;vip&lt;/span&gt;&lt;/code&gt; 这句表达式，就可以得到我们想到的结果。所以只要运营人员或者产品想到不同的规则，我们这边都可以马上进行配置，可以将这一条规则存到数据库里面，然后进行读取，执行。对于有界面的需求话需要和前端进行配合，让前端的一些控件能自动转换成这种表达式语言，就能完成自动化。&lt;/p&gt;&lt;p&gt;aviator虽然是区别于java的语言，但是其上手成本整体比较低，对于aviator语法有兴趣的可以看看5.0的文档: https://www.yuque.com/boyan-avfmj/aviatorscript&lt;/p&gt;&lt;h2&gt;java代码的规则引擎&lt;/h2&gt;&lt;p&gt;基于java的代码规则引擎往往是一种框架，我们基于框架限定的一些条件来进行实现。下面来看一个实例：如果我们有多个加编号的流程，比如猿辅导的我们加上编号前缀 &lt;code&gt;&lt;span&gt;tutor&lt;/span&gt;&lt;/code&gt;,斑马的我们加上编号前缀 &lt;code&gt;&lt;span&gt;conan&lt;/span&gt;&lt;/code&gt;,搜题的加上编号前缀 &lt;code&gt;&lt;span&gt;solar&lt;/span&gt;&lt;/code&gt;，我们的普通写法是怎么写的呢？&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;biz &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;猿辅导&quot;&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;            tradeNo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;tutor&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; tradeNo&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;biz &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;斑马&quot;&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;            tradeNo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;conan&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; tradeNo&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;biz &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;搜题&quot;&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;            tradeNo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;solar&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; tradeNo&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;通过if/else 进行处理，看起来这种写法也没什么大毛病，其实他破坏了开闭原则，比如我们增加或者修改逻辑的时候都需要去动这一段代码，如果不小心改错了影响到其他逻辑这就得不偿失了。那么我们如何通过easyRule完成我们的这个功能呢？&lt;/p&gt;&lt;pre&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;@Rule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;priority &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FudaoRule&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@Condition&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isFudao&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@Fact&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;biz&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; biz&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; biz &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;猿辅导&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@Action&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; process&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Facts&lt;/span&gt;&lt;span&gt; facts&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; tradeNo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; facts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tradeNo&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        facts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tradeNo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;tutor&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; tradeNo&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;@Rule&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;priority &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;BanmaRule&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@Condition&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isBanma&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;@Fact&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;biz&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; biz&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; biz &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;斑马&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;@Action&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; process&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Facts&lt;/span&gt;&lt;span&gt; facts&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt; tradeNo &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; facts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tradeNo&quot;&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;        facts&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;put&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;tradeNo&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;conan&quot;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; tradeNo&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;p&gt;我们实现这两个不同的类, &lt;code&gt;&lt;span&gt;@Rule&lt;/span&gt;&lt;/code&gt;注解中定义priority代表我们的if/else优先级， &lt;code&gt;&lt;span&gt;@Condition&lt;/span&gt;&lt;/code&gt;就是我们的条件判断，如果属于则进入条件判断， &lt;code&gt;&lt;span&gt;@Action&lt;/span&gt;&lt;/code&gt;是我们匹配之后的动作。通过这种方式如果后面再增加或者修改相关逻辑我们可以在不同的类里面去进行修改,也满足了我们的开闭原则。&lt;/p&gt;&lt;p&gt;easyRules也支持使用yaml文件来进行规则的定义，类似我们之前的dsl，但是我觉得实现java类注解的方式是它的大特点，很多同学如果只想选择一些java的扩展框架它的设计思想是一个值得参考，值得学习的框架。&lt;/p&gt;&lt;h1&gt;最后&lt;/h1&gt;&lt;p&gt;随着互联网平台，中台的兴起，规则引擎也随之渐渐更多的出现在大家的视野里面。如果大家好后面遇到这种灵活多变的业务，如果你还在被if/else的逻辑所困扰，如果你的产品或者运营人员老是吐槽你的开发更不上他的需求，那么请选择一款趁手的规则引擎去解决这些问题把。最后如果大家有什么想和我对于规则引擎有什么沟通的，都可以关注我的公众号和我取得联系。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果大家觉得这篇文章对你有帮助，你的关注和转发是对我最大的支持，O(∩_∩)O:&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/WLIGprPy3z62dlFO8L5otKLY57v4qmobnhIy8eyiaQXMwEccjhiaXH27tCJibxib1JYeEM9E6wyozbgMJg8oiaR994A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>23dc34fb3e873717715e479644f7325c</guid>
<title>阿里巴巴开源的，帮助你快速搭建本地和云端 IDE 的框架</title>
<link>https://toutiao.io/k/d51049l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078480&amp;amp;idx=2&amp;amp;sn=0e1f1297ea15bcd312f3fcfd37380149&amp;amp;chksm=bd2918678a5e917191830addbc44d575b07a2448d2b7db07311a4b7394e6b276b9bbfbc2fc95&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavicnodGjU9WYsic7gYCGWGVx28sXibCia11tG9g6AQCZ3XKlcO3FX3e4WB9Eic6uhs3nWDYtQNHQfqCbRQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078480&amp;amp;idx=2&amp;amp;sn=0e1f1297ea15bcd312f3fcfd37380149&amp;amp;chksm=bd2918678a5e917191830addbc44d575b07a2448d2b7db07311a4b7394e6b276b9bbfbc2fc95&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;拒绝焦虑，不妨从这份Newsletter开始！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;拒绝焦虑，不妨从这份Newsletter开始！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一款帮助你快速搭建本地和云端 IDE 的框架，旨在解决阿里经济体内部 IDE 产品研发的重复建设问题，满足 IDE 在更多垂直场景的定制能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时实现 Web 与本地客户端共用底层，让 IDE 研发从早期的“刀耕火种”时代向“机器化大生产”时代迈进。&lt;br/&gt;官网地址：https://opensumi.com/zh&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.3493333333333335&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;750&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNav94kTiaIPic70szhhGGzvY9b8Yhxicn9gX1CmdUtECm5FTpSqfKmX9TMpXJAL75sjw6anibmVNibq8O2rA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>51a4f0b0098d9da2af6848f78cf9d79f</guid>
<title>开源消息引擎系统 Kafka 3 新特性</title>
<link>https://toutiao.io/k/s838tzi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：kylequ，腾讯 PCG 数据工程师&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;kafka3.0 的版本已经试推行去 zk 的 kafka 架构了，如果去掉了 zk，那么在 kafka 新的版本当中使用什么技术来代替了 zk 的位置呢，接下来我们一起来一探究竟，了解 kafka 的内置共识机制和 raft 算法。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、Kafka 简介&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4952100221075903&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm9gfDpdpqEFbd7ygNMRsPSL05tbR6pHFnVpp2btQVyYAwPBnP9vMtNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1357&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 是一款开源的消息引擎系统。一个典型的 Kafka 体系架构包括若干 Producer、若干 Broker、若干 Consumer，以及一个 ZooKeeper 集群，如上图所示。其中 ZooKeeper 是 Kafka 用来负责集群元数据的管理、控制器的选举等操作的。Producer 将消息发送到 Broker，Broker 负责将收到的消息存储到磁盘中，而 Consumer 负责从 Broker 订阅并消费消息。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1、Kafka 核心组件&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.producer&lt;/strong&gt;：消息生产者，就是向 broker 发送消息的客户端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.consumer&lt;/strong&gt;：消息消费者，就是从 broker 拉取数据的客户端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.consumer group&lt;/strong&gt;：消费者组，由多个消费者 consumer 组成。消费者组内每个消费者负责消费不同的分区，一个分区只能由同一个消费者组内的一个消费者消费；消费者组之间相互独立，互不影响。所有的消费者都属于某个消费者组，即消费者组是一个逻辑上的订阅者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4.broker&lt;/strong&gt;：一台服务器就是一个 broker，一个集群由多个 broker 组成，一个 broker 可以有多个 topic。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5.topic&lt;/strong&gt;：可以理解为一个队列，所有的生产者和消费者都是面向 topic 的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6.partition&lt;/strong&gt;：分区，kafka 中的 topic 为了提高拓展性和实现高可用而将它分布到不同的 broker 中，一个 topic 可以分为多个 partition，每个 partition 都是有序的，即消息发送到队列的顺序跟消费时拉取到的顺序是一致的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;7.replication&lt;/strong&gt;：副本。一个 topic 对应的分区 partition 可以有多个副本，多个副本中只有一个为 leader，其余的为 follower。为了保证数据的高可用性，leader 和 follower 会尽量均匀的分布在各个 broker 中，避免了 leader 所在的服务器宕机而导致 topic 不可用的问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2、kafka2 当中 zk 的作用&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.2887700534759359&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm3GozhnmiaR4CUpGwLy0yicH4tE6PZ9H0EabFBeUyibnIiazXUxfvXcq2RA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;748&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/admin&lt;/strong&gt; ：主要保存 kafka 当中的核心的重要信息，包括类似于已经删除的 topic 就会保存在这个路径下面&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/brokers&lt;/strong&gt; ：主要用于保存 kafka 集群当中的 broker 信息，以及没被删除的 topic 信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/cluster&lt;/strong&gt; : 主要用于保存 kafka 集群的唯一 id 信息，每个 kafka 集群都会给分配要给唯一 id，以及对应的版本号&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/config&lt;/strong&gt; : 集群配置信息&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/controller&lt;/strong&gt; ：kafka 集群当中的控制器信息，控制器组件（Controller），是 Apache Kafka 的核心组件。它的主要作用是在 Apache ZooKeeper 的帮助下管理和协调整个 Kafka 集群。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/controller_epoch&lt;/strong&gt; ：主要用于保存记录 controller 的选举的次数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/isr_change_notification&lt;/strong&gt; ：isr 列表发生变更时候的通知，在 kafka 当中由于存在 ISR 列表变更的情况发生,为了保证 ISR 列表更新的及时性，定义了 isr_change_notification 这个节点，主要用于通知 Controller 来及时将 ISR 列表进行变更&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/latest_producer_id_block&lt;/strong&gt; ：使用&lt;code&gt;/latest_producer_id_block&lt;/code&gt;节点来保存 PID 块，主要用于能够保证生产者的任意写入请求都能够得到响应。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;/log_dir_event_notification&lt;/strong&gt; ：主要用于保存当 broker 当中某些 LogDir 出现异常时候,例如磁盘损坏,文件读写失败等异常时候,向 ZK 当中增加一个通知序号，controller 监听到这个节点的变化之后，就会做出对应的处理操作。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是 kafka 在 zk 当中保留的所有的所有的相关的元数据信息，这些元数据信息保证了 kafka 集群的正常运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、kafka3 的安装配置&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 kafka3 的版本当中已经彻底去掉了对 zk 的依赖，如果没有了 zk 集群，那么 kafka 当中是如何保存元数据信息的呢，这里我们通过 kafka3 的集群来一探究竟。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1、kafka 安装配置核心重要参数&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Controller 服务器&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是 kafka2 还是 kafka3 当中，controller 控制器都是必不可少的，通过 controller 控制器来维护 kafka 集群的正常运行，例如 ISR 列表的变更，broker 的上线或者下线，topic 的创建，分区的指定等等各种操作都需要依赖于 Controller，在 kafka2 当中，controller 的选举需要通过 zk 来实现，我们没法控制哪些机器选举成为 Controller,而在 kafka3 当中,我们可以通过配置文件来自己指定哪些机器成为 Controller,这样做的好处就是我们可以指定一些配置比较高的机器作为 Controller 节点,从而保证 controller 节点的稳健性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;被选中的 controller 节点参与元数据集群的选举，每个 controller 节点要么是 Active 状态，或者就是 standBy 状态。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5601300108342362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm8A7QeGtXeVhUxn0U0TWsM86o7wDmZVVKlntNT0IQYjB2HVibWRxicAUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;923&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;2.1.1、Process.Roles&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 KRaft 模式来运行 kafka 集群的话，我们有一个配置叫做 Process.Roles 必须配置，这个参数有以下四个值可以进行配置：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Process.Roles = Broker, 服务器在 KRaft 模式中充当 Broker。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Process.Roles = Controller, 服务器在 KRaft 模式下充当 Controller。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Process.Roles = Broker,Controller，服务器在 KRaft 模式中同时充当 Broker 和 Controller。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 process.roles 没有设置。那么集群就假定是运行在 ZooKeeper 模式下。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果需要从 zookeeper 模式转换成为 KRaft 模式，那么需要进行重新格式化。如果一个节点同时是 Broker 和 Controller 节点,那么就称之为组合节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际工作当中，如果有条件的话，尽量还是将 Broker 和 Controller 节点进行分离部署。避免由于服务器资源不够的情况导致 OOM 等一系列的问题&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;2.1.2、Quorum Voters&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过 controller.quorum.voters 配置来实习哪些节点是 Quorum 的投票节点,所有想要成为控制器的节点,都必须放到这个配置里面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个 Broker 和每个 Controller 都必须配置 Controller.quorum.voters，该配置当中提供的节点 ID 必须与提供给服务器的节点 ID 保持一直。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个 Broker 和每个 Controller 都必须设置 **&lt;code&gt;controller.quorum.voters&lt;/code&gt;**。需要注意的是，controller.quorum.voters 配置中提供的节点 ID 必须与提供给服务器的节点 ID 匹配。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在 Controller1 上，node.Id 必须设置为 1，以此类推。注意，控制器 id 不强制要求你从 0 或 1 开始。然而，分配节点 ID 的最简单和最不容易混淆的方法是给每个服务器一个数字 ID，然后从 0 开始。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2、下载并解压安装包&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;bigdata01 下载 kafka 的安装包，并进行解压：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kraft]$ cd /opt/soft/&lt;br/&gt;[hadoop@bigdata01 soft]$ wget http://archive.apache.org/dist/kafka/3.1.0/kafka_2.12-3.1.0.tgz&lt;br/&gt;[hadoop@bigdata01 soft]$ tar -zxf kafka_2.12-3.1.0.tgz -C /opt/install/&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改 kafka 的配置文件 broker.properties：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ cd /opt/install/kafka_2.12-3.1.0/config/kraft/&lt;br/&gt;[hadoop@bigdata01 kraft]$ vim broker.properties&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改编辑内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;node.id=1&lt;br/&gt;controller.quorum.voters=1@bigdata01:9093&lt;br/&gt;listeners=PLAINTEXT://bigdata01:9092&lt;br/&gt;advertised.listeners=PLAINTEXT://bigdata01:9092&lt;br/&gt;log.dirs=/opt/install/kafka_2.12-3.1.0/kraftlogs&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建两个文件夹：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ mkdir -p /opt/install/kafka_2.12-3.1.0/kraftlogs&lt;br/&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ mkdir -p /opt/install/kafka_2.12-3.1.0/topiclogs&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步安装包到其他机器上面去&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3、服务器集群启动&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动 kafka 服务：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$  ./bin/kafka-storage.sh random-uuid&lt;br/&gt;YkJwr6RESgSJv-sxa1R1mA&lt;br/&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$  ./bin/kafka-storage.sh format -t YkJwr6RESgSJv-sxa1R1mA -c ./config/kraft/server.properties&lt;br/&gt;Formatting /opt/install/kafka_2.12-3.1.0/topiclogs&lt;br/&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ ./bin/kafka-server-start.sh ./config/kraft/server.properties&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4、创建 kafka 的 topic&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群启动成功之后，就可以来创建 kafka 的 topic 了，使用以下命令来创建 kafka 的 topic&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;./bin/kafka-topics.sh --create --topic kafka_test --partitions 3 --replication-factor 2 --bootstrap-server bigdata01:9092,bigdata02:9092,bigdata03:9092&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.5、任意一台机器查看 kafka 的 topic&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;组成集群之后，任意一台机器就可以通过以下命令来查看到刚才创建的 topic 了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata03 ~]$ cd /opt/install/kafka_2.12-3.1.0/&lt;br/&gt;[hadoop@bigdata03 kafka_2.12-3.1.0]$ bin/kafka-topics.sh  --list --bootstrap-server bigdata01:9092,bigdata02:9092,bigdata03:9092&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.6、消息生产与消费&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用命令行来生产以及消费 kafka 当中的消息&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ bin/kafka-console-producer.sh --bootstrap-server bigdata01:9092,bigdata02:9092,bigdata03:9092 --topic kafka_test&lt;br/&gt;&lt;br/&gt;[hadoop@bigdata02 kafka_2.12-3.1.0]$ bin/kafka-console-consumer.sh --bootstrap-server bigdata01:9092,bigdata02:9092,bigdata03:9092 --topic kafka_test --from-beginning&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、Kafka 当中 Raft 的介绍&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1、kafka 强依赖 zk 所引发的问题&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经看到了 kafka3 集群在没有 zk 集群的依赖下，也可以正常运行，那么 kafka2 在 zk 当中保存的各种重要元数据信息，在 kafka3 当中如何实现保存的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 一直都是使用 zk 来管理集群以及所有的 topic 的元数据，并且使用了 zk 的强一致性来选举集群的 controller，controller 对整个集群的管理至关重要，包括分区的新增，ISR 列表的维护，等等很多功能都需要靠 controller 来实现，然后使用 zk 来维护 kafka 的元数据也存在很多的问题以及存在性能瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是 kafka 将元数据保存在 zk 当中的诸多问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1、元数据存取困难&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元数据的存取过于困难，每次重新选举的 controller 需要把整个集群的元数据重新 restore，非常的耗时且影响集群的可用性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2、元数据更新网络开销大&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个元数据的更新操作也是以全量推的方式进行，网络的开销也会非常大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3、强耦合违背软件设计原则&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Zookeeper 对于运维来说，维护 Zookeeper 也需要一定的开销，并且 kafka 强耦合与 zk 也并不好，还得时刻担心 zk 的宕机问题，违背软件设计的高内聚，低耦合的原则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4、网络分区复杂度高&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Zookeeper 本身并不能兼顾到 broker 与 broker 之间通信的状态，这就会导致网络分区的复杂度成几何倍数增长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5、zk 本身不适合做消息队列&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;zookeeper 不适合做消息队列，因为 zookeeper 有 1M 的消息大小限制 zookeeper 的 children 太多会极大的影响性能 znode 太大也会影响性能 znode 太大会导致重启 zkserver 耗时 10-15 分钟 zookeeper 仅使用内存作为存储，所以不能存储太多东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;6、并发访问 zk 问题多&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最好单线程操作 zk 客户端，不要并发，临界、竞态问题太多&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上各种问题，所以提出了脱离 zk 的方案，转向自助研发强一致性的元数据解决方案，也就是 KIP-500。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KIP-500 议案提出了在 Kafka 中处理元数据的更好方法。基本思想是&quot;&lt;strong&gt;Kafka on Kafka&lt;/strong&gt;&quot;，将 Kafka 的元数据存储在 Kafka 本身中，无需增加额外的外部存储比如 ZooKeeper 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去 zookeeper 之后的 kafka 新的架构&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5601300108342362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm8A7QeGtXeVhUxn0U0TWsM86o7wDmZVVKlntNT0IQYjB2HVibWRxicAUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;923&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 KIP-500 中，Kafka 控制器会将其元数据存储在 Kafka 分区中，而不是存储在 ZooKeeper 中。但是，由于控制器依赖于该分区，因此分区本身不能依赖控制器来进行领导者选举之类的事情。而是，管理该分区的节点必须实现自我管理的 Raft 仲裁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 kafka3.0 的新的版本当中，使用了新的 KRaft 协议，使用该协议来保证在元数据仲裁中准确的复制元数据，这个协议类似于 zk 当中的 zab 协议以及类似于 Raft 协议，但是 KRaft 协议使用的是基于事件驱动的模式，与 ZAB 协议和 Raft 协议还有点不一样&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 kafka3.0 之前的的版本当中，主要是借助于 controller 来进行 leader partition 的选举，而在 3.0 协议当中，使用了 KRaft 来实现自己选择 leader，并最终令所有节点达成共识，这样简化了 controller 的选举过程，效果更加高效。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2、kakfa3 Raft&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经知道了在 kafka3 当中可以不用再依赖于 zk 来保存 kafka 当中的元数据了，转而使用 Kafka Raft 来实现元数据的一致性，简称&lt;strong&gt;KRaft&lt;/strong&gt;，并且将元数据保存在 kafka 自己的服务器当中，大大提高了 kafka 的元数据管理的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KRaft 运行模式的 Kafka 集群，不会将元数据存储在 Apache ZooKeeper 中。即部署新集群的时候，无需部署 ZooKeeper 集群，因为 Kafka 将元数据存储在 Controller 节点的 KRaft Quorum 中。KRaft 可以带来很多好处，比如可以支持更多的分区，更快速的切换 Controller，也可以避免 Controller 缓存的元数据和 Zookeeper 存储的数据不一致带来的一系列问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在新的版本当中，控制器 Controller 节点我们可以自己进行指定,这样最大的好处就是我们可以自己选择一些配置比较好的机器成为 Controller 节点，而不像在之前的版本当中，我们无法指定哪台机器成为 Controller 节点，而且 controller 节点与 broker 节点可以运行在同一台机器上，并且控制器 controller 节点不再向 broker 推送更新消息,而是让 Broker 从这个 Controller Leader 节点进行拉去元数据的更新。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7484407484407485&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmsmSuxkgVjgyPCDJxsZADibiaupTmF6J5UO7vquZAozrjWaETKgzgwOJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;481&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3、如何查看 kafka3 当中的元数据信息&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 kafka3 当中，不再使用 zk 来保存元数据信息了，那么在 kafka3 当中如何查看元数据信息呢，我们也可以通过 kafka 自带的命令来进行查看元数据信息，在 KRaft 中，有两个命令常用命令脚本，kafka-dump-log.sh 和 kakfa-metadata-shell.sh 需要我们来进行关注，因为我们可以通过这两个脚本来查看 kafka 当中保存的元数据信息。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3.1、&lt;strong&gt;Kafka-dump-log.sh&lt;/strong&gt; 脚本来导出元数据信息&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;KRaft 模式下，所有的元数据信息都保存到了一个内部的 topic 上面，叫做@metadata，例如 Broker 的信息,Topic 的信息等,我们都可以去到这个 topic 上面进行查看,我们可以通过 kafka-dump-log.sh 这个脚本来进行查看该 topic 的信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka-dump-log.sh 是一个之前就有的工具，用来查看 Topic 的的文件内容。这工具加了一个参数--cluster-metadata-decoder 用来，查看元数据日志，如下所示:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ cd /opt/install/kafka_2.12-3.1.0&lt;br/&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ bin/kafka-dump-log.sh  --cluster-metadata-decoder --skip-record-metadata  --files  /opt/install/kafka_2.12-3.1.0/topiclogs/__cluster_metadata-0/00000000000000000000.index,/opt/install/kafka_2.12-3.1.0/topiclogs/__cluster_metadata-0/00000000000000000000.log  &amp;gt;&amp;gt;/opt/metadata.txt&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3.2、kafka-metadata-shell.sh 直接查看元数据信息&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;平时我们用 zk 的时候，习惯了用 zk 命令行查看数据，简单快捷。bin 目录下自带了 kafka-metadata-shell.sh 工具，可以允许你像 zk 一样方便的查看数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 kafka-metadata-shell.sh 脚本进入 kafka 的元数据客户端&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[hadoop@bigdata01 kafka_2.12-3.1.0]$ bin/kafka-metadata-shell.sh --snapshot /opt/install/kafka_2.12-3.1.0/topiclogs/__cluster_metadata-0/00000000000000000000.log&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、Raft 算法介绍&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;raft 算法中文版本翻译介绍：https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;著名的&lt;strong&gt;CAP&lt;/strong&gt;原则又称 CAP 定理的提出，真正奠基了分布式系统的诞生，CAP 定理指的是在一个分布式系统中，[一致性]、[可用性]（Availability）、[分区容错性]（Partition tolerance），这三个要素最多只能同时实现两点，不可能三者兼顾(nosql)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式系统为了提高系统的可靠性，一般都会选择使用多副本的方式来进行实现，例如 hdfs 当中数据的多副本，kafka 集群当中分区的多副本等，但是一旦有了多副本的话，那么久面临副本之间一致性的问题，而一致性算法就是 用于解决分布式环境下多副本的数据一致性的问题。业界最著名的一致性算法就是大名鼎鼎的 Paxos，但是&lt;strong&gt;Paxos&lt;/strong&gt;比较晦涩难懂，不太容易理解，所以还有一种叫做 Raft 的算法，更加简单容易理解的实现了一致性算法。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1、Raft 协议的工作原理&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1.1、Raft 协议当中的角色分布&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Raft 协议将分布式系统当中的角色分为 Leader（领导者），Follower（跟从者）以及 Candidate（候选者）&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Leader&lt;/strong&gt;：主节点的角色，主要是接收客户端请求，并向 Follower 同步日志，当日志同步到过半及以上节点之后，告诉 follower 进行提交日志&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Follower&lt;/strong&gt;：从节点的角色，接受并持久化 Leader 同步的日志，在 Leader 通知可以提交日志之后，进行提交保存的日志&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Candidate&lt;/strong&gt;：Leader 选举过程中的临时角色。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.975609756097561&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmgeSr1iclMTtPRdAUiaRt4uYfuNH64bmIFXsZ6qoBe8KqIuJnQ0v4lwtw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;656&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1.2、Raft 协议当中的底层原理&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Raft 协议当中会选举出 Leader 节点，Leader 作为主节点，完全负责 replicate log 的管理。Leader 负责接受所有客户端的请求，然后复制到 Follower 节点，如果 leader 故障，那么 follower 会重新选举 leader，Raft 协议的一致性，概括主要可以分为以下三个重要部分&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 Leader 选举和日志复制是 Raft 协议当中最为重要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Raft 协议要求系统当中，任意一个时刻，只有一个 leader，正常工作期间，只有 Leader 和 Follower 角色，并且 Raft 协议采用了类似网络租期的方式来进行管理维护整个集群，Raft 协议将时间分为一个个的时间段（term），也叫作任期，每一个任期都会选举一个 Leader 来管理维护整个集群，如果这个时间段的 Leader 宕机，那么这一个任期结束，继续重新选举 leader。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Raft 算法将时间划分成为任意不同长度的任期（term）&lt;/strong&gt;。任期用连续的数字进行表示。&lt;strong&gt;每一个任期的开始都是一次选举（election），一个或多个候选人会试图成为领导人&lt;/strong&gt;。如果一个候选人赢得了选举，它就会在该任期的剩余时间担任领导人。在某些情况下，选票会被瓜分，有可能没有选出领导人，那么，将会开始另一个任期，并且立刻开始下一次选举。&lt;strong&gt;Raft 算法保证在给定的一个任期最多只有一个领导人&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40355677154582764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmJoib2KIOKGGaGyMwk93L8qBUcribOeg6iapNET2TwDGJ9z8HdMkXBcgyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1462&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1.3、Leader 选举的过程&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Raft 使用心跳来进行触发 leader 选举，当服务器启动时，初始化为 follower 角色。leader 向所有 Follower 发送周期性心跳，如果 Follower 在选举超时间内没有收到 Leader 的心跳，就会认为 leader 宕机，稍后发起 leader 的选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个 Follower 都会有一个倒计时时钟，是一个随机的值，表示的是 Follower 等待成为 Leader 的时间，倒计时时钟先跑完，就会当选成为 Leader，这样做得好处就是每一个节点都有机会成为 Leader。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41264667535853977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmbCDqokgAeicKCsicspKFGJXIDzk9t2RnWDIrCXWiaNhQC1L2JWrK26uaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1534&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当满足以下三个条件之一时，Quorum 中的某个节点就会触发选举：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;向 Leader 发送 Fetch 请求后，在超时阈值 quorum.fetch.timeout.ms 之后仍然没有得到 Fetch 响应，表示 Leader 疑似失败；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从当前 Leader 收到了 EndQuorumEpoch 请求，表示 Leader 已退位；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Candidate 状态下，在超时阈值 quorum.election.timeout.ms 之后仍然没有收到多数票，也没有 Candidate 赢得选举，表示此次选举作废，重新进行选举。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体详细过程实现描述如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;增加节点本地的 current term，切换到 candidate 状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己给自己投一票&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给其他节点发送 RequestVote RPCs，要求其他节点也投自己一票&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等待其他节点的投票回复&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个过程中的投票过程可以用下图进行表述：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6893854748603352&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm4kuRb9mYmOcQy9teZaicviaicFkryuuKvd3jyGBAy8H5ZaxsMzamob02w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;895&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;leader 节点选举的限制&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每个节点只能投一票，投给自己或者投给别人&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;候选人所知道的日志信息，一定不能比自己的更少，即能被选举成为 leader 节点，一定包含了所有已经提交的日志&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;先到先得的原则&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.1.4、数据一致性保证（日志复制机制）&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面通过选举机制之后，选举出来了 leader 节点，然后 leader 节点对外提供服务，所有的客户端的请求都会发送到 leader 节点，由 leader 节点来调度这些并发请求的处理顺序，保证所有节点的状态一致，&lt;strong&gt;leader 会把请求作为日志条目（Log entries）加入到他的日志当中，然后并行的向其他服务器发起 AppendEntries RPC 复制日志条目。&lt;/strong&gt;当这条请求日志被成功复制到大多数服务器上面之后，Leader 将这条日志应用到它的状态机并向客户端返回执行结果。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;客户端的每个请求都包含被复制状态机执行的指令&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;leader 将客户端请求作为一条心得日志添加到日志文件中，然后并行发起 RPC 给其他的服务器，让他们复制这条信息到自己的日志文件中保存。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果这条日志被成功复制，也就是大部分的 follower 都保存好了执行指令日志，leader 就应用这条日志到自己的状态机中，并返回给客户端。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 follower 宕机或者运行缓慢或者数据丢失，leader 会不断地进行重试，直至所有在线的 follower 都成功复制了所有的日志条目。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.555366269165247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmo7b5vcfmfDlcp2xmTFuicjevvqa6ad2p4vib7VILhkibtr42k2WqJ942g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1174&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与维护 Consumer offset 的方式类似，脱离 ZK 之后的 Kafka 集群将元数据视为日志，保存在一个内置的 Topic 中，且该 Topic 只有一个 Partition。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36203703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmqHK3CLP8yUhoXichnPkz0fMWut8azic9ZOlv7zAZ1j23Q59E5oX9ee0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元数据日志的消息格式与普通消息没有太大不同，但必须携带 Leader 的纪元值(即之前的 Controller epoch)：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Record =&amp;gt; Offset LeaderEpoch ControlType Key Value Timestamp&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，Follower 以拉模式复制 Leader 日志，就相当于以 Consumer 角色消费元数据 Topic，符合 Kafka 原生的语义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么在 KRaft 协议中，是如何维护哪些元数据日志已经提交——即已经成功复制到多数的 Follower 节点上的呢？Kafka 仍然借用了原生副本机制中的概念——high watermark(HW，高水位线)保证日志不会丢失，HW 的示意图如下。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2744310575635877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmGTgpgnoneFSGNTtkh3xIHNQvhuHctHgmCI2erDPGuwCtTmNCFdb3jg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;747&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;状态机说明&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要让所有节点达成一致性的状态，大部分都是基于复制状态机来实现的（Replicated state machine）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说就是：&lt;strong&gt;初始相同的状态 + 相同的输入过程 = 相同的结束状态&lt;/strong&gt;，这个其实也好理解，就类似于一对双胞胎，出生时候就长得一样，然后吃的喝的用的穿的都一样，你自然很难分辨。其中最重要的就是一定要注意中间的相同输入过程，各个不同节点要以相同且确定性的函数来处理输入，而不要引入一个不确定的值。使用 replicated log 来实现每个节点都顺序的写入客户端请求，然后顺序的处理客户端请求，最终就一定能够达到最终一致性。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;状态机安全性保证&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在安全性方面，KRaft 与传统 Raft 的选举安全性、领导者只追加、日志匹配和领导者完全性保证都是几乎相同的。下面只简单看看状态机安全性是如何保证的，仍然举论文中的极端例子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.026246719160105&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmhU1vxgL3emUxu2KXr5UtbALa7N77hN1c2m4IMjwlpdSjZpSdib195WA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;762&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在时刻 a，节点 S1 是 Leader，epoch=2 的日志只复制给了 S2 就崩溃了；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在时刻 b，S5 被选举为 Leader，epoch=3 的日志还没来得及复制，也崩溃了；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在时刻 c，S1 又被选举为 Leader，继续复制日志，将 epoch=2 的日志给了 S3。此时该日志复制给了多数节点，但还未提交；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在时刻 d，S1 又崩溃，并且 S5 重新被选举为领导者，将 epoch=3 的日志复制给 S0~S4。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时日志与新 Leader S5 的日志发生了冲突，如果按上图中 d1 的方式处理，消息 2 就会丢失。传统 Raft 协议的处理方式是：在 Leader 任期开始时，立刻提交一条空的日志，所以上图中时刻 c 的情况不会发生，而是如同 d2 一样先提交 epoch=4 的日志，连带提交 epoch=2 的日志。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与传统 Raft 不同，KRaft 附加了一个较强的约束：当新的 Leader 被选举出来，但还没有成功提交属于它的 epoch 的日志时，不会向前推进 HW。也就是说，即使上图中时刻 c 的情况发生了，消息 2 也被视为没有成功提交，所以按照 d1 方式处理是安全的。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;日志格式说明&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所有节点持久化保存在本地的日志，大概就是类似于这个样子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5288888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmss90x7Qv7S8BvlK3tkZibtnticj731PruZRcfaXF5ic3TIq0jSgLiblP8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1125&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图显示，共有八条日志数据，其中已经提交了 7 条，提交的日志都将通过状态机持久化到本地磁盘当中，防止宕机。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;日志复制的保证机制&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果两个节点不同的日志文件当中存储着相同的索引和任期号，那么他们所存储的命令是相同的。（原因：leader 最多在一个任期里的一个日志索引位置创建一条日志条目，日志条目所在的日志位置从来不会改变）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果不同日志中两个条目有着相同的索引和任期号，那么他们之前的所有条目都是一样的（原因：每次 RPC 发送附加日志时，leader 会把这条日志前面的日志下标和任期号一起发送给 follower，如果 follower 发现和自己的日志不匹配，那么就拒绝接受这条日志，这个称之为一致性检查）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;日志的不正常情况&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，Leader 和 Followers 的日志保持一致，因此 Append Entries 一致性检查通常不会失败。然而，Leader 崩溃可能会导致日志不一致：&lt;strong&gt;旧的 Leader 可能没有完全复制完日志中的所有条目&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图阐述了一些 Followers 可能和新的 Leader 日志不同的情况。&lt;strong&gt;一个 Follower 可能会丢失掉 Leader 上的一些条目，也有可能包含一些 Leader 没有的条目，也有可能两者都会发生&lt;/strong&gt;。丢失的或者多出来的条目可能会持续多个任期。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6148919135308246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmJUB7bhvjGoTicmThXSusE8Jq9IL4bFJvjKOCsl7EVIs8AM6uPqXYkhg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1249&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何保证日志的正常复制&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果出现了上述 leader 宕机，导致 follower 与 leader 日志不一致的情况，那么就需要进行处理，保证 follower 上的日志与 leader 上的日志保持一致，leader 通过强制 follower 复制它的日志来处理不一致的问题，follower 与 leader 不一致的日志会被强制覆盖。&lt;strong&gt;leader 为了最大程度的保证日志的一致性，且保证日志最大量，leader 会寻找 follower 与他日志一致的地方，然后覆盖 follower 之后的所有日志条目，从而实现日志数据的一致性。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的操作就是：leader 会从后往前不断对比，每次 Append Entries 失败后尝试前一个日志条目，直到成功找到每个 Follower 的日志一致的位置点，然后向该 Follower 所在位置之后的条目进行覆盖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;详细过程如下：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Leader 维护了每个 Follower 节点下一次要接收的日志的索引，即 nextIndex&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Leader 选举成功后将所有 Follower 的 nextIndex 设置为自己的最后一个日志条目+1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Leader 将数据推送给 Follower，如果 Follower 验证失败（nextIndex 不匹配），则在下一次推送日志时缩小 nextIndex，直到 nextIndex 验证通过&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下就是：&lt;strong&gt;当 leader 和 follower 日志冲突的时候&lt;/strong&gt;，leader 将&lt;strong&gt;校验 follower 最后一条日志是否和 leader 匹配&lt;/strong&gt;，如果不匹配，&lt;strong&gt;将递减查询，直到匹配，匹配后，删除冲突的日志&lt;/strong&gt;。这样就实现了主从日志的一致性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.2、Raft 协议算法代码实现&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面我们已经大致了解了 Raft 协议算法的实现原理，如果我们要自己实现一个 Raft 协议的算法，其实就是将我们讲到的理论知识给翻译成为代码的过程，具体的开发需要考虑的细节比较多，代码量肯定也比较大，好在有人已经实现了 Raft 协议的算法了，我们可以直接拿过来使用&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建 maven 工程并导入 jar 包地址如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;br/&gt;&lt;br/&gt;        &amp;lt;dependency&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;com.github.wenweihu86.raft&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;raft-java-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;            &amp;lt;version&amp;gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;br/&gt;        &amp;lt;dependency&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;com.github.wenweihu86.rpc&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;rpc-java&amp;lt;/artifactId&amp;gt;&lt;br/&gt;            &amp;lt;version&amp;gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;br/&gt;        &amp;lt;dependency&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;org.rocksdb&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;rocksdbjni&amp;lt;/artifactId&amp;gt;&lt;br/&gt;            &amp;lt;version&amp;gt;&lt;span&gt;5.1&lt;/span&gt;&lt;span&gt;.4&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;br/&gt;    &amp;lt;/dependencies&amp;gt;&lt;br/&gt;    &amp;lt;build&amp;gt;&lt;br/&gt;        &amp;lt;plugins&amp;gt;&lt;br/&gt;            &amp;lt;plugin&amp;gt;&lt;br/&gt;                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&lt;br/&gt;                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&lt;br/&gt;                &amp;lt;version&amp;gt;&lt;span&gt;3.5&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;                &amp;lt;configuration&amp;gt;&lt;br/&gt;                    &amp;lt;source&amp;gt;&lt;span&gt;1.8&lt;/span&gt;&amp;lt;/source&amp;gt;&lt;br/&gt;                    &amp;lt;target&amp;gt;&lt;span&gt;1.8&lt;/span&gt;&amp;lt;/target&amp;gt;&lt;br/&gt;                &amp;lt;/configuration&amp;gt;&lt;br/&gt;            &amp;lt;/plugin&amp;gt;&lt;br/&gt;        &amp;lt;/plugins&amp;gt;&lt;br/&gt;    &amp;lt;/build&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义 Server 端代码实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Server1&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// parse args&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// peers, format is &quot;host:port:serverId,host2:port2:serverId2&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//localhost:16010:1,localhost:16020:2,localhost:16030:3 localhost:16010:1&lt;/span&gt;&lt;br/&gt;        String servers = &lt;span&gt;&quot;localhost:16010:1,localhost:16020:2,localhost:16030:3&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// local server&lt;/span&gt;&lt;br/&gt;        RaftMessage.Server localServer = parseServer(&lt;span&gt;&quot;localhost:16010:1&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        String[] splitArray = servers.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;        List&amp;lt;RaftMessage.Server&amp;gt; serverList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String serverString : splitArray) {&lt;br/&gt;            RaftMessage.Server server = parseServer(serverString);&lt;br/&gt;            serverList.add(server);&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 初始化RPCServer&lt;/span&gt;&lt;br/&gt;        RPCServer server = &lt;span&gt;new&lt;/span&gt; RPCServer(localServer.getEndPoint().getPort());&lt;br/&gt;        &lt;span&gt;// 设置Raft选项，比如：&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// just for test snapshot&lt;/span&gt;&lt;br/&gt;        RaftOptions raftOptions = &lt;span&gt;new&lt;/span&gt; RaftOptions();&lt;br/&gt;      &lt;span&gt;/*  raftOptions.setSnapshotMinLogSize(10 * 1024);&lt;br/&gt;        raftOptions.setSnapshotPeriodSeconds(30);&lt;br/&gt;        raftOptions.setMaxSegmentFileSize(1024 * 1024);*/&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;// 应用状态机&lt;/span&gt;&lt;br/&gt;        ExampleStateMachine stateMachine = &lt;span&gt;new&lt;/span&gt; ExampleStateMachine(raftOptions.getDataDir());&lt;br/&gt;        &lt;span&gt;// 初始化RaftNode&lt;/span&gt;&lt;br/&gt;        RaftNode raftNode = &lt;span&gt;new&lt;/span&gt; RaftNode(raftOptions, serverList, localServer, stateMachine);&lt;br/&gt;        raftNode.getLeaderId();&lt;br/&gt;        &lt;span&gt;// 注册Raft节点之间相互调用的服务&lt;/span&gt;&lt;br/&gt;        RaftConsensusService raftConsensusService = &lt;span&gt;new&lt;/span&gt; RaftConsensusServiceImpl(raftNode);&lt;br/&gt;        server.registerService(raftConsensusService);&lt;br/&gt;        &lt;span&gt;// 注册给Client调用的Raft服务&lt;/span&gt;&lt;br/&gt;        RaftClientService raftClientService = &lt;span&gt;new&lt;/span&gt; RaftClientServiceImpl(raftNode);&lt;br/&gt;        server.registerService(raftClientService);&lt;br/&gt;        &lt;span&gt;// 注册应用自己提供的服务&lt;/span&gt;&lt;br/&gt;        ExampleService exampleService = &lt;span&gt;new&lt;/span&gt; ExampleServiceImpl(raftNode, stateMachine);&lt;br/&gt;        server.registerService(exampleService);&lt;br/&gt;        &lt;span&gt;// 启动RPCServer，初始化Raft节点&lt;/span&gt;&lt;br/&gt;        server.start();&lt;br/&gt;        raftNode.init();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RaftMessage.&lt;span&gt;Server &lt;span&gt;parseServer&lt;/span&gt;&lt;span&gt;(String serverString)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String[] splitServer = serverString.split(&lt;span&gt;&quot;:&quot;&lt;/span&gt;);&lt;br/&gt;        String host = splitServer[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        Integer port = Integer.parseInt(splitServer[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;        Integer serverId = Integer.parseInt(splitServer[&lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;        RaftMessage.EndPoint endPoint = RaftMessage.EndPoint.newBuilder()&lt;br/&gt;                .setHost(host).setPort(port).build();&lt;br/&gt;        RaftMessage.Server.Builder serverBuilder = RaftMessage.Server.newBuilder();&lt;br/&gt;        RaftMessage.Server server = serverBuilder.setServerId(serverId).setEndPoint(endPoint).build();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; server;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义客户端代码实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClientMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// parse args&lt;/span&gt;&lt;br/&gt;        String ipPorts = args[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        String key = args[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;        String value = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (args.length &amp;gt; &lt;span&gt;2&lt;/span&gt;) {&lt;br/&gt;            value = args[&lt;span&gt;2&lt;/span&gt;];&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// init rpc client&lt;/span&gt;&lt;br/&gt;        RPCClient rpcClient = &lt;span&gt;new&lt;/span&gt; RPCClient(ipPorts);&lt;br/&gt;        ExampleService exampleService = RPCProxy.getProxy(rpcClient, ExampleService&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; JsonFormat.Printer printer = JsonFormat.printer().omittingInsignificantWhitespace();&lt;br/&gt;        &lt;span&gt;// set&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            ExampleMessage.SetRequest setRequest = ExampleMessage.SetRequest.newBuilder()&lt;br/&gt;                    .setKey(key).setValue(value).build();&lt;br/&gt;            ExampleMessage.SetResponse setResponse = exampleService.set(setRequest);&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                System.out.printf(&lt;span&gt;&quot;set request, key=%s value=%s response=%s\n&quot;&lt;/span&gt;,&lt;br/&gt;                        key, value, printer.print(setResponse));&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (Exception ex) {&lt;br/&gt;                ex.printStackTrace();&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// get&lt;/span&gt;&lt;br/&gt;            ExampleMessage.GetRequest getRequest = ExampleMessage.GetRequest.newBuilder().setKey(key).build();&lt;br/&gt;            ExampleMessage.GetResponse getResponse = exampleService.get(getRequest);&lt;br/&gt;            &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;                String value1 = getResponse.getValue();&lt;br/&gt;                System.out.println(value1);&lt;br/&gt;                System.out.printf(&lt;span&gt;&quot;get request, key=%s, response=%s\n&quot;&lt;/span&gt;,&lt;br/&gt;                        key, printer.print(getResponse));&lt;br/&gt;            } &lt;span&gt;catch&lt;/span&gt; (Exception ex) {&lt;br/&gt;                ex.printStackTrace();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        rpcClient.stop();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先启动服务端，然后启动客户端，就可以将实现客户端向服务端发送消息，并且服务端会向三台机器进行保存消息了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、Kafka 常见问题&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;1.消息队列模型知道吗?Kafka 是怎么做到支持这两种模型的？&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于传统的消息队列系统支持两个模型：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.点对点：也就是消息只能被一个消费者消费，消费完后消息删除&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.发布订阅：相当于广播模式，消息可以被所有消费者消费&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 其实就是通过 Consumer Group 同时支持了这两个模型。如果说所有消费者都属于一个 Group，消息只能被同一个 Group 内的一个消费者消费，那就是点对点模式。如果每个消费者都是一个单独的 Group，那么就是发布订阅模式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;2.说说 Kafka 通信过程原理吗?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.首先 kafka broker 启动的时候，会去向 Zookeeper 注册自己的 ID（创建临时节点），这个 ID 可以配置也可以自动生成，同时会去订阅 Zookeeper 的 brokers/ids 路径，当有新的 broker 加入或者退出时，可以得到当前所有 broker 信。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.生产者启动的时候会指定 bootstrap.servers，通过指定的 broker 地址，Kafka 就会和这些 broker 创建 TCP 连接（通常我们不用配置所有的 broker 服务器地址，否则 kafka 会和配置的所有 broker 都建立 TCP 连接）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3.随便连接到任何一台 broker 之后，然后再发送请求获取元数据信息（包含有哪些主题、主题都有哪些分区、分区有哪些副本，分区的 Leader 副本等信息）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4.接着就会创建和所有 broker 的 TCP 连接&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5.之后就是发送消息的过程&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6.消费者和生产者一样，也会指定 bootstrap.servers 属性，然后选择一台 broker 创建 TCP 连接，发送请求找到协调者所在的 broker&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7.然后再和协调者 broker 创建 TCP 连接，获取元数据&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;8.根据分区 Leader 节点所在的 broker 节点，和这些 broker 分别创建连接&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;9.最后开始消费消息&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmP9kDkliaKThbQz8hfTz8KanLYxXWlU3FQTRibZUZgybtgug0oI2Pa0Ow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;3.发送消息时如何选择分区的?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要有两种方式：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.轮询，按照顺序消息依次发送到不同的分区&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.随机，随机发送到某个分区&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果消息指定 key，那么会根据消息的 key 进行 hash，然后对 partition 分区数量取模，决定落在哪个分区上，所以，对于相同 key 的消息来说，总是会发送到同一个分区上，也是我们常说的消息分区有序性。很常见的场景就是我们希望下单、支付消息有顺序，这样以订单 ID 作为 key 发送消息就达到了分区有序性的目的。如果没有指定 key，会执行默认的轮询负载均衡策略，比如第一条消息落在 P0，第二条消息落在 P1，然后第三条又在 P1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，对于一些特定的业务场景和需求，还可以通过实现 Partitioner 接口，重写 configure 和 partition 方法来达到自定义分区的效果。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;4.为什么需要分区?有什么好处?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题很简单，如果说不分区的话，我们发消息写数据都只能保存到一个节点上，这样的话就算这个服务器节点性能再好最终也支撑不住。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上分布式系统都面临这个问题，要么收到消息之后进行数据切分，要么提前切分，kafka 正是选择了前者，通过分区可以把数据均匀地分布到不同的节点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分区带来了负载均衡和横向扩展的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发送消息时可以根据分区的数量落在不同的 Kafka 服务器节点上，提升了并发写消息的性能，消费消息的时候又和消费者绑定了关系，可以从不同节点的不同分区消费消息，提高了读消息的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外一个就是分区又引入了副本，冗余的副本保证了 Kafka 的高可用和高持久性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;5.详细说说消费者组和消费者重平衡？&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 中的消费者组订阅 topic 主题的消息，一般来说消费者的数量最好要和所有主题分区的数量保持一致最好（举例子用一个主题，实际上当然是可以订阅多个主题）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当消费者数量小于分区数量的时候，那么必然会有一个消费者消费多个分区的消息。而消费者数量超过分区的数量的时候，那么必然会有消费者没有分区可以消费。所以，消费者组的好处一方面在上面说到过，可以支持多种消息模型，另外的话根据消费者和分区的消费关系，支撑横向扩容伸缩。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25462962962962965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm2HWVcvmGNXXg2Kswpco1jbjCdic3oQDu5u5eunHiaRF3eBsQYv0VeEhw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们知道消费者如何消费分区的时候，就显然会有一个问题出现了，消费者消费的分区是怎么分配的，有先加入的消费者时候怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;旧版本的重平衡过程主要通过 ZK 监听器的方式来触发，每个消费者客户端自己去执行分区分配算法。新版本则是通过协调者来完成，每一次新的消费者加入都会发送请求给协调者去获取分区的分配，这个分区分配的算法逻辑由协调者来完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而重平衡 Rebalance 就是指的有新消费者加入的情况，比如刚开始我们只有消费者 A 在消费消息，过了一段时间消费者 B 和 C 加入了，这时候分区就需要重新分配，这就是重平衡，也可以叫做再平衡，但是重平衡的过程和我们的 GC 时候 STW 很像，会导致整个消费群组停止工作，重平衡期间都无法消息消息。另外，发生重平衡并不是只有这一种情况，因为消费者和分区总数是存在绑定关系的，上面也说了，消费者数量最好和所有主题的分区总数一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那只要&lt;strong&gt;消费者数量&lt;/strong&gt;、&lt;strong&gt;主题数量&lt;/strong&gt;（比如用的正则订阅的主题）、&lt;strong&gt;分区数量&lt;/strong&gt;任何一个发生改变，都会触发重平衡。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面说说重平衡的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重平衡的机制依赖消费者和协调者之间的心跳来维持，消费者会有一个独立的线程去定时发送心跳给协调者，这个可以通过参数 heartbeat.interval.ms 来控制发送心跳的间隔时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1.每个消费者第一次加入组的时候都会向协调者发送 JoinGroup 请求，第一个发送这个请求的消费者会成为“群主”，协调者会返回组成员列表给群主&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2.群主执行分区分配策略，然后把分配结果通过 SyncGroup 请求发送给协调者，协调者收到分区分配结果&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3.其他组内成员也向协调者发送 SyncGroup，协调者把每个消费者的分区分配分别响应给他们&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;6.具体讲讲分区分配策略?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要有 3 种分配策略：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对分区进行排序，排序越靠前的分区能够分配到更多的分区。比如有 3 个分区，消费者 A 排序更靠前，所以能够分配到 P0\P1 两个分区，消费者 B 就只能分配到一个 P2。如果是 4 个分区的话，那么他们会刚好都是分配到 2 个。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5583333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm1nLZAVoPhEcme6uaaKjib832G30ZcWf4ssyyPUlDqdib2t6wsziaQibvDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这个分配策略会有点小问题，他是根据主题进行分配，所以如果消费者组订阅了多个主题，那就有可能导致分区分配不均衡。比如下图中两个主题的 P0\P1 都被分配给了 A，这样 A 有 4 个分区，而 B 只有 2 个，如果这样的主题数量越多，那么不均衡就越严重。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0787037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmfNAEWY8G60RnFAFBc75tZ2afaib1PBmX1Z5VQeeU0ibeaRhOPsLTUeicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RoundRobin&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是我们常说的轮询了，这个就比较简单了，不画图你也能很容易理解。这个会根据所有的主题进行轮询分配，不会出现 Range 那种主题越多可能导致分区分配不均衡的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;P0-&amp;gt;A，P1-&amp;gt;B，P1-&amp;gt;A。。。以此类推&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0787037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmkzq0moRTV5Eamtrx0vK53WVibia9SKLXFJKibGzuHIuJw0YhUoaZa5zibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Sticky&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个从字面看来意思就是粘性策略，大概是这个意思。主要考虑的是在分配均衡的前提下，让分区的分配更小的改动。比如之前 P0\P1 分配给消费者 A，那么下一次尽量还是分配给 A。这样的好处就是连接可以复用，要消费消息总是要和 broker 去连接的，如果能够保持上一次分配的分区的话，那么就不用频繁的销毁创建连接了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;7.如何保证消息可靠性?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;生产者发送消息丢失&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 支持 3 种方式发送消息，这也是常规的 3 种方式，发送后不管结果、同步发送、异步发送，基本上所有的消息队列都是这样玩的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.发送并忘记，直接调用发送 send 方法，不管结果，虽然可以开启自动重试，但是肯定会有消息丢失的可能&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.同步发送，同步发送返回 Future 对象，我们可以知道发送结果，然后进行处理&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3.异步发送，发送消息，同时指定一个回调函数，根据结果进行相应的处理&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保险起见，一般我们都会使用异步发送带有回调的方式进行发送消息，再设置参数为发送消息失败不停地重试。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;acks=all，这个参数有可以配置 0|1|all。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;0 表示生产者写入消息不管服务器的响应，可能消息还在网络缓冲区，服务器根本没有收到消息，当然会丢失消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1 表示至少有一个副本收到消息才认为成功，一个副本那肯定就是集群的 Leader 副本了，但是如果刚好 Leader 副本所在的节点挂了，Follower 没有同步这条消息，消息仍然丢失了。配置 all 的话表示所有 ISR 都写入成功才算成功，那除非所有 ISR 里的副本全挂了，消息才会丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;retries=N，设置一个非常大的值，可以让生产者发送消息失败后不停重试&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka 自身消息丢失&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 因为消息写入是通过 PageCache 异步写入磁盘的，因此仍然存在丢失消息的可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此针对 kafka 自身丢失的可能设置参数：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;replication.factor=N，设置一个比较大的值，保证至少有 2 个或者以上的副本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;min.insync.replicas=N，代表消息如何才能被认为是写入成功，设置大于 1 的数，保证至少写入 1 个或者以上的副本才算写入消息成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;unclean.leader.election.enable=false，这个设置意味着没有完全同步的分区副本不能成为 Leader 副本，如果是 true 的话，那些没有完全同步 Leader 的副本成为 Leader 之后，就会有消息丢失的风险。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;消费者消息丢失&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者丢失的可能就比较简单，关闭自动提交位移即可，改为业务处理成功手动提交。因为重平衡发生的时候，消费者会去读取上一次提交的偏移量，自动提交默认是每 5 秒一次，这会导致重复消费或者丢失消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;enable.auto.commit=false，设置为手动提交。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个参数我们可能也需要考虑进去的：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;auto.offset.reset=earliest，这个参数代表没有偏移量可以提交或者 broker 上不存在偏移量的时候，消费者如何处理。earliest 代表从分区的开始位置读取，可能会重复读取消息，但是不会丢失，消费方一般我们肯定要自己保证幂等，另外一种 latest 表示从分区末尾读取，那就会有概率丢失消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综合这几个参数设置，我们就能保证消息不会丢失，保证了可靠性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;8.聊聊副本和它的同步原理吧?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 副本的之前提到过，分为 Leader 副本和 Follower 副本，也就是主副本和从副本，和其他的比如 Mysql 不一样的是，Kafka 中只有 Leader 副本会对外提供服务，Follower 副本只是单纯地和 Leader 保持数据同步，作为数据冗余容灾的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Kafka 中我们把所有副本的集合统称为 AR（Assigned Replicas），和 Leader 副本保持同步的副本集合称为 ISR（InSyncReplicas）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ISR 是一个动态的集合，维持这个集合会通过 replica.lag.time.max.ms 参数来控制，这个代表落后 Leader 副本的最长时间，默认值 10 秒，所以只要 Follower 副本没有落后 Leader 副本超过 10 秒以上，就可以认为是和 Leader 同步的（简单可以认为就是同步时间差）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外还有两个关键的概念用于副本之间的同步：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;HW（High Watermark）：&lt;/strong&gt;高水位，也叫做复制点，表示副本间同步的位置。如下图所示，0~4 绿色表示已经提交的消息，这些消息已经在副本之间进行同步，消费者可以看见这些消息并且进行消费，4~6 黄色的则是表示未提交的消息，可能还没有在副本间同步，这些消息对于消费者是不可见的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;LEO（Log End Offset）：&lt;/strong&gt;下一条待写入消息的位移&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35555555555555557&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmGnGiaTMIY8pyhXKqKqKNvzHODxYMSyNVmDdyKibO4biaAGoNlvy05QuBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;副本间同步的过程依赖的就是 HW 和 LEO 的更新，以他们的值变化来演示副本同步消息的过程，绿色表示 Leader 副本，黄色表示 Follower 副本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，生产者不停地向 Leader 写入数据，这时候 Leader 的 LEO 可能已经达到了 10，但是 HW 依然是 0，两个 Follower 向 Leader 请求同步数据，他们的值都是 0。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6416666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmFVSIGGBM45pibdr8lMuLV20K7nhfFS95jHjXVuy9fhcZRcD6yWkrGQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，Follower 再次向 Leader 拉取数据，这时候 Leader 会更新自己的 HW 值，取 Follower 中的最小的 LEO 值来更新。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6416666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvmON8tMhJqQA3X5jkfTITqbu1ZVqiaSwLeD7yibe3HJzVnuHQ5bpYDpnsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后，Leader 响应自己的 HW 给 Follower，Follower 更新自己的 HW 值，因为又拉取到了消息，所以再次更新 LEO，流程以此类推。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6416666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvasdu5HPSTYVr2l1icQNcuSvm69ia4wD7oibCI0UfeEVGcnpgZAocvBvr4eJ2j6z9UjOJhQ7KfYnXGp3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;strong&gt;9.Kafka 为什么快?&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要是 3 个方面：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;顺序 IO&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 写消息到分区采用追加的方式，也就是顺序写入磁盘，不是随机写入，这个速度比普通的随机 IO 快非常多，几乎可以和网络 IO 的速度相媲美。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Page Cache 和零拷贝&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kafka 在写入消息数据的时候通过 mmap 内存映射的方式，不是真正立刻写入磁盘，而是利用操作系统的文件缓存 PageCache 异步写入，提高了写入消息的性能，另外在消费消息的时候又通过 sendfile 实现了零拷贝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;批量处理和压缩&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 在发送消息的时候不是一条条的发送的，而是会把多条消息合并成一个批次进行处理发送，消费消息也是一个道理，一次拉取一批次的消息进行消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且 Producer、Broker、Consumer 都使用了优化后的压缩算法，发送和消息消息使用压缩节省了网络传输的开销，Broker 存储使用压缩则降低了磁盘存储的空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参考文档&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAACesl2A9hlAAAAAstQy6ubaLX4KHWvLEZgBPEz6JYezpKHO2DzNPgMIuqFO6vWj3owO52P7hBJaXi&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7Ym3K77SEULgkiaLDNh3hAibdiafxRS4L7KOfnWk2tSezfPNLhsVAZeh73qgZRrOxepnLeFqTBcaY0icQaNDCJVcYnv6suuq0ic4PjnSw&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=AxricY7RBHdWEqVjWX9z6pmnicd4UxFW8ObHiaOyojhdzicqAKBEsNsBUFa9Sv1iaw4PENtyd4EDN5s8&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;腾讯会议居然还可以这么玩？！&amp;#10;#腾讯会议&amp;#10;&quot; data-nonceid=&quot;11264342744746376585&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dcbcc8af40fbda66e2de3f417e54abfa</guid>
<title>IDEA Tips：Debug时如何优雅地制造异常？</title>
<link>https://toutiao.io/k/kv32p4a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;抛异常相信大家都会吧？&lt;/span&gt;&lt;span&gt;只需要这样就可以了：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;didispace.com&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，在开发过程中有一些情况，我们需要测试程序对异常的处理逻辑是否正确，这个时候就需要我们在程序运行时主动的抛出异常才会触发相关逻辑来验证正确性，比较常见的场景有：事务是否会回滚、Web层的统一异常处理等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候，你是&lt;strong&gt;如何去制造异常，来支持你的调试呢&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我就以前写的Spring Boot教程（&lt;span&gt;https://blog.didispace.com/spring-boot-learning-2x/&lt;/span&gt;）里一个事务处理的例子为场景，给大家看看一些常见的调试操作以及今天要讲的更优雅的操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;案例说明&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先介绍下场景，这是一个用Spring Data JPA实现的数据库操作案例，右侧&lt;code&gt;UserService&lt;/code&gt;里一个事务操作，里面含有5句User表的插入语句。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4303030303030303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkGDRsVqicV2ia91iaHSZibchWxeX7hIUokXa0Zu5vYTPNK2Kw7hZWRBFz7bNlrkGFWTEiaFZeHsWtAfQBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1155&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为&lt;code&gt;@Transactional&lt;/code&gt;注解存在，所以&lt;code&gt;saveSomeUsers&lt;/code&gt;函数下的数据插入要么都成功，要么都失败。成功很好测试，要测试失败的话，则需要我们让这个函数抛出异常才能触发回滚操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;撸起袖子就是抛&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了抛出异常以验证事务是否能回滚，很多小伙伴是这样干的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.47854077253218885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkGDRsVqicV2ia91iaHSZibchWxeaQlVydhQ440hM3T5ysLO8Bt8JXQJSNb51uS1kSltfic8gDx6ruecs1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;466&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接在这个函数里手工抛出异常，很粗暴很直接，是可以完成目标。虽然这种方法在单元测试中作为一种场景是可以的，但如果在复杂的业务过程中这样做就不那么优雅了，因为你测试好还要删掉它，如果忘记了，那就是直接写了个Bug。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;优雅地抛异常&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上IDEA提供了自由抛异常的功能，只需要在Debug的时候，右键前几天介绍的回退操作Reset Frame&lt;span&gt;（&lt;/span&gt;&lt;span&gt;https://blog.didispace.com/intellij-idea-tips-005/&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;位置，就可以看到如下图箭头所标的&lt;code&gt;Throw Exception&lt;/code&gt;操作了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5244956772334294&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkGDRsVqicV2ia91iaHSZibchWxeZibeJibhvn6tgEZUP9SriaxTzGElNgLsn1Efaz0oia1iajOsJzE2bibzsP7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后在弹出框中，你就可以编写你想要抛出的异常了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35454545454545455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkGDRsVqicV2ia91iaHSZibchWxe8RcKqH8pl4nLYxrPybajAgIlrf3AmQFmHI9vLyaBw2bjWubicjbEqcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很简单呢？赶紧打开IDEA试一试吧！&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAVVk6hacLXAAAAAstQy6ubaLX4KHWvLEZgBPEsINAFQc8EOmDzNPgMIui_3jvbN-qD9e2mz9bmJvq&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqzq54fm8tcJThric7ibgDeaFiafrK43ePQVH8VE01XKRgvXibDL5JTYEDXODCe3ZdRgy4ELdpXweea9up2Uyx1hfzHjA&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibDorWxcgMeMRDNWxfvb8yqy6ichfOBhXCzSww6VJtiaMR3eSAiaxY8yQaQVN5fia2wC0rM&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/PiajxSqBRaEKgL5ruGSBynIuPSwGV8UAY47b1iaDib6CdRgZQA5BcJQBQ/0&quot; data-username=&quot;v2_060000231003b20faec8c4eb8e18c6d6c807ee32b0773017eb91381ae379600409ab08f5d917@finder&quot; data-nickname=&quot;程序猿DD&quot; data-desc=&quot;别在手工throw异常来验证异常处理逻辑了，试试IDEA的这个功能 #IDEA #程序员 #Java #编程&quot; data-nonceid=&quot;6145202739792784485&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我正在连载IDEA专题（&lt;span&gt;https://space.bilibili.com/396803537&lt;/span&gt;）的视频内容，感兴趣的小伙伴可以关注我的B站或视频号哟！&lt;/p&gt;&lt;section&gt;&lt;span&gt;------&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;我们创建了一个高质量的技术交流群，与优秀的人在一起，自己也会优秀起来，赶紧&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247554212&amp;amp;idx=4&amp;amp;sn=609c66e339d7345ab00205da2abb8f9e&amp;amp;chksm=9bd3b93caca4302ad7fd37133fb45f526d4268914a5f65839285adbd5dc7c77b057168f4a8d5&amp;amp;scene=21&amp;amp;token=2077530613&amp;amp;lang=zh_CN#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;点击加群&lt;/a&gt;，享受一起成长的快乐。另外，如果你最近想跳槽的话，年前我花了2周时间收集了一波大厂面经，节后准备跳槽的可以&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxODcyNjEzNQ==&amp;amp;mid=2247553608&amp;amp;idx=4&amp;amp;sn=990e8a0f112e82cbc8051c4e50de32a6&amp;amp;chksm=9bd3bfd0aca436c6f2d2921212ecfee430b9f4bc549e6eaf823786cae54e0bb1b5bd75a2f94d&amp;amp;scene=21&amp;amp;token=2077530613&amp;amp;lang=zh_CN#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;点击这里领取&lt;/a&gt;！&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;··································&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你好，我是程序猿DD，10年开发老司机、阿里云MVP、腾讯云TVP、出过书、创过业、国企4年互联网6年&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;10年前毕业加入宇宙行，工资不高、也不算太忙，业余坚持研究技术和做自己想做的东西。4年后离开国企，加入永辉互联网板块的创业团队，从开发、到架构、到合伙人。一路过来，给我最深的感受就是一定要不断学习并关注前沿。只要你能坚持下来，多思考、少抱怨、勤动手，就很容易实现弯道超车！&lt;/span&gt;&lt;span&gt;所以，不要问我现在干什么是否来得及。如果你看好一个事情，一定是坚持了才能看到希望，而不是看到希望才去坚持。相信我，只要坚持下来，你一定比现在更好！&lt;/span&gt;&lt;span&gt;如果你还没什么方向，可以先关注我，&lt;/span&gt;&lt;span&gt;这里会经常分享一些前沿资讯，帮你积累弯道超车的资本。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxODcyNjEzNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/R3InYSAIZkFgVUuoib3ib7u92WFR247awDicxibIsB4H6gy610wyzicNVf03JIPC63Tu4lHV3iaAc4vDiczQr57kJDJew/0?wx_fmt=png&quot; data-nickname=&quot;程序猿DD&quot; data-alias=&quot;didispace&quot; data-signature=&quot;关注最前沿的技术资讯，为弯道超车做好准备！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzU5Mjc5NTIzMA==&amp;amp;mid=2247487180&amp;amp;idx=1&amp;amp;sn=b26c66a8c9f7aa50b16286fab1f546e3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击领取2022最新10000T学习资料&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;点击&lt;/span&gt;&lt;span&gt;领取2022最新&lt;strong&gt;10000T&lt;/strong&gt;学习资料&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>25138838f33e2699b2a0ec0994b938da</guid>
<title>「技术人生」第7篇：从业务视角谈信息技术与业务的关系</title>
<link>https://toutiao.io/k/wzjdvuk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;82&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.14106583072100312&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/qdzZBE73hWvNG9VjIS9sOow1MoYQgibicAhyLCiagyqhMVMBR5LiaLDIwVjiayNbjG4682icRrJOrll5bkJu9kebAQHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上一篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247500280&amp;amp;idx=1&amp;amp;sn=960c47b31f5d888c7787975c07bed3f3&amp;amp;chksm=fde8f398ca9f7a8e7a0382ae3e5fe95929fdeb1d0c87a450e99fa91fe179d01a03bb523ddc02&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」第6篇：技术同学应该如何理解业务？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;「技术人生」第6篇：技术同学应该如何理解业务？&lt;/a&gt;》作为业务篇的开篇文章，简单探讨了业务的本质，并且简单讲解了业务包含哪些关键环节。对于从事信息技术相关工作的人而言，除了了解业务的本质之外，仍然需要回归自身专业的视角，先是明确自己所从事的技术工作本质是什么，然后就是要理清技术和业务的关系是什么——前者能够让我们在宏观层面上看到自己所从事的工作有怎样的性质、遵从怎样的规律、会有怎样的发展趋势；后者可以让我们了解到自己的技术工作服务于业务的哪部分、应当如何支撑业务需求、如何保障业务发展，最终可以通过怎样的技术上的突破来驱动业务发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此本文会在前一篇文章的基础上，继续探讨信息技术的本质以及信息技术和业务的关系，并且尝试理清信息技术在业务开展过程中能起到什么样的作用。而想要讨论清楚信息技术的本质，就必须讨论清楚究竟什么是“信息技术”；想要讨论清楚什么是“信息技术”，就不得不先彻底弄明白什么是“信息”、什么是”技术“。对一个事物本质的探讨，需要我们通过打破砂锅问到底的方式，对那些最显而易见、最不起眼、看起来最不需要讨论的问题发起最简单的追问，才能让我们逐步接近事物本质，这就是“上下而求索”。因此接下来本文会以 “信息”——&amp;gt;“信息技术”——&amp;gt;“信息技术与业务”为主要脉络进行相关的论述。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;信息技术的本质探讨&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;什么是信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.1 信息的哲学定义&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前“信息”二字并没有统一的、绝对的定义。计算机行业的从业者接触最多的就是香农的《信息论》，其给出的信息的定义为：“减少或消除一种情况不确定性的东西”。但是事实上这只是讲了信息的作用，而非信息的本质。我们在其他行业领域的论文中也能看到很多信息的定义，比如传播学中，将信息称为为“传播的材料或传播的内容“。这些定义都是在不同的层面看“信息”、从不同的维度分析“信息”，关注点不同，因而对应的信息的定义也各有侧重、各不相同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了能够清晰地理解什么是信息，避免大家被眼花缭乱的各种信息的定义绕晕，我们先给“信息”建立一个分层描述模型，这个分层模型的科学性来源于哲学层面的“事物的共性与个性的辩证关系”——世界上任何一个事物都是共性和个性的对立统一体，因此世界上任何一个事物都是可以按照从共性到个性来进行分层描述的。我们日常生活中最常见的分层描述方式就是生物界的“界门纲目科属种”体系，通过这样的分层体系，我们既能了解某物种与其他物种的共性，又能了解该物种有别于其他物种的个性部分，这对于我们深刻研究某个事物而言是非常有帮助的。本文中我们针对“信息”建立分层描述模型时，把共性部分放在最下面，个性部分放在最上面，如下所示（注意，受作者本人学识和认知有限，图中关于教育学、传播学等内容划分可能存在问题，欢迎指正）：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;191&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3315168029064487&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUP0POfyCibib9c30zYTWyVvQatVZnQgqxZibL4mbgU9fIhgx5RglzWowZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1101&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图1 信息的分层模型&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由上图可以看到，计算机领域里的“信息”、教育领域里的“信息”、传媒领域里的“信息”，实际上是“哲学层面的信息”在不同领域内的具象化的研究对象，研究的内容只是信息的某一个维度。单纯从某一个领域来认识信息，都只是了解了它的某一个维度的特性，而非它的本质。多维度地分析一个事物，这一点对于我们全面地认知某个事物是非常重要的。同时我们也可以看到，日常生活中接触到的“信息”——短信、微信消息、新闻、短视频等等，是生活层面的、综合的、具象化的信息，与我们想要搞清楚的信息的本质不是同一个层面的话题，即“白马非马”，就是不能用具体的个例来替代抽象的共性。因此不论是从不同层面来看信息，还是从不同维度来看信息，我们需要追根溯源到它的哲学定义，了解它的本质之后，才能从全貌感知它的发展规律。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来我们将“信息”的分析聚焦在哲学层面的定义上：在哲学上，信息是标志物质间接存在的性哲学范畴 ,它是物质存在方式和状态的自身显示，也是关于事物运动状态与规律的表征。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如何理解上面这句话呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，事物当前的存在方式包括它的结构、形态、具备的某些性质、它目前所处的状态。这类型的信息是事物自身具有的，可以被外界感知的，比如我们测量物体的长度，比如我们观察物体的颜色，比如我们通过设备观察化学反应等等，这些可以被我们感知的，可以被我们创造的工具衡量的属性，是客观事物天然具备的，并且客观事物的这些信息随着人类借助工具感知事物的能力的提升而会变得更丰富。这些信息在哲学上被归类为“自在信息”（自然存在的、自身本身就一直存在的信息，不论是否被人感知或认知），这类型的信息的存在最为广泛，也层出不穷生生不息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次，信息也包括事物自身的发展过程和所遵守的规律的体现。这类型信息则是经过人的抽象、分析，形成理论之后得到的，它属于人类对客观事物的信息经过再加工后形成的可被传递、可被其他人理解并形成对应认知的信息，是事物内在规律的体现。比如我们阅读的文章，比如我们学习的物理定理、数学公式，比如我们听到的某个人对某事物的分析和看法等等，这些信息在哲学上被归类为“再生信息”，即虽然它不是事物自己本身的属性或状态的体现，却是人类通过思考形成的反应客观事物内在规律的信息，也是信息的重要组成种类，后面我们在提到信息在实践中的作用时，会看到与再生信息有关的一些论述，这里就不再详细展开了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，关于哲学层面的信息，还有很多可以继续深入讨论的话题，例如“信息是不是物质”、“信息与物质的关系”、“事物自身的属性和它自身的规律有何辩证关系”等等。这些话题有助于我们更深入地认识信息的本质，但受限于文章篇幅，本文不再做详细讨论，感兴趣的读者可以阅读“信息哲学”（你没看错，有专门的哲学分支来研究“信息”）相关的书籍和论文来了解更多内容。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在初步探讨信息在哲学层面的本质之后，接下来就是要分析它对于我们生产实践有何作用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.2 信息在生产实践过程中的作用&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人类所有活动在哲学上都是实践，而实践的本质就是人对客观事物的改造，而改造的起点是认识事物，知道事物的特性，了解事物的发展规律，确定事物是否符合人的活动的需要。在这个过程中，事物通过信息让人形成认知，与此同时人通过信息感知事物的发展，认识到了此事物与彼事物之间的联系以及它遵守的规律，就这样信息在人和事物之间，形成了桥梁，变成了人类实践活动的最基础的要素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息存在于人类实践活动中的每个环节，不同环节信息所起的作用不同，侧重点不同，需要关注的特性也不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从宏观视角来看，一般的生产实践过程，可以抽象为如下几个大的环节：获取信息、形成认知、进行决策、开展实践活动、通过实践产生价值。我们每天进行的工作，剥离具体的内容，只看抽象的过程，就是不断地在根据接收到的信息做出实际动作，然后实际执行的动作会产生新的信息传递下去。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这个过程中，第一个环节就是信息的获取，而该环节最重要的是信息的及时性、准确性和完备性。不及时的信息影响决策时机，不准确的信息会形成错误的认知，而不完备的信息会形成片面的认知，都会对后续的环节有负面影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;继续剖析这个过程，我们会发现接收到信息之后、做出实际的动作之前，经历了大脑的分析决策过程。这个过程可能是一个人完成的，也可能是通过一个群体完成的。这两种决策形式的差异在于，“个体决策”需要的是：基于接收到的信息完成认知的构建。而“群体决策”除了要形成个体对事物的认知以外，还需要有能力将自己构建的认知与决策团队对齐，并且传递到执行团队形成广泛地认知一致。因此群体决策过程中，除了外界输入的信息及时、准确、全面以外，决策者对信息的再加工也需要能够做到实事求是，深入地、客观地、全面地认知事物，从而提高“再生信息”被其他人接受的可能性。同时关键信息的透明度也是群体决策中比较重要的一点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息除了会形成认知，影响决策之外，在执行过程中也是扮演着举足轻重的角色。一件事情执行的进展怎么样、哪些已经完成、达到了什么样的目的、哪些还没有开展、对整个事物的影响是什么都是事情执行过程中非常重要的信息。这个场景中，信息体现着一个事物的发展过程，那么实践的参与者，比如决策者和执行者，就可以依靠这些信息来掌握事物发展的过程，从而再次根据实际情况做出相对应的调整，不断地让事物发展的过程向预期的方向发展或避免事物朝着预期外的方向发展。由于在开展实践活动过程中，信息是时间、维度连贯的， 而由于人类自身生理条件的限制，将无法应对巨量的（信息的完备性高，则会带来巨量信息）、实时的（信息的及时性高，则会带来实时信息）信息，也就无法基于这些不能处理的信息做出合理的决策。因此信息在这个环节则更偏重针对性、目的性（因为及时性、准确性、完备性已经是基础要求）。比如人类不能依靠单个个体感知到工厂中的每个机器的运转状态，只能依靠固定的人员进行巡视检查来获得非连贯的、目的性、针对性的信息；同样，管理者也不能在团队执行过程中时刻不停分秒不差地跟着某个员工，而只能依靠关键里程碑来进行针对性的盘点，从而获取到关键信息，感知到执行结果。所以说，在仍然以人脑为决策主体的时代，实践活动过程中的信息需要有针对性；而在未来部分场景的决策权异化给人工智能的情况下，需要构建基于业务场景的决策模型，其中的决策要素，依旧是有非常大的针对性要求的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后一个环节，人类的实践活动产生了价值，信息更扮演着非常重要的角色，即信息是否能够把产品（实践活动的产物）的价值传递到足够广泛、足够精准的需求方那里，并且让需求方对产品形成积极的认知，增加需求方购买产品的倾向性。当然，很多时候并不一定是实践结果完成以后才开始传递价值信息，更合理的是把产品价值相关的信息的传递贯穿整个实践过程，这里就不展开讨论了。所以在实践过程的最后一个环节，信息对外传播的广泛性、准确性是需要着重关注的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上是根据实践的多个环节来探讨信息的各种特性以及对应的侧重点，同时我们也知道还有很多维度和方面是贯穿于实践的全部环节的，例如安全方面、风控方面等，因此信息的安全性、信息的真实性也是我们在实践过程中需要额外关注的。同时为了能够让实践过程中的经验教训可以被其他实践者吸取，因此信息的持久性、时效性、可复制性也在我们复盘整个实践过程，总结经验教训的时候变成了重点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.3 信息在生产实践过程中表现出了怎样的趋势&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人类历史的发展历程中，不论技术随着生产力的发展发生什么样的变化，都是围绕着信息的采集、传输、存储、分析、基于分析的决策等方面来构建技术体系的，不变的命题永远是信息本身。所以，信息本身的趋势实际上是借助信息相关技术的发展来展现的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在信息的采集方面，从普通人通过五官的视觉、听觉、嗅觉、味觉、触觉感受到大小冷热明暗酸甜苦辣，到科研人员通过各种精密工具观测原子的结构，再到科学家使用500米口径球面射电望远镜天眼来探索宇宙起源和演化，我们可以看到信息在不同场景中是如何被采集的，也能看到信息在采集过程中不同时代的技术带来的变化：信息可以被采集的精度、粒度和尺度都超过了人类本身的探知事物的能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而在信息的传递方面，从周幽王为搏褒姒一笑烽火戏诸侯，到诗圣杜甫在烽火三月中可抵万金的家书，再到菲迪皮茨为传递雅典人在希波战争中的大胜而命丧长途飞奔之后，再到古代战争中的飞鸽传书和近现代战争中的鸡毛信，再到今天的光纤、最新的5G通信卫星、量子通信卫星，我们可以观察到信息在不同场景中是如何传递的，也能看到信息在传递过程中所使用的技术带来的翻天覆地的变化：所传递的信息内容的复杂度、信息量上限都越来越大，即传输效率极大提升；在空间维度的跨度上、时间维度的时效上也都有巨大的进步；在传递过程中的保密性方面，也从无密可保变成无密可窥。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在信息的存储方面，从昏暗岩洞里远古人类的狩猎图，到殷墟里挖出的龟甲，再到一卷卷言简意赅书满了之乎者也的竹简，再到帛书绢画，再到现在常见的纸张，磁带、硬盘，我们可以看到信息在不同条件下的存储面临着怎样的挑战，以及技术在解决这些挑战过程中带来的不一样的变化，信息以图画或文字为载体记录在不同的物质上，本身可以保存的信息量、时间长度、在极限环境下的存留概率都在提升。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在信息的分析和基于信息的决策方面，从孙子兵法中的“将在外君命有所不受”到三国演义中的“诸葛锦囊”，既让我们看到“自在信息”的“及时、准确、客观、全面”在战术层面决策过程中的重要性，也让我们看到“再生信息”在宏观视角下对事物发展的洞察、对人物的行为的预测所体现出的对于战略决策的重要性及其指引实践的必要性；而从近代解放战争中我军各级指战员领会上级战略意图、阅读战场随机应变完成大集团军大规模大纵深穿插再到国民党军队需要应对“受总裁电命，重机枪阵地左移三米”的微操指导（互联网梗，勿深究，不讨论），我们也能够从中看到“再生信息”在战术执行过程中所发挥的重要的保障作用，也能看到“自在信息经过分析、决策转变为再生信息”的链路不畅或缺失，所造成的战略层面的指引缺位，继而对战术执行造成了负面影响。如大家所知，商场如战场，业务战略的定制与业务战术的执行与战争相比而言，面临着同样的问题，特别是在数字化的背景下，海量的自在信息的分析（大数据）以及精准的再生信息的自动生成（智能化），会变成信息领域最大的命题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在简单讨论了信息的定义和作用以及发展趋势之后，关于信息的话题我们就不再深入展开了，接下来我们要讨论的就是技术相关的话题了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;什么是技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;2.1 技术的定义&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;114&quot; data-source-title=&quot;辞海&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;技术，泛指根据生产实践经验和自然科学原理而发展成的各种工艺操作方法和技能，如电工技术、木工技术、激光技术、作物栽培技术、育种技术等。除操作技术外，广义地讲，还包括相应的生产工具和其他物质设备，以及生产的工艺过程或作业程序、方法。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A114%2C%22text%22%3A%22%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%B3%9B%E6%8C%87%E6%A0%B9%E6%8D%AE%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C%E5%92%8C%E8%87%AA%E7%84%B6%E7%A7%91%E5%AD%A6%E5%8E%9F%E7%90%86%E8%80%8C%E5%8F%91%E5%B1%95%E6%88%90%E7%9A%84%E5%90%84%E7%A7%8D%E5%B7%A5%E8%89%BA%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E8%83%BD%EF%BC%8C%E5%A6%82%E7%94%B5%E5%B7%A5%E6%8A%80%E6%9C%AF%E3%80%81%E6%9C%A8%E5%B7%A5%E6%8A%80%E6%9C%AF%E3%80%81%E6%BF%80%E5%85%89%E6%8A%80%E6%9C%AF%E3%80%81%E4%BD%9C%E7%89%A9%E6%A0%BD%E5%9F%B9%E6%8A%80%E6%9C%AF%E3%80%81%E8%82%B2%E7%A7%8D%E6%8A%80%E6%9C%AF%E7%AD%89%E3%80%82%E9%99%A4%E6%93%8D%E4%BD%9C%E6%8A%80%E6%9C%AF%E5%A4%96%EF%BC%8C%E5%B9%BF%E4%B9%89%E5%9C%B0%E8%AE%B2%EF%BC%8C%E8%BF%98%E5%8C%85%E6%8B%AC%E7%9B%B8%E5%BA%94%E7%9A%84%E7%94%9F%E4%BA%A7%E5%B7%A5%E5%85%B7%E5%92%8C%E5%85%B6%E4%BB%96%E7%89%A9%E8%B4%A8%E8%AE%BE%E5%A4%87%EF%BC%8C%E4%BB%A5%E5%8F%8A%E7%94%9F%E4%BA%A7%E7%9A%84%E5%B7%A5%E8%89%BA%E8%BF%87%E7%A8%8B%E6%88%96%E4%BD%9C%E4%B8%9A%E7%A8%8B%E5%BA%8F%E3%80%81%E6%96%B9%E6%B3%95%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E8%BE%9E%E6%B5%B7%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;辞海&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;技术并非是实现人之目的的单纯手段或工具本身，而是人把自己已经掌握了的自然规律能动地整合到自己的目的性预期中来的一系列过程及结果&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;156&quot; data-source-title=&quot;重庆科技学院学报(社会科学版) 2010 年第 1 期《马克思哲学思想中技术的本质研究 》作者：庞遵美&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;在马克思主义哲学中，是把技术作为社会的一个要素，放在自然、人、社会的系统 之中，通过技术与自然、技术与人、技术与社会的关 系来阐释技术的本质。马克思认为，技术是人的本质力量的对象化;技术是一种生产力，是自然技术、 社会技术、 思维技术相互作用而形成的内在统一体，是人类追求自由活动的一种最基本、最重要的实践活动。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A156%2C%22text%22%3A%22%E5%9C%A8%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6%E4%B8%AD%EF%BC%8C%E6%98%AF%E6%8A%8A%E6%8A%80%E6%9C%AF%E4%BD%9C%E4%B8%BA%E7%A4%BE%E4%BC%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A6%81%E7%B4%A0%EF%BC%8C%E6%94%BE%E5%9C%A8%E8%87%AA%E7%84%B6%E3%80%81%E4%BA%BA%E3%80%81%E7%A4%BE%E4%BC%9A%E7%9A%84%E7%B3%BB%E7%BB%9F%20%E4%B9%8B%E4%B8%AD%EF%BC%8C%E9%80%9A%E8%BF%87%E6%8A%80%E6%9C%AF%E4%B8%8E%E8%87%AA%E7%84%B6%E3%80%81%E6%8A%80%E6%9C%AF%E4%B8%8E%E4%BA%BA%E3%80%81%E6%8A%80%E6%9C%AF%E4%B8%8E%E7%A4%BE%E4%BC%9A%E7%9A%84%E5%85%B3%20%E7%B3%BB%E6%9D%A5%E9%98%90%E9%87%8A%E6%8A%80%E6%9C%AF%E7%9A%84%E6%9C%AC%E8%B4%A8%E3%80%82%E9%A9%AC%E5%85%8B%E6%80%9D%E8%AE%A4%E4%B8%BA%EF%BC%8C%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BA%BA%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8A%9B%E9%87%8F%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8C%96%3B%E6%8A%80%E6%9C%AF%E6%98%AF%E4%B8%80%E7%A7%8D%E7%94%9F%E4%BA%A7%E5%8A%9B%EF%BC%8C%E6%98%AF%E8%87%AA%E7%84%B6%E6%8A%80%E6%9C%AF%E3%80%81%20%E7%A4%BE%E4%BC%9A%E6%8A%80%E6%9C%AF%E3%80%81%20%E6%80%9D%E7%BB%B4%E6%8A%80%E6%9C%AF%E7%9B%B8%E4%BA%92%E4%BD%9C%E7%94%A8%E8%80%8C%E5%BD%A2%E6%88%90%E7%9A%84%E5%86%85%E5%9C%A8%E7%BB%9F%E4%B8%80%E4%BD%93%EF%BC%8C%E6%98%AF%E4%BA%BA%E7%B1%BB%E8%BF%BD%E6%B1%82%E8%87%AA%E7%94%B1%E6%B4%BB%E5%8A%A8%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9C%80%E5%9F%BA%E6%9C%AC%E3%80%81%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%B4%BB%E5%8A%A8%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E9%87%8D%E5%BA%86%E7%A7%91%E6%8A%80%E5%AD%A6%E9%99%A2%E5%AD%A6%E6%8A%A5(%E7%A4%BE%E4%BC%9A%E7%A7%91%E5%AD%A6%E7%89%88)%202010%20%E5%B9%B4%E7%AC%AC%201%20%E6%9C%9F%E3%80%8A%E9%A9%AC%E5%85%8B%E6%80%9D%E5%93%B2%E5%AD%A6%E6%80%9D%E6%83%B3%E4%B8%AD%E6%8A%80%E6%9C%AF%E7%9A%84%E6%9C%AC%E8%B4%A8%E7%A0%94%E7%A9%B6%20%E3%80%8B%E4%BD%9C%E8%80%85%EF%BC%9A%E5%BA%9E%E9%81%B5%E7%BE%8E%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;重庆科技学院学报(社会科学版) 2010 年第 1 期《马克思哲学思想中技术的本质研究 》作者：庞遵美&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从上面的内容可以看出，“技术”在应用层面、哲学层面都有比较清晰的定义和描述，并且有相应的“技术哲学”（是的，你没看错，也有专门的哲学分支研来究技术）相关的书籍和论文，感兴趣的读者可以继续深入研究 “技术的本质”、“技术与人的关系”、“技术对社会和自然的影响”等等命题。需要注意的一点是，从宏观视角分析技术时，要把“技术”与“工具”区分开，技术的内涵和丰富程度要比工具更高，工具属于技术的一个子集。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.2 技术是人类重要的实践活动&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术作为人类最基本、最重要的实践活动，在探讨技术相关的话题之前，我们需要先简单讨论一下哲学层面的实践是什么，从而看到技术与其他一般实践活动的共性是什么，同时理清实践的组成、各组成者之间的相互影响，也有助于我们理解技术的一些性质是如何形成的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在马克思主义哲学中，实践有两种基本形式，第一种是处理人与自然或社会与自然关系的活动，即生产实践活动；第二种是处理社会关系的活动，包括组织、管理和变革社会关系的活动。实践活动包含主体、客体、中介三个基本因素，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;158&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.27285714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUcia5vXldSBUXT3qI3icMkEK71iayMPvusVvlOQrIFv9tXyPl8ibRNHSQQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;700&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图2 实践的组成体系&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实践的主体是从事实践活动的人或者团体，实践的客体是指所有主体活动对象的综合，而中介系统则就是把主体和客体结合起来的各种形式的工具以及工具对应的操作方法和使用流程。实践的主体是能动的，自主的，因为某个客观事物不符合实践主体的某种需要，因此形成了主体进行实践活动的目的；而客体本身是客观存在的事物，它具有一定的局限性，因此需要由实践的主体通过中介系统对客体进行改造以满足主体的需要。客体被改造的过程，同时也是客体反向影响主体的过程：客体现状是什么样的、究竟存在什么限制、导致了什么问题、在实践主体通过信息形成对客体的认知之后，又需要使用什么样的工具或系统能够对客体造成影响，以使其满足主体需要？在这个客体反向作用主体的过程中，主体对客体的感知并不是一蹴而就的，而是逐步经过多次改造而形成更准确更完整更深入的认知，随着事物内部的规律的发现，就逐步形成科学知识，主体的认知能力提升；主体对客体的改造也不是一蹴而就的，而是需要不断提升工具改进流程，从而不断改进改造的过程，从而获得更好的改造结果，于是简单的实践过程会逐步改进成更高效的实践过程，甚至出现新的实践过程，于是中介系统也在这个过程中发展进步。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在了解了实践的一些基本概念的同时，我们基于日常生活常识能够知道，简单的实践行为并不能被称之为技术，比如一个小孩踢开路边的石子是一个过程非常简单的实践活动，但是这个实践过程不能被称为是技术；比如说几个中学生合作打扫教室卫生，也很难称之为技术；所以我们需要找到让“技术”之所以被称之为“技术”的那些有别于普通实践活动的个性差异——即找到技术有别于一般实践活动的个性，从而更全面地建立起对技术的认知。因此在下一个小节，我们来具体探讨一下技术究竟具备哪些性质。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.3 技术具有的性质&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术的目的性源于实践的目的性，即客观事物不符合实践主体的需求时，人的能动性发挥作用，针对客观事物的局限性所产生的问题，出于某种目的，进行针对性的解决，改进，最终满足人的需求。例如，我们需要一张床用于安稳地睡觉，但是周围的树木并不能满足我们的需求，树木虽然靠着休息，但是与床相比所提供的的休息能力还是非常局限的，因此我们根据我们自身的目的，来改在树木，先是获取合适的木材，然后将木材加工成合适的零件，再将不同的零件组装成一张床，这个过程就是我们基于自身的目的，针对树木在提供休息能力方面的局限性，进行了改造。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;同时，我们需要看到，技术的目的性，与普通的实践活动的目的性相比，除了解决问题满足需求这一目的之外，还存在着效率、成果评判方面的目的，比一般的实践活动的目的性更综合，而也正是这样的综合性，促使技术不断变更，甚至通过创新，产生新的技术。还是以做床为例，在人类最早使用木材做成木床到现在的木床，一定是经过一轮又一轮的不断的改进的，而这种改进的动力来源于我们对改进之前的床的评判，也来源于人类对制作床的过程的评判。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术的目的性决定了技术具有实用性，这是区别于普通实践活动的特性。没有实用价值的技术不会完成技术自身的生命周期的演进，更多是一出现就被抛弃。一方面，技术的实用性决定了技术的价值基础，是技术价值衡量的重要维度；同时实用性也可以继续拆解，从易用性、普适性、经济性、问题解决结果质量等几个维度来做衡量。比如一项针对解决某个问题的技术出现时，那么这项技术是否能够被人很简单地使用起来，这项技术解决同类型问题是否也有效，通过这项技术解决问题时是否需要投入过多的成本（包括人力、物力、时间、资金等），最终使用该技术解决对应的问题时，问题是否被高效、彻底地解决，都是衡量一项技术的实用性的重要维度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术具有综合性，这也是区别于普通实践活动的特性。技术的综合性源于整个实践过程，从认知事物、创造合适的工具、选择合适的方式、采用合理的流程、对事物进行适度的改造，整个过程涉及到了方方面面，技术是否能够完成对应问题的解决，全靠综合多个维度、多方面甚至多种其他技术的配合。技术的综合性是技术实用性的内在基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术的创新性是技术发展的核心性质，从整体宏观的视角来看（不是讨论某个单一技术的发展轨迹，而是整体来看），技术在其生命周期内，随着一次又一次的改进和迭代，最终会出现这些改进不断积累，由量变发展为质变，从而诞生有别于旧技术的新技术，这就是技术本身的创新性的由来，也能通过这个过程看到技术创新的必然性。当我们从微观的视角来看某一个具体的技术时，基于旧技术演变而来的新技术是否能够出现，取决于技术要解决的问题、技术的创造者以及技术本身的实用程度；而新的技术出现后，其是否能够被大规模推广应用，也受着这几个主要因素的影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;世界上任何事物都是对立统一的，而由于技术扮演着人类与客观世界互动过程中非常重要的角色，因此它的两面性需要着重讨论并被充分重视。所谓技术的两面性，即指技术既能造福于人类社会，同时也可能带来负面的影响。很多时候会有人讨论技术的善恶、技术是否有罪，这样的讨论命题本身就是错误的。世间万物普遍联系，不能把技术放在虚无的空间中独立讨论它的善恶与否，有罪与否，而应该认清技术与人、技术与社会、技术与自然的不可分割的关联，将其与人、社会、自然作为整体来看待。作为技术的创造者，技术的使用者，技术的参与者，要知道使用的工具和参与的技术对其他事物的影响，而不能用技术无罪来为自身的问题做辩护。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;技术的专利性是技术演进发展的基本性质，也是有别于其他普通实践活动的特性。技术的专利性是指技术的发明创造者对技术本身拥有专有的权利和利益。技术的专利性一方面来源于技术在被发明创造过程中投入的各种成本，另外一方面来源于技术被应用之后创造的价值。技术的专利性贯穿于整个技术的生命周期，如果技术专利性不被保护，那么创造、改进某项技术的人或组织无法从中获得对应的收益，那么实践的主体的能动性和主观意愿就会下降，则整个人类社会的实践活动就会逐步停滞发展，因此从各种角度来看，技术的专利性保障了技术发明、改进者的基本利益，是技术演进的基础动力之一，是技术本身基本的性质。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人类社会发展至今，技术不是凭空出现的，也不是从头而来的，而是在旧技术的基础上，在相关技术的支撑上作为起点的。这一点是人类社会知识、技能、经验代代传递的最好例证，也是群体知识传递的必然。今天想要开一个化肥厂，只需要基于现有的技术体系，基于现有的供应链体系就能完成生产，而不需要从石油开采做起，也不需要从头到尾把整个化学、化工、原材料等体系完整走一遍。技术基于既有技术体系的组合、应用和发展，也是技术本身呈现出的特点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.4 技术的发展趋势和规律&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;回顾历史，纵观技术的发展历程，技术的发展趋势需要从实践的主体、实践的中介系统、实践的客体三条线来看。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在主体与主体之间的关系方面，呈现出由简单到复杂的发展趋势。技术的创造者从最早的独立个体的发明创造，到后来的单一利益群体内协作，再到现在的社会化分工下跨利益群体间的协作，一方面人与人之间的关系不断随着发展而出现新的形式，另外一方面组织与组织之间的合作也随着发展出现复杂的相互依赖相互竞争相互协作的关系。例如全球供应链的构建，充分体现了实践主体之间的关系在发展过程中由简单到复杂的变化过程。在复杂的主体关系下，为了能够与对应的复杂的中介系统相匹配，则制度、协议、流程、规范就是必然出现的要素，否则就会束缚中介系统的能力。用大家更熟悉的话来说，这种现象代表着生产力受到生产关系的束缚。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在实践主体自身发展方面，既呈现出单一化、专业化的趋势，也呈现出整体化、综合化的相反的趋势。知识大爆炸带来的冲击导致人类改造客观世界的知识量以及吸收这些知识所耗费的时间远远超过单一人类个体能够承受的上限，因此随着实践活动的环节拆分越来越细，实践主体也变得越来越专业同时也越来越单一；同时由于单一领域的实践结果需要在更高层面进行设计、整合整体利用来解决更复杂的问题，因此负责此类工作的群体发展趋势则是越来越综合化整体化。由这个规律可以看到，一般情况下组织内的管理人员和负责具体业务的普通员工事实上有两个完全不同的发展方向，已经是两个不同的群体了。再举一个更加贴合广大读者实际的例子：研发团队的主管虽然也是程序员，但是实际上已经半只脚踏入了另外一个发展方向完全不同的领域，而如果一个研发团队的领导在负责一个完整的业务线的话，基本上已经和程序员是不同的群体了，这是取决于他的实践分工的，而不是决定于他的称呼的——虽然他被人称为程序员。在这种情况下，如果对研发团队管理者这个群体的要求和考察维度仍然只停留在写代码上，那么要么是考核制度不合理，要么就是上级管理者认知不到位，亦或者是公司的培训机制没有帮助管理者本人做好自身角色的转变。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;中介系统中的工具，一方面替代人的感官来感知世界，例如各种各样的观测工具、各种各样的传感器等；也会替代人的肢体来完成对客观事物的直接改造，例如各种各样的机械工具等等；而随着信息时代的到来，工具也在逐步替代人的大脑在合适的场景下放大人的各项能力，从而提升改造客体的实时性、精度、尺度、规模等等。因此总体来看，中介系统在延伸着人本身的生物、物理方面改造事物的能力，在精度、尺度、粒度、规模方面向两个极端发展，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;166&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.28832116788321166&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUsAMicQg1q4B6vW8BxVMzJhKpYwvtMicV4HwsHicxq1GJoATB8SPJPPt9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图3 人类生物能力范围和中介系统发展趋势关系图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从客体本身是被改造的对象来看，随着工具的发展，客体的局限性逐步变小，但是局限性继续缩小的难度变大，即被改造的客体在尺度、规模上向两级发展，但是发展的速度在变小，这一点与工具的发展规律是相辅相成的（见图3），这里就不再重复讨论了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一方面，客体的被改造，代表着客体与主体需求的不匹配，当改造完成后，被改造的具体的某个或某些客体虽然满足了主体的需求，但是未被改造的客体依然存在，依然会在其他时间、其他地点、其他场景中不符合其他主体的需求，因此技术的出现只是代表着主体有能力进行改造，而不代表着所有同类问题都消失了。当技术被使用与改造客体时，只解决了这些客体的局限性引起的问题，并不代表着该客体的局限性消失，这一点体现出了客体被改造的隔离性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在有限的篇幅中，我们简单讨论下整体视角下，技术符合哪些规律：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 技术的专利性决定了最新的技术与某些实践主体绑定，而技术的实用性决定了技术会从一个主体迁移扩散到另外一个主体。这意味着技术需要推广应用，不是天然出现即可被广泛使用的，这点体现了技术的扩散性。技术的扩散性是技术作为商品被转卖的哲学基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 同类技术的重复演进在足够大的群体内是必然的，体现了技术重复演进的必然性。客体的普遍性和客体之间的共性导致了不同的主体面临同样的问题，即使某些主体已经具备了解决该问题的技术，但是此时此刻其他环境下的人可能面临着同样的问题，而受限于技术的隔离性和技术的扩散性，在这些主体获得这种技术之前，就会演化出类似的技术来解决同样的问题，这就意味着技术发生基于一定基础的重复演进是必然的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 同类技术重复演进的必然性就导致解决同一个问题的技术的多样性。不同主体面对同样的问题演化出同类型的技术，但是因为不同主体对事物的认知不同、解决问题的方式方法、客观环境和条件也都有差异，就导致了技术的多样性。比如都是用面粉做食品，中式糕点和西式糕点的技法和流程就不大相同，这种例子太多了就不再赘言了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. 技术解决同一问题的多样性和同类技术重复演进的必然性决定了同类型技术会被大多数主体掌握，从而让该类型技术在一定时间之后不再具备跨主体的扩散性，因而这些普通技术的专利性下降甚至消失，商业价值下降，就变成人类的公共知识技能，整体提升了人类改造世界和社会的能力，而旧的技术无法获利，则更好的、甚至全新的技术就会在技术的专利性的驱使下继续被创造出来。这一性质事实上是在技术维度上推动着社会整体的向前发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. 技术在同一历史周期内，会有多代际并存的现象。从时间维度研究，过去存在的问题，现在继续存在，未来依然会存在，也就意味着过去的主体走过的技术演进路线，现在依然会有主体重新走一遍，未来也必然会有主体继续同样的路线。而出现这种情况的原因，要么是由于信息的闭塞导致不知道已经有非常先进的技术可以解决同类型问题；要么就是受限于技术专利性所带来的成本问题而选择使用成本更低的技术；也可能是因为任何问题与其他问题相比，既有共性也有个性，已经存在的先进技术只能解决问题的共性部分，而无法解决问题的个性部分。因此最终我们可以观察到这样的现象：在全社会范围内，解决同一类问题的技术多代际共存，既有组织使用最先进的技术，也有组织使用最原始的技术，并不是最先进的技术出现，最落后的技术就会立刻消失不见。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于上面小节提到的这些规律，我们能解释生活中遇到的很多问题，特别是做信息技术研发的同学，可以结合上面讲的规律来解释日常的工作经常遇到的一些现象。我们以大家深恶痛绝的“重复造轮子”来举例：有很多团队做了很多系统工具，开发了很多平台，而这些工具或平台可能是其他团队好几年之前已经开发过类似的东西了，这就是我们常说的重复造轮子的现象。所以从哲学视角来解释一个庞大的组织内部，造轮子的根本原因和这种现象出现的必然性，其实已经一目了然了。即客观上，技术重复演进的必然性和技术的扩散性以及技术的隔离性共同决定了这种现象一定会出现，只是多与少的问题，是无法彻底杜绝的；主观上，改造客观事物的主体受其个人或组织核心利益诉求的驱使，尝试用这种方式来创造组织价值从而实现个人价值；最终两个条件在不恰当的激励方式、不正确的奖惩机制和缺位的规章制度的共同作用下，重复造轮子的现象就会泛滥成灾，消耗组织的资源，加剧组织内部低质量竞争，损耗企业创新动力。那么如何打破这种规律的束缚呢？最好的办法就是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;做好信息互通，避免组织内部出现信息孤岛。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对常见的技术问题做好“基于共性和个性的分层模型”，并将这些常见问题的分层模型进行宣讲，使之成为研发群体内的常识。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;做好技术标准化。基于常见问题的分层模型，针对每一层提供标准化的技术解决方案，在共性层面严格约束重复建设行为，在个性层面放开约束鼓励实事求是解决问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;组织层面做好相关的保障工作，例如考核重点的调整、建立合理的奖惩机制、设立明确的规章制度等多方面共同发力，做好研发团队的价值取向管理工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;个人方面构建健康的价值观，将个人利益和组织利益结合起来开展日常工作，而不是把个人利益凌驾在组织利益之上。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然还有很多常见的现象，比如为什么某些公共技术平台推广困难，为什么会有公司愿意花钱买我们开发的系统等等，这些问题我们会在技术篇中展开论述，这里就不再多说了，留给大家做思考分析用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.5 技术的分层模型图和生命周期图&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们可以根据上面的内容给出一个简单的技术分层模型图，整个模型只画出了哲学层面的示意图，如下所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;273&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.47245017584994137&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUxWo7OmticwCmOQ12ibkiaOFlInFUmYHyosEj05gIvIbxtUAvKdiakRAxsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1706&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图4 技术的分层模型图&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;针对某个具体的事物来画分层图的话，哲学层面上面还有学科层面，学科层面上面还有应用层面，应用层面继续往上就是具体的该事物的特性方面。当然分层模型的每一层都可以继续细化拆分，这一点就根据实际情况的需要进行对应的调整即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们结合上文讨论的文字内容，把技术分层模型中的实践的组成、技术的组成进行拆解，形成如下模型图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;150&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.25806451612903225&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUwA1GROgaeKA9gEat4Oducjl0XTOfPGm7ia08DjovVOZy4UYwl8CjibdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2976&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图5 技术分层模型图——内容组成详情&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;根据上面文字提到的一些技术的特性，我们简单画了一个技术生命周期示意图。需要注意的是，这个示意图只定性展示集中性质之间的关系，不是准确的定量分析曲线。同时，这个技术的生命周期只展示了一般情况，即技术经过一轮一轮的迭代改进，实用性提升，技术使用成本下降，到了某个量变到质变的分界点时，新的技术基于旧的技术被创造出来，新技术初期成本会有大幅提升，但是实用性也是比旧的技术有一定的大幅提升的，而后随着新技术的多轮改进，成本也逐步降低，实用性继续提升。这种只是一般技术的一种情况，我们知道实际情况下存在非常多的特例，但是这些特例整体上符合技术的几种特性之间的相互制约的关系的，这里就不再穷举画出其他情况的生命周期图了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;321&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5545335085413929&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPU065Ikyfc0blf16jdcXP6IUrQtFkrDa4cQNOic2S3STcs8zVO8U8L0mA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1522&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图6 技术的生命周示意期图（定性，非定量）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;什么是信息技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2/&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.1 信息技术的定义&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;154&quot; data-source-title=&quot;维基百科&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;信息技术（英语：Information Technology，缩写：IT）也称信息和通信技术（Information and Communications Technology，ICT），是主要用于管理和处理信息所采用的各种技术总称，主要是应用计算机科学和通信技术来设计、开发、安装和部署信息系统及应用软件。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A154%2C%22text%22%3A%22%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%EF%BC%88%E8%8B%B1%E8%AF%AD%EF%BC%9AInformation%20Technology%EF%BC%8C%E7%BC%A9%E5%86%99%EF%BC%9AIT%EF%BC%89%E4%B9%9F%E7%A7%B0%E4%BF%A1%E6%81%AF%E5%92%8C%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%EF%BC%88Information%20and%20Communications%20Technology%EF%BC%8CICT%EF%BC%89%EF%BC%8C%E6%98%AF%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E7%AE%A1%E7%90%86%E5%92%8C%E5%A4%84%E7%90%86%E4%BF%A1%E6%81%AF%E6%89%80%E9%87%87%E7%94%A8%E7%9A%84%E5%90%84%E7%A7%8D%E6%8A%80%E6%9C%AF%E6%80%BB%E7%A7%B0%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E5%BA%94%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%92%8C%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E6%9D%A5%E8%AE%BE%E8%AE%A1%E3%80%81%E5%BC%80%E5%8F%91%E3%80%81%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;维基百科&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;225&quot; data-source-title=&quot;百度百科&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;广义而言，信息技术是指能充分利用与扩展人类信息器官功能的各种方法、工具与技能的总和。该定义强调的是从哲学上阐述信息技术与人的本质关系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;中义而言，信息技术是指对信息进行采集、传输、存储、加工、表达的各种技术之和。该定义强调的是人们对信息技术功能与过程的一般理解。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;狭义而言，信息技术是指利用计算机、网络、广播电视等各种硬件设备及软件工具与科学方法，对文图声像各种信息进行获取、加工、存储、传输与使用的技术之和。该定义强调的是信息技术的现代化与高科技含量。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A225%2C%22text%22%3A%22%E5%B9%BF%E4%B9%89%E8%80%8C%E8%A8%80%EF%BC%8C%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%98%AF%E6%8C%87%E8%83%BD%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E4%B8%8E%E6%89%A9%E5%B1%95%E4%BA%BA%E7%B1%BB%E4%BF%A1%E6%81%AF%E5%99%A8%E5%AE%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%B9%E6%B3%95%E3%80%81%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%8A%80%E8%83%BD%E7%9A%84%E6%80%BB%E5%92%8C%E3%80%82%E8%AF%A5%E5%AE%9A%E4%B9%89%E5%BC%BA%E8%B0%83%E7%9A%84%E6%98%AF%E4%BB%8E%E5%93%B2%E5%AD%A6%E4%B8%8A%E9%98%90%E8%BF%B0%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%8E%E4%BA%BA%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%85%B3%E7%B3%BB%E3%80%82%E4%B8%AD%E4%B9%89%E8%80%8C%E8%A8%80%EF%BC%8C%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%98%AF%E6%8C%87%E5%AF%B9%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E9%87%87%E9%9B%86%E3%80%81%E4%BC%A0%E8%BE%93%E3%80%81%E5%AD%98%E5%82%A8%E3%80%81%E5%8A%A0%E5%B7%A5%E3%80%81%E8%A1%A8%E8%BE%BE%E7%9A%84%E5%90%84%E7%A7%8D%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%92%8C%E3%80%82%E8%AF%A5%E5%AE%9A%E4%B9%89%E5%BC%BA%E8%B0%83%E7%9A%84%E6%98%AF%E4%BA%BA%E4%BB%AC%E5%AF%B9%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E5%8A%9F%E8%83%BD%E4%B8%8E%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E8%88%AC%E7%90%86%E8%A7%A3%E3%80%82%E7%8B%AD%E4%B9%89%E8%80%8C%E8%A8%80%EF%BC%8C%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E6%98%AF%E6%8C%87%E5%88%A9%E7%94%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E3%80%81%E7%BD%91%E7%BB%9C%E3%80%81%E5%B9%BF%E6%92%AD%E7%94%B5%E8%A7%86%E7%AD%89%E5%90%84%E7%A7%8D%E7%A1%AC%E4%BB%B6%E8%AE%BE%E5%A4%87%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95%EF%BC%8C%E5%AF%B9%E6%96%87%E5%9B%BE%E5%A3%B0%E5%83%8F%E5%90%84%E7%A7%8D%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E8%8E%B7%E5%8F%96%E3%80%81%E5%8A%A0%E5%B7%A5%E3%80%81%E5%AD%98%E5%82%A8%E3%80%81%E4%BC%A0%E8%BE%93%E4%B8%8E%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%92%8C%E3%80%82%E8%AF%A5%E5%AE%9A%E4%B9%89%E5%BC%BA%E8%B0%83%E7%9A%84%E6%98%AF%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%8C%96%E4%B8%8E%E9%AB%98%E7%A7%91%E6%8A%80%E5%90%AB%E9%87%8F%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;百度百科&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.2 信息技术的分布情况&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术可以从硬件、软件来做简单的划分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由上一章节的图5 可知，技术中，与主体相关的维度中，包含着主体自身的知识和主体使用技术的规范、多个主体之间协作的流程、制度约束等。而与客体相关的维度中，包含着工具、工具相关的使用方法、产出标准等。信息技术中按照硬件、软件划分大的体系是与之相对应的，其中硬件是工具，软件是解决问题的流程、规范、约束等。当然，软件也包含着硬件的使用方法和产出标准等等。我们给出一个示意图，如下所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;432&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7476340694006309&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPUErPWibbBdHkBUUtIBS6q4uPP7lfxaQTDGWBz0ZQXEI8kw2VbypVIUOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;951&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图7 信息技术模型图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由上图可知，硬件以及与该硬件配合协作的软件共同构成了整个信息技术的底层技术，解决问题领域比较集中，工具属性强，业务属性弱；同时呈现出高度专业化，门槛高，因为涉及到实际物质的改造和使用，因此与其他通用技术关联性大，高度依赖通用技术；这部分技术体系是整个信息技术体系的基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;软件也呈现出比较明显的分层特点，底层的软件系统主要解决信息技术领域的各种问题，也和硬件或软硬结合的工具一样呈现出高度的专业性，代表性的技术就是各种操作系统、软件协议层、网络控制系统、文件系统等等；中间层是对底层技术的组合应用，解决的问题主要是横向的通用技术问题，技术通用性强，但是业务通用性弱，代表性的技术就是各类数据持久化技术、数据分析技术、调度系统、中间件等；再上层解决业务开展过程中的共通问题，业务通用性提升，例如各种公共业务服务，我们可以参考技术中间件的命名方式将这一层命名为业务中间件层；最上层则是和业务强耦合的各种业务系统，技术、业务通用性较低，但是需求契合度高。这个分层模型可以继续根据要解决的问题的共性和个性继续切分成更细的分层模型，比如我们可以在业务中间件层之上继续细化出通用业务服务层，例如各种办公自动化软件可以划分到这一层中，任何行业任何业务，都离不开人与人之间的沟通和协作，因此这一层解决的实际上是所有业务的共性部分，与具体的业务无关；我们还可以在通用业务服务层之上再细化出行业通用软件层，例如各种解决某个行业共同面临的业务问题的软件，可以划分到这一层，比如 CRM软件系统、电商系统、广告系统等等。我们可以看到这个层次的划分是按照事物的共性和个性来做分层的，这种方式也是我们分析其他任何事物都可以采用的方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.3 信息技术的特性&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术是特殊的技术，具备所有技术的特性，这部分我们不再展开描述，同时又因为它所处理的问题都是信息相关的问题，因此也具备信息相关的一些重要特性。这些特性是让信息技术有别于其他技术的关键点，我们可以在这里简单探讨一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;人类在最初感知自然世界、收取外界的信息时，依靠的就是触觉、味觉、视觉、听觉等，随着技术的发展，人类可感知的外界的信息维度变多，粒度、规模、尺度都超过人类自身感知能力；在某些领域中，信息技术在分析、决策方面也超过了人类智力，可以做到比人的大脑更强，即人类感知和智力的替代性要比其他普通技术更高，是其他技术所不具备的特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h4&gt;&lt;span&gt;信息贯穿于人类实践的全部环节，因此信息技术被应用的领域也贯穿于人类实践的全部环节，它的这种被应用的广泛性要远远高于其他技术。&lt;/span&gt;&lt;/h4&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在本文最开始讨论信息的章节中提到过，信息充斥于人类整个实践活动过程中，因此信息技术也有机会参与实践活动的全流程，这一点是信息本身的特性带给信息技术的，与某一个具体的通用技术相比，信息技术拥有最广泛的应用空间和发展前景，这是其他技术所无法比拟的。比如炼钢技术，只有在钢铁产业上下游会用到该技术，农业育种技术中无法应用炼钢技术，而信息技术则是可以被应用到从炼钢技术到农业技术再到其他几乎所有的综合技术体系中。这一性质决定了信息技术的跨产业特性，也决定着信息技术已经成为未来生产力的核心之一。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h4&gt;&lt;span&gt;与其他技术相比，信息技术从业者在这个技术体系中扮演着更重要的角色&lt;/span&gt;&lt;/h4&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们知道现有的产业可以划分为劳动密集型、资本密集型、技术密集型、资源密集型，而信息技术行业可能称为知识密集型更合适一些，也就是在技术密集型的基础上，从业者的脑力是更重要的一个关键因素，因此从业者与其他技术的相关从业者相比，在这个技术体系内扮演着更重要的角色。一般的技术主要载体是工具，而信息技术的主要载体除了各种硬件之外，就是“可以根据实际情况做针对性创造的软件”，而软件本身的创造者就是信息技术非常重要的另外一个载体。也就是说，人类从以往技术体系中的工具的操作者，向工具的载体演变，这就是为什么说从业者扮演的角色更加重要的原因。当然，在未来智能化时代到来的时候，从业者会因为人工智能的替代而逐步不再是信息技术的载体，逐步退化，但是由于技术的多代际共存的特性，以及在那个时代“人与信息智慧体的伦理关系”问题，这种退化的演变可能会是一个比较缓慢的过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;h4&gt;&lt;span&gt;信息技术直接作用于信息层面，它带来的变革对人类社会的影响更深远。&lt;/span&gt;&lt;/h4&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1) 信息技术的出现打破了过去信息载体的各种束缚&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术的出现，打破了信息在过去人类实践过程中受到的各种束缚：信息的采集方面打破了生物器官天然的可识别区间的束缚，让我们感知到了原本我们无法感知的信息；信息的传输方面打破了过去其载体在空间维度的限制，让信息的传递和交换突破距离的束缚，同时也打破了时间维度的限制，让信息实时传递变成可能；信息的存储技术则打破了过去信息载体带来的维度单一的限制，由过去的文字、图画信息到今天的音视频信息。信息的分析技术在某些领域已经对人类智能形成碾压性的优势，因此不论从质量、还是从规模还是从效率方面来看，信息技术都让信息参与实践过程发生了本质变化。例如数控机床和普通车床就不是同一个东西了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2) 信息技术对旧技术体系的改造升级，引发并推动旧技术体系的量变到质变过程，变成新技术体系&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就像几次工业革命之后，新的核心生产力逐步、全面替代旧的核心生产力一样，信息技术也会通过自身的特点，提升过去的技术，甚至因为这样的提升而让旧的技术变成新的技术。当然我们根据之前讨论过的技术的多代际共存规律来看，信息技术对旧技术体系的改造、提升将会是一个逐渐发生的过程，旧的技术虽然会继续存在下去，但是其专利性降低，价值降低，这意味着旧技术的淘汰和新技术的崛起，而信息技术就是这个过程的核心动力和催化剂。作为信息产业的相关从业人员来讲，这意味着我们在经历、甚至在推动人类历史上最重要的变革。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3) 信息技术改变旧的业务的同时创造着新的业务&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息处理能力的变化让过去不可能发生的事情都变成可能，从根本上改变着过去在旧的技术体系下形成的业务，例如在线电商打破了传统贸易中的地理限制，数控技术打破了过去实践主体的自身生物机能上的限制，广告技术打破了过去传媒行业对目标受众在时间、空间、规模上的推广限制。除了让旧的业务变成新的业务，信息技术也创造了很多过去不存在的业务，比如导航服务、比如基于用户内容互动的文娱业务等等。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;3.4 信息技术的发展趋势&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术是特殊的技术，与其他技术存在共性，也同样遵守技术的发展规律，因此这些共性部分我们不再讨论，只讨论信息技术自己的发展规律。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作为新的核心生产力，信息技术逐步推广应用到各行各业是必然的历史趋势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;已经完成信息化的行业，会逐步向数字化、智能化方向发展，这个发展趋势是信息技术从生产力影响生产关系的必然性得出的。信息化的行业将生产过程中的所有物质产出和信息产出都对应起来，但是如果生产关系仍然是旧的模式和体系，则无法发挥信息技术的优势，因此生产关系也会随之发生改变，这种改变就是数字化的过程，即依靠信息技术构建新的生产流程、构建新的分析方法、建设辅助决策甚至是替代决策的能力，就是对生产关系的信息化改造。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;关于信息技术的总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本章节我们分别以信息、技术为主体讨论了各自的特性，然后以信息技术为主体进行分析，这样就能够看到信息技术很多现象、性质、发展趋势的来龙去脉。我们在论述过程中，考虑到本篇文章主题是与业务相关，因此没有花太多篇幅来讨论信息技术和组织的关系，这部分内容会在组织篇中，以组织为核心讨论话题时，再拿出来讨论信息技术对组织的影响，本文就不再展开讨论了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;03&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;信息技术与业务的关系&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;按照图7 中的内容来看，与业务相关性较强的部分是软件系统，同时由于本人对硬件技术体系几乎不了解，因此我们把信息技术与业务的关系讨论范围限定在软件系统层面，硬件技术体系和业务的关系就不再着重讨论了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分析软件系统层面，我们可以发现，很多企业的核心业务是基于软件系统的，例如互联网行业；也有很多企业业务本身虽然不是以软件系统为核心，但是软件系统在生产过程中扮演着越来越重要的角色；还有很多企业在管理方面也逐步依赖各种通用办公软件来提升日常办公效率。不同的业务形态下，信息技术要解决的问题侧重点不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;信息技术作为生产工具，支撑业务发展&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;1.1 业务无关的技术产品&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术作为新时代的核心生产力，本身具有较高的门槛。对于广泛的各行业企业来说，不论是依靠专业性、深入性、复杂性形成的行业护城河，还是前期庞大的资源投入，还是专业能力过硬的研发队伍的建设（研发团队是信息技术的载体），还是其他成熟软件厂商的先发优势，还是从自身的投入产出比来看，信息技术产品变成必须但是不一定要自研的必需品。因此在信息时代，解决各种技术领域特定问题的技术产品或解决方案就出现了巨大的市场空间，巨大的市场空间也吸引着各种各样的信息技术/软件厂商面向广泛的各行业企业提供此类商品。从硬件到软件，从存储技术、数据技术、智能技术、网络技术再到现在的云原生技术产品，成为新时代的基础工具之一。这个过程，就像是内燃机技术出现后，各行业都需要使用它替代过去的动力源，因此相关的技术成为当时的基础技术体系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.2 支撑通用业务领域的软硬件产品&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在业务无关的技术产品之上，由于跨行业的共性，也催生了很多通用业务领域的软硬件产品，比如我们常常见到的各种公文处理工具软件，各种通信协作软件，各种人力资源、财务管理系统等等。这些信息技术体现出了一定的业务性，但是因为其面向通用业务问题，因此并没有涉及到不同行业的核心系统，所以行业特点不明显，于是就体现出了这类软件的跨行业的特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而随着信息化建设的继续发展，软件也开始瞄准某个行业的共性问题提供对应的信息化解决方案，于是这类型软硬件产品开始呈现出比较明显的行业特性，比如政务、法务、水利、制造业、金融业等等，行业问题的分化引领着业务领域知识的分化，同时也催生出信息技术的行业特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着信息化建设的进一步深入，信息技术产品开始处理某个公司自己特有的问题，则信息技术产品逐步与特定的业务需求强绑定，从而显现出非常强的业务相关性和客户差异性，通用产品就不再适用这样的客户了，于是定制化、项目化成为了信息技术的另外一个重要的领域。从这个过程我们可以看到整个信息技术与客户业务的相互影响下，呈现出了怎样的发展过程，以及每个过程所侧重的特性是什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;107115&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section hm_fix=&quot;320:270&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;信息技术作为业务开展的核心生产力&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;互联网行业业务以信息技术为核心，因此从产品创造、产品营销、产品售卖、产品交付、收取回报和持续业务运转，都需要对应的技术系统来支撑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.1 产品创造环节&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以信息技术作为产品价值创造的主要工具，属于核心业务。这个环节需要区分产品类型，是属于技术型产品还是业务型产品，因为技术型产品和业务型产品的核心侧重点不同，前者的专业性、先进性是重点，而后者则是“解决用户问题，从而带来价值”是重点。如果是业务型产品，也要区分是面向企业的还是面向普通用户的，客户类型的不同，则产品复杂度和业务领域也不同。这些都取决于业务开展方具备什么样的能力，有哪些优势，潜在的市场有多大共同决定的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.2 产品营销环节&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个环节要解决的核心问题就是产品价值的传递，信息技术要能够支持运营人员将产品价值准确、高效、低成本地传递给目标用户群体，同时也注意普通用户向目标用户群体的转化，即产品是什么、解决了什么问题、对谁有价值、有什么价值。而想要达到这样的效果，就要深入研究信息传播过程的本质，从信息内容到信息传播方式到接收信息者的吸收，再到接收者对产品价值的认知的建立，再到产品价值的认可，到最终接收者使用哪个产品的决策偏好的倾斜等，都是这个环节要关注的事情。另外就是在这个环节中，信息技术不能只是仅支持营销相关的事情，而应该把所有影响营销效果的相关领域也纳入支持范围，和其他环节以及其他业务域形成良好的配合。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.3 产品售卖环节&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个环节要解决的核心问题是产品的定价体系的建立、售卖体系的建立以及客户关系体系的建立，即产品要卖多少钱、怎么卖出去、卖给谁。产品的定价策略关系到整体业务甚至是企业本身的成本收益控制，信息系统要能够支持产品成本方面的变化，利润的变化趋势，并且能够根据市场情况和公司策略来调整定价体系，同时不发生亏损。另外就是销售体系的数字化也是这个环节中信息技术的非常重要的一个领域。直销、分销、市场拓展、客户关系等等都需要将成功的、有效的销售体系运转经验通过信息化技术转换为成熟的管理模式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.4 产品交付环节&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个环节中，和传统的业务相比而言，对于以信息技术为核心生产力的企业来说，形式更新颖一些，更具信息化技术的特色。这个环节要解决的核心问题是花钱购买了信息化服务的客户如何享受到对应的付费内容，即什么用户，以什么样的方式，享受到什么样的信息化服务。面向 C 端用户的信息化服务来说，一般能够使用对应的软件即可，或者能够享受到对应的数字内容服务即可；而面向 B 端企业用户来说，交付就根据实际情况来看可能会变得非常复杂，特别是以项目定制方式进行交付的，交付周期长、交付内容多、交付内容变化风险大、交付效果不稳定等等一系列的问题，不过正因为这些问题的存在，因此标准化交付能力建设也是信息技术行业内的一个较大的命题；当然也有一些面向企业客户的信息化服务是以标准化软件的方式进行交付的，这样的交付则会相对简单一些。整个交付过程事实上也是一个服务过程，所以单纯做技术系统的交付是不能把这个环节的问题彻底解决掉的，而要从更高的视角认清信息技术交付的本质是什么（价值的传递）。这部分我们会在技术篇中详细论述。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2.5 收取回报和维持业务运转环节&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个环节要解决的问题就是资金的回收、风险的控制、资源投入的管控等，即：这个产品能收多少钱，是赚了还是赔了，要不要继续投入，投入多少合适，跟资金相关的安全风控等。支撑这类业务的信息技术一般偏专业业务领域，如财会系统、预算系统、风控系统等等，有行业标准的系统软件，也有根据企业自身特殊的经营理念、流程而自主定制开发的系统，或者二者结合。这类型信息系统的建设需要较强的行业知识。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;04&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;在信息技术加持下的业务发展规律&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;信息技术存在之前，就有各种各样的业务在开展，信息技术出现之后，各种各样的业务也利用信息技术的特性来演进自身业务模式——过去的报纸、现在的公众号；过去的钱庄，现在的银行；过去的镖局，现在的物流公司；过去的集市，现在的电商。在“信息技术的发展趋势”小节中我们提到过，各行业的信息化是必然趋势，同时也朝着数字化、智能化发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;什么是业务信息化，什么是业务数字化，什么是业务智能化，都没有绝对统一的现成的定义，本文尝试给出一个定义，如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 业务信息化，就是指开展业务过程中，使用信息技术来完成生产过程中信息的采集、保存、传递、处理。业务信息化，是业务利用信息技术的初级模式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 业务数字化，就是指企业生产经营各环节信息化的基础之上，以大数据和智能技术为基础，针对企业生产经营过程中的数据进行分析处理，以完整的数字指标体系洞察业务全貌，指导并提升企业管理运营水平、企业生产能力的过程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 业务智能化，就是指在业务数字化的基础上，利用相应的信息技术和智能技术，将某些领域的生产经营决策智能化，释放因决策者脑力有限形成的对生产力的束缚。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对这些定义，我们以下图做一个总结，就不再展开更详细的论述了，后续的业务篇和技术篇中，会针对性的结合一些实践经验给出相关的做法：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;362&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6265508684863523&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/qdzZBE73hWvzliaVFUha7xOQWZb8WVfPU2fDOticlmWgpMdyPx4qBku7rtEINszLPFYBGicHtUic76KSB9KybiaCPUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1612&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图8 信息化、数字化、智能化&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;05&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;技术一号位应该了解的命题&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1. 了解信息技术的本质。结合本文提供的简单的讨论和论述，深入了解信息技术的本质，了解技术与人、技术与自然、技术与社会的关系和相互影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. 明确了解自己负责的业务对应的技术系统在解决哪个或哪些层面的问题，比如是解决底层技术问题，还是解决上层应用层的问题，不同层面的问题的侧重点不一样，需要构建的个人能力和团队能力也有不同的侧重点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3. 该层面的核心问题问题是什么，过去是如何解的，现在应该如何解，未来可能怎么解，即了解自己所负责的技术领域的发展过程，知道当下技术体系的问题和适用范围是什么，能够结合业务、技术的性质等预测未来技术发展趋势，并且找到发展的关键节点，利用针对性的改进或创新来推动这种技术趋势的发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. 明确了解自己负责的业务在解决哪个领域的问题。如果负责的是某个具体业务领域的信息系统建设，则需要知道这个领域是单一的业务领域还是全维度全链路的业务领域。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. 该领域的核心问题是什么，过去如何解决，现在应该如何解，未来可以怎么解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;6. 自己负责的业务未来发展是什么样的，信息技术如何应对这样的发展趋势，对应领域的信息技术目前是否与业务当前发展阶段匹配。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;7. 自己负责的技术或业务与其他技术或业务的配合会形成怎样的局面。这一点需要能够以更大的视野来观察自身负责的业务在公司整体业务版图内所扮演的角色，需要以怎样的发展轨迹来完成当前业务的历史使命。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;8. 一些常见的组织现象或业务开展过程中存在的现象在哲学层面的根本原因是什么，在现有条件下的合理解法是什么。比如常见的有：走技术研发路线还是业务研发路线、组织内部重复造轮子是为什么、平台型技术推广受阻是为什么、如何降低业务系统建设周期、为什么要针对一些已有的、常见的技术问题推行解决方案标准化等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;9. 根据业务特性、技术特性构建团队能力模型和个人能力模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;title&quot; data-tools=&quot;135编辑器&quot; data-id=&quot;106625&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;06&lt;/strong&gt;&lt;strong data-original-title=&quot;&quot; title=&quot;&quot; data-num=&quot;3&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;343:395&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-role=&quot;list&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;Aliware&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;本文主题是讨论信息技术与业务的关系，但是为了能够让读者理解这种关系中会提到的很多结论性的内容“为什么是这样”，因此花费了较多篇幅将信息、技术、信息技术做了深入的剖析，在了解了它们的特性和规律的基础上，才能很好地理解信息技术是什么，为什么它会与业务有这样或那样的关系。同时我们也看到，本文中很少提及 “人”或“组织”，但是事实上，技术和业务关系的探讨中，是少不了“组织”相关的维度的，这里为了降低读者理解的难度，压缩文章篇幅，我们较少地探讨组织维度的话题。后续我们会把相关的部分放在“组织篇”中，专门探讨业务和组织的关系，从而协助读者构建起全面、完整的认知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期回顾&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247500280&amp;amp;idx=1&amp;amp;sn=960c47b31f5d888c7787975c07bed3f3&amp;amp;chksm=fde8f398ca9f7a8e7a0382ae3e5fe95929fdeb1d0c87a450e99fa91fe179d01a03bb523ddc02&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」第6篇：技术同学应该如何理解业务？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第6篇：技术同学应该如何理解业务？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247498743&amp;amp;idx=1&amp;amp;sn=ea72f60cd9c2db5a60a97f2f49966501&amp;amp;chksm=fde8c997ca9f408111afe9477f0400d2e599d8a51608a0d7a52b5a67d20a758ec06cbfd820ee&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;技术人生第5篇——浅谈如何成为技术一号位？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第5篇——浅谈如何成为技术一号位？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247495241&amp;amp;idx=2&amp;amp;sn=821aced424d4922857ef96250fddc113&amp;amp;chksm=fde8dc29ca9f553f17722f46ae636cb1b4aa57a9e9e04e7e672ebf0f0cfc58d235efcec4e763&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」第4篇：技术、业务、组织的一般规律及应对策略&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第4篇：技术、业务、组织的一般规律及应对策略&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247494788&amp;amp;idx=3&amp;amp;sn=a16a423bc15ad088b11f7f5e9b2b541b&amp;amp;chksm=fde8dee4ca9f57f243e0ed9bba63a14919207767be011f2688c64abaa69b020cd40147ce13f3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」第3篇：解决问题的规律总结&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第3篇：解决问题的规律总结&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247494519&amp;amp;idx=1&amp;amp;sn=80c49580c997b895de077edb62af01b6&amp;amp;chksm=fde8d917ca9f50016cfb09c104f0ee93b9afe9d848f65f32159b66216f8128366ac96ca9b9ff&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」第2篇：学会分析事物的本质&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第2篇：学会分析事物的本质&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;amp;mid=2247494405&amp;amp;idx=1&amp;amp;sn=6497bacd570c0cefe6ab5f815d6e279f&amp;amp;chksm=fde8d965ca9f5073c8fc8044035935ac31d6d102e0a728f93ffa115522a014f47b6421a9b559&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;「技术人生」专题第1篇：什么是技术一号位？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;「技术人生」第1篇：什么是技术一号位？&lt;/span&gt;&lt;span/&gt;&lt;/a&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>