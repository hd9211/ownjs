<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ed31b102189bba1236d1374b610de243</guid>
<title>我给 “Go 语言” 开发了 6 个在线工具</title>
<link>https://toutiao.io/k/96zw0k6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;h2 id=&quot;h_438165485_0&quot; data-into-catalog-status=&quot;&quot;&gt;工具快速访问&lt;/h2&gt;&lt;h2 id=&quot;h_438165485_1&quot; data-into-catalog-status=&quot;&quot;&gt;JSON转GO&lt;/h2&gt;&lt;p data-pid=&quot;hN0yi9Rq&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.printlove.cn/tools/json2go&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/json&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;2go&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_2&quot; data-into-catalog-status=&quot;&quot;&gt;1. 有两种模式&lt;/h3&gt;&lt;ul&gt;&lt;li data-pid=&quot;BzzMFqvc&quot;&gt;转化-展开：json中的所有对象都创建为新的struct&lt;/li&gt;&lt;li data-pid=&quot;bzuzOB8B&quot;&gt;转化-嵌套：json中的对象都包含到一个struct中&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;h_438165485_3&quot; data-into-catalog-status=&quot;&quot;&gt;2. 自定义tag&lt;/h3&gt;&lt;p data-pid=&quot;6BDzLNC7&quot;&gt;默认转化后的&lt;code&gt;tag&lt;/code&gt;是&lt;code&gt;json&lt;/code&gt;，也可以自定义，比如可以改为：gorm&lt;/p&gt;&lt;h3 id=&quot;h_438165485_4&quot; data-into-catalog-status=&quot;&quot;&gt;3. 效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7a68cfa0da404274080782fe7e42ba3a_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1350&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-7a68cfa0da404274080782fe7e42ba3a_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1350&quot; data-rawheight=&quot;410&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-7a68cfa0da404274080782fe7e42ba3a_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-7a68cfa0da404274080782fe7e42ba3a_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;h_438165485_5&quot; data-into-catalog-status=&quot;&quot;&gt;YAML转GO&lt;/h2&gt;&lt;p data-pid=&quot;hoqbZn3X&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.printlove.cn/tools/yaml2go&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/yaml&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;2go&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;sZcSXIHd&quot;&gt;将 yaml 格式自动转化为 Go Struct 结构。&lt;/p&gt;&lt;h3 id=&quot;h_438165485_6&quot; data-into-catalog-status=&quot;&quot;&gt;效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-08dc6f8d59a4173ee9b4cfbc3b1438a5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1041&quot; data-rawheight=&quot;501&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-08dc6f8d59a4173ee9b4cfbc3b1438a5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1041&quot; data-rawheight=&quot;501&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-08dc6f8d59a4173ee9b4cfbc3b1438a5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-08dc6f8d59a4173ee9b4cfbc3b1438a5_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;h_438165485_7&quot; data-into-catalog-status=&quot;&quot;&gt;SQL 转 ent&lt;/h2&gt;&lt;p data-pid=&quot;12VSfsB7&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//printlove.cn/tools/sql2ent&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/sql2&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ent&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_8&quot; data-into-catalog-status=&quot;&quot;&gt;1. 效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e1571347f71b275a9fb68ad95471d073_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1298&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-e1571347f71b275a9fb68ad95471d073_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1298&quot; data-rawheight=&quot;533&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-e1571347f71b275a9fb68ad95471d073_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-e1571347f71b275a9fb68ad95471d073_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_9&quot; data-into-catalog-status=&quot;&quot;&gt;2. 功能&lt;/h3&gt;&lt;ol&gt;&lt;li data-pid=&quot;owa8KFY3&quot;&gt;此工具提供将 SQL 语句转化为 &lt;code&gt;ent schema&lt;/code&gt;&lt;/li&gt;&lt;li data-pid=&quot;F5A21jXA&quot;&gt;提供常见的数据库类型到 field 函数的转化&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;h_438165485_10&quot; data-into-catalog-status=&quot;&quot;&gt;SQL 转 ElasticSearch DSL&lt;/h2&gt;&lt;p data-pid=&quot;BiWnMZfQ&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//printlove.cn/tools/sql2es/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/sql2&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;es/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_11&quot; data-into-catalog-status=&quot;&quot;&gt;1. 效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7c3d1bd7bab05852111e1ec635593355_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1893&quot; data-rawheight=&quot;848&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-7c3d1bd7bab05852111e1ec635593355_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1893&quot; data-rawheight=&quot;848&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-7c3d1bd7bab05852111e1ec635593355_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-7c3d1bd7bab05852111e1ec635593355_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_12&quot; data-into-catalog-status=&quot;&quot;&gt;2. 当前支持&lt;/h3&gt;&lt;ul&gt;&lt;li data-pid=&quot;okC6TfoC&quot;&gt; sql and expression&lt;/li&gt;&lt;li data-pid=&quot;aQvWiRaY&quot;&gt; sql or expression&lt;/li&gt;&lt;li data-pid=&quot;8Z0Ehz-t&quot;&gt; equal(=) support&lt;/li&gt;&lt;li data-pid=&quot;aox2CYMl&quot;&gt; not equal(!=) support&lt;/li&gt;&lt;li data-pid=&quot;GssvjIWL&quot;&gt; gt(&amp;gt;) support&lt;/li&gt;&lt;li data-pid=&quot;DqM6rQ0j&quot;&gt; gte(&amp;gt;=) support&lt;/li&gt;&lt;li data-pid=&quot;DM4IrgRL&quot;&gt; lt(&amp;lt;) support&lt;/li&gt;&lt;li data-pid=&quot;90Z4q-_M&quot;&gt; lte(&amp;lt;=) support&lt;/li&gt;&lt;li data-pid=&quot;lnrHIxVT&quot;&gt; sql in (eg. id in (1,2,3) ) expression&lt;/li&gt;&lt;li data-pid=&quot;T8tBW6VR&quot;&gt; sql not in (eg. id not in (1,2,3) ) expression&lt;/li&gt;&lt;li data-pid=&quot;HD1VzFoy&quot;&gt; paren bool support (eg. where (a=1 or b=1) and (c=1 or d=1))&lt;/li&gt;&lt;li data-pid=&quot;kXgyVUNp&quot;&gt; sql like expression (currently use match phrase, perhaps will change to wildcard in the future)&lt;/li&gt;&lt;li data-pid=&quot;sgYz97qO&quot;&gt; sql order by support&lt;/li&gt;&lt;li data-pid=&quot;3sJBVMCt&quot;&gt; sql limit support&lt;/li&gt;&lt;li data-pid=&quot;c-cv1tYW&quot;&gt; sql not like expression&lt;/li&gt;&lt;li data-pid=&quot;nMXhbvPk&quot;&gt; field missing check&lt;/li&gt;&lt;li data-pid=&quot;Ux_PwU2-&quot;&gt; support aggregation like count(*), count(field), min(field), max(field), avg(field)&lt;/li&gt;&lt;li data-pid=&quot;x8aOn4-Y&quot;&gt; support aggregation like stats(field), extended_stats(field), percentiles(field) which are not standard sql function&lt;/li&gt;&lt;li data-pid=&quot;g8EAqLOt&quot;&gt; null check expression(is null/is not null)&lt;/li&gt;&lt;li data-pid=&quot;JUbFf8eJ&quot;&gt; join expression&lt;/li&gt;&lt;li data-pid=&quot;ohoUmhN9&quot;&gt; having support&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;h_438165485_13&quot; data-into-catalog-status=&quot;&quot;&gt;SQL转&lt;span data-search-entity=&quot;go-zero&quot;&gt;go-zero&lt;/span&gt;&lt;/h2&gt;&lt;p data-pid=&quot;Yo6Llolo&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//printlove.cn/tools/sql2gozero&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/sql2&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;gozero&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_14&quot; data-into-catalog-status=&quot;&quot;&gt;1. 效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-419aa9d49051b54c43ca0a6c03040d68_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1063&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-419aa9d49051b54c43ca0a6c03040d68_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1063&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-419aa9d49051b54c43ca0a6c03040d68_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-419aa9d49051b54c43ca0a6c03040d68_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_15&quot; data-into-catalog-status=&quot;&quot;&gt;2. 功能&lt;/h3&gt;&lt;p data-pid=&quot;MhWyZsYN&quot;&gt;和官方的 goctl 工具生成的代码是一样的，同样支持是否带缓存的Model。&lt;/p&gt;&lt;h2 id=&quot;h_438165485_16&quot; data-into-catalog-status=&quot;&quot;&gt;SQL转GORM Model&lt;/h2&gt;&lt;p data-pid=&quot;zoN6M4Ew&quot;&gt;网址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.printlove.cn/tools/sql2gorm&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;printlove.cn/tools/sql2&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;gorm&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_17&quot; data-into-catalog-status=&quot;&quot;&gt;1. 效果图&lt;/h3&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1ec2f3d47044159ff42a9edef8e42052_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1336&quot; data-rawheight=&quot;507&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-1ec2f3d47044159ff42a9edef8e42052_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1336&quot; data-rawheight=&quot;507&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-1ec2f3d47044159ff42a9edef8e42052_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-1ec2f3d47044159ff42a9edef8e42052_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_438165485_18&quot; data-into-catalog-status=&quot;&quot;&gt;2. 功能&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>94813e27a8df57ec788913b30224f23b</guid>
<title>程序员的 10 个好习惯</title>
<link>https://toutiao.io/k/2y6pnqa</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我总结了 10 个程序员的好习惯，今天分享给大家。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;1. 引入新的技术栈的时候，要以官方文档为主&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目里，无论使用新的 jar 包，还是用新的中间件，一定要去看官方文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在网上的技术文章鱼龙混杂，再加上国内那个不咋地的搜索引擎，所以在网上搜靠谱的技术文章，就相当于在屎坑里捞金子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，如果你想要对 SpringBoot2 写的代码进行单元测试，JUnit 版本你可能已经是 5 了。但你搜到的网上文章很可能会告诉你测试用例需要注解:&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@RunWith(SpringRunner.class)&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是官方文档说了，其实如果你用 JUnit5，就不用加这个注解了，加了反而可能引起不必要的冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，官方文档对新技术的引入是唯一的参考金标准。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;2. 一定要悄悄地把代码测的没问题了再交付&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在职场上，什么样的人才能快速成长、快速得到重用？答案是可靠的人。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那就程序员来说，什么样的人才算是可靠的人？答案是交付可靠的技术产品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那可靠的产品第一评估标准就是 bug 少。这个 bug 少是别人评估的，而不是自己评估的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论咱们自己代码实现成什么样子，哪怕是代码写的还不完美，但是，只要咱们通过自测，在提交之前尽可能把问题解决掉，让别人少发现你的错误，尤其是低级 bug，那么你才是一位可靠的程序员。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，交付任务前，一定要自己把代码全方位地测试一遍，保证自己有着优秀的口碑才好。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;3. 打日志的时候尽可能把输入、输出以及耗时都打印出来&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们打日志的目的是什么？是为了定位问题的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题有哪些？其实大体就两种，逻辑问题和性能问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;逻辑问题，我们如果打印了输入和输出，那么根据业务规则，这么一对照就能很容易定位到问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能问题，我们无论是通过像 grep、sort 等 shell 命令去直接对日志做个过滤加排序，还是通过日志搜集加日志搜索等工具，都能很容易的发现到问题。甚至还可以和监控系统联合起来，直接做预警。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，打日志的时候，我们要记得把输入和输出以及时间都打印出来。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;4. 学好 Git&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Git 这东西太重要了。现在的团队开发，用 Git 管理各种代码版本，代码分支。如果你用不好 Git，很容易就会因为合并代码、升级版本等情况，产生出许多没必要的 bug。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个用不好 Git 的团队，可能每次上线，都会带来那么几个莫名其妙的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给大家分享一本非常不错的 Git 开源手册。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3343558282208589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KQp3cY9qSia2icn4N65VTnMgNibyKOQ0eMqf83upicXMKm2YpuDaT0MGZq4IByOI4lwnP04zQIs1ba3oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本手册在豆瓣上评价极高，之前 9.3，现在也有 9.1 的高分，其作者是 GitHub 的员工，内容主要侧重于各种场合中的惯用法和底层原理的讲述，手册中还针对不同的使用场景，设计了几个合适的版本管理策略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简而言之，这本手册无论是对于初学者还是想进一步了解 Git 工作原理的开发者都非常合适。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取方式，在我的公众号后台回复「&lt;span&gt;&lt;strong&gt;git&lt;/strong&gt;&lt;/span&gt;」&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU3MTg3NDYwNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRu19xsskWLWZBk2wEEmTf2kZWAH41Pptb4So66eJGXF0hLGVHWj6fDZ16m4FOicOJ9Iicj1q5xVmrQ/0?wx_fmt=png&quot; data-nickname=&quot;四猿外&quot; data-alias=&quot;si-yuanwai&quot; data-signature=&quot;百人技术团队的技术总监，专注分享技术和职场心得。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;5. 优先实现功能，性能问题或许没那么着急&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在带团队的时候，经常发现有些刚入行的同事，会边写代码边纠结自己写的代码性能是否有问题。其实真的不必这样。像我们这些老程序员，都知道过早优化有时候可能白花费功夫。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像咱们如果写一个批处理的定时任务，这个任务要求只要在凌晨运行，在大家上班前任务完成就行。那么，这个任务从凌晨两点运行到六点和运行到四点，有什么区别吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优化代码一定要适度，要在写完功能之后，看功能会怎么被使用，根据实际的要求，去优化真正需要优化的地方。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;6. 先实现最确定的需求，不确定或者模糊的需求先往后放&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现需求的先后顺序，注意一定要以需求的可靠程度为准。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分配给我们的需求里一般分两类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有的需求是我们和产品经理都非常明确的需求；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;也有的需求比较模糊：开会讨论时大家都觉得没什么问题，但是一到代码实现的时候，就发现还存在很多问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，咱们应对的技巧是，先对这些需求搭一个统一的架子，把已经非常明确的需求先开发出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于架子搭建出来了，这时候再和产品经理讨论那些模糊的需求，很容易就能让产品明白困难的地方，这样就可以把沟通难度降到最低。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;7. 主动找项目里的问题并给出解决方案&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题是什么？问题就是在实践过程中需要解决的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把这些问题一个个找出来，解决掉，这些解决问题中产生出来的方案，全会形成推动项目前进的推动力。那么产生这些推动力的你自己，一定会从中获益良多。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;8. 评估开发周期，要留出冗余时间&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;留出冗余时间的目的很明确，在咱们开发的时候，遇到的意外情况太多了：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;需求又双叒叕变了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;团队人员有变化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当初估算的时间乐观了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这个功能需要动老代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;需要跨团队合作开发&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;领导说“加个小功能”，领导认为这个小功能不影响开发周期（此处省略二百字）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，冗余时间是要留出来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;留出的冗余时间不等于摸鱼时间，开发还是按照正常的节奏干，早做完早交付。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;9. 不要光看书去学习技术，要把感兴趣的技术通过代码实现出来&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱们程序员最重要的就是实践，能把学到的知识转化为实践用到工作上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光看书学习技术，很可能只会让咱们产生出已经学会的错觉。只有通过代码把感兴趣的技术实践练习了一遍，咱们才真正能明白这技术实际用起来是什么样子，需要注意什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;动手实践的重要性就不多说了，我之前也写过一些文章介绍过如何动手实践，比如这篇通过模拟环境来学习高并发：&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247485523&amp;amp;idx=2&amp;amp;sn=c55a85b447e650d1764a7ea9ab416a72&amp;amp;chksm=fcd8c412cbaf4d04d038c42aff76f48a66d722e779c51c0c267f036df5e0772716d04a808b58&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;我招了个“水货”程序员&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;我招了个“水货”程序员&lt;/a&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;10. 英语还是挺重要的&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你不得不承认，IT 这行，基本所有的创新都诞生于英语的世界。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如 k8s，就我所知就是国内英语好的技术人员从英语社区逐渐在国内推广开来，而这些推广了 k8s 的先驱也自然掌握了 k8s 的话语权。大家可以看看 k8s 在市场上的流行程度，也可以看看一位 k8s 专家的工资大概是多少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且，我前面说过，大家引入新技术一定要看官方文档，官方文档百分之八十都是英语的，所以英语确实重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果英语不好，是不是就没机会了？没这么绝对。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就说我吧，不瞒大家，我英语四级没过，但还是照样能看英语资料，照样和别人一起翻译了国内的第一本 Hibernate 技术书。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当初我用 Hibernate 在国内算是比较早的一批程序员了，也经常去论坛回答问题，所以后来就有人找我一起翻译书。我最开始是抗拒的，觉得自己英语太烂了，翻译不好。后来我又想，既然我能看着英语文档学 Hibernate，要不就试试。于是就这么着干了一把。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个过来人，我想说的是，技术文档没有特别复杂的语法、生僻单词，而且现在还有翻译软件、插件可以帮我们阅读。即使英语基础一般，也没什么大不了的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;-完-&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看完觉得有收获，可以点个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是四猿外。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一家上市公司的技术总监，管理的技术团队一百余人。想了解我如何管理团队——&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247485282&amp;amp;idx=1&amp;amp;sn=f368ffae1845809ccf06859f988a88a8&amp;amp;chksm=fcd8cb23cbaf4235db644759c3d8099045d10fc952b950d429e4a5e07ed9a806fddf85c451d3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;我，管理100多人团队的二三事&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我从一名非计算机专业的毕业生，转行到程序员，一路打拼，一路成长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会通过公众号，&lt;br/&gt;把自己的成长故事写成文章，&lt;br/&gt;把枯燥的技术文章写成故事。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>952e366a73b4c28f8e75c92fdbdfea71</guid>
<title>进行一个 SQL 优化需要做哪些准备？ (Metadata Lock 和 online DDL)</title>
<link>https://toutiao.io/k/sj4s6ev</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;优化的必要性和急迫性分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;真的有必要优化吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485779&amp;amp;idx=1&amp;amp;sn=95a8b630d96dc0e76436f7b1c3d5bd51&amp;amp;chksm=fafde3fdcd8a6aebaf8128b65255d8d38bdd695a02c2c218e5435e29073726b1c2e5525a9355&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《容易引起雪崩的两个处理》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《容易引起雪崩的两个处理》&lt;/a&gt;里，我提到一个慢查询问题。因为一个慢查询造成了联调环境的数据库挂掉，我们进行了点线面的梳理，排查了所有数据库相关的隐患，研究了优化方案。&lt;/h1&gt;&lt;h1&gt;在研究优化方案过程中，重点讨论的是哪些该做、哪些不做。因为在进行一个已经立项的新项目时，自然是在工期允许的范围内，尽量采用高效的方法；但是一旦已经上线到生产，再进行优化需要考虑风险的代价和收益是否成正比。&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;举个具体的例子，做优化方案时，我们整理了所有的数据库表、DML语句。密密麻麻的Excel啊，辛苦了认真细致的开发小哥哥。&lt;/p&gt;&lt;p&gt;但是最终在所有未加索引和索引不合理的相关表中，真正要优化的范围我们限定到了存在慢查询问题的表。而且，有的表可以通过数据定时清理解决的，也排除在了优化索引范围外。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.046770601336303&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCic5YXkjhbEalHF7FlTIBZ2D0KbgF1VsXoX4RlgYMXlELqorMc55gQJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;449&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以，最后经过好几天的梳理和讨论，近百张(分表算1张)表中，我们定下来需要优化的表有两张。&lt;/p&gt;&lt;p&gt;那这两张表的加索引的最坏影响是什么？不加索引的最坏影响是什么？&lt;/p&gt;&lt;p&gt;首先一个经验：后加的索引没有十足的把握不要加唯一索引，否则数据会被合并，很多数据会消失！普通索引最坏的影响是锁表？锁表不可怕，可怕的是把表写坏了，不能用了。这时候就需要DBA操作前数据表备份，出现问题立即恢复。恢复时间段内的业务影响要评估清楚。&lt;/p&gt;&lt;p&gt;不加索引的最坏影响呢。慢查询会把数据库搞挂，一个数据库放多个团队的数据库还可能把多个团队的数据库搞挂！所以加索引要比不加索引更能确保生产的稳定。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsC8icgOsIeJicUr7j2clE2ug1XddpHUjKS58HicFRickXO53u7drZPcbe0cQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;真的有必要现在优化吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这两张当然最好合并进行一次加索引的变更。因为首先这两张表的读写不是很频繁，其实的风险不是非常高。这里要注意，敬畏生产。对每次生产都要谨慎谨慎再谨慎。&lt;/p&gt;&lt;p&gt;只是没有明确的等级，我才说不是非常高。意思是相比较多次变更可能引起的人工出错率增加，权衡之后合并投产风险更低。&lt;/p&gt;&lt;p&gt;方案定好了之后，领导直接给开发小哥哥说让他在一个关键期之前尽快投产。我知道之后跟开发小哥哥说你别着急，我找领导说一下，这件事关键期之后才做。&lt;/p&gt;&lt;p&gt;领导说要尽快做的依据我完全能理解：“联调环境都被打挂了，风险很高啊。”我找到领导，告诉他出现问题的数据表在生产环境，数据量只有联调环境的1/20。而且联调环境的数据库机器配置比生产环境低不止一个等级。注意，这些原因是要说的，但是最重要的是要有数据支撑，所以我还告诉领导这个慢查询在生产环境的时间耗时。领导听了我的汇报评估确实可以放到关键期之后做。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3416149068322981&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCgfF3K3OhoabXCEvf7F21C5WT6VxQcmJPn8vk8Q0VjCSnuy4vhxH74A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;322&quot;/&gt;&lt;/p&gt;&lt;p&gt;这里还想补充一句，作为一个小团队的直接负责人，在风险评估上起的作用非常关键。开发小哥哥本身由于经验等方面的原因，需要别人把关。上级领导没有时间把事情了解的那么透彻，不然自己的价值在哪里。领导依赖自己的汇报，所以自己的决策非常重要。这里方法论没有，就是要多想，翻来覆去的想。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;验证&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;涉及的数据库知识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AC-NL-RO事务&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先给大家普及一个认知。请大家想一个问题：咱们普通的select查询语句会用到事务吗？&lt;/p&gt;&lt;p&gt;事务包括两类，显式事务和AC-NL-RO（auto-commit non-locking read-only）事务。&lt;/p&gt;&lt;p&gt;这问题的答案就很清楚了：普通的select查询语句也使用了AC-NL-RO事务。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;Metadata Lock&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Metadata Lock源起于一个bug，MySQL官方文档链接：http://bugs.mysql.com/bug.php?id=989&lt;/p&gt;&lt;p&gt;这个bug大致意思是说：当一个会话在主库执行DML操作还没提交时，另一个会话对同一个对象执行了DDL操作如drop table，而由于MySQL的binlog是基于事务提交的先后顺序进行记录的，因此在从库上应用时，就出现了先drop table，然后再向table中insert的情况，导致从库应用出错。&lt;/p&gt;&lt;p&gt;因此，MySQL在5.5.3版本后引入了Metadata lock，只有在事务结束后才会释放Metadata lock，因此在事务提交或回滚前，是无法进行DDL操作的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;online DDL&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;online DDL是在mysql5.6版本后加入的特性，用于支持DDL执行期间DML语句的并行操作，提高数据库的吞吐量。&lt;/p&gt;&lt;p&gt;常用的有三种类型：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;copy（ALGORITHM=COPY）这部分是offline的，在DDL执行期间其他DML不能并行，也是5.6版本前的DDL执行方法。其间生成临时表（server层的操作支持所有引擎），用于写入原表修改过的数据，同时在原表路径下会生成临时表的.frm和.ibd文件。在innodb中不支持使用inplace的操作都会自动使用copy方式执行，而MyISAM表只能使用copy方式。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;inplace（ALGORITHM=INPLACE）所有操作在innodb引擎层完成，不需要经过临时表的中转。除上图两种特殊索引创建外，其他以inplace方式执行的操作都是online的，执行期间其他DML操作可以并行，其中又以是否重建表又分为两个部分rebuild和no-rebuild。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;INSTANT，只需修改数据字典中的元数据，无需拷贝数据也无需重建整表，同样，也无需加排他MDL锁，原表数据也不受影响。整个DDL过程几乎是瞬间完成的，也不会阻塞DML。这个新特性是8.0.12引入&lt;/span&gt;的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在主流的mysql版本是5.6或者5.7。这两个版本如何区分DDL语句是使用了copy方式还是inplace方式呢？&lt;/p&gt;&lt;p&gt;只需要查看语句执行完成输出结果中的 X rows affected，如果X为0则是inplace（online）方式，如果不为0则是copy（offline）方式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;rebuild&amp;amp;no-rebuild&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;online ddl主要包括3个阶段，prepare阶段，ddl执行阶段，commit阶段，rebuild方式比no-rebuild方式实质多了一个ddl执行阶段，prepare阶段和commit阶段类似。&lt;/p&gt;&lt;p&gt;Prepare阶段：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;创建新的临时frm文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;持有EXCLUSIVE-MDL锁，禁止读写&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据alter类型，确定执行方式(copy,online-rebuild,online-norebuild)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新数据字典的内存对象&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分配row_log对象记录增量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生成新的临时ibd文件&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;ddl执行阶段：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;降级EXCLUSIVE-MDL锁，允许读写&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;扫描old_table的聚集索引每一条记录rec&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;遍历新表的聚集索引和二级索引，逐一处理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据rec构造对应的索引项&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将构造索引项插入sort_buffer块&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将sort_buffer块插入新的索引&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;处理ddl执行过程中产生的增量(仅rebuild类型需要)&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;commit阶段&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;升级到EXCLUSIVE-MDL锁，禁止读写&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;重做最后row_log中最后一部分增量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新innodb的数据字典表&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提交事务(刷事务的redo日志)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;修改统计信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;rename临时idb文件，frm文件&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;变更完成&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;建索引属于哪种模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6495956873315364&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9sAibpJswicjq0v6FDo8fRsCZicsy6USTh4iaQ3bqhOF361ofsM9td90dU0cZdNey9br689RI95PrUiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;742&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;验证内容&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;评估影响&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;操作本身的影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;DML（数据操作语言）影响，在表上添加s索引会直接影响写操作性能（因为添加记录的同时还有创建相应记录的索引，这也是要耗资源的。）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;DDL（数据定义语言）影响，随着表大小的不断增加，对性能的影响也会不断增加。比如：ALTER语句会耗费更多的时间。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;磁盘空间的影响，往往在添完一个索引后表占用的空间大小会成倍的增加。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;对相关方的影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;评估影响的业务，通知影响方，并确定需要避开的时间段。避开的原因请详细阅读上面提到的数据库知识。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;优化有风险，立项需谨慎。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往期推荐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1/&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9952f3b0c342ba66da3c9dcd0c3c027c</guid>
<title>AOP + MybatisPlus 优化特殊的日志模块</title>
<link>https://toutiao.io/k/5b0arl4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们好久不见呀 哈哈 都快成月更号主了 ,,ԾㅂԾ,,  最近状态在调整啦，冲冲冲！😝 （本来是昨天发的，结果太久没更文，点错了没群发出来😅&lt;span&gt;,,ԾㅂԾ,,  尴尬了…… 还以为是bug🐷&lt;/span&gt;）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天 4ye  来和小伙伴们分享下我在项目中利用  AOP + MybatisPlus   对项目进行重构，优化系统中特殊的日志模块的故事啦 😄 （PS：ES 写了一半 ~  只能先来这个了）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这篇文章我是从吐槽部分开始写的 哈哈哈（不知不觉就吐槽了近千字 🤣）不过咋们还是从技术部分开始吧 ~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8536585365853658&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6r2NiaPrJiaBKT4yYtztDUXMYU50TXTApkQyicicEgGA4iaApNGA874yC30AQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;82&quot;/&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;功能描述&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很久之前（大概有一年了叭，痛苦面具 🙃），老大让我把老项目中的日志模块移植到新项目中，这个日志模块的主要功能就是针对大部分表，做下面的操作&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;删除成功时，将被删除的数据记录到相应的 log 表&lt;/p&gt;&lt;p&gt;当修改或者插入数据成功时，将这些数据记录到相应的 log 表&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Log 表&lt;/strong&gt; 就是在 &lt;strong&gt;普通表&lt;/strong&gt; 的基础上，新增几个字段，如操作ID和操作方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作ID：类似请求ID 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作方法：表示这个行为是 CRUD 中 CUD 的哪一个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如在请求001 中删除表A 中的某条数据，则在 LOG_A 中会记录下这个 A 数据&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;A表对应的各个字段和它们的值&lt;/th&gt;&lt;th&gt;操作ID&lt;/th&gt;&lt;th&gt;操作方法&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;……&lt;/td&gt;&lt;td&gt;001&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里，你是否也觉得这 log 表很奇怪？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;别急，最后再吐槽下 哈哈，先来说说这个技术 🐷&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简单思考&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以发现这些这些东西和业务无关，可以直接用 AOP 来实现，老项目中也是用了 AOP。（听君一席话，听君一席话 哈哈哈 🤣）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先简单思考下会遇到什么问题 👇&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;新增数据到相应的 log 表，意味着有很多简单的插入语句要写？还要考虑批量操作 🐖&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;操作id 是怎么生成的？是直接用 uuid ，还是数据库自增id？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;怎么获取删除前的数据信息 、更新后的数据、插入后的数据 等&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就不卖关子啦 直接来看这个&lt;strong&gt;日志模块的设计&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;操作ID&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看这个 &lt;strong&gt;操作 ID&lt;/strong&gt; 的生成，这里就没啥特别的  直接定义一个 &lt;strong&gt;注解&lt;/strong&gt;  如 @GenerateRequestID ，加在需要被拦截的方法上，然后我们在 AOP 中拦截它即可。功能如下 👇&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9482517482517483&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rFU6LpppkDBC3FNCNBCibgYwia7ib1GicHmkt8z0aM90ExZ8OPb1iaRyiccpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;715&quot;/&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;可以看到这个 操作ID 是直接使用 Oracle 的 Sequence 去生成的，是有序的 ，能直接看出这批数据操作的先后顺序。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在增强这部分功能时，我发现之前 &lt;strong&gt;旧版本&lt;/strong&gt;居然没用 AOP 去设置这个 操作ID，而是手动在需要的地方加，而且还定义了很多的 Key 来存储生成的这个 操作ID，可以发现对这个 ThreadLocal 也很不熟悉呀！🙃&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码如下 😱 （坏代码 …… ）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    BigDecimal transactionId = sysLogMapper.generateTransactionId();&lt;br/&gt;    ThreadLocalUtil.setValue(SysLogConstants.xxx_LOG_TRANSACTION_ID, transactionId);&lt;br/&gt;    ThreadLocalUtil.setValue(SysLogConstants.aaa_LOG_TRANSACTION_ID, transactionId);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 业务方法&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    ThreadLocalUtil.remove(SysLogConstants.xxx_LOG_TRANSACTION_ID);&lt;br/&gt;    ThreadLocalUtil.remove(SysLogConstants.aaa_LOG_TRANSACTION_ID);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;心细的小伙伴会不会有个小疑问，为什么我是在 &lt;strong&gt;请求结束&lt;/strong&gt; 时才去清除这个 操作ID，而不是在 AOP 的 After 操作中去做的😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这里是有个小插曲的，一开始我是在 AOP 的 @After 操作中去删除这个 操作ID 的，但是呢 🙄 ，有同事将我改好的日志模块中的部分功能添加到之前的老项目中，而且他直接将这个注解加在 service上，结果系统出现了bug 🙄，还把我拉过去讨论 😒 ，这就很无语了……&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8473282442748091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rRyic7T5gjnOc5vHSRzSu7C9jibkibc0icGPKV4H6uiakZpok4bQXsQqqjWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;131&quot;/&gt;&lt;figcaption&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过这个 bug 是不难发现的，毕竟这个注解如果加在 service 层面，会存在 service 调用 service 的情况，这样不仅会出现第一个 service 中生成的 &lt;strong&gt;操作ID&lt;/strong&gt; 被第二个 service 覆盖，而且在第二个 service 结束后，&lt;strong&gt;操作ID&lt;/strong&gt; 会被清除掉，但是这个字段是不允许为 null 的，所以就报错了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按理说，直接加在这个 controller 层面就没问题了，但是讨论过后，在同事的建议下，我也同意对它进行小小的升级下，将这个 &lt;strong&gt;清除操作ID&lt;/strong&gt; 的行为移动到这个 &lt;strong&gt;拦截器&lt;/strong&gt; 中  👇&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ThreadLocalInterceptor&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;HandlerInterceptor&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterCompletion&lt;/span&gt;&lt;span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        ThreadLocalUtil.clear();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感觉这种方式也挺简洁的，在请求结束后直接清掉这个 &lt;strong&gt;ThreadLocal&lt;/strong&gt; 中的内容。🐖&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;整体设计&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着，我们来看看这个 datalog 的生成。新版的整体思路如下。😋 （画出来清晰多了）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.037169406719085&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rmPop7cibFUeQ1WfiaMImaNiaL8KJf4oBmGWrzyaUzIdL8fuQOw5af1mkQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1399&quot;/&gt;&lt;figcaption&gt;2021-11-12_140557&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;删除操作&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;思路如上图~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在删除成功时，要将被删除的数据写到 Log 表 …… 😑&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有两种情况：（一）根据主键删除 ，这种最简单，我们直接根据主键查出之前的数据即可。（二）根据其他条件删除，这里我们自定义获取主键的方法以便复用上面的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里就不得不提下这个 MybatisPlus 的好处了~ ，借用 BaseMapper 的 selectBatchIds 方法，我们可以很轻松的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查询出这些数据出来。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13101330603889458&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rmSnpPicJPjl4nSCYXqWvL33Wgs1fnKqS7E9BS1YZz72crPOhTA3PRGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;977&quot;/&gt;&lt;figcaption&gt;image-20211112142253855&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为在使用 MybatisPlus 时，我们会生成相应的 Mapper 方法，而这里就很好地体现了  &lt;strong&gt;Java 多态&lt;/strong&gt; 的特点，我们只需要调用  (BaseMapper) SpringUtil.getBean(XXXMapper.class).selectBatchIds(result) ；即可实现。😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以将这个参数挂在 @MethodLog 注解上即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Mapper&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;XXXMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseMapper&lt;/span&gt;&amp;lt;&lt;span&gt;XXX&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在旧版本中，由于没有用到 MybatisPlus ，自然写了很多的 删除语句 😱&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且由于对这个 Spring 的理解不够，出现了把 实现了同一个接口的不同子类注入到一个Map中，使用时再从其中获取的行为，最要命的是，这个 map 的key 不是那些子类的名称，还写了很多 switch case …… 😶 来获取&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9097222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rUdZcWtYeicibbtCP870vNU9jwehqPavLcr2d8C0WbJ2rlqYjJ4Tethvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;288&quot;/&gt;&lt;figcaption&gt;image-20211112221843944&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实我们直接用 ApplicationContext 的 getBean 就可以获取到了 🐖&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;更新，插入操作&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在更新或者插入成功后，还要将这些数据写到 Log 表 …… 😑&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真是太魔幻了……   再坚持下就快到吐槽环节了😂&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们要考虑一个问题了—— 插入数据时，ID 是插入数据前就有的，还是插入数据后才有的？🐷&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中我们使用的是这个 Oracle，借助它的 Sequence，我们可以先获取这个 ID  (select XX_SEQ.nextval from dual)，再设置到这个对象中去，然后再插入 DB 中 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在使用 MySQL 时，我们一般都是通过数据库的自增ID，当数据插入后，再从这个对象中获取到这个 ID 的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也决定了我是在 AOP 的 Before 中记录下这些 ID ，还是在 AfterReturning 中去获取的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实一开始我是直接在 Before 中去记录的，后来考虑到这种情况后，才把它移到 AfterReturning 中去的，毕竟不管你先生成还是后生成，我都可以后获取，而且第二种模式兼容第一种模式 🐷&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新的话也有两种情况：（一）根据主键更新 ，这种最简单，我们直接根据主键查出之前的数据即可。（二）根据其他条件更新，这里我们自定义获取主键的方法以便复用上面的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，我们可以自动去获取这个 id，有些情况比较复杂的，就提供这个手动模式，自己调用 ThreadLocal 并耦合到代码中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后使用 Spring 的工具 BeanUtils ，将数据拷贝到日志对象中 BeanUtils.copyProperties(model, logModel); ，再通过 BaseMapper 的 insert 方法，将数据一条条插入到 Log表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到此，就完成了这个特殊的日志模块的优化了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9418604651162791&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rX9B798czVKgNBRZobV4JuVTd8F8wmopmkoNqpSfCrfhl4cib4rDCMGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;86&quot;/&gt;&lt;figcaption&gt;image-20211112222053399&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模块也为团队节省了 N 倍的开发时间，减少了很多冗余，无效的代码，也提高了这个代码的可维护性，受到同事的肯定当时 哈哈 😝 而且好像从这时候开始，老大找我做了一些通用模块的开发，比如 模板，邮件，Excel 等，有机会再来和小伙伴们分享下~ 😄。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;吐槽&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于来到这里了，说实话，我到现在都觉得这个日志模块很 “&lt;strong&gt;特别&lt;/strong&gt;” 🐷，因为这个日志模块不像我平时了解过的那些，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;请求的入参，出参&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;异常&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JVM，Nginx，Tomcat  等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且奇怪的点还不是写入 DB 这个操作，而是针对大量的表做这备份的这个行为，比如 有这个表A，然后我还要创建相应的日志表 LOG_A，而且只要你修改或者新增数据到表A，那么 LOG_A 会将你更改后的 A 数据记录下来，删除的话，会将你删除前的A数据记录下来，删除成功后才记录到这个 LOG_A 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且这个 LOG_A 就比表A 多了几个字段，比如这个&lt;strong&gt;操作行为&lt;/strong&gt;（ CRUD 中 的 CUD）和 &lt;strong&gt;操作ID&lt;/strong&gt; （即请求ID）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这…… 简直就是&lt;strong&gt;究极备份&lt;/strong&gt;了🐖 （我实在想不出哪个词来形容了 哈哈 我只能说太慎重了！和 &lt;strong&gt;慎重勇者&lt;/strong&gt; 的主角有得一比）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是我新的感悟 哈哈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还记得那时的我十分抗拒把这个东西搬到新项目中，因为我觉得它很多余，这不就是把数据又写了一遍到另一个表中，而且我觉得用网上的例子就可以了啦，就记录下数据从什么修改成什么就好了，要那么多干嘛🤨。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9946524064171123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYHqy80SIKCtD7egkYibtVC6rk9MTT5awMiadibgpE5v8Yqk8pREofpzqpibWmwsxPbia9hQES2WH8kMsCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;187&quot;/&gt;&lt;figcaption&gt;image-20211112222404482&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我当时也憋不住，就向老大表达了我的疑惑，老大和我解释说这个日志模块是为了方便找 bug，找出哪些数据是有问题的，写这篇文章的时候我还特意再去请教了一下，他说他们的老项目用到了，但是具体怎么用也没说 🐖&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了搞清楚这个东西的作用，额 我已经问了三个项目组的同事了，终于有个同事使用到了，就是说有一次数据出了问题，看代码看了好久都没有觉得哪里有问题，后来就是靠着这个请求id，去db找那批数据出来分析，才找到问题的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我听完还是觉得一言难尽，什么bug 连 debug 都不能找出来，得靠分析这批数据去找出来🙃 我甚至觉得它负作用更多…… 😮&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;坑&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;印象中在重写这个模块时，遇到一个很有意思的问题  如下 👇&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Mapper&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;XXXMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BaseMapper&lt;/span&gt;&amp;lt;&lt;span&gt;XXX&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@MethodLog&lt;/span&gt;(method = TableAction.D,&lt;br/&gt;            model = XXX&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logModel&lt;/span&gt; &lt;/span&gt;= LogXXX&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logModelIdName&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;&quot;xxxId&quot;&lt;/span&gt;,&lt;br/&gt;            mapper = XXXMapper&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logMapper&lt;/span&gt; &lt;/span&gt;= LogXXXMapper&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; &lt;span&gt;deleteById&lt;/span&gt;(&lt;span&gt;Serializable&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@MethodLog&lt;/span&gt;(method = TableAction.U,&lt;br/&gt;            model = XXX&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logModel&lt;/span&gt; &lt;/span&gt;= LogXXX&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logModelIdName&lt;/span&gt; &lt;/span&gt;= &lt;span&gt;&quot;xxxId&quot;&lt;/span&gt;,&lt;br/&gt;            mapper = XXXMapper&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;,&lt;br/&gt;            &lt;span&gt;logMapper&lt;/span&gt; &lt;/span&gt;= LogXXXMapper&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; &lt;span&gt;updateById&lt;/span&gt;(@&lt;span&gt;Param&lt;/span&gt;(&lt;span&gt;Constants&lt;/span&gt;.&lt;span&gt;ENTITY&lt;/span&gt;) &lt;span&gt;XXX&lt;/span&gt; &lt;span&gt;entity&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;毕竟我要将 MethodLog 注解挂到方法上，只能这样了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，我才发现 &lt;strong&gt;接口在继承别的接口时，也是可以添加 @Override 注解&lt;/strong&gt;  。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有就是一开始我用 IDEA 帮我重写这个 updateById 方法时，但是它帮我省掉了 @Param(Constants.ENTITY) 注解，导致这个 update 操作无法生效，因为 MybatisPlus 中用了这个 “et” 来统一这个对象的别名~  ，不加的话无法匹配到。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文就分享到这里啦🐖 最近有好多人生小感悟 嘿嘿 下次再分享啦。之前定的那些文章还在计划里~ 在抓紧更啦！！😝&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆起做这个日志模块的过程，特别是画一遍这个流程图的感觉真的是太酸爽了 ，也给小伙伴们提供一个思路，简单的 CRUD 就不要自己写啦，能用 AOP+MybatisPlus 去操作的话会简洁很多！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;👉 https://github.com/Java4ye/springboot-demo-4ye&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;喜欢的话可以 &lt;strong&gt;点赞 &amp;amp;&lt;/strong&gt; &lt;strong&gt;关注&lt;/strong&gt; 并 &lt;strong&gt;星标&lt;/strong&gt; 下公众号 &lt;strong&gt;Java4ye&lt;/strong&gt; 支持下 &lt;strong&gt;4ye&lt;/strong&gt; 呀😝，这样就可以第一时间收到更文消息啦🐷&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;我是4ye 咱们下期&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;应该……&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;很快再见！！&lt;/strong&gt; 😆&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>04290413e098f1a32c8652aecad6fbd6</guid>
<title>实战经验分享：使用 PyO3 来构建你的 Python 模块</title>
<link>https://toutiao.io/k/5y9o2o9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p data-pid=&quot;UPTxTnr_&quot;&gt;PyO3 主要用于创建原生 Python 的扩展模块。PyO3 还支持从 Rust 二进制文件运行 Python 代码并与之交互，可以实现 rust 与 Python 代码共存。在一些对性能要求较高的模块上，可以考虑使用 PyO3 构建对应的功能模块。PyO3 的功能分离，不用过多担心模块之间的耦合性，并且在速度上能有一定的提升。&lt;/p&gt;&lt;p data-pid=&quot;No9F8CPe&quot;&gt;github地址: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/PyO3/pyo3&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/PyO3/pyo3&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;E_o4qt75&quot;&gt;版本规定如下：&lt;/p&gt;&lt;p data-pid=&quot;xhI23Pub&quot;&gt;接下来我们通过一个小的 demo 了解一下从 PyO3 &lt;span data-search-entity=&quot;编译模块&quot;&gt;编译模块&lt;/span&gt;到 Python 中正常使用的整个流程。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;cargo new --lib string-sum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;创建项目&lt;/b&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# lib.rs
[package]
name = &quot;string-sum&quot;
version = &quot;0.1.0&quot;
edition = &quot;2018&quot;

[lib]
name = &quot;string_sum&quot;
# &quot;cdylib&quot; is necessary to produce a shared library for Python to import from.
#
# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able
# to `use string_sum;` unless the &quot;rlib&quot; or &quot;lib&quot; crate type is also included, e.g.:
# crate-type = [&quot;cdylib&quot;, &quot;rlib&quot;]
crate-type = [&quot;cdylib&quot;]

[dependencies.pyo3]
version = &quot;0.14.1&quot;
features = [&quot;extension-module&quot;] // 扩展模块，像其他的还有&lt;span data-search-entity=&quot;auto-initialize&quot;&gt;auto-initialize&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// src/lib.rs
use std::usize;

use  pyo3::prelude::*;

// like this
// def sum_as_string(a:str, b:str) -&amp;gt; str:
//      return a+b
#[pyfunction]
fn sum_as_string(a: usize, b: usize) -&amp;gt; PyResult&amp;lt;String&amp;gt;{
    Ok((a+b).to_string())
}

// Mount method to module 
#[pymodule]
fn string_sum(py: Python, m: &amp;amp;PyModule) -&amp;gt; PyResult&amp;lt;()&amp;gt;{
    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;
    Ok(())
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;编译与使用&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;IR3TvznJ&quot;&gt;编译完成之后，我们会在 target 文件夹下面发现一个 wheel 文件。文件名组合为 “模块名 + 当前 Python 版本+当前系统型号”，比如：string_sum-0.1.0-cp39-cp39-macosx_10_7_x86_64.whl&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;pip3 install ./target/wheel/string_sum-0.1.0-cp39-cp39-macosx_10_7_x86_64.whl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;jl9N8276&quot;&gt;创建 python 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# example.py
from string_sum import sum_as_string
print(sum_as_string(1,2))
# echo 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;bBML3zbk&quot;&gt;&lt;b&gt;编译工具的选择和使用&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;njTbwZn3&quot;&gt;官方提供了两种编译工具的选择：&lt;/p&gt;&lt;ul&gt;&lt;li data-pid=&quot;NYT2vrjG&quot;&gt;rust 写的 maturin&lt;/li&gt;&lt;li data-pid=&quot;TL5uLVVj&quot;&gt;传统的setup.py的方式&lt;/li&gt;&lt;/ul&gt;&lt;p data-pid=&quot;tfTL_OLw&quot;&gt;&lt;b&gt;使用 maturin 编译&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 安装 
pip3 install maturin
# 编译
maturin build
# maturin publish 发布
# 虚拟环境中使用 会自动去寻找/target/wheel/ 下的 *.wheel文件然后安装
virtualenv venv
source ./venv/bin/activate
maturin develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;c1ncWP_q&quot;&gt;&lt;b&gt;使用 setup.py 编译&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 安装
pip3 install setuptools-rust&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;MeIulk_9&quot;&gt;编写 setup.py 文件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# setup.py


from setuptools import setup
from setuptools_rust import Binding, RustExtension

setup(
    # 包名称
    name=&quot;string_sum&quot;, 
    # 包版本 
    version=&quot;0.1&quot;,
    # rust扩展 其中&quot;string_sum.string_sum&quot;中
    # 第一个string_sum 指的是当前的包
    # 第二个指的是
    # #[pymodule]
    # fn string_sum(py: Python, m: &amp;amp;PyModule) -&amp;gt; PyResult&amp;lt;()&amp;gt;{
    #     m.&lt;span data-search-entity=&quot;add_function&quot;&gt;add_function&lt;/span&gt;(wrap_pyfunction!(sum_as_string, m)?)?;
    #     Ok(())
    # }
    # 中的string_sum
    rust_extensions=[
        RustExtension(
            &quot;string_sum.string_sum&quot;, 
            binding=Binding.PyO3,
            debug=False
            )
    ],
    # 需要创建一个文件夹 string_sum
    packages=[&quot;string_sum&quot;],
    # rust extensions are not zip safe, just like C-extensions.
    zip_safe=False,
    # 标注
    classifiers=[
        &quot;License :: OSI Approved :: MIT License&quot;,
        &quot;Development Status :: 3 - Alpha&quot;,
        &quot;Intended Audience :: Developers&quot;,
        &quot;Programming Language :: Python&quot;,
        &quot;Programming Language :: Rust&quot;,
        &quot;Operating System :: POSIX&quot;,
        &quot;Operating System :: MacOS :: MacOS X&quot;,
    ],
    include_package_data=True
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 打包
mkdir string_sum
touch string_sum/__init__.py
virtualenv venv &amp;amp;&amp;amp; source venv/bin/activate
pip setup.py build &amp;amp;&amp;amp; pip setup.py install &amp;amp;&amp;amp; pip setup.py develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f3b421fe73a27099ba9ec99b37d68700_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;976&quot; data-rawheight=&quot;177&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-f3b421fe73a27099ba9ec99b37d68700_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;976&quot; data-rawheight=&quot;177&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-f3b421fe73a27099ba9ec99b37d68700_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-f3b421fe73a27099ba9ec99b37d68700_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;GEHtq010&quot;&gt;会引用本地的文件：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3cbeee5199690770a7d757ce407a5e2e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;995&quot; data-rawheight=&quot;140&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-3cbeee5199690770a7d757ce407a5e2e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;995&quot; data-rawheight=&quot;140&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-3cbeee5199690770a7d757ce407a5e2e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-3cbeee5199690770a7d757ce407a5e2e_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p data-pid=&quot;DnV-6KQe&quot;&gt;&lt;b&gt;docker 中的应用&lt;/b&gt;&lt;/p&gt;&lt;p data-pid=&quot;-CtikFAt&quot;&gt;同样的，如果创建的 App 本身是在 docker 内部运行的。那么第一步我们需要安装 rust 的环境 dockerfile。具体如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#!/bin/bash
curl https://sh.rustup.rs -sSf | bash -s -- -y
source $HOME/.cargo/env
rustc --version
python setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# ddockerfile 
FROM python:3.7
WORKDIR /app
ADD . /app
RUN pip install --upgrade pip \
    &amp;amp;&amp;amp; pip install -r requirements.txt
RUN ./init.sh
CMD [python, xx.py]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# requirements.txt
semantic-version==2.8.5
setuptools-rust==0.12.1
toml==0.10.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# rust国内镜像源 config
# /root/.cargo/config
[source.crates-io]
registry = &quot;https://github.com/rust-lang/&lt;span data-search-entity=&quot;crates.io&quot;&gt;crates.io&lt;/span&gt;-index&quot;
replace-with = &#x27;ustc&#x27;
[source.ustc]
registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;
[term]
verbose = true
color = &#x27;auto&#x27;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-pid=&quot;7O9-FJpA&quot;&gt;具体目录如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;-rw-r--r-- Cargo.lock
-rw-r--r-- Cargo.toml
-rw-r--r-- config           # 配置文件
-rw-r--r-- Dockerfile
-rwxrwxrwx init.sh          # 初始化rust环境脚本
-rw-r--r-- requirements.txt
-rw-r--r-- setup.py         # 打包脚本
drwxr-xr-x src              # rust项目
drwxr-xr-x string_sum 
-rw-r--r-- xx.py            # 可行性测试文件&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;用 PyO3 写一个 Python 的rsa加解密包&lt;/b&gt;&lt;/h2&gt;&lt;p data-pid=&quot;kQjxCPwR&quot;&gt;看过之前的文章的小伙伴（点击↓↓阅读原文↓↓查看&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5ODc5ODgyMw%3D%3D%26mid%3D2653586291%26idx%3D1%26sn%3D8b1541477de9d08bf6a34564928f20ab%26chksm%3Dbd1b17fb8a6c9eed4716acd4da23e7e2f8ddce7c9988a60a39937ebdd5835ff4726e102ab4ea%26scene%3D21%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《灵魂画手：漫画图解 SSH》&lt;/a&gt;） ，应该对 rsa 的整个加解密流程有所了解啦。那我们不妨用 PyO3 来构建一个 Python 的 rsa 加解密包。使用场景如下：&lt;/p&gt;&lt;blockquote data-pid=&quot;H_POokPC&quot;&gt;客户端本地生成公私钥，通过前期认证过程，将公钥发送给服务端保存，后期通信过程中,客户端主动发送消息给服务端，客户端通过私钥对信息加密，服务端通过对应的公钥进行解密。&lt;/blockquote&gt;&lt;p data-pid=&quot;V-yjzkH5&quot;&gt;github 地址: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/hzjsea/pyo3-crypto&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/hzjsea/pyo3-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-pid=&quot;5RH0teoc&quot;&gt;后续又扩展了一些内容，比如 MD5 加密，签名等等。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# 自动化脚本
#!/bin/bash

echo &quot;init......&quot;

# set python version 
# INSTALL_PYTHON_VERSION=python3.6

find_python() {
        set +e
        unset BEST_VERSION
        for V in 37 3.7 38 3.8 39 3.9 3; do
                if which python$V &amp;gt;/dev/null; then
                        if [ &quot;$BEST_VERSION&quot; = &quot;&quot; ]; then
                                BEST_VERSION=$V
                        fi
                fi
        done
        echo $BEST_VERSION
        set -e
}

if [ &quot;$INSTALL_PYTHON_VERSION&quot; = &quot;&quot; ]; then
        INSTALL_PYTHON_VERSION=$(find_python)
fi

# This fancy syntax sets INSTALL_PYTHON_PATH to &quot;python3.7&quot;, unless
# INSTALL_PYTHON_VERSION is defined.
# If INSTALL_PYTHON_VERSION equals 3.8, then INSTALL_PYTHON_PATH becomes python3.8
# 找不到就python3.7
INSTALL_PYTHON_PATH=python${INSTALL_PYTHON_VERSION:-3.7}
echo $INSTALL_PYTHON_PATH

echo &quot;Python version is $INSTALL_PYTHON_VERSION&quot;
$INSTALL_PYTHON_PATH -m venv venv
if [ ! -f &quot;activate&quot; ]; then
        ln -s venv/bin/activate .
fi

. ./activate

python -m pip install --upgrade pip
python -m pip install wheel
python -m pip install -r ./requirements.txt
maturin build
maturin develop

&lt;span data-search-entity=&quot;current_shell&quot;&gt;current_shell&lt;/span&gt;=$(echo $SHELL)
if current_shell=/bin/bash; then
    echo  &quot;PASS: source /venv/bin/activate &amp;gt;&amp;gt; ~/.bashrc&quot;
elif current_shell=/bin/zsh;then
    echo &quot;PASS: source /venv/bin/activate &amp;gt;&amp;gt; ~/.zshrc&quot;
fi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;//  src/lib.rs 文件
use std::u32;
use pyo3::prelude::*;
use openssl::rsa::{Padding,Rsa};

const SECRET: &amp;amp;&#x27;static str = &quot;CHFfxQA3tqEZgKusgwZjmI5lFsoZxXGXnQLA97oYga2M33sLwREZyy1mWCM8GIIA&quot;;

mod &lt;span data-search-entity=&quot;crypto_utils&quot;&gt;crypto_utils&lt;/span&gt; {
    use hmac::{Hmac, Mac, NewMac};
    use sha2::Sha256;
    use std::fmt::Write;

    type Hmacsha256 = Hmac&amp;lt;Sha256&amp;gt;;
    fn encode_hex(bytes: &amp;amp;[u8]) -&amp;gt; String {
        let mut s = String::with_capacity(bytes.len() * 2);
        for &amp;amp;b in bytes {
            match write!(&amp;amp;mut s, &quot;{:02x}&quot;, b) {
                Ok(_) =&amp;gt; {},
                Err(_) =&amp;gt; {}
            };
        }
        s
    }

    pub fn hash_hmac(secret: &amp;amp;str, msg: &amp;amp;str) -&amp;gt; String {
        let mut mac = Hmacsha256::new_from_slice(secret.as_bytes()).expect(&quot;HMAC can take key of any size&quot;);
        mac.update(msg.as_bytes());
        let result = mac.finalize();
        let code_bytes = result.into_bytes();
        encode_hex(&amp;amp;code_bytes)
    }

}

// create public/private key  create_key(1024)
fn create_key(len:u32) -&amp;gt; (String,String){
    let rsa = openssl::rsa::Rsa::generate(len).unwrap();
    let pubkey = String::from_utf8(rsa.public_key_to_pem().unwrap()).unwrap();
    let prikey  = String::from_utf8(rsa.private_key_to_pem().unwrap()).unwrap();

    (pubkey, prikey)
}



#[pyclass]
struct Crypto {
    // #[pyo3(get, set)]
    // pubkey: String,
    // #[pyo3(get,set)]
    // prikey: String,
    pub_key: Rsa&amp;lt;openssl::pkey::Public&amp;gt;,
    pri_key: Rsa&amp;lt;openssl::pkey::Private&amp;gt;
}

#[pyfunction]
fn generate_key(len:u32) -&amp;gt; (String, String){
    create_key(len)
}

#[pymethods]
impl Crypto {
    #[new]
    pub fn __new__(pubkey: &amp;amp;str,prikey: &amp;amp;str) -&amp;gt; Self {
        Crypto {
            // pubkey: pubkey.to_owned(),
            // prikey: prikey.to_owned(),
            pub_key: Rsa::public_key_from_pem(pubkey.as_bytes()).unwrap(),
            pri_key: Rsa::private_key_from_pem(prikey.as_bytes()).unwrap(),
        }
    }

    // public decrypt 
    pub fn public_decrypt(&amp;amp;self, msg:&amp;amp;str) -&amp;gt; String {
        let mut out: [u8; 4096] = [0;4096];
        let decoded = openssl::base64::&lt;span data-search-entity=&quot;decode_block&quot;&gt;decode_block&lt;/span&gt;(msg).unwrap();
        if let Ok(size) = self.pub_key.&lt;span data-search-entity=&quot;public_decrypt&quot;&gt;public_decrypt&lt;/span&gt;(&amp;amp;decoded, &amp;amp;mut out, Padding::PKCS1) {
            let real_size = if size &amp;gt; 4096 {4096} else {size};
            // openssl::base64::&lt;span data-search-entity=&quot;encode_block&quot;&gt;encode_block&lt;/span&gt;(&amp;amp;out[..real_size])
            String::from_utf8(out[..real_size].to_vec()).unwrap()
        } else {
            String::default()
        }
    }

    // &lt;span data-search-entity=&quot;public encrypt&quot;&gt;public encrypt&lt;/span&gt; 
    pub fn public_encrypt(&amp;amp;self, msg:&amp;amp;str) -&amp;gt; String {
        let mut out: [u8; 4096] = [0;4096];
        if let Ok(size) = self.pub_key.public_encrypt(msg.as_bytes(), &amp;amp;mut out, Padding::PKCS1) {
            let real_size = if size &amp;gt; 4096 {4096}else{size};
            openssl::base64::encode_block(&amp;amp;out[..real_size])
        } else {
            String::default()
        }
    }

    // private encrypt
    pub fn private_encrypt(&amp;amp;self, msg:&amp;amp;str) -&amp;gt; String{
        let mut out: [u8; 4096] = [0;4096];
        if let Ok(size) = self.pri_key.private_encrypt(msg.as_bytes(), &amp;amp;mut out, Padding::PKCS1) {
            let real_size = if size &amp;gt; 4096 {4096}else{size};
            openssl::base64::encode_block(&amp;amp;out[..real_size])
        } else {
            String::default()
        }
    }

    // private decrypt
    pub fn private_decrypt(&amp;amp;self, msg: &amp;amp;str) -&amp;gt; String{
        let mut out: [u8; 4096] = [0;4096];
        let decoded = openssl::base64::decode_block(msg).unwrap();
        if let Ok(size) = self.pri_key.&lt;span data-search-entity=&quot;private_decrypt&quot;&gt;private_decrypt&lt;/span&gt;(&amp;amp;decoded, &amp;amp;mut out, Padding::PKCS1) {
            let real_size = if size &amp;gt; 4096 {4096} else {size};
            // openssl::base64::encode_block(&amp;amp;out[..real_size])
            String::from_utf8(out[..real_size].to_vec()).unwrap()
        } else {
            String::default()
        } 
    }

    // sign
    pub fn sign(&amp;amp;self, msg: &amp;amp;str) -&amp;gt;String {
        crypto_utils::hash_hmac(SECRET, msg)
    }
}

#[pymodule]
fn yacrypto(_py: Python, m: &amp;amp;PyModule) -&amp;gt; PyResult&amp;lt;()&amp;gt; {
    m.add_class::&amp;lt;Crypto&amp;gt;()?;
    m.add_function(wrap_pyfunction!(generate_key, m)?).unwrap();
    Ok(())
}


#[cfg(test)]
mod tests {
    use base64;
    #[test]
    fn works(){

        // create rsa
        let rsa = openssl::rsa::Rsa::generate(1024).unwrap();
        // create public key 
        let public_key = rsa.public_key_to_pem().unwrap();
        println!(&quot;{:?}&quot;, String::from_utf8(public_key.clone()));
        let private_key = rsa.private_key_to_pem().unwrap();


        let data = &quot;hellowo\n\t\rrld&quot;;
        // public encrypt 
        let mut buf:Vec&amp;lt;u8&amp;gt; = vec![0;rsa.size() as usize];
        let rsa_pub = openssl::rsa::Rsa::public_key_from_pem(&amp;amp;public_key).unwrap();
        let _ = rsa_pub.public_encrypt(data.as_bytes(), &amp;amp;mut buf , openssl::rsa::Padding::PKCS1);

        // private decrypt =&amp;gt; 
        let data = buf;
        let mut buf:Vec&amp;lt;u8&amp;gt; = vec![0;rsa.size() as usize];
        let rsa_pri  = openssl::rsa::Rsa::private_key_from_pem(&amp;amp;private_key).unwrap();
        if let Ok(size) = rsa_pri.private_decrypt(&amp;amp;data, &amp;amp;mut buf, openssl::rsa::Padding::PKCS1){
            let real_size = if size &amp;gt; 1024 {1024} else {size};
            let buf = &amp;amp;buf[..real_size];
            let &lt;span data-search-entity=&quot;base64_string&quot;&gt;base64_string&lt;/span&gt; = openssl::base64::encode_block(&amp;amp;buf);
            let result = base64::decode(base64_string);
            println!(&quot;{:?}&quot;,result);
            // println!(&quot;buf =&amp;gt; {:?}&quot;,openssl::base64::encode_block(&amp;amp;buf))

            let echo_str = String::from_utf8((&amp;amp;buf).to_vec()).unwrap();
            println!(&quot;{:?}&quot;,echo_str);

        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p data-pid=&quot;FCRSa_bF&quot;&gt;&lt;b&gt;推荐阅读：&lt;/b&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/667/%25E6%2580%25A7%25E8%2583%25BD%25E4%25BC%2598%25E5%258C%2596%25EF%25BC%259A%25E5%25A6%2582%25E4%25BD%2595%25E6%259B%25B4%25E5%25BF%25AB%25E5%259C%25B0%25E6%258E%25A5%25E6%2594%25B6%25E6%2595%25B0%25E6%258D%25AE.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-31788060ba64420840bc3acc09064678_180x120.jpg&quot; data-image-width=&quot;1026&quot; data-image-height=&quot;652&quot; data-text=&quot;性能优化：如何更快地接收数据&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/650/%25E7%25A7%2581%25E6%259C%2589%25E5%258C%2596%25E4%25BB%2593%25E5%25BA%2593%25E7%259A%2584%2520GO%2520%25E6%25A8%25A1%25E5%259D%2597%25E4%25BD%25BF%25E7%2594%25A8%25E5%25AE%259E%25E8%25B7%25B5.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-2b8c596b85073408346e12f2225395d7_180x120.jpg&quot; data-image-width=&quot;922&quot; data-image-height=&quot;273&quot; data-text=&quot;私有化仓库的 GO 模块使用实践&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>