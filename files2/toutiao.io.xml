<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5938c8a1acbfcac95810ba25cc22ccac</guid>
<title>字节“FII事件”发生的那一夜；别再说谷歌取消OKR了；Go微服务生产指南清单｜码农周刊VIP会员专属邮件周报 Vol.091</title>
<link>https://toutiao.io/k/d9oheay</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;本文内容节选自&lt;strong&gt;「码农周刊VIP会员专属邮件周报 Vol.091」&lt;/strong&gt;，感谢阅读。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;避免「瞎忙活」的十条秘笈&lt;/strong&gt;，摘录几条，共勉。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）清晰的目标。&lt;br/&gt;2）垃圾时间处理信息。&lt;br/&gt;3）不要和别人比较。&lt;br/&gt;4）要有成长心态。&lt;br/&gt;5）锻炼身体。&lt;br/&gt;……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字节“FII事件”发生的那一夜&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/zqJ4AJjE5I9WDkcQFMlM6Q&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;信任不会忽然消失，但很难说清开头在哪里。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;别再说谷歌取消OKR了&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/l6sZgjnKWoTN8JWTIIwtjA&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在OKR这件事情上，优秀的学习者不会简单地只抄老大哥的答案，他们学习的是老大哥的解题思维和过程。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;收钱吧生产环境全链路压测的实践&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/3elzr5y&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;经验总结&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;分布式数据库的高可用性简史&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/k44qn9i&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;在历史上是如何处理容错的，以及高可用性是什么样子的。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Android卡顿掉帧问题分析之工具篇&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/w3j907a&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;详细介绍&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;一份Go微服务生产指南清单给你&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/n6xubkw&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;如何打造一款简单易用的 React 状态管理工具&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/kew0md8&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;一步步教你&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;做好这 16 项优化，你的 Linux 操作系统焕然一新&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/63xesh3&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;实操干货&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;GitHub的4个神技，同桌直呼666&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/oaoov9m&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;试试吧&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;4 种主流的 API 架构风格对比: SOAP vs REST vs GraphQL vs RPC&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/hydzart&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;供参考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MzA0ODkyMA==&amp;amp;mid=2655078432&amp;amp;idx=2&amp;amp;sn=f1ba1fa5fbfbcf98a3e6f610b258cf05&amp;amp;chksm=bd2918178a5e9101b993d9e84d783562c995577cec855adf32ccb5946ff4da21fd6e89ba078e&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;想邮件订阅周报？扫码即刻订阅！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;↓↓↓&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;307&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavich3VaNkKeiaAwUhz7TQbQmic4fFsr58X9PAYleYzxqc1K1vZjeBoZDMUsmia0xH67EQYINGRvNOtLmA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c128ea76af0d30b87d5f9a71da615b42</guid>
<title>如何画好一张架构图？</title>
<link>https://toutiao.io/k/bu1pi73</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-mpa-category=&quot;正文&quot; data-mpa-template-id=&quot;1440&quot;&gt;&lt;section label=&quot;powered by 135editor.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这是一篇来自&lt;span&gt;高级技术专家箫逸畅谈架构经验&lt;/span&gt;的经典好文。在本文中你将了解到：架构图是什么？为什么要画架构图？如何画？有哪些方法？&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section label=&quot;Copyright Reserved by PLAYHUDONG.&quot; donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot;&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;什么是架构图？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBcaFy7sGU6CictXmjCqrUaILaZUI9ElG7bgMib5QqrWtvvxmsJqWaicGlYpRrLS8PGmqibBa8NNv8kGuA/640?wx_fmt=png&quot; data-cropx1=&quot;60&quot; data-cropx2=&quot;193&quot; data-cropy1=&quot;-5&quot; data-cropy2=&quot;5&quot; data-fileid=&quot;100024892&quot; data-ratio=&quot;0.03731343283582089&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vz1ttk8KwbQWJOAbPz4ZdVS3nIyXyHsL9q7A1y3YmFgahUrhxNLl6cPssIDoQGyMlFicslicxUbhD0ld4Y0K67yw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;134&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何画好一张架构图，要做好这件事情首先要回答的就是什么是架构图。我们日常工作中经常能看到各种各样的架构图，而且经常会发现大家对架构图的理解各有侧重。深入追究到这个问题，可能一下子还很难有一个具象的定义，如果我们把这个问题进行拆分（如下图）理解起来就会容易一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;架构图 = 架构 + 图&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照这个等式，我们可以把问题转换：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图是什么？这个比较容易回答，图是一种信息的表达方式，所以&lt;strong&gt;架构图，即表达“架构”的图，也就是一种架构的表达方式。&lt;/strong&gt;也即：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;架构图 = 架构的表达 = 表达架构的图&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照这种思路我们需要回答：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;什么是架构？要表达的到底是什么？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何画好一张架构图？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;接下来的内容基本上就是按照这两个维度来做分析。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;什么是架构？要表达的到底是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBcaFy7sGU6CictXmjCqrUaILaZUI9ElG7bgMib5QqrWtvvxmsJqWaicGlYpRrLS8PGmqibBa8NNv8kGuA/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;257&quot; data-cropy1=&quot;-5&quot; data-cropy2=&quot;5&quot; data-fileid=&quot;100024892&quot; data-ratio=&quot;0.019455252918287938&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vz1ttk8KwbRicdlrFHIicBqUSdQwiage8xygibARUZ6Bf3YvB68kMoT1CVLCe6tVlvTib6SCUWNsLdibply1IuKw8nicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;257&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Linus 03 年在聊到拆分和集成时有一个很好的描述：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;I claim that you want to start communicating between independent modules no sooner than you absolutely HAVE to, and that you should avoid splitting things up  until you really need to, because that communication complexity often swamps the complexity of the actual pieces involved in it.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让我们认识到一种现象，把复杂系统拆分成模块，似乎并没有降低整个系统的复杂度。它降低的只是子系统的复杂度。而整个系统的复杂度，反而会由于拆分后的模块之间，不得不进行交互，变得更加复杂。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;我理解这里描述的系统拆分就是架构的过程，基本出发点是为了效率，通过架构的合理拆分（无论是空间还是时间上的拆分），最终目的让效率最大化。那到底什么是架构，其实没有完全统一且明确的定义，如下三个定义可以参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;在百度百科上的定义：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;架构，又名软件架构，是有关软件整体结构与组件的抽象描述，⽤于指导⼤型软件系统各个方面的设计。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;在 Wikipedia 上的定义：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Architecture&lt;span&gt; &lt;/span&gt;is&lt;span&gt; &lt;/span&gt;both&lt;span&gt; &lt;/span&gt;the&lt;span&gt; &lt;/span&gt;process&lt;span&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;the&lt;span&gt; &lt;/span&gt;product&lt;span&gt; &lt;/span&gt;of&lt;span&gt; &lt;/span&gt;planning,&lt;span&gt; &lt;/span&gt;designing,&lt;span&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;constructing&lt;span&gt; &lt;/span&gt;buildings&lt;span&gt; &lt;/span&gt;or&lt;span&gt; &lt;/span&gt;any&lt;span&gt; &lt;/span&gt;other&lt;span&gt; &lt;/span&gt;structures.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;ISO/IEC 42010:20072 中对架构有如下定义：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;The&lt;span&gt; &lt;/span&gt;fundamental&lt;span&gt; &lt;/span&gt;organization&lt;span&gt; &lt;/span&gt;of&lt;span&gt; &lt;/span&gt;a&lt;span&gt; &lt;/span&gt;system,&lt;span&gt; &lt;/span&gt;embodied&lt;span&gt; &lt;/span&gt;in&lt;span&gt; &lt;/span&gt;its&lt;span&gt; &lt;/span&gt;components,&lt;span&gt; &lt;/span&gt;their&lt;span&gt; &lt;/span&gt;relationships&lt;span&gt; &lt;/span&gt;to&lt;span&gt; &lt;/span&gt;each&lt;span&gt; &lt;/span&gt;other&lt;span&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;the&lt;span&gt; &lt;/span&gt;environment,&lt;span&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;the&lt;span&gt; &lt;/span&gt;principles&lt;span&gt; &lt;/span&gt;governing&lt;span&gt; &lt;/span&gt;its&lt;span&gt; &lt;/span&gt;design&lt;span&gt; &lt;/span&gt;and&lt;span&gt; &lt;/span&gt;evolution.　&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;74&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.1275797373358349&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441ExDKbJ5IoBFm2fOpHP59Qg7DTOIPdkibibmfypr7eJCuLnA1ej5udaBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1066&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三个定义也是见仁见智，但是我们基本可以得出：&lt;strong&gt;架构体现的是整体结构和组件之间的关系。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;架构的本质&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;这里引用三个观点来探讨架构的本质：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上述三个观点提到的内容，基本表达了架构的核心目的：&lt;strong&gt;管理复杂性，效率最大化。&lt;/strong&gt;以及架构的两个主要变化来源：&lt;strong&gt;一个是以改善软件质量为目的的内在结构性变化；另外一个是以满足客户需求为目的的外在功能性变化。&lt;/strong&gt;无论是何种变化，在我看来架构都是在不断的判断和取舍，在业务需求和系统实现之间做权衡，从而应对未来变化的不确定性，下图可以比较粗浅直观的表达这种理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;146&quot; data-backw=&quot;405&quot; data-ratio=&quot;0.36106750392464676&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441wVodn0iasictvKBO0p0SmKZjorCXice0lVmwLkoZa7ehVJAicGfGH1QiayQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;要表达的是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在 EA 架构领域，有两种常见架构方法 RUP 和 TOGAF，这两个框架也是我们常常了解架构分类的两个维度。从个人的角度，我自己觉得 TOGAF 9 的分类方式更加广泛使用（如下右图）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;221&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.38359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj4415ibjv2GkfJB9SRzlpv4z7notw6PSB2AEJ08CLVpZwBcJYHibnUGm9gibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结合日常的业务开发，其实我们更多的是关注业务架构和应用架构，所以把上边的表达式进一步的拆解，在回答如何画好一张架构图之前，我们需要关注业务架构和系统架构，讨论清楚如何进行业务架构和系统架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.634375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441YlTeGgYHib74e6bef0d9DLptlvNBqWwK8AtMNvRlUn5Zh2WbRPQrLXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;架构的过程其实就是建模的过程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我们都知道现实世界到软件世界或者面向对象的世界的过程，是一个不断抽象的过程，这其中的方法就是不断的建立模型。从现实世界到业务模型，从业务模型到概念模型，从概念模型到设计模型，通过不断地抽象去粗取精，形成对现实世界的层层抽象，所以架构的过程其实就是建模的过程。至此，我们有必要了解一下什么是建模。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;百度百科定义：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;建模就是建立模型，就是为了理解事物而对事物做出的一种抽象，是对事物的一种无歧义的书面描述。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;《Thinking in UML》定义：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;建模（Modeling），是指通过对客观事物建立一种抽象的方法用以表征事物并获得对事物本身的理解，同时把这种理解概念化，将这些逻辑概念组织起来，构成一种对所观察的对象的内部结构和工作原理的便于理解的表达。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;从上述两个定义基本可以了解到建模就是抽象，对业务或现实世界的抽象，虽然不足以帮我们理解架构本身，但是可以将我们上述关注的业务架构和系统架构进一步向下 Down 一层，架构的过程是建模的过程，我们转换成两个简单的问题：模是什么？如何建？&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;模是什么？如何建？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;这是两个比较容易陷入理论性的问题，我们跳出来从结果看过程。接下来通过已经产出的一些架构图来反向看这些架构图是如何产出的，同时来回答这两个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;203&quot; data-backw=&quot;416&quot; data-ratio=&quot;0.48671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441ynFPFib80ycJFvzwC5v2riczHw2V0eYrplQzib0wWMM4jKQpBGkZkTuibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1、业务建模&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到当下业务本身，对我而言也是全新的，在最初接触的时候凭仅有的行业背景去理解，结合了大量的文档阅读最终产出了如下图示的《业务核心流程图》和《业务功能模块图》。这两张图基本上就涵盖了所有的业务内容。左边的业务流程图得到了这个行业 20 多年从业经验专家认可，他认为这就是 20 多年所从事的业务内容（涉及到项目的保密性质，大图故意缩小了，但不影响整体信息传递）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vz1ttk8KwbSgvIWDTgCFjXicMfWic7ialPG7wLKbytGpmZTOFic6xYxxWUGZwqLof5XDX8S8jTBjNfKlBqlKOT2Tww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;回溯整个过程，特别是左侧的业务核心流程图，我们看这张流程图很容易构架起一个基本逻辑，纵向是不同的业务角色和系统，横向是时间的推进。但最开始的理解和分析是极其耗时和压力极大的过程，这个过程中我所用的方法就是：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;把书读厚：&lt;/strong&gt;&lt;span&gt;大量的信息输入，同时探求可能性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;把书读薄：&lt;/strong&gt;&lt;span&gt;归类汇总，形成大图。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;逻辑对照：&lt;/strong&gt;&lt;span&gt;确保理解和分析的正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1）把书读厚&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图基本涵盖“把书读厚”的过程，汇聚大量的文档信息，尝试用多维度去形成逻辑。这个维度可能是依据历史经验，也可能是依据文档内容，比如在形成业务大图的过程中，我曾按可能的场景逻辑、可能的系统或领域逻辑分别把多个文档中的内容归类，探求可能性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个过程会很枯燥，特别是涉及一些业务的术语内容，理解起来就会很困难。我的方式就是把自己当做一名“探索者”，如同我们玩游戏一样，常常问自己“我的游戏地图全部点亮了吗？” 未必要照顾到所有细节，但是需要力求覆盖整体内容。仔细想想，似乎也和日常的读书类似，这期间值得注意的是：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重点关注一些业务概念被界定的地方、一些与自己逻辑推理有出入的地方。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不断调整自己阅读过程中记录的维度，矫正自己的分析方向。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;老老实实用文档中的原话来记录和呈现（这点很重要，特别是阅读英文材料，最好原汁原味的记录，有助于提升自己的专业性）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;261&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.45054945054945056&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441Zy09xeCang0oicSjsp88t0hVxlvKsbicCvkaIvbLAsiaPgYWmzbf2NjWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2）把书读薄&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候的重点是建立“大局观”，尝试梳理自己的逻辑主线，常规逻辑上讲都会划分为横纵，或者矩阵式的框架，当然这需要建立在前期的理解和分析上，&lt;strong&gt;这里常常隐含一个最重要的假设：系统一定是给人用的，一定是解决客户问题的，否则毫无存在的意义。&lt;/strong&gt;所以核心的套路是：谁？用什么样的服务/功能/能力？解决什么样的问题？从而刻画出：参与者角色、系统能力、交互关系，需要常常问自己的是：边界是什么？输入输出是什么？逐步通过用例来梳理出业务功能，形成角色—&amp;gt;主流程—&amp;gt;分支流程，进而通过不断地归纳演绎形成最终的业务抽象描述“一张图”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个小的细节是不能妄图通过这些过程迅速在大脑里完成大图的绘制，还是需要从小的环节做起，把一部分小的业务闭环做成一个个的小组块，不要让它再占用大脑的空间，然后逐步整体思考和把握，渐进式地形成大图。与此同时，大图的样式美观先完全忽略，走通逻辑再细致调整。之所以强调这个细节，是因为尝试通过“一张图”去描述一个非常大的业务本身就是件很有挑战的事情，如果不这么做容易让自己变得焦虑和急躁，这是一个慢功夫，需要耐心，需要在关键阻塞的地方慢下来，甚至一遍一遍的反复才能最终完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;250&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.43125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441cQIXp8UInI4lnxXpPIDFJPdmp6bkBXThxlfAZia6DttwctPoX7d9F4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3）逻辑对照&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一个闭环封装的过程，把前期“读厚”过程中的记录，一些逻辑细节、关键流程都要逐一放到大图里去对照验证，确保业务理解的完整性和准确性，确保业务抽象能够覆盖所有已知的业务用例，甚至能够支持可能的业务场景。这个环节也是必不可少的部分。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结一下业务建模（如下图），通过上述三个主要的过程，我们基本可以产出一些业务架构的大图、框图、流程图、用例图等等，是什么样的图并不重要，重要的是这个图面对的是谁？主要用来做什么？我后边也会讲到画图角度的问题。从我们目前的业务场景上看，&lt;strong&gt;业务架构图的核心目的是统一共识、减少沟通成本，无论是项目中的哪个角色大家都能讲一样的话，描述一样的事情。&lt;/strong&gt;建立对话能力和对话语境，特别是有大量外部客户的时候，一方面体现我们自己的专业性很重要，另外一方面这种与客户对话的能力更重要，这也是上文中提到为什么要尽可能用原汁原味的文字去呈现一张图的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;121&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.209375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441ZteNHeP4uedtHU9Xyxo9WWWjRazU6icjA01FPiaegnb3acHrqztulCAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、系统建模&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过业务建模完成了从现实世界到业务模型的构建，在此基础上，如何通过抽象完成业务模型到设计模型的映射，这是系统建模要解决的问题。从研发实现的角度，这个阶段会产出各种各样的模型图，比如实体模型图、时序图、状态图、各个层次的架构图等等，但是无论何种角度，何种层次，系统建模一定是在业务建模的基础上，完成业务需求到系统模型之间的映射；这其中涉及业务功能到系统能力、业务流程到数据流程的映射；系统建模更强调职责、依赖、约束关系，用于指导研发的落地实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;抛开具体的时序图、状态图不谈，简单看几个维度的架构图（示意）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;434&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.75078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441D2HtzeWdI0YKqP8qdDJwA1PxaI7FlGwzUxwBbRGKShoNzAibbBiaKfiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;图片&lt;/span&gt;&lt;span&gt;源于&lt;/span&gt;&lt;span&gt;网络，为&lt;/span&gt;&lt;span&gt;示意图，侵删&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上述几张图的视角、层次和面向用户各不相同，基本上都能看到整体，但是细节程度不同，侧重表达的信息也完全不同。那么系统建模时应该如何去做呢，这个过程中我常常用的方法是（不尽然如此）：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;“剥洋葱式”的由大到小，由粗到细，覆盖所有已知和未来可能业务场景；善于利用各种模型表述：&lt;/strong&gt;&lt;span&gt;自然语言、关系模型、时序图、状态图、流程图、各种层次架构图等等进行模型表述，充分表达各种业务场景并不断验证。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;核心实体抽取：&lt;/strong&gt;&lt;span&gt;抓住核心概念，核心关系完成核心模型建立。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;终极武器：&lt;/strong&gt;&lt;span&gt;所有的设计/逻辑模糊的点，将所有已知场景分别套入，自己讲给自己。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1）“剥洋葱”&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在业务建模结果的基础上进行“剥洋葱”。这是一个不断拆解的过程，这个过程中的拆解非常重要的方式是就系统分工。如何分工？哪个模块负责什么？模块的输入和输出是什么？内部提供什么样的服务和能力？这几个问题在后文关于抽象的部分回答。一句话总结“剥洋葱”就是：从业务建模的“大局观”去按职责分工拆解成多个子系统、多个子模块，然后在模块层面进行细分，层层剥解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2）核心实体抽取&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于核心实体的抽取，这里的关键问题是：哪些是实体？如何判断核心实体？如何抽取？抽取后的结果是什么样的？很难用一种方法论的形式去描述，我也没有完全形成我自己一成不变的方法论，但是我觉得如下三种方式可以供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;实体(Entity)：客观存在并可相互区别的事物称之为实体。实体可以是具体的人、事、物,也可以是抽象的概念或联系。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;从这个概念理解，和我们面向对象万物兼对象的理解是基本一致的。所以实体的抽取也可以借鉴对象分析的方法：独立、可抽象、有层次性、在单个层次上又具备原子性。如下图是《Thinking in UML》中关于对象的分析方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;351&quot; data-backw=&quot;573&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441T5cUS9ia4YfiagMDwgLOq9XhNwcyyWVsvtqkZeupDhQfrbicJXJ8fIvTw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;898.1626297577855&quot; data-cropy1=&quot;6.269896193771626&quot; data-cropy2=&quot;556.4532871972318&quot; data-ratio=&quot;0.6124721603563474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441A8jt64kvAicPpzjTIYB50zC1Pav1t0bzJSlsU60SUX6jgBvicYic1GSYg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;898&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过从业务用例中提取其中的关键词，不同的关键词可能表达了实体、关系、属性等等内容，从而完成模型分析与建立。这里引用六铢老师在《问题空间领域模型基本抽象方法》中的的内容，简述如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;一句完整的用例描述中，首先找名词，以「主语」和「宾语」为主，这些名词基本可以确定我们的实体；其次找形容词，存在于「定语」和「状语」中，找到形容词基本可以确定对应属性的值；然后通过对用例的补充，细化，对名词进行定义，慢慢的，我们会得到我们的领域模型和对应的属性。最后通过动词&amp;amp;形容词（存在于【谓语】【状语】【定语】）来确定他们之间的关联关系。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这是《聊聊架构》中提的方式，具体讲就是通过寻找问题的主体，然后分析主体的生命周期，进而通过区分生命周期里的关键活动来聚焦主体的关键属性和关键关系。推荐大家阅读前 9 章的内容，总计才 40 页的内容，可能会有所体会。这里举一个书中的例子：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;一个笑话：一位女士对老公说：把袋子里的土豆削一半下锅。结果，所有土豆都下锅了，而且每个土豆被削了一半。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;作者指出，这里其实是没有清晰的识别主体，这个主体不单是土豆，而是隐含的人要吃土豆，包括人和土豆两个实体，这两个实体之间的关系就是要解决的业务场景：怎样吃？如何吃？为什么吃？所以主体识别不清楚，可能会导致整体实现的偏离。当然实际过程中不会犯这么愚蠢的错误，但是也侧面说明核心实体的抽取是非常关键的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3）终极武器：自己讲给自己&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际的业务开发中，往往一种业务设计实现要满足上层N个业务场景，这其中有共性也有个性化诉求，这个过程中我们很容易被多场景之间的异同搞混乱，要么逻辑不清晰，要么过度设计，要么考虑不周。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我观察过很多同学包括我自己，在一定的业务复杂度时容易失去设计的焦点。我的做法与业务建模类似，一定要逻辑对照：在所有的设计/逻辑模糊的点，将所有已知场景分别套入，自己讲给自己。请注意这里是“分别套入”，在当前的设计层次下一个场景验证完再去验证下一个场景，找出阻塞的、模糊的点，重新梳理再优化设计。系统建模的结果指导我们软件设计实现，所以一定要反复梳理打通，这个反复的过程其实也是提升架构能力的过程，累积到一定程度就会自然通透。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到开始的那个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;模是什么？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;通过上面业务建模和系统建模的描述，简单来讲模就是业务的映射，这个映射的结果是业务模型、概念模型或设计模型，但是所有的出发点都是业务需求：客户是谁？核心诉求是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何建？&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;上面通过业务建模和系统建模两个维度，从个人实践角度大概讲了常规的套路，建模的本质其实一个抽象的过程，但是上述业务和系统建模抽象的过程其实还有两个问题并没有完全说清楚：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;说回抽象&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100025728&quot; data-ratio=&quot;0.0471698&quot; data-type=&quot;png&quot; data-w=&quot;106&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBcaFy7sGU6CictXmjCqrUaILtsiaW0Duomh4dxS8yGaUuQW65UhibciaF0YqsgicT0QeicFO7fkKNjOSiaEA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Haskell 语言的设计者之一 Paul Hudak 曾说过一句略带夸张的话：编程中最重要的三件事是：&lt;strong&gt;抽象，抽象，抽象。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&#x27;abstraction, abstraction, abstraction&#x27; are the three most important things in programming.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;如果要问程序员最重要的能力有哪些，我相信抽象一定是其中最重要的之一。那到底什么是抽象？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;百度百科定义：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;从具体事物抽出、概括出它们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，称为抽象。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;如果更精炼的概括：抽象就是做减法和做除法。通过舍弃非本质和无关紧要的部分，着眼于问题的本质，去粗取精；通过透过现象看本质，发现不同事物之间的共同之处，异中求同，同类归并，也就是做除法。上文中建模过程是共性抽象，通过不断的抽象达到某个状态为止，我理解这个状态没有确定性的答案，核心就是满足业务场景的需要，其实这背后也有一个边界的问题。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;抽象的角度&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;生活中处处都是抽象，但是我们似乎少了为什么是这样或那样抽象的思考。抽象是有角度之分的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生活中我们常常说“我的观点是…”，其实这里的“观点”就是一个角度问题，从一定的立场或角度出发，对事物或问题所持的看法。以生活中的常见的实物来说（如下图），我们是否能快速的说出其中的相同点和不同点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;155&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.26796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441ZZxsd1QDFQclRnZQjwpw3AMoutHv71ThvhA9YuxQNA4Vs3SuV20GsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图中已经标注的，我们从功用的角度对它们定义了椅子、桌子、凳子和柜子这样的区分，但显然很有很多很多角度，比如：物料、文字、高矮等等维度，从不同维度看过去，会有完全不同的相同点和不同点表述，所以，本质是什么？本质是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;重新回到我们前边的两个问题，业务建模中我们谈到了归类，按什么去归类，答案呼之欲出，按我们的业务流程去归类、按客户的角色去归类，又回到了那个最初始的问题：客户是谁？核心诉求是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，上文中我们提到，模是业务的映射，基于对抽象的理解，我们可以进一步展开：&lt;strong&gt;模是在确定抽象角度下的业务映射。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;138&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.2390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441ey998ibcXSibX4uHxvsUDG54RcwTjdbmwLjL3wibmqJ358b3cBUsTZzzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;抽象的层次&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Wikipedia 关于抽象的定义中有一个关于报纸的例子：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;1. 我的 5 月 18 日的《旧金山纪事报》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 5 月 18 日的《旧金山纪事报》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 《旧金山纪事报》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 一份报纸&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. 一个出版品&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这五句话中，我们可以感受到抽象的层次，抽象层次越高，细节越少，普适性越强。再比如下图中关于网络模型的抽象，关于操作系统内核的抽象，我们可以明显看到，不同层次的抽象就是过滤不同的信息，最终留下来的信息才是当前抽象层次所需要的信息。从系统设计实现上来说，抽象层次越高，越接近设计，越远离实现，同时抽象的模型越不受细节的羁绊，稳定性越高，普适性越强，可重用性就越高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;248&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.42954545454545456&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441EPDXHSB0BKJp5Uic1T8d2QGIpdMIENUXXuxRwPTNQDsx8guGqyklAvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;那么这里抽象的划分层次的依据是什么？原则又是什么？我的经验是，&lt;strong&gt;划分抽象层次的依据主要包含两个：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以抽象角度分层（可能一层是多角度的聚合）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面对变化分层（用层次隔离变化）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其实这个也不能完全解释如何分层，原则是什么？我觉得这是几个最通用的原则：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;公用的往下走&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;个性的往上走&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;下层可以独立于上层存在&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;控制下层的变化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;考虑抽象层次的好处是不论在哪一个层次上，我们只需要面对有限的复杂度，从而专心考虑这个层次上的抽象是什么，要表达的信息是什么。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;抽象的边界&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;除了角度、层次之外，我们还需要考虑抽象的边界。如果说层次考虑的是纵向维度的表达，那么边界考虑的是横向维度的表达。如何确定边界，&lt;strong&gt;一个总的原则是按照职责进行划分，这里的职责其实也就是分工。&lt;/strong&gt;一旦职责确定，我们在做建模分析时就不需要把整个业务大局放进来从头到尾去分析一遍，我们只需要考虑当前分工下的上游和下游即可，这样的信息量大大减少，自然我们面对的领域复杂度也会降低到一定程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果一定要给出边界的定义，我的理解是：&lt;strong&gt;边界是在确定抽象角度下，通过寻找核心的业务活动，抽取核心实体，进一步确定实体核心生命周期的结果。&lt;/strong&gt;可能有一点点绕，关键词是：核心业务活动、核心实体、核心实体生命周期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以现场娱乐行业为例，如下这张图包含了最高抽象层次下业务的全生命周期，这个抽象层次下的主体是什么，我的理解是票，项目生产的结果是票，分销或电商服务是对票的销售，现场是对票的核验，至此以票为核心实体的生命周期结束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;189&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.3265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441o466Vpp1dFZp5RBmur9JnBRLic3EKPnqdDDWJ89wQPFviaEXBR6xViaibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果我们往下 Down 一层，从项目生产这一个业务活动去看，整个业务流程是这样：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;项目管理-&amp;gt;场馆座位分销-&amp;gt;票房预测-&amp;gt;场次管理-&amp;gt;配额管理-&amp;gt;绘座-&amp;gt;票房规划&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从生产这个视角去看，核心的实体不是票，而是场次（确定时间、确定地点、确定内容的一场演出或赛事），所有的关键业务活动都是以场次为维度，生产领域里需要考虑的主要就是场次的核心生命周期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;所以，在不同的抽象角度、不同的抽象层次，根据分工的不同会有不同的核心业务活动、不同的核心实体，边界的确定关键在寻找核心的生命周期。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;寻找生命周期的过程，就是发现内聚的过程；将所有关于生命周期的业务活动累积，就可以提升领域或模块的内聚性。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;抽象的评估&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;前边我们基本说清楚了抽象的角度、层次和边界，从三个维度确定了抽象的结果。那么如何评估抽象结果的好坏呢？答案是“高内聚，低耦合”，当然还有更多的原则，但是单从实践的角度，我觉得这是最最重要的。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;耦合是软件结构中各模块之间相互连接的一种度量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;内聚是一个模块内部各成分之间相关联程度的度量&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;“高内聚，低耦合”从内部、外部两个视角去评估抽象结果的好坏。这其中也有对应的原则和方法论，常规的套路是：&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;抽象的方法论（套路）&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我想，至此，我们说清楚了前面的那两个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;总结前面说的所有关于抽象的内容，形成&lt;strong&gt;抽象的方法论：&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;抽象有两种方法，一种是自顶向下，另一种是自底向上&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务建模，是从小到大，从局部到整体，自底向上的归纳、演绎的抽象过程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统建模，是从大到小，从整体到局部，自顶向下的拆解、切分的抽象过程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;但不绝对，自上而下和自下而上，往往在过程中是随意切换的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;下面这张图来自于《Thinking in UML》，我觉得这个循环的过程可以表达上面这四个点，供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj4419Hnqo72HJby5ibN2zVmicGibic3UZlic6SrwNBrRTrngSSo4FEXb1icGld3g/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;766&quot; data-cropy1=&quot;27.488038277511965&quot; data-cropy2=&quot;775.1626794258374&quot; data-ratio=&quot;0.9778067885117493&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441AcPoj7NVU4BGibhrP5PAxJYlYPSwo0cRPtbRic8DoSpDOED1eqicKmsdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;766&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;如何画好一张架构图？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBcaFy7sGU6CictXmjCqrUaILaZUI9ElG7bgMib5QqrWtvvxmsJqWaicGlYpRrLS8PGmqibBa8NNv8kGuA/640?wx_fmt=png&quot; data-cropx1=&quot;38&quot; data-cropx2=&quot;218&quot; data-cropy1=&quot;-5&quot; data-cropy2=&quot;5&quot; data-fileid=&quot;100024892&quot; data-ratio=&quot;0.027777777777777776&quot; data-type=&quot;jpeg&quot; data-w=&quot;180&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vz1ttk8KwbTLmn6Mf3fKuS0JTf7DicxPGjJlNe3tzaBoEZCibDPw9sr17IS2p3pJBiblsToy1BHdJDphCahaP2ZmQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到主题，如果上边的问题说清楚了，接下来的事情就相对简单了。对于架构图是什么这个问题，我们可以把之前的等式进行延展：&lt;strong&gt;架构图 = 架构的表达 = 架构在不同抽象角度和不同抽象层次的表达&lt;/strong&gt;，这是一个自然而然的过程。不是先有图再有业务流程、系统设计和领域模型等，而是相反，&lt;strong&gt;用图来表达抽象的思考和内容。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么架构图有什么用？给谁看？回答这个问题需要讲清楚为什么要画架构图，同时也需要考虑一个问题就是：架构图是不是越多越好，越详细越好？&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;画架构图是为了什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;A picture is worth a thousand words (一图胜千言)，从 Why 层面讲，我觉得就是如下两点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;但是上述两点其实是非常笼统的信息，如果放在 What 层面，我们必须要考虑架构图面对的“客户”，不同的客户有不同的诉求（其实也就是角度和层次），在不同的抽象层次架构图所表达的信息内容可以完全不一样。以目前团队做的事情为例，架构图的目标客户至少有几类：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以&lt;strong&gt;画架构图，我们必须首先明确沟通交流的目的和面向的客户，&lt;/strong&gt;只有明确了这两个点，才能更加有针对性地达成上边所说的那两点目标：解决沟通障碍，提升协作效率。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;怎么画？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、先说分类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构图分类，本质上是从不同的视角，不同的抽象角度去看，作出清晰、简化的描述，涵盖特点方面忽略无关方面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从业务应用开发的维度，一般的抽象层次可以分为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;业务全域—&amp;gt;子域—&amp;gt;模块—&amp;gt;子模块—&amp;gt;包—&amp;gt;类—&amp;gt;方法&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这其中：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，还有很多其他的分类方式，比如：RUP 4+1，GOGAF9 等等分类方式。&lt;strong&gt;单从实践的角度，我觉得何种分类不是最重要的，最重要的是想清楚面向谁和解决什么诉求，然后思考架构图到底从哪个角度、哪个层次去抽象。&lt;/strong&gt;我们目前所做的项目，有很多时候要去和国外的业务专家、技术专家沟通，大家也并没有一个明确的标准定义，表述清楚问题，达成共识是最最关键的，至于架构图的粒度、类别、内容可以逐步地迭代优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2、再说构图&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;构图的部分，我们大家都用 UML 画过类图，涉及泛化、聚合、组合、依赖等等关系，分别用不同的虚实线、箭头样式进行表达。所以画架构图需要考虑架构图的组成元素，要保证符合一贯理解，架构图的组成元素可能涉及：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方框、各种形状、虚实线、箭头、颜色（不同颜色代表什么意思）和文字内容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;虚实线表达什么？组件类型，模块类型，层，服务，需要考虑是否已经实现等？不同状态的标识怎么传递？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;箭头表达什么?数据流或关联关系？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;交互类型可以是同步或异步的；关联类型可以是指依赖、继承、实现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;构图最最重要的是需要考虑内容术语一致性问题、碎片化问题、信息粒度大小的问题，以及图表的外观问题。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;如何评判架构图的好坏&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;架构图的好坏，我理解主要是两个方向，一个是需要跳出图本身去看，业务领域的抽象设计合理性，是否符合“高内聚，低耦合”的要求，这个需要回到前文的业务建模、系统建模和抽象过程去寻找答案。另外一个方向是图本身，以下几个点供参考：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容术语一致、信息粒度大小一致，图例清晰，颜色类型统一，美观；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;图中的信息与相应的抽象级别相关，且满足利益相关者(合作方)的需求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一张好的架构图不需要多余的文字解释。受众有没有准确接收到想传递的信息；如果它所导致的疑问比它能解释的问题还要多，那么它就不是一张好的架构图；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;架构图应该帮助每个人看到大局，了解周围的环境，适当的上下文信息；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;架构图应该避免“只见树木不见森林”。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;最后也聊聊架构师&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBcaFy7sGU6CictXmjCqrUaILaZUI9ElG7bgMib5QqrWtvvxmsJqWaicGlYpRrLS8PGmqibBa8NNv8kGuA/640?wx_fmt=png&quot; data-cropx1=&quot;38&quot; data-cropx2=&quot;218&quot; data-cropy1=&quot;-5&quot; data-cropy2=&quot;5&quot; data-fileid=&quot;100024892&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/vz1ttk8KwbTLmn6Mf3fKuS0JTf7DicxPGjJlNe3tzaBoEZCibDPw9sr17IS2p3pJBiblsToy1BHdJDphCahaP2ZmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;180&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是来自于阿白老师的文章《架构师到底是做什么的？》，越是琢磨，越觉得深以为然。其中提到了好的架构师的画像和不好的画像，如下图，与大家共勉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;293&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.50546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441mjIueOGQkrGYyDviaC9y8ZIibfJ94gHRPGADdkHXiab75CVTFGDEicUib6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从我个人的成长经历看，&lt;strong&gt;架构师很重要的一点要学会“权衡”，既要兼顾当下痛点也要符合未来一定时间的发展，既要保留未来的可扩展性也要避免过度设计。&lt;/strong&gt;选择什么样的时间节点、什么样的业务场景以及什么样的架构迭代策略至关重要，这些决策的关键在于判断和取舍，需要结合深刻的业务思考乃至组织架构去做权衡落地。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;和大家分享一点点不算经验的经验：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;快速学习&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;快不是一个速度问题，也是一个判断或者标准问题。面对一个全新业务场景，如何能够识别20%的关键业务路径、关键业务痛点，如何短时间把自己变成业务专家，这是一个架构师基本的素质。我的经验就是要去「吸金式」的思考，带着问题主动思考，客户是谁？有什么诉求？需要解决什么样的问题？我们能提供什么样的价值？多问为什么？这也需要长时间的刻意训练。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;不要屁股决定脑袋&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;要跨角色、跨层级去看待业务问题，这个点容易陷入说教，说实话我自己做得也未必到位。但是时刻提醒自己的思考是否被局限，在哪一个维度，是 Have-do-be，还是 be-do-Have ，同时要一直提醒自己不要屁股决定脑袋。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100025737&quot; data-ratio=&quot;1.0909090909090908&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;11&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CoqxIF8TxBdGHPBice38SlYyYlBaEj1tKSARFeMLno5Uy7jr1zFpFnicKMqY4EWW91x0wiaToibLelOou3BETLZtzA/640?wx_fmt=png&quot;/&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;提升思考能力和对于技术原理或本质的理解&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;我觉得这是最底层的能力，业务开发中我觉得最大的两个难点：一是逻辑的复杂性，二是需求的变化性。我们不应该把大部分时间花在寻找解决方案上，而应该花更多的时间在选择解决方案上。这就要求我们对业务全局、行业深度、技术视野、技术深度、业务共性、个性特征等等形成自己的认知。权衡取舍，取什么舍什么？该怎么取怎么舍？那个度在哪里？唯有思考，自驱，累积和坚持，勇猛精进，志愿无倦。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;最后的最后&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;希望这篇文章对大家有帮助，附上最初在考虑这个主题时的构思过程及思考路径，供大家参考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;382&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.6609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naIBibiaCPNjJBiczoibTg9tj441SwxEIGeOyYpp1rjFvE280Hy8Z2BYfF89DliaO8CPJKxO91GnQ4Ymcqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101256&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;310:417&quot;&gt;END&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;往期推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;h2&gt;&lt;span&gt;   ……&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;加入读者群，请在公众号后台回复：&lt;strong&gt;读者群&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;资料获取&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 识别并关注下方公众号；&lt;br/&gt;2. 在下面公众号后台回复关键字「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;设计模式&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」即可下载。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;技术琐话 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以分布式设计、架构、体系思想为基础，兼论研发相关的点点滴滴，不限于代码、质量体系和研发管理。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxMzEzMjM5NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/nhlGsolibOWF3auwD2unWLZHOt6TeCJ1iboL4Po7ickwKsibk7WgicbkOxG7wibMw8ZsSMQtDpR9D3OsF2RKibxKN00Xg/0?wx_fmt=png&quot; data-nickname=&quot;技术琐话&quot; data-alias=&quot;TheoryPractice&quot; data-signature=&quot;最干货的java+分布式技术公众号，兼及研发管理。本号专家阵容：蚂蚁金服右军、NETSTARS CTO陈斌、江苏百瑞赢李伟山、前蚂蚁金服高级技术专家张翔、美团高级技术专家杨彪等。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6fc5b76aea1691650d5054447b843540</guid>
<title>实战派 | Java项目中玩转Redis6.0客户端缓存！</title>
<link>https://toutiao.io/k/k58zozk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哈喽大家好啊，我是Hydra。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面的文章中，我们介绍了Redis6.0中的新特性&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMTgzOTQ0Ng==&amp;amp;mid=2247489086&amp;amp;idx=1&amp;amp;sn=505896eae995495662d9e1e844e98fb0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;客户端缓存&lt;code&gt;client-side caching&lt;/code&gt;&lt;/a&gt;，通过telnet连接模拟客户端，测试了三种客户端缓存的工作模式，这篇文章我们就来点硬核实战，看看客户端缓存在java项目中应该如何落地。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;铺垫&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先介绍一下今天要使用到的工具&lt;code&gt;Lettuce&lt;/code&gt;，它是一个可伸缩线程安全的redis客户端。多个线程可以共享同一个&lt;code&gt;RedisConnection&lt;/code&gt;，利用nio框架&lt;code&gt;Netty&lt;/code&gt;来高效地管理多个连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;放眼望向现在常用的redis客户端开发工具包，虽然能用的不少，但是目前率先拥抱redis6.0，支持客户端缓存功能的却不多，而lettuce就是其中的领跑者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先在项目中引入最新版本的依赖，下面正式开始实战环节：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.lettuce&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;lettuce-core&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.8.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实战&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目中应用lettuce，开启并使用客户端缓存功能，只需要下面这一段代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 创建 RedisClient 连接信息&lt;/span&gt;&lt;br/&gt;    RedisURI redisURI= RedisURI.builder()&lt;br/&gt;            .withHost(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;)&lt;br/&gt;            .withPort(&lt;span&gt;6379&lt;/span&gt;)&lt;br/&gt;            .build();&lt;br/&gt;    RedisClient client = RedisClient.create(redisURI);&lt;br/&gt;    StatefulRedisConnection&amp;lt;String, String&amp;gt; connect = client.connect();&lt;br/&gt;    &lt;br/&gt;    Map&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;    CacheFrontend&amp;lt;String,String&amp;gt; frontend=ClientSideCaching.enable(CacheAccessor.forMap(map),&lt;br/&gt;            connect, TrackingArgs.Builder.enabled().noloop());&lt;br/&gt;&lt;br/&gt;    String key=&lt;span&gt;&quot;user&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;){&lt;br/&gt;        String value = frontend.get(key);&lt;br/&gt;        System.out.println(value);&lt;br/&gt;        TimeUnit.SECONDS.sleep(&lt;span&gt;10&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的代码主要完成了几项工作：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通过&lt;code&gt;RedisURI&lt;/code&gt;配置redis连接的标准信息，并建立连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建用于充当本地缓存的&lt;code&gt;Map&lt;/code&gt;，开启客户端缓存功能，建立一个缓存访问器&lt;code&gt;CacheFrontend&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在循环中使用&lt;code&gt;CacheFrontend&lt;/code&gt;，不断查询同一个key对应的值并打印&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动上面的程序，控制台会不断的打印&lt;code&gt;user&lt;/code&gt;对应的缓存，在启动一段时间后，我们在其他的客户端修改&lt;code&gt;user&lt;/code&gt;对应的值，运行的结果如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.374414976599064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviayJ5TejeqhwQSkYrIIMeeMSIok70icF5LqFR0VJgzMtIMaBERpTuqiboQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;641&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，在其他客户端修改了key所对应的值后，打印结果也发生了变化。但是到这里，我们也不知道&lt;code&gt;lettuce&lt;/code&gt;是不是真的使用了客户端缓存，虽然结果正确，但是说不定是它每次都重新执行了&lt;code&gt;get&lt;/code&gt;命令呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们下面来看看源码，分析一下具体的代码执行流程。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面的代码中，最关键的类就是&lt;code&gt;CacheFrontend&lt;/code&gt;了，我们再来仔细看一下上面具体实例化时的语句：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;CacheFrontend&amp;lt;String,String&amp;gt; frontend=ClientSideCaching.enable(&lt;br/&gt;        CacheAccessor.forMap(map),&lt;br/&gt;        connect,&lt;br/&gt;        TrackingArgs.Builder.enabled().noloop()&lt;br/&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先调用了&lt;code&gt;ClientSideCaching&lt;/code&gt;的&lt;code&gt;enable()&lt;/code&gt;方法，我们看一下它的源码：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.18232044198895028&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviavRF6wzCWtSZRstOaLK7libBlM9WDiav6LxSIukvibvrjQ31z13c1j8XAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1267&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解释一下传入的3个参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;CacheAccessor&lt;/code&gt;：一个定义对客户端缓存进行访问接口，上面调用它的&lt;code&gt;forMap&lt;/code&gt;方法返回的是一个&lt;code&gt;MapCacheAccessor&lt;/code&gt;，它的底层使用的我们自定义的&lt;code&gt;Map&lt;/code&gt;来存放本地缓存，并且提供了&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;put&lt;/code&gt;、&lt;code&gt;evict&lt;/code&gt;等方法操作&lt;code&gt;Map&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;StatefulRedisConnection&lt;/code&gt;：使用到的redis连接&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;TrackingArgs&lt;/code&gt;：客户端缓存的参数配置，使用&lt;code&gt;noloop&lt;/code&gt;后不会接收当前连接修改key后的通知&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;向redis服务端发送开启&lt;code&gt;tracking&lt;/code&gt;的命令后，继续向下调用&lt;code&gt;create()&lt;/code&gt;方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25417075564278707&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviavNynv4GB3icLslR76RVPibrKSlHDTlPNzleByvPm88QeJgrRyryyJWfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个过程中实例化了一个重要对象，它就是实现了&lt;code&gt;RedisCache&lt;/code&gt;接口的&lt;code&gt;DefaultRedisCache&lt;/code&gt;对象，实际向redis执行查询时的&lt;code&gt;get&lt;/code&gt;请求、写入的&lt;code&gt;put&lt;/code&gt;请求，都是由它来完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实例化完成后，继续向下调用同名的&lt;code&gt;create()&lt;/code&gt;方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2082018927444795&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaSU0RHdPwIiaQRCJOvaPzCqRISZHdUlbIBJBeHZKXSZ3pDI74PFc9X2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1268&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个方法中，实例化了&lt;code&gt;ClientSideCaching&lt;/code&gt;对象，注意一下传入的两个参数，通过前面的介绍也很好理解它们的分工：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;当本地缓存存在时，直接从&lt;code&gt;CacheAccessor&lt;/code&gt;中读取&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当本地缓存不存在时，使用&lt;code&gt;RedisCache&lt;/code&gt;从服务端读取&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要额外注意一下的是返回前的两行代码，先看第一句（行号&lt;strong&gt;114&lt;/strong&gt;的那行）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里向&lt;code&gt;RedisCache&lt;/code&gt;添加了一个监听，当监听到类型为&lt;code&gt;invalidate&lt;/code&gt;的作废消息时，拿到要作废的key，传递给消费者。一般情况下，&lt;code&gt;keys&lt;/code&gt;中只会有一个元素。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39373601789709173&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaQibFmuH5QViaLos2sxrjiaRcnTITEb3lNK5esSic7cvKyt78X0HyA9nrtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费时会遍历当前&lt;code&gt;ClientSideCaching&lt;/code&gt;的消费者列表&lt;code&gt;invalidationListeners&lt;/code&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.20239390642002175&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaEvDNSdk0kK55ANF8VFp1Wc6xK1o5At7DOYXYqbOhnjNaZgPrWmXUhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;919&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这个列表中的所有，就是在上面的第二行代码中（行号&lt;strong&gt;115&lt;/strong&gt;的那行）添加的，看一下方法的定义：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11832460732984293&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaA5Bj6yVcU2Hctv9CibI5yiaHWsuYNQ3eNYdJLeQ0RebL5fX3pCHjibRcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;955&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而实际传入的方法引用则是下面&lt;code&gt;MapCacheAccessor&lt;/code&gt;的&lt;code&gt;evict()&lt;/code&gt;方法，也就是说，当收到key作废的消息后，会移除掉本地缓存&lt;code&gt;Map&lt;/code&gt;中缓存的这个数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2746212121212121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviayOA5s0czBHOHZu15lSY6icISUBiaLVJgv4dzQSt4o2mMtNrJe4pbM5UA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;528&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端缓存的&lt;strong&gt;作废&lt;/strong&gt;逻辑我们梳理清楚了，再来看看它是何时写入的，直接看&lt;code&gt;ClientSideCaching&lt;/code&gt;的&lt;code&gt;get()&lt;/code&gt;方法：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8552123552123552&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaWAs1HL3ic4hc74ULibmY7m3Xmfy9XUaypJFsxvleWzIib82akjic2Mugww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;518&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，&lt;code&gt;get&lt;/code&gt;方法会先从本地缓存&lt;code&gt;MapCacheAccessor&lt;/code&gt;中尝试获取，如果取到则直接返回，如果没有再使用&lt;code&gt;RedisCache&lt;/code&gt;读取redis中的缓存，并将返回的结果存入到&lt;code&gt;MapCacheAccessor&lt;/code&gt;中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图解&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;源码看到这里，是不是基本逻辑就串联起来了，我们再画两张图来梳理一下这个流程。先看&lt;code&gt;get&lt;/code&gt;的过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7061170212765957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaPjSwjIZuf4ibSjicDJIHqVO3r2RrwbVoOkuGMsaSW6dauZ2vITKaGJIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看一下通知客户端缓存失效的过程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.612027158098933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaRTWCfWr2QlF8BTmibLNWbMetJewWKa1jYWo568fA4UqYIS3785FicVwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么样，配合这两张图再理解一下，是不是很完美？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实也不是…回忆一下我们之前使用两级缓存&lt;code&gt;Caffeine+Redis&lt;/code&gt;时，当时使用的通知机制，会在修改redis缓存后通知所有主机修改本地缓存，修改成为最新的值。目前的lettuce看来，显然不满足这一功能，只能做到作废删除缓存但是不会主动更新。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;扩展&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，如果想实现本地客户端缓存的&lt;strong&gt;实时更新&lt;/strong&gt;，我们应该如何在现在的基础上进行扩展呢？仔细想一下的话，思路也很简单：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;首先，移除掉&lt;code&gt;lettuce&lt;/code&gt;的客户端缓存本身自带的作废消息监听器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后，添加我们自己的作废消息监听器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回顾一下上面源码分析的图，在调用&lt;code&gt;DefaultRedisCache&lt;/code&gt;的&lt;code&gt;addInvalidationListener()&lt;/code&gt;方法时，其实是调用的是&lt;code&gt;StatefulRedisConnection&lt;/code&gt;的&lt;code&gt;addListener()&lt;/code&gt;方法，也就是说，这个监听器其实是添加在redis连接上的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果我们再看一下这个方法源码的话，就会发现，在它的附近还有一个对应的&lt;code&gt;removeListener()&lt;/code&gt;方法，一看就是我们要找的东西，准备用它来移除消息监听。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7017828200972447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEvianNiagSVFAKC9jicSQBhC5syo9MtZs8rSH6UQajQeZ1Rfnib2vufx95Ryw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过再仔细看看，这个方法是要传参数的啊，我们明显不知道现在里面已经存在的&lt;code&gt;PushListener&lt;/code&gt;有什么，所以没法直接使用，那么无奈只能再接着往下看看这个&lt;code&gt;pushHandler&lt;/code&gt;是什么玩意…&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0565749235474007&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEvias4iaeThl6libDmGHgPJaXhibibD5pXO6YQ7V3Se8upFp29j1yfjqZgrSdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过注释可以知道，这个&lt;code&gt;PushHandler&lt;/code&gt;就是一个用来操作&lt;code&gt;PushListener&lt;/code&gt;的处理工具，虽然我们不知道具体要移除的&lt;code&gt;PushListener&lt;/code&gt;是哪一个，但是惊喜的是，它提供了一个&lt;code&gt;getPushListeners()&lt;/code&gt;方法，可以获取当前所有的监听器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样一来就简单了，我上来直接清除掉这个集合中的所有监听器，问题就迎刃而解了~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，在&lt;code&gt;StatefulRedisConnectionImpl&lt;/code&gt;中的&lt;code&gt;pushHandler&lt;/code&gt;是一个私有对象，也没有对外进行暴露，想要操作起来还是需要费上一点功夫的。下面，我们就在分析的结果上进行代码的修改。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;魔改&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们需要自定义一个工具类，它的主要功能是操作监听器，所以就命名为&lt;code&gt;ListenerChanger&lt;/code&gt;好了。它要完成的功能主要有三个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;移除原有的全部消息监听&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加新的自定义消息监听&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;更新本地缓存&lt;code&gt;MapCacheAccessor&lt;/code&gt;中的数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先定义构造方法，需要传入&lt;code&gt;StatefulRedisConnection&lt;/code&gt;和&lt;code&gt;CacheAccessor&lt;/code&gt;作为参数，在后面的方法中会用到，并且创建一个&lt;code&gt;RedisCommands&lt;/code&gt;，用于后面向redis服务端发送&lt;code&gt;get&lt;/code&gt;命令请求。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ListenerChanger&lt;/span&gt;&amp;lt;&lt;span&gt;K&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; StatefulRedisConnection&amp;lt;K, V&amp;gt; connection;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; CacheAccessor&amp;lt;K, V&amp;gt; mapCacheAccessor;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisCommands&amp;lt;K, V&amp;gt; command;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ListenerChanger&lt;/span&gt;&lt;span&gt;(StatefulRedisConnection&amp;lt;K, V&amp;gt; connection,&lt;br/&gt;                           CacheAccessor&amp;lt;K, V&amp;gt; mapCacheAccessor)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.connection = connection;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.mapCacheAccessor = mapCacheAccessor;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.command = connection.sync();&lt;br/&gt;    }&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;//其他方法先省略……&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;移除监听&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面说过，&lt;code&gt;pushHandler&lt;/code&gt;是一个私有对象，我们无法直接获取和操作，所以只能先使用反射获得。&lt;code&gt;PushHandler&lt;/code&gt;中的监听器列表存储在一个&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;中，我们直接使用迭代器移除掉所有内容即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;removeAllListeners&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        Class connectionClass = StatefulRedisConnectionImpl&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;        Field pushHandlerField = connectionClass.getDeclaredField(&lt;span&gt;&quot;pushHandler&quot;&lt;/span&gt;);&lt;br/&gt;        pushHandlerField.setAccessible(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        PushHandler pushHandler = (PushHandler) pushHandlerField.get(&lt;span&gt;this&lt;/span&gt;.connection);&lt;br/&gt;&lt;br/&gt;        CopyOnWriteArrayList&amp;lt;PushListener&amp;gt; pushListeners&lt;br/&gt;                = (CopyOnWriteArrayList) pushHandler.getPushListeners();&lt;br/&gt;        Iterator&amp;lt;PushListener&amp;gt; it = pushListeners.iterator();&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (it.hasNext()) {&lt;br/&gt;            PushListener listener = it.next();&lt;br/&gt;            pushListeners.remove(listener);&lt;br/&gt;        }&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (NoSuchFieldException | IllegalAccessException e) {&lt;br/&gt;        e.printStackTrace();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;添加监听&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们模仿&lt;code&gt;DefaultRedisCache&lt;/code&gt;中&lt;code&gt;addInvalidationListener()&lt;/code&gt;方法的写法，添加一个监听器，除了最后处理的代码基本一致。对于监听到的要作废的&lt;code&gt;keys&lt;/code&gt;集合，另外启动一个线程更新本地数据。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;addNewListener&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.connection.addListener(&lt;span&gt;new&lt;/span&gt; PushListener() {&lt;br/&gt;        &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onPushMessage&lt;/span&gt;&lt;span&gt;(PushMessage message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (message.getType().equals(&lt;span&gt;&quot;invalidate&quot;&lt;/span&gt;)) {&lt;br/&gt;                List&amp;lt;Object&amp;gt; content = message.getContent(StringCodec.UTF8::decodeKey);&lt;br/&gt;                List&amp;lt;K&amp;gt; keys = (List&amp;lt;K&amp;gt;) content.get(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;                System.out.println(&lt;span&gt;&quot;modifyKeys:&quot;&lt;/span&gt;+keys);&lt;br/&gt;&lt;br/&gt;                &lt;span&gt;// start a new thread to update cacheAccessor&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;new&lt;/span&gt; Thread(()-&amp;gt; updateMap(keys)).start();&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;本地更新&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;RedisCommands&lt;/code&gt;重新从redis服务端获取最新的数据，并更新本地缓存&lt;code&gt;mapCacheAccessor&lt;/code&gt;中的数据。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;updateMap&lt;/span&gt;&lt;span&gt;(List&amp;lt;K&amp;gt; keys)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (K key : keys) {&lt;br/&gt;        V newValue = &lt;span&gt;this&lt;/span&gt;.command.get(key);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;newValue:&quot;&lt;/span&gt;+newValue);&lt;br/&gt;        mapCacheAccessor.put(key, newValue);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于为什么执行这个方法时额外启动了一个新线程，是因为我在测试中发现，当在&lt;code&gt;PushListener&lt;/code&gt;的&lt;code&gt;onPushMessage&lt;/code&gt;方法中执行&lt;code&gt;RedisCommands&lt;/code&gt;的&lt;code&gt;get()&lt;/code&gt;方法时，会一直取不到值，但是像这样新启动一个线程就没有问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，我们来写一段测试代码，来测试上面的改动。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt; &lt;span&gt;// 省略之前创建连接代码……&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;    Map&amp;lt;String, String&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;    CacheAccessor&amp;lt;String, String&amp;gt; mapCacheAccessor = CacheAccessor.forMap(map);&lt;br/&gt;    CacheFrontend&amp;lt;String, String&amp;gt; frontend = ClientSideCaching.enable(mapCacheAccessor,&lt;br/&gt;            connect,&lt;br/&gt;            TrackingArgs.Builder.enabled().noloop());&lt;br/&gt;&lt;br/&gt;    ListenerChanger&amp;lt;String, String&amp;gt; listenerChanger&lt;br/&gt;            = &lt;span&gt;new&lt;/span&gt; ListenerChanger&amp;lt;&amp;gt;(connect, mapCacheAccessor);&lt;br/&gt;    &lt;span&gt;// 移除原有的listeners&lt;/span&gt;&lt;br/&gt;    listenerChanger.removeAllListeners();&lt;br/&gt;    &lt;span&gt;// 添加新的监听器&lt;/span&gt;&lt;br/&gt;    listenerChanger.addNewListener();&lt;br/&gt;&lt;br/&gt;    String key = &lt;span&gt;&quot;user&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;        String value = frontend.get(key);&lt;br/&gt;        System.out.println(value);&lt;br/&gt;        TimeUnit.SECONDS.sleep(&lt;span&gt;30&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，代码基本上在之前的基础上没有做什么改动，只是在创建完&lt;code&gt;ClientSideCaching&lt;/code&gt;后，执行了我们自己实现的&lt;code&gt;ListenerChanger&lt;/code&gt;的两个方法。先移除所有监听器、再添加新的监听器。下面我们以debug模式启动测试代码，简单看一下代码的执行逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，在未执行移除操作前，&lt;code&gt;pushHandler&lt;/code&gt;中的监听器列表中有一个监听器：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7505197505197505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviabfX7viapdVbu0Qor5o8uticGicnrek0DvlZV1KugWWXXDEWkuLvwH171w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;移除后，监听器列表为空：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4965986394557823&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaXOxOq2wpbg9BgCsqshbufxxk3THz7OvBEPH8fylOOTm4iagpqPPWkpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;735&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在添加完自定义监听器、并且执行完第一次查询操作后，在另外一个redis客户端中修改&lt;code&gt;user&lt;/code&gt;的值，这时&lt;code&gt;PushListener&lt;/code&gt;会收到作废类型的消息监听：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5055555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaia4tQR2gWBKD5k3nmwnJTjmibw0s90BGzBRV0Bg6xwqhWAxbkMxWac1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动一个新线程，查询redis中&lt;code&gt;user&lt;/code&gt;对应的最新值，并放入&lt;code&gt;cacheAccessor&lt;/code&gt;中：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.509009009009009&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaPpoFNMjQjmPQJicMicHhTTqf4gPDZckZpjOBgGOC2InEZRjghIE3ibibiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;666&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当循环中&lt;code&gt;CacheFrontend&lt;/code&gt;的&lt;code&gt;get()&lt;/code&gt;方法再被执行时，会直接从&lt;code&gt;cacheAccessor&lt;/code&gt;中取到刷新后的值，不需要再次去访问redis服务端了：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5930851063829787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEvia9qDHBkOsX0LMA7Libl6f88zo8pIQnulDAK3ca3XOlwPloM2yqmiaRjaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，我们基于&lt;code&gt;lettuce&lt;/code&gt;的客户端缓存的基本使用、以及在这个基础上进行的魔改就基本完成了。可以看到，&lt;code&gt;lettuce&lt;/code&gt;客户端已经在底层封装了一套比较成熟的API，能让我们在将redis升级到6.0以后，开箱即用式地使用客户端缓存这一新特性。在使用中，不需要我们关注底层原理，也不用做什么业务逻辑的改造，总的来说，使用起来还是挺香的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，这次的分享就到这里，我是Hydra，下篇文章再见。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;/section&gt;&lt;img data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZLiaLRD8vwaxckdQiasecEviaaHkBY1kJlmd79icuhwJhYxz81RZkmU7jq12FFwPCb2djmqerS7Q8XuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;50&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwMTgzOTQ0Ng==&amp;amp;mid=2247489086&amp;amp;idx=1&amp;amp;sn=505896eae995495662d9e1e844e98fb0&amp;amp;chksm=96e69007a1911911a589075fdd63fa5e3e668ea465d7bbc9b84baea3e6f22f85320d34168ad9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;引入『客户端缓存』，Redis6算是把缓存玩明白了…&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;&lt;strong&gt;引入『客户端缓存』，Redis6算是把缓存玩明白了…&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;公众号后台回复&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&quot;356&quot;---&lt;/span&gt;&lt;span&gt;领&lt;/span&gt;&lt;span&gt;取100余本后端书籍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&quot;面试&quot;---领取大厂面试资料&lt;/p&gt;&lt;p&gt;&quot;导图&quot;---&lt;span&gt;领&lt;/span&gt;取24张Java后端学习笔记导图&lt;/p&gt;&lt;p&gt;&quot;架构&quot;---&lt;span&gt;领&lt;/span&gt;取29本java架构师电子书籍&lt;/p&gt;&lt;p&gt;&quot;实战&quot;---&lt;span&gt;领&lt;/span&gt;取springboot实战项目&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMTgzOTQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbnQMY3O39lQic6aWFibIibG3nSvCe4npSAicia5P7DfBRFKzZWftbw6Cw9ez7iagtVvBeK0WeN8ibEWyWHw/0?wx_fmt=png&quot; data-nickname=&quot;码农参上&quot; data-alias=&quot;CODER_SANJYOU&quot; data-signature=&quot;专注后端技术分享，有趣、深入、直接，与你聊聊技术。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;关注公众号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有趣、深入、直接&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与你聊聊技术&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;觉得有用，一键四连吧~&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d14fc8502d3e4f3be16420c6c20cdd11</guid>
<title>做一个好的程序员难吗？只需要这10个习惯</title>
<link>https://toutiao.io/k/bryptgy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个世界上，有数以百万计的人对软件开发充满热情，他们有很多名字，如软件工程师、程序员、编码员、开发人员。一段时间后，这些人可能会成为一名优秀的编码员，并且他们将非常熟悉如何使用计算机语言完成工作。但是，如果你想成为一名优秀的程序员，你还需要注意几点，如果你能让以下十项成为你的习惯，那么你就真的可以算是一名优秀的程序员了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.学无止境&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即使你有10多年的程序员经验，你仍然要努力学习，因为你在计算机领域，充满了创造力，每天都有很多很多新事物出现. 你需要跟上时代的步伐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;您需要了解新的编程语言，以及了解正在开发的编程语言和一些编程框架。您还需要阅读行业新闻并参与热门社区的在线讨论，以便您了解和欣赏软件开发的整体趋势。在国内有CSDN、掘金、InfoQ、OSCHINA等一些著名的社区。在国外，建议大家经常去digg.com看看各种BLOG的聚合。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.掌握多种语言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编程语言总是有它们最适合的领域。当您面临需要解决的问题时，您需要找到最适合解决这些问题的语言。比如，如果你需要性能，C/C++可能是首选，如果你需要跨平台，Java可能是首选，如果你想在Web上写开发程序，PHP、ASP、Ajax、JSP可能是您的选择，如果您想处理一些文本并与其他应用程序交互，Perl、Python 可能是最好的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以花一些时间探索你熟悉的其他编程语言来拓宽你的视野，因为你武装得更好，思考更全面，这对你自己和你的项目都有好处。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 对不同的操作系统或技术保持理性&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员心中总有自己无与伦比的技术和操作系统，有人喜欢 Ubuntu，有人喜欢 Debian，有人喜欢 Windows，还有 FreeBSD、MacOSX 或 Solaris 等。只有一些最优秀的程序员了解不同操作系统的优缺点，这样他们才能真正客观公正地进行系统选择，而不会让他们的情绪占上风。语言也是如此，太多的程序员总是喜欢纠缠于语言的比较，比如 Java 和 Perl。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哪个新晋程序员没有为类似的话题争论过？比如VC++和Delphi等。争论这些事，只能说明一个人的肤浅和脆弱。一个好的程序不会固守这些原则，而是能够理性地分析和面对它们，从而做出正确的客观选择。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 不要将自己局限在单一的开发环境中&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，如上所述，每个程序员都有自己喜欢的工具和技术，有些喜欢旧的，有些喜欢新的，比如 gedit 或 Emacs。有些人喜欢使用 VC++ 之类的 GUI 调试器，而我更喜欢 GDB 命令行调制器。等等等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于程序员使用什么工具有很多争论吗？到处都是。你使用什么工具并不重要，只要你能更好更快地实现你的目标。但是优秀的程序员应该知道一件事——那就是他们应该尝试其他工作环境。没有比较，你永远不知道谁好谁不好，你永远不知道你不知道什么。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 别告诉我你不知道源代码版本控制&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果您的团队正在开发没有版本控制系统的源代码，那么我告诉您，您的软件开发仍处于石器时代。CVS 是一个看起来平淡无奇的版本控制工具，但它是使用最广泛的版本控制系统，Subversion 是开始占领 CVS 领域的 CVS 的更新版本，而 Git 是另一种版本控制工具。还有 Visual SourceSafe 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据您团队的规模和地理位置，您可能会使用效率最高或最低的工具来管理您的源代码。但是一个好的程序员总是会使用源代码版本控制工具来管理他或她的代码。如果你想让我推荐一个，我推荐开源的 git。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 成为一名优秀的团队合作者&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除非你喜欢独奏，除非你是独狼。但我想让你知道，今天，可能没有经过验证的软件可以单独完成，你可能是团队中最大的恶霸，但这并不意味着你是一个优秀的团队合作者。你的能力只有融入团队才能发挥作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你与团队成员的沟通有礼貌吗？您是否定期与他们沟通，每个人都喜欢和您一起讨论问题吗？想想一支足球队，你是那支球队的好成员吗？当其他人看到你在场上奔跑时，当其他人看到你的传球、接球和扣篮时，你的团队成员会被你的行为所鼓舞吗？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7. 把你的工作变成文档&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个条目当然包括在你的代码中写注释，但这还不够，你还需要做更多。注释良好的代码是文档的基础，可让您和您的团队轻松理解您的意图和想法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写下文档不仅仅是一种团队离线交流的方式，以免忘记我们的想法，也是一种传递知识的方式。把你知道的一切都写下来是个好习惯。因为，我相信你不希望人们总是在你最忙的时候打断你问问题，或者在你度假时接到公司的电话问你问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而如果你自己老是守口如瓶，那么结果很可能就是你会在很长一段时间内让自己深陷其中，而你更不能做更多的事情，包括向上提升。你可能会认为“教徒会饿死师父”，但我告诉你，你的保守会让你失去更多更好的东西，请相信我，我在这里不是耸人听闻。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.注意备份和安全&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也许您认为这是“废话”，并且您已经了解备份的重要性。但我在这里要指出的是，失去东西是我们生活的一部分，你总是会失去东西，你永远无法避免它。比如：你的笔记本电脑被偷了，你的硬盘坏了，你的电脑中了病毒，你的系统被黑了，甚至整栋楼都被烧毁了等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，做好一件非常非常重要的事备份工作。硬盘不可信，定期刻录CD或磁带可能是个好办法，而互联网也不可信，所以要提防病毒和黑客，不仅在软件方面使用安全策略，你需要一个完善的管理系统。此外，尽量将数据保存在尽可能多的不同位置，并制定定期（每天、每周、每月）备份策略。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.设计要足够灵活&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也许你的需求只会要求你实现一个死的东西，但是，作为一个好的程序，你应该一直在想这个死的东西是否可以有灵活的一面，比如让一些参数可配置，将一些通用的东西形成你的函数库为了以后重用，是否提供插件方面的功能？您的模块必须像积木一样组装吗？如果有修改，您的设计可以立即应对吗？当然，灵活的设计可能并不意味着重新发明轮子，而是尽可能使用标准化的东西。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓灵活设计，就是让我们去考虑更多超出需求的东西，在需求中考虑到这一类的所有问题，而不是仅仅处理需求中陈述的那个特定的东西。例如，如果要求的屏幕分辨率为 800×600，您的设计能否灵活适应其他分辨率？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编程总是需要我们应对不同的环境，以及未来的趋势。我们需要以动态的视角思考事物，而不是开辟一条道路。也许有一天，你今天写的程序会被移植到另一个环境中，然后你才能真正理解什么是柔性设计。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10. 不要捡起石头砸断自己的脚&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员总是有一个试图快速完成工作的坏习惯。但情况往往与你想要的相反。越想做快越容易出错，越想做快越容易漏题，最终程序改过来改过去，把葫芦按在瓢虫上，最终花费更多的时间和精力。对速度的渴望没有实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个好的程序员的习惯是在前面花更多的时间做更多的研究，尝试不同的解决方案，如果时间允许，一个好的习惯是每 4 个小时的编程，你需要一个小时的休息，然后再有 4 个小时的休息、编码。当然，这因人而异，但它的目的是让你时不时回首，让你思考三个这样的问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、这样做对吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、 考虑到所有情况，这样做是否正确？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、有更好的方法吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想一想，时不时回头看看自己走了多远，时不时总结一下过去的事情，会对你有很大帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是优秀程序员的十个习惯或行为规范，希望对你有所帮助。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>84b8d8473024a762d69016e1574239f0</guid>
<title>从零开始实现一个深度学习框架 | 当神经网络遇上遗传算法</title>
<link>https://toutiao.io/k/rfh42b2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;首先，我们需要先实现一下Chrome浏览器里的小恐龙小游戏，方便起见，我们的游戏代码主要从公众号之前的文章里取得：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NDI1MjkwNA==&amp;amp;mid=2247487091&amp;amp;idx=1&amp;amp;sn=7fcb2cc9b0603a5fa658dd57276ade8b&amp;amp;chksm=fc4c97f4cb3b1ee2d51a0aa9eb1438b8d9d1019c84db617b19d5bbfe036e0ae3393bd67d7418&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;带大家重新写个小恐龙小游戏呗~&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;带大家重新写个小恐龙小游戏呗~&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;源代码在这可以拿到：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://github.com/CharlesPikachu/Games&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;之前我们讲的是用一些优化算法来更新神经网络的参数，我们今天则反其道而行之，直接利用遗传算法来更新神经网络的参数。遗传算法是一种元启发式算法，其核心思想与达尔文的进化理论很相似。简单而言就是物种在进化过程中，好的基因将得到保留，不好的基因将被淘汰。经过很多代的演变之后，物种当前保留下来的基因就可以看作是对当前环境适应度最好的基因了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;具体而言，我们先初始化若干个小恐龙：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx in range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.population_size):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.dinos[idx] = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;: Dinosaur(images[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;dino&#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;network&#x27;&lt;/span&gt;: nn.Sequential([nn.Linear(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;, bias=&lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;), nn.Tanh(), nn.Linear(&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, bias=&lt;span class=&quot;code-snippet__keyword&quot;&gt;False&lt;/span&gt;), nn.Tanh()]),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fitness&#x27;&lt;/span&gt;: &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;其中sprite为pygame的游戏精灵类，用于在屏幕上显示小恐龙当前的状态，其代码定义如下：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;小恐龙&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Dinosaur&lt;/span&gt;(&lt;span class=&quot;code-snippet__title&quot;&gt;pygame&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;sprite&lt;/span&gt;.&lt;span class=&quot;code-snippet__title&quot;&gt;Sprite&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, images, position=(&lt;span class=&quot;code-snippet__number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;147&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;, size=[(&lt;span class=&quot;code-snippet__number&quot;&gt;44&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;47&lt;/span&gt;), (&lt;span class=&quot;code-snippet__number&quot;&gt;59&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;47&lt;/span&gt;)], **kwargs):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        pygame.sprite.Sprite.__init_&lt;span class=&quot;code-snippet__number&quot;&gt;_&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.images = []&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = images[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.images.append(pygame.transform.scale(image.subsurface((i*&lt;span class=&quot;code-snippet__number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;code-snippet__number&quot;&gt;88&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;95&lt;/span&gt;)), size[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        image = images[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.images.append(pygame.transform.scale(image.subsurface((i*&lt;span class=&quot;code-snippet__number&quot;&gt;118&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;code-snippet__number&quot;&gt;118&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;95&lt;/span&gt;)), size[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.images[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.bottom = position&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.mask = pygame.mask.from_surface(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.init_position = position&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_rate = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.speed = &lt;span class=&quot;code-snippet__number&quot;&gt;11.5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.gravity = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_jumping = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_ducking = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_dead = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.movement = [&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.score = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;跳跃&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;jump&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, sounds)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_dead &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_jumping:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sounds[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;jump&#x27;&lt;/span&gt;].play()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_jumping = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.movement[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] = -&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.speed&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;低头&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_jumping &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_dead:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_ducking = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;不低头&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;unduck&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_ducking = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;死掉了&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, sounds)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_dead:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sounds[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;die&#x27;&lt;/span&gt;].play()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_dead = True&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;将恐龙画到屏幕&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;, screen)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        screen.blit(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;载入当前状态的图片&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;loadImage&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.images[&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image.get_rect()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rect.left, rect.top = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.left, &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.top&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = rect&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.mask = pygame.mask.from_surface(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;更新小恐龙&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_dead:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.loadImage()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_jumping:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.movement[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] += &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.gravity&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.loadImage()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.move(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.movement)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.bottom &amp;gt;= &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.init_position[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.rect.bottom = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.init_position[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.is_jumping = False&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        elif &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;code-snippet__symbol&quot;&gt;is_ducking:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter % &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_rate == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx == &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.loadImage()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter % &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_rate == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx == &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                elif &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx == &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__symbol&quot;&gt;else:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.image_idx = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.loadImage()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.refresh_counter += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;network则用于预测小恐龙下一步的行动，定义如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;toydl&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.nn&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Sequential&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-attr&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Linear&lt;/span&gt;(5, 16, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;bias&lt;/span&gt;=&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;False&lt;/span&gt;), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Tanh&lt;/span&gt;(), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Linear&lt;/span&gt;(16, 2, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;bias&lt;/span&gt;=&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;False&lt;/span&gt;), &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Tanh&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;网络的设计依赖于本系列教程教大家从零开始搭建的深度学习库，安装方式如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;pip&lt;/span&gt; install pytoydl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;网络的输入值有5个，分别为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;当前离小恐龙最近的障碍物与小恐龙的水平距离；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;当前离小恐龙最近的障碍物离地面的高度；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;当前离小恐龙最近的障碍物的宽度；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;当前离小恐龙最近的障碍物的高度；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;小恐龙水平方向上的奔跑速度。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;fitness则代表每个小恐龙的最高得分。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;接着，我们让这些神经网络来控制对应的小恐龙进行游戏：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&#x27;决定小鸟的行动&#x27;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;decide&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(self, x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = np.array(x).reshape(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; self.dinos.items():&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        action = value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;network&#x27;&lt;/span&gt;](x)[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;].is_dead: &lt;span class=&quot;code-snippet__keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; action[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0.55&lt;/span&gt;: value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;].jump(self.sounds)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;elif&lt;/span&gt; action[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;] &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0.55&lt;/span&gt;: value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;].duck()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;: value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;].unduck()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fitness&#x27;&lt;/span&gt;] = value[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;sprite&#x27;&lt;/span&gt;].score&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;直到所有的神经网络都让自己控制的小恐龙因为撞到路上的障碍物而死掉。接下来，我们从这些神经网络中选出几个让小恐龙存活的时间最久的(比如选两个，也就是对应控制的小恐龙得分最高的两个)，让选出的神经网络的权重矩阵进行交叉和变异，从而生成新的一批神经网络：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;生成下一代&#x27;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;nextgeneration&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dinos = list(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.dinos.values())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dinos.sort(key=lambda &lt;span class=&quot;code-snippet__symbol&quot;&gt;x:&lt;/span&gt; x[&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fitness&#x27;&lt;/span&gt;], reverse=True)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dinos = dinos[&lt;span class=&quot;code-snippet__symbol&quot;&gt;:int&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.population_size * &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    generated_dinos = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.crossover(dinos)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; dino &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;code-snippet__symbol&quot;&gt;generated_dinos:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dinos.append(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.mutate(dino))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dinos[-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fitness&#x27;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    size = &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.population_size - len(dinos)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; size &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(size):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dinos.append(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.mutate(random.choice(dinos)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            dinos[-&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;fitness&#x27;&lt;/span&gt;] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; idx &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.population_size):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;self&lt;/span&gt;.dinos[idx] = dinos[idx]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;同样地，这批神经网络每个都会分别控制一只新的小恐龙来进行游戏，直到这批新的神经网络控制下的小恐龙再次全部死掉。此时，重复之前的动作，即选择其中表现最好的几个神经网络并进行交叉变异，然后再次开始新的游戏，如此反复循环，直到得到满意的效果。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;大功告成啦，完整源代码详见：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;https://github.com/CharlesPikachu/pytoydl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;本文和之前的文章较为类似：&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2NDI1MjkwNA==&amp;amp;mid=2247487141&amp;amp;idx=1&amp;amp;sn=2d7f3ced62fbdacb5695ad432318c7a0&amp;amp;chksm=fc4c9722cb3b1e34edd989e178d4c510eeb73fdce8e405f98f7e4560abaaadb36f7efa320ef7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你们的驯龙小能手回来啦！！！再带大家用遗传算法训一波龙呀~&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;你们的驯龙小能手回来啦！！！再带大家用遗传算法训一波龙呀~&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;但是代码方面做了大量精简，相信更有利于大家学习使用。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;最后，本系列文章更新效率与文章点赞和阅读量成正比。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;20&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zZTbkic2pYRpS5877MIeZxpDjqm3cicQKqayQG8ia2KQyUml2uLL8WFzkaud0LwgXdPPVfibYuVAKUm8DvXWlqmLrQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>