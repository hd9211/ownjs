<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>92a9f70e38a519b71e3fd940eb6a3170</guid>
<title>微服务架构 10 个最重要的设计模式</title>
<link>https://toutiao.io/k/krsjiu0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;自从软件开发的早期(1960年代)以来，解决大型软件系统中的复杂性一直是一项艰巨的任务。多年来，软件工程师和架构师为解决软件系统的复杂性进行了许多尝试：David Parnas的模块化和信息隐藏(1972)，Edsger W. Dijkstra的关注分离(1974)，面向服务的体系结构(1998)。&lt;/p&gt;&lt;p&gt;&lt;img border=&quot;0&quot; data-ratio=&quot;0.663594470046083&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJBy5vUxDpTNbiaEUHk59HEe0XHUO0jl4PelXsoAjX0bltNpdp2N9ThEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;651&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;他们所有人都使用了久经考验的成熟技术来解决大型系统的复杂性：分而治之。自2010年代以来，这些技术不足以解决Web规模应用程序或现代大型企业应用程序的复杂性。结果，架构师和工程师开发了一种新方法来解决现代软件系统的复杂性：微服务架构。它也使用了相同的旧&quot;分而治之&quot;技术，尽管采用了新颖的方式。&lt;/p&gt;&lt;p&gt;软件设计模式是解决软件设计中常见问题的通用，可重用的解决方案。设计模式可帮助我们共享通用词汇，并使用经过实战检验的解决方案，而不是重新发明轮子。今天描述的是一组设计模式，以帮助您实现这些最佳实践。&lt;/p&gt;&lt;p&gt;本文&lt;strong&gt;主要内容：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;微服务架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;微服务架构的优势&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;微服务架构的缺点&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;何时使用微服务架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;微服务架构设计模式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;请注意，此清单的大多数设计模式都有几种上下文，可以在非微服务体系结构中使用。但是我将在微服务架构的背景下对其进行描述。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;微服务架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;微服务体系结构：&lt;/strong&gt;简要概述以及为什么要在下一个项目中使用它以及模块化单片软件体系结构真的死了吗?&lt;/p&gt;&lt;p&gt;我的&lt;strong&gt;微服务架构定义&lt;/strong&gt;是：&lt;/p&gt;&lt;p&gt;微服务架构旨在将大型，复杂的系统垂直(按功能或业务要求)划分为较小的子系统，这些子系统属于流程(因此可独立部署)，并且这些子系统之间通过与语言无关的轻量级网络通信相互通信(例如REST，gRPC)或异步(通过消息传递)方式。&lt;/p&gt;&lt;p&gt;这是具有微服务架构的业务Web应用程序的组件视图：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6383333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJCdibw578Lh5QZclGw8iaZuplLicnjUJPW8zjlRTLdXx45ld2nhJFNNlRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Microservice Architecture by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;微服务架构的&lt;strong&gt;重要特征&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;整个应用程序分为多个单独的进程，每个进程可以包含多个内部模块。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;与模块化Monoliths或SOA相反，微服务应用程序是垂直拆分的(根据业务能力或领域)微服务边界是外部的。结果，微服务通过网络调用(RPC或消息)相互通信。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;由于微服务是独立的流程，因此它们可以独立部署。他们以轻巧的方式交流，不需要任何智能交流渠道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;微服务架构的&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;更好的开发规模。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;更高的发展速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;支持迭代或增量现代化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;充分利用现代软件开发生态系统(云，容器，DevOps，无服务器)的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;支持水平缩放和粒度缩放。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;由于尺寸较小，它降低了开发人员的认知复杂度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;微服务架构的&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;大量的活动部件(服务，数据库，流程，容器，框架)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;复杂性从代码转移到基础架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;RPC调用和网络流量的激增。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;管理整个系统的安全性具有挑战性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;设计整个系统比较困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;介绍分布式系统的复杂性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;何时使用&lt;/strong&gt;微服务架构：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;Web规模应用程序开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;当多个团队处理应用程序时，进行企业应用程序开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;长期收益优先于短期收益。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;该团队拥有能够设计微服务架构的软件架构师或高级工程师。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;微服务架构的设计模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;每个微服务独占数据库&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一旦公司用许多较小的微服务替换了大型的单片系统，它面临的最重要的决定就是关于数据库。在整体架构中，使用大型中央数据库。许多架构师都喜欢保留数据库原样，即使他们转向微服务架构也是如此。尽管它提供了一些短期好处，但它是一种反模式，尤其是在大规模系统中，因为微服务将紧密耦合在数据库层中。转向微服务的整个目标将失败(例如，团队授权，独立开发)。&lt;/p&gt;&lt;p&gt;更好的方法是为每个微服务都提供自己的数据存储，以使数据库层中的服务之间不存在强耦合。在这里，我使用数据库一词来表示数据的逻辑分离，即微服务可以共享同一物理数据库，但是它们应该使用单独的架构/集合/表。它还将确保根据域驱动设计正确隔离微服务。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.62&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJUehtJMibXpDvScaR8vheWsZP6z6O9jfOFGfjEcmCtPHDea00iaSMIZibA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Database per Microservice by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;数据对服务的完全所有权。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;开发服务的团队之间的松耦合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在服务之间共享数据变得充满挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;提供应用程序范围的ACID事务保证变得更加困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;将Monolith数据库分解为较小的零件需要仔细设计，这是一项艰巨的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个微服务&lt;strong&gt;何时使用数据库：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在大型企业中的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;当团队需要其微服务的完全所有权以进行开发扩展和提高开发速度时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么时候不使用&lt;/strong&gt;每个微服务的数据库：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在小型应用中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果一个团队开发所有微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有SQL和NoSQL数据库都提供逻辑上的数据分离(例如，分离的表，集合，模式，数据库)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;事件源 Event Sourcing&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在微服务架构中，尤其是在每个微服务使用数据库的情况下，微服务需要交换数据。对于有弹性，高度可扩展和容错的系统，它们应通过交换事件进行异步通信。&lt;/p&gt;&lt;p&gt;在这种情况下，可能需要进行原子操作，例如，更新数据库并发送消息。如果您有SQL数据库，并且希望为大量数据分配分布式事务，则不能使用两阶段锁定(2PL)，因为它无法扩展。&lt;/p&gt;&lt;p&gt;如果使用NoSQL数据库并希望具有分布式事务，则不能使用2PL，因为许多NoSQL数据库不支持两阶段锁定。&lt;/p&gt;&lt;p&gt;在这种情况下，请结合使用基于事件的体系结构和事件源。在传统数据库中，具有当前&quot;状态&quot;的业务实体被直接存储。在事件源中，将存储任何状态更改事件或其他重要事件，而不是实体。&lt;/p&gt;&lt;p&gt;这意味着业务实体的修改将保存为一系列不可变的事件。通过在给定时间重新处理该业务实体的所有事件，可以扣除该业务实体的状态。因为数据存储为一系列事件，而不是通过直接更新数据存储来存储，所以各种服务可以从事件存储中重播事件以计算其各自数据存储的适当状态。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.25666666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJw9wtq6GFMy46ONjQpZ0cctjyQPsG0N180Ehd0XVvxnpGhFctgA9lvg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Event Sourcing by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;为高度可扩展的系统提供原子性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;实体的自动历史记录，包括时间旅行功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;松散耦合和事件驱动的微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;从事件存储中读取实体变得具有挑战性，通常需要额外的数据存储(CQRS模式)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;系统的整体复杂性增加，通常需要域驱动设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;系统需要处理重复事件(幂等)或丢失事件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;迁移事件模式变得具有挑战性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;事件来源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;具有SQL数据库的高度可扩展的事务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;带有NoSQL数据库的事务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;高度可扩展且具有弹性的微服务架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;典型的消息驱动或事件驱动系统(电子商务，预订和预订系统)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;事件来源：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;具有SQL数据库的低伸缩性事务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在简单的微服务架构中，微服务可以同步交换数据(例如，通过API)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;事件存储：&lt;/strong&gt;EventStoreDB，Apache Kafka，Confluent Cloud，AWS Kinesis，Azure事件中心，GCP发布/订阅，Azure Cosmos DB，MongoDB，Cassandra。Amazon DynamoDB，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;框架：&lt;/strong&gt;Lagom，Akka，Spring，akkatecture，Axon，Eventuate&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;命令查询职责隔离(CQRS)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果我们使用事件源，那么从事件存储中读取数据将变得充满挑战。要从数据存储中获取实体，我们需要处理所有实体事件。另外，有时我们对读写操作有不同的一致性和吞吐量要求。&lt;/p&gt;&lt;p&gt;在这种用例中，我们可以使用CQRS模式。在CQRS模式中，系统的数据修改部分(命令)与数据读取(查询)部分分开。CQRS模式有两种形式：简单和高级，这导致软件工程师之间产生一些混淆。&lt;/p&gt;&lt;p&gt;以简单的形式，不同的实体或ORM模型用于读取和写入，如下所示：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.498533724340176&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJ8bnJcFucxtpJiakbwFwIhmtbyXWBiaWwqRv1KOw7eKal3GZ78IbWbaTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;341&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; CQRS (simple) by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;它有助于实施&quot;单一责任原则&quot;和&quot;关注点分离&quot;，从而使设计更简洁。&lt;/p&gt;&lt;p&gt;在其高级形式中，不同的数据存储区用于读取和写入操作。高级CQRS与事件来源一起使用。根据使用情况，使用不同类型的写入数据存储和读取数据存储。写入数据存储区是&quot;记录系统&quot;，即整个系统的黄金来源。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.160919540229885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJicfYMaWvyt7kcdLQjEw58gotOwHQdZ2CoWwtmdc3Zl2iaXeR0PyRa04w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;435&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; CQRS (advanced) by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于重读应用程序或微服务体系结构，将OLTP数据库(任何提供ACID事务保证的SQL或NoSQL数据库)或分布式消息平台用作写存储。对于繁重的写程序(高写可伸缩性和吞吐量)，使用了水平可写伸缩的数据库(公共云全局数据库)。规范化的数据保存在写入数据存储中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为搜索(例如Apache Solr，Elasticsearch)或读取(键值数据存储，文档数据存储)而优化的NoSQL数据库用作读取存储。在许多情况下，在需要SQL查询的地方使用可伸缩的SQL数据库。归一化和优化的数据将保存在读取存储中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据从写入存储异步复制到读取存储。结果，读存储区滞后于写存储区，并且最终保持一致。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在事件驱动的微服务中更快地读取数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;数据的高可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;读写系统可以独立扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;读取数据存储弱一致性(最终一致性)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;系统的整体复杂性增加。货运培训CQRS可能会严重危害整个项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;CQRS：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在使用事件源的高度可扩展的微服务体系结构中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在读取数据需要查询到多个数据存储区的复杂域模型中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在读写操作具有不同负载的系统中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;CQRS：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在微事件数量微不足道的微服务体系结构中，使用事件存储快照来计算实体状态是更好的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在读写操作具有相似负载的系统中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;strong&gt; 写存储：&lt;/strong&gt;EventStoreDB，Apache Kafka，Confluent Cloud，AWS Kinesis，Azure Event Hub，GCP发布/订阅，Azure Cosmos DB，MongoDB，Cassandra。亚马逊DynamoDB&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;阅读商店：&lt;/strong&gt;Elastic Search，Solr，Cloud Spanner，Amazon Aurora，Azure Cosmos DB，Neo4j&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;框架：&lt;/strong&gt;Lagom，Akka，Spring，akkatecture，Axon，Eventuate&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;SAGA&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果您将微服务体系结构与每个微服务的数据库一起使用，那么通过分布式事务管理一致性就具有挑战性。您不能使用传统的两阶段提交协议，因为它无法扩展(SQL数据库)或不被支持(许多NoSQL数据库)。&lt;/p&gt;&lt;p&gt;您可以将Saga模式用于Microservice Architecture中的分布式事务。Saga是一种旧模式，于1987年开发，作为SQL数据库中长期运行的数据库事务的概念替代方案。但是，这种模式的现代变体对于分布式事务也非常有效。Saga模式是一个本地事务序列，其中每个事务在单个微服务中更新数据存储中的数据并发布事件或消息。传奇中的第一个事务由外部请求(事件或操作)启动。一旦本地事务完成(数据存储在数据存储中，并且发布消息或事件)，发布的消息/事件将触发Saga中的下一个本地事务。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.44&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJq9dBmhuz2F4LicaLeIF425icCemeRvWibAgmefwrsTpXmWQNNN3BSWVHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Saga by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果本地事务失败，则Saga执行一系列补偿事务，以撤消先前本地事务的更改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Saga交易协调主要有&lt;strong&gt;两种变体：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;分散的协调&lt;/strong&gt;，每个微服务生成并收听其他微服务的事件/消息，并决定是否应该采取措施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;统筹协调&lt;/strong&gt;，协调器告诉协调的微服务哪些本地事务需要执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;通过高度可扩展的或松散耦合的，事件驱动的微服务架构中的事务来提供一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;通过使用没有2PC支持的NoSQL数据库的微服务体系结构中的事务来提供一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;需要处理短暂故障，并应提供幂等性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;难以调试，并且随着微服务数量的增加，复杂性也随之增加。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在使用事件源的高度可扩展的，松散耦合的微服务架构中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在使用分布式NoSQL数据库的系统中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么时候不使用&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;具有SQL数据库的低伸缩性事务系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在服务之间存在循环依赖性的系统中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Axon，Eventuate，Narayana&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;前端的后端(BFF)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在现代业务应用程序开发中，尤其是在微服务体系结构中，前端和后端应用程序是分离的和独立的服务。它们通过API或GraphQL连接。如果应用程序还具有Mobile App客户端，则对Web和Mobile客户端使用相同的后端微服务将成为问题。移动客户端的API要求通常与Web客户端不同，因为它们具有不同的屏幕大小，显示，性能，能源和网络带宽。&lt;/p&gt;&lt;p&gt;后端的后端模式可用于每个UI都有为特定UI定制的单独后端的场景。它还提供了其他优势，例如充当下游微服务的外观，从而减少了UI与下游微服务之间的闲聊通信。同样，在高度安全的情况下，下游微服务部署在DMZ网络中，BFF用于提供更高的安全性。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.065&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJCz1jTaJ5Lej2RDoZzf8hML8FlmKGhUQOAQ6J6oa6oSXGV4Rb5safLw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Backends for Frontends by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;BFF之间的关注点分离。我们可以针对特定的UI优化它们。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;提供更高的安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;减少UI与下游微服务之间的交流。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;BFF之间的代码重复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果使用其他许多UI(例如，智能电视，Web，移动设备，台式机)，BFF的数量也会激增。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;BFF不应包含任何业务逻辑，而应仅包含特定于客户的逻辑和行为，因此需要仔细设计和实施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时将后端用于前端：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果应用程序具有多个具有不同API要求的UI。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果出于安全原因在UI和下游微服务之间需要额外的一层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果在UI开发中使用微前端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;后端作为前端：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果应用程序具有多个UI，但是它们使用相同的API。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果未在DMZ中部署核心微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong/&gt;任何后端框架(Node.js，Spring，Django，Laravel，Flask，Play等)都支持它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;API网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在微服务架构中，UI通常与多个微服务连接。如果微服务是细粒度的(FaaS)，则客户端可能需要连接许多微服务，这变得很繁琐且具有挑战性。而且，服务(包括其API)可以发展。大型企业还希望拥有其他跨领域的问题(SSL终止，身份验证，授权，限制，日志记录等)。&lt;/p&gt;&lt;p&gt;解决这些问题的一种可能方法是使用API网关。API网关位于客户端APP和后端微服务之间，并充当外观。它可以用作反向代理，将客户端请求路由到适当的后端微服务。它还可以支持将客户端请求的扇出扩展到多个微服务，然后将汇总的响应返回给客户端。它还支持基本的跨领域关注。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.99&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJVAv3nn7Flzianzia0X2yOYMOll5yUibyjQ8usDK3tQQzsL0moiaQbFicTUQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; API Gateway by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;提供前端和后端微服务之间的松散耦合。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;减少客户端和微服务之间的往返呼叫次数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;通过SSL终止，身份验证和授权实现高安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;集中管理的跨领域问题，例如日志记录和监视，节流，负载平衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;可能导致微服务架构中的单点故障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;由于额外的网络呼叫，延迟增加了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果不进行扩展，它们很容易成为整个企业的瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;额外的维护和开发成本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用API网关：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在复杂的微服务架构中，这几乎是强制性的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在大型公司中，必须使用API网关来集中安全性和跨领域问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用API网关：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在安全性和中央管理不是最高优先级的私人项目或小型公司中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果微服务的数量很小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;启用&lt;strong&gt;技术示例：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Amazon API Gateway，Azure API管理，Apigee，Kong，WSO2 API管理器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;扼杀者&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果要在棕地项目中使用微服务架构，则需要将旧版或现有的Monolithic应用程序迁移到微服务。将现有的大型生产单片式应用程序迁移到微服务中具有很大的挑战性，因为这可能会破坏应用程序的可用性。&lt;/p&gt;&lt;p&gt;一种解决方案是使用Strangler模式。Strangler模式意味着通过逐步用新的微服务替换特定功能，将Monolithic应用程序逐步迁移到微服务架构。此外，新功能仅在微服务中添加，绕过了传统的Monolithic应用程序。然后将Facade(API网关)配置为在旧版Monolith和微服务之间路由请求。一旦功能从Monolith迁移到微服务，Facade就会拦截客户端请求并路由到新的微服务。一旦所有旧版Monolithic功能都已迁移，旧版Monolithic应用程序将被&quot;勒死&quot;，即退役。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6366666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJwQXezMYGNicxoQ8vfRamHqibUy9SkKvBxCr6M5qLeOkJCdoxDCkaQN3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Strangler by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;将Monolithic应用程序安全迁移到微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;迁移和新功能开发可以并行进行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;迁移过程可以有自己的进度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在现有的Monolith和新的微服务之间共享数据存储变得充满挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;添加外观(API网关)将增加系统延迟。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;端到端测试变得困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;Strangler：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;将大型后端单片应用程序增量迁移到微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;Strangler：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果后端整体组件较小，则批量替换是一个更好的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果客户端对旧版Monolithic应用程序的请求无法被拦截。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推动技术：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;带有API网关的后端应用程序框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;断路器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在微服务体系结构中，微服务进行同步通信，微服务通常调用其他服务来满足业务需求。由于瞬态故障(网络连接速度慢，超时或时间不可用)，对另一个服务的调用可能会失败。在这种情况下，重试呼叫可以解决此问题。但是，如果存在严重问题(微服务完全失败)，则微服务将长时间不可用。在这种情况下，重试是没有意义的，并且浪费了宝贵的资源(线程被阻塞，浪费了CPU周期)。同样，一项服务的故障可能会导致整个应用程序级联故障。在这种情况下，立即失败是一种更好的方法。&lt;/p&gt;&lt;p&gt;对于此类用例，可以使用断路器模式。微服务应通过代理来请求另一个微服务，该代理的工作方式类似于断路器。代理应该计算最近发生的故障数，并使用它来决定是允许操作继续进行还是直接返回异常。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.565&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/XCETLoXzTr9w4qNRPLGNX0N8q32dgibwJ6CU7NLe1ZI6ibiaTDVAo2IaX8oDcWMLUXW7jz8QxfuIUFRMv4ibeyeY6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;gt; Circuit Breaker by Md Kamaruzzaman&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;断路器&lt;/strong&gt;可以具有以下&lt;strong&gt;三种状态：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;strong&gt;已关闭：&lt;/strong&gt;断路器将请求发送到微服务，并计算给定时间段内的故障数。如果在一定时间内的故障数量超过阈值，则它将跳闸并进入&quot;打开状态&quot;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;打开：&lt;/strong&gt;来自微服务的请求立即失败，并返回异常。超时后，断路器进入半开状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;&lt;strong&gt;半开放式：&lt;/strong&gt;仅允许来自微服务的有限数量的请求通过并调用该操作。如果这些请求成功，则断路器将进入闭合状态。如果任何请求失败，则断路器进入&quot;打开&quot;状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;提高微服务架构的容错性和弹性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;停止将故障级联到其他微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;需要复杂的异常处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;记录和监视。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;应该支持手动重置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;断路器：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;在紧密耦合的微服务体系结构中，微服务进行同步通信。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;一个微服务是否依赖于多个其他微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;断路器：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;松散耦合的，事件驱动的微服务架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;微服务是否不依赖于其他微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推动技术：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;API网关，服务网格，各种断路器库(Hystrix，Reselience4J，Polly。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;外部化配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个业务应用程序都有许多用于各种基础结构的配置参数(例如，数据库，网络，连接的服务地址，凭据，证书路径)。同样，在企业环境中，应用程序通常部署在各种运行时中(本地，开发，生产)。实现此目标的一种方法是通过内部配置，这是一种致命的不良做法。由于很容易破坏生产凭据，因此可能导致严重的安全风险。另外，配置参数的任何更改都需要重建应用程序。在微服务架构中，这一点尤为重要，因为我们可能拥有数百种服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更好的方法是外部化所有配置。结果，将构建过程与运行时环境分开。此外，由于生产配置文件仅在运行时或通过环境变量使用，因此将安全风险降到最低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;生产配置不是代码库的一部分，因此可以最大程度地减少安全漏洞。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;无需重新构建即可更改配置参数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要选择一个支持外部化配置的框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;外部化配置：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任何重要的生产应用程序都必须使用外部配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;外部化配置：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在概念发展的证明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推动技术：&lt;/strong&gt;几乎所有企业级的现代框架都支持外部化配置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;消费者驱动的合同测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在微服务架构中，通常由独立的团队开发许多微服务。这些微服务一起工作来满足业务需求(例如，客户请求)，并且彼此同步或异步地通信。消费者微服务的集成测试具有挑战性。通常，在这种情况下使用TestDouble可以进行更快，更便宜的测试。但是TestDouble通常并不代表真正的提供程序微服务。另外，如果提供者微服务更改了其API或消息，则TestDouble无法确认这一点。另一个选择是进行端到端测试。虽然在生产之前必须进行端到端测试，但它脆弱，缓慢，昂贵，并且不能替代集成测试(测试金字塔)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;消费者驱动的合同测试可以在这方面为我们提供帮助。此处，消费者微服务所有者团队编写了一个测试套件，其中包含针对特定提供者微服务的请求和预期响应(用于同步通信)或预期消息(用于异步通信)。这些测试套件称为显式合同。对于提供商微服务，其使用者的所有合同测试套件都添加到了自动测试中。在执行针对特定提供程序微服务的自动测试时，它将运行自己的测试，合同并验证合同。通过这种方式，合同测试可以帮助以自动化的方式维护微服务通信的完整性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果提供者意外更改了API或消息，则会在很短的时间内自动找到它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;更少的惊喜和更高的健壮性，尤其是包含大量微服务的企业应用程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;改善团队自主权。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;由于合同测试可能使用完全不同的测试工具，因此需要进行额外的工作才能&lt;strong&gt;· &lt;/strong&gt;在合同商微服务中开发和集成合同测试。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;如果合同测试与实际服务消耗不匹配，则可能导致生产失败。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时使用&lt;/strong&gt;消费者驱动的合同测试：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在大型企业业务应用程序中，通常，不同的团队开发不同的服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;何时不使用&lt;/strong&gt;消费者主导的合同测试：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;一个团队开发所有微服务的相对简单，较小的应用程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;· &lt;/strong&gt;提供者微服务是否相对稳定且未处于积极开发中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推动技术：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;契约，邮递员，Spring Cloud合同&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在现代的大型企业软件开发中，微服务体系结构可以帮助扩展规模并带来许多长期利益。但是微服务架构并不是可以在每个用例中使用的&quot;银弹&quot;。&lt;/p&gt;&lt;p&gt;如果在错误的应用程序类型中使用它，则微服务架构会带来更多的麻烦。&lt;/p&gt;&lt;p&gt;想要采用微服务体系结构的开发团队应遵循一组最佳实践，并使用一组可重复使用的，经过严格实践的设计模式。&lt;/p&gt;&lt;p&gt;微服务架构中最重要的设计模式是每个微服务的数据库。实施此设计模式具有挑战性，并且需要其他几个紧密相关的设计模式(事件源，CQRS和Saga)。&lt;/p&gt;&lt;p&gt;在具有多个客户端(Web，移动，台式机，智能设备)的典型业务应用程序中，客户端与微服务之间的通信可能会比较混乱，可能需要具有附加安全性的中央控制。在这种情况下，前端的设计模式和API网关非常有用。&lt;/p&gt;&lt;p&gt;同样，断路器模式可以极大地帮助处理此类应用程序中的错误情况。将旧的Monolithic应用程序迁移到微服务中具有很大的挑战性，而Strangler模式可以帮助迁移。&lt;/p&gt;&lt;p&gt;消费者驱动的合同测试是微服务集成测试的工具模式。同时，外部化配置是任何现代应用程序开发中的强制性模式。&lt;/p&gt;&lt;p&gt;该列表并不全面，并且取决于您的用例，您可能需要其他设计模式。但是此列表将为您提供有关微服务体系结构设计模式的出色介绍。&lt;/p&gt;&lt;section&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247497661&amp;amp;idx=2&amp;amp;sn=498d58941fe929e119c5da5e2f2be244&amp;amp;chksm=9fac6876a8dbe160df0969d290f9d91b36f76576a08a985d8397149f1d0513e55ebff818e3c2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;GO语言版《算法进阶指南》火了，完整版PDF下载！&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247496096&amp;amp;idx=5&amp;amp;sn=7f9e3943e58eb80882d10de6deb7b8f0&amp;amp;chksm=9fac6e6ba8dbe77deb78425738150660bda9e3d60dea3758a946a81792db28e96a7a753ddf00&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;使用 Redis 实现一个轻量级的搜索引擎，牛逼啊！&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247484297&amp;amp;idx=5&amp;amp;sn=c98ff15a98ab191b042c4d1184e03019&amp;amp;chksm=9faf9c42a8d8155474c17050c8f90385b7983f3f8ac73fc42ca1190ad37d89d703276bd15452&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【重磅分享】从零到一搭建推荐系统指南白皮书.pdf（附48页下载链接）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247485571&amp;amp;idx=1&amp;amp;sn=0f55a55ed8fb0d3219b7f2d56eeaf953&amp;amp;chksm=9faf9748a8d81e5e4a987a80e56cd417ae68b597264d38fa031eed0e89e7c5992f9425cbe398&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;亿级(无限级)并发，没那么难&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247484337&amp;amp;idx=1&amp;amp;sn=b82bc301d542459d7f36c56172d02e93&amp;amp;chksm=9faf9c7aa8d8156c38234d11232a16242ec6235ba4f0e8f52b33b3b4d76ecd6ff1838c18f626&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;世界的真实格局分析，地球人类社会底层运行原理&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247484891&amp;amp;idx=1&amp;amp;sn=11430a774940305e7703f33a1f4ff0bd&amp;amp;chksm=9faf9a10a8d8130623b5906b1f124ede6859ac5dc60ccd12fe3d2357cb76f740c34c39f43cb8&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;不是你需要中台，而是一名合格的架构师（附各大厂中台建设PPT）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3OTc0MzY1Mg==&amp;amp;mid=2247497455&amp;amp;idx=1&amp;amp;sn=65518c3b097f81ca6e9cc761746578e4&amp;amp;chksm=9fac6924a8dbe032f09c8b031a89a8c660f828bf496ea3fef0e0bf50befe6e6ce4c69193a44f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;字节跳动MySQL学习笔记火了，完整版开放下载！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5626740947075209&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/DMP9YVibia1dRcoIRZhIEXjOiadY6nez36IR7kcRPHYnzIMUjuhwA4q1nX78edeXc3JsWM0Dqdl3csJvp7BiaLSbXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8ae33a81b3c29227049c7f596697384b</guid>
<title>仅使用 CSS 就可以提高页面渲染速度的 4 个技巧</title>
<link>https://toutiao.io/k/exbures</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.56171875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQQ6WOhUYC69Rq5QiaJ0E38eILP78DerEicIITMgfZ2Vbv63URXSj8mibvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;文末福利资源更新&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文将重点介绍4个可以用来提高页面渲染速度的CSS技巧。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. Content-visibility&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;一般来说，大多数Web应用都有复杂的UI元素，它的扩展范围超出了用户在浏览器视图中看到的内容。在这种情况下，我们可以使用内容可见性（ &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ）来跳过屏幕外内容的渲染。如果你有大量的离屏内容，这将大大减少页面渲染时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个功能是最新增加的功能之一，也是对提高渲染性能影响最大的功能之一。虽然 &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 接受几个值，但我们可以在元素上使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility: auto;&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来获得直接的性能提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;让我们考虑一下下面的页面，其中包含许多不同信息的卡片。虽然大约有12张卡适合屏幕，但列表中大约有375张卡。正如你所看到的，浏览器用了1037ms来渲染这个页面&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7960992907801419&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQRAfiaYaJ75w2Z0qmfzOW2j2vdcjq1Opicydv6Nzic1ZiaQxKCdxllZmvgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;下一步，您可以向所有卡添加 &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;在这个例子中，在页面中加入 &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 后，渲染时间下降到150ms，这是6倍以上的性能提升。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6994171523730225&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQjvg2zrltBl2ibxVtZh0ViaZEwePRydTPPribgzLNVECcbgJkX0dfj2mWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1201&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;正如你所看到的，内容可见性是相当强大的，对提高页面渲染时间非常有用。根据我们目前所讨论的东西，你一定是把它当成了页面渲染的银弹。&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;content-visibility 的限制&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;然而，有几个领域的内容可视性不佳。我想强调两点，供大家参考。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;此功能仍处于试验阶段。&lt;/strong&gt; 截至目前，Firefox（PC和Android版本）、IE（我认为他们没有计划在IE中添加这个功能）和，Safari（Mac和iOS）不支持内容可见性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;与滚动条行为有关的问题。&lt;/strong&gt; 由于元素的初始渲染高度为0px，每当你向下滚动时，这些元素就会进入屏幕。实际内容会被渲染，元素的高度也会相应更新。这将使滚动条的行为以一种非预期的方式进行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0576671035386631&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQB41wEARDmtncPzYgYLb2xVvxHYIakwwCtibAfenLwGnic9gh4Oxqd7Mw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;763&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;为了解决滚动条的问题，你可以使用另一个叫做 &lt;/span&gt;&lt;code&gt;&lt;span&gt;contain-intrinsic-size&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的 CSS 属性。它指定了一个元素的自然大小，因此，元素将以给定的高度而不是0px呈现。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.element&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;content-visibility&lt;/span&gt;: auto;&lt;br/&gt;  &lt;span&gt;contain-intrinsic-size&lt;/span&gt;: &lt;span&gt;200px&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;然而，在实验时，我注意到，即使使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;conta-intrinsic-size&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，如果我们有大量的元素， &lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 设置为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;auto&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ，你仍然会有较小的滚动条问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因此，我的建议是规划你的布局，将其分解成几个部分，然后在这些部分上使用内容可见性，以获得更好的滚动条行为。&lt;/span&gt;&lt;/section&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1608744797010&quot; data-category_id_list=&quot;48|26|1|55|5|24|37|11|50|54|53|42|29|43|16|51|36&quot; data-id=&quot;1608744797010&quot;/&gt;&lt;span/&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. Will-change 属性&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;浏览器上的动画并不是一件新鲜事。通常情况下，这些动画是和其他元素一起定期渲染的。不过，现在浏览器可以使用GPU来优化其中的一些动画操作。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;通过will-change CSS属性，我们可以表明元素将修改特定的属性，让浏览器事先进行必要的优化。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;下面发生的事情是，浏览器将为该元素创建一个单独的层。之后，它将该元素的渲染与其他优化一起委托给GPU。这将使动画更加流畅，因为GPU加速接管了动画的渲染。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;考虑以下CSS类：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// &lt;span&gt;In&lt;/span&gt; &lt;span&gt;stylesheet&lt;/span&gt;&lt;br/&gt;&lt;span&gt;.animating-element&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;will-change&lt;/span&gt;: opacity;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// &lt;span&gt;In&lt;/span&gt; &lt;span&gt;HTML&lt;/span&gt;&lt;br/&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&quot;&lt;span&gt;animating-elememt&lt;/span&gt;&quot;&amp;gt;&lt;br/&gt;  &lt;span&gt;Animating&lt;/span&gt; &lt;span&gt;Child&lt;/span&gt; &lt;span&gt;elements&lt;/span&gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;当在浏览器中渲染上述片段时，它将识别 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 属性并优化未来与不透明度相关的变化。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;根据Maximillian Laumeister所做的性能基准，可以看到他通过这个单行的改变获得了超过120FPS的渲染速度，而最初的渲染速度大概在50FPS。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.218562874251497&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQjRyOF30gVzv6v2mST2treFibQGKXhcyt3YRINs0S0qA27VF2ZnTvdfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.218562874251497&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQa5JfsMUQe55F8liaJiauwlwgkGThtwoVMbMaV0b1ZvEhpIjJicWjLA02A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;figcaption&gt;5&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;什么时候不是用will-change&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;虽然 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的目的是为了提高性能，但如果你滥用它，它也会降低Web应用的性能。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;使用 &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;will-change&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 表示该元素在未来会发生变化。&lt;/strong&gt; 因此，如果你试图将 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和动画同时使用，它将不会给你带来优化。因此，建议在父元素上使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ，在子元素上使用动画。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;.my-class&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;will-change&lt;/span&gt;: opacity;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;.child-class&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;transition&lt;/span&gt;: opacity &lt;span&gt;1s&lt;/span&gt; ease-in-out;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;不要使用非动画元素。&lt;/strong&gt; 当你在一个元素上使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 时，浏览器会尝试通过将元素移动到一个新的图层并将转换工作交给GPU来优化它。如果您没有任何要转换的内容，则会导致资源浪费。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;最后需要注意的是，建议在完成所有动画后，将元素的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;will-change&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 删除。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.减少渲染阻止时间&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;今天，许多Web应用必须满足多种形式的需求，包括PC、平板电脑和手机等。为了完成这种响应式的特性，我们必须根据媒体尺寸编写新的样式。当涉及页面渲染时，它无法启动渲染阶段，直到 CSS对象模型（CSSOM）已准备就绪。根据你的Web应用，你可能会有一个大的样式表来满足所有设备的形式因素。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;但是，假设我们根据表单因素将其拆分为多个样式表。在这种情况下，我们可以只让主CSS文件阻塞关键路径，并以高优先级下载它，而让其他样式表以低优先级方式下载。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;styles.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1711111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQ1k7XKxfZL17Js7bDV1VxqOVaHWZbhYnCxC87lbIU9UJ3RrtozxTB2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;figcaption&gt;单一样式表&lt;/figcaption&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;将其分解为多个样式表后：&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- style.css contains only the minimal styles needed for the page rendering --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;all&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!-- Following stylesheets have only the styles necessary for the form factor --&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;sm.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;(min-width: 20em)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;md.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;(min-width: 64em)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;lg.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;(min-width: 90em)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;ex.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;(min-width: 120em)&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;link&lt;/span&gt; &lt;span&gt;rel&lt;/span&gt;=&lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;=&lt;span&gt;&quot;print.css&quot;&lt;/span&gt; &lt;span&gt;media&lt;/span&gt;=&lt;span&gt;&quot;print&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35650224215246634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQeYWnZSGrEYju5Oup031LPwK91UHIPObiaaeD2d54KyeFNlfEc5jZiaaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;如您所见，根据样式因素分解样式表可以减少渲染阻止时间。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.避免@import包含多个样式表&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@import&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，我们可以在另一个样式表中包含一个样式表。当我们在处理一个大型项目时，使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@import&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以使代码更加简洁。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;关于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@import&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的关键事实是，它是一个阻塞调用，因为它必须通过网络请求来获取文件，解析文件，并将其包含在样式表中。如果我们在样式表中嵌套了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@import&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，就会妨碍渲染性能。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;# &lt;span&gt;style&lt;/span&gt;&lt;span&gt;.css&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@import&lt;/span&gt; url(&lt;span&gt;&quot;windows.css&quot;&lt;/span&gt;);&lt;br/&gt;# &lt;span&gt;windows&lt;/span&gt;&lt;span&gt;.css&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@import&lt;/span&gt; url(&lt;span&gt;&quot;componenets.css&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.16439688715953307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQTy5BDco1GJ7bibpibKVfNwJOCicldltT3YY9sJy1eRZVxFf2G7ULBC8Dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;与使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;@import&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 相比，我们可以通过多个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;link&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来实现同样的功能，但性能要好得多，因为它允许我们并行加载样式表。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.1557454890788224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AN8O5NKs9rpBGmV00WesPWQPiayPJGHYO0D3xp7SonK6aYn9AbUFWsDTLocAL2Us0yt5nx3AQzGVcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1053&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;除了我们在本文中讨论的4个方面，我们还有一些其他的方法可以使用CSS来提高网页的性能。CSS最近的一个特性：&lt;/span&gt;&lt;code&gt;&lt;span&gt;content-visibility&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，在未来的几年里看起来是如此的有前途，因为它给页面渲染带来了数倍的性能提升。&lt;/span&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;最重要的是，我们不需要写一条JavaScript语句就能获得所有的性能。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;我相信你可以结合以上的一些功能，为终端用户构建性能更好的Web应用。希望这篇文章对你有用，如果你知道什么CSS技巧可以提高Web应用的性能，请在下面的评论中提及。谢谢大家。&lt;/span&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;来源：https://blog.bitsrc.io/improve-page-rendering-speed-using-only-css-a61667a16b2&lt;br/&gt;&lt;/span&gt;&lt;span&gt;作者：Rumesh Eranga Hapuarachchi&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;粉丝福利&lt;/h4&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;148期留言+在看幸运用户：暂无&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;临走前留下，&lt;span&gt;今天的福利&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;福利1：&lt;/span&gt;&lt;span&gt;&lt;span&gt;《MongoDB 4.0从入门到达人》&lt;/span&gt;&lt;span&gt;获取资源请在公众号对话框中回复关键字：&lt;/span&gt;&lt;span&gt;043，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;如果没有关注请扫下面的二维码。更多福利资料请查看公众号菜单&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;福利2：&lt;/span&gt;&lt;span&gt;在看+留言&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;我随机抽取一位认真留言的小伙伴，给他发一个红包奖励&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;最近文章&lt;/h4&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;点赞 + 在看 + 留言，下一个幸运儿就是你！&lt;br/&gt;走心的分享更容易被抽中~&lt;/span&gt;&lt;br/&gt;&lt;span&gt;开奖时间 下期文末&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0APOE4dXIpvXLgmGfqHMfYFFGudrHkx4trR7YbXKKmNCd3fJRlY56qIUibCibq00k2kky5DdPxrJCyWA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; data-ratio=&quot;0.1732283464566929&quot; data-w=&quot;635&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/aVp1YC8UV0fXSy8oK0h6qL36nlWgib6lHDTj0Ykkiab2FufBJIumwMrDEBZ1wHteh6pzsQiaP4007ox4ichic8pNw3Q/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c52cff47ac68c50f4437e7c5eae26638</guid>
<title>改造遗留 App 以适应苹果 AppStore 新规</title>
<link>https://toutiao.io/k/ng1vygt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;改造遗留 App 以适应苹果 AppStore 新规&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;胡伟红 Posted at — Jan 5, 2021
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown&quot;&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;多年前开发的 App，由于各种原因没有翻新过，近期需要紧急上架苹果应用商店。可是应用通过 XCode 上传后，明明已经提示上传成功了，但在苹果应用管理界面看不到，苹果的拒绝邮件却出现在我的邮箱中。此后，断断续续，历时 2 个月终于搞定所有问题，上架成功。这里把遇到的问题及其解决方法总结下，方便后来者查阅。&lt;/p&gt;
&lt;h2 id=&quot;uiwebview-改为-wkwebview&quot;&gt;UIWebView 改为 WKWebView&lt;/h2&gt;
&lt;p&gt;苹果的拒绝邮件中已经写明，需要使用 WKWebView：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fallback&quot; data-lang=&quot;fallback&quot;&gt;ITMS-90809: Deprecated API Usage - New apps that use UIWebView are no longer accepted. Instead, use WKWebView for improved security and reliability.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;苹果在 iOS 8 之后，出于安全考虑，建议使用 &lt;a href=&quot;https://developer.apple.com/documentation/webkit/wkwebview&quot;&gt;WKWebView&lt;/a&gt; 替代&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiwebview&quot;&gt;UIWebView&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;调整-configxml-文件&quot;&gt;调整 Config.xml 文件&lt;/h3&gt;
&lt;p&gt;先修改 config.xml 文件，配置 WKWebView 的相关内容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;preference&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;WKWebViewOnly&quot;&lt;/span&gt; &lt;span&gt;value=&lt;/span&gt;&lt;span&gt;&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;feature&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;CDVWKWebViewEngine&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;param&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;ios-package&quot;&lt;/span&gt; &lt;span&gt;value=&lt;/span&gt;&lt;span&gt;&quot;CDVWKWebViewEngine&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;preference&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;CordovaWebViewEngine&quot;&lt;/span&gt; &lt;span&gt;value=&lt;/span&gt;&lt;span&gt;&quot;CDVWKWebViewEngine&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;preference&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;WKPort&quot;&lt;/span&gt; &lt;span&gt;value=&lt;/span&gt;&lt;span&gt;&quot;8080&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;preference&lt;/span&gt; &lt;span&gt;name=&lt;/span&gt;&lt;span&gt;&quot;UseScheme&quot;&lt;/span&gt; &lt;span&gt;value=&lt;/span&gt;&lt;span&gt;&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;改用-jwt-方式请求后台数据&quot;&gt;改用 JWT 方式请求后台数据&lt;/h3&gt;
&lt;p&gt;由于 WKWebView 不支持 Cookie，如果原来采用的是 Cookie 与后台进行验证，那么就要改成 JWT 方式了。&lt;/p&gt;
&lt;p&gt;这个需要登录后，后台返回一个 token，App 在请求的 Header 中使用 Authorization 将 token 发给后台进行验证。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;.&lt;span&gt;factory&lt;/span&gt;(&lt;span&gt;&quot;httpInterceptor&quot;&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt; (
  &lt;span&gt;//...
&lt;/span&gt;&lt;span/&gt;) {
  &lt;span&gt;return&lt;/span&gt; {
    &lt;span&gt;request&lt;/span&gt;: &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;config&lt;/span&gt;) {
      &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;angular&lt;/span&gt;.&lt;span&gt;isUndefined&lt;/span&gt;(&lt;span&gt;config&lt;/span&gt;.&lt;span&gt;params&lt;/span&gt;)) {
        &lt;span&gt;//...
&lt;/span&gt;&lt;span/&gt;        &lt;span&gt;config&lt;/span&gt;.&lt;span&gt;headers&lt;/span&gt;[&lt;span&gt;&quot;Authorization&quot;&lt;/span&gt;] = &lt;span&gt;&#x27;your token&#x27;&lt;/span&gt;
      }
      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;config&lt;/span&gt;;
    },
  }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;本地文件访问&quot;&gt;本地文件访问&lt;/h3&gt;
&lt;p&gt;WKWebView 下，在调试界面时，你会发现访问界面的链接已经不再是 file://方式，而是变成了 HTTP 方式。这样，界面上图片如果是本地图片，且使用 file://，就会出现图片找不到的问题。这里需要将图片的路径转换成 Http 方式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;window&lt;/span&gt;.&lt;span&gt;resolveLocalFileSystemURL&lt;/span&gt;(&lt;span&gt;imageURI&lt;/span&gt;, &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;fileEntry&lt;/span&gt;) {
  &lt;span&gt;fileEntry&lt;/span&gt;.&lt;span&gt;file&lt;/span&gt;(&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;fileObj&lt;/span&gt;) {
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;reader&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;FileReader&lt;/span&gt;();
    &lt;span&gt;reader&lt;/span&gt;.&lt;span&gt;onloadend&lt;/span&gt; = &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;evt&lt;/span&gt;) {
      &lt;span&gt;var&lt;/span&gt; &lt;span&gt;image&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Image&lt;/span&gt;();
      &lt;span&gt;image&lt;/span&gt;.&lt;span&gt;src&lt;/span&gt; = &lt;span&gt;evt&lt;/span&gt;.&lt;span&gt;target&lt;/span&gt;.&lt;span&gt;result&lt;/span&gt;;
      &lt;span&gt;image&lt;/span&gt;.&lt;span&gt;onload&lt;/span&gt; = &lt;span&gt;function&lt;/span&gt; (&lt;span&gt;evt&lt;/span&gt;) {
        &lt;span&gt;var&lt;/span&gt; &lt;span&gt;item&lt;/span&gt; = {
          &lt;span&gt;//...
&lt;/span&gt;&lt;span/&gt;          &lt;span&gt;//下面这里，将fileEntry.nativeURL转换一下
&lt;/span&gt;&lt;span/&gt;          &lt;span&gt;imageUrl&lt;/span&gt;: &lt;span&gt;window&lt;/span&gt;.&lt;span&gt;Ionic&lt;/span&gt;.&lt;span&gt;WebView&lt;/span&gt;.&lt;span&gt;convertFileSrc&lt;/span&gt;(&lt;span&gt;fileEntry&lt;/span&gt;.&lt;span&gt;nativeURL&lt;/span&gt;),
        };
        &lt;span&gt;data&lt;/span&gt;.&lt;span&gt;push&lt;/span&gt;(&lt;span&gt;item&lt;/span&gt;);
        &lt;span&gt;//...
&lt;/span&gt;&lt;span/&gt;        &lt;span&gt;image&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;;
      };
    };
    &lt;span&gt;reader&lt;/span&gt;.&lt;span&gt;readAsDataURL&lt;/span&gt;(&lt;span&gt;fileObj&lt;/span&gt;);
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;相关插件的升级或替换&quot;&gt;相关插件的升级或替换&lt;/h3&gt;
&lt;p&gt;上述问题修改完毕后，第二次上传苹果商店，再次被拒绝，原因同上。&lt;/p&gt;
&lt;p&gt;由于不知道苹果是如何监测 App 是否使用 UIWebView，所以我干脆采用一个笨方法，用 XCode 打开 App 文件，搜索’UIWebView‘，发现有些老旧插件也用到了 UIWebView。根据实际情况可升级或替换插件。&lt;/p&gt;
&lt;h3 id=&quot;app-上架时注意事项&quot;&gt;App 上架时注意事项&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Info.plist 文件中添加如下内容，可以避免填写”出口规则“：App Uses Non-Exempt Encryption = NO&lt;/li&gt;
&lt;li&gt;Images.xcassets 中 AppIcon 中的图片，如果出现警告，需要从文件夹中选中对应大小的 icon 添加上去&lt;/li&gt;
&lt;li&gt;提交审批时，如果拒绝的原因是要求提供视频，就录制一个视频发布到网上，提供视频链接即可&lt;/li&gt;
&lt;li&gt;如果 App 中使用的相机和相册，需要在 Info.list 文件中通过 NSPhotoLibrayUsageDescription、NSCameraUsageDescription 写明使用目的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;苹果商店上架的条款时常会更新，上架时如果收到拒绝邮件，别慌，拒绝原因会清楚的写在邮件中，按照要求改进 App 即可。&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>21a91fd7814c6155216c87c0e3b0d238</guid>
<title>如何快速构建内部钓鱼平台</title>
<link>https://toutiao.io/k/bwj9ghz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;钓鱼邮件是一种比较常见的网络攻击手法，很多企业都深受其扰，稍有不慎将会导致数据被窃取。各种安全意识培训，其实都不如真刀真枪的演练一次来得深刻。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天，来分享一下如何快速构建内部钓鱼平台，实现一站式钓鱼邮件攻防演练环境的准备。&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;1、Gophish搭建&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gophish是一款专为企业和渗透测试人员设计的开源网络钓鱼工具包，整体安全运行其实非常简单，通过它可以快速地设置和执行网络钓鱼攻击，提高企业内部员工的安全意识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Github 地址：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;https://github.com/gophish/gophish/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;(1) 下载解压缩&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;wget https://github.com/gophish/gophish/releases/download/v0.11.0/gophish-v0.11.0-linux-64bit.zip&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;unzip gophish-v0.11.0-linux-64bit.zip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;（2）修改配置文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;admin_server是后台管理页面，将127.0.0.1 改为 0.0.0.0，默认开放的端口3333。phish_server是钓鱼网站，默认开放80端口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7777777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkQaPUxNGricQEgSCqAZCliaU498Q1ZSiaajnV1EkQtYe0GcyDfibUogwx0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）启动gophish&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;chmod 777 gophish&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;./gophish&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;成功启动后，在命令行输出的初始账户密码可以用来登录控制台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.16233766233766234&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkhX2BWUia7QDZjtuicFq3uo8MRPjbkXbJWGuQbvtiajkrgcmic7N6WjM2oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）访问管理后台&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首次登录强制修改密码，要求八位以上字符。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;https://x.x.x.x:3333/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkoV7ticGXHnnIKhIGZT7IDz4RwWR3cmEIFJ56bpZKqmvSQZn9ic8mYaSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、SMTP服务器搭建&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）安装postfix&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum install postfix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;（2）修改配置文件&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;vi /etc/postfix/main.cf&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 75行:设置myhostname &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    myhostname = mail.test.com &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 83行: 设置域名 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    mydomain = test.com &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 99行: 设置myorigin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    myorigin = $mydomain &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 116行: 默认是localhost，修改成all&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    inet_interfaces = all &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 119行: 推荐ipv4，如果支持ipv6，则可以为all &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    inet_protocols = ipv4 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 165行: 设置mydestination&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 264行: 指定内网和本地的IP地址范围 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    mynetworks = 192.168.0.0/16，127.0.0.0/8&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 419行: 取消注释，邮件保存目录&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    home_mailbox = Maildir/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    # 572行: 取消注释，设置banner。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    smtpd_banner = $myhostname ESMTP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;（3）启动postfix服务&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;systemctl start postfix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;（4）发送测试邮件&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#安装mailx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum install mailx&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;echo &quot;email content&quot; | mail -s &quot;title&quot; 6767*****@qq.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、Gophish 设置&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（1）配置smtp邮箱信息&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里，因为smtp服务器与Gophish在同一服务器上，填写smtp服务器地址为：127.0.0.1:25，点击Send Test Email，添加测试邮箱发送测试邮件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.459375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkHd5ibIzb0jc5aRVHWOnH2f0zy6qhZGCicZeBaan6qm93vD9jAZgwXu9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试邮箱成功收到测试邮件，确认SMTP服务器连接成功。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6200345423143351&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkFEPVyzQHT2rjYUIESadN0oWkm7GsCDVh85KpIcBibuxqVQpvIibT9eTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;579&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）编辑邮件模板&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.57421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIk6DLOSYUSNSbRU4RmZccWsic96ulPyAwMHnrKBlUXKr87VPWU2ccMuJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）导入目标用户和组&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkhxSUKaicZQia5I0gvfuIxsQ6lqsoMX9G7uwWxicZ3Uq05xibDHzGYbhjrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（4）设置钓鱼网页&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里提供一个简单的demo测试，可根据目标网站或系统模仿登录页面，比如邮箱/门户等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkGO4L9Nu9aUcPoDnkJbjjw3kAXtz5KPvImc91eg4cX07lAWbh0iaFeicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（5）发起钓鱼活动&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;填写对应信息，发起钓鱼活动&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkMXZ5PjNru3QOtkDLJywtHia4UxtXaaEzI8OISfHr0NFq9JhpQ6pOpOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（6）效果展示&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设，目标邮箱收到邮件，点击链接，输入账户密码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5279187817258884&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkglc7qvaOxGDnKVjVc1jCribw0UOevDxIqriayzPtBauz9pkdnCbjWj2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，在gophish控制台可以很清晰地看到用户邮件阅读的轨迹，从邮件发送，打开邮件，点击链接，填写信息等行为都会被记录下来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.38046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIkChuiciazBa5CqibzVqkdczEG6RT2icPsXU6D6BuJmqKIodRk19HXKEfmaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7217391304347827&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia0LvkyJzB4nWFqwJSKV54x60T5HE5oIk7G0gVfkWIia4myghtOmuzdBtOpF9LUxVK1YiahvvaibZQHZfUibzYFwvYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;805&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e38d702bd9e162e7265f653dc1ae976e</guid>
<title>面试官：说说操作系统微内核和 Dubbo 微内核？</title>
<link>https://toutiao.io/k/1r8c1f1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是 yes。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前的文章已经提到了 RPC 的核心，想必一个 RPC 通信大致的流程和基本原理已经清晰了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章借着 Dubbo 来说说微内核这种设计思想，不会扯到 Dubbo 某个具体细节实现上，和 Dubbo 强相关的内容会在之后的文章写到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以今天的重点在&lt;span&gt;微内核&lt;/span&gt;，而这个概念我最早是从操作系统那里得知，不过操作系统的微内核和 Dubbo 相关的微内核又不太一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Dubbo 的微内核广义上的微内核，而操作系统只是针对内核实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么说你肯定不清楚，别急，听我慢慢道来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先看看操作系统的微内核。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6927710843373494&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQqqIAVIef2gzWW76x3SKB75fJgwwBWk4W6PgEekyicWmXiaFicaCkkTiatA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;332&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;操作系统中的微内核&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在维基百科上搜索微内核出现的就是：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在计算机科学中，微内核（英语：Microkernel，μ-kernel），是一种内核的设计架构，由尽可能精简的程序所组成，以实现一个操作系统所需要的最基本功能，包括了底层的寻址空间管理、线程管理、与进程间通信。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个词条归类在操作系统技术下，所以这里的微内核指的就是操作系统的内核设计，与之对应的是宏内核架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux 就是宏内核架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;操作系统我们都知道它是一个中间层，为我们管理底层的硬件资源，为上层服务提供接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供进程管理、内存管理、文件系统、进程通信等功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 Linux 这样的宏内核设计是把这些功能都作为内核来实现，而&lt;span&gt;微内核则仅保留最基础的功能。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如就留下进程的管理、内存管理等，把文件管理等功能剥离出去，变成用户空间的独立进程来提供服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来看下这个维基百科上的这个图应该就很清晰了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5338709677419354&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQ4N8iaAKYhLoJYu2EQ5qrzngRwnFLkud2cxNZKFVaOv2AVD2aPicrDb5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;宏内核中的一些功能在微内核架构上都被独立到用户态中，这样内核代码量就少了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码少了潜在的 bug 就少，出了问题也更容易排查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统也就更加稳定，不易奔溃&lt;/span&gt;，因为那些服务从内核中移除，在用户空间运行着，如果出了故障，内核重启这个服务就好了，不会像之前那样整个内核 GG。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;拿显卡驱动来说，出问题就蓝屏，这要是微内核设计就可以重启显卡驱动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;听起来好像微内核很好啊？并不是，接下来就说说微内核的缺点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是&lt;span&gt;性能问题&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为很多功能作为独立进程放到用户空间运行了，所以宏内核时的函数调用就变成了进程间调用，涉及进程间的通信，还会伴随着内核态和用户态的来回切换，我们知道这种上下文切换时比较耗时的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这性能的问题就有点大了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后微内核设计没那么简单，想要灵巧、减少耦合、提高可移植性就需要好好的设计，按照林纳斯的话来说：“如果 GNU 内核(微内核架构)早在去年春天完成了，我压根不会开始我的项目(Lniux)。”&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;GNU Hurd 采用微内核架构，设计过于精巧，研发速度缓慢，性能长期无法提升。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当年林纳斯还和 Minix 的作者安德鲁，对操作系统的宏内核和微内核的好坏进行了一波网络口水战。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来回顾一下那段历史，挺有意思的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 AT&amp;amp;T 把 Unix 商业化了，大学不能免费使用 Unix，身为大学教授的安德鲁为了教学自己搞了个操作系统，即 Minix。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQ9bY2NWPwHvJJDEJkTDyoszf29PrO0WNGdLO8dastsPHUQ81ApwUSNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;figcaption&gt;安德鲁&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时的学术风潮是微内核架构，把核心功能模块化，划分为几个独立的进程，运行在不同的地址空间提高了代码的可移植和系统的安全性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以 Minix 就是按微内核架构编写的，当然还有上述提到的 GNU Hurd。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而林纳斯那时候读大学，他祖父送了他一台 Intel 80386，林纳斯也看到了安德鲁的教科书，根据书上的内容写出了 Linux。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.39&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQIznr3iaic2rBNSf1p6VibBY1rOAAZj5zX3a9Z38E4cGfs6BzeAAUfMB3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot;/&gt;&lt;figcaption&gt;林纳斯&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过没有按照微内核的设计，而是跟 Unix 一样采用了宏内核架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安德鲁教授看到了 Linux ，然后在 comp.os.Minix 上批评道：宏内核的设计是有害的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux 内核耦合度太高，完全是为了 Intel 80386 而设计的，处理器架构进化很快的，操作系统应该都具备可移植性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安德鲁还提到：都1991年了还用宏内核来设计操作系统，这是一种巨大的退步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;林纳斯在一天之后进行了反击，他说 Minix 设计上有缺陷，从哲学和美学角度来看微内核确实好，但是你看 GUN Hurd 到现在还没开发出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后操作系统本来就依靠硬件的特性，所以内核本身不需要过度具备可移植性，应用程序的可移植性才重要，Linux 比 Minix 好移植多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且 Linux 本来就是为我自己做的，所以契合 80386，如果要移植到别的平台，代码都是开源的(Minix 源码当时得买)，想要的人自己做咯。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安德鲁也做了一波回应：Minix 有局限性是因为我是教授，因为大部分学生都只能在低配的机器上使用，所以系统的硬件需求得足够低，虽然你 Linux 是免费的，但是需要的硬件贵呀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实可以看到，两者并没有对宏内核和微内核的技术细节的进行深入探讨，而是抓住对方的：你这 Minix 代码还要收费，你这 Linux 需要的硬件这么贵来进行“攻击”，所以称之为口水战。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反正口水战之后双方都没有改变各自的设计，不过林纳斯有引进微内核的思想来改进代码，也改善了可移植性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微内核市面上设计成功的有 QNX，黑莓手机就是用这个操作系统，车用市场也几乎都用 QNX 系统。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQQlibYNev7QBeU4meYJ46oD4ZMicStnfmXVz4go5zXRibU3fyXGQr7fvgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;figcaption&gt;黑莓手机&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这手机很多年前我用过，当时觉得有点东西的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;宏内核的话就提个 Linux ，足够了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个架构都有成功的产品，所以还是取舍的问题，也没有谁完全压着谁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再具体的就不深入了，今天的主角其实是广义上的微内核。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Dubbo 中的微内核&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo 的微内核是广义上的，它的思想是：核心系统+插件。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6142857142857143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQukpO664RPOecia2Ec1FpzHibdJDPqMDdwCg4zIZN9eLHwYiaveVUR4ZLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;560&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个微内核说白了就是把不变的功能抽象出来称为核心，把变动的功能作为插件来扩展，符合开闭原则，更容易扩展、维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小霸王游戏机大家都应该玩过，就长这样的，它的设计就可以认为是个微内核设计。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.3333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQ9u6OaOl2KibOnW9OQ7zVJ9Flibic6J4AjicoPrnyYFmib4ALMblZMfAnmaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;机体本身作为核心系统，游戏片就是插件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们想玩哪个游戏就插哪个游戏片，简单便捷，不影响机体本身。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设不把游戏片抽象成插件式，那是不是就难搞了？换个游戏就成为难题了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以&lt;span&gt;微内核架构的本质就是将变化的部分抽象成插件，使得可以快速简便地满足各种需求又不影响整体的稳定性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是微内核架构的精髓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里再扣个细节，较个真（就是我个人的一点想法）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mark Richards 在 《Software Architecture Patterns》的微内核章节里面提到&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;The core system of the microkernel architecture pattern traditionally contains only the minimal functionality required to make the system operational.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从字面意义来看，Mark 认为核心系统指的是可以&lt;span&gt;独立运行且提供基本功能的最小模块&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 vscode、idea、chrome 等设计就符合 Mark 认为的核心设计，核心系统提供基础必备的功能，可以独立运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 vscode 核心就是编辑器，没有插件也可以独立运行，然后又有丰富的插件，来满足一些特殊需求，扩展核心系统的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里可能会让人产生误导，&lt;span&gt;认为核心必须是能让系统运行的最小功能模块。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我认为核心不一定需要独立运行且提供基础功能，&lt;span&gt;能让系统运行的最小组织模块也是核心。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个说法的差别在于：只有核心的话系统能否正常的运行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;vscode 没有插件照样能运行，能提供基本功能，而小霸王游戏机没有游戏片那运行个寂寞，玩个球。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是小霸王这种难道就不算微内核了嘛？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就我个人而言，把变与不变区分出来，把变化封装成插件就称为微内核设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 Dubbo 能支持很多协议、各种负载均衡的扩展、集群的扩展等等，它自身的一些功能也是通过扩展点实现的，没有插件也跑不了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的内核就像胶水，把各个插件结合起来最终提供服务，没有插件这个系统就没什么意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我认为&lt;span&gt;核心系统不一定需要能独立运行，能让系统运行的最小组织模块也是核心。&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我觉得 Mark 说的不太准确，容易产生误导。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然这是文字上面的抠细节，核心概念都是一致的：&lt;span&gt;抽象出核心，剥离变化为插件。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;微内核设计的好处&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的微内核指的是广义的微内核。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一个框架或者软件，&lt;span&gt;扩展性&lt;/span&gt;非常的重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为一个框架、一个软件的使用者千千万，不同的人有不同的需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;身为框架的维护者、软件的开发者你有精力和能力满足所有用户的需求？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;做梦，不存在的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些 idea 你想都想不到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我之前看到的 vscode 里面有个「坤坤鼓励师」插件，默认你代码写一小时之后蔡徐坤来给你跳鸡你太美，让你休息休息......&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2450229709035222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQusVax6SgIqbibsOcPZns4Z2n7zlMib9yC2fGuCM1P2nU98F4qFZcIU7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;653&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来感受一下？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5286443562110039&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQwhURXgiceFGwwVXz5nhuVdQQHFJEmUyTn7sBzxwkIXfeV49qFeK7jcA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1763&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以做一个框架或者软件，想要让更多人使用，不仅自身提供的功能要全、性能要好、使用要简单，&lt;span&gt;让用户 DIY，做各种定制化也非常的关键！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Dubbo 的成功其实就离不开它的&lt;span&gt;微内核设计&lt;/span&gt;，定制化开发在很多场景都要用到，毕竟都得稍加改造一番来满足自己公司的一些特殊需求。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然也不是什么都要微内核&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微内核看起来是很方便，但是设计起来就不方便了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要精心的设计，抽象出各种扩展点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了本身的功能还需要管理插件的生命周期、插件如何连接、如何通信等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些还需要做沙箱隔离，防止插件污染整个系统等等，本来的内部函数调用变成了插件间的通信，反正设计起来是复杂了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般微内核适合用在框架的设计上，或者一些规则引擎的设计，只有复杂的会有很多变化的需求场景才需要用到微内核。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像一般简单的项目，本来就一条直道走到底的那种就算了，&lt;span&gt;不要瞎操作，等下秀折了腿。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微内核其实就是一种架构思想，可以是框架层面的，也可以细化到某个模块的设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;归根结底就是把变化封装成插件，可插拔，拥抱变化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然今天也提到了操作系统的微内核，这个和广义上的微内核还是不太一样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至于 Dubbo 的微内核就离不开它的 SPI，之后文章会深入写一波，等我哈。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;更多文章可看我的文章汇总：https://github.com/yessimida/yes 欢迎 star !&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有问题可以加我微信，空了都会回复，没问题也可以加哈哈哈，点赞之交~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9824922760041195&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQToVJOxEQBlrhZXZt1fibL4s74XMPFW2IGv2u4GzwuBn9fSnXmjfSM1w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;971&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我是 yes，从一点点到亿点点，欢迎在看、转发、留言，我们下篇见。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;巨人的肩膀&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;https://en.wikipedia.org/wiki/Microkernel&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;https://en.wikipedia.org/wiki/Tanenbaum%E2%80%93Torvalds_debate&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;《Software Architecture Patterns》&lt;/em&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0786516853932584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/eSdk75TK4nGNpwRV1k38bvia2vBGoyjwQloyXMcdMSCH0JWol95gTbickIia6OdQjtPriaFBWGnmssgPGOutEKxe8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1068&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>