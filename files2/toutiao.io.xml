<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0f806976509760f6913d641fe3f4a29c</guid>
<title>开工第一天，看看你可能错过的好分享！</title>
<link>https://toutiao.io/k/szdkhka</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>73d00c88e675cccffb1133f517274df6</guid>
<title>比起 “数据中台”，数据湖更应该被重视</title>
<link>https://toutiao.io/k/rq92ntz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;一件事物若能经得起时间的推敲，经得起历史的选择，回过头去看仍能矗立在长河之中，那我们通常会称它为“经典”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10年前，Pentaho公司（一家开源BI公司）的CTO詹姆斯·迪克森在他的博客中第一次提出“数据湖”（Data Lake）的概念；10年后的今天，在业界“数据中台”大火的时代背景下，再来讨论“数据湖”，应该别有一番韵味。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文将会以“数据湖”为中心，展开讨论数据仓库、数据湖和数据中台这几个概念之间的藕断丝连。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、从“数据仓库”到“数据湖”：历史的演变&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事物总是在不断演化的，唯一不变的就是变化，因此为了讨论这些概念，我们首先要了解其历史流变。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“数据仓库”，由比尔·恩门（Bill Inmon）于1990年提出，其被广泛接受的定义是，一个面向主题的、集成的、相对稳定的、反映历史变化的数据集合，用于支持管理决策，通常也被认为是决策支持型应用的必要条件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此处的定义大多都是针对事务型数据系统而制定的。所谓事务型数据系统，是指记录业务交易的系统，这个名词先是在金融业，特别是银行实施信息化IT系统时使用的。例如银行的交易流水数据库，每分每秒都有大量的交易被数据库所记录并持久化的保存下来，其最小的颗粒度就是一笔“交易”。后来信息化系统在各行各业开花结果，“业务”渐渐演变为现在的“事务”概念，例如员工刷卡进入办公室，后台就会记录员工的这一“事务行为”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事务性数据系统存在诸多劣势：试想，如果一个银行的分行长想知道今天到目前为止共有多少现钞存款入账，那么系统就需要遍历今天截止到目前的所有交易行为，并筛选其中的存款行为进行汇总。查询交易的行为需要遍历当前系统的所有记录，因此当这一行为频率变高时，会对数据系统造成巨大的读取压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，当分析业务时需要的信息变多，也就是查询行为的数据对象范围变广时，例如分行长想知道今天一共有多少人民币现汇（包括外币购汇）入账时，系统需要将每笔外汇交易换算成人民币，再进行全部交易的汇总。假设有一百种外币进行了一万次的交易，数据系统内的计算空间会呈“笛卡尔积”般的增长，造成资源上的重大消耗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section label=&quot;Copyright © 2015 Yead All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesianproduct），又称直积，表示为X × Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员。”&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除开查询或分析任务对事务型数据系统造成的资源压力外，系统执行任务时，返回的结果只代表着任务开始运行那一刻的数据状态，假设执行查询任务消耗了1分钟，这1分钟内很有可能发生多次的交易撤销、额度修改，增加交易等行为。有些数据系统允许在读取数据的同时写入数据，那么查询任务返回的结果并不能代表最新的状态；有些数据系统则有“读锁”，即在读取数据的时候不允许写入数据，那么这个长达1分钟的查询任务会使得业务交易失败或者暂缓进入数据系统，如果其中发生业务中断，这些交易数据可能面临丢失的风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，我们可以通过技术手段来避免或缓解事务型数据系统的不足，因此事务型的数据库并不是不能做业务分析，只是当决策者需要进行经营性的分析和决策时，大多数时候它并非最优方案。此时，数据仓库面向主题且便于分析的优势就体现出来了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、面向主题的&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相对于事务型系统将交易类型（存款）、交易币种（人民币或外币）、交易数值（存款额）以一条事务（Transcation）的方式存储，数据仓库通常会将一条事务中的不同信息拆分到不同的主题域中分别存储，例如交易类型表、交易币种表和交易额度表等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、集成的&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不同主题域中的信息之间以统一的ID，如交易流水号为标识进行链接。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样的好处是当分行长想知道今天到目前为止一共有多少人民币存款入账时，只需要先筛选出交易类型为存款，交易币种为人民币的交易流水号，再基于这些流水号去汇总交易额度，比起原先需要遍历全部交易记录后才能汇总的方式大大节约了系统资源的开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、相对稳定的&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常数据仓库和事务型数据系统会被物理隔离在不同的硬件资源上，前者注重数据的查询（读取），后者注重数据的录入（写入），避免了单一数据系统读写冲突的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、反映历史变化的&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正是由于通常数据仓库中的数据是基于预先设定好的时间窗口从事务型系统中获取数据，无论是一分钟、一小时还是一天、一周，它都是可以反映数据整体历史变化的，分行长可以清楚地知道今天银行的人民币存款入账环比昨天增长或减少了多少，同比上个月的今天又发生了什么变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，比起事务型的数据系统，数据仓库能更有效地对业务数据进行统计分析，无论是在提高效率、稳定性还是降低资源成本上都有其优势，所以被广为接受而大行其道。我们可以清楚地看到，数据仓库是数据处理中一种特定的实施方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来，数据仓库领域的大师Ralph Kimball又演化出“维度建模”的概念，认为数据仓库是一系列数据集市的集合。如果说数据仓库中包含着许多不同的主题域，那么数据集市可以理解为主要面向业务应用的单一主题域。比如，分行长可以建设面向存储部门的、专门提供存款数据的“存款数据集市”，面向商业贷款部门的“贷款数据集市”，面向信用卡部门的“信用卡数据集市”等，其数据都源自数据仓库，但数据集市的汇总程度更高、更注重业务表示。例如“环比存款增长率”这个指标在数据仓库中可能表示为“上月存款额”和“本月存款额”两个不同的数值，而在数据集市或者数据仓库的“集市层”中，就表示为计算后的一个数值，可以直接被业务所用而无需再做多余的计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而“数据湖”这个概念，由Pentaho公司的CTO詹姆斯·迪克森于2010年提出，这里渐渐开始有了商业的味道。他认为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section label=&quot;Copyright © 2015 Yead All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;“如果你认为一个数据集市可以看作是桶装水店——提供了清洗、包装和组织等服务以方便用户消费，那‘数据湖’就是一个拥有更自然状态的大的水体。来自源头的内容流补充到湖中，各类客户可以来湖中检测、探索以及获取样本。” &lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为当时业界正兴起“XaaS”的风潮，例如软件即服务（SaaS，Software as a Service），平台即服务（PaaS，Platform as a Service），基础设施即服务（Iaas，Infrastructure as a Service），甚至还有解决方案即服务（SolaaS，Solution as a Service）以及数据中心即服务（DCaaS，Data Center as a Service）。在这一背景下，已发展成熟的公有云能力为数据湖体系架构的发展奠定基础，催生“数据湖”的概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着在2011年，福布斯在文章《Big Data Requires a Big, New Architecture》中报道了“data lake”这个词，并给出了数据仓库与数据湖的对比：数据仓库的数据在被集成时就会被预先分类，并以最优的方式进行存储，以支撑特定的分析；但在大数据时代，我们从源系统抽取数据时可能无法明确知道这些数据的价值，因此无法给出一个最优的存储方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，分行长从交易系统中将所有的数据都抽取过来，但并不知道业务部门想做什么类型反映业务历史的变化。因此建议将这些数据先保存在一个海量的数据库中。由于数据来源的格式五花八门而且会越存越多，因此这个数据库需要具备容易访问且存储成本低（允许硬件资源扩容的成本而尽可能降低其他成本，例如软件使用费用、人工维护费用等）的特性，需要进行分析时，再来组织和筛选所需数据，这个数据库就是数据湖（Data Lake）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;彼时的数据湖概念更多地是关于当企业在处理海量异构的数据时，如何在数据产生实际的应用价值之前，为海量数据构建一个易访问且成本低的存储方式，和数据资产化、资产服务化等当下热点名词并没有太大关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但事物都是在不断演化的，2014年福布斯杂志上刊登了一篇名为《The Data Lake Dream》的文章，文章作者EddDumbill描述了数据湖的愿景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;融合所有数据，解决系统间数据孤岛、各类应用统一访问问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据可获取性提高，应用部署时间缩短；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;具有弹性的分布数据处理的平台，能同时支撑批量和实时数据操作处理和分析；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据湖增加安全和管控层面的功能；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重视集中、自动的元数据管理和入湖标准，避免成为没有价值的数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从这个时候开始，单纯的数据湖就朝向一个“平台级的方案”而演进。为什么说是方案呢，因为时至今日，数据湖仍是个架构概念，是一种架构设计的理念，而不是一种特定的实施方法，更不是一款特定的产品。其所要达成的目标囊括了不止一种数据技术，已经从当初的一种“大数据存算方案”进阶到了“大数据存算+处理分析+资产治理+安全隐私+数据变现”的一揽子方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10年前，迪克森曾认为“数据湖”是面向企业的最佳大数据解决方案。从技术上来看，其论点是有根据的，但是从商业价值上来看，这个愿景似乎并没有被实现。实际情况是过去数据仓库的落地实践要远比数据湖来的多和广。而就在现今所有人都在强调数据资产化、资产业务化，强调数据变现和数据商业价值的年代，数据中台的概念似乎又代替了数据湖的概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据中台，由于受到从业者的追捧并在这两年疯狂流行，隔着屏幕应该都可以嗅到浓重的商业气息，但目前对其仍然没有清晰明朗的定义。当大多数人努力想要为数据中台做名词解释时，我倒认为这个局面十分恰当且正常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，数据中台的概念如同数据湖一样，是一种架构概念；其次，它不仅是工程设计上的技术架构，还包括了组织架构的变革，因为中台通常会强调其作为一个企业组织运作的“独立性”、“中央性”和“统一性”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中台作为抽离原来各个数据部门共性业务、由技术和人员并提供统一数据、产品及服务的“共享业务事业部”，无论在业务功能上还是工程技术上都会有其独立运作，数据权威和统一分发的诉求，因此其组织承载的考核目标及衡量标准较原先的数据仓库、数据湖等技术概念而有所不同，特别是在“数据驱动业务”、“数字化转型”的时代大背景下，它们是和企业的总体业务目标紧密相关的，不再只是一个“旁路IT系统”，不再只是一个业务信息化的支撑系统，而是产生并驱动业务的关键环节。数据中台应当是企业组织和技术架构的有机结合体。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;二、技术商业化应用之动力：业务的诉求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;科学技术的发展有其自有的原发性，而商业世界里对一项技术的认可并将其广泛商业化应用的动力，仍来自于商业目的的要求。数据技术也是如此，业务诉求的发展推进了技术的革新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据平台，数据湖，数据仓库和数据中台这些概念有什么不同，到底是谁代替了谁？我相信非专业领域的从业人员每当看到这些词汇的时候或多或少有这样的困惑。我认为，这里并没有谁代替了谁，所谓孰优孰劣只是从不同的业务需求出发得出的不同结论而已。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当企业的信息化发展到一定程度，企业流程得以用数据的形式持久化的留存下来，决策者们的判断依据慢慢从经验主义过渡到数据主义，因此90年代初为了更好的支持经营的决策分析，数据仓库的技术就油然而生并被广泛应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当企业开始迈向全面数字化的阶段，需要处理的数据越来越多、形式越来越杂，原先使用的数据存算方式其成本越来越高，业务对数据处理的效率要求也越来越快。在这种背景下，企业亟需一种成本更低且效率较高的方式来存算数据、访问数据，因此大数据技术孕育而生。我们通常说的大数据平台就是利用大数据技术而搭建的平台型能力，为企业提供大数据技术服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而当企业迈入大数据时代后，纷纷利用大数据技术搭建各自的大数据平台。为了进一步降低数据存储和处理的成本，提升大数据平台的可用性、可靠性和可运营性，解决大数据时代数据分析链路越来越长、数据探索复杂度越来越高、数据资产管理越来越难以及数据变现的路径尚不清晰等问题，基于数据湖的架构概念，我们又开始在大数据平台上尝试搭建各自的数据湖架构。由此可见，数据湖也是由业务诉求催生出的平台架构概念和能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓分久必合，当企业的数字化、数据化成为一种常态时，有些企业发现内部存在纷繁复杂的数据源，存在多个所谓大数据平台甚至是数据湖，导致了很多不必要的重复性建设，包括服务、软件和硬件层面的冗余，或是由于部门壁垒而导致数据无法有效统一来支持前端业务，不统一的数据出处又带来数据不一致的问题，亦或是不同部门各起炉灶导致数据技术人员各自分散的问题。在这种背景下，由高层拍板构建企业级的数据中台，把原有资源剥离和再分配，将共性抽象集成并形成资产，统一面向全组织提供服务。这里的服务包括了数据资产、产品软件、算法算力甚至是技术人力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，我认为这三者没有谁对谁错或是谁替代了谁，只是企业不同的发展背景形成了不同的建设目标，各自有不一样的业务诉求罢了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;三、技术的革新&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务诉求会推动技术的发展，有时技术本身的革新也会带给业务发展更多的想象空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如同前文所述，随着时代的发展，技术也在不断演化，但其演化历程通常是具有连续性而非跳跃性的。当然，跳跃性的原始创新会被历史所铭记并开创一个新的时代，成为时代的主角，例如蒸汽机，发电机，计算机和互联网。但循序渐进的集成创新才是平凡日子里的重要配角，小步蓄力以期待下一次的飞跃。因此大多数时候新概念的产生通常会带有前任的影子而导致傻傻分不清楚，或被误认为是“老瓶装新酒”的现象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在当下时代对“企业是否一定要建设中台”的争论仍在持续着，我认为里面除技术之外，更多地牵涉到企业本身的发展阶段、组织架构和企业文化等问题。有些管理者能很好的从自身业务和技术角度去辨别组织真正需要的是什么，因此我们回头看数据湖的建设，这个议题仍是舞台上活跃的一份子。而技术的革新，已经使得数据湖的建设目标不止于10年前刚提出时的愿景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前在建设数据湖的时候，企业通常会展望以下几个技术目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;混合处理：支持所有类型数据入湖无需预先设计模型，同时支持事务型和分析型的数据处理，数据入湖就能即席分析、持续迭代；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;联邦分析：支持多类型数据格式融合分析，无需额外数据搬迁，可通过标准查询语句实现跨源数据探索计算分析；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;弹性伸缩：计算层和存储层可独立弹性扩展，具备大容量存储池和“理论上”无限弹性计算资源能力，快速应对数据和业务变化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分级存储：支持冷热数据分级存储，数据自动管理，合理利用存储，降低成本；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据探索：具备集成的算法开发能力，能快速地构建算法模型及数据探索任务，甚至与标准数据库查询语句融合，支持采用标准接口完成算法及AI业务的开发。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;四、展望：更大想象力空间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在万物互联的时代构想数据湖的未来，不乏有许多引人想象的可发展空间，举例来说：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;纳入“数据不动计算动”的联邦学习能力，解决数据迁移、数据安全和数据权责的问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;纳入“既能保证数据事务性又能保证数据分析性”的混合事物/分析处理架构（Hybrid Transaction and Analytical Process），解决从事务性数据库导入到数据仓库产生的时效性和一致性问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;纳入针对“大宽表”的即席多维度分析能力，解决传统上做多维度分析时需要将数据预先按主题拆分和转换处理过程而导致的分析长链路以及低时效问题等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然无论在功能目标还是项目建设方面，数据湖总体仍处于不断发展的阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们不知道数据湖的概念还能在商业科技的世界里存在多久，亦不知道若干年后我们回头看待它时，能否将之称为“经典”。但这并不妨碍在当下企业参照数据湖的架构概念和功能目标，去搭建大数据处理平台所带来的积极效果，即使在所谓的“数据中台时代”来反观数据湖的概念，每一个从业者仍有必要保持不断学习的谦逊态度，每一个参与方仍要以包容和发展的目光来审视过去、展望未来。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3dcd3cdd6899bd982145fad12c8eb29f</guid>
<title>[译] 《软件架构》缓存技术</title>
<link>https://toutiao.io/k/djqw1c8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content&quot;&gt;&amp;#13;
      &lt;blockquote&gt;&lt;p&gt;本文源自并发编程网的翻译邀请，翻译的是 Jakob Jenkov 的 &lt;a href=&quot;http://tutorials.jenkov.com/software-architecture/index.html&quot;&gt;《软件架构》&lt;/a&gt; 中关于缓存技术的内容，虽然是 2014 年的文章，但是从软件架构层面上，并不过时。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;toc_0&quot;&gt;缓存&lt;/h2&gt;
&lt;p&gt;缓存是一种加速数据查找（数据读取）的技术，直接读取本地缓存的数据，而不是从数据源读取数据，数据源包括数据库、其他远程系统。&lt;img src=&quot;http://static.howardliu.cn/software-architecture/caching-1.png&quot; alt=&quot;caching&quot;/&gt;&lt;span id=&quot;more-52157&quot;/&gt;&lt;/p&gt;
&lt;p&gt;缓存是比源数据更靠近使用方的一块存储空间，可以更快的读取操作。缓存的存储介质一般是内存或磁盘，很多时候会选择内存作为缓存介质，但是内存缓存会在系统重启时丢失数据。&lt;/p&gt;
&lt;p&gt;在软件系统中，数据缓存存在多层缓存级别或多层缓存系统。在 web 应用中，缓存至少有 3 种存储位置，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.howardliu.cn/software-architecture/caching-1-2.png&quot; alt=&quot;caching&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 web 应用中，我们会使用各种各样的数据库存储数据，这些数据库可以将数据存放在内存中，以便我们直接读取，而不需要从磁盘中读取数据。web 服务器可以在内存中缓存图片、css 文件、js 文件等，不需要每次需要的时候从硬盘中访问文件。web 应用可以将从数据库读取的数据缓存起来，这样就不需要每次使用的时候都通过网络从数据库中读取数据了。最后，浏览器也可能存储静态文件和数据。在支持 HTML5 的浏览器中，有 localstorage 存储空间、应用数据缓存、本地 sql 存储等技术支持缓存。&lt;/p&gt;
&lt;p&gt;当我们提到缓存的时候，有下面几项内容需要考虑：&lt;/p&gt;

&lt;p&gt;我会在接下来的内容中讨论这几项内容。&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;写缓存&lt;/h2&gt;
&lt;p&gt;第一项挑战是从远程系统中读取数据写到缓存中，一般有两种方式：&lt;/p&gt;

&lt;p&gt;提前写缓存是在系统启动的时候，就将需要的数据缓存起来。要做到这一点，需要提前知道哪些数据需要缓存。但是我们有时候并不知道哪些数据需要在系统启动时候就缓存起来。&lt;/p&gt;
&lt;p&gt;用时写缓存是说，在第一次使用数据的时候，将数据缓存起来，之后就可以使用缓存中的数据了。这种操作的方式是，首先检查缓存中是否有数据，有就直接使用，如果没有，就从远程系统读取数据，然后写入缓存中。&lt;/p&gt;
&lt;p&gt;下表中我列出了提前写入和用时写入的优缺点：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th/&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;提前写缓存&lt;/td&gt;
&lt;td&gt;比用时写入减少了第一次缓存数据的延迟&lt;/td&gt;
&lt;td&gt;系统启动初始化缓存数据的时候，需要比较长的时间。而且，有可能缓存的数据永远不会被用到。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用时写缓存&lt;/td&gt;
&lt;td&gt;缓存的数据都是需要被用到的数据，而且没有启动延迟&lt;/td&gt;
&lt;td&gt;在第一次缓存数据的时候，用的时间比较长，可能导致用户体验不一致&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然，在真正实践过程中，我们可能两种方式并用：我们可以对热点数据使用提前缓存的方式，对其他数据使用用时缓存的方式。&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;保持缓存和远程系统数据同步&lt;/h2&gt;
&lt;p&gt;缓存数据的一个巨大挑战是保持缓存数据与远程系统数据保持同步，也就是数据一致。根据系统结构的不同，一般有不同的方式实现这个，我们来聊聊这几种方式。&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;直接式缓存&lt;/h3&gt;
&lt;p&gt;直写式缓存是允许读写缓存的一种方式，这种方式是，保存缓存数据的计算机，在将数据写入缓存的同时，将数据写到远程系统中。简单说就是，写入操作被写到远程系统中。&lt;/p&gt;
&lt;p&gt;只有远程系统的数据只能被直写式缓存修改时，这种方式才起作用。如果所有的数据读写都要经过直写式缓存系统，那就很容易将写入的数据更新到远程系统中，保持缓存与远程系统数据的一致性。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;基于过期时间&lt;/h3&gt;
&lt;p&gt;如果远程系统可以不依赖远程系统进行数据更新，那缓存和远程系统之间数据同步就很难通过直写式缓存方式保证了。&lt;/p&gt;
&lt;p&gt;保持缓存数据同步的一种方法是，为数据设置一个缓存时间。当数据过期时，就把这些数据从缓存中清除。如果再次需要读取这些数据，可以从远程系统中读取最新的数据缓存起来。&lt;/p&gt;
&lt;p&gt;数据过期时间取决于系统需要，有些类型的数据（比如文章），可能不需要随时的完全更新，可以设置 1 小时的过期时间。对于某些文章，你甚至可以忍受 24 小时的过期时间。&lt;/p&gt;
&lt;p&gt;需要注意的是，如果过期时间比较短，可能会频繁读取远程系统，降低缓存的作用。&lt;/p&gt;
&lt;h3 id=&quot;toc_5&quot;&gt;主动过期&lt;/h3&gt;
&lt;p&gt;还有一种方式是主动过期，是指主动更新缓存数据。比如，远程系统数据更新时，发送一条消息到缓存系统中，指示系统数据已被更新，可以将数据设置为过期。&lt;/p&gt;
&lt;p&gt;主动过期的优点是，可能保证远程系统数据更新后，缓存数据被尽快的更新。还有一个附加好处是“基于过期时间”方式没有办法是实现的，就是不会频繁更新没有修改的数据。&lt;/p&gt;
&lt;p&gt;主动过期的缺点是，需要能够检测远程系统数据的变化。如果远程系统是一个关系型数据库，可以被不同的机制更新数据，那每种更新机制都需要报告他们更新了哪些数据，否则，就没有办法向缓存数据的系统通知过期消息了。&lt;/p&gt;
&lt;h2 id=&quot;toc_6&quot;&gt;管理缓存大小&lt;/h2&gt;
&lt;p&gt;管理缓存大小，是一个重要的方面。许多系统存储了大量数据，以至于不可能将所有数据都存储在缓存中。因此，需要一种机制来管理缓存的数据量。管理缓存大小通常是将不需要的缓存数据清除，来腾出足够的空间。一般有下面几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于时间清理&lt;/li&gt;
&lt;li&gt;先进先出（FIFO）&lt;/li&gt;
&lt;li&gt;先进后出（FILO）&lt;/li&gt;
&lt;li&gt;最少被使用&lt;/li&gt;
&lt;li&gt;最小访问间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于时间清理方式是类似于前面提到的基于时间过期。除了可以保持数据与远程系统同步，还能够减少缓存数据的大小。可以开启一个单独的监听线程，也可以在读写新值的时候清理数据。&lt;/p&gt;
&lt;p&gt;先进先出清理方式意味着，当写入一个新的缓存的时候，就需要删除最早插入的缓存值。如果空间足够，也是可以不删除任何数据的。&lt;/p&gt;
&lt;p&gt;先进后出的方式正好和先进先出相反，这种方式对于先存储的数据时热点数据的情况比较有用。&lt;/p&gt;
&lt;p&gt;最少被使用清理方式是首先清理访问次数最少的缓存数据。这种方式的目的是避免清理热点数据，为了实现这种方式，需要记录缓存数据被访问的次数。需要注意一个问题，缓存中的旧值可能有较高的访问次数，这样就意味着这些旧值不会被清理。比如一篇旧文章的缓存，以前被访问过很多次，但是最近很少访问了，但是因为原来的访问量很高，尽管目前访问量较低，也不会被清理。为了避免这种情况，访问次数可以是针对 N 个小时统计。&lt;/p&gt;
&lt;p&gt;最小访问间隔清理方式是将访问时间间隔考虑在内。访问某个缓存数据时，就需要标记访问该数据的时间并增加访问次数。第二次访问这个缓存数据时，就增加访问次数，并计算平均访问时间。那些曾经是热点数据，被频繁访问，但是最近访问时间间隔变长，访问频率下降的数据，其平均访问时间会降低，当降到足够低的时候，就会被清理。&lt;/p&gt;
&lt;p&gt;有一种变化方式是，只计算最后 N 次访问的时间。N 可以是 100、1 或者其他任何有意义的数。每当访问计数到 N 时，访问计数被重置为 0，记录下来访问时间。这种方式可以更快的清理热度下降的数据。&lt;/p&gt;
&lt;p&gt;还有一种变化方式是，定期重置访问计数，并且只使用最小访问的清理方式。比如，每缓存一个小时的数据，前一个小时的访问计数会存储在另一个变量中，以便决策清理时使用。下一个小时访问计数重置为 0。这种机制具有上次变化相同的效果。&lt;/p&gt;
&lt;p&gt;最后两个变体之间的差异总结起来就是在每次缓存检查时，访问计数是否已达到 N，或者时间间隔是否已超过 Y。第一种方式是每隔 N 次访问一次系统时钟，而第二种方式在每次访问时都读取一次系统时钟（查看时间间隔是否已过期）。因为检查一个整数通常比读取系统时钟快，所以我会选择第一种方式。&lt;/p&gt;
&lt;p&gt;请记住，即使使用缓存大小管理系统，也需要清理、读取和存储数据，以保证他们能够与远程系统保持一致。尽管缓存的数据被大量访问而驻留在系统中，有时候也需要与远程系统同步。&lt;/p&gt;
&lt;h2 id=&quot;toc_7&quot;&gt;服务器集群中的缓存&lt;/h2&gt;
&lt;p&gt;单一服务中的缓存设计更加简单，因为你能够保证，所有写入操作都通过一个服务器，可以使用直写式缓存方式。但是在分布式集群中，情况会比较复杂，下图说明了这种情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.howardliu.cn/software-architecture/caching-2.png&quot; alt=&quot;caching&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简单的使用直写式缓存只会更新写操作的服务器上的缓存，集群中其他服务器对此完全不知情，也就不会更新数据。&lt;/p&gt;
&lt;p&gt;在服务器集群中，可以使用基于时间的过期策略或者主动过期策略，来保证缓存数据与远程系统的同步。&lt;/p&gt;
&lt;h2 id=&quot;toc_8&quot;&gt;缓存产品&lt;/h2&gt;
&lt;p&gt;实现自己的缓存系统并不难弄，取决于是否需要深度定制。如果没有必要自己实现缓存系统，可以用已经现成的缓存产品。比如：&lt;/p&gt;

&lt;p&gt;我不知道这些产品是否能够满足需要，但是我知道他们用的比较广泛。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;个人主页：&lt;a href=&quot;https://www.howardliu.cn&quot;&gt;https://www.howardliu.cn&lt;/a&gt;&lt;br/&gt;
个人博文：&lt;a href=&quot;https://www.howardliu.cn/caching-techniques/&quot;&gt;软件架构-缓存技术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.howardliu.cn/about/kanshanshuo.png&quot; alt=&quot;公众号：看山的小屋&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ads.cachekit.com/&quot;&gt;&lt;img src=&quot;http://ifeve.com/wp-content/uploads/2020/06/图片15927356935531.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;span class=&quot;wpfp-span&quot;&gt;&lt;img src=&quot;http://ifeve.com/wp-content/plugins/wp-favorite-posts/img/star.png&quot; alt=&quot;Favorite&quot; title=&quot;Favorite&quot; class=&quot;wpfp-img&quot;/&gt;&lt;img src=&quot;http://ifeve.com/wp-content/plugins/wp-favorite-posts/img/loading.gif&quot; alt=&quot;Loading&quot; title=&quot;Loading&quot; class=&quot;wpfp-hide wpfp-img&quot;/&gt;&lt;a class=&quot;wpfp-link&quot; href=&quot;?wpfpaction=add&amp;amp;postid=52157&quot; title=&quot;添加本文到我的收藏&quot; rel=&quot;nofollow&quot;&gt;添加本文到我的收藏&lt;/a&gt;&lt;/span&gt;
           &lt;/div&gt;&amp;#13;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0711d99beb124e2dabdcaf5cd1e27aa7</guid>
<title>用户画像分析与场景应用</title>
<link>https://toutiao.io/k/6b35glz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;一、用户画像&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、概念描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;用户画像，作为一种勾画目标用户、联系用户诉求与设计方向的有效工具，用户画像在各领域得到了广泛的应用。用户画像最初是在电商领域得到应用的，尤其在数字化营销范畴之内，核心的依赖依据就是描述用户画像的丰富标签。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.35877862595419846&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvC4ibyTDBP4H7QiaibYhnSAVJaUh3ibclvYgCQ6vgElr5Oh15MHvJWySjmDYtTX0bmqv50j9micdEyB0jA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1048&quot;/&gt;&lt;/p&gt;&lt;p&gt;在大数据时代背景下，用户信息充斥在网络中，将用户的每个具体信息抽象成标签，基于标签运用用户画像的方式了解用户，利用这些标签将用户形象具体化，从而为用户提供有针对性的服务。例如上述基于最简单的用户数据可以分析出来的用户画像信息。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、组成结构&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;用户画像的最核心工作是基于数据采集为用户贴上标签，随着标签的不断丰富用户的画像也会越来越清晰，最终达到了解甚至理解用户的能力。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4444444444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvC4ibyTDBP4H7QiaibYhnSAVJaWfGkczxqPibLtjbq5BGKcOClTwUN3MmCRM6AKZB4goibiaEuvmpZhw9Aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1242&quot;/&gt;&lt;/p&gt;&lt;p&gt;在实际的用户画像体系中，对于标签的分类分级远远不止这么简单，更加的细致和精确：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基础属性：性别，年龄，消费能力，职业等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;行为属性：活跃度，浏览，点击查看，不感兴趣；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;现实场景：经常进入的商圈，电影院，景区等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;兴趣描述：购物，影视，音乐，游戏，读书等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;定制化：通过机器分析，基于某些标签组合判定；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过用户产生的多种场景数据，去分析或者推测用户的并信息标签化，可视化的描述出来，通过用户画像，产品能自动化的深入理解用户并服务用户，例如很多信息流的应用，会根据用户的阅读内容自动判断推送用户可能喜欢的内容。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、画像的价值&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在用户量大业务复杂的公司，都会花很高的成本构建用户画像体系，在各个业务线上采集数据做分析，不断深入的了解用户才能提供更加精准的服务和多样化的运营策略。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.21328125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvC4ibyTDBP4H7QiaibYhnSAVJaic2yfo24q7K49Om375yI6EVSwEa8icMLHsUgT36LKOdAoqqRy834pBhA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;用户引流&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过现有用户的画像分析，在相关DMP广告平台做投放，重点推荐其平台上具有相关类似标签的用户，为产品做用户引流，这里也是相似用户快速扩量的概念类似。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;新用户冷启动&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;快速分析新注册用户可能偏向的属性和兴趣偏好，实现服务快速精准推荐，例如用户注册地所在区域，可以通过该区域用户的通用标签推测该新用户的特征。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;精准或个性化服务&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里就是根据丰富的用户画像分析，理解用户并提供精准服务或个性化服务。提供好的服务自然能做到用户的深度沉淀。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多场景识别&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里场景相对偏复杂，通过一个案例描述，例如在某个平台用手机号A注册，之后该手机号A丢失，换用手机号B之后，通过相关行为去理解用户是否手机号A的用户，也可以根据同个手机序列识别不同用户或者多个手机序列识别相同用户。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;沉默用户唤醒&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基于精细化的标签和多个场景数据，对用户的沉默程度做快速识别，基于画像分析制定运营策略进行激活召回减少用户流失。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、人群分析&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;每次开发用户群分析的案例，脑海都能响起一段话：独生子女，傲娇，温室花朵，冷漠自私，精致利己，想法清奇，个性张扬，缺乏团队意识，非主流，垮掉。之前几年这是很多长辈或者社会对90这代人贴的标签，也有很多是90自我嘲讽的标签，作为90后的一员我对这份画像还是挺满意的…&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2928&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uUIibyNXbAvC4ibyTDBP4H7QiaibYhnSAVJaUzePibAaQFVuoUvwpAe2iaQPnsEEWxzogwp6aEC09dFQjfSbdzE4x2kQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1250&quot;/&gt;&lt;/p&gt;&lt;p&gt;上述就是典型的人群画像分析的非典型案例，实际上最近几年对90人群分析报告已经非常多而且准确，很多数据公司都会从：社会属性、消费能力、游戏爱好、宠物、网络应用等多个热门领域做深度分析。分析人群画像可以在商业应用中产生非常高的价值。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、深度应用&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、商圈分析&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先基于商圈区域圈用户群，这里很好理解用户在某个商圈内产生数据，依次获取用户相关标签做该商圈内用户画像分析。&lt;/p&gt;&lt;p&gt;其次分析商圈本身服务，例如美食领域人流、娱乐领域人流、购物领域人流等，对比不同商圈为商业圈的运营提供策略。&lt;/p&gt;&lt;p&gt;通过综合商圈分析获取的画像，对商圈的构成、特点和影响商圈规模变化的各种因素进行综合性的研究，即服务于企业合理选择店址，也服务商圈精准引入丰富的品牌店铺。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、行业分析&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;行业分析画像是非常复杂的一种报告，通常会考量：用户体量、人群特征、技术、营收规模、竞争力、竞争格局、行业政策、市场饱和度等多个要素。不同的角度看行业分析也是不同的概念，例如从行业产品角度看：基于行业分析判断是否要做、如何做、如何做好、明确产品方向和运营策略等问题；从投行领域看则判断新产品是否值得投资有没有稳定高回报，风险控制等。&lt;/p&gt;&lt;p&gt;通过多个场景下数据构建用户画像，在应用到产品的众多业务场景，进行商业化运营和管理，产生更高的价值。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c5f37c7ef76c3f3ce4f79d20966907ee</guid>
<title>一秒钟打开在线 VS Code 阅读 GitHub 代码！真的只需 +1s</title>
<link>https://toutiao.io/k/wz04au9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;GitHub Codespaces 的到来，把 VS Code 带入了浏览器。&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/219818227&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;微软宣布 Visual Studio Codespaces 将停用，其功能将被整合到 GitHub Codespaces 中&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--square&quot; alt=&quot;图标&quot; src=&quot;https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;可惜的是，目前 GitHub Codespaces 还处于有限的 beta 版，并不是所有人都能使用到。&lt;/p&gt;&lt;p&gt;那么，有没有其他方法，直接能在 VS Code 上查看 GitHub Repo 的代码呢？&lt;/p&gt;&lt;p&gt;近日，GitHub 上出现了这样一个项目，可以使用户直接&lt;b&gt;在 VS Code 界面读取 GitHub 项目的代码&lt;/b&gt;，实现了 GitHub 项目与 VS Code 的无缝衔接。&lt;/p&gt;&lt;p&gt;这个项目名为 &lt;b&gt;github1s&lt;/b&gt;，只需要在浏览器地址栏 GitHub 网址链接中的「github 」后面添加 1s ，然后 Enter 键，即可在 VS Code 界面访问该项目的 Repo 代码。据项目主页显示，项目开发者来自百度。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-30249b213e01b61fa26b12d24f385729_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;155&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-30249b213e01b61fa26b12d24f385729_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;155&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-30249b213e01b61fa26b12d24f385729_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-30249b213e01b61fa26b12d24f385729_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/conwnet/github1s&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/conwnet/gith&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ub1s&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;据作者介绍，这个项目的用法很简单，比如你现在正在看 facebook/react 这个代码库的代码，觉得页面切来切去很麻烦，直接在浏览器地址栏 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//github.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt; 中的 github 后面，加上个 1s，然后回车就行了，所有的公开代码库都可以。&lt;/p&gt;&lt;p&gt;URL 从 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/facebook/react&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/facebook/rea&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; &lt;/p&gt;&lt;p&gt;变成了 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github1s.com/facebook/react&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github1s.com/facebook/r&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eact&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt; &lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7b9deb584c3009f8ee8cc9b93b916124_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;683&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-7b9deb584c3009f8ee8cc9b93b916124_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;683&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-7b9deb584c3009f8ee8cc9b93b916124_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-7b9deb584c3009f8ee8cc9b93b916124_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;这就是加「1s」的神奇力量！&lt;/p&gt;&lt;h2&gt;&lt;b&gt;实现原理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;github1s 是一个纯前端的项目，使用了 GitHub REST API 实现一个带 FileSystemProvider 的 VS Code extension。网站直接用的 gh-pages 托管，如果遇到了 Rate Limiting 设置个 OAuth Token 就好了，没有自己的服务部署，所以这网站服务理论上不会挂。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;自行开发&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;github1s 完全开源，我们也可以基于源代码自行构建进行二次开发！&lt;/p&gt;&lt;p&gt;&lt;b&gt;首先需要准备以下先决条件&lt;/b&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone git@github.com:conwnet/github1s.git
$ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; github1s
$ yarn
$ yarn watch
$ yarn serve &lt;span class=&quot;c1&quot;&gt;# in another shell&lt;/span&gt;
$ &lt;span class=&quot;c1&quot;&gt;# Then visit http://localhost:5000 or http://localhost:5000/conwnet/github1s once the build is completed.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;构建&lt;/b&gt;&lt;/p&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>