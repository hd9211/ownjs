<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>99fb9833dac7ba9e5dbd78f2ee517ffb</guid>
<title>实时数仓之 Kappa 架构与 Lambda  架构（建议收藏！）</title>
<link>https://toutiao.io/k/sh6t6h0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，今天&lt;span&gt;给大家重点分享一下离线数仓与实时数仓的内容。&lt;/span&gt;&lt;span&gt;我们先了解一下数据仓库架构的演变过程，本文主要从五个方面进行介绍&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据仓库概念&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;离线大数据架构&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Lambda 架构&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kappa 架构&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Lambda 架构与 Kappa 架构的对比&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 数据仓库概念&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据仓库是一个&lt;code&gt;面向主题的&lt;/code&gt;（Subject Oriented）、&lt;code&gt;集成的&lt;/code&gt;（Integrate）、&lt;code&gt;相对稳定的&lt;/code&gt;（Non-Volatile）、&lt;code&gt;反映历史变化&lt;/code&gt;（Time Variant）的数据集合，用于支持管理决策。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据仓库概念是 Inmon 于 1990 年提出并给出了完整的建设方法。随着互联网时代来临，数据量暴增，开始使用 &lt;strong&gt;大数据工具&lt;/strong&gt; 来替代经典数仓中的传统工具。此时仅仅是工具的取代，架构上并没有根本的区别，可以把这个架构叫做&lt;strong&gt;离线大数据架构&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来随着业务实时性要求的不断提高，人们开始在 &lt;strong&gt;离线大数据架构&lt;/strong&gt; 基础上加了一个加速层，使用流处理技术直接完成那些实时性要求较高的指标计算，这便是 Lambda 架构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再后来，实时的业务越来越多，事件化的数据源也越来越多，实时处理从次要部分变成了主要部分，架构也做了相应调整，出现了以&lt;strong&gt;实时事件处理为核心的 Kappa 架构&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3431558935361217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqH6gTnxQggW7ia1GLJp5sibgicic65R5wgvcnFgPUTcovrxIBsqUl6R7iaMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 离线大数据架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据源通过离线的方式导入到离线数仓中。下游应用根据业务需求选择直接读取 DM 或加一层数据服务，比如 MySQL 或 Redis。&lt;strong&gt;数据仓库从模型层面分为三层：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ODS，操作数据层，保存原始数据；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DWD，数据仓库明细层，根据主题定义好事实与维度表，保存最细粒度的事实数据；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;DM，数据集市/轻度汇总层，在 DWD 层的基础之上根据不同的业务需求做轻度汇总；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;如果要细分，分为五层：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ODS 层&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ODS 层&lt;/code&gt;: Operation Data Store，数据准备区，贴源层。直接接入源数据的：业务库、埋点日志、消息队列等。ODS 层数数据仓库的准备区&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;DW数仓&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;DWD 层&lt;/code&gt;:Data Warehouse Details,数据明细层，属于业务层和数据仓库层的隔离层，把持和 ODS 层相同颗粒度。进行数据清洗和规范化操作，去空值/脏数据、离群值等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;DWM 层&lt;/code&gt;:Data Warehouse middle,数据中间层，在 DWD 的基础上进行轻微的聚合操作，算出相应的统计指标&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;DWS 层&lt;/code&gt;:Data warehouse service,数据服务层，在 DWM 的基础上，整合汇总一个主题的数据服务层。汇总结果一般为&lt;strong&gt;宽表&lt;/strong&gt;，用于 OLAP、数据分发等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;ADS层&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ADS 层&lt;/code&gt;:Application data service, 数据应用层，存放在 ES,Redis、PostgreSql 等系统中，供数据分析和挖掘使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;典型的数仓存储是 HDFS/Hive，ETL 可以是 MapReduce 脚本或 HiveSQL。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5152173913043478&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqoUzkrnSsVj5bUfSSMrMLWzKAvF1VfyEfzLM7CaxzFmovYPu6OL4wxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数仓分层的优点：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;划清层次结构&lt;/strong&gt;：每一个数据分层都有它的作用域，这样我们在使用表的时候能更方便地定位和理解。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据血缘追踪&lt;/strong&gt;：简单来讲可以这样理解，我们最终给下游是直接能使用的业务表，但是它的来源有很多，如果有一张来源表出问题了，我们希望能够快速准确地定位到问题，并清楚它的危害范围。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;减少重复开发&lt;/strong&gt;：规范数据分层，开发一些通用的中间层数据，能够减少极大的重复计算。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;把复杂问题简单化&lt;/strong&gt;。将一个复杂的任务分解成多个步骤来完成，每一层只处理单一的步骤，比较简单和容易理解。而且便于维护数据的准确性，当数据出现问题之后，可以不用修复所有的数据，只需要从有问题的步骤开始修复。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;屏蔽原始数据的异常&lt;/strong&gt;。屏蔽业务的影响，不必改一次业务就需要重新接入数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3  Lambda 架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着大数据应用的发展，人们逐渐对系统的实时性提出了要求，为了计算一些实时指标，&lt;strong&gt;就在原来离线数仓的基础上增加了一个实时计算的链路&lt;/strong&gt;，并&lt;strong&gt;对数据源做流式改造&lt;/strong&gt;（即把数据发送到消息队列），实时计算去订阅消息队列，直接完成指标增量的计算，推送到下游的数据服务中去，由数据服务层完成离线&amp;amp;实时结果的合并。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lambda 架构（Lambda Architecture）是由 Twitter 工程师南森·马茨（Nathan Marz）提出的大数据处理架构。这一架构的提出基于马茨在 BackType 和 Twitter 上的分布式数据处理系统的经验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lambda 架构使开发人员能够构建大规模分布式数据处理系统。它具有很好的灵活性和可扩展性，也对硬件故障和人为失误有很好的容错性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3580441640378549&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqTKramOKbP1yOa9ThibpMTjHutfnFdAwLmuWlqsn3e5mwOK07FHWcBSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lambda 架构总共由三层系统组成：&lt;code&gt;批处理层（Batch Layer）&lt;/code&gt;，&lt;code&gt;速度处理层（Speed Layer&lt;/code&gt;），以及用于响应查询的&lt;code&gt;服务层（Serving Layer）&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Lambda 架构中，每层都有自己所肩负的任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;批处理层&lt;/strong&gt; 存储管理主数据集（不可变的数据集）和预先批处理计算好的视图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;批处理层&lt;/strong&gt; 使用可处理大量数据的分布式处理系统预先计算结果。它通过处理所有的已有历史数据来实现数据的准确性。这意味着它是基于完整的数据集来重新计算的，能够修复任何错误，然后更新现有的数据视图。输出通常存储在只读数据库中，更新则完全取代现有的预先计算好的视图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;速度处理层&lt;/strong&gt; 会实时处理新来的大数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;速度层&lt;/strong&gt; 通过提供最新数据的实时视图来最小化延迟。速度层所生成的数据视图可能不如批处理层最终生成的视图那样准确或完整，但它们几乎在收到数据后立即可用。而当同样的数据在批处理层处理完成后，在速度层的数据就可以被替代掉了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Lambda 架构问题：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然 Lambda 架构使用起来十分灵活，并且可以适用于很多的应用场景，但在实际应用的时候，Lambda 架构也存在着一些不足，主要表现在它的维护很复杂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）&lt;strong&gt;同样的需求需要开发两套一样的代码：这是 Lambda 架构最大的问题&lt;/strong&gt;，两套代码不仅仅意味着开发困难（同样的需求，一个在批处理引擎上实现，一个在流处理引擎上实现，还要分别构造数据测试保证两者结果一致），后期维护更加困难，比如需求变更后需要分别更改两套代码，独立测试结果，且两个作业需要同步上线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）&lt;strong&gt;资源占用增多&lt;/strong&gt;：同样的逻辑计算两次，整体资源占用会增多（多出实时计算这部分）&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4  Kappa 架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lambda 架构虽然满足了实时的需求，但带来了更多的开发与运维工作，其架构背景是流处理引擎还不完善，流处理的结果只作为临时的、近似的值提供参考。后来随着 Flink 等流处理引擎的出现，流处理技术很成熟了，这时为了解决两套代码的问题，&lt;strong&gt;LickedIn 的 Jay Kreps 提出了 Kappa 架构&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kappa 架构可以认为是 Lambda 架构的简化版（只要移除 lambda 架构中的批处理部分即可）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Kappa 架构中，需求修改或历史数据重新处理都通过上游重放完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kappa 架构最大的问题是&lt;strong&gt;流式重新处理历史的吞吐能力会低于批处理&lt;/strong&gt;，但这个可以通过增加计算资源来弥补。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5432900432900433&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqblTOpruRLLNF4kW4dRhO7a8qRic8fM9NIbiaR1xRFRiaiaGLkcVCj61wMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;924&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kappa 架构的重新处理过程：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新处理是人们对 Kappa 架构最担心的点，但实际上并不复杂：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（1）选择一个具有重放功能的、能够保存历史数据并支持多消费者的消息队列，根据需求设置历史数据保存的时长，比如 Kafka，可以保存全部历史数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（2）当某个或某些指标有重新处理的需求时，按照新逻辑写一个新作业，然后从上游消息队列的最开始重新消费，把结果写到一个新的下游表中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（3）当新作业赶上进度后，应用切换数据源，读取 2 中产生的新结果表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（4）停止老的作业，删除老的结果表。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3368121442125237&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqoQ3BGAzpkOP2z1PjcM8225s8rV8c0NUwUCLI0FYc0vFRJSqEVoANnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1054&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 Lambda 架构与 Kappa 架构的对比&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6197564276048715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqYHLGWytzoujevqahyRZ8Kuk0enEFG9l4RzSiajQooIwRcN36yreI3Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;739&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在真实的场景中，很多时候并不是完全规范的 &lt;code&gt;Lambda&lt;/code&gt; 架构或 &lt;code&gt;Kappa&lt;/code&gt; 架构，&lt;code&gt;可以是两者的混合&lt;/code&gt;，比如大部分实时指标使用 &lt;code&gt;Kappa&lt;/code&gt; 架构完成计算，少量关键指标（比如金额相关）使用 &lt;code&gt;Lambda&lt;/code&gt; 架构用批处理重新计算，增加一次校对过程。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43483870967741933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKqVREA97fgYb52Rz1Yq4ANZPYI8O6M3BZUNkSmozwjCs15mIiaNKpwCwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;775&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Kappa&lt;/code&gt; 架构并不是中间结果完全不落地，现在很多大数据系统都需要支持机器学习（离线训练），所以&lt;code&gt;实时中间结果需要落地对应的存储引擎供机器学习使用&lt;/code&gt;，另外有时候还需要对明细数据查询，这种场景也需要把实时明细层写出到对应的引擎中。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5331695331695332&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rLGOIHABwEoUUpKYfkkPOj7WvgUqpgKq4ibeZ9lSwYqoR90kp9jy4ibp8pRc6KtalM3nfVYDg5ibz5vvHibSWRInUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c68501309a1e31d249cf2c79e7dd2bbd</guid>
<title>GitLab CI 打造一条自己的流水线</title>
<link>https://toutiao.io/k/0m9sdkf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近接手的业务需求由于历史原因，项目部署在阿里云服务器上，所以没有使用公司内部的流水线进行集成和部署。其中流水线使用到了GitLab自带的CI工具进行集成，所以正好借此机会给大家分享一下GitLab CI/CD，教大家如何打造一条项目的流水线。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CI/CD的背景&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式介绍之前我们先简单过一下CI/CD的背景&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;CI/CD是什么&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://www.redhat.com/zh/topics/devops/what-is-CI-CD&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CI (Continuous Integration)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即持续集成，它是指频繁地（一天多次）将代码集成到主干，目的就为了让产品保证质量的同时快速迭代；通常它需要通过自动化测试，从而保证集成的代码的稳定性；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CD (Continuous Delivery/Deployment)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即持续交付/部署，可以看作持续集成的下一步，它指的是频繁地将软件的新版本，交付给质量团队or用户测试。如果测试通过，代码就可以部署到生产环境中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么需要CI/CD？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过去，一个团队的开发人员可能会孤立地工作很长一段时间，只有在他们的工作完成后，才会将他们的更改合并到主分支中。这使得合并代码更改变得困难而耗时，而且还会导致错误积累很长时间而得不到纠正。这些因素导致更加难以迅速向客户交付更新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而有了 CI/CD，我们可以获得以下收益：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;解放了重复性劳动。自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;更快地修复问题。持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;更快的交付成果。更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;减少手工的错误。在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;5&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;减少了等待时间。缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;更高的产品质量。集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标志，也可以设置邮件和短信等进行警告。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol start=&quot;6&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;/&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;GitLab CI/CD&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GitLab-CI 是GitLab提供的CI工具。它可以通过指定通过如push/merge代码、打tag等行为触发CI流程；同时也可以指定不同场景要触发的不同的构建脚本（脚本可以看作是流水线中的一个操作步骤or单个任务）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.250901225666907&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDsduBZvmZicdUmus2Csu2rNqibn1RYZT1GnaAWsjsws6MJEkPSPg8mmTg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2774&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体的使用方式是在项目根目录中配置一个 .gitlab-ci.yml 文件来启动其功能；我们先了解一下这个 .gitlab-ci.yml 文件&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置文件介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;gitlab-ci.yml 用的是 &lt;span&gt;YAML语法&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; ，我们可以把它理解类似 json 的格式，只不过语法方面有一些不同。比如：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt; tabitha:&lt;br/&gt;    name: Tabitha Bitumen&lt;br/&gt;    job: Developer&lt;br/&gt;     skills:&lt;br/&gt;      - lisp&lt;br/&gt;      - fortran&lt;br/&gt;      - erlang&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应到json：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;     tabitha : {&lt;br/&gt;         name :  Tabitha Bitumen ,&lt;br/&gt;         job :  Developer ,&lt;br/&gt;         skills ： [ lisp ,  fortran ,  erlang ],&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即：缩进对应的是json对象中的key，&lt;code&gt;-&lt;/code&gt; 对应的是数组中的一项，还是比较好理解的~&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正式介绍 .gitlab-ci.yml 配置文件之前，我们要提一下 GitLab CI中的几个相关概念&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Job&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Job&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; 可以理解为CI流程中的单个任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;job是一个顶级元素（相当于yml配置的一个根元素），它可以起任意的名称、并且不限数量，但必须至少包含 script 子句，用于指定当前任务要执行的脚本，如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job1:&lt;br/&gt;  script:  execute-script-for-job1 &lt;br/&gt;job2:&lt;br/&gt;  stage: build&lt;br/&gt;  script:&lt;br/&gt;    - scripts/build.sh&lt;br/&gt;  only:&lt;br/&gt;    - master&lt;br/&gt;&lt;span&gt;# job n...&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Stages&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Stages 用来定义一次CI有哪几个阶段，如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;stages:&lt;br/&gt;  - build&lt;br/&gt;  - &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  - deploy&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时每个stage又可以与若干个job关联，即一个阶段可以并行执行多个job；如下，在每个job中使用&lt;code&gt;stage&lt;/code&gt;关键字关联到对应stage即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;stages:&lt;br/&gt;  - build&lt;br/&gt;  - &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  - deploy&lt;br/&gt;  &lt;br/&gt;build_job:&lt;br/&gt;  stage: build&lt;br/&gt;  script:&lt;br/&gt;    - scripts/build.sh&lt;br/&gt;&lt;br/&gt;test_job:&lt;br/&gt;  stage: &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  script:&lt;br/&gt;    - scripts/test.sh&lt;br/&gt;&lt;br/&gt;deploy_job:&lt;br/&gt;  stage: deploy&lt;br/&gt;  script:&lt;br/&gt;    - scripts/deploy.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pipeline&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pipeline&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 是持续集成、交付和部署的顶级组件，它可以理解为是流水线的一次完整的任务流程；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Pipeline 可以包含若干Stage，而每个Stage又可以指定执行若干job，这样我们就可以把整个构建的流程串起来了。如下，我们就可以在GitLab 的pipeline中看到这些Stages，及其对应的job：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2735294117647059&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDIojG9xjJmK3ZS9rYC49jfwAjSZrMHu3Bz7k41eZakLotfFsc4XMzrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1360&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果Pipeline中的一个任务成功，将进入其下一个Stage的Job；反之如果中途失败，则默认会中断流水线的执行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;常用配置&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来重点介绍一下 &lt;span&gt;.gitlab-ci.yml配置&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 的常用关键字：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;stage&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述有提到过，用 &lt;code&gt;stage&lt;/code&gt; 可以定义 job 在哪个阶段运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;stages:&lt;br/&gt;  - build&lt;br/&gt;  - &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  - deploy&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;script&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于指定运行器要执行的脚本命令，可以指定多条&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job:&lt;br/&gt;  script: &lt;br/&gt;      - &lt;span&gt;echo&lt;/span&gt;  start job! &lt;br/&gt;      - scripts/deploy.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;before_script &amp;amp; after_script&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于定义应在job 在执行脚本之前/后时要执行的内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job:&lt;br/&gt;  before_script:&lt;br/&gt;    - &lt;span&gt;echo&lt;/span&gt;  Execute this &lt;span&gt;command&lt;/span&gt; before the `script` section completes. &lt;br/&gt;  script:&lt;br/&gt;    - &lt;span&gt;echo&lt;/span&gt;  An example script section. &lt;br/&gt;  after_script:&lt;br/&gt;    - &lt;span&gt;echo&lt;/span&gt;  Execute this &lt;span&gt;command&lt;/span&gt; after the `script` section completes. &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;allow_failure&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于配置当前 job 失败时 pipeline 是否应继续运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job2:&lt;br/&gt;  stage: &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  script:&lt;br/&gt;    - execute_script_2&lt;br/&gt;  allow_failure: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;# or false (default)&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;cache&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定缓存的文件列表，用户在不同的 job 之间共享；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;cache:key&lt;/code&gt;：可以给每个缓存一个唯一的标识键，如果未设置，则默认键为&lt;code&gt;default&lt;/code&gt;；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;cache:paths&lt;/code&gt;：指定要缓存的文件或目录&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;rspec:&lt;br/&gt;  script:&lt;br/&gt;    - &lt;span&gt;echo&lt;/span&gt;  This job uses a cache. &lt;br/&gt;  cache:&lt;br/&gt;    key: binaries-cache&lt;br/&gt;    paths:&lt;br/&gt;      - binaries/*.apk&lt;br/&gt;      - .config&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;only / except&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;only 用于定义何时执行job，反之 except 用于定义何时&lt;strong&gt;不&lt;/strong&gt;执行job；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们有四个关键字可以一起配合使用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job1:&lt;br/&gt;  script: &lt;span&gt;echo&lt;/span&gt;&lt;br/&gt;  only: &lt;span&gt;# or except&lt;/span&gt;&lt;br/&gt;    - main &lt;span&gt;# ref可省略&lt;/span&gt;&lt;br/&gt;    ref:&lt;br/&gt;      - tags&lt;br/&gt;      - /^feat-.*$/&lt;br/&gt;      - merge_requests&lt;br/&gt;    variables:&lt;br/&gt;      - &lt;span&gt;$RELEASE&lt;/span&gt; ==  staging &lt;br/&gt;      - &lt;span&gt;$STAGING&lt;/span&gt;&lt;br/&gt;    changes:&lt;br/&gt;      - Dockerfile&lt;br/&gt;      - docker/scripts/*&lt;br/&gt;      - dockerfiles/**/*&lt;br/&gt;      - more_scripts/*.{rb,py,sh}&lt;br/&gt;      -  **/*.json &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;retry&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置在 job 执行失败时候重试次数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job:&lt;br/&gt;  script: rspec&lt;br/&gt;  retry:&lt;br/&gt;    max: 2&lt;br/&gt;    when: &lt;span&gt;# 搭配when关键字，在下列情况下重试&lt;/span&gt;&lt;br/&gt;      - runner_system_failure&lt;br/&gt;      - stuck_or_timeout_failure&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;variables&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可用于定义执行过程中的一些变量&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;variables:&lt;br/&gt;  DEPLOY_SITE:  https://example.com/ &lt;br/&gt;&lt;br/&gt;deploy_job:&lt;br/&gt;  stage: deploy&lt;br/&gt;  script:&lt;br/&gt;    - deploy-script --url &lt;span&gt;$DEPLOY_SITE&lt;/span&gt; --path  / &lt;br/&gt;&lt;br/&gt;deploy_review_job:&lt;br/&gt;  stage: deploy&lt;br/&gt;  variables:&lt;br/&gt;    REVIEW_PATH:  /review &lt;br/&gt;  script:&lt;br/&gt;    - deploy-review-script --url &lt;span&gt;$DEPLOY_SITE&lt;/span&gt; --path &lt;span&gt;$REVIEW_PATH&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;when&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于配置 job 运行的条件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;on_success&lt;/code&gt;（默认）：仅在之前stage的所有job都成功或配置了&lt;code&gt;allow_failure: true&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;always&lt;/code&gt;：无论之前stage的job状态如何，都运行；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;on_failure&lt;/code&gt;：仅当至少一个之前stage的job失败时才运行；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cleanup_build_job:&lt;br/&gt;  stage: cleanup_build&lt;br/&gt;  script:&lt;br/&gt;    - cleanup build when failed&lt;br/&gt;  when: on_failure&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;tags&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;选择特定tag的GitLab-runner来执行&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;job:&lt;br/&gt;  tags:&lt;br/&gt;    - ruby&lt;br/&gt;    - postgres&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;GitLab-runner 安装&amp;amp;注册&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置好我们的 yml 文件之后，还需要配置GitLab-runner，用于执行对应的脚本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 下载&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Replace ${arch} with any of the supported architectures, e.g. amd64, arm, arm64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# A full list of architectures can be found here https://GitLab-runner-downloads.s3.amazonaws.com/latest/index.html&lt;/span&gt;&lt;br/&gt;curl -LJO  https://GitLab-runner-downloads.s3.amazonaws.com/latest/rpm/GitLab-runner_&lt;span&gt;${arch}&lt;/span&gt;.rpm &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 安装&lt;/span&gt;&lt;br/&gt;rpm -i GitLab-runner_&amp;lt;arch&amp;gt;.rpm&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;注册&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注册时需要的 URL &amp;amp; token可以在 GitLab -&amp;gt; Settings -&amp;gt; CI/CD -&amp;gt; Runners 中获取&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sudo GitLab-runner register&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# Enter the GitLab instance URL (for example, https://GitLab.com/):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${url}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Enter the registration token:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${token}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Enter a description for the runner:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${description}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Enter tags for the runner (comma-separated):&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${tags}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Registering runner... succeeded &lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Enter an executor: shell, virtualbox, docker+machine, docker-ssh+machine, docker, docker-ssh, parallels, custom, ssh, kubernetes:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;${executor}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;打造一条流水线&lt;/span&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;预览Pipeline&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当有了以上的准备，我们配置好 .gitlab-ci.yml 文件、写好对应的脚本，同时配置好 GitLab-runner 后，就可以开启并体验 CI 流水线了。当提交代码后（当然也可以按上述的only关键字设置为打tag、提mr时触发），就可以触发GitLab CI的Pipeline，并执行对应的stages及其jobs啦 🎉&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，我们可以在 GitLab -&amp;gt; CI/CD -&amp;gt; Pipeline 中看到：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18866459627329193&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDgiaA18vQ5j3NtI56MDpeBSpJHpdv4dzFlpHRQzsUUA6LqIvtNNOcmiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2576&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置一条流水线&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规划实现如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;代码编译：提供一个build.sh脚本，用于编译代码；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;自动化测试：scripts 关键字执行测试的指令，从而运行事先编写好的自动化测试脚本；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;人工卡点：利用上述提到的&lt;code&gt;when:manual&lt;/code&gt;人工触发，配合&lt;code&gt;allow_failure: false&lt;/code&gt;，即可达到卡点效果；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;项目部署：也是利用一个脚本，将我们之前的构建产物发送到目标机器、目录下进行部署；同时使用&lt;code&gt;only:master&lt;/code&gt;指定只有在提交到master分支才执行该步骤的 job。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综合以上，我们可以得到以下大致的 .gitlab-ci.yml 配置(job 对应的 script 可根据实际情况和需要编写)：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;stages:&lt;br/&gt;  - scm&lt;br/&gt;  - &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  - manual-point&lt;br/&gt;  - deploy&lt;br/&gt;&lt;br/&gt;scm:&lt;br/&gt;  stage: scm&lt;br/&gt;  script:&lt;br/&gt;    - scripts/build.sh&lt;br/&gt;&lt;br/&gt;&lt;span&gt;test&lt;/span&gt;:&lt;br/&gt;  stage: &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;  script:&lt;br/&gt;    - scripts/test.sh&lt;br/&gt;&lt;br/&gt;manual-point:&lt;br/&gt;  stage: manual-point&lt;br/&gt;  script:&lt;br/&gt;    - &lt;span&gt;echo&lt;/span&gt;  I am manual job &lt;br/&gt;  only:&lt;br/&gt;    - master&lt;br/&gt;  when: manual&lt;br/&gt;  allow_failure: &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;deploy:&lt;br/&gt;  stage: deploy&lt;br/&gt;  script:&lt;br/&gt;    - scripts/deploy.sh&lt;br/&gt;  only:&lt;br/&gt;    - master&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;触发pipeline后，我们可以看到，经过了scm编译、test自动化测试的步骤后，到了Manual-point卡点，此时流水线已经锁定执行，需要人工手动点击确认才可以继续执行；&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2417465388711395&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDyUKxhGXgzRC28DUVTkH6pJialo0XATXfOUdhYJB26Itkib3RtRprpicicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1878&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当点击执行 job 后&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24948453608247423&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcD9uGC3YhkWZq8HpCjML1QwtjBheL0OrIG120RxkujE1TAlTxmCTR9Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1940&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定时任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些场景我们想定时地执行Pipeline，而不是通过事件触发，可以在GitLab -&amp;gt; Setting -&amp;gt; Schedule 进行设置&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5439005439005439&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDGomXv0LeN5REAyzyiaPOEMnVFpnJScKURN3QfYx9eZzJNNU4kIu2Gzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2574&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;间隔的设置采用的是 &lt;span&gt;cron 语法&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;，它是Unix和类Unix系统中设置定时任务的语法；&lt;/p&gt;&lt;p&gt;它使用5个占位符分别代表 分钟、小时、月份的日期、月份、周几；如下：&lt;/p&gt;&lt;pre&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# ┌─────────── minute (0 - 59)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ ┌─────────── hour (0 - 23)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ ┌─────────── day of the month (1 - 31)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ ┌─────────── month (1 - 12)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ ┌─────────── day of the week (0 - 6) (Sunday to Saturday;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ │                                 7 is also Sunday on some systems)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ │&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# │ │ │ │ │&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# * *  *  *  * &amp;lt;command to execute&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 例子：&lt;/span&gt;&lt;br/&gt;* * * * * &lt;span&gt;# 每分钟执行&lt;/span&gt;&lt;br/&gt;30 10 * * * &lt;span&gt;# 每天10:30&lt;/span&gt;&lt;br/&gt;30 10 * * SAT,SUN &lt;span&gt;# 每周六、周天10:30&lt;/span&gt;&lt;br/&gt;0 8 1-20 * * &lt;span&gt;# 每个月的1-20号的8点&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设置好后即可看到定时任务列表：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.16353677621283255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrL3IFdgRCAias5BQt9BMbcDLaEfgicg94vvyvjevFzgsm6wUKEN5slicSicpAl6hJCWic1omiajITQY8ZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2556&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;YAML语法: &lt;em&gt;https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Job: &lt;em&gt;https://docs.gitlab.com/ee/ci/jobs/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Pipeline: &lt;em&gt;https://docs.gitlab.com/ee/ci/pipelines/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;.gitlab-ci.yml配置: &lt;em&gt;https://docs.gitlab.com/ee/ci/yaml/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;安装: &lt;em&gt;https://docs.gitlab.com/runner/install/linux-manually.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;注册: &lt;em&gt;https://docs.gitlab.com/runner/register/index.html#linux&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;cron 语法: &lt;em&gt;https://en.wikipedia.org/wiki/Cron&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7fb1aae92d8d00a8985067a9ecd0c3dc</guid>
<title>微信全文搜索技术优化</title>
<link>https://toutiao.io/k/fvhw2yp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、iOS 微信全文搜索技术的现状&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全文搜索是使用倒排索引进行搜索的一种搜索方式。倒排索引也称为反向索引，是指对输入的内容中的每个&lt;code&gt;Token&lt;/code&gt;建立一个索引，索引中保存了这个&lt;code&gt;Token&lt;/code&gt;在内容中的具体位置。全文搜索技术主要应用在对大量文本内容进行搜索的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微信终端涉及到大量文本搜索的业务场景主要包括联系人、聊天记录、收藏的搜索。这些搜索功能从 2014 年上线至今，已经多年没有更新底层搜索技术，聊天记录使用的全文搜索引擎还是 SQLite FTS3，而现在已经有 SQLite FTS5，收藏首页的搜索还是使用简单的&lt;code&gt;Like&lt;/code&gt;语句去匹配文本，联系人搜索甚至用的是内存搜索（在内存中遍历所有联系人的所有属性进行匹配）。随着用户在微信上积累的数据越来越多，提升微信底层搜索技术的需求也越来越迫切。在 2021 年，我们对 iOS 微信的全文搜索技术进行了一次全面升级，本文主要介绍本次技术升级的工作经验。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、全文搜索引擎的选型与优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、搜索引擎选型&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;iOS 客户端可以使用的全文搜索引擎并不多，主要有 SQLite 三个版本的 FTS 组件、Lucene 的 C++实现版本 CLucene 和 C 语言桥接版本 Lucy。这里给出了这些引擎在事务能力、技术风险、搜索能力、读写性能等方面的比较。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24074074074074073&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDNGLSXJxp0xQzmVicEln4ZmCAEAiaydia0jxCo3XxqTZic7COygRPDGI4ag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在事务能力方面，Lucene 没有提供完整的事务能力，因为 Lucene 使用了多文件的存储结构，它没有保证事务的原子性。SQLite 的 FTS 组件因为底层还是使用普通的表来实现的，可以完美继承 SQLite 的事务能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在技术风险方面，Lucene 主要应用于服务端，在客户端没有大规模应用的案例，而且 CLucene 和 Lucy 自 2013 年后官方都停止维护了，技术风险较高。SQLite 的 FTS3 和 FTS4 组件则是属于 SQLite 的旧版本引擎，官方维护不多了，而且这两个版本都是将一个词的索引存到一条记录中，极端情况下有超出 SQLite 单条记录最大长度限制的风险。SQLite 的 FTS5 组件作为最新版本引擎也已经推出超过六年了，在安卓微信上也已经全量应用，所以技术风险是最低的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在搜索能力方面，Lucene 的发展历史比 SQLite 的 FTS 组件长很多，搜索能力相比也是最丰富的。特别是 Lucene 有丰富的搜索结果评分排序机制，但这个在微信客户端没有应用场景。因为我们的搜索结果要么是按照时间排序，要么是按照一些简单的自定义规则排序。在 SQLite 几个版本的引擎中，FTS5 的搜索语法更加完备严谨，提供了很多接口给用户自定义搜索函数，所以搜索能力也相对强一点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在读写性能方面，下面是用不同引擎对 100 万条长度为 10 的随机生成中文语句生成 Optimize 状态的索引的性能数据，其中每个语句的汉字出现频率按照实际的汉字使用频率：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDHYiaqQliapf6Yn0YUl1uiaoYpJamWFbhD1HgFLcFETdCuv8HEiaic0VIA7w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDBCkeftsyib3fSV8r5o15nqe813L9XuWMibOVRSibf7v7YTicDcK83wlwtA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDd3SsaFhO7jzXEnTCB81p0D94rBCZib4iatH2b7PLSxETmyRNfibcmUAeA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，Lucene 读取命中数量的性能比 SQLite 好很多，说明 Lucene 索引的文件格式很有优势，但是微信没有只读取命中数量的应用场景，Lucene 的其他性能数据跟 SQLite 的差距不明显。SQLite FTS3 和 FTS5 的大部分性能很接近，FTS5 索引的生成耗时比 FTS3 高一截，这个有优化方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综合考虑这些因素，我们选择 SQLite FTS5 作为 iOS 微信全文搜索的搜索引擎。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、实现 FTS5 的 Segment 自动 Merge 机制&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQLite FTS5 会把每个事务写入的内容保存成一个独立的 b 树，称为一个&lt;code&gt;segment&lt;/code&gt;，&lt;code&gt;segment&lt;/code&gt;中保存了本次写入内容中的每个词在本次内容中行号（&lt;code&gt;rowid&lt;/code&gt;）、列号和字段中的每次出现的位置偏移，所以这个&lt;code&gt;segment&lt;/code&gt;就是该内容的倒排索引。多次写入就会形成多个&lt;code&gt;segment&lt;/code&gt;，查询时就需要分别查询这些&lt;code&gt;segment&lt;/code&gt;再汇总结果，从而&lt;code&gt;segment&lt;/code&gt;数量越多，查询速度越慢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了减少&lt;code&gt;segment&lt;/code&gt;的数量，SQLite FTS5 引入了&lt;code&gt;merge&lt;/code&gt;机制。新写入的&lt;code&gt;segment&lt;/code&gt;的&lt;code&gt;level&lt;/code&gt;为 0，&lt;code&gt;merge&lt;/code&gt;操作可以把&lt;code&gt;level&lt;/code&gt;为&lt;code&gt;i&lt;/code&gt;的现有&lt;code&gt;segment&lt;/code&gt;合并成一个&lt;code&gt;level&lt;/code&gt;为&lt;code&gt;i+1&lt;/code&gt;的新的&lt;code&gt;segment&lt;/code&gt;。&lt;code&gt;merge&lt;/code&gt;的示例如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6194444444444445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDyG4PFOpFOXfZJ0Ksmy72bGFW3BOZ98zaIJqLaicH3W305EDBVt7iblnw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FTS5 默认的&lt;code&gt;merge&lt;/code&gt;操作有两种：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;某一个&lt;code&gt;level&lt;/code&gt;的&lt;code&gt;segment&lt;/code&gt;达到&lt;code&gt;4&lt;/code&gt;时就开始在写入内容时自动执行一部分&lt;code&gt;merge&lt;/code&gt;操作，称为一次&lt;code&gt;automerge&lt;/code&gt;。每次&lt;code&gt;automerge&lt;/code&gt;的写入量跟本次更新的写入量成正比，需要多次&lt;code&gt;automerge&lt;/code&gt;才能完整合并成一个新&lt;code&gt;segment&lt;/code&gt;。&lt;code&gt;Automerge&lt;/code&gt;在完整生成一个新的&lt;code&gt;segment&lt;/code&gt;前，需要多次裁剪旧的&lt;code&gt;segment&lt;/code&gt;的已合并内容，引入多余的写入量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本次写入后某一个&lt;code&gt;level&lt;/code&gt;的&lt;code&gt;segment&lt;/code&gt;数量达到 16 时，一次性合并这个&lt;code&gt;level&lt;/code&gt;的&lt;code&gt;segment&lt;/code&gt;，称为&lt;code&gt;crisismerge&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FTS5 的默认&lt;code&gt;merge&lt;/code&gt;操作都是在写入时同步执行的，会对业务逻辑造成性能影响，特别是&lt;code&gt;crisismerge&lt;/code&gt;会偶然导致某一次写入操作特别久，这会让业务性能不可控。之前的测试中 FTS5 的建索引耗时较久，也主要因为 FTS5 的&lt;code&gt;merge&lt;/code&gt;操作比其他两种引擎更加耗时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在 WCDB 中实现 FTS5 的&lt;code&gt;segment&lt;/code&gt;自动&lt;code&gt;merge&lt;/code&gt;机制，将这些&lt;code&gt;merge&lt;/code&gt;操作集中到一个单独子线程执行，并且优化执行参数，具体如下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;监听有 FTS5 索引的数据库每个事务变更到的 FTS5 索引表，抛通知到子线程触发 WCDB 的自动&lt;code&gt;merge&lt;/code&gt;操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Merge 线程检查所有 FTS5 索引表中&lt;code&gt;segment&lt;/code&gt;数超过 &lt;code&gt;1&lt;/code&gt; 的 level 执行一次&lt;code&gt;merge&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Merge&lt;/code&gt;时每写入&lt;code&gt;16&lt;/code&gt;页数据检查一次有没有其他线程的写入操作因为&lt;code&gt;merge&lt;/code&gt;操作阻塞，如果有就立即&lt;code&gt;commit&lt;/code&gt;，尽量减小&lt;code&gt;merge&lt;/code&gt;对业务性能的影响。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自动&lt;code&gt;merge&lt;/code&gt;逻辑执行的流程图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4361111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDJhAAw5rgttK0fA1V86fsIbJuzkU85RDIKsx4Twn1MkxlHCdnZ9iamsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;限制每个&lt;code&gt;level&lt;/code&gt;的&lt;code&gt;segment&lt;/code&gt;数量为&lt;code&gt;1&lt;/code&gt;，可以让 FTS5 的查询性能最接近&lt;code&gt;optimize&lt;/code&gt;（所有&lt;code&gt;segment&lt;/code&gt;合并成一个）之后的性能，而且引入的写入量是可接受的。假设业务每次写入量为&lt;code&gt;M&lt;/code&gt;，写入了&lt;code&gt;N&lt;/code&gt;次，那么在 merge 执行完整之后，数据库实际写入量为**MN(log2(N)+1)**。业务批量写入，提高&lt;code&gt;M&lt;/code&gt;也可以减小总写入量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能方面，对一个包含 100w 条中文内容，每条长度 100 汉字的 fts5 的表查询三个词，&lt;code&gt;optimize&lt;/code&gt;状态下耗时&lt;code&gt;2.9ms&lt;/code&gt;，分别限制每个&lt;code&gt;level&lt;/code&gt;的&lt;code&gt;segment&lt;/code&gt;数量为&lt;code&gt;2&lt;/code&gt;、&lt;code&gt;3&lt;/code&gt;、&lt;code&gt;4&lt;/code&gt;时的查询耗时分别为&lt;code&gt;4.7ms&lt;/code&gt;、&lt;code&gt;8.9ms&lt;/code&gt;、&lt;code&gt;15ms&lt;/code&gt;。100w 条内容每次写入 100 条的情况下，按照 WCDB 的方案执行&lt;code&gt;merge&lt;/code&gt;的耗时在&lt;code&gt;10s&lt;/code&gt;内。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用自动&lt;code&gt;Merge&lt;/code&gt;机制，可以在不影响索引更新性能的情况下，将 FTS5 索引保持在最接近&lt;code&gt;Optimize&lt;/code&gt;的状态，提高了搜索速度。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、分词器优化&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分词器性能优化&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分词器是全文搜索的关键模块，它实现将输入内容拆分成多个&lt;code&gt;Token&lt;/code&gt;并提供这些&lt;code&gt;Token&lt;/code&gt;的位置，搜索引擎再对这些&lt;code&gt;Token&lt;/code&gt;建立索引。SQLite 的 FTS 组件支持自定义分词器，可以按照业务需求实现自己的分词器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分词器的分词方法可以分为按字分词和按词分词。前者只是简单对输入内容逐字建立索引，后者则需要理解输入内容的语义，对有具体含义的词组建立索引。相比于按字分词，按词分词的优势是既可以减少建索引的&lt;code&gt;Token&lt;/code&gt;数量，也可以减少搜索时匹配的&lt;code&gt;Token&lt;/code&gt;数量，劣势是需要理解语义，而且用户输入的词不完整时也会有搜不到的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了简化客户端逻辑和避免用户漏输内容时搜不到的问题，iOS 微信之前的 FTS3 分词器&lt;code&gt;OneOrBinaryTokenizer&lt;/code&gt;是采用了一种巧妙的按字分词算法，除了对输入内容逐字建索引，还会对内容中每两个连续的字建索引，对于搜索内容则是按照每两个字进行分词。下面是一个用“北京欢迎你”去搜索相同内容的分词例子：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4675925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDFqwtWZMksYza8OX2IhyD7MJRPSfvalaHicBupWVCdXoQ8ibgAdgYjdSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相比于简单的按字分词，这种分词方式的优势是可以将搜索时匹配的&lt;code&gt;Token&lt;/code&gt;数量接近降低一半，提高搜索速度，而且在一定程度上可以提升搜索精度，比如搜索“欢迎你北京”就匹配不到“北京欢迎你”；这种分词方式的劣势就是保存的索引内容很多，基本输入内容的每个字都在索引中保存了三次，是一种用空间换时间的做法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为&lt;code&gt;OneOrBinaryTokenizer&lt;/code&gt;用接近三倍的索引内容增长才换取不到两倍的搜索性能提升，不是很划算，所以我们在 FTS5 上重新开发了一种新的分词器&lt;code&gt;VerbatimTokenizer&lt;/code&gt;，这个分词器只采用基本的按字分词，不保存冗余索引内容。同时在搜索时，每两个字用引号引起来组成一个&lt;code&gt;Phrase&lt;/code&gt;，按照 FTS5 的搜索语法，搜索时&lt;code&gt;Phrase&lt;/code&gt;中的字要按顺序相邻出现的内容才会命中，实现了跟&lt;code&gt;OneOrBinaryTokenizer&lt;/code&gt;一样的搜索精度。&lt;code&gt;VerbatimTokenizer&lt;/code&gt;的分词规则示意图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDgAj3rVftldjFf0SYZwP3wrh9fuytcicuTPjbibUOGUUoRpYsB81mCN4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;分词器能力扩展&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VerbatimTokenizer 还根据微信实际的业务需求实现了五种扩展能力来提高搜索的容错能力：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;支持在分词时将繁体字转换成简体字。这样用户可以用繁体字搜到简体字内容，用简体字也能搜到繁体字内容，避免了因为汉字的简体和繁体字形相近导致用户输错的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持 Unicode 归一化。Unicode 支持相同字形的字符用不同的编码来表示，比如编码为&lt;code&gt;\ue9&lt;/code&gt;的&lt;code&gt;é&lt;/code&gt;和编码为&lt;code&gt;\u65\u301&lt;/code&gt;的&lt;code&gt;é&lt;/code&gt;有相同的字形，这会导致用户用看上去一样的内容去搜索结果搜不到的问题。Unicode 归一化就是把字形相同的字符用同一个编码表示。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持过滤符号。大部分情况下，我们不需要支持对符号建索引，符号的重复量大而且用户一般也不会用符号去搜索内容，但是联系人搜索这个业务场景需要支持符号搜索，因为用户的昵称里面经常出现颜文字，符号的使用量不低。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持用&lt;code&gt;Porter Stemming&lt;/code&gt;算法对英文单词取词干。取词干的好处是允许用户搜索内容的单复数和时态跟命中内容不一致，让用户更容易搜到内容。但是取词干也有弊端，比如用户要搜索的内容是“happyday”，输入“happy”作为前缀去搜索却会搜不到，因为“happyday”取词干变成“happydai”，“happy”取词干变成“happi”，后者就不能成为前者的前缀。这种 badcase 在内容为多个英文单词拼接一起时容易出现，联系人昵称的拼接英文很常见，所以在联系人的索引中没有取词干，在其他业务场景中都用上了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持将字母全部转成小写。这样用户可以用小写搜到大写，反之亦然。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些扩展能力都是对建索引内容和搜索内容中的每个字做变换，这个变换其实也可以在业务层做，其中的 Unicode 归一化和简繁转换以前就是在业务层实现的。但是这样做有两个弊端，一个是业务层每做一个转换都需要对内容做一次遍历，引入冗余计算量，另一个是写入到索引中的内容是转变后的内容，那么搜索出来的结果也是转变后的，会和原文不一致，业务层做内容判断的时候容易出错。鉴于这两个原因，&lt;code&gt;VerbatimTokenizer&lt;/code&gt;将这些转变能力都集中到了分词器中实现。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4、索引内容支持多级分隔符&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SQLite 的 FTS 索引表不支持在建表后再添加新列，但是随着业务的发展，业务数据支持搜索的属性会变多，如何解决新属性的搜索问题呢？特别是在联系人搜索这个业务场景，一个联系人支持搜索的字段非常多。一个直接的想法是将新属性和旧属性用分隔符拼接到一起建索引。但这样会引入新的问题，FTS5 是以整个字段的内容作为整体去匹配的，如果用户搜索匹配的&lt;code&gt;Token&lt;/code&gt;在不同的属性，那这条数据也会命中，这个结果显然不是用户想要的，搜索结果的精确度就降低了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要搜索匹配的&lt;code&gt;Token&lt;/code&gt;中间不存在分隔符，那这样可以确保匹配的&lt;code&gt;Token&lt;/code&gt;都在一个属性内。同时，为了支持业务灵活扩展，还需要支持多级分隔符，而且搜索结果中还要支持获取匹配结果的层级、位置以及该段内容的原文和匹配词。这个能力 FTS5 还不没有，而 FTS5 的自定义辅助函数支持在搜索时获取到所有命中结果中每个命中&lt;code&gt;Token&lt;/code&gt;的位置，利用这个信息可以推断出这些&lt;code&gt;Token&lt;/code&gt;中间有没有分隔符，以及这些&lt;code&gt;Token&lt;/code&gt;所在的层级，所以我们开发了&lt;code&gt;SubstringMatchInfo&lt;/code&gt;这个新的 FTS5 搜索辅助函数来实现这个能力。这个函数的大致执行流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.44351851851851853&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDosicBZBmpXNpIjt4AoKt1cKgRaTypP1NfIMeQrdMZmey99qu77yqAxw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;三、全文搜索应用逻辑优化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、数据库表格式优化&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.1 非文本搜索内容的保存方式&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际应用中，我们除了要在数据库中保存需要搜索的文本的 FTS 索引，还需要额外保存这个文本对应的业务数据的&lt;code&gt;id&lt;/code&gt;、用于结果排序的的属性（常见的是业务数据的创建时间）以及其他需要直接跟随搜索结果读出的内容，这些都是不参与文本搜索的内容。根据非文本搜索内容的不同存储位置，我们可以将 FTS 索引表的表格式分成两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第一种方式是将非文本搜索内容存储在额外的普通表中，这个表保存 FTS 索引的&lt;code&gt;Rowid&lt;/code&gt;和非文本搜索内容的映射关系，而 FTS 索引表的每一行只保存可搜索的文本内容，这个表格式类似于这样：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30277777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDJibiaHM3pdM4TQVl8ia3IaiaMHAW6d62egp5v0DH6TBr7TNP3EBmHjhzQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种表格式的优势是 FTS 索引表的内容很简单，不熟悉 FTS 索引表配置的同学不容易出错，而且普通表的可扩展性好，支持添加新列；劣势则是搜索时需要先用 FTS 索引的&lt;code&gt;Rowid&lt;/code&gt;读取到普通表的&lt;code&gt;Rowid&lt;/code&gt;，这样才能读取到普通表的其他内容，搜索速度慢一点，而且搜索时需要联表查询，搜索 SQL 语句稍微复杂一点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;第二种方式是将非文本搜索内容直接和可搜索文本内容一起存储在 FTS 索引表中，表格式类似于这样：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.14907407407407408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDotEb72F2BXJRfQ8kUdib0xYkT0Ol00tCLt02DMzFhdpuFPhPscJkwyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的优劣势跟前一种方式恰好相反，优势是搜索速度快而且搜索方式简单，劣势是扩展性差且需要更细致的配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 iOS 微信以前是使用第二种表格式，而且微信的搜索业务已经稳定不会有大变化，我们现在更加追求搜索速度，所以我们还是继续使用第二种表格式来存储全文搜索的数据。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.2 避免冗余索引内容&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FTS 索引表默认对表中的每一列的内容都建倒排索引，即便是数字内容也会按照文本来处理，这样会导致我们保存在 FTS 索引表中的非文本搜索内容也建了索引，进而增大索引文件的大小、索引更新的耗时和搜索的耗时，这显然不是我们想要的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;FTS5 支持给索引表中的列添加&lt;code&gt;UNINDEXED&lt;/code&gt;约束，这样 FTS5 就不会对这个列建索引了，所以给可搜索文本内容之外的所有列添加这个约束就可以避免冗余索引。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.3 降低索引内容的大小&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到，倒排索引主要保存文本中每个&lt;code&gt;Token&lt;/code&gt;对应的行号（&lt;code&gt;rowid&lt;/code&gt;）、列号和字段中的每次出现的位置偏移，其中的行号是 SQLite 自动分配的，位置偏移是根据业务的实际内容，这两个我们都决定不了，但是列号是可以调整的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 FTS5 索引中，一个&lt;code&gt;Token&lt;/code&gt;在一行中的索引内容的格式是这样的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08333333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDxvOzrjKib6vrfFc3JY4sNYVOewRwg7MUEibOqorOP9iaxw1FKB2U0rpVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从中可以看出，如果我们把可搜索文本内容设置在第一列的话（多个可搜索文本列的话，把内容多的列放到第一列），就可以少保存列分割符&lt;code&gt;0x01&lt;/code&gt;和列号，这样可以明显降低索引文件大小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们最终的表格式是这样：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1537037037037037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDDlBA0LibXRGWicvjmLaU8u6bXicyMrd4jOKpp96RxJy84JISibtUXJUJKw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.4 索引文件大小优化数据&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是 iOS 微信优化前后的平均每个用户的索引文件大小对比：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDs2814skvNv05RZYHPsSLCEhHvNpiboVTubaicGhVE5FWRUPQxTAgFPuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、索引更新逻辑优化&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了将全文搜索逻辑和业务逻辑解耦，iOS 微信的 FTS 索引是不保存在各个业务的数据库中的，而是集中保存到一个专用的全文搜索数据库，各个业务的数据有更新之后再异步通知全文搜索模块更新索引。整体流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7325141776937618&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDG6OLoic1Wz0ia93AI2vicLh8byt9iaxlqRom8vSg6ODdNmzJYfJzibbpnHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1058&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样做既可以避免索引更新拖慢业务数据更新的速度，也能避免索引数据更新出错甚至索引数据损坏对业务造成影响，让全文搜索功能模块能够充分独立。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.1 保证索引和数据的一致&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务数据和索引数据分离且异步同步的好处很多，但实现起来也很难，最难的问题是如何保证业务数据和索引数据的一致，也即要保证业务数据和索引数据要逐条对应，不多不少。曾经 iOS 微信在这里踩了很多坑，打了很多补丁都不能完整解决这个问题，我们需要一个更加体系化的方法来解决这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了简化问题，我们可以把一致性问题可以拆成两个方面分别处理，一个是保证所有业务数据都有索引，这个用户的搜索结果就不会有缺漏；第二个是保证所有索引都对应一个有效的业务数据，这样用户就不会搜到无效的结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要保证所有业务数据都有索引，首先要找到或者构造一种一直增长的数据来描述业务数据更新的进度，这个进度数据的更新和业务数据的更新能保证原子性，而且根据这个进度的区间能拿出业务数据更新的内容，这样我们就可以依赖这个进度来更新索引。在微信的业务中，不同业务的进度数据不同，聊天记录是使用消息的&lt;code&gt;rowid&lt;/code&gt;，收藏是使用收藏跟后台同步的&lt;code&gt;updateSequence&lt;/code&gt;，而联系人找不到这种一直增长的进度数据，我们是通过在联系人数据库中标记有新增或有更新的联系人的微信号来作为索引更新进度。进度数据的使用方法如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDa1oOzrQSGEGSj2qDW3sVXoh4J1ybE5ZI4Zh1iawhLSiaiaick3loOGPCfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论业务数据是否保存成功、更新通知是否到达全文搜索模块、索引数据是否保存成功，这套索引更新逻辑都能保证保存成功的业务数据都能成功建到索引。这其中的一个关键点是&lt;strong&gt;数据和进度要在同个事务中一起更新，而且要保存在同个数据库中&lt;/strong&gt;，这样才能保证数据和进度的更新的原子性（WCDB 创建的数据库因为使用&lt;code&gt;WAL&lt;/code&gt;模式而无法保证不同数据库的事务的原子性）。还有一个操作图中没有画出，具体是微信启动时如果检查到业务进度小于索引进度，这种一般意味着业务数据损坏后被重置了，这种情况下要删掉索引并重置索引进度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于每个索引都对应有效的业务数据，这就要求业务数据删除之后索引也要必须删掉。现在业务数据的删除和索引的删除是异步的，会出现业务数据删掉之后索引没删除的情况。这种情况会导致两个问题，一个是冗余索引会导致搜索速度变慢，但这个问题出现概率很小，这个影响可以忽略不计；第二个问题是会导致用户搜到无效数据，这个是要避免的。因为要完全删掉所有无效索引成本比较高，所以我们采用了惰性检查的方法来解决这个问题，具体做法是搜索结果要显示给用户时，才检查这个数据是否有效，无效的话不显示这个搜索结果并异步删除对应的索引。因为用户一屏能看到的数据很少，所以检查逻辑带来的性能消耗也可以忽略不计。而且这个检查操作实际上也不算是额外加的逻辑，为了搜索结果展示内容的灵活性，我们也要在展示搜索结果时读出业务数据，这样也就顺带做了数据有效性的检查。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6462962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDAvFHcaDrKGMPGLVMmGcdXldI7Tofc03ic6DpswavCOPA46wz7RkAeuQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.2 建索引速度优化&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索引只有在搜索的时候才会用到，它的更新优先级并没有业务数据那么高，可以尽量攒更多的业务数据才去批量建索引。批量建索引有以下三个好处：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;减少磁盘的写入次数，提高平均建索引速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在一个事务中，建索引 SQL 语句的解析结果可以反复使用，可以减少 SQL 语句的解析次数，进而提高平均建索引速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;减少生成 Segment 的数量，从而减少&lt;code&gt;Merge Segment&lt;/code&gt;带来的读写消耗。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，也不能保留太多业务数据不建索引，这样用户要搜索时会来不及建索引，从而导致搜索结果不完整。有了前面的&lt;code&gt;Segment&lt;/code&gt;自动&lt;code&gt;Merge&lt;/code&gt;机制，索引的写入速度非常可控，只要控制好量，就不用担心批量建索引带来的高耗时问题。我们综合考虑了低端机器的建索引速度和搜索页面的拉起时间，确定了最大批量建索引数据条数为 100 条。同时，我们会在内存中 cache 本次微信运行期间产生的未建索引业务数据，在极端情况下给没有来得及建索引的业务数据提供相对内存搜索，保证搜索结果的完整性。因为 cache 上一次微信运行期间产生的未建索引数据需要引入额外的磁盘 IO，所以微信启动后会触发一次建索引逻辑，对现有的未建索引业务数据建一次索引。总结一下触发建索引的时机有三个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;未建索引业务数据达到 100 条。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进入搜索界面。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微信启动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.3 删除索引速度优化&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;索引的删除速度经常是设计索引更新机制时比较容易忽视的因素，因为被删除的业务数据量容易被低估，会被误以为是低概率场景，但实际被用户删除的业务数据可能会达到 50%，是个不可忽视的主场景。而且 SQLite 是不支持并行写入的，删除索引的性能也会间接影响到索引的写入速度，会为索引更新引入不可控因素。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为删除索引的时候是拿着业务数据的 id 去删除的，所以提高删除索引速度的方式有两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;建一个业务数据&lt;code&gt;id&lt;/code&gt;到 FTS 索引的&lt;code&gt;rowid&lt;/code&gt;的普通索引。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在 FTS 索引表中去掉业务数据&lt;code&gt;Id&lt;/code&gt;那一列的&lt;code&gt;UNINDEXED&lt;/code&gt;约束，给业务数据&lt;code&gt;Id&lt;/code&gt;添加倒排索引。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里倒排索引其实没有普通索引那么高效，有两个原因：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;倒排索引相比普通索引还带了很多额外信息，搜索效率低一些。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果需要多个业务字段才能确定一条倒排索引时，倒排索引是建不了联合索引的，只能匹配其中一个业务字段，其他字段就是遍历匹配，这种情况搜索效率会很低。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.4 索引更新性能优化数据&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聊天记录的优化前后索引性能数据如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDK587eyLn0fkAM7CciafRwyTQ7NhONN3gwpor7ZFSdkZUUMfMlzy2iaDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDLYf2uftrGMZTOMsLW2CAQZyqA6yHMNicDjhuYZJibsicSPcDxImlVc05w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDXOUCUAnf2NTPomGgicgW743DVTpLXxshJsfx1D1Jo72icpve3Yx240pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;收藏的优化前后索引性能数据如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDoLdlWVE0OcF60uTCKCzr2v4XnTL9yqgyYy7ibqBWX3Qd9yiaFhnMQ6Rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDpaqht27fZhnLLle0QDyI2dJhM5WAvicVrWicNEE5nAhq5EZka1vVDC3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvD5Y42vfU3twCNel6fKk6hfsy2JYw9SpOeklEtQeBy8njncFNUpZgSqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3、搜索逻辑优化&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户在 iOS 微信的首页输入内容搜索时，搜索的整体流程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2953703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDB2goHpNq103voYqQG07jRAS8RiaSOK6V7JN5qVgSEgcMCexvJsick4Hw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户变更搜索框的内容之后，会并行发起所有业务的搜索任务，各个搜索任务执行完之后才再将搜索结果返回到主线程给页面展示。这个逻辑会随着用户变更搜索内容而继续重复。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.1 单个搜索任务支持并行执行&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然现在不同搜索任务已经支持并行执行，但是不同业务的数据量和搜索逻辑差别很大，数据量大或者搜索逻辑复杂的任务耗时会很久，这样还不能充分发挥手机的并行处理能力。我们还可以将并行处理能力引入单个搜索任务内，这里有两种处理方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对于搜索数据量大的业务（比如聊天记录搜索），可以将索引数据&lt;strong&gt;均分&lt;/strong&gt;存储到多个 FTS 索引表（注意这里不均分的话还是会存在短板效应），这样搜索时可以并行搜索各个索引表，然后汇总各个表的搜索结果，再进行统一排序。这里拆分的索引表数量既不能太多也不能太少，太多会超出手机实际的并行处理能力，也会影响其他搜索任务的性能，太少又不能充分利用并行处理能力。以前微信用了十个 FTS 表存储聊天记录索引，现在改为使用四个 FTS 表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于搜索逻辑复杂的业务（比如联系人搜索），可以将可独立执行的搜索逻辑并行执行。比如在联系人搜索任务中，我们将联系人的普通文本搜索、拼音搜索、标签和地区的搜索、多群成员的搜索并行执行，搜完之后再合并结果进行排序。这里为什么不也用拆表的方式呢？因为这种搜索结果数量少的场景，搜索的耗时主要是集中在搜索索引的环节，索引可以看做一颗 B 树，将一颗 B 树拆分成多个，搜索耗时并不会成比例下降。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.2 搜索任务支持中断&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户在搜索框持续输入内容的过程中可能会自动多次发起搜索任务，如果在前一次发起的搜索任务还没执行完时，就再次发起搜索任务，那前后两次搜索任务就会互相影响对方性能。这种情况在用户输入内容从短到长的过程中还挺容易出现的，因为搜索文本短的时候命中结果就很多，搜索任务也就更加耗时，从而更有机会撞上后面的搜索任务。太多任务同时执行还会容易引起手机发烫、爆内存的问题。所以我们需要让搜索任务支持随时中断，这样就可以在后一次搜索任务发起的时候，能够中断前一次的搜索任务，避免任务量过多的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搜索任务支持中断的实现方式是给每个搜索任务设置一个&lt;code&gt;CancelFlag&lt;/code&gt;，在搜索逻辑执行时每搜到一个结果就判断一下&lt;code&gt;CancelFlag&lt;/code&gt;是否置位，如果置位了就立即退出任务。外部逻辑可以通过置位&lt;code&gt;CancelFlag&lt;/code&gt;来中断搜索任务。逻辑流程如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.551654964894684&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDyCx6eOK3tWWNveI2pKB1Qus97CI3d9qSxeZ9LZC88icia6ia9eticDexcg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;997&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了让搜索任务能够及时中断，我们需要让检查&lt;code&gt;CancelFlag&lt;/code&gt;的时间间隔尽量相等，要实现这个目标就要在搜索时&lt;strong&gt;避免使用 OrderBy 子句&lt;/strong&gt;对结果进行排序。因为 FTS5 不支持建立联合索引，所以在使用&lt;code&gt;OrderBy&lt;/code&gt;子句时，SQLite 在输出第一个结果前会遍历所有匹配结果进行排序，这就让输出第一个结果的耗时几乎等于输出全部结果的耗时，中断逻辑就失去了意义。不使用&lt;code&gt;OrderBy&lt;/code&gt;子句就对搜索逻辑添加了两个限制：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;从数据库读取所有结果之后再排序。我们可以在读取结果时将用于排序的字段一并读出，然后在读完所有结果之后再对所有结果执行排序。因为排序的耗时占总搜索耗时的比例很低，加上排序算法的性能大同小异，这种做法对搜索速度的影响可以忽略。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不能使用分段查询。在全文搜索这个场景中，分段查询其实是没有什么作用的。因为分段查询就要对结果排序，对结果排序就要遍历所有结果，所以分段查询并不能降低搜索耗时（除非按照 FTS 索引的&lt;code&gt;Rowid&lt;/code&gt;分段查询，但是&lt;code&gt;Rowid&lt;/code&gt;不包含实际的业务信息）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.3 搜索读取内容最少化&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搜索时读取内容的量也是决定搜索耗时的一个关键因素。FTS 索引表实际是有多个 SQLite 普通表组成的，这其中一些表格存储实际的倒排索引内容，还有一个表格存储用户保存到 FTS 索引表的全部原文。当搜索时读取&lt;code&gt;Rowid&lt;/code&gt;以外的内容时，就需要用&lt;code&gt;Rowid&lt;/code&gt;到保存原文的表的读取内容，索引表输出结果的内部执行过程如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6861111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDbp8GWhfYohOPZyZOmOnnYOqZib6SlzWRFqCzKvZqZT2MzDH2cQbSg5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以读取内容越少输出结果的速度越快，而且读取内容过多也会有消耗内存的隐患。我们采用的方式是搜索时只读取&lt;strong&gt;业务数据 id 和用于排序的业务属性&lt;/strong&gt;，排好序之后，在需要给用户展示结果时，才用业务数据 id 按需读取业务数据具体内容出来展示。这样做的扩展性也会很好，可以在不更改存储内容的情况下，根据各个业务的需求不断调整搜索结果展示的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里还有一个要特别提一下的地方，就是搜索时尽量不要读取高亮信息（SQLite 的&lt;code&gt;highlight&lt;/code&gt;函数有这个能力）。因为要获取高亮字段不仅要将文本的原文读取出来，还要对文本原文再次分词，才能定位命中位置的原文内容，搜索结果多的情况下分词带来的消耗非常明显。那展示搜索结果时如何获取高亮匹配内容呢？我们采用的方式是将用户的搜索文本进行分词，然后在展示结果时查找每个&lt;code&gt;Token&lt;/code&gt;在展示文本中的位置，然后将那个位置高亮显示。同样因为用户一屏看到的结果数量是很少的，这里的高亮逻辑带来的性能消耗可以忽略。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然在搜索规则很复杂的情况下，直接读取高亮信息是比较方便，比如联系人搜索就使用前面提到的&lt;code&gt;SubstringMatchInfo&lt;/code&gt;函数来读取高亮内容。这里主要还是因为要读取匹配内容所在的层级和位置用于排序，所以逐个结果重新分词的操作在所难免。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.4 搜索性能优化数据&lt;/span&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是微信各搜索业务优化前后的搜索耗时对比：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDqWsYx5J9tuJNvTXKRgicLslzel2wibdnSmicibFbMbvJF7bM53DxwPiatiaQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvD3zB0YQSE4a2zcVIJntbAnEvdxd9lLABicTkolQrpbx5BON1w1pwlGicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41759259259259257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDEPUuRc4zKhmjBlHWH6JdYAvY5TN18GNCMGibIvHAuFbWqDS6ffLIjSw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前 iOS 微信已经将这套新全文搜索技术方案全量应用到聊天记录、联系人和收藏的搜索业务中。使用新方案之后，全文搜索的索引文件占用空间更小，索引更新耗时更少，搜索速度也更快了，可以说全文搜索的性能得到了全方位提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvavBv9MGGkUBFKMdFezeZMvDePx3eR0OribIB2oF1ZxTVaqEGXZcicaoKPKR9YteaVibf65r4mFrmbz0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;近期其他好文&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649768568&amp;amp;idx=1&amp;amp;sn=68dc084a79407a41762f8705b28e1257&amp;amp;chksm=beccd10389bb5815ae094ed7423a32f421fd143d724cbf0330efaeaf0382e683e575e6350f30&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;在鹅厂工作1到11年的程序媛&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;在鹅厂工作1到11年的程序媛&lt;/a&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649768568&amp;amp;idx=1&amp;amp;sn=68dc084a79407a41762f8705b28e1257&amp;amp;chksm=beccd10389bb5815ae094ed7423a32f421fd143d724cbf0330efaeaf0382e683e575e6350f30&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;在鹅厂工作1到11年的程序媛&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649769049&amp;amp;idx=1&amp;amp;sn=b8ac0e6409b073758fa0bbcde1acd952&amp;amp;chksm=beccd72289bb5e34bacb76669650d8ebb70563fb35b381f452f20c62b86968f2efbeb98d8337&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;技术她力量，鹅厂女博士的寻“豹”之旅&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;技术她力量，鹅厂女博士的寻“豹”之旅&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;amp;mid=2649769105&amp;amp;idx=1&amp;amp;sn=c68d5174bb243701d69edc80ef5c04ea&amp;amp;chksm=beccd7ea89bb5efcbd7866c77edd91f9d5a67090bae678a4f1b6f7204f12d75abb486ed5903a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一致性 Hash 算法原理总结&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;一致性 Hash 算法原理总结&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAgDAS3gDsiAAAAAstQy6ubaLX4KHWvLEZgBPE8KIMcXtxZL38zNPgMIvt27oRctxLQngBmm2RSmIU&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=rjD5jyTuFrIpZ2ibE8T7YmwgiahniaXswqz4S6B63dgPBSkQM1Pibkk08bsnRVMG0MKAZ26U5ESqSNFtReXFxmYaalxffR57exzXKicibmO91qDTVFBh9zBPSEAA&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=&amp;amp;scene=0&amp;amp;token=x5Y29zUxcibDbB4myRhaBTYaSsr6TicIbcBw1o3Ue6xBCnib9Kg7ktR26axA7ICONFIQM4U0DJhI3o&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xESOBAfIZ8xQ9ApXt4uTe8po/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;我的程序媛同事们，节日快乐~&amp;#10;&amp;#10;#不被定义的她 #程序媛 #女性 &amp;#10;&quot; data-nonceid=&quot;6143725764114518706&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9133f6c2ff5c2f8ee3b1758290a21936</guid>
<title>大厂中层“再就业”难；我的命令行开发环境；第一个五年，快速到P7获取年薪50w｜码农周刊VIP会员专属邮件周报 Vol.083</title>
<link>https://toutiao.io/k/qtrl966</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MzA0ODkyMA==&amp;amp;action=getalbum&amp;amp;album_id=2218111508427898886#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2218111508427898886&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#码农周刊&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;8个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;以下内容节选自「码农周刊VIP会员专属邮件周报 Vol.083」，查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;2022年六大科创趋势&lt;/strong&gt;，供参考。&lt;br/&gt;1）&lt;strong&gt;碳中和&lt;/strong&gt;：减排将成为个人KPI；&lt;br/&gt; 2）&lt;strong&gt;新能源车&lt;/strong&gt;：原料诚可贵，技术、设施更重要； &lt;br/&gt;3）&lt;strong&gt;半导体&lt;/strong&gt;：缺芯，永远的主题；&lt;br/&gt; 4）&lt;strong&gt;生物医药&lt;/strong&gt;：国产创新药还能抢救下；&lt;br/&gt; ……&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibDWPlX53nSoWdR0lgcuZJov30edIeUyb4Fy6ZIWPYPptjL2icpt6vkib0ibaR0aDebHCMlbjGcRxPIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;strong&gt;雷军，抛弃了“兄弟”&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://mp.weixin.qq.com/s/4DuW4rxA_wtpQ2RaMLVQ4g&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;小米生态链，一座“围城”。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;大厂中层“再就业”：路难选，意难平&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;&lt;span&gt;https://mp.weixin.qq.com/s/IdBwKC_FuXO8D_8V3PBD4A&lt;/span&gt;&lt;/em&gt;&lt;br/&gt;中层职业新选择，在一定程度上成为反映行业变动的风向标。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;快手OneService平台架构设计与实践&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/dan1u1w&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;业界实战&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;大型网络游戏任务系统的架构与设计&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/fi7mzll&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;经验分享&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;阿里巴巴开源的低代码设计器研发框架&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://github.com/alibaba/lowcode-engine&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;不是一套可以适合所有人的低代码平台，而是帮助低代码平台的开发者，快速生产低代码平台的工具。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;字节跳动开源的敏感数据保护工具集&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://github.com/bytedance/godlp&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;包括敏感数据识别算法，数据脱敏处理方式，业务自定义的配置选项和海量数据处理能力。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;一文掌握Go语言的泛型&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/3fdrlea&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;Go 泛型初步&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;浅谈 Node.js 热更新&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;https://toutiao.io/k/i82qqok&lt;/em&gt;&lt;br/&gt;详细介绍&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;我的命令行开发环境&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/hjda293&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;一些神器&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;第一个五年，快速到P7获取年薪50w&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;https://toutiao.io/k/c712tyc&lt;/em&gt;&lt;/span&gt;&lt;br/&gt;个人经验&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dbfafd70f269d8212fcd53f457920fd8</guid>
<title>前端大佬都在使用的JavaScript工具函数宝典（内含95个工具函数）</title>
<link>https://toutiao.io/k/2yey7b2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/L6sDbkjtyzGJW2cHM8TaktMUhCuGW8VKQGSMmMmGtpzcnH0ib8yMIMibHCMYhFeQv6Pjg3ibDO86WUvVAr6mbcgvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01 为元素添加on方法&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Element.prototype.&lt;span&gt;on&lt;/span&gt; = Element.prototype.addEventListener;&lt;br/&gt;NodeList.prototype.&lt;span&gt;on&lt;/span&gt; = function (&lt;span&gt;event&lt;/span&gt;, fn) {、&lt;br/&gt;    [&lt;span/&gt;][&lt;span&gt;&#x27;forEach&#x27;&lt;/span&gt;].call(&lt;span&gt;this&lt;/span&gt;, function (el) {&lt;br/&gt;        el.&lt;span&gt;on&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;, fn);&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;02 为元素添加trigger方法&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Element.prototype.trigger = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;type, data&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; event = &lt;span&gt;document&lt;/span&gt;.createEvent(&lt;span&gt;&quot;HTMLEvents&quot;&lt;/span&gt;);&lt;br/&gt;  event.initEvent(type, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;  event.data = data || {};&lt;br/&gt;  event.eventName = type;&lt;br/&gt;  event.target = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.dispatchEvent(event);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;NodeList.prototype.trigger = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  [][&lt;span&gt;&quot;forEach&quot;&lt;/span&gt;].call(&lt;span&gt;this&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;el&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    el[&lt;span&gt;&quot;trigger&quot;&lt;/span&gt;](event);&lt;br/&gt;  });&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;03 转义html标签&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;HtmlEncode&lt;/span&gt;(&lt;span&gt;text&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; text&lt;br/&gt;    .replace(&lt;span&gt;/&amp;amp;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt;)&lt;br/&gt;    .replace(&lt;span&gt;/\&quot;/g&lt;/span&gt;, &lt;span&gt;&#x27;&quot;&#x27;&lt;/span&gt;)&lt;br/&gt;    .replace(&lt;span&gt;/&amp;lt;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;lt;&quot;&lt;/span&gt;)&lt;br/&gt;    .replace(&lt;span&gt;/&amp;gt;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;gt;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;04 HTML标签转义&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// HTML 标签转义&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// @param {Array.&amp;lt;DOMString&amp;gt;} templateData 字符串类型的tokens&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// @param {...} ..vals 表达式占位符的运算结果tokens&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;SaferHTML&lt;/span&gt;(&lt;span&gt;templateData&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; s = templateData[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; &lt;span&gt;arguments&lt;/span&gt;.length; i++) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; arg = &lt;span&gt;String&lt;/span&gt;(&lt;span&gt;arguments&lt;/span&gt;[i]);&lt;br/&gt;    &lt;span&gt;// Escape special characters in the substitution.&lt;/span&gt;&lt;br/&gt;    s += arg&lt;br/&gt;      .replace(&lt;span&gt;/&amp;amp;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt;)&lt;br/&gt;      .replace(&lt;span&gt;/&amp;lt;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;lt;&quot;&lt;/span&gt;)&lt;br/&gt;      .replace(&lt;span&gt;/&amp;gt;/g&lt;/span&gt;, &lt;span&gt;&quot;&amp;gt;&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;// Don&#x27;t escape special characters in the template.&lt;/span&gt;&lt;br/&gt;    s += templateData[i];&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; html = SaferHTML&lt;span&gt;`&amp;lt;p&amp;gt;这是关于字符串模板的介绍&amp;lt;/p&amp;gt;`&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;05 跨浏览器绑定事件&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addEventSamp&lt;/span&gt;(&lt;span&gt;obj, evt, fn&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!oTarget) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (obj.addEventListener) {&lt;br/&gt;    obj.addEventListener(evt, fn, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (obj.attachEvent) {&lt;br/&gt;    obj.attachEvent(&lt;span&gt;&quot;on&quot;&lt;/span&gt; + evt, fn);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    oTarget[&lt;span&gt;&quot;on&quot;&lt;/span&gt; + sEvtType] = fn;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;06 加入收藏夹&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addFavorite&lt;/span&gt;(&lt;span&gt;sURL, sTitle&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.external.addFavorite(sURL, sTitle);&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;window&lt;/span&gt;.sidebar.addPanel(sTitle, sURL, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;      alert(&lt;span&gt;&quot;加入收藏失败，请使用Ctrl+D进行添加&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;07 提取页面代码中所有网址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;var aa = document.documentElement.outerHTML&lt;br/&gt;  .match(&lt;br/&gt;    /(url\(|src=|href=)[\&quot;\&lt;span&gt;&#x27;]*([^\&quot;\&#x27;&lt;/span&gt;\(\)\&amp;lt;\&amp;gt;\[\] ]+)[\&quot;\&lt;span&gt;&#x27;\)]*|(http:\/\/[\w\-\.]+[^\&quot;\&#x27;&lt;/span&gt;\(\)\&amp;lt;\&amp;gt;\[\] ]+)/gi&lt;br/&gt;  )&lt;br/&gt;  .join(&lt;span&gt;&quot;\r\n&quot;&lt;/span&gt;)&lt;br/&gt;  .replace(/^(src=|href=|url\()[\&quot;\&lt;span&gt;&#x27;]*|[\&quot;\&#x27;&lt;/span&gt;\&amp;gt;\) ]*$/gim, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;alert(aa);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;08 动态加载脚本文件&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;appendscript&lt;/span&gt;(&lt;span&gt;src, text, reload, charset&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; id = hash(src + text);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!reload &amp;amp;&amp;amp; in_array(id, evalscripts)) &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (reload &amp;amp;&amp;amp; $(id)) {&lt;br/&gt;    $(id).parentNode.removeChild($(id));&lt;br/&gt;  }&lt;br/&gt;  evalscripts.push(id);&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; scriptNode = &lt;span&gt;document&lt;/span&gt;.createElement(&lt;span&gt;&quot;script&quot;&lt;/span&gt;);&lt;br/&gt;  scriptNode.type = &lt;span&gt;&quot;text/javascript&quot;&lt;/span&gt;;&lt;br/&gt;  scriptNode.id = id;&lt;br/&gt;  scriptNode.charset = charset&lt;br/&gt;    ? charset&lt;br/&gt;    : BROWSER.firefox&lt;br/&gt;    ? &lt;span&gt;document&lt;/span&gt;.characterSet&lt;br/&gt;    : &lt;span&gt;document&lt;/span&gt;.charset;&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (src) {&lt;br/&gt;      scriptNode.src = src;&lt;br/&gt;      scriptNode.onloadDone = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;      scriptNode.onload = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;        scriptNode.onloadDone = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        JSLOADED[src] = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;      };&lt;br/&gt;      scriptNode.onreadystatechange = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;br/&gt;          (scriptNode.readyState == &lt;span&gt;&quot;loaded&quot;&lt;/span&gt; ||&lt;br/&gt;            scriptNode.readyState == &lt;span&gt;&quot;complete&quot;&lt;/span&gt;) &amp;amp;&amp;amp;&lt;br/&gt;          !scriptNode.onloadDone&lt;br/&gt;        ) {&lt;br/&gt;          scriptNode.onloadDone = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;          JSLOADED[src] = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;      };&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (text) {&lt;br/&gt;      scriptNode.text = text;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;].appendChild(scriptNode);&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;09 返回顶部的通用方法&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;backTop&lt;/span&gt;(&lt;span&gt;btnId&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; btn = &lt;span&gt;document&lt;/span&gt;.getElementById(btnId);&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;document&lt;/span&gt;.documentElement;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;document&lt;/span&gt;.body;&lt;br/&gt;  &lt;span&gt;window&lt;/span&gt;.onscroll = &lt;span&gt;set&lt;/span&gt;;&lt;br/&gt;  btn.style.display = &quot;none&quot;;&lt;br/&gt;  btn.onclick = function() {&lt;br/&gt;    btn.style.display = &lt;span&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.onscroll = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.timer = setInterval(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;      d.scrollTop -= &lt;span&gt;Math&lt;/span&gt;.ceil((d.scrollTop + b.scrollTop) * &lt;span&gt;0.1&lt;/span&gt;);&lt;br/&gt;      b.scrollTop -= &lt;span&gt;Math&lt;/span&gt;.ceil((d.scrollTop + b.scrollTop) * &lt;span&gt;0.1&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (d.scrollTop + b.scrollTop == &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;        clearInterval(btn.timer, (&lt;span&gt;window&lt;/span&gt;.onscroll = &lt;span&gt;set&lt;/span&gt;));&lt;br/&gt;    }, 10);&lt;br/&gt;  };&lt;br/&gt;  function &lt;span&gt;set&lt;/span&gt;() {&lt;br/&gt;    btn.style.display = d.scrollTop + b.scrollTop &amp;gt; &lt;span&gt;100&lt;/span&gt; ? &lt;span&gt;&quot;block&quot;&lt;/span&gt; : &lt;span&gt;&quot;none&quot;&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;backTop(&lt;span&gt;&quot;goTop&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;10 实现base64解码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;function base64_decode(&lt;span&gt;data&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; b64 = &lt;span&gt;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; o1,&lt;br/&gt;    o2,&lt;br/&gt;    o3,&lt;br/&gt;    h1,&lt;br/&gt;    h2,&lt;br/&gt;    h3,&lt;br/&gt;    h4,&lt;br/&gt;    bits,&lt;br/&gt;    i = &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;    ac = &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;    dec = &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    tmp_arr = [];&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;data&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;data&lt;/span&gt; += &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;do&lt;/span&gt; {&lt;br/&gt;    h1 = b64.indexOf(&lt;span&gt;data&lt;/span&gt;.charAt(i++));&lt;br/&gt;    h2 = b64.indexOf(&lt;span&gt;data&lt;/span&gt;.charAt(i++));&lt;br/&gt;    h3 = b64.indexOf(&lt;span&gt;data&lt;/span&gt;.charAt(i++));&lt;br/&gt;    h4 = b64.indexOf(&lt;span&gt;data&lt;/span&gt;.charAt(i++));&lt;br/&gt;    bits = (h1 &amp;lt;&amp;lt; &lt;span&gt;18&lt;/span&gt;) | (h2 &amp;lt;&amp;lt; &lt;span&gt;12&lt;/span&gt;) | (h3 &amp;lt;&amp;lt; &lt;span&gt;6&lt;/span&gt;) | h4;&lt;br/&gt;    o1 = (bits &amp;gt;&amp;gt; &lt;span&gt;16&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;;&lt;br/&gt;    o2 = (bits &amp;gt;&amp;gt; &lt;span&gt;8&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;;&lt;br/&gt;    o3 = bits &amp;amp; &lt;span&gt;0xff&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (h3 == &lt;span&gt;64&lt;/span&gt;) {&lt;br/&gt;      tmp_arr[ac++] = String.fromCharCode(o1);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (h4 == &lt;span&gt;64&lt;/span&gt;) {&lt;br/&gt;      tmp_arr[ac++] = String.fromCharCode(o1, o2);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);&lt;br/&gt;    }&lt;br/&gt;  } &lt;span&gt;while&lt;/span&gt; (i &amp;lt; &lt;span&gt;data&lt;/span&gt;.length);&lt;br/&gt;  dec = tmp_arr.join(&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;  dec = utf8_decode(dec);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; dec;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;11 确认是否是键盘有效输入值&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;function checkKey(iKey) {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey == &lt;span&gt;32&lt;/span&gt; || iKey == &lt;span&gt;229&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*空格和异常*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;47&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;58&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*数字*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;64&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;91&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*字母*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;95&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;108&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*数字键盘1*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;108&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;112&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*数字键盘2*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;185&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;193&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*符号1*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (iKey &amp;gt; &lt;span&gt;218&lt;/span&gt; &amp;amp;&amp;amp; iKey &amp;lt; &lt;span&gt;223&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;/*符号2*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;12 全角半角转换&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;//iCase&lt;/span&gt;: &lt;span&gt;0全到半，1半到全，其他不转化&lt;/span&gt;&lt;br/&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;chgCase(sStr, iCase) {&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;sStr != &quot;string&quot; ||&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;sStr.length&lt;/span&gt; &lt;span&gt;&amp;lt;= 0 ||&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    !(iCase === 0 || iCase == 1)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;sStr;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; &lt;span&gt;i,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;oRs&lt;/span&gt; = &lt;span&gt;[],&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;iCode;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(iCase) {&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/*半-&amp;gt;全*/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(i = 0; i &amp;lt; sStr.length; i += 1) {&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;iCode&lt;/span&gt; = &lt;span&gt;sStr.charCodeAt(i);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(iCode == 32) {&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;iCode&lt;/span&gt; = &lt;span&gt;12288;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else if (iCode &amp;lt; 127) {&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;iCode&lt;/span&gt; &lt;span&gt;+= 65248;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;oRs.push(String.fromCharCode(iCode));&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else {&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/*全-&amp;gt;半*/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(i = 0; i &amp;lt; sStr.length; i += 1) {&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;iCode&lt;/span&gt; = &lt;span&gt;sStr.charCodeAt(i);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(iCode == 12288) {&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;iCode&lt;/span&gt; = &lt;span&gt;32;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else if (iCode &amp;gt; 65280 &amp;amp;&amp;amp; iCode &amp;lt; 65375) {&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;iCode&lt;/span&gt; &lt;span&gt;-= 65248;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;oRs.push(String.fromCharCode(iCode));&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;oRs.join(&quot;&quot;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;13 版本对比&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;compareVersion&lt;/span&gt;(&lt;span&gt;v1, v2&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  v1 = v1.split(&lt;span&gt;&quot;.&quot;&lt;/span&gt;);&lt;br/&gt;  v2 = v2.split(&lt;span&gt;&quot;.&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; len = &lt;span&gt;Math&lt;/span&gt;.max(v1.length, v2.length);&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (v1.length &amp;lt; len) {&lt;br/&gt;    v1.push(&lt;span&gt;&quot;0&quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (v2.length &amp;lt; len) {&lt;br/&gt;    v2.push(&lt;span&gt;&quot;0&quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; len; i++) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; num1 = &lt;span&gt;parseInt&lt;/span&gt;(v1[i]);&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; num2 = &lt;span&gt;parseInt&lt;/span&gt;(v2[i]);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (num1 &amp;gt; num2) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (num1 &amp;lt; num2) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;14 压缩CSS样式代码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;compressCss&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;//压缩代码&lt;/span&gt;&lt;br/&gt;  s = s.replace(&lt;span&gt;/\/\*(.|\n)*?\*\//g&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;); &lt;span&gt;//删除注释&lt;/span&gt;&lt;br/&gt;  s = s.replace(&lt;span&gt;/\s*([\{\}\:\;\,])\s*/g&lt;/span&gt;, &lt;span&gt;&quot;$1&quot;&lt;/span&gt;);&lt;br/&gt;  s = s.replace(&lt;span&gt;/\,[\s\.\#\d]*\{/g&lt;/span&gt;, &lt;span&gt;&quot;{&quot;&lt;/span&gt;); &lt;span&gt;//容错处理&lt;/span&gt;&lt;br/&gt;  s = s.replace(&lt;span&gt;/;\s*;/g&lt;/span&gt;, &lt;span&gt;&quot;;&quot;&lt;/span&gt;); &lt;span&gt;//清除连续分号&lt;/span&gt;&lt;br/&gt;  s = s.match(&lt;span&gt;/^\s*(\S+(\s+\S+)*)\s*$/&lt;/span&gt;); &lt;span&gt;//去掉首尾空白&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;&quot;&quot;&lt;/span&gt; : s[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;15 获取当前路径&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; currentPageUrl = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.href === &lt;span&gt;&quot;undefined&quot;&lt;/span&gt;) {&lt;br/&gt;  currentPageUrl = &lt;span&gt;document&lt;/span&gt;.location.toString().toLowerCase();&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  currentPageUrl = &lt;span&gt;this&lt;/span&gt;.href.toString().toLowerCase();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;16 字符串长度截取&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;cutstr&lt;/span&gt;(&lt;span&gt;str, len&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; temp,&lt;br/&gt;        icount = &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;        patrn = &lt;span&gt;/[^\x00-\xff]/&lt;/span&gt;，&lt;br/&gt;        strre = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; str.length; i++) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (icount &amp;lt; len - &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;            temp = str.substr(i, &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (patrn.exec(temp) == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                   icount = icount + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                icount = icount + &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;            strre += temp&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; strre + &lt;span&gt;&quot;...&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;17 时间日期格式转换&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Date.prototype.format = function(formatStr) {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; str = formatStr;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; Week = [&lt;span&gt;&quot;日&quot;&lt;/span&gt;, &lt;span&gt;&quot;一&quot;&lt;/span&gt;, &lt;span&gt;&quot;二&quot;&lt;/span&gt;, &lt;span&gt;&quot;三&quot;&lt;/span&gt;, &lt;span&gt;&quot;四&quot;&lt;/span&gt;, &lt;span&gt;&quot;五&quot;&lt;/span&gt;, &lt;span&gt;&quot;六&quot;&lt;/span&gt;];&lt;br/&gt;  str = str.replace(/yyyy|YYYY/, &lt;span&gt;this&lt;/span&gt;.getFullYear());&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /yy|YY/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getYear() % &lt;span&gt;100&lt;/span&gt; &amp;gt; &lt;span&gt;9&lt;/span&gt;&lt;br/&gt;      ? (&lt;span&gt;this&lt;/span&gt;.getYear() % &lt;span&gt;100&lt;/span&gt;).toString()&lt;br/&gt;      : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + (&lt;span&gt;this&lt;/span&gt;.getYear() % &lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /MM/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;1&lt;/span&gt; &amp;gt; &lt;span&gt;9&lt;/span&gt;&lt;br/&gt;      ? (&lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;1&lt;/span&gt;).toString()&lt;br/&gt;      : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + (&lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(/M/g, &lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;  str = str.replace(/w|W/g, Week[&lt;span&gt;this&lt;/span&gt;.getDay()]);&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /dd|DD/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getDate() &amp;gt; &lt;span&gt;9&lt;/span&gt; ? &lt;span&gt;this&lt;/span&gt;.getDate().toString() : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.getDate()&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(/d|D/g, &lt;span&gt;this&lt;/span&gt;.getDate());&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /hh|HH/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getHours() &amp;gt; &lt;span&gt;9&lt;/span&gt; ? &lt;span&gt;this&lt;/span&gt;.getHours().toString() : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.getHours()&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(/h|H/g, &lt;span&gt;this&lt;/span&gt;.getHours());&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /mm/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getMinutes() &amp;gt; &lt;span&gt;9&lt;/span&gt;&lt;br/&gt;      ? &lt;span&gt;this&lt;/span&gt;.getMinutes().toString()&lt;br/&gt;      : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.getMinutes()&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(/m/g, &lt;span&gt;this&lt;/span&gt;.getMinutes());&lt;br/&gt;  str = str.replace(&lt;br/&gt;    /ss|SS/,&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.getSeconds() &amp;gt; &lt;span&gt;9&lt;/span&gt;&lt;br/&gt;      ? &lt;span&gt;this&lt;/span&gt;.getSeconds().toString()&lt;br/&gt;      : &lt;span&gt;&quot;0&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.getSeconds()&lt;br/&gt;  );&lt;br/&gt;  str = str.replace(/s|S/g, &lt;span&gt;this&lt;/span&gt;.getSeconds());&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; str;&lt;br/&gt;};&lt;br/&gt;&lt;span&gt;// 或&lt;/span&gt;&lt;br/&gt;Date.prototype.format = function(format) {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; o = {&lt;br/&gt;    &lt;span&gt;&quot;M+&quot;&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;//month&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;d+&quot;&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.getDate(), &lt;span&gt;//day&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;h+&quot;&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.getHours(), &lt;span&gt;//hour&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;m+&quot;&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.getMinutes(), &lt;span&gt;//minute&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;s+&quot;&lt;/span&gt;: &lt;span&gt;this&lt;/span&gt;.getSeconds(), &lt;span&gt;//second&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&quot;q+&quot;&lt;/span&gt;: Math.floor((&lt;span&gt;this&lt;/span&gt;.getMonth() + &lt;span&gt;3&lt;/span&gt;) / &lt;span&gt;3&lt;/span&gt;), &lt;span&gt;//quarter&lt;/span&gt;&lt;br/&gt;    S: &lt;span&gt;this&lt;/span&gt;.getMilliseconds() &lt;span&gt;//millisecond&lt;/span&gt;&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (/(y+)/.test(format))&lt;br/&gt;    format = format.replace(&lt;br/&gt;      RegExp.$&lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;      (&lt;span&gt;this&lt;/span&gt;.getFullYear() + &lt;span&gt;&quot;&quot;&lt;/span&gt;).substr(&lt;span&gt;4&lt;/span&gt; - RegExp.$&lt;span&gt;1&lt;/span&gt;.length)&lt;br/&gt;    );&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; o) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (new RegExp(&lt;span&gt;&quot;(&quot;&lt;/span&gt; + k + &lt;span&gt;&quot;)&quot;&lt;/span&gt;).test(format))&lt;br/&gt;      format = format.replace(&lt;br/&gt;        RegExp.$&lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;        RegExp.$&lt;span&gt;1&lt;/span&gt;.length == &lt;span&gt;1&lt;/span&gt; ? o[k] : (&lt;span&gt;&quot;00&quot;&lt;/span&gt; + o[k]).substr((&lt;span&gt;&quot;&quot;&lt;/span&gt; + o[k]).length)&lt;br/&gt;      );&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; format;&lt;br/&gt;};&lt;br/&gt;alert(new Date().format(&lt;span&gt;&quot;yyyy-MM-dd hh:mm:ss&quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;18 跨浏览器删除事件&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;delEvt&lt;/span&gt;(&lt;span&gt;obj, evt, fn&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!obj) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (obj.addEventListener) {&lt;br/&gt;    obj.addEventListener(evt, fn, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (oTarget.attachEvent) {&lt;br/&gt;    obj.attachEvent(&lt;span&gt;&quot;on&quot;&lt;/span&gt; + evt, fn);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    obj[&lt;span&gt;&quot;on&quot;&lt;/span&gt; + evt] = fn;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;19 判断是否以某个字符串结束&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;.prototype.endWith = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;this&lt;/span&gt;.length - s.length;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; d &amp;gt;= &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.lastIndexOf(s) == d;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;20 返回脚本内容&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;evalscript&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (s.indexOf(&lt;span&gt;&quot;&amp;lt;script&quot;&lt;/span&gt;) == &lt;span&gt;-1&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; s;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; p = &lt;span&gt;/&amp;lt;script[^\&amp;gt;]*?&amp;gt;([^\x00]*?)&amp;lt;\/script&amp;gt;/gi&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; arr = [];&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; ((arr = p.exec(s))) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; p1 = &lt;span&gt;/&amp;lt;script[^\&amp;gt;]*?src=\&quot;([^\&amp;gt;]*?)\&quot;[^\&amp;gt;]*?(reload=\&quot;1\&quot;)?(?:charset=\&quot;([\w\-]+?)\&quot;)?&amp;gt;&amp;lt;\/script&amp;gt;/i&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; arr1 = [];&lt;br/&gt;    arr1 = p1.exec(arr[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (arr1) {&lt;br/&gt;      appendscript(arr1[&lt;span&gt;1&lt;/span&gt;], &lt;span&gt;&quot;&quot;&lt;/span&gt;, arr1[&lt;span&gt;2&lt;/span&gt;], arr1[&lt;span&gt;3&lt;/span&gt;]);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      p1 = &lt;span&gt;/&amp;lt;script(.*?)&amp;gt;([^\x00]+?)&amp;lt;\/script&amp;gt;/i&lt;/span&gt;;&lt;br/&gt;      arr1 = p1.exec(arr[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;      appendscript(&lt;span&gt;&quot;&quot;&lt;/span&gt;, arr1[&lt;span&gt;2&lt;/span&gt;], arr1[&lt;span&gt;1&lt;/span&gt;].indexOf(&lt;span&gt;&quot;reload=&quot;&lt;/span&gt;) != &lt;span&gt;-1&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;21 格式化CSS样式代码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;formatCss&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;//格式化代码&lt;/span&gt;&lt;br/&gt;  s = s.replace(&lt;span&gt;/\s*([\{\}\:\;\,])\s*/g&lt;/span&gt;, &lt;span&gt;&quot;$1&quot;&lt;/span&gt;);&lt;br/&gt;  s = s.replace(&lt;span&gt;/;\s*;/g&lt;/span&gt;, &lt;span&gt;&quot;;&quot;&lt;/span&gt;); &lt;span&gt;//清除连续分号&lt;/span&gt;&lt;br/&gt;  s = s.replace(&lt;span&gt;/\,[\s\.\#\d]*{/g&lt;/span&gt;, &lt;span&gt;&quot;{&quot;&lt;/span&gt;);&lt;br/&gt;  s = s.replace(&lt;span&gt;/([^\s])\{([^\s])/g&lt;/span&gt;, &lt;span&gt;&quot;$1 {\n\t$2&quot;&lt;/span&gt;);&lt;br/&gt;  s = s.replace(&lt;span&gt;/([^\s])\}([^\n]*)/g&lt;/span&gt;, &lt;span&gt;&quot;$1\n}\n$2&quot;&lt;/span&gt;);&lt;br/&gt;  s = s.replace(&lt;span&gt;/([^\s]);([^\s\}])/g&lt;/span&gt;, &lt;span&gt;&quot;$1;\n\t$2&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;22 获取cookie值&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getCookie&lt;/span&gt;(&lt;span&gt;name&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; arr = &lt;span&gt;document&lt;/span&gt;.cookie.match(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;&quot;(^| )&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;=([^;]*)(;|$)&quot;&lt;/span&gt;));&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (arr != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;unescape&lt;/span&gt;(arr[&lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;23 获得URL中GET参数值&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 用法：如果地址是 test.htm?t1=&lt;span&gt;1&lt;/span&gt;&amp;amp;t2=&lt;span&gt;2&lt;/span&gt;&amp;amp;t3=&lt;span&gt;3&lt;/span&gt;, 那么能取得：GET[&lt;span&gt;&quot;t1&quot;&lt;/span&gt;], GET[&lt;span&gt;&quot;t2&quot;&lt;/span&gt;], GET[&lt;span&gt;&quot;t3&quot;&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getGet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  querystr = window.location.href.split(&lt;span&gt;&quot;?&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (querystr[&lt;span&gt;1&lt;/span&gt;]) {&lt;br/&gt;    GETs = querystr[&lt;span&gt;1&lt;/span&gt;].split(&lt;span&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;br/&gt;    GET = [];&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; GETs.length; i++) {&lt;br/&gt;      tmp_arr = GETs.split(&lt;span&gt;&quot;=&quot;&lt;/span&gt;);&lt;br/&gt;      key = tmp_arr[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;      GET[key] = tmp_arr[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; querystr[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;24 获取移动设备初始化大小&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getInitZoom&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;._initZoom) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; screenWidth = &lt;span&gt;Math&lt;/span&gt;.min(screen.height, screen.width);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.isAndroidMobileDevice() &amp;amp;&amp;amp; !&lt;span&gt;this&lt;/span&gt;.isNewChromeOnAndroid()) {&lt;br/&gt;      screenWidth = screenWidth / &lt;span&gt;window&lt;/span&gt;.devicePixelRatio;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;._initZoom = screenWidth / &lt;span&gt;document&lt;/span&gt;.body.offsetWidth;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;._initZoom;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;25 获取页面高度&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageHeight&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; g = &lt;span&gt;document&lt;/span&gt;,&lt;br/&gt;    a = g.body,&lt;br/&gt;    f = g.documentElement,&lt;br/&gt;    d = g.compatMode == &lt;span&gt;&quot;BackCompat&quot;&lt;/span&gt; ? a : g.documentElement;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Math&lt;/span&gt;.max(f.scrollHeight, a.scrollHeight, d.clientHeight);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;26 获取页面scrollLeft&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageScrollLeft&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;document&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a.documentElement.scrollLeft || a.body.scrollLeft;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;27 获取页面scrollTop&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageScrollTop&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;document&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a.documentElement.scrollTop || a.body.scrollTop;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;28 获取页面可视宽度&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageViewWidth&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;document&lt;/span&gt;,&lt;br/&gt;    a = d.compatMode == &lt;span&gt;&quot;BackCompat&quot;&lt;/span&gt; ? d.body : d.documentElement;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a.clientWidth;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;29 获取页面可视高度&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageViewHeight&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;document&lt;/span&gt;,&lt;br/&gt;    a = d.compatMode == &lt;span&gt;&quot;BackCompat&quot;&lt;/span&gt; ? d.body : d.documentElement;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a.clientHeight;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;30 获取页面宽度&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageWidth&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; g = &lt;span&gt;document&lt;/span&gt;,&lt;br/&gt;    a = g.body,&lt;br/&gt;    f = g.documentElement,&lt;br/&gt;    d = g.compatMode == &lt;span&gt;&quot;BackCompat&quot;&lt;/span&gt; ? a : g.documentElement;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Math&lt;/span&gt;.max(f.scrollWidth, a.scrollWidth, d.clientWidth);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;31 获取移动设备屏幕宽度&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getScreenWidth&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; smallerSide = &lt;span&gt;Math&lt;/span&gt;.min(screen.width, screen.height);&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fixViewPortsExperiment =&lt;br/&gt;    rendererModel.runningExperiments.FixViewport ||&lt;br/&gt;    rendererModel.runningExperiments.fixviewport;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fixViewPortsExperimentRunning =&lt;br/&gt;    fixViewPortsExperiment &amp;amp;&amp;amp; fixViewPortsExperiment.toLowerCase() === &lt;span&gt;&quot;new&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (fixViewPortsExperiment) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.isAndroidMobileDevice() &amp;amp;&amp;amp; !&lt;span&gt;this&lt;/span&gt;.isNewChromeOnAndroid()) {&lt;br/&gt;      smallerSide = smallerSide / &lt;span&gt;window&lt;/span&gt;.devicePixelRatio;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; smallerSide;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;32 获取移动设备最大化大小&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getZoom&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; screenWidth =&lt;br/&gt;    &lt;span&gt;Math&lt;/span&gt;.abs(&lt;span&gt;window&lt;/span&gt;.orientation) === &lt;span&gt;90&lt;/span&gt;&lt;br/&gt;      ? &lt;span&gt;Math&lt;/span&gt;.max(screen.height, screen.width)&lt;br/&gt;      : &lt;span&gt;Math&lt;/span&gt;.min(screen.height, screen.width);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.isAndroidMobileDevice() &amp;amp;&amp;amp; !&lt;span&gt;this&lt;/span&gt;.isNewChromeOnAndroid()) {&lt;br/&gt;    screenWidth = screenWidth / &lt;span&gt;window&lt;/span&gt;.devicePixelRatio;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; FixViewPortsExperiment =&lt;br/&gt;    rendererModel.runningExperiments.FixViewport ||&lt;br/&gt;    rendererModel.runningExperiments.fixviewport;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; FixViewPortsExperimentRunning =&lt;br/&gt;    FixViewPortsExperiment &amp;amp;&amp;amp;&lt;br/&gt;    (FixViewPortsExperiment === &lt;span&gt;&quot;New&quot;&lt;/span&gt; || FixViewPortsExperiment === &lt;span&gt;&quot;new&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (FixViewPortsExperimentRunning) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; screenWidth / &lt;span&gt;window&lt;/span&gt;.innerWidth;&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; screenWidth / &lt;span&gt;document&lt;/span&gt;.body.offsetWidth;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;33 获取网页被卷去的位置&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getScrollXY&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;document&lt;/span&gt;.body.scrollTop&lt;br/&gt;    ? {&lt;br/&gt;        &lt;span&gt;x&lt;/span&gt;: &lt;span&gt;document&lt;/span&gt;.body.scrollLeft,&lt;br/&gt;        &lt;span&gt;y&lt;/span&gt;: &lt;span&gt;document&lt;/span&gt;.body.scrollTop&lt;br/&gt;      }&lt;br/&gt;    : {&lt;br/&gt;        &lt;span&gt;x&lt;/span&gt;: &lt;span&gt;document&lt;/span&gt;.documentElement.scrollLeft,&lt;br/&gt;        &lt;span&gt;y&lt;/span&gt;: &lt;span&gt;document&lt;/span&gt;.documentElement.scrollTop&lt;br/&gt;      };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;34 判断是否为数字类型&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;function &lt;span&gt;isDigit&lt;/span&gt;(&lt;span&gt;&lt;span&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; patrn = /^[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;-9&lt;/span&gt;]*$/;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (patrn.exec(&lt;span&gt;value&lt;/span&gt;) == &lt;span&gt;null&lt;/span&gt; || &lt;span&gt;value&lt;/span&gt; == &lt;span&gt;&quot;&quot;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;35 检验URL链接是否有效&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getUrlState&lt;/span&gt;(&lt;span&gt;URL&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; xmlhttp = &lt;span&gt;new&lt;/span&gt; ActiveXObject(&lt;span&gt;&quot;microsoft.xmlhttp&quot;&lt;/span&gt;);&lt;br/&gt;  xmlhttp.Open(&lt;span&gt;&quot;GET&quot;&lt;/span&gt;, URL, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    xmlhttp.Send();&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;  } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; result = xmlhttp.responseText;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (result) {&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (xmlhttp.Status == &lt;span&gt;200&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;36 获取URL上的参数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 获取URL中的某参数值,不区分大小写&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 获取URL中的某参数值,不区分大小写,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 默认是取&#x27;hash&#x27;里的参数，&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 如果传其他参数支持取‘search’中的参数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// @param {String} name 参数名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getUrlParam&lt;/span&gt;(&lt;span&gt;name, type = &lt;span&gt;&quot;hash&quot;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; newName = name,&lt;br/&gt;    reg = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;&quot;(^|&amp;amp;)&quot;&lt;/span&gt; + newName + &lt;span&gt;&quot;=([^&amp;amp;]*)(&amp;amp;|$)&quot;&lt;/span&gt;, &lt;span&gt;&quot;i&quot;&lt;/span&gt;),&lt;br/&gt;    paramHash = &lt;span&gt;window&lt;/span&gt;.location.hash.split(&lt;span&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span&gt;1&lt;/span&gt;] || &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    paramSearch = &lt;span&gt;window&lt;/span&gt;.location.search.split(&lt;span&gt;&quot;?&quot;&lt;/span&gt;)[&lt;span&gt;1&lt;/span&gt;] || &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    param;&lt;br/&gt;  type === &lt;span&gt;&quot;hash&quot;&lt;/span&gt; ? (param = paramHash) : (param = paramSearch);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; result = param.match(reg);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (result != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; result[&lt;span&gt;2&lt;/span&gt;].split(&lt;span&gt;&quot;/&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;37 获取窗体可见范围的宽与高&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getViewSize&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; de = &lt;span&gt;document&lt;/span&gt;.documentElement;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; db = &lt;span&gt;document&lt;/span&gt;.body;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; viewW = de.clientWidth == &lt;span&gt;0&lt;/span&gt; ? db.clientWidth : de.clientWidth;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; viewH = de.clientHeight == &lt;span&gt;0&lt;/span&gt; ? db.clientHeight : de.clientHeight;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(viewW, viewH);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;38 判断是否安卓移动设备访问&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isAndroidMobileDevice&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/android/i&lt;/span&gt;.test(navigator.userAgent.toLowerCase());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;39 判断是否苹果移动设备访问&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isAppleMobileDevice&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/iphone|ipod|ipad|Macintosh/i&lt;/span&gt;.test(navigator.userAgent.toLowerCase());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;40 是否是某类手机型号&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 用devicePixelRatio和分辨率判断&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; isIphonex = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;// X XS, XS Max, XR&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; xSeriesConfig = [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;devicePixelRatio&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;375&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;812&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;devicePixelRatio&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;414&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;896&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;devicePixelRatio&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;414&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;896&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  ];&lt;br/&gt;  &lt;span&gt;// h5&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; &lt;span&gt;window&lt;/span&gt; !== &lt;span&gt;&quot;undefined&quot;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;window&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; isIOS = &lt;span&gt;/iphone/gi&lt;/span&gt;.test(&lt;span&gt;window&lt;/span&gt;.navigator.userAgent);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!isIOS) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { devicePixelRatio, screen } = &lt;span&gt;window&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { width, height } = screen;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; xSeriesConfig.some(&lt;br/&gt;      &lt;span&gt;&lt;span&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;br/&gt;        item.devicePixelRatio === devicePixelRatio &amp;amp;&amp;amp;&lt;br/&gt;        item.width === width &amp;amp;&amp;amp;&lt;br/&gt;        item.height === height&lt;br/&gt;    );&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;41 判断是否是移动设备访问&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isMobileUserAgent&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i&lt;/span&gt;.test(&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.navigator.userAgent.toLowerCase()&lt;br/&gt;  );&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;42 判断是否移动设备&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;function isMobile() {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (typeof &lt;span&gt;this&lt;/span&gt;._isMobile === &lt;span&gt;&quot;boolean&quot;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;._isMobile;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; screenWidth = &lt;span&gt;this&lt;/span&gt;.getScreenWidth();&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fixViewPortsExperiment =&lt;br/&gt;    rendererModel.runningExperiments.FixViewport ||&lt;br/&gt;    rendererModel.runningExperiments.fixviewport;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fixViewPortsExperimentRunning =&lt;br/&gt;    fixViewPortsExperiment &amp;amp;&amp;amp; fixViewPortsExperiment.toLowerCase() === &lt;span&gt;&quot;new&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!fixViewPortsExperiment) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;.isAppleMobileDevice()) {&lt;br/&gt;      screenWidth = screenWidth / window.devicePixelRatio;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; isMobileScreenSize = screenWidth &amp;lt; &lt;span&gt;600&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; isMobileUserAgent = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;._isMobile = isMobileScreenSize &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.isTouchScreen();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;._isMobile;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;43 判断是否手机号码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isMobileNumber&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; i =&lt;br/&gt;      &lt;span&gt;&quot;134,135,136,137,138,139,150,151,152,157,158,159,187,188,147,182,183,184,178&quot;&lt;/span&gt;,&lt;br/&gt;    n = &lt;span&gt;&quot;130,131,132,155,156,185,186,145,176&quot;&lt;/span&gt;,&lt;br/&gt;    a = &lt;span&gt;&quot;133,153,180,181,189,177,173,170&quot;&lt;/span&gt;,&lt;br/&gt;    o = e || &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    r = o.substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;),&lt;br/&gt;    d = o.substring(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;),&lt;br/&gt;    s =&lt;br/&gt;      !!&lt;span&gt;/^1\d{10}$/&lt;/span&gt;.test(o) &amp;amp;&amp;amp;&lt;br/&gt;      (n.indexOf(r) &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        ? &lt;span&gt;&quot;联通&quot;&lt;/span&gt;&lt;br/&gt;        : a.indexOf(r) &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        ? &lt;span&gt;&quot;电信&quot;&lt;/span&gt;&lt;br/&gt;        : &lt;span&gt;&quot;1349&quot;&lt;/span&gt; == d&lt;br/&gt;        ? &lt;span&gt;&quot;电信&quot;&lt;/span&gt;&lt;br/&gt;        : i.indexOf(r) &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        ? &lt;span&gt;&quot;移动&quot;&lt;/span&gt;&lt;br/&gt;        : &lt;span&gt;&quot;未知&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;44 判断鼠标是否移出事件&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isMouseOut&lt;/span&gt;&lt;span&gt;(e, handler)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (e.&lt;span&gt;type&lt;/span&gt; !== &lt;span&gt;&quot;mouseout&quot;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  var reltg = e.relatedTarget&lt;br/&gt;    ? e.relatedTarget&lt;br/&gt;    : e.&lt;span&gt;type&lt;/span&gt; === &lt;span&gt;&quot;mouseout&quot;&lt;/span&gt;&lt;br/&gt;    ? e.toElement&lt;br/&gt;    : e.fromElement;&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (reltg &amp;amp;&amp;amp; reltg !== handler) {&lt;br/&gt;    reltg = reltg.parentNode;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; reltg !== handler;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;45 判断是否Touch屏幕&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isTouchScreen&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;ontouchstart&quot;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span&gt;window&lt;/span&gt; ||&lt;br/&gt;    (&lt;span&gt;window&lt;/span&gt;.DocumentTouch &amp;amp;&amp;amp; &lt;span&gt;document&lt;/span&gt; &lt;span&gt;instanceof&lt;/span&gt; DocumentTouch)&lt;br/&gt;  );&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;46 判断是否为网址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;br/&gt;function isURL(strUrl) {&lt;br/&gt;  var regular = /^\b(((https?|ftp):\/\/)?[&lt;span&gt;-a-z0-9&lt;/span&gt;]+(\.[&lt;span&gt;-a-z0-9&lt;/span&gt;]+)&lt;span&gt;*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;amp;?=+,.!\/~%\$]*&lt;/span&gt;)?)$/i;&lt;br/&gt;  if (regular.test(strUrl)) {&lt;br/&gt;&lt;span&gt;    return true;&lt;/span&gt;&lt;br/&gt;  } else {&lt;br/&gt;&lt;span&gt;    return false;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;47 判断是否打开视窗&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isViewportOpen&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; !!&lt;span&gt;document&lt;/span&gt;.getElementById(&lt;span&gt;&quot;wixMobileViewport&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;48 加载样式文件&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;loadStyle&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;document&lt;/span&gt;.createStyleSheet(url);&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; cssLink = &lt;span&gt;document&lt;/span&gt;.createElement(&lt;span&gt;&quot;link&quot;&lt;/span&gt;);&lt;br/&gt;    cssLink.rel = &lt;span&gt;&quot;stylesheet&quot;&lt;/span&gt;;&lt;br/&gt;    cssLink.type = &lt;span&gt;&quot;text/css&quot;&lt;/span&gt;;&lt;br/&gt;    cssLink.href = url;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; head = &lt;span&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    head.appendChild(cssLink);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;49 替换地址栏&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;locationReplace&lt;/span&gt;(&lt;span&gt;url&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (history.replaceState) {&lt;br/&gt;    history.replaceState(&lt;span&gt;null&lt;/span&gt;, &lt;span&gt;document&lt;/span&gt;.title, url);&lt;br/&gt;    history.go(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    location.replace(url);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;50 解决offsetX兼容性问题&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 针对火狐不支持offsetX/Y&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getOffset&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; target = e.target, &lt;span&gt;// 当前触发的目标对象&lt;/span&gt;&lt;br/&gt;    eventCoord,&lt;br/&gt;    pageCoord,&lt;br/&gt;    offsetCoord;&lt;br/&gt;  &lt;span&gt;// 计算当前触发元素到文档的距离&lt;/span&gt;&lt;br/&gt;  pageCoord = getPageCoord(target);&lt;br/&gt;  &lt;span&gt;// 计算光标到文档的距离&lt;/span&gt;&lt;br/&gt;  eventCoord = {&lt;br/&gt;    &lt;span&gt;X&lt;/span&gt;: &lt;span&gt;window&lt;/span&gt;.pageXOffset + e.clientX,&lt;br/&gt;    &lt;span&gt;Y&lt;/span&gt;: &lt;span&gt;window&lt;/span&gt;.pageYOffset + e.clientY&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;// 相减获取光标到第一个定位的父元素的坐标&lt;/span&gt;&lt;br/&gt;  offsetCoord = {&lt;br/&gt;    &lt;span&gt;X&lt;/span&gt;: eventCoord.X - pageCoord.X,&lt;br/&gt;    &lt;span&gt;Y&lt;/span&gt;: eventCoord.Y - pageCoord.Y&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; offsetCoord;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPageCoord&lt;/span&gt;(&lt;span&gt;element&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; coord = { &lt;span&gt;X&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;Y&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt; };&lt;br/&gt;  &lt;span&gt;// 计算从当前触发元素到根节点为止，&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (element) {&lt;br/&gt;    coord.X += element.offsetLeft;&lt;br/&gt;    coord.Y += element.offsetTop;&lt;br/&gt;    element = element.offsetParent;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; coord;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;51 打开一个窗体通用方法&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;openWindow&lt;/span&gt;(&lt;span&gt;url, windowName, width, height&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; x = &lt;span&gt;parseInt&lt;/span&gt;(screen.width / &lt;span&gt;2.0&lt;/span&gt;) - width / &lt;span&gt;2.0&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; y = &lt;span&gt;parseInt&lt;/span&gt;(screen.height / &lt;span&gt;2.0&lt;/span&gt;) - height / &lt;span&gt;2.0&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; isMSIE = navigator.appName == &lt;span&gt;&quot;Microsoft Internet Explorer&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (isMSIE) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; p = &lt;span&gt;&quot;resizable=1,location=no,scrollbars=no,width=&quot;&lt;/span&gt;;&lt;br/&gt;    p = p + width;&lt;br/&gt;    p = p + &lt;span&gt;&quot;,height=&quot;&lt;/span&gt;;&lt;br/&gt;    p = p + height;&lt;br/&gt;    p = p + &lt;span&gt;&quot;,left=&quot;&lt;/span&gt;;&lt;br/&gt;    p = p + x;&lt;br/&gt;    p = p + &lt;span&gt;&quot;,top=&quot;&lt;/span&gt;;&lt;br/&gt;    p = p + y;&lt;br/&gt;    retval = &lt;span&gt;window&lt;/span&gt;.open(url, windowName, p);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; win = &lt;span&gt;window&lt;/span&gt;.open(&lt;br/&gt;      url,&lt;br/&gt;      &lt;span&gt;&quot;ZyiisPopup&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;top=&quot;&lt;/span&gt; +&lt;br/&gt;        y +&lt;br/&gt;        &lt;span&gt;&quot;,left=&quot;&lt;/span&gt; +&lt;br/&gt;        x +&lt;br/&gt;        &lt;span&gt;&quot;,scrollbars=&quot;&lt;/span&gt; +&lt;br/&gt;        scrollbars +&lt;br/&gt;        &lt;span&gt;&quot;,dialog=yes,modal=yes,width=&quot;&lt;/span&gt; +&lt;br/&gt;        width +&lt;br/&gt;        &lt;span&gt;&quot;,height=&quot;&lt;/span&gt; +&lt;br/&gt;        height +&lt;br/&gt;        &lt;span&gt;&quot;,resizable=no&quot;&lt;/span&gt;&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;eval&lt;/span&gt;(&lt;span&gt;&quot;try { win.resizeTo(width, height); } catch(e) { }&quot;&lt;/span&gt;);&lt;br/&gt;    win.focus();&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;52 将键值对拼接成URL带参数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; fnParams2Url = &lt;span&gt;&lt;span&gt;obj&lt;/span&gt;=&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;let&lt;/span&gt; aUrl = []&lt;br/&gt;      &lt;span&gt;let&lt;/span&gt; fnAdd = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;key, value&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; key + &lt;span&gt;&#x27;=&#x27;&lt;/span&gt; + value&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; obj) {&lt;br/&gt;        aUrl.push(fnAdd(k, obj[k]))&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;encodeURIComponent&lt;/span&gt;(aUrl.join(&lt;span&gt;&#x27;&amp;amp;&#x27;&lt;/span&gt;))&lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;53 去掉url前缀&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;removeUrlPrefix&lt;/span&gt;(&lt;span&gt;a&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  a = a&lt;br/&gt;    .replace(&lt;span&gt;/：/g&lt;/span&gt;, &lt;span&gt;&quot;:&quot;&lt;/span&gt;)&lt;br/&gt;    .replace(&lt;span&gt;/．/g&lt;/span&gt;, &lt;span&gt;&quot;.&quot;&lt;/span&gt;)&lt;br/&gt;    .replace(&lt;span&gt;/／/g&lt;/span&gt;, &lt;span&gt;&quot;/&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; (&lt;br/&gt;    trim(a)&lt;br/&gt;      .toLowerCase()&lt;br/&gt;      .indexOf(&lt;span&gt;&quot;http://&quot;&lt;/span&gt;) == &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;  ) {&lt;br/&gt;    a = trim(a.replace(&lt;span&gt;/http:\/\//i&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;));&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; a;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;54 resize的操作&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; fn = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; w = &lt;span&gt;document&lt;/span&gt;.documentElement&lt;br/&gt;        ? &lt;span&gt;document&lt;/span&gt;.documentElement.clientWidth&lt;br/&gt;        : &lt;span&gt;document&lt;/span&gt;.body.clientWidth,&lt;br/&gt;      r = &lt;span&gt;1255&lt;/span&gt;,&lt;br/&gt;      b = Element.extend(&lt;span&gt;document&lt;/span&gt;.body),&lt;br/&gt;      classname = b.className;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (w &amp;lt; r) {&lt;br/&gt;      &lt;span&gt;//当窗体的宽度小于1255的时候执行相应的操作&lt;/span&gt;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;//当窗体的宽度大于1255的时候执行相应的操作&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;window&lt;/span&gt;.addEventListener) {&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.addEventListener(&lt;span&gt;&quot;resize&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;      fn();&lt;br/&gt;    });&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;window&lt;/span&gt;.attachEvent) {&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.attachEvent(&lt;span&gt;&quot;onresize&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;      fn();&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;  fn();&lt;br/&gt;})();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;55 替换全部&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;.prototype.replaceAll = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;s1, s2&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.replace(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(s1, &lt;span&gt;&quot;gm&quot;&lt;/span&gt;), s2);&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;56 设置cookie值&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;setCookie&lt;/span&gt;(&lt;span&gt;name, value, Hours&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; d = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;();&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; offset = &lt;span&gt;8&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; utc = d.getTime() + d.getTimezoneOffset() * &lt;span&gt;60000&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; nd = utc + &lt;span&gt;3600000&lt;/span&gt; * offset;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; exp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;(nd);&lt;br/&gt;  exp.setTime(exp.getTime() + Hours * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;60&lt;/span&gt; * &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;document&lt;/span&gt;.cookie =&lt;br/&gt;    name +&lt;br/&gt;    &lt;span&gt;&quot;=&quot;&lt;/span&gt; +&lt;br/&gt;    &lt;span&gt;escape&lt;/span&gt;(value) +&lt;br/&gt;    &lt;span&gt;&quot;;path=/;expires=&quot;&lt;/span&gt; +&lt;br/&gt;    exp.toGMTString() +&lt;br/&gt;    &lt;span&gt;&quot;;domain=360doc.com;&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;57 滚动到顶部&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 使用document.documentElement.scrollTop 或 document.body.scrollTop 获取到顶部的距离，从顶部&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 滚动一小部分距离。使用window.requestAnimationFrame()来滚动。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// @example&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// scrollToTop();&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;scrollToTop&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; c = &lt;span&gt;document&lt;/span&gt;.documentElement.scrollTop || &lt;span&gt;document&lt;/span&gt;.body.scrollTop;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (c &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.requestAnimationFrame(scrollToTop);&lt;br/&gt;    &lt;span&gt;window&lt;/span&gt;.scrollTo(&lt;span&gt;0&lt;/span&gt;, c - c / &lt;span&gt;8&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;58 设为首页&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;setHomepage&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;document&lt;/span&gt;.all) {&lt;br/&gt;    &lt;span&gt;document&lt;/span&gt;.body.style.behavior = &lt;span&gt;&quot;url(#default#homepage)&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;document&lt;/span&gt;.body.setHomePage(&lt;span&gt;&quot;http://w3cboy.com&quot;&lt;/span&gt;);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;window&lt;/span&gt;.sidebar) {&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;window&lt;/span&gt;.netscape) {&lt;br/&gt;      &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;        netscape.security.PrivilegeManager.enablePrivilege(&lt;br/&gt;          &lt;span&gt;&quot;UniversalXPConnect&quot;&lt;/span&gt;&lt;br/&gt;        );&lt;br/&gt;      } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;        alert(&lt;br/&gt;          &lt;span&gt;&quot;该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true&quot;&lt;/span&gt;&lt;br/&gt;        );&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; prefs = Components.classes[&lt;br/&gt;      &lt;span&gt;&quot;@mozilla.org/preferences-service;1&quot;&lt;/span&gt;&lt;br/&gt;    ].getService(Components.interfaces.nsIPrefBranch);&lt;br/&gt;    prefs.setCharPref(&lt;span&gt;&quot;browser.startup.homepage&quot;&lt;/span&gt;, &lt;span&gt;&quot;http://w3cboy.com&quot;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;59 按字母排序，对每行进行数组排序&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;function &lt;span&gt;setSort&lt;/span&gt;(&lt;span/&gt;)&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; text = K1.&lt;span&gt;value&lt;/span&gt;&lt;br/&gt;    .split(/[\r\n]/)&lt;br/&gt;    .sort()&lt;br/&gt;    .&lt;span&gt;join&lt;/span&gt;(&lt;span&gt;&quot;\r\n&quot;&lt;/span&gt;); &lt;span&gt;//顺序&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; test = K1.&lt;span&gt;value&lt;/span&gt;&lt;br/&gt;    .split(/[\r\n]/)&lt;br/&gt;    .sort()&lt;br/&gt;    .reverse()&lt;br/&gt;    .&lt;span&gt;join&lt;/span&gt;(&lt;span&gt;&quot;\r\n&quot;&lt;/span&gt;); &lt;span&gt;//反序&lt;/span&gt;&lt;br/&gt;  K1.&lt;span&gt;value&lt;/span&gt; = K1.&lt;span&gt;value&lt;/span&gt; != text ? text : test;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;60 延时执行&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 比如 sleep(1000) 意味着等待1000毫秒，还可从 Promise、Generator、Async/Await 等角度实现。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Promise&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sleep = &lt;span&gt;&lt;span&gt;time&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;&lt;span&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; setTimeout(resolve, time));&lt;br/&gt;};&lt;br/&gt;sleep(&lt;span&gt;1000&lt;/span&gt;).then(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;&lt;span&gt;// Generator&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;* &lt;span&gt;sleepGenerator&lt;/span&gt;(&lt;span&gt;time&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;yield&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    setTimeout(resolve, time);&lt;br/&gt;  });&lt;br/&gt;}&lt;br/&gt;sleepGenerator(&lt;span&gt;1000&lt;/span&gt;)&lt;br/&gt;  .next()&lt;br/&gt;  .value.then(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;  });&lt;br/&gt;&lt;span&gt;//async&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sleep&lt;/span&gt;(&lt;span&gt;time&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;(&lt;span&gt;&lt;span&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; setTimeout(resolve, time));&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;output&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; out = &lt;span&gt;await&lt;/span&gt; sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; out;&lt;br/&gt;}&lt;br/&gt;output();&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;sleep&lt;/span&gt;(&lt;span&gt;callback, time&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; callback === &lt;span&gt;&quot;function&quot;&lt;/span&gt;) {&lt;br/&gt;    setTimeout(callback, time);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;output&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;sleep(output, &lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;61 清除脚本内容&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;stripscript&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s.replace(&lt;span&gt;/&amp;lt;script.*?&amp;gt;.*?&amp;lt;\/script&amp;gt;/gi&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;62 判&lt;/span&gt;断是否以某个字符串开头&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;.prototype.startWith = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.indexOf(s) == &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;63 时间个性化输出功能&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/*&lt;br/&gt;&lt;span&gt;1&lt;/span&gt;、&amp;lt; &lt;span&gt;60&lt;/span&gt;s, 显示为“刚刚”&lt;br/&gt;&lt;span&gt;2&lt;/span&gt;、&amp;gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;min&lt;/span&gt; &amp;amp;&amp;amp; &amp;lt; &lt;span&gt;60&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;, 显示与当前时间差“XX分钟前”&lt;br/&gt;&lt;span&gt;3&lt;/span&gt;、&amp;gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt;min&lt;/span&gt; &amp;amp;&amp;amp; &amp;lt; &lt;span&gt;1&lt;/span&gt;day, 显示与当前时间差“今天 XX:XX”&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;、&amp;gt;= &lt;span&gt;1&lt;/span&gt;day &amp;amp;&amp;amp; &amp;lt; &lt;span&gt;1&lt;/span&gt;year, 显示日期“XX月XX日 XX:XX”&lt;br/&gt;&lt;span&gt;5&lt;/span&gt;、&amp;gt;= &lt;span&gt;1&lt;/span&gt;year, 显示具体日期“XXXX年XX月XX日 XX:XX”&lt;br/&gt;*/&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;timeFormat&lt;/span&gt;&lt;span&gt;(time)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  var &lt;span&gt;date&lt;/span&gt; = new Date(&lt;span&gt;time&lt;/span&gt;),&lt;br/&gt;    curDate = new Date(),&lt;br/&gt;    year = &lt;span&gt;date&lt;/span&gt;.getFullYear(),&lt;br/&gt;    month = &lt;span&gt;date&lt;/span&gt;.getMonth() + &lt;span&gt;10&lt;/span&gt;,&lt;br/&gt;    day = &lt;span&gt;date&lt;/span&gt;.getDate(),&lt;br/&gt;    hour = &lt;span&gt;date&lt;/span&gt;.getHours(),&lt;br/&gt;    minute = &lt;span&gt;date&lt;/span&gt;.getMinutes(),&lt;br/&gt;    curYear = curDate.getFullYear(),&lt;br/&gt;    curHour = curDate.getHours(),&lt;br/&gt;    timeStr;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (year &amp;lt; curYear) {&lt;br/&gt;    timeStr = year + &lt;span&gt;&quot;年&quot;&lt;/span&gt; + month + &lt;span&gt;&quot;月&quot;&lt;/span&gt; + day + &lt;span&gt;&quot;日 &quot;&lt;/span&gt; + hour + &lt;span&gt;&quot;:&quot;&lt;/span&gt; + minute;&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    var pastTime = curDate - &lt;span&gt;date&lt;/span&gt;,&lt;br/&gt;      pastH = pastTime / &lt;span&gt;3600000&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (pastH &amp;gt; curHour) {&lt;br/&gt;      timeStr = month + &lt;span&gt;&quot;月&quot;&lt;/span&gt; + day + &lt;span&gt;&quot;日 &quot;&lt;/span&gt; + hour + &lt;span&gt;&quot;:&quot;&lt;/span&gt; + minute;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (pastH &amp;gt;= &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;      timeStr = &lt;span&gt;&quot;今天 &quot;&lt;/span&gt; + hour + &lt;span&gt;&quot;:&quot;&lt;/span&gt; + minute + &lt;span&gt;&quot;分&quot;&lt;/span&gt;;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      var pastM = curDate.getMinutes() - minute;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (pastM &amp;gt; &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;        timeStr = pastM + &lt;span&gt;&quot;分钟前&quot;&lt;/span&gt;;&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        timeStr = &lt;span&gt;&quot;刚刚&quot;&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; timeStr;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;64 半角转换为全角函数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;function toDBC(&lt;span&gt;str&lt;/span&gt;) {&lt;br/&gt;  var result = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (var i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;str&lt;/span&gt;.length; i++) {&lt;br/&gt;    code = &lt;span&gt;str&lt;/span&gt;.charCodeAt(i);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (code &amp;gt;= &lt;span&gt;33&lt;/span&gt; &amp;amp;&amp;amp; code &amp;lt;= &lt;span&gt;126&lt;/span&gt;) {&lt;br/&gt;      result += &lt;span&gt;String&lt;/span&gt;.fromCharCode(&lt;span&gt;str&lt;/span&gt;.charCodeAt(i) + &lt;span&gt;65248&lt;/span&gt;);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (code == &lt;span&gt;32&lt;/span&gt;) {&lt;br/&gt;      result += &lt;span&gt;String&lt;/span&gt;.fromCharCode(&lt;span&gt;str&lt;/span&gt;.charCodeAt(i) + &lt;span&gt;12288&lt;/span&gt; - &lt;span&gt;32&lt;/span&gt;);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      result += &lt;span&gt;str&lt;/span&gt;.charAt(i);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;65 全角转换为半角函数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;function toCDB(&lt;span&gt;str&lt;/span&gt;) {&lt;br/&gt;  var result = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (var i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;str&lt;/span&gt;.length; i++) {&lt;br/&gt;    code = &lt;span&gt;str&lt;/span&gt;.charCodeAt(i);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (code &amp;gt;= &lt;span&gt;65281&lt;/span&gt; &amp;amp;&amp;amp; code &amp;lt;= &lt;span&gt;65374&lt;/span&gt;) {&lt;br/&gt;      result += &lt;span&gt;String&lt;/span&gt;.fromCharCode(&lt;span&gt;str&lt;/span&gt;.charCodeAt(i) - &lt;span&gt;65248&lt;/span&gt;);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (code == &lt;span&gt;12288&lt;/span&gt;) {&lt;br/&gt;      result += &lt;span&gt;String&lt;/span&gt;.fromCharCode(&lt;span&gt;str&lt;/span&gt;.charCodeAt(i) - &lt;span&gt;12288&lt;/span&gt; + &lt;span&gt;32&lt;/span&gt;);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      result += &lt;span&gt;str&lt;/span&gt;.charAt(i);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;66 金额大写转换函数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;transform&lt;/span&gt;(&lt;span&gt;tranvalue&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;try&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; dw2 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;万&quot;&lt;/span&gt;, &lt;span&gt;&quot;亿&quot;&lt;/span&gt;); &lt;span&gt;//大单位&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; dw1 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(&lt;span&gt;&quot;拾&quot;&lt;/span&gt;, &lt;span&gt;&quot;佰&quot;&lt;/span&gt;, &lt;span&gt;&quot;仟&quot;&lt;/span&gt;); &lt;span&gt;//小单位&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; dw = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(&lt;br/&gt;      &lt;span&gt;&quot;零&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;壹&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;贰&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;叁&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;肆&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;伍&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;陆&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;柒&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;捌&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;玖&quot;&lt;/span&gt;&lt;br/&gt;    );&lt;br/&gt;    &lt;span&gt;//整数部分用&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//以下是小写转换成大写显示在合计大写的文本框中&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;//分离整数与小数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; source = splits(tranvalue);&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; num = source[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; dig = source[&lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;    &lt;span&gt;//转换整数部分&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; k1 = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//计小单位&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; k2 = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//计大单位&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; str = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; len = source[&lt;span&gt;0&lt;/span&gt;].length; &lt;span&gt;//整数的长度&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= len; i++) {&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; n = source[&lt;span&gt;0&lt;/span&gt;].charAt(len - i); &lt;span&gt;//取得某个位数上的数字&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; bn = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (len - i - &lt;span&gt;1&lt;/span&gt; &amp;gt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        bn = source[&lt;span&gt;0&lt;/span&gt;].charAt(len - i - &lt;span&gt;1&lt;/span&gt;); &lt;span&gt;//取得某个位数前一位上的数字&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;      sum = sum + &lt;span&gt;Number&lt;/span&gt;(n);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (sum != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        str = dw[&lt;span&gt;Number&lt;/span&gt;(n)].concat(str); &lt;span&gt;//取得该数字对应的大写数字，并插入到str字符串的前面&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (n == &lt;span&gt;&quot;0&quot;&lt;/span&gt;) sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (len - i - &lt;span&gt;1&lt;/span&gt; &amp;gt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;//在数字范围内&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (k1 != &lt;span&gt;3&lt;/span&gt;) {&lt;br/&gt;          &lt;span&gt;//加小单位&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (bn != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            str = dw1[k1].concat(str);&lt;br/&gt;          }&lt;br/&gt;          k1++;&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;          &lt;span&gt;//不加小单位，加大单位&lt;/span&gt;&lt;br/&gt;          k1 = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;          &lt;span&gt;var&lt;/span&gt; temp = str.charAt(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (temp == &lt;span&gt;&quot;万&quot;&lt;/span&gt; || temp == &lt;span&gt;&quot;亿&quot;&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;//若大单位前没有数字则舍去大单位&lt;/span&gt;&lt;br/&gt;            str = str.substr(&lt;span&gt;1&lt;/span&gt;, str.length - &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;          str = dw2[k2].concat(str);&lt;br/&gt;          sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (k1 == &lt;span&gt;3&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;//小单位到千则大单位进一&lt;/span&gt;&lt;br/&gt;        k2++;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;//转换小数部分&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; strdig = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (dig != &lt;span&gt;&quot;&quot;&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; n = dig.charAt(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (n != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        strdig += dw[&lt;span&gt;Number&lt;/span&gt;(n)] + &lt;span&gt;&quot;角&quot;&lt;/span&gt;; &lt;span&gt;//加数字&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;var&lt;/span&gt; n = dig.charAt(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (n != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        strdig += dw[&lt;span&gt;Number&lt;/span&gt;(n)] + &lt;span&gt;&quot;分&quot;&lt;/span&gt;; &lt;span&gt;//加数字&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    str += &lt;span&gt;&quot;元&quot;&lt;/span&gt; + strdig;&lt;br/&gt;  } &lt;span&gt;catch&lt;/span&gt; (e) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;0元&quot;&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; str;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//拆分整数与小数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;splits&lt;/span&gt;(&lt;span&gt;tranvalue&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; value = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;  temp = tranvalue.split(&lt;span&gt;&quot;.&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; temp.length; i++) {&lt;br/&gt;    value = temp;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; value;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;67 清除空格&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;.prototype.trim = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; reExtraSpace = &lt;span&gt;/^\s*(.*?)\s+$/&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.replace(reExtraSpace, &lt;span&gt;&quot;$1&quot;&lt;/span&gt;);&lt;br/&gt;};&lt;br/&gt;&lt;span&gt;// 清除左空格&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;ltrim&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s.replace(&lt;span&gt;/^(\s*|　*)/&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 清除右空格&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;rtrim&lt;/span&gt;(&lt;span&gt;s&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; s.replace(&lt;span&gt;/(\s*|　*)$/&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;68 随机数时间戳&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;uniqueId&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;Math&lt;/span&gt;.random,&lt;br/&gt;    b = &lt;span&gt;parseInt&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;Number&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;()).toString() + b(&lt;span&gt;10&lt;/span&gt; * a()) + b(&lt;span&gt;10&lt;/span&gt; * a()) + b(&lt;span&gt;10&lt;/span&gt; * a())&lt;br/&gt;  );&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;69 实现utf8解码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;utf8_decode(str_data)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; &lt;span&gt;tmp_arr&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[],&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;ac&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;c1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;c2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;c3&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;str_data&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;while&lt;/span&gt; &lt;span&gt;(i&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;str_data.length)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;c1&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str_data.charCodeAt(i);&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(c1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;128&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;tmp_arr[ac++]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String.fromCharCode(c1);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;i++;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(c1&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;191&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;c1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;224&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;c2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str_data.charCodeAt(i&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;tmp_arr[ac++]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String.fromCharCode(((c1&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;31&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;(c2&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;63&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;c2&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str_data.charCodeAt(i&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;c3&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;str_data.charCodeAt(i&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;tmp_arr[ac++]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;String.fromCharCode(&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;((c1&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;((c2&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;63&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; &lt;span&gt;(c3&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;63&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;);&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;i&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;}&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;tmp_arr.join(&quot;&quot;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以下的几个函数，用作常见的输入值校验和替换操作，主要针对中国大陆地区的校验规则：&lt;/p&gt;&lt;h1&gt;&lt;span&gt;70 校验是否为一个数字，以及该数字小数点位数是否与参数floats一致&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isNum&lt;/span&gt;(&lt;span&gt;value,floats=null&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`^[1-9][0-9]*.[0-9]{&lt;span&gt;${floats}&lt;/span&gt;}$|^0.[0-9]{&lt;span&gt;${floats}&lt;/span&gt;}$`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt; value === &lt;span&gt;&#x27;number&#x27;&lt;/span&gt; &amp;amp;&amp;amp; floats?regexp.test(&lt;span&gt;String&lt;/span&gt;(value)):&lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;anysicIntLength&lt;/span&gt;(&lt;span&gt;minLength,maxLength&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; result_str = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(minLength){&lt;br/&gt;        &lt;span&gt;switch&lt;/span&gt;(maxLength){&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;:&lt;br/&gt;                result_str = result_str.concat(&lt;span&gt;`{&lt;span&gt;${minLength&lt;span&gt;-1&lt;/span&gt;}&lt;/span&gt;}`&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;case&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;:&lt;br/&gt;                result_str = result_str.concat(&lt;span&gt;`{&lt;span&gt;${minLength&lt;span&gt;-1&lt;/span&gt;}&lt;/span&gt;,}`&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;                result_str = result_str.concat(&lt;span&gt;`{&lt;span&gt;${minLength&lt;span&gt;-1&lt;/span&gt;}&lt;/span&gt;,&lt;span&gt;${maxLength&lt;span&gt;-1&lt;/span&gt;}&lt;/span&gt;}`&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;span&gt;else&lt;/span&gt;{&lt;br/&gt;        result_str = result_str.concat(&lt;span&gt;&#x27;*&#x27;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; result_str;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;71 校验是否为非零的正整数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isInt&lt;/span&gt;(&lt;span&gt;value,minLength=&lt;span&gt;null&lt;/span&gt;,maxLength=&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(!isNum(value)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`^-?[1-9][0-9]&lt;span&gt;${anysicIntLength(minLength,maxLength)}&lt;/span&gt;$`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; regexp.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;72 校验是否为非零的正整数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isPInt&lt;/span&gt;(&lt;span&gt;value,minLength=&lt;span&gt;null&lt;/span&gt;,maxLength=&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(!isNum(value)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`^[1-9][0-9]&lt;span&gt;${anysicIntLength(minLength,maxLength)}&lt;/span&gt;$`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; regexp.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;73 校验是否为非零的负整数&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isNInt&lt;/span&gt;(&lt;span&gt;value,minLength=&lt;span&gt;null&lt;/span&gt;,maxLength=&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(!isNum(value)) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`^-[1-9][0-9]&lt;span&gt;${anysicIntLength(minLength,maxLength)}&lt;/span&gt;$`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; regexp.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;74 校验整数是否在取值范围内&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;minInt为在取值范围中最小的整数&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;maxInt为在取值范围中最大的整数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;checkIntRange&lt;/span&gt;(&lt;span&gt;value,minInt,maxInt=&lt;span&gt;9007199254740991&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;(isInt(value) &amp;amp;&amp;amp; (&lt;span&gt;Boolean&lt;/span&gt;(minInt!=&lt;span&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; minInt!=&lt;span&gt;null&lt;/span&gt;)?value&amp;gt;=minInt:&lt;span&gt;true&lt;/span&gt;) &amp;amp;&amp;amp; (value&amp;lt;=maxInt));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;75 校验是否为中国大陆传真或固定电话号码&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isFax&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^([0-9]{3,4})?[0-9]{7,8}$|^([0-9]{3,4}-)?[0-9]{7,8}$/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;76 校验是否为中国大陆手机号&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isTel&lt;/span&gt;(&lt;span&gt;value&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^1[3,4,5,6,7,8,9][0-9]{9}$/&lt;/span&gt;.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;77 校验是否为邮箱地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isEmail&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;78 校验是否为QQ号码&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isQQ&lt;/span&gt;(&lt;span&gt;value&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[1-9][0-9]{4,12}$/&lt;/span&gt;.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;79 校验是否为网址&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isURL&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^(https:\/\/|http:\/\/|ftp:\/\/|rtsp:\/\/|mms:\/\/)?[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+[\/=\?%\-&amp;amp;_~`@[\]\&#x27;:+!]*([^&amp;lt;&amp;gt;\&quot;\&quot;])*$/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;80 校验是否为不含端口号的IP地址&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;p&gt;IP格式为xxx.xxx.xxx.xxx，每一项数字取值范围为0-255&lt;/p&gt;&lt;p&gt;除0以外其他数字不能以0开头，比如02&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function isIP(str) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; /^((&lt;span&gt;25&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;5&lt;/span&gt;]&lt;span&gt;|2[0-4][0-9]|&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;]{&lt;span&gt;2&lt;/span&gt;}&lt;span&gt;|[1-9]?[0-9])\.){3}(25[0-5]|&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;][&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;]&lt;span&gt;|1[0-9]{2}|&lt;/span&gt;[&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;]&lt;span&gt;?[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;9&lt;/span&gt;])$/.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;81 校验是否为IPv6地址&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;p&gt;支持IPv6正常格式&lt;/p&gt;&lt;p&gt;支持IPv6压缩格式&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isIPv6&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;(str.match(&lt;span&gt;/:/g&lt;/span&gt;)?str.match(&lt;span&gt;/:/g&lt;/span&gt;).length&amp;lt;=&lt;span&gt;7&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;/::/&lt;/span&gt;.test(str)?&lt;span&gt;/^([\da-f]{1,4}(:|::)){1,6}[\da-f]{1,4}$/i&lt;/span&gt;.test(str):&lt;span&gt;/^([\da-f]{1,4}:){7}[\da-f]{1,4}$/i&lt;/span&gt;.test(str));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;82 校验是否为中国大陆第二代居民身份证&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;p&gt;共18位，最后一位可为X(大小写均可)&lt;/p&gt;&lt;p&gt;不能以0开头&lt;/p&gt;&lt;p&gt;出生年月日会进行校验：年份只能为18/19/2*开头，月份只能为01-12，日只能为01-31&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isIDCard&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[1-9][0-9]{5}(18|19|(2[0-9]))[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3}[0-9Xx]$/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;83 校验是否为中国大陆邮政编码&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;参数value为数字或字符串&lt;/p&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;isPostCode&lt;/span&gt;(&lt;span&gt;value&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[1-9][0-9]{5}$/&lt;/span&gt;.test(value.toString());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;84 校验两个参数是否完全相同，包括类型&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;same&lt;/span&gt;(&lt;span&gt;firstValue,secondValue&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; firstValue===secondValue;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;85 校验字符的长度是否在规定的范围内&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;minInt为在取值范围中最小的长度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;maxInt为在取值范围中最大的长度&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;lengthRange&lt;/span&gt;(&lt;span&gt;str,minLength,maxLength=&lt;span&gt;9007199254740991&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;(str.length &amp;gt;= minLength &amp;amp;&amp;amp; str.length &amp;lt;= maxLength);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;86 校验字符是否以字母开头&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;letterBegin&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[A-z]/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;87 校验字符是否为纯数字(整数)&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;pureNum&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/^[0-9]*$/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;anysicPunctuation&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(!str) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; arr = str.split(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;).map(&lt;span&gt;&lt;span&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; item = &lt;span&gt;&#x27;\\&#x27;&lt;/span&gt; + item;&lt;br/&gt;    });&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; arr.join(&lt;span&gt;&#x27;|&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getPunctuation&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; anysicPunctuation(str) || &lt;span&gt;&#x27;\\~|\\`|\\!|\\@|\\#|\\$|\\%|\\^|\\&amp;amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\||\\\|\\[|\\]|\\{|\\}|\\;|\\:|\\&quot;|\\\&#x27;|\\,|\\&amp;lt;|\\.|\\&amp;gt;|\\/|\\?&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getExcludePunctuation&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`[&lt;span&gt;${anysicPunctuation(str)}&lt;/span&gt;]`&lt;/span&gt;,&lt;span&gt;&#x27;g&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; getPunctuation(&lt;span&gt;&#x27; ~`!@#$%^&amp;amp;*()-_+=\[]{};:&quot;\&#x27;,&amp;lt;.&amp;gt;/?&#x27;&lt;/span&gt;.replace(regexp,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;88 返回字符串构成种类(字母，数字，标点符号)的数量&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;LIP缩写的由来：L(letter 字母) + I(uint 数字) + P(punctuation 标点符号)&lt;/p&gt;&lt;p&gt;参数punctuation的说明：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;punctuation指可接受的标点符号集&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;若需自定义符号集，例如“仅包含中划线和下划线”，将参数设置为&quot;-_&quot;即可&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;若不传值或默认为null，则内部默认标点符号集为除空格外的其他英文标点符号：~`!@#$%^&amp;amp;*()-_+=[]{};:&quot;&#x27;,&amp;lt;.&amp;gt;/?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getLIPTypes&lt;/span&gt;(&lt;span&gt;str,punctuation=null&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; p_regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;&#x27;[&#x27;&lt;/span&gt;+getPunctuation(punctuation)+&lt;span&gt;&#x27;]&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/[A-z]/&lt;/span&gt;.test(str) + &lt;span&gt;/[0-9]/&lt;/span&gt;.test(str) + p_regexp.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;89 校验字符串构成的种类数量是否大于或等于参数num的值。&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;通常用来校验用户设置的密码复杂程度。&lt;/h1&gt;&lt;p&gt;校验规则：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;参数num为需要构成的种类(字母、数字、标点符号)，该值只能是1-3。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;默认参数num的值为1，即表示：至少包含字母，数字，标点符号中的1种&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;若参数num的值为2，即表示：至少包含字母，数字，标点符号中的2种&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;若参数num的值为3，即表示：必须同时包含字母，数字，标点符号&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;参数punctuation指可接受的标点符号集，具体设定可参考getLIPTypes()方法中关于标点符号集的解释。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;pureLIP&lt;/span&gt;(&lt;span&gt;str,num=&lt;span&gt;1&lt;/span&gt;,punctuation=null&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`[^A-z0-9|&lt;span&gt;${getPunctuation(punctuation)}&lt;/span&gt;]`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Boolean&lt;/span&gt;(!regexp.test(str) &amp;amp;&amp;amp; getLIPTypes(str,punctuation)&amp;gt;= num);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;90 清除所有空格&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;clearSpaces&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; str.replace(&lt;span&gt;/[ ]/g&lt;/span&gt;,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;91 清除所有中文字符(包括中文标点符号)&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;clearCNChars&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; str.replace(&lt;span&gt;/[\u4e00-\u9fa5]/g&lt;/span&gt;,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;92 清除所有中文字符及空格&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;clearCNCharsAndSpaces&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; str.replace(&lt;span&gt;/[\u4e00-\u9fa5 ]/g&lt;/span&gt;,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;93 除保留标点符号集以外，清除其他所有英文的标点符号(含空格)&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;全部英文标点符号为：~`!@#$%^&amp;amp;*()-_+=[]{};:&quot;&#x27;,&amp;lt;.&amp;gt;/?&lt;/p&gt;&lt;p&gt;参数excludePunctuation指需要保留的标点符号集，例如若传递的值为&#x27;_&#x27;，即表示清除_以外的其他所有英文标点符号。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;clearPunctuation&lt;/span&gt;(&lt;span&gt;str,excludePunctuation=null&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; regexp = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;(&lt;span&gt;`[&lt;span&gt;${getExcludePunctuation(excludePunctuation)}&lt;/span&gt;]`&lt;/span&gt;,&lt;span&gt;&#x27;g&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; str.replace(regexp,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;94 校验是否包含空格&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;haveSpace&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/[ ]/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;span&gt;95 校验是否包含中文字符(包括中文标点符号)&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;haveCNChars&lt;/span&gt;(&lt;span&gt;str&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;/[\u4e00-\u9fa5]/&lt;/span&gt;.test(str);&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>