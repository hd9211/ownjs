<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>77786c643cca626077415bfc618ca332</guid>
<title>Junit执行器Runner探索之旅</title>
<link>https://toutiao.io/k/mm2xsuu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                       &quot; id=&quot;js_content&quot;&gt;
            &lt;h1&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;导读&lt;/span&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;单元测试是每个程序员必备的技能，而Runner是每个单元测试类必有属性。本文通过解读Junit源码，介绍junit中每个执行器的使用方法，让读者在单元测试时，可以灵活的使用Runner执行器。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;01&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在今年的敏捷团队建设中，我通过Suite执行器实现了一键自动化单元测试。Juint除了Suite执行器还有哪些执行器呢？由此我的Runner探索之旅开始了！&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在今年的敏捷团队建设中，京东物流通过Suite执行器实现了一键自动化单元测试。Juint除了Suite执行器还有哪些执行器呢？由此京东物流的Runner探索之旅开始了！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;02&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;&lt;strong&gt;RunW&lt;/strong&gt;&lt;strong&gt;ith&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;理解，首先 MCube 会依据模板缓存状态判断是否需要网络获取最新模板，当获取到模板后进行模板加载，加载阶段会将产物转换为视图树的结构，转换完成后将通过表达式引擎解析表达式并取得正确的值，通过事件解析引擎解析用户自定义事件并完成事件的绑定，完成解析赋值以及事件绑定后进行视图的渲染，最终将目标页面展示到屏幕。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;unWith的注释是当一个类用@RunWith注释或扩展一个用@RunWith注释的类时，JUnit将调用它引用的类来运行该类中的测试，而不是内置到JUnit中的运行器，就是测试类根据指定运行方式进行运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public @interface RunWith {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Class&amp;lt;? extends Runner&amp;gt; value();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;其中：Runner 就是指定的运行方式&lt;/span&gt;。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;03&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;Runner&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;Runner的作用是告诉Junit如何运行一个测试类，它是一个抽象类。通过RunWith 指定具体的实现类，如果不指定默认使用&lt;strong&gt;BlockJUnit4ClassRunner&lt;/strong&gt;，Runner的代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Runner&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Describable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; Description &lt;span class=&quot;code-snippet__title&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(RunNotifier notifier)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testCount&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; getDescription().testCount();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;3.1 ParentRunne&lt;/strong&gt;&lt;strong&gt;r&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ParentRunner是一个抽象类，提供了大多数特定于运行器的功能，是经常使用运行器的父节点。实现了Filterable,Sortable接口，可以过滤和排序子对象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提供了3个抽象方法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;protected abstract List&amp;lt;T&amp;gt; getChildren();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;protected abstract Description describeChild(T child);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;protected abstract void runChild(T child, RunNotifier notifier);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.1.1 BlockJUnit4ClassRunner&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;BlockJUnit4ClassRunner是Juint4默认的运行器，&lt;span&gt;具有与旧的测试类运行器(JUnit4ClassRunner)完全相同的行为。 &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ParentRunner3个抽象方法的实现如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;runChild&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; FrameworkMethod method, RunNotifier notifier)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Description description = describeChild(method);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isIgnored(method)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        notifier.fireTestIgnored(description);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        runLeaf(methodBlock(method), description, notifier);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; Description &lt;span class=&quot;code-snippet__title&quot;&gt;describeChild&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(FrameworkMethod method)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Description description = methodDescriptions.get(method);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (description == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        description = Description.createTestDescription(getTestClass().getJavaClass(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                testName(method), method.getAnnotations());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        methodDescriptions.putIfAbsent(method, description);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; description;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;protected&lt;/span&gt; List&amp;lt;FrameworkMethod&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getChildren&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; computeTestMethods();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;runChild() : &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;describeChild() : 对测试方法创建Description并进行缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;getChildren():&lt;span&gt;返回运行测试的方法。 默认实现返回该类和超类上所有用@Test标注的未重写的方法&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;3.1.2&lt;/strong&gt; &lt;strong&gt;BlockJUnit4ClassRunnerWithParameters&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BlockJUnit4ClassRunnerWithParameters是一个支持参数的BlockJUnit4ClassRunner。参数可以通过构造函数注入或注入到带注释的字段中。参数包含&lt;span&gt;名称、测试类和一组参数。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private final Object[] parameters;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;private final String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public BlockJUnit4ClassRunnerWithParameters(TestWithParameters test)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        throws InitializationError {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    super(test.getTestClass().getJavaClass());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    parameters = test.getParameters().toArray(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            new Object[test.getParameters().size()]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    name = test.getName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参数代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class TestWithParameters {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private final String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private final TestClass testClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private final List&amp;lt;Object&amp;gt; parameters;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public TestWithParameters(String name, TestClass testClass,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            List&amp;lt;Object&amp;gt; parameters) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        notNull(name, &quot;The name is missing.&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        notNull(testClass, &quot;The test class is missing.&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        notNull(parameters, &quot;The parameters are missing.&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.name = name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.testClass = testClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.parameters = unmodifiableList(new ArrayList&amp;lt;Object&amp;gt;(parameters));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;BlockJUnit4ClassRunnerWithParameters一般结合Parameterized使用&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;3.1.3 Theories&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Theories&lt;span&gt;允许对无限数据点集的子集测试某种功能。&lt;/span&gt;提供一组参数的排列组合值作为待测方法的输入参数。同时注意到在使用Theories这个Runner的时候，待测方法可以拥有输入参数，&lt;span&gt;可以使您的测试更加灵活。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@RunWith(Theories.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class TheoriesTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @DataPoints&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static String[] tables = {&quot;方桌子&quot;, &quot;圆桌子&quot;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @DataPoints&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static int[] counts = {4,6,8};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Theory&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void testMethod(String table, int count){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(String.format(&quot;一套桌椅有一个%s和%d个椅子&quot;, table, count));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3660531697341513&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxP6XTU4Ow9SWj8xBdyW75Iw3Ds9PuvdtIjZJCoAuIyMk3FohfIAgibtw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2 Theories测试代码的执行结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.1.4 JUnit4&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JUnit4是Junit4默认执行器的别名，想要显式地将一个类标记为JUnit4类,应该使用@RunWith(JUnit4.class)，而不是，使用@RunWith(BlockJUnit4ClassRunner.class)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1.5 Suite&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Suite&lt;span&gt;允许您手动构建包含来自许多类的测试的套件.通过&lt;/span&gt;Suite.SuiteClasses定义要执行的测试类，一键执行所有的测试类。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@RunWith(Suite.class)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Suite&lt;/span&gt;.SuiteClasses({Suite_test_a.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;,Suite_test_b.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt;,Suite_test_c.&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Suite_main&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Suite_test_a&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void testRun(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Suite_test_a_running&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Suite_test_b&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void testRun(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Suite_test_b_running&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Suite_test_c&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void testRun(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.&lt;span class=&quot;code-snippet__keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Suite_test_c_running&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;执行结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22127139364303178&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;818&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxOWn8V5SI9eQtglRFuUp8tpB23k2IHmv3Wjeib1VJr4EtS1O07pfyib6A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;图3 &lt;/span&gt;Suite测试代码的执行结果&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;如结果所示：执行MainSuit时依次执行了Suite_test_a，Suite_test_b,Suite_test_c 的方法，实现了一键执行。&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.6 Categories&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Categories&lt;span&gt;在给定的一组测试类中，只运行用带有@ inclecategory标注的类别或该类别的子类型标注的类和方法。通过&lt;/span&gt;ExcludeCategory过滤类型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试代码如下：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public interface BlackCategory {}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public interface WhiteCategory {}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Categories_test_a {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Category(BlackCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void testFirst(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;Categories_test_a_testFirst_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Category(WhiteCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void testSecond(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;Categories_test_a_testSecond_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Categories_test_b {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Category(WhiteCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void testFirst(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;Categories_test_b_testFirst_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Category(BlackCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void testSecond(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;Categories_test_b_testSecond_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;执行带WhiteCategory的方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@RunWith(Categories.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Categories.IncludeCategory(WhiteCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Categories.ExcludeCategory(BlackCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Suite.SuiteClasses( { Categories_test_a.class, Categories_test_b.class })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Categories_main {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;运行结果:&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.19169329073482427&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;939&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxRiatNsD0x3QHaS0u1xnasVJEzhg4QUeecskez0ShrburmhDVjdY5Y5Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;span&gt;图4 &lt;/span&gt;Categories测试代码WhiteCategory分组执行结果&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;执行带BlackCategory的方法&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;kotlin&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@RunWith(Categories.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Categories.IncludeCategory(BlackCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Categories.ExcludeCategory(WhiteCategory.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@Suite.SuiteClasses( { Categories_test_a.class, Categories_test_b.class })&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class Categories_main {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20123839009287925&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;969&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxLib4xiayeXuxiawWkiaFmneWOundSjqP5BCKmIQ2zSUjCTakUicv57mXcibg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;span&gt;图5 &lt;/span&gt;Categories测试代码BlackCategory分组执行结果&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;如运行结果所示，通过IncludeCategory，ExcludeCategory可以灵活的运行具体的测试类和方法。&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.1.7 Enclosed&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Enclosed&lt;span&gt;使用Enclosed运行外部类，内部类中的测试将被运行。 您可以将测试放在内部类中，以便对它们进行分组或共享常量。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试代码&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class EnclosedTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public  void runOutMethou(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;EnclosedTest_runOutMethou_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static class EnclosedInnerTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       public  void runInMethou(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&quot;EnclosedInnerTest_runInMethou_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;运行结果：没有执行内部类的测试方法。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.199207135777998&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1009&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxG9O7kL00HMvjtYlibHkSVpHOENmbfGhlzQF5mVS2P0UUTbXwFn7m8kQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;span&gt;图6 &lt;/span&gt;Enclosed测试代码的执行结果&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;使用Enclosed执行器：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@RunWith(Enclosed.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class EnclosedTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public  void runOutMethou(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        System.out.println(&quot;EnclosedTest_runOutMethou_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static class EnclosedInnerTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       public  void runInMethou(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(&quot;EnclosedInnerTest_runInMethou_running&quot;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;执行结果：执行了内部类的测试方法。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.21871599564744287&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;919&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxTjGDXnibgRQlItrr7K7gXEvvFvmXGpZPj8uiaUibdYicRSwAQHpOWS2Ygw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;span&gt;图7 &lt;/span&gt;Enclosed测试代码的执行结果&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1.8 Parameterized&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Parameterized&lt;span&gt;实现参数化测试。 运行参数化的测试类时，会为测试方法和测试数据元素的交叉乘积创建实例。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Parameterized包含一个&lt;/span&gt;&lt;span&gt;提供数据的方法，这个方法必须&lt;/span&gt;&lt;/span&gt;&lt;span&gt;增加&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;arameters注解，并且&lt;/span&gt;&lt;span&gt;这个方法必&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;须是静态static的，并且返回一个集合Collection，Collection中的值长度必须相等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试代码：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@RunWith(Parameterized.class)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;public class ParameterizedTest {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Parameterized.Parameters&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public static Collection&amp;lt;Object[]&amp;gt; initData(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       return Arrays.asList(new Object[][]{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;               {&quot;小白&quot;,1,&quot;鸡腿&quot;},{&quot;小黑&quot;,2,&quot;面包&quot;},{&quot;小红&quot;,1,&quot;苹果&quot;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       });&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private String name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private int  count;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    private String food;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public ParameterizedTest(String name, int count, String food) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.name = name;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.count = count;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        this.food = food;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    @Test&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    public void eated(){&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       System.out.println(String.format(&quot;%s中午吃了%d个%s&quot;,name,count,food));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22820763956904996&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1021&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RQv8vncPm1WmpwQrnelJGk4cHYOrsthxwkLKKSf3ZBYBYY19a4dibtNXXhtDf7j14t1BV4NNde8iaMtCBWyb5ic7g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;span&gt;图8 &lt;/span&gt;Parameterized测试代码的执行结果&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;3.2 JUnit38ClassRunner&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;JUnit38ClassRunner及其子类是Junit4的内部运行器，有一个内部类OldTestClassAdaptingListener&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现了TestListener接口。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;3.3 ErrorReportingRunner&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;ErrorReportingRunner也是Junit4运行错误时抛出的异常，代码如下：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Throwable&amp;gt; causes;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; ErrorReportingRunner(&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testClass&lt;/span&gt;, &lt;span class=&quot;code-snippet__title&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;cause&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (testClass == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; NullPointerException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Test class cannot be null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    this.testClass = testClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    causes = getCauses(cause);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Throwable&amp;gt; getCauses(Throwable cause) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (cause &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; InvocationTargetException) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; getCauses(cause.getCause());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (cause &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; InitializationError) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ((InitializationError) cause).getCauses();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (cause &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; org.junit.internal.runners.InitializationError) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; ((org.junit.internal.runners.InitializationError) cause)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    .getCauses();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(cause);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当junit运行错误时，会抛出ErrorReportingRunner，例如：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Runner &lt;span class=&quot;code-snippet__title&quot;&gt;getRunner&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Runner runner = request.getRunner();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fFilter.apply(runner);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; runner;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (NoTestsRemainException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ErrorReportingRunner(Filter.class, &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Exception(String&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                .format(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;No tests found matching %s from %s&quot;&lt;/span&gt;, fFilter&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        .describe(), request.toString())));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;94065&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4 IgnoredClassRunner&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;90%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;IgnoredClassRunner是当测试的方法包含Ignore注解时，会忽略该方法。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;IgnoredClassRunner&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Runner&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt; clazz;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;IgnoredClassRunner&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Class&amp;lt;?&amp;gt; testClass)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        clazz = testClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(RunNotifier notifier)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        notifier.fireTestIgnored(getDescription());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Description &lt;span class=&quot;code-snippet__title&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Description.createSuiteDescription(clazz);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;IgnoredClassRunner的使用&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;IgnoredBuilder&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;RunnerBuilder&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Runner &lt;span class=&quot;code-snippet__title&quot;&gt;runnerForClass&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Class&amp;lt;?&amp;gt; testClass)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (testClass.getAnnotation(Ignore.class) != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; IgnoredClassRunner(testClass);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;当测试时想忽略某些方法时，可以通过继承IgnoredClassRunner增加特定注解实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;h1&gt;&lt;section data-id=&quot;98782&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;04&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;263:265&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小结&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Runner探索之旅结束了，可是单元测试之路才刚刚开始。不同的Runner组合，让单元测试更加灵活，测试场景更加丰富，更好的实现了测试驱动开发，让系统更加牢固可靠。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;活动预告&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6133333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapOPZD13CEzFeLiaWJl9icbazMdaAf95oSdj7OXva3ZaE5DLOmiaT1zG0LYiaB0Eqns9X3Z2uuLFatq6YaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GIAC 全球互联网架构大会 2022 将于 7 月 22 - 23 日在深圳举行，本届 GIAC 议题共设置有 24 个专题，覆盖各类架构热点领域，每个主题由业内知名架构师、技术负责人等专家担任出品人，负责议题选取和质量把控。本次数据库专题由腾讯云数据库负责人林晓斌担任出品人，将有更多数据库方面精彩话题，点击阅读原文查看 GIAC 详细日程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;点击【&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;】，了解更多活动信息。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;本文由高可用架构转载。技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMDU1MTE1OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapONl06YmHad4csRU93kcbJ76JIWzEAmOSVooibFHHkzfWzzkc7dpU4H06Wp9F6Z687vIghdawxvl47A/0?wx_fmt=png&quot; data-nickname=&quot;高可用架构&quot; data-alias=&quot;ArchNotes&quot; data-signature=&quot;高可用架构公众号。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4f0bca14b3b315d9d6562ef37b3ac497</guid>
<title>Apache Kvrocks 在百度的应用实践</title>
<link>https://toutiao.io/k/vrgbf49</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;h5_profile_btn&quot; class=&quot;flex_context account_info&quot;&gt;
          &lt;div class=&quot;flex_bd&quot;&gt;
            &lt;p id=&quot;profile_share2&quot; class=&quot;account_nickname&quot;&gt;
              &lt;span aria-hidden=&quot;true&quot; id=&quot;copyright_logo&quot; class=&quot;account_original account_meta&quot;&gt;Original&lt;/span&gt;
              &lt;strong role=&quot;link&quot; tabindex=&quot;0&quot; class=&quot;weui-wa-hotarea account_nickname_inner account_meta js_go_profile js_wx_tap_highlight wx_tap_link&quot;&gt;Apache Kvrocks&lt;/strong&gt;
              &lt;span aria-hidden=&quot;true&quot; id=&quot;publish_time&quot; class=&quot;account_time account_meta&quot;/&gt;
              &lt;span aria-hidden=&quot;true&quot; id=&quot;js_ip_wording_wrp&quot; class=&quot;account_time account_meta&quot;&gt;Posted on &lt;span id=&quot;js_ip_wording&quot;/&gt;&lt;/span&gt;
            &lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0b61d0a7dfa66ee852259681efa44e3d</guid>
<title>Poetry(诗歌)- 新一代python打包、发行、依赖管理工具 | 君莫笑的博客</title>
<link>https://toutiao.io/k/rm2195o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
        &lt;h1 id=&quot;Poetry-诗歌-新一代python打包、发行、依赖管理工具&quot;&gt;&lt;a href=&quot;#Poetry-诗歌-新一代python打包、发行、依赖管理工具&quot; class=&quot;headerlink&quot; title=&quot;Poetry(诗歌)- 新一代python打包、发行、依赖管理工具&quot;/&gt;Poetry(诗歌)- 新一代python打包、发行、依赖管理工具&lt;/h1&gt;&lt;p&gt;最近看jupyter工程看到项目有使用到poetry作为它们的打包、分发工具，忙里偷闲研究了一把，发现不简单。&lt;/p&gt;
&lt;p&gt;Poetry 是什么？&lt;/p&gt;
&lt;p&gt;他是基于使用 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://peps.python.org/pep-0518/&quot;&gt;PEP 518&lt;/a&gt;标准开发的一套python 打包和依赖管理工具 &lt;/p&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;/&gt;特性&lt;/h2&gt;
&lt;p&gt;Poetry 附带了以确定性方式管理项目所需的所有工具&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ poetry add pendulum&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Using version ^2.0.5 for pendulum&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Updating dependencies&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Resolving dependencies... (1.5s)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Writing lock file&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Package operations: 4 installs, 0 updates, 0 removals&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Installing six (1.13.0): Downloading... 25%&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Updating pytzdata (2019.3 -&amp;gt; 2020.4): Installing...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Installing pendulum (2.0.5)&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到poetry 提供了 lock file机制类似 js的 package-lock.json 机制，锁定项目明确的依赖项，虽然传统的 requirement.txt 机制也可以使用 == 机制来锁定依赖库版本，但是poetry还提供了更强大的依赖分析以及依赖版本约束机制。&lt;/p&gt;

&lt;p&gt;无需用户编辑 传统的setup.py然后使用dist打包工具打包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ poetry build&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Building poetry (1.0.0)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Building sdist&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Built poetry-1.0.0.tar.gz&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Building wheel&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Built poetry-1.0.0-py2.py3-none-any.whl&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;一键发布至pypi，轻松分享给其他用户使用,当然也可以是内部自建pypi库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ poetry publish&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Publishing poetry (1.0.0) to PyPI&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Uploading poetry-1.0.0.tar.gz 100%&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;- Uploading poetry-1.0.0-py2.py3-none-any.whl 58%&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ poetry show --tree&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;requests-toolbelt 0.8.0 A utility belt &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; advanced &lt;span class=&quot;built_in&quot;&gt;users&lt;/span&gt;...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;└── requests &amp;lt;3.0.0,&amp;gt;=2.0.1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ├── certifi &amp;gt;=2017.4.17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ├── chardet &amp;gt;=3.0.2,&amp;lt;3.1.0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ├── idna &amp;gt;=2.5,&amp;lt;2.7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    └── urllib3 &amp;lt;1.23,&amp;gt;=1.21.1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;$ poetry show --latest&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;pendulum 2.0.4   1.4.5 Python datetimes made easy.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;django   1.11.11 2.0.3 A high-level Python Web framework ...&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;requests 2.18.4  2.18.4 Python HTTP &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Humans.&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;poetry内对版本各种依赖的版本号约束&quot;&gt;&lt;a href=&quot;#poetry内对版本各种依赖的版本号约束&quot; class=&quot;headerlink&quot; title=&quot;poetry内对版本各种依赖的版本号约束&quot;/&gt;poetry内对版本各种依赖的版本号约束&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;插入符号版本约束&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;th&gt;允许的版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;^1.2.3&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^1.2&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.2.0 &amp;lt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^1&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.0.0 &amp;lt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^0.2.3&lt;/td&gt;
&lt;td&gt;&amp;gt;=0.2.3 &amp;lt;0.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^0.0.3&lt;/td&gt;
&lt;td&gt;&amp;gt;=0.0.3 &amp;lt;0.0.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^0.0&lt;/td&gt;
&lt;td&gt;&amp;gt;=0.0.0 &amp;lt;0.1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^0&lt;/td&gt;
&lt;td&gt;&amp;gt;=0.0.0 &amp;lt;1.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;波浪号版本约束&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;th&gt;允许的版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;~1.2.3&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~1.2&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.2.0 &amp;lt;1.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~1&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.0.0 &amp;lt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;通配符版本要求&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;th&gt;允许的版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;&amp;gt;=0.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.*&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.0.0 &amp;lt;2.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.2.*&lt;/td&gt;
&lt;td&gt;&amp;gt;=1.2.0 &amp;lt;1.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不等式要求&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;= 1.2.0&lt;br/&gt;1&lt;br/&gt; &amp;lt; 2&lt;br/&gt; != 1.2.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了pip库这种依赖版本约束，poetry还提供了 url ，git ，path等方式的依赖管理机制，详情见 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://python-poetry.org/docs/dependency-specification&quot;&gt;dependency-specification&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;/&gt;安装&lt;/h2&gt;
&lt;h2 id=&quot;实际使用案例&quot;&gt;&lt;a href=&quot;#实际使用案例&quot; class=&quot;headerlink&quot; title=&quot;实际使用案例&quot;/&gt;实际使用案例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;已有工程如何接入 poetry&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设你开发了一个python代码库比如: &lt;/p&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$  poetry init                                                                                                                                      &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;This &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; will guide you through creating your pyproject.toml config.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Package name [iflags]:  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Version [0.1.0]:  1.0.2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Description []:  A Generic iflags parser based on argparse                    &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Author [maybaby &amp;lt;ybyang7@iflytek.com&amp;gt;, n to skip]:  &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;License []:  MIT&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Compatible Python versions [^3.9]:  &amp;gt;3.6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Would you like to define your main dependencies interactively? (&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;/no) [&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;] no&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Would you like to define your development dependencies interactively? (&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;/no) [&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;] no&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Generated file&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[tool.poetry]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;name = &lt;span class=&quot;string&quot;&gt;&quot;iflags&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;version = &lt;span class=&quot;string&quot;&gt;&quot;1.0.2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;description = &lt;span class=&quot;string&quot;&gt;&quot;A Generic iflags parser based on argparse&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;authors = [&lt;span class=&quot;string&quot;&gt;&quot;maybaby &amp;lt;ybyang7@iflytek.com&amp;gt;&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;license = &lt;span class=&quot;string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[tool.poetry.dependencies]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;python = &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;3.6&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[tool.poetry.dev-dependencies]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[build-system]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;requires = [&lt;span class=&quot;string&quot;&gt;&quot;poetry-core&amp;gt;=1.0.0&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;build-backend = &lt;span class=&quot;string&quot;&gt;&quot;poetry.core.masonry.api&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Do you confirm generation? (&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;/no) [&lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;] &lt;span class=&quot;built_in&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此时项目下新增生成了一个 pyproject.toml 文件， 这个文件是根据&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://peps.python.org/pep-0518/&quot;&gt;PEP 518&lt;/a&gt;定义的一个新的项目依赖描述文件， 对传统的requirements.txt做了升级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ poetry build                                                                                                                             &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Building iflags (1.0.2)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Building sdist&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Built iflags-1.0.2.tar.gz&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Building wheel&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  - Built iflags-1.0.2-py3-none-any.whl&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;ls&lt;/span&gt; -l dist                                                                                                                             &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;total 48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--  1 yangyanbo  staff  9076 Jun 15 13:13 iflags-1.0.2-py3-none-any.whl&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r--  1 yangyanbo  staff  8819 Jun 15 13:13 iflags-1.0.2.tar.gz&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到构建出 whl包和源码包了了，由于我们的iflags是纯python实现的，所以whl包不受任何平台限制可以跨平台安装，但是要求py3，poetry内置了这些行为提高了我们打包python的效率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;验证打包有效性&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# ~/projects/iflytek/code/iflags $ cd dist                                                                                                                              &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# ~/projects/iflytek/code/iflags/dist $ python                                                                                                                               ✔  4 ⚙  0.01s  3.88 L &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Python 3.9.12 (main, Jun  1 2022, 06:36:29) &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[Clang 12.0.0 ] :: Anaconda, Inc. on darwin&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;credits&quot;&lt;/span&gt; or &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import iflags&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line 1, &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ModuleNotFoundError: No module named &lt;span class=&quot;string&quot;&gt;&#x27;iflags&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[5]  + 74687 suspended  python&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# ~/projects/iflytek/code/iflags/dist $ pip install ./iflags-1.0.2-py3-none-any.whl                                                                              &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Looking &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; indexes: https://pypi.mirrors.ustc.edu.cn/simple/&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Processing ./iflags-1.0.2-py3-none-any.whl&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Installing collected packages: iflags&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Successfully installed iflags-1.0.2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;WARNING: You are using pip version 22.0.4; however, version 22.1.2 is available.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;You should consider upgrading via the &lt;span class=&quot;string&quot;&gt;&#x27;/Users/yangyanbo/Library/Caches/pypoetry/virtualenvs/aiges-python-D96GqUY2-py3.9/bin/python -m pip install --upgrade pip&#x27;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# ~/projects/iflytek/code/iflags/dist $ python                                                                                                                              &lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Python 3.9.12 (main, Jun  1 2022, 06:36:29) &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;[Clang 12.0.0 ] :: Anaconda, Inc. on darwin&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;string&quot;&gt;&quot;help&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;copyright&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;credits&quot;&lt;/span&gt; or &lt;span class=&quot;string&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import iflags&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# The tool: python located at /Users/yangyanbo/Library/Caches/pypoetry/virtualenvs/aiges-python-D96GqUY2-py3.9/bin/python for executing has been registered!!!&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，通过使用pip install 可以安装poetry build出的包，并且可以import正常导入使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包分发到pypi或者自建pypi源&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;poetry publish                                                                                                                              &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Username: ybyang7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Password: &lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;Publishing iflags (1.0.2) to PyPI&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt; - Uploading iflags-1.0.2-py3-none-any.whl 100%&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt; - Uploading iflags-1.0.2.tar.gz 100%&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/blog/img/16552713546268.jpg&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;即可在其他机器上 直接 &lt;code&gt;pip  install iflags&lt;/code&gt; 即可使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;/&gt;结语&lt;/h2&gt;&lt;p&gt;poetry还提供了 类conda env隔离的的功能，以及开发阶段依赖，和运行时依赖区分，可以自行细细体验&lt;/p&gt;
&lt;p&gt;py3的时代，poetry这个工具还是非常有必要熟悉的，目前我看到的一些 jupyter工程基本上都是使用了这个工具&lt;/p&gt;

      

      
        
      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0f31d3067b1e1fd18c615aec13a5d9a8</guid>
<title>技术氛围奇差，要离职吗？</title>
<link>https://toutiao.io/k/k6q89ub</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创不易，求分享、求一键三连&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;今天文章认知或许有问题，欢迎拍砖&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前段时间有个粉丝问了一个问题：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;小钗你好，我是团队的架构师，现在发现团队技术氛围不太好，面对这种情况应该怎么办呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个同学的问题是&lt;strong&gt;技术氛围&lt;/strong&gt;，我们需要先探讨什么是技术氛围，技术氛围到底有什么用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术氛围可以算作&lt;strong&gt;工程师文化&lt;/strong&gt;体系的一部分，说道工程师文化大家就熟悉了：拖鞋体恤、头发蓬松、“呆若木鸡”...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表象如此其实底层含义是要表达：&lt;strong&gt;这是一群不拘小节并且天赋异禀的人，只要成为他们那样的人，就拥有以一敌百的能力&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，工程师文化的底层逻辑是：对天赋异禀，以一敌百，用个人撬动世界的美好向往，想想也是，有哪个程序员没有曾经怀抱一颗&lt;strong&gt;改变世界的梦想&lt;/strong&gt;呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工程师不特指程序员，但程序员代码可以带来的杠杆力量是最大的，神匠鲁班也只能做一个工具，但代码可以创造一个世界，比如&lt;strong&gt;游戏世界&lt;/strong&gt;，这也是为什么程序员尤其容易&lt;strong&gt;蜜汁自信&lt;/strong&gt;，因为他拥有“创造”的能力，常见程序员的行为也是：行政做一个事情要一周，程序员创造个工具后只要一天。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;这种创造工具能力带来的巨大效率提升，是程序员迷之自信的本源&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以认为：&lt;strong&gt;鼓励技术氛围就是鼓励工程师文化，其背后其实是鼓励以一敌百的极致效率：高效的解决问题，最终其实是鼓励创新&lt;/strong&gt;，当然不可避免会附带部分英雄主义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但创新谈何容易，并且工程师文化的内核也不是所有团队能领会的，具体到团队，技术氛围意味着以下行为：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;技术分享频繁；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢试水新技术、新框架；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢开源；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;喜欢就技术话题撕逼，并且只喜欢就技术话题撕逼；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拒绝长时间加班；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Code Review制度做的比较深；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但十分遗憾，上述行为与业务可能没有直接关系，&lt;strong&gt;外部门对上述是完全无感的&lt;/strong&gt;，所以并不是什么能&lt;strong&gt;拿得上台面的事情&lt;/strong&gt;，甚至会变成技术人员的自嗨...&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;什么是核心技术&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;十多年工作下来，我的生长方向可能发生了错乱，尤其最近几年，我越来越不认为程序员本身是什么核心技术了...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，工作经历带来的最直观的感受是：程序员们只是在提供很多工具解决效率问题，而在多数场景下并不能解决创新问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还记得在前公司我问了Leader一个问题：&lt;strong&gt;为什么公司技术人员的地位不高&lt;/strong&gt;？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Leader想了想回答到：地位不高就对了，公司又不是以技术作为核心驱动力，也许&lt;strong&gt;外包公司&lt;/strong&gt;，或者&lt;strong&gt;游戏&lt;/strong&gt;这种&lt;strong&gt;技术可以创造一切&lt;/strong&gt;的公司技术地位会很高吧？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一开始，大家都非常推崇谷歌文化，由此带来了工程师文化，把技术和人才放在第一位，但后来发现互联网行业里面其实没有什么特别的核心技术，这些互联网技术大多都是开源的。并且只有当你找到了一个一定要做的事情之后，才知道你需要什么技术。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且是对技术的聚拢整合，并不是技术的原创，代码本身不是最重要的，要干什么才是最重要的。比如我现在在互联网医疗体系，重要的是&lt;strong&gt;医疗技术&lt;/strong&gt;的整合，而不是code。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以对于创业者和企业家来说，仅仅靠找一些所谓的天才、人才，甚至一些刚毕业的大学生，就想把事情做得很棒，就想把事情做得很厉害，这是不现实的，这种想法是很危险的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;包括现在所谓的App工厂，这种逻辑也是不合理的。很多重要产品都是一号位牵头做的，一号位投入了大量的资源与精力，是从上到下一起来打拼出来的，而那些分散投入的小App，很难做成，多数是在浪费和消耗。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;互联网行业的本质是搭建大平台，而搭建一个大平台最难的其实是执行力&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的难度在于要把产品供应链，产品交互，以及用户的很多需求等等各方面，通过各个部门去安排妥当，去协调起来。这些都需要很强的目标管理能力，需要很强的执行力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说互联网应该是一个大型的基建。在构建这个基础平台的过程中，目标和执行力才是最重要的因素，人才和技术反而不是。了解到这一切，大家应该知道工程师文化或者说技术氛围在全局中是个什么样的位置了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;再谈技术氛围&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后回到粉丝问题本身：技术氛围不浓厚该怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果只是要回答这个问题，其实相当的简单：&lt;strong&gt;《经济学十大原理》：所有人都会对奖励做出反应&lt;/strong&gt;，所以想要提升技术氛围只需要两步走：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;清晰定义哪些行为可以提升技术氛围；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于各个行为设计合理的奖惩机制；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;行为很好筛选，奖惩机制的设计也不难，只不过从哪里去拿到对应的奖励资源，这个是技术负责人需要思考的命题了，因为对于公司来说，技术氛围好了带来的好处是什么？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;小伙伴的技术提升更快，而后更好跳槽吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;技术团队投入更多资源做“无效”技术建设而不管业务死活吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;或者提升了团队影响力，好去找工资更高的程序员过来做基建吗？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实上述问题没有绝对对错，只不过全局还是要看产出，看结果：产出好，确实提升了全局效率那就是工程师文化，那就是牛逼，那就是技术创新；没有产出，那就是浪费资源，那就是程序员的自嗨。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，技术氛围好不好，其实是最终博弈的结果：技术创新好，自然有预算进行工程师文化建设；技术创新不好，自然就没有预算，那么当然就没有什么技术氛围可言了...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，技术氛围有时候好，有时候不好，到底好不好，端看技术负责人的选题能力和各位的执行能力了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的分享就到这，喜欢的同学可以四连支持：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.11333333333333333&quot; data-type=&quot;png&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8ZQdageBqiaecvLg9ITxMqk39iaY2cy43iaGDnsSt8hqG3HHBFLxyFRAqw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要更多交流可以加我微信：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5549076773566569&quot; data-type=&quot;png&quot; data-w=&quot;2058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JdfjlwvwuTCLG63G4abiaxJn2P8Piaicuz8zGabYsLQM2vm4nGkbZEyf4W6rMENAL43FCicU0OdJsleGBn9XLvmWjw/640?wx_fmt=png&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f3dbfc8df1ce710894184448812a1b9f</guid>
<title>Git存储原理及部分实现</title>
<link>https://toutiao.io/k/ztcw9lm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;手把手教你理解轮子之git&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当年他陈刀仔，能用20块赢到 3700万，今天我卢.....&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sry，串台了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当年他linus 能用两个星期写完Git， 今天我叶某人.... (好吧，当场给linus跪下)&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0069444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLib5MQcvCeetCo5ia8059iaPZL2hCCUuPeoGDKfWNqOrr4sBEvIiaGaTibxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文试图理解git的原理，重写部分git命令，从最底层的几个命令开始，听起来很离谱，做起来也很离谱，但是真正去做了，发现，诶，好像没有那么离谱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;俗话说得好（我也不知道哪里来的俗话，maybe 我自己说的），理解一个东西最好的方法就是实现它。git作为我们每天都需要去打交道的一个东西，了解它和熟悉怎么去使用它也是我们每个人的必要技能。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;现状分析&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来，我们克服一下恐惧，我们为什么会觉得这个东西很复杂，因为它真的很复杂，光是上层命令，就有各种各样的用法，就算笔者也不敢说真的能够精通，关键是他的文档 居然够写一本书&lt;span&gt;【Pro Git】&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，还有王法吗，还有法律吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过再仔细想想，我们需要了解这么多的特性吗，我们每天日常使用的也就是几个命令，我们是不是只需要了解他的底层机制和那几个命令就行了？好像没那么可怕了？OK，我们进入正题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于本文，其实你并不需要了解太多的东西，一点点的Git基本知识，一点点基本语言知识，一点点的shell知识，OK，条件具备了，我们可以开始愉快的玩耍了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们例举一下，我们需要用到的本地命令有些啥&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git rm&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git reflog&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git show-ref&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git cat-file&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git hash-object&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git ls-tree&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;嗯，差不多，单纯本地的仓库 我们要用到的命令是不是就这些，我们将在主要内容分享完之后，再回到这里来理解这些命令。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GIT底层结构&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道大家有没有好奇过这些东西，这些玩意都是啥？我们如何靠这个目录下的文件来管理我们各种各样奇奇怪怪的提交，而且还能回溯呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GIT目录&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看一下目录结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.688695652173913&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpic8dMBPBrIIZg7vCibXGX1FSyvQsnDuF4iavXVjd591uIFnHkMVdycj4yyuO5uftGN3wribMxYwuibxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1150&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;├── COMMIT_EDITMSG  // 上一次提交的 msg&lt;br/&gt;├── FETCH_HEAD // 远端的所有分支头指针 &lt;span&gt;hash&lt;/span&gt;&lt;br/&gt;├── HEAD // 当前头指针&lt;br/&gt;├── ORIG_HEAD // &lt;br/&gt;├── config // 记录一些配置和远端映射&lt;br/&gt;├── description // 仓库描述&lt;br/&gt;├── hooks // commit lint规则 husky植入&lt;br/&gt;│   ├── applypatch-msg&lt;br/&gt;│   ├── applypatch-msg.sample&lt;br/&gt;│   ├── commit-msg&lt;br/&gt;│   ├── commit-msg.sample&lt;br/&gt;│   ├── fsmonitor-watchman.sample&lt;br/&gt;│   ├── post-applypatch&lt;br/&gt;│   ├── post-checkout&lt;br/&gt;│   ├── post-commit&lt;br/&gt;│   ├── post-merge&lt;br/&gt;│   ├── post-receive&lt;br/&gt;│   ├── post-rewrite&lt;br/&gt;│   ├── post-update&lt;br/&gt;│   ├── post-update.sample&lt;br/&gt;│   ├── pre-applypatch&lt;br/&gt;│   ├── pre-applypatch.sample&lt;br/&gt;│   ├── pre-auto-gc&lt;br/&gt;│   ├── pre-commit&lt;br/&gt;│   ├── pre-commit.sample&lt;br/&gt;│   ├── pre-merge-commit&lt;br/&gt;│   ├── pre-merge-commit.sample&lt;br/&gt;│   ├── pre-push&lt;br/&gt;│   ├── pre-push.sample&lt;br/&gt;│   ├── pre-rebase&lt;br/&gt;│   ├── pre-rebase.sample&lt;br/&gt;│   ├── pre-receive&lt;br/&gt;│   ├── pre-receive.sample&lt;br/&gt;│   ├── prepare-commit-msg&lt;br/&gt;│   ├── prepare-commit-msg.sample&lt;br/&gt;│   ├── push-to-checkout&lt;br/&gt;│   ├── push-to-checkout.sample&lt;br/&gt;│   ├── sendemail-validate&lt;br/&gt;│   ├── update&lt;br/&gt;│   └── update.sample&lt;br/&gt;├── index // 暂存区&lt;br/&gt;├── info&lt;br/&gt;│   ├── exclude&lt;br/&gt;│   └── refs&lt;br/&gt;├── logs // 顾名思义，记录我们的git &lt;span&gt;log&lt;/span&gt;&lt;br/&gt;│   ├── HEAD&lt;br/&gt;│   └── refs&lt;br/&gt;├── objects // git 存储的我们的文件&lt;br/&gt;│   &lt;br/&gt;├── lost-found //一些悬空的文件&lt;br/&gt;│   ├── commit&lt;br/&gt;│   └── other&lt;br/&gt;├── packed-refs 打包好的指针头&lt;br/&gt;└── refs // 所有的&lt;span&gt;hash&lt;/span&gt;&lt;br/&gt;    ├── heads&lt;br/&gt;    ├── remotes&lt;br/&gt;    └── tags&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对这些仓库分析完，突然发现，我们是不是只需要这一个目录下的东西，就可以将一个repo的所有源信息拷贝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记住我们刚刚所讲的东西，这个目录的一些结构，这对理解我们后面的命令和底层存储帮助很大，我们将在后面部分深入介绍。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.17886380550731829&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLeRJx3SYe8UCcq3IX2FrPho9WBnsFHU2rNjtWLbicOcJlpW2u47icankg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4031&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GIT Hash&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先git中的对象，我们一共有4种type，分别是 commit / tree / blob / tag。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先需要摸清楚git算hash的规则，我们一共有四种对象type，这四个type一定是要附带到我们sha1加密后的hash里面的，还有一些文本附加信息，整体的规则如下。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;{type} {content.length}\0{content}&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，那我们来尝试下生成hash值，看看我们生成的，和git 生成的 是否一致。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; -n &lt;span&gt;&quot;hello,world&quot;&lt;/span&gt; | git &lt;span&gt;hash&lt;/span&gt;-object --stdin&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const crypto = require(&lt;span&gt;&#x27;crypto&#x27;&lt;/span&gt;),&lt;br/&gt;const sha1 = crypto.createHash(&lt;span&gt;&#x27;sha1&#x27;&lt;/span&gt;);&lt;br/&gt;sha1.update(&lt;span&gt;&quot;blob 11\0hello,world&quot;&lt;/span&gt;);&lt;br/&gt;console.log(sha1.digest(&lt;span&gt;&#x27;hex&#x27;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.11704834605597965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLZQ2NwYXecvEuZPQRAezJP26sdn26OCrF0l9lDJbQJDonVmuJKK26CQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;786&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8333333333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLrml5ECN3CAbulG4IUVggX8odpmTAdGib3IvoILcNPSgNFk1QrXNdAxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;git 本质是一种类kv数据库的文件系统，通过sha1算法生成的hash作为key，对应到我们的git的几类对象，然后再去树状的寻址，最底层存储的是我们的&lt;strong&gt;文件内容&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲到这了，衍生一下关于git使用sha1的目的以及前几年google碰撞sha1算法导致的 sha1算法不安全的问题，git使用sha1进行hash的目的，更多的是为了验证文件完整性 防损坏等目的，同时linus本人以及stackoverflow上对这个问题也有一些讨论和回复，大家可以移步观看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;stackoverflow的讨论&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt; &lt;span&gt;linus针对google sha1碰撞的邮件&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成hash的算法我们介绍完事了，那接下来就是根据hash去找东西了，前文提到了，git一共存在四种对象，我们分别对四种对象以及内容寻址进行介绍。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;GIT 对象&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;blob&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是最底层的对象，记录的是文件内容，对，仅仅是文件内容，通过我们上面计算hash的方式可以看出来，不管文件名怎么变化，我们所对应的那块内容没有改变，hash值就不会改变，找到的永远会是那个blob。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.18627450980392157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLqumahFjR8BZicv3hkyImCVm7xKDCjR07B3yibqVGEU9EprianJ7vDHbiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;612&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.09667673716012085&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeL5rvVoiaEyFOCA82MxteZKoXibnOm92qn9gWos2OjKia7qAZ3SsqLAAiaOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也是为什么 git是用来管理代码以及各种类型的文本的一种好方式，而不是用来管理word/pdf （误）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在纯文本类型文件管理中，git只需要保存diff就行了，而如果我们代码中全是二进制文件，那简直是回溯噩梦，可能真实资源就两个pdf，一个word文件，但是版本太多，一个git仓库大小几个g也不是不可能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OK，这里可能有些同学要问了，那我如果真的需要存储很多频繁变动的二进制文件，比如多媒体资源/ psd啥的， 那我需要怎么搞？好的，家人们，上链接。Git LFS&lt;span&gt;（Large file storage）&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;一句话介绍，把我们的大文件变成文件指针存储在对象中，再去lfs拉取对应文件。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;tree&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚刚我们说了，blob对象是纯粹的内容，有些不对劲，我们内容需要索引，我怎么去找到他？这一节的标题叫做 tree，对，他就是以树状结构来进行组织的，随便点开一个objects下面的文件cat-file看看。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLPBIefGH1obyeTTlouyukbVnhSeE9HHSbicicfT2wJRN2h9fo3nnj4CYg/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;723.8709677419355&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;750.9677419354838&quot; data-ratio=&quot;1.0387275242047027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ndgH50E7pIpic8dMBPBrIIZg7vCibXGX1FTQrA4jDCkib6z1Ww3gXg96l5FEK4gOe1iasKhSV12NyPxWOjxPZofRnQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;723&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出来，我们整个对象的组织形式就是一棵多叉树。通过树级层级一层一层寻址，最后找到我们的内容块。整体的组织形式就是下图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6907842619487721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLiaTRBtK40mmVsZRYrEz4b7jMhgbwiaEvoA2IqSSHG8NI8szp8icvsGnIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3787&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;commit&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在还有另一个问题，不过我们其实上面的演示已经解释了一部分这个问题了， 一个commit对应的信息其中只有几种，&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;author与对应的时间点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;commit的时候我们输入的描述&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这个commit所指向的tree&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这个commit的parent 即父节点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;git是以类似单向链表的形式将我们的一个个提交组织起来的，同时，同时一个节点至多有2个父节点。到此，其实整个git内容存储的结构我们已经捋清楚了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6011650485436894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLCTQ8ibzTvZjiaYHibdvuYDeKNNKdsITzwWzb0La5iapCHWQoqztmicruQMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;5150&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后简单介绍下，最后一种对象，tag是对某个commit的描述，其实也是一种commit。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结一下我们以上说的内容，我们可以得到git的一个设计思路，&lt;strong&gt;git记录的是一个a → b过程的链表&lt;/strong&gt;，通过链表，我们可以逐步回溯到a，在此之下呢，采用了一种&lt;strong&gt;多叉树形结构&lt;/strong&gt;对我们的hash值进行分层记录，最底层，通过我们的hash值进行索引，对应到一个个压缩后的二进制objects。这就是整个git的结构设计。还有一些 git对于查找效率的优化手段，压缩手段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对以上内容了解了之后，关于我们的分支本质上，其实也是对应一个commit，只是多了一个ref指向这个commit而已，是不是对git整个清晰多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里留给大家一个课后问题吧，&lt;strong&gt;git&lt;/strong&gt; &lt;strong&gt;的 gc怎么去实现的&lt;/strong&gt;， 整个完整过程是啥样的，由于这些内容并不是本文的核心内容，就不在这里展开了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前期准备&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回想一下前面讲的，我们需要的东西有些什么，sha1，这个可以用&lt;code&gt;crypto&lt;/code&gt;， zlib，node中也带了这个，可以通过 &lt;code&gt;require(&#x27;zlib&#x27;)&lt;/code&gt;拿到。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;识别命令参数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，让node环境能够读我们的一些命令，来干各种各样的事情，通过process的解析，我们能够获得输入的参数&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;enum CommandEnum{&lt;br/&gt;  Add= &lt;span&gt;&#x27;add&#x27;&lt;/span&gt;,&lt;br/&gt;  Init = &lt;span&gt;&#x27;init&#x27;&lt;/span&gt;,&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;const chooseCommand = (&lt;span&gt;command&lt;/span&gt;:CommandEnum) =&amp;gt; {&lt;br/&gt;  &lt;br/&gt;  switch(&lt;span&gt;command&lt;/span&gt;){&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; CommandEnum.Add:&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; add();&lt;br/&gt;    &lt;span&gt;case&lt;/span&gt; CommandEnum.Init:&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; init();&lt;br/&gt;    ...&lt;br/&gt;    default:&lt;br/&gt;      &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  console.log(&lt;span&gt;&quot;暂不支持此命令&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;chooseCommand(process.argv[2] as CommandEnum);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;init&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;okk，我们现在进行下一步，万事开头难，先开个头吧。使用我们的命令，初始化一个git仓库。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;const init = ()=&amp;gt;{&lt;br/&gt;  &lt;br/&gt;  fs.mkdirSync(&lt;span&gt;&#x27;.git&#x27;&lt;/span&gt;);&lt;br/&gt;  fs.mkdirSync(&lt;span&gt;&#x27;.git/refs&#x27;&lt;/span&gt;)&lt;br/&gt;  fs.mkdirSync(&lt;span&gt;&#x27;.git/objects&#x27;&lt;/span&gt;)&lt;br/&gt;  fs.writeFileSync(&lt;span&gt;&#x27;.git/HEAD&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;ref: refs/heads/master&#x27;&lt;/span&gt;)&lt;br/&gt;  fs.writeFileSync(&lt;span&gt;&#x27;.git/config&#x27;&lt;/span&gt;,`&lt;br/&gt;        [core]&lt;br/&gt;    repositoryformatversion = 0&lt;br/&gt;    filemode = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    bare = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;    logallrefupdates = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    ignorecase = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    precomposeunicode = &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;`);&lt;br/&gt;  fs.writeFileSync(&lt;span&gt;&#x27;.git/description&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;写入和读取&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初始化完成了，我们有了一个存储库，接着就是把大象装进冰箱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚刚我们在分享的过程中，不断的用到两个命令 &lt;code&gt;git hash-object&lt;/code&gt; 和 &lt;code&gt;git cat-file&lt;/code&gt;，这两个命令，在我们日常工作中，其实不太会用到，他们两干嘛使的呢。Git 中存在两个命令的概念，一个是&lt;strong&gt;底层命令(Plumbing)&lt;/strong&gt; ，另一个就是我们日常会使用到的&lt;strong&gt;上层命令(Porcelain)&lt;/strong&gt; ， 高层命令是基于底层命令的封装，让我们使用起来更为方便。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入一些npm包，定义一些结构体&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;import fs from &lt;span&gt;&#x27;fs&#x27;&lt;/span&gt;;&lt;br/&gt;import zlib from &lt;span&gt;&#x27;zlib&#x27;&lt;/span&gt;;&lt;br/&gt;import crypto from &lt;span&gt;&#x27;crypto&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; enum GitObjectType{&lt;br/&gt;  Commit = &lt;span&gt;&#x27;commit&#x27;&lt;/span&gt;,&lt;br/&gt;  Tree = &lt;span&gt;&#x27;tree&#x27;&lt;/span&gt;,&lt;br/&gt;  Blob = &lt;span&gt;&#x27;blob&#x27;&lt;/span&gt;,&lt;br/&gt;  Tag = &lt;span&gt;&#x27;tag&#x27;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来实现一个简单的读取blob对象的方法，比较简陋，还不支持对content进行解析，我们将在后续完善。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; const readObject = (sha1=&lt;span&gt;&#x27;f8eb512de72634ca12328d85f70b696414473914&#x27;&lt;/span&gt;)=&amp;gt;{&lt;br/&gt;  const data = fs.readFileSync(`.git/objects/&lt;span&gt;${sha1.substring(0,2)}&lt;/span&gt;/&lt;span&gt;${sha1.substring(2)}&lt;/span&gt;`);&lt;br/&gt;  const a = zlib.inflateSync(data).toString(&lt;span&gt;&#x27;utf8&#x27;&lt;/span&gt;);&lt;br/&gt;  const typeIndex = a.indexOf(&lt;span&gt;&#x27; &#x27;&lt;/span&gt;);&lt;br/&gt;  const lengthIndex = a.indexOf(`\0`);&lt;br/&gt;&lt;br/&gt;  const objType = a.substring(0,typeIndex);&lt;br/&gt;  const length = a.substring(typeIndex +1,lengthIndex);&lt;br/&gt;  const content = a.substring(lengthIndex+1);&lt;br/&gt;  // console.log(a);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {objType,length,content};&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ok， 有了读之后，我们还需要往里写。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; const createObject = (obj:GitObject)=&amp;gt;{&lt;br/&gt;  const data = obj.serialize();&lt;br/&gt;  const sha1 = crypto.createHash(&lt;span&gt;&#x27;sha1&#x27;&lt;/span&gt;);&lt;br/&gt;  sha1.update(data);&lt;br/&gt;  const name = sha1.digest(&lt;span&gt;&quot;hex&quot;&lt;/span&gt;);&lt;br/&gt;  const zipData = zlib.deflateSync(data);&lt;br/&gt;  console.log(name);&lt;br/&gt;  const dirName = `.git/objects/&lt;span&gt;${name.substring(0,2)}&lt;/span&gt;` &lt;br/&gt;  fs.existsSync(dirName) &amp;amp;&amp;amp; fs.mkdirSync(dirName);&lt;br/&gt;  fs.writeFileSync(`.git/objects/&lt;span&gt;${name.substring(0,2)}&lt;/span&gt;/&lt;span&gt;${name.substring(2)}&lt;/span&gt;`,zipData)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; name;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;琢磨透了读和写的方法，我们的&lt;code&gt;cat-file&lt;/code&gt;命令和&lt;code&gt;hash-object&lt;/code&gt;命令实际上实现起来就很简单了，只需要调用现有的方法就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先是&lt;code&gt;cat-file&lt;/code&gt; 对hash 名的一个寻址，同时解压缩对应的objects，支持四个参数，分别返回不同的结果。我们直接读对象就完事了嗷。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; const catFile = ()=&amp;gt;{&lt;br/&gt;  const &lt;span&gt;type&lt;/span&gt; = process.argv[3];&lt;br/&gt;  const sha1 = process.argv[4];&lt;br/&gt;  const res = readObject(sha1);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt; ===&lt;span&gt;&#x27;-t&#x27;&lt;/span&gt;){&lt;br/&gt;    console.log(res.type);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt;===&lt;span&gt;&#x27;-s&#x27;&lt;/span&gt;){&lt;br/&gt;    console.log(res.length);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt; === &lt;span&gt;&#x27;-e&#x27;&lt;/span&gt;){&lt;br/&gt;    console.log(!!res?.&lt;span&gt;type&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;type&lt;/span&gt; === &lt;span&gt;&#x27;-p&#x27;&lt;/span&gt;){&lt;br/&gt;    console.log(res.content)&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着是&lt;code&gt;hash-object&lt;/code&gt;,这个也简单的实现下，就是返回对应路径的hash值就行了&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; const hashObject = ()=&amp;gt;{&lt;br/&gt;  const path = process.argv[3];&lt;br/&gt;  const data = fs.readFileSync(path);&lt;br/&gt;  const sha1 = crypto.createHash(&lt;span&gt;&#x27;sha1&#x27;&lt;/span&gt;);&lt;br/&gt;  sha1.update(data);&lt;br/&gt;  const name = sha1.digest(&lt;span&gt;&quot;hex&quot;&lt;/span&gt;);&lt;br/&gt;  console.log(name);&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们基本结构已经搭起来了，需要的是commit 和tree将文件串联起来，调用我们的&lt;code&gt;cat-file&lt;/code&gt;试试，现在应该对commit和blob的解析是正确的， 但是tree的content的解析似乎有些问题，我们后面来看这个问题，但是commit对象的content和 blob的content不太一样。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;内容解析完善&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚刚我们粗略的实现了一下读对象，能把内容块读出来了。接着我们来完善他，以便更好的服务于我们的四种对象,先改写下我们的readObject。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;readObject&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; const readObject = (sha1: string)=&amp;gt;{&lt;br/&gt;  const data = fs.readFileSync(`.git/objects/&lt;span&gt;${sha1.substring(0,2)}&lt;/span&gt;/&lt;span&gt;${sha1.substring(2)}&lt;/span&gt;`);&lt;br/&gt;  const buf = zlib.inflateSync(data)&lt;br/&gt;  const a = buf.toString(&lt;span&gt;&#x27;utf8&#x27;&lt;/span&gt;);&lt;br/&gt;  const typeIndex = a.indexOf(&lt;span&gt;&#x27; &#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;  const lengthIndex = a.indexOf(`\0`);&lt;br/&gt;  // console.log(a);&lt;br/&gt;  const objType = a.substring(0,typeIndex);&lt;br/&gt;  // 去掉校验， 其实这里需要记录长度和真实长度对比是否有错&lt;br/&gt;  // const length = a.substring(typeIndex +1,lengthIndex);&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; obj;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(objType===GitObjectType.Blob){&lt;br/&gt;    obj = new GitBlob(a.substring(lengthIndex+1));&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(objType===GitObjectType.Commit){&lt;br/&gt;    obj = new GitCommit(a.substring(lengthIndex+1))&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(objType===GitObjectType.Tree){&lt;br/&gt;    obj = new GitTree(buf.slice(lengthIndex+1))&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; obj;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Blob对象实现起来很简单 就不在这里说了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Commit对象实现起来稍微复杂一点，我们需要解析commit对象中的一些键值对，将他们都记住，同时把commit内容单独存起来。一个commit对象存储的东西，在上面我们已经介绍过了，通过一个map将他存储。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Commit object&lt;span/&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20037105751391465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ndgH50E7pIrvJ7Ae3SaqoHcSpkZXukeLJLQSODhckCAwSgqoiaDbUoibDbvnV1HdUouMPia6Rt5hGoSdzkQ4icOy4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;class GitCommit extends GitObject{&lt;br/&gt;  &lt;span&gt;type&lt;/span&gt; = GitObjectType.Commit;&lt;br/&gt;  data = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;  length = 0;&lt;br/&gt;  content:any;&lt;br/&gt;  map;&lt;br/&gt;  constructor(data:string){&lt;br/&gt;  super();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(data){&lt;br/&gt;      this.data=data;&lt;br/&gt;      this.length = data.length;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  serialize = ()=&amp;gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; `&lt;span&gt;${this.type}&lt;/span&gt; &lt;span&gt;${this.length}&lt;/span&gt;\0&lt;span&gt;${this.data}&lt;/span&gt;`;&lt;br/&gt;  }&lt;br/&gt;  deserialize= ()=&amp;gt;{&lt;br/&gt;    console.log(this.recursiveParse(this.data))&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; this.data;&lt;br/&gt;  }&lt;br/&gt;  recursiveParse = (data:string,map?:any):any=&amp;gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(!map){&lt;br/&gt;        map = new Map();&lt;br/&gt;    }&lt;br/&gt;    const space = data.indexOf(&lt;span&gt;&#x27; &#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    const nl = data.indexOf(`\n`);&lt;br/&gt;    console.log(space,nl);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(space&amp;lt;0 || nl&amp;lt;space){&lt;br/&gt;       map.set(&lt;span&gt;&quot;content&quot;&lt;/span&gt;,data);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; map;&lt;br/&gt;    }&lt;br/&gt;    const key = data.substring(0,space);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; end =0;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;){&lt;br/&gt;        end = data.indexOf(`\n`,end+1)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(data[end+1] !== &lt;span&gt;&#x27; &#x27;&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    const value = data.substring(space+1,end);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(key ===&lt;span&gt;&#x27;parent&#x27;&lt;/span&gt;){&lt;br/&gt;        map.has(&lt;span&gt;&#x27;parent&#x27;&lt;/span&gt;) ? map.set(key+&lt;span&gt;&#x27;1&#x27;&lt;/span&gt;,value) : map.set(key,value);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        map.set(key,value)&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    const restData = data.substring(end+1);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; this.recursiveParse(restData,map);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Tree Object解析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Tree Object 相对来说是我们解析起来最为复杂的一个对象，他不像前两个一样，能够通过直接toString就能拿到正常的文本，我们直接去解析就行了。Tree Object本身其实就是一个二进制对象，关键吧，他还有个误导，差点给笔者都给带偏了，他cat-file解析出来的文件，其实并不是他原本文件长的样子....，他做了一个格式化，且修改了顺序。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;class GitTree extends GitObject{&lt;br/&gt;  &lt;span&gt;type&lt;/span&gt; = GitObjectType.Commit;&lt;br/&gt;  data:Buffer = Buffer.from(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;  length = 0;&lt;br/&gt;  constructor(data:Buffer){&lt;br/&gt;  super();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(data){&lt;br/&gt;      this.data=data;&lt;br/&gt;      this.length = data.length;&lt;br/&gt;      &lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  serialize = ()=&amp;gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; `&lt;span&gt;${this.type}&lt;/span&gt; &lt;span&gt;${this.length}&lt;/span&gt;\0&lt;span&gt;${this.data}&lt;/span&gt;`;&lt;br/&gt;  }&lt;br/&gt;  parseTreeOneLine = (data:Buffer,start:number)=&amp;gt;{&lt;br/&gt;    const x = data.indexOf(&lt;span&gt;&#x27; &#x27;&lt;/span&gt;,start);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(x&amp;lt;0){&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; start+21;&lt;br/&gt;    }&lt;br/&gt;    const mode = data.slice(start,x).toString(&lt;span&gt;&#x27;ascii&#x27;&lt;/span&gt;);&lt;br/&gt;    // const &lt;span&gt;type&lt;/span&gt; = &lt;br/&gt;    const y = data.indexOf(`\x00`,x)&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(y&amp;lt;0){&lt;span&gt;return&lt;/span&gt; x+21};&lt;br/&gt;    const path = data.slice(x+1,y).toString(&lt;span&gt;&#x27;ascii&#x27;&lt;/span&gt;);&lt;br/&gt;    const sha1 = data.slice(y+1,y+21).toString(&lt;span&gt;&#x27;hex&#x27;&lt;/span&gt;);&lt;br/&gt;    console.log(mode,path,sha1);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; y+21;&lt;br/&gt;  }&lt;br/&gt;  deserialize= ()=&amp;gt;{&lt;br/&gt;    const buffer = this.data;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; pos = 0;&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; max = buffer.length;&lt;br/&gt;   &lt;br/&gt;    &lt;span&gt;while&lt;/span&gt;(pos&amp;lt;max){&lt;br/&gt;      pos = this.parseTreeOneLine(buffer,pos);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; this.data;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;我们的底层基础简单实现，其实到这里就完结了，大致流程能够串起来了。&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分支和ref：&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分支名和ref其实也是键值对，分支名作为文件名存储在ref目录下，文件内容则是一串sha1值，这串sha1值来自于commit 头结点的hash值，我们可以通过这个commit 对象回溯到当时的场景。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;log与reflog&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单纯的文本文件，记录一些commit对象以及时间点等。大家可以下来再去研究研究。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;暂存区：&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过大家可能会有问题，不对啊，我们平时提交不是还有stage的概念吗，这一块东西呢？确实，少了这一块，不过这一块也是git底层相对麻烦的一部分（数据处理太多T_T)，所以我并不打算在这篇分享中去实现他，有兴趣的同学可以参考这个链接 &lt;span&gt;git index结构&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;后语&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分享到这就差不多了，实现了部分的底层读写api，其他的api就不一一实现了，有兴趣可以下来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;课后作业：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;git 的gc问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;底层命令来实现我们日常调用的上层命令效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;怎么去实现一个远程的git中心服务器，远程的命令怎么关联？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;补充实现一个git&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后的最后，作为linus的脑残粉，linus的一句话，送给大家，&lt;strong&gt;talk is cheap, show me the code .&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引用文档：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.open-open.com/lib/view/open1328069609436.html&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;http://gitlet.maryrosecook.com/docs/gitlet.html&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://git-scm.com/docs/git-add/zh_HANS-CN&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://wyag.thb.lt/#org947aee7&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>