<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1b241b77409b0f9aad775cb49326e1ad</guid>
<title>2022 年来了！抓紧啦！</title>
<link>https://toutiao.io/k/rf8ezjy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66a36ec7f57eefd3000e5013dee6f268</guid>
<title>2022新年伊始，送你百篇干货文章</title>
<link>https://toutiao.io/k/kchudkd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>473e861d5a81473259ddb881da224647</guid>
<title>元宇宙孤岛</title>
<link>https://toutiao.io/k/t9szj0h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;Facebook 更名 Meta 后，元宇宙的风口自此一发不可收拾，甭管有没有关系，未来有没有投入，各个公司都开始构建自己的元宇宙，那怕公司更名跟元宇宙沾边，在资本市场上都能涨一波。&lt;/p&gt;&lt;p&gt;问题来了，每家都在搞元宇宙，试图把用户绑在自己的平台里，很很显然与元宇宙的初衷是违背的。如果各平台都不互通，还是元宇宙吗？这应该是元宇宙孤岛，不互通不互信就无法可靠传递，不发生互动就没有价值。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;无法互通的元宇宙就是假元宇宙。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;所幸，元宇宙有区块链的介入，为统一的标准、规范、协议互通提供了可能性，不用担心孤岛的存在，所有数据都在公链上，也不用担心被某个中心化的企业控制。这就对链本身的性能、可扩展性、易开发程度等等提出了更高的要求。&lt;/section&gt;&lt;section&gt;无疑，这条链必须是一条公链。如果是私链，直接断定就是假元宇宙。如果联盟链，也仅仅只能在一个联合体内互通互信，不能算完整意义上的元宇宙。撇开元宇宙不谈，只能存在一条公链吗？不现实，一条链终究会因拥堵导致效率低下，多链共存才是真实的存在。那么链与链之间怎么互通呢，这个问题从出现以太坊的挑战者之后就存在至今，业内也一直在做多种尝试：跨链、侧链等技术。&lt;/section&gt;&lt;section&gt;元宇宙的孤岛问题，就变成了区块链的孤岛问题，如何把区块链的孤岛问题解决了，上层建筑问题自然也就不在存在了。否则，你玩的所谓元宇宙，只是另一个有着高大上名字的在线社游而已。&lt;/section&gt;&lt;section&gt;单就一条公链本身的事务处理能力来看，远远不能支撑现实世界的真实业务场景。链与链之间的可靠价值传递也仅仅是在摸索期，还不成熟。这两大问题不解决，元宇宙很难有大作为。&lt;/section&gt;&lt;section&gt;现在的火，都是虚火，虚火过后，渣渣都没有，能不能落到实处，无从得知，交给时间吧。参照&quot;技术采用生命周期”图，如果无法跨越鸿沟，就会变成死亡陷阱。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBv8CrXwm2gCvQoBmKs0ewaLELnDKr4eJNbdzibhEneGHhQFlwexr2dPAmJlFeciac1uWKTWCkkLIib1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMjE3MDIwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EwukgicNDWBswFxJHbKiad1jnJCFQiaWQrRnSdQGnrHiaicTyc2FR4CId2GQk1TABicoY87kQIeoeI1z3GnwanWMg1YQ/0?wx_fmt=png&quot; data-nickname=&quot;MavenTalk&quot; data-alias=&quot;mavenTalk&quot; data-signature=&quot;创业者，资深技术从业人员，关注技术人的认知提升和职业成长&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b981ee6910d87ad8e1720cac86a1b34</guid>
<title>掰开揉碎系列之带你彻底了解Redis的Sorted-Set底层</title>
<link>https://toutiao.io/k/p8ceb0u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.1&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set底层存储数据结构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.1.1 zskiplistNode结构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;zskiplistNode是跳表的结点结构，数据结构如下：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sds ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;backward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistLevel&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;forward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } level[];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} zskiplistNode;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结构属性介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;● ele：存的是集合的值&lt;/p&gt;&lt;p&gt;● score：存的一个double类型的排序字段，通过这个字段来进行集合值的排序&lt;/p&gt;&lt;p&gt;● backward：链表指针，指向当天元素的前一个元素&lt;/p&gt;&lt;p&gt;● Level[]：跳表的高度&lt;/p&gt;&lt;p&gt;      • forward：指向下一个元素&lt;/p&gt;&lt;p&gt;      • span：跨度，当前结点到下一个结点中间元素的个数&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.1.2 zskiplist结构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;zskiplist就是跳表，它用来管理整个跳表的高度、长度、头结点、尾结点，其数据结构如下：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplist&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;header&lt;/span&gt;, *&lt;span class=&quot;code-snippet__title&quot;&gt;tail&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} zskiplist;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结构属性介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;● header：指向跳表的头结点&lt;/p&gt;&lt;p&gt;● tail：指向跳表的尾结点&lt;/p&gt;&lt;p&gt;● length：跳表的高度&lt;/p&gt;&lt;p&gt;● level：当前调整的高度&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个结构就组成了我们Redis中的跳表的数据结构，下面我们先通过一张Redis的Sorted-Set图(&lt;strong&gt;图3.1&lt;/strong&gt;)来分别解释一下每个属性具体的含义：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LbKr6cC169KxdSLQv6Z2mNqTTa2PzK61OoiahsRPI6fUqCs5mZjrfiaXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set高度算法探究&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;根据第二节&lt;/span&gt;&lt;strong&gt;跳表的形成&lt;/strong&gt;&lt;span&gt;我们了解到可以提取结点来做多层索引来提高查询的效率，我们怎么来确定跳表的高度呢？对于结点不插入和删除，我们又怎么来实时调整跳表的高度呢？我们来看一下Redis是怎么做的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ZSKIPLIST_MAXLEVEL 64 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ZSKIPLIST_P 0.25      &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslRandomLevel&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ((random()&amp;amp;&lt;span class=&quot;code-snippet__number&quot;&gt;0xFFFF&lt;/span&gt;) &amp;lt; (ZSKIPLIST_P * &lt;span class=&quot;code-snippet__number&quot;&gt;0xFFFF&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        level += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (level&amp;lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;根据代码我们先回答一下第一个问题：怎么来确定跳表的高度？回答：&lt;strong&gt;随机生成&lt;/strong&gt;，对没有看错，就是随机生成，但是为了保证查询的性能，我们尽量让找出一套算法能够达到一个&lt;strong&gt;O(log(N))&lt;/strong&gt;的时间复杂度，我们先看一下这个函数，&lt;strong&gt;random()&lt;/strong&gt;会生成一个&lt;strong&gt;32位&lt;/strong&gt;的随机数，跟 &lt;strong&gt;0xFFFF&lt;/strong&gt;做与操作，其实就是把高&lt;strong&gt;16位&lt;/strong&gt;清零，得到一个处于&lt;strong&gt;0x0000-0xFFFF&lt;/strong&gt;的数字，然后每次循环判断生产的这个数字是否小于&lt;strong&gt;自己的1/4&lt;/strong&gt;，如果成立则高度+1，循环结束在判断一下生产的&lt;strong&gt;level&lt;/strong&gt;是否小于 &lt;strong&gt;&lt;span&gt;64层&lt;/span&gt;&lt;/strong&gt;，小于的话，就用生成的层数，否则用&lt;strong&gt;&lt;span&gt;64层&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们看一下推导过程，我们定义随机因子为p：&lt;/p&gt;&lt;p&gt;● 结点层数至少为1，而大于1的结点层数，满足一个概率分布。&lt;/p&gt;&lt;p&gt;● 结点层数恰好等于1的概率为1 - p&lt;/p&gt;&lt;p&gt;● 结点层数大于等于2的改为为p，而结点层数等于2的概率为p * (1 - p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于3的概率为p p，而结点层数等于3的概率为p p * (1-p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于4的概率为p p p，而结点层数等于4的概率为p p p * (1-p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于5的概率为p p p p，而结点层数等于5的概率为p p p p * (1-p)&lt;/p&gt;&lt;p&gt;..........&lt;/p&gt;&lt;p&gt;那么，一个结点的&lt;strong&gt;&lt;span&gt;平均层数&lt;/span&gt;&lt;/strong&gt;的计算公式如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1231481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LEOet6gWT5KNDHt4dsjsibfhglYAqXI7thhYdbOmy4vzA9BDkSma9Sbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Redis定义的随机因子p是 1/4&lt;/span&gt;&lt;/strong&gt;，那通过这个公式能够得&lt;strong&gt;&lt;span&gt;平均高度&lt;/span&gt;&lt;/strong&gt;是：&lt;strong&gt;&lt;span&gt;1.33&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.3&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set头结点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;初始化源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;源代码：创建一个skiplist&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplist *&lt;span class=&quot;code-snippet__title&quot;&gt;zslCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplist *zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl = zmalloc(&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(*zsl));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;level = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;header = zslCreateNode(ZSKIPLIST_MAXLEVEL,&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; j &amp;lt; ZSKIPLIST_MAXLEVEL; j++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;header-&amp;gt;level[j].forward = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;header-&amp;gt;level[j].span = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;header-&amp;gt;backward = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;tail = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;创建一个skiplistNode结点:&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode *&lt;span class=&quot;code-snippet__title&quot;&gt;zslCreateNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *zn =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zmalloc(&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(*zn)+level*&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(struct zskiplistLevel));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zn-&amp;gt;score = score;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zn-&amp;gt;ele = ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; zn;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们通过&lt;strong&gt;&lt;span&gt;图3.2&lt;/span&gt;&lt;/strong&gt;来了解一下，头结点初始化后结构是什么样的。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7123786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Ljpv7UxNwaOFfzU21jPZl3sickK21SU0asxhYg63UoYuhJF8BtYYm1xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;824&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set插入元素源码分析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.1 插入函数解析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;下面我们来通过分析一个元素的插入流程来详细的了解一下源码，我们先看一下整个函数，然后我们会逐步的拆解每一次循环的含义。&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode *&lt;span class=&quot;code-snippet__title&quot;&gt;zslInsert&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rank[ZSKIPLIST_MAXLEVEL];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i, level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    serverAssert(!isnan(score));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rank[i] = i == (zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : rank[i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank[i] += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    level = zslRandomLevel();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (level &amp;gt; zsl-&amp;gt;level) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank[i] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i] = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span = zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;level = level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zslCreateNode(level,score,ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[i].forward = update[i]-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].forward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[i].span = update[i]-&amp;gt;level[i].span - (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].span = (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = level; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].span++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;backward = (update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == zsl-&amp;gt;header) ? &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; : update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;tail = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过对整体函数的解析，我们发现插入一个元素基本上分为4个步骤：&lt;/p&gt;&lt;p&gt;1、查到插入的位置(查询过程)；&lt;/p&gt;&lt;p&gt;2、生产新结点高度并调整跳表的高度；&lt;/p&gt;&lt;p&gt;3、插入元素；&lt;/p&gt;&lt;p&gt;4、调整backward并更新跳表的长度；&lt;/p&gt;&lt;p&gt;下面我们统一逐步分析每一次循环的代码来了解一下整个插入过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4.2 查到插入的位置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们假如跳表现在已经有元素&lt;strong&gt;&lt;span&gt;1、11、23&lt;/span&gt;&lt;/strong&gt;三个元素了，我们想插入一个新元素&lt;strong&gt;&lt;span&gt;21&lt;/span&gt;&lt;/strong&gt;，如&lt;strong&gt;&lt;span&gt;图3.3&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lsr7bGEkibU0MH023EibUl16KqpYia1gRUmAdZcyxtYgSpiamDkia0VIvOjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们先看一下找到插入位置的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rank[ZSKIPLIST_MAXLEVEL];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i, level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;serverAssert(!isnan(score));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  rank[i] = i == (zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : rank[i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rank[i] += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;查找节点(score=21，level=2)的插入位置，逻辑如下：&lt;/p&gt;&lt;p&gt; 1）&lt;strong&gt;&lt;span&gt;第一次for&lt;/span&gt;&lt;/strong&gt;循环，&lt;strong&gt;&lt;span&gt;i=1&lt;/span&gt;&lt;/strong&gt;。x现在为跳跃表的&lt;strong&gt;&lt;span&gt;头节点&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt; 2）现在&lt;strong&gt;&lt;span&gt;i&lt;/span&gt;&lt;/strong&gt;的值与&lt;strong&gt;&lt;span&gt;zsl-&amp;gt;level-1&lt;/span&gt;&lt;/strong&gt;相等，所以&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;0;&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;header-&amp;gt;level[1].forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;header-&amp;gt;level[1].forward-&amp;gt;score(1)&lt;/span&gt;&lt;/strong&gt;小于要插入值的&lt;strong&gt;&lt;span&gt;score&lt;/span&gt;&lt;/strong&gt;，所以while循环可以进入，&lt;strong&gt;&lt;span&gt;rank[1]=1&lt;/span&gt;&lt;/strong&gt;，x赋值为第一个节点; &lt;/p&gt;&lt;p&gt;4）第一个节点的第1层的forward指向NULL，所以while循环不会再进入，经过第一次for循环，&lt;strong&gt;&lt;span&gt;rank[1]=1，x&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;都为第一个节点&lt;strong&gt;&lt;span&gt;(score=1)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8L5QsOwcTAkzLoEqEOR5cECfNoSr1GeTw9icE4Bw8x2lGKtMZUW93S9kQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;5）for循环进入&lt;strong&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;/strong&gt;，i=0。x为跳跃表第一个节点(score=1) 6）现在i的值与&lt;strong&gt;&lt;span&gt;zsl-&amp;gt;level-1&lt;/span&gt;&lt;/strong&gt;不相等，所以&lt;strong&gt;&lt;span&gt;rank[0]&lt;/span&gt;&lt;/strong&gt;等于&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值赋值为&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;; 6）&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0]-&amp;gt;forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].foreard-&amp;gt;score(11)&lt;/span&gt;&lt;/strong&gt;小于要插入的score，所以while循环可以进入，&lt;strong&gt;&lt;span&gt;rank[0]=2&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;为第二个节点(score=11)。 &lt;/p&gt;&lt;p&gt;7）&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0]-&amp;gt;forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].foreard-&amp;gt;score(23)&lt;/span&gt;&lt;/strong&gt;大于要插入的&lt;strong&gt;&lt;span&gt;score&lt;/span&gt;&lt;/strong&gt;，所以while不会再进入，经过第二次for循环，&lt;strong&gt;&lt;span&gt;rank[0]=2，x&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;update[0&lt;/span&gt;&lt;/strong&gt;]都为第二个节点(score=11)，如&lt;strong&gt;&lt;span&gt;图3.5&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LfgcibuSryCd673iaOAjcntASCOO7AQQAOIKMXyKB5cawibC20p1CVFfiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这个时候我们就找到插入位置在&lt;strong&gt;&lt;span&gt;元素11&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;元素23&lt;/span&gt;&lt;/strong&gt;中间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.3 调整跳表的高度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;level = zslRandomLevel();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (level &amp;gt; zsl-&amp;gt;level) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rank[i] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i] = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].span = zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  zsl-&amp;gt;level = level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;假如我们生成的高度是&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，这个时候我们需要调整一下整个跳表的高度，此时i的值是&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，level的值是&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，所以我们只能进入一次循环，此时&lt;strong&gt;&lt;span&gt;rank[2] = 0，update[2]&lt;/span&gt;&lt;/strong&gt;指向头结点，&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span = 3，zsl-&amp;gt;level = 3，&lt;/span&gt;&lt;/strong&gt;调整完高度，如&lt;strong&gt;&lt;span&gt;图3.6&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LncMPaQn4XS8HXlobicFX0Z2QFQJfxz5iaLCSVdoGwqicDuhI91tlmjib4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.4 插入元素&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zslCreateNode(level,score,ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;level[i].forward = update[i]-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].forward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;level[i].span = update[i]-&amp;gt;level[i].span - (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].span = (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = level; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i]-&amp;gt;level[i].span++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;level的值为3，所以for循环可以执行三遍，插入过程如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第一遍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward为update[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]的forward&lt;/span&gt;&lt;/strong&gt;节点，即x-&amp;gt;level[0].forward为score=23的节点;&lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点；&lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[0]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;0&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;update[0]-&amp;gt;level[0].span=1&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].span=1、update[0]-&amp;gt;level[0].span=1&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们再看一下经过第一次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.7&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5175926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lvg06YE9KYwPAXLDl9HFjLNkPSmia7QBxLdyy9OZGmITk4hnQibicgeibjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第二遍&lt;/span&gt;&lt;/strong&gt;： &lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;为&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;节点，即&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[1].forward&lt;/span&gt;&lt;/strong&gt;为NULL； &lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点； &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;update[1]-&amp;gt;level[1].span&lt;/span&gt;&lt;/strong&gt;等于&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[1].span=1 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;4）&lt;strong&gt;&lt;span&gt;update[1]-&amp;gt;level[1].span=2。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们再看一下经过第二次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.8&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5175926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LC73N7Y9NEF60icwMRf0wO2qFRN1b3E3KcEiaW8iacHrrR2ZNEibvwkc3Qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第三遍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;为&lt;strong&gt;&lt;span&gt;update[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;节点，即&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[2].forward&lt;/span&gt;&lt;/strong&gt;为NULL; &lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点； &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[2]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，因为&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span&lt;/span&gt;&lt;/strong&gt;等于跳跃表的总长度&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[2].span=1； &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;4）&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span=3。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们再看一下经过第三次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.9&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LfN0YFXjhrOBeTiaPWhPItgcxP1GhZ5dkzWV9QFj5jQUuSt9ZtFrliboA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，我们的插入过程完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.5 调整backward并更新跳表的长度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x-&amp;gt;backward = (update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == zsl-&amp;gt;header) ? &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; : update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  zsl-&amp;gt;tail = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zsl-&amp;gt;length++;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;x-&amp;gt;backward&lt;/span&gt;&lt;/strong&gt;的值等于，判断&lt;strong&gt;&lt;span&gt;update[0] == zsl-&amp;gt;header&lt;/span&gt;&lt;/strong&gt;是否相等，如果想当代表是个空跳表，则赋值为NULL，如果不是的话，就把update[0]的赋给它，也就是说指向&lt;strong&gt;&lt;span&gt;score = 11&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;backward&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;第二步判断是否是尾结点，如果不是则调整对应的backward，如果是就更新跳表的尾部指向。&lt;/p&gt;&lt;p&gt;最后再更新跳表的&lt;strong&gt;&lt;span&gt;length = 4&lt;/span&gt;&lt;/strong&gt;，调整完的结构如&lt;strong&gt;&lt;span&gt;图3.10&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4601852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LJFxp12Sx3wOyWTIY0YU9HIJvhT5oHuLia8xx7ak6ib9ZjXEKACM5pVzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;好了，我们的插入元素整个源码分析到此告一段落，本小节通过分析插入&lt;strong&gt;元素21&lt;/strong&gt;的过程带大家分析每一句源码的涵义，希望对大家了解插入过程有所帮助。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个元素源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;下面通过zslGetRank函数来看一下查询一个元素过程，下面是具体的源代码：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslGetRank&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rank = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;ele &amp;amp;&amp;amp; sdscmp(x-&amp;gt;ele,ele) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; rank;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们可以通过源代码来看，其实查找一个元素跟我们插入过程中&lt;strong&gt;查找插入位置&lt;/strong&gt;的代码基本一致，具体查询过程此小节就不详细展开了，(可以查看插入过程查找插入位置的详细讲解)。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.6&lt;/strong&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;strong/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;多个元素源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6.1 整体源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;查询多个元素我们通过&lt;strong&gt;&lt;span&gt;zrange&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;zrevrange&lt;/span&gt;&lt;/strong&gt;的命令的实现来进行源码分析：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zrangeGenericCommand&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; reverse)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    robj *key = c-&amp;gt;argv[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    robj *zobj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; withscores = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; start;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; end;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; llen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rangelen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    llen = zsetLength(zobj);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) start = llen+start;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (end &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) end = llen+end;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) start = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; end || start &amp;gt;= llen) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReply(c,shared.emptymultibulk);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (end &amp;gt;= llen) end = llen&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rangelen = (end-start)+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyMultiBulkLen(c, withscores ? (rangelen*&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;) : rangelen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_ZIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *zl = zobj-&amp;gt;ptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *eptr, *sptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *vstr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; vlen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; vlong;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            eptr = ziplistIndex(zl,&lt;span class=&quot;code-snippet__number&quot;&gt;-2&lt;/span&gt;-(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*start));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            eptr = ziplistIndex(zl,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverAssertWithInfo(c,zobj,eptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sptr = ziplistNext(zl,eptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (rangelen--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,eptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; sptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,ziplistGet(eptr,&amp;amp;vstr,&amp;amp;vlen,&amp;amp;vlong));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (vstr == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyBulkLongLong(c,vlong);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyBulkCBuffer(c,vstr,vlen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (withscores)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyDouble(c,zzlGetScore(sptr));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                zzlPrev(zl,&amp;amp;eptr,&amp;amp;sptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                zzlNext(zl,&amp;amp;eptr,&amp;amp;sptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_SKIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zset *zs = zobj-&amp;gt;ptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zskiplist *zsl = zs-&amp;gt;zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zskiplistNode *ln;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sds ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = zsl-&amp;gt;tail;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ln = zslGetElementByRank(zsl,llen-start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = zsl-&amp;gt;header-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ln = zslGetElementByRank(zsl,start+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;(rangelen--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,ln != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ele = ln-&amp;gt;ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            addReplyBulkCBuffer(c,ele,sdslen(ele));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (withscores)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyDouble(c,ln-&amp;gt;score);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = reverse ? ln-&amp;gt;backward : ln-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverPanic(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unknown sorted set encoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这个过程就非常简单了，我们通过两张图来分别描述一下从头取元素，从尾取元素的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.6.2 Zrange查询过程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;命令：zrange mytest 0 -1，&lt;strong&gt;从头部取元素的过程&lt;/strong&gt;，1 -&amp;gt; 11 -&amp;gt; 21 -&amp;gt; 23 &lt;strong&gt;结束&lt;/strong&gt;。如&lt;strong&gt;图3.12&lt;/strong&gt;**：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4796296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LjMFtzFM7H1AicDGA2FxQ28pg7VbhG6G5dIFImSWsoZQVBGnuusm0BVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.6.3 Zrevrange查询过程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;命令：zrevrange mytest 0 -1，&lt;strong&gt;从尾部取元素的过程&lt;/strong&gt;，23 -&amp;gt; 21 -&amp;gt; 11 -&amp;gt; 1 &lt;strong&gt;结束&lt;/strong&gt;。如&lt;strong&gt;图3.13**&lt;/strong&gt;：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4740741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8L2wtISuPyU3EcM6O9TibMVuf3ukU6fFtibfBAo8ZicibPulP0EUSf1AK27A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.7&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set删除元素源码分析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.7.1 删除结点整体源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本小节通过删除一个元素的过程来分析一下源代码，看具体过程是什么样的，首先我们还是来介绍一下删除函数的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslDelete&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele, zskiplistNode **node)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x &amp;amp;&amp;amp; score == x-&amp;gt;score &amp;amp;&amp;amp; sdscmp(x-&amp;gt;ele,ele) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zslDeleteNode(zsl, x, update);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!node)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            zslFreeNode(x);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            *node = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;删除结点的过程我们通过源代码能够得知分为两个步骤：&lt;/p&gt;&lt;p&gt;1、查找要删除的结点；&lt;/p&gt;&lt;p&gt;2、设置span和forward；&lt;/p&gt;&lt;p&gt;假如我们想删除&lt;strong&gt;&lt;span&gt;score = 21&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;ele = hij&lt;/span&gt;&lt;/strong&gt;的的过程是什么样的？请接着往下看：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.7.2 查找删除结点源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先看一下具体代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;中间每次循环的查询过程省略了(如果想了解请查看3.4小节或者3.6小节)，通过循环赋值，最后得出&lt;strong&gt;update[2] &lt;/strong&gt;指向&lt;strong&gt;header、update[1] &lt;/strong&gt;指向&lt;strong&gt;score = 1的结点、update[0]指向score = 11的结点&lt;/strong&gt;，如&lt;strong&gt;图3.14&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4981481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LibHyTqibUwU1CJ2AkvDibwL70DIiaicqB8MgE6sqFr1AIzXQFjwKM0nuMYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.7.3 设置span和forward&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先看一下具体的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslDeleteNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (update[i]-&amp;gt;level[i].forward == x) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span += x-&amp;gt;level[i].span - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].forward = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span -= &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x-&amp;gt;backward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;tail = x-&amp;gt;backward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;(zsl-&amp;gt;level &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; zsl-&amp;gt;header-&amp;gt;level[zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;].forward == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;level--;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length--;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们看一下更新每个update结点后的span和forward之后，跳的结构是什么样的？如&lt;strong&gt;图3.15&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5305556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lib6T6oc7wUJR2FcEX2mEnoLxEMI7cd3WpSsZeavLwTW2RBQLwJd5RpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;最后再看一下调整backward之后，跳的结构是什么样的？如图3.16所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5351852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LPgqH8wepNOgWz7T4odMIvXPA5FvzW8LpicicRDDjpibPZKBNPiar6UryJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，我们的删除结点动作完成。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.8&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Redis为什么要选择跳表&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过对第二章和第三章节的了解，我们知道Redis的有序集合使用跳表这样的数据结构，那为什么Redis要使用跳表呢？有没有更好的选择呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.1 跳表 VS 哈希表&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;哈希表也叫散列表，可以根据一个key找到具体的一个value，它通过一定的算法把key映射到不同的Hash桶，在Hash冲突不是很大的时间它的时间复杂度是&lt;strong&gt;&lt;span&gt;O(1)&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;哈希表可以很容易的通过一个key，来找到相对应的value，那为什么不用哈希表呢？&lt;/p&gt;&lt;p&gt;1、哈希表无序，我们的想实现一个有序的数据结构，这个不满足需求&lt;/p&gt;&lt;p&gt;2、没办法范围查询&lt;/p&gt;&lt;p&gt;基于有序和范围查询的特性跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.2 跳表 VS 平衡树&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;平衡树是两个子树高度差绝对值不超过 1，并且左右两个子树也都是平衡二叉树这样的数据结构，为了保持树的平衡需要在插入、删除的时候做左旋、右旋的操作来让树保持平衡，红黑树更复杂(具体红黑树的结构这里不做详细赘述)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;时间复杂度对比：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;查询&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;插入&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;跳表&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;平衡树&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们通过对比发现，几乎平衡树在查询、插入、删除的时间复杂度跟跳表一模一样，那我们为啥不选择平衡树呢？&lt;/p&gt;&lt;p&gt;1、实现难易，跳表实现比较简单，平衡树实现很复杂&lt;/p&gt;&lt;p&gt;2、范围查询方便，跳表只需要通过找到范围开始结点，然后顺着前后把元素找齐就行了，平衡树如果范围查询，则很困难，我们先要找到指定范围的小值之后，再通过中序遍历继续寻找其他不超过大值的结点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对数据结构的实现、范围查询这两点来看，跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.3 跳表 VS Btree&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Btree是为了磁盘存储设置设计的一种多叉平衡查找树，像我们了解的数据库Mysql的引擎Myisam就是B树，Innodb是B+树(&lt;strong&gt;图3.17&lt;/strong&gt;)，我们其实很容易能够想到我们的Mysql不仅支持单键查询，也支持范围查询。那我们是不是可以用B+树来实现呢？&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4179255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LxibSnxseHCZdMia67ibP1WVYz2iczeAuB1ibmHhUlcnLRZTMVRf8m6buKyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;其实是为了&lt;strong&gt;更省空间&lt;/strong&gt;，Redis是内存型软件，不是基于硬盘索引这点也要考虑，Btree的结点出了数据还有左右两个指针，而跳表只有一个一个向后的指针，占用的空间更少。所以针对空间跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.4 作者的选择的原因&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1) They are not very memory intensive. It&#x27;s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.(更省内存) &lt;/p&gt;&lt;p&gt;2) A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.(范围查询比平衡树方便) &lt;/p&gt;&lt;p&gt;3) They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.About the Append Only durability &amp;amp; speed, I don&#x27;t think it is a good idea to optimize Redis at cost of more code and more complexity for a use case that IMHO should be rare for the Redis target (fsync() at every command). Almost no one is using this feature even with ACID SQL databases, as the performance hint is big anyway.About threads: our experience shows that Redis is mostly I/O bound. I&#x27;m using threads to serve things from Virtual Memory. The long term solution to exploit all the cores, assuming your link is so fast that you can saturate a single core, is running multiple instances of Redis (no locks, almost fully scalable linearly with number of cores), and using the &quot;Redis Cluster&quot; solution that I plan to develop in the future.(更简单)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据这三个小节的论述相信大家已经对Redis选择跳表而不是哈希表、平衡树、Btree的原因已经有了较深的了解了吧。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.9&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;公共函数源码解析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.9.1 获取跳表的长度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zsetLength&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; robj *zobj)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; length = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_ZIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        length = zzlLength(zobj-&amp;gt;ptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_SKIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        length = ((&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; zset*)zobj-&amp;gt;ptr)-&amp;gt;zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverPanic(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unknown sorted set encoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.2 按照Rank查到该结点&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode* &lt;span class=&quot;code-snippet__title&quot;&gt;zslGetElementByRank&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rank)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; traversed = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp; (traversed + x-&amp;gt;level[i].span) &amp;lt;= rank)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            traversed += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (traversed == rank) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.3 批量增加写数据到缓冲区&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addReplyBulkCBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *p, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyLongLongWithPrefix(c,len,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;$&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyString(c,p,len);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReply(c,shared.crlf);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.4 写double类型的数据到缓冲区&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addReplyDouble&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; dbuf[&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;], sbuf[&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dlen, slen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isinf(d)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReplyBulkCString(c, d &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;inf&quot;&lt;/span&gt; : &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;-inf&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dlen = &lt;span class=&quot;code-snippet__built_in&quot;&gt;snprintf&lt;/span&gt;(dbuf,&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(dbuf),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%.17g&quot;&lt;/span&gt;,d);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        slen = &lt;span class=&quot;code-snippet__built_in&quot;&gt;snprintf&lt;/span&gt;(sbuf,&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(sbuf),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;$%d\r\n%s\r\n&quot;&lt;/span&gt;,dlen,dbuf);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReplyString(c,sbuf,slen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.5 释放跳表结点&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslFreeNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplistNode *node)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sdsfree(node-&amp;gt;ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zfree(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>195e05b38cb6382361bf690aec4a6a85</guid>
<title>阿里数据治理项目启动前的必答三问</title>
<link>https://toutiao.io/k/ghq953s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7129629629629629&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/z2DApiaibzMic8iaMuFSuVcEolc6cuhc29mib8icuhT29P7pYFTlalCwsHxLvuErZanpOia30ojicTjgYvcIiabyiaK9q2EQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源：阿里数据中台&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全文共&lt;/span&gt;&lt;span&gt;&lt;span&gt;2420&lt;/span&gt;&lt;/span&gt;&lt;span&gt;个字，建议&lt;/span&gt;&lt;strong&gt;&lt;span&gt;7分钟&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阅读&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4MzE4MjQxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z2DApiaibzMicibStrZbEKicUIkEia0iaUrqcr4dq64JSoTr0gAkQE7QESQcYrsNqGvdQWrNUZKUz9zjO2WxEAKD5J5GQ/0?wx_fmt=png&quot; data-nickname=&quot;数据社&quot; data-alias=&quot;DataClub&quot; data-signature=&quot;现任某500强头部企业大数据分析负责人，中国DBA联盟成员，主要分享大数据实践的那些事，个人专注数据仓库架构，数据分析，MPP数据库研究、流处理计算等领域~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，&lt;/span&gt;&lt;span&gt;我是一哥&lt;/span&gt;&lt;span&gt;，作为从业多年的数据人，也一直在反思，为什么数据治理提了那么多年，以前做治理项目成功的案例并不多见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近一年以来，越来越多的企业在考虑或正在启动数据治理的项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为在该领域从业多年的人士，也常会被咨询到&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据治理不是很多年前就有的概念么？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么忽然很多企业都在提及？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;是不是新瓶装旧酒？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;和数据中台之间是什么关系？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;......&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次主要围绕下文中数据治理领域的三个核心问题来梳理，更重要的是，这三个问题，也是一家企业启动数据治理项目前必须要想清楚的三个问题。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;01&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;一问：为什么要治理?&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这是一个数据治理项目启动前必须要拉齐认知的问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;&lt;strong&gt;并不是为了治理而治理，治理本身并无价值&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-spm-anchor-id=&quot;0.0.0.i5.339736faN1hqQR&quot;&gt;&lt;span&gt;我们认为：治理的价值在于&lt;strong&gt;构建企业内一份质量可靠、安全可控、服务便捷的好数据，让数据价值得以释放&lt;/strong&gt;。也就是说：数据治理的终极目的是为了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;释放数据价值&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，奠定数据价值释放的基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3741307371349096&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q8vOeg223fCSnmQoREa7CBKx6HNJAtKGeG1xgesl850KrnkKoDPSLy77cPgxuXPTV3FWHvicdjV0sLPumb3SXOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;719&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着各行各业数字化转型进程的加速，业务数字化的基础日渐扎实，数据驱动业务或数据化运营，不再是传统头部企业及大型互联网公司的专利，越来越多的企业也在拥抱数据、消费数据。因此，数据治理的诉求呈现出日渐强烈的趋势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据资产治理的强烈诉求之下，启动项目前，&lt;strong&gt;自上而下，&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;企业必须达成一个统一认知&lt;/strong&gt;：&lt;strong&gt;数据治理的终极目的是为了驱动数据消费、释放数据价值&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;02&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;二问：治理实现什么?&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这是数据治理项目启动前，需要细化和明确答案的一个问题。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据治理并非一蹴而就，我们需要明确长期目标是什么，但同时也要明确短期项目范围和目标又是什么。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据治理的目的不难理解，制定数据治理项目的阶段性目标可以&lt;strong&gt;从终极目的的数据价值释放&lt;/strong&gt;出发，也可以从&lt;strong&gt;数据体系的完善度&lt;/strong&gt;出发。一般来说，后者是常见的直接目标。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，在数据领域摸爬多年的领域人士都知道，数据治理并非一蹴而就。一般围绕四大关键领域&lt;strong&gt;“&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;成本、质量、安全、服务&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;”&lt;/strong&gt;开展工作，进行目标设定。目标设定的可以借鉴以下思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5858585858585859&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q8vOeg223fCSnmQoREa7CBKx6HNJAtKGRuSEMb69aKUFwYPhPMDUVkRoLsh42UAqpX2rB9TdtKW9wvL3hTa1PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;生产经济即成本方面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，以&lt;strong&gt;控制甚至节约成本&lt;/strong&gt;为目标，实际运作则需要拆解到业务线或者不同领域范围的成本控制，比如销售业务线、市场投放线等，再比如基础数据线、流量日志数据线等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;质量可靠即质量方面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，以&lt;strong&gt;减少数据质量问题&lt;/strong&gt;、&lt;strong&gt;收窄数据质量风险敞口&lt;/strong&gt;为目标，实际运作则需要拆解到应用场景或不同数据等级，如商品数据、销售数据等，再如优先保障高管数据看板、驱动业务运行涉及的数据质量等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;安全可控即安全方面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，以&lt;strong&gt;满足合规要求、防止数据泄漏&lt;/strong&gt;为目标，实际运作则需要拆解到不同的数据类型或流程环节，如隐私数据、监管报送数据等，往往安全体系能力建设是其中重要的工作；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;服务便捷即服务方面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，以&lt;strong&gt;盘点供给丰富的数据、驱动数据消费&lt;/strong&gt;为目标，实际运作则需要拆解到不同的业务线、数据类型及服务场景，如营销推广、业务决策等。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从具体的工作开展来看，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;成本&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;是数据到一定体量再重点关注的领域，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;质量&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是其中最重点也是最具挑战的领域，&lt;/span&gt;&lt;strong&gt;&lt;span&gt;安全&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是基础，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;服务&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;则是需要高度重视并投入打造数据价值的关键领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，在项目启动之前，必须明确本次项目范围重点的是哪个或哪几个领域（如：成本、质量）、治理范围是什么（如：客户数据、监管报送场景、流量日志线数据）、核心目标是什么（如：3个月项目上线、XXX成本的节约、6个月P0级数据质量故障数为0、完成XXX数据的上架、数据服务体系能力建设形成XXX、XXX用户的服务）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总而言之，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;启动治理项目前，必须对领域、范围、核心目标进行选择和设定&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;03&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;三问：怎么实现治理?&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;目的目标明确，具体的数据治理应该如何实施呢？&lt;br/&gt;这是保障数据治理项目成功的关键问题，涉及到&lt;strong&gt;人员组织及权责的设计、流程规范的设计、工具选型&lt;/strong&gt;三方面的基础工作，同时还要围绕&lt;strong&gt;目标设定的领域、范围及核心目标&lt;/strong&gt;进行工作开展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4633962264150943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q8vOeg223fCSnmQoREa7CBKx6HNJAtKGAM6Dia4ibUtkSm3BicmtKNwK08nicCvzXDczvMpBVB4hCicDVPiayETOmylw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1325&quot;/&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于数据质量出现问题引发的原因很多，可能有技术层面的数据建设开发不规范，可能有业务层面的填报输入有纰漏，可能有管理层面的组织机制不健全导致无人推进等，所以要&lt;strong&gt;对数据质量及管理进行摸底，确定质量的水位线及风险敞口&lt;/strong&gt;，并&lt;strong&gt;制定事前事中事后全链路的数据质量治理方案&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据价值释放是数据治理项目的终极目标，所以一方面通过&lt;/span&gt;&lt;strong&gt;对企业所有数据盘点及管理&lt;/strong&gt;&lt;span&gt;，在数据供给侧汇聚全域数据，体系化地组织数据，并丰富数据信息，另一方面&lt;/span&gt;&lt;strong&gt;强化数据运营培训及推广&lt;/strong&gt;&lt;span&gt;，建立良好的资产检索和确信体验，并和取数、分析等数据服务链接，实现数据资产在需求侧消费扩大。&lt;/span&gt;&lt;span&gt;与此同时，体系化呈现资产能力大图及资产价值评估也是必不可少的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据安全方面，重点是&lt;/span&gt;&lt;strong&gt;数据识别后对数据的分类分级&lt;/strong&gt;&lt;span&gt;，同时&lt;/span&gt;&lt;strong&gt;对隐私及不同安全等级的数据采取不同的授权策略&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;不论从源头的数据采集、授权，还是从外部引入合作，合规性都是今天数据安全范畴内非常重要的命题，因此相关流程机制及能力建设也可以是实施中的重要组成部分。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据成本方面，重点&lt;/span&gt;&lt;strong&gt;对数据存储及计算的浪费问题进行发现和处理&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;strong&gt;通过&lt;/strong&gt;&lt;strong&gt;分析、设定治理项、启动治理，实现成本的节约&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;因此，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;启动治理项目前，必须对基本的治理实施路径进行定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，包括&lt;strong&gt;组织保障、流程规范、工具提效&lt;/strong&gt;，并对涉及的领域如&lt;strong&gt;质量&lt;/strong&gt;：进行全面评估、用全链路的视角对项目范围内的数据建设进行质量风险控制、建立数据质量故障体系提升响应能力，同时重点关注&lt;strong&gt;价值出口&lt;/strong&gt;，对数据资产进行盘点和运营推广，让数据被用起来。&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;04&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;总结&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Q8vOeg223fCSnmQoREa7CBKx6HNJAtKGzU7pFNN5db3z5Jtq6E4RFyAOIerOxcQdCfvHmL9Oxtgf0m5Zfka01w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;写在最后：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为从业多年的数据人，也一直在反思，为什么数据治理提了那么多年，以前做治理项目成功的案例并不多见。而如今再次被提起，项目成功的可能性却有了很大提升，主要原因在以下几方面：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数字化转型浪潮下，对数据治理都有了更客观的认知，是&lt;strong&gt;长期能力建设而非运动式项目&lt;/strong&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据中台和数据治理结合&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，数据的统一汇聚为数据治理提供了基础，体系规范的&lt;/span&gt;&lt;span&gt;&lt;span&gt;数据建设又让数据治理前置到事前事中，&lt;/span&gt;&lt;strong&gt;全链路式的数据治理&lt;/strong&gt;&lt;span&gt;而非点状、事后的数据治理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;一批真正懂数据、实践过大规模数据建设和数据运营的人员为数据治理提供服务，&lt;/span&gt;&lt;strong&gt;实战沉淀&lt;/strong&gt;&lt;span&gt;而非纸上谈兵&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2649379093_1&quot; data-recommend-article-time=&quot;1635980760&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMic9UpYMXRAtLj0oWAhfNBVshbmwvpG8UuLxXnETUwibIdt05NEiav8vOibaGhfSIXL8EN6ye3xpvgfYyw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;五个篇章讲明白如何从0到1搭建大数据平台&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649379093&amp;amp;idx=1&amp;amp;sn=22e4b4066546bfdf7d30fc5675d47514&amp;amp;chksm=f3906529c4e7ec3fc007c3ead23e1e0a0ca4fa52457db9d034a44b4afed5564bad1ae30eea1d#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649379093&amp;amp;idx=1&amp;amp;sn=22e4b4066546bfdf7d30fc5675d47514&amp;amp;chksm=f3906529c4e7ec3fc007c3ead23e1e0a0ca4fa52457db9d034a44b4afed5564bad1ae30eea1d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMic9UpYMXRAtLj0oWAhfNBVshbmwvpG8UuLxXnETUwibIdt05NEiav8vOibaGhfSIXL8EN6ye3xpvgfYyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;五个篇章讲明白如何从0到1搭建大数据平台&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2649375942_1&quot; data-recommend-article-time=&quot;1633606545&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMic8sk8x3d848uBceTCdY5KmVjCejRyLagsC508QCib1IokQvL1dS0AicsGdPKFApGbdvqt3rEFGhuf7A/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;从看《长津湖》想到的数字化转型&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649375942&amp;amp;idx=1&amp;amp;sn=abbb8cc99ae53d04572033016eb35d01&amp;amp;chksm=f39070fac4e7f9ec90e621b1f847de89de6a3399075e6060b70b2200ccf214c36eb1db3916d0#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649375942&amp;amp;idx=1&amp;amp;sn=abbb8cc99ae53d04572033016eb35d01&amp;amp;chksm=f39070fac4e7f9ec90e621b1f847de89de6a3399075e6060b70b2200ccf214c36eb1db3916d0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMic8sk8x3d848uBceTCdY5KmVjCejRyLagsC508QCib1IokQvL1dS0AicsGdPKFApGbdvqt3rEFGhuf7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;从看《长津湖》想到的数字化转型&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2649373550_2&quot; data-recommend-article-time=&quot;1629155100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMicibkdb6bnltlS8wriatDG1TzKMicxwBVpwcviaqACJKOiaUeQrqjKAycCk4M8hJ0K4vibDyuEDrejuXjWyg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;华为的数字化转型与数据治理（附规范下载）&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649373550&amp;amp;idx=2&amp;amp;sn=7bf1dd187cd80f063b1087100f284828&amp;amp;chksm=f3900f52c4e7864423d92b22082f34dfa658fbf6004510a3c1b393987ba35ec93ee705262257#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzE4MjQxOQ==&amp;amp;mid=2649373550&amp;amp;idx=2&amp;amp;sn=7bf1dd187cd80f063b1087100f284828&amp;amp;chksm=f3900f52c4e7864423d92b22082f34dfa658fbf6004510a3c1b393987ba35ec93ee705262257&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4249471458773784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z2DApiaibzMicibkdb6bnltlS8wriatDG1TzKMicxwBVpwcviaqACJKOiaUeQrqjKAycCk4M8hJ0K4vibDyuEDrejuXjWyg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;473&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;华为的数字化转型与数据治理（附规范下载）&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI4MzE4MjQxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z2DApiaibzMicibStrZbEKicUIkEia0iaUrqcr4dq64JSoTr0gAkQE7QESQcYrsNqGvdQWrNUZKUz9zjO2WxEAKD5J5GQ/0?wx_fmt=png&quot; data-nickname=&quot;数据社&quot; data-alias=&quot;DataClub&quot; data-signature=&quot;现任某500强头部企业大数据分析负责人，中国DBA联盟成员，主要分享大数据实践的那些事，个人专注数据仓库架构，数据分析，MPP数据库研究、流处理计算等领域~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>