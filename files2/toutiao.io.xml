<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6d4e7fde7e38175ee1f35304d2906448</guid>
<title>我是如何阅读 JDK 源码的？</title>
<link>https://toutiao.io/k/5kuu7cq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前断断续续读过一部分 JDK 常用类的源码，这里想把过程中的一些心得和方法记录下来，如果能帮到需要的小伙伴就再好不过了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主要分享一下我的阅读工具和阅读顺序。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 由于当前主流使用的 JDK 版本仍是 1.8，因此源码阅读主要是 1.8 版本，有些地方可以参考 1.7（面试可能问到）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 工具&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;工欲善其事，必先利其器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要的工具不多，IDE + Google 翻译足够了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 IDE 的主要目的是可以写一些测试代码以便跟踪调试。这个还是很有必要的，跟进代码的执行流程更容易理解它的实现原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接在 IDE 打开源码文件，源码中的注释通常很详细，遇到不懂的地方 Google 翻译一下。也可以加上官方文档，其实源码里面注释跟文档是一样的，有些地方可能更详细，只不过官方文档排版更漂亮一些。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;JDK 1.8 官方文档链接：https://docs.oracle.com/javase/8/docs/api/&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，阅读的先后顺序也很重要，下面介绍下我的阅读顺序。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 阅读顺序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 整体顺序&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JDK 中的代码非常多，不可能、也没必要全部读完，因此要有的放矢。从整体上来讲，顺序大概是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;集合框架类&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;主要包括 Collection、Map、Queue 等组成的一系列常用类和接口，包括 ArrayList、LinkedList、HashMap 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;这部分内容日常开发使用较多，而且面试高频出现，因此可以先从这里入手。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;并发包&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;即 java.util.concurrent (J.U.C) 包下的常用类，包括 ReentrantLock、ThreadPoolExecutor、AQS 等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;该部分提供了并发编程的常用工具类，也是面试高频。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;其他常用类&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;例如 ThreadLocal、String、StringBuilder、StringBuffer 等。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整体概览如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1453125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdQoZF7ialbaic44U7TkrJddCHcPQjTdfBicvTuquRtE41SVORTVMb7kHiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体到某一个类，如何去阅读它的源码实现呢？下面继续介绍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 具体顺序&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1 类和接口&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何阅读一个类的源码呢？主要步骤大概是：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先读接口代码。包括接口说明文档、各个方法的定义和说明文档。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;再去读实现类的主要方法实现，通常有以下两条主线入口：&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构造方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;常用方法&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Java 中，接口通常意味着是一种“标准”、或者“协议”。一个接口可以有多个实现类，它们都会按照接口的这种标准来实现接口的各个方法。因此，理解了一个方法的定义，再去看它的实现会更容易理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面以常用的 ArrayList 为例，分析如何去阅读它的源码。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2 ArrayList 源码分析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先看下 ArrayList 的继承结构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.45610034207525657&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdvOcVj6Q7zO9UgLXKQ4wicW8B1vQjIXLl5icfFO6P1Ldib6PjQx3Aj5LWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到它实现了很多接口，其中三个接口 Cloneable、RandomAccess、Serializable 都是空的，可以暂时忽略。主要去看 Iterable、Collection 以及 List 接口的方法定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Iterable 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.44970414201183434&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQd5cBIF0zQbsSsLMN2xKmIWs77SCQSmQEsia6KEe4QNqBIMahuibLkKKUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Collection 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5351351351351352&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQdrCXvZqAzI6JsI9DAR0YicRIgMrEZrGRle5H6fkQMreILFjpOGj4Zib6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;740&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;List 接口：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.035532994923858&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ophTb90oYCQsrOKbYh3h4jxRnE1J0oQd7DicyiacTZ4Bf98czbicZWibCD5KGgx9u8WTFvkNPCs2ROtyGZXLO8OvyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来方法挺多，其实不少都是我们平时会用到的，大部分理解起来并不困难，而且方法也都有注释。这部分难度不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来根据前面提到的两条主线入口，分析 ArrayList 的源码如何阅读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析一个类的源码时，构造器通常是一个好的切入点。比如 ArrayList 的三个构造器如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; initialCapacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (initialCapacity &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = &lt;span&gt;new&lt;/span&gt; Object[initialCapacity];&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (initialCapacity == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = EMPTY_ELEMENTDATA;&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;Illegal Capacity: &quot;&lt;/span&gt;+&lt;br/&gt;                                           initialCapacity);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ArrayList&lt;/span&gt;&lt;span&gt;(Collection&amp;lt;? extends E&amp;gt; c)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    elementData = c.toArray();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; ((size = elementData.length) != &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;// c.toArray might (incorrectly) not return Object[] (see 6260652)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (elementData.getClass() != Object[].class)&lt;br/&gt;            elementData = Arrays.copyOf(elementData, size, Object[].class);&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// replace with empty array.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.elementData = EMPTY_ELEMENTDATA;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;构造器中有不少成员变量，比如 elementData、EMPTY_ELEMENTDATA、DEFAULTCAPACITY_EMPTY_ELEMENTDATA 等，继续跟进这几个变量：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = {};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;transient&lt;/span&gt; Object[] elementData; &lt;span&gt;// non-private to simplify nested class access&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此可以得知，当我们写了 &lt;code&gt;new ArrayList()&lt;/code&gt; 时，它的内部到底做了些什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了构造器，常用方法也是一个主要的入口，比如 add、remove 等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;add 方法实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;&lt;span&gt;(E e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ensureCapacityInternal(size + &lt;span&gt;1&lt;/span&gt;);  &lt;span&gt;// Increments modCount!!&lt;/span&gt;&lt;br/&gt;    elementData[size++] = e;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;ensureCapacityInternal&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; minCapacity)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以一行行跟进代码，查看 add 方法内部到底做了什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他方法的套路也是如此，不再一一说明。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照这样一条条主线走下来，就可以对 ArrayList 的实现原理有个整体的认知了。整体部分搞清楚之后，接下来还可以去读一些不太常用的方法，包括剩余的所有部分。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS: 这里只是以常用的 ArrayList 为例，其他包下的类的阅读步骤也大同小异。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 做笔记&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，做笔记也很重要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以用思维导图梳理整体脉络，用笔记工具记录一个类的核心部分实现原理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，如果自己整理和写出来笔记更好，许多时候总觉得自己知道了，但是别人一问就懵了，可能还是没理解到位吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有句话说得好：”教是最好的学“。当你能把某个知识点通俗易懂的讲给一个外行人，才是真的懂了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4 注意点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚开始读时，可能会遇到某些地方难以理解，可以尝试写测试代码断点跟踪调试，或者参考别人的博客。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果遇到某个点实在难以理解，也可以先跳过，过段时间再重新思考也许就豁然开朗了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;PS:&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;以上内容纯属个人见解，仅供参考。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;此外，我把之前文章的笔记整理成了电子书，后台回复「JDK源码」即可获取。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1548110088865939457&quot; data-bizuin=&quot;MzU4NzYyMDE4MQ==&quot; data-title=&quot;大家有好的方法或吐槽欢迎提出来讨论（我也体验下这个功能😀）&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/ophTb90oYCR6eOZrkKMnznEahtiajNrSAicJDk24paw3VDzbZRLXgyibXWEuZ4qhuSgXoeFaqj1gpV96gVpZCHc7g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6ca83e28d3d08682d94bc1412a39d573</guid>
<title>在 Vue Vite 应用程序中实现暗/亮模式</title>
<link>https://toutiao.io/k/7jeyx5j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;文末领取昨天的红包抽奖抽中的金额（没想到那个抽奖是平台套路，抱歉，第一次用）以及查看106期中奖用户&lt;/strong&gt;&lt;/span&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;346&quot; data-ratio=&quot;0.8307142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AOtFNBRYb6gnSScRKaj7paNRHnmkicLm5CJQo2myvGjL08KScna2f8jrVuG0JMorq4AicWvt0FSYKew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;section&gt;&lt;span&gt;在本文中，我将在不使用任何库的情况下将dark\Light模式功能实现到我们的Vue Vite应用程序中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们将首先创建一个简单的Vite应用程序，然后为我们的应用程序设置一个简单的用户界面。在创建我们的Vue应用程序之前，我想提到WrapPixel提供的一些很棒的&lt;span&gt;免费Vue模板&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;，它们可以免费下载并用于个人和商业用途。他们可以节省你的时间，因为你可以直接在你的项目中使用他们令人惊叹的用户界面，这将给你的应用程序带来惊人的外观和感觉，所以一定要去看看。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;创建一个Vuejs Vite应用程序&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;要设置Vite应用程序，请打开您的终端并输入以下内容：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;npm init vite-app themeswitcher&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个命令将搭建一个新的vite应用程序，然后进入项目目录安装项目依赖项：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;cd themeswitcher&lt;br/&gt;npm install&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安装后，我们现在可以使用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;npm run dev&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令运行我们的应用程序：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;code . &amp;amp;&amp;amp; npm run dev&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;code .&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令将以VS Code打开我们的应用程序。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们的应用程序现在将在端口3000上运行。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6204545454545455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AOtFNBRYb6gnSScRKaj7paNWG7IptwTcBssL1EWIib5HRvFqiaG3JRRicSk0F8Wms5tibRf5eMzib1SNfg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随着应用程序的启动和运行，我们现在可以创建CSS。在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 目录内创建一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;css/dark.css&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件，这是我们将在黑暗模式环境中存储所有CSS代码的地方。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在dark.css文件中添加以下代码：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;:root&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;--text&lt;/span&gt;: &lt;span&gt;#ffffff&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;--background&lt;/span&gt;: &lt;span&gt;#1d1d23&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;body&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;background-color&lt;/span&gt;: &lt;span&gt;var&lt;/span&gt;(--background) &lt;span&gt;!important&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;h1&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;h2&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;h3&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;h4&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;h5&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;h6&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;p&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;small&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;a&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;color&lt;/span&gt;: &lt;span&gt;var&lt;/span&gt;(--text) &lt;span&gt;!important&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;现在将在head中创建一个link标签将其设置为我们创建的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;dark.css&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件，以便可以应用在此定义的所有样式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们将使用Javascript类来执行此操作，在src目录中创建 &lt;/span&gt;&lt;code&gt;&lt;span&gt;src/theme.js&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件，并添加以下代码：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;themeChanger&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * &lt;span&gt;@constructor&lt;/span&gt;&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;constructor&lt;/span&gt;() {}&lt;br/&gt;    _addDarkTheme() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; darkThemeLinkEl = &lt;span&gt;document&lt;/span&gt;.createElement(&lt;span&gt;&#x27;link&#x27;&lt;/span&gt;)&lt;br/&gt;        darkThemeLinkEl.setAttribute(&lt;span&gt;&#x27;rel&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;stylesheet&#x27;&lt;/span&gt;)&lt;br/&gt;        darkThemeLinkEl.setAttribute(&lt;span&gt;&#x27;href&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;./css/dark.css&#x27;&lt;/span&gt;)&lt;br/&gt;        darkThemeLinkEl.setAttribute(&lt;span&gt;&#x27;id&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;dark-theme-style&#x27;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; docHead = &lt;span&gt;document&lt;/span&gt;.querySelector(&lt;span&gt;&#x27;head&#x27;&lt;/span&gt;)&lt;br/&gt;        docHead.append(darkThemeLinkEl)&lt;br/&gt;    }&lt;br/&gt;    _removeDarkTheme() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; darkThemeLinkEl = &lt;span&gt;document&lt;/span&gt;.querySelector(&lt;span&gt;&#x27;#dark-theme-style&#x27;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; parentNode = darkThemeLinkEl.parentNode&lt;br/&gt;        parentNode.removeChild(darkThemeLinkEl)&lt;br/&gt;    }&lt;br/&gt;    _darkThemeSwitch() {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; darkThemeLinkEl = &lt;span&gt;document&lt;/span&gt;.querySelector(&lt;span&gt;&#x27;#dark-theme-style&#x27;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!darkThemeLinkEl) {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;._addDarkTheme()&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;this&lt;/span&gt;._removeDarkTheme()&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们创建3种方法：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;_addDarkTheme()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：这会将link标签添加到应用程序的HTML head中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;_removeDarkTheme()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：这将删除已添加到HTML head的link标签。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;_darkThemeSwitch()&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：这将切换添加和删除方法，以在我们的HTML head中添加和删除link标签。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们可以继续在Vue.js组件中使用此方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;编辑 &lt;/span&gt;&lt;code&gt;&lt;span&gt;components/HelloWorld.vue&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 中的代码，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;  &amp;lt;h3&amp;gt;Vite is the future of Frontend Developement.&amp;lt;/h3&amp;gt;&lt;br/&gt;  &amp;lt;small&amp;gt;Thanks to Evan You&amp;lt;/small&amp;gt;&lt;br/&gt;  &amp;lt;br /&amp;gt;&lt;br/&gt;  &amp;lt;button @click=&quot;darkThemeSwitch&quot;&amp;gt;switch&amp;lt;/button&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script&amp;gt;&lt;br/&gt;import themeChanger from &quot;../util/theme.js&quot;;&lt;br/&gt;export default {&lt;br/&gt;  name: &quot;HelloWorld&quot;,&lt;br/&gt;  props: {&lt;br/&gt;    msg: String,&lt;br/&gt;  },&lt;br/&gt;  data() {&lt;br/&gt;    return {&lt;br/&gt;      themeChanger: null,&lt;br/&gt;    };&lt;br/&gt;  },&lt;br/&gt;  methods: {&lt;br/&gt;    darkThemeSwitch() {&lt;br/&gt;      this.themeChanger._darkThemeSwitch();&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;  created() {&lt;br/&gt;    this.themeChanger = new themeChanger();&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;我们引入 &lt;/span&gt;&lt;code&gt;&lt;span&gt;themeChanger&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类的实例，然后将其存储在Vue.js data实例中。然后，我们创建一个按钮，该按钮将调用我们在 &lt;/span&gt;&lt;code&gt;&lt;span&gt;theme.js&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 文件中创建的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;_darkThemeSwitch&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;完成此操作后，我们现在可以在应用程序中在明暗模式之间切换。&lt;/span&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6204545454545455&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/WYoaOn5t0AOtFNBRYb6gnSScRKaj7paNpA1eQVdLDIRkF2Libs5cu3R5iaic9wKWAPapu7RM8kOLwwEfHrhmrmibJw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot;/&gt;&lt;/figure&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;相关阅读&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676494264&amp;amp;idx=1&amp;amp;sn=f5f0c9cdbbf068c28041f6eafd6bdc98&amp;amp;chksm=f362c45bc4154d4da7e79db93b9526f256e064b5b537834835df92f551677ae49a283279d201&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;听说你熟练使用Vue.js，这9种Vue技术你掌握了吗？&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676493889&amp;amp;idx=1&amp;amp;sn=bf85d210efffb7952d0753bd9cd4d6e8&amp;amp;chksm=f362c5a2c4154cb48f0c4ea6421c6a8f27fcc82809c8dff5464a9aa8ab36eab95f522581e9e9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Vue技巧 | 在Vue3中使元素在滚动视图时淡入&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492928&amp;amp;idx=1&amp;amp;sn=6614d02412872db83687f22c24550085&amp;amp;chksm=f362c163c41548758d6baef1823216bf1b516cf9f20a3237f5e0702fdb970430a053280ce8db&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Vue.js中编写更好的v-for循环的6种技巧&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492896&amp;amp;idx=1&amp;amp;sn=9f4133d0288d454eaaae836d5ef4eef3&amp;amp;chksm=f362c183c415489577b1b8d9d05b9503b1ed3f932d2037fc20a93c62ad2f8f2b6799d33228ff&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;我总结了12个Vue.js开发技巧和窍门&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492460&amp;amp;idx=2&amp;amp;sn=f2a9017614371a8f742bb3adb4a2cc35&amp;amp;chksm=f362c34fc4154a59cc6f705c93a801a44a73f0e1f4d4a6e400f82a9ec5c555627fbb614fa0fe&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Vue.js嵌套组件生命周期执行顺序&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MDIwNTQ1Mg==&amp;amp;mid=2676492162&amp;amp;idx=1&amp;amp;sn=f9e18b23b1289064d194af9a13d49e14&amp;amp;chksm=f362cc61c4154577368715e797d404e9921a6f260c3934f182e2176c3de6752ae2b57906db5a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Vue.js中侦听器（watch）的高级用法&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;免费Vue模板：https://www.wrappixel.com/templates/category/vuejs-templates/&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;粉丝福利&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;106期中奖幸运儿：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;叮叮当当&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，记得找我兑奖哦，加微信注明兑奖！&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;临走前留下，&lt;strong&gt;&lt;span&gt;今天的福利&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;福利1：&lt;/span&gt;&lt;span&gt;课程《程序员成长攻略（价值1998）》&lt;/span&gt;&lt;span&gt;获取地址和密码请在公众号中回复关键字：&lt;/span&gt;&lt;span&gt;001&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;福利2：&lt;strong&gt;&lt;span&gt;在看+留言&lt;/span&gt;&lt;/strong&gt;，张张会在留言区随机抽取一位认真留言的小伙伴，给他发一个红包奖励&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wxe43f931b4099b39c&quot; data-miniprogram-path=&quot;__plugin__/wx34345ae5855f892d/pages/productDetail/productDetail?productId=751654&quot; data-miniprogram-nickname=&quot;张张的小铺&quot; href=&quot;&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-servicetype=&quot;10&quot;&gt;JavaScript设计模式与开发实践，图灵出品高分好评，26元出售&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;昨晚红包抽奖抽中名单，抽中的找我兑换对应金额微信红包，抽奖程序平台套路，我以为是一个人得50元&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AO3NavRIylw01GwFqObBo9BbcsFQqRogdjpFavKXHI7hCq2yNoNUFRshia8bCianksWknCsm85hMicibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;，还不能提现，TMD&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;3.373148148148148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WYoaOn5t0AO3NavRIylw01GwFqObBo9BicDJnHSKvvD3LSew6xfdpFMmBfPOpc5kQFG8micL4xvlKl5BuIys2FicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;走心的分享更容易被抽中~&lt;br/&gt;开奖时间 次日文末&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;点赞 + 在看 + 留言&lt;br/&gt;下一个幸运儿就是你&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>456245b8fc628e2966d1bbcca4da5466</guid>
<title>面试官：祖玛游戏玩过么？我来拷拷你</title>
<link>https://toutiao.io/k/k7iseh7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目地址（488. 祖玛游戏）&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://leetcode-cn.com/problems/zuma-game/&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。&lt;br/&gt;&lt;br/&gt;每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。&lt;br/&gt;&lt;br/&gt;找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。&lt;br/&gt;&lt;br/&gt;示例:&lt;br/&gt;输入: &lt;span&gt;&quot;WRRBBW&quot;&lt;/span&gt;, &lt;span&gt;&quot;RB&quot;&lt;/span&gt;&lt;br/&gt;输出: -1&lt;br/&gt;解释: WRRBBW -&amp;gt; WRR[R]BBW -&amp;gt; WBBW -&amp;gt; WBB[B]W -&amp;gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回-1）&lt;br/&gt;&lt;br/&gt;输入: &lt;span&gt;&quot;WWRRBBWW&quot;&lt;/span&gt;, &lt;span&gt;&quot;WRBRW&quot;&lt;/span&gt;&lt;br/&gt;输出: 2&lt;br/&gt;解释: WWRRBBWW -&amp;gt; WWRR[R]BBWW -&amp;gt; WWBBWW -&amp;gt; WWBB[B]WW -&amp;gt; WWWW -&amp;gt; empty&lt;br/&gt;&lt;br/&gt;输入:&lt;span&gt;&quot;G&quot;&lt;/span&gt;, &lt;span&gt;&quot;GGGGG&quot;&lt;/span&gt;&lt;br/&gt;输出: 2&lt;br/&gt;解释: G -&amp;gt; G[G] -&amp;gt; GG[G] -&amp;gt; empty&lt;br/&gt;&lt;br/&gt;输入: &lt;span&gt;&quot;RBYYBBRRB&quot;&lt;/span&gt;, &lt;span&gt;&quot;YRBGB&quot;&lt;/span&gt;&lt;br/&gt;输出: 3&lt;br/&gt;解释: RBYYBBRRB -&amp;gt; RBYY[Y]BBRRB -&amp;gt; RBBBRRB -&amp;gt; RRRB -&amp;gt; B -&amp;gt; B[B] -&amp;gt; BB[B] -&amp;gt; empty&lt;br/&gt;标注:&lt;br/&gt;&lt;br/&gt;你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。&lt;br/&gt;桌上的球不会超过20个，输入的数据中代表这些球的字符串的名字是 &lt;span&gt;&quot;board&quot;&lt;/span&gt; 。&lt;br/&gt;你手中的球不会超过5个，输入的数据中代表这些球的字符串的名字是 &lt;span&gt;&quot;hand&quot;&lt;/span&gt;。&lt;br/&gt;输入的两个字符串均为非空字符串，且只包含字符 &lt;span&gt;&#x27;R&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;Y&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;B&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;G&#x27;&lt;/span&gt;,&lt;span&gt;&#x27;W&#x27;&lt;/span&gt;。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前置知识&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;公司&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试题困难难度的题目常见的题型有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本题就是游戏类题目。如果你是一个前端， 说不定还会考察你如何实现一个 zuma 游戏。这种游戏类的题目，可以简单可以困难， 比如力扣经典的石子游戏，宝石游戏等。这类题目没有固定的解法。我做这种题目的思路就是先暴力模拟，再尝试优化算法瓶颈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意下数据范围球的数目 &amp;lt;= 5，因此暴力法就变得可行。基本思路是暴力枚举手上的球可以消除的地方， 我们可以使用回溯法来完成暴力枚举的过程，在回溯过程记录最小值即可。由于回溯树的深度不会超过 5，因此这种解法应该可以 AC。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的&lt;code&gt;可以消除的地方&lt;/code&gt;，指的是&lt;strong&gt;「连续相同颜色 + 手上相同颜色的球大于等于 3」&lt;/strong&gt;，这也是题目说明的消除条件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们只需要两个指针记录连续相同颜色球的位置，如果可以消除，消除即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.36055276381909546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absiaBGBIXdRotPk0FBjMw7rediaVkWvrSePibZnUIetTBAgMCyNUCojBusw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1592&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图，我们记录了连续红球的位置， 如果手上有红球， 则可以尝试将其清除，这一次决策就是回溯树（决策树）的一个分支。之后我们会撤回到这个决策分支， 尝试其他可行的决策分支。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 board = RRBBRR ， hand 为 RRBB 为例，其决策树为：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absVNZl4sSeOv1QUM8KbOTMpLwGG4TA1icQgH399OXOQQro5ibPib1fTJGQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中虚线表示无需手动干预，系统自动消除。叶子节点末尾的黄色表示全部消除需要的手球个数。路径上的文字后面的数字表示此次消除需要的手球个数&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;如果你对回溯不熟悉，可以参考下我之前写的几篇题解：比如 46.permutations&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看出， 如果选择先消除中间的蓝色，则只需要一步即可完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于计算连续球位置的核心代码(Python3):&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;i = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; i &amp;lt; len(board):&lt;br/&gt;    j = i + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; j &amp;lt; len(board) &lt;span&gt;and&lt;/span&gt; board[i] == board[j]: j += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 其他逻辑&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;# 更新左指针&lt;/span&gt;&lt;br/&gt;    i = j&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5412844036697247&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfmibwdYznHMvkiabPX3H3absAO5Mspl7z3GCZuljHWZo9uicNF0URZC83U8dtwzBR8bwXp76bZhcsXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1526&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体算法：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;用哈希表存储手上的球的种类和个数，这么做是为了后面&lt;strong&gt;「快速判断连续的球是否可以被消除」&lt;/strong&gt;。由于题目限制手上求不会超过 5，因此哈希表的最大容量就是 5，可以认为这是一个常数的空间。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;回溯。&lt;/p&gt;&lt;p&gt;2.1 确认可以消除的位置，算法参考上面的代码。&lt;/p&gt;&lt;p&gt;2.2 判断手上是否有足够相同颜色的球可以消除。&lt;/p&gt;&lt;p&gt;2.3 回溯的过程记录全局最小值。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码支持：Python3&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python3 Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findMinStep&lt;/span&gt;&lt;span&gt;(self, board: str, hand: str)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;backtrack&lt;/span&gt;&lt;span&gt;(board)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; board: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            i = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;            ans = &lt;span&gt;6&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;while&lt;/span&gt; i &amp;lt; len(board):&lt;br/&gt;                j = i + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;while&lt;/span&gt; j &amp;lt; len(board) &lt;span&gt;and&lt;/span&gt; board[i] == board[j]: j += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                balls = &lt;span&gt;3&lt;/span&gt; - (j - i)&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; counter[board[i]] &amp;gt;= balls:&lt;br/&gt;                    balls = max(&lt;span&gt;0&lt;/span&gt;, balls)&lt;br/&gt;                    counter[board[i]] -= balls&lt;br/&gt;                    ans = min(ans, balls + backtrack(board[:i] + board[j:]))&lt;br/&gt;                    counter[board[i]] += balls&lt;br/&gt;                i = j&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;        counter = collections.Counter(hand)&lt;br/&gt;        ans = backtrack(board)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ans &amp;gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;时间复杂度：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(2^(min(C, 5)))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -893.3 7060.7 1143.3&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(500, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1977.1, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2855.1, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3200.1, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3800.1, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4189.1, 0)&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4949.1, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(5393.7, 0)&quot;&gt;&lt;path data-c=&quot;35&quot; d=&quot;M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5893.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6282.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6671.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 C 为连续相同颜色球的次数，比如 WWRRRR， C 就是 2， WRBDD， C 就是 4。min(C, 5) 是因为题目限定了手上球的个数不大于 5。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空间复杂度：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(min(C, 5) * Board)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 9535.1 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2030, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2375, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2975, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3364, 0)&quot;&gt;&lt;path data-c=&quot;43&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4124, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(4568.7, 0)&quot;&gt;&lt;path data-c=&quot;35&quot; d=&quot;M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5068.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5679.9, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6402.1, 0)&quot;&gt;&lt;path data-c=&quot;42&quot; d=&quot;M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7161.1, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7646.1, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8175.1, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8626.1, 0)&quot;&gt;&lt;path data-c=&quot;64&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9146.1, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，其中 C 为连续相同颜色球的次数，Board 为 Board 的长度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关键点解析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;mp-qa class=&quot;js_uneditable custom_select_card qa_iframe&quot; data-pluginname=&quot;insertquestion&quot; data-id=&quot;1549597229076758529&quot; data-bizuin=&quot;MzI4MzUxNjI3OA==&quot; data-title=&quot;大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 36K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;46.permutations: &lt;span&gt;https://github.com/azl397985856/leetcode/blob/master/problems/46.permutations.md&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484695&amp;amp;idx=1&amp;amp;sn=d4781ed21edf9d8fd040bf313ba059ff&amp;amp;chksm=eb88c90edcff4018ee81f4de1c961dd99d9009b001955c258d119c1dc5dc2aeebf78abb79734&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;算法萌新如何学好动态规划（第一弹）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484650&amp;amp;idx=1&amp;amp;sn=4ca30b668b8ffa8aede203b760028cc3&amp;amp;chksm=eb88c8f3dcff41e5e8a7bb11809ba95cc2ba7bdba0d7d84b22080087f88006361318da69531a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;字节跳动的算法面试题是什么难度？&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484692&amp;amp;idx=1&amp;amp;sn=9d1d1169d682d842310155f16966a23e&amp;amp;chksm=eb88c90ddcff401b952892e136dd4a36bcfd0e961c1507d80085ee281d42865e137c65736b92&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;字节跳动的算法面试题是什么难度？（第二弹）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;4、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484805&amp;amp;idx=1&amp;amp;sn=76b934121cbb3630f9bad391fb9b1789&amp;amp;chksm=eb88c99cdcff408a262cd45c270e42a50628593d782a57a85f6a7247b6356fd4715f2b2fde54&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【西法带你学算法】一次搞定前缀和&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484738&amp;amp;idx=1&amp;amp;sn=7693c31667a3125b90f9e4bf6b4ccdef&amp;amp;chksm=eb88c95bdcff404d82289dcb8e076a30af7140b250e08c2f022c580e5f8a83e0e42bbf280495&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;5、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI4MzUxNjI3OA==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=833079c3e342f66327280510f6bb3691&amp;amp;chksm=eb88c8d3dcff41c5b01b6a70284235983b727141c7fb78117c6c42045bd98f9db9d02cfc4a8d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;用最优雅的方式打开终端&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTclibysFKoffSHbUSQUXUKVjhv3ZCYnE74nsVJFicxjV6F3qqT8IPg0YMjc0wHvlfIoCO7Z7jYTnL4g/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;如果觉得文章不错，帮忙点个在看呗&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cb8012b63e4b93215e8dc73285d2b586</guid>
<title>如何让你的 Express 飞起来</title>
<link>https://toutiao.io/k/auvbrrv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;近期掘金上有小伙伴问阿宝哥装饰器的应用场景，这让阿宝哥突然萌生了通过优秀的 TS 开源项目，来学习 TS 的想法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文阿宝哥将以 Github 上的 &lt;strong&gt;OvernightJS&lt;/strong&gt; 开源项目为例，来介绍一下如何使用 TypeScript 装饰器来装饰 Express，从而让你的 Express 好用得飞起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来本文的重心将围绕 &lt;strong&gt;装饰器&lt;/strong&gt; 的应用展开，不过在分析装饰器在 OvernightJS 的应用之前，阿宝哥先来简单介绍一下 OvernightJS。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一、OvernightJS 简介&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;TypeScript decorators for the ExpressJS Server.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OvernightJS 是一个简单的库，用于为要调用 Express 路由的方法添加 TypeScript 装饰器。此外，该项目还包含了用于管理 json-web-token 和打印日志的包。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4007884362680683&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNoGgibuyZqNeg8iaKvyyrfX3outBLPIovJa7pvmfKGjKkAyNDUbXGc2cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;761&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 OvernightJS 特性&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OvernightJS 并不是为了替代 Express，如果你之前已经掌握了 Express，那你就可以快速地学会它。OvernightJS 为开发者提供了以下特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用 &lt;code&gt;@Controller&lt;/code&gt; 装饰器定义基础路由；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供了把类方法转化为 Express 路由的装饰器（&lt;strong&gt;比如 @Get，@Put，@Post，@Delete&lt;/strong&gt;）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供了用于处理中间件的 &lt;code&gt;@Middleware&lt;/code&gt; 和 &lt;code&gt;@ClassMiddleware&lt;/code&gt; 装饰器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供了用于处理异常的 &lt;code&gt;@ErrorMiddleware&lt;/code&gt; 装饰器；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供了 &lt;code&gt;@Wrapper&lt;/code&gt; 和 &lt;code&gt;@ClassWrapper&lt;/code&gt; 装饰器用于包装函数；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过 &lt;code&gt;@ChildControllers&lt;/code&gt; 装饰器支持子控制器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出于篇幅考虑，阿宝哥只介绍了 OvernightJS 与装饰器相关的部分特性。了解完这些特性，我们来快速体验一下 OvernightJS。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 OvernightJS 入门&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.1 初始化项目&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先新建一个 &lt;code&gt;overnight-quickstart&lt;/code&gt; 项目，然后使用 &lt;code&gt;npm init -y&lt;/code&gt; 命令初始化项目，然后在命令行中输入以下命令来安装项目依赖包：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; npm i @overnightjs/core express -S&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Express 项目中要集成 TypeScript 很简单，只需安装 &lt;code&gt;typescript&lt;/code&gt; 这个包就可以了。但为了在开发阶段能够在命令行直接运行使用 TypeScript 开发的服务器，我们还需要安装 &lt;code&gt;ts-node&lt;/code&gt; 这个包。要安装这两个包，我们只需在命令行中输入以下命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; npm i typescript ts-node -D&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.2 为 Node.js 和 Express 安装声明文件&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;声明文件是预定义的模块，用于告诉 TypeScript 编译器的 JavaScript 值的形状。类型声明通常包含在扩展名为 &lt;code&gt;.d.ts&lt;/code&gt; 的文件中。这些声明文件可用于所有最初用 JavaScript 而非 TypeScript 编写的库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;幸运的是，我们不需要重头开始为 Node.js 和 Express 定义声明文件，因为在 Github 上有一个名为 DefinitelyTyped 项目已经为我们提供了现成的声明文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要安装 Node.js 和 Express 对应的声明文件，我们只需要在命令行执行以下命令就可以了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; npm i @types/node @types/express -D&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该命令成功执行之后，&lt;code&gt;package.json&lt;/code&gt; 中的 &lt;code&gt;devDependencies&lt;/code&gt; 属性就会新增 Node.js 和 Express 对应的依赖包版本信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;devDependencies&quot;&lt;/span&gt;: {&lt;br/&gt;     &lt;span&gt;&quot;@types/express&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.17.8&quot;&lt;/span&gt;,&lt;br/&gt;     &lt;span&gt;&quot;@types/node&quot;&lt;/span&gt;: &lt;span&gt;&quot;^14.11.2&quot;&lt;/span&gt;,&lt;br/&gt;     &lt;span&gt;&quot;ts-node&quot;&lt;/span&gt;: &lt;span&gt;&quot;^9.0.0&quot;&lt;/span&gt;,&lt;br/&gt;     &lt;span&gt;&quot;typescript&quot;&lt;/span&gt;: &lt;span&gt;&quot;^4.0.3&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.3 初始化 TypeScript 配置文件&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能够灵活地配置 TypeScript 项目，我们还需要为本项目生成 TypeScript 配置文件，在命令行输入 &lt;code&gt;tsc --init&lt;/code&gt; 之后，项目中就会自动创建一个 &lt;code&gt;tsconfig.json&lt;/code&gt; 的文件。对于本项目来说，我们将使用以下配置项：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;compilerOptions&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;target&quot;&lt;/span&gt;: &lt;span&gt;&quot;es6&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;module&quot;&lt;/span&gt;: &lt;span&gt;&quot;commonjs&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;rootDir&quot;&lt;/span&gt;: &lt;span&gt;&quot;./src&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;outDir&quot;&lt;/span&gt;: &lt;span&gt;&quot;./build&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;esModuleInterop&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;experimentalDecorators&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;strict&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.4 创建简单的 Web 服务器&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在创建简单的 Web 服务器之前，我们先来初始化项目的目录结构。首先在项目的根目录下创建一个 &lt;code&gt;src&lt;/code&gt; 目录及 &lt;code&gt;controllers&lt;/code&gt; 子目录：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;├── src&lt;br/&gt;│   ├── controllers&lt;br/&gt;│   │   └── UserController.ts&lt;br/&gt;│   └── index.ts&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着新建 &lt;code&gt;UserController.ts&lt;/code&gt; 和 &lt;code&gt;index.ts&lt;/code&gt; 这两个文件并分别输入以下内容：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;UserController.ts&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { Controller, Get } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;@overnightjs/core&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { Request, Response } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;express&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Controller&lt;/span&gt;(&lt;span&gt;&quot;api/users&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController {&lt;br/&gt;  &lt;span&gt;@Get&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; getAll(req: Request, res: Response) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; res.status(&lt;span&gt;200&lt;/span&gt;).json({&lt;br/&gt;      message: &lt;span&gt;&quot;成功获取所有用户&quot;&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { Server } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;@overnightjs/core&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { UserController } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./controllers/UserController&quot;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; PORT = &lt;span&gt;3000&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SampleServer &lt;span&gt;extends&lt;/span&gt; Server {&lt;br/&gt;  &lt;span&gt;constructor&lt;/span&gt;(&lt;span/&gt;) {&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;(process.env.NODE_ENV === &lt;span&gt;&quot;development&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.setupControllers();&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; setupControllers(): &lt;span&gt;void&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; userController = &lt;span&gt;new&lt;/span&gt; UserController();&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.addControllers([userController]);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; start(port: &lt;span&gt;number&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.app.listen(port, &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`⚡️[server]: Server is running at http://localhost:&lt;span&gt;${PORT}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sampleServer = &lt;span&gt;new&lt;/span&gt; SampleServer();&lt;br/&gt;sampleServer.start(PORT);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完成上述步骤之后，我们在项目的 &lt;code&gt;package.json&lt;/code&gt; 中添加一个 &lt;code&gt;start&lt;/code&gt; 命令来启动项目：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;scripts&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;start&quot;&lt;/span&gt;: &lt;span&gt;&quot;ts-node ./src/index.ts&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;添加完 &lt;code&gt;start&lt;/code&gt; 命令，我们就可以在命令行中通过 &lt;code&gt;npm start&lt;/code&gt; 来启动 Web 服务器了。当服务器成功启动之后，命令行会输出以下消息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;gt; ts-node ./src/index.ts&lt;br/&gt;&lt;br/&gt;⚡️[server]: Server is running at http://localhost:3000&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着我们打开浏览器访问 http://localhost:3000/api/users 这个地址，你就会看到 &lt;code&gt;{&quot;message&quot;:&quot;成功获取所有用户&quot;}&lt;/code&gt; 这个信息。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2.5 安装 nodemon&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了方便后续的开发，我们还需要安装一个第三方包 &lt;code&gt;nodemon&lt;/code&gt;。对于写过 Node.js 应用的小伙伴来说，对 &lt;code&gt;nodemon&lt;/code&gt; 这个包应该不会陌生。&lt;code&gt;nodemon&lt;/code&gt; 这个包会自动检测目录中文件的更改，当发现文件异动时，会自动重启 Node.js 应用程序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，我们在命令行执行以下命令来安装它：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; npm i nodemon -D&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装完成后，我们需要更新一下前面已经创建的 &lt;code&gt;start&lt;/code&gt; 命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;scripts&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;start&quot;&lt;/span&gt;: &lt;span&gt;&quot;nodemon ./src/index.ts&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好的，现在我们已经知道如何使用 OvernightJS 来开发一个简单的 Web 服务器。接下来，阿宝哥将带大家一起来分析 OvernightJS 是如何使用 TypeScript 装饰器实现上述的功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、OvernightJS 原理分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分析前面示例中 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@Get&lt;/code&gt; 装饰器原理前，我们先来看一下直接使用 Express 如何实现同样的功能：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; express, { Router, Request, Response } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;express&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; app = express();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; PORT = &lt;span&gt;3000&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;class&lt;/span&gt; UserController {&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; getAll(req: Request, res: Response) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; res.status(&lt;span&gt;200&lt;/span&gt;).json({&lt;br/&gt;      message: &lt;span&gt;&quot;成功获取所有用户&quot;&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; userRouter = Router();&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; userCtrl = &lt;span&gt;new&lt;/span&gt; UserController();&lt;br/&gt;userRouter.get(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, userCtrl.getAll);&lt;br/&gt;&lt;br/&gt;app.use(&lt;span&gt;&quot;/api/users&quot;&lt;/span&gt;, userRouter);&lt;br/&gt;&lt;br/&gt;app.listen(PORT, &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`⚡️[server]: Server is running at http://localhost:&lt;span&gt;${PORT}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以上代码中，我们先通过调用 &lt;code&gt;Router&lt;/code&gt; 方法创建了一个 &lt;code&gt;userRouter&lt;/code&gt; 对象，然后进行相关路由的配置，接着使用 &lt;code&gt;app.use&lt;/code&gt; 方法应用 &lt;code&gt;userRouter&lt;/code&gt; 路由。下面我们用一张图来直观感受一下 OvernightJS 与 Express 在使用上的差异：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3888888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNhuD9rZiadNY2W7BrCsEU2avtWdcU6mPG4eVKicz3trJnjEIZrh6daStA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上对比可知，利用 OvernightJS 提供的装饰器，可以让我们开发起来更加便捷。但大家要记住 OvernightJS 底层还是基于 Express，其内部最终还是通过 Express 提供的 API 来处理路由。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接下来为了能更好理解后续的内容，我们先来简单回顾一下 TypeScript 装饰器。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 TypeScript 装饰器简介&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;装饰器是一个表达式，该表达式执行后，会返回一个函数。在 TypeScript 中装饰器可以分为以下 4 类：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5101851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNXteISwAruz4XGZfm7LdOATaVQtUZc2DnicjfI004kmduqfVziavDfVUw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，若要启用实验性的装饰器特性，你必须在命令行或 &lt;code&gt;tsconfig.json&lt;/code&gt; 里启用 &lt;code&gt;experimentalDecorators&lt;/code&gt; 编译器选项：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;命令行&lt;/strong&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;tsc --target ES5 --experimentalDecorators&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;compilerOptions&quot;&lt;/span&gt;: {&lt;br/&gt;     &lt;span&gt;&quot;experimentalDecorators&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解完 TypeScript 装饰器的分类，我们来开始分析 OvernightJS 框架中提供的装饰器。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 @Controller 装饰器&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面创建的简单 Web 服务器中，我们通过以下方式来使用 &lt;code&gt;@Controller&lt;/code&gt; 装饰器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Controller&lt;/span&gt;(&lt;span&gt;&quot;api/users&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController {}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很明显该装饰器应用在 &lt;code&gt;UserController&lt;/code&gt; 类上，它属于类装饰器。OvernightJS 的项目结构很简单，我们可以很容易找到 &lt;code&gt;@Controller&lt;/code&gt; 装饰器的定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/decorators/class.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Controller&lt;/span&gt;(&lt;span&gt;path: &lt;span&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span&gt;ClassDecorator&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &amp;lt;TFunction &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;&amp;gt;(target: TFunction): &lt;span&gt;&lt;span&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    addBasePathToClassMetadata(target.prototype, &lt;span&gt;&quot;/&quot;&lt;/span&gt; + path);&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过观察以上代码可知，Controller 函数是一个装饰器工厂，即调用该工厂方法之后会返回一个 ClassDecorator 对象。在 ClassDecorator 内部，会继续调用 &lt;code&gt;addBasePathToClassMetadata&lt;/code&gt; 方法，把基础路径添加到类的元数据中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/decorators/class.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addBasePathToClassMetadata&lt;/span&gt;(&lt;span&gt;target: &lt;span&gt;Object&lt;/span&gt;, basePath: &lt;span&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; metadata: IClassMetadata | &lt;span&gt;undefined&lt;/span&gt; = Reflect.getOwnMetadata(classMetadataKey, target);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!metadata) {&lt;br/&gt;      metadata = {};&lt;br/&gt;  }&lt;br/&gt;  metadata.basePath = basePath;&lt;br/&gt;  Reflect.defineMetadata(classMetadataKey, metadata, target);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;addBasePathToClassMetadata&lt;/code&gt; 函数的实现很简单，主要是利用 Reflect API 实现元数据的存取操作。在以上代码中，会先获取 &lt;code&gt;target&lt;/code&gt; 对象上已保存的 &lt;code&gt;metadata&lt;/code&gt; 对象，如果不存在的话，会创建一个空的对象，然后把参数 &lt;code&gt;basePath&lt;/code&gt; 的值添加该对象的 &lt;code&gt;basePath&lt;/code&gt; 属性中，元数据设置完成后，在通过 &lt;code&gt;Reflect.defineMetadata&lt;/code&gt; 方法进行元数据的保存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们用一张图来说明一下 &lt;code&gt;@Controller&lt;/code&gt; 装饰器的处理流程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5898148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNvrsMPMY5qSFpSibXNDUoHusmg0mK2T5gbozFTeasv0viblowkhp8WL2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 OvernightJS 项目中，所使用的 Reflect API 是来自 reflect-metadata 这个第三方库。该库提供了很多 API 用于操作元数据，这里我们只简单介绍几个常用的 API：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// define metadata on an object or property&lt;/span&gt;&lt;br/&gt;Reflect.defineMetadata(metadataKey, metadataValue, target);&lt;br/&gt;Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// check for presence of a metadata key on the prototype chain of an object or property&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.hasMetadata(metadataKey, target);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.hasMetadata(metadataKey, target, propertyKey);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// get metadata value of an own metadata key of an object or property&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.getOwnMetadata(metadataKey, target);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// get metadata value of a metadata key on the prototype chain of an object or property&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.getMetadata(metadataKey, target);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.getMetadata(metadataKey, target, propertyKey);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// delete metadata from an object or property&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.deleteMetadata(metadataKey, target);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; result = Reflect.deleteMetadata(metadataKey, target, propertyKey);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相信看到这里，可能有一些小伙伴会有疑问，通过 Reflect API 保存的元数据什么时候使用呢？这里我们先记住这个问题，后面我们再来分析它，接下来我们来开始分析 &lt;code&gt;@Get&lt;/code&gt; 装饰器。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 @Get 装饰器&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面创建的简单 Web 服务器中，我们通过以下方式来使用 &lt;code&gt;@Get&lt;/code&gt; 装饰器，该装饰器用于配置 Get 请求：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserController {&lt;br/&gt;  &lt;span&gt;@Get&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; getAll(req: Request, res: Response) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; res.status(&lt;span&gt;200&lt;/span&gt;).json({&lt;br/&gt;      message: &lt;span&gt;&quot;成功获取所有用户&quot;&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;@Get&lt;/code&gt; 装饰器应用在 &lt;code&gt;UserController&lt;/code&gt; 类的 &lt;code&gt;getAll&lt;/code&gt; 方法上，它属于方法装饰器。它的定义如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/decorators/method.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Get&lt;/span&gt;(&lt;span&gt;path?: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;RegExp&lt;/span&gt;&lt;/span&gt;): &lt;span&gt;MethodDecorator&lt;/span&gt; &amp;amp; &lt;span&gt;PropertyDecorator&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; helperForRoutes(HttpVerb.GET, path);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与 &lt;code&gt;Controller&lt;/code&gt; 函数一样，&lt;code&gt;Get&lt;/code&gt; 函数也是一个装饰器工厂，调用该函数之后会返回 &lt;code&gt;MethodDecorator &amp;amp; PropertyDecorator&lt;/code&gt; 的交叉类型。除了 Get 请求方法之外，常见的 HTTP 请求方法还有 Post、Delete、Put、Patch 和 Head 等。为了统一处理这些请求方法，OvernightJS 内部封装了一个 &lt;code&gt;helperForRoutes&lt;/code&gt; 函数，该函数的具体实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/decorators/method.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;helperForRoutes&lt;/span&gt;(&lt;span&gt;httpVerb: HttpDecorator, path?: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;RegExp&lt;/span&gt;&lt;/span&gt;): &lt;span&gt;MethodDecorator&lt;/span&gt; &amp;amp; &lt;span&gt;PropertyDecorator&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (target: &lt;span&gt;Object&lt;/span&gt;, propertyKey: &lt;span&gt;string&lt;/span&gt; | symbol): &lt;span&gt;&lt;span&gt;void&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;let&lt;/span&gt; newPath: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;RegExp&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (path === &lt;span&gt;undefined&lt;/span&gt;) {&lt;br/&gt;          newPath = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (path &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;RegExp&lt;/span&gt;) {&lt;br/&gt;          newPath = addForwardSlashToFrontOfRegex(path);&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; { &lt;span&gt;// assert (path instanceof string)&lt;/span&gt;&lt;br/&gt;          newPath = &lt;span&gt;&#x27;/&#x27;&lt;/span&gt; + path;&lt;br/&gt;      }&lt;br/&gt;      addHttpVerbToMethodMetadata(target, propertyKey, httpVerb, newPath);&lt;br/&gt;    };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;观察以上代码可知，在 &lt;code&gt;helperForRoutes&lt;/code&gt; 方法内部，会继续调用 &lt;code&gt;addHttpVerbToMethodMetadata&lt;/code&gt; 方法把请求方法和请求路径这些元数据保存起来。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/decorators/method.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;addHttpVerbToMethodMetadata&lt;/span&gt;(&lt;span&gt;target: &lt;span&gt;Object&lt;/span&gt;, metadataKey: &lt;span&gt;any&lt;/span&gt;, &lt;br/&gt;  httpDecorator: HttpDecorator, path: &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;RegExp&lt;/span&gt;&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; metadata: IMethodMetadata | &lt;span&gt;undefined&lt;/span&gt; = Reflect.getOwnMetadata(metadataKey, target);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!metadata) {&lt;br/&gt;        metadata = {};&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (!metadata.httpRoutes) {&lt;br/&gt;        metadata.httpRoutes = [];&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; newArr: IHttpRoute[] = [{&lt;br/&gt;      httpDecorator,&lt;br/&gt;      path,&lt;br/&gt;    }];&lt;br/&gt;    newArr.push(...metadata.httpRoutes);&lt;br/&gt;    metadata.httpRoutes = newArr;&lt;br/&gt;    Reflect.defineMetadata(metadataKey, metadata, target);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 &lt;code&gt;addHttpVerbToMethodMetadata&lt;/code&gt; 方法中，会先获取已保存的元数据，如果 &lt;code&gt;metadata&lt;/code&gt; 对象不存在则会创建一个空的对象。然后会继续判断该对象上是否含有 &lt;code&gt;httpRoutes&lt;/code&gt; 属性，没有的话会使用 &lt;code&gt;[]&lt;/code&gt; 对象来作为该属性的属性值。而请求方法和请求路径这些元数据会以对象的形式保存到数组中，最终在通过 &lt;code&gt;Reflect.defineMetadata&lt;/code&gt; 方法进行元数据的保存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，我们用一张图来说明一下 &lt;code&gt;@Get&lt;/code&gt; 装饰器的处理流程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6277777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNSibE6l3JGjmg6QaNzvdWbWFGtLtjZhFa5NyUKXaVarjD7bVUCCSCVJg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析完 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@Get&lt;/code&gt; 装饰器，我们已经知道元数据是如何进行保存的。下面我们来回答 “通过 Reflect API 保存的元数据什么时候使用呢？” 这个问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 元数据的使用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要搞清楚通过 Reflect API 保存的元数据什么时候使用，我们就需要来回顾一下前面开发的 &lt;code&gt;SampleServer&lt;/code&gt; 服务器：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SampleServer &lt;span&gt;extends&lt;/span&gt; Server {&lt;br/&gt;  &lt;span&gt;constructor&lt;/span&gt;(&lt;span/&gt;) {&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;(process.env.NODE_ENV === &lt;span&gt;&quot;development&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.setupControllers();&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; setupControllers(): &lt;span&gt;void&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; userController = &lt;span&gt;new&lt;/span&gt; UserController();&lt;br/&gt;    &lt;span&gt;super&lt;/span&gt;.addControllers([userController]);&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; start(port: &lt;span&gt;number&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.app.listen(port, &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`⚡️[server]: Server is running at http://localhost:&lt;span&gt;${PORT}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sampleServer = &lt;span&gt;new&lt;/span&gt; SampleServer();&lt;br/&gt;sampleServer.start(PORT);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以上代码中 &lt;code&gt;SampleServer&lt;/code&gt; 类继承于 OvernightJS 内置的 &lt;code&gt;Server&lt;/code&gt; 类，对应的 UML 类图如下所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.42962962962962964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNDrfxXYUZzIQkDgcJIQic9vBy86rNXtX5hXFzzd7FC98SG95IsGlib0Rg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，在 &lt;code&gt;SampleServer&lt;/code&gt; 类中我们定义了 &lt;code&gt;setupControllers&lt;/code&gt; 和 &lt;code&gt;start&lt;/code&gt; 方法，分别用于初始化控制器和启动服务器。我们在自定义的控制器上使用了 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@Get&lt;/code&gt; 装饰器，因此接下来我们的重点就是分析 &lt;code&gt;setupControllers&lt;/code&gt; 方法。该方法的内部实现很简单，就是手动创建控制器实例，然后调用父类的 &lt;code&gt;addControllers&lt;/code&gt; 方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们来分析 &lt;code&gt;addControllers&lt;/code&gt; 方法，该方法位于 &lt;code&gt;src/core/lib/Server.ts&lt;/code&gt; 文件中，具体实现如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/Server.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Server {&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; addControllers(&lt;br/&gt;    controllers: Controller | Controller[],&lt;br/&gt;    routerLib?: RouterLib,&lt;br/&gt;    globalMiddleware?: RequestHandler,&lt;br/&gt;  ): &lt;span&gt;void&lt;/span&gt; {&lt;br/&gt;       controllers = (controllers &lt;span&gt;instanceof&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;) ? controllers : [controllers];&lt;br/&gt;       &lt;span&gt;// ① 支持动态设置路由库&lt;/span&gt;&lt;br/&gt;       &lt;span&gt;const&lt;/span&gt; routerLibrary: RouterLib = routerLib || Router; &lt;br/&gt;       controllers.forEach(&lt;span&gt;(&lt;span&gt;controller: Controller&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (controller) {&lt;br/&gt;             &lt;span&gt;// ② 为每个控制器创建对应的路由对象&lt;/span&gt;&lt;br/&gt;             &lt;span&gt;const&lt;/span&gt; routerAndPath: IRouterAndPath | &lt;span&gt;null&lt;/span&gt; = &lt;span&gt;this&lt;/span&gt;.getRouter(routerLibrary, controller);&lt;br/&gt;             &lt;span&gt;// ③ 注册路由&lt;/span&gt;&lt;br/&gt;             &lt;span&gt;if&lt;/span&gt; (routerAndPath) {&lt;br/&gt;                  &lt;span&gt;if&lt;/span&gt; (globalMiddleware) {&lt;br/&gt;                      &lt;span&gt;this&lt;/span&gt;.app.use(routerAndPath.basePath, globalMiddleware, routerAndPath.router);&lt;br/&gt;                  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                      &lt;span&gt;this&lt;/span&gt;.app.use(routerAndPath.basePath, routerAndPath.router);&lt;br/&gt;                  }&lt;br/&gt;              }&lt;br/&gt;            }&lt;br/&gt;        });&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;addControllers&lt;/code&gt; 方法的整个执行过程还是比较清晰，最核心的部分就是 &lt;code&gt;getRouter&lt;/code&gt; 方法。在该方法内部就会处理通过装饰器保存的元数据。其实 &lt;code&gt;getRouter&lt;/code&gt; 方法内部还会处理其他装饰器保存的元数据，简单起见我们只考虑与 &lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@Get&lt;/code&gt; 装饰器相关的处理逻辑。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// src/core/lib/Server.ts&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Server {&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; getRouter(routerLibrary: RouterLib, controller: Controller): IRouterAndPath | &lt;span&gt;null&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; prototype: &lt;span&gt;any&lt;/span&gt; = &lt;span&gt;Object&lt;/span&gt;.getPrototypeOf(controller);&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; classMetadata: IClassMetadata | &lt;span&gt;undefined&lt;/span&gt; = Reflect.getOwnMetadata(classMetadataKey, prototype);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 省略部分代码&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; { basePath, options, ...}: IClassMetadata = classMetadata;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// ① 基于配置项创建Router对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; router: IRouter = routerLibrary(options);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// ② 为路由对象添加路径和请求处理器&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;let&lt;/span&gt; members: &lt;span&gt;any&lt;/span&gt; = &lt;span&gt;Object&lt;/span&gt;.getOwnPropertyNames(controller);&lt;br/&gt;        members = members.concat(&lt;span&gt;Object&lt;/span&gt;.getOwnPropertyNames(prototype));&lt;br/&gt;        members.forEach(&lt;span&gt;(&lt;span&gt;member: &lt;span&gt;any&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;// ③ 获取方法中保存的元数据&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;const&lt;/span&gt; methodMetadata: IMethodMetadata | &lt;span&gt;undefined&lt;/span&gt; = Reflect.getOwnMetadata(member, prototype);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (methodMetadata) {&lt;br/&gt;                &lt;span&gt;const&lt;/span&gt; { httpRoutes, ...}: IMethodMetadata = methodMetadata;&lt;br/&gt;                &lt;span&gt;let&lt;/span&gt; callBack: &lt;span&gt;(&lt;span&gt;...args: &lt;span&gt;any&lt;/span&gt;[]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; = (...args: &lt;span&gt;any&lt;/span&gt;[]): &lt;span&gt;&lt;span&gt;any&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; controller[member](...args);&lt;br/&gt;                };&lt;br/&gt;                &lt;span&gt;// 省略部分代码&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (httpRoutes) { &lt;span&gt;// httpRoutes数组中包含了请求的方法和路径&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;// ④ 处理控制器类中通过@Get、@Post、@Put或@Delete装饰器保存的元数据&lt;/span&gt;&lt;br/&gt;                    httpRoutes.forEach(&lt;span&gt;(&lt;span&gt;route: IHttpRoute&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;                        &lt;span&gt;const&lt;/span&gt; { httpDecorator, path }: IHttpRoute = route;&lt;br/&gt;                        &lt;span&gt;// ⑤ 为router对象设置对应的路由信息&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;if&lt;/span&gt; (middlewares) {&lt;br/&gt;                            router[httpDecorator](path, middlewares, callBack);&lt;br/&gt;                        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                            router[httpDecorator](path, callBack);&lt;br/&gt;                        }&lt;br/&gt;                    });&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        });&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; { basePath, router, };&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们已经知道 OvernightJS 内部如何利用装饰器来为控制器类配置路由信息，这里阿宝哥用一张图来总结 OvernightJS 的工作流程：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3453703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/jQmwTIFl1V11SaMRmbN6ny2P3ia02uYlNhnUUFypT1tKEfVibbeiaD1LupeNmY5iaHYOHcW7gw5jNCFcib3cPs9qVtA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 OvernightJS 内部除了 &lt;code&gt;@Controller&lt;/code&gt;、&lt;code&gt;@Get&lt;/code&gt;、&lt;code&gt;@Post&lt;/code&gt;、&lt;code&gt;@Delete&lt;/code&gt; 等装饰器之外，还提供了用于注册中间件的 &lt;code&gt;@Middleware&lt;/code&gt; 装饰器及用于设置异常处理中间件的 &lt;code&gt;@ErrorMiddleware&lt;/code&gt; 装饰器。感兴趣的小伙伴可以参考一下阿宝哥的学习思路，自行阅读 OvernightJS 项目的源码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望通过这篇文章，可以让小伙伴们对装饰器的应用场景有一些更深刻的理解。如果你还意犹未尽的话，可以阅读阿宝哥之前写的 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI2MjcxNTQ0Nw==&amp;amp;mid=2247485950&amp;amp;idx=1&amp;amp;sn=9bfed7fee2f2a02b5e9994480a66e1e9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;了不起的 IoC 与 DI&lt;/a&gt; 这篇文章，该文章介绍了如何利用 TypeScript 装饰器和 reflect-metadata  这个库提供的 Reflect API 实现一个 IoC 容器。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、参考资源&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Github - overnight&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;expressjs.com&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>930a803a1efcdc6f99a139812d94942b</guid>
<title>[译] 在 iOS 和 Android 上运行 Go 代码</title>
<link>https://toutiao.io/k/ii0jfuq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本教程中，我们将构建一个简单的 Go 包，您可以从 iOS 应用程序（Swift）和 Android 应用程序（Kotlin）运行该软件包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本教程不会使用&lt;span&gt;go mobile&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt; 框架。相反，它使用 Cgo 构建可导入到您的移动项目中的原始静态（iOS）和共享（Android） C 库（Go Mobile 框架在后台进行此操作）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;构建&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本教程中，我们将创建具有以下结构的简单 monorepo：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;.&lt;br/&gt;├── android/&lt;br/&gt;├── go/&lt;br/&gt;│   ├── cmd/&lt;br/&gt;│   │   └── libfoo/&lt;br/&gt;│   │       └── main.go&lt;br/&gt;│   ├── foo/&lt;br/&gt;│   │   └── foo.go&lt;br/&gt;│   ├── go.mod&lt;br/&gt;│   └── go.sum&lt;br/&gt;└── ios/&lt;br/&gt;$ mkdir -p android ios go/cmd/libfoo go/foo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将从 Go 代码开始，稍后再返回创建 iOS 和 Android 项目。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ &lt;span&gt;cd&lt;/span&gt; go&lt;br/&gt;$ go mod init rogchap.com/libfoo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Foo 包&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// go/foo/foo.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; foo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Reverse reverses the given string by each utf8 character&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Reverse&lt;/span&gt;&lt;span&gt;(in &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    n := &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;rune&lt;/span&gt; := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;rune&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(in))&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; _, r := &lt;span&gt;range&lt;/span&gt; in {&lt;br/&gt;        &lt;span&gt;rune&lt;/span&gt;[n] = r&lt;br/&gt;        n++&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;rune&lt;/span&gt; = &lt;span&gt;rune&lt;/span&gt;[&lt;span&gt;0&lt;/span&gt;:n]&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; n/&lt;span&gt;2&lt;/span&gt;; i++ {&lt;br/&gt;        &lt;span&gt;rune&lt;/span&gt;[i], &lt;span&gt;rune&lt;/span&gt;[n&lt;span&gt;-1&lt;/span&gt;-i] = &lt;span&gt;rune&lt;/span&gt;[n&lt;span&gt;-1&lt;/span&gt;-i], &lt;span&gt;rune&lt;/span&gt;[i]&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;(&lt;span&gt;rune&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的&lt;code&gt;foo&lt;/code&gt;程序包有一个函数&lt;code&gt;Reverse&lt;/code&gt;，该函数具有单个字符串参数&lt;code&gt;in&lt;/code&gt;和单个字符串输出。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;导出为 C&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了使我们的 C 库调用我们的&lt;code&gt;foo&lt;/code&gt;包，我们需要导出所有要公开给 C 的函数，并带有特殊&lt;code&gt;export&lt;/code&gt;注释。该包装器必须位于&lt;code&gt;main&lt;/code&gt;包装中：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// go/cmd/libfoo/main.go&lt;/span&gt;&lt;br/&gt;pacakge main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// other imports should be seperate from the special Cgo import&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&quot;rogchap.com/libfoo/foo&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//export reverse&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;(in *C.char)&lt;/span&gt; *&lt;span&gt;C&lt;/span&gt;.&lt;span&gt;char&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; C.CString(foo.Reverse(C.GoString(in)))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们正在使用特殊的 &lt;code&gt;C.GoString()&lt;/code&gt;和&lt;code&gt;C.CString()&lt;/code&gt;函数在 Go 字符串和 C 字符串之间进行转换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;*注意：*我们要导出的函数不必是导出的 Go 函数（即以大写字母开头）。还要注意是空&lt;code&gt;main&lt;/code&gt;函数；这对于 Go 代码进行编译是必需的，否则会出现 &lt;code&gt;function main is undeclared in the main package&lt;/code&gt;错误。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们通过使用 &lt;code&gt;-buildmode&lt;/code&gt; 标志创建一个静态 C 库来测试我们的构建：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;go build -buildmode=c-archive -o foo.a ./cmd/libfoo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这应该已经输出了 C 库：&lt;code&gt;foo.a&lt;/code&gt;和头文件：&lt;code&gt;foo.h&lt;/code&gt;。您应该在头文件的底部看到导出的函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* &lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;(&lt;span&gt;char&lt;/span&gt;* in)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为 iOS 构建&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的目标是创建一个可以在 iOS 设备和 iOS 模拟器上使用的 &lt;span&gt;Fat 二进制文件&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 标准库包含用于构建 iOS 的脚本：&lt;span&gt;`$GOROOT/misc/ios/clangwrap.sh`&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;，但是该脚本仅针对生成&lt;code&gt;arm64&lt;/code&gt;，而&lt;code&gt;x86_64&lt;/code&gt;iOS Simulator 也需要该脚本 。因此，我们将创建自己的&lt;code&gt;clangwrap.sh&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#!/bin/sh&lt;br/&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# go/clangwrap.sh&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;SDK_PATH=`xcrun --sdk &lt;span&gt;$SDK&lt;/span&gt; --show-sdk-path`&lt;br/&gt;CLANG=`xcrun --sdk &lt;span&gt;$SDK&lt;/span&gt; --find clang`&lt;br/&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; [ &lt;span&gt;&quot;&lt;span&gt;$GOARCH&lt;/span&gt;&quot;&lt;/span&gt; == &lt;span&gt;&quot;amd64&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    CARCH=&lt;span&gt;&quot;x86_64&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;elif&lt;/span&gt; [ &lt;span&gt;&quot;&lt;span&gt;$GOARCH&lt;/span&gt;&quot;&lt;/span&gt; == &lt;span&gt;&quot;arm64&quot;&lt;/span&gt; ]; &lt;span&gt;then&lt;/span&gt;&lt;br/&gt;    CARCH=&lt;span&gt;&quot;arm64&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;fi&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;exec&lt;/span&gt; &lt;span&gt;$CLANG&lt;/span&gt; -arch &lt;span&gt;$CARCH&lt;/span&gt; -isysroot &lt;span&gt;$SDK_PATH&lt;/span&gt; -mios-version-min=10.0 &lt;span&gt;&quot;&lt;span&gt;$@&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要忘记让它可执行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;chmod +x clangwrap.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们可以为每种体系结构构建库，并使用该&lt;code&gt;lipo&lt;/code&gt;工具（通过 Makefile）合并为 Fat 二进制文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# go/Makefile&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ios-arm64:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=darwin \&lt;br/&gt; GOARCH=arm64 \&lt;br/&gt; SDK=iphoneos \&lt;br/&gt; CC=&lt;span&gt;$(PWD)&lt;/span&gt;/clangwrap.sh \&lt;br/&gt; CGO_CFLAGS=&lt;span&gt;&quot;-fembed-bitcode&quot;&lt;/span&gt; \&lt;br/&gt; go build -buildmode=c-archive -tags ios -o &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/arm64.a ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ios-x86_64:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=darwin \&lt;br/&gt; GOARCH=amd64 \&lt;br/&gt; SDK=iphonesimulator \&lt;br/&gt; CC=&lt;span&gt;$(PWD)&lt;/span&gt;/clangwrap.sh \&lt;br/&gt; go build -buildmode=c-archive -tags ios -o &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/x86_64.a ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;ios: ios-arm64 ios-x86_64&lt;/span&gt;&lt;br/&gt; lipo &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/x86_64.a &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/arm64.a -create -output &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/foo.a&lt;br/&gt; cp &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/arm64.h &lt;span&gt;$(IOS_OUT)&lt;/span&gt;/foo.h&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;创建我们的 iOS 应用程序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 XCode，我们可以创建一个简单的单页应用程序。我将使用 Swift UI，但这与 UIKit 一样容易：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ios/foobar/ContentView.swift&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;ContentView&lt;/span&gt;: &lt;span&gt;View&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    @&lt;span&gt;State&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; txt: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; body: some &lt;span&gt;View&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;VStack&lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;TextField&lt;/span&gt;(&lt;span&gt;&quot;&quot;&lt;/span&gt;, text: $txt)&lt;br/&gt;            .textFieldStyle(&lt;span&gt;RoundedBorderTextFieldStyle&lt;/span&gt;())&lt;br/&gt;            &lt;span&gt;Button&lt;/span&gt;(&lt;span&gt;&quot;Reverse&quot;&lt;/span&gt;){&lt;br/&gt;                &lt;span&gt;// Reverse text here&lt;/span&gt;&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;Spacer&lt;/span&gt;()&lt;br/&gt;        }&lt;br/&gt;        .padding(.all, &lt;span&gt;15&lt;/span&gt;)&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Xcode 中，将新生成的&lt;code&gt;foo.a&lt;/code&gt; 和 &lt;code&gt;foo.h&lt;/code&gt; 拖进我们的项目。为了使我们的 Swift 代码与我们的库互操作，我们需要创建一个桥接头文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ios/foobar/foobar-Bridging-Header.h&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#import &lt;span&gt;&quot;foo.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Xcode &lt;code&gt;Build Settings&lt;/code&gt; 中，&lt;code&gt;Swift Compiler - General&lt;/code&gt; 下，设置 &lt;code&gt;Objective-C Bridging Header&lt;/code&gt; 为我们刚刚创建的文件：&lt;code&gt;foobar/foobar-Bridging-Header.h&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还需要设置 &lt;code&gt;Library Search Paths&lt;/code&gt; 为包括我们生成的头文件 &lt;code&gt;foo.h&lt;/code&gt; 的目录。（当您将文件拖放到项目中时，Xcode 可能已经为您完成了此操作）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们可以从 Swift 调用函数，然后构建并运行：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ios/foobar/ContentView.swift&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;Button&lt;/span&gt;(&lt;span&gt;&quot;Reverse&quot;&lt;/span&gt;){&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; str = &lt;span&gt;reverse&lt;/span&gt;(&lt;span&gt;UnsafeMutablePointer&lt;/span&gt;&amp;lt;&lt;span&gt;Int8&lt;/span&gt;&amp;gt;(&lt;span&gt;mutating&lt;/span&gt;: (&lt;span&gt;self&lt;/span&gt;.txt &lt;span&gt;as&lt;/span&gt; &lt;span&gt;NSString&lt;/span&gt;).utf8String))&lt;br/&gt;    &lt;span&gt;self&lt;/span&gt;.txt = &lt;span&gt;String&lt;/span&gt;.&lt;span&gt;init&lt;/span&gt;(cString: str!, encoding: .utf8)!&lt;br/&gt;    &lt;span&gt;// don&#x27;t forget to release the memory to the C String&lt;/span&gt;&lt;br/&gt;    str?.deallocate()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.6333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/UWba2ryLMqldwziarLiaXGicpicJqOS0d9jL6vY5QNYJ7vMyrT2gwn8MibRfg2LvqaBia3ZzoQohmLnrvep4PH5u5jHg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;libfoo ios 应用程序&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;创建 Android 应用程序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 Android Studio，我们将创建一个新的 Android 项目。从 Project Templates 中选择 &lt;code&gt;Native C++&lt;/code&gt;，这将创建一个带有 Empty Activity 的项目，该项目被配置为使用 Java Native Interface（JNI）。我们仍将选择 &lt;code&gt;Kotlin&lt;/code&gt; 作为该项目的语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个简单的 Activity 后，加上 &lt;code&gt;EditText&lt;/code&gt; 和，&lt;code&gt;Button&lt;/code&gt; 两个控件，为应用创建基本功能：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// android/app/src/main/java/com/rogchap/foobar/MainActivity.kt&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MainActivity&lt;/span&gt; : &lt;span&gt;AppCompatActivity&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;override&lt;/span&gt; &lt;span&gt;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;onCreate&lt;/span&gt;&lt;span&gt;(savedInstanceState: &lt;span&gt;Bundle&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;.onCreate(savedInstanceState)&lt;br/&gt;        setContentView(R.layout.activity_main)&lt;br/&gt;&lt;br/&gt;        btn.setOnClickListener {&lt;br/&gt;            txt.setText(reverse(txt.text.toString()))&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * A native method that is implemented by the &#x27;native-lib&#x27; native library,&lt;br/&gt;     * which is packaged with this application.&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;external&lt;/span&gt; &lt;span&gt;&lt;span&gt;fun&lt;/span&gt; &lt;span&gt;reverse&lt;/span&gt;&lt;span&gt;(str: &lt;span&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: String&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;companion&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// Used to load the &#x27;native-lib&#x27; library on application startup.&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;init&lt;/span&gt; {&lt;br/&gt;            System.loadLibrary(&lt;span&gt;&quot;native-lib&quot;&lt;/span&gt;)&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们创建了（并调用）一个外部函数 &lt;code&gt;reverse&lt;/code&gt;，我们需要在 JNI （C++）实现：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// android/app/src/main/cpp/native-lib.cpp&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;jstring&lt;br/&gt;    &lt;span&gt;Java_com_rogchap_foobar_MainActivity_reverse&lt;/span&gt;&lt;span&gt;(JNIEnv* env, jobject, jstring str)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// Reverse text here&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; str;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;JNI 代码必须遵循约定才能在本机 C++ 和 Kotlin（JVM）之间互操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为 Android 构建&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在许多版本的 Android 和 NDK 中，JNI 与外部库的工作方式已发生变化。当前（也是最简单的方法）是将输出的库放置到一个特殊的 &lt;code&gt;jniLibs&lt;/code&gt; 文件夹中，该文件夹将复制到我们的最终 APK 文件中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与创建 Fat 二进制文件（就像我们在 iOS 中所做的那样）不同，我将每个体系结构放置在正确的文件夹中。同样，对于 JNI，约定很重要。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// go/Makefile&lt;br/&gt;&lt;br/&gt;ANDROID_OUT=../android/app/src/main/jniLibs&lt;br/&gt;ANDROID_SDK=&lt;span&gt;$(HOME)&lt;/span&gt;/Library/Android/sdk&lt;br/&gt;NDK_BIN=&lt;span&gt;$(ANDROID_SDK)&lt;/span&gt;/ndk/21.0.6113669/toolchains/llvm/prebuilt/darwin-x86_64/bin&lt;br/&gt;&lt;br/&gt;&lt;span&gt;android-armv7a:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=android \&lt;br/&gt; GOARCH=arm \&lt;br/&gt; GOARM=7 \&lt;br/&gt; CC=&lt;span&gt;$(NDK_BIN)&lt;/span&gt;/armv7a-linux-androideabi21-clang \&lt;br/&gt; go build -buildmode=c-shared -o &lt;span&gt;$(ANDROID_OUT)&lt;/span&gt;/armeabi-v7a/libfoo.so ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;android-arm64:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=android \&lt;br/&gt; GOARCH=arm64 \&lt;br/&gt; CC=&lt;span&gt;$(NDK_BIN)&lt;/span&gt;/aarch64-linux-android21-clang \&lt;br/&gt; go build -buildmode=c-shared -o &lt;span&gt;$(ANDROID_OUT)&lt;/span&gt;/arm64-v8a/libfoo.so ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;android-x86:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=android \&lt;br/&gt; GOARCH=386 \&lt;br/&gt; CC=&lt;span&gt;$(NDK_BIN)&lt;/span&gt;/i686-linux-android21-clang \&lt;br/&gt; go build -buildmode=c-shared -o &lt;span&gt;$(ANDROID_OUT)&lt;/span&gt;/x86/libfoo.so ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;android-x86_64:&lt;/span&gt;&lt;br/&gt; CGO_ENABLED=1 \&lt;br/&gt; GOOS=android \&lt;br/&gt; GOARCH=amd64 \&lt;br/&gt; CC=&lt;span&gt;$(NDK_BIN)&lt;/span&gt;/x86_64-linux-android21-clang \&lt;br/&gt; go build -buildmode=c-shared -o &lt;span&gt;$(ANDROID_OUT)&lt;/span&gt;/x86_64/libfoo.so ./cmd/libfoo&lt;br/&gt;&lt;br/&gt;&lt;span&gt;android: android-armv7a android-arm64 android-x86 android-x86_64&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;确保为您的 Android SDK 和已下载的 NDK 版本设置正确的位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;make android&lt;/code&gt; 将我们需要的所有共享库构建到正确的文件夹中。现在，我们需要将库添加到 CMake：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// android/app/src/main/cpp/CMakeLists.txt&lt;br/&gt;&lt;br/&gt;// ...&lt;br/&gt;&lt;br/&gt;add_library(lib_foo SHARED IMPORTED)&lt;br/&gt;set_property(TARGET lib_foo PROPERTY IMPORTED_NO_SONAME 1)&lt;br/&gt;set_target_properties(lib_foo PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/../jniLibs/${CMAKE_ANDROID_ARCH_ABI}/libfoo.so)&lt;br/&gt;include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../jniLibs/${CMAKE_ANDROID_ARCH_ABI}/)&lt;br/&gt;&lt;br/&gt;// ...&lt;br/&gt;&lt;br/&gt;target_link_libraries(native-lib lib_foo ${log-lib})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我花了一段时间才弄清楚这些设置，再次命名很重要，因此使用库命名 &lt;code&gt;lib_xxxx&lt;/code&gt; 并设置属性很重要，同时设置 &lt;code&gt;IMPORTED_NO_SONAME 1&lt;/code&gt;，否则您的 apk 会在错误的位置查找你的库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们可以将 JN I 代码连接到 Go 库中，然后运行我们的应用程序：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// android/app/src/main/cpp/native-lib.cpp&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&quot;libfoo.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;extern&lt;/span&gt; &lt;span&gt;&quot;C&quot;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;jstring&lt;br/&gt;    &lt;span&gt;Java_com_rogchap_foobar_MainActivity_reverse&lt;/span&gt;&lt;span&gt;(JNIEnv* env, jobject, jstring str)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;* cstr = env-&amp;gt;GetStringUTFChars(str, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;char&lt;/span&gt;* &lt;span&gt;cout&lt;/span&gt; = reverse(&lt;span&gt;const_cast&lt;/span&gt;&amp;lt;&lt;span&gt;char&lt;/span&gt;*&amp;gt;(cstr));&lt;br/&gt;        jstring out = env-&amp;gt;NewStringUTF(&lt;span&gt;cout&lt;/span&gt;);&lt;br/&gt;        env-&amp;gt;ReleaseStringUTFChars(str, cstr);&lt;br/&gt;        &lt;span&gt;free&lt;/span&gt;(&lt;span&gt;cout&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; out;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.6333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/UWba2ryLMqldwziarLiaXGicpicJqOS0d9jLrQhsnGPOfdLBfFy3PCgSETZkK7ADSnhvGRDzKXTSu9MMMiaeh26mnFA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;libfoo android应用&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结论&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 的优势之一就是它是跨平台的，这不仅意味着 Window，Mac 和 Linux，Go 还可以针对许多其他体系结构，包括 iOS 和 Android。现在，您可以在工具栏中找到另一个选项，以创建在服务器、移动应用程序甚至 Web（通过 Web 程序集）上运行的共享库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本教程的所有代码均可在 GitHub 上获得：https://github.com/rogchap/libfoo&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;期待听到您使用 Go 构建的新杀手级应用程序。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原文链接：https://rogchap.com/2020/09/14/running-go-code-on-ios-and-android/&lt;/p&gt;&lt;p&gt;作者：Roger Chapman&lt;/p&gt;&lt;p&gt;译者：polarisxu&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;go mobile: &lt;em&gt;https://github.com/golang/mobile&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Fat 二进制文件: &lt;em&gt;https://en.wikipedia.org/wiki/Fat_binary&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;&lt;code&gt;$GOROOT/misc/ios/clangwrap.sh&lt;/code&gt;: &lt;em&gt;https://golang.org/misc/ios/clangwrap.sh&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>