<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ad74e7676957b46695d55c75973fcfc1</guid>
<title>2021 年快结束了！抓紧啦！</title>
<link>https://toutiao.io/k/809c4m6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8b44d087fb6ef8e17f47039d8d0f2695</guid>
<title>插件式可扩展架构设计心得</title>
<link>https://toutiao.io/k/w43usss</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-tool=&quot;mdnice编辑器&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;大家可能不知道，鄙人之前人送外号“过度设计”。作为一个自信的研发人员，我总是希望我开发的系统可以解决之后所有的问题，用一套抽象可以覆盖之后所有的扩展场景。当然最终往往能够证明我的愚昧与思虑不足。先知曾说过“当一个东西什么都可以做时，他往往什么都做不了”。过度的抽象，过度的开放性，往往让接触他的人无所适从。讲到这里你可能以为我要开始讲过度设计这个主题了，但其实不然，我只是想以这个话题作为引子，和大家讨论一下关于设计一个插件架构我是如何思考的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么需要插件&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的软件系统往往是要面向持续性的迭代的，在开发之初很难把所有需要支持的功能都想清楚，有时候还需要借助社区的力量去持续生产新的功能点，或者优化已有的功能。这就需要我们的软件系统具备一定的可扩展性。插件模式就是我们常常选用的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，现存的大量软件系统或工具都是使用插件方式来实现可扩展性的。比如大家最熟悉的小可爱——VSCode，其插件拥有量已经超越了他的前辈 Atom，发布到市场中的数量目前是 24894 个。这些插件帮助我们定制编辑器的外观或行为，增加额外功能，支持更多语法类型，大大提升了开发效率，同时也不断拓展着自身的用户群体。又或者是我们熟知的浏览器 Chrome，其核心竞争力之一也是丰富的插件市场，使其不论是对开发者还是普通使用者都已成为了不可获取的一个工具。另外还有 Webpack、Nginx 等等各种工具，这边就不一一赘述了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据目前各个系统的插件设计，总结下来，我们创造插件主要是帮助我们解决以下两种类型的问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，在解决上面这类问题的时候做到：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;插件代码与系统代码在工程上解耦，可以独立开发，并对开发者隔离框架内部逻辑的复杂度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可动态化引入与配置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并且进一步地可以实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过对多个单一职责的插件进行组合，可以实现多种复杂逻辑，实现逻辑在复杂场景中的复用&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里提到的不管是提供新能力，还是进行能力定制，都既可以针对系统开发者本身，也可以针对三方开发者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合上面的特征，我们尝试简单描述一下插件是什么吧。插件一般是可独立完成某个或一系列功能的模块。一个插件是否引入一定不会影响系统原本的正常运行（除非他和另一个插件存在依赖关系）。插件在运行时被引入系统，由系统控制调度。一个系统可以存在复数个插件，这些插件可通过系统预定的方式进行组合。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;怎么实现插件模式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件模式本质是一种设计思想，并没有一个一成不变或者是万金油的实现。但我们经过长期的代码实践，其实已经可以总结出一套方法论来指导插件体系的实现，并且其中的一些实现细节是存在社区认可度比较高的“最佳实践”的。本文在攥写过程中也参考研读了社区比较有名的一些项目的插件模式设计，包括但不仅限于 Koa、Webpack、Babel 等。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 解决问题前首先要定义问题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现一套插件模式的第一步，永远都是先定义出你需要插件化来帮助你解决的问题是什么。这往往是具体问题具体分析的，并总是需要你对当前系统的能力做一定程度的抽象。比如 Babel，他的核心功能是将一种语言的代码转化为另一种语言的代码，他面临的问题就是，他无法在设计时就穷举语法类型，也不了解应该如何去转换一种新的语法，因此需要提供相应的扩展方式。为此，他将自己的整体流程抽象成了 parse、transform、generate 三个步骤，并主要面向 parse 和 transform 提供了插件方式做扩展性支持。在 parse 这层，他核心要解决的问题是怎么去做分词，怎么去做词义语法的理解。在 transform 这层要做的则是，针对特定的语法树结构，应该如何转换成已知的语法树结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很明显，babel 他很清楚地定义了 parse 和 transform 两层的插件要完成的事情。当然也有人可能会说，为什么我一定要定义清楚问题呢，插件体系本来就是为未来的不确定性服务的。这样的说法对，也不对。计算机程序永远是面向确定性的，我们需要有明确的输入格式，明确的输出格式，明确的可以依赖的能力。解决问题一定是在已知的一个框架内的。这就引出了定义问题的一门艺术——如何赋予不确定以确定性，在不确定中寻找确定。说人话，就是“抽象”，这也是为什么最开始我会以过度设计作为引子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在进行问题定义的时候，最常使用的是样本分析法，这种方法并非捷径，但总归是有点效的。样本分析法，就是先着眼于整理已知待解决的问题，将这些问题作为样本尝试分类和提取共性，从而形成一套抽象模式。然后再通过一些不确定但可能未来待解决的问题来测试，是否存在无法套用的情况。光说无用，下面我们还是以 babel 来举个栗子，当然 babel 的抽象设计其实本质就是有理论支撑的，在有现有理论已经为你做好抽象时，还是尽量用现成的就好啦。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2803970223325062&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjkKMN49ZPwHNP5Y922CGvgibPq7WYWUP0L2liaRWBRKUEVdqu6eb7q7Tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;806&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Babel 主要解决的问题是把新语法的代码在不改变逻辑的情况下如何转换成旧语法的代码，简单来说就是 code =&amp;gt; code 的一个问题。但是需要转什么，怎么转，这些是会随着语法规范不断更新变化的，因此需要使用插件模式来提升其未来可拓展性。我们当下要解决的问题也许是如何转换 es6 新语法的内容，以及 JSX 这种框架定制的 DSL。我们当然可以简单地串联一系列的正则处理，但是你会发现每一个插件都会有大量重复的识别分析类逻辑，不但加大了运行开销，同时也很难避免互相影响导致的问题。Babel 选择了把解析与转换两个动作拆开来，分别使用插件来实现。解析的插件要解决的问题是如何解析代码，把 Code 转化为 AST。这个问题对于不同的语言又可以拆解为相同的两个事情，如何分词，以及如何做词义解析。当然词义解析还能是如何构筑上下文、如何产出 AST 节点等等，就不再细分了。最终形成的就是下图这样的模式，插件专注解决这几个细分问题。转换这边的，则可分为如何查找固定 AST 节点，以及如何转换，最终形成了 Visitor 模式，这里就不再详细说了。那么我们再思考一下，如果未来 ES7、8、9（相对于设计场景的未来）等新语法出炉时，是不是依然可以使用这样的模式去解决问题呢？看起来是可行的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1182432432432432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjZTAYZPftFcq2fhdlphSdF3aJzgSoI79wj8acrT08grRYsJHBRaLfeg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;296&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是前面所说的在不确定中寻找确定性，尽可能减少系统本身所面临的不确定，通过拆解问题去限定问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么定义清楚问题，我们大概就完成了 1/3 的工作了，下面就是要正式开始思考如何设计了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 插件架构设计绕不开的几大要素&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件模式的设计，可以简单也可以复杂，我们不能指望一套插件模式适合所有的场景，如果真的可以的话，我也不用写这篇文章了，给大家甩一个 npm 地址就完事了。这也是为什么在设计之前我们一定要先定义清楚问题。具体选择什么方式实现，一定是根据具体解决的问题权衡得出的。不过呢，这事终归还是有迹可循，有法可依的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当正式开始设计我们的插件架构时，我们所要思考的问题往往离不开以下几点。整个设计过程其实就是为每一点选择合适的方案，最后形成一套插件体系。这几点分别是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如何注入、配置、初始化插件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;插件如何影响系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;插件输入输出的含义与可以使用的能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复数个插件之间的关系是怎么样的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面就针对每个点详细解释一下&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;如何注入、配置、初始化插件&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注入、配置、初始化其实是几个分开的事情。但都同属于 Before 的事情，所以就放在一起讲了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来讲一讲&lt;strong&gt;注入&lt;/strong&gt;，其实本质上就是如何让系统感知到插件的存在。注入的方式一般可以分为 声明式 和 编程式。声明式就是通过配置信息，告诉系统应该去哪里去取什么插件，系统运行时会按照约定与配置去加载对应的插件。类似 Babel，可以通过在配置文件中填写插件名称，运行时就会去 modules 目录下去查找对应的插件并加载。编程式的就是系统提供某种注册 API，开发者通过将插件传入 API 中来完成注册。两种对比的话，声明式主要适合自己单独启动不用接入另一个软件系统的场景，这种情况一般使用编程式进行定制的话成本会比较高，但是相对的，对于插件命名和发布渠道都会有一些限制。编程式则适合于需要在开发中被引入一个外部系统的情况。当然也可以两种方式都进行支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是插件&lt;strong&gt;配置&lt;/strong&gt;，配置的主要目的是实现插件的可定制，因为一个插件在不同使用场景下，可能对于其行为需要做一些微调，这时候如果每个场景都去做一个单独的插件那就有点小题大作了。配置信息一般在注入时一起传入，很少会支持注入后再进行重新配置。配置如何生效其实也和插件初始化的有点关联，初始化这事可以分为方式和时机两个细节来讲，我们先讲讲方式。常见的方式我大概列举两种。一种是工厂模式，一个插件暴露出来的是一个工厂函数，由调用者或者插件架构来将提供配置信息传入，生成插件实例。另一种是运行时传入，插件架构在调度插件时会通过约定的上下文把配置信息给到插件。工厂模式咱们继续拿 babel 来举例吧。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;declare&lt;/span&gt;&amp;lt;&lt;br/&gt;    &lt;span&gt;O&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Record&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;any&lt;/span&gt;&amp;gt;,&lt;br/&gt;    &lt;span&gt;R&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;babel&lt;/span&gt;.&lt;span&gt;PluginObj&lt;/span&gt; = &lt;span&gt;babel&lt;/span&gt;.&lt;span&gt;PluginObj&lt;/span&gt;&lt;br/&gt;&amp;gt;(&lt;span&gt;&lt;br/&gt;    builder: (api: BabelAPI, options: O, dirname: string&lt;/span&gt;) =&amp;gt; &lt;span&gt;R&lt;/span&gt;,&lt;br/&gt;): (&lt;span&gt;api: object, options: O | null | undefined, dirname: string&lt;/span&gt;) =&amp;gt; &lt;span&gt;R&lt;/span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码中的 builder 呢就是我们说到的工厂函数了，他最终将产出一个 Plugin 实例。builder 通过 options 获取到配置信息，并且这里设计上还支持通过 api 设置一些运行环境信息，不过这并不是必须的，所以不细说了。简化一下就是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; TPluginFactory&amp;lt;OPTIONS, PLUGIN&amp;gt; = &lt;span&gt;(&lt;span&gt;options: OPTIONS&lt;/span&gt;) =&amp;gt;&lt;/span&gt; PLUGIN;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以&lt;strong&gt;初始化&lt;/strong&gt;呢，自然也可以是通过调用工厂函数初始化、初始化完成后再注入、不需要初始化三种。一般我们不选择初始化完成后再注入，因为解耦的诉求，我们尽量在插件中只做声明。是否使用工厂模式则看插件是否需要初始化这一步骤。大部分情况下，如果你决定不好，还是推荐优先选择工厂模式，可以应对后面更多复杂场景。初始化的时机也可以分为注入即初始化、统一初始化、运行时才初始化。很多情况下 注入即初始化、统一初始化 可以结合使用，具体的区分我尝试通过一张表格来对应说明：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsj7qsmibSiaicSYNBcrbnSBVmibDZ7O0HgwLFZE0pbMXEazIbIWsYRbNN1QQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外还有个问题也在这里提一下，在一些系统中，我们可能依赖许多插件组合来完成一件复杂的事情，为了屏蔽单独引入并配置插件的复杂性，我们还会提供一种 Preset 的概念，去打包多个插件及其配置。使用者只需要引入 Preset 即可，不用关心里面有哪些插件。例如 Babel 在支持 react 语法时，其实要引入 &lt;code&gt;syntax-jsx&lt;/code&gt; &lt;code&gt;transform-react-jsx&lt;/code&gt; &lt;code&gt;transform-react-display-name&lt;/code&gt; &lt;code&gt;transform-react-pure-annotationsd&lt;/code&gt; 等多个插件，最终给到的是 &lt;code&gt;preset-react&lt;/code&gt;这样一个包。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;插件如何影响系统&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件对系统的影响我们可以总结为三方面：&lt;strong&gt;行为、交互、展示&lt;/strong&gt;。单独一个插件可能只涉及其中一点。根据具体场景，有些方面也不必去影响，比如一个逻辑引擎类型的系统，就大概率不需要展示这块的东西啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VSCode 插件大致覆盖了这三个，所以我们可以拿一个简单的插件来看下。这里我们选择了 Clock in status bar 这个插件，这个插件的功能很简单，就是在状态栏加一个时钟，或者你可以在编辑内容内快速插入当前时间。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05778894472361809&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjoSZrYqJIYXdIib0GK76peVJkFYGSnyCuic31IpnryM9r0sK49FA7rObQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4491803278688525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjfWFUeTUjSCHhFM66Iaz6ibTZ2QhTN7vSgF19uecrHrbWcvwgtcQzyibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;610&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个项目里最主要的是下面这些内容：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3868312757201646&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsj9stPX4ic61shAfpHPCGibEaThXlra75Hf8A4evxQUn0hngI9qIXbRwxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;243&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 package.json 中，通过扩展的 contributes 字段为插件注册了一个命令，和一个配置菜单。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&quot;main&quot;&lt;/span&gt;: &lt;span&gt;&quot;./extension&quot;&lt;/span&gt;, &lt;span&gt;// 入口文件地址&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;contributes&quot;&lt;/span&gt;: {&lt;br/&gt;  &lt;span&gt;&quot;commands&quot;&lt;/span&gt;: [{&lt;br/&gt;    &lt;span&gt;&quot;command&quot;&lt;/span&gt;: &lt;span&gt;&quot;clock.insertDateTime&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;Clock: Insert date and time&quot;&lt;/span&gt;&lt;br/&gt;  }],&lt;br/&gt;  &lt;span&gt;&quot;configuration&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;object&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;Clock configuration&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;clock.dateFormat&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;string&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;default&quot;&lt;/span&gt;: &lt;span&gt;&quot;hh:MM TT&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;description&quot;&lt;/span&gt;: &lt;span&gt;&quot;Clock: Date format according to https://github.com/felixge/node-dateformat&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;},&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在入口文件 extension.js 中则通过系统暴露的 API 创建了状态栏的 UI，并注册了命令的具体行为。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&#x27;use strict&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// The module &#x27;vscode&#x27; contains the VS Code extensibility API&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Import the module and reference it with the alias vscode in your code below&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt;&lt;br/&gt;  clockService = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./clockservice&#x27;&lt;/span&gt;),&lt;br/&gt;  ClockStatusBarItem = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;./clockstatusbaritem&#x27;&lt;/span&gt;),&lt;br/&gt;  vscode = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;vscode&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// this method is called when your extension is activated&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// your extension is activated the very first time the command is executed&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;activate&lt;/span&gt;(&lt;span&gt;context&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// Use the console to output diagnostic information (console.log) and errors (console.error)&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// This line of code will only be executed once when your extension is activated&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;// The command has been defined in the package.json file&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// Now provide the implementation of the command with  registerCommand&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// The commandId parameter must match the command field in package.json&lt;/span&gt;&lt;br/&gt;  context.subscriptions.push(&lt;span&gt;new&lt;/span&gt; ClockStatusBarItem());&lt;br/&gt;&lt;br/&gt;  context.subscriptions.push(vscode.commands.registerTextEditorCommand(&lt;span&gt;&#x27;clock.insertDateTime&#x27;&lt;/span&gt;, (textEditor, edit) =&amp;gt; {&lt;br/&gt;    textEditor.selections.forEach(&lt;span&gt;&lt;span&gt;selection&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt;&lt;br/&gt;        start = selection.start,&lt;br/&gt;        end = selection.end;&lt;br/&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (start.line === end.line &amp;amp;&amp;amp; start.character === end.character) {&lt;br/&gt;        edit.insert(start, clockService());&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;        edit.replace(selection, clockService());&lt;br/&gt;      }&lt;br/&gt;    });&lt;br/&gt;  }));&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;exports.activate = activate;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// this method is called when your extension is deactivated&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;deactivate&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;exports.deactivate = deactivate;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述这个例子有点大块儿，有点稍显粗糙。那么总结下来我们看一下，在最开始我们提到的三个方面分别是如何体现的。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;UI：我们通过系统 API 创建了一个状态栏组件。我们通过配置信息构建了一个 配置页。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;交互：我们通过注册命令，增加了一项指令交互。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逻辑：我们新增了一项插入当前时间的能力逻辑。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们在设计一个插件架构时呢，也主要就从这三方面是否会被影响考虑即可。那么插件又怎么去影响系统呢，这个过程的前提是插件与系统间建立一份契约，约定好对接的方式。这份契约可以包含文件结构、配置格式、API 签名。还是结合 VSCode 的例子来看看：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;文件结构：沿用了 NPM 的传统，约定了目录下 package.json 承载元信息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置格式：约定了 main 的配置路径作为代码入口，私有字段 contributes 声明命令与配置。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;API 签名：约定了扩展必须提供 activate 和 deactivate 两个接口。并提供了 vscode 下各项 API 来完成注册。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;UI 和 交互的定制逻辑，本质上依赖系统本身的实现方式。这里重点讲一下一般通过哪些模式，去调用插件中的逻辑。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;直接调用&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个模式很直白，就是在系统的自身逻辑中，根据需要去调用注册的插件中约定的 API，有时候插件本身就只是一个 API。比如上面例子中的 activate 和 deactivate 两个接口。这种模式很常见，但调用处可能会关注比较多的插件处理相关逻辑。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;钩子机制（事件机制）&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统定义一系列事件，插件将自己的逻辑挂载在事件监听上，系统通过触发事件进行调度。上面例子中的 clock.insertDateTime 命令也可以算是这类，是一个命令触发事件。在这个机制上，webpack 是一个比较明显的例子，我们来看一个简单的 webpack 插件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 一个 JavaScript 命名函数。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;MyExampleWebpackPlugin&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 在插件函数的 prototype 上定义一个 `apply` 方法。&lt;/span&gt;&lt;br/&gt;MyExampleWebpackPlugin.prototype.apply = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;compiler&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;// 指定一个挂载到 webpack 自身的事件钩子。&lt;/span&gt;&lt;br/&gt;  compiler.plugin(&lt;span&gt;&#x27;webpacksEventHook&#x27;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;compilation &lt;span&gt;/* 处理 webpack 内部实例的特定数据。*/&lt;/span&gt;, callback&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&quot;This is an example plugin!!!&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 功能完成后调用 webpack 提供的回调。&lt;/span&gt;&lt;br/&gt;    callback();&lt;br/&gt;  });&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的插件就将“在 console 打印 This is an example plugin!!!”这一行为注册到了 webpacksEventHook 这个钩子上，每当这个钩子被触发时，会调用一次这个逻辑。这种模式比较常见，webpack 也专门做了一份封装服务这个模式，https://github.com/webpack/tapable。通过定义了多种不同调度逻辑的钩子，你可以在任何系统中植入这款模式，并能满足你不同的调度需求（调度模式我们在下一部分中详细讲述）。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;    SyncHook,&lt;br/&gt;    SyncBailHook,&lt;br/&gt;    SyncWaterfallHook,&lt;br/&gt;    SyncLoopHook,&lt;br/&gt;    AsyncParallelHook,&lt;br/&gt;    AsyncParallelBailHook,&lt;br/&gt;    AsyncSeriesHook,&lt;br/&gt;    AsyncSeriesBailHook,&lt;br/&gt;    AsyncSeriesWaterfallHook&lt;br/&gt;} = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&quot;tapable&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3798611111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjhgRMrf0oN2tVdLRV1K65XuoiaDocMfiaMibpb0KAq8UAaWA2a437smsXA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1440&quot;/&gt;&lt;figcaption&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;钩子机制适合注入点多，松耦合需求高的插件场景，能够减少整个系统中插件调度的复杂度。成本就是额外引了一套钩子机制了，不算高的成本，但也不是必要的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;使用者调度机制&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种模式本质就是将插件提供的能力，统一作为系统的额外能力对外透出，最后又系统的开发使用者决定什么时候调用。例如 JQuery 的插件会注册 fn 中的额外行为，或者是 Egg 的插件可以向上下文中注册额外的接口能力等。这种模式我个人认为比较适合又需要定制更多对外能力，又需要对能力的出口做收口的场景。如果你希望用户通过统一的模式调用你的能力，那大可尝试一下。你可以尝试使用新的 Proxy 特性来实现这种模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是系统对插件的调用还是插件调用系统的能力，我们都是需要一个确定的输入输出信息的，这也是我们上面 API 签名所覆盖到的信息。我们会在下一部分专门讲一讲。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;插件输入输出的含义与可以使用的能力&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;插件与系统间最重要的契约就是 API 签名，这涉及了可以使用哪些 API，以及这些 API 的输入输出是什么。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;可以使用的能力&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是指插件的逻辑可以使用的公共工具，或者可以通过一些方式获取或影响系统本身的状态。能力的注入我们常使用的方式是参数、上下文对象或者工厂函数闭包。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供的能力类型主要有下面四种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;纯工具：不影响系统状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取当前系统状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修改当前系统状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;API 形式注入功能：例如注册 UI，注册事件等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于需要提供哪些能力，一般的建议是根据插件需要完成的工作，提供最小够用范围内的能力，尽量减少插件破坏系统的可能性。在部分场景下，如果不能通过 API 有效控制影响范围，可以考虑为插件创造沙箱环境，比如插件内可能会调用 global 的接口等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;输入输出&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们的插件是处在我们系统一个特定的处理逻辑流程中的（常见于直接调用机制或钩子机制），我们的插件重点关注的就是输入与输出。此时的输入与输出一定是由逻辑流程本身所处的逻辑来决定的。输入输出的结构需要与插件的职责强关联，尽量保证可序列化能力（为了防止过度膨胀以及本身的易读性），并根据调度模式有额外的限制条件（下面会讲）。如果你的插件输入输出过于复杂，可能要反思一下抽象是否过于粗粒度了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外还需要对插件逻辑保证异常捕捉，防止对系统本身的破坏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是 Babel Parser 那个例子。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression;&lt;br/&gt;  getTokenFromCode(code: number): &lt;span&gt;void&lt;/span&gt;; &lt;span&gt;// 内部再调用 finishToken 来影响逻辑&lt;/span&gt;&lt;br/&gt;  updateContext(prevType: TokenType): &lt;span&gt;void&lt;/span&gt;; &lt;span&gt;// 内部通过修改 this.state 来改变上下文信息&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;*&lt;strong&gt;意料之中的输入，坚信不疑的输出*&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;复数个插件之间的关系是怎么样的&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Each plugin should only do a small amount of work, so you can connect them like building blocks. You may need to combine a bunch of them to get the desired result.&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们讨论的是，在同一个扩展点上注入的插件，应该以什么形式做组合。常见的形式如下：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;覆盖式&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只执行最新注册的逻辑，跳过原始逻辑&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23237179487179488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjVwYLforgOmD8gr22H9dX4979hjBOhpiaX0rGmSOhJCIib9FeW6Ig3Txw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;624&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;管道式&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入输出相互衔接，一般输入输出是同一个数据类型。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.21621621621621623&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjoH1IUzYr4oEzoxlQ7FIUwmZiasAkf3QWpnuPL9fOZvSq49HE50avZBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;592&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;洋葱圈式&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在管道式的基础上，如果系统核心逻辑处于中间，插件同时关注进与出的逻辑，则可以使用洋葱圈模型。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.30514096185737977&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjANP9Fn5j4ibq8m8ryJlhRaamBsfyOf1mZPQDCiaFsmsATwWMBwwSP0yA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;603&quot;/&gt;&lt;span/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里也可以参考 koa 中的中间件调度模式 https://github.com/koajs/compose&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; middleware = &lt;span&gt;async&lt;/span&gt; (...params, next) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;// before&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; next();&lt;br/&gt;  &lt;span&gt;// after&lt;/span&gt;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;集散式&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集散式就是每一个插件都会执行，如果有输出则最终将结果进行合并。这里的前提是存在方案，可以对执行结果进行 merge。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8588516746411483&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aDoYvepE5x22mYbkMZxwmqUgVWGvicxsjmCHEPibOTytUjeCUDXVqk59gX5BnznBGpWkrlNLr4VNumFqCfDTU4Qw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;418&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;另外调度还可以分为 同步 和 异步 两个方式，主要看插件逻辑是否包含异步行为。同步的实现会简单一点，不过如果你不能确定，那也可以考虑先把异步的一起考虑进来。类似 https://www.npmjs.com/package/neo-async 这样的工具可以很好地帮助你。如果你使用了 tapble，那里面已经有相应的定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外还需要注意的细节是：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;顺序是先注册先执行，还是反过来，需要给到明确的解释或一致的认知。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;同一个插件重复注册了该怎么处理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你跟着这篇文章的思路，把这些问题都思考清楚之后，想必你的脑海中一定已经有了一个插件架构的雏形了。剩下的可能是结合具体问题，再通过一些设计模式去优化开发者的体验了。个人认为设计一个插件架构，是一定逃不开针对这些问题的思考的，而且只有去真正关注这些问题，才能避开炫技、过度设计等面向未来开发时时常会犯的错误。当然可能还差一些东西，一些推荐的实现方式也可能会过时，这些就欢迎大家帮忙指正啦。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者：ES2049 / armslave00 文章可随意转载，但请保留此原文链接（https://zhuanlan.zhihu.com/p/372381276）。非常欢迎有激情的你加入 ES2049 Studio，简历请发送至 caijun.hcj@alibaba-inc.com 。&lt;/p&gt;&lt;/blockquote&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;us-3913677&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.006666666666666667&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-width=&quot;100%&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/xsw6Lt5pDCu1rRLicXibOB6jq4wpe7W4Ioibu7XTJR1ABzARKoLxyWEWeIV6HJRII2GK1ntnCkVIqjY852gntBd5Q/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;敬请关注「Nodejs技术栈」微信公众号，&lt;span&gt;期望与志同道合的你一起打造优质 “Nodejs技术栈” 交流群，一起互相学习进步！&lt;/span&gt;&lt;span&gt;可长按下方二维码&lt;/span&gt;&lt;span&gt;添加【五月君】个人微信备注 “Node” 邀请入群。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zPkNS9m6iatLmT5coKbicuqENgoc3Pz4QWwtrEoP2RU2thicCJHaKNmJ23Hh9jYvicpVgiauY6NxNaZ59D6svw1Qskg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a31b73d673ff0f4dc0cd8d5471c551e9</guid>
<title>Enrich Processor——Elasticsearch 跨索引关联数据新方式</title>
<link>https://toutiao.io/k/igeh9aw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1、实战项目需求&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需求1：有一个小需求&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;kafka源数据:&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;topicA:{&lt;span&gt;&quot;A_content&quot;&lt;/span&gt;:&lt;span&gt;&quot;XXX&quot;&lt;/span&gt;,&lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;A&quot;&lt;/span&gt;,&lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;XXX&quot;&lt;/span&gt;,&lt;span&gt;&quot;id&quot;&lt;/span&gt;:1}&lt;br/&gt;topicB:{&lt;span&gt;&quot;B_content&quot;&lt;/span&gt;:&lt;span&gt;&quot;XXX&quot;&lt;/span&gt;,&lt;span&gt;&quot;name&quot;&lt;/span&gt;:&lt;span&gt;&quot;B&quot;&lt;/span&gt;,&lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;XXX&quot;&lt;/span&gt;,&lt;span&gt;&quot;id&quot;&lt;/span&gt;:1}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;现在想将两个topic的数据写到同一个es索引中，但由于更新性能太慢，有啥思路可以加速写入性能呢(topicA和topicB的数据可能会有几天的延时)?&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需求2：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;在cluster1上有如a，b两索引，均有字段filed_a，索引a，b各自包含其它字段，建立新索引如c，要求c包含a索引全部文档，且在a和b索引关联字段 field_a 相同的文档中把b文档其它字段更新到索引c中。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、需求分析&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如上两个需求都涉及两个索引数据之间的关联。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;提到&lt;/span&gt;&lt;code&gt;&lt;span&gt;数据关联&lt;/span&gt;&lt;/code&gt;&lt;span&gt;或者&lt;/span&gt;&lt;code&gt;&lt;span&gt;多表关联&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，我们都能想到的是四种多表关联核心实现：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;宽表，特点：空间换时间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Nested 嵌套文档，特点：适合于子文档更新不频繁场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Join 父子文档，特点：适合于子文档频繁更新的场景。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务层面自己实现，特点：灵活自控。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;以上四种都无法实现上述需求涉及的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;需求2的本质是：跨索引相同字段关联扩充字段实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 7.5 版本的 ingest 预处理环节新增了enrich processer 字段丰富功能，能很好的实现上述需求。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2、enrich processor 解读&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 enrich processor 全局认知&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;全局来看：&lt;/span&gt;&lt;code&gt;&lt;span&gt;enrich processor&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是 ingest 预处理管道中众多 processors中的一个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;3.6463414634146343&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwagNmzRiaLISFMgl5MM5LibKaefaOoiavZUZ4Rq3tojdyP4UrDxbXDIK6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;246&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 enrich processor 最早发布版本&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如前所述，Elasticsearch 7.5 版本后新增了该项功能。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.3 enrich processor 定义&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;enrich&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：中文可以翻译成丰富，本质也可以理解：“使丰富”的意思。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;借助 &lt;/span&gt;&lt;code&gt;&lt;span&gt;enrich&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 预处理管道，可以将已有索引中的数据添加到新写入的文档中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方举例如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;根据已知 IP 添加 web 服务或供应商。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;根据产品 ID 添加零售订单。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;根据电子邮件补充添加联系信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;根据用户地址添加邮政编码。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.4 非 enrich processor 工作原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了对比，我们先讲一下：&lt;/span&gt;&lt;code&gt;&lt;span&gt;非 enrich processor&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的工作原理。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;非 enrich 的预处理管道&lt;/span&gt;&lt;/code&gt;&lt;span&gt;都相对“简单、直白”，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;3.2045454545454546&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwLwBPqVAXBGrrTs91h0xXTv5rlnZI85J5ZXKamMB4BgXKF04FUnWtCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;132&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图片来自：Elastic官方文档&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新写入的文档中间经过预处理管道预处理实现了数据的 ETL 清洗后写入到目标索引中。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中间的 ETL 清洗包含但不限于：trim、drop、append、foreach等管道处理方式。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.5 enrich processor 工作原理&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;区别于&lt;/span&gt;&lt;code&gt;&lt;span&gt;非 enrich processor&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的“直来直去”，enrich processor 在预处理管道中间加了“秘制配方”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7072758037225042&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwFAvfl5Gwib6w2qr4gJYGymKOr79gZ3NQevVKd9MyqM44sgBCq8Z95jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图片来自：&lt;/span&gt;&lt;span&gt;Elastic官方文档&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;加了什么呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;多了：enrich policy。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大家可以回想一下，上一次您在 Elasticsearch 中听到 policy 是在什么时候？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247486616&amp;amp;idx=1&amp;amp;sn=c6996144a82e0e5f082935f7bce41661&amp;amp;chksm=eaa824b0dddfada6dc60a8ba0694e2e7edf1e167db08937b11c74f2ff775724cf8272717fff1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot; ILM 索引生命周期管理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt; ILM 索引生命周期管理&lt;/a&gt;里面 policy 实际是阶段 phrase 和动作 action 的综合体。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而 enrich 数据预处理环节，enrich 的组成有哪些呢？&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.5.1 enrich policy&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对应上图中中间虚线框的圆圈部分，先上例子，建立下直观的认知。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;PUT /_enrich/policy/data-policy&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;indices&quot;&lt;/span&gt;: &lt;span&gt;&quot;index_test_b&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;match_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;field_a&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;enrich_fields&quot;&lt;/span&gt;: [&lt;br/&gt;      &lt;span&gt;&quot;author&quot;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&quot;publisher&quot;&lt;/span&gt;&lt;br/&gt;    ]&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;indices:一个或多个源索引的列表，存储的是待 enrich 扩展的数据。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;match：policy 类型，除了传统的match类型，还有应用于地理位置场景的：geo_match。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;match_field：源索引中用于匹配传入文档的匹配字段。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;enrich_field：源索引中的字段列表，用于添加到新传入的文档中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.5.2 source index 源索引&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用于丰富新写入文档 （incoming documents）的索引。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;它是目标索引中添加的待丰富数据的源头索引。没有了它，&lt;/span&gt;&lt;code&gt;&lt;span&gt;enrich&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 将无从谈起。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.5.3 enrich index 丰富索引&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是一个咱们从来没有见过的新概念，有必要详细解读一下。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.23515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrw7WaoAoUtVDeerklplp51u1CJVr4PyUxFpiap4r2LmibWKH79dlzg2v9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;enrich index&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是执行 enrich policy 生成的索引。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行命令如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;POST /_enrich/policy/data-policy/_execute&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;enrich index 特点如下：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;elasticsearch 内部管理的系统级索引。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;目的很“单一”——仅用于 enrich processor。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以 .enrich-* 开头。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;只读，不支持人为修改。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5054054054054054&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwyu6WALdhsqCklvvmVZELfZZuEgeds7z8ZLBp8cAC84yp6XxQxtVeNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;get 索引会有说明禁止修改&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1985930735930736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrw3d3thgSCpe5DT4zdkm90VD5vWNHrNHCvsh6aPYSVVhcicErPicwHXnqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1848&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更新索引报错如上&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这时候，读者可能会有疑问：直接用 source 索引不香吗？费那劲干啥？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因：直接将传入文档与源索引中的文档进行匹配可能会&lt;/span&gt;&lt;span&gt;很慢且需要大量资源&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了加快速度，enrich 索引应运而生。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果再引申的话，source 源索引可能会有大量的增删改查操作，而 enrich 一经创建，便不允许更改。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;除非进行重新执行 policy。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.6 enrich processor 适用场景&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.7 enrich processor 性能问题&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;enrich processor 执行多项操作，可能会影响 ingest 管道的速度。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方强烈建议在将 enrich process 部署到生产环境之前对其进行测试和基准测试。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;官方不建议使用 enrich 处理器来 enrich （丰富）实时数据。enrich processor 最适合不经常更改的索引数据类型。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3、enrich processor 实战解读&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;针对文章开头的需求1、需求2：传统的索引之间的关联方式都不能解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;核心实现步骤如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.9327217125382263&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwB1dEAdhxX40J3HZLE7gta6GwbtgsicyyWOGwBBicWwGoNLgKQCqoBMTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;327&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;借助 enrich processor 实现解读如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如下各个步骤和上图一一对应。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 第一步：创建初始索引&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;DELETE index_test_a&lt;br/&gt;PUT index_test_a&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;:{&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;:{&lt;br/&gt;      &lt;span&gt;&quot;field_a&quot;&lt;/span&gt;:{&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;title&quot;&lt;/span&gt;:{&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;publish_time&quot;&lt;/span&gt;:{&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;:&lt;span&gt;&quot;date&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;POST index_test_a/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;field_a&quot;&lt;/span&gt;:&lt;span&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span&gt;&quot;title&quot;&lt;/span&gt;:&lt;span&gt;&quot;elasticsearch in action&quot;&lt;/span&gt;, &lt;span&gt;&quot;publish_time&quot;&lt;/span&gt;:&lt;span&gt;&quot;2017-07-01T00:00:00&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;DELETE index_test_b&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;PUT index_test_b&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;mappings&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;properties&quot;&lt;/span&gt;: {&lt;br/&gt;      &lt;span&gt;&quot;field_a&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;author&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;      },&lt;br/&gt;      &lt;span&gt;&quot;publisher&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;type&quot;&lt;/span&gt;: &lt;span&gt;&quot;keyword&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;POST index_test_b/_bulk&lt;br/&gt;{&lt;span&gt;&quot;index&quot;&lt;/span&gt;:{&lt;span&gt;&quot;_id&quot;&lt;/span&gt;:1}}&lt;br/&gt;{&lt;span&gt;&quot;field_a&quot;&lt;/span&gt;:&lt;span&gt;&quot;aaa&quot;&lt;/span&gt;, &lt;span&gt;&quot;author&quot;&lt;/span&gt;:&lt;span&gt;&quot;jerry&quot;&lt;/span&gt;, &lt;span&gt;&quot;publisher&quot;&lt;/span&gt;:&lt;span&gt;&quot;Tsinghua&quot;&lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 第二步：创建data-policy&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;DELETE _enrich/policy/data-policy&lt;br/&gt;PUT /_enrich/policy/data-policy&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;match&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;indices&quot;&lt;/span&gt;: &lt;span&gt;&quot;index_test_b&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;match_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;field_a&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;enrich_fields&quot;&lt;/span&gt;: [&lt;span&gt;&quot;author&quot;&lt;/span&gt;,&lt;span&gt;&quot;publisher&quot;&lt;/span&gt;]&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 第三步：执行data-policy&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;POST /_enrich/policy/data-policy/_execute&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.4 第四步：创建 pipeline&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;DELETE /_ingest/pipeline/data_lookup&lt;br/&gt;PUT /_ingest/pipeline/data_lookup&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;processors&quot;&lt;/span&gt;: [&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;enrich&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;policy_name&quot;&lt;/span&gt;: &lt;span&gt;&quot;data-policy&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;field_a&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;target_field&quot;&lt;/span&gt;: &lt;span&gt;&quot;field_from_bindex&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;max_matches&quot;&lt;/span&gt;: &lt;span&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;append&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;author&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;{{field_from_bindex.author}}&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;append&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;publisher&quot;&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;&quot;value&quot;&lt;/span&gt;: &lt;span&gt;&quot;{{field_from_bindex.publisher}}&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;      &lt;span&gt;&quot;remove&quot;&lt;/span&gt;: {&lt;br/&gt;        &lt;span&gt;&quot;field&quot;&lt;/span&gt;: &lt;span&gt;&quot;field_from_bindex&quot;&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;  ]&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.5 第5步：reindex 索引&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;DELETE index_test_c&lt;br/&gt;POST _reindex&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;&quot;source&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;: &lt;span&gt;&quot;index_test_a&quot;&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;dest&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;index&quot;&lt;/span&gt;: &lt;span&gt;&quot;index_test_c&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;pipeline&quot;&lt;/span&gt;: &lt;span&gt;&quot;data_lookup&quot;&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.6 第6步：检索结果&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;GET index_test_c/_search&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最终结果数据如下截图所示：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8025078369905956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwcbhVrWQSASCgu1OjDeBMW5iaPZ4iaNtJ57qS4DPxCmiciajqAMChVc4Ypg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;638&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;索引 c 实现了索引 a 和 索引 b 的融合，索引c 变得“丰富”。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4、小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;新的功能或者新的概念的产生是基于特定的业务需求，追根溯源 enrich processor 起源于如下的 bug 或 新需求：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://github.com/elastic/elasticsearch/issues/32789&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最早版本的这张图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6939820742637645&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZknU3v6Kc1cpvibIYUXjWrwib9ibPt2pkoR3ia2djrzbMeTfRFP6NI7FPtcwb7kcW6CurABQ45o5Wo0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;781&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;更能够说明：enrich processor 的本质。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一句话&lt;/span&gt;&lt;span&gt;：新写入的文档通过 enrich processor 达到了跨索引丰富数据的目的，最终写入目标索引。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而丰富数据的实现是借助：enrich policy 将源索引 source orgin data 生成系统只读索引 enrich index 实现的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文的 enrich processor 预处理可以算作跨索引处理数据的扩展。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;希望本文的解读，对于您理解 Elasticsearch 跨索引关联数据有所帮助！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也欢迎留言交流您对 enrich processor 的看法。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.alibabacloud.com/blog/how-do-we-use-an-ingest-node-in-elasticsearch-to-enrich-logs-and-metrics_597453&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;https://www.elastic.co/cn/blog/introducing-the-enrich-processor-for-elasticsearch-ingest-nodes&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推荐&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487494&amp;amp;idx=1&amp;amp;sn=731687e8a09d2da56fa844c4e494ab62&amp;amp;chksm=eaa8382edddfb138627d276b4f60f4245d457a8a5f787daf65a0c0be95231f67b55d871b907f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;、重磅 | 死磕 Elasticsearch 方法论认知清单（2021年国庆更新版）&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487494&amp;amp;idx=1&amp;amp;sn=731687e8a09d2da56fa844c4e494ab62&amp;amp;chksm=eaa8382edddfb138627d276b4f60f4245d457a8a5f787daf65a0c0be95231f67b55d871b907f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487072&amp;amp;idx=1&amp;amp;sn=13694eb4b907ae5cffa7ac37bb1ed248&amp;amp;chksm=eaa82648dddfaf5edb55fcc5ea74021367b81f03a22d9fb5655409adcb3e400e6da19f945ed3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;1、&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;、&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247487072&amp;amp;idx=1&amp;amp;sn=13694eb4b907ae5cffa7ac37bb1ed248&amp;amp;chksm=eaa82648dddfaf5edb55fcc5ea74021367b81f03a22d9fb5655409adcb3e400e6da19f945ed3&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;Elasticsearch 7.X 进阶实战私训课&lt;/span&gt;&lt;/a&gt;&lt;span&gt;（口碑不错）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3、&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;amp;mid=2247484382&amp;amp;idx=1&amp;amp;sn=da073a257575867b8d979dac850c3f8e&amp;amp;chksm=eaa82bf6dddfa2e0bf920f0a3a63cb635277be2ae286a2a6d3fff905ad913ebf1f43051609e8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货 | Elasticsearch多表关联设计指南&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货 | Elasticsearch多表关联设计指南&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100004130&quot; data-ratio=&quot;0.596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/mjl8GCpsL9ZoCQGlxWp4G56gqia6ANT1Z9WB22YUEZ2Xib9YBZ90fLUQLyudxgjENibxzn9wCtBx3sQeE5CJnRE1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;更&lt;/span&gt;短时间&lt;span&gt;更&lt;/span&gt;快习得&lt;span&gt;更&lt;/span&gt;多干货！&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;已带领&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;80&lt;span&gt;位&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;球友&lt;span&gt;通过 Elastic 官方认证！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;img class=&quot;__bg_gif rich_pages wxw-img&quot; data-fileid=&quot;100004129&quot; data-ratio=&quot;0.4592901878914405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/mjl8GCpsL9aP1cRicwD8ibiaWicGzrrI5hFt9BVtE6mkbaIePyxJ1ic0SicaUEzTI3mhrgjNvLvJprDmf8Sqk9EphbRw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;479&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;比同事&lt;/span&gt;&lt;span&gt;抢先&lt;/span&gt;&lt;span&gt;&lt;span&gt;一步学习进阶干货&lt;/span&gt;&lt;span&gt;！&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a7834e66ef44ef7a95e0c41715e9ba01</guid>
<title>「GoCN酷Go推荐」Golang轻量级桌面程序wails2教学</title>
<link>https://toutiao.io/k/rsx38ld</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;推荐理由&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不依赖cgo！不依赖cgo！不依赖cgo！真的不依赖cgo，且跨平台，原生渲染 无嵌入式浏览器，轻量级，生成的文件很小，而且只有一个可执行文件就可运行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;功能介绍&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;后端使用标准 Go&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用任意前端技术构建 UI 界面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;快速为您的 Go 应用生成 Vue、Vuetify、React 前端代码&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过简单的绑定命令将 Go 方法暴露到前端&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用原生渲染引擎 - 无嵌入式浏览器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;共享事件系统&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;原生文件系统对话框&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;强大的命令行工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;跨多个平台&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;使用指南&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次教学在windows下进行。&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1、首先要安装三个必要的东西：&lt;br/&gt;npm: https://nodejs.org/en/download/&lt;br/&gt;webviews2: https://developer.microsoft.com/zh-cn/microsoft-edge/webview2/#download-section (下载常青版引导程序&lt;br/&gt;，记得安装是一定用管理员安装)&lt;br/&gt;*upx：https://github.com/upx/upx/releases/tag/v3.96 (下载后：upx-3.96-win64.zip，然后放入环境变量)&lt;br/&gt;&lt;br/&gt;2、golang版本必须是1.17及其以上，安装wails工具：&lt;br/&gt;go install github.com/wailsapp/wails/v2/cmd/wails@latest&lt;br/&gt;3、wails doctor (用此命令查看是否已安装完整必要依赖) 如下图：&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48214285714285715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbAdfVYupeYcY37U77XicWa7nacaLZxyXAfibbHwCd0hRqx69fr3lDyfyLLBkezdicauX5xx8ynrF0Fjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;figcaption&gt;1&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;目录结构概要：&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;/main.go - 主应用&lt;br/&gt;/frontend/ - 前端项目文件&lt;br/&gt;/build/ - 项目构建目录&lt;br/&gt;    /build/appicon.png - 应用程序图标&lt;br/&gt;    /build/darwin/ - Mac 特定的项目文件&lt;br/&gt;    /build/windows/ - Windows 特定的项目文件&lt;br/&gt;/wails.json - 项目配置&lt;br/&gt;/go.mod - Go 模块文件&lt;br/&gt;/go.sum - Go 模块校验文件&lt;br/&gt;&lt;br/&gt;frontend目录没有特定于 Wails 的内容，可以是您选择的任何前端项目。&lt;br/&gt;build目录在构建过程中使用。这些文件可以修改以自定义您的构建。如果文件从构建目录中删除，将重新生成默认版本。&lt;br/&gt;go.mod中的默认模块名称是“changeme”。您应该将其更改为更合适的内容。&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;开始做我们的圣诞树&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、首先，利用wails工具创建一个项目：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wails init -n 项目名称&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、然后，我们开始写咱们的main：（看到go:embed注解就知道为什么要用go1.17及其以上的版本了吧）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;embed&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/wailsapp/wails/v2/pkg/options/mac&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/wailsapp/wails/v2&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/wailsapp/wails/v2/pkg/logger&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/wailsapp/wails/v2/pkg/options&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;github.com/wailsapp/wails/v2/pkg/options/windows&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:embed frontend/src&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; assets embed.FS&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//go:embed build/appicon.png&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; icon []&lt;span&gt;byte&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 创建一个APP结构体实例&lt;/span&gt;&lt;br/&gt; app := NewApp()&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 给这个APP设置参数&lt;/span&gt;&lt;br/&gt; err := wails.Run(&amp;amp;options.App{&lt;br/&gt;  Title:             &lt;span&gt;&quot;GoCN祝天下所有的Gopher圣诞节快乐&quot;&lt;/span&gt;,&lt;br/&gt;  Width:             &lt;span&gt;720&lt;/span&gt;,&lt;br/&gt;  Height:            &lt;span&gt;570&lt;/span&gt;,&lt;br/&gt;  MinWidth:          &lt;span&gt;720&lt;/span&gt;,&lt;br/&gt;  MinHeight:         &lt;span&gt;570&lt;/span&gt;,&lt;br/&gt;  MaxWidth:          &lt;span&gt;1280&lt;/span&gt;,&lt;br/&gt;  MaxHeight:         &lt;span&gt;740&lt;/span&gt;,&lt;br/&gt;  DisableResize:     &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  Fullscreen:        &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  Frameless:         &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  StartHidden:       &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  HideWindowOnClose: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;  RGBA:              &amp;amp;options.RGBA{R: &lt;span&gt;33&lt;/span&gt;, G: &lt;span&gt;37&lt;/span&gt;, B: &lt;span&gt;43&lt;/span&gt;, A: &lt;span&gt;255&lt;/span&gt;},&lt;br/&gt;  Assets:            assets,&lt;br/&gt;  LogLevel:          logger.DEBUG,&lt;br/&gt;  OnStartup:         app.startup,&lt;br/&gt;  OnDomReady:        app.domReady,&lt;br/&gt;  OnShutdown:        app.shutdown,&lt;br/&gt;  Bind: []&lt;span&gt;interface&lt;/span&gt;{}{&lt;br/&gt;   app,&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;// Windows平台特定选项&lt;/span&gt;&lt;br/&gt;  Windows: &amp;amp;windows.Options{&lt;br/&gt;   WebviewIsTransparent: &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;// 背景是否半透明&lt;/span&gt;&lt;br/&gt;   WindowIsTranslucent:  &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;// 导航条是否半透明&lt;/span&gt;&lt;br/&gt;   DisableWindowIcon:    &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;// 是否关闭窗口上的图标&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  Mac: &amp;amp;mac.Options{&lt;br/&gt;   TitleBar:             mac.TitleBarHiddenInset(),&lt;br/&gt;   WebviewIsTransparent: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;   WindowIsTranslucent:  &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;   About: &amp;amp;mac.AboutInfo{&lt;br/&gt;    Title:   &lt;span&gt;&quot;Vanilla Template&quot;&lt;/span&gt;,&lt;br/&gt;    Message: &lt;span&gt;&quot;Part of the Wails projects&quot;&lt;/span&gt;,&lt;br/&gt;    Icon:    icon,&lt;br/&gt;   },&lt;br/&gt;  },&lt;br/&gt; })&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  log.Fatal(err)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、写咱们的前端，在frontend/src/index.html下写入下面的代码（我也是抄h阿泉的）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!DOCTYPE &lt;span&gt;HTML&lt;/span&gt; &lt;span&gt;PUBLIC&lt;/span&gt; &lt;span&gt;&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;&lt;/span&gt; &lt;span&gt;&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;圣诞节快乐&lt;span&gt;&amp;lt;/&lt;span&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;meta&lt;/span&gt; &lt;span&gt;charset&lt;/span&gt;=&lt;span&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;        &lt;span&gt;html&lt;/span&gt;, &lt;span&gt;body&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;margin&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;padding&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;border&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;canvas&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;div&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;margin&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;padding&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;border&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.nav&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;position&lt;/span&gt;: absolute;&lt;br/&gt;            &lt;span&gt;top&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;left&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;27px&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;background-color&lt;/span&gt;: white;&lt;br/&gt;            &lt;span&gt;color&lt;/span&gt;: black;&lt;br/&gt;            &lt;span&gt;text-align&lt;/span&gt;: center;&lt;br/&gt;            &lt;span&gt;line-height&lt;/span&gt;: &lt;span&gt;25px&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;a&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;color&lt;/span&gt;: black;&lt;br/&gt;            &lt;span&gt;text-decoration&lt;/span&gt;: none;&lt;br/&gt;            &lt;span&gt;border-bottom&lt;/span&gt;: &lt;span&gt;1px&lt;/span&gt; dashed black;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;a&lt;/span&gt;&lt;span&gt;:hover&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;border-bottom&lt;/span&gt;: &lt;span&gt;1px&lt;/span&gt; solid red;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.previous&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;float&lt;/span&gt;: left;&lt;br/&gt;            &lt;span&gt;margin-left&lt;/span&gt;: &lt;span&gt;10px&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.next&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;float&lt;/span&gt;: right;&lt;br/&gt;            &lt;span&gt;margin-right&lt;/span&gt;: &lt;span&gt;10px&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.green&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;color&lt;/span&gt;: green;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.red&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;color&lt;/span&gt;: red;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;textarea&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;border&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;padding&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;margin&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;padding-bottom&lt;/span&gt;: &lt;span&gt;20px&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.block-outer&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;float&lt;/span&gt;: left;&lt;br/&gt;            &lt;span&gt;width&lt;/span&gt;: &lt;span&gt;22%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;100%&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;padding&lt;/span&gt;: &lt;span&gt;5px&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;border-left&lt;/span&gt;: &lt;span&gt;1px&lt;/span&gt; solid black;&lt;br/&gt;            &lt;span&gt;margin&lt;/span&gt;: &lt;span&gt;30px&lt;/span&gt; &lt;span&gt;3px&lt;/span&gt; &lt;span&gt;3px&lt;/span&gt; &lt;span&gt;3px&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.block-inner&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;height&lt;/span&gt;: &lt;span&gt;68%&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;.one&lt;/span&gt; {&lt;br/&gt;            &lt;span&gt;border&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;body&lt;/span&gt; &lt;span&gt;marginwidth&lt;/span&gt;=&lt;span&gt;&quot;0&quot;&lt;/span&gt; &lt;span&gt;marginheight&lt;/span&gt;=&lt;span&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;canvas&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;=&lt;span&gt;&quot;c&quot;&lt;/span&gt; &lt;span&gt;height&lt;/span&gt;=&lt;span&gt;&quot;800&quot;&lt;/span&gt; &lt;span&gt;width&lt;/span&gt;=&lt;span&gt;&quot;300&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; collapsed = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;toggle&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; fs = top.document.getElementsByTagName(&lt;span&gt;&#x27;frameset&#x27;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;            &lt;span&gt;var&lt;/span&gt; f = fs.getElementsByTagName(&lt;span&gt;&#x27;frame&#x27;&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (collapsed) {&lt;br/&gt;                fs.rows = &lt;span&gt;&#x27;250px,*&#x27;&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;// enable resizing of frames in firefox/opera&lt;/span&gt;&lt;br/&gt;                fs.noResize = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;                f[&lt;span&gt;0&lt;/span&gt;].noResize = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;                f[&lt;span&gt;1&lt;/span&gt;].noResize = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;            } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;                fs.rows = &lt;span&gt;&#x27;30px,*&#x27;&lt;/span&gt;;&lt;br/&gt;                &lt;span&gt;// disable resizing of frames in firefox/opera&lt;/span&gt;&lt;br/&gt;                fs.noResize = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;                f[&lt;span&gt;0&lt;/span&gt;].noResize = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;                f[&lt;span&gt;1&lt;/span&gt;].noResize = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;            }&lt;br/&gt;            collapsed = !collapsed;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;document&lt;/span&gt;.body;&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; c = &lt;span&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span&gt;&#x27;canvas&#x27;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;var&lt;/span&gt; a = c.getContext(&lt;span&gt;&#x27;2d&#x27;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;document&lt;/span&gt;.body.clientWidth; &lt;span&gt;// fix bug in chrome.&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;        &lt;span&gt;// start of submission //&lt;/span&gt;&lt;br/&gt;        M = &lt;span&gt;Math&lt;/span&gt;;&lt;br/&gt;        Q = M.random;&lt;br/&gt;        J = [];&lt;br/&gt;        U = &lt;span&gt;16&lt;/span&gt;;&lt;br/&gt;        T = M.sin;&lt;br/&gt;        E = M.sqrt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (O = k = &lt;span&gt;0&lt;/span&gt;; x = z = j = i = k &amp;lt; &lt;span&gt;200&lt;/span&gt;;) &lt;span&gt;with&lt;/span&gt; (M[k] = k ? c.cloneNode(&lt;span&gt;0&lt;/span&gt;) : c) {&lt;br/&gt;            width = height = k ? &lt;span&gt;32&lt;/span&gt; : W = &lt;span&gt;446&lt;/span&gt;;&lt;br/&gt;            &lt;span&gt;with&lt;/span&gt; (getContext(&lt;span&gt;&#x27;2d&#x27;&lt;/span&gt;)) &lt;span&gt;if&lt;/span&gt; (k &amp;gt; &lt;span&gt;10&lt;/span&gt; | !k) &lt;span&gt;for&lt;/span&gt; (font = &lt;span&gt;&#x27;60px Impact&#x27;&lt;/span&gt;, V = &lt;span&gt;&#x27;rgba(&#x27;&lt;/span&gt;; I = i * U, fillStyle = k ? k == &lt;span&gt;13&lt;/span&gt; ? V + &lt;span&gt;&#x27;205,205,215,.15)&#x27;&lt;/span&gt; : V + (&lt;span&gt;147&lt;/span&gt; + I) + &lt;span&gt;&#x27;,&#x27;&lt;/span&gt; + (k % &lt;span&gt;2&lt;/span&gt; ? &lt;span&gt;128&lt;/span&gt; + I : &lt;span&gt;0&lt;/span&gt;) + &lt;span&gt;&#x27;,&#x27;&lt;/span&gt; + I + &lt;span&gt;&#x27;,.5)&#x27;&lt;/span&gt; : &lt;span&gt;&#x27;#cca&#x27;&lt;/span&gt;, i &amp;lt; &lt;span&gt;7&lt;/span&gt;;) beginPath(fill(arc(U - i / &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;24&lt;/span&gt; - i / &lt;span&gt;2&lt;/span&gt;, k == &lt;span&gt;13&lt;/span&gt; ? &lt;span&gt;4&lt;/span&gt; - (i++) / &lt;span&gt;2&lt;/span&gt; : &lt;span&gt;8&lt;/span&gt; - i++, &lt;span&gt;0&lt;/span&gt;, M.PI * &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;))); &lt;span&gt;else&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; (; x = T(i), y = Q() * &lt;span&gt;2&lt;/span&gt; - &lt;span&gt;1&lt;/span&gt;, D = x * x + y * y, B = E(D - x / &lt;span&gt;.9&lt;/span&gt; - &lt;span&gt;1.5&lt;/span&gt; * y + &lt;span&gt;1&lt;/span&gt;), R = &lt;span&gt;67&lt;/span&gt; * (B + &lt;span&gt;1&lt;/span&gt;) * (L = k / &lt;span&gt;9&lt;/span&gt; + &lt;span&gt;.8&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;, i++ &amp;lt; W;) &lt;span&gt;if&lt;/span&gt; (D &amp;lt; &lt;span&gt;1&lt;/span&gt;) beginPath(strokeStyle = V + R + &lt;span&gt;&#x27;,&#x27;&lt;/span&gt; + (R + B * L &amp;gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;) + &lt;span&gt;&#x27;,40,.1)&#x27;&lt;/span&gt;), moveTo(U + x * &lt;span&gt;8&lt;/span&gt;, U + y * &lt;span&gt;8&lt;/span&gt;), lineTo(U + x * U, U + y * U), stroke();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (y = H = k + E(k++) * &lt;span&gt;25&lt;/span&gt;, R = Q() * W; P = &lt;span&gt;3&lt;/span&gt;, j &amp;lt; H;) J[O++] = [x += T(R) * P + Q() * &lt;span&gt;6&lt;/span&gt; - &lt;span&gt;3&lt;/span&gt;, y += Q() * U - &lt;span&gt;8&lt;/span&gt;, z += T(R - &lt;span&gt;11&lt;/span&gt;) * P + Q() * &lt;span&gt;6&lt;/span&gt; - &lt;span&gt;3&lt;/span&gt;, j / H * &lt;span&gt;20&lt;/span&gt; + ((j += U) &amp;gt; H &amp;amp; Q() &amp;gt; &lt;span&gt;.8&lt;/span&gt; ? Q(P = &lt;span&gt;9&lt;/span&gt;) * &lt;span&gt;4&lt;/span&gt; : &lt;span&gt;0&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;]&lt;br/&gt;        }&lt;br/&gt;        setInterval(&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;G&lt;/span&gt;(&lt;span&gt;m, l&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;            A = T(D - &lt;span&gt;11&lt;/span&gt;);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (l) &lt;span&gt;return&lt;/span&gt; (m[&lt;span&gt;2&lt;/span&gt;] - l[&lt;span&gt;2&lt;/span&gt;]) * A + (l[&lt;span&gt;0&lt;/span&gt;] - m[&lt;span&gt;0&lt;/span&gt;]) * T(D);&lt;br/&gt;            a.clearRect(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, W, W);&lt;br/&gt;            J.sort(G);&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; L = J[i++]; a.drawImage(M[L[&lt;span&gt;3&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;], &lt;span&gt;207&lt;/span&gt; + L[&lt;span&gt;0&lt;/span&gt;] * A + L[&lt;span&gt;2&lt;/span&gt;] * T(D) &amp;gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;, L[&lt;span&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;1&lt;/span&gt;)) {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (i == &lt;span&gt;2e3&lt;/span&gt;) a.fillText(&lt;span&gt;&#x27;Merry Christmas!&#x27;&lt;/span&gt;, U, &lt;span&gt;412&lt;/span&gt;);&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (!(i % &lt;span&gt;7&lt;/span&gt;)) a.drawImage(M[&lt;span&gt;13&lt;/span&gt;], ((&lt;span&gt;157&lt;/span&gt; * (i * i) + T(D * &lt;span&gt;5&lt;/span&gt; + i * i) * &lt;span&gt;5&lt;/span&gt;) % W) &amp;gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;, ((&lt;span&gt;113&lt;/span&gt; * i + (D * i) / &lt;span&gt;60&lt;/span&gt;) % (&lt;span&gt;290&lt;/span&gt; + i / &lt;span&gt;99&lt;/span&gt;)) &amp;gt;&amp;gt; &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;            D += &lt;span&gt;.02&lt;/span&gt;&lt;br/&gt;        }, &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;// end of submission //&lt;/span&gt;&lt;br/&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、在当前目录下用命令行开启开发者热加载工具查看效果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wails dev&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果图来啦，提前祝各位2021圣诞节快乐~：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://cdn.xinchao.com/goods/202112/6082eea0f69486dc233fecde834dd8911920x1080.gif&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、当然我们也可以打包成自己的可执行二进制文件哟：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;wails build&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成的文件放在了build/bin下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实之前我也知道有不少的go桌面应用库，可要么就是效率低，要么就是生产的二进制文件太大，但wails似乎让我看到了新希望，很多简单的桌面级小应用可能会因此而诞生更多。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;06&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;wails中文文档（https://wails.io/zh-Hans/docs/reference/options）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;源码仓库（(https://github.com/wailsapp/wails）&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;p&gt;各位Gopher同学，最近我们社区打算推出一个类似GoCN每日新闻的新栏目《酷Go推荐》，主要是每周推荐一个库或者好的项目，然后写一点这个库使用方法或者优点之类的，这样可以真正的帮助到大家能够学习到&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>84ffef757be316592e4eab72f954b93c</guid>
<title>周路：为什么是ClickHouse？eBay广告数据平台架构实践！</title>
<link>https://toutiao.io/k/k8jn4am</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;156&quot; data-backw=&quot;562&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;156&quot; data-fileid=&quot;100072321&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPjicBGnN2Sv2xfMf0eh07fxe53FSEJr7ogaf9QJMSV0iboV8bKNibavEhvl3VqpqOQVXI1r4kwgIhLjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaUSAw2kMPPtVBmB7tNtfQuXqAxGNFnN1smLgP7xhl6BSWnxSGCcF98A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1804&quot;/&gt;&lt;/p&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: -10px; margin-left: -8px; max-width: 100%; width: 18px; height: 18px; border-top: 8px solid rgb(54, 65, 173); border-left: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-bgopacity=&quot;50%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-style=&quot;max-width: 100%; width: 543.333px; background: rgb(247, 247, 247); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;分享嘉宾：周路 eBay 高级软件工程师&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;编辑整理&lt;/span&gt;&lt;span&gt;：马瑶 传智播客&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;出品平台：DataFunTalk&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; width: 18px; height: 18px; border-bottom: 8px solid rgb(54, 65, 173); border-right: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;本文的主题是基于ClickHouse的广告数据平台架构实践。&lt;/span&gt;&lt;span&gt;包括广告业务面临的现状，为什么会使用&lt;/span&gt;&lt;span&gt;Cl&lt;/span&gt;&lt;span&gt;ick&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;ouse&lt;/span&gt;&lt;span&gt;来提供数据多维分析服务，如何基于&lt;/span&gt;&lt;span&gt;Cl&lt;/span&gt;&lt;span&gt;ick&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;ouse&lt;/span&gt;&lt;span&gt;的优势和特点在适应&lt;/span&gt;&lt;span&gt;亿贝&lt;/span&gt;&lt;span&gt;广告业务场景的前提下&lt;/span&gt;&lt;span&gt;来设计&lt;/span&gt;&lt;span&gt;系统&lt;/span&gt;&lt;span&gt;平台架构，&lt;/span&gt;&lt;span&gt;实践过程中&lt;/span&gt;&lt;span&gt;遇到的技术问题和解决方案，以及数据平台在&lt;/span&gt;&lt;span&gt;日常&lt;/span&gt;&lt;span&gt;使用、&lt;/span&gt;&lt;span&gt;版本&lt;/span&gt;&lt;span&gt;迭代、质量监控过程中是如何去做的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体将围绕以下几部分展开：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;亿贝&lt;/span&gt;&lt;span&gt;广告业务场景介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;选择ClickHouse&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;亿贝广告数据平台建设实践&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;亿贝广告业务场景介绍&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 亿贝广告业务场景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先和大家分享下亿贝的广告业务是什么样的。&lt;/span&gt;&lt;span&gt;我们这里讨论的主要是亿贝第一方卖家广告业务场景。&lt;/span&gt;&lt;span&gt;卖家可以与亿贝合作，通过广告的形式可以给自己商品带来销量，点击，从而提高他们的营业额。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;亿贝的广告形式主要分为两种，一种是基于销量的方式，每帮助卖家成交一笔订单，亿贝都会从中收取相应的广告费；&lt;/span&gt;&lt;span&gt;第二种是基于点击的模式，通过智能推荐的算法可以将不同的商品推荐给不同的用户，然后用户通过点击自己感兴趣的商品形成点击给卖家带来流量，亿贝就会通过这些流量向商家收取一定的广告费用。&lt;/span&gt;&lt;span&gt;所以说在这种场景下给商家提供一个广告项目报表就是必不可少的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;卖家需要了解他在站点广告投放上的表现是怎么样的，主要会通过点击率或者销售率来反应，这些数据都会实时的发生在个人页面上，可以看到用红框标出来的就是广告商品，当页面上发生了广告商品的点击或者曝光，就会伴随一些商品信息，通过建立的数据管道流到分析引擎，然后通过右边这种图展现给卖家，卖家可以对商品进行各个广告维度的分析，从而来指定下个季度或者下个年度的广告策略以及预算。&lt;/span&gt;&lt;span&gt;这个就是主要的业务场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiamFWJDSt46eGL243ytibOib82fC0XsRSg3NtADl1VM9r4ibL2mfH2K7CTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 亿贝广告系统全景图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里是亿贝广告系统架构的全景图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaHj3YKk0wN3BHeBQ4D9sp68VbkeRg70iagn5oiaEtrqu4LiamfXohgEicDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;可以看到亿贝的广告位主要是出现在首页，搜索页，商品页面，推荐栏，移动端。&lt;/span&gt;&lt;span&gt;这部分商品的数据会通过离线和实时两条链路最终流向流入分析引擎，所以亿贝的广告引擎也是典型的lambda架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么会使用离线和实时两条线呢，主要因为电商的数据在时序上会发生一些业务关系，比如一笔订单发生几天后产生退款，这种场景在实时数据流中是比较难处理的，我们会通过离线数据对这种情况进行修正。与此同时，我们也会通过点击对卖家进行收费，这就会产生同行之间的恶性竞争，比如说，卖家会故意点击对手卖家的商品产生不必要的广告费用，我们的系统也会对这种行为进行监控。这种监控逻辑在实时和离线都会存在，但是有一些逻辑还需要离线情况来计算，因此也可以看到，我们是从离线数据看出最终数据一致性的标准。&lt;/span&gt;&lt;span&gt;实时数据需要依赖隔天的离线数据进行修正，这就涉及了离线数据的替换和更新问题，这部分我会在之后详细介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;数据流的计算引擎的分析之后会通过第三方API的方式提供给卖家，同时也会给站内的一些服务提供API接口，也会有UI提供给分析师团队，给他们提供一个市场策略的数据支持。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 面临的挑战&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;亿贝的广告场景给研发团队带来的主要技术挑战有：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首先，亿贝是一个国际化的电商网站，卖家是分布在世界各地的，所以数据也要根据不同的时区展现不同的报表，这个问题在数据量大的情况下做实时分析不是很容易的，常规的解决方案会带来比较大量的数据冗余，我们也是通过利用ClickHouse的一些特点，解决了这个问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第二点是数据规模非常大，我们的规则引擎会承接亿贝站上所有的流量，每天会有百亿级的数据插入，这些流量如果直接接入ClickHouse分布式表的话，肯定是不行的，会对ClickHouse分布式服务器带来大的压力，所以我们是通过一套自研的计算引擎来解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第三点是数据的实时性要求，这个问题同样会根据数据量的增加而变得棘手。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同时由于我们采用的是离线和实时分离lambda 架构，所以离线数据更新的原子性和数据导入的一致性也成为了要解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最后在业务场景下，也会对数据有各种要求，各种业务要求和规则变更也会给版本的迭代带来一些挑战，我们也是通过一些巧妙的设计解决了这些问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;选择ClickHouse&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;. ClickHouse VS Druid&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuia4B76s1KDUVGP16AY1ISfrLWia433a5rsZb4HCO7khWcWYibEyoibYsAFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于druid做的一个分析引擎，是2012年开源的，是 Apache基金会旗下项目，它一直都是以千亿级数据提供亚秒级的查询延迟而闻名，社区比较活跃，为数据导入提供了许多模版，同时支持内建多种数据源。&lt;/span&gt;&lt;span&gt;但是在广告场景下，基于benchmark分析来看，ClickHouse会比druid有许多可取之处。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是数据存储方面，ClickHouse的数据压缩和列式存储会极大节省存储空间，而druid和其他多数数据库都是基于时序的，druid在查询大范围的数据时会出现性能问题，而利用ClickHouse的分区键优化可以有效的解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在查询方面，druid的排序，聚合能力都不太好，灵活性和扩展性也不够，比如缺少join，子查询，主键排序等这些需求。而这些用SQL都可以通过ClickHouse来支持解决。同时ClickHouse也是一个MPP的计算架构，通过主键索引，向量化引擎处理，多处理器并发和分布式查询这些方式，压榨CPU的资源，在数据查询方面具备显著的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除此之外，运维成本也是我们主要考虑的范围之一，Druid的运维是非常复杂的，虽然支持多种数据摄入的组件，但是组件的构成是比较复杂的，节点数量有6种之多，而ClickHouse架构采用的是对等节点的设计，节点就有一种类型，没有主从节点，如果使用副本功能也是也是采用外部的Zookeeper来同步数据段，所以说给运维工作提供了不少便利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据摄入方面，Druid通过引入实时数据的索引，把实时数据处理成一个个分段，并归并到历史数据，成为分段之后的数据是不能写入的，由于并发实时处理的索引数量是有限的，所以我们就设置了三个小时的时间窗口限制索引的任务量，因此超过三个小时时间窗口的数据就没有办法成功写入，同时上游数据延迟，就会造成实时数据的消费过于滞后，这部分数据在实时管道中就会缺失了，而ClickHouse就没有这些问题，再加上自主研发的计算引擎系统，可以很大程度上提高ClickHouse的数据消费能力，最终决定把分析引擎从Druid切换到ClickHouse。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaGAYUUibPrsYDjRqml749mNfeZxIYlSWKTt7Z7M6tGibKjAP5Et09OSDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是ClickHouse和Druid离线数据摄入的时间消耗图对比图。我们是按天来做数据的摄入，每天有百亿级的数据量，可以看到，ClickHouse的数据摄入量时间还是比较稳定的，每天在50分钟就可以完成。而Druid需要更长的时间来完成，它还会受到集群的计算资源的影响，最长可达数十个小时，这对于批量的数据修复和导入工作也会带来一些困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ClickHouse之所以做到这么快，是因为我们把数据的聚合计算和分片逻辑都搬到了Spark上完成，这就降低了ClickHouse在数据摄入过程中的计算资源上的开销，同时也利用了Spark的并行处理能力，这部分我会在之后详细介绍。同时利用Spark处理的中间结果，我们可以做一个数据质量监控和数据回滚的重要标准，所以说这种设计的方案也算是一个一举两得的方案，数据摄入的时间显著降低给平台的升级和架构都带来了很多便利。虽然ClickHouse可以支持分区的API的操作，通过touch或者detouch的操作完全数据迁移，但是它不能利用数据分区和分片逻辑发生重构的场景下，因此我们自研的这个架构可以承担起数据架构升级和数据迁移的一些重任。以上这些好处都是我们采用ClickHouse之后能够获得的。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 表引擎与主键设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看一下在亿贝的场景下采用了ClickHouse的哪些存储引擎可以最大限度发挥它的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuia3yJBI5eOvwjBSBlmib5gvay2zA9BpcgvNBRcVpwNcUvgDdYcvicXMzuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于我们要处理的用户行为数据量非常大，同时这些行为数据通常是在不同维度的聚合表现在报表上，这种聚合主要是一种相加的合并聚合，除此之外为了保证数据的高可用，我们也使用了副本的功能，因此我们使用了ClickHouse的复制汇总合并树来完成这样的存储。我们实时管道会将明细数据插入ClickHouse，然后集群的后台任务会自动将排序键相同并且位于同一分区的数据聚合起来，虽然聚合过程是异步完成的，但是不会影响到我们的查询结果，这样的数据预聚合也极大节省了数据存储量，也节省了存储空间。一般情况下，ClickHouse表的主键和排序键是相同的，但是采用了汇总合并树引擎之后我们可以单独的指定主键，这种场景下我们建议删除不需要排序或者索引功能的维度从主键当中剔除出去，因为主键运行的时候需要全部加载到内存中，尽量减小主键大小，也可以很大程度上提升查询的效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们知道ClickHouse是以文件块作为一个单元存储的，从右图可以看出ClickHouse是通过分区管理文件块，索引的过程也是通过分区键先筛选出目标分区，再通过主键和排序键建立序数索引，快速定位到查询语句所要查询的数据段，Click House用排序键索引来进行跳跃的扫描，所以就建议在建表的时候，把记录在业务生命周期中不变的字段放在排序键，通常是distinct(count())的数据量越小，放的越靠前，这对查询有更好的帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 压缩与低基 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了结合业务场景选用ClickHouse的合并树家族和主键优化之外，我们还对ClickHouse其他一些压缩算法的特性进行了探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuia6eWf1FbmGRkxwnP9AUiadugb6v9s3XQXQF7QWzdIb5icL64QHLnBhcvw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些压缩算法都能显著地减少源数据压缩存储量，这也是ClickHouse列式存储的一大优势，降低查询IO，列式存储也在数据查询中的不同列选择的压缩算法等级，可以在数据压缩和数据查询效率做一个平衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;ClickHouse默认选择的LZ4的压缩算法，除此之外，一般数据列可以选一些压缩率高的算法，比如ZSDT，LZ4HC，对于类似时间序列单调增长的数据可以选用DoubleDelta, Gorilla这种特殊的压缩算法。&lt;/span&gt;&lt;span&gt;在生产数据集上，我们的ZSDT算法对于字符串类型数据压缩效果比较显著，LZ4和LZ4HC是对非字符串类型数据压缩效果比较好，更高的压缩率意味着更小的存储空间，这样可以提高查询的性能，但是对CPU的开销也是很大的，所以数据插入的性能就会受到影响，我们在生产上测试使用了LZ4HC等级6的压缩算法，可以节省30%的存储资源，但是这会对实时数据摄入的效率产生60%左右的降低，所以也需要根据情况选择合适的压缩算法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;对于基数比较低的列，尤其是一些枚举列，可以采用Click House的LowCardinality来降低数据的存储，从而降低整体数据的存储，如果采用压缩算法LowCardinality可以将数据空间缩小25%，这也是我们生产数据的测试结果。&lt;/span&gt;&lt;span&gt;我们也做过极限测试，使用最大压缩率，再配LowCardinality这种方式，可以将原来数据压缩到整体的13%左右。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 商品信息表的实时更新与连接 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些场景需要结合商品的详情给卖家展示投放广告的表现，这些场景主要包括比如卖家想要获得某种商品的表现如何，某个价格区间的商品表现如何，这就需要我们对用户的行为数据结合商品的信息筛选和排序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据分析领域通常会使用宽表的形式来解决这个问题，但是宽表带来的数据膨胀问题也是比较明显的，相比于商品信息的变更，用户行为数据的变更会更加频繁，这会带来非常大的数据量的冗余。除此之外添加商品信息进入用户行为数据的话，也会给整个系统带来各个方面的依赖，同时附带在用户行为数据的商品状态是行为发生时候的状态，并不能满足我们根据商品的现状来产生报表的需求，所以我们最终也是放弃了这种大宽表的解决方案，用维护一张用户信息表来完成需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaQrJcrhhYCagOR6otHrLlnrTdTwpm0iaJx7qF7ic6SVMLXVsI3sCT51Xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;亿贝会持续的采集商品的最新状态，这就涉及到数据的更新问题，Click House在计算更新方面做的并不好，同时也不支持事务，所以我们就另辟蹊径，用ClickHouse中的合并家族树中的替换合并树来完成更新的操作，它可以用预先设定好的聚合条件，将排序键相同的记录聚合起来，我们设定了用专门的一列来记录记录的时间戳，聚合规则选择时间戳最新的记录保留下来，这样仅通过插入的方式就可以完成数据的更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;还有个小问题，我们无法保证它已经完成更新了，因为操作都是在后台的任务中完成的，那么同一时刻可能存在排序键相同的两条记录，针对这个问题我们也是采用了客户端的聚合函数argmax，它就好比是替换合并树中客户端的实现，能够将未合并的数据进行合并，保证我们查询商品记录的一致性。&lt;/span&gt;&lt;span&gt;除此之外，我们也会周期性的采取OPTIMIZE操作，确保ClickHouse能尽可能多的完成数据的合并。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有一种方案是使用聚合合并树，同样也可以实现数据的更新,它的实现就复杂一些，它要求客户端在数据插入之前能知道当前的状态，因为它的更新操作是通过删除和添加完成的，因此在更新之前，需要知道是添加新记录还是删除老记录的前提下，采取添加新记录，所以这种成本是比较高的，我们最终也没有选择这种聚合合并树的实现方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 广告数据架构 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaQjlnV7qO6TgIyMbpPyYuUHtluB9rE4AM9Qm4LWNMFVSABWRfCUickOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;我们再来看一下数据是如何分片的。上图可以看到，我们是对数据进行了水平方向和垂直方向的切分，在水平方向是将数据根据天进行分区，以小时为粒度进行聚合，这就使我们可以支持不同时区的数据查询场景，按天分区可以快速的定位到数据的查询分区，这样就能节省不少计算资源，在竖直方向上我们对数据进行了业务逻辑的分片，因为我们的查询大多是依据卖家的表现进行查询的，将数据根据卖家ID进行分片，不同卖家的数据会落到不同的分片上，这样一来对于充分利用分布式集群资源来提供服务是比较有利的，除此之外，我们的点击表，销量表，展示表也是使用的相同的分区键，这样就可以将表之间的join操作分配的本地服务器去完成，节省了网络资源，也可以提升查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 基于广告业务场景的存储优化 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaywUFc61ptjAxnkbswlVVzmDGCqK5RNMUGzibuftDHxYTtQbYibs0hcRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的数据架构也是经过了踩坑和更新迭代的过程，存储方面我们是采用了商家ID和卖家ID进行数据分片，主要是为了避免查询过程中的数据热点问题，将查询分配到更多的机器上去完成，这就会有一个问题，高的QPS就会使得数据路由到多个节点上去计算，这就会造成大量的网络开销，分布式节点上的计算资源也会很快耗尽，本地节点的计算资源又没有得到充分的利用，这样导致QPS在几百左右就达到了瓶颈。所以我们要将几个请求集中到少数的服务器上进行计算，从而降低网络开销，充分利用副本节点的资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一套方案是单纯基于卖家ID进行数据分片，卖家的查询只会落到一个分片上去计算，QPS得到了显著的提高，这样就很容易到了数千的QPS，因此会带来数据热点问题，对于商品特别多的卖家，比如售卖图书类的卖家，它有上百万的商品（图书）落到节点上会给集群带来热点的压力，虽然QPS高，但是这种极端情况下的延迟高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们又探讨了折中方案，将卖家的数据在时间维度上进行Hash，创建了一个用于分片的辅助列，用来存放行为数据的年周，年周可能是0-53的数据，将卖家的数据平均分配到53个分片上去，这样就避免了对整体集群的查询，同时也避免了数据热点的问题，相当于是在QPS和延迟两个方面做了权衡，QPS也是达到了数千的要求。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;亿贝广告数据平台建设实践&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 系统架构 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;326&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaCOamzTv018frXsCia74cia1YUX2uyGfKGJhicoODnSd9KmSBQD8ViabCag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是广告数据平台系统架构的概览。&lt;/span&gt;&lt;span&gt;可以看到我们使用了非常多的大数据技术栈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;离线部分主要是基于Hadoop生态。离线明细数据会在T+1天的时间就绪，我们用Spark定义了通用数据处理任务，通用任务是可以配置的，这个配置主要是建立HDFS上的字段和ClickHouse表中的字段的关系，当有新的click表需要接入的时候，可以通过配置文件的方式，尽快完成上线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ETL的任务调度我们采用了Spring batch的技术栈，它具备成熟的任务调度面板可以通过UI配置日常任务和数据的修正任务。&lt;/span&gt;&lt;span&gt;在Spark任务提交方面我们是采用了LIVY服务器，可以提高job调度管理的效率，也是提供Spark集群交互的API接口，我们能灵活的监控批处理触发的任务， 一般也会有一个Spark Cluster的解决方案， 这种解决方案对系统的耦合度会比较高，像这种方案就可以单独把LIVY Server分离出来，可以服务于其它平台的任务调度需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在在线数据方面，我们采用的是Kafka生态下的技术栈，通过Flink消费上游kafka Topic中的事件进行数据装配，再通过定制的ClickHouse的JDBC再将数据插入ClickHouse。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;在离线和实时部分都没有采用ClickHouse原生的JDBC，主要也是为了提高数据的摄入和稳定性，这部分我们也会在之后详细介绍。&lt;/span&gt;&lt;span&gt;这里的技术栈主要是使用了kafka和airflow，kafka主要用于实时数据摄入过程中的缓冲和预计算，airflow主要负责离线数据摄入的调度，它以clickhouse的副本节点为单元控制数据摄入的进度，这里需要强调的是，我们把离线数据摄入的调度。业务方面的调度，实际的ClickHouse的数据摄入任务调度解耦开来，主要也是提供一个平台化的服务，这样ClickHouse可以承接除了广告需求之外的其他分析需求的数据摄入，那么我们的数据调度，业务也可以调度一些任务去完成除了ClickHouse之外其他存储的数据摄入的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 实时数据写入 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里我们再来介绍一下实时数据摄入是如何实现的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaDgS7hArfTrpXBgj29YiaToaHlAetJk5KiaoVuddljAB4Qicr5hjom8H4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据摄入是kafka搭建的外部计算系统。首先将数据按业务进行分片，由kafka直接写入ClickHouse集群的各个本地表，一个分片上的数据对应kafka的一个主题，为了保证足够的数据吞吐量，kafka每个主题的分区个数都要大于ClickHouse的副本个数，这样做的目的是可以保证，ClickHouse的副本可以并行的形式消费同一主题下的记录，如果kafka的节点或者ClickHouse副本节点产生宕机，kafka集群可以通过rebalance的形式保证系统的高可用，这种方案具备更好地写入性能，因为每个分片的数据都是被并行点对点写入的，将数据吞吐量也是均摊到所有ClickHouse节点上，给我们的系统扩容也带来的极大的灵活性，通过目前的方案我们实现了百万级每秒的数据吞吐量，跟源系统的延时也是控制到秒级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 离线替换系统架构 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaevlwW5iabSHMtX7kIzJbKwo1xCo2gHhhggXWvkf61GiaYUgO2F7Cv3yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;上图&lt;span&gt;是我们离线数据摄入的架构图。&lt;/span&gt;&lt;span&gt;我们的批处理任务分为两种类型，一种是日常的数据摄入，一种是历史数据的修正，包括数据迁移。用户可以通过批处理控制不同的优先级批处理任务，然后定时的进程会拉起优先级较高的批处理任务优先处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;离线数据摄入的第一步是锁定ClickHouse的space, 在这一阶段click的space确认不会发生表结构或数据分布的变化，那这一操作不会影响实时数据，也不会影响查询。随后批处理任务调度会获取click space的分片信息，并通过LIVY服务器传给ETL任务，然后成功触发ETL任务并且来监控它的状态。Spark任务在这里的作用主要是预分片和预聚合，它会根据预分配好的任务在Spark任务中完成不同维度的数据聚合，并将数据根据分片的信息写到对应的文件目录。从右下角这幅图可以看出，每个文件目录对应几个分片，每个任务会生成文件的详情，就是包含的具体的分片信息，或者对应这个文件下哪些数据，这些数据的一些详情，这些会通过后续的数据导入过程提交的数据摄入任务调度。数据摄入调度会根据这个详情把这些数据摄入任务分配给ClickHouse的每个副本节点，副本节点在接收到任务后，会到指定目录下拉取文件到本地，再通过ClickHouse的client导入数据。我们会将每个分片的数据按照副本的个数进行倍数的均分，使得每个节点都能获得相同数量的导入任务，通过这种方式我们也是将离线数据的摄入吞吐量与系统架构解耦，充分利用Spark并行处理的优势，同时能够通过扩充副本的数量来灵活控制数据摄入的速率。在完成了数据摄入步骤之后，数据摄入任务调度会按照节点来完成数据质量验证，这一环节也是通过比对数据导入之前的输出详情与实际导入的结果完成的，所以我们的离线数据摄入分为两个环节，一个是Spark job的预处理环节，还有一个是ClickHouse的数据摄入，用户可以通过各个带服务的UI来监控任务的进度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 分区数据替换 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaYqiaQ6epGRJ8vrdgnxxeibKxia405ndLuWM0j3OzboAo91XZcHzQicd9iaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;现在讲一下离线数据更新是如何保证大规模的数据一致性的。&lt;/span&gt;&lt;span&gt;离线数据和实时数据相比会有一天的延时，用户看到最近一天的数据都是实时数据。之前数据架构环节我们提到数据的分区是按天为粒度来进行分区的，因此这种方式也是将实时数据和离线数据隔离开来了。这部分离线数据替换主要是发生副本节点通过ClickHouse的client的数据导入阶段，副本节点首先会将HDFS上的文件下载到本地节点，随后在本地创建一个ClickHouse的临时表，将数据通过ClickHouse的client导入到临时表中，再通过分区的API atouch的detouch将临时表的分区添加进主表，所以我们是叫数据替换是因为我们完成的是分区的替换，而不是数据记录的更新。在这个过程中导入的离线数据对用户目前是不可见的，因为我们是通过版本控制来完成数据可见性的控制，通过上面的过程，我们就完成了离线数据的导入。数据导入过程本身不会花费太长时间，因为并行度比较大，主要的时间消耗是逐表数据的验证上，当数据出现质量问题，我们也会通过重试来完成数据的导入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. 数据替换的原子性 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaib0GuWN29weQF7OzI193NZeibywpIhaiaDwlH4qExMGy95zeFODBMz3cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;我们再来看一下不同版本的数据对于用户的可见是如何实现的。&lt;/span&gt;&lt;span&gt;因为我们这里处理的是线上系统，ClickHouse又是一个集群的部署方式，这就使得我们不能保证同一时间完成所有节点的数据替换。对于用户而言，是没有办法接受查询结果是不断变的，因此我们就需要做到数据替换过程的原子性。刚才已经介绍了我们如何使用ClickHouse的分区数据来进行插入的，对于数据的可见性，我们使用了ClickHouse的内存字典。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;字典中包含了两个列，分别是A和B，它们记录了最近两次数据替换之后的数据版本，我们把它称做版本列，另外一列叫active列，它记录了每个分区当前活跃版本所在的版本列。那这样每次我们进行数据替换，数据的版本号替换到非活跃版本列，原子操作完成的主要方式就是将active列指向非活跃的版本列，这样就可以实现数据离线替换的原子性，同时提供了数据版本回退的能力。因为我们有不同版本的数据，一旦线上的监控系统发现有数据问题，也可以在很短的时间回退到上一版本。这里的数据版本是作为一个特殊的列存在于每个数据表中的，查询的时候会指定版本号，可以通过dictGetOrDefault的方式来实现，用ClickHouse的条件优化关键词PREWHERE预先指定版本。这样在查询结果中，就可以只包含活跃的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家可能会注意到我们这种离线数据替换方式会带来一个问题，如果持续替换一个数据分区会引入许多无用的分区数据。在查询过程中，首先会通过PREWHERE扫描活跃的版本，这就意味着版本数越多，扫描时间越长。我们也是设置了一个定时的任务，来定期清理不需要的数据版本。在查询语句上也做了优化，之前是在字典上维护活跃版本的，所查询的数据需要下发到各个节点上才能查到当前数据的活跃版本，后来我们是将字典迁移到分布式数据表中，查询的时候就可以在分布式表中率先获得版本号，再通过GLOBAL IN这种方式下将分区键下发到各个节点。这样做的好处就是利用 ClickHouse的分区键索引可以跳过以往的数据版本，直接定位到最新的数据版本，也是通过这种方式，我们的查询延迟也是得到了进一步的优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. Zookeeper压力问题与解决方案 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaanfws4PYAR8rm4iaNc3rKsI7Edsr4tbh9CSqDvmjOJUYdP1FwMvbPcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;由于离线数据和实时数据的摄入都是通过本地表完成的，那数据的全局同步和复制任务主要由Zookeeper来完成，在数据摄入体量很大的情况下，就给Zookeeper带来了巨大的压力。ClickHouse不是一个完全的分布式系统，同时也不是一个典型的MPP架构，它与传统的MPP架构相比缺少了全局的元数据管理，如果想扩展任务到多个节点，还需要借助外部组件的一些协同。ClickHouse的协同能力是比较弱的，没有中心节点就会导致很多问题，比如数据的同步和复制都是依赖外部的Zookeeper集群来完成的。我们在第一版本中也遇到了由于Zookeeper压力太大造成的一些系统问题，从ClickHouse这端反应出来的就是与Zookeeper的会话频繁超时，某些副本的本地表停留在只读模式，还有就是ClickHouse的操作发生超时，从Zookeeper集群这端观察到的就是不断的断开网络连接，尝试重连，疯狂打印建立连接的日志，这对数据查询不会造成影响，但是会对实时和离线的数据摄入带来隐患，主要体现就是离线数据替换无法成功导入或者成功同步而失败。那实时数据如果无法成功插入数据，多次尝试之后，会去消费者节点的触发kafka分区的rebalance, 将当前的分区重新分配到ClickHouse的其它副本节点尝试插入，这种错误不会经常发生，我们可以通过重试最终将数据导入，对数据的摄入效率就带来了很大的影响，这个问题主要原因在于Zookeeper的性能会根据客户端的连接数的增多而极度下降，在我们的系统中会有数千个Zookeeper的客户端连接，ClickHouse的操作需要借助Zookeeper的协同，而Zookeeper的压力过大就会造成操作超时，如果Zookeeper的操作超时就会造成会话超时，因为在超时之后，Zookeeper会尝试重连ClickHouse,重建会话，这就进一步加大了Zookeeper的压力，最后就会引发雪球效应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解决这个问题的方案可以设置operationtimeout，尽量减少不必要的全局操作，这些操作都可以缓解压力，但是如果真正是一个治本的方案，我们还是要解决Zookeeper中心压力的问题，我们将Zookeeper的集群进行进一步拆分，不同的集群管理不同的分片，通过这种方式降低了Zookeeper的压力，也解决了这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;7. 数据替换的一致性保证 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuia0cjvFKBOT1feDmWcCJx9pqicxz0rTLAiaXy772d625F4QCicficOAxXhZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;我们再来看一下系统中是如何把控数&lt;/span&gt;&lt;span&gt;据质量的。&lt;/span&gt;&lt;span&gt;可以看到数据质量会在各个阶段进行把控。&lt;/span&gt;&lt;span&gt;刚才提到数据任务调度组件会对Spark数据的输出进行校验，数据插入组件也会在数据替换时将临时表和预处理的数据进行比对，数据摄入后，也会有数据质量监控平台对线上数据各个生命周期的数据进行监控，一旦有问题也是做到及时预警，也是及时控制版本，尽量避免线上版本的数据发生错误的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;8. 基于ClickHouse的广告应用架构 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuialib20wjXUfHIsM6nf72vibmIlWJGEcxk3Q2ibicspTQ5SM4r0PkkEwr7Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;上图&lt;span&gt;是一个整个的查询架构。我们会统一的提供数据访问层对外提供API，数据查询主要是分为同步和异步两种调用方式，数据引擎是&lt;/span&gt;&lt;span&gt;ClickHouse&lt;/span&gt;&lt;span&gt;，查询服务层会将请求发给ClickHouse来进行查询，我们遇到一些QPS比较高的需求或者是做一些聚合度比较高的查询，这种需求对ClickHouse引擎不是很友好，我们也会集成一些其它的数据存储，补全ClickHouse在服务端的一些短板，所以我们通过查询服务层将查询路由到适合的数据存储引擎上来完成一次数据的查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;9. 测试与发布 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaxnnqXD3fyBQKiaHAX80U5bbibia51yhf16ziaA37icmaTiaPficKLmQxibOHGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后再介绍一下系统的测试和发布。每当有大版本数据更替的时候，会存在一个双数据源的阶段，流量通过将老数据源切换到新数据源的方式来完成发布。拿第一次升级来举例，在查询应用中集成镜像转发的依赖，将生产中的查询镜像到新版本的查询服务上，这两个镜像调用都会被最终返回到镜像的服务器上，通过比对镜像服务器上的结果来判断系统的状态，从而确保系统发布的质量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享嘉宾：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPhWMlBuiaIwp0rxvNRoJ8xuiaNN81uDMgHQwX8CIAbL5hrOLsPmpwvGXDsQeMSauJpHWVn2lgfJeTeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于我们：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DataFun：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请近1000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章500+，百万+阅读，12万+精准粉丝。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1NTMyOTI4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPgiaIKm4YqA09u83TvzKbfsabjfX1TLzaXLAK9MWmC4qI6cuTBJnxygZLZPU49O8g6j8QI9264NMqQ/0?wx_fmt=png&quot; data-nickname=&quot;DataFunTalk&quot; data-alias=&quot;datafuntalk&quot; data-signature=&quot;专注于大数据、人工智能技术应用的分享与交流。致力于成就百万数据科学家。定期组织技术分享直播，并整理大数据、推荐/搜索算法、广告算法、NLP 自然语言处理算法、智能风控、自动驾驶、机器学习/深度学习等技术应用文章。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;🧐&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;，给个&lt;strong&gt;3连击&lt;/strong&gt;呗！&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>