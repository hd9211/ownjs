<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3dcd3cbcd08f8a20ae9e2eece5ba3ad3</guid>
<title>详解内存对齐</title>
<link>https://toutiao.io/k/1zldbav</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;欢迎大家点击上方文字「Golang梦工厂」关注公众号，设为星标，第一时间接收推送文章。&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈喽，大家好，我是&lt;code&gt;asong&lt;/code&gt;。好久不见，上周停更了一周，因为工作有点忙，好在这周末闲了下来，就赶紧来肝文喽。今天我们来聊一聊一道常见的面试八股文——内存对齐，我们平常在业务开发中根本不&lt;code&gt;care&lt;/code&gt;内存对齐，但是在面试中，这就是一个高频考点，今天我们就一起来看一看到底什么是内存对齐。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前情概要&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在了解内存对齐之前，先来明确几个关于操作系统的概念，更加方面我们对内存对齐的理解。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;内存管理：我们都知道内存是计算中重要的组成之一，内存是与&lt;code&gt;CPU&lt;/code&gt;进行沟通的桥梁，用于暂存&lt;code&gt;CPU&lt;/code&gt;中的运算数据、以及与硬盘等外部存储器交换的数据。早期，程序是直接运行在物理内存上的，直接操作物理内存，但是会存在一些问题，比如使用效率低、地址空间不隔离等问题，所以就出现了虚拟内存，虚拟内存就是在程序和物理内存之间引入了一个中间层，这个中间层就是虚拟内存，这样就达到了对进程地址和物理地址的隔离。在&lt;code&gt;linux&lt;/code&gt;系统中，将虚拟内存划分为&lt;code&gt;用户空间&lt;/code&gt;和&lt;code&gt;内核空间&lt;/code&gt;，用户进程只能访问用户空间的虚拟地址，只有通过系统调用、外设中断或异常才能访问内核空间，我们主要来看一下用户空间，用户空间被分为&lt;code&gt;5&lt;/code&gt;个不同内存区域：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.46234676007005254&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMoiaaYb1rbeEtysEZhxVIoskuWkaebZqribrRmftrqTzpWl0qXZIchj6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;/figure&gt;&lt;p&gt;内存的知识先介绍个大概，对于本文的理解应该够了，我们接着介绍操作系统几个其他概念。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;代码段：存放可执行文件的操作指令，只读&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据段：用来存放可执行文件中已初始化全局变量，存放静态变量和全局变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;BSS段：用来存未初始化的全局变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;栈区：用来存临时创建的局部变量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;堆区：用来存动态分配的内存段&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;：中央处理单元（Cntral Pocessing Unit）的缩写，也叫处理器；&lt;code&gt;CPU&lt;/code&gt;是计算机的运算核心和控制核心，我们人类靠着大脑思考，电脑就是靠着&lt;code&gt;CPU&lt;/code&gt;来运算、控制，起到协调和控制作用，从功能来看，CPU 的内部由寄存器、控制器、运算器和时钟四部分组成，各部分之间通过电信号连通。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt;和内存的工作关系：当我们执行一个程序时，首先由输入设备向&lt;code&gt;CPU&lt;/code&gt;发出操作指令，&lt;code&gt;CPU&lt;/code&gt;接收到操作指令后，硬盘中对应的程序就会被直接加载到内存中，此后，CPU 再对内存进行寻址操作，将加载到内存中的指令翻译出来，而后发送操作信号给操作控制器，实现程序的运行或数据的处理。存在于内存中的目的就是为了&lt;code&gt;CPU&lt;/code&gt;能够过总线进行寻址，取指令、译码、执行取数据，内存与寄存器交互，然后&lt;code&gt;CPU&lt;/code&gt;运算，再输出数据至内存。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3391384051329056&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjM8Vmq6HlGKz3VIFeYvuJZyRgplno6v2s7WsxKqzY0haxAtibFBzuKMYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2182&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;os&lt;/code&gt;：&lt;code&gt;os&lt;/code&gt;全称为&lt;code&gt;Operating System&lt;/code&gt;，也就是操作操作系统，是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务组织用户交互的相互关联的系统软件，同时也是计算机系统的内核与基石。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的主要工作流程：源代码 (source code) → 预处理器(preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序(executables)。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写在最后的一个知识点：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;计算机中，最小的存储单元为字节，理论上任意地址都可以通过总线进行访问，每次寻址能传输的数据大小就跟&lt;code&gt;CPU&lt;/code&gt;位数有关。常见的&lt;code&gt;CPU&lt;/code&gt;位数有8位，16位，32位，64位。位数越高，单次操作执行的数据量越大，性能也就越强。&lt;code&gt;os&lt;/code&gt;的位数一般与&lt;code&gt;CPU&lt;/code&gt;的位数相匹配，&lt;code&gt;32&lt;/code&gt;位&lt;code&gt;CPU&lt;/code&gt;可以寻址&lt;code&gt;4&lt;/code&gt;GB内存空间，也可以运行&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;os&lt;/code&gt;，同样道理，&lt;code&gt;64&lt;/code&gt;位的&lt;code&gt;CPU&lt;/code&gt;可以运行&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;os&lt;/code&gt;，也可以运行64位的&lt;code&gt;os&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;何为内存对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下内容来源于网络总结：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;现代计算机中内存空间都是按照字节(byte)进行划分的，所以从理论上讲对于任何类型的变量访问都可以从任意地址开始，但是在实际情况中，在访问特定类型变量的时候经常在特定的内存地址访问，所以这就需要把各种类型数据按照一定的规则在空间上排列，而不是按照顺序一个接一个的排放，这种就称为内存对齐，内存对齐是指首地址对齐，而不是说每个变量大小对齐。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为何要有内存对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要原因可以归结为两点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有些&lt;code&gt;CPU&lt;/code&gt;可以访问任意地址上的任意数据，而有些&lt;code&gt;CPU&lt;/code&gt;只能在特定地址访问数据，因此不同硬件平台具有差异性，这样的代码就不具有移植性，如果在编译时，将分配的内存进行对齐，这就具有平台可以移植性了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;CPU&lt;/code&gt;每次寻址都是要消费时间的，并且&lt;code&gt;CPU&lt;/code&gt; 访问内存时，并不是逐个字节访问，而是以字长（word size）为单位访问，所以数据结构应该尽可能地在自然边界上对齐，如果访问未对齐的内存，处理器需要做两次内存访问，而对齐的内存访问仅需要一次访问，内存对齐后可以提升性能。举个例子：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;假设当前&lt;code&gt;CPU&lt;/code&gt;是&lt;code&gt;32&lt;/code&gt;位的，并且没有内存对齐机制，数据可以任意存放，现在有一个&lt;code&gt;int32&lt;/code&gt;变量占&lt;code&gt;4byte&lt;/code&gt;，存放地址在&lt;code&gt;0x00000002 - 0x00000005&lt;/code&gt;(纯假设地址，莫当真)，这种情况下，每次取&lt;code&gt;4&lt;/code&gt;字节的&lt;code&gt;CPU&lt;/code&gt;第一次取到&lt;code&gt;[0x00000000 - 0x00000003]&lt;/code&gt;，只得到变量&lt;code&gt;1/2&lt;/code&gt;的数据，所以还需要取第二次，为了得到一个&lt;code&gt;int32&lt;/code&gt;类型的变量，需要访问两次内存并做拼接处理，影响性能。如果有内存对齐了，&lt;code&gt;int32&lt;/code&gt;类型数据就会按照对齐规则在内存中，上面这个例子就会存在地址&lt;code&gt;0x00000000&lt;/code&gt;处开始，那么处理器在取数据时一次性就能将数据读出来了，而且不需要做额外的操作，使用空间换时间，提高了效率。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有内存对齐机制：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3530571992110454&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMoBTElIUZQ88mXf13t0WNUhFDIaynjlQPJ6vuiaQRqvkEYpWI22YR7EA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2028&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内存对齐后：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5077821011673151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMPbm8rWME4MIElD0s8LvaibpH3Aat2Ykf9RoS7ha4DzBFyVn2rwLLEcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1028&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;对齐系数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个特定平台上的编译器都有自己的默认&quot;对齐系数&quot;，常用平台默认对齐系数如下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这只是默认对齐系数，实际上对齐系数我们是可以修改的，之前写&lt;code&gt;C&lt;/code&gt;语言的朋友知道，可以通过预编译指令&lt;code&gt;#pragma pack(n)&lt;/code&gt;来修改对齐系数，因为&lt;code&gt;C&lt;/code&gt;语言是预处理器的，但是在&lt;code&gt;Go&lt;/code&gt;语言中没有预处理器，只能通过&lt;code&gt;tags&lt;/code&gt;和&lt;code&gt;命名约定&lt;/code&gt;来让&lt;code&gt;Go&lt;/code&gt;的包可以管理不同平台的代码，但是怎么修改对齐系数，感觉&lt;code&gt;Go&lt;/code&gt;并没有开放这个参数，找了好久没有找到，等后面再仔细看看，找到了再来更新！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然对齐系数无法更改，但是我们可以查看对齐系数，使用&lt;code&gt;Go&lt;/code&gt;语言中的&lt;code&gt;unsafe.Alignof&lt;/code&gt;可以返回相应类型的对齐系数，使用我的mac（64位）测试后发现，对齐系数都符合&lt;code&gt;2^n&lt;/code&gt;这个规律，最大也不会超过&lt;code&gt;8&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;string alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)))&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;complex128 alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;complex128&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)))&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;int alignof is %d\n&quot;&lt;/span&gt;, unsafe.Alignof(&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)))&lt;br/&gt;}&lt;br/&gt;运行结果&lt;br/&gt;&lt;span&gt;string&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;complex128&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; alignof is &lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：不同硬件平台占用的大小和对齐值都可能是不一样的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;结构体的内存对齐规则&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一提到内存对齐，大家都喜欢拿结构体的内存对齐来举例子，这里要提醒大家一下，不要混淆了一个概念，其他类型也都是要内存对齐的，只不过拿结构体来举例子能更好的理解内存对齐，并且结构体中的成员变量对齐有自己的规则，我们需要搞清这个对齐规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;C语言&lt;/code&gt;的对齐规则与&lt;code&gt;Go&lt;/code&gt;语言一样，所以&lt;code&gt;C语言&lt;/code&gt;的对齐规则对&lt;code&gt;Go&lt;/code&gt;同样适用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于结构体的各个成员，第一个成员位于偏移为&lt;code&gt;0&lt;/code&gt;的位置，结构体第一个成员的偏移量(offset)为&lt;code&gt;0&lt;/code&gt;，以后每个成员相对于结构体首地址的&lt;code&gt;offset&lt;/code&gt;都是该成员大小与有效对齐值中较小那个的整数倍，如有需要编译器会在成员之间加上填充字节。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了结构成员需要对齐，结构本身也需要对齐，结构的长度必须是编译器默认的对齐长度和成员中最长类型中最小的数据大小的倍数对齐。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;举个例子&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的对齐规则，我们来分析一个例子，加深理解：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 64位平台，对齐参数是8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; User &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; A &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; B []&lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 24&lt;/span&gt;&lt;br/&gt; C &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt; D &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; u User&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;u1 size is &quot;&lt;/span&gt;,unsafe.Sizeof(u))&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 运行结果&lt;/span&gt;&lt;br/&gt;u size is  &lt;span&gt;56&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我的&lt;code&gt;mac&lt;/code&gt;是&lt;code&gt;64&lt;/code&gt;位的，对齐参数是&lt;code&gt;8&lt;/code&gt;，&lt;code&gt;int32&lt;/code&gt;、&lt;code&gt;[]int32&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;bool&lt;/code&gt;对齐值分别是&lt;code&gt;4&lt;/code&gt;、&lt;code&gt;8&lt;/code&gt;、&lt;code&gt;8&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;，占用内存大小分别是&lt;code&gt;4&lt;/code&gt;、&lt;code&gt;24&lt;/code&gt;、&lt;code&gt;16&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;，我们先根据第一条对齐规则分析&lt;code&gt;User&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一个字段类型是&lt;code&gt;int32&lt;/code&gt;，对齐值是4，大小为4，所以放在内存布局中的第一位.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二个字段类型是&lt;code&gt;[]int32&lt;/code&gt;，对齐值是8，大小为&lt;code&gt;24&lt;/code&gt;，按照第一条规则，偏移量应该是成员大小&lt;code&gt;24&lt;/code&gt;与对齐值&lt;code&gt;8&lt;/code&gt;中较小那个的整数倍，那么偏移量就是&lt;code&gt;8&lt;/code&gt;，所以&lt;code&gt;4-7&lt;/code&gt;位会由编译进行填充，一般为&lt;code&gt;0&lt;/code&gt;值，也称为空洞，第&lt;code&gt;9&lt;/code&gt;到&lt;code&gt;32&lt;/code&gt;位为第二个字段&lt;code&gt;B&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三个字段类型是&lt;code&gt;string&lt;/code&gt;，对齐值是&lt;code&gt;8&lt;/code&gt;，大小为&lt;code&gt;16&lt;/code&gt;，所以他的内存偏移值必须是8的倍数，因为&lt;code&gt;user&lt;/code&gt;前两个字段就已经排到了第&lt;code&gt;32&lt;/code&gt;位，所以&lt;code&gt;offset&lt;/code&gt;为&lt;code&gt;32&lt;/code&gt;正好是&lt;code&gt;8&lt;/code&gt;的倍数，不要填充，从&lt;code&gt;32&lt;/code&gt;位到&lt;code&gt;48&lt;/code&gt;位是第三个字段&lt;code&gt;C&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四个字段类型是&lt;code&gt;bool&lt;/code&gt;，对齐值是&lt;code&gt;1&lt;/code&gt;，大小为&lt;code&gt;1&lt;/code&gt;，所以他的内存偏移值必须是&lt;code&gt;1&lt;/code&gt;的倍数，因为&lt;code&gt;user&lt;/code&gt;前两个字段就已经排到了第&lt;code&gt;48&lt;/code&gt;位，所以下一位的偏移量正好是&lt;code&gt;48&lt;/code&gt;，正好是字段&lt;code&gt;D&lt;/code&gt;的对齐值的倍数，不用填充，可以直接排列到第四个字段，也就是从&lt;code&gt;48&lt;/code&gt;到第&lt;code&gt;49&lt;/code&gt;位是第三个字段&lt;code&gt;D&lt;/code&gt;.&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据第一条规则分析后，现在结构所占大小为&lt;code&gt;49&lt;/code&gt;字节，我们再来根据第二条规则分析：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据第二条规则，默认对齐值是&lt;code&gt;8&lt;/code&gt;，字段中最大类型程度是&lt;code&gt;24&lt;/code&gt;，所以求出结构体的对齐值是&lt;code&gt;8&lt;/code&gt;，我们目前的内存长度是&lt;code&gt;49&lt;/code&gt;，不是&lt;code&gt;8&lt;/code&gt;的倍数，所以需要补齐，所以最终的结果就是&lt;code&gt;56&lt;/code&gt;，补了&lt;code&gt;7&lt;/code&gt;位。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2578890097932535&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMg0rYBwBDVQgicPibhiaCGCgqGBYc4KVRkV4O4riceF6O0OPl2zSYm9dnYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1838&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;成员变量顺序对内存对齐带来的影响&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的规则我们可以看出，成员变量的顺序也会影响内存对齐的结果，我们先来看一个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; test1 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; c &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; test2 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;int32&lt;/span&gt; &lt;span&gt;// 4&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;string&lt;/span&gt; &lt;span&gt;// 16&lt;/span&gt;&lt;br/&gt; c &lt;span&gt;bool&lt;/span&gt; &lt;span&gt;// 1&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; t1 test1&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; t2 test2&lt;br/&gt;&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;t1 size is &quot;&lt;/span&gt;,unsafe.Sizeof(t1))&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;t2 size is &quot;&lt;/span&gt;,unsafe.Sizeof(t2))&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;t1 size is  &lt;span&gt;24&lt;/span&gt;&lt;br/&gt;t2 size is  &lt;span&gt;32&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;test1&lt;/code&gt;的内存布局：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44967880085653106&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMpQJYpb7jA3dozbqjibKibevxb8ycvibO6OjJv1ibDWvTk4aDOClQWQMZUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;934&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;test2&lt;/code&gt;的内存布局：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.335559265442404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjMETZF8SZLlday73gL8XtRz6nwmPuRCjZHJUA9qZdZUErAfx3ygu7E7g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上分析，我们可以看出，结构体中成员变量的顺序会影响结构体的内存布局，所以在日常开发中大家要注意这个问题，可以节省内存空间。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;空结构体字段对齐&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Go&lt;/code&gt;语言中空结构体的大小为&lt;code&gt;0&lt;/code&gt;，如果一个结构体中包含空结构体类型的字段时，通常是不需要进行内存对齐的，举个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; demo1 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;struct&lt;/span&gt;{}&lt;br/&gt; b &lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Println(unsafe.Sizeof(demo1{}))&lt;br/&gt;}&lt;br/&gt;运行结果：&lt;br/&gt;&lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从运行结果可知结构体&lt;code&gt;demo1&lt;/code&gt;占用的内存与字段&lt;code&gt;b&lt;/code&gt;占用内存大小相同，所以字段&lt;code&gt;a&lt;/code&gt;是没有占用内存的，但是空结构体有一个特例，那就是当 &lt;code&gt;struct{}&lt;/code&gt; 作为结构体最后一个字段时，需要内存对齐。因为如果有指针指向该字段, 返回的地址将在结构体之外，如果此指针一直存活不释放对应的内存，就会有内存泄露的问题（该内存不因结构体释放而释放），所以当&lt;code&gt;struct{}&lt;/code&gt;作为结构体成员中最后一个字段时，要填充额外的内存保证安全。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; demo2 &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; a &lt;span&gt;int32&lt;/span&gt;&lt;br/&gt; b &lt;span&gt;struct&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;  {&lt;br/&gt; fmt.Println(unsafe.Sizeof(demo2{}))&lt;br/&gt;}&lt;br/&gt;运行结果：&lt;br/&gt;&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;考虑内存对齐的设计&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在之前的文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkyNzI1NzM5NQ==&amp;amp;mid=2247484784&amp;amp;idx=1&amp;amp;sn=368be2e2003b85f0e26337b566d0ebde&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;源码剖析sync.WaitGroup&lt;/strong&gt;&lt;/a&gt;分析&lt;code&gt;sync.waitgroup&lt;/code&gt;的源码时，使用&lt;code&gt;state1&lt;/code&gt;来存储状态：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// A WaitGroup must not be copied after first use.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; WaitGroup &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; noCopy noCopy&lt;br/&gt;&lt;br/&gt; &lt;span&gt;// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// 64-bit atomic operations require 64-bit alignment, but 32-bit&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// compilers do not ensure it. So we allocate 12 bytes and then use&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// the aligned 8 bytes in them as state, and the other 4 as storage&lt;/span&gt;&lt;br/&gt; &lt;span&gt;// for the sema.&lt;/span&gt;&lt;br/&gt; state1 [&lt;span&gt;3&lt;/span&gt;]&lt;span&gt;uint32&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;state1&lt;/code&gt;这里总共被分配了&lt;code&gt;12&lt;/code&gt;个字节，这里被设计了三种状态：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;其中对齐的&lt;code&gt;8&lt;/code&gt;个字节作为状态，高&lt;code&gt;32&lt;/code&gt;位为计数的数量，低&lt;code&gt;32&lt;/code&gt;位为等待的&lt;code&gt;goroutine&lt;/code&gt;数量&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其中的&lt;code&gt;4&lt;/code&gt;个字节作为信号量存储&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提供了&lt;code&gt;(wg *WaitGroup) state() (statep *uint64, semap *uint32)&lt;/code&gt;帮助我们从&lt;code&gt;state1&lt;/code&gt;字段中取出他的状态和信号量，为什么要这样设计呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为&lt;code&gt;64&lt;/code&gt;位原子操作需要&lt;code&gt;64&lt;/code&gt;位对齐，但是&lt;code&gt;32&lt;/code&gt;位编译器不能保证这一点，所以为了保证&lt;code&gt;waitGroup&lt;/code&gt;在&lt;code&gt;32&lt;/code&gt;位平台上使用的话，就必须保证在任何时候，&lt;code&gt;64位&lt;/code&gt;操作不会报错。所以也就不能分成两个字段来写，考虑到字段顺序不同、平台不同，内存对齐也就不同。因此这里采用动态识别当前我们操作的&lt;code&gt;64&lt;/code&gt;位数到底是不是在&lt;code&gt;8&lt;/code&gt;字节对齐的位置上面，我们来分析一下&lt;code&gt;state&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;// state returns pointers to the state and sema fields stored within wg.state1.&lt;br/&gt;func (wg *WaitGroup) state() (statep *uint64, semap *uint32) {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; uintptr(unsafe.Pointer(&amp;amp;wg.state1))%8 == 0 {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (*uint64)(unsafe.Pointer(&amp;amp;wg.state1)), &amp;amp;wg.state1[2]&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (*uint64)(unsafe.Pointer(&amp;amp;wg.state1[1])), &amp;amp;wg.state1[0]&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当数组的首地址是处于一个&lt;code&gt;8&lt;/code&gt;字节对齐的位置上时，那么就将这个数组的前&lt;code&gt;8&lt;/code&gt;个字节作为&lt;code&gt;64&lt;/code&gt;位值使用表示状态，后&lt;code&gt;4&lt;/code&gt;个字节作为&lt;code&gt;32&lt;/code&gt;位值表示信号量(&lt;code&gt;semaphore&lt;/code&gt;)。同理如果首地址没有处于&lt;code&gt;8&lt;/code&gt;字节对齐的位置上时，那么就将前&lt;code&gt;4&lt;/code&gt;个字节作为&lt;code&gt;semaphore&lt;/code&gt;，后&lt;code&gt;8&lt;/code&gt;个字节作为&lt;code&gt;64&lt;/code&gt;位数值。画个图表示一下：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5285935085007728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB9yjanQM1sHghbXarGq3KjM3DoUBJgfiaYyv0tiaHXhzzjqgbBsaibIEPgtsN999mvicyXUuob9fIAH3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1294&quot;/&gt;)&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;终于接近尾声了，内存对齐一直面试中的高频考点，通过内存对齐可以了解面试者对操作系统知识的了解程度，所以这块知识还是比较重要的，希望这篇文章能帮助大家答疑解惑，更好的忽悠面试官～。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中代码已上传github：https://github.com/asong2020/Golang_Dream/tree/master/code_demo/memory 欢迎star;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中有任何问题欢迎留言区探讨～；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;素质三连（分享、点赞、在看）都是笔者持续创作更多优质内容的动力！我是&lt;code&gt;asong&lt;/code&gt;，我们下期见。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;创建了一个Golang学习交流群，欢迎各位大佬们踊跃入群，我们一起学习交流。入群方式：关注公众号获取。更多学习资料请到公众号领取。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB8rxL8DUy5BbjNyggRGwIWE7Y2icLH12dMCLvlJ3AG8PR7qVOBWj2mVrxbJdYibAILPRGVo32XlnXJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkyNzI1NzM5NQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/CqB2u93NwB96zTfSmymj9jWokyhvSIXMRcLRAfFJsrB4uz6HBsml4T6iaia3yyCSB4aicX97icT7xBUCgw4O1PsKFQ/0?wx_fmt=png&quot; data-nickname=&quot;Golang梦工厂&quot; data-alias=&quot;AsongDream&quot; data-signature=&quot;asong是一名后端程序员，目前就职于一家电商外企，专注于Golang技术，定期分享Go语言、MySQL、Redis、Elasticsearch、计算机基础、微服务架构设计、面试等知识。这里不仅有技术，还有故事！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐往期文章：&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c7910739adc6e30e9f4cbc0a2d594adb</guid>
<title>2.3 万 Star 的国产装机神器，制作可启动 U 盘</title>
<link>https://toutiao.io/k/oloat5s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;h2&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;通过可启动的 U 盘装机，是一部分人喜欢纯净部署新系统熟悉的方法。&lt;/p&gt;&lt;p&gt;此类工具主要包括借助 WinPE、老毛桃、UltraISO 等软件，或者专门的 U 盘量产工具。&lt;/p&gt;&lt;p&gt;今天给大家介绍一款同类新工具 Ventoy，是国内开发者 longpanda 的作品，已经在 Github 上开源，目前已有 2.3 万 Star。最新版本更新于 8 月 14 日。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;330&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;844&quot; data-rawheight=&quot;330&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-ce283c9261dd576bddac7bf46d6ef0c3_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;有了 Ventoy，你就无需反复地格式化 U 盘，你只需要把 ISO/WIM/IMG/VHD(x)/EFI 等类型的文件拷贝到 U 盘里面就可以启动了，无需其他操作。&lt;/p&gt;&lt;p&gt;你可以一次性拷贝很多个不同类型的镜像文件，Ventoy 会在启动时显示一个菜单来供你进行选择，参见如下截图。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;480&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d8f3ef2b4ef4b831a15534509b0bc6f4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;639&quot; data-rawheight=&quot;481&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;639&quot; data-rawheight=&quot;481&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-6bc81f37869c521ae2a3d0ff94ebc2d2_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;主要特性：&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;完全开源&lt;/li&gt;&lt;li&gt;使用简单&lt;/li&gt;&lt;li&gt;快速（拷贝文件有多快就有多快）&lt;/li&gt;&lt;li&gt;超过 720+ 个镜像文件；&lt;/li&gt;&lt;li&gt;支持大部分常见类型的操作系统：Windows/WinPE/Linux/Unix/VMware/Xen；&lt;/li&gt;&lt;li&gt;同一个 U 盘可以同时支持 x86 Legacy BIOS、IA32 UEFI、x86_64 UEFI、ARM64 UEFI 和 MIPS64EL UEFI 模式&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外，Ventoy 还不影响 U 盘日常普通使用。经常装机或者爱折腾的朋友，不妨试试看。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>116328d28ccfd86213ee7052db22b6d3</guid>
<title>伴随我经历过三家公司优化过各种线程执行效率代码示例</title>
<link>https://toutiao.io/k/suqkxqh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;header class=&quot;post-header&quot;&gt;
        &lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;
          伴随我经历过三家公司优化过各种线程执行效率代码示例
        &lt;/h1&gt;

        &lt;p class=&quot;post-meta&quot;&gt;
            &lt;span class=&quot;post-meta-item&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-calendar&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;发表于&lt;/span&gt;

              &lt;time title=&quot;创建时间：2021-08-14 00:00:00&quot; itemprop=&quot;dateCreated datePublished&quot; datetime=&quot;2021-08-14T00:00:00+00:00&quot;&gt;2021-08-14&lt;/time&gt;
            &lt;/span&gt;

          
            &lt;span class=&quot;post-meta-item&quot; title=&quot;本文字数&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;far fa-file-word&quot;/&gt;
              &lt;/span&gt;
                &lt;span class=&quot;post-meta-item-text&quot;&gt;本文字数：&lt;/span&gt;
              &lt;span&gt;6.3k&lt;/span&gt;
            &lt;/span&gt;
            &lt;span class=&quot;post-meta-item&quot; title=&quot;热度&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;
              &lt;span class=&quot;post-meta-item-icon&quot;&gt;
                &lt;i class=&quot;fa fa-eye&quot;/&gt;
              &lt;/span&gt;
              &lt;span class=&quot;post-meta-item-text&quot;&gt;热度&lt;/span&gt;
              &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;℃
            &lt;/span&gt;

        &lt;/p&gt;
      &lt;/header&gt;

    
    
    
    &lt;div class=&quot;post-body&quot; itemprop=&quot;articleBody&quot;&gt;

      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;/&gt;前言&lt;/h3&gt;&lt;p&gt;之前呆过一家公司做的生鲜配送，有个业务要针对每个用户的购买信息给他打上标签便于更好的营销&lt;/p&gt;
&lt;p&gt;有一堆用户集合，然后去查询每个用户的最近购买、购买频次、下单金额等，再去计算他的标签&lt;/p&gt;
&lt;p&gt;这是一个复杂的业务，只能对用户一个一个的去生成&lt;/p&gt;
&lt;p&gt;我们当然能想到开定时任务去处理，每天或周一凌晨去执行&lt;/p&gt;
&lt;p&gt;但是在海量用户下，每次生成一个用户标签肯定是很慢的&lt;/p&gt;
&lt;p&gt;由此我们可以想到开多个线程，每次处理多条数据&lt;a id=&quot;more&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比如每次开10个线程，每个同时处理10条数据，这样的话一次就能处理100条数据，大大提高生产力&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;/&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;对要处理的数据集合进行分页获取数据&lt;/li&gt;
&lt;li&gt;根据自己设置的值创建线程集合，将分页后的数据传到对应线程去执行&lt;/li&gt;
&lt;li&gt;执行线程集合收集结果&lt;/li&gt;
&lt;li&gt;校验结果为有效值，继续执行；无效值为（分页后的数据为空或size&amp;lt;pagesize）认为执行完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;/&gt;代码&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;批量线程处理器核心代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cn.hutool.core.date.DateUtil;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cn.hutool.core.date.TimeInterval;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.mwk.utils.Pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.*;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 批量线程处理器&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/7/22 11:03&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolTaskExecutorBatch&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(ThreadPoolTaskExecutorBatch&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 每轮线程数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; poolSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 每页数量，每轮处理数据量&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pageSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPoolSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPageSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Class abstractBatchCallable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 自动分配线程数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; autoPoolSize = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 需要批量处理的数据集&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadPoolTaskExecutorBatch();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setAbstractBatchCallable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class abstractBatchCallable)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.abstractBatchCallable = abstractBatchCallable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;  AbstractBatchCallable &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class batchCallable)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (AbstractBatchCallable) batchCallable.newInstance();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List list)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list = list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; poolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize = poolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setPageSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pageSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pageSize = pageSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setAutoPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; autoPoolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize = autoPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setMaxPoolSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPoolSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize = maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ThreadPoolTaskExecutorBatch &lt;span class=&quot;title&quot;&gt;setMaxPageSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxPageSize)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize = maxPageSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        TimeInterval timer = DateUtil.timer();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;----开始生成数据----&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSizeByList()){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.debug(&lt;span class=&quot;string&quot;&gt;&quot;批任务处理信息：autoPoolSize={} poolSize={} pageSize={} maxPoolSize={} maxPageSize={}&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pageSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//是否继续&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; proceed = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//线程创建轮数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rounds = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//起始页数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; page = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Callable&amp;lt;Integer&amp;gt;&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    Pager pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (proceed) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            rounds++;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize; k++) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                page++;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            pager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Pager&amp;lt;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list, page, pageSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pager.getContent().size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            list.add(getInstance(abstractBatchCallable).setPager(pager));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                ExecutorService executor = Executors.newFixedThreadPool(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                List&amp;lt;Future&amp;lt;Integer&amp;gt;&amp;gt; results = executor.invokeAll(list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                executor.shutdown();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Future&amp;lt;Integer&amp;gt; result : results) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                    temp += result.get();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                log.error(&lt;span class=&quot;string&quot;&gt;&quot;生成数据出错&quot;&lt;/span&gt; + e.getMessage(), e);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            log.info(&lt;span class=&quot;string&quot;&gt;&quot;----线程创建轮【&quot;&lt;/span&gt; + rounds + &lt;span class=&quot;string&quot;&gt;&quot;】，页数：&quot;&lt;/span&gt; + page + &lt;span class=&quot;string&quot;&gt;&quot;，当前轮结束状态&quot;&lt;/span&gt; + temp);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (temp &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.poolSize) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                proceed = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            list.clear();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        log.info(&lt;span class=&quot;string&quot;&gt;&quot;----总轮数：&quot;&lt;/span&gt; + rounds + &lt;span class=&quot;string&quot;&gt;&quot;，总页数：&quot;&lt;/span&gt; + page + &lt;span class=&quot;string&quot;&gt;&quot;，耗时：&quot;&lt;/span&gt; + timer.intervalMs());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 自动计算批任务执行线程数、每线程执行任务数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;autoPoolSizeByList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.autoPoolSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; allSize = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list.size();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 任务总数小于等于最大线程数，则创建任务数线程，每线程执行1任务&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize &amp;lt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPoolSize(allSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPageSize(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 任务总数小于等于最大线程数*最大线程执行任务数，则线程数最大值，每线程执行任务总数除以线程数最大值进位值&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rem = allSize % &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = allSize / &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(allSize &amp;lt;= &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize * &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPageSize){&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPoolSize(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.maxPoolSize);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setPageSize(rem == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? value : (value + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程批量处理执行抽象类，需要批量处理数据的任务都可以继承此抽象类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.mwk.utils.Pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.util.CollectionUtils;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Callable;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 线程批量处理执行抽象类，需要批量处理数据的任务都可以继承此抽象类&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/7 10:44&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractBatchCallable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Integer&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 需要批量处理的数据集&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; List list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Pager pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (CollectionUtils.isEmpty(list)) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.exec();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list.size() &amp;lt; pager.getPageSize() ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 自定义的执行方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AbstractBatchCallable &lt;span class=&quot;title&quot;&gt;setPager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Pager pager)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.pager = pager;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list = pager.getContent();&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试任务类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 测试任务类&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/7 10:48&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MytBatchCallableTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractBatchCallable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(MytBatchCallableTest&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = (List&amp;lt;Integer&amp;gt;) &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.list;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;log.debug(&lt;span class=&quot;string&quot;&gt;&quot;集合值:{}&quot;&lt;/span&gt;, list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试处理集合调用方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.mwk.thread.task;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.stream.IntStream;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 测试处理集合调用方法&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; MinWeikai&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@date&lt;/span&gt; 2021/8/13 22:04&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ThreadPoolTaskExecutorBatchTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; list = IntStream.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1995&lt;/span&gt;).boxed().collect(Collectors.toList());&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;待执行集合：&quot;&lt;/span&gt; + list);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;ThreadPoolTaskExecutorBatch&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;.build()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;.setAbstractBatchCallable(MytBatchCallableTest&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;title&quot;&gt;setList&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;list&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setAutoPoolSize&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setPoolSize&lt;/span&gt;(10)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;//.&lt;span class=&quot;title&quot;&gt;setPageSize&lt;/span&gt;(50)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码-1&quot;&gt;&lt;a href=&quot;#代码-1&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;/&gt;代码&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/tree/master/src/main/java/com/mwk/thread/task&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客代码路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/mwk719/spring-learn/blob/master/src/main/java/com/mwk/utils/Pager.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用到的分页工具&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;

    
    
    

 

      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>37c59fe64ab0c089f51bbb5a6d4db4d6</guid>
<title>迷惑了，Go len() 是怎么计算出来的？</title>
<link>https://toutiao.io/k/6bnzczt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是煎鱼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近看到了一个很有意思的话题，我们平时常常会用 Go 的内置函数 &lt;code&gt;len&lt;/code&gt; 去获取各种 map、slice 的长度，那他是怎么实现的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正当我想去看看 &lt;code&gt;len&lt;/code&gt; 的具体实现时，一展身手，却发现竟然是个空方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;len&lt;/span&gt;&lt;span&gt;(v Type)&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看注解也没有 link 到其他 runtime 函数，那么 len 函数是如何被调用的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先前看国外讨论 Go 计算 len 的文章时做了一些笔记，在此分享给大家，共同进步。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;谜底&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就由煎鱼带大家一同解开这个谜底。既然是谜底，那就一开始就揭开。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实 Go 语言中并没有 len 函数的具体实现代码，他其实&lt;strong&gt;是 Go 编译器的 &quot;魔法&quot; ，不是实际的函数调用&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来将展开这部分，我们可以更深入地了解 Go 编译器的内部工作原理。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;编译器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 编译器编译时会解析命令行参数中指定的标志和 Go 源文件，对解析后的 Go 包进行类型检查，将函数编译为机器代码。代码，最后将编译后的包定义写到磁盘上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;内部定义基本类型、内置函数和操作函数的阶段是在 types/universe.go 当中。同时会进行内置函数和具体的操作符匹配，可以明确知道内置函数 len 对应的是 OLEN：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; builtinFuncs = [...]&lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; name &lt;span&gt;string&lt;/span&gt;&lt;br/&gt; op   Op&lt;br/&gt;}{&lt;br/&gt; {&lt;span&gt;&quot;append&quot;&lt;/span&gt;, OAPPEND},&lt;br/&gt; {&lt;span&gt;&quot;cap&quot;&lt;/span&gt;, OCAP},&lt;br/&gt; {&lt;span&gt;&quot;close&quot;&lt;/span&gt;, OCLOSE},&lt;br/&gt; {&lt;span&gt;&quot;complex&quot;&lt;/span&gt;, OCOMPLEX},&lt;br/&gt; {&lt;span&gt;&quot;copy&quot;&lt;/span&gt;, OCOPY},&lt;br/&gt; {&lt;span&gt;&quot;delete&quot;&lt;/span&gt;, ODELETE},&lt;br/&gt; {&lt;span&gt;&quot;imag&quot;&lt;/span&gt;, OIMAG},&lt;br/&gt; {&lt;span&gt;&quot;len&quot;&lt;/span&gt;, OLEN},&lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在编译时，上分为五个阶段进行类型检查：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一阶段：常量、类型、以及函数的名称和类型。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二阶段：变量赋值、接口赋值、别名声明。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三阶段：类型检查函数体。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四阶段：检查外部声明。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第五阶段：检查类型的地图键，未使用的导入。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果最后一个类型检查阶段遇到 len 函数，就会转换为 UnaryExpr 类型，一个 UnaryExpr 节点代表一个单数表达式，也最终就是不会成为函数调用：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;typecheck1&lt;/span&gt;&lt;span&gt;(n ir.Node, top &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;ir&lt;/span&gt;.&lt;span&gt;Node&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; n, ok := n.(*ir.Name); ok {&lt;br/&gt;  typecheckdef(n)&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; n.Op() {&lt;br/&gt; ...&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; ir.OCAP, ir.OLEN:&lt;br/&gt;  n := n.(*ir.UnaryExpr)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; tcLenCap(n)&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用 &lt;code&gt;*ir.UnaryExpr&lt;/code&gt; 转换完毕后，会调用 &lt;code&gt;tcLenCap&lt;/code&gt;，也就是 typecheck，使用 okforlen 数组来验证参数的合法性或发出相关错误信息：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;tcLenCap&lt;/span&gt;&lt;span&gt;(n *ir.UnaryExpr)&lt;/span&gt; &lt;span&gt;ir&lt;/span&gt;.&lt;span&gt;Node&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; n.X = Expr(n.X)&lt;br/&gt; n.X = DefaultLit(n.X, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt; n.X = implicitstar(n.X)&lt;br/&gt; ...&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; ok &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; n.Op() == ir.OLEN {&lt;br/&gt;  ok = okforlen[t.Kind()]&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  ok = okforcap[t.Kind()]&lt;br/&gt; }&lt;br/&gt;  &lt;br/&gt; ...&lt;br/&gt; n.SetType(types.Types[types.TINT])&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; n&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经历过上面的步骤后在对所有内容进行类型检查后，所有函数都将排队等待编译：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; base.Timer.Start(&lt;span&gt;&quot;be&quot;&lt;/span&gt;, &lt;span&gt;&quot;compilefuncs&quot;&lt;/span&gt;)&lt;br/&gt; fcount := &lt;span&gt;int64&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;)&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;len&lt;/span&gt;(typecheck.Target.Decls); i++ {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; fn, ok := typecheck.Target.Decls[i].(*ir.Func); ok {&lt;br/&gt;   enqueueFunc(fn)&lt;br/&gt;   fcount++&lt;br/&gt;  }&lt;br/&gt; }&lt;br/&gt; base.Timer.AddEvent(fcount, &lt;span&gt;&quot;funcs&quot;&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt; compileFunctions()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在经过在 buildssa 和 genssa 之后，再深入几层，就会将 AST 树中的 len 表达式转换为 SSA。接着我们就可以看到 Go 语言中的每种类型的长度是怎么获取的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这块的处理对应 internal/ssagen/ssa.go 的 expr 方法，如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; &lt;span&gt;case&lt;/span&gt; ir.OLEN, ir.OCAP:&lt;br/&gt;  n := n.(*ir.UnaryExpr)&lt;br/&gt;  &lt;span&gt;switch&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; n.X.Type().IsSlice():&lt;br/&gt;   op := ssa.OpSliceLen&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; n.Op() == ir.OCAP {&lt;br/&gt;    op = ssa.OpSliceCap&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; s.newValue1(op, types.Types[types.TINT], s.expr(n.X))&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; n.X.Type().IsString(): &lt;span&gt;// string; not reachable for OCAP&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; s.newValue1(ssa.OpStringLen, types.Types[types.TINT], s.expr(n.X))&lt;br/&gt;  &lt;span&gt;case&lt;/span&gt; n.X.Type().IsMap(), n.X.Type().IsChan():&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; s.referenceTypeBuiltin(n, s.expr(n.X))&lt;br/&gt;  &lt;span&gt;default&lt;/span&gt;: &lt;span&gt;// array&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;return&lt;/span&gt; s.constInt(types.Types[types.TINT], n.X.Type().NumElem())&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若是数组（array）类型，则会调用 &lt;code&gt;NumElem&lt;/code&gt; 方法来获取长度值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Array &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; Elem  *Type &lt;br/&gt; Bound &lt;span&gt;int64&lt;/span&gt; &lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *Type)&lt;/span&gt; &lt;span&gt;NumElem&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;int64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; t.wantEtype(TARRAY)&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; t.Extra.(*Array).Bound&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;若是字典（map）类型或通道（channel），将会调用 &lt;code&gt;referenceTypeBuiltin&lt;/code&gt; 方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(s *state)&lt;/span&gt; &lt;span&gt;referenceTypeBuiltin&lt;/span&gt;&lt;span&gt;(n *ir.UnaryExpr, x *ssa.Value)&lt;/span&gt; *&lt;span&gt;ssa&lt;/span&gt;.&lt;span&gt;Value&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; lenType := n.Type()&lt;br/&gt; nilValue := s.constNil(types.Types[types.TUINTPTR])&lt;br/&gt; cmp := s.newValue2(ssa.OpEqPtr, types.Types[types.TBOOL], x, nilValue)&lt;br/&gt; b := s.endBlock()&lt;br/&gt; b.Kind = ssa.BlockIf&lt;br/&gt; b.SetControl(cmp)&lt;br/&gt; b.Likely = ssa.BranchUnlikely&lt;br/&gt;&lt;br/&gt; bThen := s.f.NewBlock(ssa.BlockPlain)&lt;br/&gt; bElse := s.f.NewBlock(ssa.BlockPlain)&lt;br/&gt; bAfter := s.f.NewBlock(ssa.BlockPlain)&lt;br/&gt; ...&lt;br/&gt; &lt;span&gt;switch&lt;/span&gt; n.Op() {&lt;br/&gt; &lt;span&gt;case&lt;/span&gt; ir.OLEN:&lt;br/&gt;  s.vars[n] = s.load(lenType, x)&lt;br/&gt; ...&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; s.variable(n, lenType)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该函数的作用是是获取 map 或chan 的内存地址，并以零偏移量引用其结构布局，就像 &lt;code&gt;unsafe.Pointer(uintptr(unsafe.Pointer(s))&lt;/code&gt; 一样，返回第一个字面字段的值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那为什么要获取结构体的第一个字段的值呢，应该是和 map 和 chan 的基础数据结构有关：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; hmap &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; count     &lt;span&gt;int&lt;/span&gt; &lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; hchan &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; qcount   &lt;span&gt;uint&lt;/span&gt;    &lt;br/&gt; ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是因为 map 和 chan 的基础数据结构的第一个字段就表示长度，自然也就通过计算偏移值来获取了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他的数据类型，大家可以继续深入代码，再细看就好了。主要还是枚举多同类的数据类型，接着调用相应的方法。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次我们看到内置函数时，总会下意识的以为是在 runtime 内实现的。看不到 runtime 内的实现方法，又会以为是通过注解 link 的方式来解决的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但需要注意，其实还有像 len 内置函数这种直接编译器转换的，这也是一种不错的优化方式。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4eb1bdd6b03bd91909fd99b3d298430d</guid>
<title>滴滴开源的，面向云原生的一站式日志采集配置及运维平台</title>
<link>https://toutiao.io/k/sqxpeeq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;大家好，我是周刊菌。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Njk2NDAzMA==&amp;amp;mid=2660215615&amp;amp;idx=2&amp;amp;sn=844e0251c92fa230434af84b6e49d5d9&amp;amp;chksm=84bba96eb3cc2078f8bf59ced9b7909530f69cb94e8c5405f7d05fb731e4711b7362bdf7b6c0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;加入「码农周刊VIP会员」，一起牛起来！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1181&quot; data-ratio=&quot;1.8213333333333332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibUAfAh5wR0uAN5fnMiaJuiaJMVDkjPC8YhJwMPUc9FVy2N6oIiacmP3ibnGE9DZJMdaZgjusJJEvtQ7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;&lt;span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;/span&gt;&lt;span&gt;码农周刊VIP会员&lt;/span&gt;&lt;span&gt;」服务。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何加入「码农周刊VIP会员」？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;34&quot; data-cropselx2=&quot;356&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;425&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6h6x4EnYInRLic6PibFNWw4zSv28rAxcJu9dumVJF03PwHGOWxOzeJKIsydVa7UJuTo4jOjrct9NZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心动不如心动，赶快订阅吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>