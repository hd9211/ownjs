<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bc6bdace829b20536e0e92336bf8f8c1</guid>
<title>中年技术人转型的几点感想</title>
<link>https://toutiao.io/k/pn1lln7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1983fa1ae3089302113bb08ec9036c6b</guid>
<title>复杂环境下落地 Service Mesh 的挑战与实践</title>
<link>https://toutiao.io/k/pd8izls</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、美团服务治理建设进展&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1 服务治理发展史&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先讲一下 OCTO，此前美团技术团队博客也分享过很多&lt;a target=&quot;_blank&quot; href=&quot;https://tech.meituan.com/tags/octo.html&quot; textvalue=&quot;相关的文章&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;相关的文章&lt;/a&gt;，它是美团标准化的服务治理基础设施，现应用于美团所有事业线。OCTO 的治理生态非常丰富，性能及易用性表现也很优异，可整体概括为 3 个特征：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;属于公司级的标准化基础设施。技术栈高度统一，覆盖了公司 90% 以上的应用，日均调用量达数万亿次。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;经历过较大规模的技术考验。覆盖数万个服务、数十万个节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;治理能力丰富。协同周边治理生态，实现了 SET 化、链路级复杂路由、全链路压测、鉴权加密、限流熔断等治理能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;回顾美团服务治理体系的发展史，历程整体上划分为四个阶段：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一阶段是基础治理能力统一&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。实现通信框架及注册中心的统一，由统一的治理平台支撑节点管理、流量管理、监控预警等运营能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二阶段重点提升性能及易用性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。4 核 4GB 环境下使用 1KB 数据进行 echo 测试，QPS 从 2 万提升至接近 10 万，99 分位线 1ms；也建设了分布式链路追踪、分阶段耗时精细埋点等功能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三阶段是全方位丰富治理能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。落地了全链路压测平台、性能诊断优化平台、稳定性保障平台、鉴权加密等一系列平台，也实现了链路级别的流量治理，如全链路灰度发布等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四阶段是建设了跨地域的容灾及扩展能力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。在每天数千万订单量级下实现了单元化，也实现了所有 PaaS 层组件及核心存储系统的打通。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.30217391304347824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUUWbLw6cPGoYIV3KHv4cKMTqSMlevjGiaeWwBxDv8LdWue0QaZ6g8qyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1840&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.2 服务治理体系的困境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，美团已具备了较完善的治理体系，但仍有较多的痛点及挑战。大的背景是公司业务蓬勃发展，业务愈发多元化，治理也愈发精细化，这带来了较多新的问题：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务与中间件强耦合，制约彼此迭代。当中间件引入 Bug，可能成百上千、甚至数千个业务需要做配合升级，中间件的新特性也依赖业务升级后才能使用，成本很高。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;中间件版本碎片化严重。发布出去的组件基本托管在业务侧，很难统一进行管控，这也频繁造成业务多类的问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异构体系融合难。新融入公司的技术体系往往与美团不兼容，治理体系打通的成本很高，难度也很大。此前，美团与大众点评打通治理，不包含业务迁移，就历时 1 年半的时间；近期，摩拜使用的 gRPC 框架也无法与系统进行通信，但打通迫在眉睫。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;非 Java 语言治理体系能力弱，多个主流语言无官方 SDK。多元业务场景下，未来多语言也是个趋势，比如在机器学习领域，Python 语言不太可能被其他语言完全代替。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、服务治理体系优化的思路与挑战&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1 优化思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结来看，OCTO 在服务层实现了统一抽象来支撑业务发展，但它并未解决这层架构可以独立演进的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.2节中问题1与问题2的本质是“耦合”，问题3与问题4的本质是“缺乏标准服务治理运行时”。在理想的架构中，异构语言、异构治理体系可以共用统一的标准治理运行时，仅在业务使用的 SDK 部分有轻微差异。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，我们整体的优化思路分为三步：&lt;strong&gt;隔离解耦&lt;/strong&gt;，&lt;strong&gt;在隔离出的基础设施层建设标准化治理运行时&lt;/strong&gt;，&lt;strong&gt;标准之上建体系&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.36525612472160357&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUNfPLEvYbMfWZJCNYicKp62GX4hlUpVrWk5Y5ia4KwsEsliaDZKhd6YevA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1796&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;上述解决方案所对应的新架构模式下，各业务进程会附属一个 Proxy 进程，SDK 发出以及接收的流量均会被附属的 Proxy 拦截。像限流、路由等治理功能均由 Proxy 和中心化的控制大脑完成，并由控制面对接所有治理子系统集成。这种模式下 SDK 很轻薄，异构的语言、异构的治理体系就很容易互通，从而实现了物理解耦，业界将这种模式称为 Service Mesh（&lt;/span&gt;&lt;span&gt;其中 Proxy 被称为数据面、中心化控制大脑被称为控制面&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5263870094722598&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUv2oMvqKQT4xFe9vkmcuoBYPAg0WW6K0jc686voH9Gf9fEgxHzMicVoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1478&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 复杂性挑战&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;美团在实践中所面临的复杂性划主要包括以下4类：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;兼容性&lt;/strong&gt;：技术改造涉及范围较大，一方面需要通过保证现有通信方式及平台使用方式不变，从而来保障业务研发效率，另一方面也要解决运行载体多样性、运维体系兼容等问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;异构性&lt;/strong&gt;：第一是多语言互通问题；第二是打通治理体系内的众多治理子系统，像服务鉴权、注册中心等系统的存储及发布订阅机制都是不同的；第三是快速打通新融入公司的异构治理体系。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大规模支撑&lt;/strong&gt;：出于性能方面考虑，开源 Istio 等产品不宜直接应用于大规模的生产环境，美团控制面需具备百万级链接下高吞吐、低延迟、高精确的系统能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;重交易型业务容错性低&lt;/strong&gt;：交易型业务场景下，业务对 Service Mesh 的性能、稳定性往往持怀疑态度；美团基础架构团队也强调在业务价值导向下，基于实际业务价值进行运营推广，而不是采用从上至下的偏政策性推广方式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、美团落地 Service Mesh 的解决方案&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1 整体架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;美团采用数据面基于 Envoy 二次开发、控制面自研为主、SDK 协同升级的方案（&lt;/span&gt;&lt;span&gt;内部项目名是 OCTO Mesh&lt;/span&gt;&lt;span&gt; ）。架构简介如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;各语言轻薄的 SDK 与 Proxy 通过 UDS（&lt;/span&gt;&lt;span&gt;Unix Domain Socket&lt;/span&gt;&lt;span&gt;）交互，主要出发点是考虑到相比透明流量劫持，UDS 性能与可运维性更好。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;控制面与 Proxy 通过双向流通信，控制面与治理生态的多个子系统交互，并将计算处理过的治理数据及策略数据下发给 Proxy 执行，协同配合完成路由、限流等所有核心治理功能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;控制面内部的 5 个模块都是自研的独立服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自研了的 Meta Server 系统实现 Mesh 体系内部的节点注册和寻址，通过管理控制面与数据面的链接关系，也实现了按事业群隔离、水平扩展等能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4744791666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUm3ANjSH2hwONkalraiaoe2L4niaLUEpln0m3lHuaib125JKVD4ic99uic5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 兼容性解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;兼容性的目标及特征用一句话来总结就是：业务接入无感知。为此，我们做了以下三件事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;(1) 与现有基础设施及治理体系兼容&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;(2) 协议兼容&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务间调用往往是多对多的关系，一般调用端与服务端无法同时升级，为支持 Mesh 与非 Mesh 的互通，增强后的协议对业务完全透明。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;与语义相关的所有内容（&lt;/span&gt;&lt;span&gt;比如异常等&lt;/span&gt;&lt;span&gt;），均在 SDK 与 Proxy 之间达成共识，保证兼容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无法在控制面及数据面中实现的能力，在 SDK 中执行并通过上下文传递给 Proxy，保障功能完全对齐，当然这种情况应该尽量避免的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;(3) Mesh 与非 Mesh 模式的无缝切换&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 异构性解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异构性的目标及特征用一句话总结就是：标准化服务治理运行时。具体可拆分为3个子目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对上述3个子目标，我们所采取的方案如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将数据面 + 控制面定义为标准化的服务治理运行时，在标准运行时内打通所有治理能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;建设统一接入中心系统 Dispatcher ，并由其对接并屏蔽治理子系统的异构性，从而实现外部系统的差异对 Pilot 透明；下图中 Dispatcher 与 Pilot 直接交互，Meta Server 的作用是避免广播降低冗余。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重构或从零建设 SDK，目前使用的 6 种语言 SDK 均已落地并使用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异构语言、异构体系均使用增强的统一协议交互，实现互通。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3007360672975815&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXU1Aibg1KOL6cfoPqve2GpsOkZJXUZj53ldmqfA5XZxoQyrpB2s43fbSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1902&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;通过 Service Mesh 实现体系融合的前后对比如下：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3023983315954119&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUDkODJ05MMB7LiasicK2oia4ib1HcSMt1r3Yu9SicUhxq4kwjYE7m2aSfThQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1918&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;通过上述方案，针对异构性方面取得了较好的效果：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;标准化 6 种语言治理体系，非 Java 语言的核心治理能力基本对齐 Java；新语言也很容易融入，提供的官方 Python 语言、Golang 语言的通信框架新版本（&lt;/span&gt;&lt;span&gt;依托于 OCTO Mesh&lt;/span&gt;&lt;span&gt;），开发成本均控制在1个月左右。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持异构治理子系统通过统一接入中心快速融入，架构简洁、扩展性强。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持异构治理体系快速融合并在单车侧落地，异构治理体系打通成本也从 1.5 年降低到 1 个月。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 规模化解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4.1 开源 Istio 问题分析&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;规模化的目标及特征用一句话总结是：&lt;strong&gt;具备支撑数万服务、百万节点体量的系统能力，并支持水平扩展&lt;/strong&gt;。挑战主要有3个：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过对 Istio 架构进行深入分析，我们发现核心问题聚焦在以下3个瓶颈点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个控制面实例有 ETCD 存储系统的全部数据，无法水平扩展。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个 Proxy 链接相当于独立与 ETCD 交互，而同一个服务的 Proxy 请求内容都相同，独立交互有大量的 I/O 冗余。当 Proxy 批量发版或网络抖动时，瞬时风暴很容易压垮控制面及 ETCD。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个节点都会探活所有其他节点。10 万节点规模的集群，1 个检测周期有 100 亿次探活，会引发网络风暴。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3326110509209101&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUXW7xAUz1T8mLdL6ibImCtRZqgRoqpQibbBKjOZGAE755v9x6DSnBjLicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1846&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4.2 措施一：横向数据分片&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对 Istio 控制面各实例承载全集群数据的问题，对应的措施是通过横向逻辑数据分片支持扩展性，具体方案设计如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Proxy 启动时会去向 Meta Server 系统请求需要连接的 Pilot IP，Meta Server 将相同服务的 Proxy 尽量落到同一个控制面节点（&lt;/span&gt;&lt;span&gt;内部策略更为复杂，还要考虑地域、负载等情况&lt;/span&gt;&lt;span&gt;），这样每个 Pilot 实例按需加载而不必承载所有数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;控制面节点异常或发布更新时，其所管理的 Proxy 也会有规律的迁移，恢复后在一定时间后还会接管其负责的 Proxy，从而实现了会话粘滞，也就实现逻辑上面的数据分片。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3605150214592275&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUBtNWDvGrGNicic7ysOUkUT2sPQ2bBZf6cDrbv9wIScYia2NvYonSh0iaaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1864&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;通过管理链接关系实现了按事业群隔离、按服务灰度等平台能力，最关键的还是解决了 Mesh 体系水平扩展的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4.3 措施二：纵向分层订阅&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对 Istio 独立管理各 Proxy 链接的 I/O 冗余问题，对应的措施是通过分层订阅减少冗余 I/O。Proxy 不直接与存储等系统对接，而是在中间经过一系列的处理，关键点有两个：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;关键点 1：基于快照缓存 + 索引的机制来减少 ZK watcher 同步。以注册中心为例，常规实现方式下，如果每个 Proxy 关注 100 个节点，1 万个节点就会注册 100 万个 watcher，相同服务的 Proxy 所关注内容是相同的，另外不同服务 Proxy 所关注的也有很多交集，其中包含大量的冗余。分层订阅模式下，Proxy 不与注册中心直接交互，通过中间的快照缓存与分层，确保每个 Pilot 实例中 ZK 相同路径的监听最多只用1个 watcher，获取到 watcher 通知后，Pilot 根据内部的快照缓存 + 索引向所有关注者分发，大大降低了冗余。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;关键点 2：治理能力层及会话管理层实现了类似于 I/O 多路复用能力，通过并发提升吞吐。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4609704641350211&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUnmA8MtplmwdsUeyibAmSVKcicZHprHfJZLE2lnibhZ8uYDBk2SQebcyyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1896&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;结果方面有效应对了网络抖动或批量发版的瞬间风暴压力，压测单 Pilot 实例可以承载 6 万以上的链接，时延 TP99 线 &amp;lt; 2.3ms、数据零丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4.4 措施三：集中式健康检测&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对大规模集群内指数级膨胀的节点间健康监测次数，对应的措施是摒弃了 P2P 检测模式，我们参考并优化了 Google 的 Traffic Drector 中心化管理的健康检测模式。这种模式下检测次数大大减少，一个周期内 10 万节点集群的检测次数，从 100 亿次下降到 10 万次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，当 Pilot 感知到 Proxy 异常时，会立即通知中心化健康检测系统启动检测，而不是等待检测周期窗口的到来，这可以有效提升业务调用的成功率。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.2939330543933054&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUEguvQFaQR3E4TPQ8O6yxRhBwcTgVm2iaGMicj8fkhrGxlSI6RpWbhnyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1912&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.5 交易型场景困境下的解决方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5.1 业务属性分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;美团内部业务线较多，包括外卖、配送、酒店、旅游、单车、团购等，其中绝大多数业务都带有交易属性，交易链路上一个流量异常就可能影响到订单。业务系统对新技术领域的探索往往比较慎重，期望在新技术充分验证后再启动试点，所以除小语种及亟待与公司打通的单车业务外，推广的难度是非常大的。此外，基础架构部秉承“以客户为中心”的原则，研发、运维、测试人员均是我们的“客户”，所以技术升级会重点从业务价值入手，并非简单依靠从上至下的政策推动力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，我们对外的承诺是：&lt;strong&gt;通信足够快、系统足够稳定、接入足够平滑高效&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.38969616908850724&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVXibOr79CicaI6vkKH7oNbXUibwAqjibkZs3JWdF2rzQyLSztRc3fl2lcd7oL1SYoicYPXq7uQcEvtS8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1514&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5.2 精细化运营体系建设&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对推广的困境，我们首先做了两件事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对上述困境，我们进行深度思考后建立了一个精细化的运营体系：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务接入 Mesh 前。基于 SOA 分级将服务划分为非核心与核心两类，先针对非核心服务以及所有服务的线下环境进行重点突破，实现了在广泛的业务场景下，全面且充分的验证系统能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务接入 Mesh 中。运营系统通过校验 SDK 版本、运行时环境等信息，自动筛选出满足条件的服务，业务同学只需要在平台上做（1）开启开关、（2）选择节点（3）指定 Mesh 流量比例三个步骤，就完成了到 Mesh 模式的切换，不需代码改造也不需发布服务，整个过程基本在 1 分钟左右完成；此外，通过与 IM 工具深度联动，提升了推广与数据运营的效率。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务接入 Mesh 后。一方面，业务侧包括架构侧的运营有详细的数据指标做对比参考；另一方面，运营系统支持预先设置稳定性策略并做准实时的检测，当某个接入服务 Mesh 模式异常时，即时自动切换回非 Mesh 模式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;运营体系具备 “接入过程无感”、“精细化流量粒度灰度”、“异常自动回滚恢复” 三个核心能力，在运营体系建设后推广运营较为顺利，目前线上接入的 600+ 服务、线下接入的 3500+ 服务中，90% 以上是依托运营平台接入 Mesh 的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5.3 通信性能优化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在性能损耗优化这个方向，除使用 UDS 规避网络栈外，我们也通过增量聚合下发、序列化优化两个措施减少不必要的解包，提升了通信性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经过压测，去除非核心功能在 2 核 4G 环境用 1KB 数据做 echo 测试，QPS 在 34000 以上，一跳平均延迟 0.207ms，时延TP99 线 0.4ms 左右。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5.4 流量多级保护&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;美团落地 Service Mesh 在稳定性保障方面建设投入较多，目前尚无 Service Mesh 引发的故障，具体包含三个方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文系统性的介绍美团在 Service Mesh 落地进程中面临的“兼容性”、“异构性”、“规模化”、“交易属性业务容错性低”这四类复杂性挑战，针对上述挑战，我们也详细介绍了大规模私有云集群场景下的优化思考及实践方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上述实践，目前美团线上落地服务数超过 600，线下服务数超过 3500+，初步验证了模式的可行性。短期价值方面，我们支持了摩拜等异构治理体系的快速融合、多语言治理能力的统一；长期价值仍需在实践中继续探索与验证，但在标准化服务治理运行时并与业务解耦、中心化管控下更丰富的治理能力输出两个方面，是非常值得期待的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;作者简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;继东、薛晨、业祥、张昀，均来自美团基础技术部-基础架构部。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ae0c9b476865f30e5430e13416b09214</guid>
<title>WebAssembly 初探</title>
<link>https://toutiao.io/k/e1ezb3g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;本次分享的文章是基于 WebAssembly 的探索与研究。最近需要做一个与加密相关的项目，将后端的加密方案直接放到前端使用，好处是加密方案代码只用维护一套，且后端方案更贴近系统底层，应该可以得到更好的性能。恰好发现 WebAssembly，它是为了可移植的目标而设计的，可以满足需求。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这次研究 WebAssembly 的过程中遇到了各种问题，我均记录下来，并在后期可以和大家一起分享，文末放置了参考的文章，大家可以延伸阅读。这篇文章是本系列的第一部分，主要是了解 WebAssembly 和 WebAssembly 的基本使用方法。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98780&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98781&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;WebAssembly 的诞生&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当人们说 WebAssembly 更快的时候，一般来讲是与 JavaScript 相比而言的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;JavaScript 于 1995 年问世，它的设计初衷并不是为了执行起来快，在前 10 个年头，它的执行速度也确实不快。紧接着，浏览器市场竞争开始激烈起来。被人们广为传播的“性能大战”在 2008 年打响。许多浏览器引入了 Just-in-time 编译器，也叫 JIT。基于 JIT 的模式，JavaScript 代码的运行渐渐变快。正是由于这些 JIT 的引入，使得 JavaScript 的性能达到了一个转折点，JS 代码执行速度快了 10 倍。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.818&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0XfictvAREBZCkKED1DrHo7uOy8M6eM4QGLkty8iacP4hyfBwrZocntFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;随着性能的提升，JavaScript 可以应用到以前根本没有想到过的领域，比如用于后端开发的 Node.js。性能的提升使得 JavaScript 的应用范围得到很大的扩展。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0TH0yhNavfhbicClMnZxfsQ6GGTORmSJExwmc9FVwibKATkBXIqVnD74A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;但这也渐渐暴露出了 JavaScript 的问题：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;针对以上两点缺陷，近年来出现了一些 JS 的代替语言，例如：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以上尝试各有优缺点，其中：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;三大浏览器巨头分别提出了自己的解决方案，互不兼容，这违背了 Web 的宗旨；是技术的规范统一让 Web 走到了今天，因此形成一套新的规范去解决 JS 所面临的问题迫在眉睫。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;于是 WebAssembly 诞生了，WebAssembly 是一种新的字节码格式，主流浏览器都已经支持 WebAssembly。和 JS 需要解释执行不同的是，WebAssembly 字节码和底层机器码很相似可快速装载运行，因此性能相对于 JS 解释执行大大提升。也就是说 WebAssembly 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 WebAssembly 虚拟机中才能运行， 浏览器厂商需要做的就是根据 WebAssembly 规范实现虚拟机。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98781&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;WebAssembly 是什么？&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;WebAssembly (缩写 Wasm )是基于堆栈虚拟机的二进制指令格式。Wasm 为了一个可移植的目标而设计的，可用于编译 C/C+/RUST 等高级语言，使客户端和服务器应用程序能够在 Web 上部署。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;上面这段话是来自官方的定义。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;我们可以从字面上理解，WebAssembly 的名字带个汇编 Assembly，所以我们从其名字上就能知道其意思是给 Web 使用的汇编语言，是通过 Web 执行低级二进制语法。但是WebAssembly 并不是直接用汇编语言，而是提供了抓换机制（LLVM IR），把高级别的语言（C，C++和Rust）编译为 WebAssembly，以便有机会在浏览器中运行。可以看出来它其实是一种运行机制，一种新的字节码格式(.wasm)，而不是新的语言。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.828009828009828&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0AS3nkytc8kcamuvo2OWibovY71W7t0WrVruFwFFFD5FGWuwyjDCUdFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98781&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;MAC安装Emscripten&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;如果要把一个 C/C++ 程序编译成一个 .wasm 文件，是需要编译工具来完成的。WebAssembly 社区推荐常用工具：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;01&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;环境依赖&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;02&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;编译 Emscripten&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;接下来，您需要通过源码自己编译一个 Emscripten。运行下列命令来自动化地使用 Emscripten SDK。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/juj/emsdk.git&lt;br/&gt;&lt;br/&gt;cd emsdk&lt;br/&gt;&lt;br/&gt;# 编译源码&lt;br/&gt;./emsdk install latest&lt;br/&gt;&lt;br/&gt;# 激活sdk&lt;br/&gt;./emsdk activate latest&lt;br/&gt;&lt;br/&gt;#设置环境变量&lt;br/&gt;source ./emsdk_env.sh&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;在运行上述命令的时候，可能会遇到如下问题：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;./emsdk install latest 报错:&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$ ./emsdk install latest&lt;br/&gt;&lt;br/&gt;Installing SDK &#x27;sdk-releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&#x27;..&lt;br/&gt;Installing tool &#x27;node-12.18.1-64bit&#x27;..&lt;br/&gt;Error: Downloading URL &#x27;https://storage.googleapis.com/webassembly/emscripten-releases-builds/deps/node-v12.18.1-darwin-x64.tar.gz&#x27;: &amp;lt;urlopen error unknown url type: https&amp;gt;&lt;br/&gt;Warning: Possibly SSL/TLS issue. Update or install Python SSL root certificates (2048-bit or greater) supplied in Python folder or https://pypi.org/project/certifi/ and try again.&lt;br/&gt;Installation failed!&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;解决办法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单看了 emsdk 的内容，发现这个命令调用的是 emsdk.py 文件，所以使用 ./emsdk.py install latest 即可解决。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$ ./emsdk.py install latest&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;Installing SDK &#x27;sdk-releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&#x27;..&lt;br/&gt;Installing tool &#x27;node-12.18.1-64bit&#x27;..&lt;br/&gt;Downloading: /Users/likai/hisun/resource/emsdk/zips/node-v12.18.1-darwin-x64.tar.gz from https://storage.googleapis.com/webassembly/emscripten-releases-builds/deps/node-v12.18.1-darwin-x64.tar.gz, 20873670 Bytes&lt;br/&gt;Unpacking &#x27;/Users/likai/hisun/resource/emsdk/zips/node-v12.18.1-darwin-x64.tar.gz&#x27; to &#x27;/Users/likai/hisun/resource/emsdk/node/12.18.1_64bit&#x27;&lt;br/&gt;Done installing tool &#x27;node-12.18.1-64bit&#x27;.&lt;br/&gt;Installing tool &#x27;python-3.7.4-2-64bit&#x27;..&lt;br/&gt;Downloading: /Users/likai/hisun/resource/emsdk/zips/python-3.7.4-2-macos.tar.gz from https://storage.googleapis.com/webassembly/emscripten-releases-builds/deps/python-3.7.4-2-macos.tar.gz, 25365593 Bytes&lt;br/&gt;Unpacking &#x27;/Users/likai/hisun/resource/emsdk/zips/python-3.7.4-2-macos.tar.gz&#x27; to &#x27;/Users/likai/hisun/resource/emsdk/python/3.7.4-2_64bit&#x27;&lt;br/&gt;Done installing tool &#x27;python-3.7.4-2-64bit&#x27;.&lt;br/&gt;Installing tool &#x27;releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&#x27;..&lt;br/&gt;Downloading: /Users/likai/hisun/resource/emsdk/zips/7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-wasm-binaries.tbz2 from https://storage.googleapis.com/webassembly/emscripten-releases-builds/mac/7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f/wasm-binaries.tbz2, 69799761 Bytes&lt;br/&gt;Unpacking &#x27;/Users/likai/hisun/resource/emsdk/zips/7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-wasm-binaries.tbz2&#x27; to &#x27;/Users/likai/hisun/resource/emsdk/upstream&#x27;&lt;br/&gt;Done installing tool &#x27;releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&#x27;.&lt;br/&gt;Running post-install step: npm ci ...&lt;br/&gt;Done running: npm ci&lt;br/&gt;Done installing SDK &#x27;sdk-releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&#x27;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;同样激活 Emscripten 也是使用 ./emsdk.py activate latest&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$ ./emsdk.py activate latest&lt;br/&gt;&lt;br/&gt;Setting the following tools as active:&lt;br/&gt;   node-12.18.1-64bit&lt;br/&gt;   python-3.7.4-2-64bit&lt;br/&gt;   releases-upstream-7a7f38ca19da152d4cd6da4776921a0f1e3f3e3f-64bit&lt;br/&gt;&lt;br/&gt;Next steps:&lt;br/&gt;- To conveniently access emsdk tools from the command line,&lt;br/&gt;  consider adding the following directories to your PATH:&lt;br/&gt;    /Users/likai/hisun/resource/emsdk&lt;br/&gt;    /Users/likai/hisun/resource/emsdk/node/12.18.1_64bit/bin&lt;br/&gt;    /Users/likai/hisun/resource/emsdk/python/3.7.4-2_64bit/bin&lt;br/&gt;    /Users/likai/hisun/resource/emsdk/upstream/emscripten&lt;br/&gt;- This can be done for the current shell by running:&lt;br/&gt;    source &quot;/Users/likai/hisun/resource/emsdk/emsdk_env.sh&quot;&lt;br/&gt;- Configure emsdk in your bash profile by running:&lt;br/&gt;    echo &#x27;source &quot;/Users/likai/hisun/resource/emsdk/emsdk_env.sh&quot;&#x27; &amp;gt;&amp;gt; $HOME/.bash_profile&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;source ./emsdk_env.sh&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$ source ./emsdk_env.sh&lt;br/&gt;&lt;br/&gt;Adding directories to PATH:&lt;br/&gt;PATH += /Users/likai/hisun/resource/emsdk&lt;br/&gt;PATH += /Users/likai/hisun/resource/emsdk/upstream/emscripten&lt;br/&gt;PATH += /Users/likai/hisun/resource/emsdk/node/12.18.1_64bit/bin&lt;br/&gt;PATH += /Users/likai/hisun/resource/emsdk/python/3.7.4-2_64bit/bin&lt;br/&gt;&lt;br/&gt;Setting environment variables:&lt;br/&gt;EMSDK = /Users/likai/hisun/resource/emsdk&lt;br/&gt;EM_CONFIG = /Users/likai/hisun/resource/emsdk/.emscripten&lt;br/&gt;EM_CACHE = /Users/likai/hisun/resource/emsdk/upstream/emscripten/cache&lt;br/&gt;EMSDK_NODE = /Users/likai/hisun/resource/emsdk/node/12.18.1_64bit/bin/node&lt;br/&gt;EMSDK_PYTHON = /Users/likai/hisun/resource/emsdk/python/3.7.4-2_64bit/bin/python3&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;03&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;验证&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;emcc -v 不报错就成功了&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$ emcc -v&lt;br/&gt;&lt;br/&gt;emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 2.0.3&lt;br/&gt;clang version 12.0.0 (/b/s/w/ir/cache/git/chromium.googlesource.com-external-github.com-llvm-llvm--project a39423084cbbeb59e81002e741190dccf08b5c82)&lt;br/&gt;Target: x86_64-apple-darwin19.4.0&lt;br/&gt;Thread model: posix&lt;br/&gt;InstalledDir: /Users/likai/hisun/resource/emsdk/upstream/bin&lt;br/&gt;shared:INFO: (Emscripten: Running sanity checks)&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;获取帮助 emcc --help，内容过多就不展示了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;看下emcc 的版本是2.0.3&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk$  emcc --version&lt;br/&gt;&lt;br/&gt;emcc (Emscripten gcc/clang-like replacement) 2.0.3 (43fcfd2938b72c57373a910ece897b27aa298852)&lt;br/&gt;Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)&lt;br/&gt;This is free and open source software under the MIT license.&lt;br/&gt;There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98781&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;WebAssembly 简单使用和分析&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;到这里 WebAssembly 的编译工具已经安装好了，我们使用两个官方样例，看一下 WebAssembly 是如何使用的，方便后面的学习。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;当使用 Emscripten 来编译的时候有很多种不同的选择，我们介绍其中主要的2种：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;01&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;生成 HTML 和 JavaScript&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section&gt;&lt;span&gt;找个目录创建 hello_world.c 文件&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br/&gt;&lt;br/&gt;int main(int argc, char ** argv) {&lt;br/&gt;  printf(&quot;Hello World\n&quot;);&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;使用刚才已经配置过的终端，找到 hello_world.c 文件，执行如下命令&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;emcc ./hello_world.c -s WASM=1 -o ./hello_world.html&lt;span/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;span&gt;     &lt;span&gt; 执行后会产生三个新文件：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;hello_world.wasm 二进制的 wasm 模块代码，虽然本地打不开，但是浏览器可以帮忙翻译；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;hello_world.js 一个包含了用来在原生 C 函数和JavaScript/wasm 之间转换的胶水代码的 JavaScript 文件；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;hello_world.html 一个用来加载，编译，实例化你的wasm 代码并且将它输出在浏览器显示上的一个 HTML 文件。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;启动 http 服务命令，查看运行结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;emrun --no_browser --port 8080 ./hello_world.html&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;likai@likaideMacBook-Pro:~/resource/emsdk/demo$ emrun --no_browser --port 8080 ./hello_world.html&lt;br/&gt;&lt;br/&gt;Web server root directory: /Users/likai/hisun/resource/emsdk/demo&lt;br/&gt;Now listening at http://0.0.0.0:8080/&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;可以看到原来 helloworld.c 文件中打印的内容现在了浏览器中。我很好奇 C 代码中的打印结果是怎么跑到浏览器的控制台上的。看似很简单的操作实际上 Emscripten 做了很多事，点开生成胶水代码 hello_world.js 看了下，里面写了很多代码2000多行嘞，加载 wasm，处理内存分配、内存释放、垃圾回收、函数调用，封装了各种方法。编译后的 js 文件我放在了 github 中&lt;/span&gt;&lt;span&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;简单分析一下胶水代码的内容，有助于我们对WebAssembly 的理解，对于后面的使用会很有帮助。（代码地址：&lt;span&gt;https://github.com/likai1130/study/blob/master/wasm/demo/hello_world.js)&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;先一起看下 .wasm 的真容，上面提到了 .wasm 是个二进制文件，打不开，想要看里面内容的话推荐反编译工具 &lt;/span&gt;&lt;span&gt;wasm2wast（https://github.com/WebAssembly/wabt）&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;当然浏览器也可以解析，我们通过浏览器简单看下。右键打开控制台–&amp;gt;Sources–&amp;gt;hello_world.wasm&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5017158544955388&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0ibxBf48JqFO2wibVjT0JXENKqMOJerdrbLu67AqwicliaMvmQicxNwaF9zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2914&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;果然这个文件看得不太懂，看到了 module，我猜这大概是个模块，我找到了 main 函数，不知道是不是 hello_world.c的main，我们还是看胶水代码吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.726962457337884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0zF82TB2PRkdtFUZvibcN0siaXPDxF9KluiaWYNDwhZhvAP4Zvh6mD9AmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1172&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从胶水代码 hello_world.js 中可以看到,载入了WebAssembly 汇编模块 (.wasm)，原来这个 .wasm 被胶水代码加载了一下，核心部分如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function instantiateArrayBuffer(receiver) {&lt;br/&gt;return getBinaryPromise().then(function(binary) {&lt;br/&gt;  return WebAssembly.instantiate(binary, info);&lt;br/&gt;}).then(receiver, function(reason) {&lt;br/&gt;  err(&#x27;failed to asynchronously prepare wasm: &#x27; + reason);&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;  abort(reason);&lt;br/&gt;});&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt; // Prefer streaming instantiation if available.&lt;br/&gt;function instantiateAsync() {&lt;br/&gt;if (!wasmBinary &amp;amp;&amp;amp;&lt;br/&gt;    typeof WebAssembly.instantiateStreaming === &#x27;function&#x27; &amp;amp;&amp;amp;&lt;br/&gt;    !isDataURI(wasmBinaryFile) &amp;amp;&amp;amp;&lt;br/&gt;    // Don&#x27;t use streaming for file:// delivered objects in a webview, fetch them synchronously.&lt;br/&gt;    !isFileURI(wasmBinaryFile) &amp;amp;&amp;amp;&lt;br/&gt;    typeof fetch === &#x27;function&#x27;) {&lt;br/&gt;  fetch(wasmBinaryFile, { credentials: &#x27;same-origin&#x27; }).then(function (response) {&lt;br/&gt;    var result = WebAssembly.instantiateStreaming(response, info);&lt;br/&gt;    return result.then(receiveInstantiatedSource, function(reason) {&lt;br/&gt;        // We expect the most common failure cause to be a bad MIME type for the binary,&lt;br/&gt;        // in which case falling back to ArrayBuffer instantiation should work.&lt;br/&gt;        err(&#x27;wasm streaming compile failed: &#x27; + reason);&lt;br/&gt;        err(&#x27;falling back to ArrayBuffer instantiation&#x27;);&lt;br/&gt;        return instantiateArrayBuffer(receiveInstantiatedSource);&lt;br/&gt;      });&lt;br/&gt;  });&lt;br/&gt;} else {&lt;br/&gt;  return instantiateArrayBuffer(receiveInstantiatedSource);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;主要做了如下几件事情：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;成功实例化后的返回值交由 receiveInstantiatedSource() 方法处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;receiveInstantiatedSource() 代码&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function receiveInstance(instance, module) {&lt;br/&gt;    var exports = instance.exports;&lt;br/&gt;    Module[&#x27;asm&#x27;] = exports;&lt;br/&gt;    removeRunDependency(&#x27;wasm-instantiate&#x27;);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;......&lt;br/&gt;&lt;br/&gt;function receiveInstantiatedSource(output) {&lt;br/&gt;    // &#x27;output&#x27; is a WebAssemblyInstantiatedSource object which has both the module and instance.&lt;br/&gt;    // receiveInstance() will swap in the exports (to Module.asm) so they can be called&lt;br/&gt;    assert(Module === trueModule, &#x27;the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?&#x27;);&lt;br/&gt;    trueModule = null;&lt;br/&gt;    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.&lt;br/&gt;    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.&lt;br/&gt;    receiveInstance(output[&#x27;instance&#x27;]);&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;receiveInstantiatedSource() 方法调用了 receiveInstance() 方法，后者的这条指令：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Module[&#x27;asm&#x27;] = exports;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;将 wasm 模块实例的导出对象传给了 Module 的子对象 asm。倘若我们在上述函数中手动添加打印实例导出对象的代码。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;function receiveInstance(instance, module) {&lt;br/&gt;... ...&lt;br/&gt;Module[&#x27;asm&#x27;] = exports;&lt;br/&gt;console.log(Module[&#x27;asm&#x27;]);  //print instance.exports&lt;br/&gt;... ...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.31873479318734793&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0B6dEib23Pa5CRUPwbaKV7icibIPib90EsLX7x6IwHnxHvCAWLyGRZNAmvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可见，上述一系列代码运行后，Module[‘asm’] 中保存了 WebAssembly 实例的导出对象——而导出函数恰是 WebAssembly 实例供外部调用最主要的入口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看看我理解的对不，wasm 的编译器把 C 代码编译了 .wasm 文件，这个文件是个汇编代码，里面有 C 代码的内容，胶水代码去加载 .wasm 文件，通过 WebAssembly 实例对外提供了 C 代码里面的方法，然后使用 javascript 调用 C 代码。最后给人的感觉就是浏览器上能运行 C 语言的程序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再一起细品下官方原话（翻译过的）:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;pre&gt;&lt;code&gt;WebAssembly(缩写 Wasm)是基于堆栈虚拟机的二进制指令格式。Wasm为了一个可移植的目标而设计的，可用于编译C/C+/RUST等高级语言，使客户端和服务器应用程序能够在Web上部署。&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/li&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;95679&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;02&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;strong&gt;&lt;span&gt;只编译到wasm&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;这个很好理解，就是在编译的时候，不生成默认推荐的 html，只生成 wasm，然后直接调用 wasm 即可。这就要我们自己写胶水代码，下面看个简单的例子。步骤如下：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;（1）写一个 test.c 文件，里面是加减乘除计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（2）编译成 .wasm 文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（3）写一个 html，调用 .wasm 文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;char* toChar (char* str) {&lt;br/&gt;  return str;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;int add (int x, int y) {&lt;br/&gt;  return x + y;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;int square (int x) {&lt;br/&gt;  return x * x;&lt;br/&gt;&lt;br/&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;emcc 就是 Emscripten 编译器，&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;test.c 是我们的输入文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Os 表示这次编译需要优化(可以指定优化策略。emcc --help)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-s WASM=1表示输出 wasm 的文件，因为默认的是输出 asm.js&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-s SIDE_MODULE=1表示就只要这一个模块，不要给我其他乱七八糟的代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;-o test.wasm 是我们的输出文件。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;写一个 html，调用 .wasm 文件。&lt;/span&gt;test.html&lt;span&gt; 这两个函数是关键：&lt;/span&gt;&lt;/section&gt;&lt;pre&gt;&lt;code&gt;function loadWebAssembly (path, imports = {}) {&lt;br/&gt;    return fetch(path) // 加载文件&lt;br/&gt;           .then(response =&amp;gt; response.arrayBuffer()) // 转成 ArrayBuffer&lt;br/&gt;           .then(buffer =&amp;gt; WebAssembly.compile(buffer))&lt;br/&gt;           .then(module =&amp;gt; {&lt;br/&gt;             imports.env = imports.env || {}&lt;br/&gt;             // 开辟内存空间&lt;br/&gt;             imports.env.memoryBase = imports.env.memoryBase || 0&lt;br/&gt;&lt;br/&gt;             if (!imports.env.memory) {&lt;br/&gt;               imports.env.memory = new WebAssembly.Memory({ initial: 256 })&lt;br/&gt;             }&lt;br/&gt;             // 创建变量映射表&lt;br/&gt;             imports.env.tableBase = imports.env.tableBase || 0&lt;br/&gt;&lt;br/&gt;             if (!imports.env.table) {&lt;br/&gt;               // 在 MVP 版本中 element 只能是 &quot;anyfunc&quot;&lt;br/&gt;               imports.env.table = new WebAssembly.Table({ initial: 0, element: &#x27;anyfunc&#x27; })&lt;br/&gt;             }&lt;br/&gt;             // 创建 WebAssembly 实例&lt;br/&gt;             return new WebAssembly.Instance(module, imports)&lt;br/&gt;           })&lt;br/&gt; }&lt;br/&gt; &lt;br/&gt; // 加载wasm文件&lt;br/&gt;loadWebAssembly(&#x27;test.wasm&#x27;)&lt;br/&gt;      .then(instance =&amp;gt; {&lt;br/&gt;        //调用c里面的方法&lt;br/&gt;        const toChar = instance.exports.toChar&lt;br/&gt;        const add = instance.exports.add&lt;br/&gt;        const square = instance.exports.square&lt;br/&gt;&lt;br/&gt;        console.log(&#x27;return:   &#x27;, toChar(&quot;12352324&quot;))&lt;br/&gt;        console.log(&#x27;10 + 20 =&#x27;, add(10, 20))&lt;br/&gt;        console.log(&#x27;3*3 =&#x27;, square(3))&lt;br/&gt;        console.log(&#x27;(2 + 5)*2 =&#x27;, square(add(2 + 5)))&lt;br/&gt;  }) &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;有了第一个案例的理解，就大概知道这个意思了，创建了一个 WebAssembly 的实例，返回 WebAssembly 导出对象，调用了 test.c 里面的函数。这里面有一些胶水代码语法相关的知识。&lt;/span&gt;MDN Web docs-WebAssembly&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4487678339818418&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0icCBPCWnQazarp0I0AYtOEMpEtGaLgeSG9mJFl02ZBs22r6Us8aDyNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1542&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.23466349017272187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0Q2pWJ8aVLIgP1icialoIQvNDDV5YVYbHZaOe4zY0jiaoKaTgJbLQ1Or9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3358&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;可以看到优化后的 wasm 文件，只有这几个函数了，并且可以看出包含导出 test.c 中的函数。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98781&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;总   结&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;20%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;我们今天通过两个简单的例子讲述了 WebAssembly 的使用，也进一步理解了 WebAssembly 是什么，整体的流程是这样的：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.18930041152263374&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RALF9fwqQmaV23BzGkKic5wOtALibsvSm0G0REkS5v6EKdov8O2u6fyqVnlNr4hia0gz2wpXGXmS0hYdBzzlmAgCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1458&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;使用 Emscripten 编译 C 语言源代码，生成 .wasm 文件和胶水代码，通过 javascript 调用胶水代码或者 .wasm，使 C 语言的程序在浏览器中运行。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以上就是这篇文章要分享的全部内容了，接下来我们将分享基于 wasm 的加密工具。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93516&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-brushtype=&quot;text&quot;&gt;文章参考&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;p hm_fix=&quot;374:350&quot;&gt;1、Webassembly官方网站&lt;/p&gt;&lt;p hm_fix=&quot;374:350&quot;&gt;网址：https://webassembly.org/&lt;/p&gt;&lt;p hm_fix=&quot;374:350&quot;&gt;&lt;/p&gt;&lt;p&gt;2、MDN Web docs-WebAssembly&lt;/p&gt;&lt;p&gt;网址：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3、中文原文&lt;/p&gt;&lt;p&gt;网址：https://www.zcfy.cc/article/an-abridged-cartoon-introduction-to-webassembly-ndash-smashing-magazine&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a2d54f30b0ffc2bfe1830f360fe638a0</guid>
<title>百度网盘分享链接秒挂？试试这个神器</title>
<link>https://toutiao.io/k/tksx5x5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;苏生不惑第&lt;code&gt;199&lt;/code&gt; 篇原创文章，将本公众号设为&lt;code&gt;星标&lt;/code&gt;，第一时间看最新文章。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章开始前说下之前文章 &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487207&amp;amp;idx=1&amp;amp;sn=5f88cb74dfe98a4805a03cac86e3a7fc&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;2020年10月最新免费加速下载百度网盘文件方法&lt;/a&gt;  介绍的油猴脚本网盘助手又可以下载百度网盘文件了。&lt;img data-ratio=&quot;0.47300469483568075&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4tLCFeoCoO3U1bNjC1xbY3rOQ1HETeUd2P93JAZCc8hZfUcaGMicllvw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;852&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过它的自动获取提取码功能失效了，可以用网盘精灵 （支持百度云盘、新浪微盘、蓝奏云盘、腾讯微盘的提取码获取）https://chrome.google.com/webstore/detail/%E7%BD%91%E7%9B%98%E7%B2%BE%E7%81%B5/llckjenneniijhiehfmbmlgdekeakbmf/related?hl=zh-CN  这个Chrome扩展代替下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过测试下来效果不及网盘助手，毕竟用户量还小。&lt;img data-ratio=&quot;0.7398843930635838&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4WFyqC7PPsuUDeSibq6dyub72OaT1lu7v61WEpzhVm1QDylHCl2MbUeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;519&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候刚分享的百度网盘链接就挂了，比如下图，下面分享下怎么解决它。&lt;img data-ratio=&quot;0.3421516754850088&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4OYFsicIIZc3jSFk020F5RCBaygz5Pvp9wSFPSk3OWz5qXJiaXKpcDKyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;567&quot;/&gt;&lt;img data-ratio=&quot;0.37748344370860926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4gmGKABtxsLZps5ms0gfJax69NQtGhG7UGPEicibpDnhdXWX2HfX68bxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;453&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;秒传链接提取油猴脚本&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓秒传链接就是可以转存他人用提取码分享的文件，也可以自己生成提取码分享敏感文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原理就是只要有人上传过文件到百度网盘，它的特征码就被记录在百度的服务器上，即使删除了该文件，也可以利用生成的秒传链接把文件转存到自己网盘上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面具体操作下，打开软件标准提取码生成器 https://github.com/JixunMoe/mfcDuDownloadCodeGenerator 或者命令行工具 https://github.com/winterssy/bdpass   生成文件的秒传链接（如果下载慢后台回复 &lt;code&gt;网盘&lt;/code&gt; 获取）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32665832290362956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4twpmUwjIpS8AMb7w9CtVB8z5CKJv3bES2EdianBvDncbSj4iaVdATQjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;799&quot;/&gt;&lt;figcaption&gt; &lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上传之前文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487475&amp;amp;idx=1&amp;amp;sn=48b2ed6caae9f0c10164622a16f37dc2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;良心整理：PDF工具合集&lt;/a&gt; 分享的PDF工具 ,生成秒传链接&lt;code&gt;5636E76E47676141EC5449E715B7B553#8DD9EE2CDCE070EDBA18190EF6B712EE#6426135#PDFShaper中文版.zip&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装好这个油猴脚本https://greasyfork.org/zh-CN/scripts/397324 （关于安装油猴脚本和使用见之前文章&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247485484&amp;amp;idx=1&amp;amp;sn=bbec1d0d3dcaa3bc1b875c35b6c05ad2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;实用油猴脚本推荐，让你的谷歌浏览器更强大&lt;/a&gt;），用于提取和生成百度网盘秒传链接，支持梦姬（就是本文分享这种格式）、游侠、pandownload、baidupcs-go的秒传链接提取，支持批量转存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开百度网盘首页，点击秒传链接，输入上面生成的提取码。&lt;img data-ratio=&quot;1.0702702702702702&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4wEluxgxuPcwlpLVoYJiaPonq51LYd9VPOB0FUZzuEJPApvFBnicbceIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;555&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;转存成功。&lt;img data-ratio=&quot;0.3950617283950617&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4A95PxSHYeicU5hiaTmb6yPZTSJesgv7fvvvAlxK6JIyo2ibXn5Sy49zbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;405&quot;/&gt;在你的网盘里就可以看到这个文件了，之后你分享&lt;code&gt;5636E76E47676141EC5449E715B7B553#8DD9EE2CDCE070EDBA18190EF6B712EE#6426135#PDFShaper中文版.zip&lt;/code&gt; 这个提取码出去就行了。&lt;img data-ratio=&quot;0.06001846722068329&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4AXCXsCEhlUcrLvw6YDqhqbqHbaMUtbmEutIqp199SDLcqhphq1LiblQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1083&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过上面的操作还是有点麻烦，还可以试试百度网盘新出的收集文件功能 https://pan.baidu.com/disk/main#/transfer/list  ，可以自己建分享链接，让好友把文件上传进去，不用担心网盘分享链接失效了，链接有效期最多30天。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47126436781609193&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4aaKNe5fs4v9cdpo7emQoh6Up7mgKiaibTQicRexM61SlvFalIGLvvxk1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1131&quot;/&gt;&lt;figcaption&gt; &lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击生成一个分享链接地址 。&lt;img data-ratio=&quot;0.6619354838709678&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4xiccgyIGUZfHWPSFA29zk7EZhWH60xZ9hicWrsseKEDqM9iaCQDyAlO8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;775&quot;/&gt;打开这个地址就能上传文件进去了。&lt;img data-ratio=&quot;0.7356746765249538&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk47amqRXGdjDJNR8w7HzWkWSfLFcxseTdiaMw1UH69bmicSLHVoBWl9DSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;541&quot;/&gt;在我的收集里就有了，以后求敏感资源就生成一个分享链接，让对方把文件传到你的网盘。&lt;img data-ratio=&quot;0.3947681331747919&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4ef4gKw7Hgcicz24QqOPVT8UxibZ3Djh3QBUrsD6cYKtPlDg0MvOrOreg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;841&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着分享个加速下载网盘工具impan 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;impan&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是个基于 aria2  的下载工具（公众号后台回复 &lt;code&gt;网盘&lt;/code&gt; 获取），下载软件后先修改配置文件 pan.conf 里的 cookie 设置。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[pan.baidu.com]&lt;br/&gt;STOKEN=xxxx&lt;br/&gt;BDUSS=xxxx&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;STOKEN 和BDUSS 可以在百度网盘控制台storage获取到。&lt;img data-ratio=&quot;0.4270833333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4rhNGGO6L03vxPHJt8ibUBe5opwhDsWGCklGQB9tASQt9Z9bsLk68omg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;672&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开软件会监听 6800 端口，同时登陆你的百度网盘账号 。&lt;img data-ratio=&quot;0.3457286432160804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4iaibqMZYu1QYpMXYyjicPfW9UEKQTmdBFQ2r6tR6zmYVKzKz6xQp2F2tQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;995&quot;/&gt;右侧选择你的网盘文件下载。&lt;img data-ratio=&quot;0.5732899022801303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4bEib2L3xkENwicvKEcaFKGARqdoRrqCdWiac2v3QwrUZf7Y8qnb3pArXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;307&quot;/&gt;下载速度比百度网盘的100k/s还是快不少的。&lt;img data-ratio=&quot;0.24406332453825857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4dJAIuG7n5kdNTMeuZej3rwcGYz7fbERnibvcDOGVGzWt7K9N96MJz7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;758&quot;/&gt;话说最近新版《鹿鼎记》遭到全网吐槽，还是重温下陈小春版的鹿鼎记吧（如果想看后台回复 &lt;code&gt;电视剧&lt;/code&gt; 获取）。&lt;img data-ratio=&quot;0.6829590488771466&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4OiaHib8tvaSIwkLE7tZ6xUekJvYmQecYjKhADPCpvruHrUib4yEdryC4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;757&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后提下百度网盘在内测的 在线文档（有点类似石墨文档和腾讯文档） https://pan.baidu.com/disk/main#/wpguide&lt;img data-ratio=&quot;0.6869747899159664&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4J6n6w5cVdlhzPqCOxn5kLZO6Uib5YOVfdwIPEJna29FGzWWqnMcu8Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;476&quot;/&gt;在首页新建在线文档。&lt;img data-ratio=&quot;0.1765375854214123&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4cibJYL5p9TGyPgo8mUyFuTib6hLrCsYhKAMFX3B159O9wUiawviaqjUJcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;可以方便的编辑文档和插入网盘内的文件。&lt;img data-ratio=&quot;0.3020408163265306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4yd5742lrxpicoOTf4NMQc6yFgIBoPaGqwZINYoqFncfYpBgUDtYLeUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;效果如图。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3610648918469218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4ccMYshAbzkw36QohGq6hgwE2TWLI3GOSBbb1jBMw32U1ibJ1aicG8zvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果文章对你有帮助还请 &lt;code&gt;点赞/在看/分享&lt;/code&gt; 三连支持下， 感谢各位！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近原创文章：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487983&amp;amp;idx=1&amp;amp;sn=e79f73da0ca354c10b73a9b9167e4158&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;2020 年 11 月福利，小伙伴们来领现金红包&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487936&amp;amp;idx=1&amp;amp;sn=43c4cf2364fce0a306c25e81ee05f350&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;一键下载百度文库/豆丁/道客巴巴文档，支持导出PDF，Word，txt 文件&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487906&amp;amp;idx=1&amp;amp;sn=38a7429316d494d2f221804675cc0fc0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;解除网页查看限制，自由查看和跳转网站&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487818&amp;amp;idx=1&amp;amp;sn=05c12cc952249bbde7ed6ec0e6569b5c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;不用写代码，Chrome 扩展神器 web scraper 抓取知乎热榜/话题/回答/专栏，豆瓣电影&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487784&amp;amp;idx=1&amp;amp;sn=f41890470c54c150bfa02144f21899a5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;视频下载神器：支持腾讯/优酷/爱奇艺/b站/微博等全网视频&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247486819&amp;amp;idx=1&amp;amp;sn=79437e027e21f0b3b12e8a72592c82ec&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;2020 最全电子书搜索网站，找电子书不再愁&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487672&amp;amp;idx=1&amp;amp;sn=669e6c9aa9f522cabb21a48d85308aab&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;b 站账号快速升级到 Lv6：每天自动签到，观看，分享，投币视频&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyMjg2ODExMA==&amp;amp;mid=2247487229&amp;amp;idx=1&amp;amp;sn=63265f859e9043d2af03ce290577f044&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;集赞生成器：朋友圈集赞不求人&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;公众号 苏生不惑&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sZeVtjGD4lEVVINkpaiaGHrHiaWVo9Ltk4ia6y907Gheu57tRNDsepzM6kZXSM4ia8tyic8j3BgzNTzCicuMMMCUOS6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;figcaption&gt;扫描二维码关注或搜索微信susheng_buhuo&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60ec1e6b637ac21873107258c886c8fa</guid>
<title>什么是微内核架构设计？</title>
<link>https://toutiao.io/k/u2adh7g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>