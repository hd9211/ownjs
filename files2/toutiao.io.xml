<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fc5f1c2bf1fe983c3c4baafc40cfbd2b</guid>
<title>将你的 Windows，快速打造成 Docker 工作站</title>
<link>https://toutiao.io/k/138vl3z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;手里的macbook因为键盘问题返厂维修了，只好抱起了久违的Windows。首先面临的，就是Docker问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;docker好用，但安装麻烦，用起来也命令繁多。一个小白，如何打造舒适的docker环境，是一个非常有挑战的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文将手把手的教你怎么把docker方便的搞到windows上，打造一个好用的开发环境，并安装好用的管理工具。所以本文包含以下内容：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;安装Windows10&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安装WSL2环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安装Ubuntu操作系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安装Docker&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安装portainer&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用方法&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;篇幅较长，所以本文暂时杜绝废话。力求一气呵成，半小时内手握白富美。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 安装WSL2&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.1 安装Windows Terminal&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在远程连接其他Linux的时候，我通常使用&lt;code&gt;Xshell&lt;/code&gt;，就因为它长得比较漂亮耐看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Windows上，就可以安装&lt;code&gt;Windows Terminal&lt;/code&gt;。有点类似于MacOS上的&lt;code&gt;iTerm&lt;/code&gt;，可以说是Windows下最舒适的终端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装&lt;code&gt;Windows Terminal&lt;/code&gt;需要从应用商店去获取，就是下面这个按钮。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUH11yHD5dQxzKPJ6iaNRvbNwBH806nbx3icbHme4wXR8l22VQRhKnuEEw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在搜索框里搜索&lt;code&gt;Windows Terminal&lt;/code&gt;，即可找到这个软件。比较人性化的一点是，它不像Mac的应用商店一样，需要你先准备一个账号。WT不需要登录即可获取。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的页面一直打转也不要紧，关闭重新打开几次就好了。由于众所周知的原因，国外网站就没有几个不转圈的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.593929450369155&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUicu7hk5XaFZfLbTsUyCRYicMyz6N3iaMJ594eyyiaSibk79g5I7o0xE0LzA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1219&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1.2 开启WSL2&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图，在控制面板，找到程序选项，点击 “启用或关闭Windows功能”。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4383318544809228&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJURtJgZoTvQuTB6IaCaosYRmoauA9dcTVGF9RW1YqJlx3ZKfkIXCUTwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1127&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从弹出的对话框里，划到最下边，然后给“适用于Linux的Windows子系统“，打勾，完事！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5883376849434291&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUw7CBzHYhJCWqP8c3rlSibsKFpWFIruBTgNBP2F2XsdNIFd70HWx8Jibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1149&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要启用WSL2，必须要把Windows10升级到最新版本才可以。在Powershell中，执行下面命令，切换成WSL2版本。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;wsl --set-default-version 2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2 安装Ubuntu子系统&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从应用商店安装Ubuntu系统，这个系统将会以软件的形式存在。我这里选择的是LTS版本，可以看到给它打分的人并不多，可能大多数都是像我一样没有微软账号的游客。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5669421487603306&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJURUMQOLmANSxt3j70n0ia1LRXTTCW6fThOuLoJ0LQ2j9yXw01ia0epJyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1210&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，神奇的事情发生了。在我们的&lt;code&gt;Windows Terminal&lt;/code&gt;右上角，有一个向下的箭头，点击它，就可以看到刚刚安装的Ubuntu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Windows上离着Linux，只差一次点击而已。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5221987315010571&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUEibDhRLFeia99uRsBg0E3J9MS3qswdKA3ELwUH34Syicia663jCNrpzvSw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;946&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进入Linux系统之后，我们就可以像配置一个普通Linux一样配置这台机器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先把ubuntu的软件源给换掉。编辑&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;文件，把它的内容换成下面的源。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse&lt;br/&gt;deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse&lt;br/&gt;deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse&lt;br/&gt;deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse&lt;br/&gt;deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse&lt;br/&gt;deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse&lt;br/&gt;deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse&lt;br/&gt;deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse&lt;br/&gt;deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse&lt;br/&gt;deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，安装最好用的&lt;code&gt;oh-my-zsh&lt;/code&gt;。先用&lt;code&gt;sudo apt install zsh&lt;/code&gt;安装shell终端，然后运行下面的命令。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sh -c &lt;span&gt;&quot;&lt;span&gt;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&lt;/span&gt;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等待一小段时间，我们的终端颜值就更上一层楼了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 安装Docker&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;安装Docker，直接从官方下载最新的Windows版本就可以了，不要下载一些其他平台的阿猫阿狗。地址在这里&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;https://www.docker.com/products/docker-desktop&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一路next即可安装。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUrSSETkCvCcylIXkHEQq6P9lbsvPVia7y7TE6LpEUVSTyXn1f28XKS0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;启动之后，点击设置，然后更改镜像仓库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为一些不可明说的原因，docker官方的镜像仓库无法访问。你可以从下面这些挑选一个，或者直接全部写上 。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[&lt;span&gt;&quot;https://registry.docker-cn.com&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;https://dockerhub.azk8s.cn&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;https://reg-mirror.qiniu.com&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;http://hub-mirror.c.163.com&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;https://docker.mirrors.ustc.edu.cn&quot;&lt;/span&gt;&lt;br/&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完事之后，不要忘了 &lt;code&gt;apply &amp;amp; restart&lt;/code&gt; 重启生效一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时在右下角，就出现了Docker的小图标，非常的赏心悦目。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 安装 portainer&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有很多Docker的管理工具，但我独爱portainer，原因就是它好用，而且是基于web的。它不仅能管理单机上的docker，还能够管理局域网中的集群，只要你使用&lt;code&gt;-H 0.0.0.0:2375&lt;/code&gt;把它监听在网络上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看它的一张图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUQ3C9ics60BemqQiceUUjQm26p90tWtiakyhpWecwILMYPHxqZkGg9uoqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以说，docker命令能搞的事情，在这个web应用上，都能搞。但首先我们得把它安装上去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开我们的wsl2的Ubuntu系统，此时你会发现，已经有了docker命令。我们在终端输入以下命令行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;docker volume create portainer_data&lt;br/&gt;docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;稍等片刻，portainer就启动成功了。这得益于我们把镜像仓库切换到国内的原因。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;访问 http://localhost:9000 端口，将出现portainer的设置界面。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.471875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJU5JpCOlwM11FwbAltTOSqqicGXC9RsqBA5Jd3icuctwcfNhwBPS57OcYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在模板页面，有很多常见的软件应用，直接点击部署，就可以将软件安装在系统上。如果你是作为开发机使用，那么推荐使用docker的host模式，相当于使用主机的网络，和安装一个平常的软件没什么区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我想要一个MySQL数据库，就不需要再跑到MySQL官方下载一个，然后进入繁杂的安装程序中。直接在Docker上搞一个就可以了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.601081081081081&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUrXPrh1zwNovXKNEkWtJno5Gwz2FDibFIaPJFMJwJzro7FAZtngqYk3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;925&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击小箭头，可以直接在web上进入Docker虚拟环境的命令行终端，非常的方便。如果你平常要调研的额软件和中间件非常的多，想要快速体验它的功能效果，这不得不说是个非常好用的功能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6153005464480874&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLpMicibT8xBYNRorRibpKeicqJUF7elwEZSddhJamFylvs3CM86GQjgHnezZvkWkib5WAs2YLiaf2ibXSRhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;915&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;End&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到此为止，我们的Docker开发环境就搭建完毕了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是一个命令行控，可以直接使用WSL终端提供的docker命令进行操作。但如果你对docker并不是非常熟悉，那么就可以使用portainer实现对Docker的管理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人生苦短，如果把时间都花费在安装软件上，那是多么一件悲哀的事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搞定Docker，以后安装软件，只需要在google搜一下软件docker启动的命令就可以了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;省时省力，不易出错。即使你的公司没有虚拟化环境，docker作为一个开发工具，依然有它的价值。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：&lt;strong&gt;小姐姐味道&lt;/strong&gt;  (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MTc4NTUxNQ==&amp;amp;action=getalbum&amp;amp;album_id=1551616798431690754#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;1. 玩转Linux&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MTc4NTUxNQ==&amp;amp;action=getalbum&amp;amp;album_id=1339444055490592770#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2. 什么味道专辑&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3. &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521059&amp;amp;idx=1&amp;amp;sn=d6742140c684f16cb4435508bdb5a418&amp;amp;scene=21#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;蓝牙如梦&lt;/a&gt;&lt;br/&gt;4. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520865&amp;amp;idx=1&amp;amp;sn=ff7a751a092000a9aec8e47df35ab25a&amp;amp;chksm=8780bae5b0f733f3bd75575ef9c14e548bd833bf2ba1289b6f77fd0bbcc5fbc264c19c8cb04a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;杀机！&lt;/a&gt;&lt;br/&gt;5. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521617&amp;amp;idx=1&amp;amp;sn=86e4bee100fa78ccc94e24bb27f0e71a&amp;amp;chksm=8780c7d5b0f74ec36bd0a06167f5b84777ecb2d48b57f3d96e3ce3c4575e6b777dda0188376f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师BUG，非比&lt;/a&gt;寻常&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA4MTc4NTUxNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLrpoDEiau93r55W4t2fdn7HtIUQLGrD0Tnt3SlucZhSN9fIxBic1NB349KKIiaHvCZ0UgGsTjibWehicmA/0?wx_fmt=png&quot; data-nickname=&quot;小姐姐味道&quot; data-alias=&quot;xjjdog&quot; data-signature=&quot;不羡鸳鸯不羡仙，一行代码调半天&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cbb9ac1dc92411698f9c08d5b64336b4</guid>
<title>周末别闲着，快来吧！</title>
<link>https://toutiao.io/k/sat069j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c773182b40854b3101e871d73a6bf834</guid>
<title>美团终端消息投递服务 Pike 的演进之路</title>
<link>https://toutiao.io/k/8knps33</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1 Pike的前世今生&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.1 Pike 1.0的诞生背景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.2 Pike 1.0的工作流程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.3 Pike 1.0的优势&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.4 Pike 1.0的痛点&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1.5 Pike 2.0的诞生&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2 Pike 2.0架构设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3 Pike 2.0工作机制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.1 PikeClient生命周期&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.2 PikeClient工作模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3.3 PikeClient保活机制&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4 Pike 2.0新增特性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5 Pike 2.0稳定性保障&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5.1 Pike 2.0监控体系&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5.2 Pike 2.0个案用户追踪&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;6 Pike 2.0建设成果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;7 总结与未来展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 Pike的前世今生&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.1 Pike 1.0的诞生背景&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2015年，美团诞生了Shark终端网络通道，为公司移动端提供长连代理加速服务。Shark通过网络接入点的全球多地部署和保持长连来提升网络请求的端到端成功率，降低端到端延时，从而提升用户体验。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0是基于Shark长连通道实现的应用内推送服务。由于底层传输基于Shark长连通道，使得Pike 1.0天生便具有了低延时、高可靠、防DNS劫持等优秀基因。目前Pike 1.0在美团内部的实时互动、营销推送、状态下发、配置同步等业务场景都有广泛的应用。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.2 Pike 1.0的工作流程&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;移动端SDK会在每次长连接创建成功后，使用APPID、设备唯一标识UnionID（&lt;/span&gt;&lt;span&gt;美团唯一标识、点评唯一标识等&lt;/span&gt;&lt;span&gt;）向服务器发起注册，在注册成功之后业务服务端就可以通过Pike 1.0服务端SDK提供的接口，主动向设备的App推送消息。服务端推送的消息通过长连接通道抵达客户端，最后通过注册的回调接口投递给业务方。整体工作流程参见下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4943109987357775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8eDvcnYKQYdalzqexK0GEpVPOoX3s1bXh6kqt0KwUiawStibBUr3zLFGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3164&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图1 Pike 1.0工作流程图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.3 Pike 1.0的优势&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0底层传输基于Shark长连通道，所以Pike 1.0在以下几个方面有不错的表现：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;防DNS劫持&lt;/strong&gt;：底层通道直接使用IP直连，省去DNS解析耗时的同时也避免了被DNS劫持的风险。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;低延时&lt;/strong&gt;：Shark长连接采用就近接入点长连接的方式，省去了传统HTTP传输需要多次建连、握手的消耗，端到端数据传输延时相比HTTP大幅缩短。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;安全性好&lt;/strong&gt;：Shark采用自定义二进制协议进行数据传输，进行了通道级别的TLS加密，防篡改，更安全。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;更好的境外体验&lt;/strong&gt;：Pike 1.0与Shark共享服务集群，Shark长连通道在海外多地都部署了接入点，代理加速接入，网络延时及成功率表现要优于常规请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.4 Pike 1.0的痛点&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0作为Shark的衍生产品固然有其闪光的地方，但是对Shark的强依赖所带来的痛点更是让开发人员叫苦不迭，主要痛点如下。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.4.1 代码结构耦合&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在客户端SDK方面，Pike 1.0代码与Shark代码结构耦合，共用底层通道建连、数据加解密、二进制协议等逻辑。如图展示了Pike 1.0与Shark在代码结构上的关系。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5412311265969802&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8MDncw5dI2e1XSia0xPzmxg0hvo1NzAbr3PW50MpZWARuY8bV90X1SQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3444&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图2 Pike 1.0与Shark代码结构示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;耦合带来的弊端一&lt;/strong&gt;：代码优化升级困难。针对一个SDK的变更经常需要更多地考虑对另一个SDK是否有负面影响，是否影响面可控，这就无端地增加了开发成本。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;耦合带来的弊端二&lt;/strong&gt;：Shark与Pike 1.0的网络配置环境共用，如图所示，通过DebugPanel对SharkTunnel进行网络环境配置都会同时对Shark和Pike 1.0生效，但是业务方在使用的时候往往只关注其中的一个SDK，不同SDK之间的相互影响引入了很多客服问题，也给客服问题的排查带来了较多干扰因素。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.4.2 账号体系混乱&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0在同一个App上只支持一种设备唯一标识UnionID，不同App上注册使用的UnionID会有不同，例如美团使用美团唯一标识，点评则使用点评唯一标识。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假如一个业务只在一个App上使用的话Pike 1.0自然可以很好地工作，但是同一个业务有可能需要在多个App上同时使用（&lt;/span&gt;&lt;span&gt;如图所示&lt;/span&gt;&lt;span&gt;），如果业务方不对账号体系进行兼容的话，美团App上使用点评唯一标识作为推送标识的业务将无法工作，点评App上使用美团唯一标识作为推送标识的的业务也会无法工作。这就导致同一个业务在不同App上的推送标识ID逻辑会非常复杂，后端要同时维护多套账号体系之间的映射，才能解决账号体系混乱的问题。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5956873315363881&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8AFas9MwjgfFcMlleFEf9Sd4HwYDjNG30uAYfNDuCg7wX9dhQvjmMzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1484&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图3 Pike 1.0账号体系不兼容示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.4.3 推送连接不稳定&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0由于共用Shark的通道逻辑而缺乏推送场景专项优化，在检测通道异常、断连恢复等方面表现不够优秀。在通道可用性上，Shark与Pike 1.0关注的SLA也有着很大的不同。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;例如，Shark在长连接通道不可用的情况下，可以通过降级短连接来规避业务网络请求持续失败所带来的成功率下降问题。但是对于Pike 1.0此时如果通道不能快速恢复的话就会造成业务消息投送失败，将直接影响消息投递成功率。所以Shark通道针对连接保活的公共逻辑并不能完美地应用在Pike 1.0业务场景上。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然Pike 1.0在Shark通道的基础上，进一步在协议层强化了心跳探测机制以提高通道可用性，但通道不能及时检测异常还是时有发生。此外，Pike 1.0内部使用的事件分发技术的可靠性还暂时没能达到100%，零星地会上报一些异常断连而导致推送不成功的客服问题。综上，针对推送连接不稳定专项优化的诉求也就不断被提上日程。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1.5 Pike 2.0的诞生&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0现有的痛点在业务场景日益丰富的现状下遭遇了诸多挑战。力求解决Pike 1.0现有在Android和iOS平台运营上遇到的问题，一方面我们重新梳理产品架构与代码实现，另一方面我们决定与基础技术部另一个服务于H5的消息投递服务Pike Web进行产品融合，进而推出全新的升级产品——&lt;strong&gt;Pike 2.0&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;下图展示了Pike 2.0的产品全景，针对Pike 1.0的现状，Pike 2.0前后端都做了诸多优化，包括技术架构升级、集群独立、协议扩展等。其中在客户端方面Pike 2.0提供了基于多语言实现服务于多平台的SDK，在服务端方面Pike使用部署Java应用的分布式集群来提供服务。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5379814934366258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8vTrjRQvuybbjoK1FTqib9ByUYB4Ta5Qp67vXZiaFfcnjZJCmicBIqXjJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4647&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图4 Pike 2.0产品全景图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;本文主要从客户端视角，详细阐述Pike 2.0 客户端SDK的技术方案设计，从原理上说明Pike 2.0带来的技术优势。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 Pike 2.0架构设计&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;针对上文提及的Pike 1.0代码结构耦合的痛点，Pike 2.0进行了全新的架构升级，在代码结构、环境配置、服务集群等方面上都与Shark保持产品隔离。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.1 设计思想&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过接近一年的技术积累与沉淀，从Shark提炼的TunnelKit长连内核组件和TNTunnel通用通道组件已经趋于稳定，所以Pike 2.0选择基于TunnelKit与TNTunnel来构建双向消息通道服务。具体优势有：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0基于TunnelKit长连内核构建，能有效地复用现有长连接控制相关的功能，减少不必要的开发工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0能够共享TNTunnel的相关通用特性，如Shark协议封装、数据加解密等，后期维护成本较小。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0协议作为Shark协议的Payload传输，可以灵活定制自己特性相关的协议。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2 整体架构&lt;/span&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3204853675945753&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8y5RgiaVrrFLJVqXursgoI4yYKJ6YHr1TePzGp7IBt85bibGNZbfSTI5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;5604&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图5 客户端架构演进图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;整体架构如图所示，包括Pike接口层、Pike通道层、TNTunnel通道层和TunnelKit长连内核层。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.1 Pike接口层&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike接口层旨在为主流前端技术栈中所有需要应用内消息服务的业务提供简洁可靠的接口：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0提供了 Android、iOS、MRN等公司主流技术栈的接入SDK，业务可以根据自己的需求灵活选择。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0针对不同的消息QPS，设计了两种不同Client。对于消息量超过50条每秒的业务，例如直播弹幕推送，我们推荐接入聚合消息Client；对于消息量较小的其他业务，普通消息Client则可以满足需求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Pike 2.0针对线上Pike 1.0系统提供了业务无感的迁移方案，业务方无需任何人力投入便可以从之前的Pike 1.0系统迁移至Pike 2.0系统来进行消息的收发。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.2 Pike通道层&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike通道层是特性的实现层，所有Pike接口层的API调用都会通过线程调度转变成封装的Task在Pike通道层完成具体的操作，Pike通道层是单线程模型，最大程度规避掉了线程安全问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike特性如下：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;断线重连&lt;/strong&gt;：鉴于长连接的不稳定特征，Pike 2.0通道通过断线重连机制来使的业务方可以认为在网络没有发生故障的情况下是持续可用的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务鉴权&lt;/strong&gt;：业务后端可以通过Pike 2.0通道对连接的监控来感知连接变更，同时对接入网络的客户端设备进行可用性判别。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;别名机制&lt;/strong&gt;：针对不同业务方对业务标识做了隔离，每个业务可以自定义标识ID，解决了Pike 1.0同一个App平台不同业务必须强制使用相同标识ID的痛点。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;上行/下行消息&lt;/strong&gt;：Pike 2.0是双向通道服务，不仅支持Pike 1.0原有的消息推送能力，即服务端向客户端发送下行消息；同时也支持客户端主动发送消息，即客户端向服务端发送上行消息。业务只要通过Pike 2.0系统便可以形成消息的闭环。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;分组/聚合消息&lt;/strong&gt;：Pike 2.0支持消息分组和消息聚合来满足高QPS业务场景的使用。其中消息分组表示业务可以通过自定义标签来对一组用户进行消息广播；消息聚合表示将短时间内井喷式的消息进行聚合下发以提高系统的吞吐量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;消息保序&lt;/strong&gt;：Pike 2.0支持同一客户端发送的上行消息有序投递到固定的业务服务器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;独立通道&lt;/strong&gt;：Pike 2.0默认所有业务是使用一条共享的通道，针对业务量大或者对吞吐量有要求的业务可以自动切换独享的通道来保证消息的投递成功率和时延。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;通道保活&lt;/strong&gt;：Pike 2.0在连接保活的基础上增加了通道巡检，能够在检测到异常的情况下自动重启通道，确保在要求长稳的环境下进一步提升通道可用性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.3 TNTunnel通道层&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TNTunnel通道层是封装通用通道逻辑的功能层，主要涉及通道状态管理、协议封装、数据加解密等通用核心模块，是将通用通道逻辑从原先Shark通道中提炼而成的独立分层。Pike协议虽然是构建在现有Shark协议之上的应用层协议，但是Pike通道已经和原先的Shark通道在逻辑上完全解耦。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一方面，Pike 2.0会最大限度地复用Shark协议已成熟的技术，但是又不依赖于原有的Shark逻辑；另一方面，后续涉及二进制协议、安全协议等协议方面的升级优化都可以同时服务于Pike 2.0。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2.2.4 TunnelKit长连内核层&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;TunnelKit长连内核层主要功能是对接Socket来处理TCP或者UDP数据的发送与接收，管理各个连接的可用性等。每条Pike 2.0通道在TunnelKit中都是维护一条连接的，通过心跳保活机制和连接管理来保证在网络环境正常的情况下永远有一条连接来承载Pike数据。TunnelKit作为所有通道层的基础，是决定上层长连接通道稳定性最重要的一层。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3 Pike 2.0工作机制&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在进行了全新架构升级的基础上，Pike针对上文提及的Pike 1.0账号体系混乱、推送连接不稳定的痛点重新设计并完善了工作机制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其中，PikeClient作为Pike系统对接业务方的门户，在整个Pike 2.0系统中起着至关重要的作用，本文将以PikeClient为切入点介绍Pike的工作机制。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.1 PikeClient生命周期&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了更好地维护Pike 2.0内部状态，PikeClient使用状态机来负责生命周期管理。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1392&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP89yXvz94u85xIAe5gfjXhtCPMyjZksuThE8vsIsibqA7DlV5QNpjgicuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2500&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图6 PikeClient生命周期图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如图所示，PikeClient生命周期主要包括如下几个部分：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;onStart&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：该状态是业务方调用StartClient或者RestartClient之后进入的状态，此时PikeClient已经正常启动，之后Pike 2.0内部会发起业务鉴权并根据鉴权结果流转到其他的状态，如图所示如果业务鉴权失败则进入onStop状态，如果业务鉴权成功则进入running状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;onStop&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：该状态是业务方调用StopClient或者业务鉴权失败之后进入的状态，此时PikeClient已经停止工作，客户端进入该状态之后需要Restart才能重新使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;running&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：该状态是PikeClient长稳工作的状态，此时Pike 2.0等待响应服务推送的下行消息或者随时准备发送上行消息。作为双向消息通道，Pike 2.0处理上下行消息的能力是完全并行的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;onReceive&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;: 该状态是PikeClient成功接收到下行消息之后进入的状态，Pike 2.0将接收到的消息投递给业务方之后重新进入running状态等待下一次操作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;onSendSuccess/onSendFailure&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：该状态是PikeClient发送上行消息之后进入的状态，业务方可以通过监听该状态来获取本次消息发送的结果。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过基于状态机的生命周期管理，既严格定义了PikeClient的工作流程，也可以准确监控其内部状态，提高了PikeClient的可维护性。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2 PikeClient工作模式&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;针对Pike 1.0混乱的账号体系痛点，Pike 2.0设计了全新的工作模式。如下图所示，Pike通过通道代理模块提供共享通道和独立通道两种模式来满足不通业务场景的需求。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6415981198589894&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8H9uo6RvTxTBKfau8LzEH7mSB7K2ETjibMxo41rUicpYvfqX83GS0icyicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3404&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图7 PikeClient工作模式示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.1 共享通道模式&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;共享通道模式是Pike 2.0基本的工作模式，新增的业务方在默认情况下都会使用该模式接入Pike 2.0。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在Pike 2.0中PikeClient与Pike通道服务是多对一的共享关系，每个业务方都会有自己的PikeClient，每个PikeClient都可以自定义消息推送标识ID而避免使用全局标识ID。业务后端可以精简推送标识逻辑，避免同时维护多套账号体系。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不同业务的PikeClient仅在接入层面做了业务隔离，在Pike 2.0通道中会由Pike通道服务完成统一的管理。这种多对一的共享关系使得所有Pike业务共享Pike 2.0通道特性，同时又可以针对每个业务的使用场景设置其特定的消息处理能力，每个接入Pike 2.0的业务方都只需要关注其自己的PikeClient即可。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.2.2 独立通道模式&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;独立通道模式是共享通道模式的拓展能力，Pike 2.0通过配置控制来决策是否切换至该模式。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0默认情况下所有业务方都是共享同一个Pike通道服务，然而鉴于业务场景的不同，每个业务对于消息吞吐量，消息时延等SLA指标的诉求也有差异，例如游戏业务对于消息时延过长的容忍性就比较差。针对特殊业务Pike 2.0提供了独立通道切换的能力支持。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所有PikeClient都通过Pike通道代理模块来对接Pike通道服务，Pike通道代理模块可以通过开关配置来控制PikeClient与特定的Pike通道服务协同工作。通过运用代理模式，既保证了原有结构的完整性，在不需要调整Pike通道代码逻辑的基础上就能够完成独立通道能力支持；又可以扩展通道切换能力，有效地管理通道切换的流程，让Pike 2.0通道最大化提供业务能力的同时避免资源浪费。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3 PikeClient保活机制&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;PikeClient的保活完全依赖Pike 2.0通道的保活，针对Pike 1.0推送连接不稳定的痛点，Pike 2.0通道在吸收Pike 1.0在保活机制方面沉淀的技术的基础上继续优化，最后设计出基于心跳探测、重连机制和通道巡检的三重保活机制。保活机制如下图：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5641293013555787&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8omvSFeGGNibVib2pcTXpVHvESH7IkcwibPhiaxg0DdMex3ZfqQY3aRyR1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3836&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图8 长连通道保活机制示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.1 心跳探测&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;心跳探测是一种检查网络连接状态的常见手段，Pike长连接是TCP连接，TCP是虚拟连接，如果实际物理链路中出现诸如异常网络节点等因素导致连接出现异常，客户端和服务端并不能及时感应到连接异常，这时就会出现连接的状态处于ESTABLISHED状态，但连接可能已死的现象，心跳探测就是为了解决这种网络异常的技术方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端在心跳巡检计时器设置的心跳周期到达时判断是否存在上次心跳超时的异常，如果心跳超时则认为该连接已经不可用了，则会从连接池移除该连接并触发下文的重连机制。为了更快地发现通道异常，Pike 2.0对于心跳周期与心跳超时都是可配置的，针对不同App使用的场景可以灵活地设置；而且在每次发送上行数据的时候都会及时检测上次心跳是否超时，使得心跳探测结果不必等到下次心跳周期到达的时刻才知悉。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0并不是采用固定心跳频率来发送心跳包，Pike 2.0会利用通道的上下行数据包来动态减少心跳包的发送次数。此外，智能心跳也是Pike 2.0持续关注的话题。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.2 重连机制&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;重连机制是Pike 2.0作为长连接通道最核心的特性，也是Pike 2.0连接稳定性建设最重要的一环。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端会在发送消息、接收消息和心跳探测三个环节来决策是否需要触发重，一方面，如果主动发现连接池中可用连接不足则自动启动重连机制；另一方面，当现有可用连接关闭时也会自动触发重连机制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0在重连的过程中会采用斐波那契数列退避算法来发起建连请求直至建连成功，一方面，Pike 2.0保证只要在网络可用的情况下总能够维持可用的长连接来服务于业务消息；另一方面，Pike 2.0在网络持续不可用的情况下避免连续建连使得系统满载。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3.3.3 通道巡检&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通道巡检是在心跳探测和重连机制的基础上进一步提升Pike 2.0稳定性的有效机制。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端会根据心跳周期设置一个全局的巡检定时器，在每次定时器设置的时刻到达时，客户端会触发通道异常检测逻辑，一旦发现异常都会尝试重启通道。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0首先会在触发通道异常检测的时候获取当前通道状态，如果通道当前没有主动关闭但是通道处于不可用的状态，Pike 2.0会强制执行一次自启动；此外，在通道巡检的过程中，巡检管理器会不断收集消息收发过程中出现的超时异常，当超时异常次数连续累计超过配置的最大阈值时，Pike 2.0会认为当前通道可用性较低，需要强制关闭并执行一次自启动。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4 Pike 2.0新增特性&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0作为Pike 1.0的升级产品，不只是为了解决Pike 1.0的痛点，通过新增特性以开拓新的应用场景也是Pike 2.0时刻关注的点。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 聚合消息&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随着公司内直播业务的兴起，公司内部也有很多业务方使用Pike 1.0作为弹幕、评论、直播间控制信令等下行实时消息的传输通道。但Pike 1.0基于早先的设计架构为弹幕、评论这种短时间需要处理海量消息的场景提供可靠服务的能力渐渐力不从心，主要表现在QPS大幅增长时，消息投递成功率降低、延时增加和系统性能开销增长等方面。Pike通过引入聚合消息为直播场景中消息的投递提出更加通用的解决方案。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1.1 设计思想&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;直播场景中涉及的消息主要具备以下特点：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;弹幕作为一种实时互动的载体，短时间内需处理大量的图片、文本等信息，如果不做聚合会浪费大量的带宽。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;直播间相比普通推送场景，由于用户已经进入直播间，用户行为也相对统一可控，所以更需要一种群组消息来统一处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;直播间对于不同类型的消息处理逻辑可以区分优先级，比如抽奖、控制信令是要求可靠性不能丢弃，而对于弹幕则可根据直播间热度、服务承受能力适当丢弃。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;聚合消息在设计上主要采用下述思想：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从时间维度对消息进行聚合，减少不必要的带宽消耗。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用消息分级策略，根据消息的类型设定不同的优先级，保证重要消息的可靠性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;抽象出类似直播间的聚合单元，统一管理加入聚合单元的用户行为。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;采用客户端主动拉取的策略。相比传统的服务端推送策略，主动拉取是利用客户端天然分布式的特点将用户状态保存在客户端，服务端通过减少状态维护进而可以留出更多的资源用于业务处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提供上行消息能力，提供更完整的消息流通路径。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1.2 方案流程&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0针对每个聚合单元都使用环形队列来维护消息列表，发送到该聚合单元的消息在经过优先级过滤之后都会插入队列Tail指针标示的位置，随着该聚合单元内消息不断增加最后达到最大队列长度时，Head指针会不断移动来给Tail指针腾出位置。聚合单元通过控制最大长度的环形队列来避免消息短时间井喷式增长带来的服务性能问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端在主动拉取的时候都会携带上一次获取到的消息处在环形队列中的偏移量，这样服务就会将偏移量标示的位置到Tail指针标示的位置之间的消息进行聚合作为本次拉取的结果一次性返回给客户端。不同客户端各自维护自己的偏移量，以此来避免服务端对于客户端的状态维护。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;客户端与服务端的具体交互如图所示，客户端在加入聚合单元之后主动拉取，如果本次拉取携带的偏移量能够从服务的环形队列中获取到聚合消息，那么就将消息回调给业务之后马上进行下一次拉取操作。如果本次携带的偏移量已经位于环形队列Tail指针的位置，那么服务端将不做任何响应，客户端等待本次拉取超时之后开始下一次拉取操作，重复该流程直至客户端离开该聚合单元。与此同时，业务服务端如果有消息需要推送，则通过RPC的方式发送给Pike服务端，消息处理模块将执行消息分级策略过滤之后的有效消息插入环形队列。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.500400320256205&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8nQ0GVFqgY9LURYTWIiasPMqQibHl7WK5rSW58ribpicgTZVZzv0dMbCejQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4996&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图9 聚合消息交互流程图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 消息保序&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 1.0在设计之初就只适用于消息推送的场景，而Pike 2.0在其基础上演进为双向消息投递服务，即不仅支持下行的消息推送，还支持上行的消息投递。Pike 2.0在上行的消息投递方面进一步拓展了消息保序的功能，这里的消息保序主要包含两个层面的含义，首先每一个业务客户端发送的消息都最大程度地到达同一个业务服务器，其次这些消息是按照客户端发送的时序一致地到达该业务服务器。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2.1 粘性会话&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了使每一个业务客户端发送的消息都最大程度地到达同一个业务服务器，Pike 2.0引入了粘性会话的概念。粘性会话指的是同一客户端连接上的消息固定转发至某一特定的业务方机器处理，客户端断连重连后，保持新连接上的消息仍转发至该业务机器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;粘性会话可以归纳为如下的流程。首次业务登录的时候Pike 2.0服务器会利用负载均衡算法选择一台业务服务器，并将该业务服务器的路由标识通过业务登录结果通知客户端并保存，之后如果通道状态稳定的话所有的上行消息就都会投递到该业务服务器。如果期间通道状态波动出现断连的情况，Pike 2.0在发起重连之后会重新进行业务登录，这一次业务登录会将之前保存的路由标识重新上报给Pike 2.0服务器，这样Pike 2.0服务器就会通过路由标识重新绑定该业务服务器。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，如果路由标识指示的业务服务器已经停止提供服务，那么Pike 2.0服务器会重新通过负载均衡算法选择新的一台业务服务器，同时客户端会获取到新的路由标识，之后的逻辑重复该过程直至Pike 2.0客户端退出。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2.2 时序一致性&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们都知道TCP是有序的，那么在同一个TCP连接的前提下什么情况会出现客户端发送的消息乱序到达业务服务器呢？原因就是Pike 2.0服务器从TCP中读出消息之后将其投递给业务服务器是通过RPC异步调用的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了解决这种问题，最简单的方案当然是客户端将消息队列的发送窗口限定为1，每一条发送消息都在Pike 2.0服务器投递给业务服务器之后才能收到ACK，这时再发送下一条消息。但是考虑到网络传输在链路上的时延远远大于端上处理的时延，所以该方案的QPS被网络传输设了瓶颈，假设一个RTT是200ms，那么该方案理论也只能达到5的QPS。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0为了提高上行消息保序投递的QPS，采用服务端设置消息队列缓存的方案。如图所示，客户端可以在发送窗口允许的范围内一次性将多条消息发送出去，服务端把收到的消息都按顺序缓存在消息队列中，然后串行的通过RPC调用将这些缓存的消息依序投递给业务服务器。这种保序方案将QPS性能的瓶颈点从之前网络传输在链路上的时延转移到了RPC调用的时延上，而实际场景中一次RPC调用往往在几个毫秒之间，远远小于网络传输在链路上的时延，继而显著地提升了QPS。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.50523311132255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUPIvZkbRnto4Dun32XMVP8VKvln5iaQYstTGPTG3luS82RNs5C9bVUBOtficatZJJ9D5f0kZJEX72A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4204&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图10 时序一致性示意图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 Pike 2.0稳定性保障&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.1 Pike 2.0监控体系&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0依赖美团监控平台Raptor完成监控体系建设，服务端和客户端都建设了各自完善的指标监控。Pike 2.0客户端通过利用Raptor的端到端指标能力和自定义指标能力输出了超过10+个监控指标来实时监控Pike系统，这些指标覆盖通道建立、消息投递、业务登录、系统异常等多维度。在实时指标监控的基础上Pike 2.0针对不同指标配置了报警阈值，以推送消息为例，如果特定App的大盘数据在每分钟的上下波动幅度超过10%，那么Raptor系统就会向Pike项目组成员推送告警信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;基于所有Raptor监控指标，Pike 2.0提炼核心SLA指标如下：&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;指标名称&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;指标定义&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;指标意义&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;上行消息投递成功率&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;上行消息从发送到收到ACK的成功率&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;代表Pike 2.0业务上行消息投递能力&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;上行消息投递延时&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;上行消息投递RTT&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;同上&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;下行消息投递成功率&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;下行消息从发送到收到ACK的成功率&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;代表Pike 2.0业务下行消息投递能力&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;下行消息投递延时&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;下行消息投递RTT&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;同上&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;通道可用耗时&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;通道从建立到可以传递消息的时间&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;代表Pike 2.0通道建连能力&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;日均消息量&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;日均投递的上下行消息总量&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;代表Pike 2.0产品服务能力&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike 2.0会定期输出基于核心SLA指标的大盘数据报表，同时可以基于App、业务类型、网络类型等多维度对数据进行筛选以满足不同用户对于指标数据的需求。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5.2 Pike 2.0个案用户追踪&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;监控体系能从全局的角度反映Pike 2.0系统稳定性，针对个案用户，Pike管理平台提供完整的链路追踪信息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;每个Pike 2.0连接都由唯一标识Token来区分，通过该唯一标识Token在Pike管理平台的“连接嗅探”模块主动探测便能获得对应连接上所有信令的交互流程。如图所示，流程中明确标注了客户端建立连接、发起鉴权、绑定别名等信令，点击对应信令可以跳转信令详情进一步查看该信令所携带的信息，再结合SDK埋点在美团日志服务Logan的离线日志就可以快速发现并定位问题。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25416666666666665&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hEx03cFgUsUPIvZkbRnto4Dun32XMVP83jiaSoic1DgOVQ7F5xwRBOerG4WjRibcPhOUeOl2gXaBTzeQp6wItvH3A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1920&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;图11 个案用户追踪信令交互图&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6 Pike 2.0建设成果&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;截至2021年6月，Pike共接入业务200+个，日均消息总量约50亿+，Pike 2.0消息到达率&amp;gt;99.5%（&lt;/span&gt;&lt;span&gt;相比Pike 1.0提升0.4%&lt;/span&gt;&lt;span&gt; ），Pike 2.0平均端到端延时&amp;lt;220ms（&lt;/span&gt;&lt;span&gt;相比Pike 1.0减少约37%&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;部分应用案例：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;直播场景消息服务方案。支持直播业务的直播互动功能，具备了支持同时在线百万级别大型直播的能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息推送、Feed流预加载等实时触达方案。支持营销类、控制类等业务消息实时推送，业务消息到达率最高提升10%，长连通道建联耗时减少5%。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;IoT设备接入方案。支持取餐柜业务IoT接入能力，帮助业务消息到达率从98.4%提升到99.6%。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;小游戏场景消息投递方案。支持美团小游戏场景通信能力，消息到达率达到99.8%以上，上行延时低至195ms。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7 总结与未来展望&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Pike在美团应用广泛，目前主要集中在实时触达、互动直播、移动同步等业务场景，随着公司业务的快速发展，Pike对可用性、易用性、可扩展性提出了更高要求，希望提升各种业务场景下的网络体验，因此Pike未来的规划重点主要是：提供多端、多场景下的网络通信方案，不断完善协议生态，在各种应用场景下对抗复杂网络。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;拓展Pike通用基础能力，提升通道性能&lt;/strong&gt;。通过优化保序方案，提供专用通道，优化传输协议等方式，进一步提升吞吐量和稳定性，降低推送时延。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;建设Pike IoT，提供IoT接入层方案&lt;/strong&gt;。为公司内物联网应用场景（&lt;/span&gt;&lt;span&gt;单车、充电宝、取餐柜、智能头盔、仓库、门店设备等&lt;/span&gt;&lt;span&gt;）提供统一的IoT接入层解决方案，支持多种接入协议（&lt;/span&gt;&lt;span&gt;HTTP、MQTT、CoAP等&lt;/span&gt;&lt;span&gt;），为业务提供安全可靠的设备连接通信能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;优化弱网环境通信体验&lt;/strong&gt;。在移动端和IoT端基于美团自研MQUIC网络协议库，探索Pike over QUIC，在桌面端探索WebTransport技术，通过全面支持QUIC协议，提升弱网大包场景下的网络性能，降低长尾分布的请求耗时。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;健午、佳猛、陆凯、冯江等，均来自美团基础技术部-前端技术中心。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>96867819134e820c9076dc944f3f1289</guid>
<title>金融 IT 保命丹：多端支付强一致性架构设计实践</title>
<link>https://toutiao.io/k/9adiotj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwOTIxNDQ3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YRIaicYx5pzj5Cxwick8DamnOgbTJu96QTibKyHEDZt1815yOV1r27oZ6HgoYTEYWYLRz4jIV4iasHgg/0?wx_fmt=png&quot; data-nickname=&quot;dbaplus社群&quot; data-alias=&quot;dbaplus&quot; data-signature=&quot;围绕Database、BigData、AIOps的企业级专业社群。资深大咖、技术干货，每天精品原创文章推送，每周线上技术分享，每月线下技术沙龙，每季度Gdevops&amp;amp;DAMS行业大会.&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文根据郑志成老师在〖deeplus直播第271期〗线上分享演讲内容整理而成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;（文末有回放的方式，不要错过）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;39&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8ZOpOicJianzUXbUYNdTWX1T5aibqsLRXr680Ma3ibRZcEcxSLLseE7csBibEREsNtWpYRUUZrndmVpuuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;220&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;郑志成&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;京东到家  高级工程师&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;39&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;39&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在线下使用现金交易的时候，我们可能都会认为抹个零头、少几毛几块都是不大的问题，但在平台上，1分钱计算错误都会酿成悲剧。相信从事金融相关系统的同学都有感触，在处理计算金额逻辑的时候，大家都会十分谨慎，会多次复查代码，&lt;strong&gt;准确性、一致性，是支付系统的首要指标。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作为互联网公司，“快”是核心必要指标。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;尤其我们作为以实时性需求的o2o（&lt;span&gt;Online To Offline&lt;/span&gt;）电商公司，整个订单的生命周期不到1小时，如果支付延迟几分钟，履约的质量就会下降，甚至会出现用户需求减少的情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以架构的整体层面上，在保证了系统的安全稳定性的同时，我们要尽可能保证系统的高性能运转，&lt;strong&gt;解决互联网的“快”和金融行业的“稳”之间的矛盾。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面，介绍一下本次分享的主要内容：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一、支付平台整体能力介绍&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;二、如何安全保障金额正确性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;三、高可用架构的一些实践及思路&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、支付平台整体能力介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、支付平台的整体架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面是整个支付平台的全貌。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXibNtZtew2icCwLG4yfAvYvJZcb2UEAanPG7IeibOR4IqUhQ4byloDF5nQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作为平台系统，应该具备：产品通用能力、个性化可配置。目前接入支付平台有几十条业务线，主要包括到家业务、骑士业务、快送业务等，根据不同的业务形态，&lt;/span&gt;&lt;span&gt;我们提供了&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;种主要的支付产品&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;收银台（具备多种支付能力）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;直连支付（直接唤醒支付场景）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代扣服务（周期性扣款）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代付（好友代付等）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;协议支付（便快捷支付、免密支付等）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;支付系统核心功能主要是：支付和退款。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如在一些预售场景下，为业务线提供定金支付这种2阶段支付能力（如定金支付）；退款主要是全款、部分退款、以及提供人工退款服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了核心功能，我们还提供支付&lt;strong&gt;营销能力&lt;/strong&gt;，进一步提升支付的转化，如根据用户所属区域进行支付引流，支付券产品、免息产品、满减等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在开发定金、和营销产品之前，支付系统被设计为一个订单，在产品形态上很单一，仅认为订单为固定金额，因此开发这两个需求的时候改动了比较大。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前主流支付能力大概有多阶段支付、大额支付场景、组合支付、支付参与营销等能力，所以有开发支付系统需求的同学，在最开始最好提前预留一些设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们目前基本接入了所有主流支付方式（微信支付、支付宝、京东支付、京东白条等），尤其是现在各类小程序当道，各业务线都需要支持在不同小程序中发展业务，但受到平台支付方式的限制，就需要我们接入更多的支付方式，例如百度支付、头条支付等，都需要接入。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当业务被嵌入到各种各样的流量渠道入口，我们也要根据不同的渠道支持不同的支付方式，如App支付、H5支付、刷脸支付等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、支付能力的快速接入&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们接下来看一下支付能力的快速接入的一个流程：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXiahWMFibAhKOnPJ0iamOObzOeuuxmYrwddCLCAq5Q7oDh1DA8ofeticpnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;设计流程的主要目标：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;屏蔽接入第三方支付平台的复杂度，为业务提供便捷接入的支付的能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;整体交互逻辑是：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;用户下单之后，业务线生成生订单的同时请求支付系统，返回携带加密后的收银台连接，业务前端渲染收银台H5连接，之后的用户操作都直接与支付系统直接交互，不用再经过业务线。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXKV3zOTNZ1BCf76ZUU7GgrVkljIoaPt3tEOohjgzut56O8ZMLiaUlbLg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;左上图是我们经常使用的收银台（支付页面），包括订单的基本信息、随机减活动和微信的引流活动等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;右上图是我们支付平台和微信的交互逻辑，整体上还是比较复杂的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、配置化支付方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图我们目前的个性化配置，目前我们最小力度是支持按照不同渠道进行配置，比如我们最核心的商超业务渠道有几十个，根据不同的终端适当屏蔽掉一风控能力减弱的支付方式，或者在某些特别的终端按照业务的要求配置指定的支付方式，每种相同的支付方式，根据具体的业务线或具体的业务配置不同的商户号，不同的商户号在第三方平台的费率，收款账户都是不同的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXf9GPiaLBicfRjNO5shbSlricdDWVM4eoetmCqTa6Q7fjmP1xaf9m3FWTA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、支付单的生命周期&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面是一笔支付单的生命周期：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXby21mHEge71fvzIibGfgey4s6cRCRq5dUDicjB4O3icPxxEhMhsrJ6VSQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们的多端支付场景是指：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一： 由于我们无法感知用户唤醒sdk后的操作。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我们不能限制用户的支付行为，一个订单可以从多个手机多个渠道使用相同或不同的支付方式、不同的人同时对一笔进行支付。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二：支付、退款跨越多个端。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;支付跨越多个机构，就会经过支付平台、第三支付平台、银行等。支付和退款是一个天然异步场景，这是不可抵抗的因素。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;二、如何安全保证金额正确性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5663924794359577&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YQiayqKtZQneSBHklUicblOAFBia3jkIwNiaib4JGjzBasGGvZM8CEkgDoV58WTv7XUOic5SJn0j6QoVgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在我们的台账信息中会记录了 4个金额字段：应收、实收、应退、实退。在收到支付通知的时候，我们会在收到支付通知的时候进行一次对账。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;判断：应收+应退=实收+实退&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;保持了这个等式，我们就可以正确的计算每笔次金额的变动。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然我们使用了一个简单的公式来保障多端并发下金额修改的正确性，但是由于金额的频繁改动。我们是否可能出现逻辑上的bug呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果给用户少退了，第一时间就可以得到用户的反馈，及时修正bug，并补偿给用户；&lt;/span&gt;&lt;span&gt;但如果给用户多退一些钱，很可能用户不会产生反馈，我们自己也没发现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以我们的系统底线保障是：&lt;strong&gt;确保不会产生多退款。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXMBVCNq1tjNUicPYrIIjWQSeBl0BuQD5kn9EjLRYNAicqxMa8mwibVNyNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么我们要通过什么手段，来保证实际收的钱应该大于或等于应该收的钱？这时，&lt;/span&gt;&lt;span&gt;我们要尽可能通过不变量和不需要加工的数据来验证变量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不变量：订单金额；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不需要加工的数据：业务申请的退款。业务一旦申请退款，校验通过就会插入数据库。这里是业务产生的退款，退款可能会有人工退款、多支付退款等，但是这些我们不用关心。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们需要关心的是：&lt;strong&gt;订单金额-业务产生的退款，&lt;/strong&gt;也就是我们至少收到多少钱，&lt;/span&gt;&lt;span&gt;如果和实收相等，则认为没有问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;继续使用实收和支付平台对账，其实就可以进一步确保实收没问题，我们需要对账&lt;/span&gt;&lt;span&gt;每一笔正向支付交易和逆向支付交易产生的金额记录，且&lt;/span&gt;&lt;span&gt;对账至少需要2种机制来相互保障。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;三、高可用架构的一些实践及思路&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1、高可用的分类&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXjNjCyCaAMT1lrVGdUV1j7Ihh84VicshTNTXpkvCZRL0h7dMD7PiaTWIg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;高可用分为三部分：&lt;strong&gt;业务上的高可用、容灾上的高可用、架构上的高可用。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;支付是一个不可抗拒的跨端异步场景，还要抵抗网络带来的不确定因素。&lt;/span&gt;&lt;span&gt;对于一笔银行转账，大家在心里是有预期的，即使实时转账，大家也会等待一段时间。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是对于在线支付，用户支付完以后，用户很理所当然的想到应该看到订单是已支付状态，而不是待支付状态，延迟增加到一定时长，客服就找到研发头上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2、高可用-支持实时性保障&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXiaDvxKX7MQQDVjy5l7qqRnEmUzQibW1qrcRFVkxG43djE6BktPFR8C4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线上场景还有以下特征：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;配送的时效性。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;一笔订单生命周期就不到1小时，所以在支付上我们不能延迟，不能像银行转账这么慢。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高并发。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;大家也知道银行等金融机构比较有钱，所以他们在做活动的时候，这些活动的力度不亚于一些商品秒杀场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;营销限量。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这是非常重要的一点，如果用户享受支付优惠，但是最终由于支付通知的延迟、服务器负载较高的情况下未能成功处理支付通知，那么用户就会要求索赔营销优惠了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;线下场景比线上场景更加复杂，有以下特征：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;即时性。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;大家去的线下商店，基本都支持收银台在线支付，所以在排队的情况下，就需要商家及时完成顾客的支付请求。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;网络环境不可控。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在不同的位置，其网络信号就存在着不确定性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;群体性。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;线上主要是平台和支付平台的网络交互，但是线下还涉及到了商家，整个支付环节也没这么流畅。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;我们需要做的就是尽可能快的让订单支付完成，或者在某种支付有问题的时候，第一时间下线这种支付方式。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们过去的做法是通过暴力从数据库反查待支付的订单，但是对数据库压力还是比较大的，还要单独写个任务表，&lt;/span&gt;&lt;span&gt;后来改写为基于事件通知机制。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们使用JMQ队列作为事件管道，但由于不同场景触发的反向查询时机不同，所以我们不能对所有对待支付订单进行无差别对待，因此就&lt;/span&gt;&lt;span&gt;受限于JMQ的特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;目前不支持个性化延迟消费消息，所以我们的策略是申请多个队列，并按照不同的延迟level，放入队列中。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtX81iaY299Tj46NFpltcA9xuGj6ev7y3eiciaxWgxHX2DibSfGBBfjVQicqgQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;上图是我&lt;/span&gt;&lt;span&gt;们整体查&lt;/span&gt;&lt;span&gt;询补偿的设计，&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span/&gt;反向查询主要由以下几种场景：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一种是支付唤醒。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;由于用户需要输入密码，我们考虑到需要用户参与，进行多次间隔3秒到重试之后，如果还没支付结果则放到更大时间间隔到重试leave中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二种是协议支付、代扣类场景。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这种支付方式用户无需输入密码，所以我们选择更低延迟到消费队列、或无延迟队列中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第三种是订单取消&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（这是大家比较容易忽视的）。由于反向查询在一定的次数之后会放弃，不然会很占用资源；但如果一笔订单取消了，那么也有可能会因为支付延迟导致订单取消，所以我们就会最后查询一次。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第四种是支付通知&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（最重要的一种）。支付通知场景我们会同步进行查询结果，主要是为了防止伪造通知，但是增加了一次外网交互，超时的可能还是很大的，伪造通知是极端场景。所以在超时之后会暂时信任本次通知，继续交给反查队列，继续对这笔通知进行验证。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3、高可用-应用部署隔离&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图是我们高可用部署的一个架构：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXPy5nrQnZsbpoRdZRGJNytr2Xp6xkOcsic7OHRClFMekqR5EXMJOIMWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们根据ToC和ToB业务请求，对服务器部署上做了资源的倾斜。确保业务相互不影响。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;ToC一般是正向交易场景，&lt;/span&gt;&lt;span&gt;RT要求比较高；ToB场景对时效基本没有要求，在某些业务场景下，会存在集中性的大批量退款申请、退款流程的事务也比较大，ToB就针对一些任务worker比较消耗cpu。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们的目标是尽量避免非业务耗时导致的RT升高，而导致RT升高的因素有：&lt;/span&gt;&lt;span&gt;池化资源不够（http请求线程、rpc处理线程、数据库线程、以及http连接等）、&lt;/span&gt;&lt;span&gt;cpu&lt;/span&gt;&lt;span&gt;资源抢占、&lt;/span&gt;&lt;span&gt;GC &lt;/span&gt;&lt;span&gt;导致的业务线程等待等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;4、高可用-多级本地缓存&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXaUrhv3bJicvvK6McGOlPUUCccasKh2rvZtX7w0rIrmBAqSbPZgZeTxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再分享一个最近刚做的业务：&lt;strong&gt;商品支付的营销需求。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个新兴业务需求整体的特点是：&lt;/span&gt;&lt;span&gt;参与商品不到百万级的一个量级，但是调用量大，峰值调用量会超过10万qps、RT苛刻5ms。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但也由于这是刚新起的业务，产生的业务价值收益有不确定性，所以没打算通过机器去抗量，所以我们把业务请求直接请求到Redis。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是&lt;/span&gt;&lt;span&gt;redis需要较多的副本才能扛超高并发，避免大量无效请求。并且增加了内存基本的缓存，使用了布隆过滤器（Bloom Filter），仍然会把cpu打高，通过门店的过滤把cpu降到最低，所以我们最后会通过caffeine来做热点sku缓存。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5699052132701422&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YQiayqKtZQneSBHklUicblOAibLVYtxKrjlUpCzU166M97kSU3BFSbgmb2X8uEeDWIJh0egoENQNxdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;844&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上图是我们线上的一个效果图，Redis的利用率已经达到了97%，这完成是布隆过滤器来决定的，效果还是比较明显的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;5、高可用-监控&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们再来举一个例子：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;某晚上，手机一阵震动，打开报警一看，报警很明显。红色框是垂直类-支付渠道层的报警，而且都是apple Pay导致的报警，那么基本大概率影响支付方式是apple Pay。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;绿色框是水平维度监控，显示了我们的影响功能：支付、查询。同理报警没有显示的业务线，就跟这些具体业务场景没关系。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aGIOJRDkRPDlubChHL1DtXUdRPhpYEfKuldsHZfbZl5eUbLB7XDPpu7j2J6QEicGXicgV6BRQHgFVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，做一个平台的系统，监控是非常重要的，有句名言：&lt;strong&gt;“没有度量就没有管理”。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们跑在线上生产环境中的每一个服务，也需要管理，我们需要管理它们的运行情况，所以就&lt;/span&gt;&lt;span&gt;需要我们建立的完整指标反馈监控系统。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;机器层面的监控包括：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;机器维度：系统指标：cpu、负载、内存；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;网络指标：tcp连接数、丢包数、tcp重传；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;磁盘指标：磁盘使用率和磁盘繁忙度；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;容器指标：关注线程数；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;应用：软件异常。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;应用层面的监控包括：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;系统异常：基础组建异常（数据库、Redis）、RPC异常&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务异常：业务异常的捕获主要是为了捕获业务线的一些非法出入参。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非预期逻辑：主要一些没想到的一些逻辑场景。通过自定义监控。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Bug(Jex接入)：上线一阵时间后。大家可以去搜搜excpetion、error关键词。总有意想不到的收获。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;业务监控维度包括&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;（&lt;/span&gt;&lt;span&gt;作为平台类系统，最重要的是结合水平维度+垂直维度划分系统报警情况）：&lt;/span&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;水平维度：支付、退款、营销、通知&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;垂直维度：业务方、渠道平台&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q1：延迟队列使用什么框架实现的？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A1 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;使用京东的JMQ队列。按照队列进行消费延迟。RocketMQ支持消息级别的延迟。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q2 : 如何避免单重复支付呢？或者避免重复退款呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A2 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;支付是一个不可抗拒的多支付场景。在接收到支付通知的时候，要做对账，如果是多支付，就进行退款。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q3 : 商品价格类型是用float还是decimal？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A3 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;支付系统最好使用bigDecimal，因为和支付平台交互单位都是元。其他交易系统尽可能使用long类型，分作为单位。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q4 : 各个阶段对账，如果有差错，怎么处理？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A4 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;程序设计越复杂，bug的可能性就会越多，所以要尽可能通过一些不变对量和不可修改的数据进行底线保障，至少需要2种金额校验相互保障。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q5 : 如果应收50，A付款30，B付款40 你这个情况咋退款呢？退款给谁呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A5 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;不会出现。支付金额至少是50，即便多支付，也是100 或者150。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q6 : sku的缓存怎么做的，直播说到是基于Redis的，那数据库和缓存的同步呢？比如下单后扣减库存呢？或更新呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A6 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们前面有提到过，&lt;/span&gt;&lt;span&gt;整体是基于redis的。但是redis需要较多的副本才能扛超高并发，避免了大量无效请求。增加了内存基本的缓存，使用了布隆过滤器，但是仍然会把cpu打高，通过门店的过滤把cpu降到最低，最后通过caffeine来做热点sku缓存。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q7 : 持久化数据库用的哪个产品？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;A7 ：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;MySQL。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;211&quot; data-backw=&quot;568&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;205&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8ZyVDnCfqMI9l77tVYMfhG2vK3Rjk58MOj5Yue35X9vCUq7KxvffYXBCB6l8zJIBe0vFGf7JQFACw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;获取&lt;/span&gt;&lt;span&gt;本期P&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;PT，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;请添加群秘微信号：dbachen&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;↓点这里&lt;strong&gt;&lt;span&gt;&lt;strong&gt;可&lt;strong&gt;&lt;span&gt;回看本期直播&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;44&quot; data-backw=&quot;568&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.07734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zf2jiaBBH3vdgfP4A2rem5YEAHYH074dc4GibhojA5B3lLZrXLDRciaVnficveaHcAUCiaIPoDsTkAduA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>77d19bf87b007e8e83540422fb0b3c44</guid>
<title>魔都上海 4 日旅游攻略？Python 动态图告诉你</title>
<link>https://toutiao.io/k/mzgtyzi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p&gt;先说魔力。上海是我国的金融中心，是我国经济总量第一的城市，是我国人均收入最高的城市，是我国进出口贸易第一的城市，也是我国最开放的城市之一。拼多多、B站、携程、饿了么等知名互联网公司的总部都在上海，腾讯、阿里、美团、头条等在上海都有办公部门。加之上海相比北京宽松的户籍政策，每年吸引着无数打工人来上海追寻梦想。浪奔,浪流,万里滔滔江水永不休。&lt;/p&gt;&lt;p&gt;再说魔幻。上海是一座奇迹之城，从1843年作为通商口岸开放到如今不过170余年，上海从一个名不见经传的小村落一跃成为中国第一亚洲第二大城市，发展速度可谓奇迹。上海也是一座混沌之城，这里有见证800年暮鼓晨钟的静安寺，近600年历史的城隍庙，历经450余年风雨的豫园，也有外滩的“万国建筑群”，“十里洋场”盛况空前，东方明珠夺目璀璨，亚洲第一高楼高达632米的上海中心大厦。可谓亦中亦西，亦今亦古&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; numpy &lt;span&gt;as&lt;/span&gt; np &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; pandas &lt;span&gt;as&lt;/span&gt; pd &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; geopandas &lt;span&gt;as&lt;/span&gt; gpd &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; shapely &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; shapely &lt;span&gt;import&lt;/span&gt; geometry &lt;span&gt;as&lt;/span&gt; geo &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; shapely &lt;span&gt;import&lt;/span&gt; wkt &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; geopandas &lt;span&gt;as&lt;/span&gt; gpd &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span&gt;as&lt;/span&gt; plt &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; matplotlib.animation &lt;span&gt;as&lt;/span&gt;  animation &lt;br/&gt;&lt;span&gt;import&lt;/span&gt; contextily &lt;span&gt;as&lt;/span&gt; ctx&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; imageio&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; os &lt;br/&gt;&lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt; Image&lt;br/&gt;&lt;br/&gt;plt.rcParams[&lt;span&gt;&#x27;font.family&#x27;&lt;/span&gt;] = &lt;span&gt;&#x27;sans-serif&#x27;&lt;/span&gt;&lt;br/&gt;plt.rcParams[&lt;span&gt;&#x27;font.sans-serif&#x27;&lt;/span&gt;] = [&lt;span&gt;&#x27;SimHei&#x27;&lt;/span&gt;]&lt;br/&gt;plt.rcParams[&lt;span&gt;&#x27;axes.unicode_minus&#x27;&lt;/span&gt;] = &lt;span&gt;False&lt;/span&gt;&lt;br/&gt;plt.rcParams[&lt;span&gt;&#x27;animation.writer&#x27;&lt;/span&gt;] = &lt;span&gt;&#x27;html&#x27;&lt;/span&gt;&lt;br/&gt;plt.rcParams[&lt;span&gt;&#x27;animation.embed_limit&#x27;&lt;/span&gt;] = &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;rgba_to_rgb&lt;/span&gt;&lt;span&gt;(img_rgba)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    img_rgb = Image.new(&lt;span&gt;&quot;RGB&quot;&lt;/span&gt;, img_rgba.size, (&lt;span&gt;255&lt;/span&gt;, &lt;span&gt;255&lt;/span&gt;, &lt;span&gt;255&lt;/span&gt;))&lt;br/&gt;    img_rgb.paste(img_rgba, mask=img_rgba.split()[&lt;span&gt;3&lt;/span&gt;]) &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; img_rgb &lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;html_to_gif&lt;/span&gt;&lt;span&gt;(html_file, gif_file, duration=&lt;span&gt;0.5&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    path = html_file.replace(&lt;span&gt;&quot;.html&quot;&lt;/span&gt;,&lt;span&gt;&quot;_frames&quot;&lt;/span&gt;)&lt;br/&gt;    images = [os.path.join(path,x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; sorted(os.listdir(path))]&lt;br/&gt;    frames = [imageio.imread(x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; images]&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; frames[&lt;span&gt;0&lt;/span&gt;].shape[&lt;span&gt;-1&lt;/span&gt;]==&lt;span&gt;4&lt;/span&gt;:&lt;br/&gt;        frames = [np.array(rgba_to_rgb(Image.fromarray(x))) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; frames]&lt;br/&gt;    imageio.mimsave(gif_file, frames, &lt;span&gt;&#x27;gif&#x27;&lt;/span&gt;, duration=duration)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; gif_file&lt;br/&gt;&lt;br/&gt;cmap = [&lt;br/&gt;&lt;span&gt;&#x27;#2E91E5&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#1CA71C&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#DA16FF&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#B68100&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#EB663B&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#00A08B&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#FC0080&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#6C7C32&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#862A16&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#620042&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#DA60CA&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;#0D2A63&#x27;&lt;/span&gt;]*&lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;trace_map_dance&lt;/span&gt;&lt;span&gt;(df,title = &lt;span&gt;&quot;上海经典4日旅行路线&quot;&lt;/span&gt;,&lt;br/&gt;                     filename = None,&lt;br/&gt;                     figsize = &lt;span&gt;(&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;)&lt;/span&gt;,dpi = &lt;span&gt;144&lt;/span&gt;,&lt;br/&gt;                     duration = &lt;span&gt;0.5&lt;/span&gt;,&lt;br/&gt;                     anotate_points = [&lt;span&gt;&quot;外滩&quot;&lt;/span&gt;,&lt;span&gt;&quot;上海迪士尼度假区&quot;&lt;/span&gt;,&lt;span&gt;&quot;陆家嘴&quot;&lt;/span&gt;])&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fig, ax =plt.subplots(figsize=figsize,dpi=dpi)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;plot_frame&lt;/span&gt;&lt;span&gt;(i)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            ax.clear()&lt;br/&gt;            ax.axis(&lt;span&gt;&quot;off&quot;&lt;/span&gt;)&lt;br/&gt;            &lt;br/&gt;            k = i//&lt;span&gt;3&lt;/span&gt;+&lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            m = i%&lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            dfdata = df.iloc[:k,:].copy()&lt;br/&gt;            dftmp = df.iloc[:k&lt;span&gt;-1&lt;/span&gt;,:].copy()&lt;br/&gt;            text = dfdata[&lt;span&gt;&quot;day&quot;&lt;/span&gt;].tolist()[&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;#============================================================&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;#绘制背景&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;#============================================================&lt;/span&gt;&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;#设置绘图范围&lt;/span&gt;&lt;br/&gt;            bounds = dfcity.total_bounds &lt;span&gt;# k==1   &lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&amp;lt;k&amp;lt;len(df)+&lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;                bounds = dfplace.query(&lt;span&gt;&quot;day==&#x27;{}&#x27;&quot;&lt;/span&gt;.format(text)).total_bounds&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; k&amp;gt;=len(df)+&lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;                bounds = dfplace.total_bounds&lt;br/&gt;                &lt;br/&gt;            (xmin,ymin,xmax,ymax) = bounds&lt;br/&gt;            cx = (xmin+xmax)/&lt;span&gt;2.0&lt;/span&gt;&lt;br/&gt;            cy = (ymin+ymax)/&lt;span&gt;2.0&lt;/span&gt;&lt;br/&gt;            dx = max(xmax-xmin,&lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;            dy = max(ymax-ymin,&lt;span&gt;100&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; dx/dy&amp;lt;&lt;span&gt;8&lt;/span&gt;/&lt;span&gt;6.0&lt;/span&gt;:&lt;br/&gt;                dx = dy*&lt;span&gt;8&lt;/span&gt;/&lt;span&gt;6.0&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                dy = dx*&lt;span&gt;6.0&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;br/&gt;            bounds = np.array([min(cx&lt;span&gt;-8000&lt;/span&gt;,cx-dx/&lt;span&gt;2.0&lt;/span&gt;),min(cy&lt;span&gt;-6000&lt;/span&gt;,cy-dy/&lt;span&gt;2.0&lt;/span&gt;),&lt;br/&gt;               max(cx+&lt;span&gt;8000&lt;/span&gt;,cx+dx/&lt;span&gt;2.0&lt;/span&gt;),max(cy+&lt;span&gt;6000&lt;/span&gt;,cy+dy/&lt;span&gt;2.0&lt;/span&gt;)])&lt;br/&gt;                &lt;br/&gt;            ax.set_xlim(bounds[&lt;span&gt;0&lt;/span&gt;]-(bounds[&lt;span&gt;2&lt;/span&gt;]-bounds[&lt;span&gt;0&lt;/span&gt;])/&lt;span&gt;3&lt;/span&gt;, bounds[&lt;span&gt;2&lt;/span&gt;]+(bounds[&lt;span&gt;2&lt;/span&gt;]-bounds[&lt;span&gt;0&lt;/span&gt;])/&lt;span&gt;3&lt;/span&gt;)    &lt;br/&gt;            ax.set_ylim(bounds[&lt;span&gt;1&lt;/span&gt;]-(bounds[&lt;span&gt;3&lt;/span&gt;]-bounds[&lt;span&gt;1&lt;/span&gt;])/&lt;span&gt;3&lt;/span&gt;, bounds[&lt;span&gt;3&lt;/span&gt;]+(bounds[&lt;span&gt;3&lt;/span&gt;]-bounds[&lt;span&gt;1&lt;/span&gt;])/&lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;                &lt;br/&gt;            gaode = &lt;span&gt;&#x27;http://wprd01.is.autonavi.com/appmaptile?x={x}&amp;amp;y={y}&amp;amp;z={z}&amp;amp;lang=zh_cn&amp;amp;size=1&amp;amp;scl=1&amp;amp;style=7&#x27;&lt;/span&gt;&lt;br/&gt;            openstreet = &lt;span&gt;&quot;https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png&quot;&lt;/span&gt;&lt;br/&gt;            ctx.add_basemap(ax,source=gaode,alpha=&lt;span&gt;0.5&lt;/span&gt;)&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;#============================================================&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;#绘制散点&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;#============================================================&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;# 绘制散点图像&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; len(dftmp)&amp;gt;&lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;                ax.scatter(dftmp[&lt;span&gt;&quot;x&quot;&lt;/span&gt;],dftmp[&lt;span&gt;&quot;y&quot;&lt;/span&gt;],s = &lt;span&gt;100&lt;/span&gt;*dftmp[&lt;span&gt;&quot;z&quot;&lt;/span&gt;]/df[&lt;span&gt;&quot;z&quot;&lt;/span&gt;].mean(),&lt;br/&gt;                       c = (cmap*&lt;span&gt;100&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;:len(dftmp)],alpha = &lt;span&gt;0.5&lt;/span&gt;,zorder = &lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;                &lt;span&gt;# 添加注释文字&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; j,p &lt;span&gt;in&lt;/span&gt; enumerate(dftmp.index):&lt;br/&gt;                    px,py,pz = dftmp.loc[p,[&lt;span&gt;&quot;x&quot;&lt;/span&gt;,&lt;span&gt;&quot;y&quot;&lt;/span&gt;,&lt;span&gt;&quot;z&quot;&lt;/span&gt;]].tolist() &lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; anotate_points:&lt;br/&gt;                        ax.annotate(p,xy = (px,py),  xycoords = &lt;span&gt;&quot;data&quot;&lt;/span&gt;,xytext = (&lt;span&gt;-20&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;),&lt;br/&gt;                        fontsize = &lt;span&gt;10&lt;/span&gt;,fontweight = &lt;span&gt;&quot;bold&quot;&lt;/span&gt;,color = cmap[j], textcoords = &lt;span&gt;&quot;offset points&quot;&lt;/span&gt;)&lt;br/&gt;                        &lt;br/&gt;            &lt;span&gt;#绘制轨迹线&lt;/span&gt;&lt;br/&gt;            lines = [dfdata[[&lt;span&gt;&quot;x&quot;&lt;/span&gt;,&lt;span&gt;&quot;y&quot;&lt;/span&gt;]].values[i:i+&lt;span&gt;2&lt;/span&gt;] &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(len(dfdata)&lt;span&gt;-1&lt;/span&gt;)] &lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; ln &lt;span&gt;in&lt;/span&gt; lines[:&lt;span&gt;-1&lt;/span&gt;]:&lt;br/&gt;                x, y = np.transpose(ln)&lt;br/&gt;                line = plt.Line2D(x,y,color=&lt;span&gt;&quot;gray&quot;&lt;/span&gt;,linestyle=&lt;span&gt;&quot;-&quot;&lt;/span&gt;,linewidth= &lt;span&gt;2.5&lt;/span&gt;)&lt;br/&gt;                ax.add_artist(line)&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;# 添加标题和排名序号&lt;/span&gt;&lt;br/&gt;            ax.set_title(title,color = &lt;span&gt;&quot;black&quot;&lt;/span&gt;,fontsize = &lt;span&gt;12&lt;/span&gt;)&lt;br/&gt;            ax.text(&lt;span&gt;0.13&lt;/span&gt;, &lt;span&gt;0.9&lt;/span&gt;, text, va=&lt;span&gt;&quot;center&quot;&lt;/span&gt;, ha=&lt;span&gt;&quot;center&quot;&lt;/span&gt;, &lt;br/&gt;                         alpha=&lt;span&gt;0.5&lt;/span&gt;, size = &lt;span&gt;50&lt;/span&gt;,transform = ax.transAxes)&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;# 结尾呈现全局轨迹无动画&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; i&amp;gt;=&lt;span&gt;3&lt;/span&gt;*len(df):&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; ln &lt;span&gt;in&lt;/span&gt; lines[&lt;span&gt;-1&lt;/span&gt;:]:&lt;br/&gt;                    x, y = np.transpose(ln)&lt;br/&gt;                    line = plt.Line2D(x,y,color=&lt;span&gt;&quot;gray&quot;&lt;/span&gt;,linestyle=&lt;span&gt;&quot;-&quot;&lt;/span&gt;,linewidth= &lt;span&gt;2.5&lt;/span&gt;)&lt;br/&gt;                    ax.add_artist(line)&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;            &lt;span&gt;# 添加注意力动画&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; m==&lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;                px,py,pz = dfdata[&lt;span&gt;&quot;x&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;y&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;z&quot;&lt;/span&gt;][&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;                p = dfdata.index[&lt;span&gt;-1&lt;/span&gt;]+&lt;span&gt;&quot;:&quot;&lt;/span&gt;+str(pz)+&lt;span&gt;&quot;Hours&quot;&lt;/span&gt;&lt;br/&gt;                ax.scatter(px,py,s = &lt;span&gt;800&lt;/span&gt;*pz/df[&lt;span&gt;&quot;z&quot;&lt;/span&gt;].mean(),&lt;br/&gt;                   c = cmap[len(dfdata)&lt;span&gt;-1&lt;/span&gt;:len(dfdata)],alpha = &lt;span&gt;0.5&lt;/span&gt;,zorder = &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;                ax.annotate(p,xy = (px,py),  xycoords = &lt;span&gt;&quot;data&quot;&lt;/span&gt;,&lt;br/&gt;                        xytext = (&lt;span&gt;-20&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;),fontsize = &lt;span&gt;20&lt;/span&gt;,fontweight = &lt;span&gt;&quot;bold&quot;&lt;/span&gt;,&lt;br/&gt;                        color = cmap[k&lt;span&gt;-1&lt;/span&gt;], textcoords = &lt;span&gt;&quot;offset points&quot;&lt;/span&gt;,zorder = &lt;span&gt;5&lt;/span&gt;)&lt;br/&gt;                &lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; ln &lt;span&gt;in&lt;/span&gt; lines[&lt;span&gt;-1&lt;/span&gt;:]:&lt;br/&gt;                    x, y = np.transpose(ln)&lt;br/&gt;                    line = plt.Line2D(x,y,color=&lt;span&gt;&quot;gray&quot;&lt;/span&gt;,linestyle=&lt;span&gt;&quot;:&quot;&lt;/span&gt;,linewidth= &lt;span&gt;4.5&lt;/span&gt;)&lt;br/&gt;                    ax.add_artist(line)&lt;br/&gt;            &lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; m==&lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;                px,py,pz = dfdata[&lt;span&gt;&quot;x&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;y&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;z&quot;&lt;/span&gt;][&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;                p = dfdata.index[&lt;span&gt;-1&lt;/span&gt;]+&lt;span&gt;&quot;:&quot;&lt;/span&gt;+str(pz)+&lt;span&gt;&quot;Hours&quot;&lt;/span&gt;&lt;br/&gt;                ax.scatter(px,py,s = &lt;span&gt;400&lt;/span&gt;*pz/df[&lt;span&gt;&quot;z&quot;&lt;/span&gt;].mean(),&lt;br/&gt;                   c = cmap[len(dfdata)&lt;span&gt;-1&lt;/span&gt;:len(dfdata)],alpha = &lt;span&gt;0.5&lt;/span&gt;,zorder = &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;                ax.annotate(p,xy = (px,py),  xycoords = &lt;span&gt;&quot;data&quot;&lt;/span&gt;,&lt;br/&gt;                        xytext = (&lt;span&gt;-20&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;),fontsize = &lt;span&gt;15&lt;/span&gt;,fontweight = &lt;span&gt;&quot;bold&quot;&lt;/span&gt;,&lt;br/&gt;                        color = cmap[k&lt;span&gt;-1&lt;/span&gt;], textcoords = &lt;span&gt;&quot;offset points&quot;&lt;/span&gt;,zorder = &lt;span&gt;5&lt;/span&gt;)&lt;br/&gt;                &lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; ln &lt;span&gt;in&lt;/span&gt; lines[&lt;span&gt;-1&lt;/span&gt;:]:&lt;br/&gt;                    x, y = np.transpose(ln)&lt;br/&gt;                    line = plt.Line2D(x,y,color=&lt;span&gt;&quot;gray&quot;&lt;/span&gt;,linestyle=&lt;span&gt;&quot;--&quot;&lt;/span&gt;,linewidth= &lt;span&gt;3.5&lt;/span&gt;)&lt;br/&gt;                    ax.add_artist(line)&lt;br/&gt;                &lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; m==&lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;                px,py,pz = dfdata[&lt;span&gt;&quot;x&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;y&quot;&lt;/span&gt;][[&lt;span&gt;-1&lt;/span&gt;]],dfdata[&lt;span&gt;&quot;z&quot;&lt;/span&gt;][&lt;span&gt;-1&lt;/span&gt;]&lt;br/&gt;                p = dfdata.index[&lt;span&gt;-1&lt;/span&gt;]+&lt;span&gt;&quot;:&quot;&lt;/span&gt;+str(pz)+&lt;span&gt;&quot;Hours&quot;&lt;/span&gt;&lt;br/&gt;                ax.scatter(px,py,s = &lt;span&gt;100&lt;/span&gt;*pz/df[&lt;span&gt;&quot;z&quot;&lt;/span&gt;].mean(),&lt;br/&gt;                   c = cmap[len(dfdata)&lt;span&gt;-1&lt;/span&gt;:len(dfdata)],alpha = &lt;span&gt;0.5&lt;/span&gt;,zorder = &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;                ax.annotate(p,xy = (px,py),  xycoords = &lt;span&gt;&quot;data&quot;&lt;/span&gt;,&lt;br/&gt;                        xytext = (&lt;span&gt;-20&lt;/span&gt;,&lt;span&gt;15&lt;/span&gt;),fontsize = &lt;span&gt;10&lt;/span&gt;,fontweight = &lt;span&gt;&quot;bold&quot;&lt;/span&gt;,&lt;br/&gt;                        color = cmap[k&lt;span&gt;-1&lt;/span&gt;], textcoords = &lt;span&gt;&quot;offset points&quot;&lt;/span&gt;,zorder = &lt;span&gt;5&lt;/span&gt;)&lt;br/&gt;                &lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; ln &lt;span&gt;in&lt;/span&gt; lines[&lt;span&gt;-1&lt;/span&gt;:]:&lt;br/&gt;                    x, y = np.transpose(ln)&lt;br/&gt;                    line = plt.Line2D(x,y,color=&lt;span&gt;&quot;gray&quot;&lt;/span&gt;,linestyle=&lt;span&gt;&quot;-&quot;&lt;/span&gt;,linewidth= &lt;span&gt;2.5&lt;/span&gt;)&lt;br/&gt;                    ax.add_artist(line)&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;                &lt;br/&gt;    my_animation = animation.FuncAnimation(fig,plot_frame,&lt;br/&gt;                            frames = range(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;*len(df)+&lt;span&gt;5&lt;/span&gt;),interval = int(duration*&lt;span&gt;1000&lt;/span&gt;))&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; filename &lt;span&gt;is&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;from&lt;/span&gt; IPython.display &lt;span&gt;import&lt;/span&gt; HTML&lt;br/&gt;            HTML(my_animation.to_jshtml())&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; HTML(my_animation.to_jshtml())&lt;br/&gt;        &lt;span&gt;except&lt;/span&gt; ImportError:&lt;br/&gt;            &lt;span&gt;pass&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;        my_animation.save(filename)&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; filename&lt;br/&gt;&lt;br/&gt;html_file = &lt;span&gt;&quot;上海经典4日旅行路线.html&quot;&lt;/span&gt;&lt;br/&gt;trace_map_dance(df,filename=html_file)&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>