<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b8aac4f8e7c207e41019d2c03121cde2</guid>
<title>3+1 保障：高可用系统稳定性是如何炼成的？</title>
<link>https://toutiao.io/k/u8lcu6b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>722870d8cf9ad13c4ee60732a6ae257e</guid>
<title>不要让追求完美阻碍你做决策</title>
<link>https://toutiao.io/k/mah7i09</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;p&gt;平时大家做研发的过程中，肯定经常遇到需要自己做决策的时候。不管是技术决策，还是团队管理上的决策。有时候为了追求完美经常迟迟难下决定，导致实际工作反而难以推进。&lt;/p&gt;&lt;p&gt;前几天团队就遇到一个这样的问题：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;项目中有个技术难题交给同事A，并且项目进度非常紧急，结果过了两天迟迟没有开展。所以就询问了一下情况。原来A同事为了方便后续扩展，一直苦思冥想方案的兼容性。然而考虑的扩展功能可能很难规划到产品中。另一方面是迫在眉睫的deadline。&lt;/p&gt;&lt;p&gt;所以我就建议他考虑一下另一种方案，先把目前的问题解决。虽然最后采用了这个建议，但是说服过程相当困难，还有点不愉快。事后我也有一点自我怀疑，我的决定真的正确吗？好在后来我找到了答案。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;极客时间的《研发效率破局之道》专栏“Facebook的10x程序员效率心法”提到一个快速迭代的原则：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;不要追求完美，不要过度计划，而是要尽快实现功能，通过不断迭代来完善。&lt;/strong&gt;优秀的架构往往不是设计出来的，而是在实现过程中逐步发展、完善起来的。&lt;/p&gt;&lt;p&gt;Facebook 有一条常见的海报标语，叫作“Done is better than perfect”，意思就是完成比完美要重要。要实现快速迭代，我们在设计和实现功能时都要注意简单化。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;有些开发者过于追求技术，投入了大量时间去设计精美、复杂的系统。这样做没有问题，但一定要有一个度，切忌杀鸡用牛刀。&lt;/strong&gt;因为复杂的系统虽然精美，但往往不容易理解，维护成本也比较高，修改起来更是不容易。&lt;/p&gt;&lt;p&gt;所以，在 Facebook 进行开发的时候，尽量使用简单实用的设计，然后快速进行版本迭代。&lt;/p&gt;&lt;p&gt;亨利·明茨伯格《写给管理者的睡前故事》有一章《决策：与你的想法不同》写的很有意思，下面是部分节选，祝开卷有益。&lt;/p&gt;&lt;p&gt;我们是怎么做决策的？很简单。首先诊断，接下来设计（可能的解决方案），然后决定，最后执行（把选择付诸行动）。换句话说，我们是先思考后行动，我把这个叫作思考先行。&lt;/p&gt;&lt;p&gt;你一生中最重要的决策可能是：寻找伴侣。你是思考先行的吗？我们以一位男性寻找女性伴侣为例，使用下面这个模式：首先列出你希望未来伴侣拥有的一些品质，如聪颖、漂亮、羞涩；接下来列出所有的可能人选；然后进行分析，根据上述标准给每位候选人打分；最后把分数加起来看谁胜出，并告知这位幸运的女士。&lt;/p&gt;&lt;p&gt;可是，她却告诉你：“你在忙活这些的时候，我结婚了，现在已经有几个孩子了。”看来，思考先行还是有缺点的。&lt;/p&gt;&lt;p&gt;所以，你可能会用其他方式来寻找伴侣，就像我的父亲那样。有一天，他跟我的奶奶说：“今天，我遇到了一个我想跟她结婚的女孩！”我跟你保证，这个决策里面真的没有多少分析，不过它的结局很圆满。我父母的婚姻长久而幸福。&lt;/p&gt;&lt;p&gt;我们把这称为“一见钟情”。作为一种决策模式，我称之为视觉先行。如果你知道有多少重要的决策是这么来的，可能会大吃一惊。比如，面试不到两秒钟就决定聘用某人，或者购买某设备的原因仅仅是你看上了这个地方。这些决策不一定是一时心血来潮，有可能是真知灼见。&lt;/p&gt;&lt;p&gt;但是，不要仓促下结论：&lt;strong&gt;还有另外一种更明智的决策方式，我称之为行动先行。&lt;/strong&gt;你可以想象如何用这种模式来寻找理想的伴侣。这么说吧，不管是做大决策还是小决策，当你不确定该怎么做的时候，你可能需要先行动后思考，而不是先思考后行动。你先进行小幅度的尝试性行动，看看是否奏效，如果没效果，就换另一种方式，直到找到有效的方式，再放开手去做。也就是摸石头过河。&lt;/p&gt;&lt;p&gt;当然，这种方式也有它的弊端。研究决策的特里·康诺利教授对此曾有妙语：“核战争和生孩子这样的事情就不适合用‘摸石头过河’的战略。”但是，在众多决策方式中，这种决策方式应该是一种完美的方式。例如，你本来打算把一个产品染成蓝色，但最后，你可能卖出的是彩虹色的产品。&lt;/p&gt;&lt;p&gt;你现在需要做一个重要的决策吗？好，先不要想了，明天四处看看！然后干点儿什么！到那个时候，你可能就会发现你的想法完全变了。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;大师幽默的口吻在其它章节也处处可见，大家感兴趣可以看看，微信读书就有。&lt;br/&gt;大家如果有启发，可以关注铁柱，大家进群交流一下日常开发中遇到的问题。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/bymGBmLC3zGctwqKP4fLPhjJWtjKdqcr8nLEcXTHRibCshlQPYkuURiaxcdkoFmmNwo8hSVI8HDicLO9DiaIic0iaAhA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b7b5ccce261e8a34edca633da5db4fb0</guid>
<title>Go embed 简明教程</title>
<link>https://toutiao.io/k/c3jscng</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      &lt;p&gt;Go编译的程序非常适合部署，如果没有通过CGO引用其它的库的话，我们一般编译出来的可执行二进制文件都是单个的文件，非常适合复制和部署。在实际使用中，除了二进制文件，可能还需要一些配置文件，或者静态文件，比如html模板、静态的图片、CSS、javascript等文件，如何这些文件也能打进到二进制文件中，那就太美妙，我们只需复制、按照单个的可执行文件即可。&lt;/p&gt;
&lt;p&gt;一些开源的项目很久以前就开始做这方面的工作，比如&lt;a href=&quot;https://github.com/gobuffalo/packr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gobuffalo/packr&lt;/a&gt;、&lt;a href=&quot;https://github.com/markbates/pkger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;markbates/pkger&lt;/a&gt;、&lt;a href=&quot;https://github.com/rakyll/statik&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rakyll/statik&lt;/a&gt;、&lt;a href=&quot;https://github.com/knadh/stuffbin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;knadh/stuffbin&lt;/a&gt;等等，但是不管怎么说这些都是第三方提供的功能，如果Go官方能内建支持就好了。2019末一个提案被提出&lt;a href=&quot;https://github.com/golang/go/issues/35950&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue#35950&lt;/a&gt;,期望Go官方编译器支持嵌入静态文件。后来Russ Cox专门写了一个设计文档&lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/draft-embed.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go command support for embedded static assets&lt;/a&gt;, 并最终实现了它。&lt;/p&gt;
&lt;p&gt;Go 1.16中包含了go embed的功能，而且Go1.16基本在一个月左右的时间就会发布了，到时候你可以尝试使用它，如果你等不及了，你也可以下载Go 1.16beta1尝鲜。&lt;/p&gt;
&lt;p&gt;本文将通过例子，详细介绍go embed的各个功能。&lt;/p&gt;
&lt;a id=&quot;more&quot;/&gt;
&lt;h2 id=&quot;嵌入&quot;&gt;嵌入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于单个的文件，支持嵌入为字符串和 byte slice&lt;/li&gt;
&lt;li&gt;对于多个文件和文件夹，支持嵌入为新的文件系统FS&lt;/li&gt;
&lt;li&gt;比如导入 &quot;embed&quot;包，即使无显式的使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go:embed&lt;/code&gt;指令用来嵌入，必须紧跟着嵌入后的变量名&lt;/li&gt;
&lt;li&gt;只支持嵌入为string, byte slice和embed.FS三种类型，这三种类型的别名(alias)和命名类型(如type S string)都不可以&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;嵌入为字符串&quot;&gt;嵌入为字符串&lt;/h3&gt;
&lt;p&gt;比如当前文件下有个hello.txt的文件，文件内容为&lt;code&gt;hello,world!&lt;/code&gt;。通过&lt;code&gt;go:embed&lt;/code&gt;指令，在编译后下面程序中的s变量的值就变为了&lt;code&gt;hello,world!&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;_ &lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(s)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;嵌入为byte_slice&quot;&gt;嵌入为byte slice&lt;/h3&gt;
&lt;p&gt;你还可以把单个文件的内容嵌入为slice of byte，也就是一个字节数组。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;_ &lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(b)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;嵌入为fs-FS&quot;&gt;嵌入为fs.FS&lt;/h3&gt;
&lt;p&gt;甚至你可以嵌入为一个文件系统，这在嵌入多个文件的时候非常有用。&lt;br/&gt;比如嵌入一个文件：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;嵌入本地的另外一个文件hello2.txt, 支持同一个变量上多个&lt;code&gt;go:embed&lt;/code&gt;指令(嵌入为string或者byte slice是不能有多个&lt;code&gt;go:embed&lt;/code&gt;指令的):&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello2.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello2.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当前重复的&lt;code&gt;go:embed&lt;/code&gt;指令嵌入为embed.FS是支持的，相当于一个:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还可以嵌入子文件夹下的文件：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed p/hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed p/hello2.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/hello2.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还可以支持模式匹配的方式嵌入，下面的章节专门介绍。&lt;/p&gt;
&lt;h2 id=&quot;同一个文件嵌入为多个变量&quot;&gt;同一个文件嵌入为多个变量&lt;/h2&gt;
&lt;p&gt;比如下面的例子，s和s2变量都嵌入hello.txt的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;_ &lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s2 &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(s)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(s2)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;exported/unexported的变量都支持&quot;&gt;exported/unexported的变量都支持&lt;/h2&gt;
&lt;p&gt;Go可以将文件可以嵌入为exported的变量，也可以嵌入为unexported的变量。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;_ &lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello2.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; S &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(s)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(S)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;package级别的变量和局部变量都支持&quot;&gt;package级别的变量和局部变量都支持&lt;/h2&gt;
&lt;p&gt;前面的例子都是package一级的的变量，即使是函数内的局部变量，也都支持嵌入：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;_ &lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s2 &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(s, s2)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;局部变量s的值在编译时就已经嵌入了，而且虽然s和s2嵌入同一个文件，但是它们的值在编译的时候会使用初始化字段中的不同的值：&lt;/p&gt;
&lt;figure class=&quot;highlight assemble&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0x0021&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00033&lt;/span&gt; (/Users&lt;span class=&quot;subst&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;/main&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;go:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)        MOVQ    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;(SB), AX&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0x0028&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00040&lt;/span&gt; (/Users&lt;span class=&quot;subst&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;/main&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;go:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)        MOVQ    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;(SB), CX&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0x002f&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00047&lt;/span&gt; (/Users&lt;span class=&quot;subst&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;/main&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;go:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)        MOVQ    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;(SB), DX&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0x0036&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00054&lt;/span&gt; (/Users&lt;span class=&quot;subst&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;/main&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;go:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)        MOVQ    DX, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;s2&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;ptr&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;72&lt;/span&gt;(SP)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0x003b&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00059&lt;/span&gt; (/Users&lt;span class=&quot;subst&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;/main&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;go:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)        MOVQ    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;(SB), BX&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; SDATA size&lt;span class=&quot;subst&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;       &lt;span class=&quot;number&quot;&gt;0x0000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;d &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;       rel &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; t&lt;span class=&quot;subst&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; go&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;embed&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt; SDATA size&lt;span class=&quot;subst&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;       &lt;span class=&quot;number&quot;&gt;0x0000&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;d &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;attribute&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;       rel &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; t&lt;span class=&quot;subst&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; go&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意s和s2的变量的值是在编译期就确定了，即使在运行时你更改了hello.txt的文件，甚至把hello.txt都删除了也不会改变和影响s和s2的值。&lt;/p&gt;
&lt;h2 id=&quot;只读&quot;&gt;只读&lt;/h2&gt;
&lt;p&gt;嵌入的内容是只读的。也就是在编译期嵌入文件的内容是什么，那么在运行时的内容也就是什么。&lt;/p&gt;
&lt;p&gt;FS文件系统值提供了打开和读取的方法，并没有write的方法，也就是说FS实例是线程安全的，多个goroutine可以并发使用。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FS&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (f FS) Open(name &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) (fs.File, error)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (f FS) ReadDir(name &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) ([]fs.DirEntry, error)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (f FS) ReadFile(name &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) ([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, error)&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;go:embed指令&quot;&gt;go:embed指令&lt;/h2&gt;
&lt;h3 id=&quot;go:embed指令支持嵌入多个文件&quot;&gt;go:embed指令支持嵌入多个文件&lt;/h3&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt hello2.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello2.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当然你也可以像前面的例子一样写成多行&lt;code&gt;go:embed&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed hello2.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello2.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;支持文件夹&quot;&gt;支持文件夹&lt;/h3&gt;
&lt;p&gt;文件夹分隔符采用正斜杠&lt;code&gt;/&lt;/code&gt;,即使是windows系统也采用这个模式。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed p&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/hello2.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;使用的是相对路径&quot;&gt;使用的是相对路径&lt;/h3&gt;
&lt;p&gt;相对路径的根路径是go源文件所在的文件夹。&lt;/p&gt;
&lt;p&gt;支持使用双引号&lt;code&gt;&quot;&lt;/code&gt;或者反引号的方式应用到嵌入的文件名或者文件夹名或者模式名上，这对名称中带空格或者特殊字符的文件文件夹有用。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed &quot;he llo.txt&quot; `hello-2.txt`&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;he llo.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;匹配模式&quot;&gt;匹配模式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;go:embed&lt;/code&gt;指令中可以只写文件夹名，此文件夹中除了&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;开头的文件和文件夹都会被嵌入，并且子文件夹也会被递归的嵌入，形成一个此文件夹的文件系统。&lt;/p&gt;
&lt;p&gt;如果想嵌入&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;开头的文件和文件夹， 比如p文件夹下的.hello.txt文件，那么就需要使用&lt;code&gt;*&lt;/code&gt;，比如&lt;code&gt;go:embed p/*&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;不具有递归性，所以子文件夹下的&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;_&lt;/code&gt;不会被嵌入，除非你在专门使用子文件夹的&lt;code&gt;*&lt;/code&gt;进行嵌入:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed p/*&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/.hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;p/q/.hi.txt&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 没有嵌入 p/q/.hi.txt&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;嵌入和嵌入模式不支持绝对路径、不支持路径中包含&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;..&lt;/code&gt;,如果想嵌入go源文件所在的路径，使用&lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed *&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;data, _ = f.ReadFile(&lt;span class=&quot;string&quot;&gt;&quot;.hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;文件系统&quot;&gt;文件系统&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;embed.FS&lt;/code&gt;实现了 &lt;code&gt;io/fs.FS&lt;/code&gt;接口，它可以打开一个文件，返回&lt;code&gt;fs.File&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed *&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;helloFile, _ := f.Open(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;stat, _ := helloFile.Stat()&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(stat.Name(), stat.Size())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它还提供了ReadFileh和ReadDir功能，遍历一个文件下的文件和文件夹信息：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed *&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;dirEntries, _ := f.ReadDir(&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, de := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; dirEntries {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(de.Name(), de.IsDir())&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因为它实现了&lt;code&gt;io/fs.FS&lt;/code&gt;接口，所以可以返回它的子文件夹作为新的文件系统：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;12&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;13&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;14&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;15&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;16&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;17&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;18&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;embed&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;io/fs&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//go:embed *&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f embed.FS&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; main() {&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;ps, _ := fs.Sub(f, &lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;hi, _ := ps.Open(&lt;span class=&quot;string&quot;&gt;&quot;q/hi.txt&quot;&lt;/span&gt;)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;data, _ := ioutil.ReadAll(hi)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;fmt.Println(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(data))&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;应用&quot;&gt;应用&lt;/h2&gt;
&lt;h3 id=&quot;net/http&quot;&gt;net/http&lt;/h3&gt;
&lt;p&gt;先前，我们提供一个静态文件的服务时，使用：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;http.Handle(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, http.FileServer(http.Dir(&lt;span class=&quot;string&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;)))&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在，&lt;code&gt;io/fs.FS&lt;/code&gt;文件系统也可以转换成http.FileServer的参数了:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; FileSystem&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; FS(fsys fs.FS) FileSystem&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Handler&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; FileServer(root FileSystem) Handler&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以，嵌入文件可以使用下面的方式:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;http.Handle(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, http.FileServer(http.FS(fsys)))&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;text/template和html/template-&quot;&gt;text/template和html/template.&lt;/h3&gt;
&lt;p&gt;同样的,template也可以从嵌入的文件系统中解析模板：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; ParseFS(fsys fs.FS, patterns ...&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) (*Template, error)&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *Template) ParseFS(fsys fs.FS, patterns ...&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) (*Template, error)&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7b386a83097439a81662491bf0bf6b18</guid>
<title>如何评估大二计算机学生的认知能力？</title>
<link>https://toutiao.io/k/x1wu11p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;看到团队最近做的一个技术实习生面试实例，很有意思。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;面试官是我们创新工场南京研究院的冯霁博士。来面试的是一个刚读完大二上学期计算机课程的学生。冯霁的面试题挺简单的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;梯度下降已经二百年了，为什么上世纪80年代的反向传播算法会被认为是人工智能技术发展的里程碑？前人难道不知道梯度下降？与硬做梯度下降相比，1986年提出的反向传播算法多了些什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这本是一个AI算法面试的热身题。熟悉深度学习基础知识的随口就可说出标准答案。没想到小伙子虽来自计算机专业，却还没来得及系统学习机器学习、深度学习知识。如果就此结束面试，给小伙子一封拒信，似乎也说得过去。但冯霁换了个处理方法：给小伙子一晚上时间去调研并写出报告。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小伙子连夜查资料、做调研，知道反向传播是通过动态规划来做梯度下降，复杂度由此降低到了线性。第二天，他给出了一份四页纸的报告。报告的逻辑很清晰，从问题描述，到扼要回答，再到具体算法梳理，时间复杂度推理，最后还附上了历史资料及其他类似目的的优化算法简述。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.3054347826086956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KP3aBdicVfJMuWORqKeCln9tHAMa8fxNXeb6iaFE9zHgJC0gicrD88L18cEicZIibm1qunibkl6n206XDx7WWj74Q5Lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/p&gt;&lt;p&gt;其实，用一晚上时间做出调研并给出答案不算啥难事，任何一所大学计算机专业的本科学生都应具备这项基本素质。但这位同学所写的报告不仅给出了答案，还展示了很不错的信息梳理和表达能力——通过网络查询到的知识，被他组织成了自己的语言和逻辑，废话不多，条理清晰，其中的手绘示意图和手写公式、注释也挺见功力。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2483516483516484&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KP3aBdicVfJMuWORqKeCln9tHAMa8fxNXo4xcp4EI0xfqI07x5CzOichfjBicicZGm4Z8mOVGHpn9NEtzyzufUiabuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/p&gt;&lt;p&gt;大一大二学生，都是计算机科学领域的新手，正在入门和构建知识体系的阶段。我们很难通过一大批知识性问题来简单评估他们的能力水平。换句话说，这个阶段的孩子，最重要的不是学过和记住什么样的知识，而是是否掌握了快速学习知识并构建适合于自己的认知框架，以便将知识梳理成有序脉络的技能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.2839224629418473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/KP3aBdicVfJMuWORqKeCln9tHAMa8fxNXAc553ZJBWO1DQULbC1toWO6BEAfiazzK9PMiazFAibzw1V9Yick7R7GIRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;p&gt;冯霁面试的本就是个知识性问题，但候选人答不出时，冯霁转而考察候选人快速学习知识、有序梳理知识、清晰表达知识的能力——这是面试官应该做的事情。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我自己在很多年前也大量带实习生。那时，有一批来自北大清华等名校的大一大二实习生，他们从能力特质上可明显分成两类：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;不会学习也不会梳理知识的；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;既会学习又会梳理知识的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;头一类实习生看上去什么都会一点儿，但明显缺少系统化的学习方法和适合自己的认知框架。比如，有位大二的实习生写代码很快，做一个复杂的数据流逻辑时，东看看Stack Overflow，西看看Code Search，不一会儿就把七八个数据处理环节写好，拼装成完整的数据工作流。但他做出来的数据处理流程效率太低，既耗时又耗资源。我当时建议他系统学习一下分布式数据处理的基础知识与成熟的理论技巧，然后从整体角度思考下有没有根本性的优化方法，而不是每个环节各自为战，相互掣肘。可惜那个实习生缺少耐心，每次都是翻翻相关网页，就回头改写代码，一直游离在合理的解决问题思路之外。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二类实习生无论当前掌握的知识多少，他们都有能力在短时间内进入到一个新的领域，建立起适合自己的知识脉络。比如，我曾经带着一位大二的实习生写Wikitext（就是Wikipedia内容写作时使用的标记语言）的语义分析器和宏扩展器。那位实习生从没接触过标记语言的解析算法，也没深入学习过编译原理之类的系统知识，一开始仿照现成的代码做工作，总是不得其法，欲速而不达。没多久，他就悟出磨刀不误砍柴工的道理，先暂停编程，花了四五天的工夫去系统学习标记语言解析相关的技术，做了好几个练习用的小程序。我记得，他也像冯霁面试的实习生候选人那样，整理出了一份有逻辑，表达清晰，层次分明的学习笔记。后续的工作，他做起来就既快又好了。他甚至还根据自己的学习笔记提出了一项不错的算法改进建议并付诸实践。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果有两个软件研发团队，前一个团队经验丰富，但学习知识和梳理知识的能力不足，后一个团队初出茅庐，但学习知识和梳理知识的能力较强，那我是更愿意带后一个团队的。要做最前沿、最有挑战、最容易形成技术壁垒的事情，单靠死记硬背的知识以及熬时间熬出来的经验是没太大用处的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;顺便说一下：提这个案例并不是想说明冯霁面试的那个小伙子的能力水平究竟如何。冯霁的题目很基础，难以完整考察一个人的真正实力。其实，那位候选人来自世界最顶尖的名校——这一方面说明头部计算机专业并不会在大一大二就把深度学习之类的热门知识“灌”进学生脑子里，另一方面也说明候选人自身的聪明程度和综合素质绝对不差，冯霁可以在这个预设条件的基础上判断自己是否要聘用他。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，回想起我们家九岁的小朋友，目前在学习时就大致处在泛泛而学，感兴趣的领域就博闻强记（不感兴趣的领域连起码的记忆也不肯），但几乎不具备任何知识梳理能力的阶段。小孩子当然和大一大二的学生之间没有可比性，但换个角度，是不是可以设计一些小游戏、小实验，让他们在玩的过程里积累些信息梳理、知识梳理的初步经验呢？比如：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5NjM1MDI5Mg==&amp;amp;mid=2652284063&amp;amp;idx=1&amp;amp;sn=00f515dac7ebddff89271ec9f356b690&amp;amp;chksm=8b537da4bc24f4b2b45debd12fb4371d104647bb1c6c4c1c8da26aa3df1487de547784288bbc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;小朋友的调研小游戏：从数据到洞察&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;有空时，我得多琢磨琢磨。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>70e5b991c5012a8134895a5a76c0e419</guid>
<title>Gradle 与 Android 构建入门</title>
<link>https://toutiao.io/k/9ynuqn3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6669921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQDC7LNWvsLHGqVOV6xiauClZERpEGa2ibLiaC76MqKgLx3ZF3R5SBovfYg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-backw=&quot;578&quot; data-backh=&quot;386&quot;/&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_008&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;p&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;span&gt;无论是否意识到 Gradle 的存在，每位 Android 程序员都会直接或间接的与 Gradle 打交道。&lt;/span&gt;&lt;span&gt;大家也许有偶尔会想，为什么需要 Gradle 这个自动化构建工具？默认创建的 Android 工程里的文件都有什么含义？什么是依赖管理？Android 的打包流程是什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过阅读本文，可以大致了解 Gradle 是如何工作，可以有针对性搜索相关内容，更加快速的解决常见编译错误。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一 为什么需要自动化构建工具？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下命令只是示例，方便说明问题，具体使用方式请查找相关命令手册用法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们知道，一个 APK 包其实是一个 zip 包，包含代码和资源。那么我们可以编写一个Shell 脚本，命名为 assemble.sh，任何人只要通过执行这个脚本就可以得到 apk 包：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;1. # 将 .java 文件转换为 .class 文件，执行命令&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2. javac xxx.java&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;3. # Android 还会将 .class 文件转换为 .dex 文件&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;4. dx xxx.class&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;5. # 打包成 apk&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;6. zip xxx.apk [需要打包的代码和资源]&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 Android 中代码对资源是通过 R.java 文件引用，于是需要继续添加命令，并要求这个命令在 javac 命令前执行。在实际开发中我们不可能所有功能都自己实现，有可能会依赖优秀的开源库，修改后的伪代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. # 生成 R.java&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;2. aapt [资源文件]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;3. # 将 .java 文件转换为 .class 文件，执行命令&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;4. javac xxx.java R.java -classpath xxx.jar&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;5. # Android 还会将 .class 文件转换为 .dex 文件&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;6. dx xxx.class R.class xxx.jar&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;7. # 打包成 apk&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;8. zip xxx.apk [需要打包的代码和资源]&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一切似乎都尽在掌握之中，真的吗？让我们看看 Android APK 实际打包的流程是什么样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;630&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.090270812437312&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQSHOBROapj2icNR4KQicv5n0sGOibn24EAJrtm5CjFMm7kdVdRdh3AAoxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;997&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想想实现如此复杂流程的 Shell 脚本是不是有些头大？别急，实现后还会遇到下面这些问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于多个工程，每个工程都需要拷贝上述 Shell 脚本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于单个工程，每次添加一个功能都需要在原有流程中插入一段代码，随着需求增加，脚本难以维护&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如何管理引入的外部依赖？如何打 debug、release 包？如何打多渠道包？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时我们需要一个简化上述过程的工具，通过一些约定，如将代码、资源等放在指定目录，再辅以构建脚本就可以快速得到最终的构建产物，这就是自动化构建工具，而 Gradle 就是其中一个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对照刚刚那个简单的例子，每一个工程在 Gradle 中叫做一个 Project，每一个需要执行的任务，如生成 R 文件、编译 java 文件等，在 Gradle 中叫做一个 Task。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过 TaskA.dependsOn(TaskB)可以实现先执行 TaskB 再执行 TaskA 的效果。同时 Gradle 也提供 doFirst、doLast 允许在每个 Task 前和后执行一些代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，我们知道为什么需要自动化构建工具：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二 默认创建的 Android 工程都有什么&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1481481481481481&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbO9eRDs5AtVS4YcmbhIBAiaibGGTqaFw9Gn9km8DNyWzibGyABsgvamj16zua97kbhG6mmBmZ3rm1OzIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每当通过 Android Studio 新建一个工程时，AS 都会自动创建如上图所示的目录结构，图片中简单介绍了各个目录是干什么的，接下来为大家详细介绍每一个目录或者文件的含义：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;.gradle 与 .idea&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;.gradle 与 .idea 存放 Gradle 和 AS 对于当前工程的缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最常见的一个应用就是点击 sync 后，AS 会在每个工程下生成 .iml 文件，他们与 .gradle、.idea 配合为我们提供了代码提示等常见功能。所以如果你的代码飘红而你确认依赖没有问题，可以尝试下面步骤清除 AS 缓存：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. 删.idea 删.gradle 文件&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;2. 命令行执行 ./gradlew clean&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;3. 选择 File -&amp;gt; invalidate caches/restart&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;4. Sync&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;gradle/wrapper 与 gradlew gradlew.bat&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们初次配置 Android 环境时，需要安装 Java，安装 AS，但并不需要安装 Gradle，这其中就是 gradle/wrapper 的功劳。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当执行 gradlew 脚本时，它可以保证每个项目都使用自己期望的 Gradle 版本，而其中的奥秘就在 gradlew 的这段代码中：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1.exec &quot;$JAVACMD&quot; &quot;${JVM_OPTS[@]}&quot; -classpath &quot;$CLASSPATH&quot; org.gradle.wrapper.GradleWrapperMain &quot;$@&quot;&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gradlew 并没有直接启动 Gradle 而是启动 gradle-wrapper.jar，它会判断如果没有 Gradle 环境，从 gradle-wrapper.properties 中的 distributionUrl 中下载相应环境，并启动 Gradle。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为 Gradle 允许命令行启动时附加参数来自定义 Gradle 的运行环境，所以百度app通过自定义 gradle-wrapper.jar，实现通过配置文件为不同内存大小的电脑、debug/release 包指定不同 gradle 运行内存，提升大家编译速度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;setting.gradle&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7256944444444444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQyVp2IBIiaEnkkCKicMI9X26H35hCRNxQpuBpCF14ianICGC6Gtknyhnnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;419&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;setting.gradle 中最关键的就是其提供的 include 方法，通过这个方法可以指定哪些工程需要参与编译，每一个参与编译的工程 Gradle 会为它创建一个 Project 对象。&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;根目录 build.gradle&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5324074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQrsTaAwO2HialIMMFjvicuasFG8DYg1hYXFlB4pdNL6thrfpnicfRI4hfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;308&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是 buildscript 代码块：&lt;br/&gt;gradle 默认是自顶向下执行，无论 buildscript 代码块在哪，它都会第一个执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来是 repositories 和 dependencies：&lt;br/&gt;repositories 表示 dependencies 声明的依赖去哪些仓库找，google、jcenter、mavenCentral 都是第三方 Maven 仓库。同时，也可以通过 maven 方法添加自己的 Maven 仓库。需要注意的是，不应该假设组件一定会从特定仓库拉取，如果 Gradle 请求一个仓库超时，它会自动请求其他仓库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;dependencies：代表 Gradle 执行需要哪些依赖。比如需要 Android Gradle Plugin 插件为我们打包 apk 包，就需要添加&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. classpath &#x27;com.android.tools.build:gradle:3.4.0&#x27;&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后是 allprojects 和 repositories：&lt;br/&gt;在 allprojects 中的配置会对所有工程生效而里面的 repositories 则表示工程声明的 dependencies 去哪些仓库查找。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;app build.gradle&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6238425925925926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQEkI9blBatknnbsLfArl7PYCUE0dW9uEJrA1ia8cl8Yica0ja8z6NGN5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;361&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;首先可以看到 apply plugin: &#x27;com.android.application&#x27;，当应用这个插件后，它会为我们创建一系列 Task，比如 assembleDebug、assembleRelease，执行这些 Task，就会得到最终的 APK。&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;android 代码块是插件为我们提供的 API允许我们修改 Task 的行为。dependencies 代码块的内容决定当前 Project 依赖哪些组件，而不同的依赖声明会有不同的结果，具体内容我们在下一节分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三 依赖管理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;依赖配置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 Android Gradle Plugin 3.0 时代，Google 使用 implementation 和 api 选项取代过去的 compile 选项。既然接口都变了，Google 索性将其他的配置项也进行了改名，方便大家理解其配置的含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意的是，老版本的接口没有被立刻删除，但是在下一个主要版本中会被删除。下面是各个配置项的官方中文解释：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3587962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQX5fmibEYzmUuKhwSyGdyUA9mhfoo0T77vj6nVpRWR9iae05JQ4iaAKZ3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;207&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;假设 A 依赖 B，B 依赖 C。&lt;br/&gt;如果 B 对 C 使用 implementation 依赖，则 A 无法调用 C 的代码；&lt;br/&gt;如果 B 对 C 使用 api 依赖，则 A 可以调用 C 的代码；&lt;br/&gt;如果 B 对 C 使用 compileOnly 依赖，则 A 无法调用 C 的代码，且 C 的代码不会被打包到 APK 中；&lt;br/&gt;如果 B 对 C 使用 runtimeOnly 依赖，则 A、B 无法调用 C 的代码，但 C 的代码会被打包到 APK 中；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实际上每一个组件都有自己的 compileClasspath 和 runtimeClasspath。&lt;br/&gt;当一个组件参与编译时，Gradle 就会将其放在 compileClasspath 中；&lt;br/&gt;当一个组件参与打包时，Gradle 就会将其放在 runtimeClasspath 中；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同的依赖配置项，其实就是将声明的依赖放入不同组件的不同的 classpath 中，回到上面的例子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;对于 implementation ，其实就是将 C 放入 B 的 compileClasspath 和 runtimeClasspath，放入 A 的 runtimeClasspath 中，从而实现 A 如果调用 C 的代码，在 A 的编译阶段 javac 报错，但最终 C 会被打包到 APK 包中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于 api、compileOnly、runtimeOnly 原理相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;源码与二进制&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当想要依赖一个源码工程时只需要这样写：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. implementation project(&#x27;:demo:mylibrary&#x27;)&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且我们可以明确知道 mylibrary 中的依赖都会被正确打包到 APK 中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当我们依赖二进制需要这样写：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. implementation &#x27;androidx.appcompat:appcompat:1.0.2&#x27;&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当执行依赖命令（只输出 release 包的 runtimeClasspath）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. ./gradlew :app:dependencies --configuration releaseRuntimeClasspath &amp;gt; dependencies.txt&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;输出依赖关系图时会看到并不是仅仅依赖一个 appcompat 组件（只显示部分依赖），还包含该组件自己的依赖，以及依赖的依赖，直到组件自身没有依赖，这样的特性叫做依赖传递。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. releaseRuntimeClasspath - Resolved configuration for runtime for variant: release&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;2. \--- androidx.appcompat:appcompat:1.0.2&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;3. +--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;4. +--- androidx.core:core:1.0.1&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;5. | +--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;6. | +--- androidx.collection:collection:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;7. | | \--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;8. | +--- androidx.lifecycle:lifecycle-runtime:&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;9. | | +--- androidx.lifecycle:lifecycle-common:2.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;10. | | | \--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;11. | | +--- androidx.arch.core:core-common:2.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;12. | | | \--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;13. | | \--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;14. | \--- androidx.versionedparcelable:versionedparcelable:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;15. | +--- androidx.annotation:annotation:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;16. | \--- androidx.collection:collection:1.0.0 (*)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;17. +--- androidx.collection:collection:1.0.0 (*)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;18. +--- androidx.cursoradapter:cursoradapter:1.0.0&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么 Gradle 是怎么确定这些依赖呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当使用Maven 规范上传组件时，不单单会上传组件的二进制，还会上传一个 pom.xml 文件，依赖信息就在这个文件当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为查看公共的 Maven 服务器有可能需要翻墙，下面给大家展示百度app自己搭建的服务器的后台，方便理解被上传的二进制在服务器是以怎样的结构存放的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5011574074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQEibDOKB6IGrWpXxyCNR9y5R3IKLbd1UibDwjjkT20gcwC0ibViaar5wVbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;290&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是百度app自己搭建的 Maven 服务器后台，点击一项查看详情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6597222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQFVNnyXB61Tc3QKuxrsOXTjohWxuEaWmUicoz7BiaUfnjXQJ3DIyEB3Mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;381&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有上传的二进制 aar，也有 pom 文件，还有我们在上传时自定义的文件 readme。看完远端的 POM 文件，我们在看看当二进制被下载后在本地是如何存放的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;210&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbO9eRDs5AtVS4YcmbhIBAiaibGpOZ8MUJAapGKHk36ELOkoI4VfLaWFAwwJ4HRicyx2aFGqmNIGbEicOzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;下面是一个简单的 POM 文件：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7731481481481481&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQGMQpmmibEQEpsRCLVhBakxP6qbx2Ap0d3VqmHZticibsrqlnsWoqB6SKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;447&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到有两个 dependency，需要注意的是 scope，也会分为 runtime 和 compile，runtime 不会参与编译，但会参与打包，compile 会参与编译和打包。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;两个实际例子：&lt;br/&gt; 一：假设 A 依赖 B，B 依赖 C&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36574074074074076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQYO87Mk2KbUvm4ib3mArUf0yVllRMZtLoHkXHeKFpGfZKdjF7W7cnQXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; data-backw=&quot;578&quot; data-backh=&quot;211&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;B 对 C 使用 implementation 依赖&lt;br/&gt;B 中有类 Foo 继承于 C中的 Bar&lt;br/&gt;在 A 中使用类 Foo 时会报错找不到类 Bar，解决办法只能让 A 再依赖 C，所以应该尽量避免使用继承&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二：假设 A 依赖 B，B 依赖 C&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;BC 是二进制， B 的 POM 中对 C 的依赖是 runtime&lt;br/&gt;在 Gradle 4.4 中，A 依然可以调用 C 的代码，这个问题在 Gradle 5.0 后被修复&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;依赖冲突&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么是依赖冲突：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5751533742331288&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQFXHq6qmX99jnnb6k3pQGSVLUdZJ34edhPbm07WjiaaInYDeFtC0D6Tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;652&quot; data-backw=&quot;578&quot; data-backh=&quot;332&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设 ABC 是源码，D 是二进制，A 声明依赖 B，A 声明依赖 C，B 声明依赖 D 1.0 版本，C 声明依赖 D 1.1版本，这时，D 有依赖冲突，需要确定是使用 1.0 还是 1.1 版本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何解决依赖冲突：&lt;br/&gt;1. 进行编译时，B 编译时依赖 D 的1.0版本，C 编译时依赖 D 的1.1版本，但最终打包到 apk 中 D 的版本是 1.1，因为版本号冲突默认选择最高版本&lt;br/&gt;2. Gradle 为我们提供了一系列解决依赖冲突的规则如：不允许依赖传递，exclude 移除一个依赖，替换一个组件为另一个组件，这些方法就不一一介绍了，按需百度即可&lt;br/&gt;3. 百度app在此基础上增加规则：如果最终应用的版本号高于在 version.properties 定义的版本号则报错&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;span&gt;&lt;br/&gt;1. 假设 D 发布 1.2 版本，但 B、C 都没有基于 D 1.2 版本发布新版本，则最终打包还是 D 的 1.1 版本，所以所有组件最终被打包到 APK 包中的版本都为 version.properties 中定义的版本；&lt;br/&gt;2. 假设 D 的 MavenId 由 D 改成了 E，C 基于 E 发布二进制，B 还是老样子，在实际打包中会报类重复的错误，原因就是 B 的 POM 文件中依赖的还是 D，所以需要让 B 基于 D 改名后的 E重新发一个二进制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四 打包流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了前面这些铺垫，让我们实际看看在执行打包 Task 时，实际还执行了哪些 Task。环境配置如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;Gradle 5.1.1&lt;br/&gt;Android Gradle Plugin 3.1.2&lt;br/&gt;org.gradle.parallel=true 开启并行编译&lt;br/&gt;release 包 minifyEnabled true&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;执行命令可以得到如下图所示输出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. # --dry-run 表示不实际执行每个 Task&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;2. gradlew assembleRelease --dry-run&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.4288164665523155&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQtu1wSHZowHKyWw3icfVPvYmVzgm08QBDLGoX3p0Y30XmI00k3lExeKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Task 很多，接下来为大家介绍几个重点的 Task，其余没介绍的感兴趣的同学可以找找对应的实现类，看看它的实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;preBuild&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;描述：做一些编译前的检查&lt;br/&gt;一个例子：有的人可能遇到下面的错误&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;span&gt;1. &quot;Android dependency &quot;+ display+ &quot;is set to compileOnly/provided which is not supported&quot;&lt;/span&gt;&lt;/em&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个的原因就是由前面说过的 compileClasspath 和 runtimeClasspath 引起的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;当一个组件因为不同的依赖配置项导致它的 compileClasspath 比如为 1.1.1版本，但他的 runtimeClasspath 是 1.1.2版本，preBuild 就会检测出这个问题并报错我们处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;compileReleaseAidl&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;类：AidlCompile&lt;br/&gt;描述：内部使用 AidlProcessor 调用 call 方法使用 build-tool 下的 aidl 执行编译。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;各类 generate和 merge&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些 Task 允许我们在整个编译工程中动态的生成一些代码，生成好的资源需要和已有的资源进行合并，并且需要注意有可能覆盖已有资源，就不再详细介绍了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;过程&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6574074074074074&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQ2icLb38JicYyXVpPnS0NbzM6TpA8LAUooFBwFsicOicicXTibNzD6oRG6zdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一步：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我们有 app 工程下的 Java 源文件，还有 AIDL、generate、R.java 等生成的 Java 源文件，还有本身依赖，源码子工程的 jar 包、远端 aar 解压的 jar 包等一系列二进制文件，源码文件是 javac 需要编译的内容，二进制文件 .jar/.class 则是当 javac 编译遇到一个类名等符号时，如果发现在现有的源文件找不到，该去哪找的集合，对应的 javac 参数就是 -classpath。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而这个参数，其实就是 compileClasspath 的一个应用，如果你源文件引用了一个类，它的 jar 包不在 compileClasspath 中，那么在编译时 javac 就会报错找不到符号了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当源文件被编译成类文件后，Google 提供了 Transform 机制允许我们对二进制文件在打包前进行修改，比如前面图片中的 :app:transformClassesWithXXXForRelease SKIPPED 就是我们自定义的 Transform。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过：app:transformClassesAndResourcesWithProguardForRelease SKIPPED 也可以看到 Proguard 也是通过 Transform 机制实现的，这里图片中一个 .class 文件，一个是 .jar/.class 文件，第一个显然是 javac 编译后的产物，第二个则是 runtimeClasspath，就是那些需要被打包的二进制。相信大家这样就理解了 compileClasspath 和 runtimeClasspath 是如何影响打包过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三步：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当 Transform 处理好所有的 class 文件后，接下来就是将 .class 文件转换为 .dex 文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是，javac 只能发现源码的问题，不会发现那些未参与编译的二进制的问题。而在 dex 转换过程中则可以发现比如类重复问题或者一个类，名字不变，但是由 Class 变成了 Interface 这类严重的代码问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四步：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;就是将前面的和资源进行打包。对应的类是 PackageApplication，得到这个 Task 后可以对打包的内容进行自定义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;五 结语&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然我们本次仅对常见的一些配置提供个大纲，没有详细介绍 Gradle 和 Android Gradle Plugin 相关内容，比如 Gradle 的生命周期、插件开发、Transform 机制等等，但是同学们看完后能对整个编译工具链有整体的了解，在需要的时候明白该从哪个方向去解决问题，这才是本文的价值所在。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;参考资料&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;https://docs.gradle.org/current/userguide/userguide.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration?hl=zh-cn&lt;/span&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.https://github.com/gradle/gradle&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.https://android.googlesource.com/platform/tools/base/+/refs/tags/gradle_3.1.2&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOica3CUVD6ynFBcKlNIMQasQSPRJzPN3icL5ljpH3w9Fw9z91PqNXflxbgfOh8Fn8VZZZb4k6aRQAfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-backw=&quot;561&quot; data-backh=&quot;312&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;一键三连，好运连连，bug不见&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;👇&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>