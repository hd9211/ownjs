<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>a282c90d998a6057356ce29dad84b263</guid>
<title>状态保持解决方案-分布式session的历史血脉</title>
<link>https://toutiao.io/k/ly8m8xb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;上篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486245&amp;amp;idx=1&amp;amp;sn=494e71a356ad4bd26633b5ae5278215f&amp;amp;chksm=fafde18bcd8a689de3cfa45c0bbe629bc098d26a85106caff62b0bfa069055374515865a3b26&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《网络通信之Session的历史血脉》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《网络通信之Session的历史血脉》&lt;/a&gt;是围绕着理解底层通信来的。因为不管是MQ还是持久层框架中，建立连接后都使用了session来保持或者保存状态数据。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上篇文章和&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486186&amp;amp;idx=1&amp;amp;sn=f21e17b21beb4c99cef0e076071ac859&amp;amp;chksm=fafde044cd8a69526aa3ec9edbe71ea5aa41de2ef236494201dc2f20701ed8abc6be1a72344f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《深入理解MQ生产端的底层通信过程-理解channel》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《深入理解MQ生产端的底层通信过程-理解channel》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486166&amp;amp;idx=1&amp;amp;sn=08a24c175c02a4b146dc52088d410599&amp;amp;chksm=fafde078cd8a696e616aebcb72aeef444e1e0008bf950a368933195f13c0a268face0d3ee371&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《接下来一段时间会对大家进行网络通信的魔鬼训练-理解socket》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;《接下来一段时间会对大家进行网络通信的魔鬼训练-理解socket》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486210&amp;amp;idx=1&amp;amp;sn=fd7a60ca9b4e41f942dd0b2653228774&amp;amp;chksm=fafde1accd8a68ba4f41f19d3543984f47756e884eb395b295cc7f4f1cd0575bc0305fba5431&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《网络字节序列-大端序和小端序》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《网络字节序列-大端序和小端序》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486242&amp;amp;idx=1&amp;amp;sn=483566d3fd97f333d3ea114dbbe8f7d1&amp;amp;chksm=fafde18ccd8a689abfcb9959079a3cbfc4ecf98e52d34318bf9490422622bddb0c4b81ef2288&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《https引起的跨域问题-COE&amp;amp;casestudy》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《https引起的跨域问题-COE&amp;amp;casestudy》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486103&amp;amp;idx=1&amp;amp;sn=943c5b7f3558df78164321806f273c8f&amp;amp;chksm=fafde039cd8a692f86f0ac97b0e1e05ece075de3e4f33e6a5ec90b269c51aed1963ff3107e0e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《懂得三境界-使用dubbo时请求超过问题》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《懂得三境界-使用dubbo时请求超过问题》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485988&amp;amp;idx=1&amp;amp;sn=efad5a030bc0a933ac5af2ee09f3c6c4&amp;amp;chksm=fafde08acd8a699c198d0d65c413273f05f2796cfd873160c2ba81ed3f33aebfaccb62234cb7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《一个http请求进来都经过了什么(2021版)》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《一个http请求进来都经过了什么(2021版)》&lt;/a&gt;是一个系列。只是用不同的方法在讲底层通信。中间尝试了很多方法和形式，旨在让大家能看下去，深层理解。生怕因为太过枯燥令大家前功尽弃、半途而废。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因为在上一篇里有朋友评论里提到了分布式session。其实分布式session本身是有点脱离我的文章大纲的，但是既然有朋友提出来了，总得把事情讲明白，所以加更了这篇。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分布式session解决了什么问题？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484368&amp;amp;idx=1&amp;amp;sn=b3c8d41b98ecf2b976d0b025c0322055&amp;amp;chksm=fafde97ecd8a6068cc4d25f2766261870a67baa4cbf9dc0d4920302fcf09e74ee682025efabc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《稳定性「三十六计」- 无状态化》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《稳定性「三十六计」- 无状态化》&lt;/a&gt;里我提到：&lt;span&gt;随着容器化、云原生等的流行，DevOps团队也在不断鼓吹「以无状态为荣，以有状态为耻」。因为有状态的服务难以部署、难以扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;「&lt;/span&gt;状态&lt;span&gt;」&lt;/span&gt;其实对用户体验而言是个好东西。保存用户的登录状态；浏览器异常关闭再次打开恢复用户之前的窗口状态；记录用户的偏好状态……于是勤于动脑的软件工程师们就想了：怎么既能拥有无状态化的扩展性，又拥有有状态时的良好用户体验呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;答案就是分布式session。它更像是一种业务问题的解决方案，而上篇文章所讲的session更合适的描述是一种技术设计抽象。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5622448979591836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibRfxpQqVHtD4TJMU8JeU6JN0P8H49jMdPYMMiaUnVO9ibWUsCQ75WpoG2BgFG4NGzfn867N9g34qkQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;980&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;常用的分布式session解决方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;2007年至今-客户端存储&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;使用cookie&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;客户端存储是指直接将信息存储在cookie中。客户端通过http协议和服务器进行cookie交互，通常用来存储一些不敏感信息。它有很明显的缺点：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;虽然这种方式有缺点，但是可以通过合理的控制减少副作用。所以我从07年参加工作时就在用这种方法，现在的系统也还在用。JWT就是其中一个典型，它长度小，信息做了加密，一般仍然是存储在cookie中解决单点登录问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JWT&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;JWT：Json Web Token，是基于Json的一个公开规范，这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息，他的两大使用场景是：认证和数据交换。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7475192943770672&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibRfxpQqVHtD4TJMU8JeU6JtP3XLx2jpnfqpfx3Agtq4x1WcvWJLbsjwDJLwkD6XzDBbT13Lk9w0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;907&quot;/&gt;&lt;/p&gt;&lt;p&gt;由服务端根据规范生成一个令牌（token），并且发放给客户端。此时客户端请求服务端的时候就可以携带者令牌，以令牌来证明自己的身份信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2009年开始我进行互联网领域，有几年和JWT打交道比较多。因为那时候，你想不想做全栈都是全栈，因为前后端不分离，做什么都是一坨。也就是近7年更专注做后端了。那时候记忆比较深的就是cookie里存着一段用很简易的加密做的字符串，用户名信息等关键信息之间用一个下划线隔开，还有一个带有效期的随机数字段，数据库里也存一份。匹配上了就认证成功用户登录状态session有效。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;没听说谁家用过-session会话保持（黏滞会话）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;会话保持是利用负载均衡的原地址Hash算法实现，负载均衡服务器总是将来源于同一IP的请求分发到同一台服务器上，，也可以根据cookie信息将同一个用户的请求每次都分发到同一台服务器上，不过这时的负载均衡服务器必须工作在HTTP协议层上。这种会话保持也叫黏滞会话(Sticky Sessions)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种方案虽然保证了每个用户都能准确的拿到自己的session，而且大量用户访问也不怕，但是这种会话保持不符合系统高可用的需求。这种方案有着致命的缺陷：一旦某台服务器发生宕机，则该服务器上的所有session信息就会不存在，用户请求就会切换到其他服务器，而其他服务器因为没有其对应的session信息导致无法完成相关业务。所以这种方法基本上不会被采纳。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2010年-服务器session复制&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;原理：任何一个服务器上的session发生改变（增删改），该节点会把这个 session的所有内容序列化，然后广播给所有其它节点，以此来保证Session同步。&lt;/p&gt;&lt;p&gt;优点：可容错，各个服务器间session能够实时响应。&lt;/p&gt;&lt;p&gt;缺点：会对网络负荷造成一定压力，如果session量大的话可能会造成网络堵塞，拖慢服务器性能。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在10年的时候，在公司举行了一个讲座上听人家说过，自己没用过。对这个印象也不深：因为当初那个讲座是leader非要我去的，我坐在第一排，然后……睡着了。因为确实也比较无聊，互联网场景下很少有场景需要这样用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2011年至今-状态集中存储&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2011年，我经过两年的努力，终于在公司里，从一个写业务代码的开发，转成了一个中间件开发者。当时让我一个负责约等于是开发一个zookeeper吧。那时候zookeeper还没有普及，当时很多公司都在开发自己的中间件。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;一个下午，我在测试环境发布了一个不成熟的版本，自己的服务挂了。一屋子的人都站了起来。因为我这边挂了，其他人的模块都跑不起来。好像有点跑题了，总之，从那之后，市面上开始出现了各种集中式的状态存储：zookeeper、memcache缓存，其实数据库也是一种。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本质上，对于Java开发者来说，session存储的东西只是从JVM内移到了JVM外。而这种场景下会话保持就相当于是按照hash值进行路由，session复制就相当于集中存储的副本了。也就是说&lt;span&gt;session会话保持和&lt;/span&gt;&lt;span&gt;服务器session复制实际&lt;/span&gt;上是现代状态集中存储的基础原理，只不过是管理方由业务开发人员转移到中间件管理端，降低了对业务开发人员的开发管理成本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;session使用注意事项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;15年时，我们线上发生过一个问题：我正在验证一个线上功能。为了更好的验证，用chrome浏览器登录一个用户，用IE登录另外一个用户。这时候，我刷新了IE页面，结果IE用户突然自己变成了chrome的用户。以多年做技术的敏锐嗅觉，我意识到在组件层面出了问题。于是将这个问题立即上报了技术经理。技术经理听了我的报告，联系了负责CDN的团队。经过他们的排查，CDN的静态缓存策略设置的有问题，他们立即更新了策略解决了问题。（现在想来一身冷汗啊，随随便便就操作生产了？）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面的教训告诉咱们：使用session要十分注意对请求解析的筛选。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a105d7acf0e20b8e8b83aeb03bfc1f65</guid>
<title>从模板文档中提取结构化数据</title>
<link>https://toutiao.io/k/aut6nku</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;p&gt;收据、账单、保险报价单等模板文件在各种业务工作流程中极为常见且至关重要。目前，处理这些文档主要是手动操作，并且确实存在的自动化系统基于脆弱且容易出错的启发式方法。考虑像发票这样的文档类型，它可以以数千种不同的方式排列——来自不同公司，甚至同一公司内不同部门的发票，格式可能略有不同。但是，对于发票应包含的结构化信息，例如发票编号、发票日期、到期金额、付款日期以及发票所发送的项目列表，存在共同的理解。&lt;/p&gt;&lt;p&gt;在ACL 2020接受的“用于从类似表单的文档中提取信息的表示学习”中，我们提出了一种从模板文档中自动提取结构化数据的方法。与之前从纯文本文档中提取的工作相比，我们提出了一种使用目标字段类型知识来识别候选字段的方法。然后使用神经网络对这些进行评分，该网络使用其邻域中的单词学习每个候选者的密集表示。对两个语料库（发票和收据）的实验表明，我们能够很好地推广到看不见的布局。为什么这么难？&lt;/p&gt;&lt;p&gt;这个信息提取问题的挑战在于它跨越了自然语言处理 (NLP) 和计算机视觉世界。与经典的 NLP 任务不同，此类文档不包含常规句子和段落中可能出现的“自然语言”，而是类似于表格。数据通常以表格的形式呈现，但此外，许多文档有多个页面，通常具有不同数量的部分，并具有各种布局和格式线索来组织信息。了解页面上文本的二维布局是理解此类文档的关键。另一方面，将其纯粹视为图像分割问题会导致难以利用文本的语义。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;解决方案概述&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们解决这个问题的方法允许开发人员使用两个输入来训练和部署给定域（如发票）的提取系统——一个目标模式（即要提取的字段列表及其相应类型）和一小部分标记的文档使用基本事实作为训练集。支持的字段类型包括基本信息，例如日期、整数、字母数字代码、货币金额、电话号码和 URL。我们还利用谷歌知识图谱常用的实体类型，例如地址、公司名称等&lt;/p&gt;&lt;p&gt;。输入文档首先通过光学字符识别 (OCR)服务运行提取文本和布局信息，使其能够处理原生数字文档，例如 PDF 和文档图像（例如，扫描的文档）。然后我们运行一个候选生成器，该生成器识别 OCR 输出中可能对应于给定字段实例的文本跨度。候选生成器利用与每个字段类型（日期、号码、电话号码等）相关联的预先存在的库，这避免了为每个候选生成器编写新代码的需要。然后使用训练有素的神经网络（“评分器”，如下所述）对这些候选中的每一个进行评分，以估计它确实是可能为该字段提取的值的可能性。最后，分配器模块将得分的候选人与目标字段相匹配。默认情况下，分配者只是为该字段选择得分最高的候选者，但可以合并其他特定于域的约束，例如要求发票日期字段按时间顺序在付款日期字段之前。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEPsMvOCRkbkZ80TibWUb0WEV6PicjFr3IdeyEVsHhrSAoPwXnMgTe0CKUxDfF28ibesFhbs2z2kianFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;记分器&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;记分器是一个神经模型，它被训练为一个二元分类器。它将模式中的目标字段与提取候选字段一起作为输入，并生成介于 0 和 1 之间的预测分数。候选对象的目标标签由候选对象是否与该文档和字段的基本事实相匹配来确定。该模型学习如何在向量空间中表示每个字段和每个候选，其中字段和候选在向量空间中越接近，候选是该字段和文档的真实提取值的可能性就越大。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;候选人代表&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;候选者由其邻域中的标记以及标记在页面上相对于为候选识别的边界框的质心的相对位置表示。以invoice_date字段为例，附近的短语“发票日期”或“发票日期”可能向记分员表明这是一个可能的候选者，而像“交货日期”这样的短语表明这可能不是发票日期。我们不会在其表示中包含候选人的价值，以避免过度拟合恰好存在于小型训练数据集中的值——例如，发票日期为“2019”，如果训练语料库碰巧仅包含发票从那一年。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEPsMvOCRkbkZ80TibWUb0WE4PK5vC99vrDfjiaoWQ3iabvQyQeGIrX7ibxWuDKpk7ibaEuPLpOFd1bDTg/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;模型架构&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;下图显示了网络的一般结构。为了构建候选编码（i），使用词嵌入表（a）嵌入邻域中的每个标记。每个邻居 (b) 的相对位置是使用两个完全连接的ReLU层嵌入的，这些层捕获细粒度的非线性。每个邻居的文本和位置嵌入被连接起来形成一个邻居编码（d）。自注意力机制用于合并每个邻居（e）的邻域上下文，使用最大池化将其组合成邻域编码（f）. 候选在页面（g）上的绝对位置以类似于邻居位置嵌入的方式嵌入，并与候选编码（i）的邻域编码连接。最后的评分层计算场嵌入 (k) 和候选编码 (i) 之间的余弦相似度，然后将其重新缩放到 0 和 1 之间。&lt;/p&gt;&lt;p&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEPsMvOCRkbkZ80TibWUb0WE6V5dn65kdd04ic5UsEsTJA7bQ0th4ysXo9f47uOS5vj5hQOtx189Y4g/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;结果&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;对于训练和验证，我们使用了具有多种布局的内部发票数据集。为了测试模型泛化到看不见的布局的能力，我们使用了发票的测试集，其布局与训练和验证集不相交。我们在以下几个关键字段上报告了从该系统中提取的F1 分数（越高越好）：&lt;/p&gt;&lt;p&gt;场地 F1分数&lt;/p&gt;&lt;p&gt;到期金额 0.801&lt;/p&gt;&lt;p&gt;邮寄日期 0.667&lt;/p&gt;&lt;p&gt;到期日 0.861&lt;/p&gt;&lt;p&gt;发票日期 0.940&lt;/p&gt;&lt;p&gt;发票编号 0.949&lt;/p&gt;&lt;p&gt;采购订单 0.896&lt;/p&gt;&lt;p&gt;总金额 0.858&lt;/p&gt;&lt;p&gt;total_tax_amount 0.839&lt;/p&gt;&lt;p&gt;从上表中可以看出，该模型在大多数领域都表现良好。但是，诸如delivery_date 之类的字段还有改进的余地。进一步的调查表明，这个领域存在于我们训练数据中的一个非常小的例子子集中。我们希望收集额外的训练数据将帮助我们改进它。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;下一步是什么？&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Google Cloud 最近宣布将发票解析服务作为Document AI产品的一部分。该服务使用上述方法以及BERT等其他近期研究突破，从发票中提取十多个关键字段。您可以在演示页面上传发票并查看这项技术的实际应用！&lt;/p&gt;&lt;p&gt;对于给定的文档类型，我们希望能够在给定中等大小的标记语料库的情况下构建一个提取系统。我们目前正在追求几个后续，包括提高数据效率和准确处理嵌套和重复字段，以及难以定义好的候选生成器的字段。&lt;/p&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>50bd7189b0bcbf635e481eed1e5425cb</guid>
<title>实战：利用Python开发App</title>
<link>https://toutiao.io/k/0r4orya</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;pre data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;点击⬆️方“&lt;/span&gt;&lt;span&gt;逆锋起笔&lt;/span&gt;&lt;span&gt;”，&lt;/span&gt;&lt;span&gt;公众号回复 &lt;/span&gt;&lt;span&gt;编程资源&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;p&gt;&lt;span&gt;领取大佬们推荐的学习资料&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUyMzM2ODUwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaIWQB73gicJGTicpAjbSjAjic3d4ytEoiaArkWw6hKMqicPSXrpd4FquTTdStuMoILtqGHS222lIQlh1mg/0?wx_fmt=png&quot; data-nickname=&quot;逆锋起笔&quot; data-alias=&quot;readdot&quot; data-signature=&quot;全网最新编程视频教程、大佬们推荐的 pdf 学习资料，全部免费分享！来到这里，你不懂程序都难。&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我很早之前就想开发一款app玩玩，无奈对java不够熟悉，之前也没有开发app的经验，因此一直耽搁了。最近想到尝试用python开发一款app，google搜索了一番后，发现确实有路可寻，目前也有了一些相对成熟的模块，于是便开始了动手实战，过程中发现这其中有很多坑，好在最终依靠google解决了，因此小记一番。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;说在前面的话&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;python语言虽然很万能，但用它来开发app还是显得有点不对路，因此用python开发的app应当是作为编码练习、或者自娱自乐所用，加上目前这方面的模块还不是特别成熟，bug比较多，总而言之，劝君莫轻入。&lt;/section&gt;&lt;h3&gt;&lt;span&gt;准备工作&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;利用python开发app需要用到python的一个模块–kivy，kivy是一个开源的，跨平台的Python开发框架，用于开发使用创新的应用程序。简而言之，这是一个python桌面程序开发框架（类似wxpython等模块），强大的是kivy支持linux、mac、windows、android、ios平台，这也是为什么开发app需要用到这个模块。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虽然kivy是跨平台的，但是想要在不同的平台使用python代码，还需要将python代码打包成对应平台的可执行程序，好在kivy项目下有个打包工具项目–buildozer，这是官方推荐的打包工具，因为相对比较简单，自动化程度高，其他项目比如：python-for-android也能起到类似的作用，这里不展开介绍。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;搭建kivy开发环境&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;需要在pc上安装kivy开发环境，这里演示下mac与linux下的安装过程。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;install kivy for mac&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;安装一些依赖包：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;brew install pkg-config sdl2 sdl2_image sdl2_ttf sdl2_mixer gstreamer&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;安装cython以及kivy：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install cython==0.25&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install kivy&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果安装kivy报错，则使用下面的方式安装kivy：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;git clone https://github.com/kivy/kivy&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;python setup.py install&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;安装后测试：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$python&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Python 2.7.10 (default, Jul 15 2017, 17:16:57)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import kivy&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[INFO   ] [Logger      ] Record log in /Users/didi/.kivy/logs/kivy_18-05-08_4.txt&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[INFO   ] [Kivy        ] v1.10.1.dev0, git-5f6c66e, 20180507&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[INFO   ] [Python      ] v2.7.10 (default, Jul 15 2017, 17:16:57)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说明：导入kivy模块没有报错则说明安装成功。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;install kivy for centos7&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;先安装依赖：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum install \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;make \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mercurial \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;automake \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gcc \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gcc-c++ \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SDL_ttf-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;SDL_mixer-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;khrplatform-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mesa-libGLES \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mesa-libGLES-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gstreamer-plugins-good \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gstreamer \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gstreamer-python \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mtdev-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;python-devel \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;python-pip \&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;java-devel&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;安装cython以及kivy:&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install Cython==0.20&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install kivy&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;centos安装kivy参考：https://kivy.org/docs/installation/installation-linux.html#using-software-packages&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说明：其他安装kivy方式可移步：https://kivy.org/#download（需要翻墙）&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;用kivy开发第一个python app&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;安装完kivy就可以开发app程序了，这里演示下hello-world程序，关于kivy更复杂的用法不是本文重点，后面再成文介绍。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1) 创建一个main.py文件，写入：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;#! -*- coding:utf-8 -*-&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from kivy.app import App&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;class HelloApp(App):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;if __name__ == &#x27;__main__&#x27;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;HelloApp().run()&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2)创建一个hello.kv文件，写入：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Label:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;text: &#x27;Hello, World! I am nMask&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简单说明：main.py是入口函数，定义了一个HelloApp类，该类继承kivy.app；hello.kv文件是kivy程序，相当于定义界面风格等，该文件命名规则为类名小写且去除app。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;运行第一个python app&lt;/span&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;python main.py&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行结果：&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.5435185185185185&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6Hsjhy4uXj92uvsHuFOzmKQykFSOCdO27TcibC3q3LtkD9JOmuPRro1t2bFQg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;安装buildozer工具&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;通过以上的编码，我创建了自己的第一个python app程序，该程序可以直接在mac、linux、windows平台下运行，那么如何让它在安卓或者苹果手机上运行呢？我们知道在安卓上运行，需要将其打包成apk安装程序，因此就需要用到前面提到过的buildozer工具，（buildozer工具可以打包kivy程序，支持android、ios等），buildozer的安装过程比较简单：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install buildozer&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;使用buildozer工具将kivy程序打包成apk&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;在python项目目录下运行：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;buildozer init&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行成功将会创建一个配置文件buildozer.spec，可以通过修改配置文件更改app的名称等，然后运行：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;buildozer android debug deploy run&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;运行以上命令将会生成跨平台的安装包，可适用安卓、ios等，如果用于安卓，则是利用python-for-android项目。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在第一次运行以上命令的时候，会自动在系统中下载安卓sdk等必要文件，如下图。（过程需要翻墙，而且有很多依赖需要下载）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3078393881453155&quot; data-type=&quot;jpeg&quot; data-w=&quot;1046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6HsjhyZ7Nicx5iaBfF2JmaamN961Gy6hoMehVFDJKAkuIv8oWBmj1phzFzEdxg/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说明：这里只演示打包成apk文件，iso平台的可自行研究，参考文档：&lt;/span&gt;&lt;span&gt;https://github.com/kivy/buildozer&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;python apk程序测试&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;如果以上步骤都运行成功的话，应该会在项目目录下的bin目录下生成一个apk文件，类似如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7224199288256228&quot; data-type=&quot;jpeg&quot; data-w=&quot;562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6HsjhyNJ3jibqOibJy4YOZSNKeyibn3NfvoU64uWRXFhh3Yo0t3liaurXHjKVM9A/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后将apk下载到安卓系统的手机上，安装即可，测试效果如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7479508196721312&quot; data-type=&quot;jpeg&quot; data-w=&quot;976&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6HsjhyhG30dC47uZhhYIibONoyGknv8LE38WIhBXTvrwaAL183Hs47wLknibiaw/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;打开app&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.3661087866108788&quot; data-type=&quot;jpeg&quot; data-w=&quot;956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6HsjhyZSFkesd4kBBkeftOAicPt0vKDBWQVqGbonwkHfsGn20Of1lDFr9ZA8A/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;buildozer使用说明&lt;/span&gt;&lt;/h3&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Usage:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;buildozer [--profile &amp;lt;name&amp;gt;] [--verbose] [target] &amp;lt;command&amp;gt;...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;buildozer --version&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Available targets:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;android        Android target, based on python-for-android project&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ios            iOS target, based on kivy-ios project&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;android_old    Android target, based on python-for-android project (old toolchain)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Global commands (without target):&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;distclean          Clean the whole Buildozer environment.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;help               Show the Buildozer help.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;init               Create a initial buildozer.spec in the current directory&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;serve              Serve the bin directory via SimpleHTTPServer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;setdefault         Set the default command to run when no arguments are given&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;version            Show the Buildozer version&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Target commands:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;clean      Clean the target environment&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update     Update the target dependencies&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;debug      Build the application in debug mode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;release    Build the application in release mode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;deploy     Deploy the application on the device&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;run        Run the application on the device&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;serve      Serve the bin directory via SimpleHTTPServer&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Target &quot;android_old&quot; commands:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;adb                Run adb from the Android SDK. Args must come after --, or&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;use --alias to make an alias&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;logcat             Show the log from the device&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Target &quot;ios&quot; commands:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;list_identities    List the available identities to use for signing.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;xcode              Open the xcode project.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Target &quot;android&quot; commands:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;adb                Run adb from the Android SDK. Args must come after --, or&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;use --alias to make an alias&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;logcat             Show the log from the device&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;p4a                Run p4a commands. Args must come after --, or use --alias&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;to make an alias&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;buildozer打包过程中的坑点&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;如果在打包过程中遇到报错，可以修改buildozer.spec配置文件中的log_level为2，然后重新运行，可以看具体的错误信息。微信搜索公众号 逆锋起笔，关注后回复 编程资源，领取各种经典学习资料。&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;报错：You might have missed to install 32bits libs&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;这个错是我在centos7上运行时报的错，大意是系统缺少了某些32位的依赖文件。&lt;br/&gt;解决方案：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;yum -y install --skip-broken glibc.i686 arts.i686 audiofile.i686 bzip2-libs.i686 cairo.i686 cyrus-sasl-lib.i686 dbus-libs.i686 directfb.i686 esound-libs.i686 fltk.i686 freeglut.i686 gtk2.i686 hal-libs.i686 imlib.i686 lcms-libs.i686 lesstif.i686 libacl.i686 libao.i686 libattr.i686 libcap.i686 libdrm.i686 libexif.i686 libgnomecanvas.i686 libICE.i686 libieee1284.i686 libsigc++20.i686 libSM.i686 libtool-ltdl.i686 libusb.i686 libwmf.i686 libwmf-lite.i686 libX11.i686 libXau.i686 libXaw.i686 libXcomposite.i686 libXdamage.i686 libXdmcp.i686 libXext.i686 libXfixes.i686 libxkbfile.i686 libxml2.i686 libXmu.i686 libXp.i686 libXpm.i686 libXScrnSaver.i686 libxslt.i686 libXt.i686 libXtst.i686 libXv.i686 libXxf86vm.i686 lzo.i686 mesa-libGL.i686 mesa-libGLU.i686 nas-libs.i686 nss_ldap.i686 cdk.i686 openldap.i686 pam.i686 popt.i686 pulseaudio-libs.i686 sane-backends-libs-gphoto2.i686 sane-backends-libs.i686 SDL.i686 svgalib.i686 unixODBC.i686 zlib.i686 compat-expat1.i686 compat-libstdc++-33.i686 openal-soft.i686 alsa-oss-libs.i686 redhat-lsb.i686 alsa-plugins-pulseaudio.i686 alsa-plugins-oss.i686 alsa-lib.i686 nspluginwrapper.i686 libXv.i686 libXScrnSaver.i686 qt.i686 qt-x11.i686 pulseaudio-libs.i686 pulseaudio-libs-glib2.i686 alsa-plugins-pulseaudio.i686 python-matplotli&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;参考：&lt;/span&gt;&lt;span&gt;https://ask.fedoraproject.org/en/question/9556/how-do-i-install-32bit-libraries-on-a-64-bit-fedora/&lt;/span&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;报错：Error compiling Cython file&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;错误大意为cython文件出错，可能是cython模块没有安装，或者版本有问题。&lt;br/&gt;解决方案：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;pip install cython==0.25&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h4&gt;&lt;span&gt;报错：IOError: [Errno 2] No such file or directory…..&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;这是在打包的最后一步，将apk文件copy到项目bin目录下时报的错，是buildozer的一个bug。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;解决方案：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;修改/usr/local/lib/python2.7/dist-packages/buildozer/tagets/android.py文件：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(1)在文件开头导入:&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;from distutils.version import LooseVersion&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(2) 将786行:XXX found how the apk name is really built from the title这一行以下的代码替换为：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;section&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;__sdk_dir = self.android_sdk_dir&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;build_tools_versions = os.listdir(join(__sdk_dir, &#x27;build-tools&#x27;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;build_tools_versions = sorted(build_tools_versions, key=LooseVersion)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;build_tools_version = build_tools_versions[-1]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;gradle_files = [&quot;build.gradle&quot;, &quot;gradle&quot;, &quot;gradlew&quot;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;is_gradle_build = any((exists(join(dist_dir, x)) for x in gradle_files)) and build_tools_version &amp;gt;= ’25.0&#x27;&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;buildozer虚拟机&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;kivy官方推出了一个buildozer虚拟机镜像，已经安装好了buildozer以及一些依赖文件，为buildozer打包测试提供平台。由于之前我在mac上利用buildozer打包一直报错，后来换成centos也依然没有成功，因此便下载了此虚拟机，测试效果如下：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5592592592592592&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ULibHgXIt3jw7AIcDhH3sG1NoicY6HsjhyadfWgWeIg1ichK87MukVUST1zNJcINz9ck58mUuNarGYJRHM6BtqRmw/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;虚拟机下载地址：&lt;/span&gt;&lt;span&gt;http://txzone.net/files/torrents/kivy-buildozer-vm-2.0.zip&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;说明：对于无法解决依赖问题的朋友，可以使用此虚拟机进行程序打包，开发环境还是推荐用自己的本机。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;kivy开发实例&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;因为本文重点在于介绍如何利用kivy+buildozer开发一款python app，因此对于kivy的开发过程，以及app功能进行了最简化。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;来自：CSDN，作者：nmask&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;链接：https://blog.csdn.net/nmask/article/details/109664469（版权归原作者所有，侵删）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247491982&amp;amp;idx=1&amp;amp;sn=04d36b0d9633345a402e0615e7c28871&amp;amp;chksm=fa3f00d5cd4889c31c9ed5bfa949ff1830d73c74cbf96050f741639e8917c0af0500b834f722&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;CTO 写低级 Bug，致公司 70 GB 数据泄露！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247491963&amp;amp;idx=1&amp;amp;sn=e07c1796121cf550729448948bd56099&amp;amp;chksm=fa3f0020cd488936ba12f1c588d6e1e530378168a47031b418daf50c3fb92530209d430786c2&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;未来，一个 APP 就知道你的全部！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247487666&amp;amp;idx=1&amp;amp;sn=eeff3122ca70275ed113289087c3a268&amp;amp;chksm=fa3cf1e9cd4b78ff2b0c609c15fe23019cfb62821de4393e1a16e2c27aa049ecf865f3b9ec2d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;一个人竟然撸了一个微博 App&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247486413&amp;amp;idx=1&amp;amp;sn=4630b55eac252fe8a9b0abe8e53573cd&amp;amp;chksm=fa3cea96cd4b6380918ac3dbadcd94f2953622022f6ddf06159c34122a0c9df103ec79f910b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;新技能：用 Python 写一个安卓 APP&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUyMzM2ODUwMA==&amp;amp;mid=2247486285&amp;amp;idx=1&amp;amp;sn=97d0deeebb1acb845aa042b1e203c9fe&amp;amp;chksm=fa3cea16cd4b63007f3d176552a28c0477398ae1ca6c07bf4fdb24fdb5b4eb60105d89d24a0b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;有了这个神器，轻松用 Python 写 APP ！&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hs540iaTKoaJzr8mCunJ8fiaLHTVy5ic53H2dSVXKlA7iaibMyl7qJNTePsPptc1CdmciaD2PmhG5J98xjRicQ3Ob0diaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-darkmode-bgcolor-15865441435016=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15865441435016=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15865441435016=&quot;rgb(255, 21, 21)&quot; data-darkmode-original-color-15865441435016=&quot;rgb(255, 0, 0)&quot; data-style=&quot;max-width: 100%; color: rgb(255, 0, 0); font-family: Optima-Regular, PingFangTC-light; font-weight: 700; letter-spacing: 0.544px; widows: 1; word-spacing: 2px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__37&quot; data-darkmode-bgcolor-15866879525102=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15866879525102=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15866879525102=&quot;rgb(255, 21, 21)&quot; data-darkmode-original-color-15866879525102=&quot;rgb(255, 0, 0)&quot; data-darkmode-bgcolor-158705654000210=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-158705654000210=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-158705654000210=&quot;rgb(255, 21, 21)&quot; data-darkmode-original-color-158705654000210=&quot;rgb(255, 0, 0)&quot; data-darkmode-bgcolor-15870565400370=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15870565400370=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15870565400370=&quot;rgb(255, 21, 21)&quot; data-darkmode-original-color-15870565400370=&quot;rgb(255, 0, 0)&quot;&gt;支持下 &lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.764&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ibsfLhQMgy09JhlUaCQZm4kXHBSlPxPOOpOcfiaNmJRjoem28z1x3CbXNG2eQNK8Tic1Yyf1WqKZ3VibvSicNtwcguQ/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;/pre&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e8b7630d5c77e4ee7ec021b02cadea71</guid>
<title>Nike正式收购虚拟时尚公司RTFKT大步跨入元宇宙</title>
<link>https://toutiao.io/k/ytth1ob</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2bbf48e02041e551287b3ed11e9f8731</guid>
<title>一行 Object.keys() 引发的血案</title>
<link>https://toutiao.io/k/io2bclp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content&quot; itemprop=&quot;articleBody&quot;&gt;&lt;h2 id=&quot;故事背景&quot;&gt;&lt;a href=&quot;#故事背景&quot; class=&quot;headerlink&quot; title=&quot;故事背景&quot;/&gt;故事背景&lt;/h2&gt;&lt;p&gt;有一天上线后大佬在群里反馈了一个问题，他刚发的动态在生成分享卡片的时候，卡片底部的小程序码丢失了，然而其他小伙伴都表示在自己手机上运行正常。事实上大佬也说除了这条动态以外，其它都是正常的。&lt;/p&gt;
&lt;p&gt;说明这个 BUG 需要特定的动态卡片 + 特定的设备才能复现，所幸坐我对面的小姐姐手机与大佬是同款，也能复现 BUG，避免了作为社恐的我要去找大佬借手机测试的尴尬。&lt;/p&gt;
&lt;p&gt;先交代一下项目背景，这是一个微信小程序项目，其中生成分享卡片功能用到的是一个叫 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/wg-front/wxml2canvas&quot;&gt;wxml2canvas&lt;/a&gt; 的库，然而该库目前看上去已经「年久失修」，上面所说的 BUG 就是因为这个库，本文主要对其进行「鞭尸」之余，顺便分享一下排查该 BUG 的过程、以及如何从 ECMAScript 规范中找到关于 &lt;code&gt;Object.keys()&lt;/code&gt; 返回顺序的规范定义，最后介绍一下在 V8 引擎中是如何处理对象属性的。&lt;/p&gt;
&lt;p&gt;希望大家在阅读本文后，不会再因为搞不懂  &lt;code&gt;Object.keys()&lt;/code&gt; 输出的顺序而犯错导致产生莫名其妙的 BUG。&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;/&gt;TL;DR&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;浪费读者的时间是可耻的。———— 鲁迅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文很长，如果你不想阅读整篇文章，可以阅读这段摘要；如果你打算阅读整篇文章，那么你完全可以跳过本段。&lt;/p&gt;
&lt;p&gt;如果阅读摘要时未能帮助你理解，可以跳转到对应章节进行详细阅读。&lt;/p&gt;
&lt;p&gt;摘要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个 BUG 是如何产生的？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wxml2canvas&lt;/code&gt; 在绘制的时候，会根据一个叫做 &lt;code&gt;sorted&lt;/code&gt; 的对象对它的 keys 进行遍历，该对象的 key 为节点的 top 值，value 为节点元素；问题就是出在这里，该库作者误以为 &lt;code&gt;Object.keys()&lt;/code&gt; 总是会按照实际创建属性的顺序返回，&lt;strong&gt;然而当 key 为正整数的时候&lt;/strong&gt;，返回顺序就不符合原本的预期了，会出现了绘制顺序错乱，从而导致这个 BUG 的产生。&lt;/li&gt;
&lt;li&gt;源码：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/wg-front/wxml2canvas/blob/master/src/index.js#L1146&quot;&gt;src/index.js#L1146&lt;/a&gt; 和 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/wg-front/wxml2canvas/blob/master/src/index.js#L829&quot;&gt;src/index.js#L829&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;如何解决这个 BUG&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;由于对象的 key 是一个数字，那么 key 有可能会是整数，也有可能是浮点数。但是预期行为是希望  &lt;code&gt;Object.keys()&lt;/code&gt; 按照属性实际创建的顺序返回，那只要将所有 key 都强制转换为浮点数就好了。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code&gt;Object.keys()&lt;/code&gt; 是按照什么顺序返回值的？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.keys()&lt;/code&gt; 返回顺序与遍历对象属性时的顺序一样，调用的 &lt;code&gt;[[OwnPropertyKeys]]()&lt;/code&gt; 内部方法。&lt;/li&gt;
&lt;li&gt;根据 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://262.ecma-international.org/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys&quot;&gt;ECMAScript 规范&lt;/a&gt;，在输出 keys 时会&lt;strong&gt;先将所有 key 为数组索引类型（正整数）从小到大的顺序排序，然后将所有字符串类型（包括负数、浮点数）的 key 按照实际创建的顺序来排序&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;V8 内部是如何处理对象属性的？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;V8 在存储对象属性时，为了提高访问效率，会分为&lt;strong&gt;常规属性(properties)&lt;/strong&gt; 和 &lt;strong&gt;排序属性(elements)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排序属性(elements)&lt;/strong&gt; ，就是数组索引类型的属性（也就是正整数类型）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常规属性(properties)&lt;/strong&gt; ，就是字符串类型的属性（也包括负数、浮点数）。&lt;/li&gt;
&lt;li&gt;以上两种属性都会存放在线性结构中，称为&lt;strong&gt;快属性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;然而这样每次查询都有一个间接层，会影响效率，所以 V8 引入&lt;strong&gt;对象内属性(in-object-properties)&lt;/strong&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;V8 会为每一个对象关联一个隐藏类，用于记录该对象的形状，相同形状的对象会共用同一个隐藏类。&lt;ul&gt;
&lt;li&gt;当对象添加、删除属性的时候，会创建一个新的对应的&lt;strong&gt;隐藏类&lt;/strong&gt;，并重新关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象内属性&lt;/strong&gt;会将部分&lt;strong&gt;常规属性&lt;/strong&gt;直接放在对象第一层，所以它访问效率是最高的。&lt;ul&gt;
&lt;li&gt;当&lt;strong&gt;常规属性&lt;/strong&gt;的数量&lt;strong&gt;少于对象初始化时的属性数量&lt;/strong&gt;时，&lt;strong&gt;常规属性&lt;/strong&gt;会直接作为&lt;strong&gt;对象内属性&lt;/strong&gt;存放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;虽然&lt;strong&gt;快属性&lt;/strong&gt;访问速度快，但是从线性结构中添加或删除时执行效率会非常低，因此如果属性特别多、或出现添加和删除属性时，就会将&lt;strong&gt;常规属性&lt;/strong&gt;从线性存储改为字典存储，这就是&lt;strong&gt;慢属性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看一下这两张图帮助理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/object-keys.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;V8 常规属性和排序属性&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/v8-object-keys.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;V8 对象内属性、快属性和慢属性&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/intro/100048001&quot;&gt;图片出处：《图解 Google V8》 —— 极客时间&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何解决该-BUG&quot;&gt;&lt;a href=&quot;#如何解决该-BUG&quot; class=&quot;headerlink&quot; title=&quot;如何解决该 BUG&quot;/&gt;如何解决该 BUG&lt;/h2&gt;&lt;p&gt;由于是特定的动态 + 特定的设备才能复现问题，可以很轻易地排除掉网络原因，通过在 &lt;code&gt;wxml2canvas&lt;/code&gt; 输出绘制的节点列表，也能看到小程序码相关的节点。&lt;/p&gt;
&lt;p&gt;既然 &lt;code&gt;wxml2canvas&lt;/code&gt; 已经接受到小程序码的节点，却没有绘制出来，那么问题自然就出在 &lt;code&gt;wxml2canvas&lt;/code&gt;  内部，不过已经见怪不怪了，在我加入项目以后就已经多次因为这操蛋的 &lt;code&gt;wxml2canvas&lt;/code&gt; 出现各种问题而搞得头皮发麻，有机会一定要替换掉这个库，但由于已经有很多页面在依赖这个库，现在也只能硬着头皮上。&lt;/p&gt;
&lt;p&gt;首先怀疑是小程序码节点的坐标位置不太对，通过对比，发现位置相差不大，排除该原因。&lt;/p&gt;
&lt;p&gt;然后对比所有节点的绘制顺序，发现了一个不太寻常的点，在复现 BUG 的手机上，绘制小程序码节点的时机是比较靠前的，但由于它在卡片底部，所以在正常情况下，应该是比较靠后才对。&lt;/p&gt;
&lt;p&gt;于是通过查看相关代码，果然发现了其中的玄机：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/WechatIMG100.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在绘制的时候，通过遍历 &lt;code&gt;sorted&lt;/code&gt; 对象，从上往下、从左到右依次绘制，但是通过对比两台手机的 &lt;code&gt;Object.keys()&lt;/code&gt;，发现了它们的输出是不一样的，这时候我就明白怎么回事了。&lt;/p&gt;
&lt;p&gt;先来说说这个 &lt;code&gt;sorted&lt;/code&gt; 对象，它是一个 key 为节点 top 值，value 为所有相同 top 值（同一行）的元素数组。&lt;/p&gt;
&lt;p&gt;下面是生成它的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/Snipaste_2021-12-08_00-07-16.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题就发生在前面所说的 &lt;code&gt;Object.keys()&lt;/code&gt; 这里，我们先来看个 🌰：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sorted = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(sorted)) &lt;span class=&quot;comment&quot;&gt;// 输出什么呢？&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相信大部分同学都知道答案是：[‘100’, ‘200’, ‘300’]。&lt;/p&gt;
&lt;p&gt;如果在有浮点数的情况呢？&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sorted = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;sorted[&lt;span class=&quot;number&quot;&gt;50.5&lt;/span&gt;] = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(sorted)) &lt;span class=&quot;comment&quot;&gt;// 这次又输出什么呢？&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;会不会有同学以为答案是：[‘50.5’, ‘100’, ‘200’, ‘300’] 呢？&lt;/p&gt;
&lt;p&gt;但正确的答案应该是：[‘100’, ‘200’, ‘300’,’50.5’]。&lt;/p&gt;
&lt;p&gt;所以我合理地猜测 &lt;code&gt;wxml2canvas&lt;/code&gt; 的作者就是犯了这样的错误，他可能以为 &lt;code&gt;Object.keys&lt;/code&gt;  会根据 key 从小到大的顺序返回，因此满足从上往下绘制的逻辑。但是他却没有考虑浮点数的情况，所以当某个节点 top 值为整数的时候，会比其他 top 值为浮点数的节点更早地绘制，导致绘制后面的节点时覆盖了前面的节点。&lt;/p&gt;
&lt;p&gt;于是，当我把代码改成这样后，分享卡片的小程序码就正常绘制出来了：&lt;/p&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  Object&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+ .sort((a, b)=&amp;gt; a - b)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  .keys(sorted)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  .forEach((top, topIndex) =&amp;gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    //  do something&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  }&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;OK，搞定收工。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试小姐姐&lt;/strong&gt;：慢着！影响到其它地方了。&lt;/p&gt;
&lt;p&gt;我一看，果然。于是再次经过对比，发现原来大部分情况下，top 值都会是浮点数，而本次出 BUG 的卡片小程序码只是非常凑巧地为整数，导致绘制顺序不对。&lt;/p&gt;
&lt;p&gt;我才发现 &lt;code&gt;wxml2canvas&lt;/code&gt; 原本的逻辑是想根据 &lt;code&gt;sorted&lt;/code&gt; 创建的顺序来绘制，但是没有考虑 key 为整数的情况。&lt;/p&gt;
&lt;p&gt;所以，最后通过这样修改解决问题：&lt;/p&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_sortListByTop (list = []) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    let sorted = {};&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    // 粗略地认为2px相差的元素在同一行&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    list.forEach((item, index) =&amp;gt; {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;deletion&quot;&gt;-       let top = item.top;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+       let top = item.top.toFixed(6); // 强制添加小数点，将整数转为浮点数&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        if (!sorted[top]) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            if (sorted[top - 2]) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                top = top - 2;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }else if (sorted[top - 1]) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                top = top - 1;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } else if (sorted[top + 1]) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                top = top + 1;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } else if (sorted[top + 2]) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                top = top + 2;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            } else {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;                sorted[top] = [];&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        sorted[top].push(item);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    });&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    return sorted;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;很显然，是因为 &lt;code&gt;wxml2canvas&lt;/code&gt; 作者对 &lt;code&gt;Object.keys()&lt;/code&gt; 返回顺序的机制不了解，才导致出现这样的 BUG。&lt;/p&gt;
&lt;p&gt;不知道是否也有同学犯过同样的错误，为避免再次出现这样的情况，非常有必要深入、全面地介绍一下 &lt;code&gt;Object.keys()&lt;/code&gt; 的执行机制。 &lt;/p&gt;
&lt;p&gt;所以接下来就跟随我一探究竟吧。&lt;/p&gt;
&lt;h2 id=&quot;深入理解-Object-keys&quot;&gt;&lt;a href=&quot;#深入理解-Object-keys&quot; class=&quot;headerlink&quot; title=&quot;深入理解 Object.keys()&quot;/&gt;深入理解 Object.keys()&lt;/h2&gt;&lt;p&gt;可能会有同学说： &lt;code&gt;Object.keys()&lt;/code&gt; 又不是什么新出的 API， Google 一下不就行了，何必大费周章写一篇文章来介绍呢？&lt;/p&gt;
&lt;p&gt;的确通过搜索引擎可以很快就能知道 &lt;code&gt;Object.keys()&lt;/code&gt; 的返回顺序是怎样的，但是很多都只流于表面，甚至我还见过这样片面的回答：数字排前面，字符串排后面。&lt;/p&gt;
&lt;p&gt;所以这次我想试着追本溯源，通过第一手资料来获取信息，轻易相信口口相传得来的信息，都极有可能是片面的、甚至是错误的。&lt;/p&gt;
&lt;p&gt;PS：其实不光技术，我们在对待其它不了解的事物都应保持同样的态度。 &lt;/p&gt;
&lt;p&gt;我们先来看看在 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;MDN&lt;/a&gt; 上关于 &lt;code&gt;Object.keys()&lt;/code&gt; 的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Object.keys()&lt;/code&gt; 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;emmm… 并没有直接告诉我们输出顺序是什么，不过我们可以看看上面的 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#polyfill&quot;&gt;Polyfill&lt;/a&gt; 是怎么写的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;/&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasOwnProperty = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        hasDontEnumBug = !({&lt;span class=&quot;attr&quot;&gt;toString&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;}).propertyIsEnumerable(&lt;span class=&quot;string&quot;&gt;&#x27;toString&#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        dontEnums = [&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;toString&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;toLocaleString&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;valueOf&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;hasOwnProperty&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;isPrototypeOf&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;propertyIsEnumerable&#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#x27;constructor&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        ],&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        dontEnumsLength = dontEnums.length;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; obj !== &lt;span class=&quot;string&quot;&gt;&#x27;object&#x27;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; obj !== &lt;span class=&quot;string&quot;&gt;&#x27;function&#x27;&lt;/span&gt; || obj === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#x27;Object.keys called on non-object&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prop &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasOwnProperty.call(obj, prop)) result.push(prop);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasDontEnumBug) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; dontEnumsLength; i++) {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  })()&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;};&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其实就是利用 &lt;code&gt;for...in&lt;/code&gt; 来进行遍历，接下来我们可以再看看关于 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;for…in&lt;/a&gt; 的文档，然而里面也没有告诉我们顺序是怎样的。&lt;/p&gt;
&lt;p&gt;既然 MDN 上没有，那我们可以直接看 ECMAScript 规范，通常 MDN 上都会附上关于这个 API 的规范链接，我们直接点开最新（Living Standard）的那个，下面是关于 Object.keys 的&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-object.keys&quot;&gt;规范定义&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the keys function is called with argument &lt;em&gt;O&lt;/em&gt;, the following steps are taken:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Let &lt;em&gt;obj&lt;/em&gt; be ? &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-toobject&quot;&gt;ToObject&lt;/a&gt;(&lt;em&gt;O&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt; Let &lt;em&gt;nameList&lt;/em&gt; be ? &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-enumerableownpropertynames&quot;&gt;EnumerableOwnPropertyNames&lt;/a&gt;(&lt;em&gt;obj&lt;/em&gt;, key).&lt;/li&gt;
&lt;li&gt; Return &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-createarrayfromlist&quot;&gt;CreateArrayFromList&lt;/a&gt;(&lt;em&gt;nameList&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象属性列表是通过 &lt;code&gt; EnumerableOwnPropertyNames&lt;/code&gt; 获取的，这是它的&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-enumerableownpropertynames&quot;&gt;规范定义&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The abstract operation EnumerableOwnPropertyNames takes arguments O (an Object) and kind (key, value, or key+value). It performs the following steps when called:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Let ownKeys be ? O.&lt;a href=&quot;&quot;&gt;[OwnPropertyKeys]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let properties be a new empty List.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each element key of ownKeys, do&lt;br/&gt; a. If Type(key) is String, then&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let desc be ? O.&lt;a href=&quot;key&quot;&gt;[GetOwnProperty]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If desc is not undefined and desc.[[Enumerable]] is true, then&lt;br/&gt; a. If kind is key, append key to properties.&lt;br/&gt; b. Else,&lt;ol&gt;
&lt;li&gt;Let value be ? Get(O, key).&lt;/li&gt;
&lt;li&gt;If kind is value, append value to properties.&lt;/li&gt;
&lt;li&gt;Else&lt;br/&gt; i. Assert: kind is key+value.&lt;br/&gt; ii. Let entry be ! CreateArrayFromList(« key, value »).&lt;br/&gt; iii. Append entry to properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return properties.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;敲黑板！这里有个细节，请同学们多留意，后面会考。&lt;/p&gt;
&lt;p&gt;我们接着探索，&lt;code&gt;OwnPropertyKeys&lt;/code&gt; 最终返回的 &lt;code&gt;OrdinaryOwnPropertyKeys&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The [[OwnPropertyKeys]] internal method of an ordinary object O takes no arguments. It performs the following steps when called:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Return ! &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-ordinaryownpropertykeys&quot;&gt;OrdinaryOwnPropertyKeys(O)&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;重头戏来了，关于 keys 如何排序就在 &lt;code&gt;OrdinaryOwnPropertyKeys&lt;/code&gt; 的&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://tc39.es/ecma262/#sec-ordinaryownpropertykeys&quot;&gt;定义&lt;/a&gt;中：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The abstract operation OrdinaryOwnPropertyKeys takes argument O (an Object). It performs the following steps when called:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let keys be a new empty List.&lt;/li&gt;
&lt;li&gt;For each own property key P of O such that P is an array index, in ascending numeric index order, do&lt;br/&gt; a. Add P as the last element of keys.&lt;/li&gt;
&lt;li&gt;For each own property key P of O such that Type(P) is String and P is not an array index, in ascending chronological order of property creation, do&lt;br/&gt; a. Add P as the last element of keys.&lt;/li&gt;
&lt;li&gt;For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation, do&lt;br/&gt; a. Add P as the last element of keys.&lt;/li&gt;
&lt;li&gt;Return keys.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;到这里，我们已经知道我们想要的答案，这里总结一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个空的列表用于存放 keys&lt;/li&gt;
&lt;li&gt;将所有&lt;strong&gt;合法的数组索引&lt;/strong&gt;按升序的顺序存入&lt;/li&gt;
&lt;li&gt;将所有&lt;strong&gt;字符串类型索引&lt;/strong&gt;按属性创建时间以升序的顺序存入&lt;/li&gt;
&lt;li&gt;将所有 &lt;strong&gt;&lt;code&gt;Symbol&lt;/code&gt; 类型索引&lt;/strong&gt;按属性创建时间以升序的顺序存入&lt;/li&gt;
&lt;li&gt;返回 keys&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里顺便也纠正一个普遍的误区：有些回答说将所有属性为数字类型的 key 从小到大排序，其实不然，还必须要符合&lt;strong&gt;「合法的数组索引」&lt;/strong&gt;，也即只有&lt;strong&gt;正整数&lt;/strong&gt;才行，负数或者浮点数，一律当做字符串处理。&lt;/p&gt;
&lt;p&gt;PS：严格来说对象属性没有数字类型的，无论是数字还是字符串，都会被当做字符串来处理。&lt;/p&gt;
&lt;p&gt;我们结合上面的规范，来思考一下下面这段代码会输出什么：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; testObj = {}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;string&quot;&gt;&#x27;2&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;string&quot;&gt;&#x27;c&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;string&quot;&gt;&#x27;b&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;string&quot;&gt;&#x27;a&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#x27;a&#x27;&lt;/span&gt;)] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#x27;b&#x27;&lt;/span&gt;)] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;testObj[&lt;span class=&quot;string&quot;&gt;&#x27;d&#x27;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(testObj))&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;请认真思考后，在这里核对你的答案是否正确：&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;查看结果&lt;/summary&gt;
  
  &lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&#x27;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&#x27;, &#x27;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&#x27;, &#x27;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&#x27;, &#x27;&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;d&#x27;]&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  是否与你想象的一致？你可能会奇怪为什么没有 &lt;code&gt;Symbol&lt;/code&gt; 类型。&lt;/p&gt;
&lt;p&gt;  还记得前面敲黑板让同学们留意的地方吗，因为在 &lt;code&gt;EnumerableOwnPropertyNames&lt;/code&gt; 的规范中规定了返回值只应包含字符串属性（上面说了数字其实也是字符串）。&lt;/p&gt;
&lt;p&gt;  所以 Symbol 属性是不会被返回的，可以看 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames&quot;&gt;MDN&lt;/a&gt; 上关于 &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 的描述。&lt;/p&gt;
&lt;p&gt;  如果要返回 Symbol 属性可以用 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols&quot;&gt;Object.getOwnPropertySymbols()&lt;/a&gt;。&lt;/p&gt;
&lt;/details&gt;



&lt;p&gt;看完 ECMAScript 的规范定义，相信你不会再搞错 &lt;code&gt;Object.keys()&lt;/code&gt; 的输出顺序了。但是你好奇 V8 是如何处理对象属性的吗，下一节我们就来讲讲。&lt;/p&gt;
&lt;h2 id=&quot;V8-是如何处理对象属性的&quot;&gt;&lt;a href=&quot;#V8-是如何处理对象属性的&quot; class=&quot;headerlink&quot; title=&quot;V8 是如何处理对象属性的&quot;/&gt;V8 是如何处理对象属性的&lt;/h2&gt;&lt;p&gt;在 V8 的官方博客上有一篇文章&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://v8.dev/blog/fast-properties&quot;&gt;《Fast properties in V8》&lt;/a&gt;（&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://blog.crimx.com/2018/11/25/v8-fast-properties/&quot;&gt;中译版&lt;/a&gt;），非常详细地向我们解释了 V8 内部如何处理 JavaScript 的对象属性，强烈推荐阅读。&lt;/p&gt;
&lt;p&gt;另外再推荐一下极客时间上的课程《&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://time.geekbang.org/column/intro/100048001&quot;&gt;图解 Google V8&lt;/a&gt;》（毕竟本文借用了里面的图片，怎么好意思不推荐）。&lt;/p&gt;
&lt;p&gt;本节内容主要参考这两个地方，下面我们来总结一下。&lt;/p&gt;
&lt;p&gt;首先，V8 为了提高对象属性的访问效率，将属性分为两种类型：&lt;/p&gt;

&lt;p&gt;所有的&lt;strong&gt;排序属性&lt;/strong&gt;都会存放在一个线性结构中，线性结构的特点就是支持通过索引随机访问，所以能加快访问速度，对于存放在线性结构的属性都称为&lt;strong&gt;快属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规属性&lt;/strong&gt;也会存放在另一个线性结构中，可以看下面这张图帮助理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/object-keys.jpeg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;V8 排序属性和常规属性&lt;/p&gt;

&lt;p&gt;但是&lt;strong&gt;常规属性&lt;/strong&gt;还需要做一些额外的处理，这里我们要先介绍一下什么是&lt;strong&gt;隐藏类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于 JavaScript 在运行时是可以修改对象属性的，所以在查询的时候会比较慢，可以看回上面那张图，每次访问一个属性的时候都需要经过多一层的访问，而像 C++ 这类静态语言在声明对象之前需要定义这个对象的结构（形状），经过编译后每个对象的形状都是固定的，所以在访问的时候由于知道了属性的偏移量，自然就会比较快。&lt;/p&gt;
&lt;p&gt;V8 采用的思路就是将这种机制应用在 JavaScript 对象中，所以引入了&lt;strong&gt;隐藏类&lt;/strong&gt;的机制，你可以简单的理解&lt;strong&gt;隐藏类&lt;/strong&gt;就是描述这个对象的形状、包括每个属性对应的位置，这样查询的时候就会快很多。&lt;/p&gt;
&lt;p&gt;关于&lt;strong&gt;隐藏类&lt;/strong&gt;还有几点要补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的第一个字段指向它的&lt;strong&gt;隐藏类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果两个对象的形状是完全相同的，会共用同一个&lt;strong&gt;隐藏类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当对象添加、删除属性的时候，会创建一个新的对应的&lt;strong&gt;隐藏类&lt;/strong&gt;，并重新指向它。&lt;/li&gt;
&lt;li&gt;V8 有一个转换树的机制来创建隐藏类，不过本文不赘述，有兴趣可以看&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://v8.dev/blog/fast-properties#hiddenclasses-and-descriptorarrays&quot;&gt;这里&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解释完隐藏类，我们再回头来讲讲&lt;strong&gt;常规属性&lt;/strong&gt;，通过上面那张图我们很容易发现一个问题，那就是每次访问一个属性的时候，都需要经过一个间接层才能访问，这无疑降低了访问效率，为了解决这个问题，V8 又引入了一个叫做&lt;strong&gt;对象内属性&lt;/strong&gt;，顾名思义，它会将某些属性直接存放在对象的第一层里，它的访问是最快的，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/%E4%B8%8B%E8%BD%BD.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;V8 对象内属性&lt;/p&gt;

&lt;p&gt;但要注意，&lt;strong&gt;对象内属性&lt;/strong&gt;只存放&lt;strong&gt;常规属性&lt;/strong&gt;，排序属性依旧不变。而且需要常规属性的数量&lt;strong&gt;小于&lt;/strong&gt;某个数量的时候才会直接存放&lt;strong&gt;对象内属性&lt;/strong&gt;，那这个数量是多少呢？&lt;/p&gt;
&lt;p&gt;答案是取决于&lt;strong&gt;对象初始化时的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;PS：有些文章说是少于 10 个属性时才会存放对象内属性，&lt;strong&gt;别被误导了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;除了&lt;strong&gt;对象内属性&lt;/strong&gt;、&lt;strong&gt;快属性&lt;/strong&gt;以外，还有一个&lt;strong&gt;慢属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么会有&lt;strong&gt;慢属性&lt;/strong&gt;呢？&lt;strong&gt;快属性&lt;/strong&gt;虽然访问很快，但是如果要从对象中添加或删除大量属性，则可能会产生大量时间和内存开销来维护&lt;strong&gt;隐藏类&lt;/strong&gt;，所以在&lt;strong&gt;属性过多或者反复添加、删除属性时&lt;/strong&gt;会将&lt;strong&gt;常规属性&lt;/strong&gt;的存储方式从线性结构变成字典，也就是降低到&lt;strong&gt;慢属性&lt;/strong&gt;，而由于&lt;strong&gt;慢属性&lt;/strong&gt;的信息不会再存放在&lt;strong&gt;隐藏类&lt;/strong&gt;中，所以它的访问会比&lt;strong&gt;快属性&lt;/strong&gt;要慢，但是可以高效地添加和删除属性。可以通过下图帮助理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/v8-object-keys.jpeg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;V8 慢属性&lt;/p&gt;

&lt;p&gt;写到这里，我觉得自己对 V8 的快属性、慢属性这些知识已经非常了解，简直要牛逼到上天了。&lt;/p&gt;
&lt;p&gt;但当我看到这段代码的时候：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toFastProperties&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*jshint -W027*/&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;/&gt;) &lt;/span&gt;{}&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    f.prototype = obj;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    ASSERT(&lt;span class=&quot;string&quot;&gt;&quot;%HasFastProperties&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, obj);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(obj);&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我的心情是这样的：&lt;/p&gt;
&lt;img src=&quot;https://ozinparis.com/wp-content/uploads/2016/04/jon-snow-know-nothing-e1461048094110-1.jpg&quot;/&gt;

&lt;p&gt;关于这段代码是如何能让 V8 使用对象&lt;strong&gt;快属性&lt;/strong&gt;的可以看这篇文章：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://zhuanlan.zhihu.com/p/25069272&quot;&gt;开启 V8 对象属性的“fast”模式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外也可以看一下这段代码：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/sindresorhus/to-fast-properties/blob/main/index.js&quot;&gt;to-fast-properties/index.js&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;/&gt;写在最后&lt;/h2&gt;&lt;p&gt;当在开发时遇到一个简单的错误，通常可以很快地利用搜索引擎解决问题，但如果只是面向 Google 编程，可能在技术上很难会有进步，所以我们不光要能解决问题，还要理解这个产生问题的背后的原因到底是什么，也就是知其然更知其所以然。&lt;/p&gt;
&lt;p&gt;真的非常建议每个 JavaScript 开发者都应该去了解一些关于 V8 或其它 JavaScript 引擎的知识，无论你是通过什么途径（真的没有打广告），这样能保证我们在编写 JavaScript 代码时出现问题可以更加地得心应手。&lt;/p&gt;
&lt;p&gt;最后，本文篇幅有限，部分细节难免会有遗漏，非常建议有兴趣深入了解的同学可以延伸阅读下面的列表。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;
&lt;h2 id=&quot;延伸阅读&quot;&gt;&lt;a href=&quot;#延伸阅读&quot; class=&quot;headerlink&quot; title=&quot;延伸阅读&quot;/&gt;延伸阅读&lt;/h2&gt;
&lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>