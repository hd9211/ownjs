<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>ba8b7e0c57d413c588650b0fbddf93ba</guid>
<title>快速了解云原生架构</title>
<link>https://toutiao.io/k/zz0ckz0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrTqHIqOlDKibicA2Bv16xIRInVv8PLhMlXahuLickwL8JrduCXTsRf64Hw/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;64.22145328719724&quot; data-cropy2=&quot;752.9411764705883&quot; data-ratio=&quot;0.53828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr96ZhP9W3udxwicdmic4tR7ciaK0Xf0pJicpt6mUBBCoN3f4wBzLHUpRia4Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;9a9bd2db5cdbf17c5037d8201ec1f4e1&quot;&gt;&lt;span&gt;作者 | 潘义文（空易）&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;起源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;/&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 云原生（Cloud Native）的由来&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云原生的概念最早开始于 2010 年&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=http%3A%2F%2Fpzf.fremantle.org%2F2010%2F05%2Fcloud-native.html&amp;amp;title=%E5%9C%A8%E5%BD%93%E6%97%B6%20Paul%20Fremantle%20%E7%9A%84%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E4%B8%AD%E8%A2%AB%E6%8F%90%E5%8F%8A&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;在当时 Paul Fremantle 的一篇博客中被提及&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，他一直想用一个词表达一种架构，这种架构能描述应用程序和中间件在云环境中的良好运行状态。因此他抽象出了 Cloud Native 必须包含的属性，只有满足了这些属性才能保证良好的运行状态。当时提出云原生是为了能构建一种符合云计算特性的标准来指导云计算应用的编写。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后来到&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fdzone.com%2Farticles%2Fcloud-native-devops-your-world-to-new-possibilitie&amp;amp;title=2013%20%E5%B9%B4%20Matt%20Stine%20%E5%9C%A8%E6%8E%A8%E7%89%B9%E4%B8%8A%E8%BF%85%E9%80%9F%E6%8E%A8%E5%B9%BF%E4%BA%91%E5%8E%9F%E7%94%9F%E6%A6%82%E5%BF%B5&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;2013 年 Matt Stine 在推特上迅速推广云原生概念&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，并&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.oreilly.com%2Flibrary%2Fview%2Fmigrating-to-cloud-native%2F9781492047605%2F&amp;amp;title=%E5%9C%A8%202015%20%E5%B9%B4%E3%80%8A%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E3%80%8B&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;在 2015 年《迁移到云原生架构》&lt;/span&gt;&lt;/a&gt;&lt;span&gt;一书中定义了符合云原生架构的特征：&lt;strong&gt;12 因素、微服务、自服务、基于 API 协作、扛脆弱性&lt;/strong&gt;。而由于这本书的推广畅销，这也成了很多人对云原生的早期印象，同时云原生也被 12 要素变成了一个抽象的概念。Matt Stine 认为在单体架构向 Cloud Native 迁移的过程中，需要文化、组织、技术共同变革。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;云原生架构本质上也是一种软件架构，最大的特点是在云环境下运行，也算是微服务的一种延伸&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;/&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. CNCF 基金会成立及云原生概念的演化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2015 年由 Linux 基金会发起了一个&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.cncf.io%2F&amp;amp;title=The%20Cloud%20Native%20Computing%20Foundation%EF%BC%88CNCF%EF%BC%89%20%E5%9F%BA%E9%87%91%E7%BB%84%E7%BB%87&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;The Cloud Native Computing Foundation（CNCF） 基金组织&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，CNCF基金会的成立标志着云原生正式进入高速发展轨道，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.cncf.io%2Fannouncement%2F2015%2F12%2F17%2Fcloud-native-computing-foundation-announces-new-members-begins-accepting-technical-contributions%2F&amp;amp;title=google%E3%80%81Cisco%E3%80%81Docker%20%E5%90%84%E5%A4%A7%E5%8E%82%E7%BA%B7%E7%BA%B7%E5%8A%A0%E5%85%A5&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;Google、Cisco、Docker 各大厂纷纷加入&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，并逐步构建出围绕 Cloud Native 的具体工具，而云原生这个的概念也逐渐变得更具体化。因此，CNCF 基金最初对云原生定义是也是深窄的，当时把云原生定位为容器化封装+自动化管理+面向微服务：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;The CNCF defines “cloud-native” a little more narrowly, to mean using open source software stack to be containerized, where each part of the app is packaged in its own container, dynamically orchestrated so each part is actively scheduled and managed to optimize resource utilization, and microservices-oriented to increase the overall agility and maintainability of applications.&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这主要因为 CNCF 基金会在当时的核心拳头软件就是 K8s，因此在概念定义上主要是围绕着容器编排建立起来的生态。其实这也是为什么我们可以看到 CNCF 定义云原生的时候有时感觉就是再说容器生态。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;到了 2017 年, 云原生应用提出者之一的&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fpivotal.io%2Fcloud-native&amp;amp;title=Pivotal%20%E5%9C%A8%E5%85%B6%E5%AE%98%E7%BD%91&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;Pivotal 在其官网&lt;/span&gt;&lt;/a&gt;&lt;span&gt;上将云原生的定义概括为 DevOps、持续交付、微服务、容器四大特征，这也成了很多人对 Cloud Native 的基础印象。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.35202492211838005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHreaXcAVicnVfn38TSu7IulAUjiax2ib9hhnc9plZq42kibca4xhbBF3f5ibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;而到 2018 年，随着 Service Mesh 的加入，&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Fcncf%2Ftoc%2Fblob%2Fmaster%2FDEFINITION.md&amp;amp;title=CNCF%20%E5%AF%B9%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%91%E7%94%9F%E4%BA%86%E6%94%B9%E5%8F%98&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;span&gt;CNCF 对云原生的定义发生了改变&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，而这也逐渐成为被大家认可的官方定义：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined with robust automation, they allow engineers to make high-impact changes frequently and predictably with minimal toil.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;The Cloud Native Computing Foundation seeks to drive adoption of this paradigm by fostering and sustaining an ecosystem of open source, vendor-neutral projects. We democratize state-of-the-art patterns to make these innovations accessible for everyone.&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总结一下就是：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于容器、服务网格、微服务、不可变基础设施和声明式 API 构建的可弹性扩展的应用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于自动化技术构建具备高容错性、易管理和便于观察的松耦合系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;构建一个统一的开源云技术生态，能和云厂商提供的服务解耦。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可以看出，CNCF 在当前定义基础上加上了&lt;strong&gt;服务网格 (service mesh) &lt;/strong&gt;和&lt;strong&gt;声明式 API&lt;/strong&gt;，这为云原生的概念阐述增加了更深一层的意义，也就是建立一个&lt;strong&gt;相对&lt;/strong&gt;&lt;strong&gt;中立的开源云生态&lt;/strong&gt;。这对云原生的生态定位是很重要的，也算 CNCF 最初成立的宗旨之一，打破云巨头的垄断。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5624249699879952&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr2yk1c2T8iavABjUpQhDlMmmjCmabjssIic5Ev4G8Xp384URfjlM151Zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;：概念随着新的技术发展而演化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;77ac8027e509f1d5c1e3c84284749874&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第一阶段：容器化封装+自动化管理+面向微服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第二阶段：DevOps、持续交付、微服务、容器&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;第三阶段：DevOps、持续交付、容器、服务网格、微服务、声明式API&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 对云原生的解构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对一个词的解读，除了看其历史发展背景，还有一种偏向于语言学的方法解读，也就是我们常说的从“字面意思”来理解。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Cloud Native，从词面上拆解其实就是 Cloud 和 Native，也就是云计算和土著的意思——云计算上的原生居民，即天生具备云计算的亲和力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先从 Cloud 来理解，云可以看作是一种提供稳定计算存储资源的对象。为了实现这一点，云提供了像&lt;strong&gt;虚拟化、弹性扩展、高可用、高容错性、自恢复&lt;/strong&gt;等基本属性，这是云原生作为一种云计算所具备的第一层含义。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第二层要从 Native 来看，云原生和在云上跑的&lt;span&gt;传统&lt;/span&gt;应用不同。一些基于公有云搭建的应用是基于传统的 SOA 架构来搭建的，然后再移植到云上去运行，那么这些应用和云的整合非常低。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么低呢？云作为一种&lt;strong&gt;分布式架构&lt;/strong&gt;，其“土著居民”也应该是基于分布式架构设计出来的，而微服务或 Serverless 这种将服务或函数拆分成一个个模块的松耦合系统，天然具备分布式设计的属性。这是 Native 的第一种表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其次云作为一种 PaaS 服务，这位“土著居民”从出生(设计)到成长(开发)，再到生活(部署)都应该是基于云的理念来实现的，那么就需要一套自动化的开发流程 CI/CD 来实现。这是 Native 的第二种表现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而最后“土著居民”的特点希望做到能够适应所有云端，都能做到无缝的运行和连接。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;解读&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;strong&gt;前面三节都是来自《&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fblog.csdn.net%2Falitech2017%2Farticle%2Fdetails%2F104606956&amp;amp;title=%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F%EF%BC%9F%E8%81%8A%E8%81%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BB%8A%E7%94%9F&quot; data-miniprogram-type=&quot;text&quot; href=&quot;&quot;&gt;&lt;strong&gt;&lt;span&gt;什么是云原生？聊聊云原生的今生&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;span&gt;》这篇文章中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;关键点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下面介绍云原生架构的一些关键技术点。涉及内容由微服务、分布式常见架构设计(性能、数据一致性、可扩展性、高可用)、研发流程、DevOps、组织文化等，可以根据目录选择性的看看，基本上都是一些介绍，详细的设计可以查看相关文档进一步了解。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 微服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Martin Fowler 与 James Lewis 共同提出了微服务的概念，定义了微服务架构是以开发一组小型服务的方式来开发一个独立的应用系统，每个服务都以一个独立进程的方式运行，每个服务与其他服务使用轻量级（通常是 HTTP API）通信机制。这些服务是围绕业务功能构建的，可以通过全自动部署机制独立部署，同时服务会使用最小规模的集中管理（例如 Docker）能力，也可以采用不同的编程语言和数据库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）优势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）什么时候开始微服务架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）如何决定微服务架构的拆分粒度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;微服务架构中的“微”字，并不代表足够小，应该解释为合适。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）单体架构 VS 微服务架构对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3979974968710889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrGlfwAlqd83eMwFKjoFfEjFbvGYG9upIB2YcTPljQnHQrWZNIuoNIibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流行的微服务框架：spring-cloud/dubbo。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 敏捷基础设施及公共基础服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;敏捷基础设施及公共基础服务是微服务架构成败的关键因素之一，能够简化业务开发。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）敏捷基础设施的目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;cb26dabfc8ecd717f52290758b62cf51&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;标准化：所有的基础设施最好都是标准的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可替换：任意节点都能够被轻易地创建、销毁、替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化：所有的操作都通过工具自动化完成，无须人工干预。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可视化：当前环境要做到可控，就需要对当前的环境状况可视。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可追溯：所有的配置统一作为代码进行版本化管理，所有的操作都可以追溯。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;快速：资源申请及释放要求秒级完成，以适应弹性伸缩和故障切换的要求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）基于公共基础服务的平台化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）常见的平台服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;6be6f23ec3a54ea7d27ef4256498a8fc&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;监控告警服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式消息中间件服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式缓存服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分布式任务调度服务&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 分布式架构 - 可用性设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;可用性（Availability）是关于系统可以被使用的时间的描述，以丢失的时间为驱动（Be Driven by Lost Time）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;可用性公式：A=Uptime /（Uptime+Downtime）。其中，Uptime 是可用时间，Downtime 是不可用时间。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）什么降低了可用性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）设计阶段考虑如下几个比较重要的方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;59aaf0d321d9d07f239d76133fadb010&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;20/10/5，设计系统的时候，以实际流量的 20 倍来设计；开发系统的时候，以实际流量的 10 倍来开发系统；发布系统的时候，以实际流量的 5 倍来部署。这只是一个通用的原则，可以根据实际情况来确定，不需要严格按照倍数来执行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Design for failure，预测可能发生的问题，做好预案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）容错设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果说错误是不可避免或者难以避免的，那么我们应该换一个思路，保证错误发生时，我们可以从容应对。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）隔离策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;隔离是为了在系统发生故障时，限制传播范围和影响范围，特别要注意非核心系统的故障对核心系统的影响。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;9fffe5a38295dec2fdb0ba2f2247624a&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线程池隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;进程隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;集群隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;用户隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;租户隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;逻辑隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;物理隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;混合隔离&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）熔断器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;熔断器模式（Circuit Breaker Patten）的原理类似于家里的电路熔断器的原理。当发生短路或者超负荷时，熔断器能够主动熔断电路，以避免灾难发生。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Spring Cloud Hystrix 提供了熔断器、线程隔离等一系列服务保护的能力，使用起来非常简单，引入依赖的 JAR 包，通过简单的注解即可实现。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）流控设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;ba88670b855919ad11af3d64b42a2932&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;限流算法。&lt;/span&gt;限流也就是调节数据流的平均速率，通过限制速率保护自己，常见的算法有：&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 固定窗口算法（fixed window）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt; 漏桶算法（Leaky Bucket）：漏桶算法主要目的是控制数据注入网络的速率，平滑网络上的突发流量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;令牌桶算法（token bucket）：令牌桶控制的是一个时间窗口内通过的数据量，通常我们会以 QPS、TPS 来衡量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;   &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）容量预估&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;互联网公司普遍采用全链路压测的方式，来进一步预估容量。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8）故障演练&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;5ce4e5ae07e08142caac9d0eda367eb0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;随机关闭生产环境中的实例。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;让某台机器的请求或返回变慢，观察系统的表现，可以用来测试上游服务是否有服务降级能力，当然如果响应时间特别长，也就相当于服务不可用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;模拟 AZ 故障，中断一个机房，验证是否跨可用区部署，业务容灾和恢复的能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;查找不符合最佳实践的实例，并将其关闭。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9）数据迁移&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 分布式架构 - 可扩展设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f293a8c13a5c02ceef465a50c254c144&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;水平扩展，指用更多的节点支撑更大量的请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;横向扩展通常是为了提升吞吐量，响应时间一般要求不受吞吐量影响即可。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-lake-id=&quot;94dbb33d171e9ba294d75df3fc266dbe&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）AKF 扩展立方体&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7142857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrwibnPUAjGb9fHOemGibG0G8krmoPCxiaibQ1etaUBqd7klQ1HF2Ehlmxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;665&quot; title=&quot;akf.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5418552036199095&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrgGYnlpB69qFEVXOicfKLuF3Klzjg2lgJMSLmN4ydEFWx8MzR6ef5TKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;884&quot; title=&quot;akf22.png&quot;/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;28612bfa072b3f0e736f0dfba8b6266a&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）如何扩展数据库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;95c5ee49fcd11d567408bd67e6741679&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;X 轴扩展——主从复制集群&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Y 轴扩展——分库、垂直分表&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Z 轴扩展——分片（sharding）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-lake-id=&quot;455f113d7a11ff9dc217bf37fb515307&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 分布式架构 - 性能设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;0c822591e9fec1a32587bd1b593c7e13&quot;&gt;&lt;span&gt;性能指标&lt;/span&gt;&lt;/h4&gt;&lt;ul data-lake-id=&quot;f3b294c889e0765647913f63a9df0af4&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;响应时间（Latency），就是发送请求和返回结果的耗时。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;吞吐量（Throughput），就是单位时间内的响应次数。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;负载敏感度，是指响应时间随时间变化的程度。例如，当用户增加时，系统响应时间的衰减速度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可伸缩性，是指向系统增加资源对性能的影响。例如，要使吞吐量增加一倍，需要增加多少服务器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）如何树立目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4046997389033943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrGBFp3mXVcuURFDlt9DiaVgOqaqvlY6hic8JMwcFmmFH32dkXXLXHGmNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1532&quot; title=&quot;image.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6. 分布式架构 - 一致性设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）事务的四大特征&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;36b035885fecdba8c20cfb621c86f4bf&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;原子性（Atomicity）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一致性（Consistency）是指通过事务保证数据从一种状态变化到另一种状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;隔离性（Isolation）是指事务内的操作不受其他操作影响，当多个事务同时处理同一个数据的时候，多个事务之间是互不影响的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;持久性（Durability）是指事务被提交后，应该持久化，永久保存下来。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）CPA 定理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;该定理认为对于一个分布式计算系统来说，不可能同时满足以下三点：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;c988abce13a328b653862a08064787a5&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一致性（Consistence）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可用性（Availability）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分区容错性（Partition tolerance）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分布式意味着必须满足分区容错性，也就是 P，因此一般只能是 AP 或 CP。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）BASE 理论&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;BASE 理论的核心思想是：如果无法做到强一致性，或者做到强一致性要付出很大的代价，那么应用可以根据自身业务特点，采用适当方式来使系统达到最终一致性，&lt;/span&gt;&lt;span&gt;只要对最终用户没有影响，或者影响是可接受的即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;74c7739a1267dbd82eb0b9c6e47ce307&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;BA:Basically Available，基本可用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;S:Soft state，软状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;E:Eventually consistent，最终一致。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）Quorum 机制（NWR 模型）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果多个服务分别向三个节点写数据，为了保证强一致，就必须要求三个节点全部写成功才返回；同步写三个节点的性能较低，如果换一个思路，一致性并不一定要在写数据的时候完成，可以在读的阶段再决策，只要每次能读到最新版本即可。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Quorum 机制就是要满足公式 W+R&amp;gt;N，式中 N 代表备份个数，W 代表要写入至少 W 份才认为成功，R 表示至少读取 R 个备份。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）租约机制（Lease）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果现在我们有三个节点，为了实现一致性，要确保有且只有一个是 Leader，另外两个为 Follower，只有 Leader 是可写的，Follower 只能读。管理节点 M 通过心跳判断各个节点的状态，用 M 去指定 Leader，一旦 Leader 死掉，就可以重新指定一个 Leader。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）脑裂问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;cb8dfb038f41c69891a9adaec6bebe16&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一种是采用投票机制（Paxos 算法）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一种是采用租约机制——Lease，租约机制的核心就是在一定时间内将权力下放。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）分布式系统的一致性分类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;903ec50e6e760cf0928833b3f1659f85&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;建立多个副本。可以把副本放到不同的物理机、机架、机房、地域，当一个副本失效时，可以让请求转到其他副本。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对数据进行分区。复制多个副本解决了读的性能问题，但是无法解决写的性能问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8）以数据为中心的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从数据存储的角度出发的，包括数据库、文件等。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;f6c0fa8da2fb625fd4f7af4932335577&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;严格一致性（Strict Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;顺序一致性（Sequential Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;因果一致性（Causal Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9）以用户为中心的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;以下一致性模型适应的场景为不会同时发生更新操作，或者同时发生更新操作时能够比较容易地化解。因为这里的数据更新默认有一个与之关联的所有者，此所有者拥有唯一被允许修改数据的权限，可以按照用户 ID 进行路由。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;76b352997219e3bd29433f3a3460d5f0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单调读一致性（Monotonic-read Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单调写一致性（Monotonic-write Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;写后读一致性（Read-your-writes Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;读后写一致性（Writes-follow-reads Consistency）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;10）业界常用的一致性模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;d6efaa1467083f63cf45f1ff611c85e9&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;弱一致性：写入一个数据 a 成功后，在数据副本上可能读出来，也可能读不出来。不能保证每个副本的数据一定是一致的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最终一致性（Eventual Consistency）：写入一个数据 a 成功后，在其他副本有可能读不到 a 的最新值，但在某个时间窗口之后保证最终能读到。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;强一致性（Strong Consistency）：数据 a 一旦写入成功，在任意副本任意时刻都能读到 a 的最新值。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;11）如何实现强一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;e162c95c2e3b92323df5a1d7bb72656f&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;12）如何实现最终一致性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f118fb80a546d767728a8bd6e4f43ac6&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;重试机制：超时时间，重试的次数，重试的间隔时间，重试间隔时间的衰减度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;本地记录日志。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;可靠事件模式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Saga 事务模型：又叫 Long-running-transaction，核心思想是把一个长事务拆分为多个本地事务来实现，由一个 Process manager 统一协调。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;TCC 事务模型：两阶段提交是依赖于数据库提供的事务机制，再配合外部的资源协调器来实现分布式事务。TCC（Try Confirm Cancel）事务模型的思想和两阶段提交虽然类似，但是却把相关的操作从数据库提到业务中，以此降低数据库的压力，并且不需要加锁，性能也得到了提升。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7. 十二因素&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;12 因素应用是一系列云原生应用架构的模式集合。这些模式可以用来说明什么样的应用才是云原生应用，关注速度、安全、通过声明式配置扩展、可横向扩展的无状态/无共享进程以及部署环境的整体松耦合。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 12 因素的背景下，应用指的是独立可部署单元。组织中经常把一些互相协作的可部署单元称作一个应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;42143ee4d9321bc3d182a067a9c468d7&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基准代码，一份基准代码，多份部署，使用 GIT 或者 SVN 管理代码，并且有明确的版本信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;依赖，显示声明依赖。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;配置：环境中存储配置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;后端服务：把后端服务当作附加资源。后端服务是指程序运行所需要的通过网络调用的各种服务，如数据库（MySQL、CouchDB）、消息/队列系统（RabbitMQ、Beanstalkd）、SMTP 邮件发送服务（Postfix），以及缓存系统（Memcached）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;构建、发布、运行：严格分离构建和运行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;进程，以一个或多个无状态进程运行应用，如果存在状态，应该将状态外置到后端服务中，例如数据库、缓存等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;端口绑定，通过端口绑定提供服务，应用通过端口绑定来提供服务，并监听发送至该端口的请求。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;并发，通过进程模型进行扩展，扩展方式有进程和线程两种。进程的方式使扩展性更好，架构更简单，隔离性更好。线程扩展使编程更复杂，但是更节省资源。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;易处理，快速启动和优雅终止可最大化健壮性，只有满足快速启动和优雅终止，才能使服务更健壮。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;开发环境与线上环境等价，尽可能保持开发、预发布、线上环境相同。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;日志，把日志当作事件流，微服务架构中服务数量的爆发需要具备调用链分析能力，快速定位故障。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;管理进程，把后台管理任务当作一次性进程运行，一些工具类在生产环境上的操作可能是一次性的，因此最好把它们放在生产环境中执行，而不是本地。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;8. 研发流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）为什么选择 DevOps&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;能提高交付速度、更新频率，这两点是衡量一个公司能力的重要指标。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5567129629629629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr3IOY2yejM8GROukTM8pMthicQlmYRKSJUVvuM7lWEyRqrx7WX59H9Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）Gartner 提出的 DevOps 模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;文化、技术、过程和人，其中团队文化才是最难改变的，技术方面包括基础设施即代码、全局监控、持续监控。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）自动化测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;b51f667fd14b5cee3d0ce6a8d59770dd&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化测试可以代替人工测试。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;测试成了全栈工程师的工作，因为不沟通才是最有效率的沟通。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）Code Review&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;51b08eb48f26e0dfedd3dce0aa1c51bb&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;提升代码易读性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;统一规范、标准。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术交流，提升能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Code Review 原则：以发现问题为目标，团队开放、透明，整个 Code Review 的过程对事不对人，不设置惩罚。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;线上线下接合的方式，长期线上，定期线下。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）流水线&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;持续交付：降低交付周期，通过自动化工具实现设计、开发、测试、发布、运维各个阶段的重复性工作，通过工具实现标准化、规范化，降低出错概率。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;53bdb22945cc08b1834eb4978b03b801&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）开发人员自服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于开发过程来说，少交流、少沟通、少开会就是最高效的。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;045835e6f3bb29994548f7adac97d62e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高覆盖率的自动化测试&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全面的监控&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;持续交付流水线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;敏捷基础设施&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动化/智能化运维&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;好的架构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全栈工程师&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务型管理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;工程师文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;信任文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分享文化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;7）代码即设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;9. 团队文化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;团队文化就好比土壤，要培养什么样的员工，就要有适合他的土壤。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）团队规模导致的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;208485f2f8caba34193343522cacfdf6&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏信任。由于人数众多，难于管理，只能通过制度、流程、规范、绩效约束。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;没有责任感。高层管理者忙着开各种决策会议。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;部门墙。跨部门协调还不如与第三方合作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不尊重专业人士。当所有的生杀大权都掌握在少数人手中的时候。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;管理层级太深。管理层级太深导致的问题很多。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）组织结构 - 康威定律&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;设计系统的组织，其产生的设计和架构等价于组织间的沟通结构。通俗来讲，就是什么样的团队结构，就会设计出什么样的系统架构。如果将团队拆分为前端、后端、平台、数据库，那么系统也会按照前端、后端、平台、数据库结构隔离。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;4c2c2a3f5df182f10dd1388db78b52c2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第一定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Communication dictates design，即组织沟通方式会通过系统设计呈现。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第二定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：There is never enough time to do something right,but there is always enough time to do it over，即时间再多，一件事情也不可能做得完美，但总有时间做完一件事情。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第三定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：There is a homomorphism from the linear graph of a system to the linear graph of its design organization，即线型系统和线型组织架构间有潜在的异质同态特性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;第四定律&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：The structures of large systems tend to disintegrate during development,qualitatively more so than with small systems，即大的系统组织总是比小系统更倾向于分解。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）“沟通漏斗”是指工作中团队沟通效率下降的一种现象&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果一个人心里想表述事项目标的 100%，当你在众人面前、在开会的场合用语言表达时，你说出来的只剩下 80%。而进入别人的耳朵时，由于文化水平、知识背景等关系，只留存了 60%。实际上，真正被别人理解了大概只有 40%。等到这些人遵照领悟的 40% 具体行动时，只具备了当初事项目标的 20% 了。三个月后信息只剩下 5% 了。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6178107606679035&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrzL7j8mbPzn1BgicoCibDpiansnJ8nicjE6USD7XIdtQ4zII3SF1EOrt0iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot; title=&quot;沟通漏洞模型.png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）环境氛围&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;ccba9527e86b595a78b5c33f5d5634e0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;公开透明的工作环境.&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;学习型组织：让团队拥有共同愿景、目标，并持续学习。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;减少无效的正式汇报。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高效的会议：缩小会议范围，常规会议不应该超过 45 分钟；限制“意见领袖”的发言时长；会议中不允许开小差；会议中的分歧不应该延伸到会议之外。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;10. Serverless&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着以 Kubernetes 为代表的云原生技术成为云计算的容器界面，Kubernetes 成为云计算的新一代操作系统。面向特定领域的后端云服务 (BaaS) 则是这个操作系统上的服务 API，存储、数据库、中间件、大数据、 AI 等领域的大量产品与技术都开始提供全托管的云形态服务，如今越来越多用户已习惯使用云服务，而不是自己搭建存储系统、部署数据库软件。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当这些 BaaS 云服务日趋完善时，Serverless 因为屏蔽了底层设施的运维复杂度，让开发人员可以将更多精力用于业务逻辑设计与实现，而逐渐成为云原生主流技术之一。Serverless 计算包含以下特征：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;dcd514bfa3da01db0efffd44f192c972&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全托管的计算服务，客户只需要编写代码构建应用，无需关注同质化的、负担繁重的基础设施开发、运维、安全、高可用等工作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通用性，结合云 BaaS API 的能力，能够支撑云上所有重要类型的应用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;自动的弹性伸缩，让用户无需为资源使用提前进行容量规划。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;按量计费，让企业使用成本得有效降低，无需为闲置资源付费。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;函数计算 (Function as a Service) 是 Serverless 中最具代表性的产品形态。通过把应用逻辑拆分多个函数，每个函数都通过事件驱动方式触发执行，例如当对象存储 (OSS) 中产生的上传 / 删除对象等事件， 能够自动、可靠地触发 FaaS 函数处理且每个环节都是弹性和高可用的，客户能够快速实现大规模数据的实时并行处理。同样的，通过消息中间件和函数计算的集成，客户可以快速实现大规模消息的实时处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;2e566cd890be5139497cdaf3a9aea968&quot;&gt;&lt;strong&gt;&lt;span&gt;Serverless 不足的地方&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;5e1a5c8ebbc42085e1cc3e776f449b99&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;成功案例太少&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;很难满足个性化&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏行业标准&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;初次访问性能差&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;缺乏开发调试工具&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;11. Service Mesh 技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Service Mesh 是分布式应用在微服务软件架构之上发展起来的新技术，旨在将那些微服务间的连接、安全、流量控制和可观测等通用功能下沉为平台基础设施，实现应用与平台基础设施的解耦。这个解耦意味着开发者无需关注 微服务相关治理问题而聚焦于业务逻辑本身，提升应用开发效率并加速业务探索和创新。换句话说，因为大量非功能性从业务进程剥离到另外进程中，Service Mesh 以无侵入的方式实现了应用轻量化，下图展示了 Service Mesh 的 典型架构：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6107226107226107&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrzR4UfyMt7tZerhyd3icrqWPibvVMKNCuzicBhtRzWLJtKV8ATHfdS7QFw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1716&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这张架构图中，Service A 调用 Service B 的所有请求，都被其下的 Proxy(在 Envoy 中是 Sidecar) 截获， 代理 Service A 完成到 Service B 的服务发现、熔断、限流等策略，而这些策略的总控是在 Control Plane 上配置。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;服务网格的技术发展上数据平面与控制平面间的协议标准化是必然趋势。控制平面可以认为是注册中心及管理配置面板；数据平面可以认为是由服务化框架依赖的组件独立而成的一个进程，数据平面代理业务服务的注册发现、负载均衡、容错等能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为什么需要 Service Mesh：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;aaa041fe47087da2d99b835ce27f5dbe&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在微服务架构中，让开发人员感觉不到微服务之间的通信。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当服务数量越来越多，升级微服务框架变得越来越复杂的时候，微服务框架不可能一直不变且没有 bug。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Service Mesh 则从业务进程集成客户端的方式演进为独立进程的方式，客户端变成了一个独立进程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对这个独立进程升级、运维要比绑在一起强得多。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;微服务架构更强调去中心化、独立自治、跨语言。Service Mesh 通过独立进程的方式进行隔离，低成本实现跨语言。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个服务独立占用一个容器，将服务、依赖包、操作系统、监控运维所需的代理打包成一个镜像。这种模式促成了 Service Mesh 的发展，让 Service Mesh 实现起来更容易。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;12. 云原生架构成熟度模型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;由于云原生架构包含了 6 个关键架构维度(简写为 SESORA，Service + Elasticity + Serverless + &lt;/span&gt;&lt;span&gt;Observability + Resilience + Automation)，因此我们先定义关键维度的成熟度级别：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.5498199279711885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHroonu3bH4I0JeNvBiaPXKuT5CYamu5iavFUMVOA726svvrVcnBn6MjStQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.32232893157262904&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrmzRfiacthJmp2yXCJbcJ0ZDvjziahQr4xjkpiaTBdeEd9FJ7ms9OejOhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;现状&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;容器的标准化使用改变了软件开发方式，基于云原生的开发能够帮助我们构建更灵活、更强大的应用。近日，CNCF（云原生计算基金会）就发布了云原生开发现状的报告解读。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该报告通过对 17,000 多位软件开发人员的调查数据，对云原生开发深入分析，希望能够帮助大家更好地掌握云原生开发生态系统的当前状况。其要点包括：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;927f51ab3af6786779d460f43d87ea43&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全球云原生开发人员超过 470 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Kubernetes 的开发人员超过 170 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用 Serverless 架构及云函数的开发人员超过 330 万。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Kubernetes 用户更有可能影响购买决策。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 市场规模&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;据估计，全球云原生开发人员数量超过 470 万，占后端开发的 36%。其中包括 290 万使用编排的用户，以及 330 万使用云函数或 Serverless 架构的开发人员。二者分别占据了后端开发的 22% 和 25%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该估算数据还考虑了 150 万同时使用编排和 Serverless 技术的开发人员。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 各个国家及地区的情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;全球范围内云原生技术的使用差异很大。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;总的来说，欧洲和北美的容器使用率远超亚洲。容器的使用已在东欧得到普及，54% 的后端开发人员使用容器。北美和西欧等发达地区的使用率也很高。在北美、西欧和以色列，一半后端开发人员都使用了容器。同时在三个地区内，25%-26% 的后端开发人员采用编排技术来管理这些容器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大洋洲地区云原生技术的使用情况非常独特。尽管容器的使用在该地区并没有其他地区那么普遍，但与全球其他地区相比，Serverless 以及容器编排等技术在大洋洲的普及率最高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;亚洲、中东和非洲地区的开发人员采用容器和云原生技术的速度较慢。中国的各大公司在向云的迁移方面一直滞后，并且云原生技术的使用也呈现同样的趋势。随着阿里巴巴的 CaaS 获得市场的青睐，相信将来东亚地区会涌现更多云原生开发人员。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 云原生开发人员掌握多种基础架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;云原生开发的灵活性让各个组织更灵活地操作分布式基础架构，并按需合理分配工作资源。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;与未参与云原生的开发人员相比，云原生开发人员掌握的计算基础架构确实更多。这些开发人员更加愿意在私有云、公共云、混合云和本地服务器等四种环境中运行代码，且平均使用了1.8种环境，而未参与云原生开发人员的平均值为1.5。数据显示，270万云原生开发人员（58%）在公共云上运行后端代码，220万开发人员（47%）选择了私有云，选择本地服务器的开发人员为220万（47%），而选择混合云的开发人员为170万（ 36%）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论是云原生开发人员还是传统开发人员，选择在本地服务器上运行代码的比例都相同。这表明，尽管云原生开发人员已经掌握了云的灵活性，但他们并未放弃本地服务器。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 云的使用在各个行业各不相同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虽然开发人员采用了云原生开发策略，但运行这些软件的计算资源在各个行业往往各不相同。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，与本地服务器或私有云相比，软件公司更倾向于在公共云中运行代码。在软件公司工作的云原生开发人员中，近三分之二在公共云中运行代码，同时该行业一半的开发人员在私有云上运行代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据分析、商业智能以及硬件领域的开发人员更倾向于在公共云上运行软件。与其他行业的平均水平相比，这些行业中的云原生开发人员在公共云中运行代码的概率高 7%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在涉及敏感数据的行业工作的云原生开发人员更倾向于在本地服务器或私有云上运行代码。与其他行业相比，金融服务领域的云原生开发人员在本地服务器上运行代码的比例高 12%，而医疗保健领域的开发人员的比例高 8%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;他们希望通过本地计算，更好地控制敏感数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;市场营销、娱乐和房地产领域的云原生开发人员不太可能在本地服务器上运行代码。这些行业的重点是内容，因此需要轻松快速地访问。可访问性和性能对这些领域的成功至关重要，而本地服务器可能无法满足这些要求。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，电信和政府/国防领域的云原生开发人员使用私有云、公共云和本地服务器的比例大致相同。这些开发人员使用公共云的比例相对较低。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img data-type=&quot;gif&quot; class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;未来&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;“未来的软件一定是生长于云上的”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，这是云原生理念的最核心假设。 &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 容器技术发展趋势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3907563025210084&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrd7tY85nxa2wez8iahQIxiaiaczWtlwJux3qicmw3v82Ejw2qOXZCaibibPaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）趋势一：无处不在的计算催生新一代容器实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;随着互联网的发展到万物智联，5G、AIoT 等新技术的涌现，随处可见的计算需求已经成为现实。针对不同计算场景，容器运行时会有不同需求。KataContainer、Firecracker、gVisor、Unikernel 等新的容器运行时技术层出不穷，分别解决安全隔离性、执行效率和通用性三个不同维度要求。OCI(Open Container Initiative)标准的出现， 使不同技术采用一致的方式进行容器生命周期管理，进一步促进了容器引擎技术的持续创新。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）趋势二：云原生操作系统开始浮现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubernetes 已经成为云时代的操作系统。对比 Linux 与 Kubernetes 概念模型，两者都定义了开放的、&lt;/span&gt;&lt;span&gt;标准化的访问接口：向下封装资源，向上支撑应用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.4963985594237695&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHr9ydh0eoE3qLeqgbrALiaxwPVt1OFTcGdLQ1hdjNsxXxoGF8F0X8xHvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;它们都提供了对底层计算、存储、网络、异构计算设备的资源抽象和安全访问模型，可以根据应用需求进行资源调度和编排。Linux 的计算调度单元是进程，调度范围限制在一台计算节点。而 Kubernetes 调度单位是 Pod， 可以在分布式集群中进行资源调度，甚至跨越不同云环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.3985594237695078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrtBXlKib97sm1pSks4d7kOwTNQDraibxkmp8bJfAyd7Y8HASTs9Q44P2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1666&quot; title=&quot;image.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;过往 Kubernetes 上主要运行着无状态的 Web 应用。随着技术演进和社区发展，越来越多有状态应用和大数据 / AI 应用负载逐渐迁移到 Kubernetes 上。Flink、Spark 等开源社区以及 Cloudera、Databricks 等商业公司都 开始加大对 Kubernetes 的支持力度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;统一技术栈提升资源利用率：多种计算负载在 Kubernetes 集群统一调度，可以有效提升资源利用率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;统一技能栈降低人力成本：Kubernetes 可以在 IDC、云端、边缘等不同场景进行统一部署和交付。云原生提 倡的 DevOps 文化和工具集可以有效提升技术迭代速度并降低人力成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;加速数据服务的云原生化：由于计算存储分离具备巨大的灵活性和成本优势，数据服务的云原生化也逐渐成为 趋势。容器和 Serverless 的弹性可以简化对计算任务的容量规划。结合分布式缓存加速(比如 Alluxio 或阿里云 Jindofs)和调度优化，大大提升数据计算类和 AI 任务的计算效率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）趋势三：Serverless 容器技术逐渐成为市场主流&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Serverless 和容器技术也开始融合得到了快速的发展。通过 Serverless 容器，一方面根本性解决 Kubernetes 自身复杂性问题，让用户无需受困于 Kubernetes 集群容量规划、安全维护、故障诊断等运维工作; 一方面进一步释放云计算能力，将安全、可用性、可伸缩性等需求下沉到基础设施实现。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）趋势四：动态、混合、分布式的云环境将成为新常态&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上云已是大势所趋，但对于企业而言，有些业务出于对数据主权、安全隐私的考量，会采用混合云架构。一些企业为了满足安全合规、成本优化、提升地域覆盖性和避免云厂商锁定等需求，会选择多个云厂商。混合云 / 多云架构已成为企业上云新常态。Gartner 指出“到 2021，超过 75% 的大中型组织将采用多云或者混合 IT 战略。”&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 基于云原生的新一代应用编程界面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubenetes 已经成为了云原生的操作系统，而容器成为了操作系统调度的基本单元，同时定义了应用交付的标准。但对于开发者来说，这些还远没有深入到应用的架构，改变应用的编程界面。但是这种变革已经在悄然发生了，而且有不断加速之势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Sidecar 架构彻底改变了应用的运维架构&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。由于 Sidecar 架构支持在运行时隔离应用容器与其他容器，因此 原本在虚拟机时代和业务进程部署在一起的大量运维及管控工具都被剥离到独立的容器里进行统一管理。对于应用来说，仅仅是按需声明使用运维能力，能力实现成为云平台的职责。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;应用生命周期全面托管&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。在容器技术基础上，应用进一步描述清晰自身状态(例如通过 Liveness Probe)， 描述自身的弹性指标以及通过 Service Mesh 和 Serverless 技术将流量托管给云平台。云平台能够全面管理应用的生命周期，包括服务的上下线、版本升级、完善的流量调配、容量管理等保障业务稳定性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;用声明式配置方式使用云服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。云原生应用的核心特点之一就是大量依赖云服务(包括数据库、缓存、消息等) 构建，以实现快速交付。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;7f7cec827e1b7f762e25ebc75b55e10e&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;语言无关的分布式编程框架成为一种服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。为了解决分布式带来的技术挑战，传统中间件需要在客户端 SDK 编写大量的逻辑管理分布式的状态。我们看到很多项目在把这些内容下沉到 Sidecar 中，并通过语言无关的 API (基于 gRPC/HTTP) 提供给应用。这一变化进一步简化应用代码逻辑和应用研发的职责，例如配置绑定，身份认证和鉴权都可以在 Sidecar 被统一处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综上，包括生命周期管理、运维管理、配置范围和扩展和管理、以及语言无关的编程框架，一起构成了崭新的应用与云之间的编程界面。这一变革的核心逻辑还是把应用中和业务无关的逻辑和职责，剥离到云服务，并在这一过程中形成标准，让应用开发者能够在专有云、公有云或者混合云的场景中，能有一致的研发运维体验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;Sidecar 架构模式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;将应用程序的组件部署到单独的进程或容器中以提供隔离和封装。这种模式还可以使应用程序由异构组件和技术组成，该模式被命名为 Sidecar，因为它类似于连接到摩托车的辅助车，辅助车被附加到父应用程序并为应用程序提供支持功能。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.054635761589404&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5Iiafvkxg91s5np2SV2sjpcmvIHrDhHv24VvIBaBraQjfwpkt0qTJUHBI1HjMuWZz1txEViabM5IUrFuojQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;604&quot; title=&quot;sidecar.png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. Serverless 发展趋势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;近年来，Serverless 一直在高速发展，呈现出越来越大的影响力。在这样的趋势下，主流云服务商也在不断丰&lt;/span&gt;&lt;span&gt;富云产品体系，提供更便捷的开发工具，更高效的应用交付流水线，更完善的可观测性，更丰富的产品间集成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）趋势一：Serverless 将无处不在&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;任何足够复杂的技术方案都可能被实现为全托管、Serverless 化的后端服务。不只是云产品，也包括来自合作 伙伴和三方的服务，云及其生态的能力将通过 API + Serverless 来体现。事实上，对于任何以 API 作为功能透出方式的平台型产品或组织，Serverless 都将是其平台战略中最重要的部分。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）趋势二：Serverless 将通过事件驱动的方式连接云及其生态中的一切&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过事件驱动和云服务连接，Serverless 能力也会扩展到整个云生态。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）趋势三:Serverless 计算将持续提高计算密度，实现最佳的性能功耗比和性能价格比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;虚拟机和容器是两种取向不同的虚拟化技术，前者安全性强、开销大，后者则相反。Serverless 计算平台一方面要求兼得最高的安全性和最小的资源开销，另一方面要保持对原有程序执行方式的兼容，比如支持任意二进制文件， 这使得适用于特定语言 VM 的方案不可行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当 Serverless 计算的规模与影响力变得越来越大，在应用框架、语言、硬件等层面上根据 Serverless 负载特点进行端对端优化就变得非常有意义。新的 Java 虚拟机技术大幅提高了 Java 应用启动速度，非易失性内存帮助实例更快被唤醒，CPU 硬件与操作系统协作对高密环境下性能扰动实现精细隔离，新技术正在创造崭新的计算环境。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;实现最佳性能功耗比和性能价格比的另一个重要方向是支持异构硬件。由于 x86 处理器的性能越来越难以提升，而在 AI 等对算力要求极高的场景，GPU、FPGA、TPU(Tensor Processing Units)等架构处理器的计算效率更具优势。随着异构硬件虚拟化、资源池化、异构资源调度和应用框架支持的成熟，异构硬件的算力也能通过 Serverless 的方式释放，大幅降低企业使用门槛。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h2 data-lake-id=&quot;5b736f94040b868817eba9c9c3a48a80&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 参考文献&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;更多企业落地实践内容，可下载云原生架构白皮书了解详情！点击&lt;/span&gt;&lt;span&gt;&lt;strong&gt;【阅读原文】&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;即可下载！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvmR7Ej5WqAEUaNUTFia3D30mXERqtkhuznER96wDxRCAWK2DdcbMVu0BBEicc2HpXEkibBh27iaYGMibwQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/6aVaON9Kibf5ibKRPQgZ9XgbVNsIeQUnfKSiaErmr8dtdicicS3A8m6TiavR6ZB0Eah3pD0kjQg8ACyNb1x5ibdqRg2jA/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;戳原文，直达云原生架构白皮书详情页！&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9c84f47d41dff59c1b1558e6b5c47791</guid>
<title>从 0-1 构建指标体系</title>
<link>https://toutiao.io/k/xp21fbf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;——————&lt;/span&gt;&lt;span&gt; &lt;strong&gt;BEGIN&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; ——————&lt;/span&gt;&lt;/p&gt;&lt;p&gt;假设豆豆在小区附近开了一家小型超市，花花每周二下班后，都会来店里买半斤猪头肉，风雨无阻，从不间断。豆豆心想：“花花每次来的时间都很固定，并且已经坚持了好几个月，我如果提前把肉准备好，这样就可以节省彼此的时间了。”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此后每周二，只要花花一到店里，豆豆就跟他说，“猪头肉已经调好啦，还特意为你多加了花生碎，直接拎走就行”。花花笑了，心里想：“嘿，这服务员挺贴心的，不错嘛”。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在上面案例中，豆豆通过对花花 “每周二下班后买猪头肉” 行为的观察，提前 “调好多加花生碎的猪头肉”。豆豆的这种做法不仅刷新了顾客的好感度，还提升了用户的忠诚度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;豆豆观察花花的行为在互联网行业中叫做数据分析，要做好数据分析，并将数据分析应用于业务中，首先就需要构建好指标体系。接下来，笔者就会聊聊如何构建指标体系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-none-contnet=&quot;t&quot;&gt;1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;数据指标体系&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是数据指标体系？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;通常我们讲述的指标是对当前业务有参考价值的统计数据，换句话说，不是所有的数据都叫指标。指标的核心意义是它使得业务目标可描述、可度量、可拆解。常用的指标有PV、UV等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;指标可分为原子指标和派生指标，按照笔者的理解，原子指标就是不加任何修饰词的指标，又叫度量，例如订单量、用户量、支付金额等；衍生/派生指标就是在原子指标上进行加减乘除或者修饰词的限定等等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.1152073732718894&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1uHWkShSGA93lzicfagOFZ9ia73ibvhhmGM727ye75GMm7ljj7iaY49cAdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;派生指标是对原子指标业务统计范围的圈定，例如：&lt;/span&gt;&lt;span&gt;昨日境外输入病例、网站近一周的访问量等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;衍生指标是基于原子指标组合构建的，例如：客单价 = 支付金额 / 买家数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;指标体系是从不同维度梳理业务，并将零散单点的具有相互联系的指标，系统化地组织起来。其中，维度分为定性维度和定量维度，定性维度主要是文字描述类，例如姓名、地名等；定量维度主要是数值描述类，如工资、年龄等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;举个某电商限时秒杀的栗子（如下图）：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3869104908565929&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1347cWnrDoYoHCsJxTb1Mo2DQvibxsicI6TIJKMay604Oib8kEYE2icYK2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1039&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上方红框代表市场活跃度，中间红框代表当前价格波动幅度，下方红框代表价格趋势。三个红框中的指标，可以构成一个最简单的指标体系，用来描述伊利纯牛奶秒杀的现状，属于描述指标体系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总的来说，指标体系是对业务指标体系化的汇总，主要用来明确指标的维度、口径、指标取数逻辑等信息，并能够迅速获得指标的相关信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么需要指标体系？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;对于数据产品经理来说，搭建指标体系可以更好地梳理业务，提高问题分析效率。&lt;/p&gt;&lt;p&gt;因此，笔者认为指标体系的主要目的为：&lt;/p&gt;&lt;p&gt;1）给业务发展提供指引；&lt;/p&gt;&lt;p&gt;2）建立共同愿景，凝聚团队，激励团队。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-none-contnet=&quot;t&quot;&gt;2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;如何设计指标体系？&lt;/strong&gt;&lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面分五部分（如下图），讲一讲如何设计指标体系。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1Hia8ofo1JO5gJhGvkqRQGOXZ0MiaSuDaL0CvuDMnOWmIyUTcz0FK8M4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;定目标&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;这是第一步，也是最重要的一步，同时也是很多产品上线运营后进行评估的标准，并以此形成闭环。好的目标具有以下三个特征：&lt;/p&gt;&lt;p&gt;1）特征一：与高层目标一致；&lt;/p&gt;&lt;p&gt;2）特征二：目标应当符合 SMART 原则；&lt;/p&gt;&lt;p&gt;3）特征三：具有挑战性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面笔者就先说说 SMART 原则：&lt;/p&gt;&lt;p&gt;1）S 代表具体（Specific）&lt;/p&gt;&lt;p&gt;目标必须是明确的、具体的，要对标特定的工作指标，不能笼统。下面举个栗子：&lt;/p&gt;&lt;p&gt;无效的目标：我要成为一名内容运营；&lt;/p&gt;&lt;p&gt;具体的目标：我要掌握文案技巧。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）M 代表可衡量（Measurable）&lt;/p&gt;&lt;p&gt;目标必须是可衡量的，可衡量的指标是数量化或者行为化的，验证这些指标的数据或者信息是可以获取的。&lt;/p&gt;&lt;p&gt;上面的栗子进一步细化，让目标可衡量。&lt;/p&gt;&lt;p&gt;可衡量的目标：我要掌握文章设主题、切痛点、找创意、定标题等技巧。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）A 代表可实现（Attainable）&lt;/p&gt;&lt;p&gt;目标必须是可实现的，具体指在付出努力的情况下可以实现，避免设立过高或过低的目标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;假如笔者刚接触内容运营，定下了 “我要在两个月内成为写文案的专家” 这个目标，那么这就是一个不切实际的目标。较接地气的目标是：我要在三个月内掌握文章设主题、切痛点、找创意、定标题等技巧。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）R 代表相关性（Relevant）&lt;/p&gt;&lt;p&gt;目标是与工作中的其它目标相关联。&lt;/p&gt;&lt;p&gt;比如我的中期目标是：一年内能够独立完成文章的一系列创作与发布，我的短期目标就是：三个月内掌握文章基本创作技巧。只有中期目标与短期目标具有很强的相关性，那么中期目标才更容易实现。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）T 代表有时限（Time-bound）&lt;/p&gt;&lt;p&gt;目标的时限性就是指目标是有时间限制的。比如我在运营公众号 “一个数据人自留地” 时给自己定的目标是 “截止到 2021 年 12 月 31 日创作并发布 12 篇文章”，这里的 2021 年 12 月 31 日就是确定的时间限制。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;建模型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;2.2.1 PLC 模型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;产品生命周期（Product Life Cycle），简称 PLC，指产品的市场寿命，即一种产品从开始进入市场到被市场淘汰的整个过程。产品的生命周期有探索期、成长期、成熟期、衰退期（如下图）。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7564356435643564&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1Fic5iazJ4vtBibgIkZo8oktwgOlBd9icsweEh3J6UIdPs1Df2RibjRmAtbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1010&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在产品不同的生命周期阶段，各业务方侧重点不同，关注的数据指标亦有所不同。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）探索期&lt;/p&gt;&lt;p&gt;探索期的重点在于验证产品的核心价值，是否能够满足市场需求并从中获利。要做到：假设、验证、迭代、执行。这个阶段会着重关注目标用户画像、关键行为、留存率。下面以早期的土巴兔为例（如下图）。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5320417287630402&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1IchOzuJKY1AZnic9tDf6O5My826sxxib5saoBpOdDDzoMTSBjSVbNNGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;671&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据上图对土巴兔业务流程的梳理，以及对土巴兔的定位（为探索期），因此当前主要关注点是打磨服务能力，了解用户群体的需求与产品服务的匹配度，重点关注的指标如下：&lt;/p&gt;&lt;p&gt;（1）目标用户画像：性别、年龄、学历、地域、职业；&lt;/p&gt;&lt;p&gt;（2）关键行为：图文发表量、浏览人数、传播量、使用量；&lt;/p&gt;&lt;p&gt;（3）质量：文章转化率、完成率。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）成长期&lt;/p&gt;&lt;p&gt;经过了打磨产品的探索期，产品有了较好的留存率，这时候产品开始进入用户增长期。处于成长期时，需要将注意力放在用户的整个生命周期的前半段上，即提高留存、用户激活、自传播。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）成熟期&lt;/p&gt;&lt;p&gt;随着市场趋于饱和，用户的增速放缓，逐渐趋于稳定，关注的核心指标应该是用户活跃度，同时关注商业转化路径。实际上如果市场本身是增量市场，可以考虑通过获客，把一个成熟期的产品做出一个不一样的增长曲线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）衰退期&lt;/p&gt;&lt;p&gt;新产品或替代品出现，用户转向其他产品，导致原产品用户量迅速下降，从而使原来的销售额和利润迅速下降，于是产品就进入衰退期。处于衰退期，需要重点关注用户流失与维系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2.2 OSM 模型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;OSM 模型（Objective，Strategy，Measurement）是指标体系建设过程中辅助确定核心的重要方法，包含业务目标、业务策略、业务度量，是指标内容横向的思考。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）业务目标&lt;/p&gt;&lt;p&gt;主要从用户视角和业务视角确定目标，原则是切实可行、易理解、可干预、正向有益。&lt;/p&gt;&lt;p&gt;（1）用户使用产品的目标是什么？&lt;/p&gt;&lt;p&gt;（2）产品满足了用户的什么需求？&lt;/p&gt;&lt;p&gt;（3）公司/业务/产品等存在的目的是什么？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）业务策略&lt;/p&gt;&lt;p&gt;为了达成上述目标采取的策略。换句话说，用户在什么时候感受到诉求被满足？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）业务度量&lt;/p&gt;&lt;p&gt;这些策略随之带来的数据指标变化有哪些？是否有效满足了用户的诉求，达成了业务目标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以 PMCAFF 为例，按照 OSM 模型，它的指标是什么样？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）业务目标&lt;/p&gt;&lt;p&gt;用户来使用 PMCAFF 这个产品，目标是什么？&lt;/p&gt;&lt;p&gt;需要涉及两类用户：内容生产者和内容消费者，接下来简单介绍内容生产者的分析思路。&lt;/p&gt;&lt;p&gt;用户需求：发布文章或分享观点，建立行业影响力或者内容受到反馈。&lt;/p&gt;&lt;p&gt;那么，如何让用户感受到自己的需求被满足了呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）业务策略&lt;/p&gt;&lt;p&gt;PMCAFF 的策略是：鼓掌、评论、分享、认可、专栏作者、好问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）业务度量&lt;/p&gt;&lt;p&gt;接下来，我们需要针对这些策略去做指标，在这里我们的指标分别是结果指标和过程指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote mpa-paragraph-type=&quot;quote&quot;&gt;&lt;span&gt;备注：&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote mpa-paragraph-type=&quot;quote&quot;&gt;&lt;span&gt;（1）结果指标：用来反映某些业务产出或结果的指标项，通常是延后知道的，很难进行干预。结果指标通常更多的是监控数据是否异常，或者监控某个场景下用户的需求是否被满足。&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote mpa-paragraph-type=&quot;quote&quot;&gt;&lt;span&gt;（2）过程指标：用户在做某个操作的时候所产生的指标，可以通过某些策略来影响过程指标，从而影响结果指标。过程指标通常更加关注用户的需求为什么被满足或没有被满足。&lt;/span&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接着以上面的 PMCAFF 为例：&lt;/p&gt;&lt;p&gt;（1）结果指标：发布文章数、发布文章的人数、文章鼓掌/评论数、被打赏金额、专栏作家人数、新增专栏作家人数等。&lt;/p&gt;&lt;p&gt;（2）过程指标：使用内容导入人数、内容发布转化率、文章互动率等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;指标选取之后，就是选择分析维度了，而维度选择层面主要是通过数据分析视角结合实际业务场景来确定。例如：用户标签维度、时间维度、渠道维度等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2.3 指标分级&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;指标分级主要是将指标化解为不同层级并逐级分析。根据企业战略、企业组织及业务进行自上而下的分级，对指标进行层层剖析，其中可结合 OSM 模型来确定指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）一级指标：公司战略层&lt;/p&gt;&lt;p&gt;用于衡量公司整体目标完成情况，与公司当前业务紧密结合，并对所有员工均有核心的指导意义。一级指标通常指引着公司的战略。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一级指标通常根据市场、产品生命周期、产品品类和商业模式确定，一个时间点只有一个最关键的指标（OMTM，One Metric That Matters）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：小红书的OMTM（又称：北极星指标）如何演变？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.21454112038140644&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1LbRmLH5D8z6ovVic11Wg1oNA5LEIZeXIt2ibbGvtzxUEPCvZe1oa2Puw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;839&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）二级指标：业务策略层&lt;/p&gt;&lt;p&gt;为达成战略目标，公司会对其进一步拆解为业务线或事业群的核心指标。通常为了实现一级指标，企业会做出相应的策略，二级指标也会与这些策略有所关联。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;例如：小红书当前的一级指标是销售额，那么二级指标可以设定为不同品类商品的销售额，分地区的销售额等。这样当一级指标出现问题的时候，我们可以快速定位问题所在。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）三级指标：业务执行层&lt;/p&gt;&lt;p&gt;三级指标是将二级指标纵向展开，进行路径拆解、漏斗拆解、公式拆解。三级指标通常用于定位二级指标的问题，通常指导一线运营或分析人员开展工作。三级指标是业务中最多的指标。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;路径拆解需要对业务流程进行分析，例如：打开应用、浏览首页、浏览商品详情页、加入购物车、提交订单、订单支付、支付成功。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;运用公式拆解月活跃用户，如下图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.365&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1kES3pjVkRnov5UbX1rSXZUAY47JiaQP6jX6IE7Pj9xG0V5sribGPa6wA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2.4 AARRR&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;AARRR 模型就是海盗模型，也是用户分析的经典模型。它反映了增长贯穿于用户生命周期的各个阶段，即获取（Acquisition）、激活（Activation）、留存（Retention）、变现（Revenue）、自传播（Referral）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）获取&lt;/p&gt;&lt;p&gt;运营人员通过各种渠道进行推广，以各种手段获取目标用户，评估各种营销渠道效果，并不断调整运营策略，以不断降低获客成本。&lt;/p&gt;&lt;p&gt;关键指标：曝光量、点击、下载、安装、激活、安装率、激活率、注册转化率、留存率、付费率等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）激活&lt;/p&gt;&lt;p&gt;激活指目标用户开始使用产品。产品经理通过新手奖励、产品引导等方式，来引导用户使用产品核心功能。我们需要掌握用户的行为数据，监控产品健康程度。&lt;/p&gt;&lt;p&gt;关键指标：新老用户占比、DAU/WAU/MAU、日均登录次数、日均使用时长等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）留存&lt;/p&gt;&lt;p&gt;通常维护一个老用户的成本要远远低于获取一个新用户的成本，所以不仅要拉新用户，还需要关注用户粘性，以及关注用户在哪里流失、为什么流失。&lt;/p&gt;&lt;p&gt;关键指标：新用户留存率、老用户留存率、活跃用户留存率、日周月留存率、流失率等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）变现&lt;/p&gt;&lt;p&gt;主要用来衡量产品的商业价值，这也是商业的本质。&lt;/p&gt;&lt;p&gt;关键指标：ARPU、ARPPU、付费率（区分新老用户）、客单价、LTV 等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5）自传播&lt;/p&gt;&lt;p&gt;主要是基于产品、营销、明星等事件的吸引力，从而使用户自发地传播。&lt;/p&gt;&lt;p&gt;关键指标：裂变系数等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4597378277153558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1kQtCQCky7SgDiblYWzhPwbDtn7wFjn9GLaDZZpS6rMdGdFmS240J83A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1068&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-none-contnet=&quot;t&quot;&gt;3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据采集，就是采集相应的数据，是数据流的起点，采集的对不对、全不全，直接决定数据的质量，影响后续的所有环节。那么采集什么样的数据才算是质量高？这就需要提前规划埋点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;什么是埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;埋点是（用户行为）数据采集领域的术语。它的学名叫做事件追踪（Event Tracking）。它主要是针对特定用户行为或事件进行捕获、处理和发生的相关技术及其实施过程，如用户点击某个按钮的次数、阅读某篇文章的时长等等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;埋点是一种常用的数据采集方法，它是为了满足丰富的数据应用而做的用户行为过程及结果记录。埋点是数据采集的一种重要方法，并且是数据的起源，采集的数据常常用于分析产品的使用情况、用户行为偏好等，于是延伸出用户画像、用户推荐系统等数据产品。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;埋点流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;业务部门根据业务提出需求，产品经理将需求整理为数据需求，并输出数据需求文档（DRD，Data Requirements Document）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;接下来，产品经理就跟数据团队进行需求评审，评审通过与否，会后都要给相关人员发送需求评审纪要邮件。评审通过之后，产品经理需要跟开发工程师确定开发时间，并发送排期邮件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;开发完成后，测试工程师、数据分析师、产品经理需要验证埋点是否完整且准确，提交验收报告。功能上线后，产品经理或开发工程师需要发送上线邮件。如下图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6044444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C13or8Xply5mW156KhtQTCPUPqCjHm0h7hicmQQqkdiaJG56iaiaVA6xiap7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;如何埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;怎么埋呢？从业务角度出发，划分五个角度：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3520408163265306&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1z9Vp245s3IgW7icncax0rFiccofeJK1hDdFK2dia3o359bovs5nLwGo6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Who：对行为的发起者进行标识，一般使用账号或设备号进行标识。账号是常用的方式，通过身份证号、手机号、账号 ID 等信息区分用户；设备号多用于不需要登录的产品，通过设备的编码来区分用户。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;When：记录行为是什么时候发生的，一般使用服务器时间，即 Unix 时间戳记录行为发生时间。它是全球统一时间，不受地区的干扰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Where：记录行为发生的地点，一般通过 GPS 进行定位，或者通过设备 IP 判断用户位置。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;What：指用户行为的具体内容是什么，比如用户阅读一本书，那么购买的书名是什么？价格是多少？哪个出版社出版等信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;How：行为是怎么发生的，一般包含在行为名称中，如提交某订单，也有若干行为是可以通过多种方式完成，如解锁 iPhone，可以输入密码解锁，也可以刷脸解锁，无论使用哪种方式都是一种可以记录的信息。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;案例：浏览APP首页行为埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;针对浏览某电商 APP 首页行为，从五个角度分析，分为特有指标和公共指标两类，如下图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7871148459383753&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1jQBJs6uw34LNfnIQm87FaYicSUpjCI8iaRLxLYwOAUAZdiajr72VdMVww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;案例：支付订单行为埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;针对支付订单行为，从五个角度分析，分为特有指标和公共指标两类，如下图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7871148459383753&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1fcalXvroXvibtbOsN3YOaAFFjLr1lKWK5EJ4RYcwKnNvZV9t47OlEDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;title&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-none-contnet=&quot;t&quot;&gt;四&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;svg viewbox=&quot;0 0 1 1&quot; mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot; mpa-is-content=&quot;t&quot;&gt;数据分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;strong&gt;4.1&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;什么是数据分析？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;数据分析是指用适当的统计、分析方法对收集来的大量数据进行分析，提取有用信息和形成结论，并对数据加以详细研究和概括总结的过程。简单地说，就是对数据进行分析。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;数据分析的目的是把隐藏在一些看似杂乱无章的数据背后的信息挖掘出来，提炼出目标对象的内在规律。对于企业来说，数据分析的本质在于创造商业价值，驱动企业业务增长。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; mpa-paragraph-type=&quot;secondTitle&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p mpa-is-content=&quot;t&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;数据分析方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;我们以一个电商网站为例，用数据产品对该网站进行数据采集，然后使用常见的数据分析方法分析，如漏斗分析、留存分析、时间分析、用户画像、渠道分析、分布分析等方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.2.1 漏斗分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;漏斗分析能够科学反映用户行为状态，以及从起点到终点各业务流程的用户转化率情况，是一种重要的流程式数据分析模型。漏斗分析模型已经广泛应用于用户行为分析中，例如渠道质量评估、产品销售等日常数据运营与数据分析工作中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如：对于电商产品来说，最终目的是让用户购买商品，但整个流程的转化率由每一步的转化率综合而定。这时，我们就可以通过漏斗分析模型进行监测。如下图所示，我们可以观察用户在每一个层级上的转化率，寻找转化路径的薄弱点，优化产品，提升用户体验，最终提升整体的转化率。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1TfhUIiaibc4JX6MA4lJbqUrUDL9Tl2e1icLKnfo2e5BZ8JM66upptLic5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.2.2 留存分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;留存分析是一种用来分析用户参与情况/活跃程度的分析模型，即由初期的新用户转化为活跃用户、忠诚用户的过程。随着统计数字的变化，相关人员可看到不同阶段的用户变化情况，从而判断产品对用户的粘性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如：对某电商平台来说，用户最近 30 日的 7 日留存率（如下图），从图中得知，用户留存率较低。接下来，按照地区、年龄、行为等，将用户分为不同的群体，观察留存的区别，找到产品可优化点。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1hia4mHRGVO02oicJL9ADHXo1Fz8huvjb9Xjuy6zjh9WfAardorQDh17Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.2.3 事件分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;事件分析用来研究某事件的发生对企业的影响以及影响的程度。通常来说，事件分析包括事件定义与选择、下钻分析、结果等环节。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;事件，是一个用户在某个时间点、某个地方、以某种方式完成了某个具体的事情。它的关键因素包括 Who、When、Where、What、How。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如：运营人员发现过去 30 日支付成功次数波动较大（如下图）。这时企业可以先定义事件，通过筛选条件配送方式为 “自营”，再从其他多个维度细分下钻，如 “订单金额”、“是否使用优惠券”、“商品ID” 等。当进行细分筛选时，异常数据无处遁形。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C1ng23xsicicN2ib6ib0xicwia8O5wnf3EiaCCSOqawl0behNIy2NLG8FrbP1qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.2.4 渠道分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;渠道，是指产品与用户发生互动的各个接触点，比如 SEO、SEM、社交媒体等等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;渠道分析主要用于分析用户的访问来源及访问深度，通过访问用户数、访问次数、停留时长等指标来评估渠道质量，同时也通过转化率来衡量渠道转化的效果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个完整的渠道流程，常常包括：站外渠道 -&amp;gt; 展示广告 -&amp;gt; 着陆页 -&amp;gt; 访问着陆页的转化文案 -&amp;gt; 激活用户 -&amp;gt; 产品转化 六大关键环节，每个环节都有相应的指标来衡量。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.19119351100811124&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jWg3EibnYW9ibAUWI7stk9Kiaq14L7AJ6C18RgewM144hI8EoBX1znpmNzEbrBR7TQZA6ia6y4LAfA0BsUicfma2zZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;863&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1）用户在站外渠道，包括 SEO、SEM、社交媒体等，看到各种宣传广告。&lt;/p&gt;&lt;p&gt;关键指标：展示量、点击量、CTR（Click Through Rate，点击率）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2）有兴趣的用户点击 URL 链接进入着陆页。&lt;/p&gt;&lt;p&gt;关键指标：着陆页 PV、着陆页 UV、加载时长、跳出率等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;3）对产品或服务感兴趣的用户下载、注册或者试用产品或服务，这个过程通常称之为激活。&lt;/p&gt;&lt;p&gt;关键指标：停留时长、访问深度等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;4）用户激活后，点击 CTA（Call To Action，召唤用户行为）选择商品加入购物车并提交、支付，这就是一个完整的购买流程。&lt;/p&gt;&lt;p&gt;关键指标：购买用户人数、产品内转化率等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以上是四种常用的数据分析方法，在不同行业中，它们常常以不同的样式展示出来，当我们面对不同的问题时，需要清楚地知道哪个或哪几个方法最为有效，需要结合具体场景灵活运用，没有最好的分析方法只有最适合的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e0f29f42e627c8e9fc55c2ce217e23ee</guid>
<title>令牌桶、漏斗、冷启动限流在 sentinel 的应用</title>
<link>https://toutiao.io/k/23smctm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;分布式系统为了保证系统稳定性，在服务治理的限流中会根据不同场景进行限流操作，常见的限流算法有：&lt;/p&gt;&lt;p&gt;在分析sentinel限流之前，我们先看下sentinel是什么，官网说明如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;从限流角度来看，sentinel的限流有2种控制维度，一个是qps，一个是并发数。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;qps这个很好理解，也就是每秒处理请求量，当超过设定阈值时，会进行流控，策略有如下几种：拒绝、排队（一定时长）等。&lt;/p&gt;&lt;p&gt;并发数这个就是当前线程运行数，类似于hystrix，只不过sentinel是进行线程个数统计判断是否达到线程设定值，而hystrix是根据不同线程池来做的。&lt;/p&gt;&lt;p&gt;sentinel中处理流程是一个责任链，不同功能的逻辑抽象成不同的&lt;code&gt;ProcessorSlot&lt;/code&gt;组合在一起，比如有限流的FlowSlot、打日志的LogSot、数据统计的StatisticSlot。下面重点看限流的&lt;code&gt;com.alibaba.csp.sentinel.slots.block.flow.FlowSlot&lt;/code&gt;：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;entry&lt;/span&gt;&lt;span&gt;(Context context, ResourceWrapper resourceWrapper, DefaultNode node, &lt;span&gt;int&lt;/span&gt; count,&lt;br/&gt;                  &lt;span&gt;boolean&lt;/span&gt; prioritized, Object... args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 是否触发限流检查&lt;/span&gt;&lt;br/&gt;    checkFlow(resourceWrapper, context, node, count, prioritized);&lt;br/&gt;    &lt;span&gt;// 继续往下一个节点走&lt;/span&gt;&lt;br/&gt;    fireEntry(context, resourceWrapper, node, count, prioritized, args);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;checkFlow&lt;/span&gt;&lt;span&gt;(Function&amp;lt;String, Collection&amp;lt;FlowRule&amp;gt;&amp;gt; ruleProvider, ResourceWrapper resource,&lt;br/&gt;                      Context context, DefaultNode node, &lt;span&gt;int&lt;/span&gt; count, &lt;span&gt;boolean&lt;/span&gt; prioritized)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BlockException &lt;/span&gt;{&lt;br/&gt;    Collection&amp;lt;FlowRule&amp;gt; rules = ruleProvider.apply(resource.getName());&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (FlowRule rule : rules) { &lt;span&gt;// 多个限流规则检查&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!canPassCheck(rule, context, node, count, prioritized)) {&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; FlowException(rule.getLimitApp(), rule);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// canPassCheck -&amp;gt; passLocalCheck&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;passLocalCheck&lt;/span&gt;&lt;span&gt;(FlowRule rule, Context context, DefaultNode node, &lt;span&gt;int&lt;/span&gt; acquireCount,&lt;br/&gt;                                      &lt;span&gt;boolean&lt;/span&gt; prioritized)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; rule.getRater().canPass(selectedNode, acquireCount, prioritized);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;canPass校验目前有以下几种实现类：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.1125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibNlJCo16FibtvH7KetFnDjG0gS9r72EY5s1PJvukBenMD7gXAj8VUqh8t8SQLbURAYzjIViciakUCUIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;这几个实现类分别使用了如下几种限流算法：&lt;/p&gt;&lt;p&gt;sentinel中统计信息，比如qps、pass、block等信息都是在滑动时间窗口中维护的，比如时间戳是910时，统计信息会往对应800-1000的时间窗口更新，当时间戳是1001时，由于时间窗口只有5个(每个200ms)，因此会复用第一个时间窗口，在使用前会先进行初始化该窗口统计值。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2613756613756614&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibNlJCo16FibtvH7KetFnDjG0IHJDlsicbziarzouh4WX2FZOP4KFQUSH496I0ATw5LKg0TWWCf4WzhlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;945&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;对于默认的流控实现 &lt;code&gt;DefaultController&lt;/code&gt;，其是根据时间窗口的统计值是否达到了限流值来决定是否限流的，这也是把它归为令牌桶算法的原因。漏斗算法实现&lt;code&gt;RateLimiterController&lt;/code&gt;，会记录上一次正常通过的时间戳信息（latestPassedTime），当判断是否限流时，会根据&lt;code&gt;当前时间-latestPassedTime&lt;/code&gt;是否大于间隔值，大于的话表示可以正常通过，小于的话表示刚刚已经有流程正常通过，此次需要排队等待，等待时间为&lt;code&gt;期望时间戳-当前时间戳&lt;/code&gt;，并发场景下，多个线程可能都会走到等待这里，因此需要(cas操作)判断当前需等待时间是否大于某个值，大于的话直接进行限流，不再排队等待。&lt;/p&gt;&lt;p&gt;冷启动限流算法，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过&quot;冷启动&quot;，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。&lt;/p&gt;&lt;p&gt;sentinel中通常冷启动的过程系统允许通过的 QPS 曲线如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7830188679245284&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/jOD3PUUxTibNlJCo16FibtvH7KetFnDjG0htvOEgLg6yT6LMuTfFfoL2gzzz3cAZINSk9FrPt6pufjOVHWwtcj3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;p&gt;冷启动的两种模式，令牌桶和漏斗大同小异，只不过在流量较大时，冷启动过程 令牌桶走势类似于阶梯向上直到设定的限流值，漏洞走势类似于几个斜线向上之道设定的限流值。&lt;/p&gt;&lt;p&gt;关于sentinel更多的知识可参考官方文档：https://sentinelguard.io/zh-cn/docs/introduction.html&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c353000eee611ae4877e5c68ba96eb99</guid>
<title>1 分钟带你认识从 &quot;�&quot; 到 &quot;锟斤拷&quot;</title>
<link>https://toutiao.io/k/tmphi9f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-width=&quot;100%&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.8767123287671232&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EeJSurrFuXN8k74xtBpeicuXWMy9AjmTs6CzLGRfp5KFzJ49EVSXDTYj2ntuToBNtenTjCEEZBueuthDIgO9yLA/640?wx_fmt=gif&quot; data-w=&quot;219&quot; data-width=&quot;100%&quot; data-type=&quot;gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;欢迎关注 “程序猿石头&lt;span&gt;”&lt;/span&gt; ——&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;一个毕业于清华的普通打工仔&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以一首&lt;/span&gt;&lt;span&gt;五言绝句作为开篇，你知道背后说的是什么吗？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;手持两把&lt;span&gt;锟斤拷&lt;/span&gt;&lt;/p&gt;&lt;p&gt;口中疾呼&lt;span&gt;烫烫烫&lt;/span&gt;&lt;/p&gt;&lt;p&gt;脚踏千朵&lt;span&gt;屯屯屯&lt;/span&gt;&lt;/p&gt;&lt;p&gt;笑看万物&lt;span&gt;锘锘锘&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;� 为何物？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在前不久石头哥的这篇文章中 —— &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247490188&amp;amp;idx=1&amp;amp;sn=19c2259724a855cdfac48855a870368d&amp;amp;chksm=eb471b68dc30927eb17b1e5a999eebe808084a9f3aa64d3041f73dd3a8327ccc1d84353cf51f&amp;amp;token=1271081609&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;你可能也会掉进这个简单的 String 的坑&lt;/a&gt;，讲述了因字符编码问题而连续踩坑的经历，文中有一个神奇的字符 “&lt;span&gt;�&lt;/span&gt;”。&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，这个 “&lt;/span&gt;&lt;span&gt;�&lt;/span&gt;&lt;span&gt;” 真是无处不在，比如大名鼎鼎的微信：&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8564771668219944&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBobHerlCE2u3ibiaec3PBPe5L0QcGIFstwT3ySRewERgibpdTVrkd4AyWA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1073&quot;/&gt;&lt;figcaption&gt;微信中的�&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;再比如，封面图中，单价22元的“锟斤拷&lt;span&gt;锟斤拷&lt;/span&gt;”，再随便百度一把：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8202995008319468&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBRicNqG6x6XSqHmbs86SxJFW8nmnRd2Keiazz7Goqd76SibHXqDxO805zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;figcaption&gt;随处可见的�&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;要弄清这个问题，还得先从编码谈起。&lt;/p&gt;&lt;p&gt;因为在计算机的眼里，都是二进制，具体用哪些二进制数字表示哪个符号，这就是编码。不要把编码想象得太复杂，其实就是一个很简单的 mapping。&lt;/p&gt;&lt;p&gt;比如大家所熟知的 ASCII 编码，规定了 二进制的&lt;code&gt;0100 0001&lt;/code&gt;，也就是十进制的&lt;code&gt;65&lt;/code&gt;，代表的含义就是大写字母 &lt;code&gt;A&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.42095914742451157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBqYsw8dPuFswzTuW7PwC4ZibSGo9UqJJHsn4VWD1rIGiaJjjx2Iroj5Pw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1126&quot;/&gt;&lt;figcaption&gt;ASCII 编码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;�&lt;/code&gt; 也是一种编码字符，就跟上面的 &lt;code&gt;A&lt;/code&gt; 一样一样的，它是 UNICODE 编码方式中的一个特殊的字符，也就是 0xFFFD(65533)，语义是一个占位符，用来表达这套编码系统中未知的，自己不认识的东西。&lt;/p&gt;&lt;p&gt;比如&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247490188&amp;amp;idx=1&amp;amp;sn=19c2259724a855cdfac48855a870368d&amp;amp;chksm=eb471b68dc30927eb17b1e5a999eebe808084a9f3aa64d3041f73dd3a8327ccc1d84353cf51f&amp;amp;token=1271081609&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;上篇文章中的实验截图&lt;/a&gt;的，红色部分圈出来的对应的字符，UTF-8 编码都不认识，所以按照 UNICODE 的定义，我就只好用统一的一个占位符 —— &lt;code&gt;0xFFFD(65533)&lt;/code&gt; 来表示。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7334710743801653&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBvnJib6ibc69tTEmYCL3SP0UhyKmnUYdGa5icWB6UBpnYGEyCOssVhxINg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;968&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;为什么会出现“锟斤拷”？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们接着上篇的例子来看， 如下图所示，仍然从 “程序猿石头” 对应二进制编码截取部分：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.18181818181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBOhESmaNhJbNYkpFRkntRYg7ZJnZ0MBdoUvIGKlBxVcMKtlgL0aYKzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1760&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如上图所示，第 18 行的字节数组 &lt;code&gt;new byte[] {-25, -119, -25, -116}&lt;/code&gt;，&lt;code&gt;UTF-8&lt;/code&gt; 恰好都不认识，因此只能用占位符替换。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.31871345029239767&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNB3701U59m7yc0RJGSP7hwU3p8uuhlAtvdOfRuSnjEtYOIemo7jP4JLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;684&quot;/&gt;&lt;figcaption&gt;��&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这种情况，在编码转换过程中确实也比较常见，如果双方没沟通清楚，确实很容易出现互相不认识的情况。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBZNwTRxRwxSniblvpicUhRRBloPvR6NxKUUqCJzQ49csiaG5AsdmTQ5ZyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;220&quot;/&gt;&lt;/figure&gt;&lt;p&gt;在中文系统中，常见的字符编码是 GBK，这个时候，因为大家没提前商量清楚，我就默认按照 GBK 给你编码看看。&lt;/p&gt;&lt;figure/&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.11294117647058824&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBYEbicDnC0y3xYd6uUj7zP6AdpPyc9ibYnNxa9DDQXD2bgY0gkkmJb6ibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1700&quot;/&gt;&lt;figcaption&gt;“锟斤拷”在此&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;惊不惊喜意不意外……&lt;/p&gt;&lt;p&gt;其实是因为，&lt;code&gt;�&lt;/code&gt; 用 &lt;code&gt;UTF-8&lt;/code&gt; 编码后变成了 &lt;code&gt;0xEFBFBD&lt;/code&gt;（就是上面的字节数组 &lt;code&gt;[-17, -65, -67]&lt;/code&gt;），两个连起来就是 &lt;code&gt;0xEFBFBDEFBFBD&lt;/code&gt;，也就是上面的字节数组&lt;code&gt;[-17, -65, -67, -17, -65, -67]&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;而 GBK 编码依然采用双字节编码方案，因此上面的 6 字节 &lt;code&gt;0xEFBFBDEFBFBD&lt;/code&gt;，就被拆成了 3 个 2 字节字符即 &lt;code&gt;0xEFBF, 0xBDEF, 0xBFBD&lt;/code&gt; 对应 GBK 编码里面就是：锟（0xEFBF），斤（0xBDEF），拷（0xBFBD）。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8356545961002786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBwlicuo49bsOlnFrndLxArzKkRkQ6PEVZIZFpBt0MpZ0BKQj746zl61Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;718&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8263305322128851&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBRzetEAJbA5RwBpZtXnIWC0lKjAfcicTBfcASibk64lOKRpYZ2uP9gZWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.8076923076923077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNB2M1dZc71EYWkJ0W8IKCRc8Zt5TicMtRmlcCYgONibAOXYgHpE1LzbUNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;728&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;锟斤拷（可向右滑动&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;现在，你知道了吗？&lt;/p&gt;&lt;p&gt;留个作业题：开篇的五言绝句，你知道另外的梗是来自哪里吗？欢迎留言讨论。&lt;/p&gt;&lt;p&gt;另外，最近我看到一份来自阿里巴巴开源的学习资料，涵盖了大前端、客户端、服务端、算法等多个技术领域，全书内容⻚数1600+，现在分享给大家，后台回复“&lt;span&gt;阿里2020&lt;/span&gt;” 即可获取。&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.468384074941452&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBXUJ0kr6jiblAsKRbSnIUr7u1zq60zPnE78T0IUE9bHgLOcW2hlibut3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;427&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.989451476793249&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNBhGl8CJIpwmgedaJGVBL3M1t4KK09l6Em4DMIRArYoTHaF7KqloYZQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.9921104536489151&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibul9jL7V6o6VW2dkFolLtNB2QsibmibFWymrXfzZSbVhmVicX9207ibFzbZmTCYuFiaLaXdvYJzVRoA7jQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&amp;lt;&amp;lt;&amp;lt; 左右滑动见更多 &amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;74666&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;程序猿石头 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;程序猿石头(ID: tangleithu)，现任阿里巴巴技术专家，清华学渣，前大疆后端 Leader。用不同的视角分享高质量技术文章，欢迎关注，交流和指导！扫码回复“&lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;&lt;span&gt;” 获取&lt;/span&gt;&lt;span&gt;大厂面试指南&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;53&quot; data-backw=&quot;53&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;269&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;269&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujwTxcfbYhd7y5cjEkf2nwDCFdiauYuqmHY3VDWyCbImg92mvoicoQ6Uk3g/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fadcb21981d67b1e1db2024ddbe67c1d</guid>
<title>谁再把 IDEA 的 Project 比作 Eclipse 的 Workspace，我就跟谁急</title>
<link>https://toutiao.io/k/4eh9u8a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.626&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI5geUb0a7uJ4d32LzP6f1JTWxxqPx8dpoUpCdmkzO3KSXw9ae9woeicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是A哥(YourBatman)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个观点：&lt;strong&gt;若一个Java开发者能把IDEA玩得666，则技术一定不会差；但若玩不转IDEA（如不会设置、定制、解决日常问题、快捷键等等），那大概率水平很一般。因为高手一般得有高手的样子&lt;/strong&gt;，你同意这个观点吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MTUwOTgyOQ==&amp;amp;mid=2247492482&amp;amp;idx=1&amp;amp;sn=79fbb525cf5fd5212010a880035ed0d8&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;上篇文章&lt;/a&gt; 你也了解到，现今的Javaer绝大部分都使用IntelliJ IDEA作为IDE进行开发，但同时发现（从身边同事调查）大部分同学都并不能很好的使用IDEA，其中表现最为突出的是IDEA里的&lt;strong&gt;Project和Module&lt;/strong&gt;两个概念，混淆不清或者概念完全扭曲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A哥是一个相对来讲很注重基础知识搭建的Javaer，所以对于最常用的工具也是如此，愿意花些时间去搞明白，包括页布局、功能定制、插件、以及快捷键都会调为自己最顺手的状态，毕竟&lt;strong&gt;工欲善其事，必先利其器&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文将着眼于帮你深入的介绍IntelliJ IDEA里最重要的两个概念：&lt;strong&gt;Project和Module&lt;/strong&gt;，它是最最最基础也是最重要的，我认为本文不仅适合使用IDEA的萌新，同样适合使用IDEA的“老手”（曾经eclipse的重度用户尤甚）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;本文提纲&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47410817031070196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoILhhrOsyzbLyMmP18UAtGdnkvSCwHRrsH5O6DIR4dHZV715iaEUDcElA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;869&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;版本约定&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;正文&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IntelliJ IDEA相较于Eclipse可谓是后起之秀，2006年开始崭露头角，2012年整体性能上完败Eclipse，2016年市场份额完成全面超越，一步步的逐渐成为JVM平台的主流IDE。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正是由于有这样的历史进程，有大批“老”程序员是从Eclipse过度到IDEA来的，因此就有了一个颇具代表性的概念对比表格，方便“迁移”：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.37920937042459735&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI9bkDV0LhtRz3Pw8ux5YERfnDEDyO30lhGBcaT3RHUCyL9eVqXG4ULg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;683&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;诚然，IntelliJ IDEA的使用成本比eclipse略高，在那样的历史背景下，这张表格确实降低了“老”程序员们的迁移过度成本，即使现在看来这张表格的描述&lt;strong&gt;并不准确&lt;/strong&gt;，设置具有极大的误导作用（副作用开始展现......）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;IDEA和eclipse的概念类比上，最“著名”的当属&lt;strong&gt;把IDEA的Project比作Eclipse的Workspace&lt;/strong&gt;，回忆下你当初是不是经常听到这样的声音？博客文章这样说、培训机构老师这样说、甚至大学的老师也是教你这么去理解的。更有甚者，对于很多“中毒”很深的、曾经的eclipse用户来说，他们是这样使用IDEA的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3549107142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIh8Ets8fOKDibib8lJ8HRD28NoC8neB1qxW5ticYekRBnToUlJNnibY84pQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现了所谓的：&lt;strong&gt;IDEA在同一窗口显示多个项目&lt;/strong&gt;。若你发现你身边有这么样管理项目的同事，那么他是你的“前辈”没跑了，因为铁定是eclipse的资深用户，然后迁移到IDEA来。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.591715976331361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI4z3tm3PZYSkFvSHeRzsYPVU3wOtCCHp1nLUWjn53aYUae4Hk1tnEnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种做法是错误的，&lt;strong&gt;毫不相干的项目（远程调用不叫有关系）没有理由放在同一视窗内&lt;/strong&gt;，除了干扰还是干扰。Eclipse里有workspace工作空间的概念尚可理解，可IDEA里是绝对不要这么做。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 IntelliJ IDEA 中，没有类似于 Eclipse 工作空间（Workspace）的概念，而是提出了Project和Module这两个概念。本文来告诉你，IntelliJ IDEA是如何管理项目Project、模块Module以及它俩关系，看完之后你会发现单这一点IntelliJ IDEA就比Eclipse优秀得多。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Project和Module概念&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;什么是Project&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Eclipse中一个Workspace可以包括多个Project，而在IDEA里Project是&lt;strong&gt;顶级概念&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Project（翻译为：项目）IntelliJ IDEA的&lt;strong&gt;顶级&lt;/strong&gt;组织单元，它是个&lt;strong&gt;逻辑概念&lt;/strong&gt;。一般来说一个Project代表一个&lt;strong&gt;完整的&lt;/strong&gt;解决方案，如它可包含多个部分，如：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;源代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;构建脚本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文档&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SDK&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;依赖库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说Project是个完整体，是个资源的集合，扔到任何地方都是可以被解释的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;说明：建议把Project翻译为项目，而非工程，不在一个维度。因为一个module其实也可以理解为一个工程，避免混淆&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;什么是Module&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块是是项目Project的一部分，&lt;strong&gt;必须&lt;/strong&gt;隶属于Project而存在。它可以&lt;strong&gt;独立&lt;/strong&gt;编译、测试、运行甚至部署。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块是分而治之思想的体现，是降低&lt;strong&gt;大型项目复杂度&lt;/strong&gt;的一种有效手段。模块是可重用的，若需要，一个模块可以被多个模块引用，甚至多个Project项目引用（比如commons模块）。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此处强烈不再建议你把Eclipse的Workspace引入进来做类比，那只会把你带跑偏了。细品这两个概念定义，总结一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在IDEA中，Project项目是&lt;strong&gt;最顶级&lt;/strong&gt;的结构单元，一个IDEA视窗有且只能代表一个Project&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;现在知道为何把user、account、order扔到一个视窗里有多么的不合适了吧&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;一个Project由一个or多个Module模块组成，对于&lt;strong&gt;大型项目&lt;/strong&gt;来讲一般会有N多个module组成，如dubbo项目结构如下图所示：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5528169014084507&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIEkFAh0A7Bic0ia4TBu4o7IoYzIq0BG2BIpGNRAPuYicJrtTSKqbt4gooQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;568&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个module模块里，依旧可以有子模块，曾经可无限延伸（但不建议太多）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Project是个逻辑概念，Module才是最终的存在形式&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7698209718670077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIAWcHKIPBiaicI8WtiaibicyOsibc6IbpQNricQt9z7RTmgApOCxlaXg3CJong/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;391&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;错误使用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3549107142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIh8Ets8fOKDibib8lJ8HRD28NoC8neB1qxW5ticYekRBnToUlJNnibY84pQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;448&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个窗口，能看见全貌&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;弊端：&lt;/strong&gt;2. 视窗功能不单一。account、order、user属于不同项目，是为了解决不同问题而存在，没有理由放在一起
3. 干扰性太强。比如他们三都有类叫&lt;code&gt;ProcessService&lt;/code&gt;，那么在你查找的时候永远无法“精确定位”&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.21068249258160238&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI9Vpm9cDwTLASKX9OIaO7Q5wEUhibWREeDr2wXBWibR8ZFxyh0Kknkgkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;674&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;额外性能开销。比如你只想开发user，但还得把其它的加载进来，完全没有必要嘛。&lt;/section&gt;&lt;/li&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;说明：idea不能像eclipse一样close project的，毕竟人家那是workspace的概念，而idea同一视窗属于同一项目，总不能说关闭某个模块吧，模块一般相关性很强，完全没必要单独开/关&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;想一想，若你一个人负责了20+个项目，每次打开是不是得花上个几分钟呢？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;概念上混乱。这么放在一起，其实就不是user项目、order项目了，而是user模块、order模块，很明显概念上就不准确了&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6742596810933941&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIkX2PrX7WDEUY9m71w3EEfMjBfEOaVOJSsyXT8s0auuryCo7xkJP8eQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;正确使用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8830769230769231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI78goh5qc7DbmzKtU97l2qaicBEOOGAfiamedaxePEU6JJ7eH2NOORrMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;325&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种使用方式界面清爽，运行流畅，解决了上面错误方式的所有弊端。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;新建项目Project&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;万丈高楼平地起，使用IDEA的第一步一定是新建一个项目Project：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7806372549019608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIvLGT7rhZ2pMsoZk6PdSdmsibxEkaqecZ3NTceN2bUkycqcStUzpxibRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;816&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者你也可以在视窗&lt;strong&gt;内部&lt;/strong&gt;新建，顶部菜单栏&lt;code&gt;File -&amp;gt; New -&amp;gt; 三选一&lt;/code&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2718631178707224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIpWtGMGib93FLYJ7dNHMLcW8oYkUl35Z0fexg8W7xricxtDNbibWGreOibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;526&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三种创建方式：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建一个全新项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;打开现有项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从VCS版本控制系统里clone一个项目&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文就以1为例，因为2和3从本质上讲都叫打开项目，并不会经历创建流程。下面我们按步骤走一篇创建流程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步：选择创建项目的方式，本文选择创建创建Java项目&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6408839779005525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIPG5mIwDu5RsTxER8peNFY3SIibZiayrNSzPK2hIicHqLbwtibXy59tUq2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：选择根据模版创建项目。这个在maven还没出现之前挺有用，现在几乎不用了，因此一般都不勾选&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6408839779005525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIZ0IaMnKDgXpIANAyFyagCNx8VbYx0dicWXpjO43c69a2eIicUHlbkDmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步：填写项目名、项目位置（以及同步创建的模块名、位置等，可选）&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6408839779005525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoILE4fm6PzDic2M9FiaxoG7iamMdBWiawS1yrK7DfXA1ibiaWKrQRdqVib7slAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;①&lt;/strong&gt;：项目存储位置，一般作为整个项目的根目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;②&lt;/strong&gt;：内容根目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;③&lt;/strong&gt;：模块文件存放的目录&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;④&lt;/strong&gt;：项目格式文件（IDEA负责识别，后面它还会出镜）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;More Setttings&lt;/code&gt;选项默认是收起状态，也就是说大多数情况下创建时你并不需要修改同步创建的模块的这些信息，而实际上也确实是这么干的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击Finish，IDEA **100%**就会在新窗口（或者覆盖本窗口）打开新创建的这个项目：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43023255813953487&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIRHtvHkYcEhFqnYBbhIrJRiaXp3AckUtnqMWlTibwwbmHumicbeKOJbiaaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;344&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该项目在硬盘里的表现形式仅仅是一个文件目录而已：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.19875776397515527&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIUhqMzJzwBTMQLwMgHW9RsT0iaPNiaRUf0QGhicibGsBYuhEuGSyQDKlNgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;161&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;.idea文件夹的作用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个Project项目都对应&lt;strong&gt;1个&lt;/strong&gt; .idea文件夹（隐藏目录），该项目所有特定设置都存储在该.idea文件夹下，比如项目模块信息、依赖信息等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来讲它里面会有这些文件/目录：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;misc.xml&lt;/code&gt;：描述该项目一些混杂信息，如SDK、语言等级、项目输出的目录等等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;modules.xml&lt;/code&gt;：描述该项目有哪些Module模块&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;workspace.xml&lt;/code&gt;：描述视窗的信息。如Project窗口在左边还是右边，窗体大小，颜色，是否隐藏，滚动情况等等（每个Project都允许你个性化配置，规则都被记录在这个文件里）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;vcs.xml&lt;/code&gt;：使用的VCS工具信息，如Git&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了这些，一些插件也经常会往这个目录增加文件，如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;saveactions_settings.xml&lt;/code&gt;：saveaction插件的专属配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;jarRepositories.xml&lt;/code&gt;：远程仓库配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;encodings.xml&lt;/code&gt;：描述模块文件夹编码信息的配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;compiler.xml&lt;/code&gt;：描述每个module模块使用的编译器信息的文件。如使用1.8编译，是否加了编译参数&lt;code&gt;-parameters&lt;/code&gt;等等都在这里体现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来讲，这个文件夹里面的东西&lt;strong&gt;不用关心&lt;/strong&gt;，由IDEA/插件自己自动维护，我们只需要界面化操作即可。当然喽，若了解一二对于定位一些常见问题（如不知&lt;code&gt;-parameters&lt;/code&gt;是否生效）是有帮助的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;新建模块Module&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建好一个Project默认会有一个&lt;strong&gt;同名的&lt;/strong&gt;的module（Empty Project除外），如果项目比较小复杂度较低，一个模块足矣。但是，稍微有点复杂性的项目一般都希望进行模块拆分，建立多个模块，分而治之。比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;hello-service：实现核心业务功能处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hello-persistence：复杂持久化工作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hello-client：作为客户端暴露出去&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一步：顶部菜单栏给该项目创建模块&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2608695652173913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIjYKciaaRDic3K0lJJIohMEcy2JjFqlzibK0QLbOxznQcGia7Rd5wz1Gpxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;529&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然还有一种方式是在&lt;code&gt;Project Structure&lt;/code&gt;里创建（这个咱们下篇文章再聊）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6945054945054945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIPtfK1wKnnXK6h4KAWzRiaYXiaeVtHCzlvU1Np7zPXrScvDsVsqwToj4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;455&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二步：选择该模块类型，可以是Java项目、maven项目、Kotlin项目等等都行&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6408839779005525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIIXvfELtchqQNkHicdFfZBuDtHgPBjqoj2F1SLI7kUscJicao2Y7lEQmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三步：给模块命名，并制定该module模块的存在位置。一般来讲只需要写名称即可，模块的路径默认会放在project目录的&lt;strong&gt;子目录&lt;/strong&gt;下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6408839779005525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIqm7WA8EEMnWuibJEW6fdEpMV2nO8yAlFdJuMup6syBMJwLXw9XfQAiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于目录选择再强调一遍：默认情况下模块路径会在Project（或者父模块）的&lt;strong&gt;子目录&lt;/strong&gt;下，但这并不是必须的，你也可以改为和Project的同级目录也是可以的，逻辑上依旧属于Project的模块，不会有问题。但一般建议保持这种层级关系而不要修改~&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;若是父子目录，层级关系更明显些，否则是一种plat平铺目录关系，看着会不太“舒服”&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点击Finish，在Project视窗就可以看见该模块啦（层级结构展示哦）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9180790960451978&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoI7e3VvGuicxnnpecfDVeEZEUr5Ndjpqp1lGiamgOOibc5cib2EicT7L6d7SA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个时候的Project - Module层级结构图是这样子的：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4678492239467849&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIYiczicZibyKsTkjDbaibdljoIOaouJyLQ6hfuNYJ3XY9UHdicia79RcXgKdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;451&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;这时我就抛出一个问题，若要实现下图这种层次结构（plat全部平级），新建模块时需要注意些什么呢？&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2278719397363465&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIOg53CeDJGk0NhK7qM7icVm4vKfnkTwqmMYRLAc1TaTEWfibf06eTxHHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;531&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模块创建好后，这时再看看&lt;code&gt;.idea&lt;/code&gt;这个文件夹里的&lt;code&gt;modules.xml&lt;/code&gt;，内容为：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.18823529411764706&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIND5eBq5ultndhkT27Ro2wdruOx83RHToibpsbU1PFXUiaAiabR7ibialJJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;935&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;xxx.iml文件的作用&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个Module模块都对应一个&lt;strong&gt;同名的&lt;/strong&gt; .iml文件，用于描述该模块的相关信息。如：SDK、语言等级、依赖、源代码所在位置、输出路径等等。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主题是介绍IDEA的Project和Module两个重要概念，然后再通过具体示例的方式加深理解，讲的还是比较清楚的（可能是全网最清楚的？），希望可以帮助到你加深对IDEA的理解，&lt;strong&gt;再也不要把IDEA的Project比作Eclipse的Workspace&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单总结一下本文内容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Project是一个不具备任何编码设置、构建等&lt;strong&gt;开发功能&lt;/strong&gt;的概念，主要作用就是起到一个项目定义、范围约束的效果（比如user项目，里面所有内容应该是为了解决user问题而存在的），你也可以理解它就是一个目录，然后这个目录的名字就代表项目名&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Module模块是代码的实际表现形式。在默认情况下，一个Project对应一个Module，它俩“合二为一”，对于中大型项目来说，一般都会使用&lt;strong&gt;多模块&lt;/strong&gt;编程&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下篇预告：在IDEA中，对项目结构&lt;code&gt;Project Structure&lt;/code&gt;的设置&lt;strong&gt;尤为重要&lt;/strong&gt;，下篇就为你剖析该页面每个tab选项，到底如何玩转它，具备一个高手的样子，这对你理解Maven项目也将非常非常有帮助，敬请关注&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5982436882546652&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/crPesQVeyKJvHnClHWtwze76ghiaE1PoIBzX7lC5oUq39JOnGNVYuia2cKpvsqSyoUKIsYyN9zq6VEs8C7cLyGRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;911&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;本文思考题&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;看完了不一定懂，看懂了不一定会&lt;/strong&gt;。来，文末3个思考题帮你复盘：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;IDEA的Project和eclipse的workspace的本质区别在哪里？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何给Project/module单独添加依赖库？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;IDEA模块的.iml文件有什么作用？&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关注我&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分享、成长，拒绝浅藏辄止。关注【BAT的乌托邦】回复关键字&lt;strong&gt;专栏&lt;/strong&gt;有Spring技术栈、中间件等小而美的纯原创专栏。本文已被&lt;strong&gt;https://www.yourbatman.cn&lt;/strong&gt;收录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文所属专栏：&lt;strong&gt;IDEA&lt;/strong&gt;，公号后台回复专栏名即可获取全部内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;A哥(YourBatman)：Spring Framework/Boot开源贡献者，Java架构师。&lt;strong&gt;非常注重基本功修养&lt;/strong&gt;，相信底层基础决定上层建筑，坚实基础才能焕发程序员更强生命力。文章特点为以小而美专栏形式重构知识体系，抽丝剥茧，致力于做人人能看懂的最好的专栏系列。可加我好友(&lt;strong&gt;fsx1056342982&lt;/strong&gt;)共勉哦！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9831460674157303&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/crPesQVeyKJvHnClHWtwze76ghiaE1PoIdOWWVnE03sEvPRy1C8GicWnGyicEwmjSjTBPiaGEc93EOB8C8YfdxmJQg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;178&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;System.out.println(&lt;span&gt;&quot;点个赞吧!&quot;&lt;/span&gt;);&lt;br/&gt;print_r(&lt;span&gt;&#x27;关注【BAT的乌托邦】！&#x27;&lt;/span&gt;);&lt;br/&gt;var_dump(&lt;span&gt;&#x27;点个赞吧！&#x27;&lt;/span&gt;);&lt;br/&gt;NSLog(@&lt;span&gt;&quot;关注【BAT的乌托邦】！&quot;&lt;/span&gt;);&lt;br/&gt;console.log(&lt;span&gt;&quot;点个赞吧！&quot;&lt;/span&gt;);&lt;br/&gt;print(&lt;span&gt;&quot;关注【BAT的乌托邦】！&quot;&lt;/span&gt;);&lt;br/&gt;printf(&lt;span&gt;&quot;点个赞吧！&quot;&lt;/span&gt;);&lt;br/&gt;cout &amp;lt;&amp;lt; &lt;span&gt;&quot;关注【BAT的乌托邦】！&quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;br/&gt;Console.WriteLine(&lt;span&gt;&quot;点个赞吧！&quot;&lt;/span&gt;);&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;关注【BAT的乌托邦】！&quot;&lt;/span&gt;);&lt;br/&gt;Response.Write(&lt;span&gt;&quot;点个赞吧！&quot;&lt;/span&gt;);&lt;br/&gt;alert(&lt;span&gt;&quot;关注【BAT的乌托邦】！&quot;&lt;/span&gt;);&lt;br/&gt;echo(&lt;span&gt;&quot;点个赞吧！&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>