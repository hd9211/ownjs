<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3b51cb1ca8853a9f14542552be09e76f</guid>
<title>短视频 Go 研发框架实践</title>
<link>https://toutiao.io/k/gpas4sf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;span&gt;hulk是短视频研发部研发的基于G&lt;/span&gt;&lt;span&gt;DP2（Go Develop Platform ）的&lt;/span&gt;&lt;span&gt;go服务开发框架。它是⼀款⾯向业务的Web开发框架，提供了诸多开箱即⽤的组件和功能，可以⽤来快速开发Web服务。同时，依托于hulk框架并结合⼚内/业界优秀的开发实践，初步构建了⼀个符合业务应⽤场景的go⽣态体系。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;全文7330字，预计阅读时间 12分钟。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、产生背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;hulk框架是在“好看视频”服务端的go服务化架构升级背景下产生的。&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1 为什么要做架构升级？当前架构面临哪些问题？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好看&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.开发效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于主代码库，所有服务端同学都会在这同一个代码空间开发，此外还有依赖的第三方团队也会修改，频繁的修改/合并降低了开发效率，同时也加大了代码的维护成本和难度；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.上线效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：多用户开发同一代码库的另一个弊端就是上线等待，由于同一个时刻只能有一个分支上线（分级上线），导致相连的上线需求要排队等待。这也导致我们的同学摸索出“搭车上线”的模式，虽然加快了上线效率，但也加大了上线的风险，没有从根本上解决问题；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.运行效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：PHP在开发效率和灵活度方面确实有一定优势，但当所支撑的业务达到几千万DAU及以上时，我们必须要考虑服务的运行效率和资源成本等问题。PHP语言在多线程/多协程的支持上，弱于Java、C/C++、Go等语言，基于物理机部署的类单体服务部署架构，在资源利用率和服务扩缩容等方面也很难满足需求；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4.SRE效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在出现稳定性问题时，我们期望能够做到快速感知、快速定位、快速止损。目前基于sia的监控/报警，基于日志的问题定位方式距离理想目标还有一定的距离：一是同学要奔波于各个平台/系统获取问题线索，二是获取到的线索及信息维度很多时候也无法满足快速、精确定位问题的需求；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这些问题需要通过“4化”，从总体业务架构、部署架构、基础设施等多方面去解决： &lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.35545454545454547&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cQePujZt5aGmtr8IIqywqUicoIFgcDibRXLadSy4N0tuiaJ5e5tDkHZckg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2 为什么不直接基于GDP2 ？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5790909090909091&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ceGsjtS78WItsGn0f9pg3Ox65DiaNfjdkXic0S5d3icNJE1XlcqclP5FMg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;好看的go服务化升级工作开展时，GDP2还未正式发布，这也是其中一个因素。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.3 hulk与gdp2能⼒对照&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;下⾯从三个⽅⾯与gdp2做⼀个简单的对照，初步了解hulk的整体能⼒及与gdp2的⼀些差异。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;1.3.1 web server能⼒&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;hulk⽬前主要服务于web应⽤，⾸先了解⼀下hulk的web server能⼒。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40093023255813953&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2150&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cW3icWl2nRfKOTWJFLrINnDEfnv7hicXbbmMWehn5SdR2dthky8oho2icA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.2 功能/组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;功能/组件的丰富度及⾃身能⼒，很⼤程度上影响了框架对业务服务的⽀持能⼒。备注：ral资源访问层&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7428256070640177&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1812&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ciaib2czZicMOHfJw6BAcWO1SRUOsiaeFKjQbUpwJmCCHhsZ884me1XBQibA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.3 框架周边及基础设施&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;框架从来不是“单打独⽃的”，它需要有周边⼯具和基础设施来⽀持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40987654320987654&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1620&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ckdzeUZ3tkx2lbkUEa3HLTw6nYkJBRe1nibzDlZ2A94mBia1qbXaA5WKA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;65&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;NOTE：&lt;/span&gt;&lt;/p&gt;&lt;span&gt;1. 好看在做go化时，也调研了开源社区⾥⽐较优秀的⼀些⼯具系统和⽅案并引⼊， hulk中默认添加了对这些基础设施的集成；&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;1.3.4 对照总结&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;本节主要站在hulk能力角度与GDP2做了一些方面的参考对照。以上对照，可以概括为4点：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.很多基础能⼒，hulk是复⽤gdp的，如：bns、net、codec等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.⼀些通⽤/扩展组件，hulk按照业务需求场景，进⾏⼆次封装和增强，如：httpserver、ral、redis、mysql等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.对于gdp⽬前没有⽀持的⼀些业务需求，进⾏开发集成，如：定时任务、配置中⼼、服务治理等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4.参考业界开源实践，引入了一些新的基础设施：如prometheus+grafana集群、sentry集群、故障定位系统等；&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;GDP2由几十个模块共同构成，由于时间有限，可能个别功能点的对照有偏差。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;strong&gt;&lt;span&gt;二、了解hulk&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 设计思路&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.46090909090909093&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cK4nXh1VLic1lUV76yzbiaYia2jIcia86ZvhGspLCiaIVBBicZOaic4wBhV1DA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.2 框架结构&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从功能上来看，hulk的整体能力可以划分为四层：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6809421841541756&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1401&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbO85j9r29IwiajnBRWCNnTDiaYb1eMA5f42aXwQmd2Rt011HmWtrDEVeZU492Mv8S6pwndtEPEicYLj2g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;2.2.1 基础组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;提供了绝大部分项目都应该需要的基础能力，也是其他上层功能组件很可能依赖的组件。hulk框架通过这些基础组件，使上层应用可以无感的与基础设施进行集成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.2 通用组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;这一层的组件能力是通用的，提供了一些管理控制和切面能力：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.3 扩展组件&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;前两层功能对直接的业务处理逻辑参与较少，这一层的组件其能力多是为了处理某一类特定业务逻辑和场景，如redis/mysql/定时任务等：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;1.redis组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于GDP2 redis模块的封装并作了功能增，提供了：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a)&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;strong&gt;metrics hook&lt;/strong&gt;，对所有的redis请求进行监控(prometheus)打点（latency/p99/qps/错误码分布等）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;) sentry hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持将redis错误在记错误日志同时发送到sentry；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;c) 降级hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持按集群/实例/百分比维度降级redis访问；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;d) 熔断hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持按集群/实例/错误率/慢请求率对依赖的服务进行熔断设置；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;2.mysql组件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：mysql组件是基于GDP2 mysql和 gorm_adapter的封装，在已有能力之上，进行了以下功能扩展：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a) 提供了metrics hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，对所有的mysql请求进行监控(prometheus)打点（latency/p99/qps/错误码分布等）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b) 提供了sentry hook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，支持将mysql错误在记错误日志的同时发送到sentry；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3.分布式锁&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：hulk提供了基于redis的分布式锁实现。其中redis连接是基于GDP2的redis模块的改造，分布式锁功能是封装了开源项目redsync；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4.定时任务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：支持两种定时任务模式；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;a) 带分布式锁的运行方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：对于多实例部署的定时任务，如果任务不是幂等的，则需要使用分布式锁对任务的调度运行进行控制；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;b) 不带分布式锁的运行方式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：此模式下，如果部署了多实例，则所有实例上同一时刻的定时任务，会同时执行；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;2.2.4 http server&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;hulk（目前只提供了http server能力）提供了很多通用且高效的http middleware，并对外暴露了一些管理控制接口，在一些特殊情况下，可以通过这些管理接口，在运行时干预服务的运行：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;logger_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于记录http的请求、响应、耗时等信息，同时支持实时修改日志打印策略-如按idc/ip/百分比/uid/cuid等维度打印；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;timer_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于http请求的监控埋点，可以输出可用性、tp99、流量、平响、错误码等metrics，维度包括服务级/idc/instance等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;recover_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：用于捕获http 请求链路中的painc事件，并可自定义panic handler逻辑，如通过结合sentry和如流，可以实时感知并定位panic事件；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;flow_control_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：接口限流组件，可以通过配置中心或管理接口，对接口按idc/instance维度进行限流；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;timeout_middleware&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：通过该middleware或与配置中心结合使用，可以对接口按idc维度进行超时控制；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他middleware可以查看hulk文档&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;（如-internal_user_middleware、jager_opentracing_middleware、thirdparty_auth_middleware、b2logger_middleware等）&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;管理控制接口&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如健康检查接口，服务治理-熔断、限流、降级接口，metrics接口，线上实例性能调试接口等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.3 框架生态&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;通过近一年的建设，我们初步构建了一个以hulk框架为中心的、符合好看业务场景的go生态体系，包括：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标准目录规范&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：避免各个项目结构不统一，减少项目维护难度和工作量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码生成器&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于hulk框架、标准目录规范、组件使用规范的代码生成器，目的是减少通用模块/组件使用不规范，解决通用流程编码、处理不一致的问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;hklib&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：好看的通用lib库，提供了一些的通用功能（也包含了很多PHP转go过程中的一些orp通用/基础的函数/功能），也提供了50+对中台服务的调用client，减少重复代码，提升研发效率，提升可维护性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基础设施&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：prometheus+thanos集群、sentry服务、apollo集群、pyroscope性能分析平台等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;iconf&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：好看自研配置中心，能力在对齐开源的Apollo之外，还增加/增强了一些功能，如-key维度的发布、更安全的配置获取、更简洁的操作页面、类分级发布等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;artemis&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：服务可视化与故障智能定位系统，可以在该系统中看到服务的部署架构、服务内部调用链、多维度细粒度的近实时监控和关键日志。在发生可用性故障时，一些故障问题可以秒级的定位到原因和具体代码；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.4 框架应用情况&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;目前短视频所有go服务都是基于hulk构建的，在资源、接口性能和可用性等方面都有一些阶段性产出和收益。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk框架应用现状：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9ciaSWyABMibSic5Y31qDeianF186nEz3CD6VnXLS3tUtckUtFayWagqBCmQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1036&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;297.5363321799308&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2857142857142857&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1036&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5p8giadRibbO85j9r29IwiajnBRWCNnTDiaYGvy05xDgiaZjVJTajIVm84M7vcPPCrqiab2aicY4HbAxQRqP0ckVhpBrw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;资源和性能收益：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6172506738544474&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2226&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cM5fcvc8YCMUSJmAHsRMibDv9j28szNCNsQRKUsic9W7QaRamdePrQ5Ww/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;blockquote data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;58&quot; data-source-title=&quot;&quot;&gt;&lt;section&gt;&lt;section&gt;资源和性能收益，很大一部分要归属于PHP-&amp;gt;Go的技术栈切换；而框架为服务应用相应技术栈特性提供了便捷和高效的方式。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.4 hulk服务架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下图描述了一个微服务（基于hulk）的架构全景图：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8809090909090909&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cDsqiaAbVdjBA77n0M4NFRI9m5aJicIIM8CYibIiay3hFJXgvPekgp2zKicQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;hulk组件初始化及与周边基础设施的集成，基本都可以通过环境变量/配置文件来完成。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、框架能力与应用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下面我们从日常开发遇到的一些痛点，来介绍框架的能力，并配以示例来说明这些能力是如何减少或解决痛点的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 如何提升代码质量？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;代码质量会直接或间接的产生以下影响：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会直接影响代码维护成本；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会影响程序出bug的概率；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码质量会影响程序运行效率；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;hulk框架从以下三方面分别来提升代码质量。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.1 规范代码组织结构&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;降低项目维护成本，提升研发效率。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.2 编码规范和静态检查&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;提升代码可读性，减少低级代码bug&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;遵循百度Go编码规范+业务编码补充规范；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用GDP的代码检查工具：go_fmt、goc；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.1.3 配套的压测和性能分析平台&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;确定服务的压力边界，发现潜在的性能问题。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5036363636363637&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cNicJMA8uu8k0usMFDKRo8kSrOdK353BoiaUr54H5o5KQleL4wC1Qqo5A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5015625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c3ZIqK4JSMyXaeuHTdgp6EGkesxmeALcoS0w5HQVwpqnD2W1M826iaJA/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 如何提升开发迭代速度？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何让开发者专注于业务逻辑与实现？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如何让开发者快速响应并完成产品需求？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;hulk框架为提升迭代速度，提供了以下支持。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.2.1 丰富的实用组件/功能&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;提升研发效率，避免试错，减少出错。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;559&quot; data-ratio=&quot;0.988984088127295&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cTlHXcC8GSle3hEJXsQiayXJr0Kr7gHNXcDNd4V21Ovo1VGnHUeibBnwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;857&quot; data-ratio=&quot;1.5161870503597121&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cGHaaI7eiaLibtOU6pk8yiboxNED5ODF0LwYydvSSFkAwYKvFMGGeCVRKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1112&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.2.2 配置化、低代码支持&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;减少代码的修改和上线，提升需求的响应和完成速度。&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;262&quot; data-ratio=&quot;0.4861842105263158&quot; data-type=&quot;png&quot; data-w=&quot;3040&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c6nGbZwV2EKnJx58HngLv0uRNE1k6SePxjSaVYLiaW6DyNeqfkgsf30g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.3 如何快速感知并定位问题？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk为提升SRE效率，从以下几个方面提供支持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.3.1 完善的事件追踪定位与通告能力&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;能够实时追踪开发者自定义的错误并通告&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;331&quot; data-ratio=&quot;0.635948210205636&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cjGKYdxmicpYFkjFYf4QDI2KOeqSOV59FiasDEZgo4S8HPo5cK8qzodJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2626&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;512&quot; data-ratio=&quot;0.9097744360902256&quot; data-type=&quot;png&quot; data-w=&quot;1862&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cSXJNnGcMdIvnoTTQ4m6ho1xkv2KPpjOaNvhicJpRibDNh1beEBiaJuN2g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.3.2 prometheus+sia监控支持&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;通过prometheus与noah的互补，支持多维度全方位监控，能够获得更多的服务稳定性相关信息&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.3.3 ftrace日志查询与分析功能&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;hulk默认支持ftrace平台的日志格式&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;240&quot; data-ratio=&quot;0.5192307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c6oMpYl3Swof6mzRUygtEKkY9eWSaqQXGgDbNG6RugWs7ib4WOklqJxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3016&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;3.4 基于hulk的服务可视化和故障智能定位系统&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;artemis是我们基于hulk研发的一款服务可视化与故障智能定位追踪系统，它集服务部署架构可视化、近实时多维度监控、关键日志、服务调用链等多方面信息，可以快速、高效、精准的发现和定位稳定性问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;该系统目前已接入好看/全民/度咔等多个后端服务，极大加速了故障定位效率。在一些故障场景，可以秒级定位问题，给出问题的代码行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;3.4.1 服务部署架构&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过实例列表，可以获取服务的idc列表、instance列表和详情，并提供了便捷高效的调试入口和登录指令：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;324&quot; data-ratio=&quot;0.4572072072072072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cH2nDBfWXoQ9MJYahibzp1pMroWibulqE6F1kL1OD6X2e1iaVtibdmSxjLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2664&quot;/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.4.2 近实时多维度监控&lt;/span&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;artemis提供的近实时监控，能够提供更多维度信息，这些维度是sia和prometheus无法提供的，如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;409&quot; data-ratio=&quot;0.7002477291494632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cur1bpiaje4avxCjPat3l2iavdV4yCqySpte5UThnzYYVLOkz3LvIibW3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2422&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;3.4.3 关键日志&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;由于与hulk的深度集成，在业务代码中打印warning级别以上的日志时，artemis能拿到更多的日志信息，如-各维度信息、调用栈、上下文等：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;310&quot; data-ratio=&quot;0.5514096185737977&quot; data-type=&quot;png&quot; data-w=&quot;2412&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9c00nYMNSzY2yOh4eVbP1Qn747CwqlITCCRbeMPZmfOWurAYlEVwTKSA/640?wx_fmt=png&quot;/&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;576&quot; data-ratio=&quot;0.9359116022099447&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cBspI26MqPnA0oRicZX2ZEaboguPIzZGibUIut8bqPgd8LoZqFlVXn4gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1810&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;3.4.4 服务调用链&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;在hulk框架的协助下，artemis还可以获取到URI及URI所依赖的RAL调用信息，由此可以构建出请求调用链，并实时展示调用链上的相关metrics信息：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6636363636363637&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cyxFMP7hrq6gg7VvDK9n8pfCOBFBcafa7usung0DXy2YM85dO1WPIOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1100&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不同颜色的链路代表不同的可用性：红色-1个9及以下，黄色-2个9，蓝色-3个9，灰色-4个9。通过服务调用链，可以非常直观的看到服务里，哪个接口有问题，还可以看到哪些下游影响了这个接口的可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;3.4.5 使用案例&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;通过与报警系统的联动，可以在发生报警的第一时间，在artemis系统中找到受影响的服务及URI，确定是否是下游引起，错误是什么，哪一行代码报了错等，以下是一个artemis的实际应用示例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;324&quot; data-ratio=&quot;0.5645371577574967&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/5p8giadRibbOibc4MIGqwdTRTRxGhibvhj9cibYd6ljHY5WpH7mnm498UJZmWrjgE9aFBFwty01V2iaLXaOC2Syf2znw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3068&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;hulk虽然是⼀个新的go语⾔web框架，但不是重复造轮，⽽是站在⼚内和开源软件的基础上，结合业务实际开发、部 署、运⾏、运维环境，对这些开源框架和⼯具进⾏取⻓补短、⼆次开发，最终切合实际的业务使⽤场景。同时，围绕hulk初步构建起的go生态，为服务在开发、部署、运行、运维等各个阶段都提供了有力支持。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，希望短视频研发部在go服务化架构升级/研发框架上的⼀些实践、⽅案和经验，能够给有相同架构升级需求、 在go项⽬实践中遇到问题的其他业务线同学⼀些帮助和参考。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、附录 （外网不可访问）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 框架及使⽤⽂档：&lt;/span&gt;&lt;span&gt;http://hulk-go.baidu-int.com/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. hulk底层是基于GDP2的，了解gdp也更有助于了解hulk：&lt;/span&gt;&lt;span&gt;http://gdp.baidu-int.com/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;短视频研发部，负责好看视频、全民小视频以及多款创新APP的孵化研发工作。是公司级战略产品，承担百度系产品矩阵短视频内容供给任务，重点支持百度搜索和信息流视频化，肩负百度内容生态视频化转型使命。&lt;span&gt;仅用两年的时间就实现用户规模从零到亿级增长，日活数千万。拥有百亿级流量，亿级数据量，丰富新奇和全面的产品玩法，多类型的技术系统和领先的技术架构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎加入&lt;span&gt;短视频研发部&lt;/span&gt;，社招，实习，校招都要哦&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简历投递邮箱：geektalk@baidu.com （投递备注&lt;/span&gt;&lt;span&gt;【短视频】）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;参考阅读：&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术原创及架构实践文章，欢迎通过公众号菜单「联系我们」进行投稿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;高可用架构&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;改变互联网的构建方式&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMDU1MTE1OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8XkvNnTiapONl06YmHad4csRU93kcbJ76JIWzEAmOSVooibFHHkzfWzzkc7dpU4H06Wp9F6Z687vIghdawxvl47A/0?wx_fmt=png&quot; data-nickname=&quot;高可用架构&quot; data-alias=&quot;ArchNotes&quot; data-signature=&quot;高可用架构公众号。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e6a4935b722c2937a477d08eb105e304</guid>
<title>DDD 之于逛逛内容营销中的应用</title>
<link>https://toutiao.io/k/qxynml6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;636&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;DDD指的是Domain-Driven Design 即领域驱动设计，DDD并不是关于技术的，而是关于讨论，聆听，理解和发现业务价值。&lt;/span&gt;&lt;span&gt;DDD让我们的关注点向软件系统所提供的业务价值方向思考。&lt;/span&gt;&lt;span&gt; DDD最大的好处是：&lt;/span&gt;&lt;span&gt;接触到需求第一步就是考虑领域模型，DDD让你首先考虑的是业务语言，而不是数据和行为。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我通过逛逛的内容营销项目来介绍一下DDD在逛逛内容营销中的应用。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;逛逛营销业务背景&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在做逛逛内容营销的这半年的里前端做了很多的营销活动，如下图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;232&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.5155555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPfE3OEZvEIRWXpakg3vHeoELXvzoRZRMLelnmMO5RFsibSgZykc7nyYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们做了各种大大小小的营销活动后，觉得内容营销活动可以剥离出一套通用的解决方案，它们看起来总是大同小异，首先想到的就是搭建。把每一个业务模块开发成组件，然后开放给运营自由组合。然而这样有一个弊端就是：每个营销需求来了之后我们都需要评估哪些是已有组件，哪些需要新开发。而且对运营搭建的页面完全失去控制，对性能体验之类的也无从谈起--因为你完全不知道运营会搭建出哪些神奇的布局页面......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;业务分析&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从业务方的角度思考营销活动，每次的营销都有一定的目的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPLFag5vYibj0jKCGKtHzbvCTxmeHdO8SsDyia3qUBSraDiccbzibo164fFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;3.1481481481481484&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPiayKXMTq8rrfkbxPe1peibQadVOeNb4k0K9eCjFGUV7x1RYicJX77RPpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;108&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.0365853658536586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPCNNdlyktsAgwfyzR91CDOhIMJ5aY0ekiaXnISV71XUwdesbGEEKMgUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;328&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;从运营的角度看不同角色的视角&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;不同角色对营销活动的视角是不一样的&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容浏览型，--为了给用户种草&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;任务打榜型，--吸引某些流量明星的粉丝&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;权益抽奖型。--采用权益刺激培养用户某些心智&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+任务列表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;轮播图+权益+feed流&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个内容营销都可以理解成一种营销玩法，每个玩法都有一个核心组成，用户打开这个活动承载页，就要引导用户去完成这个核心玩法。所以浏览型的活动会突出海景房；任务型的会突出任务；权益类的会突出权益。诸如此类。其他的一些能力比如: banner位，关注卡，话题分类，拉起发布器这些都是非核心元素。他们的存在只是为了辅助装饰整个营销玩法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样我们就可以把玩法抽象成模版，每个模版对应一个玩法。那么如何划分玩法模版呢？这里就需要用到DDD的思想，领域驱动设计。&lt;br/&gt;&lt;br/&gt;从DDD经典架构的六边形架构得到一些启示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;img data-backh=&quot;380&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.8444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPNwbVXQrZGQGzgmoHLQYDgPH9kFph5FMYIwibaxdmYAHEM9FibQzuFXpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;六边形架构又称为端口-适配器，六边形架构将系统分为内部（内部六边形）和外部，内部代表了应用的业务逻辑，外部代表应用的驱动逻辑、基础设施或其他应用。&lt;br/&gt;&lt;br/&gt;那么我们的营销活动架构设计可以参照此思想：把一个营销活动划分为核心模块&amp;amp;装饰性模块，核心玩法对应了内部业务逻辑，装饰性模块对应了外部驱动逻辑，他们一起组成了一个营销活动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;158&quot; data-backw=&quot;450&quot; data-ratio=&quot;0.3511111111111111&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPjDAzTCCkJ19mdfpzECCf5mZtC9MoxnMqv5DgPkMjYzW7WFVZxvUPRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;建立领域模型&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;领域驱动设计，旨在建立合适的领域模型。玩法模版就是我们要定义的领域模型&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;核心模块=&amp;gt;玩法模版=&amp;gt;活动页面&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;海景房(轮播图)、feed流、任务列表、权益抽奖&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为核心模块，把&lt;/span&gt;&lt;span&gt;&lt;strong&gt;banner卡片、关注卡片、话题卡片、异步发布等&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;定义为装饰模块。核心模块的排列组合形成核心玩法，核心玩法与N个装饰模块形成一个营销活动，区别在于：核心模块是不可重复的，装饰性模块可以随意重复。也可以理解为：装饰性模块为活动玩法本身的能力的表现，这些模块唤起了这个能力。&lt;br/&gt;&lt;br/&gt;整体系统架构图如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-backh=&quot;443&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.7763975155279503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPWahQtDX6T4UXTiaaZhiaCpiaVbJCt2fhHYvfNyicDYSEAV4kQy9SBG3MWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们对这个架构有以下约束：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;核心模块运营同学无法删除or添加，只能隐藏&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;装饰性模块只能在核心模块的楼层上面or下面进行无限制的添加&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新增一个玩法需要新开发一个页面。一个玩法对应一个唯一的页面地址(分治法)。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此我们的营销活动整体链路如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-backh=&quot;266&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4596069868995633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPDJNWdFwVkjzibUAaCQ5HNgYxGgSBlIX2WRjoWXwZuuK1gD9yqEMTdibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1832&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这套解决方案的核心在于：运营在开始一个营销活动的时候需要明确知道自己的活动目的是什么，然后选择对应的玩法模版(不同的玩法模版解决不同的运营诉求)，运营可以在核心模块的上下界限随意组合装饰模块，形成自己的活动页面。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;把每种玩法固化下来，也可以把相关的玩法数据沉淀下来，好的玩法用的人就越来越多。差的玩法业务数据不好，用的人就少了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-id=&quot;86516&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86516&quot;&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;173:596&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;有的同学可能会觉得这套解决方案的缺点在于玩法的迭代需要依赖前端和产品去沟通确定，然后再进行组件的组合开发，不如把组件完全开放给运营自由组合方便，不过在我看来这并不是问题，作为业务前端我们本来就需要去深入理解每个业务需求，完全的自由预示着完全的失控，其次我举例说明一下这套模板化方案的优势：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;比如我需要在页面的两个元素唤起逛逛内容发布器，这两个模块长的不一样，那我可能需要引入两次发布器的能力，但是在这个模板化的解决方案中，发布器的能力已经集成，只需要把唤起发布器作为一个特殊逇素材坑位处理就行了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在于强控玩法之后我们可以对页面的性能做出很多优化措施既保证了视觉标准规范也保证页面的性能体验。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其实运营有时候并不需要那么多的营销玩法页面：参考蚂蚁保险的营销搭建体系的经验&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;运营搭建了几百个营销页面真正有区别的只有&lt;/span&gt;&lt;span&gt;几十个页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;✿ &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;拓展阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650427571&amp;amp;idx=1&amp;amp;sn=bfc3c1c6f189965a1a4c7f3918012405&amp;amp;chksm=839698abb4e111bd5e02344f27d86c928ccfe4d3da1649817b02924c07f681fc1a7ea818f442&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;103&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.17844202898550723&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPnbwch5MHwuJ5j3Nb8ibSFXVGVvxRhc8kKRDcnwsvfUIoZBmRCG3K5Ew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650414919&amp;amp;idx=1&amp;amp;sn=0ad1df1a1b0e2488f7faa21008fdbdd0&amp;amp;chksm=8396d75fb4e15e49341b07022780dcb8dca66a0efb7f129d4de86a5ef5d8a890f6e0d2fd6432&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;94&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16304347826086957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju8jhaGWT7wf9Yb9PWdibyyaPY9cZgJV13MZ20yKfSaffhK82gwg0PVxf5xckica3O5g2cic0tYv8JXGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1104&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;|&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;泉脉&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;编辑|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;橙子君&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;出品|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阿里巴巴新零售淘系技术&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;96&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ef943d93925e08fe2fb051a99d0c7a18</guid>
<title>VLDB 2021 论文推荐（一）</title>
<link>https://toutiao.io/k/j95sviy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-sourcepos=&quot;3:1-3:264&quot;&gt;&lt;strong data-darkmode-color-16275682949322=&quot;rgb(255, 23, 0)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)&quot; data-style=&quot;font-family: &amp;quot;Source Sans Pro&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Arial, sans-serif; font-size: 16px; text-align: start; white-space: normal; caret-color: rgb(52, 73, 94); color: rgb(233, 0, 0);&quot; class=&quot;js_darkmode__1&quot;&gt;&lt;em data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-style=&quot;color: rgb(52, 73, 94); text-size-adjust: auto;&quot; class=&quot;js_darkmode__2&quot;&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__3&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__4&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(217, 33, 66)&quot; data-darkmode-color-16107273892940=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-color-16121907968588=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(217, 33, 66)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(217, 33, 66)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;▲ &lt;/span&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(2, 30, 170)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__5&quot; data-darkmode-color-16094149065186=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(2, 30, 170)&quot; data-darkmode-color-16107273892940=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-color-16121907968588=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;点击上方&quot;多颗糖&quot;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;em data-darkmode-color-16136621561195=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-style=&quot;max-width: 100%; letter-spacing: 0.544px; background-color: rgb(255, 255, 255); text-size-adjust: auto; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__6&quot; data-darkmode-color-16165880998151=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(128, 157, 185)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;strong data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; font-size: medium; letter-spacing: 0.544px; color: rgb(0, 0, 0); font-family: -apple-system-font, system-ui, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei UI&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__7&quot; data-darkmode-color-16094149065186=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-16107273892940=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-color-16121907968588=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16275682949322=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-bgcolor-16068282692859=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16068282692859=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16068282692859=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16094149065186=&quot;rgb(136, 136, 136)&quot; data-darkmode-color-16107273892940=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16107273892940=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-color-16121907968588=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16121907968588=&quot;#fff|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16121907968588=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16121907968588=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16136621561195=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16136621561195=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16136621561195=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16136621561195=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16165880998151=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16165880998151=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16165880998151=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16165880998151=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16178855864317=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16178855864317=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16178855864317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16178855864317=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16195315735269=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16195315735269=&quot;#fff|rgb(52, 73, 94)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16195315735269=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16195315735269=&quot;#fff|rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; color: rgb(2, 30, 170); text-align: center; font-size: 11px; letter-spacing: 1px; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__8&quot; data-darkmode-color-16275682949322=&quot;rgb(39, 84, 255)&quot; data-darkmode-original-color-16275682949322=&quot;#fff|rgb(52, 73, 94)|rgb(233, 0, 0)|rgb(52, 73, 94)|rgb(0, 0, 0)|rgb(2, 30, 170)&quot; data-darkmode-bgcolor-16275682949322=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16275682949322=&quot;#fff|rgb(255, 255, 255)&quot;&gt;关注公众号&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;3:1-3:179&quot;&gt;VLDB 2021 本月刚举办完毕，由于千夜姐姐说过“&lt;strong&gt;指望看完 DDIA 就做 infra? 没戏。&lt;/strong&gt;”于是赶紧膜一下本月刚结束的 VLDB 2021 有哪些新东西。&lt;/p&gt;&lt;blockquote data-sourcepos=&quot;5:1-5:228&quot;&gt;&lt;p data-sourcepos=&quot;5:3-5:228&quot;&gt;VLDB (Very Large Data Base) 是数据库研究人员、厂商、应用开发者以及用户广泛参与的年度国际会议，它与 SIGMOD、ICDE 被公认为数据管理与数据库领域的三大国际顶尖学术会议。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-sourcepos=&quot;9:1-9:29&quot;&gt;Storage and in-memory DBMS&lt;/h2&gt;&lt;h4 data-sourcepos=&quot;11:1-11:63&quot;&gt;Constructing and Analyzing the LSM Compaction Design Space&lt;/h4&gt;&lt;p data-sourcepos=&quot;13:1-13:429&quot;&gt;LSM-tree 作为如今最广泛讨论的存储引擎，每年都有一些新的研究出现。为了提升读性能，LSM-tree 会定期压实(Compaction)数据，compaction 从根本上影响了 LSM-tree 引擎在写放大、写吞吐量、查找、空间放大和删除方面的性能，因此，选择适当的 compaction 策略至关重要。本文提出一种评估和设计 compaction 策略的关键性能指标，包括：&lt;/p&gt;&lt;ol data-sourcepos=&quot;14:1-18:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;压实触发器(the compaction trigger);&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据布局（the data layout）;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;压实粒度(the compaction granularity);&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据移动策略(the data movement policy)；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1icJ843V7Xf1Qnwt4ODsLI1tvfzzDdibCRC67jKyibJhbPcIiamyR9WZGDw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;697&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;274.9411764705883&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3931133428981349&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1Bic9T9ymUfKd7v5YbgXjbW6MeMjSGLFexV0uOOzY1Y8yPXokKiaOVouA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;697&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;22:1-22:123&quot;&gt;如图所示，这张图展示了各种不同的压实策略，这些方法又可以组合出已有的和全新的策略。&lt;/p&gt;&lt;p data-sourcepos=&quot;24:1-24:134&quot;&gt;此外，本文还分析了 10 种 compaction 策略，并给出了结果和收获，这些信息提供了 LSM-tree 的设计指导。&lt;/p&gt;&lt;p data-sourcepos=&quot;26:1-26:238&quot;&gt;其实我很喜欢这种偏总结型的文章，是非常好的学习材料。笔者打算写一个深入讨论 LSM-tree 的专栏，本文提供了很好的 compaction 策略相关的参考。做存储引擎设计的同学值得一读。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;28:1-28:83&quot;&gt;Taurus: Lightweight Parallel Logging for In-Memory Database Management Systems&lt;/h4&gt;&lt;p data-sourcepos=&quot;30:1-30:418&quot;&gt;DBMS 通过写入一个持久性的 WAL 来实现故障恢复，这样的单一串行日志可能成为 in-memory 数据库的性能瓶颈。Taurus 充分利用现代多核硬件的并行能力，提供一个并行写入多日志流方案，主要使用向量化的日志序列号(log sequence number Vector, LSN Vector 或 LV)，同时确保能够追溯向量之间的依赖关系，以在恢复时被正确执行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43781094527363185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1iaoS5U5sMHWPU8grzPxD9ibQ541OYJHsY8dzzbicbP7OzsTgHYPS9bLNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;34:1-34:189&quot;&gt;本文作者 Yu Xia 是姚班大佬，现在 MIT 攻读博士；作者中还有著名的数据库网红 Andrew Pavlo。如果你在寻找一种更高效的并行 WAL，该文值得一读。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;37:1-37:61&quot;&gt;CoroBase: Coroutine-Oriented Main-Memory Database Engine&lt;/h4&gt;&lt;p data-sourcepos=&quot;39:1-39:337&quot;&gt;基于内存的数据库另一个可能开销是，一些指针类的数据结构导致多核 CPU 缓存未命中，而通过 C++20 的协程切换能够改善缓存未命中的情况。CoroBase 非常有意思的地方就是用上了最新的 C++20 的协程，将一次事务处理建模为一个 coroutine，保留了 CPU 的预取。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5739837398373984&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1Erg71o0brSSlw8yhfNuT8sRPwFuibmO1kzaXamNExIJgkxBaEP3vicFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;43:1-44:114&quot;&gt;通过论文来看，通过更好的协程切换，应该比 CPU 缓存未命中开销更低(the&lt;br/&gt;switching overhead can be cheaper than a last-level cache miss)，如果我理解错了，希望大家纠正我。&lt;/p&gt;&lt;p data-sourcepos=&quot;46:1-46:146&quot;&gt;CoroBase 源码开源：https://github.com/sfu-dis/corobase， HackerNews 也有过相关讨论：https://news.ycombinator.com/item?id=25281377。&lt;/p&gt;&lt;p data-sourcepos=&quot;48:1-48:82&quot;&gt;论文最有意思的就是这么快就用上了 C++20协程，感兴趣的同学我之前也写过《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwODA2NjIxOA==&amp;amp;mid=2247484221&amp;amp;idx=1&amp;amp;sn=4c9bebb3236a4dc83f3d5b3dbaf54264&amp;amp;chksm=970980f8a07e09ee8cd5458d88c5eed0178d0c389d696c680f4599388c5fe98a780f2bdbe736&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;如何编写 C++20 协程&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何编写 C++20 协程&lt;/a&gt;》。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;51:1-51:82&quot;&gt;Toward a Better Understanding and Evaluation of Tree Structures on Flash SSDs&lt;/h4&gt;&lt;p data-sourcepos=&quot;53:1-53:580&quot;&gt;本文也是一篇总结性加避坑的文章，讨论了如何更好的理解和评估闪存 SSD 上的树结构。文章提出，由于树结构的内部行为对性能的影响，以及 SSD 底层逻辑的特殊性，SSD 上对数结构进行基准测试是一个复杂的过程，容易出现不准确的评估。本文通过 RocksDB 和 WiredTiger 确定了 7 个 SSD 基准测试陷阱，该陷阱会导致对关键性能指标的错误测量，导致生产环境中无法实现最优部署。当然，本文还提供了避坑指南来获得更可靠的性能测量结果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1ibU5eaMhblLlsGF5eanQRmq6yZQUnibz9o7nbeze1MnAuPgtw7nxepgQ/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;652&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;256.0622837370242&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3911042944785276&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1u0WibApBnQxafqd9jQK2NJCvvIfTYeqfLWr2KnYmXb2KG8Q5US5JXnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;58:1-58:80&quot;&gt;文章比较易读也挺有意思，推荐研究 SSD 存储的小伙伴阅读。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;60:1-60:22&quot;&gt;Distributed Systems&lt;/h2&gt;&lt;p data-sourcepos=&quot;62:1-62:55&quot;&gt;&lt;strong&gt;又到了我们最喜欢的分布式系统环节。&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;64:1-64:85&quot;&gt;Seagull: An Infrastructure for Load Prediction and Optimized Resource Allocation&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6857142857142857&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1qxfSa0eoyPXta2ibQibL6WWPTlfricJmFUCjxJqETicWL4iaOI16BbEfhKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;840&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;69:1-69:451&quot;&gt;来自 Microsoft Azure 团队，Seagull 是一个采用 Data Science 来预测用户负载、优化资源分配、控制成本的基础架构。Seagull 会收集每台服务器的数据，并通过机器学习来预测每天服务器未来24小时的用户负载。Azure 在生产环境中的 PostgreSQL 和 MySQL 服务器中部署了 Seagull，并且在低负荷时间安排进行备份，最大限度减少了负载干扰，提升了用户体验。&lt;/p&gt;&lt;p data-sourcepos=&quot;73:1-73:286&quot;&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;75:1-75:88&quot;&gt;MorphoSys: Automatic Physical Design Metamorphosis for Distributed Database Systems&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3895004233700254&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1uofMa79cibaJUOiarsc0PkAITPgJ6HJNSQfV8ALhsGMFAkpyGxGgj0tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1181&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;79:1-79:558&quot;&gt;分布式数据库通常通过分片和复制来存储数据，困难在于如何决定哪些数据进行分片和复制，每个选择都是 trade-off，而一个糟糕的选择会大大降低性能，目前很多数据分布通常是静态的，不能适应 workload 的变化。MorphoSys 是一个可以根据工作负载动态选择和改变其数据分布的分布式数据库系统，MorphoSys 通过 learned cost model 来对所有的数据分区、复制和放置进行综合决策，并通过一个新的并发控制提供更高效的事务执行。&lt;/p&gt;&lt;p data-sourcepos=&quot;81:1-81:138&quot;&gt;这里说的动态适应会更智能一些，例如下图所示的范围查询，会自动调整数据分布而避免查询多个分片。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.33203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1bsjzQ2xr1Za7wxPRtP7U9JAxzjq7l46RIf5wGszMIXwHN5BpHuI2ZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;87:1-87:79&quot;&gt;Trident: Task Scheduling over Tiered Storage Systems in Big Data Platforms&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5906344410876133&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me13iaibSfQJCfSQWFnf2pLvdGWHT8RiaP2RFuoob4kHCDX9y3D22ca920Pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;92:1-92:381&quot;&gt;分层存储系统(tiered storage systems，例如内存+SSD+HDD)在数据密集型计算集群中已普及，然而大数据平台(如 Hadoop 和 Spark)的任务调度器只根据数据位置信息分配任务，而完全忽略了数据存储在不同的存储介质上。Trident 是一种根据局部性原理(locality)和存储层信息作出最佳任务分配的调度系统。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;94:1-94:69&quot;&gt;Crystal: A Unified Cache Storage System for Analytical Databases&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.19230769230769232&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1DYY8cc6ToF7JykpzDYN9eBvdDzeYOPbCpl4hAacn3CSG3rPspRibtBA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1144&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;98:1-98:388&quot;&gt;分析型数据库采用存算分离架构，因此在计算节点上缓存数据是很重要的，本文提供了一种新的智能缓存存储架构 Crystal，与计算节点共处一地。Crystal 需要处理 DBMS 具有下推谓词的 data sources，因此 Crystal 包含了查询处理和优化组件。Crystal 能够大大改善查询延迟，同时节省了远程存储的带宽。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;71:1-71:49&quot;&gt;ByShard: Sharding in a Byzantine Environment&lt;/h4&gt;&lt;p data-sourcepos=&quot;73:1-73:286&quot;&gt;ByShard 是一个研究分片拜占庭容错系统的统一框架，能够处理多分片事务，实现了两阶段提交(原子性)和两阶段锁(隔离性)。有趣的是 ByShard 也是 C++20 实现的，提供了源代码和 talk 讲解：https://www.jhellings.nl/projects/byshard/&lt;/p&gt;&lt;h2 data-sourcepos=&quot;100:1-100:38&quot;&gt;持久内存（Persistent Memory）&lt;/h2&gt;&lt;p data-sourcepos=&quot;102:1-102:146&quot;&gt;持久内存(Persistent Memory, PMEM 或 PM)这个方向越来越受欢迎，本次 VLDB 2021 在 PM 方向两个 session 一共有 8 篇论文。&lt;/p&gt;&lt;h4 data-sourcepos=&quot;104:1-104:87&quot;&gt;Revisiting the Design of LSM-tree Based OLTP Storage Engine with Persistent Memory&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5429447852760736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1QsgewGKJ9tiaIJ1JP5yjrp73WfP3C9U1oU927QnG1Cmt61VLbAl90ZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;652&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;109:1-109:121&quot;&gt;本文由北航和阿里合作发表，重新审视了基于 LSM-tree 的 OLTP 存储引擎，提出了 4 个新东西：&lt;/p&gt;&lt;ol data-sourcepos=&quot;110:1-114:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Halloc：一个为 LSM-tree 专门设计的轻量级 PM allocator；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个高性能的 Semi-persistent Memtable；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reorder Ring：一个实现 OLTP 无日志(log-free)事务处理的并发提交算法；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Global index：一个全局有序的内存 L0，支持非阻塞的内存压实(compaction)；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos=&quot;115:1-115:240&quot;&gt;Reorder Ring 和 Semi-persistent Memtable 实现了无同步日志开销的快速写入和接近即时的恢复时间。此外，Semi-persistent Memtable 和内存压实的 Global index 大大减少了读写放大以及后台压实开销。&lt;/p&gt;&lt;p data-sourcepos=&quot;119:1-119:180&quot;&gt;&lt;/p&gt;&lt;h4 data-sourcepos=&quot;121:1-121:77&quot;&gt;Zen: a High-Throughput Log-Free OLTP Engine for Non-Volatile Main Memory&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4629360465116279&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1F3qq1TXCfad3Y0I0ico7nSGtaPFrNJpKgW3VjJM2LqbRTB8puE5uaVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1376&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;126:1-126:100&quot;&gt;中科大计算所陈世敏老师团队提出的基于 PM 的 OLTP 存储引擎，主要特点有：&lt;/p&gt;&lt;ol data-sourcepos=&quot;127:1-131:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Tuple Metadata (事务相关元数据)存在 PM 中，Index 存到 DRAM 中；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Met-Cache：将 tuple 缓存到 DRAM 中，Zen 可以完全在 DRAM 中进行并发控制；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NVM Space Management：两层 NVM 管理器 NVM page manager 和 NVM-tuple manager；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不需要日志；&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos=&quot;132:1-132:125&quot;&gt;此外，VLDB 2021 陈世敏老师的团队还有一篇 &quot;Updatable Learned Index with Precise Positions&quot;，很好很强大！&lt;/p&gt;&lt;h4 data-sourcepos=&quot;134:1-134:57&quot;&gt;Viper: An Efficient Hybrid PMem-DRAM Key-Value Store&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5239398084815321&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA2oX3bvjF1Zibd0eiaoUY5me1e0OiaEibTdNykcevVGUIG5HlAfYdROicf2bUZ11WnkEAN5gLyS4tDjusg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;731&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;139:1-139:346&quot;&gt;由于基于块(block-based)访问在 PMem 和磁盘中不同，简单地使用 PMem 替换现有存储并不能获得良好的性能。Viper 是一个混合 PMem-DRAM 的 KV 存储系统，其中 key-value 存储在 PMem 中的 VPage 中，索引存放在 DRAM 中，能够利用 DRAM 的随机写入速度和 PMem 的高效顺序写入性能。&lt;/p&gt;&lt;p data-sourcepos=&quot;142:1-142:49&quot;&gt;源代码开放：https://github.com/hpides/viper&lt;/p&gt;&lt;h4 data-sourcepos=&quot;117:1-117:110&quot;&gt;Optimizing In-memory Database Engine For AI-powered On-line Decision Augmentation Using Persistent Memory&lt;/h4&gt;&lt;p data-sourcepos=&quot;119:1-119:180&quot;&gt;第四范式、新加坡国立大学和 intel 合作的 paper，本文作者自己已经进行介绍了，我就不展开了。中文介绍：https://zhuanlan.zhihu.com/p/401513878&lt;/p&gt;&lt;h4 data-sourcepos=&quot;144:1-144:63&quot;&gt;Persistent Memory Hash Indexes: An Experimental Evaluation&lt;/h4&gt;&lt;p data-sourcepos=&quot;146:1-146:88&quot;&gt;总结实验型文章，对 6 种基于 PM 的持久性哈希表进行全面的评估。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;149:1-149:9&quot;&gt;总结&lt;/h2&gt;&lt;p data-sourcepos=&quot;151:1-151:57&quot;&gt;感想：&lt;strong&gt;成功都是别人的，而我的失败，彻彻底底！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODA2NjIxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA0g3RQ9bRYaJib92ovwsSB9pPup1lt5cB24cJVJia1dc3Nr2kFSBHsJq5HL9DcLhoAGribSBvHU7ZzjA/0?wx_fmt=png&quot; data-nickname=&quot;多颗糖&quot; data-alias=&quot;duoketang&quot; data-signature=&quot;分布式系统和个人成长。我想要说的，前人们都说过了。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA1ynq0HZhJ5kup6vibWOUCRsH7QIzgtnEIDoWXpYqiacbxwrHoWMAL3XYQj08bbxRxNlcQd4NYLZibCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1a49396e8f0040c4ff14b90ef3023c98</guid>
<title>Android 进阶之 Dialog 对应的 Context 必须是 Activity 吗？从源码详细分析</title>
<link>https://toutiao.io/k/uokpkyl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;创建Dialog的时候知道在Dialog的构造方法中需要一个上下文环境，而对这个“上下文”没有具体的概念结果导致程序报错，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是发现Dialog需要的上下文环境只能是activity。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以接下来这篇文章将会从源码的角度来彻底的理顺这个问题；&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、Dialog创建失败&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Dialog的构造方法中传入一个Application的上下文环境。看看程序是否报错：&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   Dialog dialog = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Dialog(getApplication());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        TextView textView = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TextView(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        textView.setText(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;使用Application创建Dialog&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dialog.setContentView(textView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dialog.show();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;运行程序，程序不出意外的崩溃了，我们来看下报错信息：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Caused &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt;: android.view.WindowManager$BadTokenException: Unable to &lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt; window -- token &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; not &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; an application&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.ViewRootImpl.setView(ViewRootImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;517&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;301&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;215&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    at android.view.WindowManagerImpl$CompatModeWrapper.addView(WindowManagerImpl.java:&lt;span class=&quot;code-snippet__number&quot;&gt;140&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段错误日志，有两点我们需要注意一下&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;程序报了一个BadTokenException异常;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;程序报错是在ViewRootImpl的setView方法中;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们一定很疑惑BadTokenException到底是个啥，在说明这个之前我们首先需要了解Token，在了解了Token的概念之后，再结合ViewRootImpl的setView方法，就能理解BadTokenException这个到底是什么，怎么产生的;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、Token分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、token详解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Token直译成中文是令牌的意思，android系统中将其作为一种安全机制，其本质是一个Binder对象，在跨进程的通行中充当验证码的作用。比如：在activity的启动过程及界面绘制的过程中会涉及到ActivityManagerService，应用程序，WindowManagerService三个进程间的通信，此时Token在这3个进程中充当一个身份验证的功能，ActivityManagerService与WindowManagerService通过应用程序的activity传过来的Token来分辨到底是控制应用程序的哪个activity。具体来说就是：&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在启动Activity的流程当中，首先，ActivityManagerService会创建ActivityRecord由其本身来管理，同时会为这个ActivityRecord创建一个IApplication（本质上就是一个Binder）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ActivityManagerService将这个binder对象传递给WindowManagerService，让WindowManagerService记录下这个Binder。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当ActivityManagerService这边完成数据结构的添加之后，会返回给ActivityThread一个ActivityClientRecord数据结构，中间就包含了Token这个Binder对象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ActivityThread这边拿到这个Token的Binder对象之后，就需要让WindowManagerService去在界面上添加一个对应窗口，在添加窗口传给WindowManagerService的数据中WindowManager.LayoutParams这里面就包含了Token。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最终WindowManagerService在添加窗口的时候，就需要将这个Token的Binder和之前ActivityManagerService保存在里面的Binder做比较，验证通过说明是合法的，否则，就会抛出BadTokenException这个异常。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;到这里，我们就知道BadTokenException是怎么回事了，然后接下来分析为什么使用Application上下文会报BadTokenException异常，而Activity上下文则不会&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.8819875776397516&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKuPLV3ib6kautL9IzDGoHkz0DVtTYPoMo2eD2VL53sjaAJQLoEOLlEBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、为什么非要一个Token&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为在WMS那边需要根据这个Token来确定Window的位置（不是说坐标），如果没有Token的话，就不知道这个窗口应该放到哪个容器上了;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因为非Activity的Context它的WindowManger没有ParentWindow，导致在WMS那边找不到对应的容器，也就是不知道要把Dialog的Window放置在何处。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;还有一个原因是没有SYSTEM_ALERT_WINDOW权限（当然要加权限啦，DisplayArea.Tokens的子容器，级别比普通应用的Window高，也就是会显示在普通应用Window的前面，如果不加权限控制的话，被滥用还得了）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在获得SYSTEM_ALERT_WINDOW权限并将Dialog的Window.type指定为SYSTEM_WINDOW之后能正常显示，是因为WMS会为SYSTEM_WINDOW类型的窗口专门创建一个WindowToken（这下就有容器了），并放置在DisplayArea.Tokens里面（这下知道放在哪里了）;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、创建dialog流程分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8300970873786407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKQtnLBN4sauicBtd1W1g9CCKwdlKiaUib46mnib6bZX73M7YKafIQFqjuiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1030&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、&lt;strong&gt;activity的界面最后是&lt;/strong&gt;通过ViewRootImpl的setView方法连接WindowManagerService，从而让WindowManagerService将界面绘制到手机屏幕上。而从上面的异常日志中其实也可以看出，Dialog的界面也是通过ViewRootImpl的setView连接WindowManagerService，从而完成界面的绘制的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们首先来看Dialog的构造方法。不管一个参数的构造方法。两个参数的构造方法，最终都会调用到3个参数的构造方法：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Dialog(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; Context context, &lt;span class=&quot;code-snippet__meta&quot;&gt;@StyleRes&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; themeResId, &lt;span class=&quot;code-snippet__keyword&quot;&gt;boolean&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;createContextThemeWrapper) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; Window w = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; PhoneWindow(mContext);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindow = w;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setCallback(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setOnWindowDismissedCallback(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setWindowManager(mWindowManager, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        w.setGravity(Gravity.CENTER);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mListenersHandler = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ListenersHandler(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码可以看出dialog的创建实质上和activity界面的创建没什么两样，都需要完成一个应用窗口Window的创建，和一个应用窗口视图对象管理者WindowManagerImpl的创建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后Dialog同样有一个setContentView方法：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setContentView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@LayoutRes &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; layoutResID&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindow.setContentView(layoutResID);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;依然是调用PhoneWindow的setContentView方法。再接着我们来看下dialog的show方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mDecor = mWindow.getDecorView();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        WindowManager.LayoutParams l = mWindow.getAttributes();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ((l.softInputMode&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &amp;amp; WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            WindowManager.LayoutParams nl = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.LayoutParams();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nl.copyFrom(l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            nl.softInputMode |=&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            l = nl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mWindowManager.addView(mDecor, l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mShowing = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sendShowMessage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码和activity的makeVisable方法类似，这里也不多说了，注释已经大概的写清楚了。然后调用WindowManagerImpl的addView方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8830508474576271&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/kyDL16ViavhF3w6lSI5ial49T8x5cHZvdKFgczXgE2hDD7MlgPNiapUss0u3yWXCuaH0uzE2pOXw3uGbV3Y84XpTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;590&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;@&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@NonNull View view, @NonNull ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        applyDefaultToken(&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mGlobal.addView(view, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;, mDisplay, mParentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;接着调用了WindowManagerGlobal的addView方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View view, ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Display display, Window parentWindow&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WindowManager.LayoutParams类型的wparams &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ViewRootImpl root;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        View panelParentView = &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        synchronized (mLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            root = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; ViewRootImpl(view.getContext(), display);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            view.setLayoutParams(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mViews.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(view);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mRoots.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(root);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mParams.&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            root.setView(view, wparams, panelParentView);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (RuntimeException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            synchronized (mLock) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                final &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; index = findViewLocked(view, &lt;span class=&quot;code-snippet__literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (index &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    removeViewLocked(index, &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、这里会首先判断一个类型&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为Window的parentWindow 是否为空，如果不为空会通过Window的adjustLayoutParamsForSubWindow方法调整一个类型为WindowManager.LayoutParams的变量wparams的一些属性值。应用程序请求WindowManagerService服务时会传入一个Token，其实那个Token就会通过Window的adjustLayoutParamsForSubWindow方法存放在wparams的token变量中，也就是说如果没有调用Window的adjustLayoutParamsForSubWindow方法就会导致wparams的token变量为空。然后我们接下来看一下wparams的token变量是如何赋值的：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;adjustLayoutParamsForSubWindow&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;WindowManager.LayoutParams wp&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        CharSequence curTitle = wp.getTitle();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.type &amp;gt;= WindowManager.LayoutParams.FIRST_SUB_WINDOW &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.type &amp;lt;= WindowManager.LayoutParams.LAST_SUB_WINDOW) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.token == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                wp.token = mContainer == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt; ? mAppToken : mContainer.mAppToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (wp.packageName == &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.packageName = mContext.getPackageName();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mHardwareAccelerated) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            wp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这里我们可以看到这段代码首先会做一个判断如果wp.type的值有没有位于WindowManager.LayoutParams.FIRST_SUB_WINDOW与WindowManager.LayoutParams.LAST_SUB_WINDOW之间，如果没有则会给wp.token赋值。wp.type代表窗口类型，有3种级别，分别为系统级，应用级以及子窗口级。而这里是判断是否为子窗口级级别。而Dialog的WindowManager.LayoutParams.type默认是应用级的，因此会走else分支，给wp.token赋值mAppToken。至于mAppToken是什么，我们待会再来分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、看WindowManagerGlobal的addView方法的&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，会调用ViewRootImpl的setView方法，我们来看一下，ViewRootImpl是如何连接WindowManagerService传递token的：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; void setView(View view, WindowManager.LayoutParams attrs, View &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;panelParentView) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        synchronized (this) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (mView == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                mView = view;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            getHostVisibility(), mDisplay.getDisplayId(),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            mAttachInfo.mOutsets, mInputChannel);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (RemoteException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Adding window failed&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (restore) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        attrs.restore();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (res &amp;lt; WindowManagerGlobal.ADD_OKAY) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (res) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_BAD_APP_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- token &quot;&lt;/span&gt; + attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is not valid; is your activity running?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_NOT_APP_TOKEN:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- token &quot;&lt;/span&gt; + attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is not for an application&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_APP_EXITING:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- app for token &quot;&lt;/span&gt; + &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;attrs.token&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; is exiting&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_DUPLICATE_ADD:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- window &quot;&lt;/span&gt; + mWindow&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; has already been added&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_STARTING_NOT_NEEDED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_MULTIPLE_SINGLETON:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- another window of this type already &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;exists&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_PERMISSION_DENIED:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.BadTokenException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- permission denied for this window type&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_INVALID_DISPLAY:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.InvalidDisplayException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow +&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- the specified display can not be found&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; WindowManagerGlobal.ADD_INVALID_TYPE:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManager.InvalidDisplayException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window &quot;&lt;/span&gt; + mWindow&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                                    + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot; -- the specified window type is not valid&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                            &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unable to add window -- unknown error code &quot;&lt;/span&gt; + res);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码有两处需要注意：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会通过一个mWindowSession的binder对象请求WindowManagerService服务，传递一个类型为WindowManager.LayoutParams的变量mWindowAttributes到WindowManagerService，mWindowAttributes里面装有代表当前activity的token对象。然后通过WindowManagerService服务创建屏幕视图。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;会根据请求WindowManagerService服务的返回结果判断是否请求成功，如果请求失败会抛出异常，注释的地方就是在文章开头示例抛出的异常。此时attrs.token为空。如果创建dialog的上下文环境改为activity的为什么就不为空呢？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、分析创建Dialog的上下文Activity为何与众不同&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、上文的分析中&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;可以看出attrs.token的赋值在Window的adjustLayoutParamsForSubWindow方法中。而Dialog默认的WindowManager.LayoutParams.type是应用级别的，因此，如果能进入这个方法内，attrs.token肯定能被赋值。现在只有一种情况，如果不是activity的上下文环境就没有进入到这个方法内。这时我们再看WindowManagerGlobal的addView方法的：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;View view, ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            Display display, Window parentWindow&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (parentWindow != &lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            parentWindow.adjustLayoutParamsForSubWindow(wparams);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从这里看出如果Window类型的parentWindow为空，就不会进入adjustLayoutParamsForSubWindow方法。从而可以得出结论如果不是activity的上下文环境WindowManagerGlobal的第四个参数parentWindow为空。紧接着我们再来分析为什么其他的上下文会导致parentWindow为空。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;WindowManagerGlobal调用addView方法在WindowManagerImpl的addView方法中&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; @&lt;span class=&quot;code-snippet__function&quot;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addView&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;@NonNull View view, @NonNull ViewGroup.LayoutParams &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        applyDefaultToken(&lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mGlobal.addView(view, &lt;span class=&quot;code-snippet__keyword&quot;&gt;params&lt;/span&gt;, mDisplay, mParentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;WindowManagerImpl的addView方法在Dialog的首位方法中调用：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;/&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mWindowManager.addView(mDecor, l);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            mShowing = &lt;span class=&quot;code-snippet__literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sendShowMessage();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对&lt;/span&gt;&lt;span&gt;比这两个方法。可以看出WindowManagerImpl的addView方法调用WindowManagerGlobal的addView方法是多出来了两个参数mDisplay, mParentWindow，我们只看后一个，多了一个Window类型的mParentWindow，可以一mParentWindow并不是在Dialog的show方法中赋值的。那么它在哪赋值呢？在WindowManagerImpl类中搜索mParentWindow发现它在WindowManagerImpl的两个参数的构造方法中被赋值。从这里我们可以猜测，如果是使用的activity上下文，那么在创建WindowManagerImpl实例的时候用的是两个参数的构造方法，而其他的上下文是用的一个参数的构造方法。现在问题就集中到了WindowManagerImpl是如何被创建的了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再回过头来看Dialog的构造方法中WindowManagerImpl是如何创建的：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Dialog(&lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; Context context, &lt;span class=&quot;code-snippet__meta&quot;&gt;@StyleRes&lt;/span&gt; int themeResId, &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;createContextThemeWrapper) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;然后分别查看activity的getSystemService方法，和Application的getSystemService方法：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;activity的getSystemService方法&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; getSystemService(&lt;span class=&quot;code-snippet__meta&quot;&gt;@ServiceName&lt;/span&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; name) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       ......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (WINDOW_SERVICE.equals(name)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mWindowManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (SEARCH_SERVICE.equals(name)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           ensureSearchManager();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; mSearchManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;super&lt;/span&gt;.getSystemService(name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在这个方法中直接返回了activity的mWindowManager对象，activity的mWindowManager对象在activity的attach方法中：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;void attach(Context context, ActivityThread aThread,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Instrumentation&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;instr, IBinder token, int ident,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;application, Intent intent, ActivityInfo info,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;title, Activity parent, String id,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;NonConfigurationInstances&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;lastNonConfigurationInstances,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__attr&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;config, String referrer, IVoiceInteractor voiceInteractor) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__attr&quot;&gt;......&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__meta&quot;&gt;mWindow.setWindowManager((WindowManager)context.getSystemService(Context.WINDOW_SERVICE),mToken,&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;mComponent.flattenToString(),&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__meta&quot;&gt;(info.flags&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&amp;amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__meta&quot;&gt;......&lt;/span&gt;  &lt;span class=&quot;code-snippet__string&quot;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、我们再看Window的setWindowManager方法&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;void&lt;/span&gt; setWindowManager(WindowManager wm, IBinder appToken, &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; appName,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__built_in&quot;&gt;boolean&lt;/span&gt; hardwareAccelerated) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mAppToken = appToken;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这段代码两个地方需要注意，一是前ActivityManagerService传过来的Token赋值给Winow的mAppToken，这个token最后会保存到attr.token，具体操作在Window的adjustLayoutParamsForSubWindow方法中。二是调用WindowManagerImpl的createLocalWindowManager方法创建WindowManagerImpl：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; WindowManagerImpl &lt;span class=&quot;code-snippet__title&quot;&gt;createLocalWindowManager&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;Window parentWindow&lt;/span&gt;)&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManagerImpl(mDisplay, parentWindow);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;到这里就可以看出如果创建Dialog的上下文是activity，则会调用WindowManagerImpl两个参数的构造方法，从而导致parentWindow不为空。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、Application的getSystemService方法&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于Application是Context的子类，所以Application的getSystemService最终会调到ContextImpl的getSystemService方法&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;typescript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; getSystemService(&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; name) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; SystemServiceRegistry.getSystemService(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;, name);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;直接调用了SystemServiceRegistry的getSystemService方法,这个方法又会得到匿名内部类CachedServiceFetcher&amp;lt;WindowManager&amp;gt;的createService方法的返回值。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; WindowManager createService(ContextImpl ctx) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; WindowManagerImpl(ctx.getDisplay());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从这个方法中可以看出上下文为Application时，调用的是WindowManagerImpl的一个参数的构造方法，从而parentWindow为空；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;创建dialog时，如果传入构造方法不是一个activity类型的上下文，则导致WindowManagerImpl类型为Window的变量mParentWindow，从而导致WindowManagerGlobal的addView不会调用Window的adjustLayoutParamsForSubWindow方法，从而不会给attr.token赋值，导致在WindowManagerService服务中的身份验证失败，抛出BadTokenException异常；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Show一个普通的Dialog需要的并不是Activity本身，而是一个容器的token，我们平时会传Activity，只不过是Activity刚好对应WMS那边的一个WindowState的容器而已；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>234c0a57812504e7f5340cc633787ff5</guid>
<title>Go 语言中各式各样的优化手段</title>
<link>https://toutiao.io/k/9qeeucf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText css-hnrfcf&quot; options=&quot;[object Object]&quot;&gt;&lt;p&gt;作者：korzhao，腾讯 QQ 音乐后台开发工程师&lt;/p&gt;&lt;p&gt;总结了一些在维护 go 基础库过程中,用到或者见到的性能优化技巧。时间仓促，可能有一些错误，欢迎一起讨论&lt;/p&gt;&lt;h3&gt;&lt;b&gt;常规手段&lt;/b&gt;&lt;/h3&gt;&lt;h3&gt;&lt;b&gt;1.sync.Pool&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;临时对象池应该是对可读性影响最小且优化效果显著的手段。基本上，业内以高性能著称的开源库，都会使用到。&lt;/p&gt;&lt;p&gt;最典型的就是&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/valyala/fasthttp/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fasthttp&lt;/a&gt;&lt;/b&gt;了，它几乎把所有的对象都用&lt;code&gt;sync.Pool&lt;/code&gt;维护。但这样的复用不一定全是合理的。比如在&lt;code&gt;fasthttp&lt;/code&gt;中，传递上下文相关信息的&lt;code&gt;RequestCtx&lt;/code&gt;就是用&lt;code&gt;sync.Pool&lt;/code&gt;维护的，这就导致了你不能把它传递给其他的&lt;code&gt;goroutine&lt;/code&gt;。如果要在&lt;code&gt;fasthttp&lt;/code&gt;中实现类似接受请求-&amp;gt;异步处理的逻辑,必须得拷贝一份&lt;code&gt;RequestCtx&lt;/code&gt;再传递。这对不熟悉&lt;code&gt;fasthttp&lt;/code&gt;原理的使用者来讲，很容易就踩坑了。&lt;/p&gt;&lt;p&gt;还有一种利用&lt;code&gt;sync.Pool&lt;/code&gt;特性，来减少锁竞争的优化手段，也非常巧妙。另外，在优化前要善用&lt;code&gt;go逃逸检查&lt;/code&gt;分析对象是否逃逸到堆上，防止负优化。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;2.string2bytes &amp;amp; bytes2string&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;这也是两个比较常规的优化手段，核心还是复用对象，减少内存分配。在 go 标准库中也有类似的用法&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/master/src/runtime/string.go%23L461&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gostringnocopy&lt;/a&gt;&lt;/b&gt;，要注意&lt;code&gt;string2bytes&lt;/code&gt;后，不能对其修改。&lt;/p&gt;&lt;p&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt;经常出现在各种优化方案中，使用时要非常小心。这类操作引发的异常，通常是不能&lt;code&gt;recover&lt;/code&gt;的。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;3.协程池&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;绝大部分应用场景，go 是不需要协程池的。当然，协程池还是有一些自己的优势：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可以限制&lt;code&gt;goroutine&lt;/code&gt;数量，避免无限制的增长。&lt;/li&gt;&lt;li&gt;减少栈扩容的次数。&lt;/li&gt;&lt;li&gt;频繁创建&lt;code&gt;goroutine&lt;/code&gt;的场景下，资源复用，节省内存。（需要一定规模。一般场景下，效果不太明显）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;go 对&lt;code&gt;goroutine&lt;/code&gt;有一定的复用能力。所以要根据场景选择是否使用协程池，不恰当的场景不仅得不到收益，反而增加系统复杂性。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;4.反射&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;go 里面的反射代码可读性本来就差，常见的优化手段进一步牺牲可读性。而且后续马上就有泛型的支持，所以若非必要，建议不要优化反射部分的代码&lt;/p&gt;&lt;p&gt;比较常见的优化手段有：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;缓存反射结果，减少不必要的反射次数。例如&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/json-iterator/go&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;json-iterator&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;直接使用&lt;code&gt;unsafe.Pointer&lt;/code&gt;根据各个字段偏移赋值&lt;/li&gt;&lt;li&gt;消除一般的&lt;code&gt;struct&lt;/code&gt;反射内存消耗&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/goccy/go-reflect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-reflect&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;避免一些类型转换，如&lt;code&gt;interface-&amp;gt;[]byte&lt;/code&gt;。可以参考&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rs/zerolog/blob/master/array.go%23L39&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;zerolog&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;5.减小锁消耗&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;并发场景下，对临界区加锁比较常见。带来的性能隐患也必须重视。常见的优化手段有：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;减小锁粒度: &lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/master/src/math/rand/rand.go%23L387&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;go 标准库&lt;/a&gt;&lt;/b&gt;当中，&lt;code&gt;math.rand&lt;/code&gt;就有这么一处隐患。当我们直接使用&lt;code&gt;rand&lt;/code&gt;库生成随机数时，实际上由全局的&lt;code&gt;globalRand&lt;/code&gt;对象负责生成。&lt;code&gt;globalRand&lt;/code&gt;加锁后生成随机数，会导致我们在高频使用随机数的场景下效率低下。&lt;br/&gt; &lt;/li&gt;&lt;li&gt;atomic: 适当场景下，用原子操作代替互斥锁也是一种经典的&lt;code&gt;lock-free&lt;/code&gt;技巧。&lt;br/&gt; 标准库中&lt;code&gt;sync.map&lt;/code&gt;针对&lt;code&gt;读操作&lt;/code&gt;的优化消除了&lt;code&gt;rwlock&lt;/code&gt;，是一个标准的案例。对它的介绍文章也比较多，不在赘述。&lt;br/&gt; &lt;code&gt;prometheus&lt;/code&gt;里的组件&lt;code&gt;histograms直方图&lt;/code&gt;也是一个非常巧妙的设计。&lt;br/&gt; 一般的开源库，比如&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/rcrowley/go-metrics&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;go-metrics&lt;/a&gt;&lt;/b&gt;, trpc-go-metrics 都是直接在这里使用了&lt;code&gt;互斥锁&lt;/code&gt;。指标上报作为一个高频操作，在这里加锁，对系统性能影响可想而知。&lt;br/&gt; 参考&lt;code&gt;sync.map&lt;/code&gt;里冗余 map 的做法，&lt;code&gt;prometheus&lt;/code&gt;把原来&lt;code&gt;histograms&lt;/code&gt;的计数器也分为两个：&lt;code&gt;cold&lt;/code&gt;和&lt;code&gt;hot&lt;/code&gt;，还有一个&lt;code&gt;hotIdx&lt;/code&gt;用来表示哪个计数器是&lt;code&gt;hot&lt;/code&gt;。业务代码上报指标时，用&lt;code&gt;atomic&lt;/code&gt;原子操作对&lt;code&gt;hot&lt;/code&gt;计数器累加向&lt;code&gt;prometheus&lt;/code&gt;服务上报数据时，更改&lt;code&gt;hotIdx&lt;/code&gt;，把原来的热数据变为冷数据，作为上报的数据。然后把现在冷数据里的值，累加到热数据里，完成一次冷热数据的更新替换。还有一些状态等待，结构体内存布局的介绍，不再赘述。具体可以参考&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//grafana.com/blog/2020/01/08/lock-free-observations-for-prometheus-histograms/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lock-free Observations for Prometheus Histograms&lt;/a&gt;&lt;/b&gt;&lt;br/&gt; &lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;另类手段&lt;/b&gt;&lt;/h3&gt;&lt;h3&gt;&lt;b&gt;1. golink&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//golang.org/cmd/compile/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;golink&lt;/a&gt;&lt;/b&gt;在官方的文档里有介绍，使用格式：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;//go:linkname FastRand runtime.fastrand
func FastRand() uint32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要功能就是让编译器编译的时候，把当前符号指向到目标符号。上面的函数&lt;code&gt;FastRand&lt;/code&gt;被指向到&lt;code&gt;runtime.fastrand&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;runtime&lt;/code&gt;包生成的也是伪随机数，和&lt;code&gt;math&lt;/code&gt;包不同的是，它的随机数生成使用的上下文是来自当前&lt;code&gt;goroutine&lt;/code&gt;的，所以它不用加锁。正因如此，一些开源库选择直接使用&lt;code&gt;runtime&lt;/code&gt;的随机数生成函数。性能对比如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Benchmark_MathRand-12       84419976            13.98 ns/op
Benchmark_Runtime-12        505765551           2.158 ns/op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还有很多这样的例子，比如我们要拿时间戳的话，可以标准库中的&lt;code&gt;time.Now()&lt;/code&gt;，这个库在会有两次系统调用&lt;code&gt;runtime.walltime1&lt;/code&gt;和&lt;code&gt;runtime.nanotime&lt;/code&gt;，分别获取时间戳和程序运行时间。大部分场景下，我们只需要时间戳，这时候就可以直接使用&lt;code&gt;runtime.walltime1&lt;/code&gt;。性能对比如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Benchmark_Time-12       16323418            73.30 ns/op
Benchmark_Runtime-12    29912856            38.10 ns/op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同理，如果我们需要统计某个函数的耗时，也可以直接调用两次&lt;code&gt;runtime.nanotime&lt;/code&gt;然后相减，不用再调用两次&lt;code&gt;time.Now&lt;/code&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;//go:linkname nanotime1 runtime.nanotime1
func nanotime1() int64
func main() {
    defer func( begin int64) {
        cost := (nanotime1() - begin)/1000/1000
        fmt.Printf(&quot;cost = %dms \n&quot; ,cost)
    }(nanotime1())

    time.Sleep(time.Second)
}

运行结果：cost = 1000ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;系统调用在 go 里面相对来讲是比较重的。&lt;code&gt;runtime&lt;/code&gt;会切换到&lt;code&gt;g0&lt;/code&gt;栈中去执行这部分代码，&lt;code&gt;time.Now&lt;/code&gt;方法在&lt;code&gt;go&amp;lt;=1.16&lt;/code&gt;中有两次连续的系统调用。&lt;/p&gt;&lt;p&gt;不过，go 官方团队的 lan 大佬已经发现并提交优化&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//go-review.googlesource.com/c/go/%2B/314277&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pr&lt;/a&gt;&lt;/b&gt;。优化后，这两次系统调将会合并在一起，减少一次&lt;code&gt;g0&lt;/code&gt;栈的切换。&lt;/p&gt;&lt;blockquote&gt;&lt;code&gt;g0&lt;/code&gt;栈切换背景可以参考&lt;code&gt;GMP&lt;/code&gt;调度相关知识，不再赘述&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;linkname 为我们提供了一种方法，可以直接调用 go 标准库里的&lt;code&gt;未导出方法&lt;/code&gt;，可以读取&lt;code&gt;未导出变量&lt;/code&gt;。使用时要注意 go 版本更新后，是否有兼容问题，毕竟 go 团队并没有保证这些未导出的方法变量后续不会变更。&lt;/p&gt;&lt;p&gt;还有一些其他奇奇怪怪的用法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/modern-go/reflect2/blob/master/type_map.go%23L12&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reflect2&lt;/a&gt;&lt;/b&gt;包，创建&lt;code&gt;reflect.typelinks&lt;/code&gt;的引用，用来读取所有包中&lt;code&gt;struct&lt;/code&gt;的定义&lt;/li&gt;&lt;li&gt;创建&lt;code&gt;panic&lt;/code&gt;的引用后，用一些&lt;code&gt;hook&lt;/code&gt;函数重定向&lt;code&gt;panic&lt;/code&gt;，这样你的程序&lt;code&gt;panic&lt;/code&gt; 后会走到你的自定义逻辑里&lt;/li&gt;&lt;li&gt;&lt;code&gt;runtime.main_inittask&lt;/code&gt;保存了程序初始化时，&lt;code&gt;init&lt;/code&gt;函数的执行顺序，之前版本没有&lt;code&gt;init&lt;/code&gt;过程 debug 功能时，可以用它来打印程序&lt;code&gt;init&lt;/code&gt;调用链。最新版本已经有官方的调试方案：&lt;code&gt;GODEBUG=inittracing=1&lt;/code&gt;开启&lt;code&gt;init&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;runtime.asmcgocall&lt;/code&gt;是&lt;code&gt;cgo&lt;/code&gt;代码的实际调用入口。有时候我们可以直接用它来调用&lt;code&gt;cgo&lt;/code&gt;代码，避免&lt;code&gt;goroutine&lt;/code&gt;切换,具体会在&lt;code&gt;cgo&lt;/code&gt;优化部分展开&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;2. log-函数名称行号的获取&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;虽然很多高性能的日志库，默认都不开启记录行号。但实际业务场景中，我们还是觉得能打印最好。&lt;/p&gt;&lt;p&gt;在&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/master/src/runtime/extern.go%23L220&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;runtime&lt;/a&gt;&lt;/b&gt;中，函数行号和函数名称的获取分为两步：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;runtime&lt;/code&gt;回溯&lt;code&gt;goroutine&lt;/code&gt;栈，获取上层调用方函数的的程序计数器（pc）。&lt;/li&gt;&lt;li&gt;根据 pc，找到对应的&lt;code&gt;funcInfo&lt;/code&gt;,然后返回行号名称&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;经过 pprof 分析。第二步性能占比最大，约 60%。针对第一步，我们经过多次尝试，并没有找到有效的办法。但是第二步很明显，我们不需要每次都调用&lt;code&gt;runtime&lt;/code&gt;函数去查找&lt;code&gt;pc&lt;/code&gt;和函数信息的，我们可以把第一次的结果缓存起来，后面直接使用。这样。第二步约 60%的消耗就可以去掉。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;var(
    m sync.Map
)
func Caller(skip int)(pc uintptr, file string, line int, ok bool){
    rpc := [1]uintptr{}
    n := runtime.Callers(skip+1, rpc[:])
    if n &amp;lt; 1 {
        return
    }
    var (
        frame  runtime.Frame
        )
    pc  = rpc[0]
    if item,ok:=m.Load(pc);ok{
        frame = item.(runtime.Frame)
    }else{
        tmprpc := []uintptr{
            pc,
        }
        frame, _ = runtime.CallersFrames(tmprpc).Next()
        m.Store(pc,frame)
    }
    return frame.PC,frame.File,frame.Line,frame.PC!=0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;压测数据如下，优化后稍微减轻这部分的负担，同时消除掉不必要的内存分配。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;BenchmarkCaller-8       2765967        431.7 ns/op         0 B/op          0 allocs/op
BenchmarkRuntime-8      1000000       1085 ns/op         216 B/op          2 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;3.cgo&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cgo&lt;/code&gt;的支持让我们可以在 go 中调用&lt;code&gt;c++&lt;/code&gt;和&lt;code&gt;c&lt;/code&gt;的代码，但&lt;code&gt;cgo&lt;/code&gt;的代码在运行期间不受 go 调度器的管理，为了防止&lt;code&gt;cgo&lt;/code&gt;调用引起调度阻塞，&lt;code&gt;cgo&lt;/code&gt;调用会切换到&lt;code&gt;g0&lt;/code&gt;栈执行，并独占&lt;code&gt;m&lt;/code&gt;。由于&lt;code&gt;runtime&lt;/code&gt;设计时没有考虑&lt;code&gt;m&lt;/code&gt;的回收，所以运行时间久了之后，会发现有&lt;code&gt;cgo&lt;/code&gt;代码的程序，线程数都比较多。&lt;/p&gt;&lt;p&gt;用 go 的编译器转换包含&lt;code&gt;cgo&lt;/code&gt;的代码：&lt;/p&gt;&lt;p&gt;转换后看代码，&lt;code&gt;cgo&lt;/code&gt;调用实际上是由&lt;code&gt;runtime.cgocall&lt;/code&gt;发起，而&lt;code&gt;runtime.cgocall&lt;/code&gt;调用过程主要分为以下几步：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;entersyscall(): 保存上下文，标记当前 m&lt;code&gt;incgo&lt;/code&gt;独占&lt;code&gt;m&lt;/code&gt;，跳过垃圾回收，&lt;/li&gt;&lt;li&gt;osPreemptExtEnter：标记异步抢占，使异步抢占逻辑失效&lt;/li&gt;&lt;li&gt;asmcgocall：真正的 cgo call 入口，切换到&lt;code&gt;g0&lt;/code&gt;执行&lt;code&gt;c&lt;/code&gt;代码&lt;/li&gt;&lt;li&gt;恢复之前的上下文，清理标记&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对于一些简单的&lt;code&gt;c&lt;/code&gt;函数，我们可以直接用&lt;code&gt;asmcgocall&lt;/code&gt;调用，避免来回切换&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;package main

/*
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
struct args{
    int p1,p2;
    int r;
};
int add(struct args* arg) {
    arg-&amp;gt;r= arg-&amp;gt;p1 + arg-&amp;gt;p2;
    return 100;
}
*/
import &quot;C&quot;
import (
    &quot;fmt&quot;
    &quot;unsafe&quot;
)
//go:linkname asmcgocall runtime.asmcgocall
func asmcgocall(unsafe.Pointer, uintptr) int32

func main() {
    arg := C.struct_args{}
    arg.p1 = 100
    arg.p2 = 200
    //C.add(&amp;amp;arg)
    asmcgocall(C.add,uintptr(unsafe.Pointer(&amp;amp;arg)))
    fmt.Println(arg.r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;压测数据如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;BenchmarkCgo-12             16143393    73.01 ns/op     16 B/op        1 allocs/op

BenchmarkAsmCgoCall-12      119081407   9.505 ns/op     0 B/op         0 allocs/op

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;4.epoll&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;runtime&lt;/code&gt;对网络 io，以及定时器的管理，会放到自己维护的一个 epoll 里，具体可以参考&lt;code&gt;runtime/netpool&lt;/code&gt;。在一些高并发的网络 io 中，有以下几个问题：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;需要维护大量的协程去处理读写事件&lt;/li&gt;&lt;li&gt;对连接的状态无感知，必须要等待&lt;code&gt;read&lt;/code&gt;或者&lt;code&gt;write&lt;/code&gt;返回错误才能知道对端状态，其余时间只能等待&lt;/li&gt;&lt;li&gt;原生的&lt;code&gt;netpool&lt;/code&gt;只维护一个&lt;code&gt;epoll&lt;/code&gt;，没有充分发挥多核优势&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;基于此，有很多项目用&lt;code&gt;x/unix&lt;/code&gt;扩展包实现了自己的基于 epoll 的网络库，比如潘神的&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/panjf2000/gnet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gnet&lt;/a&gt;&lt;/b&gt;，还有字节跳动的&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/cloudwego/netpoll&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;netpoll&lt;/a&gt;&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在我们的项目中，也有尝试过使用。最终我们还是觉得基于标准库的实现已经足够。理由如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;用户态的&lt;code&gt;goroutine&lt;/code&gt;优先级没有 go&lt;code&gt;netpool&lt;/code&gt;的调度优先级高。带来的问题就是毛刺多了。近期字节跳动也开源了自己的&lt;code&gt;netpool&lt;/code&gt;，并且通过优化扩展包内&lt;code&gt;epoll&lt;/code&gt;的使用方式来优化这个问题，具体效果未知&lt;/li&gt;&lt;li&gt;效果不明显，我们绝大部分业务的 QPS 主要受限于其他的 RPC 调用，或者 CPU 计算。收发包的优化效果很难体现。&lt;/li&gt;&lt;li&gt;增加了系统复杂性，虽然标准库慢一点点，但是足够稳定和简单。&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;5.包大小优化&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;我们 CI 是用蓝盾流水线实现的，有一次业务反馈说蓝盾编译的二进制会比自己开发机编译的体积大 50%左右。对比了操作系统和 go 版本都是一样的,&lt;code&gt;tlinux2.2 golang1.15&lt;/code&gt;。我们在用 linux 命令&lt;code&gt;size —A&lt;/code&gt;对两个文件各个&lt;code&gt;section&lt;/code&gt;做对比时，发现了&lt;code&gt;debug&lt;/code&gt;相关的&lt;code&gt;section size&lt;/code&gt;明显不一致，而且&lt;code&gt;section&lt;/code&gt;的名称也不一样:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;size -A test-30MB
section                  size       addr
.interp                    28    4194928
.note.ABI-tag              32    4194956
... ... ... ...
.zdebug_aranges          1565          0
.zdebug_pubnames        56185          0
.zdebug_info          2506085          0
.zdebug_abbrev          13448          0
.zdebug_line          1250753          0
.zdebug_frame          298110          0
.zdebug_str             40806          0
.zdebug_loc           1199790          0
.zdebug_pubtypes       151567          0
.zdebug_ranges         371590          0
.debug_gdb_scripts         42          0
Total                93653020

size -A test-50MB
section                   size       addr
.interp                     28    4194928
.note.ABI-tag               32    4194956
.note.go.buildid           100    4194988
... ... ...
.debug_aranges            6272          0
.debug_pubnames         289151          0
.debug_info            8527395          0
.debug_abbrev            73457          0
.debug_line            4329334          0
.debug_frame           1235304          0
.debug_str              336499          0
.debug_loc             8018952          0
.debug_pubtypes        1072157          0
.debug_ranges          2256576          0
.debug_gdb_scripts          62          0
Total                113920274
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过查找&lt;code&gt;debug&lt;/code&gt;和&lt;code&gt;zdebug&lt;/code&gt;的区别了解到，&lt;code&gt;zdebug&lt;/code&gt;是对&lt;code&gt;debug&lt;/code&gt;段做了&lt;code&gt;zip&lt;/code&gt;压缩，所以压缩后包体积会更小。查看&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/master/src/cmd/link/internal/ld/dwarf.go%23L2210&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;go 的源码&lt;/a&gt;&lt;/b&gt;，发现链接器默认已经对&lt;code&gt;debug&lt;/code&gt;段做了&lt;code&gt;zip&lt;/code&gt;压缩。&lt;/p&gt;&lt;p&gt;看来，未压缩的&lt;code&gt;debug&lt;/code&gt;段不是 go 自己干的。我们很容易就猜到，由于代码中引入了&lt;code&gt;cgo&lt;/code&gt;，可能是&lt;code&gt;c++&lt;/code&gt;的链接器没有压缩导致的。&lt;/p&gt;&lt;blockquote&gt; 代码引入&lt;code&gt;cgo&lt;/code&gt;后，go 代码由 go 编译器编译，c 代码由&lt;code&gt;g++&lt;/code&gt;编译，后续由&lt;code&gt;ld&lt;/code&gt;链接成可执行文件。所以包含&lt;code&gt;cgo&lt;/code&gt;的代码在跨平台编译时，需要更改对应平台的 c 代码编译器,链接器。具体过程可以翻阅 go 编译过程相关资料，不再赘述。&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;但是我们再次寻找相关&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/master/src/cmd/link/internal/ld/lib.go%23L1471&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码&lt;/a&gt;&lt;/b&gt;发现，go 在使用&lt;code&gt;ld&lt;/code&gt;链接时，已经指定了参数&lt;code&gt;--compress-debug-sections=zlib-gnu&lt;/code&gt;用来压缩&lt;code&gt;debug&lt;/code&gt;相关信息。&lt;/p&gt;&lt;p&gt;再次寻找原因，我们猜测可能跟&lt;code&gt;tlinux2.2&lt;/code&gt;支持&lt;code&gt;go 1.16&lt;/code&gt;有关，之前我们发现升级 go 版本之后，在开发机上无法编译。最后发现是因为&lt;code&gt;go1.16&lt;/code&gt;优化了一部分编译指令，导致我们的&lt;code&gt;ld&lt;/code&gt;版本太低不支持。所以我们用&lt;code&gt;yum install -y binutils&lt;/code&gt;升级了&lt;code&gt;ld&lt;/code&gt;的版本。果然，在翻阅了&lt;code&gt;ld&lt;/code&gt;的文档之后，我们确认了&lt;code&gt;tlinux2.2&lt;/code&gt;自带的&lt;code&gt;ld&lt;/code&gt;不支持&lt;code&gt;--compress-debug-sections=zlib-gnu&lt;/code&gt;这个指令，升级后&lt;code&gt;ld&lt;/code&gt;才支持。&lt;/p&gt;&lt;p&gt;总结：在包含&lt;code&gt;cgo&lt;/code&gt;的代码编译时，将&lt;code&gt;ld&lt;/code&gt;升级到&lt;code&gt;2.27&lt;/code&gt;版本，编译后的体积可以减少约 50%。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;6.simd&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;首先，go 链接器支持 simd 指令，但 go 编译器不支持&lt;code&gt;simd&lt;/code&gt;指令的生成。所以在 go 中使用&lt;code&gt;simd&lt;/code&gt;一般来说有三种方式：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;手写汇编&lt;/li&gt;&lt;li&gt;&lt;code&gt;llvm&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;cgo&lt;/code&gt;（如果用&lt;code&gt;cgo&lt;/code&gt;的方式来调用，会受限于&lt;code&gt;cgo&lt;/code&gt;的性能，达不到加速的目的）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;目前比较流行的做法是&lt;code&gt;llvm&lt;/code&gt;：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;用&lt;code&gt;c&lt;/code&gt;来写&lt;code&gt;simd&lt;/code&gt;相关的函数，然后用&lt;code&gt;llvm&lt;/code&gt;编译成 c 汇编&lt;/li&gt;&lt;li&gt;用工具把 c 汇编转换成 go 的汇编格式，保存为&lt;code&gt;.s&lt;/code&gt;文件&lt;/li&gt;&lt;li&gt;在 go 中调用&lt;code&gt;.s&lt;/code&gt;里的方法，最后用 go 编译器编译&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;以下开源库用到了 simd，可以参考：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/minio/simdjson-go&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;simdjson-go&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/bytedance/sonic&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sonic&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/minio/sha256-simd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sha256-simd&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;合理的使用&lt;code&gt;simd&lt;/code&gt;可以充分发挥 cpu 特性，但是存在以下弊端：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;难以维护，要么需要懂汇编的大神，要么需要引入第三方语言&lt;/li&gt;&lt;li&gt;跨平台支持不够，需要对不同平台汇编指令做适配&lt;/li&gt;&lt;li&gt;汇编代码很难调试，作为使用方来讲，完全黑盒&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;b&gt;7.jit&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;go 中使用 jit 的方式可以参考&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//medium.com/kokster/writing-a-jit-compiler-in-golang-964b61295f&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Writing a JIT compiler in Golang&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;目前只有在字节跳动刚开源的&lt;code&gt;json&lt;/code&gt;解析库中发现了使用场景&lt;b&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/bytedance/sonic&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sonic&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这种使用方式个人感觉在 go 中意义不大，仅供参考&lt;/p&gt;&lt;h3&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;过早的优化是万恶之源，千万不要为了优化而优化&lt;/p&gt;&lt;ol&gt;&lt;li&gt;pprof 分析，竞态分析，逃逸分析，这些基础的手段是必须要学会的&lt;/li&gt;&lt;li&gt;常规的优化技巧是比较实用的，他们往往能解决大部分的性能问题并且足够安全。&lt;/li&gt;&lt;li&gt;在一些着重性能的基础库中，使用一些非常规的优化手段也是可以的，但必须要权衡利弊，不要过早放弃可读性，兼容性和稳定性。&lt;/li&gt;&lt;/ol&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&quot;QQ 音乐作为国内最大的音乐流媒体平台，QQ 音乐平台产品工程技术团队，打造了稳定高效的音乐流媒体平台，服务每天数十亿的用户听歌需求。并且在音频媒体能力、智能推荐算法、信息检索等领域深耕十几年，为用户提供更极致的音乐享受和发掘更多的音乐兴趣。欢迎对技术和音乐感兴趣，渴望通过技术创造音乐更大可能的技术同学加入。&quot;&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;腾讯技术交流群已建立，交流讨论可加&lt;b&gt;QQ 群：&lt;/b&gt;160315980&lt;b&gt;（备注腾讯技术） ，微信交流群加：&lt;/b&gt;teg_helper&lt;b&gt;。&lt;/b&gt;&lt;/p&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>