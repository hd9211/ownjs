<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>abc21f85c5937e6e9e01deba01cdd708</guid>
<title>一文理解 Java 中的 SPI 机制</title>
<link>https://toutiao.io/k/3xscqep</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2 data-source-line=&quot;1&quot;&gt;SPI机制简介&lt;/h2&gt;&lt;p data-source-line=&quot;2&quot;&gt;服务提供者接口（Service Provider Interface，简写为SPI）是JDK内置的一种服务提供发现机制。可以用来加载框架扩展和替换组件，主要是被框架的开发人员使用。在java.util.ServiceLoader的文档里有比较详细的介绍。&lt;/p&gt;&lt;p data-source-line=&quot;4&quot;&gt;系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案、xml解析模块、jdbc模块的方案等。面向对象的设计推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则：如果需要替换组建的一种实现，就需要修改框架的代码。SPI机制正是解决这个问题。&lt;/p&gt;&lt;p data-source-line=&quot;6&quot;&gt;Java中SPI机制主要思想是将装配的控制权移到程序之外，是“基于接口的编程＋策略模式＋配置文件”组合实现的动态加载机制，有点类似Spring的IOC机制。在模块化设计中这个机制尤其重要，其核心思想就是解耦。&lt;/p&gt;&lt;p data-source-line=&quot;8&quot;&gt;&lt;img data-ratio=&quot;0.3325102880658436&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTFYjzqMgxlkGkLulWnWyZc05RVNgGhXADDtUqEOHnYexXgBPtYm53oLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1215&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;10&quot;&gt;SPI的接口是Java核心库的一部分，是由引导类加载器(Bootstrap Classloader)来加载的。SPI的实现类是由系统类加载器(System ClassLoader)来加载的。&lt;/p&gt;&lt;p data-source-line=&quot;12&quot;&gt;引导类加载器在加载时是无法找到SPI的实现类的，因为双亲委派模型中规定，引导类加载器BootstrapClassloader无法委派系统类加载器AppClassLoader来加载。该如何解决此问题？&lt;/p&gt;&lt;p data-source-line=&quot;14&quot;&gt;线程上下文类加载由此诞生，它的出现也破坏了类加载器的双亲委派模型，使得程序可以进行逆向类加载。有关这部分知识在最后补充说明。&lt;/p&gt;&lt;h2 data-source-line=&quot;16&quot;&gt;应用场景&lt;/h2&gt;&lt;p data-source-line=&quot;18&quot;&gt;Java提供了很多SPI，允许第三方为这些接口提供实现。&lt;/p&gt;&lt;p data-source-line=&quot;20&quot;&gt;常见的SPI使用场景：&lt;/p&gt;&lt;ol data-source-line=&quot;21&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;JDBC加载不同类型的数据库驱动。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;日志门面接口实现类加载，SLF4J加载不同提供商的日志实现类。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Spring中大量使用了SPI。可以在spring.factories中加上我们自定义的自动配置类，事件监听器或初始化器等。&lt;br/&gt;3.1 对servlet3.0规范。&lt;br/&gt;3.2 对ServletContainerInitializer的实现。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Dubbo里面有很多个组件，每个组件在框架中都是以接口的形成抽象出来。具体的实现又分很多种，在程序执行时根据用户的配置来按需取接口的实现。如果Dubbo的某个内置实现不符合业务需求，那么只需要利用其SPI机制将新的业务实现替换掉Dubbo的实现即可。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;28&quot;&gt;这些SPI的接口是由Java核心库来提供，而SPI的实现则是作为Java应用所依赖的jar包被包含进类路径（CLASSPATH）中。例如：JDBC的实现mysql就是通过Maven被依赖进来。&lt;/p&gt;&lt;h2 data-source-line=&quot;30&quot;&gt;SPI具体约定&lt;/h2&gt;&lt;p data-source-line=&quot;32&quot;&gt;Java SPI的具体约定：当服务的提供者，提供了服务接口的某种实现之后，在jar包的META-INF/services/目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包META-INF/services/里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。基于这样一个约定就能实现服务接口与实现的解耦。&lt;/p&gt;&lt;h2 data-source-line=&quot;34&quot;&gt;Java SPI机制的缺点&lt;/h2&gt;&lt;ol data-source-line=&quot;36&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多个并发多线程使用ServiceLoader类的实例是不安全的。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;扩展如果依赖其他的扩展，做不到自动注入和装配。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不提供类似于Spring的IOC和AOP功能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;扩展很难和其他的框架集成，比如扩展里面依赖了一个Spring bean，原生的Java SPI不支持。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;42&quot;&gt;针对以上的不足点，在生产环境的SPI机制选择时，可以考虑使用dubbo实现的SPI机制。感兴趣的同学可以自行查看，或等博客的后续更新。&lt;/p&gt;&lt;h3 data-source-line=&quot;44&quot;&gt;SPI实例&lt;/h3&gt;&lt;p data-source-line=&quot;46&quot;&gt;下面用一个简单的代码实例，演示SPI的使用方法。&lt;/p&gt;&lt;ol data-source-line=&quot;48&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;代码编写&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;50&quot;&gt;定义需要的接口，然后编码接口的实现类。&lt;/p&gt;&lt;p data-source-line=&quot;52&quot;&gt;&lt;img data-ratio=&quot;0.4209714726291442&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTFyTgqQkEkeJc8TfUg3qS4RPYLRQjvDunfvgkxpzoREvoaAM9rWPQeyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1297&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;54&quot;&gt;&lt;img data-ratio=&quot;0.39067854694996573&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTFJ3uGYFpY8I4bvoepPX0OmJFwE10GV7liaYCdSia7xIoWgedANTtMwv5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1459&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;56&quot;&gt;&lt;img data-ratio=&quot;0.326875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTFJUSprdkOANhHvM6GHxIyxZNbWAhGX1vzeWydHfFVJS8U7XEPniba3Rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1600&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;58&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;增加配置文件&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;60&quot;&gt;在项目的\src\main\resources\下创建\META-INF\services目录，并增加一个配置文件，这个文件必须以接口的全限定类名保持一致，例如：com.xiaohui.spi.HelloService。然后在配置文件中写入具体实现类的全限定类名，如有多个则换行写入。&lt;/p&gt;&lt;p data-source-line=&quot;62&quot;&gt;&lt;img data-ratio=&quot;0.45432497978981407&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTF4krriaTicibRCKZLk0CC88zAsbTeiaxwtXla2avwgPJw7KDCXK8PXplpww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1237&quot;/&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; data-source-line=&quot;64&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;使用JDK来载入&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;66&quot;&gt;使用JDK提供的ServiceLoader.load()来加载配置文件中的描述信息，完成类加载操作。&lt;/p&gt;&lt;p data-source-line=&quot;68&quot;&gt;&lt;img data-ratio=&quot;0.5680044593088072&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTFwwbTtRiaQOoH74icoe6Q0P4XE1NiaUjiaVT0Wkkcb4VawoyFMkr0UZZCdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1794&quot;/&gt;&lt;/p&gt;&lt;h2 data-source-line=&quot;70&quot;&gt;补充说明SPI加载&lt;/h2&gt;&lt;p data-source-line=&quot;72&quot;&gt;有关双亲委派的讲解，请查看博客《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyNzgyNzAwNg==&amp;amp;mid=2247483853&amp;amp;idx=1&amp;amp;sn=e3c145cde37b4e08348a10de39682089&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Java类加载及对象创建过程详解&lt;/a&gt;》&lt;/p&gt;&lt;h3 data-source-line=&quot;74&quot;&gt;为什么需要破坏双亲委派？&lt;/h3&gt;&lt;p data-source-line=&quot;76&quot;&gt;在某些情况下父类加载器需要委托子类加载器去加载class文件。受到双亲委派加载范围的限制，父类加载器无法加载到需要的文件。&lt;/p&gt;&lt;h3 data-source-line=&quot;78&quot;&gt;如何破坏双亲委派？&lt;/h3&gt;&lt;p data-source-line=&quot;80&quot;&gt;双亲委派模型并不是一个强制性的约束模型，而是java设计者推荐给开发者的类加载器实现方式，在java项目中大部分的类加载器都遵循这个模型，但也有例外，到目前为止，双亲委派模型主要出现过三次较大规模的“被破坏”情况。&lt;/p&gt;&lt;p data-source-line=&quot;82&quot;&gt;双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2发布之前。由于双亲委派模型是在JDK1.2之后才被引入的，而类加载器和抽象类java.lang.ClassLoader则是JDK1.0时候就已经存在，面对已经存在 的用户自定义类加载器的实现代码，Java设计者引入双亲委派模型时不得不做出一些妥协。为了向前兼容，JDK1.2之后的java.lang.ClassLoader添加了一个新的proceted方法findClass()，在此之前，用户去继承java.lang.ClassLoader的唯一目的就是重写loadClass()方法，因为虚拟在进行类加载的时候会调用加载器的私有方法loadClassInternal()，而这个方法的唯一逻辑就是去调用自己的loadClass()。JDK1.2之后已不再提倡用户再去覆盖loadClass()方法，应当把自己的类加载逻辑写到findClass()方法中，在loadClass()方法的逻辑里，如果父类加载器加载失败，则会调用自己的findClass()方法来完成加载，这样就可以保证新写出来的类加载器是符合双亲委派模型的。&lt;/p&gt;&lt;p data-source-line=&quot;84&quot;&gt;双亲委派模型的第二次“被破坏”是这个模型自身的缺陷所导致的，双亲委派模型很好地解决了各个类加载器的基础类统一问题(越基础的类由越上层的加载器进行加载)，基础类之所以被称为“基础”，是因为它们总是作为被调用代码调用的API。但是，如果基础类又要调用用户的代码，那该怎么办呢。&lt;/p&gt;&lt;p data-source-line=&quot;86&quot;&gt;为了解决这个困境，Java设计团队只好引入了一个不太优雅的设计：线程上下文件类加载器(Thread Context ClassLoader)。这个类加载器可以通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个；如果在应用程序的全局范围内都没有设置过，那么这个类加载器默认就是应用程序类加载器。使用这个线程上下文类加载器去加载所需要的代码，也就是父类加载器请求子类加载器去完成类加载动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型，但这也是无可奈何的事情。Java中所有涉及SPI的加载动作基本上都采用这种方式，例如JNDI,JDBC,JCE,JAXB和JBI等。&lt;/p&gt;&lt;p data-source-line=&quot;88&quot;&gt;双亲委派模型的第三次“被破坏”是由于用户对程序的动态性的追求导致的，例如OSGi的出现。在OSGi环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为网状结构。&lt;/p&gt;&lt;h3 data-source-line=&quot;90&quot;&gt;破坏双亲委派的举例&lt;/h3&gt;&lt;p data-source-line=&quot;92&quot;&gt;以tomcat为例，讲解如何破坏双亲委派，属于上述讲解的第二次破坏。&lt;/p&gt;&lt;p data-source-line=&quot;94&quot;&gt;&lt;img data-ratio=&quot;1.764525993883792&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OqTAl3WTC7FCcQCUsqaSExkBFHia0CdTF9iaYgpiaMZlyVbdicSaWGwycbDkCXzXTdibNLPWIRb0hjPCcFLFxkeOiaLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;327&quot;/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;96&quot;&gt;如果有10个Web应用程序都用到了spring的话，可以把Spring的jar包放到common或shared目录下让这些程序共享。Spring的作用是管理每个web应用程序的bean，getBean时自然要能访问到应用程序的类，而用户的程序是放在/WebApp/WEB-INF目录中的（由WebAppClassLoader加载），那么在CommonClassLoader或SharedClassLoader中的Spring容器如何去加载并不在其加载范围的用户程序（/WebApp/WEB-INF/）中的Class呢？&lt;/p&gt;&lt;p data-source-line=&quot;98&quot;&gt;Spring统统使用线程上下文加载器(ContextClassLoade)来加载类，无需理会被放在哪里。ContextClassLoader默认存放了WebAppClassLoader的引用，由于它是在运行时被放在了线程中，所以不管当前程序处于何处（BootstrapClassLoader或是ExtClassLoader等），在任何需要的时候都可以用Thread.currentThread().getContextClassLoader()取出应用程序类加载器来完成需要的操作。&lt;/p&gt;&lt;p data-source-line=&quot;100&quot;&gt;参考：&lt;/p&gt;&lt;ol data-source-line=&quot;101&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;《深入理解java虚拟机》&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>499d230a3a60fba609ac748b80ffee11</guid>
<title>假如 Go 能说话，听听 GMP 的心声</title>
<link>https://toutiao.io/k/9kcl6r7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;大纲&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;G 的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;M 的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;P 的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;操作系统内核的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Golang 的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;程序猿的心声&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;奇伢的心声&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;前情提要&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近发生了个大事件，Golang，G，M，P，程序猿，操作系统吵起来了，每个人都心有怨言，奇伢作为调解程序之友，对涉事的几位当事人做了一个简单的采访。下面是这几位当事人的采访记录。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;G 的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 G，GMP 里的 G，我的英文名字叫 &lt;span&gt;&lt;strong&gt;Goroutine&lt;/strong&gt;&lt;/span&gt;。我心里一直有话要说，我感觉委屈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这事得这么说起，首先我是 Golang 里的头牌对吧，你看 Golang 的首字母和咱都是一样的，Golang 也经常拿我做宣传亮点。程序跑的时候，几乎只能看到我们 G 在 M 之间穿梭，我们其中反复横跳。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1951219512195121&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/4UtmXsuLoNcaEdUiaNfXdxziab9fcJjeP9MUf5tWnWBhdEAiaHpqSKnnx5My9HGV5nEibPsgywBUc3GYdNLjQI51nA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;246&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序猿所有的梦想（代码实现）都是放在我的身上的，放在我的包袱里，封装成我的样子，然后运到 M 上去处理，我帮了所有人程序猿实现了他们的并发之梦，我本来应该快乐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.13 之前，我是自由的，我想在 M 上待多久就待多久，早走晚走都可以，我以为这个是我的应得的特权。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但自从 1.14 之后，一切都变了！！！我在 M 上稍微走的慢一点，就喊打喊杀，把我丢出去，屁颠屁颠的伺候下一个，不就是多占用一些 M 的时间嘛，有什么大不了的，咱还是不是主角吗？&lt;strong&gt;搞得我现在好紧张，根本不敢放松，我觉得 M 针对我。&lt;/strong&gt;再说了，慢也不是我的错呀，我包袱里装的不都是那些&lt;strong&gt;程序猿&lt;/strong&gt;的想法嘛，搞那些有的没的的代码。。。。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;M 的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 M，GMP 的 M，我英文名叫 &lt;strong&gt;&lt;span&gt;Machine&lt;/span&gt;&lt;/strong&gt;，平时大家看不到我（比如那些程序猿，他们眼里只有 G）。有些人觉得我很神秘，但其实我就是个普通的线程。我服务所有 G ，是真正的打工人，就我这样的好人还要被人吐槽，太委屈了。我下面也要说点心里话，不针对任何人，特别是不针对 G 和猿类。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;咱是真正的劳动人民，是真正吭呲吭呲干活的，所有的 G 都得依靠咱才能跑起来，不然 G 拿跟别人什么炫耀，我辛苦的处理 G 包袱里的东西，但是总有不地道的 G ，站着茅坑不拉屎，把 cpu 吃的飞起，咱也送不走这大爷。咱后面可是有成百上千的 G 后面排着队呢，被催的要死，好像是我的错似的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我一直是个好好先生，跟 G 好商好量的，G 走不走由他自己，但真有些不地道的 G，一占就是几秒钟（甚至不走），导致我很被动，于是我下定决心，这个权力得掌握在自己手里。1.14 之后，我强硬了，对那些在我地盘疯狂吃 cpu，做无意义的事情的 G，20 毫秒到点之后，我必须把他赶走，伺候下一个，&lt;span&gt;&lt;strong&gt;咱是要对所有人公平&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4UtmXsuLoNcaEdUiaNfXdxziab9fcJjeP9zBeD7L5xTGFl7d2HFTVy5mqaCibxE2Sj5COCpqFFpIibNKicpmxF4ia7Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;P 的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 P，GMP 的 P ，我的英文名叫做 &lt;strong&gt;&lt;span&gt;Processor&lt;/span&gt;&lt;/strong&gt;，英文名字看起来很高大上，但其实我并不是实际干活的。我就是个装东西的篓子而已，你也可以叫我队列，列表，都可以。我篓子里装的是 G。虽然我简单，但是我骄傲。因为我就是尚方宝剑，每个要上岗干活的 M 都要申请得到我（呵，男人），有 P 的 M 才是有身份的劳动人民，才有资格处理 G ，其他的 M 都是黑工，将被剥夺服务 G 的权利。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我一般有多少化身呢？看情况吧，不确定，一般咱就和机器的 CPU 核数一样就行，当然这个也可以改。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;操作系统内核的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;我没啥要讲的呀，我不知道 &lt;span&gt;GMP&lt;/span&gt; 是啥东西，&lt;/span&gt;&lt;/strong&gt;我不懂，这东西是他们用户态鼓捣的东西，我就看到他们创建了几个线程，还起了个 Machine 的名字，每个线程 cpu 好像跑的还挺满的，不知道在干啥，反正不关我的事。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;Golang 的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是 Golang，大家也叫我 Go。我的父亲是 Rob Pike（罗伯.派克），Ken Thompson（肯.汤普森）和Robert Griesemer（罗伯特.格利茨默），但&lt;strong&gt;&lt;span&gt;我现在的爸爸是 Google &lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.17421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/4UtmXsuLoNcaEdUiaNfXdxziab9fcJjeP9JTogOeFbtMNucrgTCzybXrB3fK6Q3y1WVDF7sCZ3iaWtUax9zNSy5yQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对，一切都是我做的，我承认。为了精致简化并发的使用姿势，我把协程天然集成在语言层面来实现。为了让程序猿使用的更爽，我把内存回收放到后台打扫，这就是 runtime 的由来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家觉得我很激进，我承认有赌的成分，但是有 Google 爸爸支持我，现在看来我觉得赌对了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;G 是我搞的，M 也是我搞的，P 也是我搞的，操作系统他不知情，他只是看到我在初始化的时候申请创建了几个线程，我把这个线程包装成了 M，我把用户了代码伪装成了 G，放到 P 的篓子里，然后让每个 M 去处理，一切都很美好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但其实我心里也委屈，我在不惊动操作系统的基础上，完成了完美的调度，让并发的姿势极致的简洁，让 G 看起来都能并发执行，就这样还有人经常怪我调度不给力，我能怎么办？总有不地道的 G 占着 M，卡了 M 还怪我。我一看到 M 阻塞的多了，怕影响到 G 的服务质量，赶紧创建新的 M ，结果操作系统又来怪我创建太多线程，我tm。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;于是，我也变了，1.14 之后，我变的冷血无情，我只要看到 G 占着 M 时间超过一丢丢，我就忍不了，我就直接把 G 踢下去，让 M 给别的 G 服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实我还做了很多事情，为了让那些懒惰的程序猿过上好日子，我连内存回收都不让他们自己做，手动回收内存很伤手的。结果又有猿类骂我清理内存垃圾影响到他的正常工作了，其实我现在几乎都没有 stw 了，我。。。， 你回去写你的 c 吧，多泄露泄露，多飞一些指针，多踩踩内存，你就会想起我 Golang 好了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;程序猿的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是程序猿，&lt;strong&gt;&lt;span&gt;我是所有语言的甲方&lt;/span&gt;&lt;/strong&gt;。我对 Go 这位同志也客观的评价几句：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 出生的时候我就关注他了，有背景，有噱头，我对他的期待当然很大。必须承认，Golang 并发姿势确实简单，就 &lt;code&gt;go 一下 函数( )&lt;/code&gt;  好像就并发运行了，好神奇。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1722222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4UtmXsuLoNcaEdUiaNfXdxziab9fcJjeP9s4dsMEfgcRMapj4TlVh3Vrok4dPkwMuAPgXKrC8BicRZQewe9FeJw6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 它的成长很快，刚出来的时候性能不忍看，运行的时候卡个秒级也是常见，好在有个好爸爸，现在变了很多，但我总感觉就是还有成长的空间，不能夸的太凶。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再说内存，使用方便了，但是我总觉得垃圾回收好像会影响到我，具体原因我也说不出来，Golang 说他几乎没有 stw，反正我就怪他了。我觉得我是甲方天然的权力，吐槽是我的义务，我躺好就行。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h2&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0208333333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/E7PuB8occXpoqnvYsd3GsYicWxmuCvI2p5mSKsxCognzURYY27N4Z1AUlCXytekruoDOia3GM5w8iadrELIRk4OKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;96&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot; mpa-is-content=&quot;t&quot;&gt;奇伢的心声&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1929824561403508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fMeqxiaIMiaH6OPjyIRmVSYPsDpIcBqcaRCGpZFXHqCVfldMeUMM0r8e5lEmTjvfNrbw7UtCFoXQ18E5XYeADxhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;114&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是奇伢采访 GMP 的记录，他们各说各有理，我们且当个看官。&lt;span&gt;其实奇伢最近也有些委屈，借此文章宝地，回应一些朋友的疑问哈：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3527080581241744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/VICDXkv9ChOIjhpgKNKzffZEGCLTGoHKyLcfXaEmVUvvulV6m1uicCOia8bvmHr1aRjIiaNlERfW9c8q4drO0Xf8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1514&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;  &lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;问题一：奇伢你最近转载有点多呀？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确实，最近有些转载。奇伢除了自己定期会分享有思考的原创文章，也会定期的分享一些优质的朋友的文章。分享的原因有两个：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不同的圈子相互交流，可以传播更多的知识，让读者朋友有机会了解更多的优质文章；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;相同类别的号主的优质互转，可以促进圈子的融合，才能有更多的传播；&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面是官方的术语，读者可能听不大懂哈。那奇伢说句掏心窝子的大白话：&lt;span&gt;&lt;strong&gt;转载、互推只为了活下去而已&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，优质原创干货的内容一定必须的。但仅仅如此远远不够，这几乎不能主动的引起别人的关注，公众号的圈子是一个私域的流量圈子。当只有 10 个人关注你的时候，你如果不主动做任何传播，你就算写出个 10 万字的超级干货，也还是只有这 10 个人知道你而已。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;笔者曾经花了两周的时间精心输出的干货文章，从构思，画图，Linux 内核代码阅读，测试代码编写和验证，极其耗费精力。但就算是这样一篇文章，如果不算别人的转载，主动引发别人的新关注也只有个位数。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在此非常非常感谢那些愿意主动分享奇伢文章的读者朋友，真的，没有你们的分享和【在看】，那就真的一个新关注都不会有。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，发一些高质量文章的时候叫好不叫座，转化效果并不好，读者朋友大都看完滑走，转载的时候吐槽，发推广取关（说起来文中广告我是全部关闭的），真的挺难的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;我，这一切只是为了活着而已。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;  &lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;问题二：公众号分享的领域和节奏？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的公众号会持续分享以&lt;strong&gt;云存储领域为核心&lt;/strong&gt;的文章。从 Linux 基础，c/c++ 或 Go 语言的基础知识，网络基础知识，分布式架构方面的知识，还有 Linux 工具原理都会有分享，基本上是&lt;strong&gt;一周一篇原创的节奏&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;编程语言 + 编程内功 =&amp;gt; 应用领域&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;  &lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;问题三：谈谈公众号以后的想法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本职工作确实挺忙的，这个是绝对的优先级。所以，基本上只有周末抽时间总结梳理一些思考文章，但无论多忙，&lt;span&gt;&lt;strong&gt;奇伢给自己定制的目标是一周至少一篇原创的分享&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;奇伢自己也在持续学习，会把自己学习到的优质文章，优质的号主分享给大家。&lt;span&gt;&lt;strong&gt;这些发布的文章，一定是奇伢认为有学习收获的文章&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;本公众号有自己的底线，绝对不会抄袭的行为，也绝对不会贩卖焦虑，只想&lt;strong&gt;&lt;span&gt;做一个实打实的，有思考，有温度的公众号。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;  &lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;问题四：对这些读者朋友的建议、夸赞、吐槽，怎么看？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我非常感谢那些和我互动的读者，这是真心话。无论是夸我还是吐槽我，我觉得他们是喜欢我的文章才来留言的，只有是在乎才会和我互动，在此非常感谢所有夸奖和批评。&lt;span&gt;如果我的文章对你有些许帮助，希望也能得你们持续的支持和关注，感谢。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也欢迎加我的微信：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;liqingqiya2019&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，奇伢有一个云存储的交流群，群里定期会分享一些存储小知识，没有文章那么正式，想到啥就分享啥，或许对你有用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-none-contnet=&quot;t&quot;&gt;5&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;  &lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;问题五：奇伢近期的规划？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近在梳理一个硬核分享，关于 Linux 文件系统的，希望通过这个系列分享，&lt;strong&gt;&lt;span&gt;让所有人都对文件系统有绝对深刻的理解&lt;/span&gt;&lt;/strong&gt;。敬请期待。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3NTU3OTgxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/4UtmXsuLoNfpSsicr2uYa18q5VPCn36n2I21B8JFSRiaUBfiaj6QSExkQNBLfNJzW9qbp9BwMGy6K9bvPhHicZFgaQ/0?wx_fmt=png&quot; data-nickname=&quot;奇伢云存储&quot; data-alias=&quot;qiyacloud&quot; data-signature=&quot;云存储深耕之路，专注于对象存储，块存储，云计算领域。坚持撰写有思考的技术文章。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>502e1fe3903c7242c9ed7197fa7b25e5</guid>
<title>微服务拆分之道</title>
<link>https://toutiao.io/k/mr1knwm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>de36765788e5190f136a365d4a2a04a4</guid>
<title>原始套接字打造 ping 命令</title>
<link>https://toutiao.io/k/zasa0zm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI0MzA2OTc4MQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JicGiaeuWY5k8z6JHS4KYxQ2zp2lU9mjSC6PsvBlib658u3CnrSQsuCzAg/0?wx_fmt=png&quot; data-nickname=&quot;码农UP2U&quot; data-alias=&quot;&quot; data-signature=&quot;关于 Java、PHP、其他编程语言……或安全、或码农、或技术、或总结！学习交流，共同进步！码农 up to you，码农UP2U!&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;早期文章：&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Ping 命令的构造&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    ping 命令依赖的不是&lt;/span&gt;&lt;span&gt;TCP &lt;/span&gt;&lt;span&gt;协议，也不是&lt;/span&gt;&lt;span&gt;UDP &lt;/span&gt;&lt;span&gt;协议，&lt;/span&gt;&lt;span&gt;&lt;span&gt;它依赖的是&lt;/span&gt;&lt;span&gt;ICMP&lt;/span&gt;&lt;span&gt;协议。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ICMP&lt;/span&gt;&lt;span&gt;是&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;层的协议之一，它传递差错报文以及其他需要注意的信息。&lt;/span&gt;&lt;span&gt;ICMP&lt;/span&gt;&lt;span&gt;报文通常被&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;层或高层协议使用。&lt;/span&gt;&lt;span&gt;ICMP&lt;/span&gt;&lt;span&gt;封装在&lt;/span&gt;&lt;span&gt;IP&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;span&gt;报&lt;/span&gt;&lt;span&gt;内部，如下图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3157894736842105&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5Q111nBWDxaqzGqzx6cFcLVZvLzfGNNWHc7AnP2LcfdJsc9wQicOr1oxtichGvfzHGm6qvxFag88A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    ICMP报文的格式如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3575883575883576&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5Q111nBWDxaqzGqzx6cFcOqiaia7QSrBOEFABhHe3TR7DMqic3icNiag7yOG8rYzvT6t3UBnic3qSRM1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;481&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    ICMP协议的类型码与代码根据不同的情况，各自取不同的值。&lt;/span&gt;&lt;span&gt;&lt;span&gt;Ping&lt;/span&gt;命令类型码用到了&lt;span&gt;2&lt;/span&gt;个值，分别是&lt;span&gt;0&lt;/span&gt;和&lt;span&gt;8&lt;/span&gt;。&lt;/span&gt;&lt;span&gt;而代码的取值都是&lt;span&gt;0&lt;/span&gt;。&lt;/span&gt;&lt;span&gt;当类型码取值为&lt;span&gt;0&lt;/span&gt;时，代码的&lt;span&gt;0&lt;/span&gt;值表示回显应答；&lt;/span&gt;&lt;span&gt;当类型码取值为&lt;span&gt;8&lt;/span&gt;时，代码的&lt;span&gt;0&lt;/span&gt;值表示请求回显。&lt;/span&gt;&lt;span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;ing命令发送一个&lt;span&gt;ICMP&lt;/span&gt;数据报时，类型码为&lt;span&gt;8&lt;/span&gt;，代码为&lt;span&gt;0&lt;/span&gt;，表示向对方主机进行请求回显；当收到对方的&lt;span&gt;ICMP&lt;/span&gt;数据报时，类型码为&lt;span&gt;0&lt;/span&gt;，代码为&lt;span&gt;0&lt;/span&gt;，表示收到了对方主机的回显应答。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;简单来说，&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;命令发出的数据中，类型是8，代码是&lt;span&gt;0&lt;/span&gt;，如果对方有回应，那么对方回应的数据中，类型是&lt;span&gt;0&lt;/span&gt;，代码是&lt;span&gt;0&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    在自己实现Ping命令时，就是去自己构造一个请求回显的&lt;span&gt;ICMP&lt;/span&gt;数据报，然后进行发送。&lt;span&gt;ICMP&lt;/span&gt;的数据结构定义如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;icmp_header&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; icmp_type;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; icmp_code;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_checksum;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_id;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_sequence;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; icmp_timestamp;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;    明白了ICMP协议的数据结构，现在用抓包工具（也可以称为协议分析工具）&lt;span&gt;Wireshark&lt;/span&gt;来分析一下&lt;span&gt;ICMP&lt;/span&gt;结构真实的情况，如下图所示。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.898238747553816&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5Q111nBWDxaqzGqzx6cFc5Y3NjNbBsKCC8bhicVWS4MKO6dZD4vibhAibsR9kGvXvysZXOaRsTvg9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;511&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    在上图中，标识&lt;span&gt;1&lt;/span&gt;的部分是对协议进行过滤设置的，在该部分输入“&lt;span&gt;ICMP&lt;/span&gt;”可以让&lt;span&gt;Wireshark&lt;/span&gt;只显示&lt;span&gt;ICMP&lt;/span&gt;协议的数据记录。相应地，可以输入“&lt;span&gt;TCP&lt;/span&gt;”、“&lt;span&gt;UDP&lt;/span&gt;”、“&lt;span&gt;HTTP&lt;/span&gt;”等协议进行筛选过滤。标识&lt;span&gt;2&lt;/span&gt;的部分用于显示筛选后的&lt;span&gt;ICMP&lt;/span&gt;记录，从这里可以明显看出源&lt;span&gt;IP&lt;/span&gt;地址、目的&lt;span&gt;IP&lt;/span&gt;地址和协议的类型。标识&lt;span&gt;3&lt;/span&gt;的部分用于显示&lt;span&gt;ICMP&lt;/span&gt;数据结构的值和附加的数据内容。最下面的部分显示了数据的原始的二进制数据，在熟练掌握协议后，查看原始的二进制数据也并不是不可能的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Ping命令的实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;    有了前面的基础，就可以构造自己的ICMP数据报来构造自己的&lt;span&gt;ping&lt;/span&gt;命令了。首先，定义两个常量，还有计算校验和的函数，具体如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;icmp_header&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; icmp_type;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; icmp_code;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_checksum;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_id;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; icmp_sequence;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; icmp_timestamp;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ICMP_HEADER_SIZE sizeof(icmp_header)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ICMP_ECHO_REQUEST 0x08&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ICMP_ECHO_REPLY 0x00&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;chsum&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(struct icmp_header *picmp, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; *pusicmp = (&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt; *)picmp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ( len &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sum += *(pusicmp++);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( sum &amp;amp; &lt;span class=&quot;code-snippet__number&quot;&gt;0x80000000&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            sum = (sum &amp;amp; &lt;span class=&quot;code-snippet__number&quot;&gt;0xffff&lt;/span&gt;) + (sum &amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        len -= &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( len )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sum += (&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt;)*(&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *)pusicmp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ( sum &amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt; )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sum = (sum &amp;amp; &lt;span class=&quot;code-snippet__number&quot;&gt;0xffff&lt;/span&gt;) + (sum &amp;gt;&amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;short&lt;/span&gt;)~sum;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        ICMP的校验值是一个16位的无符号整型，它会将ICMP协议头不的数据进行累加，当累加有溢出的话，会将溢出的部分也进行累加。具体计算校验和的算法就不过多介绍了，如果对校验和计算的代码不了解，可以进行单步调试来进行分析。再来看一下对于ICMP结构体的填充，具体代码如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt; MyPing(&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *szDestIp)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;BOOL&lt;/span&gt; bRet = &lt;span class=&quot;code-snippet__literal&quot;&gt;TRUE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    WSADATA wsaData;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; nTimeOut = &lt;span class=&quot;code-snippet__number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; szBuff[ICMP_HEADER_SIZE + &lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;] = { &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    icmp_header *pIcmp = (icmp_header *)szBuff;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; icmp_data[&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;] = { &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; };&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    WSAStartup(MAKEWORD(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;), &amp;amp;wsaData);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    SOCKET s = socket(PF_INET, SOCK_RAW, IPPROTO_ICMP);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, (&lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt;*)&amp;amp;nTimeOut, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(nTimeOut));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sockaddr_in dest_addr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dest_addr.sin_family = AF_INET;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dest_addr.sin_addr.S_un.S_addr = inet_addr(szDestIp);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    dest_addr.sin_port = htons(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_type = ICMP_ECHO_REQUEST;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_code = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_id = (USHORT)::GetCurrentProcessId();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_sequence = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_timestamp = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_checksum = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    memcpy((szBuff + ICMP_HEADER_SIZE), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;abcdefghijklmnopqrstuvwabcdefghi&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pIcmp-&amp;gt;icmp_checksum = chsum((&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; icmp_header *)szBuff, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(szBuff));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sockaddr_in from_addr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; szRecvBuff[&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; nLen = &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(from_addr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DWORD dwStart = GetTickCount();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sendto(s, szBuff, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(szBuff), &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, (SOCKADDR *)&amp;amp;dest_addr, &lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(SOCKADDR));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    recvfrom(s, szRecvBuff, MAXBYTE, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;, (SOCKADDR *)&amp;amp;from_addr, &amp;amp;nLen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DWORD dwEnd = GetTickCount();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; ( lstrcmp(inet_ntoa(from_addr.sin_addr), szDestIp) )&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        bRet = &lt;span class=&quot;code-snippet__literal&quot;&gt;FALSE&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; icmp_header *pIcmp1 = (icmp_header *)(szRecvBuff + &lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        printf(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s %d\r\n&quot;&lt;/span&gt;, inet_ntoa(from_addr.sin_addr), dwEnd - dwStart);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; bRet;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        调用运行输出如下&lt;/span&gt;：&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.4221105527638191&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5Q111nBWDxaqzGqzx6cFceMwXDtOeMkscRoIXrHezZ7Xndo3m6y6FtC99gCViaYmytAia3Xk94EEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;199&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        第一列是我们ping的IP地址，后面是数据包往返经过的毫秒数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;&lt;strong&gt;完整内容参考《C++黑客编程揭秘与防范》（第三版）一书。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;更多文章：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.36484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Bfv9smoHwth5nBzNr9kZshQ25yhLz08JHWsQdz8yVn3MVh22hia7NFoPyNJz4ZI7XUnMa9xM50TJRqPkWf7BRibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>60b3cf17fdd6bc836be3442a65bd0f56</guid>
<title>面试侃集合：SynchronousQueue 非公平模式篇</title>
<link>https://toutiao.io/k/6qaznpz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试官：好了，你也休息了十分钟了，咱们接着往下聊聊&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;&lt;span&gt;&lt;strong&gt;的非公平模式吧。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：好的，有了前面公平模式的基础，非公平模式理解起来就非常简单了。公平模式下，&lt;code&gt;SynchronousQueue&lt;/code&gt;底层使用的是&lt;code&gt;TransferQueue&lt;/code&gt;，是一个先进先出的队列，而非公平模式与它不同，底层采用了后进先出的&lt;code&gt;TransferStack&lt;/code&gt;栈来实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我们还是先写一个例子来看看效果，首先创建3个线程使用&lt;code&gt;put&lt;/code&gt;方法向&lt;code&gt;SynchronousQueue&lt;/code&gt;中插入数据，结束后再使用3个线程调用&lt;code&gt;take&lt;/code&gt;方法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;SynchronousQueue&amp;lt;Integer&amp;gt; queue=&lt;span&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;&amp;gt;(&lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@AllArgsConstructor&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PutThread&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i;&lt;br/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;        queue.put(i);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;putThread &quot;&lt;/span&gt;+i+&lt;span&gt;&quot; end&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TakeThread&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Runnable&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;run&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;takeThread take: &quot;&lt;/span&gt;+queue.take());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;=&lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;    &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; PutThread(i)).start();&lt;br/&gt;    Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;=&lt;span&gt;3&lt;/span&gt; ; i++) {&lt;br/&gt;    &lt;span&gt;new&lt;/span&gt; Thread(&lt;span&gt;new&lt;/span&gt; TakeThread()).start();&lt;br/&gt;    Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行上面的代码，查看结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;takeThread take: 3&lt;br/&gt;putThread 3 end&lt;br/&gt;takeThread take: 2&lt;br/&gt;putThread 2 end&lt;br/&gt;takeThread take: 1&lt;br/&gt;putThread 1 end&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，生产者线程在执行完&lt;code&gt;put&lt;/code&gt;后会进行阻塞，直到有消费者线程调用&lt;code&gt;take&lt;/code&gt;方法取走了数据，才会唤醒被阻塞的线程。并且，数据的出队与入队顺序是相反的，即非公平模式下采用的是后进先出的顺序。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5769230769230769&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicZPgs85CvrDAaic1e9lLsu2WQVdV1LiaMMAm2xr94wn4BR8d96RQNMQTvKYJBJujZ5ibIafRff97Y2UQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;780&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：就是把结构从队列换成了栈，真就这么简单？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：并不是，包括底层节点以及出入栈的逻辑都做了相应的改变。我们先看节点，在之前的公平模式中队列的节点是&lt;code&gt;QNode&lt;/code&gt;，非公平模式下栈中节点是&lt;code&gt;SNode&lt;/code&gt;，定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;volatile&lt;/span&gt; SNode next; &lt;span&gt;// 指向下一个节点的指针&lt;/span&gt;&lt;br/&gt;&lt;span&gt;volatile&lt;/span&gt; SNode match; &lt;span&gt;// 存放和它进行匹配的节点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;volatile&lt;/span&gt; Thread waiter;  &lt;span&gt;// 保存阻塞的线程&lt;/span&gt;&lt;br/&gt;Object item;                &lt;br/&gt;&lt;span&gt;int&lt;/span&gt; mode;&lt;br/&gt;SNode(Object item) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.item = item;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和&lt;code&gt;QNode&lt;/code&gt;类似，如果是生产者构建的节点，那么&lt;code&gt;item&lt;/code&gt;非空，如果是消费者产生的节点，那么&lt;code&gt;item&lt;/code&gt;为&lt;code&gt;null&lt;/code&gt;。此外还有一个&lt;code&gt;mode&lt;/code&gt;属性用来表示节点的状态，它使用&lt;code&gt;TransferStack&lt;/code&gt;中定义的3个常量来表示不同状态：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; REQUEST    = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//消费者&lt;/span&gt;&lt;br/&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DATA       = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//生产者&lt;/span&gt;&lt;br/&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; FULFILLING = &lt;span&gt;2&lt;/span&gt;; &lt;span&gt;//匹配中状态&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;TransferStack&lt;/code&gt;中没有携带参数的构造函数，使用一个&lt;code&gt;head&lt;/code&gt;节点来标记栈顶节点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;volatile&lt;/span&gt; SNode head; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：基本结构就讲到这吧，还是老规矩，先从入队操作开始分析吧。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：当栈为空、或栈顶元素的类型与自己相同时，会先创建一个&lt;code&gt;SNode&lt;/code&gt;节点，并将它的&lt;code&gt;next&lt;/code&gt;节点指向当前栈顶的&lt;code&gt;head&lt;/code&gt;，然后将&lt;code&gt;head&lt;/code&gt;指针指向自己。这个过程中通过使用&lt;code&gt;CAS&lt;/code&gt;保证线程安全，如果失败则退出，在循环中采取自旋的方式不断进行尝试，直到节点入栈成功。用一张图来表示两个线程同时入栈的场景：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5294117647058824&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicYZQbCIceB84uU3ia5L6FR35GMoHBVZjkD1VXNCeHJa4xY3IPKIO3gPqicaZHAwtnBLjjHTaQG5LJmQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;850&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当节点完成入栈后，调用&lt;code&gt;awaitFulfill&lt;/code&gt;方法，等待匹配的操作的到来。在这一过程中，会使节点对应的线程进行自旋或挂起操作，直到匹配操作的节点将自己唤醒，或被其他线程中断、等待超时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当入栈后的节点是栈顶节点，或者节点的类型为&lt;code&gt;FULFILLING&lt;/code&gt;匹配状态时，那么可能会马上完成匹配，因此先进行自旋，当超过自旋次数上限后再挂起。而如果节点在自旋过程中，有新的节点压入栈顶，会将非栈顶节点剩余的自旋次数直接清零，挂起线程避免浪费资源。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.46511627906976744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicYZQbCIceB84uU3ia5L6FR35dXUaZ5fS3MpCSIEMcZpfrny4JVJfaeSuZWaCkAviaibhoZ9VPFPkwOdw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试官&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;：你上面也说了，挂起的线程有可能会超时或者被中断，这时候应该怎么处理？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：当这两种情况出现时，&lt;code&gt;SNode&lt;/code&gt;会将&lt;code&gt;match&lt;/code&gt;属性设为自身，退出&lt;code&gt;awaitFulfill&lt;/code&gt;方法，然后调用&lt;code&gt;clean&lt;/code&gt;方法将对应的节点清理出栈。具体情形可分为两种情况。先说简单的情况，如果清理的是栈顶节点，那么直接将&lt;code&gt;head&lt;/code&gt;节点指向它的&lt;code&gt;next&lt;/code&gt;节点，即将当前栈顶节点弹出即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：那么如果要删除的节点不是栈顶的节点呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：如果清理的不是栈顶节点，会稍微有一些麻烦。因为栈的底层是一个单向的链表结构，所以需要从栈顶&lt;code&gt;head&lt;/code&gt;节点开始遍历，遍历到被删除节点的后继节点为止。所以在清除工作开始前，先使用了一个&lt;code&gt;past&lt;/code&gt;节点标记需要删除节点的下一个节点，作为结束遍历的标记。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后创建一个标记节点&lt;code&gt;p&lt;/code&gt;，初始时指向&lt;code&gt;head&lt;/code&gt;节点，开始循环，如果&lt;code&gt;p&lt;/code&gt;的&lt;code&gt;next&lt;/code&gt;节点不是需要被删除的节点，那么就将&lt;code&gt;p&lt;/code&gt;向后移一个位置，直到找到这个需要被删除的中断或超时的节点，然后将&lt;code&gt;p&lt;/code&gt;的&lt;code&gt;next&lt;/code&gt;指向这个删除节点的&lt;code&gt;next&lt;/code&gt;节点，在逻辑上完成链表中节点的删除。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5263157894736842&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicYZQbCIceB84uU3ia5L6FR35D3F5qQic6NV8Flc4OlSpO4keGS082aSibQFXGHGEmxyrMnZHIgYXJ6tA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;760&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：单一类型节点的入栈应该说完了吧，接下来说说不同类型节点间是如何实现的匹配操作吧？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：好的，那我们先回顾一点上面的知识，前面说过每个节点有一个&lt;code&gt;mode&lt;/code&gt;属性代表它的模式，&lt;code&gt;REQUEST&lt;/code&gt;表示它是消费者，&lt;code&gt;DATA&lt;/code&gt;表示是生产者，&lt;code&gt;FULFILLING&lt;/code&gt;表明正处于匹配中的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一个新的线程调用方法时，先判断它的类型&lt;code&gt;mode&lt;/code&gt;是什么，如果和当前栈顶&lt;code&gt;head&lt;/code&gt;节点类型不同，且&lt;code&gt;head&lt;/code&gt;节点的状态不为匹配中时，将它的状态设置为&lt;code&gt;FULFILLING|mode&lt;/code&gt;，压入栈中。然后将尝试匹配新的&lt;code&gt;head&lt;/code&gt;节点和它的&lt;code&gt;next&lt;/code&gt;节点，如果匹配成功，会将&lt;code&gt;next&lt;/code&gt;节点的&lt;code&gt;match&lt;/code&gt;属性设置为&lt;code&gt;head&lt;/code&gt;节点，唤醒挂起的&lt;code&gt;next&lt;/code&gt;节点中的线程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在完成匹配后，当前头节点对应的线程会协助推进&lt;code&gt;head&lt;/code&gt;节点，将&lt;code&gt;head&lt;/code&gt;指向&lt;code&gt;next&lt;/code&gt;节点的下一个节点，即完成了栈顶两节点的出栈。最终消费者线程会返回匹配的生产者节点中的&lt;code&gt;item&lt;/code&gt;数据值，而生产者线程也会结束运行退出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以栈中当前节点为&lt;code&gt;DATA&lt;/code&gt;类型，新节点为&lt;code&gt;REQUEST&lt;/code&gt;类型画一张图，来直观的感受一下上面的流程：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6578947368421053&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicYZQbCIceB84uU3ia5L6FR35BSMfGZn1fY3N4WwvYicrv22kyalwEKZMia3zQ93U4AmoKEdXLicMpdRrQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;760&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;官：总算是讲完了，能对&lt;/strong&gt;&lt;/span&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;&lt;span&gt;&lt;strong&gt;做一个简单的总结吗？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：&lt;code&gt;SynchronousQueue&lt;/code&gt;基于底层结构，实现了线程配对通信这一机制。在它的公平模式下使用的是先进先出（&lt;code&gt;FIFO&lt;/code&gt;）的队列，非公平模式下使用的是后进先出（&lt;code&gt;LIFO&lt;/code&gt;）的栈，并且&lt;code&gt;SynchronousQueue&lt;/code&gt;没有使用&lt;code&gt;synchronized&lt;/code&gt;或&lt;code&gt;ReentrantLock&lt;/code&gt;，而是使用了大量的&lt;code&gt;CAS&lt;/code&gt;操作来保证并发操作。可能我们在平常的工作中使用场景不是很多，但是在线程池的设计中使用了&lt;code&gt;SynchronousQueue&lt;/code&gt;，还是有很重要的应用场景的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;面&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;试官：讲的还行，不过刚才这些和公平模式听起来感觉区别不大啊，没有什么技术含量。这样吧，你明天过来我们加试一场，我再给你打分。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Hydra：（溜了溜了，还是找家别的靠谱公司吧……）&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>