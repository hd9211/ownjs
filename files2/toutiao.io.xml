<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3403d4b8c7a65ef00181a9ef5b8a6aa9</guid>
<title>写了一年 Golang，来聊聊进程、线程与协程</title>
<link>https://toutiao.io/k/ln51p4k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5NjE2MDQwNg==&amp;amp;action=getalbum&amp;amp;album_id=2037209245548331010#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2037209245548331010&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;golang&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;3个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;进程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在早期的单任务计算机中，用户一次只能提交一个作业，独享系统的全部资源，同时也只能干一件事情。进行计算时不能进行 IO 读写，但 CPU 与 IO 的速度存在巨大差异，一个作业在 CPU 上所花费的时间非常少，大部分时间在等待 IO。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了更合理的利用 CPU 资源，把内存划分为多块，不同程序使用各自的内存空间互不干扰，这里单独的程序就是一个进程，CPU 可以在多个进程之间切换执行，让 CPU 的利用率变高。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了实现 CPU 在多个进程之间切换，需要保存进程的上下文（如程序计数器、栈、内核数据结构等等），以便下次切换回来可以恢复执行。还需要一种调度算法，Linux 中采用了基于时间片和优先级的完全公平调度算法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;线程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;多进程的出现是为了解决 CPU 利用率的问题，那为什么还需要线程？答案是为了&lt;code&gt;减少上下文切换时的开销&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进程在如下两个时间点可能会让出 CPU，进行 CPU 切换：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;进程阻塞，如网络阻塞、代码层面的阻塞（如锁）、系统调用等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;进程时间片用完，让出 CPU&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而进程切换 CPU 时需要进行这两步：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;切换页目录以使用新的地址空间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;切换内核栈和硬件上下文&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;进程和线程在 Linux 中没有本质区别，他们最大的不同就是进程有自己独立的内存空间，而线程（同进程中）是共享内存空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在进程切换时需要转换内存地址空间，而线程切换没有这个动作，所以线程切换比进程切换代价更小。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为什么内存地址空间转换这么慢？Linux 实现中，每个进程的地址空间都是虚拟的，虚拟地址空间转换到物理地址空间需要查页表，这个查询是很慢的过程，因此会用一种叫做 TLB 的 cache 来加速，当进程切换后，TLB 也随之失效了，所以会变慢。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，线程是为了降低进程切换过程中的开销。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;协程&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们的程序是 IO 密集型时（如 web 服务器、网关等），为了追求高吞吐，有两种思路：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为每个请求开一个线程处理，为了降低线程的创建开销，可以使用线程池技术，理论上线程池越大，则吞吐越高，但线程池越大，CPU 花在切换上的开销也越大&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;线程的创建、销毁都需要调用系统调用，每次请求都创建，高并发下开销就显得很大，而且线程占用内存是 MB 级别，数量不能太多&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为什么线程越多 cpu 切换越多？准确来说是可执行的线程越多，cpu 切换越多，因为操作系统的调度要保证绝对公平，有可执行线程时，一定是要雨露均沾，所以切换次数变多&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;使用异步非阻塞的开发模型，用一个进程或线程接收请求，然后通过 IO 多路复用让进程或线程不阻塞，省去上下文切换的开销&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个方案，优缺点都很明显，方案1实现简单，但性能不高；方案2性能非常好，但实现起来复杂。有没有介于这两者之间的方案？既要简单，又要性能高，协程就解决了这个问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;协程是用户视角的一种抽象，操作系统并没有这个概念，其主要思想是在用户态实现调度算法，用少量线程完成大量任务的调度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;协程需要解决线程遇到的几个问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一点好实现，用户态的协程，只是一个数据结构，无需系统调用，而且可以设计的很小，达到 KB 级别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二点只能减少上下文切换次数来解决，因为协程的本质还是线程，其切换开销在用户态是无法降低的，只能通过降低切换次数来达到总体上开销的减少，可以有如下手段：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;让可执行的线程尽量少，这样切换次数必然会少&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让线程尽可能的处于运行状态，而不是阻塞让出时间片&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Goroutine&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;goroutine 是 golang 实现的协程，其特点是在语言层面就支持，使用起来非常方便，它的核心是MPG调度模型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;M：内核线程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;P：处理器，用来执行 goroutine，它维护了本地可运行队列&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;G：goroutine，代码和数据结构&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;S：调度器，维护M和P的信息&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外还有一个全局可运行队列。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5115606936416185&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZjS7OalmEfFkkroWgkVzzsK4wsRF3Fe19uvqFdQj2NgJohoeN4yDgpFnVwRGp3cXC5hSy3QeZTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在 golang 中使用 &lt;strong&gt;go&lt;/strong&gt; 关键字启动一个 goroutine，它将会被挂到 P 的 runqueue 中，等待被调度&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7963446475195822&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZjS7OalmEfFkkroWgkVzz4q6zeIAB8Zar0OfQDU5zse7ypoYtQnvcIpuVjNRf9dPe71PicdYlCxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当 M0 中正在运行的 G0 阻塞时（如执行了一个系统调用），此时 M0 会休眠，它将放弃挂载的 P0，以便被其他 M 调度到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7003968253968254&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/xacdaKuBM0RZjS7OalmEfFkkroWgkVzzCcCj41p0FmNrOcERITaicHSIwoHgcahP2hmWZ89yiaHicoB6kK0FDukLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/figure&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当 M0 系统调用结束后，会尝试“偷”一个 P，如果不成功，M0 将 G0 放到全局的 runqueue 中&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;P 会定期检查全局 runqueue，保证自己消化完 G 后有事可做，同时也会从其他 P 里“偷” G&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上述看来，MPG 模型似乎只限制了同时运行的线程数，但上下文切换只发生在可运行的线程上，应该是有一定的作用，当然这只是一部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 在 runtime 层面拦截了可能导致线程阻塞的情况，并针对性优化，他们可分为两类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;网络 IO、channel 操作、锁：只阻塞 G，M、P 可用，即线程不会让出时间片&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统调用：阻塞 M，P 需要切换，线程会让出时间片&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以综合来看，goroutine 会比线程切换开销少。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从单进程到多进程提高了 CPU 利用率；从进程到线程，降低了上下文切换的开销；从线程到协程，进一步降低了上下文切换的开销，使得高并发的服务可以使用简单的代码写出来，技术的每一步发展都是为了解决实际问题。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;搜索关注微信公众号&quot;捉虫大师&quot;，后端技术分享，架构设计、性能优化、源码阅读、问题排查、踩坑实践。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/xacdaKuBM0RZjS7OalmEfFkkroWgkVzzwXwPhbkP2lwUq42VzvyJT6S9j5m1pva1vkDHh0icqOF9Wk2Ntb2ZJiaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>025f497a65cca3cb15e54dd8ad1a47bb</guid>
<title>用了 Stream 后，代码反而越写越丑？</title>
<link>https://toutiao.io/k/u3sf3ct</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java8的stream流，加上lambda表达式，可以让代码变短变美，已经得到了广泛的应用。我们在写一些复杂代码的时候，也有了更多的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码首先是给人看的，其次才是给机器执行的。代码写的是否简洁明了，是否写的漂亮，对后续的bug修复和功能扩展，意义重大。很多时候，是否能写出优秀的代码，是和工具没有关系的。代码是工程师能力和修养的体现，有的人，即使用了stream，用了lambda，代码也依然写的像屎一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不信，我们来参观一下一段&lt;code&gt;美妙&lt;/code&gt;的代码。好家伙，filter里面竟然带着潇洒的逻辑。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;FeedItemVo&amp;gt; &lt;span&gt;getFeeds&lt;/span&gt;&lt;span&gt;(Query query,Page page)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    List&amp;lt;String&amp;gt; orgiList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;    &lt;br/&gt;    List&amp;lt;FeedItemVo&amp;gt; collect = page.getRecords().stream()&lt;br/&gt;    .filter(&lt;span&gt;this&lt;/span&gt;::addDetail)&lt;br/&gt;    .map(FeedItemVo::convertVo)&lt;br/&gt;    .filter(vo -&amp;gt; &lt;span&gt;this&lt;/span&gt;.addOrgNames(query.getIsSlow(),orgiList,vo))&lt;br/&gt;    .collect(Collectors.toList());&lt;br/&gt;    &lt;span&gt;//...其他逻辑&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; collect;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;addDetail&lt;/span&gt;&lt;span&gt;(FeedItem feed)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    vo.setItemCardConf(service.getById(feed.getId()));&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;addOrgNames&lt;/span&gt;&lt;span&gt;(&lt;span&gt;boolean&lt;/span&gt; isSlow,List&amp;lt;String&amp;gt; orgiList,FeedItemVo vo)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(isShow &amp;amp;&amp;amp; vo.getOrgIds() != &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;        orgiList.add(vo.getOrgiName());&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果觉得不过瘾的话，我们再贴上一小段。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (!CollectionUtils.isEmpty(roleNameStrList) &amp;amp;&amp;amp; roleNameStrList.contains(REGULATORY_ROLE)) {&lt;br/&gt;    vos = vos.stream().filter(&lt;br/&gt;           vo -&amp;gt; !CollectionUtils.isEmpty(vo.getSpecialTaskItemVoList())&lt;br/&gt;                    &amp;amp;&amp;amp; vo.getTaskName() != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;           .collect(Collectors.toList());&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    vos = vos.stream().filter(vo -&amp;gt; vo.getIsSelect()&lt;br/&gt;           &amp;amp;&amp;amp; vo.getTaskName() != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;           .collect(Collectors.toList());&lt;br/&gt;    vos = vos.stream().filter(&lt;br/&gt;            vo -&amp;gt; !CollectionUtils.isEmpty(vo.getSpecialTaskItemVoList())&lt;br/&gt;                    &amp;amp;&amp;amp; vo.getTaskName() != &lt;span&gt;null&lt;/span&gt;)&lt;br/&gt;           .collect(Collectors.toList());&lt;br/&gt;}&lt;br/&gt;result.addAll(vos.stream().collect(Collectors.toList()));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码能跑，但多画蛇添足。该缩进的不缩进，该换行的不换行，说什么也算不上好代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何改善？除了技术问题，还是一个意识问题。时刻记得，优秀的代码，首先是可读的，然后才是功能完善。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 合理的换行&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java中，同样的功能，代码行数写的少了，并不见得你的代码就好。由于Java使用&lt;code&gt;;&lt;/code&gt;作为代码行的分割，如果你喜欢的话，甚至可以将整个Java文件搞成一行，就像是混淆后的JavaScript一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，我们知道这么做是不对的。在lambda的书写上，有一些套路可以让代码更加规整。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Stream.of(&lt;span&gt;&quot;i&quot;&lt;/span&gt;, &lt;span&gt;&quot;am&quot;&lt;/span&gt;, &lt;span&gt;&quot;xjjdog&quot;&lt;/span&gt;).map(toUpperCase()).map(toBase64()).collect(joining(&lt;span&gt;&quot; &quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这种代码的写法，就非常的不推荐。除了在阅读上容易造成障碍，在代码发生问题的时候，比如抛出异常，在异常堆栈中找问题也会变的困难。所以，我们要将它优雅的换行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Stream.of(&lt;span&gt;&quot;i&quot;&lt;/span&gt;, &lt;span&gt;&quot;am&quot;&lt;/span&gt;, &lt;span&gt;&quot;xjjdog&quot;&lt;/span&gt;)&lt;br/&gt;    .map(toUpperCase())&lt;br/&gt;    .map(toBase64())&lt;br/&gt;    .collect(joining(&lt;span&gt;&quot; &quot;&lt;/span&gt;));&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不要认为这种改造很没有意义，或者认为这样的换行是理所当然的。在我平常的代码review中，这种糅杂在一块的代码，真的是数不胜数，你完全搞不懂写代码的人的意图。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合理的换行是代码青春永驻的配方。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 舍得拆分函数&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么函数能够越写越长？是因为技术水平高，能够驾驭这种变化么？答案是因为懒！由于开发工期或者意识的问题，遇到有新的需求，直接往老的代码上添加ifelse，即使遇到相似的功能，也直接选择将原来的代码拷贝过去。久而久之，码将不码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先聊一点性能方面的。在JVM中，JIT编译器会对调用量大，逻辑简单的代码进行方法内联，以减少栈帧的开销，并能进行更多的优化。所以，短小精悍的函数，其实是对JVM友好的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在可读性方面，将一大坨代码，拆分成有意义的函数，是非常有必要的，也是重构的精髓所在。在lambda表达式中，这种拆分更是有必要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我将拿一个经常在代码中出现的实体转换示例来说明一下。下面的转换，创建了一个匿名的函数&lt;code&gt;order-&amp;gt;{}&lt;/code&gt;，它在语义表达上，是非常弱的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Stream&amp;lt;OrderDto&amp;gt; &lt;span&gt;getOrderByUser&lt;/span&gt;&lt;span&gt;(String userId)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; orderRepo.findOrderByUser().stream()&lt;br/&gt;        .map(order-&amp;gt; {&lt;br/&gt;            OrderDto dto = &lt;span&gt;new&lt;/span&gt; OrderDto();&lt;br/&gt;            dto.setOrderId(order.getOrderId());&lt;br/&gt;            dto.setTitle(order.getTitle().split(&lt;span&gt;&quot;#&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;            dto.setCreateDate(order.getCreateDate().getTime());&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; dto;&lt;br/&gt;    });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际的业务代码中，这样的赋值拷贝还有转换逻辑通常非常的长，我们可以尝试把dto的创建过程给独立开来。因为转换动作不是主要的业务逻辑，我们通常不会关心其中到底发生了啥。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Stream&amp;lt;OrderDto&amp;gt; &lt;span&gt;getOrderByUser&lt;/span&gt;&lt;span&gt;(String userId)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; orderRepo.findOrderByUser().stream()&lt;br/&gt;        .map(&lt;span&gt;this&lt;/span&gt;::toOrderDto);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; OrderDto &lt;span&gt;toOrderDto&lt;/span&gt;&lt;span&gt;(Order order)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    OrderDto dto = &lt;span&gt;new&lt;/span&gt; OrderDto();&lt;br/&gt;            dto.setOrderId(order.getOrderId());&lt;br/&gt;            dto.setTitle(order.getTitle().split(&lt;span&gt;&quot;#&quot;&lt;/span&gt;)[&lt;span&gt;0&lt;/span&gt;]);&lt;br/&gt;            dto.setCreateDate(order.getCreateDate().getTime());&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; dto;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样的转换代码还是有点丑。但如果OrderDto的构造函数，参数就是Order的话&lt;code&gt;public OrderDto(Order order)&lt;/code&gt;，那我们就可以把真个转换逻辑从主逻辑中移除出去，整个代码就可以非常的清爽。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Stream&amp;lt;OrderDto&amp;gt; &lt;span&gt;getOrderByUser&lt;/span&gt;&lt;span&gt;(String userId)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; orderRepo.findOrderByUser().stream()&lt;br/&gt;        .map(OrderDto::&lt;span&gt;new&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了map和flatMap的函数可以做语义化，更多的filter可以使用Predicate去代替。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Predicate&amp;lt;Registar&amp;gt; registarIsCorrect = reg -&amp;gt; &lt;br/&gt;    reg.getRegulationId() != &lt;span&gt;null&lt;/span&gt; &lt;br/&gt;    &amp;amp;&amp;amp; reg.getRegulationId() != &lt;span&gt;0&lt;/span&gt; &lt;br/&gt;    &amp;amp;&amp;amp; reg.getType() == &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;registarIsCorrect，就可以当作&lt;code&gt;filter&lt;/code&gt;的参数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 合理的使用Optional&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java代码里，由于NullPointerException不属于强制捕捉的异常，它会隐藏在代码里，造成很多不可预料的bug。所以，我们会在拿到一个参数的时候，都会验证它的合法性，看一下它到底是不是null，代码中到处充满了这样的代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; == obj)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;null&lt;/span&gt; == user.getName() || &lt;span&gt;&quot;&quot;&lt;/span&gt;.equals(user.getName()))&lt;br/&gt;    &lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (order != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;    Logistics logistics = order.getLogistics();&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(logistics != &lt;span&gt;null&lt;/span&gt;){&lt;br/&gt;        Address address = logistics.getAddress();&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (address != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            Country country = address.getCountry();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (country != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                Isocode isocode = country.getIsocode();&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt; (isocode != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; isocode.getNumber();&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java8引入了Optional类，用于解决臭名昭著的空指针问题。实际上，它是一个包裹类，提供了几个方法可以去判断自身的空值问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面比较复杂的代码示例，就可以替换成下面的代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; String result = Optional.ofNullable(order)&lt;br/&gt;      .flatMap(order-&amp;gt;order.getLogistics())&lt;br/&gt;      .flatMap(logistics -&amp;gt; logistics.getAddress())&lt;br/&gt;      .flatMap(address -&amp;gt; address.getCountry())&lt;br/&gt;      .map(country -&amp;gt; country.getIsocode())&lt;br/&gt;      .orElse(Isocode.CHINA.getNumber());&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你不确定你提供的东西，是不是为空的时候，一个好的习惯是不要返回null，否则调用者的代码将充满了null的判断。我们要把null消灭在萌芽中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Optional&amp;lt;String&amp;gt; &lt;span&gt;getUserName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Optional.ofNullable(userName);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，我们要尽量的少使用Optional的get方法，它同样会让代码变丑。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; userName = &lt;span&gt;&quot;xjjdog&quot;&lt;/span&gt;;&lt;br/&gt;String defaultEmail = userName.get() == &lt;span&gt;null&lt;/span&gt; ? &lt;span&gt;&quot;&quot;&lt;/span&gt;:userName.get() + &lt;span&gt;&quot;@xjjdog.cn&quot;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而应该修改成这样的方式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; userName = &lt;span&gt;&quot;xjjdog&quot;&lt;/span&gt;;&lt;br/&gt;String defaultEmail = userName&lt;br/&gt;    .map(e -&amp;gt; e + &lt;span&gt;&quot;@xjjdog.cn&quot;&lt;/span&gt;)&lt;br/&gt;    .orElse(&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那为什么我们的代码中，依然充满了各式各样的空值判断？即使在非常专业和流行的代码中？一个非常重要的原因，就是Optional的使用需要保持一致。当其中的一环出现了断层，大多数编码者都会以模仿的方式去写一些代码，以便保持与原代码风格的一致。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要普及Optional在项目中的使用，脚手架设计者或者review人，需要多下一点功夫。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 返回Stream还是返回List？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人在设计接口的时候，会陷入两难的境地。我返回的数据，是直接返回Stream，还是返回List？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你返回的是一个List，比如ArrayList，那么你去修改这个List，会直接影响里面的值，除非你使用不可变的方式对其进行包裹。同样的，数组也有这样的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但对于一个Stream来说，是不可变的，它不会影响原始的集合。对于这种场景，我们推荐直接返回Stream流，而不是返回集合。这种方式还有一个好处，能够强烈的暗示API使用者，多多使用Stream相关的函数，以便能够统一代码风格。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Stream&amp;lt;User&amp;gt; &lt;span&gt;getAuthUsers&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    ...&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; Stream.of(users);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不可变集合是一个强需求，它能防止外部的函数对这些集合进行不可预料的修改。在guava中，就有大量的&lt;code&gt;Immutable&lt;/code&gt;类支持这种包裹。再举一个例子，Java的枚举，它的&lt;code&gt;values()&lt;/code&gt;方法，为了防止外面的api对枚举进行修改，就只能拷贝一份数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，如果你的api，面向的是最终的用户，不需要再做修改，那么直接返回List就是比较好的，比如函数在Controller中。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. 少用或者不用并行流&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java的并行流有很多问题，这些问题对并发编程不熟悉的人高频率踩坑。不是说并行流不好，但如果你发现你的团队，老在这上面栽跟头，那你也会毫不犹豫的降低推荐的频率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并行流一个老生常谈的问题，就是线程安全问题。在迭代的过程中，如果使用了线程不安全的类，那么就容易出现问题。比如下面这段代码，大多数情况下运行都是错误的。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;List &lt;span&gt;transform&lt;/span&gt;&lt;span&gt;(List source)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; List dst = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;br/&gt; &lt;span&gt;if&lt;/span&gt;(CollectionUtils.isEmpty()){&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; dst;&lt;br/&gt; }&lt;br/&gt; source.stream.&lt;br/&gt;  .parallel()&lt;br/&gt;  .map(..)&lt;br/&gt;  .filter(..)&lt;br/&gt;  .foreach(dst::add);&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; dst;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可能会说，我把foreach改成collect就行了。但是注意，很多开发人员是没有这样的意识的。既然api提供了这样的函数，它在逻辑上又讲得通，那你是阻挡不住别人这么用的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;并行流还有一个滥用问题，就是在迭代中执行了耗时非常长的IO任务。在用并行流之前，你有没有一个疑问？既然是并行，那它的线程池是怎么配置的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很不幸，所有的并行流，共用了一个ForkJoinPool。它的大小，默认是&lt;code&gt;CPU个数-1&lt;/code&gt;，大多数情况下，是不够用的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有人在并行流上跑了耗时的IO业务，那么你即使执行一个简单的数学运算，也需要排队。关键是，你是没办法阻止项目内的其他同学使用并行流的，也无法知晓他干了什么事情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那怎么办？我的做法是一刀切，直接禁止。虽然残忍了一些，但它避免了问题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java8加入的Stream功能非常棒，我们不需要再羡慕其他语言，写起代码来也更加行云流水。虽然看着很厉害的样子，但它也只不过是一个语法糖而已，不要寄希望于用了它就获得了超能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着Stream的流行，我们的代码里这样的代码也越来越多。但现在很多代码，使用了Stream和Lambda以后，代码反而越写越糟，又臭又长以至于不能阅读。没其他原因，滥用了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总体来说，使用Stream和Lambda，要保证主流程的简单清晰，风格要统一，合理的换行，舍得加函数，正确的使用Optional等特性，而且不要在filter这样的函数里加代码逻辑。在写代码的时候，要有意识的遵循这些小tips，简洁优雅就是生产力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果觉得Java提供的特性还是不够，那我们还有一个开源的类库&lt;code&gt;vavr&lt;/code&gt;，提供了更多的可能性，能够和Stream以及Lambda结合起来，来增强函数编程的体验。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;io.vavr&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;vavr&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.10.3&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但无论提供了如何强大的api和编程方式，都扛不住小伙伴的滥用。这些代码，在逻辑上完全是说的通的，但就是看起来别扭，维护起来费劲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写一堆垃圾lambda代码，是虐待同事最好的方式，也是埋坑的不二选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写代码嘛，就如同说话、聊天一样。大家干着同样的工作，有的人说话好听颜值又高，大家都喜欢和他聊天；有的人不好好说话，哪里痛戳哪里，虽然他存在着但大家都讨厌。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码，除了工作的意义，不过是我们在世界上表达自己想法的另一种方式罢了。如何写好代码，不仅仅是个技术问题，更是一个意识问题。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：小姐姐味道 (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f4c19198051e5dfd8dd999ed2104d72d</guid>
<title>支付宝稳撑双11双12的核心架构设计</title>
<link>https://toutiao.io/k/674el0v</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwOTIxNDQ3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YRIaicYx5pzj5Cxwick8DamnOgbTJu96QTibKyHEDZt1815yOV1r27oZ6HgoYTEYWYLRz4jIV4iasHgg/0?wx_fmt=png&quot; data-nickname=&quot;dbaplus社群&quot; data-alias=&quot;dbaplus&quot; data-signature=&quot;围绕Database、BigData、AIOps的企业级专业社群。资深大咖、技术干货，每天精品原创文章推送，每周线上技术分享，每月线下技术沙龙，每季度Gdevops&amp;amp;DAMS行业大会.&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;一、前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;现在还依稀记得去年双11在支付宝作战室，接近0点的时候，所有人都盯着值班室的秒级监控大盘，当交易峰值曲线慢慢爬升，最后变得无比陡峭，值班室的同学都很激动，欢呼声伴随着爬升的曲线达到了顶峰，58.3万笔/秒，也是新的交易峰值记录，但相比往年动辄翻一倍，涨30%~40%，增长率还是小了很多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2010年双11的支付峰值是2万笔/分钟，到2017双11时变为了25.6万笔/秒，再到去年的58.3万笔/秒，是09年第一次双11的一千多倍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要抗住这么大的支付TPS，蚂蚁做了很多顶层架构的设计和底层实现的优化，其中最为最核心的就是LDC架构。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;二、什么是LDC&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;LDC 的全称为: Logic Data Center, 逻辑数据中心，之所以叫LDC，是跟传统的IDC（ Internet Data Center ）相比而提出来的概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IDC 相信大家都很清楚，就是物理的数据中心，说白了就是能够建站的物理机房。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;LDC（逻辑数据中心），核心架构思想就是不管你物理机房部署是怎样的，比如你可能有三个IDC，分别在二个不同城市（常说的两地三中心），在逻辑上是统一的，我逻辑上看成一个整体，统一协调调配。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;三、为什么会出现LDC&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt;&lt;span data-bgopacity=&quot;25%&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1. 架构的演进&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;LDC是为了解决什么问题？还得从架构的演进说起。我们用具体的应用推演一次。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1)单体应用架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先看如下图所示的单体应用架构，请求到网关接口，网关接口直接调应用或者服务，服务调存储层查询或写入数据，一竿子捅到底。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;296&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.512962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPAc3pBQbiarG2y7Qq1HY7TfGs06JyRV8cj9DH1pbb3QXVG2ag7WYnhCOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种架构模式最大的风险是服务、存储都是单点的，访问容量和性能受限于存储和应用的容量和性能，容灾方面，一旦发生故障只能死等单点应用或存储的恢复。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2)分布式架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来工程师们开始对应用做水平拆分，对服务做垂直拆分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;水平拆分应该都很熟悉，就是加服务器，每台服务器都部署实例，垂直拆分就是把服务按域做拆分，比如一个交易系统，有商户域、商品域、用户域、订单域等，拆分成多个微服务，服务解耦，服务可以独立发布，应用的复杂度会更高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;294&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5083333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPAo2ZZgsJrkRnMlf8wjgnxsiaZsFVnEj2wvpJfV51xJJ3icGf3sYjOKpFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个分布式架构解决了服务单点的问题，某台服务器宕机，服务还是可用的，但是存储层还是单点的，而且随着业务增长，扩容加的机器越多，大家发现查询写入效率耗时到一定阶段反倒是变慢了，分析发现存储层出现了性能瓶颈。上面图只花了2台服务器连接数据库，真实分布式系统可能几十百来台，甚至上千台，如果都连一台DB，连接数、锁争用等问题, SQL性能变慢可想而知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3)读写分离架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后来的事情大家也都知道，互联网公司开始纷纷做读写分离，把读请求和写请求分开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;318&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5496688741721855&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPARzn0P1PDZfs49nxTuganxM77NnpdGDUREjOTTZeExibibqtm534yLFJg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;604&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;读写分离这里面隐含了一个逻辑，那就是数据写入之后，不会立即被使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据从写入到被立即使用有个时间差，等从库同步数据才会被读取，实际统计发现，常规的应用，90%的数据确实在写入之后不会立即被使用，当然我这里说的立即的时间单位是ms，一般同步延迟也就是几毫秒，不超过10 ~20ms。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4）分库分表分布式架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是这个架构并没有解决写的问题，随着业务量的增长，写数据成为了瓶颈。分库分表应运而生，分库分表的中间件开始变得流行起来，现在基本成了中大型互联网公司的标配。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基本思想就是把数据按照指定维度拆分，比较常见的是userId维度，例如取userId的后2位，可以拆分成百库百表，也有的除以指定模数取余数，例如除以64取余，可以按余数范围0-63拆成64个库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;350&quot; data-backw=&quot;578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPA4Fh9ic7XyHLs2qp97fqkh6J7DzTabictHvicy3uUUpibZFMIragwz5T0icQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.6055555555555555&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于分库分表，很多人都知道有垂直拆分和水平拆分二种（上面说的垂直和水平是系统的拆分，这里指的是存储的），垂直拆分就是按照业务维度拆分，把同一个业务类型的表放到一个库，经常会按领域模型的概念拆分，比如订单库、用户库、商品库等，水平拆分就是把大数据量的表（库）切分成很多个小数据量的表（库），减小库和表的访问压力，可以和系统的水平垂直切分比一下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;144&quot; data-backw=&quot;578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPAcNIywzuQPef0ydoRbKomUicMtAELD052x4Nyo7N5LjuwaHhj5ULCsfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.25&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么叫水平和垂直呢？其实很好理解，你想象一张用户表，里面放了很多字段，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;108&quot; data-backw=&quot;578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPATEiajjeZibyO1EvX7fUEF2J2ZFuTLDQMG5ZlfzqOqsEzZ0vxrvUpsn4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.18611111111111112&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那垂直拆分，就是垂直从中间划一刀，把蓝色的用户信息表和右边绿色的订单信息表拆分成2张表。库拆分成用户库和订单库。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;水平拆分，就是水平划一刀，把数据量降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家看到这，是不是以为问题都解决了，上面分库分表之后，如果应用层面扛得住，数据库层面的确能做到并发量到万这个级别。但是容量要再上一个数量级就有点困难了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5）单元化分布式架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为一个库实例是被所有应用共享的，也就是你每增加一台机器，数据库连接就会相应的增加一些，增量是至少机器设置的最小连接数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①为什么应用需要连接所有的数据库实例？&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网关层的流量可能走到任何一台服务器，比如A用户的请求到服务器上了，这时服务器一定要有A这个用户userId 分片的数据库连接，否则要么把流量路由走，要么执行失败。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;分库分表只是解决了单库单表访问压力的问题，但是由于每一台服务器都同时连接所有的分库实例，到一定阶段是没发继续扩容的，因为库实例的连接数有瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;②数据库存在瓶颈应该怎么弄?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信聪明的你们其实已经猜到了，那就是按userId 分片在应用层就做隔离，在网关层流量路由的时候把指定uid分片的流量路由到指定应用单元执行，这个应用单元流量内部自消化，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如uid = 37487834，最后二位是34 属于 00-49范围，那用户流量直接路由到00-49这个应用分组，在这个单元内的完成所有数据交互的操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;338&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5851851851851851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPA04SkwkumkpE1ojOiblhhToc3GM7M4aliaTj3UpzUlFDVkzedfh5yeFxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样uid 00-49 这个分组单元中的应用只用连userId 00-49 分库的数据库，uid 50-99分组单元的应用也是如此，数据库的连接数一下直接降一半，而且还可以拆分单元，现在是2个单元，最多可以拆分到100个单元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而单元是LDC中核心概念，下面重点说一下单元这个词的具体含义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单元在蚂蚁有个名称叫做 Zone，Zone内部署的是完整的服务，例如，一个用户在一个Zone内可以完成一整套业务流程，流量不需要其他Zone 来提供服务，拥有完成一整套服务的能力，在单个Zone就能完成一整套业务，是逻辑自包含的，这样有什么好处，某个Zone如果出现故障，路由层直接把这个Zone流量转移到其他Zone，接受这个Zone流量的其他几个Zone可以分摊流量，流量调拨很方便。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt;&lt;span data-bgopacity=&quot;25%&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2. 蚂蚁Zone&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;下面这张图是蚂蚁Zone 按照地区和userId 分片的部署架构示意图，做了一些简化，实际Zone部署单元会稍微复杂一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;300&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5194444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPABD5KKvLTXcIibVowfgftDvSmIRoJQ1rHs3o16PSVa7Q2JoIiav3tvQPw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面介绍的Zone 是有能力完成uid维度的一整套业务流程的，应用互相依赖的服务都由本Zone提供，服务之间的调用都在本Zone内完成的。但是聪明的你可以会想到一个问题，有的数据不能按照userid维度拆分，全局只有一份怎么搞，比如配置中心的数据，那是集中存储的，全局只有一份配置，配置后也是全局生效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实在蚂蚁内部，Zone一共分为三种：RZone、GZone、CZone&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;415&quot; data-backw=&quot;578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8bqRhVKagT7QUAOtuoZAaPArkXnz2Cuf7JCIH8kj5SP4hCwia6ica8k9KtJdk2WKErH1u8mOmuCYic1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.7175925925925926&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也是因为前面我提到的“写读时间差现象”，写入GZone的数据，允许一定的延迟，同步CZone同步给其他CZone。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;span&gt;作者丨安琪拉&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来源丨公众号：安琪拉的博客（ID：guofuangela）&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;dbaplus社群欢迎广大技术人员投稿，投稿邮箱：&lt;/span&gt;&lt;span&gt;editor@dbaplus.cn&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.37222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bADJnwaXiaAowvcbBvTzs0lcAkvW5mgL5DdSrQy7YyNo8jTUSADkZII49WBGBpZ3vY9wjIFh5RCdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zf2jiaBBH3vdgfP4A2rem5YEAHYH074dc4GibhojA5B3lLZrXLDRciaVnficveaHcAUCiaIPoDsTkAduA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71b2cac2fcbd7da05b820f3bd05c50f9</guid>
<title>浅谈 MySQL InnoDB 的内存组件</title>
<link>https://toutiao.io/k/br11rye</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;MySQL&lt;/code&gt;中执行一条&lt;code&gt;SQL&lt;/code&gt;语句，相应表数据的读写都是由存储引擎去做（&lt;strong&gt;更新数据、查询数据&lt;/strong&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个过程，存储引擎需要决策一些事情&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据是从内存查还是从硬盘查&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据是更新在内存，还是硬盘&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;内存的数据什么时候同步到硬盘&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以存储引擎会按照内部逻辑与内存、硬盘交互。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;624&quot; data-backw=&quot;538&quot; data-ratio=&quot;1.1606060606060606&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPA6kg4tiblRTsewVzjeGW40av5Yyna05QgWocIZN8OE7HOB47kLPicRssw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以按需选择存储引擎，比如常见的 &lt;code&gt;InnoDB、MyISAM、Memory&lt;/code&gt; 等等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2754285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAWP3icmLs7JMqKpIuv1RrClXCqS3hGamjrdTDsoXraTc2ur4rTIu38nA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;875&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众多存储引擎中，&lt;code&gt;InnoDB&lt;/code&gt;是最为常用的，从 &lt;code&gt;MySQL5.5.8&lt;/code&gt; 版本开始，&lt;code&gt;InnoDB&lt;/code&gt;是默认的存储引擎。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;InnoDB简介&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;InnoDB&lt;/code&gt;存储引擎支持事务，其设计目标主要面向在线事务处理（&lt;code&gt;OLTP&lt;/code&gt;）的应用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特点是行锁设计、支持&lt;code&gt;MVCC&lt;/code&gt;、外键，提供一致性非锁定读，同时本身设计能够最有效的利用内存和&lt;code&gt;CPU&lt;/code&gt;，是 &lt;code&gt;MySQL&lt;/code&gt; 最常用的存储引擎。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;InnoDB的重要内存结构&lt;/h1&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3592233009708738&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAy24fia9libictC5o0ePYfbRBoAe6IYv5ebSTSzNP8DuaRLzqcEFGx2N9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;927&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;InnoDB&lt;/code&gt;存储引擎在内存中有两个非常重要的组件，分别是缓冲池（&lt;code&gt;Buffer Pool&lt;/code&gt;）和重做日志缓存（&lt;code&gt;redo log buffer&lt;/code&gt;）。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;Buffer Pool简介&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓冲池（&lt;code&gt;Buffer Pool&lt;/code&gt;）里面会缓存很多的数据，比如数据页、索引页、锁信息等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;MySQL&lt;/code&gt;表数据是以页为单位，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 &lt;code&gt;Buffer Pool&lt;/code&gt; 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续的查询先从 &lt;code&gt;Buffer Pool&lt;/code&gt; 中找，没有命中再去硬盘加载，减少硬盘 &lt;code&gt;IO&lt;/code&gt; 开销，提升性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更新表数据的时，如果 &lt;code&gt;Buffer Pool&lt;/code&gt; 里命中数据，就直接在 &lt;code&gt;Buffer Pool&lt;/code&gt; 里更新。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9818652849740933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAva8TuTwa2fzwOJlHv4OZsn83tmwYs2CbA98VWP9ibXH5GsPVyXHp7gQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;772&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总之 &lt;code&gt;Buffer Pool&lt;/code&gt; 会缓存很多的数据，以便后续的查询与更新。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小贴士：这里只是用数据页举例帮助大家理解，大家千万不要认为 &lt;code&gt;Buffer Pool&lt;/code&gt; 里面只有数据页，它只是占 &lt;code&gt;Buffer Pool&lt;/code&gt; 大部分空间，关于 &lt;code&gt;Buffer Pool&lt;/code&gt; 更多细节，后续会有专门的文章讲解。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;span/&gt;&lt;span&gt;redo log buffer简介&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着思考一个问题，假设我们把 &lt;code&gt;Buffer Pool&lt;/code&gt; 中某个数据页的某条数据修改了，但是硬盘的数据还未同步，此时数据是不一致的，如果 &lt;code&gt;MySQL&lt;/code&gt; 宕机了，数据就丢失了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7824390243902439&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAvPD9alC4mGJYfAFClvXYg5icfvcnM8jSBLg4ibqsAAzwCX1olcURadxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1025&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可怎么办呢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了保证数据的持久性，&lt;code&gt;InnoDB&lt;/code&gt;存储引擎加入了 &lt;code&gt;redo&lt;/code&gt; 日志功能，也叫重做日志。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每当我们对表数据进行更新时，会把“在某个数据页上做了什么修改”记录到重做日志缓存（&lt;code&gt;redo log buffer&lt;/code&gt;）里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当事务提交时，会把 &lt;code&gt;redo log buffer&lt;/code&gt; 清空，刷盘到 &lt;code&gt;redo&lt;/code&gt; 日志文件。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.095367847411444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAibIVoLuk4JE6ICic0T1NOTuMbjVnDNFLrv0VVgIUZYvVrAqwFs5UXFWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;734&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样 &lt;code&gt;MySQL&lt;/code&gt; 宕机了也没关系，因为重启后会根据 &lt;code&gt;redo&lt;/code&gt; 日志去恢复数据。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8710900473933649&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAm1KKZY9ibzVzAVS7uNjot8PYzEo99x6yic5CCQHmJbY9hSPdjVlh2LqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1055&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小贴士：redo日志细节也很多，本文只做个介绍，后续会有专门的文章讲解。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实不难发现，缓冲池（&lt;code&gt;Buffer Pool&lt;/code&gt;）和重做日志缓存（&lt;code&gt;redo log buffer&lt;/code&gt;），它们都是为了减少硬盘 &lt;code&gt;IO&lt;/code&gt; 开销。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为 &lt;code&gt;Buffer Pool&lt;/code&gt; 与 &lt;code&gt;redo&lt;/code&gt; 日志涉及内容较多，后面会出两篇文章单独讲。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天讲的这些内容全是在给后面的文章做铺垫，大家先知道它们是干嘛的，留个印象就行了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;站在巨人的肩膀上：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《MySQL实战45讲》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《从零开始带你成为MySQL实战优化高手》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《MySQL是怎样运行的：从根儿上理解MySQL》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《MySQL技术Innodb存储引擎》&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;MySQL好文推荐&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;关于我&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿星是一个热爱技术的&lt;code&gt;Java&lt;/code&gt;程序猿，公众号&lt;strong&gt;「程序猿阿星」&lt;/strong&gt;定期分享有趣有料的精品原创文章！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5763888888888888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/23OQmC1ia8nxwUmLaZQARHt8gs7q78SPAFWh4ABmpoyze4a939X3KqYbFEolzZftXayOanky7Hy3ZIKfPTNBzpg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;288&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常感谢各位小哥哥小姐姐们能看到这里，原创不易，文章有帮助可以关注、点个赞、分享与评论，都是支持（莫要白嫖）！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;愿你我都能奔赴在各自想去的路上，我们下篇文章见。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAwMDg2OTAxNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nziaXQQjkzSxQkAmbFAzI9BLo4UHedGwVNmDuNZa8BvPSOI7V8ibNdHXFt89c7xrY9YvibafERPUubtQ/0?wx_fmt=png&quot; data-nickname=&quot;程序猿阿星&quot; data-alias=&quot;cxyax1993&quot; data-signature=&quot;一起成长进阶！专注技术原理、源码，通过图解方式输出技术，这里将会分享操作系统、计算机网络、Java、分布式、数据库等精品原创文章&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>01a0d7f11cec536d9c44bbf6d0815ef2</guid>
<title>直播预告丨RTC Dev Meetup 前端技术巡回沙龙第三期</title>
<link>https://toutiao.io/k/ermwy80</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIwNzA1OTA2OQ==&amp;amp;action=getalbum&amp;amp;album_id=2031035859390562306#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2031035859390562306&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;Dev Meetup&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;1个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;前言&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;朋友们，久等了~ 本来计划在 8 月 7 日成都，请几位大前端的技术大牛与大家见面的，但由于疫情，为了避免聚集，只好临时改约。活动的几位讲师，将改在 9 月 11 日线上与大家见面。从 TypeScript 、微前端，到Flutter 2 的实时视频渲染原理，跟大家聊聊大前端开发中的经验。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;现在扫描下方二维码即可报名！！之前报名了&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNzA1OTA2OQ==&amp;amp;mid=2657217972&amp;amp;idx=1&amp;amp;sn=463818dd0b23f984b449a2f442e9e5c6&amp;amp;chksm=8c8d6ca6bbfae5b0827d0b43843d2c856a6ddd39820031fc6b3283b5011424ff82534914d41c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;成都活动&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;成都活动&lt;/a&gt;的，不用重复报名，我们会以邮件或短信形式通知大家直播地址。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;⏰活动时间：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;9 月 11 日（星期六）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 14:00——16:30&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;🏠活动地点：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;线上直播&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;180&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;180&quot; data-ratio=&quot;1.0118110236220472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBHONSUGSgAJmOIBYQyd3ib0xTRXibd6rzh7jZfricicSRVNLS19lO33A1QCLMI3wjyrBcZKhho465sicog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;508&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;扫描二维码&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;或点击“&lt;strong&gt;阅读原文&lt;/strong&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;立即报名，9 &lt;/span&gt;&lt;span&gt;月 11 &lt;/span&gt;&lt;span&gt;日线上见！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;&lt;/section&gt;&lt;section&gt;活动流程&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;13:30 - 14:00&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;签到&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;14:00 - 14:10&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;开场&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;14:10 - 14:50&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《Flutter2 渲染原理 &amp;amp; 如何实现视频渲染》 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;卢旭辉，声网Agora 高级开发工程师 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;14:50 - 15:30&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;《Web 状态管理与国际化的 TypeScript 手写之旅》&lt;/span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;水歌 ，idea2app 团队创始人&lt;/span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;15:30 - 16:10&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;《微前端拆分实践》&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;张起荣，Thoughtworks 资深前端开发工程师&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;4511&quot; data-custom=&quot;#a65bcb&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;16:10 - 16:30&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt; 交流&amp;amp;抽奖&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;2&lt;/span&gt;&lt;/section&gt;&lt;section&gt;活动嘉宾&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾一&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题：&lt;span&gt;Flutter2 渲染原理 &amp;amp; 如何实现视频渲染&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBHAtDicmfibxSjk95Qib5G1jfEZZW5gia5YzjXBLTVn6dVMjOAKPiaUPnDOtTeGaefnqhUCBe9q2pqokSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;卢旭辉&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;声网Agora 高级开发工程师&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;19 年加入 Agora，专注于移动端领域，先后主导设计和开发了多款跨平台 SDK（RN、Flutter、CocosCreator、UniApp 等），目前负责跨平台 SDK 的技术构架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分享内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、Flutter2 概览及平台差异&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、Agora Flutter SDK 如何实现视频渲染（Web 和 Desktop）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、深入 Flutter Web Engine 源码，洞悉渲染原理&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾二&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题：&lt;span&gt;Web 状态管理与国际化的 TypeScript 手写之旅&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFhXZ04Ue6ytp2HFeYLEoeP74OqeUzzR8OXZqcAdu7nRvXdjAoWTjQHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;水歌&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;idea2app 团队创始人&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;idea2app 团队（https://ideapp.dev/ ）创始人，Web/JavaScript 全栈开发者、WebCell 前端开源框架作者，现任 freeCodeCamp 成都社区负责人、开源社理事、微软 MVP、阿里云 MVP ，致力于在开放生态中为社会创造价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分享内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;为广大前端工程师展示用 TypeScript 实现一个最核心的 MobX 和 i18n 库，其思路是多么的简洁、清晰，带大家感受 Web 技术的“简约而不简单”。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾三&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题：&lt;span&gt;微前端拆分实践&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFPlCpicl2oAk9AwLd8iajJ9UoslGEMbzfpEj4dgXuhJ18GdfPB35JibVuQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;张起荣&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Thoughtworks 资深前端开发工程师&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;擅长 Web 前端开发，技术栈偏 React，在项目上主导了微前端从 0 到 1 的拆分和落地。极限编程爱好者，推崇敏捷开发，Thoughtworks 成都海外业务单元敏捷社区 Owner。乐于分享，喜欢博客记录自己学习的过程。个人博客地址：teobler.com。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;分享内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;随着业务复杂度的提升，出现了越来越多需要多团队维护的大型应用。这些应用通常臃肿、复杂、难以扩展。一个业务的改变往往需要牵动多个团队的代码改动。后端小伙伴们已经探索出微服务来解决这些问题，但怎么把这个模式搬到前端并很好地应用好像又成了一个难题。希望这个在真实项目中成功实践的例子能帮你打开认识微前端的大门。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;3&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;blockquote&gt;&lt;section/&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;4&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;报名方式&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;扫下方二维码&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即可报名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;152&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;151&quot; data-ratio=&quot;1.0118110236220472&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBHONSUGSgAJmOIBYQyd3ib0xTRXibd6rzh7jZfricicSRVNLS19lO33A1QCLMI3wjyrBcZKhho465sicog/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;508&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于 RTC Dev Meetup&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;RTC Dev Meetup 是由声网Agora 发起的技术分享交流活动，邀请来自不同团队的一线技术专家，围绕在实时音视频应用开发过程中涉及的关键技术，分享实践经验，涉及移动开发、音视频技术、计算机视觉等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击&lt;span&gt;&lt;strong&gt;『阅读原文』&lt;/strong&gt;&lt;/span&gt;立即报名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;联合主办&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFxdv7UQYViaAGjMuMHVIiamE4fyu3fFPNkVqUzdoGuOdSsddUFJHqm48Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.10185185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBEuhzfiaENTibSuzb4PeGfYyicsFNQ0wVhYF1YYib91jUb0bTSAexg6hnIPGHkZmGVvBGUMBTQjibYL9Eg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.18518518518518517&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBEuhzfiaENTibSuzb4PeGfYyic52ib40vPAkpmFzDUBxaErM0usmu7HjFxL1uovw3yjpukXI7vwQ6566Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;合作伙伴&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBHBxfaGJpulxlqG4ZewL3eRc4gWTib9phMmhB2J1PEJuBymaiauTcIOS6xecyQwXe3H6dxIGeNH3Olg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFYo2e39kj6ZygmVgkVYYTnH8UlCanp106P6CGWPHny7UWR3uVjo1J3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1071&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;独家图书赞助伙伴&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/oMlX8Lll9JhQa0qyalq2OoovA3tMNIP8zp5iashlqCUpNg97zVjKiaBj7xLFp6VhmcMAu5b7xxbqRa13Jib8phLHA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFHCib7pxoiacWayX55JSp5R3fkj32hib6q1Bl4yLcqicjBqwRLyon8OaicQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;424&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/YO07vjlZVBEpKWxnOzkkA70T6zIZUj9USEFFncicSZSGMOHSUbvH5XSQfmmOptTQlKTmOicQVL999ib0cEGEg7g0g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;695&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>