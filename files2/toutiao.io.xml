<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>d7a58970b536ca688b5fc9267208974e</guid>
<title>如果你是一个Golang面试官，你会问哪些问题？</title>
<link>https://toutiao.io/k/yvw61mc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小土这两天本来想在公司发个面经，于是偶然搜到了这篇 &lt;span&gt;如果你是一个Golang面试官，你会问哪些问题？&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;,文章下面也有很多大佬的优秀回答，感兴趣的同学可以查看原文了解更多内容。下面小土主要收集了两个回答。另外小土在语雀也搜集了不少Gopher面经，&lt;span&gt;面试题库收集&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;回答 1:&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者：混血王子
链接：https://www.zhihu.com/question/67846139/answer/2105444792&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有假如，我就是一个Golang面试官，来自百度。同时我到百度之前也面过头条，腾讯，小米，高德的golang，基本都过了。我回答应该还是比较有说服力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事实上，golang的问题只占我面试问题的20%左右。问东西的顺序不一定是下面的顺序，有的时候我会根据简历选择二分法难度来问，直接问一个难度适中的问题。说上来就继续二分法筛。下面是我问过的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1，make和new差别，引用类型的意义&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2，逃逸分析&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3，channel的实现&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4，gmp与gc，重点问题（网络io等待队列，读写屏障）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5，map的实现，重点问题（sync.map的实现，map实现随机的方法）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;期间会根据实际情况，从这几个题发散问一些细节，但是难度不会太难了。因为我面的是p6级别的，问源码有点欺负人了。另外会问一个开发性问题，你写go遇到的坑点。从这里也可以发散问一些，但是不会问太多了。这几个问题在10分钟之内肯定要问完的。我的面试范围和我之前遇到过的面试基本都在&lt;span&gt;https://draveness.me/golang/&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; 内，这个教程还是非常不错的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些问题不一定都要答上来，我是综合考察的，我写这几个题目也不是让大家去背这几个题的，只是想告诉大家面试的难度一般如何，顺便说几个经典题目。另外我主要关注的问题其实主要是mysql，redis，mq，算法，分布式。有人看的话，我就补充一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;9.7 补充mysql&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先声明一下，我说的面试题都是个人向的，其实大家要面哪家公司的时候，搜那家公司的面试题用处其实不大，因为面试官并没有说题库，或者统一标准的说法。如果我去了其他家公司当面试官我一样也会这么问（注意是提问方式和难度，题目我会换的）。而你碰到百度其他面试官，也很可能不会按我这么问。另外，因为我面的校招到10年的都有，所以具体问法也会灵活调整。说到校招，这次大校招我也被安排当面试官了，校招的朋友也可以关注一下，如果能答出来，那就惊喜级别&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;补充一下我对mysql的考察方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;1，八股，为什么用b+树不用b树&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以第一题为分界线，答出来了问下面的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2，说说对mvcc的理解&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3，幻读是怎么解决的&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4，redo，undo的作用和实现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;5，事务的实现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答不出第一题就问，下面就是纯八股了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;2，索引怎么建&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;3，联合索引最左前缀&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;4，聚簇索引与回表&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果觉得前半部分回答得不行，就会转问后半部分的简单题。和上面一样，我问的问题和我遇见过的问题，基本都在《&lt;em&gt;MySQL技术内幕&lt;/em&gt;:InnoDB存储引擎》姜承尧老师的书里面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;9.8 补充redis&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis的东西虽然不多，但是也是必问的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1，底层数据结构实现，重点问题如：压缩列表&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2，aof与rdb，重点问题如：aof重写机制&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3，为什么用跳表&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4，分布式锁与redlock&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5，三种分布式的结构&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6，大KEY&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本上说明白一半就行了，和上面一样，我问的问题和我遇见过的问题，大部分都在《Redis设计与实现》里面。因为redis的问题都不算难，如果全答上来了，我可能会问一个：在扩容rehash的时候scan扫集合，会不会扫到重复的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;9.9 补充mq+es+分布式&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那就补一下剩下的常问问题吧，mq主要是kafka。下面基本上工作3年之内不怎么问，3年以上的说上1/3到1/2就通过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1，kafka的零拷贝和顺序io 零拷贝最好说说细节，其实就是用户空间和内核空间mmap&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2，kafka的分片，分片的读一致性（水位和活跃组？忘了叫什么了）和写一致性怎么保证&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3，es的倒排索引，和分片的查询召回&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4，分布式锁，redis redlock etcd&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5，分布式事务 2pc 3pc tcc&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6，分布式共识协议 raft和paxos&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7，分布式数据库 CAP BASE的概念 etcd tidb的了解&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;额外的问题，只有简历写了我才会问&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1，k8s的应用和架构（k8s其实我也没深入研究，随便）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2，监控prometheus，比如里面时序数据库TSDB&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3，微服务架构的内容，比如服务发现和链路追踪的工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4，校招的话问问tcp&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5，其他我感兴趣的东西&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;6，算法题必问，一般先选一个中等偏难的，难度参见周赛第三题。要是很顺畅就加一个第四题难度（困难），做不出来就换一个第二题难度（中等偏简单）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;7，架构设计，因为我只是一面，这种问题一般留给二面问。不过我给的建议是，mysql分表，redis缓存，kafka削峰这三板斧&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;写在最后，其实我的标准只有一个，我的所有提问也是围绕这一标准来的，就是让我感受到你对技术的热情，对技术路线有清晰规划，并且正在进行系统性地有条理的学习持续一年以上，比如看书，事实上我也是这么要求自己的。我相信满足了这个条件，你面其他公司也很容易。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;回答2:&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者：HelloKaton
链接：https://www.zhihu.com/question/67846139/answer/257359743&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章翻译自一位外国友人的关于面试后端程序员的文章，我比较喜爱这篇文章。一是因为它极大的拓宽了我的视角，另一方面是其中的一些问题非常具有启发性。不仅对于面试者，对于面试官来说也是个不错的参考。于是迫不及待的翻译了一下，给各位看官做个参考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原文参见 &lt;span&gt;@arialdomartini&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;的: &lt;span&gt;Back-End Developer Interview Questions&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以下是原文翻译。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;通用问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开放式问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计模式相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码设计相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;语言相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Web相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据库相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;非关系型数据库相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码版本管理相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;并发问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式系统相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软件生命周期和团队管理相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;逻辑和算法相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软件架构相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;面向服务架构(SOA)和微服务(Microservice)相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安全相关问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比尔盖茨式问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码示例问题&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;通用问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;语言设计中空引用(&lt;span&gt;null reference&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么函数式编程重要？什么时候适用函数式语言？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计(design)、架构(architecture)、功能(functionality)和美学(aesthetic)之间有什么区别？讨论一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微软、谷歌、欧朋(opera)和火狐这类公司是如何从他们的浏览器中获利的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么打开TCP套接字有很大的开销？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;封装的重要性体现在哪儿？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是实时系统？它与普通系统有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实时语言(real-time language)和堆内存分配(heap memory allocation)之间的关系是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可变值(mutable values)和不可变值(immutable values)有哪些优缺点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是O/R阻抗失衡(Object-Relational impedence mismatch)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你需要使用缓存，你使用哪些原则来确定缓存的大小？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCP和HTTP有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何在一个不可靠的协议之上构建一个可靠的通信协议？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;开放式问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为什么人们会抵制变化？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何向你的祖母解释什么是线程？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;作为一个软件工程师，你想要既要有创新力，又要产出具有可预测性。采用什么策略才能使这两个目标可以共存呢？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是好的代码？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;解释什么是流(Streaming)和如何实现一个流？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设你的公司给你一周的时间，用来改善你和同事的生活: 你将如何使用这一周？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本周你学了什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;所有的设计中都会有美学元素(aesthetic element)的存在。问题是，你认为美学元素是你的朋友还是敌人？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;列出最近你读过的5本书。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设目前有个大型公司（非常有钱），他们的开发流程是瀑布式流程（Waterfall），如果需要你在他们公司引入持续交付（&lt;span&gt;Continue Devivery&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;），你会怎么做？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们来谈谈&quot;&lt;em&gt;重复造轮子&lt;/em&gt;&quot;,&quot;&lt;em&gt;非我发明症&lt;/em&gt;&quot;, &quot;&lt;em&gt;吃自己做出来的狗粮&lt;/em&gt;&quot;的这些做法吧。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(注: 重复造轮子: Reinventing the wheel; 非我发明症:Not Invented Here Syndrome; 吃自己做出来的狗粮: Eating Your Own Dog Food)&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在你当前的工作流中，什么事情是你计划下一步需要自动化的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么写软件是困难的？是什么使软件的维护变得困难？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你更喜欢在全新项目（Green Field Project）上工作还是在已有项目(Brown Field Project)基础上工作？为什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当你在浏览器地址栏输入google.com回车之后都发生了什么?&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当操作系统CPU处于空闲的时候，它可能在处理哪些事情？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何向一个5岁的孩子解释什么是Unicode/数据库事务？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何维护单体架构(monolithic architecture)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个&quot;专业的开发者&quot;意味着什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;软件开发是艺术、是技艺还是工程？你的观点是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&quot;喜欢这个的人也喜欢...&quot;，如何在一个电子商务商店里实现这种功能？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么在创新上，企业会比创业公司慢些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么说，你不应该尝试应用自己发明或者设计的密码学？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;设计模式相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;请用一个例子表明，全局对象是邪恶的存在。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设你工作的系统不支持事务性，你会如何从头开始实现它？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是好莱坞原则（Hollywood Principles）？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关于迪米特法则(最少知识原则): 写一段代码违反它, 然后修复它。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（注: 迪米特法则：the Law of Demeter, 最少知识原则：the Principle of Least Knowledge）&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;Active-Record模式有什么限制和缺陷？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Data-Mapper模式和Active-Record模式有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空对象模式(Null Object Pattern)的目的是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么组合(Composition)比继承(Inheritance)更好？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是反腐败层(Anti-corruption Layer)?&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你可以写一个线程安全的单例(Singleton)类吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据抽象(Data Abstraction)能力是指能改变实现而不影响客户端的这种能力。请构造一个一个例子，违反这个特性，并且尝试修复它。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你是如何处理依赖关系地狱(Dependency Hell)的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么说goto语句是恶魔般的存在？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;健壮性是进行软件设计时的一个通用原则，它建议 &lt;em&gt;“发送时要保守，接收时要开放”&lt;/em&gt;。这也经常被写成，“做一个有耐心的读者，做一个谨慎的作者”。你能解释一些这背后的逻辑吗？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;译者注：&quot;发送时要保守，接收时要开发&quot;的原文是：&quot;Be conservative in what you send, be liberal in what you accept&quot;，有点类似于“严于律己，宽于待人”的意味。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码设计相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;你在进行软件设计时会考虑软件测试吗？软件测试是如何影响软件设计的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内聚和耦合的区别是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构在哪些场景下有用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;代码中的注释有用吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计和架构有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么在测试驱动开发(TDD)中是先写测试，再写代码？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;C++支持多继承，Java允许类实现多个接口。这些特性对正交性有什么影响？使用多继承和使用多接口有区别吗？[这个问题来自Andrew .Hunt 和 David Thomas写的《程序员修炼之道》]&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在存储过程（Stored Procedures）中写业务逻辑有什么优缺点？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;语言相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;告诉我你的首选语言的三个最坏的缺陷。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么现在函数式编程这么越来越受关注？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;闭包是什么？它有什么用途？闭包和类有什么共同点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型有什么用途？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是高阶函数？有什么用途？用你的首选语言写个例子出来。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;讨论一下，如何写一个循环，然后把它转换成递归函数，要避免易变性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有些语言将函数视为第一公民，这是什么意思？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;用一个例子说明匿名函数是有用的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是动态方法调度(Dynamic Method Dispatch)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;名字空间(Namespace)有什么用？有什么可以替代它的吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;谈谈Java和C#之间的互操作性(Interoperability) (任选其他两门语言都行)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么很多软件工程师不喜欢Java？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你认为好的语言好在哪里？差的语言差在哪里？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写两个函数，一个是&quot;引用透明的(Referentially Transparent)&quot;，另一个是&quot;引用不透明的(Referentially Opaque)&quot;。讨论之。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是栈？什么是堆？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么一个语言中，&quot;函数是第一公民&quot;是很重要的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模式匹配(Pattern Matching)和Switch语句(Switch clauses)的区别在哪儿？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么有些语言设计上没有异常机制？这有什么优缺点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果&lt;code&gt;Cat&lt;/code&gt;是一个&lt;code&gt;Animal&lt;/code&gt;, 那么&lt;code&gt;TaskCare&amp;lt;Cat&amp;gt;&lt;/code&gt;是一个&lt;code&gt;TakeCare&amp;lt;Animal&amp;gt;&lt;/code&gt;吗？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;web相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为什么&quot;第一方cookie(first-party cookie)&quot;和&quot;第三方cookie(third-party cookie)&quot;被如此不同的对待？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;数据库相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果要你将一个项目从MySQL迁移至PostgreSQL中，你会如何迁移？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么&lt;code&gt;SELECT * FROM table WHERE field = null&lt;/code&gt;不能匹配空的字段？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是ACID(原子性，一致性，隔离性，持久性)原则？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你是如何进行数据库模式(Database schema)迁移的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;延迟加载(lazy loading)是如何实现的？什么场景下有用？他有什么缺陷？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是N+1问题？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何找出应用中开销最大的查询？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;非关系型数据库相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;什么是最终一致性(Eventual Consistency)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关于CAP理论，举一些CP、AP、CA系统的例子。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;NoSQL是如何解决可伸缩性的挑战的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么情况下你会使用类似于MongoDB的文档数据库而不是关系型数据库（如Mysql或者PostgreSQL）？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码版本管理相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为什么在Mercurial或者git中(管理)分支比SVN容易？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分散式版本控制系统（比如git），相比集中式版本控制系统（如svn）有哪些优势和劣势？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;(注:集中式版本控制系统: Centralized Version Control Systems；分散式版本控制系统: Distributed Version Control Systems)&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;能描述一下什么是GitHubFlow和GitFlow工作流吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是rebase？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么合并操作(merge)在Mercurial和git中比在SVN和CVS中容易？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;并发问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;为什么我们需要并发呢？解释一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么测试多线程/并发代码这么困难？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是竞争条件（Race Condition）？用任何一个语言写一个例子。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是死锁？用代码解释一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是饿死？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是Wait-Free算法？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;分布式系统相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;怎么测试一个分布式系统？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么场景下你会在两个系统中采用异步通信机制？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;远程过程调用的通用缺点是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你为了可扩展性和鲁棒性而构建一个分布式的系统，分别在封闭安全的网络环境情况下，和地理上的位置不同但是网络环境不是封闭和安全的情况下，你会考虑什么不同的事情？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在Web应用中如何管理容错性？在桌面端呢？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在分布式系统中，如何处理故障？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让我们来谈谈网络分裂(network partitions)后有的几种恢复的手段吧。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你认为分布式计算中有哪些谬论？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你在什么时候会使用Request/Response模式，什么时候使用Publish/Subscribe模式？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;软件生命周期和团队管理相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;什么是敏捷（Agility）？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你是如何处理遗留代码（Legacy Code）的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设我是你们公司的CEO，请向我解释什么是看板，并且说服我在它上面投资。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;敏捷（Agility）和瀑布（Waterfall）之间的最大区别是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;作为团队管理者，你对会议太多这个问题是如何处理的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你会如何处理延期很长时间了的项目？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&quot;&lt;em&gt;个体与交互重于过程和工具&lt;/em&gt;&quot;和&quot;&lt;em&gt;客户协作重于合同谈判&lt;/em&gt;&quot;占了敏捷宣言（Agile Manifesto）的一半，谈论一下这两个观念。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你是你们公司的CTO，你会采取什么样的决策？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你觉得项目经理有用吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果要你组织一个弹性工作制的开发团队（即没有强制工作时间的要求），并且假期制度是&quot;按需休假&quot;，你会如何做？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你会如何管理一个人员流动非常高的团队？如何在不加薪的条件下说服团队成员不要离开？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了代码之外，你最关注你的同事的哪3项素质？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;关于代码，你最希望非技术人员能知道的的三件事是什么？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;逻辑和算法相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;只用LIFO栈如何构造一个FIFO队列？只用FIFO队列如何构造一个LIFO栈？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一段有栈溢出的代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一个尾递归版本的阶乘函数。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用任何一个语言，写一个REPL，功能是echo你输入的字符串。然后将它演化成一个逆波兰表达式的计算器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果需要你设计一个文件系统磁盘碎片整理程序，你会如何设计？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一个生成随机迷宫的程序。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一段有内存泄漏的示例代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;随机生成一个的数字序列，里面每个数字都不同。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一个简单的垃圾回收系统。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用任何一门语言，写一个基本的消息代理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写一个基础的web服务器，然后画一张线路图，展示你将来还想要实现的功能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何对一个10GB的文件进行排序？如果是10TB的数据，你会采用什么方法？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;请实现&lt;code&gt;rnd()&lt;/code&gt;函数&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;软件架构相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;什么情况下缓存是没用的，甚至是危险的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么事件驱动的架构能提高可扩展性(scalability)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么样的代码是可读性强的代码？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;紧急设计(Emergent Design)和演化架构(Evolutionary Architecture)之间的区别是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;横向扩展(scale out) vs 纵向扩展(scale up): 有什么区别？分别在什么场景下使用？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式系统中如何处理&quot;故障切换(failover)&quot;和&quot;用户会话(user session)&quot;？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是CQRS(Command Query Responsibility Segregation)?他和最早的Command-Query Separation原则有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么是三层架构？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何设计一个可扩展性高的系统？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;处理C10k问题的策略有哪些？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果让你来设计一个去中心化的P2P系统，你会如何设计？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么CGI的扩展性不好？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在设计系统时，你如何防止供应商依赖(&lt;span&gt;Vendor Lock-in&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在可扩展性上，发布/订阅(Publish-Subscribe)模式有什么缺点？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;80年代以后，CPU有哪些变化？这些变化，对编程产生了什么影响？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能生命周期(performace lifecycle)中，你认为哪个部分是需要考虑进去的？如何管理？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;除了恶意攻击造成的拒绝服务现象以外，哪些设计或者架构上的问题会导致拒绝服务？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能和可扩展性之间有什么关系？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;什么时候紧耦合是OK的？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个系统要有什么特征才能适配云计算环境(Cloud Ready)？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Does unity of design imply an aristocracy of architects?&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;面向服务架构(SOA)和微服务(Microservice)相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;在SOA中，为什么长期存活的事务(Long-lived transation)不被看好，而Saga却被看好？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SOA和MicroService之间有什么区别？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我们来谈谈Web服务的版本管理、版本兼容性、重大变更管理这些事情吧.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在saga中事务和补偿操作(compensation operation)之间的区别是什么？在SOA中呢？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务不能做得太&quot;微&quot;，你认为什么时候微服务太&quot;微&quot;了？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MicroService架构的优劣是什么？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;安全相关问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;什么是双因素认证(Two Factor Authentication)？在一个已有的Web应用中，你如何实现这种机制？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;比尔盖茨式问题:&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;如果你把一面镜子放在扫描仪上，会发生什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设有一个和你完全一样的克隆人，而他是你的上司，你愿意和他工作吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;现在请你面试一下我。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么Quora上的回答会比Yahoo Answer上的回答好？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对手是现代语言，你的任务是要为Cobol辩护，你会如何进行？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;10年后的你是什么样子？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;假设你是我老板，我被解雇了。你会如何通知我？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;我想要重构一个系统，而你想要从头重写。我们来争论一下该怎么弄吧。然后我们反转角色，再争论一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;老板要你对公司撒谎，你的反应是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你可以穿越到以前，你会给年轻时候的你什么建议？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代码示例问题:&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;function &lt;span&gt;hookupevents&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++) {&lt;br/&gt;    document.getElementById(&lt;span&gt;&quot;button&quot;&lt;/span&gt; + i)&lt;br/&gt;      .addEventListener(&lt;span&gt;&quot;click&quot;&lt;/span&gt;, function() { &lt;br/&gt;        alert(i); &lt;br/&gt;      });&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;关于类型擦除(Type Erasure)，这段Java代码的输出是什么？为什么？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; li = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;br/&gt;ArrayList&amp;lt;Float&amp;gt; lf = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Float&amp;gt;();&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (li.getClass() == lf.getClass()) &lt;span&gt;// evaluates to true&lt;/span&gt;&lt;br/&gt;  System.out.println(&lt;span&gt;&quot;Equal&quot;&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Stack&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Object[] elements;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; size = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; DEFAULT_INITIAL_CAPACITY = &lt;span&gt;16&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Stack&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        elements = &lt;span&gt;new&lt;/span&gt; Object[DEFAULT_INITIAL_CAPACITY];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;push&lt;/span&gt;&lt;span&gt;(Object e)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        ensureCapacity();&lt;br/&gt;        elements[size++] = e;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (size == &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;            &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; EmptyStackException();&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; elements[--size];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * Ensure space for at least one more element, roughly&lt;br/&gt;     * doubling the capacity each time the array needs to grow.&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;ensureCapacity&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (elements.length == size)&lt;br/&gt;            elements = Arrays.copyOf(elements, &lt;span&gt;2&lt;/span&gt; * size + &lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;if&lt;/code&gt;语句，或者更加通用点，条件表达式通常是过程式编程/命令式编程的形式。你能去掉这段代码中的&lt;code&gt;switch&lt;/code&gt;语句，用面向对象的方式来修改这段代码吗？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Formatter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Service service;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;Formatter&lt;/span&gt;&lt;span&gt;(Service service)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.service = service;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;doTheJob&lt;/span&gt;&lt;span&gt;(String theInput)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        String response = service.askForPermission();&lt;br/&gt;        &lt;span&gt;switch&lt;/span&gt; (response) {&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;FAIL&quot;&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;error&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;case&lt;/span&gt; &lt;span&gt;&quot;OK&quot;&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; String.format(&lt;span&gt;&quot;%s%s&quot;&lt;/span&gt;, theInput, theInput);&lt;br/&gt;        &lt;span&gt;default&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TheService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; FileHandler fileHandler;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; FooRepository fooRepository;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;TheService&lt;/span&gt;&lt;span&gt;(FileHandler fileHandler, FooRepository fooRepository)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.fileHandler = fileHandler;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.fooRepository = fooRepository;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;Execute&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; String file)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; String rewrittenUrl = fileHandler.getXmlFileFromFileName(file);&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; String executionId = fileHandler.getExecutionIdFromFileName(file);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; ((executionId == &lt;span&gt;&quot;&quot;&lt;/span&gt;) || (rewrittenUrl == &lt;span&gt;&quot;&quot;&lt;/span&gt;)) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        Foo knownFoo = fooRepository.getFooByXmlFileName(rewrittenUrl);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (knownFoo == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; knownFoo.DoThat(file);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;)&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;    HRESULT error = S_OK;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt;(SUCCEEDED(Operation1()))&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(SUCCEEDED(Operation2()))&lt;br/&gt;        {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(SUCCEEDED(Operation3()))&lt;br/&gt;            {&lt;br/&gt;                &lt;span&gt;if&lt;/span&gt;(SUCCEEDED(Operation4()))&lt;br/&gt;                {&lt;br/&gt;                }&lt;br/&gt;                &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;                {&lt;br/&gt;                    error = OPERATION4FAILED;&lt;br/&gt;                }&lt;br/&gt;            }&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;            {&lt;br/&gt;                error = OPERATION3FAILED;&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;        {&lt;br/&gt;            error = OPERATION2FAILED;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;else&lt;/span&gt;&lt;br/&gt;    {&lt;br/&gt;        error = OPERATION1FAILED;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; error;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是一个Golang面试官，你会问哪些问题？欢迎留言讨论。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;如果你是一个Golang面试官，你会问哪些问题？: &lt;span&gt;https://www.zhihu.com/question/67846139&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;面试题库收集: &lt;span&gt;https://www.yuque.com/go-interview/set/interview-index&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;https://draveness.me/golang/: &lt;span&gt;https://link.zhihu.com/?target=https%3A//draveness.me/golang/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;@arialdomartini: &lt;span&gt;https://link.zhihu.com/?target=https%3A//github.com/arialdomartini&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;Back-End Developer Interview Questions: &lt;span&gt;https://link.zhihu.com/?target=https%3A//github.com/arialdomartini/Back-End-Developer-Interview-Questions&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;null reference: &lt;span&gt;https://link.zhihu.com/?target=http%3A//programmers.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;Continue Devivery: &lt;span&gt;https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Continuous_delivery&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;当你在浏览器地址栏输入google.com回车之后都发生了什么?: &lt;span&gt;https://link.zhihu.com/?target=https%3A//github.com/alex/what-happens-when&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;Vendor Lock-in: &lt;span&gt;https://link.zhihu.com/?target=https%3A//sourcemaking.com/antipatterns/vendor-lock-in&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>115aedf37e7038ea70c2acea5535576c</guid>
<title>Go 1.18 新特性多模块工作区教程-让多模块开发变得简单</title>
<link>https://toutiao.io/k/jl3frtf</link>
<content:encoded>&lt;div&gt;&lt;body id=&quot;readabilityBody&quot;&gt;
  &lt;noscript&gt;您需要允许该网站执行 JavaScript&lt;/noscript&gt;
  
  
  
  
  
&lt;/body&gt;
&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>256d082ca913ddc6ec0e51227cb0660a</guid>
<title>选对圈子，一切都对了！</title>
<link>https://toutiao.io/k/y0e6fbd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8e814e9bce58ca16d6e1db1e6456c97e</guid>
<title>一年实现降本60%，货拉拉全链路监控演进史</title>
<link>https://toutiao.io/k/nrsy3uf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwOTIxNDQ3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YRIaicYx5pzj5Cxwick8DamnOgbTJu96QTibKyHEDZt1815yOV1r27oZ6HgoYTEYWYLRz4jIV4iasHgg/0?wx_fmt=png&quot; data-nickname=&quot;dbaplus社群&quot; data-alias=&quot;dbaplus&quot; data-signature=&quot;围绕Database、BigData、AIOps的企业级专业社群。资深大咖、技术干货，每天精品原创文章推送，每周线上技术分享，每月线下技术沙龙，每季度Gdevops&amp;amp;DAMS行业大会.&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文根据曹伟&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;老师在〖deeplus直播：多云场景下核心基础设施的稳定性、高可用建设〗线上分享演讲内容整理而成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;（文末有回放的方式，不要错过）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4019370460048426&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZN2xI8ZBzJ95icdWmkgabFBrZKTXIKfEoEDHFYLBLMDYEgYicJNJh39YQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;826&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;曹伟&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt; 货拉拉  技术中心  核心基础设施部 &lt;/p&gt;&lt;p&gt;JAVA资深研发&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;今天的分享主要包含以下几个方面的内容：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;320&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZxcP0JLhMtSV9owMCQnFjupaMNM87bicXyFqOGBBfFDSIXU2Licze0qFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、监控演进史&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、行业&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;320&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.562962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Zj3ibicJQuV5pVzCgwc6w9EWXia16hddM3Lfx0EF7jGkUn9wicPPV42SG1A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;span&gt;首先我们看一下整个监控行业的演进历史。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;较早的是02年eBay的CAL这么一个全链路监控产品，在eBay内部也大面积的运用，是他的前资深架构师吴其敏主导研发的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;然后是10年谷歌的Dapper，这是内部做的一个监控产品并没有开源，不过发表了一篇Dapper论文，是后面很多监控产品的鼻祖，大部分都是基于Dapper论文的实现和演进；同年出现一个商用产品产品Datadog，功能比较全面，是行业一流的标杆产品。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;11年吴其敏从eBay离职来到美团，开发了CAT，相当于CAL的Java版实现，同时做了很多的优化、迭代，将CAT在就开源领域发扬光大，在整个开源监控领域受到的欢迎程度比较高的，整体的覆盖率也相当的高。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;12年Twitter的开发出了Zipkin，相当于Dapper的开源实现。同年阿里也在搞他的Eagleye（鹰眼）监控，韩国的一个Pinpoint也出现了，值得说的是他是基于字码增强技术来实现监控数据埋点，有个亮点是他的埋点非常的细致，细到底层方法维度，同时这也是个缺点，因为埋点多多少少会有点性能损耗，其次他会导致单个Trace数据的膨胀。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;14年，饿了么开始搞EMonitor，他对用户的一个排障思路的引导，以及用户体验都做的非常好，是我用过所有监控里面最好的一个产品。货拉拉的全链路监控体系的很多思想都是借鉴于他的，比如说我们的“所见即所得”的思想是如何运用到监控可视化建设中的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;15年，华为的吴晟开发了skywalking并且将他开源，近些年发展还挺好的，加入了Apache基金会，在当前的监控领域还是比较受欢迎，特别是他在微服务体系这块支持的比较好，所以受到很多中小型公司的追捧，甚至一些大公司也在用。像我们货拉拉的全链路Trace服务初期也是基于他结合货拉拉场景进行深度定制开发的，期间也经过几次大的架构升级，这个在后面会详细的说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最近的是16年Uber的Jaeger是基于Go语言来实现，滴滴内部也在使用，目前也开源了。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、货拉拉&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;320&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZDuNmpuLgWZxCzZKRZmrV0STbIjoNTrUib0flFWibdssUDp4SjqLia85SQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;接下来我们看一下货拉拉的监控演进史，我将它划分成3个阶段，分别是监控1.0、2.0和3.0时期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）监控1.0时期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;各个业务团队独立维护一套Prometheus监控体系，也没有全链路Trace监控，缺乏统一标准，更别说治理能力了，夸张一点说很多时候是客服接到投诉后把问题反馈给业务，业务才知道系统出现问题，然后再去排障，所以效率极其的低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）监控2.0时期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;我们开始制定标准并逐步统一监控，进行监控治理，推进业务基础监控全覆盖，得益于字节码增强技术帮助我们实现业务“零代码”改造快速接入基础监控，实现监控“弯道超车”，Java核心服务监控100%覆盖。同时我们也自研一些基础监控页面，结合着Grafana大盘来满足日常的监控场景。我们在中期也开始从0搭建全链路Trace服务，自研智能告警体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）监控3.0时期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;这个阶段我们主要针对各个监控领域专项做深度迭代和打磨，比如Trace，我们实现错、慢、核心服务完整全采样，在不影响业务排障体感的前提下，将整体存储成本降低60%。另一方面，由于历史原因Metric、Trace和Log都是各个团队独立维护的，缺乏较强的关联性，整体监控体系的价值得不到最大化，所以我们在这个阶段将他们和业务之间的指标做一个闭环的打通，来提高业务整体的排障流畅度。同时我们重新自研基础监控和业务大盘页面，给业务提供更智能便捷的大盘自助配置能力。最后我们在告警预案、根因分析等方面也有一定的研究和实践。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、货拉拉监控体系整体架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;448&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H00LLXMXQ9Y8fNKQadlLQbKDcQgmKJ0ERYgPYyWXyibkHT9Bt7icKjmoyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;上图是我们货拉拉监控体系全局架构图，我们可以从下往上看。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先是&lt;strong&gt;Prometheus集群&lt;/strong&gt;，它主要进行数据的采集，可以从多个维度采集数据，比如说我们应用层，有Java、Go、PHP和Python等类型服务暴露指标数据，这里也可以看到货拉拉的语言栈比较丰富。除此之外，还可以通过Push-Gateway来获取像大数据场景下的一些数据，还有一些系统级别的监控数据，比如CPU、网络指标，通过Export暴露出来，K8S指标等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看&lt;strong&gt;中间层&lt;/strong&gt;，左边的应用数据包含一些常规存储，比如ES和HBase，主要用来存储Trace数据。中间是时序数据库Victoria集群，Prometheus将收集到吐给这个Victoria集群进行时序数据的存储、计算以及供上层展示，同时他也承担一部分的告警的计算能力。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再往上是&lt;strong&gt;核心应用层&lt;/strong&gt;，比如Trace数据的收集和展示层、指标数据展示层，还有智能告警服务等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简单来说就是Prometheus + Victoria实现Metric指标服务，然后用Skywalking搭建Trace服务。当然我们Skywalking的基础上做了很多的升级改造，后面会说。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这些数据基础上，我们自研了智能告警、预案系统，这就是货拉拉整体的全链路监控体系架构。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、监控埋点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、JAVA SDK图谱&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;384&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.66484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H07Q92sUkXhzTmCGuX4AgKPegZyoRKGXUIJL2MEAcHoyAVIdDnribWUJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;上图是我们的JAVA 埋点SDK图谱，整体看各基础组件都覆盖到了非常完善。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;客户端：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;支持自研的SOA Client，支持市面上主流的同步、异步Http Client；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;服务端：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;同样支持自研的SOA，主流的Tomcat、Undertow以及Webflux异步埋点都支持得非常好；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基础服务层面：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;支持Job、全链路灰度和Log等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;数据DB层：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;支持当前主流的组件、客户端和版本，整体的覆盖率能达到100%，完全能满足当前货拉拉复杂的场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们所有的埋点完全基于字节码增强技术实现代码“零侵入”。实现业务“零代码”改造“一键快速接入”，这是我们实现“弯道超车”的基础。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、什么是字节码增强技术？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）字节码增强技术的应用 - 热修复Log4j2漏洞&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Z80pz6vnIaOicWS1cnf7btKGKWIROv8rjpnJorth6G125dpx5vul4wVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;我们一直在讲字节码增强技术，那么到底什么是字节码增强技术呢？&lt;/span&gt;&lt;span&gt;因为时间原因这里不会跟大家详细升入原理，但希望通过下面这节让大家对这个技术能有个全面的认识。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里举了一个大家非常熟悉的Log4j2漏洞的例子，正常的业务服务能通升级迭代来修复这个BUG，但是有一些基础服务，比如说一些开源的Kafka和ES并不能通过简单的升级来解决。首先升级版本可能会存在数据不兼容或者服务端和客户端版本不兼容问题，甚至仅仅是重启也可能对依赖的业务方服务产生不小的抖动。所以要求我们提出不重启服务的热修复方案，这里就可以基于字节码增强技术来实现服务的热更新，实际上我们提供出去的Agent Jar帮助整个货拉拉数千个基础服务节点实现热更新，来完美修复这个Bug。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里的修复其实很简单，只涉及到一行代码的改动，在lookup这个方法进入之初就return null，避免执行下面的可能产生BUG的代码，那这个Bug自然就解决了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那具体改如何做呢？这里我们需要明白下面2个概念：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）Java Agent技术&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZLUzCnkqibycQQHVqUpyyeiamEuIibra0RibuwuUtAuvvLFPKZ6fSTg1n1Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;这里我们先看一下&lt;/span&gt;&lt;span&gt;Java Agent是个什么东西？&lt;/span&gt;&lt;span&gt;我们知道Class数据最终是被加载到JVM内存里，我们如果要在运行是修改Class数据其实是有2个契机：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以简单说，Java Agent技术就是一套支持运行时动态修改JVM内存中的Class数据的技术或者手段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;314&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.54375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0Upwuk7frpDlKia0yFEj7pW308gXuCACf0D8CeFeqECdF1giaPaTLgruA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图是Java Agen核心原理图，我们主要关注 2 点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JVM启动后会先进入premain方法，方法JVM会注册一个Transformer。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;p&gt;&lt;span&gt;前文提到的2个修改字节码源数据的契机都会触发Tranceformer的tranceform方法的执行，入参bankTransBytes就是Class源数据，tranceform方法体里会通过字节码框架对源数据进行一系列修改，然后将修改后的字节码数据以返回值的形式交还给JVM。再次new新的Class实例时就会用修改后的Class字节码数据作为模板进行实例创建，从而达到增强的效果。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以下是Java Agent运用的例子，通过简单的编码就可以实现Base.class里process方法的增强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZZnE8arAUkBY6FwmicdePEU7rp9Bljiarv2l6MtXLTK0N6mUw1jZqtGdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）字节码增强框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;这里我们列举3个主流的字节码增强框架，分别是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;span&gt;接下来将结合刚才Base.class的例子逐个重点介绍下3个框架的不同编码规范。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZhXvNusAYrBjiceypA2rJoAD6hKaDu9GSgLRslZicromh3gWAk75icpJaA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是ASM，它是一个比较底层的框架，是字节码增强框架的鼻祖。从上图代码中我们可以看到你需要了解JVM的指令集、Class文件规范，才能很好的进行增强编码。整体学习成本非常高，操作性也不强，除此之外我们没法针对某行增强代码进行断点Debug，开发效率大打折扣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Zrnhz3WcQrvKXRQHZAlau4ibujsYYWZ2Tlvv1LHYmR2TjiapwyPlAXdGw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二个是Javassist，它一个日本人基于ASM进行二次开发的更高级的框架，它对用户屏蔽JVM指令集和Class文件等这些晦涩难记的概念，我们可以遵循Java语法进行开发，但是从图中我们也不难看到，所有的增强逻辑都是采用硬编码（转义字符串）的形式开发，同时也一样不支持断点Debug，整体开发效率还是受到很大的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZpmUsmZL0EFt1kFsRDojoIVJCQVCyHqcKGd6C4VYdHjGfFiajDhuqeew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后是ByteBuddy框架，它比Javassist更高级，也更符文Java开发习惯，首先它采用切面编程思想，整体结构更清晰，这里我们只关注切面代码，会发现我们可以像日常写Java代码一样写我们的增强逻辑，并且可以随意对增强部分的代码进行断点调试，易上手、调试，整体编码效率有质的飞跃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4）字节码增强框架对比&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;205&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.35390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0WxPpvla8AYlBiaH83uX8KxAicch7uw5KFuKY078XQnPOYFzTXSEe6fvw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;显而易见，ByteBuddy是最优的选择，它不需要太多的学习成本，又支持随意的断点调试，是个非常友好的字节码增强框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5）基于字节码增强埋点的优势&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;219&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.3796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0UbMYzgmlwvNjBCgOzibCHY40AwiaDdrF7a70tT5Jj1cLwAWxDGWa4kzQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对比发现，字节码增强形式埋点的优点有很多，比如代码无侵入、不需要进行二次封装、更不需要维护源码、接入轻便快捷，能做到业务无感升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、全链路Trace建设&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、架构演进&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）架构1.0&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZSMWfXRX7vNjPYdnGr51FBhWB18IknLWAPUKM93MK8N2KWhzJlwkmHg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;1.0架构很简单，其实就是原生的skywalking服务（ci-trace-svr）用ES作为Trace存储。&lt;/span&gt;&lt;span&gt;架构简单但也存在弊端，它不满足我们货拉拉全量服务的接入，也无法满足我们业务的快速发展和体量的上升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么呢？ES在我理解他不适合存储Trace这种结构类型的数据，或者说不适合将完整的Trace数据一股脑的都存入ES，一段完整的Trace数据可以划分为两段，一段是基础数据，包含TraceID、AppID、IP、Endpoint和起止时间等基本信息，可用于复杂查询，另一段是详细数据（源数据，包含所有的Span数据），它的大小是基础数据的好几倍甚至数十倍，如果将不承担复杂查询的大体量的源数据也存到ES中会导致ES的内存被大量的源数据占用，在整体内存大小有限的情况下，这会大大降低查询时的缓存命中率，查询被迫从磁盘读取数据，这样会极大的影响整个Trace的查询效率，同时也会影响Trace的写入性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）架构2.0&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZfF63280TFslc3Ab3J3gr439ibuEEOCeb16qXtsBzYd2IA1PiaJsMRAEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;针对&lt;/span&gt;&lt;span&gt;1.0架构存在的问题，我们如何解决呢？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们采样ES作为HBase二级索引的解决方案，将Trace数据拆成基础数据和源数据二部分，基础数据体量很小还放到ES里面用做复杂查询，源数据放在HBase。那么整个Trace查询流程就是，首先通过复杂查询从ES里面查到某个Trace基本信息，再用TraceID到HBase里面查源数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，我们将原来的Trace服务拆成2个服务，分别是ci-trace-svr和ci-trace-analysis-svr。ci-trace-svr用来接受客户端上报的Trace数据，并将数据吐给Kafka集群，ci-trace-analysis-svr异步消费Kafka进行计算、采样和存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这套架构再结合一些异步批处理技术、ES调优，完美得解决了ES瓶颈问题，并且支持通过不断的水平扩容来提高整体服务的一个吞吐量，目前整体架构能支撑了百万TPS、日均100T的Trace数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）架构3.0&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Zp9XaS8wmVokvpP6HwaAqVj8NefTmBFp4RBS6boOqnw9vjRQIwiccicvg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.0架构虽然能满足高吞吐量，但是也存在存储成本浪费的问题。其实从实践经验看，我们会发现80~90%的Trace数据都是无价值的、无意义的数据，或者说是用户不关心的。那么用户关心哪些数据呢？关心链路中错、慢的请求以及部分核心服务的请求。那么我们是不是可以通过某些方式，把这些有价值的数据给过滤采样出来从而降低整体存储成本？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个背景下，我们进行3.0的改造，实现了差异化的完成链路采样，保证1H以内的数据全量保存，我定义它为热数据，而一小时以外的数据，只保留错、慢、核心服务请求Trace，定义为冷数据，这样就将整体的存储成本降低了60%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从3.0的架构图我们也能发现，我们将ES和HBase集群拆分成冷热两个集群。具体我们是如何做差异化链路完整采样的，将在后面的章节中详细介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、数据完整采样与冷热分离&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）冷热分离的价值&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZZOAsVsyx269ftoyRUl4iaAyznWYQdtxDpfSLVLIxDEiaMMG3sKGL4HicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;在介绍采样之前，我们先思考下冷热分离的价值？从左边的2个曲线图，我们发现Trace数据的价值是随着时间的推移急速降低的。其实也很好理解，从我们实际的生产情况看，但凡你发生一个线上的调用异常，就需要我们在30分钟以内发现解决，甚至几分钟之内就处理掉。如果等几天过会你还不看的话，它其实就是无关紧要的异常，也就说明没什么价值，但是存储量随着时间推移会越来越大，成本自然越来越贵。所以如果我们把过去一小时以外的数据进行采样、清洗最终只保留上面定义的有价值的数据，存储成本自然就能极大地降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）常规采样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZTnY4YsBBelrRIApW0OaOSP6eJq86ZhNicJobVUAicWsWkcgZPl1eI39g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;Trac&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;的采样方式有很多种，这里我们先介绍下&lt;/span&gt;&lt;span&gt;Skywalking&lt;/span&gt;&lt;span&gt;原生的常规采样方式，其实是一种常规、无差别的采样手段。&lt;/span&gt;&lt;span&gt;那么他是怎么做的呢？&lt;/span&gt;&lt;span&gt;我们先简单了解下&lt;/span&gt;&lt;span&gt;TraceID&lt;/span&gt;&lt;span&gt;的结构，他主要由&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;段组成，最前面是&lt;/span&gt;&lt;span&gt;PROCESS_ID&lt;/span&gt;&lt;span&gt;，简单理解为&lt;/span&gt;&lt;span&gt;UUID&lt;/span&gt;&lt;span&gt;，中间是个线程&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;，第三段是我们比较关心的毫秒级时间戳加上一个自增序列，原生&lt;/span&gt;&lt;span&gt;Skywalking&lt;/span&gt;&lt;span&gt;取这个时间戳的毫秒级的千位数据段来制定采样规则，比如说&lt;/span&gt;&lt;span&gt;Trace&lt;/span&gt;&lt;span&gt;满足毫秒数据段小于&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;就保留，从而来达到&lt;/span&gt;&lt;span&gt;10%&lt;/span&gt;&lt;span&gt;的采样率效果。&lt;/span&gt;&lt;span&gt;这种常规采样简单易实现但仅凭&lt;/span&gt;&lt;span&gt;TraceID&lt;/span&gt;&lt;span&gt;无法筛选出有价值的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）错、慢、核心服务采样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Z8nvg5zdIPgwrTNpz0rMcBicE21cZKofoCLicShGfic38trLaca2rXccIQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;所以我们提出另外一种方案，就是更深入一点，从Trace详情数据入手。我们可以看到这个Trace的结构是由多个Span组成，Trace维度包含APPID、Latency信息Span维度又包含耗时、类型等更细粒度的信息，根据不同的Span类型设置不同的阈值，比如远程调用SOA耗时大于500ms可以认为是慢请求，而如果是Redis请求，阈值就需要设置小一些，比如20ms，通过这种方式可以将慢请求规则更精细化，同样可以通过判断APPID是否为核心服务来过滤保留核心服务的Trace数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4）链路完整采样&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; ① 什么是链路完整采样？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZOHKib7OOqPG2cZTc18J3jpwVlX184fjsWzbQP5LRPubVZ7lVYGZFibow/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;上面解决了差异化、精细化采样，但还有个棘手的问题，就是在采样是如何保证链路的完整性？&lt;/span&gt;&lt;span&gt;解答这个问题前，让我们先了解下什么是链路完整性？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里举个例子，如图现在有一条远程调用，经过ABC和分支AD。这里有个前提就是ABCD它是4个不同的服务，独立异步上报Trace数据没有严格的时间顺序。在B调用C出现异常时，我们能轻松识别到并将B和C的Trace数据段采样到，只保留B和C的这种情况，称为部分采样。但是在实际的一个排障过程中，我们还需要A和D这条链路数据作为辅助信息来支持排障，所以最好的方式是把ABCD都采样到，作为一个完整的异常链路保存起来，这称为&lt;strong&gt;完整采样。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们的目标是完整采样，如何实现完整采样也是业界的一个难点，当前行业有一些解决方案，比如阿里鹰眼和字节的方案，接下来我们一起了解下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; ② 阿里鹰眼方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZHNeFvBicOvyL2giaWhLE9LmRicVloyXdDdjIG4njNqfyic2CmIUhrxpTHw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;阿里鹰眼采用一直纯内存的解决方案，具体怎么做呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如现在有个链路经过ABCD和分支AE，B调用C出现异常时，他会做一个染色标记，那么C到D自然也携带了染色标记，理论上BCD会被采样的保存起来，但是A和E是前置的节点也没有异常也没被染色，该怎么办呢？他引入一个采样决策点的角色，假设B出了异常，采样决策点感知到，最后在内存里查是否存在像A和E这种异常链路的前置节点，然后将它保存起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里需要注意这种场景对查询的QPS要求非常的高，那如果不是存在内存而是类似HBase这种服务里的话是很难满足这种高QPS的需求。所以他选择将一小时或者半小时内的Trace数据放内存中，来满足采样决策点快速查询的要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但基于内存存储也存在弊端，因为内存资源是比较昂贵的。我们做个简单的计算，如果想保存1小时以内的Trace数据，单条Trace 2K大小，要支撑百万TPS，大约需要6T的内存，这个在我们货拉拉场景是没有很好的存储解决方案，而且成本太高了，所以我们是采样自研的一种巧妙的方案，后面会进行分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; ③ 字节方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZX91Uwvj7SFYIRSwRkiaLfq3qXejveicsLU8Fe0scIzicOWCV4he8e9mqQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;字节码的方案比较简单，但没做到完整采样，只保留了部分异常主链路，比如说现在一个链路是AB和ACDEF，他在CD出现异常的时候只能保存ACDEF这一段，B无法被保存下来，具体原理就不展开了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; ④ 货拉拉方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZRrfhic07oPsksC3NXiaUhicNgR7Bw0rWKJSQ56zxAAfmqTVBicjicmQwumg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来看下我们是怎么解决的？简单说我们基于Kafka延迟消费+Bloom Filter来实现完整采样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如说我们Kafka有两个消费组，一个是实时消费，一个是延迟消费，实时消费每条Trace数据时会判断下是否满足我们的采用规则，如果满足就将TraceID放在Bloom Filter里，另外一方面延时消费组在半小时（可配置）开始消费，从第一条Trace数据开始消费，针对每条Trace数据判断TraceID是否在Bloom Filter中，如果命中了，就认为这条Trace应该被保留的，从而能做到整个Trace链路的完整采样保存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除此之外，里面其实还有一些细节，比如说Bloom不可能无限大，所以我们对其按分钟进行划分出多个小的Bloom，又比如我们其实采用的是一个Redis的Bloom，但Redis Bloom如果想达到百万QPS预计需要10~20个2C4G的节点，但是我们实际只用了5个2C4G的节点就能满足百万的一个吞吐量。这里涉及到专利保护规定，就不展开说了，大家如果感兴趣，有机会可以私底下聊。整体上我们就是具有这套采样方案实现整体成本的降低了60%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、监控可视化建设&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、 监控大盘&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZgiayauOic6rqgkWnqcgguabnwSibJmmcibednncBLQq5icxWcjOic1FyicxpA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;接下来，这一章节主要带大家看看我们在监控可视化建设中如何运用“所见即所得”思想的。首先看下我们的基础监控大盘页面，左边主要有一些Exception、Http、SOA以及核心基础服务的一些指标数据。我们的一大亮点就是所有的曲线都可以通过点击展示出具体的Trace页面。针对QPS、RT标高曲线可以点击查看Trace详情，进一步排查异常点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、Trace页面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Zic44uhaXwdCzBAjw9EZGy78T4zOz8uRBDj4m2RPsXIYBib3yf2tUnbsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;从Trace页面可以看到详细的Trace数据，接口、方法耗时、异常调用栈等信息。这样下来整体的排障流畅度非常的高，如果异常调用栈信息还满足不了排障需求的话，还可以点击log跳转到日志页面来查看日志详情，进行更详细的信息查看和排障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZGseA5QSUTr5ReqlfsZ5JMIM0iapLXoAZa1Zs7nFBpDGAeHcCFdYb48Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、Trace拓扑图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZZA2obcol6ppGlgoVaWtewJS1NaeNBFQicpzwY62dib7e3Fkk8qRRMlNQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;这里是一个Trace拓扑图，拓扑图可以帮助我们站在更高的维度去查看我们整个链路的调用情况，比如说整条链路经过哪些服务？哪些服务的耗时比较大？出现异常等，点击异常节点也可以查看异常信息，提供更丰富的视觉体验和排障手段。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、串联Metric、Trace、Log以及业务指标闭环&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Zbrribpub5KB8Ycltpb8SZqc7zwN5TRTGwp2AFkBQIT5ZrrtfXHpmy8w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这一章节主要介绍下我们如何将Metric、Trace、Log和业务服务这四个独立的服务的指标数据打通的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面也提到过因为历史原因Metric、Trace、Log三个服务一直是独立的团队在维护，最初其实没有关联的，但我们在排障的时候又需要这几个服务的数据紧密关联、配合才能满足日常的排障需要。串联他们之间的闭环，才能提供更顺畅高效的排障手段，实现整个监控体系的价值最大化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69Z2UVE4vaa9RAgytVraABcXOtIo4NGW1yed2NBMcgWibPYQp45BnrRfmg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那么我们是如果打通的？其实重点就是建设对应数据结构的映射关系。我们可以从左往右看映射关系图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是Metric数据，包含APPID、Name、Tags和时间戳等关键信息，这些信息都可以作为Trace列表查询入参，到ES里查到对应的Trace基础信息列表，再通过TraceID从HBase中查询Trace详情，包含整体调用链的Span列表，最终构建出Trace调用链展示到前端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时Trace和Log之间通过TraceID建立很强的关联关系，业务在接入监控后每条log都会自动添加TraceID数据以此来建立强关联。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看右边的业务数据，我们支持业务代码中自由埋点，以Trace Tag的形式将业务数据（OrderID、UserID、DriverID等）埋到Trace数据中，这样就将业务数据和具体的Trace关联上了，同时我们支持根据OrderID、UserID等业务参数查询对应的Trace列表，这样就把各方面数据串联起来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面 3 张是我们的串联效果展示图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZyWAiaOtPIpMGI7IEa2TUVonSkTdVAicsDaWBQ1vW4Ak0ISia9nw0jfEfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZtRPiaOxtCuicHdL23Hy2icLPCDo1s2dicxDrB4C4D3SuU4Vgz3zJ2WWcdA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;320&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YAflEXTXiaibYewFFliaKk69ZXK2yYDPFRZoibkJj6KN8qh3Pbv7un025ZT3tT1Bz79ia9ulOdWPj2tmw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在这个这套体系出来之前，业务大部分都是通过日志里面查关键字来进行第一步的异常发现和排障，效率非常得低。现在首先是从Metric指标页面去看哪些QPS、RT飙高，然后点击曲线看Trace链路，查看异常调用栈，如果还看不到有用的信息再点击跳转到TraceID对应的日志里面查看。整个排障思路和手段更高效、规范，相当于重新定义了业务的排查思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86122&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;七、展望&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、根因分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;357&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.61796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0mjCDzyZhADIsCEZibZpzqjcPNybW7Ll7oaFcQurT0uP9NhtoOz9Pm2g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;最后分享下根因分析这块的建设，简单来说根因分析其实就是将我们日常的一些排障思路和经验沉淀固化成为一些专家经验，然后让代码自动执行排障流程，比如说图中的场景，报警原因可能有多种，比如：业务异常、应用异常云平台报警的一些异常，但最终它都能归因到应用异常，应用异常又分Exception、SOA调用异常或者机器指标异常，那如果是Exception就直接得出结论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果是一个SOA异常，就需要做指标下钻找他的下游。下游服务又回到上面的判断逻辑，就这样递归直到找到真正发生异常的那个根应用，最终诊断出是应该Exception异常还是机器相关异常，得出最终的分析结论，包括根因应用、根因分类和故障原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要达到根因分析的目标，我们需要做很多前置动作，链路治理、应用标准化，例如推广内部调用SOA化，还有监控需要完善，不仅要完善业务接入监控的覆盖率，还要完善我们的监控的指标类型覆盖率，不只要应用维度的数据，还要业务维度的数据、网络层面的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、智能告警、预案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;370&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0PWFNibwDu3HszhqtDwc0j1xiapib63tGdBBFy8gNonmPfOxOyP9hYDCDQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;智能告警、预案简单理解就是把我们日常的一个应对异常情况时候的一些SOP固化、沉淀成为我们的专家经验，然后形成一套规则，根据这些规则构建规则引擎，不同的场景参数会匹配到特定的规则或一些规则，通过规则引擎计算得出对应的一些处理手段，比如说报警或者给出一些建议提示，更进一步的话还可以做到自动化执行一些预案动作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图，左边可以认为是一些场景入参，它可以是一些应用指标，也可以云平台的一些数据，比如网络指标数据，也可能是一些历史的业务数据趋势，也可能是一些大促的关键信息、日常的发布变更信息等。不通的入参命中不通的规则，执行对应的右边的动作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个简单的例子，假如现在有个业务，他的某个接口的OPS和CPU同时飙高，我们可以简单理解他的上游调用量因为某些原因飙高，这种场景我们一般可以进行一个扩容动作来缓解服务集群的压力，那这平台首先进行电话、飞书告警并给出集群扩容的建议，当然这里是可以进一步做到智能化自动扩容，这也是我们后面要发展的方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在整体预案告警这一块后续的规划上，主要有2个方向：完善场景覆盖率和不断智能化。不断的丰富规则引擎，在执行这块做更多的智能化，比如自动扩容自动执行预案等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8aqxiaap0GjBDCJjhLKE86HicnCk76br35bJdnLd5mxIkicPFcdFXyWfXAdLKEzCictZ27OkYjnv7azpw/0?wx_fmt=png&quot; data-cropx1=&quot;127.26224783861672&quot; data-cropx2=&quot;1193.314121037464&quot; data-cropy1=&quot;51.80526769909537&quot; data-cropy2=&quot;653.1164106350237&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5647279549718575&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8YpPhanqFSbFYPGX6Gtz9H0UwN5ycsO8aJthkFRsNuRPRiaKvBPD4D6uPpcKrPdBM1GVWGUrSuwEyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1066&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85988&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot; hm_fix=&quot;190:274&quot;&gt;&lt;span&gt;&lt;strong&gt; 活动推荐 - Gdevops峰会·广州站&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;2022 Gdevops全球敏捷运维峰会·广州站将于5月13日举办&lt;/strong&gt;&lt;span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;精选运维热门议题，共同探索云原生时代下的运维转型蜕变之路，部分议题抢先剧透：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85988&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;205&quot; data-ratio=&quot;0.37222222222222223&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bDt93PlffepZLY2Du4CibAM2uYM1vQypPRKyXFXCe7tvI0jDbxwFdsENYgZ3esw07srN1oJ82CTTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;↓点这里&lt;strong&gt;&lt;span&gt;&lt;strong&gt;可&lt;strong&gt;&lt;span&gt;回看本期直播&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;43&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.07734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8Zf2jiaBBH3vdgfP4A2rem5YEAHYH074dc4GibhojA5B3lLZrXLDRciaVnficveaHcAUCiaIPoDsTkAduA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8a2765d4aa2d7523b902f7e3ead7bfc6</guid>
<title>Node.js 动态表格大文件下载实践</title>
<link>https://toutiao.io/k/i33za77</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;前言&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;最近优化了几个新人写出的动态表格文件下载接口的性能瓶颈，感觉非常有必要总结一篇文章作为文档来抛砖引玉，以促进大家学习一起写出更专业的代码。&lt;/p&gt;&lt;h1&gt;HTTP 文件下载&lt;/h1&gt;&lt;p&gt;讲具体问题之前需要先了解一些 HTTP 基础，下面简单介绍一下用 Node.js&amp;amp;Koa 怎么实现文件下载。&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fdatatracker.ietf.org%2Fdoc%2Fhtml%2Frfc2616%23section-19.5.1&amp;amp;title=rfc2616%2019.5.1%20Content-Disposition&quot; href=&quot;&quot;&gt;rfc2616 19.5.1 Content-Disposition&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fdatatracker.ietf.org%2Fdoc%2Fhtml%2Frfc1806&amp;amp;title=rfc1806&quot; href=&quot;&quot;&gt;rfc1806&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fnodejs.org%2Fdist%2Flatest-v16.x%2Fdocs%2Fapi%2Fstream.html&amp;amp;title=Nodejs%20Stream&quot; href=&quot;&quot;&gt;Node.js Stream&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;简单下载&lt;/h2&gt;&lt;p&gt;最简单的情况就是服务器上文件系统已经存在了某个文件，客户端请求下载直接把文件读了吐回去即可：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; Koa &lt;span&gt;from &lt;/span&gt;&lt;span&gt;&#x27;koa&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; Router &lt;span&gt;from &lt;/span&gt;&lt;span&gt;&#x27;koa-router&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; * &lt;span&gt;as&lt;/span&gt; fs &lt;span&gt;from &lt;/span&gt;&lt;span&gt;&#x27;fs/promises&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; app = &lt;span&gt;new&lt;/span&gt; Koa();&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; router = &lt;span&gt;new&lt;/span&gt; Router();&lt;br/&gt;&lt;br/&gt;router.get(&lt;span&gt;&#x27;/download/simple&#x27;&lt;/span&gt;, &lt;span&gt;async&lt;/span&gt; (ctx) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; file = &lt;span&gt;await&lt;/span&gt; fs.readFile(&lt;span&gt;`&lt;span&gt;${__dirname}&lt;/span&gt;/1.txt`&lt;/span&gt;, &lt;span&gt;&#x27;utf-8&#x27;&lt;/span&gt;);&lt;br/&gt;  ctx.set({&lt;br/&gt;    &lt;span&gt;&#x27;Content-Disposition&#x27;&lt;/span&gt;: &lt;span&gt;`attachment; filename=1.txt`&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt;  ctx.body = file;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;app.use(router.routes());&lt;br/&gt;app.listen(&lt;span&gt;80&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置 &lt;code&gt;Content-Disposition&lt;/code&gt; 头部为 &lt;code&gt;attachment&lt;/code&gt; 是关键，告诉浏览器应该下载这个文件。&lt;/p&gt;&lt;h2&gt;流式下载&lt;/h2&gt;&lt;p&gt;简单下载在碰到大文件的情景就不够用了，因为 Node 无法将大文件一次性读取到进程内存里。这时候用流来解决：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;router.get(&lt;span&gt;&#x27;/download/stream&#x27;&lt;/span&gt;, &lt;span&gt;async&lt;/span&gt; (ctx) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; file = fs.createReadStream(&lt;span&gt;`&lt;span&gt;${__dirname}&lt;/span&gt;/1.txt`&lt;/span&gt;);&lt;br/&gt;  ctx.set({&lt;br/&gt;    &lt;span&gt;&#x27;Content-Disposition&#x27;&lt;/span&gt;: &lt;span&gt;`attachment; filename=1.txt`&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt;  ctx.body = file;&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此例子不设置 &lt;code&gt;Content-Disposition&lt;/code&gt; 头部也是会下载的，因为 &lt;code&gt;Content-Type&lt;/code&gt; 被设置为了 &lt;code&gt;application/octet-stream&lt;/code&gt;，浏览器认为其是一个二进制流文件所以默认下载处理了。&lt;/p&gt;&lt;h2&gt;进度显示&lt;/h2&gt;&lt;p&gt;当下载的文件特别大时，上个例子 &lt;code&gt;Content-Length&lt;/code&gt; 正确设置时浏览器下载条里就能正常显示进度了，为了方便我们使用程序模拟一下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;router.get(&lt;span&gt;&#x27;/download/progress&#x27;&lt;/span&gt;, &lt;span&gt;async&lt;/span&gt; (ctx) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { enable } = ctx.query;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; buffer = &lt;span&gt;await&lt;/span&gt; fsp.readFile(&lt;span&gt;`&lt;span&gt;${__dirname}&lt;/span&gt;/1.txt`&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; stream = &lt;span&gt;new&lt;/span&gt; PassThrough();&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; l = buffer.length;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; count = &lt;span&gt;4&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; size = &lt;span&gt;Math&lt;/span&gt;.floor(l / count);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; writeQuarter = &lt;span&gt;(&lt;span&gt;i = &lt;span&gt;0&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; start = i * size;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; end = i === count - &lt;span&gt;1&lt;/span&gt; ? l : (i + &lt;span&gt;1&lt;/span&gt;) * size;&lt;br/&gt;    stream.write(buffer.slice(start, end));&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (end === l) {&lt;br/&gt;      stream.end();&lt;br/&gt;    } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;setTimeout&lt;/span&gt;(&lt;span&gt;() =&amp;gt;&lt;/span&gt; writeQuarter(i + &lt;span&gt;1&lt;/span&gt;), &lt;span&gt;3000&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;  };&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!!enable) {&lt;br/&gt;    ctx.set({&lt;br/&gt;      &lt;span&gt;&#x27;Content-Length&#x27;&lt;/span&gt;: &lt;span&gt;`&lt;span&gt;${l}&lt;/span&gt;`&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  ctx.set({&lt;br/&gt;    &lt;span&gt;&#x27;Content-Type&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;plain/txt&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;Content-Disposition&#x27;&lt;/span&gt;: &lt;span&gt;`attachment; filename=1.txt`&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;Connection&lt;/span&gt;: &lt;span&gt;&#x27;keep-alive&#x27;&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt;  ctx.body = stream;&lt;br/&gt;  writeQuarter();&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里利用了 &lt;code&gt;PassThrough&lt;/code&gt; 流来替代 &lt;code&gt;fs.createReadStream&lt;/code&gt;，故 Koa 不再知道文件大小和类型，并将文件分为 4 份，每份间隔 3 秒发送来模拟大文件下载。&lt;/p&gt;&lt;p&gt;当参数 enable 为真时，设置了 &lt;code&gt;Content-Length&lt;/code&gt; 则会显示进度 (剩余时间），否则不显示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6336633663366337&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCslHUM1k72kmnf9S3ZfUBjpJribib5oxZKrJlbnW9W6oiaaaaj694ZeibkoOdgTW4HpUpRa9ibmzKblX6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot;/&gt;&lt;/p&gt;&lt;h2&gt;断点续传&lt;/h2&gt;&lt;p&gt;下载文件特别大时，常常也会因为网络不稳定导致下载中途断开而失败，这时候可以考虑支持断点续传：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getStartPos&lt;/span&gt;(&lt;span&gt;range = &lt;span&gt;&#x27;&#x27;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;var&lt;/span&gt; startPos = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; range === &lt;span&gt;&#x27;string&#x27;&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;var&lt;/span&gt; matches = &lt;span&gt;/^bytes=([0-9]+)-$/&lt;/span&gt;.exec(range);&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (matches) {&lt;br/&gt;      startPos = &lt;span&gt;Number&lt;/span&gt;(matches[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; startPos;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;router.get(&lt;span&gt;&#x27;/download/partial&#x27;&lt;/span&gt;, &lt;span&gt;async&lt;/span&gt; (ctx) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; range = ctx.get(&lt;span&gt;&#x27;range&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; start = getStartPos(range);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; stat = &lt;span&gt;await&lt;/span&gt; fsp.stat(&lt;span&gt;`&lt;span&gt;${__dirname}&lt;/span&gt;/1.txt`&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; stream = fs.createReadStream(&lt;span&gt;`&lt;span&gt;${__dirname}&lt;/span&gt;/1.txt`&lt;/span&gt;, {&lt;br/&gt;    start,&lt;br/&gt;    &lt;span&gt;highWaterMark&lt;/span&gt;: &lt;span&gt;Math&lt;/span&gt;.ceil((stat.size - start) / &lt;span&gt;4&lt;/span&gt;),&lt;br/&gt;  });&lt;br/&gt;&lt;br/&gt;  stream.on(&lt;span&gt;&#x27;data&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;chunk&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`Readed &lt;span&gt;${chunk.length}&lt;/span&gt; bytes of data.`&lt;/span&gt;);&lt;br/&gt;    stream.pause();&lt;br/&gt;    &lt;span&gt;setTimeout&lt;/span&gt;(&lt;span&gt;() =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      stream.resume();&lt;br/&gt;    }, &lt;span&gt;3000&lt;/span&gt;);&lt;br/&gt;  });&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`Start Pos: &lt;span&gt;${start}&lt;/span&gt;.`&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (start === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    ctx.status = &lt;span&gt;200&lt;/span&gt;;&lt;br/&gt;    ctx.set({&lt;br/&gt;      &lt;span&gt;&#x27;Accept-Ranges&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;bytes&#x27;&lt;/span&gt;,&lt;br/&gt;      &lt;span&gt;&#x27;Content-Length&#x27;&lt;/span&gt;: &lt;span&gt;`&lt;span&gt;${stat.size}&lt;/span&gt;`&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    ctx.status = &lt;span&gt;206&lt;/span&gt;;&lt;br/&gt;    ctx.set({&lt;br/&gt;      &lt;span&gt;&#x27;Content-Range&#x27;&lt;/span&gt;: &lt;span&gt;`bytes &lt;span&gt;${start}&lt;/span&gt;-&lt;span&gt;${stat.size - &lt;span&gt;1&lt;/span&gt;}&lt;/span&gt;/&lt;span&gt;${stat.size}&lt;/span&gt;`&lt;/span&gt;,&lt;br/&gt;    });&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  ctx.set({&lt;br/&gt;    &lt;span&gt;&#x27;Content-Type&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;application/octet-stream&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;Content-Disposition&#x27;&lt;/span&gt;: &lt;span&gt;`attachment; filename=1.txt`&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;Connection&lt;/span&gt;: &lt;span&gt;&#x27;keep-alive&#x27;&lt;/span&gt;,&lt;br/&gt;  });&lt;br/&gt;  ctx.body = stream;&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们来试验一下（Chrome 默认下载工具不支持断点续传）：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;curl -v http://127.0.0.1/download/partial -o 1.txt&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;此时我们趁传输间隙，将服务进程停止，这时可以看到 &lt;code&gt;1.txt&lt;/code&gt; 文件仅仅只传了 18 bytes：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCslHUM1k72kmnf9S3ZfUBjp4MfJicMMaBlh4DTGXfTvpicpOnu3B2yP7oKOJ2SDOM9J53zSr2Vb7BcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们将服务恢复，恢复下载：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;curl -v http://127.0.0.1/download/partial -o 1.txt -C -&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.56484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/xsw6Lt5pDCslHUM1k72kmnf9S3ZfUBjpQlA6iakCgcqA9lgt4Fzzia3GnUfRaWwtAnfqf6ErBMIHDbNHfJedSKGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以看到剩下的部分也分 4 次传完了。&lt;/p&gt;&lt;h1&gt;动态表格&lt;/h1&gt;&lt;p&gt;在了解完上述关于文件下载实现的基础后，我们来看一个实际问题：根据请求参数条件读取数据库的某张表的全部记录并导出为表格。&lt;/p&gt;&lt;p&gt;参考：&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Fexceljs%2Fexceljs%23streaming-io&amp;amp;title=exceljs&quot; href=&quot;&quot;&gt;exceljs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;瓶颈&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Controller.js&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sequelize = &lt;span&gt;new&lt;/span&gt; Sequelize(name, user, password, {&lt;br/&gt;  &lt;span&gt;dialect&lt;/span&gt;: &lt;span&gt;&#x27;mysql&#x27;&lt;/span&gt;,&lt;br/&gt;  host,&lt;br/&gt;  port,&lt;br/&gt;});&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; model = sequelize.import(&lt;span&gt;&#x27;/path/to/model&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; { rows } = &lt;span&gt;await&lt;/span&gt; model.findAndCountAll({&lt;br/&gt;  &lt;span&gt;where&lt;/span&gt;: conditions,&lt;br/&gt;  &lt;span&gt;attributes&lt;/span&gt;: [&lt;span&gt;&#x27;f_user_id&#x27;&lt;/span&gt;],&lt;br/&gt;  &lt;span&gt;group&lt;/span&gt;: &lt;span&gt;&#x27;f_user_id&#x27;&lt;/span&gt;,&lt;br/&gt;});&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; list = &lt;span&gt;await&lt;/span&gt;&lt;span&gt;Promise&lt;/span&gt;.all(&lt;br/&gt;  rows.map(&lt;span&gt;(&lt;span&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { f_user_id } = item;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; userRows = &lt;span&gt;await&lt;/span&gt; model.findAll({&lt;br/&gt;      &lt;span&gt;where&lt;/span&gt;: { ...conditions, f_user_id },&lt;br/&gt;      &lt;span&gt;// ordering, eager loading, ...&lt;/span&gt;&lt;br/&gt;    });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// formating userRows -&amp;gt; userData&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; userData;&lt;br/&gt;  })&lt;br/&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; headers = [&lt;span&gt;&#x27;ID&#x27;&lt;/span&gt;, &lt;span&gt;/*...*/&lt;/span&gt;];&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sheetData = [headers, ...list];&lt;br/&gt;&lt;br/&gt;ctx.attachment(&lt;span&gt;`&lt;span&gt;${sheetName}&lt;/span&gt;.xlsx`&lt;/span&gt;);&lt;br/&gt;ctx.body = &lt;span&gt;await&lt;/span&gt; exportXlsx(sheetName, sheetData);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// xlsx&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; ExcelJS = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;exceljs&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; fs = &lt;span&gt;require&lt;/span&gt;(&lt;span&gt;&#x27;fs&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  &lt;span&gt;exportXlsx&lt;/span&gt;: &lt;span&gt;async&lt;/span&gt; (name = &lt;span&gt;&#x27;sheet&#x27;&lt;/span&gt;, data) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; tempFilePath = &lt;span&gt;`./xlsx/&lt;span&gt;${&lt;span&gt;Date&lt;/span&gt;.now()}&lt;/span&gt;.xlsx`&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; workbook = &lt;span&gt;new&lt;/span&gt; ExcelJS.stream.xlsx.WorkbookWriter({ &lt;br/&gt;      &lt;span&gt;filename&lt;/span&gt;: tempFilePath &lt;br/&gt;    }); &lt;span&gt;// 创建一个流式写入器&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; sheet = workbook.addWorksheet(&lt;span&gt;&#x27;My Sheet&#x27;&lt;/span&gt;); &lt;span&gt;// 添加工作表&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; { length } = data;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; length; i++) {&lt;br/&gt;      sheet.addRow(data[i]);&lt;br/&gt;    }&lt;br/&gt;    sheet.commit(); &lt;span&gt;// 提交工作表&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; workbook.commit(); &lt;span&gt;// 交工作簿，即写入文件&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; fs.createReadStream(tempFilePath);&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多数人业务初期做需求时，考虑到数据量还不是很多，排期紧任务重，都像上面这样实现：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;不考虑数据量，当数据库表记录数超过 2w 时，内存就已经承受不住导致 Node 进程退出了&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;没有考虑内存限制，找个成熟的 &lt;code&gt;exceljs&lt;/code&gt; 库，但却没有用其提供的流 API&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据查询逻辑实现完全不考虑性能，拿到 ORM 库就是调用查询，完全不考虑 SQL 查询并发数&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;优化&lt;/h2&gt;&lt;h3&gt;分段处理&lt;/h3&gt;&lt;p&gt;最简单的策略就是将几 w 条数据库数据按每组 1w 条分组，分批次处理，有很多优秀的开源库以供使用比如 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.npmjs.com%2Fsearch%3Fq%3Dasync&amp;amp;title=async&quot; href=&quot;&quot;&gt;async&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;简单代码示意：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; total = &lt;span&gt;await&lt;/span&gt; model.count(&lt;span&gt;/* ... */&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; page = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; tasks = [];&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; size = &lt;span&gt;10000&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;while&lt;/span&gt; (total &amp;gt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;  tasks.push(&lt;span&gt;() =&amp;gt;&lt;/span&gt; queryModel({&lt;br/&gt;    &lt;span&gt;limit&lt;/span&gt;: size,&lt;br/&gt;    &lt;span&gt;offset&lt;/span&gt;: size * page&lt;br/&gt;  }))&lt;br/&gt;  page++;&lt;br/&gt;  total -= size;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;await &lt;/span&gt;async.series(tasks)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;减少 SQL 查询数&lt;/h3&gt;&lt;p&gt;源码中出现先 &lt;code&gt;group by&lt;/code&gt; 查询出去重的 &lt;code&gt;f_user_id&lt;/code&gt; 后，再来并发查询某一用户的所有记录。&lt;/p&gt;&lt;p&gt;这里应该用 SQL 中的 &lt;code&gt;IN&lt;/code&gt; 先查完再匹配处理：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;model.findAll({&lt;br/&gt;  &lt;span&gt;where&lt;/span&gt;: {&lt;br/&gt;    ...conditions,&lt;br/&gt;    &lt;span&gt;f_user_id&lt;/span&gt;: rows.map(&lt;span&gt;&lt;span&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;span&gt;`&lt;span&gt;${x.f_user_id}&lt;/span&gt;`&lt;/span&gt;)&lt;br/&gt;  }&lt;br/&gt;})&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;流处理&lt;/h3&gt;&lt;p&gt;在上面的 &lt;code&gt;xlsx.js&lt;/code&gt; 文件中，是先输出一个文件再使用 &lt;code&gt;fs.createReadStream&lt;/code&gt; 流输出&lt;/p&gt;&lt;p&gt;&lt;code&gt;exceljs&lt;/code&gt; 库提供了 &lt;a class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-type=&quot;text&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fgithub.com%2Fexceljs%2Fexceljs%23streaming-io&amp;amp;title=API&quot; href=&quot;&quot;&gt;API&lt;/a&gt; 来实现流写：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; workbook = &lt;span&gt;new&lt;/span&gt; Excel.stream.xlsx.WorkbookWriter(options);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; sheet = workbook.addWorksheet(&lt;span&gt;&#x27;My Sheet&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;// .,,&lt;/span&gt;&lt;br/&gt;ctx.body = workbook.stream;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;更多&lt;/h2&gt;&lt;p&gt;当然除了上述提到的优化手段，还有离线生成、缓存等等诸多优化手段可用，这里不再展开。&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;文件导出是最常见的需求之一，把功能实现好是专业素质最好的体现。&lt;/p&gt;&lt;p&gt;此文篇幅有限，原理性的细节如 Exceljs 的依赖里对 xlsx 规范的 zip 流处理等等大家可以自行去了解一番。&lt;/p&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: 0px; text-align: left; white-space: normal; font-size: 16px; line-height: 1.6; word-break: break-word;&quot; data-darkmode-color-16072568501583=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(0, 0, 0)&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; color: rgb(89, 89, 89); line-height: 26px;&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span&gt;如果你觉得这篇内容对你有帮助，我想请你帮我2个小忙：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;1. 点个&lt;/span&gt;&lt;span&gt;「在看」&lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;，让更多人也能看到这篇文章&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;2. 订阅官方博客 &lt;/span&gt;&lt;span&gt;www.inode.club &lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;让我们一起成长&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.006666666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/7QRTvkK2qC6D2OhibHUMz1XiaC7v0RcUA1thKEXck4AzcEnKnOXEHJibw1OEpzrL0n2O4FNrfgNaAZRcDyzDkKqiaw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>