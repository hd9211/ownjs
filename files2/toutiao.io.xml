<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1adc0ba121054fdc747a967b012b99ac</guid>
<title>开源｜基于 Vue 开发的可视化商城搭建平台</title>
<link>https://toutiao.io/k/48imbcu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;&lt;strong&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断。&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;扫描下方二维码&lt;/span&gt;，即刻加入！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个基于 Vue 开发的可视化商城搭建平台，包括多页面可视化构建、JSON Schema 生成器（可视化搭建物料控制面板），实现组件流水线式标准接入平台。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最新版本使用 uni-app 重构物料、模板项目，支持生成 H5、小程序多端商城。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;2.0773333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibCSiaxHO1EIWViadicfiaJfeFmJIiciaVjvXJTOBnLzoTSicibvJvQbXkcRgFIicia0JzeEgLH2mLIhZqhukMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f4e777e0f422683e248d61e5ca9fb9a0</guid>
<title>用 vscode 写 C/C++ 代码</title>
<link>https://toutiao.io/k/e3l7be3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/otHvoL6neeIxIugZwRtMH5VUj2nppdvm3sGbAq6eHwb2SOd1wlEibUiceiaAfPl39lhaZQ0TCHzHDwr2G8ERvzOiaw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;最近用上了 MacBookPro M1，使用 &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjMxNzQ0MQ==&amp;amp;mid=2651106013&amp;amp;idx=1&amp;amp;sn=77921f12bcea5baa71bc4489465d5484&amp;amp;chksm=813c4733b64bce252eec22f93038e1696568208be334549b1c2c77506e43a46ae40f8399e3f4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;dotfile&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;dotfile&lt;/a&gt;&lt;span&gt; 配置好基本环境后，发现我的 vscode 里 C/C++ 开发环境还没配置好。&lt;/span&gt;&lt;span&gt;一直以来，vscode 都是我的主力 C/C++ 开发环境，这其中离不开 cquery 插件。&lt;/span&gt;&lt;span&gt;2018 年我曾写过一篇文章&lt;/span&gt;&lt;span&gt;：《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjMxNzQ0MQ==&amp;amp;mid=2651105907&amp;amp;idx=1&amp;amp;sn=e3f5009a5ea5049aebf590afe48078fe&amp;amp;chksm=813c479db64bce8babe5f45eda9eb20044072a4a2ce574d2b2007ac9c0a0e2aba6f7557111fc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;神器：VSCode 的 cquery 插件&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;神器：VSCode 的 cquery 插件&lt;/a&gt;&lt;span&gt;》&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;cquery 在头文件搜索，符号跳转，代码提示和补全等方面都令人满意。甚至在 V8 这样的大型仓库上，官方也有说明如何配合 cquery 进行开发 V8(https://v8.dev/docs/ide-setup#visual-studio-code-and-cquery)。&lt;/p&gt;&lt;p&gt;几年过去了，今天在 M1 上编译 cquery 时，才发现 cquery 已经很久不维护了，github 的 repo 已经 archived 很长一段时间了（应该是2018年就关了）。这就直接导致了在 Apple Silicon 上编译不了 cquery，也就无法使用 cquery 了。&lt;/p&gt;&lt;p&gt;于是，得寻找一套替代 cquery 的方案。一番寻找，两个替代方案出现了：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ccls&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;clangd&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;2018年 4月，一位中国的年轻小伙 &lt;span&gt;MaskRay&lt;/span&gt; 从 cquery fork 了一份代码出来，并且对原有代码进行了大刀阔斧的重构：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;在cquery的代码库上做了大量清理工作：删除第三方库、精简代码、删除过度的抽象、合并拆得过碎的文件，当然还有改名、删除waf构建系统、删除无用blob、……自己用得舒服了再推己及人，希望别人也能用上满足自己的虚荣心。其实说穿了就是和cquery/clangd抢夺用户。精简并不能改变用户习惯，带来用户。我很快瞄准了cquery用户的一个痛点：auto-index pipeline的稳定性。最大的问题是，保存文件后容易导致重复或丢失的references。如果.h和.cc没有放在同一个目录，更容易出问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;by MaskRay《C++ language server ccls一周年》&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;重构和优化后的 ccls 在社区里获得不错的评价。在 cquery 停止维护，clangd 还不成熟的时候，ccls 一度还是该领域的最佳选择。而我这种老旧派还一直固守着 cquery 这只已经不再前进的工具。cquery 的作者不再维护的原因之一，竟是期待 clangd 来取代自己。&lt;/p&gt;&lt;p&gt;这 clangd 从名字上看来就大有来头。它背后是著名的 llvm 官方团队。它基于 Clang C++ Compiler，默认集成到了 llvm 项目中。也就是说，只要你安装了 llvm，就默认带了 clangd，不需要像 cquery, ccls 一样额外安装。&lt;/p&gt;&lt;p&gt;但早期的 clangd 不够成熟，bug 不断，对使用的稳定性造成了不少影响。于是不少用户转向了 ccls，虽然是个人项目，但是功能稳定，在一些特性方面支持也很好。同时 clangd 也在不断的更新迭代，早期的各种问题也在逐步的解决掉，稳定性也在逐步的加强。&lt;/p&gt;&lt;p&gt;我很敬佩 ccls 作者所做的贡献。但是，2022年，我会先选 clangd，原因是它默认随 llvm 安装，以及它背后的 llvm 团队。简单试用后，感觉也非常的不错。待我再用长一段时间，再回过来评价，至少，还有另一个选择：ccls，在等着我。&lt;/p&gt;&lt;h5&gt;vscode + clangd 使用指南&lt;/h5&gt;&lt;p&gt;第一步：&lt;span&gt;安装 clangd，安装 llvm 即可：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; brew install llvm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;第二步：vscode 安装 clangd 插件，搜索”clangd”安装即可&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.20333333333333334&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeIxIugZwRtMH5VUj2nppdvmzF8DESRj9eJrdjxhTLfqqcQ3KhKvVicXmXo0kbzvalt4TibhUSHtwyibQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三步：vscode 官方的 C/C++ 插件还是需要的，因为我们调试等功能还需要用到。但是需要关闭它的智能提示功能：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;C_Cpp.intelliSenseEngine&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Disabled&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第四步：生成 compile_commands.json 文件，clangd 依赖它来分析所有的依赖关系。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果使用 CMake 编译，编译时，添加参数：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;或者在 CMakeLists.txt 里，指定生成：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;objectivec&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;set(&lt;span class=&quot;code-snippet__built_in&quot;&gt;CMAKE_EXPORT_COMPILE_COMMANDS&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;YES&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;生成的 compile_commands.json 文件可能在 build 目录下，这时需要在项目主目录里创建一个该文件的软链：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; ln -s build/compile_commands.json .&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第五步：重启 vscode，或者 CMD+Shift+P 输入 Reload Window&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们以著名开源代码 libuv 为例，生成 compile_commands.json 后，打开工程， 所有头文件，符号都能正确的索引和跳转：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7775&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/otHvoL6neeIxIugZwRtMH5VUj2nppdvmk0pE8Tyw9icughHcypPT3MjpmJuJ6kiaTG5hwpL1DqXib10oW7SB3JKpQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;h5&gt;关于 Python 和 C++ 的一则趣闻&lt;/h5&gt;&lt;p&gt;Python 的作者 Guido van Rossum 的博客几年没更新了，最新更新了一篇文章，翻译过来就是：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;2005 年底，我加入了谷歌。采访花费了令人惊讶的长时间，这是另一个故事。今天我想讲一个故事，发生在我在谷歌园区的第一周。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在主楼有一个令人印象深刻的楼梯，通往二楼。靠近顶部的地方是一间宽敞的办公室。一位非常重要的工程师在那里工作。我看了看门上的名字，发现我认识他：他曾经是英国的一名研究生，90 年代初曾在阿姆斯特丹的数学和计算机科学研究学会（CWI）访问过我们的研究小组（Amoeba 项目）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很高兴找到一个我很久以前就认识的人，有一天我敲门自我介绍。是的，他也记得我，但我的喜悦很快就结束了。不仅 Python 是 Mike 在 Google 的痛苦之源（他讨厌所有非 C++ 的东西），而且他在阿姆斯特丹逗留期间，留下的一个突出的记忆是，大约有一次我带他骑车穿过城镇，坐在我的自行车后面：“这是我一生中最糟糕的骑行。”&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>44be451dbffce1c0002c8f7c9967eaaa</guid>
<title>杨尚昂：FlinkSQL在京东实时维度建模中的应用</title>
<link>https://toutiao.io/k/81ouxgp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img __bg_gif&quot; data-backh=&quot;161&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;161&quot; data-fileid=&quot;100072688&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh7SwtLWpnpAXTOWaOPZYslMYaP54YrW09u7JbzkuR03o15wm0Gbial1PGDXGAICxfN1urRfLwHTpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZUhyOUQrkiaMibYN5AjAqoK51wKKdjAobj3VdMUBLEmlDzz3X4iaWqJEFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: -10px; margin-left: -8px; max-width: 100%; width: 18px; height: 18px; border-top: 8px solid rgb(54, 65, 173); border-left: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/section&gt;&lt;section data-bgopacity=&quot;50%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot; data-style=&quot;max-width: 100%; width: 543.333px; background: rgb(247, 247, 247); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;分享嘉宾&lt;/span&gt;&lt;span&gt;：杨尚昂 京东 BI工程师&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;编辑整理&lt;/span&gt;&lt;span&gt;：闵强 明略科技&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16008590572276=&quot;rgb(33, 33, 33)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(247, 247, 247)&quot;&gt;&lt;span&gt;出品平台：DataFunTalk&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot; data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot;&gt;&lt;section data-darkmode-bgcolor-16008590572276=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16008590572276=&quot;rgb(255, 255, 255)&quot; data-style=&quot;max-width: 100%; width: 18px; height: 18px; border-bottom: 8px solid rgb(54, 65, 173); border-right: 8px solid rgb(54, 65, 173); box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;今天给大家分享京东在实&lt;/span&gt;&lt;span&gt;时建模过程中使用Flink SQL的应用案例。&lt;/span&gt;&lt;span&gt;主要从问题、难点、方案和规划四个方面来介绍。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;问题&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在维度建模中有很多技术场景，本文挑选其中两个较难的场景来进行详细阐述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题一 实时多流全量关联的问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; A &lt;span class=&quot;code-snippet__keyword&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt; B &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; A.name = B.name;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;此问题关联SQL比较简单，只有A流和B流两个实时流进行full join，但还可能涉及到其中有一流数据需要关联全量历史数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题二 实时流全量分组计算的问题&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;,val,row_number() &lt;span class=&quot;code-snippet__keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;partition&lt;/span&gt; byname &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; val) &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; rn &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; A;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;name&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;min&lt;/span&gt;(val) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; A &lt;span class=&quot;code-snippet__keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; k;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这个问题是&lt;/span&gt;&lt;span&gt;实时流全量分组计算，涉及到分组排序值，或者分组求最小值等操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对以上两个问题，似乎使用SQL处理起来比较简单，甚至我们可以直接用Flink SQL去完成。而实际直接使用以上Flink SQL计算存在若干问题。第一个问题是在最初生产数据的时候，可能并没有接入实时数据流。在实际场景中，往往需要在过程中接入实时数据。比如接入binlog之类的数据，其实是从当前时刻到未来这一时间段。例如商品SPU信息，一般需要有历史数据。只有获取历史数据，在订单数据流关联的时候，才能关联上这个订单所对应的历史信息。如果商品信息都是从产生后一段时间才接入数据，即从当前时刻才有的，那就无法获取到历史信息。第二个问题是状态数据，在用Flink SQL进行计算时，需要维护若干状态数据放到内存中，这种操作比较消耗内存。对于商品几年的历史数据，如果将状态数据存放在rocksdb中，经测试性能无法得到保障。基于此，如果直接用Flink SQL肯定无法解决。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以下分析怎么去解决此类问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;首先看第一个问题，即实时多流全量关联的问题。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span&gt;第一部分就是从最初时刻到当前时刻的时间区间，可以认为是历史状态数据。此处分别是A表和B表的记录。然后我们按照对应的关联键，如分别按name进行关联。通过name字段把它拆成几个部分，右侧是关联出来的结果表。当有一个消息进入，这个消息体可能是一个变更的消息记录。此处略过较为简单的新增或者删除操作，重点分析更新操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZzJ426cjgB0Q09OgCGcu5BmZDDwpDcsDePDKt5rtMbCgicqibdWNSqw9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如下图中消息mid=1，将A表里边的id=1000001这条记录里面aaa的记录值改成了bbb。但这个name字段是关联键，所以这就导致它影响了两个分组下的关联键下的记录。最终在A里面，它与B关联上的，之前的这两条记录(name=aaa)，在它被修改之后就不存在了，所以我们需要给下游发删除记录。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZDLQffs2EKSpoUmoykMg7aY3g2VkyF2KsCS9qrvrxVJEACUZjq40QOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时在A表的分组中，即在name=bbb分组下，这个关联键下会新增一条插入的记录。所以需要向下游下发这条新增记录跟B表关联到的这两条宽表记录。如果再有一条消息体过来，那么同样存在插入和删除记录。以此类推，B表变更逻辑相类似。在此过程中，当一条变更的消息体来了之后，需要考虑在实时维度建模里面去做哪些操作。例如在这个建模过程中需要变更的可能不只是当前的那个记录状态，之前的状态也有关联。而在进行分布式去计算的时候，不同的关联键也会分发到不同的节点上去计算。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZADKmtcGyTnBRTl3tNCzCb0ldzuyJmAzdtNS5LCRAI5B7rCy1Wlkw7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZHRzQNRalVhuOJwbSUv8cW5NFp58MEpPUJJeGkP6SSbxjib7JlFHhR2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;再看第二个问题，全量分组计算问题。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;类似地，当源端来了一个消息体，本来是一个原始状态值name=bbb，当它变更之后，现在变更成name=aaa，最终会影响分组排序的结果。原本是按照val=21,33,66 (name=aaa)依次排序，现在只有val=33,66 (name=bbb)，因为（id=100003）这条记录中的name值从bbb变成了aaa。所以在排序时row_number会发生变更，而下发的相关联的数据同样都会变更。当产生变更时，分组中最小值(min)是一样的，在涉及变更行为之后都需要更改。我们在进行计算时就需要考虑以上这些情况。因此每一次计算过程，都需要拿到A表的全量历史数据跟B表的全量历史数据去进行关联计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZMC8KtwRAyyfEIicO27xD2iaibK6oRNTXM3QIIf2l4qavVHb54V1gmuTicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZKbxokKnDBFZQFiakWpejkn3nSaYsIjxxEposMQbGOmDic9hgMDlRxoiaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然也可能存在A表发生变更，需要拿关联的B表的全量，这样可以把所有的数据都进行关联，包括之前这个状态将对应的B的全量取出来然后去做关联。以上这两类问题，通过画图和描述来看，似乎较为简单。但问题在于有数据流的变更，还需要还原出对应的状态表，然后由状态表关联结果，最终还原出对应的关联结果的流式变更记录，这类操作就涉及状态存储与读取的技术难点。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;难点&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以上两类问题，如果进行全量数据关联操作，很快就能得到关联出的所有全量结果，然后去做计算，在性能上似乎也不用考虑太多，但实际操作存在一定难度。&lt;/span&gt;&lt;span&gt;以下阐述了问题难点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先需要明确，问题难点准确来说是相对繁琐之处。实时维度建模有别于离线维度建模，需要考虑的地方很多，因此会增加实时维度建模的开发难度以及需要人为的干涉的地方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;难点一，如何获取到历史数据。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果是使用Flink SQL来实现，需要保存全量的历史信息。既然我们无法保存状态，那就存到外设KV存储里面，存到外部的KV Storage。在这个过程中，需要考虑以什么结构去存储；如何去维护A、B、C三个表的数据，用这三个流表去做关联；这三个流表与各自对应的外设存储比如说A的HBase表跟B的HBase表跟C的HBase表或者与D的HBase表等等类似KV存储这种类型的；要对这几个表之间的关系进行组织；在组织关联出了结果之后，需要考虑在关联结果里面是否还存在时序问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如上描述的关联结果里面存在三个消息，当三个消息体来了之后，对应的有一组下发流。如id=100001对应的键，它存在多条记录，如果时序发生混乱，最终可能导致宽表的结果还原错误。那怎么来保证时序的正确性，如果直接用Flink SQL进行计算，可能需要创建一个HBase table source（类似table function）的方式去做关联。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;难点二，如何提升性能。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果直接使用Flink SQL进行计算，需要考虑如何获取数据包括IO操作，且如何更高效地去实现这个过程。关于提升性能，最直接地有两种途径，一是降低IO的请求次数，二是增加并发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;降低IO请求，具体实现方法是做业务逻辑过滤或者根据业务逻辑做一定计算，或者做一些请求合并，或者用一些批量请求的方式去发请求。另外是设置缓存，通过设置一个合理的缓存值，能够做到缓存有一个较高的命中率。同时还需要考虑是设置被动缓存还是主动缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;增加并发，具体需要考虑是使用异步IO，还是使用增加并行度、引擎优化等等。因为以上两个较为繁琐支出，所以开发难度相对较高，需要考虑的细节问题较多。如果直接使用Flink SQL，其代价也许比写Flink程序去做维度建模工作更大。以上就是使用Flink SQL做维度建模工作遇到的若干难题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;方案&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那如何去解决以上问题？&lt;/span&gt;&lt;span&gt;首先考虑采用组件化的设计方式，把用户所需要的维度建模功能做成若干组件，用户可以直接通过组件化的配置，就能够完成维度建模的开发。&lt;/span&gt;&lt;span&gt;这样达到了降低代码开发成本的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZno36s2xnxsKibicKR4vfp3JYuyxhXFQOCFgMUNGw19eWDmyP7N45gwCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次是将计算逻辑使用Flink SQL来表达。因为SQL在数据开发过程中是一种通用性较强的方式，并且其学习成本或研发、维护等等成本相对较低。采用以上两种方式需要解决前文提到的难点，下面看具体方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里构建了一个产品RDM Building用来完成维度建模构建工作。它主要分为三层（Components Config、RDDM Component Builder、RDDM Component Parse），首先用户可以写组件配置，然后构建器会根据配置生成对应的一些组件对象，接着组件对象通过RDDM Component Parse就会将对应的组件转化Flink SQL算子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如使用A、B、C三个流进行关联计算，它们都是通过同样一组key关联，其关联键是相同的，最终关联生成一个结果表。这类操作可以使用His Rows Component组件进行处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它负责的过程是将A、B、C流分别对应的KV存储里面存储的历史数据取出，拿到对应的关联历史数据，比如A流数据过来就取到对应的关联的B表跟C表的历史数据。同样的针对B流，会将关联的A流跟C流的历史信息也都取出。对于C表也是如此。这样需要关联的所有历史数据，再组合成对应的A&#x27;、 B&#x27;、C&#x27;，其种A&#x27;不仅包含了A当前的数据，还包含了A要跟其它流关联的、相关的历史数据。所以在A&#x27;、 B&#x27;、C&#x27;里面，不仅有A、B、C流数据，而且包含了对应的历史数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照以上设计，实时流的历史数据可以一直保存，那就基本解决历史数据这个难点。还需要考虑的问题是cache随着时间增长存不下，或者因cache太大导致速度很慢。又或者使用rocksdb的方式发现性能较低，但同时缺乏rocksdb方面优化的专业能力。但可以相对较为成熟的KV存储，而且数据可能本身使用KV存储进行保存。那么直接使用KV存储就能解决历史数据问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下图可以看到His Rows Component组件的详细执行过程，我们以这个组件为例来进行展开分析。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZ0G2OAPc9W15UescZl2OII4h0kTOr0XZZO9C1P0HjrQXdfbMetd0v4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2560&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们拿到A、B、C三个流表，拿到之后先根据其对应的组件去做keyBy操作，再去做窗口聚合。窗口聚合的功能是什么？在实际业务过程中，A表的业务数据在处理过程中可能存在事务操作。它的事务操作里面可能存在先签了一条记录，然后再把里面改了一下某一个值；也可能先删了一条记录，然后又插入了一条记录。这取决于业务系统的多样性操作，所以可能存在业务上只做了一次变动，但发了若干条消息对应的binlog。那就需要首先对其进行微批处理，来减少我们处理的记录数，然后处理生成A、B、C一一对应的三个流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接着再把它们进行格式转换，转换成对应的tuple。比如相同的一个格式，可能是表名、分组键、主键以及转换成的统一的Bean结构。此处需要注意的问题是，对更新这种操作需要拆分。具体有两类，一类是插入的tuple，一类是删除的tuple，它会有对应两条记录，一条删除的一条新增的。在统一格式之后，再把它们union(合并)到同一个流，然后根据相同的关联键去做keyBy。这个过程中合流统一keyBy，是想用这种方式把所有的需要关联的流数据通过相同的键去做keyBy然后做分发，保证的结果是使相同存储键的记录分发到相同slot，以提升缓存利用率。从KV Storage获取数据，或者过程中使用的缓存的高命中率，包括缓存的有效性，以及缓存一致性，即最终同样的一个key一定会落到同一个slot上去计算。这样就能够保证不会存在多个slot上都存了同一个关联键的一些信息，从而可以避免不一致或先后问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;得到keyBy之后的结果，下一步经过flatmap算子，可以把历史数据从cache缓存、KV存储中加载进来。加载进来之后再比较它们的消息的id，如果是最新记录则就写入cache及KV存储并向下发送记录。当A流来了，关联的是B流历史跟C流历史；当B流来了，同样会关联A流历史和C流历史。同理C流也是如此。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一步把从hisStreams流中分拆加载出来的数据流，合并得到包含历史数据的A_all、B_all、C_all 中，并用于下一步SQL计算。这个功能是将A、B、C流映射成了A_all、B_all、C_all，即所有的SQL逻辑就都可以直接写Flink SQL并用这三个流表(A_all、B_all、C_all)去计算，如此就包含短时间内的历史数据在进行计算。当然如果缓存中有数据的话，就不需要从KV中加载。而且同样的key会发到同一个slot上，它的缓存的命中率是很高的。另外以上都是按关联键去存的，如果同时有A、B、C等多条消息来了之后，都会命中同一条KV存储的key，也会提升缓存命中率。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;规划&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;以上是具体实现的方案，下面是我们后续的规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前在用户使用以上组件时，还存在较高的学习成本。后续我们可能会增加一个前端页面，可以直接生成基于类似流程图面板以及点击、拖拉拽等形式生成对应不同类型的组件。采用这种配置方式可以降低用户的学习成本，增加使用的便捷性。另外我们还要扩展底层对多种实时计算引擎的支持。现在采用RDDM Component Parse会把对应的组件转成Flink算子(keyBy、flatMap等)，但可能在某些应用场景下还会使用SparkStreaming，或其它实时计算引擎。针对这种场景，我们可以将其独立出来，供用户自由地选择实时计算引擎。在KV存储方面，目前以内部使用为主，暂时只支持HBase、redis这两类KV存储，也需要把这部分信息彻底地独立。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;今天的分享就到这里，谢谢大家。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;在文末分享、点赞、在看，给个3连击呗~&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享嘉宾：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;289&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPheicIYiaJF26lh45fT4KIJdZfFZG3uicFhXh6VGdvk98b08a1KJyRQHstzZY2Xicv09eCBYMX8KIibWVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;免费福利：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&amp;amp;mid=2247566213&amp;amp;idx=1&amp;amp;sn=69e814aa3b3e8e988cc209ec942ee791&amp;amp;chksm=fbd671e9cca1f8ff9638e1b4c102e96faeb63db648aab222741b047fe357dcc8a37b9e126e0c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;互联网核心应用算法宝藏书PPT电子版下载！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;互联网核心应用算法宝藏书PPT电子版下载！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1NTMyOTI4Mw==&amp;amp;mid=2247566135&amp;amp;idx=1&amp;amp;sn=9010e14646fbd877ff7da4165e0b2353&amp;amp;chksm=fbd6715bcca1f84d26d9fd178144c3acd465369fe3f5fe923e707790583189315c2dec4dbc36&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;大数据典藏版合集PPT电子书下载！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;大数据典藏版合集PPT电子书下载！&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;活动推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;1776&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1741&quot; data-galleryid=&quot;&quot; data-ratio=&quot;3.0722222222222224&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/lAStFsJ0Pm0N8I0SyMfKANGoTtHU8BN3T3k9wBMt80mI237XrFP6DdINrUKKWOXCfica9q96liaK11MLeFdnKEuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于我们：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DataFun：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;专注于大数据、人工智能技术应用的分享与交流。发起于2017年，在北京、上海、深圳、杭州等城市举办超过100+线下和100+线上沙龙、论坛及峰会，已邀请近1000位专家和学者参与分享。其公众号 DataFunTalk 累计生产原创文章500+，百万+阅读，13万+精准粉丝。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1NTMyOTI4Mw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/zHbzQPKIBPh87SyjsEtoRFs9iaLyPXYh9ls0BcsiaPDnFkg72xgLsvku13ZRYibyq93DgRoCaTaTkbJj7Hia4dvI1w/0?wx_fmt=png&quot; data-nickname=&quot;DataFunTalk&quot; data-alias=&quot;datafuntalk&quot; data-signature=&quot;专注于大数据、人工智能技术应用的分享与交流。致力于成就百万数据科学家。定期组织技术分享直播，并整理大数据、推荐/搜索算法、广告算法、NLP 自然语言处理算法、智能风控、自动驾驶、机器学习/深度学习等技术应用文章。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;🧐&lt;strong&gt;分享、点赞、在看&lt;/strong&gt;，给个&lt;strong&gt;3连击&lt;/strong&gt;呗！&lt;strong&gt;👇&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4fb0c6090492aa028ed9883ae5666ab2</guid>
<title>[推荐] 写出结构优雅代码的4个技巧</title>
<link>https://toutiao.io/k/6cddvzi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;写出结构优雅代码就像成为武林高手一样，需要积累思考勤学苦练。冰冻三尺非一日之寒。成熟的业界套路肯定是没有的，因为&lt;span&gt;代码也有思想流派&lt;/span&gt;。现在是百家齐放的时代。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485626&amp;amp;idx=1&amp;amp;sn=85397fd412b6b204ff0d7fbe82857653&amp;amp;chksm=fafde214cd8a6b027af50392df5c1d598e55b29e7fbbe52a005742f40d5f94da92090b5602c6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;code review&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;code review&lt;/strong&gt;&lt;/a&gt;时，一个不留神就会吵起来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我在网上找了一下资料基本都是《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483674&amp;amp;idx=1&amp;amp;sn=77f06af636c2b25fb182d4ea667bc6c7&amp;amp;chksm=fafdebb4cd8a62a2c298ac51236c3f8a052f7be315834ddb4b6954eb0b0a400ce923a7b20ae8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;代码整洁之道&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;代码整洁之道&lt;/strong&gt;&lt;/a&gt;》、《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247483681&amp;amp;idx=1&amp;amp;sn=338890cb9f25abb05aa35fb7914a7b3b&amp;amp;chksm=fafdeb8fcd8a62998afded59df333fb7fb0f8d9670013d551afbf0bd4dbbe37a45014440fff6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;重构：改善既有代码的设计&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;重构：改善既有代码的设计&lt;/strong&gt;&lt;/a&gt;》和《代码之美》这三本书里的内容。建议还是自己看书。可以在【编程一生】公众号里回复：666  获取我的经典电子藏书，这三本书都在里面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下面有一些我自己的总结，前三个别的书中没有。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;使用切面将业务逻辑与其他方面解耦&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最简洁优雅的代码就是只做一件事的代码。很多与业务无关的逻辑，如日志、事务都可以使用切面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了避免抽象，这里详细介绍怎么用切面打印结构化日志。不感兴趣的可以直接跳过，不影响整篇理解。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构化日志，顾名思义不再是自由格式的日志，而是遵循了一定的结构：每一行日志遵循相同的结构。好处显而易见：简化日志解析，使得日志的后续处理、分析或查询变得方便高效。一般用在&lt;/span&gt;需要集中采集到日志服务器上，用来在监控中显示和做数据分析。数仓领域有数据湖的概念，集中采用可以叫做数据入湖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在分布式环境下，一般都需要结构化日志采集。一旦发生问题，从监控上至少要能定位问题出现在哪台机器上，然后再去机器上查所有日志。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因此，结构化日志一般是方法的开头和结尾都打印，或者只在结尾打印两种方式。因此非常合适用切面处理。问题来了，方法执行结果怎样切面怎么知道呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;具体代码我之前有上传github，《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484045&amp;amp;idx=2&amp;amp;sn=25cf3c0399cf92edbd57e207f18afea3&amp;amp;chksm=fafde823cd8a61354d12e2355829b78b0a84b422ec4d3569bbbff711cb9b1cb3315eafaef9ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;简明日志规范&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;简明日志规范&lt;/strong&gt;&lt;/a&gt;》里也有相应的介绍，这里只说重点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先，在Java等语言的切面中是可以拿到方法的返回结果的，如：&lt;/p&gt;&lt;p&gt;business = pjp.proceed();&lt;/p&gt;&lt;p&gt;business 就是返回结果。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次，代码中可以进行埋点。定义埋点可以使用面向对象的形式，向对象赋值即可。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGj0E4xVdf6Q7X7OiaSjdeqqUPXlc3cpPvp2JKRnUGHRXibJtp4eaGmvYQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是打印日志打印的最后不是字符串吗？可以使用充血模型在日志构造器中用反射定义对象转格式化日志的通用方法：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGVsCYGnXfaxYP4PlicmVDnT0chxRLd2iaibtOWjAKEWONQhHyFia2VnFx5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;整个对象可以使用ThreadLocal保存在线程的生命周期中，切面可以从ThreadLocal中获取数据执行打印。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRlicuxFiapRtj510kLcdRajggGVS328ic5bXnEO0oyYqVJXLHNbO6rWF8GicExYuYpsPYjvK2jWUw3boHA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代码使用时需要特殊赋值的地方直接进行赋值，其他事情不需要关心。效果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7497062279670975&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicuxFiapRtj510kLcdRajggGWibj9ticzEok5pl4KF7O3AQgLlw2LXlZd8l91O5ZP5jia2wKpsIGUpMjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1702&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;完整的代码我择期更新到github上，其实除了最后这个使用的地方，我写的都是通用的，直接拿来用即可。看在女生节的份上，让我犯犯懒，最近先不更新。其实我也不是真的&lt;span&gt;懒&lt;/span&gt;，女生节要到了，有很多活动要推掉。上班时间不处理，周末了总得委婉的回复一下。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;PS：这种活动我都不参加，请各位编辑、运营小姐姐们不要找我了哈，咱不蹭热度~~&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;写有风格的代码&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484645&amp;amp;idx=1&amp;amp;sn=f86183a5a248a03adf8d8da3452b79fe&amp;amp;chksm=fafdee4bcd8a675d2335942673334f188e7826c39fe24314f91a5151d78c1554527ca612beb8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;代码荣辱观-以运用风格为荣，以随意编码为耻&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;代码荣辱观-以运用风格为荣，以随意编码为耻&lt;/strong&gt;&lt;/a&gt;》中我有详尽的说明和代码讲解，文章风格与代码风格相得益彰，强烈推荐大家再读一遍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;巧用语法糖&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;一个巧字，暗示着需要深入的理解。只有学的深，才能用的巧。在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485916&amp;amp;idx=1&amp;amp;sn=84085fd0b7ecc1889a55a036186cbb8a&amp;amp;chksm=fafde372cd8a6a640826bc67df523a6d87b9aba19c164ebffab942e336ca224b311233f53228&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深入理解函数式编程&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;深入理解函数式编程&lt;/strong&gt;&lt;/a&gt;》中我有详尽的说明和代码讲解，这也是自己满意的文章之一，请大家参阅。&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;《代码整洁之道》中提炼的技巧&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;书中详细介绍，这里做总结，有兴趣可以自己看书。可在【编程一生】公众号中留言：代码整洁之道。就可以获取完整电子书。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;唯一真正好的注释是你想办法不去写的注释&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要有循规式注释，比如setter/getter注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要添加日志式注释&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;span&gt;，比如修改时间等信息（git可以做的事情）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;注释一定是表达代码之外的东西，代码可以包含的内容，注释中一定不要出现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果有必要注释，请注释意图（why），而不要去注释实现（how)，大家都会看代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;适当添加警示注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;命名&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;异常与错误&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;并发&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分离并发相关代码与其它代码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;严格限制对可能被共享的数据的访问&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;避免使用一个共享对象的多个同步方法&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保持同步区域微小，尽可能少设计临界区&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;单元测试&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要怕单元测试的方法名字太长或者繁琐，测试函数的名称就像注释&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要追求太高的测试覆盖率，测试代码前面90%通常比后面10%花的时间少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用最简单的并且能够完整运用代码的测试输入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;给测试函数取一个完整性的描述性名字，比如  Test _&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;测试代码与生产代码一样重要&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果测试代码不能保证整洁，你就会很快失去他们&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个测试一个断言，单个测试中断言数量应该最小化也就是一个断言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;FIRST原则&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;代码结构&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应该把解释条件意图的函数抽离出来，尽可能将条件表达为肯定形式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要继承常量，比如接口中定义常量，不要使用继承欺骗编程语言的作用范围规则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模块不应了解它所操作对象的内部情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DTO（Data Transfer Objects）是一个只有公共变量&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;span&gt;没有函数的类&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对象暴露行为，隐藏数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要使用“尤达表示法” 如 if(null == obj)，现代编译器对if(obj = null)这样的代码会给出警告&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一般情况使用if else，简单语句使用三目运算符&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通常来讲提早返回可以减少嵌套并让代码整洁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;设计&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该足够短小&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该满足单一权责原则（SRP），类和模块只有一个修改理由&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该只有少量的实体变量&lt;/span&gt;&lt;svg viewbox=&quot;0 0 15 15&quot;&gt;&lt;path d=&quot;M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z&quot; fill=&quot;currentColor&quot;/&gt;&lt;/svg&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类应该遵循依赖倒置原则 DIP（Dependency Inversion Principle），类应该依赖于抽象而不是依赖于具体细节&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;类中的方法越少越好，函数知道的变量越少越好，类拥有的实体变量越少越好&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;简单设计&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;运行所有测试&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不可重复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;表达了程序员的意图&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;尽可能减少类和方法的数量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以上规则按重要程度排列&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;参考：&lt;br/&gt;https://www.zhihu.com/question/28492982/answer/448474779&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486113&amp;amp;idx=1&amp;amp;sn=f3623b2cf257aa37ea83768fd4325762&amp;amp;chksm=fafde00fcd8a691928c66f7e484ab2b7f6fa7797dc32833a7f777bb4ebde58c010750f13c118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PDCA方法论&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;PDCA方法论&lt;/strong&gt;&lt;/a&gt;，检查自己是否错过更新：每周三晚上8点左右，我都会更新文章，如果你没有收到，记得点开【编程一生】公众号找一下(*^▽^*)&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6fc6d74465c638b2eabc8e778bc7352f</guid>
<title>[推荐] 20多个好用的 Vue 组件库，请查收！</title>
<link>https://toutiao.io/k/sskayyw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwNDMyMTg4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/wIDSOebZK4NvWoUN1gSpNiaxwF4VLvroSV4fibB1a5iaLEaR23sVIW9ickg4StvsXlxnPpslKAltA6mvJUhkT2PsaA/0?wx_fmt=png&quot; data-nickname=&quot;JavaScript 每日一练&quot; data-alias=&quot;&quot; data-signature=&quot;每天一道JavaScript 实战题，让大家平时多多积累实用的知识，提高开发效率，才有更多的时间摸鱼。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在本文中，我们将探讨一些最常见的vue js组件。你可以收藏一波。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Tables-2&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3QxZy8rk0mcjPYjKbeghChdy9CF3xPXsykibOOQuWHbzZR160x6UWSng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/matfish2/vue-tables-2&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Tables 2旨在为开发者提供一个功能齐全的工具集，以便用 Vue 创建漂亮而实用的数据表格。数百个商业软件应用正在使用它。此外，Vue Tables 2正在不断成长、改进，同时也在获得新的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;可选行及粘性头部&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虚拟分页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;下载客户组件数据的CSV&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有数据层支持的多级分组&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Tailwind 主题&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Handsontable&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7144808743169399&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3XCTSgjDOCe4xMCY1cHTuTGr8YVibdp3ibkAd3muLGQe1gAXhAOyxhc6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/handsontable/handsontable/tree/master/wrappers/vue&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;handsontable是一款页面端的表格交互插件，可以通过它加载显示表格内容，能够支持合并项、统计、行列拖动等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，支持对加载后的表格页面的处理：添加/删除行/列，合并单元格等操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，它还适用于React、Angular和Vue。Handsontable 是一个JavaScript组件，它将数据网格功能与电子表格的用户体验相结合。此外，它还提供数据绑定、数据验证、过滤、排序和CRUD操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;多列排序&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;非连续选择&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;过滤数据和验证数据&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;导出文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有条件的格式化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;合并单元格&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;隐藏行/列&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上下文菜单和注释&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Ag Grid Vue&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3vIdfOT8YIibdspDQYJbWAAFo2bJMLIkHKXoWclsiahMsjO6CDC9Z2gUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/ag-grid/ag-grid&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ag-Grid 是一个基于Vue.js的数据表格组件。其中，“ag” 表示 “agnostic”。内部 ag-Grid引擎是在TypeScript中实现的，零依赖关系。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ag-Grid通过包装器组件支持Vue，你可以在应用程序中，就像其他任何Vue组件一样使用ag-Grid。它支持通过属性绑定传递配置，通过事件绑定来处理事件。你甚至可以使用Vue组件来自定义网格UI和单元格内容/行为。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Easytable&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP36ufC9BugW3hCeEpXLS9A7IoI5XibvFnus2LQS03YM1HJVY6xEdWxRIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/huangshuwei/vue-easytable&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;vue-easytable是我遇到过的最强大的Vue表格组件之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;表格组件具有许多内置功能，比如说，单元格省略号、固定/灵活的列大小调整、自定义过滤等等。它有几个特点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;国际化&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主题定制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;内置主题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;虚拟滚动&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;列固定&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表头固定&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;表头分组&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Good Table&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3pXvEG9L7B4MXUyqorbWvziavbTXpcJxUHTSPDyfqUibpLFYWgGibyohxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/xaksis/vue-good-table&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue-Good-Table是一个基于Vue.js的数据表组件，简单、干净，具有排序、列过滤、分页等更多基本功能。它有几个特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;表搜索和排序&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;列过滤和分页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复选框表格&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;行分组&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;行样式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;行多选&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Toastification&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3pAibBsPuM0SxmrAYyHtW9gux1WKcdicDXpft6uMdsZiaIKHjCianZlqmYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/Maronato/vue-toastification&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它提供轻巧、简单和漂亮的吐司提示。它有内置的Nuxt支持。而且，它还支持新的Composition API和Vue 3。我们还可以J使用SX来开发自定义组件，提供更加灵活的功能。另外，通用注册允许它在任何应用程序内使用，甚至是React。它有几点特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;完全用Typescript编写，支持所有类型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持RTL&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;定制一切&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滑动关闭&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用onClose、onClick和onMounted钩子创建自定义体验&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;以编程方式删除和更新吐司&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Vue Toasted&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/shakee93/vue-toasted&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3aY8zo2sSYhpdib60uwdHeRmVJ5LEP4tVmhC6O21NHGUWwF24gq9E4ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Toasted是 Vue 最好的toast(提示)插件之一。它被Vue，Laravel，NuxtJS 等许多组织所信任，它响应性强，兼容性好，使用方便，吸引人，有丰富的功能、图标、动作等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Notifications&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3TY0j4iazLaK0f5BNCM15AWpgBJ0UlCHPYGhLw3UyB0AuCnh1CtUwlvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/se-panfilov/vue-notifications&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Notifications是一个与库无关的通知组件，非阻塞。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;VueNotiments将您的应用程序与通知UI库连接起来。支持miniToastr、VueToasted、VueEasyToast、toastr、iziToast、Noty、swal。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Awesome Notifications&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3Qo3gFrz9dzQhFxz4EOrOmXWXLvmJQY7zVh7A73XuJibBv2iawDicFaHWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://f3oall.github.io/awesome-notifications/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Awesome Notifications是一个轻量级的，完全可自定义的JavaScrip Vue Awesome Notifications，它是Awesome Notifications库的Vue.js版本。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Wait&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3rsGRAlj8A8Ohhy8eo9CYgZTr0oS6q47cRGKGNCjG14rhYzJGibpCn5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/f/vue-wait&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Wait 这是一个用于VUE、Vuex和Nuxt应用的复杂装载器和进度管理组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Wait帮助管理页面上的多个加载状态，状态之间没有任何冲突。基于一个非常简单的想法：通过管理具有多个加载状态的数组(或者Vuex存储)，让内置加载程序组件侦听注册的加载程序，并立即进入加载状态。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Content Loader&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/egoist/vue-content-loader&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3gc8qgm794eVTNhSh1m4FbfVic1gtWdkicrsIdaywNUcMHVDSKBnL5RPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Content Loader是一个基于Vue.js的SVG占位符加载，可自定义的SVG组件，用于创建占位符加载，例如Facebook加载卡。Vue Content Loader是react-content-loader的Vue实现。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;完全可定制：你可以改变颜色，速度和大小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建自己的加载：使用在线工具轻松创建你的自定义加载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你现在就可以使用它：已经有很多预设了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;性能&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Epic Spinners&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3LzEyJF0j9Yz80zwebMfxKRTCaM4rFFvib86QkFBF3BZruFm6l4nbFTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://epic-spinners.epicmax.co/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EpicSpinners是一组易于使用的纯css打造的网页Loading效果，并且同时整合了Vue组件可以方便的在Vue项目中进行使用，由于是纯css打造，你可以在任意网页项目中自行整合并使用！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Vue Radial Progress&lt;/h4&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3FiaflM8iaULnGDwxJo52ghSCuv7IZy4Q9m4jTJVjbicwSz5blHSO3o2IA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/wyzant-dev/vue-radial-progress&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Radial Progress 这是一个径向进度条效果的加载器组件，使用svg和javascript绘制带有渐变径向进度条效果的加载器，可以用作加载、进度提示。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;ICONS&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Feather Icons&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/egoist/vue-feather-icons&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3gyO4frJmOgmeXRhykmVfpSp0awhoxlWZDjts4eqiaOEIJpvX5AyOzlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Feather 是一套面向设计师和开发者的开源图标库，是一个简单漂亮的开源图标库。每个图标都设计在一个24×24的网格上，强调简单，一致性和易读性。很多大厂出品的前端框架都内置了这款可以免费商用的图标。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;特点&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;每一枚图标都是按照统一标准进行设计，具有完美像素对齐；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计风格一致，完胜那些拼凑混搭的图标库；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;覆盖多种开发场景的支持，对开发者非常友好。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Vue Awesome&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/Justineo/vue-awesome&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP35sYlJxBGyaoRRqJlrYSrWhcczMZA2sc3P2x5CJo04GPYBiaV3TUO9MQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Font Awesome是一套流行的图标字体库，我们在实际开发的过程中会经常遇到需要使用图标的场景，对于一些常用的图标，不用设计师，我们可以直接在Font Awesome中找到并且使用。个人感觉Font Awesome的图标还是很齐全的，绝大多数的图标它都包含了，而且支持各种框架。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Material Design Icons&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/robcresswell/vue-material-design-icons&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个作为单文件组件的SVG Material Design图标集合。此外，这个库是一个Vue单文件组件的集合，用于渲染Material Design图标。此外，它还包括一些CSS，有助于使图标的缩放更容易一些。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Charts&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Apexcharts&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/apexcharts/vue-apexcharts&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3Hzo59HiarPic5yo6Z9ARJyAWicnCvkNxzic1UshX1ImlZUgGaWxBuvXGbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Apexcharts是一个现代的JavaScript图表库/可通过简单的API构建交互式图表和可视化。Vue Apexcharts是ApexCharts的Vue.js组件。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Echarts&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/Justineo/vue-echarts&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3col0KxPQrQic2J6jnHZOJgBsLc7eOH4XOMiaoYgE0ELahkm3lkcx795Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;vue-echarts是基于echarts封装实现的一个组件库，直接按照正常的组件引用方式，安装引用即可，具体的安装和引用读者可以直接阅读vue-echarts技术文档。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Chartjs&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/apertureless/vue-chartjs&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3QhfeTMLA46cLyIfjanLiacibX7GuQEpYsoUiaKhPgpCoGibyw7fqzmiaTow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;vue-chartjs 是一个 Vue 对于 Chart.js 的封装，让用户可以在Vue中轻松使用Chart.js，很简单的创建可复用的图表组件，非常适合需要简单的图表并尽可能快地运行的人。vue-chartjs抽象了基本逻辑，同时也暴露了Chart.js对象，让用户获得最大的灵活性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;V-Charts&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/ElemeFE/v-charts&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP35EMJy6WABpVDSCcy5yAYrqkDI3lVMAy4RxyTb2GKGw0wnAloibc9ndg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;V-Charts 是基于 Vue2.0 和 Echarts 封装的图标组件，只需要统一提供一种对前后端都友好的数据格式设置简单的配置项，就可以生成常见的图表。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;时间&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Timer Hook&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/riderx/vue-timer-hook&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP3PQ2vGF2DLsMCVj8QIXsjVf0XF7iasInlTDpltDoJOyew9RY4DWs4RTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue3 计时器模块的灵感来自 react-timer-hook。此外，它是一个自定义的钩子，用来处理vue 3 组件中的定时器、秒表和时间逻辑/状态。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Vue Horizontal Timeline:&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址：https://github.com/guastallaigor/vue-horizontal-timeline&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5614754098360656&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/LDPLltmNy570PPS4TCaan3wbNfWlvuP32SrcBUaXXGBycSzpFkd1doJn9MCTwfEcwVJn9oDILEkBwibzCjND7fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Vue Horizontal Timeline 是一个用Vue.js制作的简单的水平时间线组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：lindelof  译者：前端小智 来源:medium &lt;/span&gt;&lt;span&gt;原文：&lt;/span&gt;&lt;span&gt;https://medium.com/js-dojo/20-usefulue-js-components-2022-3bf9fbe5b556&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>