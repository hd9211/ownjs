<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7903e7dfcd35d5aca0eb87b12c1eab23</guid>
<title>领导看了我写的关闭超时订单，让我出门左转！</title>
<link>https://toutiao.io/k/mlmijzl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哈喽大家好，我是阿Q！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前几天领导突然宣布几年前停用的电商项目又重新启动了，带着复杂的心情仔细赏阅“儿时”的代码，心中的酸楚只有自己能够体会。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这不，昨天又被领导叫进了“小黑屋”，让我把代码重构下进行升级。看到这么“可爱”的代码，心中一万只“xx马”疾驰而过。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让我最深恶痛觉的就是里边竟然用&lt;strong&gt;定时任务&lt;/strong&gt;实现了“关闭超时订单”的功能，现在想来，哭笑不得。我们先分析一波为什么大家都在抵制用定时任务来实现该功能。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定时任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关闭超时订单是在创建订单之后的一段时间内未完成支付而关闭订单的操作，该功能一般要求每笔订单的超时时间是&lt;strong&gt;一致&lt;/strong&gt;的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果我们使用定时任务来进行该操作，很难把握定时任务轮询的时间间隔：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间间隔足够小，在误差允许的范围内可以达到我们说的时间一致性问题，但是频繁扫描数据库，执行定时任务，会造成网络IO和磁盘IO的消耗，对实时交易造成一定的冲击；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间间隔比较大，由于每个订单创建的时间不一致，所以上边的一致性要求很难达到，举例如下：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5108538350217077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCEiaVOqRbzpz1GcibY6zzGMwdOkAdMDWiamqc2kAs8VmPuyec4ylKf9Ulkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;691&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设30分钟订单超时自动关闭，定时任务的执行间隔时间为30分钟：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们在第5分钟进行下单操作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第30分钟时，定时任务执行一次，但是我们的订单未满足条件，不执行；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第35分钟时，订单达到关闭条件，但是定时任务未执行，所以不执行；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第60分钟时，开始执行我们的订单关闭操作，而此时，误差达到25分钟。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经此种种，我们需要舍弃该方式。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;延时队列&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了满足领导的需求，我便将手伸向了消息队列：&lt;/span&gt;&lt;code&gt;&lt;span&gt;RabbitMQ&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。尽管它本身并没有提供延时队列的功能，但是我们可以利用它的存活时间和死信交换机的特性来间接实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先我们先来简单介绍下什么是存活时间？什么是死信交换机？&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;存活时间&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;存活时间的全拼是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Time To Live&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，简称 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TTL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。它既支持对消息本身进行设置（延迟队列的关键），又支持对队列进行设置（该队列中所有消息存在相同的过期时间）。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对消息本身进行设置：即使消息过期，也不会马上从队列中抹去，因为每条消息是否过期是在即将投递到消费者之前判定的；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对队列进行设置：一旦消息过期，就会从队列中抹去；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果同时使用这两种方法，那么以过期时间&lt;strong&gt;小&lt;/strong&gt;的那个数值为准。当消息达到过期时间还没有被消费，那么该消息就“死了”，我们把它称为 &lt;strong&gt;死信&lt;/strong&gt; 消息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消息变为死信的条件：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息被拒绝（&lt;/span&gt;&lt;code&gt;&lt;span&gt;basic.reject/basic.nack&lt;/span&gt;&lt;/code&gt;&lt;span&gt;），并且&lt;/span&gt;&lt;code&gt;&lt;span&gt;requeue=false&lt;/span&gt;&lt;/code&gt;&lt;span&gt;;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的过期时间到期了；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列达到最大长度；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;队列设置注意事项&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列中该属性的设置要在第一次声明队列的时候设置才有效，如果队列一开始已存在且没有这个属性，则要删掉队列再重新声明才可以；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ttl&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只能被设置为某个固定的值，一旦设置后则不能更改，否则会抛出异常；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;死信交换机&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;死信交换机全拼&lt;/span&gt;&lt;code&gt;&lt;span&gt;Dead-Letter-Exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，简称&lt;/span&gt;&lt;code&gt;&lt;span&gt;DLX&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当消息在一个队列中变成死信之后，如果这个消息所在的队列设置了&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;参数，那么它会被发送到&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;对应值的交换机上，这个交换机就称之为死信交换机，与这个死信交换器绑定的队列就是死信队列。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：出现死信之后将死信重新发送到指定交换机；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：出现死信之后将死信重新按照指定的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;发送，如果不设置默认使用消息本身的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;死信队列与普通队列的区别就是它的&lt;/span&gt;&lt;code&gt;&lt;span&gt;RoutingKey&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;Exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;需要作为参数，绑定到正常的队列上。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实战教学&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先来张图感受下我们的整体思路&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.374845869297164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCE0loXeQPC28TnUrUbzsuDsw8V3KgiarRn6JHic9U61mOu0XnmrkiajzK9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;811&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生产者发送带有 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ttl&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的消息放入交换机路由到延时队列中；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在延时队列中绑定死信交换机与死信转发的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等延时队列中的消息达到延时时间之后变成死信转发到死信交换机并路由到死信队列中；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后供消费者消费。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们在&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MDg2NjEzNA==&amp;amp;mid=2247488055&amp;amp;idx=1&amp;amp;sn=6cc16652a669318a020ca1a8c474192a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;上文&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的基础上进行代码实现：&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;配置类&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayQueueRabbitConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_QUEUE = &lt;span&gt;&quot;queue.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_EXCHANGE = &lt;span&gt;&quot;exchange.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_ROUTING_KEY = &lt;span&gt;&quot;routingkey.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信队列与死信交换机绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_QUEUE = &lt;span&gt;&quot;queue.order&quot;&lt;/span&gt;;&lt;span&gt;//订单的延时队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_EXCHANGE = &lt;span&gt;&quot;exchange.order&quot;&lt;/span&gt;;&lt;span&gt;//订单交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_ROUTING_KEY = &lt;span&gt;&quot;routingkey.order&quot;&lt;/span&gt;;&lt;span&gt;//延时队列与订单交换机绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;/**&lt;br/&gt;     * 定义死信队列&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;dlxQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(DLX_QUEUE,&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义死信交换机&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; DirectExchange &lt;span&gt;dlxExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DirectExchange(DLX_EXCHANGE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 死信队列和死信交换机绑定&lt;br/&gt;     * 设置路由键：routingkey.dlx&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Binding &lt;span&gt;bindingDLX&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(dlxQueue()).to(dlxExchange()).with(DLX_ROUTING_KEY);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 订单延时队列&lt;br/&gt;     * 设置队列里的死信转发到的DLX名称&lt;br/&gt;     * 设置死信在转发时携带的 routing-key 名称&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;orderQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; params = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        params.put(&lt;span&gt;&quot;x-dead-letter-exchange&quot;&lt;/span&gt;, DLX_EXCHANGE);&lt;br/&gt;        params.put(&lt;span&gt;&quot;x-dead-letter-routing-key&quot;&lt;/span&gt;, DLX_ROUTING_KEY);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(ORDER_QUEUE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, params);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 订单交换机&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; DirectExchange &lt;span&gt;orderExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DirectExchange(ORDER_EXCHANGE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 把订单队列和订单交换机绑定在一起&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Binding &lt;span&gt;orderBinding&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(orderQueue()).to(orderExchange()).with(ORDER_ROUTING_KEY);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;发送消息&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/order&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OrderSendMessageController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RabbitTemplate rabbitTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendMessage&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        String delayTime = &lt;span&gt;&quot;10000&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;//将消息携带路由键值&lt;/span&gt;&lt;br/&gt;        rabbitTemplate.convertAndSend(DelayQueueRabbitConfig.ORDER_EXCHANGE, DelayQueueRabbitConfig.ORDER_ROUTING_KEY,&lt;br/&gt;                &lt;span&gt;&quot;发送消息！&quot;&lt;/span&gt;,message-&amp;gt;{&lt;br/&gt;            message.getMessageProperties().setExpiration(delayTime);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;        });&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;消费消息&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RabbitListener&lt;/span&gt;(queues = DelayQueueRabbitConfig.DLX_QUEUE)&lt;span&gt;//监听队列名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OrderMQReciever&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RabbitHandler&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;OrderMQReciever接收到的消息是：&quot;&lt;/span&gt;+ message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;测试&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过调用接口，发现10秒之后才会消费消息&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5983066792097836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCEG8vmeygPQIP7Rib8hn1icMs8GmyzFcicTkxV2MtdW5RBMfJyl5eR71IGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1063&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;问题升级&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于开发环境和测试环境使用的是同一个交换机和队列，所以发送的延时时间都是30分钟。但是为了在测试环境让测试同学方便测试，故手动将测试环境的时间改为了1分钟。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;问题复现&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着问题就来了：延时时间为1分钟的消息并没有立即被消费，而是等30分钟的消息被消费完之后才被消费了。至于原因，我们下边再分析，先用代码来给大家复现下该问题。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendManyMessage&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendManyMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡10秒&quot;&lt;/span&gt;,&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡2秒&quot;&lt;/span&gt;,&lt;span&gt;2000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡5秒&quot;&lt;/span&gt;,&lt;span&gt;5000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(String msg, String delayTime)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; rabbitTemplate.convertAndSend(DelayQueueRabbitConfig.ORDER_EXCHANGE, &lt;br/&gt;                                  DelayQueueRabbitConfig.ORDER_ROUTING_KEY,&lt;br/&gt;                                  msg,message-&amp;gt;{&lt;br/&gt;                                      message.getMessageProperties().setExpiration(delayTime);&lt;br/&gt;                                      &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;                                  });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行结果如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;OrderMQReciever接收到的消息是：延迟消息睡10秒&lt;br/&gt;OrderMQReciever接收到的消息是：延迟消息睡2秒&lt;br/&gt;OrderMQReciever接收到的消息是：延迟消息睡5秒&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因就是延时队列也满足队列先进先出的特征，当10秒的消息未出队列时，后边的消息不能顺利出队，造成后边的消息阻塞了，未能达到精准延时。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;问题解决&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们可以利用&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-delay-message&lt;/span&gt;&lt;/code&gt;&lt;span&gt;插件来解决该问题&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;消息的延迟范围是 Delay &amp;gt; 0, Delay =&amp;lt; ?ERL_MAX_T（在 Erlang 中可以被设置的范围为 (2^32)-1 毫秒）&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36414253897550114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCENGwdYXIvwc0Kvm0vibuTsFyKVzfIEyj1WcChtIDX8XYo8773s0KF5Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生产者发送消息到交换机时，并不会立即进入，而是先将消息持久化到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Mnesia&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（一个分布式数据库管理系统）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;插件将会尝试确认消息是否过期；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果消息过期，消息会通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;x-delayed-type&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型标记的交换机投递至目标队列，供消费者消费；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;实践&lt;/h4&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;官网下载：https://www.rabbitmq.com/community-plugins.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我这边使用的是&lt;/span&gt;&lt;code&gt;&lt;span&gt;v3.8.0.ez&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，将文件下载下来放到服务器的&lt;/span&gt;&lt;code&gt;&lt;span&gt;/usr/local/soft/rabbitmq_server-3.7.14/plugins&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 路径下，执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;rabbitmq-plugins enable rabbitmq_delayed_message_exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;命令即可。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26819541375872386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCETZBEmlZiatJXPu4JGnRsb3Vnm0c6yckujsjVMvcxbAv5xnsMQWic8kgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1003&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7257257257257257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCE9Uu2Pr4GicwibP0bRibP3PiaAb9FPu9Fk58icEcsSEkZOCw9hRUa2Y2uGlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;出现如图所示，代表安装成功。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;配置类&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;XDelayedMessageConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DIRECT_QUEUE = &lt;span&gt;&quot;queue.direct&quot;&lt;/span&gt;;&lt;span&gt;//队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DELAYED_EXCHANGE = &lt;span&gt;&quot;exchange.delayed&quot;&lt;/span&gt;;&lt;span&gt;//延迟交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ROUTING_KEY = &lt;span&gt;&quot;routingkey.bind&quot;&lt;/span&gt;;&lt;span&gt;//绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义队列&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;directQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(DIRECT_QUEUE,&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义延迟交换机&lt;br/&gt;     * args:根据该参数进行灵活路由，设置为“direct”，意味着该插件具有与直连交换机具有相同的路由行为，&lt;br/&gt;     * 如果想要不同的路由行为，可以更换现有的交换类型如：“topic”&lt;br/&gt;     * 交换机类型为 x-delayed-message&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CustomExchange &lt;span&gt;delayedExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;();&lt;br/&gt;        args.put(&lt;span&gt;&quot;x-delayed-type&quot;&lt;/span&gt;, &lt;span&gt;&quot;direct&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CustomExchange(DELAYED_EXCHANGE, &lt;span&gt;&quot;x-delayed-message&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, args);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 队列和延迟交换机绑定&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Binding &lt;span&gt;orderBinding&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(directQueue()).to(delayedExchange()).with(ROUTING_KEY).noargs();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;发送消息&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/delayed&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayedSendMessageController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RabbitTemplate rabbitTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendManyMessage&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendManyMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡10秒&quot;&lt;/span&gt;,&lt;span&gt;10000&lt;/span&gt;);&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡2秒&quot;&lt;/span&gt;,&lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡5秒&quot;&lt;/span&gt;,&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(String msg, Integer delayTime)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//将消息携带路由键值&lt;/span&gt;&lt;br/&gt;        rabbitTemplate.convertAndSend(&lt;br/&gt;                XDelayedMessageConfig.DELAYED_EXCHANGE,&lt;br/&gt;                XDelayedMessageConfig.ROUTING_KEY,&lt;br/&gt;                msg,&lt;br/&gt;                message-&amp;gt;{&lt;br/&gt;                    message.getMessageProperties().setDelay(delayTime);&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;                });&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;消费消息&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RabbitListener&lt;/span&gt;(queues = XDelayedMessageConfig.DIRECT_QUEUE)&lt;span&gt;//监听队列名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayedMQReciever&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RabbitHandler&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;DelayedMQReciever接收到的消息是：&quot;&lt;/span&gt;+ message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;DelayedMQReciever接收到的消息是：延迟消息睡2秒&lt;br/&gt;DelayedMQReciever接收到的消息是：延迟消息睡5秒&lt;br/&gt;DelayedMQReciever接收到的消息是：延迟消息睡10秒&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样我们的问题就顺利解决了。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;局限性&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;延迟的消息存储在一个&lt;/span&gt;&lt;code&gt;&lt;span&gt;Mnesia&lt;/span&gt;&lt;/code&gt;&lt;span&gt;表中，当前节点上只有一个磁盘副本，它们将在节点重启后存活。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然触发计划交付的计时器不会持久化，但它将在节点启动时的插件激活期间重新初始化。显然，集群中只有一个预定消息的副本意味着丢失该节点或禁用其上的插件将丢失驻留在该节点上的消息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该插件的当前设计并不适合延迟消息数量较多的场景（如数万条或数百万条），另外该插件的一个可变性来源是依赖于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Erlang&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 计时器，在系统中使用了一定数量的长时间计时器之后，它们开始争用调度程序资源，并且时间漂移不断累积。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>18fccfd84b3a9c462e8757bca00acd84</guid>
<title>通用接口设计准则</title>
<link>https://toutiao.io/k/sk2qg0s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-source-line=&quot;1&quot;&gt;&lt;span&gt;接口设计作为软件设计的一部分，那些通用的软件设计准则对它同样适用。&lt;/span&gt;&lt;/p&gt;&lt;ol data-source-line=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开闭原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;5&quot;&gt;&lt;span&gt;一个软件实体应当对扩展开放，对修改关闭，即使这个实体可以在不被修改的前提下被扩展。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;7&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;单一职责原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;9&quot;&gt;&lt;span&gt;一个实体应该只有一个引起它变化的原因。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; data-source-line=&quot;11&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;里氏替换原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;13&quot;&gt;&lt;span&gt;一个软件实体如果使用的是一个基类的话，那么一定适用于其子类，但反过来不成立。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; data-source-line=&quot;15&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;依赖倒置原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;17&quot;&gt;&lt;span&gt;抽象不应该依赖细节，细节应该依赖抽象。高层模块不应该依赖低层模块，两者都应该依赖其抽象。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;5&quot; data-source-line=&quot;19&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口隔离原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;21&quot;&gt;&lt;p&gt;&lt;span&gt;这里的接口是指用interface关键字定义的接口。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;23&quot;&gt;&lt;span&gt;建立单一接口，不要建立臃肿庞大的接口接口，尽量细化，同时接口中的方法尽量少。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;6&quot; data-source-line=&quot;25&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;迪米特法则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;27&quot;&gt;&lt;span&gt;一个对象应该对其他对象保持最少的了解，它只需要知道如何调用其他对象的公用方法就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;&lt;span&gt;除了这些通用的设计准则外，接口设计也有一些具有接口特色的设计准则，比如：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;39&quot;&gt;&lt;span&gt;这正是：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;41&quot;&gt;&lt;strong&gt;&lt;span&gt;接口设计要准则，六大准则需琢磨&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-source-line=&quot;43&quot;&gt;&lt;strong&gt;&lt;span&gt;考虑接口独特性，细分优化不落窠&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;48&quot;&gt;&lt;span&gt;参考文献：&lt;/span&gt;&lt;/p&gt;&lt;ol data-source-line=&quot;50&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软件质量保证和管理，作者：朱少民，出版社：清华大学出版社&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口设计的16个原则 - Accident - 博客园&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;h6 data-source-line=&quot;58&quot;&gt;&lt;span&gt;作者简介：王小双，长期从事GJB5000推广、实施、评价、改进的工作，创建《软件工程之思》微信公众号，一直在《软件工程之思》分享GJB5000、CMMI、软件工程的知识和感悟。现致力于GJB5000咨询以及软件过程改进、软件工程能力提升的研究工作。&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                  &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                    &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                  &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                  &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                &lt;/div&gt;
                                              
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e1dbfab22ce59c96e1dbef9975a20675</guid>
<title>如何设计一个牛逼的消息队列？</title>
<link>https://toutiao.io/k/tyty975</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;点击上方蓝字“设为星标”&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU5MzY4NTMwOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPZJL75J8t2KRIBkH377m1xmSasTiaZkbH1ALNn1tSgbMVyY7KnTpGO9A0Bnzh8IOYhmckmib9U5SgpQ/0?wx_fmt=png&quot; data-nickname=&quot;架构摆渡人&quot; data-alias=&quot;jiagoubaiduren&quot; data-signature=&quot;架构摆渡人，助你通往架构师方向的领路人。本号会定期分享架构相关的文章，专注于架构方向，关注我们，下一个架构师就是你。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;init&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，我是【架构摆渡人】，一只十年的程序猿。这是消息队列的第一篇文章，这个系列会给大家分享很多在实际工作中有用的经验，如果有收获，还请分享给更多的朋友。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过前面文章的学习，我们对消息队列的作用以及目前主流的一些消息队列中间件有了更深刻的了解。但是那些优秀的中间件都是别人写出来的，如果你在面试的时候，面试官问你：&lt;strong ql-global=&quot;true&quot;&gt;如果让你去设计一个消息队列，你打算怎么做？&lt;/strong&gt;如果你对消息队列了解的不彻底，那么很有可能被这个问题问懵掉，最后支支吾吾的说不知道。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;W4o6&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;服务端&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们从日常使用消息队列来入手，看设计一个消息队列到底要有哪些关键的点。当你要用消息队列的时候首先肯定是下载部署包，然后部署在服务器上。部署的这个程序我们就理解它是消息队列的服务端程序。在其他消息队列里面都有一个固定的名称：&lt;strong ql-global=&quot;true&quot;&gt;Broker&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p line=&quot;faJw&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么为什么需要Broker呢？&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p line=&quot;fOaR&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你的消息要发送出去，必然得有接收方，这个接收方就是Broker。Broker收到消息后不是直接转给消费方，而是要先落盘，存储起来。这样才能保证消息不丢失，不影响业务。同时还有一些其他的业务操作，比如消息的查询。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;P0o5&quot; ql-global=&quot;true&quot;&gt; &lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;存储&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p line=&quot;fOaR&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然说到存储，我们做业务的时候，都会用三方存储，也就是数据库，比如Mysql。但是MQ的存储，基本上都不会用三方存储，而是直接采用写磁盘的方式，也就是自己要设计要存储格式，自己写，自己解析等等一系列操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，也不是说不能用三方存储去实现，下篇文章我们再给大家讲讲如何用数据库做消息队列的存储。用数据库做存储其实也就是利用已有的实现来解决复杂度，涉及到底层存储这块，而且还要考虑高性能，其实对技术要求很高的。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;PCbI&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43423423423423424&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRBkhnhWS3uQlxB6SgR4CsBWO6ItpYHbCVAmIhkJ8yIEWD2mFl13xMNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像RocketMQ中的存储就涉及到CommitLog，ConsumeQueue，IndexFile等概念。最重要的是磁盘操作我们都知道很慢，而我们经常用的Mysql为了提高性能也是有一套很复杂的设计，比如redo log，buffer pool等，所以如果直接用数据库做存储，是不是相当于站在巨人的肩上去摘果实呢！&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;SiYP&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8792792792792793&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRwicuCI6yrgY3TQMX76YNTHL5Q68u4pYaGzLZdxyxz1MGD4Kftwlia1VQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gKCr&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主从&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们设计了一个Broker，使用过程中万一这个Broker挂掉了怎么办？这里是不是得考虑下高可用性，所以Broker还需要有主从的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主节点的数据会同步给从节点，主节点出问题后，从节点可以顶上来提供服务，同时从节点也可以提供读的操作，为主节点减轻压力。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;avpt&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;TYr3&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.564638783269962&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaR2rPRpCR4IylN8Ywmib2q4h6uibI3Z4sc6VVyqH3792QT54BhcibKkn5VA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;boJ4&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分片&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个Broker是部署在某一台服务器上面，这个服务的磁盘存储空间是有限制的，不可能无限扩容。所以当消息量很大的时候，如果只是一直往机器的本地磁盘写数据，最终会写不进去的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在设计的时候还要考虑数据分片的场景，一个Topic的数据可以分成很多份进行存储，分别存储在不同的Broker上，这样当磁盘不够的时候，可以通过增加Broker的节点来扩容。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gJkd&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26463963963963966&quot; data-type=&quot;png&quot; data-w=&quot;1776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRTmbql9asUjoG5fo7qQ8ibXEEdXVucTRG8SH7D4pBNkj5BwNPKH4RCuQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;DWtB&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;那么问题来了，客户端写入的时候怎么知道这个Topic有哪些分片的存储信息，怎么知道有哪些Broker是在线的呢？这就要引入另一个设计：注册中心，在RocketMq中叫NameServer。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Xfne&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;注册中心&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NameServer叫注册中心或者路由中心都可以，本质上都一样。Broker启动的时候需要将自身的信息告诉NameServer，同时也要保持一个心跳检查，这样NameServer才能知道Broker当前是否处于正常状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NameServer也要支持水平扩展，这样才能保证高可用性。既然要支持水平扩展，那么必然得无状态才行，但是NameServer本身就会存储一些数据，比如Broker信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里有几个实现方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候轮流向所有的NameServer进行注册，这样每个NameServer中都有全量的信息，即使某个节点挂了也不影响。RocketMQ就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gMly&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;8GDy&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRm0fUH449Aj4chUoyGD1NEIROAxRCFV6BDNmdbzWntdpAZt6lkUMF3A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;LCLN&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候只向某一台NameServer进行注册，立马返回，然后NameServer之间再进行相互同步，Eureka就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;rCkK&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRGdrc8MWicEbEjLZK2Slg4GpK9yCOOF5gx7ictBvVter1pibpxahPjus9A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;l8MK&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;7GkS&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候只向某一台NameServer进行注册，NameServer会同步向其他的NameServer进行数据的同步操作，等待所有写入成功或者半数写入成功，然后再返回给客户端。Zookeeper就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Q2Rt&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;igpH&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRJt17FbZDb9wnm277Y9XzH4KwBUE4CAkuzOXqqtlsrbVricnc6JmWCww/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;SDK&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务端有了，还有一个必须要有的设计就是SDK了。应用程序通过依赖SDK就可以直接发送消息和消费消息。SDK同时可以考虑支持多语言，这样使用场景更广泛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDK主要是用来跟Broker通信的，所以对于网络通信我们也要选择一个合适的框架，比如Netty就非常合适，你要是觉得太难，直接用Http协议也可以，或者直接支持多协议，这些都是需要考虑的场景。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;sTst&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;后台管理&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;sTst&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台管理可以实现很多治理的工作，方便我们在使用消息队列的时候去排查各种问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心功能点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前集群状态的查看&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的消费轨迹查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的重复投递&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息生产的监控大盘&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息消费的监控大盘&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;SDK消费线程数的动态调整&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;DBSW&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文只是简单的给大家介绍了下设计一个消息队列需要做哪些核心的工作，看起来就几个点而已。但是这几个点你要真正的去写代码实现难度是很大的。当然，我们其实也没必要自己去造轮子，因为你造了也不一定能比目前主流在用的好，但是整体的架构我们还是要了解的，至于细节就看自己需不需要深入了解了。比如消息存储那块，存储格式是怎样的？顺序写如何实现的？mmap技术如何应用的等等。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9cm1&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gpHC&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;strong ql-global=&quot;true&quot;&gt;&lt;span&gt;原创：架构摆渡人（公众号ID：jiagoubaiduren），欢迎分享，转载请保留出处。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;oVKf&quot; ql-global=&quot;true&quot;&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>31253137c2f6930ab3bd172aeb8a1db3</guid>
<title>B站SRE业务稳定性运营实践</title>
<link>https://toutiao.io/k/vduu1jt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;本期作者&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gL3xM6fG01cJ4NxDVLyCPyu1IHLRxMiac4aeiaxkicHZtOUcnib9D2AXWOQQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;刘昊&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哔哩哔哩 基础架构部SRE体系负责人&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、引言&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着B站近几年的快速发展，业务规模越来越大，迭代速度越来越快，系统运行复杂度越来越高。线上每天都会发生各种各样的故障，且发生的场景越来越刁钻。为了应对这种情况，保障业务在任何时刻都能将稳定性维持在一个高基线之上，B站专门成立了SRE体系团队，在提升业务稳定性领域进行了全方位、体系化的积极探索，从理论性支撑和能力化建设进行着手，从故障应急响应、事件运营、容灾演练、意识形态等多方面进行稳定性运营体系的构筑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文将从稳定性的相关理论定义出发，围绕稳定性的核心领域展开描述，并介绍B站在相关领域所做的实践探索。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、理论指导&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里为什么要先强调理论呢？因为理论是实践的高度总结与浓缩，通过了解理论知识，可以让我们从知其然，到知其所以然，再到使其然。公司的落地实践经验固然有参考价值，但是很容易受技术环境、发展阶段的影响。通过掌握稳定性相关的理论与模型，可以让我们在开展稳定性运营工作时，站得更高，看得更远，能够更好的结合实际现状进行能力建设。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在稳定性这一方面，行业的前辈大佬们已经沉淀和积累了很多概念、方法论和方案体系。不论是早已产生的ITIL、ITSS、BCM和ISO20000等管理流程和体系标准，还是近几年来行业围绕Google SRE展开的相关学习讨论。不可否认，在稳定性领域的理论越来越丰富和健全。这里，我会选取几个与稳定性强相关的概念和理论进行介绍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 业务稳定性运营&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务稳定性运营，顾名思义，就是通过对可能影响业务稳定性的相关因素和环节进行运营来保证业务的稳定运行。在这里，我们还要再细拆分3块来看。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业务&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务大家比较好理解，是达成某一目标的一系列相互关联、有组织的活动或任务，在软件领域，我们一般特质一系列的软件服务/应用组合。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;稳定性&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“稳定性是数学或工程上的用语，判别一系统在有界的输入是否也产生有界的输出。若是，称系统为稳定；若否，则称系统为不稳定”。这是维基百科对稳定性这一概念的描述，在这个描述中，我们要重点关注3个关键词：系统、输入、输出。对系统的理解，可大可小，一个业务，一个应用，均可理解为系统。以b站点赞业务为例，用户通过web页面点击点赞按钮，页面返回成功，视频点赞数正常增加，这就可以认为点赞系统是稳定的。因此，我们认为当一个业务系统接收到输入后，可以产生符合预期的输出，那么我们认定业务系统是稳定的，否则业务系统是不稳定的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;运营&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运营是对运营过程的计划、组织、实施和控制，是与产品生产和服务创造密切相关的各项管理工作的总称。对于SRE来讲，运营指的是SRE围绕业务开展的有计划、有组织的管理工作来避免或减少不稳定的情况发生。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 事态&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在ITIL v4中，事态被用来描述对服务或其他配置项（CI）的管理具有重要意义的任何状态更改。针对这个定义，国内很多公司没有直接使用，并且在实践中会与变更、事件混在一起。在b站的实践中，我们把事态定义为能够反映某类资源（硬件类/软件服务类/配置类等）变化的相关事项记录，包括状态变化、配置项变化等。在具体实践中，我们把事前的告警、变更、舆情、客诉和OnCall工单均纳入到了事态的管理范畴。我们期望通过对事态的统一收口，实现技术框架内所有信息流的集约化运营，通过集中的运营分析，来快速发现、定位和转化问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3 故障&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在ITIL v4中，有关异常的情况，有两个定义，一个是事件Incident、一个是灾难Disaster。其中，事件是指服务的意外中断或服务质量的降低。灾难是指对组织造成重大损失或重大损失的突发性意外事件。要将事件归类为灾难，该事件必须符合组织预定义的某些业务影响标准。在b站的实践中，我们统一将这两者归纳到了一个概念就是故障。为了方便大家对故障的理解，这里会再进行补充描述：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;依然参考稳定性的描述，任何不符合预期的情况，都会形成故障&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当事态中的一些没有被有效处理，导致影响范围扩大、影响程度上升时，会升级为故障&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4 应急响应&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应急响应的概念来源比较早的是在《信息安全应急相应计划规范GB/T24363-2009》中提到的安全相关的应急响应，整体定义是“组织为了应对突发/重大信息安全事件的发生所作的准备，以及在事件发生后所采取的措施”。从这个概念我们延伸到稳定性上就产生了新的定义，“一个组织为了应对各种意外事件的发生所作的准备以及在事件发生后所采取的措施和行为”。在应急响应的过程中，核心围绕的是故障，关键执行要素有3个，分别是人、流程和平台。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;人：作为应急响应过程中要参与和执行的主体，对其应急的意识和心态有很高要求。特别是在重大的一些故障处理过程中，不能因为压力大或紧张导致错误判断。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;流程：将应急响应的流程标准化，期望响应人能够按照既定阶段的既定章程进行有效的推进和处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;平台：支撑人和流程的高效合规运行，并将应急响应的过程、阶段进行度量，进而分析和运营，推进人和流程的改进。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.5 故障生命周期&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要对故障进行有效的运营，就需要先明确故障的生命周期。通过对故障的生命周期进行划分，我们可以针对不同的周期阶段进行精准聚焦，更有目的性的开展稳定性提升工作。针对故障生命周期的划分有很多种方式，按故障的状态阶段划分，可以分为事前、事中和事后；按故障的流程顺序划分，可以分为故障防御、故障发生、故障响应、故障定位和故障恢复、复盘改进等阶段。不同阶段的划分方法，决定了我们后续构造响应响应处理流程和平台产品化建设的思路和方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.6 稳定性度量&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;度量是很关键的一点，管理学大师彼得德鲁克曾经说过“你如果无法度量它，就无法管理它”。有效的度量指标定义，可以帮助我们更好更快的开展运营工作和评估价值成果。这里我列举两方面的度量指标。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障阶段&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于稳定性有两个核心指标，MTBF（平均无故障时间）和MTTR（平均故障恢复时间）。我们进行业务稳定性运营的核心目标就是降低MTTR，增加MTBF。在google的定义中，我们会将MTTR进一步拆分，拆分为如下4个阶段：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;MTTI：平均故障发现时间，指的是故障发生到我们发现的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MTTK：平均故障定位时间，指的是我们发现故障到定位出原因的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MTTF：平均故障修复时间，指的是我们采取恢复措施到故障彻底恢复的时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MTTV：平均故障修复验证时间，指的是故障恢复之后通过监控、用户验证真实恢复的时间&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLvLeABoQxZA2FPfATUbrREyic6WGetibtcZpDWJ0ZmiblYhBNpMPgAqibdA/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1018.9247311827957&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;751.2724014336917&quot; data-ratio=&quot;0.7387033398821218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLy6JZQgZicYibtiauboQcpibH4mSgk8BFneOqyV5S5hVCkDlEJL2zNlZMIQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1018&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;运营指标&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了关键的故障阶段度量指标外，相关运营指标在整个业务稳定性运营过程中也至关重要。比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;人工上报故障和自动发现故障的占比&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;故障影响面是否被有效评估&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事态到故障的转化率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;事态有效接管响应率&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进待办的有效完成率和复发率&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对这些度量指标的定义，我们建立起了稳定性运营的度量指标体系。通过对这些指标的运营分析，可以驱使我们对现有架构和流程的反思。通过有效的量化，让我们对具体的流程环节、协同机制和平台能力进行完善和改进。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、运营实践&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是B站的稳定性运营体系，整体上我们对故障进行了阶段性拆分，覆盖了一个故障从产生、响应、复盘、改进的全生命周期。从监控发现到故障分析，根据故障元信息进行相关人、群的信息触达，相关干系人接收到通告之后进行故障定位，根据定位情况进行恢复止损。在处理过程中，根据情况进行故障升级、实时进展同步、邀请协助处理等协同操作。故障结束之后，基于故障处理中信息进行结构化复盘，生成相关改进事项，并通过混沌平台进行演练验证。依靠这套稳定性运营体系，使故障发生时，SRE/研发等同学可以有条不紊的进行应急响应，确保业务稳定性工作的有序开展，降低故障风险。&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5685185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLoruNQvPvvLUYkd1g953bv6nDywIYibYSREKINc9L1mBEAAHia8qIk3kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面针对这套体系中的几块关键环节进行展开描述，希望能为读者提供更详尽的实践介绍。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 应急原则&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在故障发生的时候，应急的第一原则一定是先止损恢复，再定位原因。基于我们历史案例的统计，很多故障恢复时间过长导致影响面扩散的原因是由于故障发生时，没有第一时间进行止损，而是在定位故障的具体原因是什么。特别是一些工作经验不够丰富的同学，经常会陷入到这个误区当中。因此，当故障发生的时候，有时没有办法第一时间定位出问题原因，此时请高优使用通用的恢复方法进行止损恢复，比如找到服务最近的相关变更，进行变更回滚；针对异常服务进行服务重启等。这里列举一些通用的故障恢复方法。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;运维三板斧：重启、回滚、扩容&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务治理手段：熔断、限流、降级&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 组织与人&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在故障应急中，合适的人在合适时间介入到合适的事情上至关重要。在发生问题时，有效的通知到对的人、快速的找到对的人，可以大幅缩短故障处理时间，提升故障处理效率。B站通过建设OnCall系统和故障指挥IC体系实现了业务、组织和人的有效映射，提供统一的人员、组织和业务的拓扑关系，不仅解决了业务同学一个问题问几波人才找到对应人的问题，同时减少了日常报警、流程审批等琐事对SRE同学的干扰，让SRE同学在故障来临时能够更及时、更专注的响应问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;OnCall系统&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OnCall系统，即值班系统。值班系统在日常运转过程中的作用往往被低估，SRE、工程效率做这块建设时。很容易基于二维的方式对人和事进行基于日历的值班管理，并通过网页、OpenAPI等方式对外提供数据服务。那么OnCall系统的重要性都体现在哪些方面呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;有问题找不到人
随着公司业务规模的扩大和领域的细分，一些新的同学和新业务方，往往会出现一个问题不知道是哪些人负责，需要咨询很多人才能找到具体解决问题的人。这块问题不仅限于故障，更是在日常oncall琐事中。特别是SRE同学的日常，经常会被研发同学咨询找人拉群，戏称拉群工程师。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;下班不下岗
当人们遇到问题时，经常会下意识的找熟悉的人。这就导致一些能力强、服务意识好的同学，总是在被人找。不论他今天值不值班，他将无时无刻都要面临被人打扰的境地。除了被人找之外，内部的监控系统、流程系统，也会无时无刻在给不值班的同学发送监控告警和流程审批信息。这也将使SRE同学有50%的时间用于工程这个愿景变成泡影。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这两种情况，我们对公司业务、服务、职能、组织架构进行了分析建模，明确了人、团队、职能和业务之间的关联关系，构建起了一套三维合一的模型。由组织-业务、职能-人员、组织-职能的关联关系，产生交汇点。值班人员会通过值班小队的方式，落在这些交汇点上。并且基于业务和基础架构的异同点，通过业务视角和职能视角分别对外提供服务。&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6196078&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gL6MXhnclWs9Q38SlQH4PjAnicU3yu0Tiba9Bk1cPON7lHV2FViboH6icdEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我详细介绍下这两种视角的异同。首先b站的业务层级组织模式是按照“组织-&amp;gt;业务-&amp;gt;应用”这三级进行组织的，所有的应用归属到业务，业务归属到具体的组织架构。基于业务组织模式，我们将职能和人这两个要素添加进去，就形成了下面的两个视角。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;职能视角
前端采用树型展示，组成结构：组织-&amp;gt;职能-&amp;gt;覆盖范围（组织-&amp;gt;业务-&amp;gt;服务），值班表具体挂载在覆盖范围下，覆盖范围可以只有一级组织也可以精确到组织下面的业务、业务下面的服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务视角
前端采用树型展示，组织结构：组织-&amp;gt;业务-&amp;gt;职能，值班表具体挂载在职能下面。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6222222&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLoibOSIeloUW486VZZ2quxZibkOoQuEQj5iaicibPRSa52ic47nF3zvwibfbWw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在日常工作中，基础架构相关的服务，比如SRE、DBA、微服务、监控、计算平台等强职能型服务会通过职能视角对外提供值班信息。当业务人员有具体问题时，可以通过职能树快速定位到具体的值班人员。而对于业务服务来讲，日常的工作模式是围绕业务开展的，因此会通过业务进行展开，提供该业务下相关职能的对应值班信息。这两个视角的底层数据是相通的，强职能相关服务提供方只需要维护好职能视角的值班信息，业务视角下的关联自动会生成。在值班表的组成上，除了维护人员信息之外，还维护了值班群信息，当值班人员发生变动时，也会实时向值班群内发送变更通知，确保业务方及时了解值班人员变化信息，也为后续故障的协同提供数据基础。&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.537963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLE9nicpsIkhLr35JtjRF2Y0ZiaxhM2uo2kygAicQeibia1QPiawPqTSMnMqwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;故障指挥IC&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在建设OnCall系统之外，我们还成立了虚拟小组-故障指挥IC。故障指挥IC的主要职责是确保重大故障发生时，故障处理流程可以有条不紊的推进，确保故障处理过程中职责清晰、信息传递精准和有条不紊。在故障应急领域，一般会默许第一个发现故障的人成为故障指挥官。但在实际执行过程中发现，一些重大故障，往往涉及到非常多的部门和团队。而首先发现问题的同学，往往是一线执行同学，此时该同学身上担负着故障止损的具体任务，另外由于影响面的扩大，上游的业务同学也会加入进来处理，此时具体事务的进度汇总、分工和对外的信息传递就至关重要。需要有一个纵览全局的角色出现，并且具备一定的指挥经验，来确保重大故障的有效处理。在故障结束之后的若干小时之内（普通故障24小时、重大故障48小时），发送故障复盘报告，并组织各个业务方进行故障复盘，产出相关改进并跟进改进执行。针对故障指挥IC的人员选用，我们采用了两个模式：一方面是有专职的具备NOC、ECC等经验的同学，另一方面是各技术线、业务线的leader。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;意识形态&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要负责线上系统的同学，都有可能会参与到故障应急响应的过程中。因此，对于提升每位应急参与人员的意识就至关重要。我们通过故障应急的机制、文化建设，定期在公司内部组织分享，确保每一个可能参与到故障应急中的同学都具备一定的稳定性意识，知晓业务稳定性的重要性和必要性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 高效协同&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障无时无刻都有可能发生，因此在故障发生的时候，高效快速的应急响应至关重要。由于信息不及时传递、跨部门的沟通阻碍、非工作日的应急响应延迟，都会导致故障处理时间增长，故障影响面蔓延。B站通过事件运营中心提供了多种故障协同能力，用来加强故障时的信息触达、畅通流转。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;明确职责&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在故障详情页，清晰展示当前故障的故障指挥官、一线执行人员等角色信息。确保故障相关方可以第一时间了解到当下谁在处理故障、谁在指挥。当发现故障需要更多人来协助处理的时候，通过平台可以一键进行故障处理邀约。系统会自动为邀约人发送企业微信通知和电话提醒。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;应急协同群&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当故障发生的时候，平台可以基于故障的所属业务或职能，自动通过oncall系统获取到相关值班人员信息，自动创建故障应急协同群，并在群内发送故障简报，让人员快速了解故障的相关情况。&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4194444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLxYYb1sglXjkRk8PGEwoVibC16UYyqHRMLLa0ib8F81OjG3QnFlcSmwcg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4 故障画像，辅助定位&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着业务的多样化和技术架构的复杂度提升，故障的定位难度在不断提升。为了提升故障发生后的定位效率，提升预案的有效匹配，我们围绕业务层次关系和事件模型，将事态管理中各种类型信息进行了建模和拓扑化，提供一个围绕服务、围绕故障的立体画像，为应急响应同学对问题点的确认提供辅助手段，并且在一些场景上联动作业系统提供故障自愈能力。目前我们对于故障画像的构造是基于三层来的&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;硬件层：硬件的故障和变更一定会通过基架层往上基架层传递，并最终可能影响到业务层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基架层：基架层的故障会直接影响到基础架构服务异常范围内所服务到的业务服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务层：业务层的服务可能会对其上下游服务产生影响
基于这三层的分类，我们提供了统一的事态信息上报建模，通过接入周边的各个关键系统，来实现画像的构造。在故障产生时，对故障所处点的上下游进行报警、变更等异常信息关联度推荐，加快定位效率。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.5 高效复盘&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;故障的发生有可能很难避免，但是对于一个故障的深刻复盘确是必不可少的。当一个故障发生后，如果不及时、深刻的对故障的处理过程和根因进行分析和改进，故障将会极高概率重复出现，公司将再次蒙受损失。当待办形成之后，无法有效的落地执行改进，将导致复盘的成果白费。为了推进复盘和待办的有效性，b站在实践过程中遵循以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;复盘时效
为了确保复盘的有效，我们建议普通故障24小时、重大故障48小时内完成对故障复盘内容的整理和相关干系人的复盘会议召开。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复盘流程
有效的复盘依赖于健全的复盘流程。故障复盘将由故障指挥官进行协调和组织。在召开故障复盘会议之前，首先整理复盘文档，复盘文档的组成包括：故障相关描述（简述、影响面、相关人员）、故障时间线（在流程中能够清晰展示人、系统之间的操作和交互信息）、故障产生的根因分析（根因除了技术层面之外，也要探究组织、流程和协同层面的隐患）、相关变更/监控等信息。在故障复盘会议中，由故障指挥官引导会议开展，并对故障所暴露的问题和隐患进行讨论，丰富复盘文档，并明确待办改进的具体人员和时间节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高效复盘
在上述的复盘流程中，我们发现环节很多，需要填写的内容很多。这个时候为了确保复盘的高效进行，我们通过事件运营中心，将故障和复盘的信息流打通，在故障结束后，可以一键创建复盘文档，自动同步故障相关元信息以及故障处理过程中的时间线信息，减少复盘文档准备过程时间。另外通过平台化的手段使复盘文档标准统一和结构化完整，确保复盘过程中对各个环节隐患的摸排足够彻底，避免由人工发问导致的复盘质量参差不齐。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;复盘运营
随着故障和复盘的增多，平台会沉淀很多的运营数据。通过对数据进行报表化产出，以周报月报的形式发送给相关技术和业务线负责人。报表内容主要包含：趋势数据（故障数量、责任事故数量等）、故障分阶段数据情况、待办改进情况等。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4787037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLia3mxxHYtoJ6NlMGomxtkIpvkfEP9BbbSclLUje6snYiaMPZVqtbEe9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、挑战&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在业务稳定性运营体系的建设过程中，团队也踩了很多坑，面临了诸多技术之外的挑战。鉴于业界对于技术相关的分享比较丰富，这里就针对体系逻辑和人员方面的挑战进行分享。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 元信息统一&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;稳定性是个大话题，在落地整体体系时会发现，设计的上下游系统太多了。每个系统里面都会有人、业务、职能的使用需求。在初期，我们内部在服务、业务和人的关联这块没有形成一个统一的数据基准，导致我们在应急协同的诸多特性上难以落地，诸如故障的有效通知、群内的有效传递、故障画像的拓扑关联计算缺少映射关系等等。在这种情况下，我们从新梳理了服务树和OnCall系统，通过服务树将组织、业务和服务的映射关系维护好，通过OnCall系统将组织、职能、业务和人的映射关系维护好，来确保找人的时候能找到人，找服务的时候能找到服务。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 工作模式改变&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新的应急响应流程，将故障过往对人的依赖转移到靠系统来自行驱动，这对现有人员的工作模式产生了很大变化。传统故障处理时，响应人员手动拉群、语音或现场找人，变成了优先在系统内升级已有事件或录入故障信息，然后通过系统自动进行人员关联和邀请。群内的随意沟通，变成了在平台进行阶段性进展同步。原有的故障升级逻辑变成了平台定时通知，也给故障处理人员带了一定的压迫感。整体形式上更加严肃和标准，这在落地初期给大家带了一定不适应感。针对这种情况的改善，我们一方面通过在系统的文案描述上进行改善，交互逻辑上进行优化，尽可能在推行新标准的同时，适应旧的使用习惯。比如，常规应急协同群会早先于平台的故障通告建立，这就会与平台创建的故障协同群发生冲突。此时，我们通过增加现有群关联来实现已有故障协同群和故障的关联。另外一方面，我们通过定期持续的宣讲，给大家介绍新的应急响应流程和平台使用方法来帮助大家适应新的应急响应模式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;五、总结与展望&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是B站在业务稳定性运营方面所做的相关工作。通过体系化建设，已经在组织、流程和平台层面实现强效联动，具备了数字化运营业务稳定性的能力，建立了科学有效的稳定性评估提升量化标准，让稳定性提升有数据可依托。将故障应急响应流程从由人工驱动升级到由平台系统驱动，应急响应人员可以更专心处理故障，大幅提升故障恢复时间。后续我们将会持续探索更科学有效的管理运营方法，期望通过引入AI的能力，加快故障辅助定位能力、提早发现故障隐患，联动预案平台实现更多场景的故障自愈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本期作者刘昊将于4月27日20:00就《B站保障业务稳定性的SRE落地实践》这一专题进行直播，感兴趣的同学可以扫码预约。我们直播间见哦~&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.1638889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1BMf5Ir754R2hGeljOqcJMVWmy0Wv8gLtjud1zmtyct7ibcxXRmP8wDsKr3YqGbVEpKiasloNQkxTWSWBId8lTDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3Njc0NTgwMg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/1BMf5Ir754QyhiatboUJGZpnzrVDJZCDFYOWhcbdbvj2TlhSXVeErhqCZ8CzgHob1wNDy9IUl4HJheIaIrzgN3A/0?wx_fmt=png&quot; data-nickname=&quot;哔哩哔哩技术&quot; data-alias=&quot;bilibili-TC&quot; data-signature=&quot;提供B站相关技术的介绍和讲解&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNTE4OTc0Mg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EVKwaZXNTl9OCCo7pxLHz2e2I3kV3rTPao5LlIickfJS79DNd2yjqjfYEtwtMOyVuKhJoDIq6UU4U9TQbjvOLaQ/0?wx_fmt=png&quot; data-nickname=&quot;哔哩哔哩招聘&quot; data-alias=&quot;&quot; data-signature=&quot;生产快乐的地方&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d50abe1ea3f8f8b4952756b5b59eff47</guid>
<title>面试官问：你离职的原因是什么？如何避坑？</title>
<link>https://toutiao.io/k/ilivzfe</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;疫情肆虐，经济下行。整个互联网行业到处都在裁员、续命。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwckOXHzvFcpOgt6Omw7VvnnlQIg5VMIXwNhBCsYOibrRsMkQoA6NwyGjbna3LL27QYzO3TrJ0XDzIA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在网上看到一些数据，短短几个月时间，互联网头部大厂已经优化释放了十几万人才，打工人太难了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论多不情愿，这就是生活，很多人被迫再次踏上找工作的残酷厮杀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一名优秀程序员过五关斩六将，好不容易进入了 HR 环节，如果因为自己的&lt;code&gt;天真&lt;/code&gt;导致面试失败，那太可惜了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;HR 环节，经常会问一个致命问题：你从上一家离职的原因是什么？&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwckOXHzvFcpOgt6Omw7VvnnPoE8cliazRJMgdDRGmujyPZo1y6gZZYICKY9licdRxjOA0s5YcqwtESA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们就将常见的离职原因做下汇总，看看&lt;code&gt;高情商&lt;/code&gt;是如何来回答的&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;老板给的工资太低了&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多同学会直言老板抠门，工作3年了，工资低且没有涨过薪资，年终奖更是少的可怜&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种回答，给人有种过于 &lt;code&gt;金钱观&lt;/code&gt;感觉，虽然马斯诺理论说过，&lt;code&gt;生理需求&lt;/code&gt;是最基本的，但是谈钱总是容易伤感情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在原公司的平台上已经积累了很多，希望找一个新的平台，开阔下视野，将能力迈向一个新的台阶。换个角度来回答这个问题，不要把注意力只盯在钱上。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;工作量太大，老是加班&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;千万不要直言是因为加班才导致自己的离职，很容易让 HR 怀疑你的工作效率太低。同事间的横向沟通或者向上管理的能力太差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是因为受不了加班安排离职，最好能具体列举一些加班的超常规细节。比如：公司的加班时间有些特殊，总是在下班后开会，连续2个多月工作到晚上12点以后，加班的强度超出了常人所能承受范围。最好描述整个团队都是这个情况，避免被针对性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果担心这样回答不好，也可以换个角度。频繁的业务创新，导致大量的 &lt;code&gt;CRUD&lt;/code&gt; 重复性低效工作，个人成就感低，希望找一个高质量的平台，能有一些解决挑战性难题的机会&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小人太多，工作中太多扯皮、甩锅事件&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扯皮、甩锅、办公室政治，很多公司都存在。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无非是否严重到影响到员工的正常输出，劣币驱逐良币。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以委婉讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己注重团队氛围，感觉原公司不太适合我，所以选择离开。我认为一个良好的工作氛围能够提供高的工作效率，明确的分工和相对完善的制度是提高生产力的基本保障。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;老板水平太菜&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是这个原因，可千万别实话实说，不要随意评判一个人，尤其这个人还是你的老板。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很容易让 HR 误认为你这人很主观、自以为是，容易被 pass&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们换种表达：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在原来的岗位已经学到了很多，能力也有了极大提升。希望出来开阔下自己的视野，拓宽自己的技术面，让自己收获更大的成长。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;工作太闲了&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种情况与当下盛行的 &lt;code&gt;996&lt;/code&gt;、&lt;code&gt;007&lt;/code&gt; 显得格格不入。但是有些国企或事业单位，工作节奏会缓和一些，平时也不太用加班。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是我们也千万不能太实诚了，一激动，实话实说&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我是一个不安于现状的人，作为年轻人应该勇于拼搏，主动积极承担更多，让自己成长的更快。主要是把自己的积极性、主动性表现出来。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;公司的管理制度太苛刻&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如早上要打卡，晚上又要强制各种加班&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我非常欣赏贵公司的人性化工作管理，靠成果说话，在这种环境下更能激发我的主观能动性。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;之前的公司没有发展前途&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多候选人将离职原因归咎到公司，显得自己没有问题。正如一个巴掌拍不响，任何事情都是有关联的。HR 心里可能会想，那为什么你当初还选这家公司？说明你的眼光也不怎么样。要不就是你的能力也不怎么样，在公司的业务发展中，助力太少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自己的职业发展路线与公司的发展规划不符，所以选择离职。重点讲下自己在原公司的具体业绩情况，但因公司的晋升通道、部门调整等因素造成了发展路线偏差，所以离开，千万不可以说公司没前途。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在原来的平台，感觉自身积累的能力已经成熟，希望能够拓宽自己的知识面，更深入地学习和实践。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;怀才不遇，不被公司重视&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个我们最好不要实话实说，很容易让 HR 感觉你&lt;code&gt;恃才傲物&lt;/code&gt;，&lt;code&gt;自命清高&lt;/code&gt;。容易留下差印象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以讲：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原来的平台已经基本稳定，个人发挥的空间越来越少，不想再留下去混日子，希望找个更大的平台，参与更多有挑战的事情，收获更大的成长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以从经济角度出发，比如，一两年内想买房，有比较大的开销，需要增加工资收入。但是自己肯努力，肯付出，在新的岗位一定能创造更多的价值。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最后&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是什么原因离职的都可以加上一句，不管怎么样，我都很感恩上家公司，让我学到了很多，对行业和岗位有了更深的理解，让我有信心开启下一段新的职场。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于我：Tom哥，前阿里P7技术专家，offer收割机，参加多次淘宝双11大促活动。欢迎关注，我会持续输出更多经典原创文章，为你晋级大厂助力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前微信群已开放，&lt;/span&gt;&lt;span&gt;想进交流群&lt;/span&gt;&lt;span&gt;的小伙伴请添加Tom哥微信，暗号「&lt;/span&gt;&lt;span&gt;进群&lt;/span&gt;&lt;span&gt;」，唠嗑聊天， 技术交流，围观朋友圈，人生打怪不再寂寞&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.092130518234165&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdaSEqIP60fNXXqd7e15vycGo75wsfR2yTDKxOpJaKG0BKzFod8CQxLtibu2vMp1GKBMDJRbk3rpLw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;521&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16362991689819=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16362991689819=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16362991689819=&quot;rgb(132, 144, 168)&quot; data-darkmode-original-color-16362991689819=&quot;#fff|rgb(0, 0, 0)|rgb(66, 75, 93)&quot; data-style=&quot;outline: 0px; max-width: 100%; font-weight: bolder; color: rgb(66, 75, 93); letter-spacing: 1px; word-spacing: 3px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__152&quot;&gt;推荐阅读👍：&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NzYyNjQzNg==&amp;amp;action=getalbum&amp;amp;album_id=1911852085562703875#wechat_redirect&quot; textvalue=&quot;《我想去大厂列》（包含Java、MySQL、Redis、MQ消息队列、TCP网络、项目亮点、团队管理等）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;《我想去大厂》（包含Java、MySQL、Redis、MQ消息队列、TCP网络、项目亮点、团队管理等）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16362991689819=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16362991689819=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16362991689819=&quot;rgb(132, 144, 168)&quot; data-darkmode-original-color-16362991689819=&quot;#fff|rgb(0, 0, 0)|rgb(66, 75, 93)&quot; data-style=&quot;outline: 0px; max-width: 100%; font-weight: bolder; color: rgb(66, 75, 93); letter-spacing: 1px; word-spacing: 3px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__152&quot;&gt;推荐阅读👍：&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NzYyNjQzNg==&amp;amp;action=getalbum&amp;amp;album_id=1874600102896467974#wechat_redirect&quot; textvalue=&quot;SpringBoot 生态系列，JPA、ElasticSearch、Kafka、Redis等几十个主流开源框架&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;SpringBoot 生态系列，JPA、ElasticSearch、Kafka、Redis等几十个主流开源框架&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一定要&lt;span&gt;点击👇🏻的 收藏、赞、在看&lt;/span&gt;支持一下作者噢~~&lt;span&gt;如果你觉得本文对你有帮助的话！&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>