<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c8300b14ccbe0c1dd372e74f2cacf4a0</guid>
<title>微服务实现简单的分布式日志追踪</title>
<link>https://toutiao.io/k/s7af3dl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;wrap-content&quot;&gt;
      &lt;header class=&quot;header-page&quot;&gt;
        &lt;h1 class=&quot;page-title&quot;&gt;微服务实现简单的分布式日志追踪&lt;/h1&gt;
        &lt;p class=&quot;page-date&quot;&gt;
          &lt;span&gt;
            Yourtion 创作于：2021-01-15    
          &lt;/span&gt;
          &lt;span class=&quot;post-words&quot;&gt;
            
            全文约 4077 字，
            预计阅读时间为 12 分钟
          &lt;/span&gt;
        &lt;/p&gt;
      &lt;/header&gt;
      
&lt;p&gt;最近想给项目添加一个简单的分布式请求跟踪功能，从前端发起请求到网关，再从网关调用 SpringCloud 的微服务，这些过程中希望能从日志中看到一个分布式 ID 的链路，通过请求的 ID 可以追踪整一条链路，方便问题的排查。&lt;/p&gt;

&lt;p&gt;现成的方案自然是使用 SkyWalking 、 Spring Cloud Sleuth 、Zipkin 之类的组件，但是想到主要的目的记录一个可以一直贯通各个服务的 ID，方便日志查询，也就不想引入太多复杂的组件，最终决定通过 MDC 在日志中输出追踪的 ID，然后在 Feign 和 RestTemplate 中将请求 ID 在微服务中传递。&lt;/p&gt;

&lt;p&gt;主要包括几个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从前端生成请求 ID 并加入请求头带入网关&lt;/li&gt;
  &lt;li&gt;网关通过 WebFilter 拦截并加入 MDC 中，在 log 中输出&lt;/li&gt;
  &lt;li&gt;在 Feign 和 RequestTemplate 中将请求 ID 在带到 HTTP 的 Header 中微服务传递&lt;/li&gt;
  &lt;li&gt;各个微服务同样通过 WebFilter 实现拦截并加入 MDC，在 log 中输出&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mdc&quot;&gt;MDC&lt;/h2&gt;

&lt;p&gt;MDC（Mapped Diagnostic Context，映射调试上下文）是 log4j 和 logback 提供的一种方便在多线程条件下记录日志的功能。 MDC 可以看成是一个与当前线程绑定的哈希表，可以往其中添加键值对。&lt;/p&gt;

&lt;p&gt;MDC 的关键操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;向 MDC 中设置值：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MDC.put(key, value);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;从 MDC 中取值：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MDC.get(key);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将 MDC 中内容打印到日志中：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%X{key}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新增-traceid-工具类&quot;&gt;新增 TraceId 工具类&lt;/h2&gt;

&lt;p&gt;先新增一个 TraceIdUtils 工具类，用于定义 TRACE_ID 的常量值以及设置及生成 TRACE_ID 的方法，后续代码中都是通过这个估计类进行操作&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang.RandomStringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.lang.StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TRACE_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;traceId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAX_ID_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 生成 traceId
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomStringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomAlphanumeric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAX_ID_LENGTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 设置 traceId
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 如果参数为空，则生成新 ID&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBlank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 将 traceId 放到 MDC 中&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TRACE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAX_ID_LENGTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 获取 traceId
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 获取&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TRACE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 如果 traceId 为空，则生成新 ID&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBlank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;通过-webfilter-添加-traceid-过滤器&quot;&gt;通过 WebFilter 添加 TraceId 过滤器&lt;/h2&gt;

&lt;p&gt;新增一个 GenericFilterBean ，从请求头中获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceIdUtils.TRACE_ID&lt;/code&gt; 对应的值，该值在前端发起请求或者微服务之间传递都会带上，如果没有，则 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceIdUtils.setTraceId&lt;/code&gt; 会生成一个。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.core.annotation.Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.filter.GenericFilterBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@WebFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlPatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;traceIdFilter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TraceIdFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericFilterBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// traceId初始化&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRACE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 执行后续过滤器&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不要忘记在 SpringBoot 的启动类加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ServletComponentScan&lt;/code&gt; 注解，否则自定义的 Filter 无法生效。其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;com.yourtion.trace.filter&quot;&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TraceIdFilter&lt;/code&gt; 所在的包名。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ServletComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;com.yourtion.trace.filter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;在-feign-上添加-traceid&quot;&gt;在 feign 上添加 TraceId&lt;/h2&gt;

&lt;p&gt;因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@FeignClient&lt;/code&gt; 的代理类在执行的时候，会去使用使用到 spring 上下文的 RequestInterceptor，所以自定义自己的拦截器，然后注入到 spring 上下文中，这样就可以在请求的上下文中添加自定义的请求头。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;feign.RequestInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;feign.RequestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeignInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RequestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRACE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;在-resttemplate-上添加-traceid&quot;&gt;在 RestTemplate 上添加 TraceId&lt;/h2&gt;

&lt;p&gt;还有一部分请求是通过 RestTemplate 发起的，之前我们是自己实现了 RestTemplateConfig 的配置类，这次在相关的配置上添加：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;additionalInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRACE_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TraceIdUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTraceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，链路上的 TraceId 添加已经完成，剩下的就是在日志中打印出来了。&lt;/p&gt;

&lt;h2 id=&quot;修改-log4j2-的-layout-格式&quot;&gt;修改 log4j2 的 layout 格式&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;修改日志的layout格式，将MDC中的traceId打印出来：

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 原始格式 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%5p %c:%L - %m %throwable{separator( --&amp;gt; )}%n&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 增加traceId的格式 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%5p traceId:%X{traceId} %c:%L - %m %throwable{separator( --&amp;gt; )}%n&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，修改就大功告成了。&lt;/p&gt;

&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;



      &lt;p class=&quot;source&quot;&gt;原文链接：&lt;a href=&quot;https://blog.yourtion.com/microservice-simple-distributed-log-tracing.html&quot;&gt;https://blog.yourtion.com/microservice-simple-distributed-log-tracing.html&lt;/a&gt;&lt;/p&gt;
      
    &lt;/div&gt; 
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0a75315655e23285c64c99cc804e350f</guid>
<title>阿里面试官问我 Java 线程和操作系统线程什么关系</title>
<link>https://toutiao.io/k/oh81sch</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;这个问题是安琪拉之前面试被问到的一个问题，正好顺着上一篇文章介绍完线程调用时的用户态和内核态的切换，后续把Java 并发的都一起讲了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;面试官：听前一个面试官说你Java并发这块掌握的不错，我们深入的交流一下；&lt;/p&gt;&lt;p&gt;我:  看了看面试官头部稀疏的结缔组织，已然觉得这场面试不简单，不过好在事前把安琪拉的博客看了个遍，有所准备，我回答说：咳咳，掌握的还算可以。&lt;/p&gt;&lt;p&gt;面试官：Java线程用过的吧？&lt;/p&gt;&lt;p&gt;我：用过。&lt;/p&gt;&lt;p&gt;面试官：那你给我讲讲Java线程和操作系统的？&lt;/p&gt;&lt;p&gt;我：啊！！！&lt;/p&gt;&lt;figure&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;500&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;492&quot; data-ratio=&quot;0.984&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVvfdg58dHWtZqxWnwIE52PuJcLIq3tSkVE5NJuvPK990k6hKRMUULVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; title=&quot;img&quot;/&gt;&lt;figcaption&gt;咆哮&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;剧情不应该这样的啊，开场不应该先是 synchronized 或者 volatile，再然后是线程池和AQS，怎么上来就整这玩意。&lt;/p&gt;&lt;p&gt;我：好的，那我分三段讲，&lt;/p&gt;&lt;h1&gt;&lt;span&gt;1. 用户态的线程&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;第一阶段:&lt;/p&gt;&lt;p&gt;其实早期的时候，操作系统是没有线程的概念，线程是后面加进来的，操作系统刚开始只有进程，操作系统分配资源的最小单位是进程，进程与进程之间相关隔离，每个进程有自己的内存空间，文件描述符，CPU调度以进程作为最小调度单元；&lt;/p&gt;&lt;p&gt;第二阶段:&lt;/p&gt;&lt;p&gt;初期的多线程，线程是在用户空间下实现的。&lt;/p&gt;&lt;p&gt;什么意思？我们都知道内存分用户空间和系统空间，系统空间是给操作系统使用的，用户空间是应用程序使用的，应用程序如果需要访问系统空间，需要进行系统调用，从用户态切换到内核态，这里详细可以参考我上一篇文章: [&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3ODA0ODkwNA==&amp;amp;mid=2247484040&amp;amp;idx=1&amp;amp;sn=5bac4aeabaa0575df9f73c3a60914849&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;讲讲用户空间和内核空间&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;那怎么在用户空间实现的多线程呢？&lt;/p&gt;&lt;p&gt;实际上是操作系统按进程维度来调度，操作系统是不去管你用户线程的切换的，应用程序自己在用户空间实现线程的创建、维护和调度。模型如下图:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4827586206896552&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVvYLyARYwPA6kv3woNw4J5bWF8d3kwWVx4eVG9mUwkEYAHficrZ5HwkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/p&gt;&lt;p&gt;当线程在用户空间下实现时，操作系统对线程的存在一无所知，操作系统只能看到进程，而不能看到线程。所有的线程都是在用户空间实现。在操作系统看来，每一个进程只有一个线程。&lt;/p&gt;&lt;p&gt;这种方式的好处之一就是即使操作系统不支持线程，也可以通过库函数来支持线程。在JDK1.1中，就用的绿色线程，而不是原始线程。&lt;/p&gt;&lt;p&gt;下面是关于green thread的解释，因为green thread不是今天的重点，就不细说了。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;green threads&lt;/strong&gt; 是一种由运行环境或虚拟机(VM)调度，而不是由本地底层操作系统调度的线程。绿色线程并不依赖底层的系统功能，模拟实现了多线程的运行，这种线程的管理调配发生在用户空间而不是内核空间，所以它们可以在没有原生线程支持的环境中工作。&lt;br/&gt;在Java 1.1中，绿色线程（至少在 Solaris 上）是JVM 中使用的唯一一种线程模型。由于绿色线程和原生线程比起来在使用时有一些限制，随后的 Java 版本中放弃了绿色线程，转而使用&lt;strong&gt;native threads&lt;/strong&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这种模式的优点和缺点都非常明显:&lt;/p&gt;&lt;p&gt;缺点: 因为操作系统不知道线程的存在，CPU的时间片切换是以进程为维度的，如果进程中有某个线程进行了某些耗时长的操作，会阻塞整个进程。另外当一个进程中的某一个线程(绿色线程)进行系统调用时，比如网络IO、缺页中断等操作而导致线程阻塞，操作系统也会阻塞整个进程，即使这个进程中其它线程还在工作。&lt;/p&gt;&lt;p&gt;优点: 使用库函数来实现的线程切换，就免去了用户态到内核态的切换，这个味道熟不熟，对了，Go的协程就有借鉴了一部分这个思想。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;2. 内核态的线程&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;在 Java1.2 之后. Linux中的JVM是基于&lt;code&gt;pthread&lt;/code&gt;实现的, 可以直接说 Java 线程就是依赖操作系统实现的，是1:1的关系。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;现在的Java中线程的本质，其实就是操作系统中的线程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;另外我看很多资料上说 Java线程的实现采用的是LWP(轻量级进程)，实际上从Linux 内核2.6开始，就把LinuxThread 换成了新的线程实现方式NPTL，NPTL解决了LinuxThread中绝大多数跟POSIX标准不兼容的特性，并提供了更好的性能，可扩展性及可维护性等等。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;LinuxThread使用的是1 * 1模型，即每一个用户态线程都有一个内核的管理实体跟其对应，这个内核对应的管理实体就是进程，又称LWP（轻量级进程）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;希望了解更多NPTL的可以去看详细介绍NPTL.&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVn9A86hDCap2aEoia6pcCv2KhMBW2Iic6Y9NqmqOIbqXDQ2VAOPiahcahA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们知道，每个线程都有它自己的线程上下文，线程上下文包括线程的ID、栈、程序计数器、通用的寄存器等的合集。总觉得上下文这个词很模棱二可，但是发现也找不到更合适的词来描述。&lt;/p&gt;&lt;p&gt;线程有自己的独立的上下文，由操作系统调度，但是也有一个缺点，那就是线程消耗资源太大了，例如在linux上，一个线程默认的栈大小是1M，单机创建几万个线程就有点吃力了。所以后来在编程语言的层面上，就出现了协程这个东西。&lt;/p&gt;&lt;p&gt;协程的模式有点类似结合了上面二种方式，即是在用户态做线程资源切换，也让操作系统在内核层做线程调度。&lt;/p&gt;&lt;p&gt;协程跟操作系统的线程是有映射关系的，例如我们建了m个协程，需要在N个线程上执行，这就是m: n的方案，这n个线程也是靠操作系统调度实现。&lt;/p&gt;&lt;p&gt;另外协程是按需使用栈内存的，所以理论上可以轻轻松松创建百万级的协程。&lt;/p&gt;&lt;p&gt;目前协程这块支持的最好的是go语言, 不过现在OpenJDK社区也正在为JDK增加协程的支持。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;3. 线程的源码&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;我们在Java中调用 &lt;code&gt;new Thread(Runnable ***).start()&lt;/code&gt;  方法时，怎么从用户态切到内核态，发送系统调用，在操作系统内核层中创建一个线程的呢？&lt;/p&gt;&lt;p&gt;这个可以一步步往下钻，关键点最后在JVM层系统调用&lt;span&gt;pthread_create&lt;/span&gt;创建线程。&lt;/p&gt;&lt;p&gt;首先是native方法:  &lt;code&gt;private native void start0();&lt;/code&gt;&lt;/p&gt;&lt;p&gt;下到Thread.c 文件，：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;263&quot; data-ratio=&quot;0.55234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVlock5p00S5BpRfiajzIubrZt5ib1ZTJa1JUnwy0MvbNNg9zBxTjicxepQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;OpenJDK1.8源代码第44行，方法映射；追着 JVM_StartThread 进到 &lt;code&gt;jvm.cpp&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;319&quot; data-ratio=&quot;0.45546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVnAsA28rHcYY9l7PsVFg9k6ZRPhicRhJTuqD6wVemg8yHFV4Tf1WVBhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;linux 系统下的，看 &lt;code&gt;src/hotspot/os/linux/os_linux.cpp&lt;/code&gt; &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SoGf97KLurDIsZDs3T07JWZhrx3RVTyVZrggtLgVp6pxmajgFiaOFJvJAsziaNay7ca3IwUNV8seQJHrIqleh14A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;主要关注 pthread_create 这里，是通过linux 的 c库函数完成系统调用，从用户态切到内核态完成线程的创建。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;文中源代码地址:&lt;/p&gt;&lt;p&gt;Thread.c&lt;/p&gt;&lt;p&gt;pthread_create&lt;/p&gt;&lt;p&gt;os_linux&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下一篇文章介绍 Java 线程的几种状态的切换, 也是非常重要的知识点。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;最后说下怕误导大家，说下头发不属于结缔组织。&lt;/p&gt;&lt;p&gt;网友喜欢把剪头发说成：明天我就要去动手术了，头部结缔组织群体切割手术，祝我好运 ！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;参考:&lt;/p&gt;&lt;p&gt;[Understanding java&#x27;s native threads and the jvm]&lt;/p&gt;&lt;p&gt;原创不易，如果觉得自己看完有收获，帮忙转发一下或&lt;span&gt;点个&lt;/span&gt;&lt;span&gt;在看&lt;/span&gt;，&lt;span&gt;文章更新比较慢，如果怕漏看可以&lt;/span&gt;星标一下，预祝小伙伴们新年快乐！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e06d315a7556c70a94062d3ff2903654</guid>
<title>什么样的人，在职场中更容易晋升？</title>
<link>https://toutiao.io/k/i08hgn2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span&gt;今天在知乎上看到了个提问：&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;什么样的人，在&lt;/span&gt;&lt;span&gt;职场中更容易晋升？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看到这样的问题，瞬间想起来了我自己的晋升之路了。这里自荐下哈，有兴趣请戳这篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484159&amp;amp;idx=1&amp;amp;sn=5d3b5d416a98f6a0d91e3d105b464924&amp;amp;chksm=cf65052af8128c3c1af6649b83d8ebdb5c0aad01f8bc9757976b7ab7418af68c155cdcf114d7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;7年，从“游戏少年”到大厂技术总监的逆袭之路&lt;/a&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然了，职场中总有人晋升很快。这事是很普遍的情况，大家身边也不乏有这样的案例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然每个人晋升的方式都会不一样，但也有一些规律性的东西确实能够加快晋升速度，特别是你职位还不算高的时候。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么今天这篇文章就来聊一聊，如何成为容易晋升的那类人吗？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前也有一些粉丝会问我：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“袁总，我是团队里资历最老的，对业务最熟悉，为什么上级就是不提拔我？”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些人没有被提拔上去，是没有管理的能力吗？&lt;/span&gt;&lt;span&gt;显然答案不全是，下面我们来简单探讨下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我觉得走上领导这条路的最重要的&lt;strong&gt;一个因素就是机遇&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我听过到过很多这样的抱怨，例如“我们一起毕业的同学，很多已经是管理者了，甚至有些人已经带了百来个人的团队了，我现在还是一个大头兵，我的学习能力不比他们弱啊”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;正如上面所描述，我们就会发现，同样是计算机专业，同样是某某985高&lt;/span&gt;校&lt;span&gt;毕业，进入了同一家企业，经过若干年后他们会发生天差地别的变化。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那些已经当上领导的，他们最正确行动就是选择了一个蓬勃发展的行业、一个蒸蒸日上的好公司、一个看重你的领导。虽然当时他可能不知道，还以为自己有多大的能耐呢，但是事实上他的强大是有一个大的平台在支撑着。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多关于如何选择公司的内容，可以戳我的这两篇文章：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484179&amp;amp;idx=1&amp;amp;sn=6f54101a7d01e121a6e31fe348f7dfbc&amp;amp;chksm=cf6504c6f8128dd0b4820975c2ecd3c7bf036b293a1b45c2d6023602cd9b349faf98e4c50b47&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;如何选择一家好公司&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484467&amp;amp;idx=1&amp;amp;sn=444be7648c7aac52a857f739c113251d&amp;amp;chksm=cf6503e6f8128af0852dbcff3f0a39aec3cea0e1fed38a7564718c14735e8df6464102b53299&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;为什么演员收入比科学家高这么多？给我们带来什么启示？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二个因素就是技术能力&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;俗话说的好：机会是留给有准备的人。就算天上掉馅饼，你也要起得早才能捡的到。所以有机遇还不足以晋升，还需要自身有比较强的技术能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于技术管理这条路来说，对技术能力的要求侧重点主要是：广和深。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;”广“&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;体现在业务上，需要有很深的理解，有丰富的经验，甚至能做到“走的桥比你吃的盐还多”。在技术上，能够广泛涉略，掌握的技术知识越多，内力就越加深厚。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;“深”&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;体现在技术上的宽度，提升领域内的技术深度。&lt;/span&gt;&lt;span&gt;在某个领域能够深入，能够熟悉其背后运行原理 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细内容可以戳我的另一文章:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484177&amp;amp;idx=1&amp;amp;sn=69c7bb78a7d282e2d383c086b6f8d599&amp;amp;chksm=cf6504c4f8128dd29c9d522aab7526d893dac8812f0ef07314b9620038d8377cca17e4b2a418&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;谈一谈程序员的职业发展路线&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三个因素就是软技能&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所谓软技能，也就是我们所说职业素养。例如：学习能力、沟通能力、时间管理能力等等，实在太多。&lt;/span&gt;&lt;span&gt;他们的软技能往往比普&lt;/span&gt;&lt;span&gt;通人强上不少。&lt;/span&gt;&lt;span&gt;如何提升软技能，可以参考我的文章。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484170&amp;amp;idx=1&amp;amp;sn=a8bd898480141c2b6fd8423da3dfa809&amp;amp;chksm=cf6504dff8128dc92b0380e458c51cf45e93bcf5f5648aad173ffc31e4990d3f2c56226e8279&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;技术总监7年总结，如何进行正确的沟通？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484164&amp;amp;idx=1&amp;amp;sn=24418c3da67489c1230f9b0c4cc4ad15&amp;amp;chksm=cf6504d1f8128dc7aa7b3a4ca0680cd784cdb505b2388aad2cc14e61615558ed58d466272785&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;总是感觉时间不够用？程序员如何管理时间？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484171&amp;amp;idx=1&amp;amp;sn=3ec9c3035ce484a29c5ac5532f937111&amp;amp;chksm=cf6504def8128dc8e3f9bee506a97b4e7889311c0c289140ba775c5db975850f6799e0b1a386&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员如何管理你的上级领导&lt;/a&gt;?&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484173&amp;amp;idx=1&amp;amp;sn=480800617fb07d318112e58d0624d976&amp;amp;chksm=cf6504d8f8128dce3970da24ecd68c804f49602bce3e8320435383e62be0ee9d33484d2531e9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员如何打造个人品牌？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四个因素就是承担&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个因素放到最后，因为这是制胜法宝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在公司众多竞争者当中，有比你代码写得优美的，有ppt比你写得好看的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些都不是最重要的，勇于承担、突破壁垒才是制胜法宝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是为什么我这个因素放到最后。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当领导抛出一个技术攻关，这时的你应该怎么做？不是躲在角落，唯恐不及，而是积极承担。你要抓住任何需要承担责任的机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然这种技术攻关，并不是经常有。那如何去挖掘这样的机会呢？有时候可以扩展的视野，主动积极去寻找一些机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举一个例子：这个模块的性能是否有优化的空间，这个流程是否可以再精简点，这个测试工作是否可以自动化，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只要用心总是能找到可以发挥的机会的。在这里给大家提供几个思路：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;• 可以从涉足人少的领域入手，涉足人少说明很冷门，也说明这里存在没人愿意碰，或者是容易被人遗漏。比如：日志模块，这个是很稳定的模块，如果你能发挥自己聪明才智，将这个模块的使用更加便捷，完善。你就实现了自己的价值了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;• 往往流程规范上也是一个角度，在小公司中，往往存在流程规范缺失，无规范约束的情况。这就是漏洞，你可以主动承担起流程建设的责任。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;• 主动帮助新人，既可以学到更多的专业知识，同时帮助了新人，使其能够成长，随着时间的推移，你在团队中的形象也就高大了起来，说不定会有“技术大牛”的称号，这种声音迟早会传到你的领导的耳朵里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;具体可以参考我的一篇文章《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484178&amp;amp;idx=1&amp;amp;sn=2d06c2170dd424aec2897c4a6db26016&amp;amp;chksm=cf6504c7f8128dd129e62737453337177ad1231f20bfae97f2ae6a44d06c21e82a781b10cc29&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;程序员进阶必备能力——晋升之道&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，如果你上面都做得很好，还是得不到晋升的机会，那就离职吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的这篇文章给你一些跳槽的建议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg4MTU0NTkxNA==&amp;amp;mid=2247484155&amp;amp;idx=1&amp;amp;sn=bbdab7253fdfecca431f5dfe57cec911&amp;amp;chksm=cf65052ef8128c3841cacfecfdeff21c0ade32a1dc8c0dfd6bb01169cda3cecd2e55123ad37b&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;迷茫、焦虑，该不该跳槽，怎样才是跳槽的正确姿势？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;我是袁吴范，一个教你如何提升认知、快速晋升的90后技术总监&lt;span&gt;，&lt;/span&gt;公众号：”pointers“&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;你可以长按这个二维码加我微信，空位不多。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;记得备注“技术方向”，我会将你拉进一个高品质群，&lt;/span&gt;&lt;span&gt;&lt;span&gt;群里有开发、产品、技术经理、技术总监&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PVZcww4Su3icxqW28rtgt1ib4Iia7XUeWT9EdiapicwxdyHQCKDTRFDWqvErKb0FiaLWzZXQkPANFr00h9RRBC249MHQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>764bd7a7a9a348a7c514a41456241605</guid>
<title>最终一致性，一致只会迟到，但绝不会缺席</title>
<link>https://toutiao.io/k/9q7yxnu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;又是这个封面，最近这个封面出现的比较频繁，别问为什么？问就是，这个封面 = 内容牛B&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章我们继续聊分布式相关的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到分布式系统，就一定绕不开“一致性”，这次我们说说：最终一致性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终一致性是现在大部分高可用的分布式系统的核心思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;估计有人对最终一致性不太熟，先来个简单介绍：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终一致性指的是&lt;strong&gt;系统中的所有分散在不同节点的数据，经过一定时间后，最终能够达到符合业务定义的一致的状态。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;划重点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;是数据一致性，不是事务一致性（ACID 是事务一致性）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存在条件：多个节点/系统；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不一致可能是暂时的，最终要一致（鬼知道“最终”是多久）&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好，正文开始。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;莫看江面平如镜，要看水底万丈深&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终一致性，一言以蔽之，过程松，结果紧。不管中间过程如何，结果必须符合业务需求，满足数据一致性的要求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然，在实现中，有各种花样百出的方案，但是本质的思想都是一样的。我们现在就来忽略那些乱花迷眼的过程，仔细探讨下最终一致性的本质。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;何事居穷道不穷，乱时还与净时同&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我刚入行不久的时候，能力有限，菜鸟一个，只能做一些小的功能模块。我印象最深的就是订单模块。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户下单，订单模块收到下单请求后，执行对应的订单业务逻辑。最终，会把订单插入到订单表，并返回下单结果给用户。用户结算后，订单模块就会去根据支付情况去更新订单状态。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3062130177514793&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdo8dutkibAEqJu749e96ib9JSwcRiaWWNB77zMZo76UnOYyicYqsqtVh3oAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;676&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这点事儿，对我这个技术渣渣来说，开始也着实费了一番手脚，不过最终也成了熟手，维护起这个模块来也驾轻就熟了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种简单的小日子过了一阵子后，新任务来了！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品经理告诉我，数据审计部门想要我维护的这个订单模块在订单完成后，能及时分发一份订单数据给他们。他们提供了一个接口，让我直接传数据给他们。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45662100456621&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdoEYhWv627ibJkWM27FCB6iaGob0GbAGqkcovZfGicltZVFZkX3IzI75Lpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;两个问题出现了：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;问题 1：用户等待时间变长&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最简单的实现就是我更新完订单数据后，再顺序去调用数据审计部门给的接口，把订单数据传过去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，从用户结算成功到更新订单状态这一系列的流程是同步的，假设这一系列流程所花费的时间是 n 毫秒。这就意味着，用户需要等待至少 n 毫秒。如果再加上传给数据审计部门的操作时间，假设为 m 毫秒，则整个用户就需要等待就 n+m 毫秒。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个功能用户等待时间成本上升，体验下降。如下图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5063113604488079&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdolg3NTgCvWASvvFn4jzI2O3HURUfYrbt9OwO2RxYXDC2QaJ0PIYFLicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;713&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;问题 2：部分成功，部分失败&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入新的接口后，某些时候调用这个接口可能会失败，比如网络问题啊，验证问题啊，接口服务失败啊，很多原因。那么问题来了，新接口失败的时候怎么处理？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果订单更新成功，传给数据审计部门的时候失败了，这种情况会让订单模块的后续处理变得很尴尬。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先你不可能返回给客户端说你这次结算失败了，请求就没失败，你凭什么说人家失败了？其次，你又不能说这次业务上就是成功的，因为数据审计其实还挺重要的，它是业务逻辑的重要组成部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真是进退两难。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4675984752223634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdomicZtpLs5QafwS7GnLicWZs3kRaQSiaAKA9IJtRKfKPcWf185MIfNIzfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;787&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个问题的解决方案其中之一就是&lt;strong&gt;最终一致性&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们以前谈到过 CAP，知道如果牺牲一定的一致性就可以保证分区容错性和可用性。而最终一致性则是不能保证同时让所有的数据当时都符合业务需求，但是我们能保证任何时候服务在内部出现问题的时候都是可对外服务的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;四哥我平时喜欢玩游戏，那我们就用一个淘宝买 Switch 的例子，来解释最终一致性：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你想在淘宝同时买一个 Switch 的数字版游戏和一台 Switch，那么你付完钱后，你就可以立刻得到数字版的游戏，但是，对于那台购买的 Switch，你就要等几天，等到快递投递到家才可以拿到。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;来梳理下这个例子的细节：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先淘宝上肯定得有个对顾客售卖 Switch 和数字游戏的商家去接受我们下的订单，并给你一个单号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你得到了一个数字版游戏，但是没拿到 Switch。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你不知道这个商家背后 Switch 是怎么给你准备的，是不是中间他没货了还得跑别的商家串货，又或者没货等了两天才发给你(延迟发货可以给出别的理由，不再赘述)。这些不重要，重要的是你明确对方接单了他就要完成这笔单子。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;你下单成功之后，你就有了保障，你最终会拿到你的 Switch，只是你可能不太肯定什么时候收到。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过了几天，你终于收到货了，恩，恭喜你成功入坑 Switch。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的例子就是我们说的最终一致性。但是，这里有个非常非常重要的东西还没有凸显出来，即到底是什么样的原因在驱使我们使用最终一致性？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案就是&lt;strong&gt;数据的分发&lt;/strong&gt;。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;纸上得来终觉浅，绝知此事要躬行&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么我们会出现需要最终一致性的情况呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为我们需要把数据分发到不同的地方上去，而由于分发数据到不同的地方，就会导致，可能中间分发过程中出现分发成功或者失败的不一致情况，就需要最终一致性这种思路来处理这些情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恩，分发数据……OK，你想到了吧？&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5162374020156775&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdojRUoQaicNLHBWiaS7sicdrnXr7ZuoX0eOqtwrnMSqibDhuZmRJ9W9vseug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;893&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没错，通过 MQ 分发消息就可以处理分发数据的情况，而这正是最终一致性最常用的实现手段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把要分发的数据打包成消息，再发送给 MQ 中间件。中间件会广播这些数据给所有想要收到这些消息的服务。这些收到消息的服务就根据自己的业务情况对数据进行独立的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到我们订单模块的那个例子，我们可以采用两种方式使用最终一致性。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先插入数据库，后发消息给数据审计&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3396880415944541&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdoLibwliblYnGgUv9vGiaGe7CodFmhwCCicUibvFHbEtDrJCON0v8kkvc6icqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1154&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方式，订单模块先更新订单状态。然后，把订单数据打包成消息发送到 MQ 中，订单模块的任务就结束了。剩下的任务就是由数据审计部门根据自己的业务，从 MQ 中获取消息后进行对应的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方法里，我们既保证数据库更新成功也保证数据被发送到了 MQ 中。最终，当数据审计部门收到消息并根据消息内容做完对应的处理后，则整体数据达到最终一致的状态。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只插入到 MQ 中&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4442231075697211&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdodoz2gqhYPrYfn6TqQicXSaL8iacN2aCDONCfNfn0Z3y6bDgUwtISHqlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1004&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个方式，订单模块直接收到请求后，将数据打包成消息放入到 MQ 中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，再由订单模块自己和数据审计部门的服务分别从 MQ 中拿到对应的消息，再各自根据自己的业务逻辑该更新数据库的更新数据库，该走自己的审计的走自己的审计，最终达到一致的状态。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小荷才露尖尖角,早有蜻蜓立上头&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以上的例子中，我们描述了最终一致性的核心思路，不保证数据状态能实时满足业务要求，但是就像我们在线购物一样，我们能保证在间隔了一段时间窗口后肯定能满足业务需求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而，虽然说起来简单，但是世间上的事情又哪里那么容易呢？根据业务的不同，最终一致性分化出了多种实现思路。比如，&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;重试 + 逆向模式&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们做支付时，需要记账，当记账不成功时，我们可能希望能尽可能的重试。当重试达到某种限制后，甚至我们还要通知上游系统去提供一个重试和取消接口，让下游能通知上游重发消息，或者先暂时取消操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;补救任务模式&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们做支付记账失败了，我们又尝试了重试 + 逆向模式取消了操作，那么此时就可以创建一个补救任务，等到后期可以保证记账成功的时候去执行这个任务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;异步消息模式&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在我们做转账的时候，我们肯定是要保证 A 转出后 B 转入这种业务是强一致性的。然而，可能此时又需要跨服务。同时，我们还想尽量保证性能。那么，这个时候我们就可以先把本地对数据库的写操作和要跨服务的消息做成事务，然后，后期再根据消息被处理的状态做整体事务的提交和回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，最终一致性的实现方式是多种多样的，但是，它始终逃不过一个核心，通过消息队列分发数据。在明白了这个根本原则后，以后我们理解各种各样的分布式事务，分布式共识等就会容易许多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;完&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微信公众号改变了推送规则，为了能正常看到文章，可以把“四猿外”公众号加上星标。&lt;img data-ratio=&quot;0.7068645640074211&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdoKZIRa931HVPXldVKey8sAxe0ALFevibneE8wKOtnelxtz4FosIsuZHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;539&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;img data-ratio=&quot;0.9852216748768473&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KRnSAFAwhBvGMf8eibUwRhdoBWWueMxDibQPgickFoiapkGDjias1yJHJHVBhy1WT8icTUKOzgiawW5Ta05Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484940&amp;amp;idx=1&amp;amp;sn=6ccff5e4aaa2d6d73ff4ee441b79991e&amp;amp;chksm=fcd8ca4dcbaf435bdbb2897a12b6da488fdd2f1bf276b70689902de6107937ce73fc19e3ec63&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;当年，我的架构师之路差点完蛋，幸亏了它&lt;/a&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484940&amp;amp;idx=1&amp;amp;sn=6ccff5e4aaa2d6d73ff4ee441b79991e&amp;amp;chksm=fcd8ca4dcbaf435bdbb2897a12b6da488fdd2f1bf276b70689902de6107937ce73fc19e3ec63&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484916&amp;amp;idx=1&amp;amp;sn=afb3997f6ae24fdff6ea23c96a383a4f&amp;amp;chksm=fcd8c9b5cbaf40a34e5d33f70e6050fbffa1b60b0f78d8f47a3fb150ad57f3e2dcb1caa3cd6d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;肝了3版才满意：分布式系统之CAP理论，我们对它的理解和误解&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&amp;amp;mid=2247484883&amp;amp;idx=1&amp;amp;sn=ae8c6aced4797e859fd2c224a11fea75&amp;amp;chksm=fcd8c992cbaf40848d237c4e499ec1ba7eff9fe5c3e9863af3a91e47782b5285b1673523e9cc&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师的成长之路，第一步该怎么迈？我给大家准备好了&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0479c8594dabac7842e7c8f241f16640</guid>
<title>突发流量洪峰应对之道：疫情期间京东口罩预约抢购系统优化</title>
<link>https://toutiao.io/k/eqjaf6k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;97170&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section hm_fix=&quot;307:246&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.216867469879518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPKvczq5SrlkBRBAKlgAvRpqFmGr0tOuQDLJwgwLIUZ3PibQU8icfwpHCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;83&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;编者按&lt;/section&gt;&lt;/section&gt;&lt;section data-bdless=&quot;spin&quot; data-bdlessp=&quot;280&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;不起眼的一滴水，融汇在一起可以成为溪流，溪流汇聚成江河，江河最终变成大海。面对2020年初突然爆发的疫情，京东技术人作为抗疫的一份子，在口罩预约抢购上夜以继日，为了让更多有效用户可以买到急需的防疫口罩而奋斗。在2021年初疫情又略有抬头的今天，回顾以往，更具意义。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;背景&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;突如其来的疫情，让口罩成为全国人民争相抢购的必需品。在疫情最严重的2020年2月份，京东组织力量采购了一批口罩，面向全国人民发售。由于库存十分有限，运营采用了预约+秒杀的营销模式，也就是用户先预约，到了指定时间才能通过秒杀系统抢购。&lt;/p&gt;&lt;p&gt;由于大家对口罩的需求太过强烈，2月14日活动一上线就遭到用户热捧，在社交媒体上的热度急速上升，甚至都上了微博热搜，造成了一定的社会影响。而在京东内部也升级为红色飓风事件，客服、公关等部门也都介入，为此次活动保驾护航。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.7753846153846153&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPvdRo2wJtJicH6JLTmQRQtjBkFIdxrVVkYrv3qexXdvldobkBkcL2Arg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图1：&lt;/span&gt;&lt;span&gt;微博上关于此次口罩预约抢购的讨论&lt;/span&gt;&lt;/section&gt;&lt;p&gt;   &lt;/p&gt;&lt;p&gt;强烈的用户需求带来了海量的用户流量，对相关系统形成了一定的挑战。可能有人会问，京东经历了这么多次618、11.11大促的考验，交易系统经历千锤百炼早就坚若磐石了，这次怎么还会存在挑战呢？这有两方面的原因：&lt;/p&gt;&lt;p&gt;1. 用户行为与大促不同。618、11.11大促虽然流量大，但流量分布在几百万sku上；而这次口罩抢购则不同，所有用户都只有一个目标，那就是抢口罩，所有流量都集中在特定sku上，形成了超级爆品。所有人都在浏览同一个sku，然后进行预约、加购物车、最后提交订单抢购；而整个交易流程链条非常长，上下游几十个系统，很容易出现薄弱环节造成事故。&lt;/p&gt;&lt;p&gt;2. 用户流量远超大促。由于用户行为发生变化，导致部分接口TPS远超历史极限值。以预约系统为例：&lt;/p&gt;&lt;section&gt;  &lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5946843853820598&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkP5XMd0WXMUCibjDibY2s5XAzUTxzRCTVAfBWBT8sAtGwGGfof7WwiaiaD1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;section&gt;图2:活动期间，预约系统主要接口TPS峰值&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;我们可以看到，单个sku读写TPS均远超历史峰值，而写TPS则是历史峰值的70倍。&lt;/p&gt;&lt;p&gt;由于这两点原因，交易系统虽然总体平稳，但仍存在着不小的挑战。&lt;/p&gt;&lt;p&gt;从2020年2月份到4月份期间，我们通过京东主站、京东健康、京喜等渠道共进行了上千场口罩预约活动，超过1亿人次进行了预约。为了适应新的用户场景、保障交易系统的平稳，我们紧急对相关系统进行了改造，期间遇到了各种突发状况和技术难点，所幸的是我们迅速对系统进行了改造，增强了应对突发流量洪峰的能力，保障了口罩预约的顺利进行。在这里以预约系统为例向大家做一下分享。&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;预约系统架构&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;先简单介绍一下预约系统。预约活动分为预约期和抢购期，用户在预约期进行预约，抢购期开始后才能购买。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42725880551301687&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPomMaNrE1IEP0ycaxlmR6gBUX9NVQibh5T1snOIDsWicQkJOVsT9n8dLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图3：预约活动状态&lt;/span&gt;&lt;/section&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;在预约期，用户打开商品详情页，就会调用预约系统“获取预约信息”接口获取预约活动详情，比如预约开始时间、抢购开始时间、预约人数等，展示在商品详情页：&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.9507389162561577&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPwPc36u13MMlPBiakU6tHfaxOYSeByWticDjfJXsSmBicgpA1y0u7I8G0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;406&quot;/&gt;&lt;/p&gt;&lt;section&gt;图4：口罩预约抢购商品详情页&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;用户点击“立即预约”按钮，就会调用预约系统的“添加预约资格”接口，记录用户的预约信息。&lt;/p&gt;&lt;p&gt;而到了抢购期，用户在结算页点击“提交订单”时，会调用预约系统的“校验预约资格”接口，查看用户是否进行了预约，如果没有预约就返回错误不让用户下单。&lt;/p&gt;&lt;p&gt;我们可以看到预约业务相对简单，只有一个写操作(添加预约资格)+N个读操作，其上下游主要有商详、购物车、结算页等。&lt;/p&gt;&lt;p&gt;预约系统在整个交易系统中的位置：&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.906392694063927&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPC1kicpnVLiaOKiclaBVibL1fhkh89Mib95FfP2FGHpNicibF7DcUbEVV2eLiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/section&gt;&lt;section&gt;图5：京东交易系统架构示意图&lt;/section&gt;&lt;p&gt;   &lt;/p&gt;&lt;p&gt;最后从技术角度介绍一下预约系统整体架构。&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6570155902004454&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPboLD8tAhuWDnsQp2ASItQMbxnSfK5XeiaNC2yj88B54OvAXRKmB0iaoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/p&gt;&lt;section&gt;图6：预约中台架构示意图&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;其中“预约SOA”模块提供接口给下游系统，承接所有的前端流量，在本次活动中被重点考验。主要接口有：获取预约信息、添加预约资格、校验预约资格。存储用到了缓存jimdb(redis集群)和mysql，redis存储预约活动信息和用户的预约信息，供预约SOA使用；mysql主要用于数据的持久化落地，并不直接提供服务。我们可以看到，redis作为存储层，其表现将直接决定预约系统的性能。&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;Day 1：突发流量，前方告急&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于运营人员没有预料到会有如此之大的流量，未提前向产品和研发报备，只是在活动开始前通知有一个口罩预约活动，未能引起大家的重视，导致没有提前进行备战值班。&lt;/p&gt;&lt;p&gt;预约活动开始后，研发侧进行例行检查时，发现口罩预约活动流量异常：每分钟有数万人进行预约，而且速度非常稳定甚至有加速的趋势(随着消息的传播，越来越多的用户进行了预约)。&lt;/p&gt;&lt;section&gt;  &lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2953249714937286&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPqAGIDpMicXahz1atk2ZD3tmp76KZWWNgiaUpsIA9cNzMsPvUqibL2CLQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;877&quot;/&gt;&lt;/p&gt;&lt;section&gt;图7：口罩预约活动第一天，用户进行预约调用次数监控，分钟级别&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;这个数字意味着什么呢？每小时有几百万用户预约了口罩，此时距活动结束还有数小时，如果不采取措施的话，将会有数千万人来预约这个口罩！这意味着单个sku的流量将接近11.11所有预约sku流量的总和！&lt;/p&gt;&lt;p&gt;这里暴露出了存在的&lt;span&gt;&lt;strong&gt;第一个问题&lt;/strong&gt;&lt;/span&gt;：缺乏对爆品sku的有效监控。虽然我们已经对主要接口的调用量设置了监控告警，但由于此次活动用户行为与大促不同，并未触发系统告警。研发侧虽然通过例行检查及时发现了问题，但仍存在较大风险，后面我们将会对此进行改进。&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于事先未演练过如此极端的场景，如此巨大的流量将会对预约系统带来怎样的挑战，大家心里都没有底；&lt;/span&gt;&lt;span&gt;对上下游（商详、购物车、结算页）会造成怎样的冲击，更是茫然。&lt;/span&gt;&lt;span&gt;此时我们已经看到，流量洪峰即将到来，将对整个交易系统带来巨大的冲击。&lt;/span&gt;&lt;span&gt;而要想减小冲击，唯一的办法就是：&lt;/span&gt;&lt;span&gt;提前终止预约活动，将流量挡在交易系统之前。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;发现问题的严重性后，研发侧立即将问题升级上报，迅速联系产品、上下游系统和业务方，提出预约系统的建议：立即结束预约活动。经过紧急沟通后，业务方考虑到口罩库存有限，最终同意了我们的建议，但要求已预约的所有用户能正常参与抢购。&lt;/p&gt;&lt;p&gt;&lt;span&gt;在按下“关闭预约”按钮的那一刻，看着新增预约人数断崖式下滑，所有人都松了一口气。&lt;/span&gt;&lt;span&gt;但大家来不及放松，因为此时整个交易系统面临着一系列棘手问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1. 预约系统：上一场预约活动已经提前结束，已经预约的数百万用户必须让他们正常抢购口罩。如果到了时间不能购买，必将引起这数百万用户的集中投诉，将会是P0级别的严重事故。&lt;/p&gt;&lt;p&gt;2. 购物车：预约活动有个选项叫“自动加购物车”，用户预约成功后会自动将sku添加到购物车，方便下单购买。运营人员没有预计到会有如此多的用户进行预约，在创建预约活动时配置了该选项，导致这数百万用户都将口罩添加到了购物车。在抢购开始前，大量用户将从购物车入口提交订单进行抢购，对购物车系统将会造成非常大的冲击。&lt;/p&gt;&lt;p&gt;3. 商品详情：除了从购物车入口进行抢购外，还有大量用户直接从商详页提交订单，如此大的流量访问同一个sku将会造成严重的热点key问题，在用户端的表现就是商详页面卡、白屏等，严重影响用户体验。&lt;/p&gt;&lt;p&gt;4. 结算页：有两套下单系统，主流程（日常下单系统）和独立秒杀系统（应对突发流量的抢购系统）。运营人员没有为口罩sku创建独立秒杀活动，用户下单时将会走主流程提交订单，将会严重影响主流程的性能。&lt;/p&gt;&lt;p&gt;此时&lt;span&gt;&lt;strong&gt;距抢购开始时间只有几小时&lt;/strong&gt;&lt;/span&gt;，研发侧必须在抢购开始前解决以上问题。&lt;/p&gt;&lt;p&gt;&lt;span&gt;考虑到时间的紧迫性，研发侧最终采取了如下措施应对紧急情况，确保用户能正常抢购：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1. 预约系统：启用了应急方案，同一个口罩sku新建一个只有抢购期预约活动，然后将上一场预约活动的数百万用户导入进来（相当于替这数百万用户预约了新建的这一场预约活动，用户侧无感知），到了抢购时间这些用户就能正常参与抢购了。这样既能让这批用户参与抢购，又不让新用户继续预约，达到了保护交易系统的目的。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18636363636363637&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPicWsLndRcOWvE4nFriaplYicZ8ubu3FNUoWVyGzbF9lmDyoriaaiayYPzcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;section&gt;图8：预约活动提前结束后，用户进行预约调用次数监控，分钟级别&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但在导入用户时，我们遇到了&lt;span&gt;&lt;strong&gt;第二个问题&lt;/strong&gt;&lt;/span&gt;：查询Mysql用户表遍历数百万用户，Mysql分页查询速度越来越慢，导致用户导入速度越来越慢。这是Mysql经常遇到的经典问题，虽然我们已经做了常规的SQL优化，但查询速度仍然达不到要求。我们查询SQL如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; MEMBER_TABLE a&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt; (&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; id1&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; MEMBER_TABLE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;) b &lt;span class=&quot;code-snippet__keyword&quot;&gt;ON&lt;/span&gt; a.id=b.id1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所幸的是，虽然查询速度较慢，但仍在抢购开始前将所有预约用户成功导入到下一场预约活动了，让他们可以正常参与抢购。&lt;/span&gt;&lt;span&gt;关于这个问题的最终解决方案，我们将在后面做介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2. 购物车：进行紧急处理避免了问题。&lt;/p&gt;&lt;p&gt;3. 商品详情：服务降级+缓存扩容解决热点key问题。&lt;/p&gt;&lt;p&gt;4. 结算页：为口罩sku创建独立秒杀活动，用户提交订单时走独立秒杀系统，保护了下单主流程。&lt;/p&gt;&lt;p&gt;经过各系统的一系列应急处理，我们终于在抢购开始前做好了准备工作，在抢购开始的那一刻看着蜂拥而来的用户请求，所有人悬着的心终于暂时放了下来。&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽&lt;/span&gt;&lt;span&gt;然第一天的预约活动顺利进行了，但暴露出了&lt;/span&gt;&lt;span&gt;&lt;strong&gt;第三个问题&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;预约系统缺乏熔断机制。&lt;/span&gt;&lt;span&gt;在之前多年的营销活动中，都没有出现过上百万人预约同一个sku的场景，因此并未对预约人数设置上限。&lt;/span&gt;&lt;span&gt;但是在当前场景下，我们急需限制预约人数上限，因此需要增加熔断机制。&lt;/span&gt;&lt;span&gt;按照正常的方案沟通、开发、测试、上线流程，至少需要一个礼拜才能完成上述功能，而此时距下场预约活动开始，&lt;/span&gt;&lt;span&gt;&lt;strong&gt;只剩不到12个小时的时间。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;Day 2：熔断机制&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所谓的熔断机制，就是在用户点击“立即预约”时，检查预约人数是否达到指定上限，如果到了就立即结束预约期不让新用户进行预约，预约活动进入“等待抢购”状态，已预约的用户等抢购开始后可以正常参与抢购。也就是图4中，将预约结束时间提前。&lt;/p&gt;&lt;p&gt;简化版流程图如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.0121703853955375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPpE2Oeq4icMrrj12Ih5zOGYX6g21uiccrrjkmg58E4T1JBN2fib7rzm5Jg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;section&gt;图9：用户立即预约流程图（灰色部分为熔断机制）&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;方案看起来相对简单，但实际开发时有诸多细节需要考虑，这里就不一一讲解了。&lt;/p&gt;&lt;p&gt;熔断机制上线后，每场活动的预约人数基本都控制在固定数字，爆品流量得到了控制，有效的保护了整个交易系统。但又引发了意料之外的第四个问题：热key问题。&lt;/p&gt;&lt;p&gt;  &lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;Day 3：热key问题&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;意想不到的是，熔断机制上线后用户的行为发生了很大的变化：所有用户都在预约期开始的第一秒进行预约，因为所有用户都知道预约人数达到上限后，就不能再预约了。这无形之中起到了流量聚集的作用，本来用户点“立即预约”的流量分布比较均匀，现在都抢在第一秒点击，于是就造成预约系统“添加预约资格”接口TPS飙升，达到了历史峰值的70倍（某种意义上来说，预约系统已经变成了秒杀系统，用户点击“立即预约”实际就是在进行秒杀抢购）。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2578890097932535&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPznIm6vLv9RVFicsuUlT7aUIGr2ic0MAiauevhALiaexLNapY3rUxvMxD4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;919&quot;/&gt;&lt;/p&gt;&lt;section&gt;图10：熔断机制上线后，用户添加预约调用量监控，分钟级&lt;/section&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;而“添加预约资格”接口需要多次写redis缓存，如此高的TPS带来了严重的问题：热key问题。&lt;/p&gt;&lt;p&gt;预约系统经历多年618、11.11大促的考验，常规场景下的热key问题早就解决了。但是很不幸，新场景下还是出现了新的热key问题。下面详细讲解为啥会出现热key问题，以及我们的解决方案。&lt;/p&gt;&lt;p&gt;&lt;span&gt;预约系统使用了2个redis集群（实际部署情况更复杂，这里简化处理了）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1. SKU集群：存放预约活动信息，M个分片，1主多从，写操作主实例，读操作从实例。&lt;/p&gt;&lt;p&gt;2. USER集群：存放用户的预约记录，N个分片，1主多从，写操作主实例，读操作从实例。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32962138084632514&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPCpSSuicIIzr2vI7w8bhv0qKnxMsL5mHjnvtBibHRnP2b6SQUkBuZvrLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/p&gt;&lt;section&gt;图11：SKU集群架构&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.35359116022099446&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkP2icAxZjLJItKHSkV0R3LGHSAuXDZW2iblsYHxz99X4NL6bY7O4yIicmzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;905&quot;/&gt;&lt;/p&gt;&lt;section&gt;图12：USER集群架构&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;“添加预约资格”接口流程图如下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5658536585365854&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPenHQnf8k45GAHYmxKoFAbJ4KAHa8JZSibkJibNLwWwQJJMumyp6jhc0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;615&quot;/&gt;&lt;/p&gt;&lt;section&gt;图13：“添加预约资格”接口流程图&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;从上面的流程图可以看到，用户在“立即预约”时，将要对USER集群进行2次写操作，对SKU集群进行1次读操作+1次写操作。下面我们一一分析：&lt;/p&gt;&lt;p&gt;1. 查询预约活动信息时读SKU集群，key为SKU_{skuid}。在爆品sku的情况下可能形成热点key，但实际上并未发生，因为进行了如下优化：&lt;/p&gt;&lt;p&gt;1. 本地JVM缓存。因为SKU活动信息很少发生变化，于是使用了guava进行了本次缓存，只有在guava缓存失效的情况下才会读取redis集群。根据线上监控数据，爆品活动的缓存命中率在99%以上，因此极大的降低了读redis集群的OPS。&lt;/p&gt;&lt;p&gt;2. SKU集群1主多从，读操作流量由个从库平均分摊，也能应付很高的TPS。&lt;/p&gt;&lt;p&gt;2. 写用户资格缓存时写USER集群，key为USERPIN{userpin}，用户维度的key分布在多个redis分片上，理论上能承受很高的OPS，也足以应付本场景。&lt;/p&gt;&lt;p&gt;3. 写用户预约列表缓存，同上。&lt;/p&gt;&lt;p&gt;4. 更新预约活动的预约人数，写SKU集群，key为COUNT_{skuid}。本操作主要是更新预约人数计数器，就是用户在商品详情页面看到当前有多少人预约了这个sku。该计数器是实时更新的，每一个新用户预约成功，该计数器就会+1；假设添加预约资格TPS为X万，那么写redis的OPS就为X万，所有写操作都打到一个分片的主库上，于是就形成了热点key。&lt;/p&gt;&lt;p&gt;&lt;span&gt;热点key直接将USER集群一个主库的CPU打到100%，造成大量写操作超时，进而导致“添加预约资格”接口TP飙升，可用率下降。&lt;/span&gt;&lt;span&gt;反映在用户端就是，大量用户点击“立即预约”时，会收到预约失败的提示，严重影响用户体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3086021505376344&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPMHPFQCjAgYFbRTdJWKO3IUgh3EcfzPAYDOXznib2qbp6LqGWhEAiaJ1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;930&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图14：&lt;/span&gt;&lt;span&gt;热key问题发生时，添加预约资格接口TP，分钟级&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;  &lt;/p&gt;&lt;p&gt;找到了热key发生的原因，解决方案就在眼前了：减少写USER集群的次数，把OPS降下来问题自然就迎刃而解了。&lt;/p&gt;&lt;p&gt;我们采取的方案是：不再实时更新预约人数，而是在JVM中先缓存预约人数，达到一定阈值后再批量更新预约人数计数器。原来是每次加1，改为每次加N，自然就把写操作的OPS降下来了。&lt;/p&gt;&lt;p&gt;本方案通过牺牲预约人数计数器的精确性，来保证接口的整体性能，得到了业务方的认可。具体流程图如下：&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.2430555555555554&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPNZQG2ibWcRk8eCvXvpDRXyxnb4pic8LXpTtyacicYkMvj2icAfbRQGXNXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;432&quot;/&gt;&lt;/p&gt;&lt;section&gt;图15：批量更新预约人数计数器&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;经过本次优化，终于解决了热点key问题，USER集群OPS降低到原来的2%, cpu使用率从100%降低了13%，接口TP999提升了500倍。&lt;/p&gt;&lt;p&gt;然后再启用JSF限流，限制“添加预约资格”接口的TPS，有效的解决了此问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.20933014354066987&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPOofAGQ0NyNPR54ksmWswulyabXtaaibvxhbAzhb9Y092TTiaGHCQuzMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;836&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图16：&lt;/span&gt;&lt;span&gt;限流后，添加预约资格接口TPS(双机房流量)，秒级&lt;/span&gt;&lt;/section&gt;&lt;p&gt;  &lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;101847&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.7735849056603774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/MrFJyDNenF9mACTibN7gUd82V69icthrkPIUYTibbmA8NejrmLV7pmVgATOicGuqOrgiaGUYLEyu0YaFKdyB4cJ2Dng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;53&quot; data-width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;总结 &amp;amp;后续改进&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-width=&quot;40%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，简单总结一下在此期间遇到的典型问题以及解决方案：&lt;/p&gt;&lt;p&gt;1. 爆品sku缺乏监控：预约系统新增了监控机制，定期扫描每个活动的预约人数，发现爆品sku通过邮件发送上下游系统，提醒他们做好值班保障；同时还通过电话语音告警，通知预约系统值班人员。&lt;/p&gt;&lt;p&gt;2. mysql查询慢：从mysql迁移到弹性数据库JED，同时对部分场景进行改造：预约人数较多的活动，查询redis集群获取所有用户pin，不再从数据库中查询。&lt;/p&gt;&lt;p&gt;3. 预约人数过多：熔断机制。&lt;/p&gt;&lt;p&gt;4. 热key问题：批量更新预约人数计数器，减少写redis集群的OPS。&lt;/p&gt;&lt;p&gt;5. 公平性问题：由于口罩库存有限，大量预约用户抢购失败，严重影响用户体验。针对此类稀缺爆品，我们开发了预约抽签模式：用户先预约，然后系统进行抽签摇号，只有中签用户才能购买，这里就先不介绍了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过如上一系列紧急改造，预约系统具备了应对突发流量洪峰的能力，达到了平稳运行、有效保护交易系统的目的。&lt;/span&gt;&lt;span&gt;不仅顺利进行了上千场口罩预约抢购活动，为部分用户送去了他们急需的口罩；&lt;/span&gt;&lt;span&gt;这些改造还直接应用在了2020年下半年的茅台预约抢购、京东PLUS盛典等重大活动中，有力的支撑了业务发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;作为的亲历此次备战的一线研发人员，能用实际行动在疫情期间为全国人民做出一点微小的贡献，我们内心感到无比的高兴和光荣。&lt;/p&gt;&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;7&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p data-autoskip=&quot;1&quot;&gt;此次口罩预约抢购活动，预约中台保障人员：架构师王晓烽、佘志东、王曦晨、产品童春斐、工程师饶正锋&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>