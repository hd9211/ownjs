<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1b241b77409b0f9aad775cb49326e1ad</guid>
<title>2022 年来了！抓紧啦！</title>
<link>https://toutiao.io/k/rf8ezjy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>66a36ec7f57eefd3000e5013dee6f268</guid>
<title>2022新年伊始，送你百篇干货文章</title>
<link>https://toutiao.io/k/kchudkd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>473e861d5a81473259ddb881da224647</guid>
<title>元宇宙孤岛</title>
<link>https://toutiao.io/k/t9szj0h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;Facebook 更名 Meta 后，元宇宙的风口自此一发不可收拾，甭管有没有关系，未来有没有投入，各个公司都开始构建自己的元宇宙，那怕公司更名跟元宇宙沾边，在资本市场上都能涨一波。&lt;/p&gt;&lt;p&gt;问题来了，每家都在搞元宇宙，试图把用户绑在自己的平台里，很很显然与元宇宙的初衷是违背的。如果各平台都不互通，还是元宇宙吗？这应该是元宇宙孤岛，不互通不互信就无法可靠传递，不发生互动就没有价值。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;无法互通的元宇宙就是假元宇宙。&lt;/p&gt;&lt;/blockquote&gt;&lt;section&gt;所幸，元宇宙有区块链的介入，为统一的标准、规范、协议互通提供了可能性，不用担心孤岛的存在，所有数据都在公链上，也不用担心被某个中心化的企业控制。这就对链本身的性能、可扩展性、易开发程度等等提出了更高的要求。&lt;/section&gt;&lt;section&gt;无疑，这条链必须是一条公链。如果是私链，直接断定就是假元宇宙。如果联盟链，也仅仅只能在一个联合体内互通互信，不能算完整意义上的元宇宙。撇开元宇宙不谈，只能存在一条公链吗？不现实，一条链终究会因拥堵导致效率低下，多链共存才是真实的存在。那么链与链之间怎么互通呢，这个问题从出现以太坊的挑战者之后就存在至今，业内也一直在做多种尝试：跨链、侧链等技术。&lt;/section&gt;&lt;section&gt;元宇宙的孤岛问题，就变成了区块链的孤岛问题，如何把区块链的孤岛问题解决了，上层建筑问题自然也就不在存在了。否则，你玩的所谓元宇宙，只是另一个有着高大上名字的在线社游而已。&lt;/section&gt;&lt;section&gt;单就一条公链本身的事务处理能力来看，远远不能支撑现实世界的真实业务场景。链与链之间的可靠价值传递也仅仅是在摸索期，还不成熟。这两大问题不解决，元宇宙很难有大作为。&lt;/section&gt;&lt;section&gt;现在的火，都是虚火，虚火过后，渣渣都没有，能不能落到实处，无从得知，交给时间吧。参照&quot;技术采用生命周期”图，如果无法跨越鸿沟，就会变成死亡陷阱。&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/EwukgicNDWBv8CrXwm2gCvQoBmKs0ewaLELnDKr4eJNbdzibhEneGHhQFlwexr2dPAmJlFeciac1uWKTWCkkLIib1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwMjE3MDIwMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/EwukgicNDWBswFxJHbKiad1jnJCFQiaWQrRnSdQGnrHiaicTyc2FR4CId2GQk1TABicoY87kQIeoeI1z3GnwanWMg1YQ/0?wx_fmt=png&quot; data-nickname=&quot;MavenTalk&quot; data-alias=&quot;mavenTalk&quot; data-signature=&quot;创业者，资深技术从业人员，关注技术人的认知提升和职业成长&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9b981ee6910d87ad8e1720cac86a1b34</guid>
<title>掰开揉碎系列之带你彻底了解Redis的Sorted-Set底层</title>
<link>https://toutiao.io/k/p8ceb0u</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.1&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set底层存储数据结构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.1.1 zskiplistNode结构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;zskiplistNode是跳表的结点结构，数据结构如下：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sds ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;backward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistLevel&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;forward&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } level[];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} zskiplistNode;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结构属性介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;● ele：存的是集合的值&lt;/p&gt;&lt;p&gt;● score：存的一个double类型的排序字段，通过这个字段来进行集合值的排序&lt;/p&gt;&lt;p&gt;● backward：链表指针，指向当天元素的前一个元素&lt;/p&gt;&lt;p&gt;● Level[]：跳表的高度&lt;/p&gt;&lt;p&gt;      • forward：指向下一个元素&lt;/p&gt;&lt;p&gt;      • span：跨度，当前结点到下一个结点中间元素的个数&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.1.2 zskiplist结构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;zskiplist就是跳表，它用来管理整个跳表的高度、长度、头结点、尾结点，其数据结构如下：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplist&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zskiplistNode&lt;/span&gt; *&lt;span class=&quot;code-snippet__title&quot;&gt;header&lt;/span&gt;, *&lt;span class=&quot;code-snippet__title&quot;&gt;tail&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} zskiplist;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结构属性介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;● header：指向跳表的头结点&lt;/p&gt;&lt;p&gt;● tail：指向跳表的尾结点&lt;/p&gt;&lt;p&gt;● length：跳表的高度&lt;/p&gt;&lt;p&gt;● level：当前调整的高度&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这两个结构就组成了我们Redis中的跳表的数据结构，下面我们先通过一张Redis的Sorted-Set图(&lt;strong&gt;图3.1&lt;/strong&gt;)来分别解释一下每个属性具体的含义：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LbKr6cC169KxdSLQv6Z2mNqTTa2PzK61OoiahsRPI6fUqCs5mZjrfiaXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.2&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set高度算法探究&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;根据第二节&lt;/span&gt;&lt;strong&gt;跳表的形成&lt;/strong&gt;&lt;span&gt;我们了解到可以提取结点来做多层索引来提高查询的效率，我们怎么来确定跳表的高度呢？对于结点不插入和删除，我们又怎么来实时调整跳表的高度呢？我们来看一下Redis是怎么做的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ZSKIPLIST_MAXLEVEL 64 &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;span class=&quot;code-snippet__meta-keyword&quot;&gt;define&lt;/span&gt; ZSKIPLIST_P 0.25      &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslRandomLevel&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; ((random()&amp;amp;&lt;span class=&quot;code-snippet__number&quot;&gt;0xFFFF&lt;/span&gt;) &amp;lt; (ZSKIPLIST_P * &lt;span class=&quot;code-snippet__number&quot;&gt;0xFFFF&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        level += &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (level&amp;lt;ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;根据代码我们先回答一下第一个问题：怎么来确定跳表的高度？回答：&lt;strong&gt;随机生成&lt;/strong&gt;，对没有看错，就是随机生成，但是为了保证查询的性能，我们尽量让找出一套算法能够达到一个&lt;strong&gt;O(log(N))&lt;/strong&gt;的时间复杂度，我们先看一下这个函数，&lt;strong&gt;random()&lt;/strong&gt;会生成一个&lt;strong&gt;32位&lt;/strong&gt;的随机数，跟 &lt;strong&gt;0xFFFF&lt;/strong&gt;做与操作，其实就是把高&lt;strong&gt;16位&lt;/strong&gt;清零，得到一个处于&lt;strong&gt;0x0000-0xFFFF&lt;/strong&gt;的数字，然后每次循环判断生产的这个数字是否小于&lt;strong&gt;自己的1/4&lt;/strong&gt;，如果成立则高度+1，循环结束在判断一下生产的&lt;strong&gt;level&lt;/strong&gt;是否小于 &lt;strong&gt;&lt;span&gt;64层&lt;/span&gt;&lt;/strong&gt;，小于的话，就用生成的层数，否则用&lt;strong&gt;&lt;span&gt;64层&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们看一下推导过程，我们定义随机因子为p：&lt;/p&gt;&lt;p&gt;● 结点层数至少为1，而大于1的结点层数，满足一个概率分布。&lt;/p&gt;&lt;p&gt;● 结点层数恰好等于1的概率为1 - p&lt;/p&gt;&lt;p&gt;● 结点层数大于等于2的改为为p，而结点层数等于2的概率为p * (1 - p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于3的概率为p p，而结点层数等于3的概率为p p * (1-p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于4的概率为p p p，而结点层数等于4的概率为p p p * (1-p)&lt;/p&gt;&lt;p&gt;● 结点层数大于等于5的概率为p p p p，而结点层数等于5的概率为p p p p * (1-p)&lt;/p&gt;&lt;p&gt;..........&lt;/p&gt;&lt;p&gt;那么，一个结点的&lt;strong&gt;&lt;span&gt;平均层数&lt;/span&gt;&lt;/strong&gt;的计算公式如下：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1231481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LEOet6gWT5KNDHt4dsjsibfhglYAqXI7thhYdbOmy4vzA9BDkSma9Sbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Redis定义的随机因子p是 1/4&lt;/span&gt;&lt;/strong&gt;，那通过这个公式能够得&lt;strong&gt;&lt;span&gt;平均高度&lt;/span&gt;&lt;/strong&gt;是：&lt;strong&gt;&lt;span&gt;1.33&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.3&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set头结点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;初始化源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;源代码：创建一个skiplist&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplist *&lt;span class=&quot;code-snippet__title&quot;&gt;zslCreate&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; j;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplist *zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl = zmalloc(&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(*zsl));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;level = &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;header = zslCreateNode(ZSKIPLIST_MAXLEVEL,&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (j = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; j &amp;lt; ZSKIPLIST_MAXLEVEL; j++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;header-&amp;gt;level[j].forward = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;header-&amp;gt;level[j].span = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;header-&amp;gt;backward = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;tail = &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;创建一个skiplistNode结点:&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode *&lt;span class=&quot;code-snippet__title&quot;&gt;zslCreateNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; level, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *zn =&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zmalloc(&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(*zn)+level*&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(struct zskiplistLevel));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zn-&amp;gt;score = score;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zn-&amp;gt;ele = ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; zn;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们通过&lt;strong&gt;&lt;span&gt;图3.2&lt;/span&gt;&lt;/strong&gt;来了解一下，头结点初始化后结构是什么样的。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7123786&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Ljpv7UxNwaOFfzU21jPZl3sickK21SU0asxhYg63UoYuhJF8BtYYm1xA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;824&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.4&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set插入元素源码分析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.4.1 插入函数解析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;下面我们来通过分析一个元素的插入流程来详细的了解一下源码，我们先看一下整个函数，然后我们会逐步的拆解每一次循环的含义。&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode *&lt;span class=&quot;code-snippet__title&quot;&gt;zslInsert&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rank[ZSKIPLIST_MAXLEVEL];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i, level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    serverAssert(!isnan(score));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        rank[i] = i == (zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : rank[i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank[i] += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    level = zslRandomLevel();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (level &amp;gt; zsl-&amp;gt;level) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank[i] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i] = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span = zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;level = level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zslCreateNode(level,score,ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[i].forward = update[i]-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].forward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[i].span = update[i]-&amp;gt;level[i].span - (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].span = (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = level; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i]-&amp;gt;level[i].span++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;backward = (update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == zsl-&amp;gt;header) ? &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; : update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;tail = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过对整体函数的解析，我们发现插入一个元素基本上分为4个步骤：&lt;/p&gt;&lt;p&gt;1、查到插入的位置(查询过程)；&lt;/p&gt;&lt;p&gt;2、生产新结点高度并调整跳表的高度；&lt;/p&gt;&lt;p&gt;3、插入元素；&lt;/p&gt;&lt;p&gt;4、调整backward并更新跳表的长度；&lt;/p&gt;&lt;p&gt;下面我们统一逐步分析每一次循环的代码来了解一下整个插入过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4.2 查到插入的位置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们假如跳表现在已经有元素&lt;strong&gt;&lt;span&gt;1、11、23&lt;/span&gt;&lt;/strong&gt;三个元素了，我们想插入一个新元素&lt;strong&gt;&lt;span&gt;21&lt;/span&gt;&lt;/strong&gt;，如&lt;strong&gt;&lt;span&gt;图3.3&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lsr7bGEkibU0MH023EibUl16KqpYia1gRUmAdZcyxtYgSpiamDkia0VIvOjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们先看一下找到插入位置的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; rank[ZSKIPLIST_MAXLEVEL];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i, level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;serverAssert(!isnan(score));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  rank[i] = i == (zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;) ? &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; : rank[i+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rank[i] += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;查找节点(score=21，level=2)的插入位置，逻辑如下：&lt;/p&gt;&lt;p&gt; 1）&lt;strong&gt;&lt;span&gt;第一次for&lt;/span&gt;&lt;/strong&gt;循环，&lt;strong&gt;&lt;span&gt;i=1&lt;/span&gt;&lt;/strong&gt;。x现在为跳跃表的&lt;strong&gt;&lt;span&gt;头节点&lt;/span&gt;&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt; 2）现在&lt;strong&gt;&lt;span&gt;i&lt;/span&gt;&lt;/strong&gt;的值与&lt;strong&gt;&lt;span&gt;zsl-&amp;gt;level-1&lt;/span&gt;&lt;/strong&gt;相等，所以&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;0;&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;header-&amp;gt;level[1].forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;header-&amp;gt;level[1].forward-&amp;gt;score(1)&lt;/span&gt;&lt;/strong&gt;小于要插入值的&lt;strong&gt;&lt;span&gt;score&lt;/span&gt;&lt;/strong&gt;，所以while循环可以进入，&lt;strong&gt;&lt;span&gt;rank[1]=1&lt;/span&gt;&lt;/strong&gt;，x赋值为第一个节点; &lt;/p&gt;&lt;p&gt;4）第一个节点的第1层的forward指向NULL，所以while循环不会再进入，经过第一次for循环，&lt;strong&gt;&lt;span&gt;rank[1]=1，x&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;都为第一个节点&lt;strong&gt;&lt;span&gt;(score=1)。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8L5QsOwcTAkzLoEqEOR5cECfNoSr1GeTw9icE4Bw8x2lGKtMZUW93S9kQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;5）for循环进入&lt;strong&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;/strong&gt;，i=0。x为跳跃表第一个节点(score=1) 6）现在i的值与&lt;strong&gt;&lt;span&gt;zsl-&amp;gt;level-1&lt;/span&gt;&lt;/strong&gt;不相等，所以&lt;strong&gt;&lt;span&gt;rank[0]&lt;/span&gt;&lt;/strong&gt;等于&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值赋值为&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;; 6）&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0]-&amp;gt;forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].foreard-&amp;gt;score(11)&lt;/span&gt;&lt;/strong&gt;小于要插入的score，所以while循环可以进入，&lt;strong&gt;&lt;span&gt;rank[0]=2&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;为第二个节点(score=11)。 &lt;/p&gt;&lt;p&gt;7）&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0]-&amp;gt;forward&lt;/span&gt;&lt;/strong&gt;存在，并且&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].foreard-&amp;gt;score(23)&lt;/span&gt;&lt;/strong&gt;大于要插入的&lt;strong&gt;&lt;span&gt;score&lt;/span&gt;&lt;/strong&gt;，所以while不会再进入，经过第二次for循环，&lt;strong&gt;&lt;span&gt;rank[0]=2，x&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;update[0&lt;/span&gt;&lt;/strong&gt;]都为第二个节点(score=11)，如&lt;strong&gt;&lt;span&gt;图3.5&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LfgcibuSryCd673iaOAjcntASCOO7AQQAOIKMXyKB5cawibC20p1CVFfiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这个时候我们就找到插入位置在&lt;strong&gt;&lt;span&gt;元素11&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;元素23&lt;/span&gt;&lt;/strong&gt;中间。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.3 调整跳表的高度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;level = zslRandomLevel();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (level &amp;gt; zsl-&amp;gt;level) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rank[i] = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i] = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].span = zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  zsl-&amp;gt;level = level;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;假如我们生成的高度是&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，这个时候我们需要调整一下整个跳表的高度，此时i的值是&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，level的值是&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，所以我们只能进入一次循环，此时&lt;strong&gt;&lt;span&gt;rank[2] = 0，update[2]&lt;/span&gt;&lt;/strong&gt;指向头结点，&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span = 3，zsl-&amp;gt;level = 3，&lt;/span&gt;&lt;/strong&gt;调整完高度，如&lt;strong&gt;&lt;span&gt;图3.6&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LncMPaQn4XS8HXlobicFX0Z2QFQJfxz5iaLCSVdoGwqicDuhI91tlmjib4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.4 插入元素&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zslCreateNode(level,score,ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;level[i].forward = update[i]-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].forward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x-&amp;gt;level[i].span = update[i]-&amp;gt;level[i].span - (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    update[i]-&amp;gt;level[i].span = (rank[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] - rank[i]) + &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = level; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i]-&amp;gt;level[i].span++;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;level的值为3，所以for循环可以执行三遍，插入过程如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第一遍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward为update[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]的forward&lt;/span&gt;&lt;/strong&gt;节点，即x-&amp;gt;level[0].forward为score=23的节点;&lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[0]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[0]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点；&lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[0]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;0&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;update[0]-&amp;gt;level[0].span=1&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[0].span=1、update[0]-&amp;gt;level[0].span=1&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;我们再看一下经过第一次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.7&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5175926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lvg06YE9KYwPAXLDl9HFjLNkPSmia7QBxLdyy9OZGmITk4hnQibicgeibjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第二遍&lt;/span&gt;&lt;/strong&gt;： &lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;为&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;节点，即&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[1].forward&lt;/span&gt;&lt;/strong&gt;为NULL； &lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[1]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[1]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点； &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[1]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;update[1]-&amp;gt;level[1].span&lt;/span&gt;&lt;/strong&gt;等于&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[1].span=1 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;4）&lt;strong&gt;&lt;span&gt;update[1]-&amp;gt;level[1].span=2。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们再看一下经过第二次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.8&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5175926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LC73N7Y9NEF60icwMRf0wO2qFRN1b3E3KcEiaW8iacHrrR2ZNEibvwkc3Qw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;for循环第三遍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1）&lt;strong&gt;&lt;span&gt;x&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;为&lt;strong&gt;&lt;span&gt;update[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;forward&lt;/span&gt;&lt;/strong&gt;节点，即&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[2].forward&lt;/span&gt;&lt;/strong&gt;为NULL; &lt;/p&gt;&lt;p&gt;2）&lt;strong&gt;&lt;span&gt;update[2]&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;level[2]&lt;/span&gt;&lt;/strong&gt;的下个节点为新插入的节点； &lt;/p&gt;&lt;p&gt;3）&lt;strong&gt;&lt;span&gt;rank[2]&lt;/span&gt;&lt;/strong&gt;的值为&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;，因为&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span&lt;/span&gt;&lt;/strong&gt;等于跳跃表的总长度&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;，所以&lt;strong&gt;&lt;span&gt;x-&amp;gt;level[2].span=1； &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;4）&lt;strong&gt;&lt;span&gt;update[2]-&amp;gt;level[2].span=3。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们再看一下经过第三次for循环，我们的结构，如&lt;strong&gt;&lt;span&gt;图3.9&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LfN0YFXjhrOBeTiaPWhPItgcxP1GhZ5dkzWV9QFj5jQUuSt9ZtFrliboA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，我们的插入过程完成。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.4.5 调整backward并更新跳表的长度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x-&amp;gt;backward = (update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;] == zsl-&amp;gt;header) ? &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; : update[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  zsl-&amp;gt;tail = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zsl-&amp;gt;length++;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;x-&amp;gt;backward&lt;/span&gt;&lt;/strong&gt;的值等于，判断&lt;strong&gt;&lt;span&gt;update[0] == zsl-&amp;gt;header&lt;/span&gt;&lt;/strong&gt;是否相等，如果想当代表是个空跳表，则赋值为NULL，如果不是的话，就把update[0]的赋给它，也就是说指向&lt;strong&gt;&lt;span&gt;score = 11&lt;/span&gt;&lt;/strong&gt;的&lt;strong&gt;&lt;span&gt;backward&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;第二步判断是否是尾结点，如果不是则调整对应的backward，如果是就更新跳表的尾部指向。&lt;/p&gt;&lt;p&gt;最后再更新跳表的&lt;strong&gt;&lt;span&gt;length = 4&lt;/span&gt;&lt;/strong&gt;，调整完的结构如&lt;strong&gt;&lt;span&gt;图3.10&lt;/span&gt;&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4601852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LJFxp12Sx3wOyWTIY0YU9HIJvhT5oHuLia8xx7ak6ib9ZjXEKACM5pVzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;好了，我们的插入元素整个源码分析到此告一段落，本小节通过分析插入&lt;strong&gt;元素21&lt;/strong&gt;的过程带大家分析每一句源码的涵义，希望对大家了解插入过程有所帮助。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一个元素源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;下面通过zslGetRank函数来看一下查询一个元素过程，下面是具体的源代码：&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslGetRank&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rank = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;))) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            rank += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;ele &amp;amp;&amp;amp; sdscmp(x-&amp;gt;ele,ele) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; rank;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们可以通过源代码来看，其实查找一个元素跟我们插入过程中&lt;strong&gt;查找插入位置&lt;/strong&gt;的代码基本一致，具体查询过程此小节就不详细展开了，(可以查看插入过程查找插入位置的详细讲解)。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.6&lt;/strong&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;strong/&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Sorted-Set查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;多个元素源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.6.1 整体源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;查询多个元素我们通过&lt;strong&gt;&lt;span&gt;zrange&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;zrevrange&lt;/span&gt;&lt;/strong&gt;的命令的实现来进行源码分析：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zrangeGenericCommand&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; reverse)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    robj *key = c-&amp;gt;argv[&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    robj *zobj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; withscores = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; start;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; end;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; llen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rangelen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    .....&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    llen = zsetLength(zobj);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) start = llen+start;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (end &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) end = llen+end;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) start = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; end || start &amp;gt;= llen) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReply(c,shared.emptymultibulk);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (end &amp;gt;= llen) end = llen&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    rangelen = (end-start)+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyMultiBulkLen(c, withscores ? (rangelen*&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;) : rangelen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_ZIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *zl = zobj-&amp;gt;ptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *eptr, *sptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; *vstr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; vlen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; vlong;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            eptr = ziplistIndex(zl,&lt;span class=&quot;code-snippet__number&quot;&gt;-2&lt;/span&gt;-(&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*start));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            eptr = ziplistIndex(zl,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;*start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverAssertWithInfo(c,zobj,eptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sptr = ziplistNext(zl,eptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (rangelen--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,eptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; sptr != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,ziplistGet(eptr,&amp;amp;vstr,&amp;amp;vlen,&amp;amp;vlong));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (vstr == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyBulkLongLong(c,vlong);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyBulkCBuffer(c,vstr,vlen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (withscores)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyDouble(c,zzlGetScore(sptr));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                zzlPrev(zl,&amp;amp;eptr,&amp;amp;sptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                zzlNext(zl,&amp;amp;eptr,&amp;amp;sptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_SKIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zset *zs = zobj-&amp;gt;ptr;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zskiplist *zsl = zs-&amp;gt;zsl;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zskiplistNode *ln;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        sds ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (reverse) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = zsl-&amp;gt;tail;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ln = zslGetElementByRank(zsl,llen-start);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = zsl-&amp;gt;header-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (start &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                ln = zslGetElementByRank(zsl,start+&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;(rangelen--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            serverAssertWithInfo(c,zobj,ln != &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ele = ln-&amp;gt;ele;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            addReplyBulkCBuffer(c,ele,sdslen(ele));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (withscores)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                addReplyDouble(c,ln-&amp;gt;score);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            ln = reverse ? ln-&amp;gt;backward : ln-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverPanic(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unknown sorted set encoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;这个过程就非常简单了，我们通过两张图来分别描述一下从头取元素，从尾取元素的过程。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.6.2 Zrange查询过程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;命令：zrange mytest 0 -1，&lt;strong&gt;从头部取元素的过程&lt;/strong&gt;，1 -&amp;gt; 11 -&amp;gt; 21 -&amp;gt; 23 &lt;strong&gt;结束&lt;/strong&gt;。如&lt;strong&gt;图3.12&lt;/strong&gt;**：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4796296&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LjMFtzFM7H1AicDGA2FxQ28pg7VbhG6G5dIFImSWsoZQVBGnuusm0BVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.6.3 Zrevrange查询过程&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;命令：zrevrange mytest 0 -1，&lt;strong&gt;从尾部取元素的过程&lt;/strong&gt;，23 -&amp;gt; 21 -&amp;gt; 11 -&amp;gt; 1 &lt;strong&gt;结束&lt;/strong&gt;。如&lt;strong&gt;图3.13**&lt;/strong&gt;：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4740741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8L2wtISuPyU3EcM6O9TibMVuf3ukU6fFtibfBAo8ZicibPulP0EUSf1AK27A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.7&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Sorted-Set删除元素源码分析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.7.1 删除结点整体源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;本小节通过删除一个元素的过程来分析一下源代码，看具体过程是什么样的，首先我们还是来介绍一下删除函数的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslDelete&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; score, sds ele, zskiplistNode **node)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                     sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x &amp;amp;&amp;amp; score == x-&amp;gt;score &amp;amp;&amp;amp; sdscmp(x-&amp;gt;ele,ele) == &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zslDeleteNode(zsl, x, update);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!node)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;              &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            zslFreeNode(x);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            *node = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;删除结点的过程我们通过源代码能够得知分为两个步骤：&lt;/p&gt;&lt;p&gt;1、查找要删除的结点；&lt;/p&gt;&lt;p&gt;2、设置span和forward；&lt;/p&gt;&lt;p&gt;假如我们想删除&lt;strong&gt;&lt;span&gt;score = 21&lt;/span&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;span&gt;ele = hij&lt;/span&gt;&lt;/strong&gt;的的过程是什么样的？请接着往下看：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.7.2 查找删除结点源码分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先看一下具体代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  update[i] = x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;中间每次循环的查询过程省略了(如果想了解请查看3.4小节或者3.6小节)，通过循环赋值，最后得出&lt;strong&gt;update[2] &lt;/strong&gt;指向&lt;strong&gt;header、update[1] &lt;/strong&gt;指向&lt;strong&gt;score = 1的结点、update[0]指向score = 11的结点&lt;/strong&gt;，如&lt;strong&gt;图3.14&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4981481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LibHyTqibUwU1CJ2AkvDibwL70DIiaicqB8MgE6sqFr1AIzXQFjwKM0nuMYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.7.3 设置span和forward&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;先看一下具体的源代码：&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslDeleteNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i &amp;lt; zsl-&amp;gt;level; i++) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (update[i]-&amp;gt;level[i].forward == x) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span += x-&amp;gt;level[i].span - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].forward = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            update[i]-&amp;gt;level[i].span -= &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        x-&amp;gt;level[&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;].forward-&amp;gt;backward = x-&amp;gt;backward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;tail = x-&amp;gt;backward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt;(zsl-&amp;gt;level &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; zsl-&amp;gt;header-&amp;gt;level[zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;].forward == &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        zsl-&amp;gt;level--;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zsl-&amp;gt;length--;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们看一下更新每个update结点后的span和forward之后，跳的结构是什么样的？如&lt;strong&gt;图3.15&lt;/strong&gt;所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5305556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8Lib6T6oc7wUJR2FcEX2mEnoLxEMI7cd3WpSsZeavLwTW2RBQLwJd5RpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;最后再看一下调整backward之后，跳的结构是什么样的？如图3.16所示：&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5351852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LPgqH8wepNOgWz7T4odMIvXPA5FvzW8LpicicRDDjpibPZKBNPiar6UryJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;至此，我们的删除结点动作完成。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.8&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Redis为什么要选择跳表&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;通过对第二章和第三章节的了解，我们知道Redis的有序集合使用跳表这样的数据结构，那为什么Redis要使用跳表呢？有没有更好的选择呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.1 跳表 VS 哈希表&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;哈希表也叫散列表，可以根据一个key找到具体的一个value，它通过一定的算法把key映射到不同的Hash桶，在Hash冲突不是很大的时间它的时间复杂度是&lt;strong&gt;&lt;span&gt;O(1)&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;哈希表可以很容易的通过一个key，来找到相对应的value，那为什么不用哈希表呢？&lt;/p&gt;&lt;p&gt;1、哈希表无序，我们的想实现一个有序的数据结构，这个不满足需求&lt;/p&gt;&lt;p&gt;2、没办法范围查询&lt;/p&gt;&lt;p&gt;基于有序和范围查询的特性跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.2 跳表 VS 平衡树&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;平衡树是两个子树高度差绝对值不超过 1，并且左右两个子树也都是平衡二叉树这样的数据结构，为了保持树的平衡需要在插入、删除的时候做左旋、右旋的操作来让树保持平衡，红黑树更复杂(具体红黑树的结构这里不做详细赘述)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;时间复杂度对比：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;查询&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;插入&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:0.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;跳表&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:1.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr opera-tn-ra-comp=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@0&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;平衡树&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@1&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@2&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/td&gt;&lt;td colspan=&quot;1&quot; rowspan=&quot;1&quot; opera-tn-ra-cell=&quot;_$.pages:0.layers:0.comps:3.col1:1.col1:75.classicTable1:2.td@@3&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;O(log(N))&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;我们通过对比发现，几乎平衡树在查询、插入、删除的时间复杂度跟跳表一模一样，那我们为啥不选择平衡树呢？&lt;/p&gt;&lt;p&gt;1、实现难易，跳表实现比较简单，平衡树实现很复杂&lt;/p&gt;&lt;p&gt;2、范围查询方便，跳表只需要通过找到范围开始结点，然后顺着前后把元素找齐就行了，平衡树如果范围查询，则很困难，我们先要找到指定范围的小值之后，再通过中序遍历继续寻找其他不超过大值的结点。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;针对数据结构的实现、范围查询这两点来看，跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.3 跳表 VS Btree&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Btree是为了磁盘存储设置设计的一种多叉平衡查找树，像我们了解的数据库Mysql的引擎Myisam就是B树，Innodb是B+树(&lt;strong&gt;图3.17&lt;/strong&gt;)，我们其实很容易能够想到我们的Mysql不仅支持单键查询，也支持范围查询。那我们是不是可以用B+树来实现呢？&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4179255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uGulibEGIdT9UIaESdZpy4a89N7iawtb8LxibSnxseHCZdMia67ibP1WVYz2iczeAuB1ibmHhUlcnLRZTMVRf8m6buKyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;其实是为了&lt;strong&gt;更省空间&lt;/strong&gt;，Redis是内存型软件，不是基于硬盘索引这点也要考虑，Btree的结点出了数据还有左右两个指针，而跳表只有一个一个向后的指针，占用的空间更少。所以针对空间跳表更具优势。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.8.4 作者的选择的原因&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1) They are not very memory intensive. It&#x27;s up to you basically. Changing parameters about the probability of a node to have a given number of levels will make then less memory intensive than btrees.(更省内存) &lt;/p&gt;&lt;p&gt;2) A sorted set is often target of many ZRANGE or ZREVRANGE operations, that is, traversing the skip list as a linked list. With this operation the cache locality of skip lists is at least as good as with other kind of balanced trees.(范围查询比平衡树方便) &lt;/p&gt;&lt;p&gt;3) They are simpler to implement, debug, and so forth. For instance thanks to the skip list simplicity I received a patch (already in Redis master) with augmented skip lists implementing ZRANK in O(log(N)). It required little changes to the code.About the Append Only durability &amp;amp; speed, I don&#x27;t think it is a good idea to optimize Redis at cost of more code and more complexity for a use case that IMHO should be rare for the Redis target (fsync() at every command). Almost no one is using this feature even with ACID SQL databases, as the performance hint is big anyway.About threads: our experience shows that Redis is mostly I/O bound. I&#x27;m using threads to serve things from Virtual Memory. The long term solution to exploit all the cores, assuming your link is so fast that you can saturate a single core, is running multiple instances of Redis (no locks, almost fully scalable linearly with number of cores), and using the &quot;Redis Cluster&quot; solution that I plan to develop in the future.(更简单)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据这三个小节的论述相信大家已经对Redis选择跳表而不是哈希表、平衡树、Btree的原因已经有了较深的了解了吧。&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;3.9&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;公共函数源码解析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;3.9.1 获取跳表的长度&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zsetLength&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; robj *zobj)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; length = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_ZIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        length = zzlLength(zobj-&amp;gt;ptr);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (zobj-&amp;gt;encoding == OBJ_ENCODING_SKIPLIST) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        length = ((&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; zset*)zobj-&amp;gt;ptr)-&amp;gt;zsl-&amp;gt;length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        serverPanic(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Unknown sorted set encoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; length;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.2 按照Rank查到该结点&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;zskiplistNode* &lt;span class=&quot;code-snippet__title&quot;&gt;zslGetElementByRank&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplist *zsl, &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; rank)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zskiplistNode *x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; traversed = &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    x = zsl-&amp;gt;header;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; (i = zsl-&amp;gt;level&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;; i--) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (x-&amp;gt;level[i].forward &amp;amp;&amp;amp; (traversed + x-&amp;gt;level[i].span) &amp;lt;= rank)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            traversed += x-&amp;gt;level[i].span;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            x = x-&amp;gt;level[i].forward;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (traversed == rank) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.3 批量增加写数据到缓冲区&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addReplyBulkCBuffer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; *p, &lt;span class=&quot;code-snippet__keyword&quot;&gt;size_t&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyLongLongWithPrefix(c,len,&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;$&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReplyString(c,p,len);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    addReply(c,shared.crlf);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.4 写double类型的数据到缓冲区&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;addReplyDouble&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(client *c, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;char&lt;/span&gt; dbuf[&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;], sbuf[&lt;span class=&quot;code-snippet__number&quot;&gt;128&lt;/span&gt;];&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dlen, slen;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (isinf(d)) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReplyBulkCString(c, d &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;inf&quot;&lt;/span&gt; : &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;-inf&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        dlen = &lt;span class=&quot;code-snippet__built_in&quot;&gt;snprintf&lt;/span&gt;(dbuf,&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(dbuf),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%.17g&quot;&lt;/span&gt;,d);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        slen = &lt;span class=&quot;code-snippet__built_in&quot;&gt;snprintf&lt;/span&gt;(sbuf,&lt;span class=&quot;code-snippet__keyword&quot;&gt;sizeof&lt;/span&gt;(sbuf),&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;$%d\r\n%s\r\n&quot;&lt;/span&gt;,dlen,dbuf);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        addReplyString(c,sbuf,slen);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3.9.5 释放跳表结点&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;c&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;zslFreeNode&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(zskiplistNode *node)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    sdsfree(node-&amp;gt;ele);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    zfree(node);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>205bdbca5dc7daae0b114b2414df32f4</guid>
<title>128 python|第三部分：python高级（一）程序结构和异常处理</title>
<link>https://toutiao.io/k/n8l34lf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;python高级将用三篇文章来进行梳理：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一）程序结构和异常处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（二）迭代和生成器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（三）函数式编程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本篇文章学习的内容是第一篇，目录如下：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8109619686800895&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUGBP2N2p9dLicicYMtmicOFgNUL2MuQNqaKcPjV2ia0GqT5xUl7Fzy5oN1XGHYOhdAohO5h4mxTc6V4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;                        &lt;br mpa-from-tpl=&quot;t&quot; data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZcWNHRSIjJGs9bvuzwV9GxaCvA4ic5qN3EhBUUSmSLdmc9YTk9M815IRRFboPVT3Klpyd0bCVEdIsgn7p6ue1Zg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;01 程序结构&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1  模块Module&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUO54LuJbh78tMMYyiav6tM98N9ouoQQTft4O3IWh4GbXmy4DLUYM3ECeaqyg9U36gDRH7rNrjqlvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;python中的模块指的是&lt;span&gt;包含一系列数据、函数和类的文件，通常以.py结尾。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;python程序结构示意图&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5092748735244519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LPejjE6JsZBTYKrJSAsPUXfibSPLClJrmhlIicpKWxos7j4v6DlUN1www/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;593&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）作用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;让一些相关的数据、函数和类更有逻辑地组织在一起，使逻辑结构更加清晰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）导入&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot; align=&quot;left&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;th rowspan=&quot;1&quot; colspan=&quot;3&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;python模块导入&lt;/th&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;import&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;from import&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1） import 路径.模&lt;span&gt;块            2） import 路径.模块 as 别名  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;1）from 路径.模块 import 成员名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2）from 路径.模块 import 成员名&lt;/span&gt; as 别名&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）from 路径.模块 import *&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;将模块整体导入到当前模块中&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;将模块内的成员导入到当前模块作用域中&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;&lt;strong&gt;使用&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;模块名.成员名&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;直接使用成员名&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）python模块import &amp;amp; from import 导入示例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.40245261984392416&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LbyRSlIWhCOD8Ficr7x0iaKFXxdwOaJDJZMVTAvXgDu4NQETEBc4U97bA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;897&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6322751322751323&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LNSKyLm0N0g9KibqicJDIghjPW32Lld2iaaam6wu6qU6JRw42z22X5GVXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）不同成员（函数、实例方法、类方法）导入实例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3858214042263122&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9Lo0VHxibWic7Dia1epUobRB6al7QmduLtNgibBAScnOv8AibyG1nFp5TQxSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1467&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6297297297297297&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LKjtUxUWNCo8c89cf9KyTYU0LDp8jDrTMbwjvKPTK2ufJPWibxd8jD1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4）模块变量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;__doc__变量：文档字符串&lt;/p&gt;&lt;p&gt;&lt;span&gt;__name__变量：&lt;/span&gt;模块自身名字，可以判断是否为主模块&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5）加载过程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;模块导入时，所有的语句都会执行，如果一个模块已经执行，再次导入时不会重新执行该模块的语句。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;（1）&lt;/strong&gt;__doc__&lt;/span&gt;&lt;span&gt;变量&lt;/span&gt;实例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;a.数据、函数和类的三引号注释&lt;/span&gt;&lt;/strong&gt;都可以在&lt;strong&gt;python&lt;/strong&gt;&lt;strong&gt;集成开发环境&lt;/strong&gt;IDE(integrated development environment) &lt;strong&gt;pycharm中通过&lt;span&gt;__doc__&lt;/span&gt;查看&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2318548387096775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUGBP2N2p9dLicicYMtmicOFgNk6flmESLZXpmIUy4ermB12ZEia2tBSAeoELP6j1JxCnfiarNQMujLUEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;496&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;b.&lt;/span&gt;&lt;/strong&gt;也&lt;/span&gt;&lt;span&gt;可以查看&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;python的标准库文档说明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.773936170212766&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LSAkXu70O9LuKlYRICRssnjnKPHbw9p7iagrS9E2GiaW0qicg3vX7rxrLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;752&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;python的标准库&lt;span&gt;文档说明&lt;/span&gt;（下面有提到）还可以&lt;strong&gt;通过终端查看&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如random是python的标准库之一&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4926299456943367&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LmNzwqHsyKIvpN7EMhBPjic9OSVU3qBy5DTK9PrL3ticD2J5TvfWULI3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1289&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;（2）&lt;/strong&gt;&lt;span&gt;__name__变量实例&lt;/span&gt;：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;A. __name__&lt;/strong&gt;有两种输出方式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;a.&lt;strong&gt;&lt;span&gt;在其他模块中输入print(__name__)&lt;/span&gt;&lt;/strong&gt;，并&lt;strong&gt;&lt;span&gt;在当前文件中导&lt;/span&gt;&lt;/strong&gt;入其模块名&lt;/span&gt;&lt;/strong&gt;，&lt;span&gt;打印结果是其他模块的真实模块名&lt;/span&gt;，如下图：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9L8a0qpDPvYhSEHibqNG9kf0FEzUmV8ialCuybHHstdicqbHiajYic2P3O3fQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5155071248952221&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LmTiaZXjC5C6eGzy7NLDu6swf6txpN3gPQB47mAv1Q8cq0TITec0x63Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1193&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;b.在当前文件中输入&lt;strong&gt;&lt;span&gt;print(__name__)&lt;/span&gt;&lt;/strong&gt;，直接打印的结果是__main__，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;表示当前文件为主模块。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43241330502477&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LEVTO0l4PTwtibXMSD7gHPPjpViciaf8GvBT4p4bSNxwib9EXAvicQCCFE5w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1413&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;B.&lt;strong&gt;__name__&lt;/strong&gt;的使用场景&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在项目正式交付之前程序员会进行功能测试，如下图是学生管理信息系统的bbl（&lt;span&gt;业务逻辑层&lt;/span&gt;）测试用例，用于测试当前模块代码是否有问题。但当项目交付给客户之后，客户会在main（入口）运行项目，这部分测试用例就不应该执行了。为了实现这个目的，需要在main模块加上 &lt;strong&gt;if __name__ == &quot;__main__&quot;:&lt;/strong&gt;，&lt;strong&gt;表示在main模块中运行代码时才执行程序，如果当前模块不是主模块，则无需执行。&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;快捷键：main+回车&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5391666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9L2f98JoibDojJ7OQ19dktSqVavRRJ0JuFx4CfQ07iayBZiaWM5xpsoeOnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;程序在main模块中运行时，上面的测试用例不执行：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4007386888273315&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LonS1ZRhMxNETClAdePWwqfQ6Nibqu97SFic9o7HeIunZBoIOPvLk4Fsw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1083&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注: 可以把模块分为两类，一个是主模块，另一个是被导入模块&lt;/strong&gt;,&lt;span&gt;被导入模块才能生成pyc文件&lt;/span&gt;（main是主模块，没有生成pyc文件），&lt;span&gt;pyc可以让程序的运行速度更快。&lt;/span&gt;&lt;span&gt;所以程序从main运行会节省程序的运行速度，而不建议从另外三个功能模块运行程序。&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;75&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;python是解释型语言，但为了提高运行速度，使用了一种编译的方法。编译之后得到&lt;strong&gt;&lt;span&gt;pyc文件&lt;/span&gt;&lt;/strong&gt;，存储了字节码（特定于Python的表现形式，不是机器码）。&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24807692307692308&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LialQa4dz9tqrx2fjeicKYfNxBlQibeKBZe91MBabOQSwFp2Zcn2R0g7PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;520&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.39644970414201186&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LYfbNNFZ2dYOq3zTHWmEbe93KlRfJx17YZzYtbyOekaj0EI77I4XiaKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;338&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;6）分类&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）内置模块（builtins），在解析器内部可以直接使用；&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注：python的内置模块和&lt;/span&gt;标准库模块可以在pycharm中使用&lt;span&gt;快捷键&lt;strong&gt;ctrl+鼠标左键查看文档说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如下python的标准库模块之一random的文档说明：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.628476084538376&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9Lia9yZicokHl8exyoF8EK7NB6qsnphIzMXKNe2zQoLmWBH2jnt8lgAwAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;899&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下是python的内置模块之一print的文档说明：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5031277926720286&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LbibSaJ3oaNJ5mWibv3lRCicERK1XYkFkEslSicnjNpn2ZN3HM0v3cm4S8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1119&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）标准库模块，安装python时已安装且可直接使用；&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;time模块-datetime模块-random模块-pathlib模块-os模块-shutil模块-CSV模块-argparse模块-sys模块-json&amp;amp;pickle&amp;amp;shelve&amp;amp;xml模块-re模块-logging模块-hashlib模块&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;a.&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;time模块知识：&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;import &lt;span class=&quot;code-snippet__keyword&quot;&gt;time&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tuple_time = time.localtime()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(tuple_time[&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(tuple_time[-&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(tuple_time[:&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(tuple_time[&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(tuple_time)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.time())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.localtime(&lt;span class=&quot;code-snippet__number&quot;&gt;1640942021.335922&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.mktime(tuple_time))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.strftime(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%y/%m/%d %H:%M:%S&quot;&lt;/span&gt;,tuple_time))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.strftime(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%Y/%m/%d %H:%M:%S&quot;&lt;/span&gt;,tuple_time))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.strptime(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2021/12/31 17:31:04&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%Y/%m/%d %H:%M:%S&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;print&lt;/span&gt;(time.strptime(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;年份是：2021,月份是：09&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;年份是：%Y,月份是：%m&quot;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;打印结果：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.371900826446281&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXWaQQE0AM8W5mDJbSFZs2ibxGh1U8AMARiab09c003IxzoPuuo8ys9Uaibjyx1PTl1iaVwL8dDAnicMsXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1815&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;b.&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;time模块实例：&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;定义函数，根据年月日获取星期&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;输入：2022 1 3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;输出：星期一&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;get_week&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(year,month,day)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    str_time = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%s/%s/%s&quot;&lt;/span&gt;%(year,month,day)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(str_time)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    tuple_time =time.strptime(str_time,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%Y/%m/%d&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    tuple_week = (&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期一&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期二&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期三&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期四&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期五&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期六&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;星期日&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    week_index=tuple_time[&lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; tuple_week[week_index]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(get_week(&lt;span class=&quot;code-snippet__number&quot;&gt;2022&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（3）第三方模块（通常为开源），需要自己安装；&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（4）用户自己编写的模块（可以作为其他人的第三方模块）。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2 包 Package&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUO54LuJbh78tMMYyiav6tM9jn6yFFic11B0vQhibEicFyiariaZf5bK51KJpPAgasmPLgL01e3Ulr4ibTzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;将模块以&lt;span&gt;文件夹的形式&lt;/span&gt;进行分组管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）&lt;strong&gt;以pycharm举例，主界面左侧的project最上面一层为项目的根目录，如果想要把作用域的范围缩小，&lt;/strong&gt;&lt;/strong&gt;可以通过给主模块所在的文件夹&lt;strong&gt;设置Mark Directory as --&amp;gt;Sources Root&lt;/strong&gt;来声明作用域。如下图：&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;54&quot; data-source-title=&quot;White-Legend&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;通过为此类别分配文件夹，可以告诉IDE编译器此文件夹及其子文件夹包含应作为构建过程的一部分进行编译的源代码。&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3E%E9%80%9A%E8%BF%87%E4%B8%BA%E6%AD%A4%E7%B1%BB%E5%88%AB%E5%88%86%E9%85%8D%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E5%91%8A%E8%AF%89IDE%E7%BC%96%E8%AF%91%E5%99%A8%E6%AD%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E5%85%B6%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8C%85%E5%90%AB%E5%BA%94%E4%BD%9C%E4%B8%BA%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E3%80%82%3C%2Fp%3E%22%2C%22digestLen%22%3A55%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22White-Legend%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;White-Legend&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.863237139272271&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9Lln8lj9tnMo1K9RqDzMRWNaCXTA5SedaWUiaxWLmnqykNeMvKiaYlInhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（&lt;strong&gt;2）直接创建包&lt;/strong&gt;（包含__init__文件）：&lt;/p&gt;&lt;p&gt;也可以先创建文件，然后在文件中新建&lt;span&gt;__init__文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4623015873015873&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9L1Kkoc9RK4NlsGNdTLjfscerejSBB2zcVVGRX39BRQziayQkRE9JE9Sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7774086378737541&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9Lr0O2xeNVcoMwVdkArxwjicpkjXic4QBvly83dJokLhY1YgETweQtd72g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;301&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;注：&lt;/strong&gt;带init的是包（也是文件夹）,不带init的只是文件夹，包的作用是可以通过init对整个包里的所有代码进行封装，当包里的文件很多时，可以提供部分常用文件的调用，更加方便。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）作用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;把一些相关的模块组织在一起，使逻辑结构更清晰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）导入&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt;（1）&lt;/strong&gt;主流做法（本篇文章开头的导入部分为主流做法）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1.在被导入模块写入成员（函数、实例方法、类）&lt;/p&gt;&lt;p&gt;2.在主模块进行导入&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）&lt;/strong&gt;&lt;strong&gt;非主流做法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1.在被导入模块写入成员（函数、实例方法、类）&lt;/p&gt;&lt;p&gt;2.在被导入模块所在的包的__init__文件里进行配置（和主流做法的第2步相同）&lt;/p&gt;&lt;p&gt;3.在主模块进行导入(import或from 后面的内容只导入到包)&lt;/p&gt;&lt;p&gt;注：&lt;/p&gt;&lt;p&gt;&lt;span&gt;非主流做法的适用于代码量、文件量比较庞大的时候，更常用的是主流做法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;非主流做法实例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一步：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.28340807174887894&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LJq82I5I8T7yDrqHNE6cU5jyxQum1hicicAa4Kx7VoTvCaTkibt2F0QcMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1115&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第二步：（import 和from import 二选一）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.31911652703731913&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9Leop8pDdic7AqYEhYgdrGLiaq1KwTvdw8iaFN4g8nwuYIpj0EZ2oHfb9qA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1313&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三步：&lt;/strong&gt;&lt;strong&gt;（import 和from import 二选一）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5932971014492754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LkZqXYlcMu6ZVK4gTxru6QVSf52K7fAVfrVEYEG0DAwZlQGZfoYJjicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1104&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.1 异常&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUO54LuJbh78tMMYyiav6tM9jn6yFFic11B0vQhibEicFyiariaZf5bK51KJpPAgasmPLgL01e3Ulr4ibTzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1）异常&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）&lt;/strong&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;运行时检测到的错误。&lt;strong&gt;错误通常分类两种&lt;/strong&gt;：&lt;span&gt;一类是&lt;/span&gt;&lt;span&gt;语法错误&lt;/span&gt;，这个是程序员自己需要调整的，必须在程序执行之前就改正，比如def dog后不加冒号；还有&lt;span&gt;一类是&lt;/span&gt;&lt;span&gt;逻辑错误&lt;/span&gt;，通常是由于数据超过有效范围引发的错误。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;134&quot; data-source-title=&quot;战争热诚&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;　python解释器检测到错误，&lt;strong&gt;触发异常&lt;/strong&gt;（也允许程序员自己触发异常）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　程序员编写特定的代码，专门用来&lt;strong&gt;捕捉&lt;/strong&gt;这个&lt;strong&gt;异常&lt;/strong&gt;（这段代码与程序逻辑无关，与异常处理有关）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　如果捕捉成功则进入另外一个处理分支，执行你为其定制的逻辑，使程序不会崩溃，&lt;span&gt;保证程序的健壮性与容错性&lt;/span&gt;，这就是&lt;strong&gt;异常处理&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A134%2C%22text%22%3A%22python%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A3%80%E6%B5%8B%E5%88%B0%E9%94%99%E8%AF%AF%EF%BC%8C%E8%A7%A6%E5%8F%91%E5%BC%82%E5%B8%B8%EF%BC%88%E4%B9%9F%E5%85%81%E8%AE%B8%E7%A8%8B%E5%BA%8F%E5%91%98%E8%87%AA%E5%B7%B1%E8%A7%A6%E5%8F%91%E5%BC%82%E5%B8%B8%EF%BC%89%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BC%96%E5%86%99%E7%89%B9%E5%AE%9A%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%B8%93%E9%97%A8%E7%94%A8%E6%9D%A5%E6%8D%95%E6%8D%89%E8%BF%99%E4%B8%AA%E5%BC%82%E5%B8%B8%EF%BC%88%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E4%B8%8E%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91%E6%97%A0%E5%85%B3%EF%BC%8C%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%89%E5%85%B3%EF%BC%89%E5%A6%82%E6%9E%9C%E6%8D%95%E6%8D%89%E6%88%90%E5%8A%9F%E5%88%99%E8%BF%9B%E5%85%A5%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E5%A4%84%E7%90%86%E5%88%86%E6%94%AF%EF%BC%8C%E6%89%A7%E8%A1%8C%E4%BD%A0%E4%B8%BA%E5%85%B6%E5%AE%9A%E5%88%B6%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%8C%E4%BD%BF%E7%A8%8B%E5%BA%8F%E4%B8%8D%E4%BC%9A%E5%B4%A9%E6%BA%83%EF%BC%8C%E4%BF%9D%E8%AF%81%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%81%A5%E5%A3%AE%E6%80%A7%E4%B8%8E%E5%AE%B9%E9%94%99%E6%80%A7%E2%80%8B%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%5D%2C%22from%22%3A%22%E6%88%98%E4%BA%89%E7%83%AD%E8%AF%9A%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;战争热诚&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）&lt;/strong&gt;&lt;strong&gt;常见语法错误&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;NameError名称异常：变量未定义；&lt;/p&gt;&lt;p&gt;TypeError类型异常:不同类型数据进行运算；&lt;/p&gt;&lt;p&gt;IndexError索引异常：超出索引范围；&lt;/p&gt;&lt;p&gt;AttributeError属性异常：对象没有对应名称的属性；&lt;/p&gt;&lt;p&gt;KeyError键异常：没有对应名称的键&lt;/p&gt;&lt;p&gt;Exception异常基类&lt;/p&gt;&lt;p&gt;......&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;NameError&lt;/span&gt;实例：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5138369483919222&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9L6lTeKnkANlP0jibOySCicPwUxTBorIIhKicqq6kmgt5AocxU6E7zeTNqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1337&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2）异常处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）&lt;/strong&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;将程序由异常状态转为正常流程。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）语法&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;可能触发异常的语句&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; 错误类型&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; 变量&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;处理语句&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; 错误类型&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; 变量&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;]：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;处理语句&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; Exception [&lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; 变量&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;]：&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;不是以上错误类型的处理语句&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;未发生异常的语句&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;无论是否发生异常的语句&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;as子句用于绑定错误对象的变量，可以省略&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;except子句可以有一个或者多个，用来捕捉某种类型的错误&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;else子句最多只能有一个&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;finally子句最多只能有一个，如果没有except子句，必须存在&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;如果异常没有被捕捉到，会向上层（调用出）继续传递，直到程序终止运行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;异常处理实例（逻辑错误）：&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;异常处理:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;适用性：不处理语法错误，而是针对逻辑错误&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;现象：程序遇到错误就会不断向上返回&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;价值：保障程序能够按照既定的流程执行&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;本质：错误的快速传递通道&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;div_apple&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(apple_count)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person_count = int(input(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请输入人数：&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result = apple_count/person_count&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;每人分%s个苹果&#x27;&lt;/span&gt;%result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;程序出错了&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;div_apple(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;后续逻辑&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;div_apple&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(apple_count)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person_count = int(input(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请输入人数：&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result = apple_count/person_count&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;每人分%s个苹果&#x27;&lt;/span&gt;%result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;错误,输入的不是整数&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; ZeroDivisionError:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;错误,输入的是零&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;div_apple(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;后续逻辑&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;div_apple&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(apple_count)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person_count = int(input(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请输入人数：&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result = apple_count/person_count&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;每人分%s个苹果&#x27;&lt;/span&gt;%result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分苹果结束啦&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;div_apple(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;后续逻辑&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;div_apple&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(apple_count)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        person_count = int(input(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请输入人数：&#x27;&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        result = apple_count/person_count&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;每人分%s个苹果&#x27;&lt;/span&gt;%result)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; Exception:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;程序出错啦&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;分苹果成功啦&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;div_apple(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;后续逻辑&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3）raise语句&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（1）定义&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;抛出一个错误，让程序进入异常状态。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（2）作用&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在程序调用比较深时，由主调函数传递错误信息要层层return比较麻烦，认为抛出异常，可以直接传递错误信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;（3）语法&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;apache&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt; [Exception [, args [, traceback]]]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;语句中&lt;span class=&quot;code-snippet__attribute&quot;&gt;Exception&lt;/span&gt;是异常的类型（例如，NameError）&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;参数是一个异常参数值,该参数是可选的，如果不提供，异常的参数是&quot;&lt;span class=&quot;code-snippet__attribute&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;最后一个参数是可选的（在实践中很少使用）。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;（4）raise实例&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;主动创造错误&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;raise   try&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;发送　  接收&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;input_password&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    pwd = input(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;请输入密码:&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; len(pwd) &amp;gt;= &lt;span class=&quot;code-snippet__number&quot;&gt;6&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; pwd&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;raise&lt;/span&gt; Exception(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;密码长度不够&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        user_pwd = input_password()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(user_pwd)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;code-snippet__keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        print(e.args)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/U9kKudHzsK3W5c0NRAdWnuRVSW6XQyGvg6OGgAx0tyceatfwtlSTTwQN8GvP155mZttbHucmWyonfEPlOiamy9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;350&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot; data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0859375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JrRY60XUiczCB0aAKusfQXhclcbPLWbWc64icUBDfxMM47JVqSw3IOFHpry1wBXo1ryBDcXMIAWicGppjb6JJ3RCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;[1] Python——模块(Module)和包（Package）&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/qiqicos/article/details/79208039&lt;/p&gt;&lt;p&gt;[2] 常用的python标准库模块&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/xixi18/p/8406301.html&lt;/p&gt;&lt;p&gt;[3] Python内置模块与标准库&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/pluse/p/8667864.html&lt;/p&gt;&lt;p&gt;[4] Pycharm 中 Mark Directory As 里的 Sources Root 的作用&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/u011318077/article/details/105507485&lt;/p&gt;&lt;p&gt;[5] Python异常及处理方法总结&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/sinat_38682860/article/details/90705790&lt;/p&gt;&lt;p&gt;[6] python 一篇搞定所有的异常处理&lt;/p&gt;&lt;p&gt;https://www.cnblogs.com/wj-1314/p/8707804.html&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;花样早餐展位&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXVeoQhXJIPFCIn3c2Ngby9LmVZB5Ziamq8ljDsCmXaMTkqia3NzmeibHnh2OfA18EwFlHmTe0VwzzhrA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>