<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3d118c2e31438a47014e34138dfd3c44</guid>
<title>精通那么多技术，你为何还是受不到重用？| 码农周刊第 324 期</title>
<link>https://toutiao.io/k/3ininot</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;精通那么多技术，你为何还是受不到重用？| 码农周刊第 324 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第324期（2020-11-11）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=324&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3240&quot; target=&quot;_blank&quot;&gt;双十一，买它买它买它！&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=324&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3240&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_324.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=324&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;基于 Kubernetes 的云原生批量计算平台&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;对以 Transformer 为基础的序列特征提取器 (Encoder) 和自回归的序列解码器 (Decoder) 做了深度优化&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;技术雷达是 ThoughtWorks 每半年发布一次的技术趋势报告&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;这是德勤第 11 年发布技术趋势年度报告&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;个人经历&lt;/p&gt;
        
        &lt;p&gt;你知道吗？&lt;/p&gt;
        
        &lt;p&gt;试试吧&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验总结&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;欢迎探讨&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;欢迎探讨&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;适合入门&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;深入探讨&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;基于 Swift 推出的函数响应框架&lt;/p&gt;
        
        &lt;p&gt;使用 JavaScript 来自动化 iOS&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;实践总结&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;细致讲解&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;试试吧&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;7年工作经验，技术总监&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 451915 即可&lt;/p&gt;
        
        &lt;p&gt;坚持原创，持续分享技术，包括但不限于：分布式、微服务架构，spring cloud、Dubbo微服务框架，Java核心技术，Redis缓存、Kafka消息队列中间件等。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 450130 即可&lt;/p&gt;
        
        &lt;p&gt;一个工作10年的程序猿，分享技术干货及内心的声音。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 413084 即可&lt;/p&gt;
        
        &lt;p&gt;详解数据结构与算法&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 142771 即可&lt;/p&gt;
        
        &lt;p&gt;Web前端、服务端、小程序、App、学习资料、工具、资讯&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 125297 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=324&amp;amp;aid=20115&amp;amp;url=http%3A%2F%2Fproduct.dangdang.com%2F29132383.html&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/book_324.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一个技术总监的忠告&lt;/p&gt;
        
        &lt;p&gt;写作不易&lt;/p&gt;
        
        &lt;p&gt;同理心&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f6495523a15cbf8480c4357f2fa4bc3e</guid>
<title>[推荐] 一个技术总监的忠告：精通那么多技术，你为何还是受不到重用？</title>
<link>https://toutiao.io/k/gk7ay10</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章我们继续说架构师大刘的故事：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田升职了，年薪涨到了百万级别！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是大刘在加班搞技术攻坚的时候，听别的同事聊了那么一嘴。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘心里不是滋味儿。老田和大刘其实在这家公司之前就是同事了，老田能到这家公司，说起来还是大刘推荐的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，在公司的这几年，老田越来越受领导赏识，到如今，晋升成功，赫然成了大刘的上司。大刘百思不得其解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘和老田本身在前家公司都是高级程序员，前后脚跳槽到了现在这家公司。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘来的早，成了架构师。老田呢，技术本就不如大刘，被大刘拉来后，先是当了个高级工程师，只是为了避嫌，没跟大刘一个团队。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来，老田被那时候的 Leader 赏识，做了带项目的组长，再后来，就是现在成功的晋升总监了。而大刘，好几年了却依然在架构师这岗位原地踏步，动弹不得。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘陷入了浓浓的迷茫，他自问自己工作态度毫无问题，做事情也兢兢业业。公司的技术攻关，经常也是大刘牵头搞定。公司的技术培训，作为架构师的大刘俨然是一个非常权威的大牛讲师。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就算是老田，也需要时不时去找大刘请教一些技术难题和技术方向。可是，即使这样，在公司技术领域造诣很深的大刘，却依然没有获得进身之阶，被老田压了一头。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘没忍住，找了个不忙的日子，拉着老田去了个小饭馆，在饭桌上，大刘就说起了他自己的尴尬处境以及对老田升职加薪的不解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田对大刘并没有藏着掖着，在饭桌上，他和大刘坦诚沟通了他的经验，并列出了他认为他可以升职加薪的一些非常突出的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二人酒足饭饱，大刘回到家后，仔细琢磨深究，他总结了以下几点。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 尽量努力的多去阅读别人的代码，越多越好&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这点大刘开始并没当回事，可是在和老田沟通的过程中，大刘发现，老田理解的阅读别人的代码和他理解的阅读代码是两回事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘阅读代码，特别喜欢看那些开源的好代码。跟着文档品读那些开源的优秀代码的卓越之处，每当看到妙处，大刘都觉得学到了新东西，感觉自己技术进步了许多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，当大刘阅读自己公司的各种代码的时候，大刘是相当没有耐心的。他觉得别人代码写的太次了，他把这些代码统统成为“屎山”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而老田恰恰相反。老实说，老田对市面上各种开源框架的了解水平，对各种中间件的内部原理理解都是远远不如大刘的，经常还需要咨询大刘。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，对于公司的各项目代码，老田却是了如指掌，对各项目中的那些代码和问题都是有十分深入的了解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么最终升职加薪不是大刘，这是为什么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;二人聊完之后，大刘终于明白了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，公司除了需要大刘的技术能力，更需要的是作为技术专家解决公司实际问题的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于大刘抵触阅读公司很多项目的代码，所以，往往大刘的某些技术方案在落地的时候会出现脱节。有时候，又由于对项目代码的不理解，甚至没有给出有效的解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而老田，由于对公司项目代码了解的很深入，虽然技术能力或者说知识面不如大刘，但是却总是能给出最合理的解决方案来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;长此以往，老田反而比大刘更展示出了一位高级技术人员应该具有的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多程序员和大刘其实是一样的，他们不喜欢自己公司的很多代码，认为这些代码质量极差，文档也非常欠缺，对自己的成长帮助不大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实这个观念其实是很有问题的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对这些所谓“屎山”的代码，你如果全都读进去，研究下去，你起码会有两个好处:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;你能具体知道代码烂在什么地方，那么以后你的代码就不会出现同样的问题&lt;/strong&gt;——由于你知道了烂代码烂在哪里，你一定能写出更好的代码，从而让那些屎山的代码逐渐会被自己写的好代码所替代。这样一比较，你的专业能力会显得非常突出，让更多的人认可你这位架构师的能力。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;你对公司这些代码读的越多，掌握的越多，你越不可替代&lt;/strong&gt;——对公司这些代码读的越通透，你越能更快速轻松地把控这些代码，让以后对这些代码的变革变得更容易。而轻松修改、革新这些代码的能力，就会变成你在这家公司不可替代性的重要因素。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，各种代码，无论质量好坏，都需要能读懂读通，并且读的越多越好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;能读懂读通任何质量的代码，才是真正的掌握了阅读代码的能力。读的越多，则能识别代码质量的能力就越强，将来自己就越能写出更好质量的代码。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 能准确判断项目的发展方向&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘和老田谈的时候，让大刘印象最深刻的就是，老田对项目发展状态的精准判断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;三年前，俩人一起搞了个供公司所有业务项目用的监控系统，目的是解决公司项目错误无法及时发现和处理的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时，这套监控系统公司要的急，大家匆匆设计了一版，就赶紧赶鸭子上架的做了一版。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术方案也没花太多心思，怎么快怎么来。搞完之后，大刘觉得这项目以后也就这样了，公司内部项目，既没有发展，也没有什么前景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可是，如今和老田沟通后，大刘才吃惊的发现，老田居然一直跟着这个项目，并对这项目进行了无数次总结分析和优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着不断地改进，这套项目竟然发展出来了一套非常完备的 APM 系统，使用体验非常不错。公司的商务给客户出解决方案的时候，经常也会连带着把这套监控系统包含到解决方案里。客户的反馈也很好，为公司拿下了更多的订单。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而大刘自己呢，为公司的核心系统设计了一套底层的服务调度编排框架，公司很多系统的底层都依赖于这套框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然这套框架大刘自己认为写的很棒，但是由于部署复杂，对应的一些辅助工具链也由于大刘的忽视，没有及时开发出来。导致后续的新项目，大家宁肯用一些开源框架自己改进，也不再使用大刘的这套框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分析起来，其实这也算是大刘和老田对各自项目的发展判断能力的差距导致的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田根据用户反馈和市场行情，他感觉监控系统本身应该是有前途的。并在调研了市面上竞对产品的基础上，让这套监控系统迸发出来了绚烂的色彩。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而大刘，高开低走，写出来一个好框架，但是由于对框架的预期判断错误，加上对用户反馈重视不够，最终导致本来应该非常出彩的框架就此沉沦了下去。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 去主动管理会议&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为公司比较重要的技术专家，大量的会议是免不了的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘对此非常烦恼，经常因为这些冗长的会议，耽误了许多手头的工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别是，大刘作为架构师，需要大块连续的时间去思考技术难题，解决系统问题，以及考虑新项目的架构设计。但是频繁的会议，把大刘的时间搅和的支离破碎。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这个问题，大刘在饭桌上请教了老田。老田说，他也面对了这些问题，好在他通过一些自己的方法，很大程度缓解了这些问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田做了如下几个事情:&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;老田对第二天的会议提前和参会各方沟通，开会时间尽量协调到一起，这样老田能腾出一整块儿时间，把当日所有可能的会议都集中开完。后续老田就会有连续的时间去深度工作了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;老田会在开会前一天，把会议内容和可能出现的问题都预先做功课。一方面是防止会议开着开着跑题；二是万一出现争议问题，老田可以列举出来事先准备的技术方案，这样也能加快会议进度。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;还有，对于一些不那么重要的会议，老田一定会态度坚决的避开或者指派别人参加。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 版本控制工具的熟练应用&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个问题是老田主动和大刘提出来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田发现，对于版本工具使用不当，会耽误开发人员很多时间。而版本控制工具，即使一些工作多年的程序员，往往也经常会使用不当。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些不当的使用，会造成许多问题。比如，各种各样的代码冲突、版本重叠，莫名其妙的代码丢失。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对此，老田每次负责一个新项目，都会严格指定版本工具的使用规范，会花时间对开发人员统一培训版本工具的使用。同时，也会把各种技巧、注意事项、常用命令整理好，放在内部的共享文档中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田的这些举措，在实践中，大大改善了版本控制工具不当使用造成的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有一个项目组在规范使用之后，竟然比之前的开发速度快了三分之一。可想而知，这个问题有多严重了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. 不要把解决方案复杂化&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田和大刘谈了谈关于技术和技术落地之间存在的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田和大刘都发现有些程序员特别喜欢炫技，这些炫技某些时候会导致整个系统复杂化，最终产出反而不尽如人意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田举了个例子，比如，一套内部使用的资产管理系统，中间有一个需要调用公司其他项目接口的小功能，这种简单的东西交给了一个比较年轻的程序员。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果这个程序员又是考虑对方接口不稳定的情况，又是考虑这个功能会有使用过度频繁的情况，还使用了缓存去储存一些状态，防止频繁调用数据库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这种情况，从纯技术角度，当然会鼓励人们想的越全面越好。但是，在实际落地的时候，你要明白这只是一个公司内部使用的小项目，没必要为了各种概率很低的风险，把明明很小的一个功能给做的很复杂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种问题，就需要技术 Leader 及早发现、介入，防止出现过度设计、过度开发。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. 把任务安排的井井有条&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田其实和大刘一样，每天杂事儿很多，每天的任务也很多。大家对这些任务的管理能力自然就有高有低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;老田对于任务紧急程度的判断都是经过深思熟虑、实际分析过的，任务之间的先后顺序，也和任务交付人认真沟通过。对一些根本没必要的任务，老田会态度坚决的对这些任务说 No。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘自我总结，他这方面做的不好。首先，他安排任务容易被任务交付人的情绪影响，对方催的急，他就优先安排。其次，任何任务大刘都没有拒绝过，顶多是排期靠后。最后，大刘没有考虑任务和任务之间的关系，有些任务之间是关联的，完全可以融合一起搞定，大刘却没有思考，从而割裂开安排，这也是很大的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上次，大刘接到两个任务：1、去掉 VMware；2、MQ 版本升级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个任务都需要业务系统停服才能干，大刘当时也没在意，两个任务放在两天，连续两天停服，虽说每天停的时间不长吧……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这俩任务完全可以放在一起，利用一次停服集中解决。这样对用户影响更小，业务部门也不会那么不满。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. 不要死板的写代码&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多程序员知识面很宽，基本功也非常扎实。但是，有一种能力，是学校教不出来、面试也不容易看出来的，就是代码能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓的代码能力，有的是指写代码不出 Bug 的能力，有的是指算法落地能力……但这里想说的，是不写死板的呆代码的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是什么意思呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道，程序员少不了要维护老项目。在维护项目的时候，我们面对各种不断的新需求，经常要去修改代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改代码是个很危险的事情，因为我们修改的代码往往会和别的功能耦合住。改了一点代码，结果影响一大片功能的情况经常出现。最虐心的是，这种连带影响可能不会马上出现，不知道哪天就突然冒出来折腾一把。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果改代码经常出问题，这谁扛得住啊！别说你自己的技术话语权了，也别说在职场脱颖而出了，工作能不能保得住都不好说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，对于修改代码的事情，我们需要学会的是不要写呆代码。再说的直白点就是，你不能写完代码运行下没问题就觉得正常了，你在写代码之前需要好好思考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种思考，既不是什么搞设计模式松耦合，也不是搞功能切分独立成块。这种思考本质是需要你写代码前去理解业务，去真正明白业务在实际是怎么运作的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单说两个例子：&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.1. 修改完代码后，用户会怎么使用你现在修改的功能？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，你修改了注册功能，可以兼容第三方登录。那么，可能有的老用户会重新注册一个账号，以方便第三方登录。那你对这种情况，其实该做的是绑定，而不是让用户重新注册个新账号。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种疏漏，等到上线之后才发现就晚了。这不能完全依赖产品经理，作为一个技术人员本来就应该对自己的功能做通盘的考虑，这才是真正的负责。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7.2. 你现在修改的功能，会不会由于运营需要，会换成你完全没想过的用法？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，你搞一个用户充值功能。本来你只是想着用户游戏内购直接充值即可。但是，在实际上线后，有时候运营为了方便 vip 客户或者为了和第三方渠道互换资源，也会使用这个充值功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运营大批量的连续充值，并且这些充值转换成系统中的货币，就像游戏中的元宝，就有可能超出 Java 中的整数上限，从而造成问题。如果你提前知道用户、运营人员都是怎么使用这个功能的，你就会把数据类型修改成 Long 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似的例子有很多，老田还要继续说下去的时候，大刘给他打断了，“扎心了，你说这些坑我没少掉进去。”&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;后记&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过和老田沟通，大刘知道自己的问题出在哪了。他明白了，技术只是技术人员的基础，在实际工作中想脱颖而出，除了要有过硬的技术，还需要你的态度、你的各种软实力，需要你把技术转化为实际生产力的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大刘的故事这次先说到这里。&lt;/p&gt;&lt;p&gt;如果你觉得写的还行，不妨&lt;span&gt;&lt;strong&gt;点个&lt;/strong&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;。&lt;br/&gt;你觉得这公众号还行，不妨&lt;span&gt;&lt;strong&gt;设个星标&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我准备&lt;/span&gt;&lt;span&gt;了一些&lt;/span&gt;&lt;span&gt;纯手&lt;/span&gt;&lt;span&gt;打的高质量PDF：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;深入浅出Java多线程、HTTP超全汇总、Java基础核心总结、程序员必知的硬核知识大全、简历面试谈薪的超全干货。&lt;/p&gt;&lt;p&gt;别看数量不多，但篇篇都是干货，看完的都说很肝。&lt;/p&gt;&lt;p&gt;领取方式：扫码关注后，在公众号后台回复：666&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.440625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KSnObMQf98GBHlgrmrLrBjnEX3Dhrp6ibhSlBtM0zFXIgUb1Us6CXON4EMJwyCcKhDxLwTulgAb52Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我最近建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。&lt;span&gt;欢迎加&lt;/span&gt;&lt;span&gt;我微&lt;/span&gt;&lt;span&gt;信，&lt;/span&gt;&lt;span&gt;拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d5a87b0043a2faec24f11385810b6d6d</guid>
<title>[推荐] 技术选型：为什么批处理我们却选择了 Flink</title>
<link>https://toutiao.io/k/0n78gha</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;最近接手了一个改造多平台日志服务的需求，经过梳理，我认为之前服务在设计上存在缺陷。经过一段时间的技术方案调研，最终我们决定选择使用 Flink 重构该服务。&lt;/p&gt;&lt;p&gt;目前重构后的服务已成功经受了国庆节流量洪峰的考验，今日特来总结回顾，和大家分享一下经验。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;业务需求及背景&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在了解改造服务的需求前，我们首先要明确，要解决什么问题以及目前的服务是如何解决的。&lt;/p&gt;&lt;p&gt;当前的业务逻辑还是比较清晰的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;采集同一时段不同数据源的日志；&lt;/li&gt;&lt;li&gt;对采集的数据进行处理；&lt;/li&gt;&lt;li&gt;将处理后的数据上传到指定位置，供客户下载。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们面临的痛点和难点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;日志的数据量比较大：每小时未压缩的日志数据量有 50 多个 G，节假日等特殊时间节点，日志量会翻倍。&lt;/li&gt;&lt;li&gt;目前服务使用单机进行处理，速度比较慢，扩容不方便。&lt;/li&gt;&lt;li&gt;目前服务处理数据时需要清洗字段，按时间排序，统计某字段的频率等步骤。这些步骤都属于 ETL 中的常规操作，但是目前是以代码的形式实现的，我们想以配置形式减少重复编码，尽量更加简单、通用。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;方案1：我们需要一个数据库吗?&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;针对以上业务需求，有同学提出：“我们可以把所有原始数据放到数据库中，后续的 ETL 可以通过 SQL 实现。”&lt;/p&gt;&lt;p&gt;如果你一听到&quot;数据库&quot;想到的就是 Pg、Mysql、Oracle 等，觉得这个方案不具有可行性，那你就错了。数据库的类型和维度是非常丰富的，如下图所示：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2046f993e1c0a87adb39d2d697e87749_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;811&quot; data-rawheight=&quot;618&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-2046f993e1c0a87adb39d2d697e87749_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;811&quot; data-rawheight=&quot;618&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-2046f993e1c0a87adb39d2d697e87749_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-2046f993e1c0a87adb39d2d697e87749_b.jpg&quot;/&gt;&lt;figcaption&gt;△数据库行业全景图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;按业务负载特征，关系型数据库可分为 OLTP 数据库（交易型）和 OLAP 数据库（分析型) ：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;OLTP，Online Transaction Processing。OLTP 数据库最大的特点是支持事务，增删查改等功能强大，适合需要被频繁修改的&quot;热数据&quot;。我们耳熟能详的 Mysql、Pg 等都属于这一类。缺点就是由于支持事务，插入时比较慢。拿来实现我们的需求显然是不合适的。&lt;/li&gt;&lt;li&gt;OLAP，Online Analytical Processing，数据分析为主。不支持事务，或者说是对事务的支持有限。OLAP 的场景是：大多数是读请求，数据总是以相当大的批(&amp;gt; 1000 rows)进行写入，不修改已添加的数据。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;方案 1 小结&lt;/b&gt;&lt;/p&gt;&lt;p&gt;OLAP 的使用场景符合我们的需求，为此我们还专门去调研了一下 ClickHouse。但是有一个因素让我们最终放弃了使用 OLAP。请注意，数据库存储的数据都是二维的，有行和列两个维度。但是日志只有行一个维度。如果说为了把日志存入数据库把每行日志都切分，那统计字段的需求也就顺手实现了，又何必存到数据呢?&lt;/p&gt;&lt;p&gt;所以，OLAP 使用场景隐含的一个特点是：存入的数据需要被多维度反复分析的。这样才有把数据存入数据库的动力，像我们当前的需求对日志进行简单的变形后仍旧以文本日志的形式输出，使用 OLAP 是不合适的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;方案2：Hive 为什么不行?&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;看到这，熟悉大数据的同学可能会觉得我们水平很 Low，因为业务需求归根到底就是三个字：批处理。 &lt;/p&gt;&lt;p&gt;那我们为什么第一时间没有考虑上大数据呢？&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b2359f08971047d09d069c415a66dab9_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;740&quot; data-rawheight=&quot;417&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-b2359f08971047d09d069c415a66dab9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;740&quot; data-rawheight=&quot;417&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-b2359f08971047d09d069c415a66dab9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-b2359f08971047d09d069c415a66dab9_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 大数据处理流程&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;大数据确实如雷贯耳，但现在我们的日志处理这块大部分都是用 Golang 实现的，团队内的其他业务用了 Python、Lua、C，就是没有用过到 Java。而目前大数据都是基于 JVM 开发的。Golang 调用这些服务没有一个好用的客户端。&lt;/p&gt;&lt;p&gt;所以基于团队目前的技术储备，大数据才没有成为我们的首选。但是从目前的状况来看大数据是最优解了。那么我们该选用大数据的什么组件实现需求呢?&lt;/p&gt;&lt;p&gt;放弃使用数据库直接使用 HDFS 存储日志文件，应该是毋庸置疑的。&lt;/p&gt;&lt;p&gt;我们需求是离线批处理数据，对时效性没有要求，MapReduce 和 Hive 都能满足需求。但是 MapReduce 与 Hive 相比，Hive 在 MapReduce 上做了一层封装并且支持 SQL。看起来 Hive 是非常合适的。&lt;/p&gt;&lt;p&gt;那为什么最终放弃了 Hive 呢?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;机器资源问题。公司其他团队已经有一套 HDFS 的设施，只用来做存储，Hadoop 的 MapReduce 这个组件根本没跑起来。那套 HDFS 部署的机器资源比较紧张，他们担心我们使用 MapReduce 和 Hive 跑计算，会影响现在 HDFS 的性能; 我们想审批一批新的机器，重新使用 Ambari 搭建一套 Hadoop，却被告知没那么多闲置的机器资源。而且我们即便申请下来了机器，只跑目前服务也跑不满，机器资源大部分也会被闲置，也有浪费资源的嫌疑。&lt;/li&gt;&lt;li&gt;存储分离是趋势。在调研中我们发现，像 Hadoop 这样把存储和计算放到一起的已经比较&quot;落伍&quot;了。Hadoop 存储分离，需要修改源码，目前没有开源实现，只是云厂商和各个大数据公司有相关商业产品。从这个角度讲，即便我们自己搞定了机器资源搭一套 Hadoop，也只不过是拾人牙慧罢了。&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4a36a4acf61b6fb5522c4202e55e7735_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;504&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-4a36a4acf61b6fb5522c4202e55e7735_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;504&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-4a36a4acf61b6fb5522c4202e55e7735_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-4a36a4acf61b6fb5522c4202e55e7735_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 大数据生态图，图片来源于小枣君&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;方案 2 小结&lt;/b&gt;&lt;/p&gt;&lt;p&gt;再合适的技术方案不能落地也是空谈。但是技术方案想要落地时，已经不是一个单纯的技术问题了，资源限制，团队限制等都需要考虑在内。&lt;/p&gt;&lt;p&gt;一个优秀的技术方案立足于解决当下的问题，并且能放眼未来勾画蓝图，这样大家觉得 &quot;有利可图&quot;，才愿意跟你一起折腾。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;方案3：为什么我们放弃了 Spark?&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;通用的计算引擎&lt;/b&gt;&lt;/p&gt;&lt;p&gt;虽然使用 HDFS 的团队不赞成在他们的机器上跑 Hive，但是我们把日志数据存到他们的 HDFS 上还是没问题的。在已知 &quot;存储和分离是趋势&quot; 是前提的基础下，&quot;我们到底需要什么&quot; 这个问题已经有答案了。&lt;/p&gt;&lt;p&gt;我们需要的是一个通用的计算引擎。存储已经剥离给 HDFS 了，所以我们只需要找一个工具，帮我们处理 ETL 就可以了。Spark 和 Flink 正是这样的场景。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Spark 与 Flink 初次交锋&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Spark 和 Flink 之间，我们毫不犹豫地选择了 Spark。原因非常简单：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Spark 适合批处理。Spark 当初的设计目标就是用来替换 MapReduce。而 Spark 流处理的能力是后来加上去的。所以用 Spark 进行批处理，可谓得心应手。&lt;/li&gt;&lt;li&gt;Spark 成熟度高。Spark 目前已经发布到 3.0，而 Flink 尚在 Flink 1.x 阶段。Flink 向来以流处理闻名，虽然被国内某云收购后开始鼓吹 &quot;流批一体&quot;，但是线上效果还是有待检验的。&lt;/li&gt;&lt;li&gt;Scala 的加持。Spark 大部分是用 Scala 实现的。Scala 是一门多范式的编程语言，并且与 Haskell 有很深的渊源。Haskell 是一门大名鼎鼎的函数式编程语言。对于函数式编程语言，想必大多数程序猿都有一种 &quot;虽不能至，然心向往之&quot; 的情结。现在使用 Spark 能捎带着耍一耍函数式编程语言 Scala，岂不妙哉？&lt;/li&gt;&lt;/ul&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cab5f3da76c389c723b5cdfbcfc32b77_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;753&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-cab5f3da76c389c723b5cdfbcfc32b77_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;753&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-cab5f3da76c389c723b5cdfbcfc32b77_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-cab5f3da76c389c723b5cdfbcfc32b77_b.jpg&quot;/&gt;&lt;figcaption&gt;△ Scala&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;挥泪斩 Spark&lt;/b&gt;&lt;/p&gt;&lt;p&gt;前文已经交代过了，我们否决掉 Hive 的一个重要因素是没有足够的机器资源。所以我们把 Spark 直接部署到云平台上。&lt;/p&gt;&lt;p&gt;对于我司的云平台要补充一些细节。&lt;/p&gt;&lt;p&gt;我们的云平台是基于 K8S 二次开发的，目前还在迭代当中，因此&quot;Spark on K8S&quot; 的运行模式我们暂时用不了。在这样的情况下，我们采用了 &quot;Spark Standalone&quot; 的模式。Standalone 模式，也就是Master Slaver 模式，类似于 Nginx 那样的架构，Master 节点负责接收分发任务，Slaver 节点负责&quot;干活&quot;。&lt;/p&gt;&lt;p&gt;等到我们在云平台上以 &quot;Spark Standalone&quot; 模式部署好了，跑了几个测试 Case 发现了新问题。我们的云平台与办公网络是隔离的，如果办公网络想访问云平台的某个 Docker 容器，需要配置域名。而 Spark 的管理页面上很多 URL 的 domain 是所在机器的 IP，容器的 IP 是虚拟 IP，容器重启后IP 就会改变。具体如图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-814f1110cacc77ebd8cff4ebee4be9fd_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-814f1110cacc77ebd8cff4ebee4be9fd_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;301&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-814f1110cacc77ebd8cff4ebee4be9fd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-814f1110cacc77ebd8cff4ebee4be9fd_b.jpg&quot;/&gt;&lt;figcaption&gt;△ 部署在云平台的 spark&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Spark 的管理平台非常重要，因为能从这上面看到当前各个节点运行情况，任务的异常信息等，现在很多链接不能访问，不利于我们对 Spark 任务进行问题排查和调优。基于这个原因，我们最终放弃了 Spark。&lt;/p&gt;&lt;p&gt;&lt;b&gt;方案 3 小结&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Spark 你真的很优秀，擅长批处理，如此成熟，还有函数式的基因 。。。这些优点早让我倾心不已。&lt;/p&gt;&lt;p&gt;Spark 你真的是个好人，如果不是云平台的限制，我一定选择你。&lt;/p&gt;&lt;p&gt;Spark，对不起。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;方案4：Flink，真香！&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;给 Spark 发完好人卡后，我们看一看新欢 Flink。不客气的说，Flink 初期时很多实现都是抄的 Spark，所以二者的很多概念相似。所以 Flink 同样有 Standalone 模式，我们在部署阶段没遇到任何问题。&lt;/p&gt;&lt;p&gt;在跑了几个 Flink 测试 Case 后，我们由衷的感叹 Flink 真香。&lt;/p&gt;&lt;p&gt;放弃 Spark 时我们的痛点在于 &quot;部署在云平台上的 Spark 服务的管理界面很多功能无法使用&quot;，而 Flink 的管理平台完全没有这个问题。除此之外，Flink 管理平台的 &quot;颜值&quot; 和功能都是 Spark 无法比拟的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;管理平台颜值对比&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-81f492437b2251f815d5ecc50871e4c5_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;155&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-81f492437b2251f815d5ecc50871e4c5_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;155&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-81f492437b2251f815d5ecc50871e4c5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-81f492437b2251f815d5ecc50871e4c5_b.jpg&quot;/&gt;&lt;figcaption&gt;△ Spark管理平台页面&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5c6ba1581fc95f0f3415440f80d516d0_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;487&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-5c6ba1581fc95f0f3415440f80d516d0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;487&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-5c6ba1581fc95f0f3415440f80d516d0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5c6ba1581fc95f0f3415440f80d516d0_b.jpg&quot;/&gt;&lt;figcaption&gt;△ Flink管理平台页面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;对比之下，Spark 的页面完全是个&quot;黄脸婆&quot;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Flink 管理平台功能&lt;/b&gt;&lt;/p&gt;&lt;p&gt;由于 Spark 的功能很多不能使用，所以就不重点和 Flink 做比较了。这里只说 Flink 几个让人眼前一亮的功能。&lt;/p&gt;&lt;p&gt;部署了 Flink 或 Spark 服务后，该如何下发计算任务呢? 一般是通过 bin 目录下的一个名称中包含 submit 的可执行程序。那如果想把 Flink 或 Spark 做成微服务，通过 http 接口去下发任务呢?&lt;/p&gt;&lt;p&gt;Spark1.0 的时候支持 http，2.0时这个功能基本上废掉了，很多参数不支持了，把 http 这个功能交由 jobService 一个第三方开源组件去实现。这个 jobService 的开源组件对云平台的支持也非常不友好。所以在我们看来，Spark 通过 Http 下发任务的路子基本被堵死了。&lt;/p&gt;&lt;p&gt;反观 Flink，管理平台的接口是 Restful 的，不仅支持 Http 下发计算任务，还可以通过相关接口查看任务状态和获取异常或返回值。&lt;/p&gt;&lt;p&gt;Flink 的任务分为几个不同的阶段，每个不同的阶段有不同的颜色。这样仅从颜色就可以判断出当前 Flink 任务执行的大致情况。如下图：&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4b93584c342c4241557a8a73b9236757_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;232&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-4b93584c342c4241557a8a73b9236757_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;232&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-4b93584c342c4241557a8a73b9236757_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-4b93584c342c4241557a8a73b9236757_b.jpg&quot;/&gt;&lt;figcaption&gt;△ Flink管理平台页面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;在任务详情页面，会有任务分解图和任务执行耗时表格，这两个结合起来能够知道当然 Flink 任务是如何分解的，是否出现数据倾斜的情况，哪个步骤耗时最多，是否有优化的空间。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5fbdbc218db74ca27303a7c0de607018_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;390&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-5fbdbc218db74ca27303a7c0de607018_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;390&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-5fbdbc218db74ca27303a7c0de607018_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5fbdbc218db74ca27303a7c0de607018_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-82e9fa77f69d496a517d722ebba0de46_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;510&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-82e9fa77f69d496a517d722ebba0de46_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;510&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-82e9fa77f69d496a517d722ebba0de46_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-82e9fa77f69d496a517d722ebba0de46_b.jpg&quot;/&gt;&lt;figcaption&gt; △ 管理平台页面&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这就是做批处理技术选型时候的心路历程，随笔记了下来，希望对大家有所帮助。&lt;/p&gt;&lt;p&gt;&lt;b&gt;推荐阅读：&lt;/b&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/583/%25E5%25A6%2582%25E4%25BD%2595%25E9%2580%2589%25E6%258B%25A9%25E9%2580%2582%25E5%2590%2588%25E8%2587%25AA%25E5%25B7%25B1%25E7%25BD%2591%25E7%25AB%2599%25E7%259A%2584%25E9%2598%25B2%25E7%259B%2597%25E9%2593%25BE.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-56c5b7b098e6252cc7acb7a601428c09_180x120.jpg&quot; data-image-width=&quot;960&quot; data-image-height=&quot;640&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;如何选择适合自己网站的防盗链&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-56c5b7b098e6252cc7acb7a601428c09_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/577/HTTP%252F3%2520%25E6%259D%25A5%25E4%25BA%2586%25EF%25BC%258C%25E4%25BD%25A0%25E4%25BA%2586%25E8%25A7%25A3%25E5%25AE%2583%25E4%25B9%2588%25EF%25BC%259F.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-cddf6e4c200fe6cc94c4b8edfdae7521_180x120.jpg&quot; data-image-width=&quot;1080&quot; data-image-height=&quot;523&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;HTTP/3 来了，你了解它么？&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-cddf6e4c200fe6cc94c4b8edfdae7521_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dcd1ae7713bb364765d957e5544f3351</guid>
<title>[推荐] MySQL 的这几个坑你踩过没？真是防不胜防</title>
<link>https://toutiao.io/k/1y6vsef</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;对于从事互联网开发的同学来说，mysql可谓是再熟悉不过的了。无论是DBA、开发或测试，基本上天天要跟它打交道，很多同学可能已经身经百战了。但是，笔者遇到过的这些坑不知道你们都经历过没？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、有符号和无符号&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;以前我们公司在项目开发之初制定开发规范时，对mysql的int类型字段定义成有符号，还是无符号问题专门讨论过。&lt;/p&gt;&lt;p&gt;&lt;span&gt;观点一：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;对于能够确定里面存的值一定是正数的字段，定义成UNSIGNED无符号的，可以节省一半的存储空间。创建无符号字段的语句如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_unsigned(a &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNSIGNED&lt;/span&gt;, b &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNSIGNED&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;观点二：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;建议都定义成有符号的，使用起来比较简单，mysql默认int类型就是有符号的，创建有符号字段的语句如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_signed(a &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_signed &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行结果：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.10714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RicK4n6E1wEKVDwqOqvuzdhGmNeaecNYVwPCMnicJNNWia5FtGtRCZmtrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;/p&gt;&lt;p&gt;在字段a中插入-1，我们看到是可以操作成功的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这两个方案，经过我们激烈讨论之后，选择了使用有符号定义int类型字段。为什么呢？&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_unsigned(a &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNSIGNED&lt;/span&gt;, b &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNSIGNED&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_unsigned &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;先创建test_unsigned表，里面包含两个无符号字段a和b，再插入一条数据a=1，b=2&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; b - a &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; test_unsigned;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;没有问题，返回1&lt;/p&gt;&lt;p&gt;但是如果sql改成这样：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; a - b &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; test_unsigned;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行结果：&lt;img data-ratio=&quot;0.0959079283887468&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R0xmy17Kn90u13KyNgKBhARHqYlDHUE4eUhuY4R8Or73jcP3b63Amfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/p&gt;&lt;p&gt;报错了。。。&lt;/p&gt;&lt;p&gt;所以，在使用无符号字段时，千万要注意字段相减出现负数的坑，建议还是使用有符号字段，避免不必要的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、自动增长&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;建过表的同学都知道，对于表的主键可以定义成自动增长的，这样一来，就可以交给数据库自己生成主键值，而无需在代码中指定，而且生成的值是递增的。一般情况下，创建表的语句如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_auto_increment (a &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; auto_increment primary &lt;span class=&quot;code-snippet__keyword&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;但如果改成这样的会怎样？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_auto_increment (a &lt;span class=&quot;code-snippet__built_in&quot;&gt;int&lt;/span&gt; auto_increment);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行结果：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.07884856070087609&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7Ria323Qbqf5mAssfpicwCvSeh2b81hZaY0nRp63Vic8V5oOrKJcR3KgbVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1598&quot;/&gt;&lt;/p&gt;&lt;p&gt;报错了。。。&lt;/p&gt;&lt;p&gt;截图中没有全部显示出来，完整的提示语是这样的：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;1075&lt;/span&gt; - Incorrect table definition; there can be only one &lt;span class=&quot;code-snippet__keyword&quot;&gt;auto&lt;/span&gt; column &lt;span class=&quot;code-snippet__keyword&quot;&gt;and&lt;/span&gt; it must be defined as a key, Time: &lt;span class=&quot;code-snippet__number&quot;&gt;0.006000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;意思是自动增长字段，必须被定义成key，所以我们需要加上primary key。&lt;/p&gt;&lt;p&gt;此外，还有一个有趣的实验：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_auto_increment(a) &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt; (&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;),(&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;),(&lt;span class=&quot;code-snippet__number&quot;&gt;8&lt;/span&gt;),(&lt;span class=&quot;code-snippet__literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;大家猜猜执行结果会是什么样的？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.969924812030075&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R195Ta89hib0zaop7XvOunyl91iaUu5N6w6kdIpDzR4fYOmX7J7mOobug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;266&quot;/&gt;&lt;/p&gt;&lt;p&gt;第一个null插入1，然后按真实的数字大小排序后插入，后面两个null，是在最大的数字上面加1。&lt;/p&gt;&lt;p&gt;再看看这条sql主键中插入负数，能执行成功吗？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_auto_increment &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;-3&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;答案是可以，主键可以插入负数。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.09941520467836257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RiaFtzia2MSgmCGojkWELuP8oibUUFcEI8bNTpawjhibnHZpDCajKTz2Wuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还有这条sql呢，主键中插入0？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_auto_increment &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;3.3333333333333335&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RjfoT5L6IDApKz6gTQqA0IMXDkpbn9icLdT3eLSKxzCgma9yVvkv4pUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;162&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;也可以执行成功，但是没有插入数据&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、字段长度&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我们在创建表的时候，给字段定义完类型之后，紧接着需要指定字段的长度，比如：varchar(20)，biginit(20)等。那么问题来了，varchar代表的是字节长度，还是字符长度呢？&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_varchar(a &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_varchar &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;苏三说技术&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;length&lt;/span&gt;(a),&lt;span class=&quot;code-snippet__keyword&quot;&gt;CHARACTER_LENGTH&lt;/span&gt;(a) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; test_varchar;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行后的结果：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.26&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uL371281oDHJ3E7yXI4qszEUVcmnQk7RtwvcGLCcNYl4HyIFshmnlwlDHic5dQhdj1UktEBflMzic3k2IdPfmefA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们看到中文的5个字length函数统计后长度为15，代表占用了15个字节，而使用charcter_length函数统计长度是5，代表有5个字符。所以varchar代表的是字符长度，因为有些复杂的字符或者中文，一个字节表示不了，utf8编码格式的一个中文汉字占用3个字节。不同的数据库编码格式，占用不同的字节数对照表如下：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5337078651685393&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7REicOicnENmpz3W9QDkbWlFZbRuWg3FjvcGlVPtCRG8l0OcjRqSUYdMow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1424&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;mysql除了varchar和char是代表字符长度之外，其余的类型都是代表字节长度。&lt;/p&gt;&lt;p&gt;int(n) 这个n表示什么意思呢？从一个列子出发：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_bigint (a &lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;) ZEROFILL);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_bigint &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_bigint &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;123456&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; test_bigint;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;ZEROFILL表示长度不够填充0&lt;/p&gt;&lt;p&gt;执行结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6650717703349283&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RSGdj8FbO9bZDDyFib00vnjlbJTSD91XSLmYJDu9mKkDx7iaH43mYtWSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;418&quot;/&gt;&lt;/p&gt;&lt;p&gt;mysql常用数字类型字段占用字节数对照表：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5546218487394958&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RjKfscVK8pm5Osp4g37zmBlicwkPQribhDgNG6cAtiaRsyc8hViacpLmAUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1428&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从表中可以看出big&lt;/span&gt;&lt;span&gt;int实际长度是8个字节，但是我们定义的a显示4个字节，所以在不满4个字节时前面填充0。满了4个字节时，按照实际的长度显示，比如：123456。但是，需要注意的是，有些mysql客户端即使满了&lt;span&gt;4个字节&lt;/span&gt;，也可能只显示4个字节的内容，比如显示：1234。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以&lt;span class=&quot;code-snippet__built_in&quot;&gt;bigint&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;，这里的4表示显示的长度为4个字节，实际长度还是8个字节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;五、忽略大小写&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;我们知道在英文字母中有大小写问题，比如：a 和 A 是一样的吗？我们认为肯定是不一样的，但是数据库是如何处理的呢？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_a(a &lt;span class=&quot;code-snippet__built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;A&#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; a = &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;a&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;执行结果是什么呢？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;2.0285714285714285&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R2GTMjJicuR67c9BubrVhf4f9MEPhgGs6EVDWbkqN9aJ245bcXbXkGFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;140&quot;/&gt;&lt;/p&gt;&lt;p&gt;本以为只会返回a，但是实际上把A也返回了，这是为什么呢？&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6597462514417531&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R45sPZngXJxOsbSgSJntTfpaaw28PXS8HVsno9GWwia3gOEEncZDOFOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该表默认的Collation是utf8_general_ci，这种Collation会忽略大小写，所以才会出现查询小写字母a的值，意外把大写字母A的值也查询出来了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么如果我们只想查询出小写a的值该怎么办？先看看mysql支持哪些Collation？&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;collation&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.9460043196544277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R78ovicZ9fGT9ibm5ff8lUS2eX5x71wmWO7yUk6NucviaNh24Nibl4U2Qtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;926&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从上图中我们可以找到utf8_bin，这个表示二进制格式的数据，我们设置成种类型的试试。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8309659090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7RICruHzlMA1zWkTVCUC6eHEvSdU4ibFxZAibP0FMKfuamnCsO13xtmKqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1408&quot;/&gt;&lt;/p&gt;&lt;p&gt;修改一下字段类型&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;MODIFY&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLUMN&lt;/span&gt; a &lt;span class=&quot;code-snippet__built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;BINARY&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&quot;code-snippet__keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;code-snippet__literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;再查看一下数据&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; test_a &lt;span&gt;where&lt;/span&gt; a = &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1066666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHJ3E7yXI4qszEUVcmnQk7R7BB2R8Dtpno0332VWsLdKW9euSr9gfefiaR4y4dFcHcpzCLGAEdvvjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;150&quot;/&gt;&lt;/p&gt;&lt;h1&gt;果然，结果对了。&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;六、特殊字符&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;笔者之前做项目的时候，提供过一个留言的功能，结果客户端用户输入了一个&lt;span&gt;emoji表情&lt;/span&gt;，直接导致接口报错了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.38699690402476783&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGRahDFph9VdumRibZHlQicwXq2U3yG799aF9fzq2ghDuhcPcSLEovJibb577X2JgMJxh7NSw9z9ic3qQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1292&quot;/&gt;&lt;/p&gt;&lt;p&gt;最后定位原因是由于当时数据库和表的字符编码都是用的utf8，mysql的utf8编码的一个字符最多3个字节，但是一个emoji表情为4个字节，所以utf8不支持存储emoji表情。&lt;/p&gt;&lt;p&gt;该如何解决这个问题呢？&lt;/p&gt;&lt;p&gt;将字符编码改成utf8mb4，utf8mb4最多能有4字节，不过，在mysql5.5.3或更高的版本才支持。&lt;/p&gt;&lt;p&gt;在mysql 的配置文件 my.cnf 或 my.ini 配置文件中修改如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;[client]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;default-character-set&lt;/span&gt; = utf8mb4&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[mysqld]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;character-set-server&lt;/span&gt; = utf8mb4&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;collation-server&lt;/span&gt;     = utf8mb4_general_ci&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;重启MySQL，然后使用以下命令查看编码，应该全部为utf8mb4，这是修改整个数据库的编码方式。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;SHOW&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;VARIABLES&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;WHERE&lt;/span&gt; Variable_name &lt;span class=&quot;code-snippet__keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;character_set_%&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;OR&lt;/span&gt; Variable_name &lt;span class=&quot;code-snippet__keyword&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;collation%&#x27;&lt;/span&gt;;ji&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;结果为：&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.37280701754385964&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGRahDFph9VdumRibZHlQicwXVwibXVUqsFllwBf1hwHLibRP7Dl5fDscxm0UicV23Uuta6JAH2WLibhA5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/p&gt;&lt;p&gt;也可以单独修改某张表的编码方式：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;collate&lt;/span&gt; utf8mb4_bin;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以及修改某个字段的编码方式：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;TABLE&lt;/span&gt; test_a &lt;span class=&quot;code-snippet__keyword&quot;&gt;CHANGE&lt;/span&gt; a a &lt;span class=&quot;code-snippet__built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;code-snippet__built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SET&lt;/span&gt; utf8mb4 &lt;span class=&quot;code-snippet__keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_bin;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;此外，建议同学们在创建数据库和表的时候字符编码都定义成utf8mb4，避免一些不必要的问题。&lt;/p&gt;&lt;p&gt;     如果这篇文档对您有所帮助的话，麻烦关注一下我的公众账号：苏三说技术，或者帮忙点赞或转发，坚持原创不易，您的支持是我坚持最大的动力。后面我会分享更多更实用的干货，谢谢大家的支持。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDGsibXoHlicSSykQx2g6EIOcDYXZibFYFsH55jtWxEMAicoF7yj1uDM3nftc7A0JWjhScKgjs7iarAiaBxQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>299d10bffe87bf60d12659e945e29bcb</guid>
<title>[推荐] 13 张图彻底搞懂分布式系统服务注册与发现原理</title>
<link>https://toutiao.io/k/f9kkb5t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;引入服务注册与发现组件的原因&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看一个问题，假如现在我们要做一个商城项目，作为架构师的你应该怎样设计系统的架构？你心里肯定在想：这还不容易直接照搬淘宝的架构不就行了。但在现实的创业环境中一个项目可能是九死一生，如果一开始投入巨大的人力和财力，一旦项目失败损失就很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为一位有经验的架构师需要结合公司财力、人力投入预算等现状选择最适合眼下的架构才是王道。大型网站都是从小型网站发展而来，架构也是一样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;任何一个大型网站的架构都不是从一开始就一层不变的，而是随着用户量和数据量的不断增加不断迭代演进的结果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在架构不断迭代演进的过程中我们会遇到很多问题，&lt;strong&gt;技术发展的本质就是不断发现问题再解决问题，解决问题又发现问题&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;strong&gt;单体架构&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在系统建立之初可能不会有特别多的用户，将所有的业务打成一个应用包放在tomcat容器中运行，与数据库共用一台服务器，这种架构一般称之为单体架构。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8589743589743589&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1Yy1lpDpnSgrIUzMCUAShjPozEcMOJlPM9KEZoViblj0qF7TJs70DibHFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;780&quot;/&gt;&lt;figcaption&gt;单体架构-应用和数据库共同部署&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在初期这种架构的效率非常高，根据用户的反馈可以快速迭代上线。但是随着用户量增加，一台服务的内存和CPU吃紧，很容易造成瓶颈，新的问题来了怎么解决呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;应用与数据分离&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着用户请求量增加，一台服务器的内存和CPU持续飙升，用户请求响应时间变慢。这时候可以考虑将应用与数据库拆开，各自使用一台服务器，你看问题又解决了吧。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0881542699724518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YoL2Pibpkhp9Wo5grIzjFXia28tSHKjqHia8W2Gh58wxBuCJdgJlNKDwHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot;/&gt;&lt;figcaption&gt;单体架构-应用和数据库分离&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;突然有一天扫地阿姨不小心碰了电线，其中一台服务器掉电了，用户所有的请求都报错，随之而来的是一系列投诉电话。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;集群部署&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单实例很容易造成单点问题，比如遇到服务器故障或者服务能力瓶颈，那怎么办？聪明的你肯定想到了，用集群呀。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8782287822878229&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YBIgyiasm5iamgdAvJEn18AR1xPlfjcicLIPibyR1bPpYEbncPS2xibOzYVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1084&quot;/&gt;&lt;figcaption&gt;应用集群部署&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群部署是指将应用部署在多个服务器或者虚机上，用户通过服务均衡随机访问其中的一个实例，从而使多个实例的流量均衡，如果一个实例出现故障可以将其下线，其他实例不受影响仍然可以对外提供服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着用户数量快速增加，老板决定增加投入扩大团队规模。开发团队壮大后效率并没有得到显著的提高，以前小团队可以一周迭代上线一次，现在至少需要两到三周时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务逻辑越来越复杂，代码间耦合很严重，修改一行代码可能引入几个线上问题。架构师意识到需要进行架构重构。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;微服务架构&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当单体架构演进到一定阶段后开发测试的复杂性都会成本增加，团队规模的扩大也会使得各自工作耦合性更严重，牵一发而动全身就是这种场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单体架构遇到瓶颈了，微服务架构就横空出世了。微服务就是将之前的单体服务按照业务维度进行拆分，拆分粒度可大可小，拆分时机可以分节奏进行。最佳实践是先将一些独立的功能从单体中剥离出来抽成一个或多个微服务，这样可以保障业务的连续性和稳定性。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8771929824561403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YvlySHf3wnCtdbvSDx4JBV4YJJuXbvrF1DXmN3hMLBcHLGvOk4zFTEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1368&quot;/&gt;&lt;figcaption&gt;微服务架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如上图将一个商用应用拆分为六个独立微服务。六个微服务可以使用Docker容器化进行多实例部署。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构演化到这里遇到了一个难题，如果要查询用户所有的订单，用户服务可能会依赖订单服务，用户服务如何与订单服务交互呢？订单服务有多个实例该访问哪一个？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常有几种解决办法：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（1）服务地址硬编码&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务的地址写死在数据库或者配置文件，通过访问DNS域名进行寻址路由。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.68561872909699&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1Yw9zpILmDibILP43qdWrBaQuOiaLV5HlRssCmaMEV2yPzHY2ksgQ6FrQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1196&quot;/&gt;&lt;figcaption&gt;服务元数据硬编码&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务B的地址硬编码在数据库或者配置文件中，服务A首先需要拿到服务B的地址，然后通过DNS服务器解析获取其中一实例的真实地址，最后可以向服务B发起请求。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果遇到大促活动需要对服务实例扩容，大促完需要对服务实例进行下线，运维人员要做大量的手工操作，非常容易误操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;（2）服务动态注册与发现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务地址硬编码还有一个非常致命的问题，如果一台实例挂了，运维人员可能不能及时感知到，导致一部分用户的请求会异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;引入服务注册与发现组件可以很好解决上面遇到的问题，避免过多的人工操作。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;架构演进总结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在单体架构中一个应用程序就是一个服务包，包内的模块通过函数方法相互调用，模型足够简单，根本没有服务注册和发现一说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在微服务架构中会将一个应用程序拆分为多个微服务，微服务会部署在不同的服务器、不同的容器、甚至多数据中心，微服务间要相互调用，服务注册和发现成为了一个不可或缺的组件。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;服务注册与发现基本原理&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务注册与发现是分为注册和发现两个关键的步骤。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务注册&lt;/strong&gt;：服务进程在注册中心注册自己的元数据信息。通常包括主机和端口号，有时还有身份验证信息，协议，版本号，以及运行环境的信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：客户端服务进程向注册中心发起查询，来获取服务的信息。服务发现的一个重要作用就是提供给客户端一个可用的服务列表。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;服务注册&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务注册有两种形式：客户端注册和代理注册。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;客户端注册&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端注册是服务自己要负责注册与注销的工作。当服务启动后注册线程向注册中心注册，当服务下线时注销自己。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.22934232715008432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YibU8A8rBNr7YzicTNU6vT2xhtzmDGb4yIZvU6xmK2CtRUadT3NIujl4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot;/&gt;&lt;figcaption&gt;客户端注册&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的缺点是注册注销逻辑与服务的业务逻辑耦合在一起，如果服务使用不同语言开发，那需要适配多套服务注册逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代理注册&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代理注册由一个单独的代理服务负责注册与注销。当服务提供者启动后以某种方式通知代理服务，然后代理服务负责向注册中心发起注册工作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32371794871794873&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YiavZKfZPwyWXibjiaWVtQP1mb8hFXKpX5KHibMtTbvFAQV0Nc5rwknLx8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1248&quot;/&gt;&lt;figcaption&gt;代理注册&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式的缺点是多引用了一个代理服务，并且代理服务要保持高可用状态。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;服务发现&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务发现也分为客户端发现和代理发现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;客户端发现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端发现是指客户端负责向注册中心查询可用服务地址，获取到所有的可用实例地址列表后客户端根据负载均衡算法选择一个实例发起请求调用。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4648729446935725&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1Y604U6SEL81XhRYpuubvaB1B89eZUNHYz0wnvVGrRqFIZB8yRGRIhyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1338&quot;/&gt;&lt;figcaption&gt;客户端发现&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式非常直接，客户端可以控制负载均衡算法。但是缺点也很明显，获取实例地址、负载均衡等逻辑与服务的业务逻辑耦合在一起，如果服务发现或者负载平衡有变化，那么所有的服务都要修改重新上线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;代理发现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代理发现是指新增一个路由服务负责服务发现获取可用的实例列表，服务消费者如果需要调用服务A的一个实例可以直接将请求发往路由服务，路由服务根据配置好的负载均衡算法从可用的实例列表中选择一个实例将请求转发过去即可，如果发现实例不可用，路由服务还可以自行重试，服务消费者完全不用感知。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3880407124681934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YKK0I3aW4URJEb3uibncYDb70BQbRDsiasGw6WTuiaY0ARaeayY8p6xStQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1572&quot;/&gt;&lt;figcaption&gt;代理路由服务注册&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;心跳机制&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果服务有多个实例，其中一个实例出现宕机，注册中心是可以实时感知到，并且将该实例信息从列表中移出，也称为摘机。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何实现摘机？业界比较常用的方式是通过心跳检测的方式实现，心跳检测有&lt;strong&gt;主动&lt;/strong&gt;和&lt;strong&gt;被动&lt;/strong&gt;两种方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;被动检测&lt;/strong&gt;是指服务主动向注册中心发送心跳消息，时间间隔可自定义，比如配置5秒发送一次，注册中心如果在三个周期内比如说15秒内没有收到实例的心跳消息，就会将该实例从列表中移除。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5235294117647059&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1Ysqr2CSsoNpReXCmg2zFTLCMuyuibSheOibTQlDNO4mDuiapEzkAiaiaV6wg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1020&quot;/&gt;&lt;figcaption&gt;心跳机制-被动检测&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中服务A的实例2已经宕机不能主动给注册中心发送心跳消息，15秒之后注册就会将实例2移除掉。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;主动检测&lt;/strong&gt;是注册中心主动发起，每隔几秒中会给所有列表中的服务实例发送心跳检测消息，如果多个周期内未发送成功或未收到回复就会主动移除该实例。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5185185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1Y7lK6NlTicv232833icKoG9ZIrhVIeQFK8GuvML8E6nGPibjEtrpVBPNuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;/&gt;&lt;figcaption&gt;心跳机制-主动检测&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业界常用的服务注册与发现组件对比&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解服务注册与发现的基本原理后，如果你要在项目中使用服务注册与发现组件，当面对众多的开源组件该如何进行技术选型？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在互联网公司里，有研发实力的大公司一般会选择自研或者基于开源组件进行二次开发，但是对于中小型公司来说直接选用一款开源软件会是一个不错的选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常用的注册与发现组件有eureka，zookeeper，consul，etcd等，由于eureka在2018年已经宣布放弃维护，这里就不再推荐使用了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32325141776937616&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YK9wPaIDydpE0A60bJV2GdnHRsvjZmgAibumCQjjRwdYON2GLvGaROLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1058&quot;/&gt;&lt;figcaption&gt;业界开源组件&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面结合各个维度对比一下各组件。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table data-sort=&quot;sortDisabled&quot; interlaced=&quot;disabled&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;组件&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;接口类型&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;一致性算法&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1.功能强大，不仅仅只是服务发现；&lt;br/&gt;2.提供watcher机制可以实时获取服务提供者的状态；&lt;br/&gt;3.广泛使用，dubbo等微服务框架已支持；&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1.没有健康检查；&lt;br/&gt;2.需要在服务中引入sdk，集成复杂度高；&lt;br/&gt;3.不支持多数据中心；&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;sdk&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;Paxos&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;consul&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1.开箱即用，方便集成；&lt;br/&gt;2.带健康检查；&lt;br/&gt;3.支持多数据中心；&lt;br/&gt;4.提供web管理界面；&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不能实时获取服务变换通知&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;restful/dns&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;Raft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1.开箱即用，方便集成；&lt;br/&gt;2.可配置性强&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;1.没有健康检查；&lt;br/&gt;2.需配合三方工具完成服务发现功能；&lt;br/&gt;3.不支持多数据中心；&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;restful&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;Raft&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从整体上看consul的功能更加完备和均衡。接下来以consul为例详细介绍一下。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Consul——值得推荐的服务注册与发现开源组件&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简单认识一下Consul&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Consul是HashiCorp公司推出的开源工，使用Go语言开发，具有开箱即可部署方便的特点。Consul是分布式的、高可用的、 可横向扩展的用于实现分布式系统的服务发现与配置。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Consul有哪些优势？&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;服务注册发现：Consul提供了通过DNS或者restful接口的方式来注册服务和发现服务。服务可根据实际情况自行选择。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;健康检查：Consul的Client可以提供任意数量的健康检查，既可以与给定的服务相关联，也可以与本地节点相关联。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多数据中心：Consul支持多数据中心，这意味着用户不需要担心Consul自身的高可用性问题以及多数据中心带来的扩展接入等问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Consul的架构图&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7142857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EozrV0KJDBlyZ3dH8NBBH1YOIpiclpFn79C0xhaicN8eKZIhMGBIibgTxicxZm6UuBVWic4JWXuEOQ3vEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;figcaption&gt;Consul架构&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Consul 实现多数据中心依赖于gossip protocol协议。这样做的目的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不需要使用服务器的地址来配置客户端；服务发现是自动完成的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;健康检查故障的工作不是放在服务器上，而是分布式的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Consul的使用场景&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Consul的应用场景包括&lt;strong&gt;服务注册发现&lt;/strong&gt;、&lt;strong&gt;服务隔离&lt;/strong&gt;、&lt;strong&gt;服务配置&lt;/strong&gt;等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务注册发现场景&lt;/strong&gt;中consul作为注册中心，服务地址被注册到consul中以后，可以使用consul提供的dns、http接口查询，consul支持health check。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务隔离场景&lt;/strong&gt;中consul支持以服务为单位设置访问策略，能同时支持经典的平台和新兴的平台，支持tls证书分发，service-to-service加密。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务配置场景&lt;/strong&gt;中consul提供key-value数据存储功能，并且能将变动迅速地通知出去，借助Consul可以实现配置共享，需要读取配置的服务可以从Consul中读取到准确的配置信息。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>