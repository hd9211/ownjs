<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>6e80167183b31eee435ae27e9e9f3f3f</guid>
<title>2022 最新Java基础常见知识&amp;面试题总结(上)!</title>
<link>https://toutiao.io/k/wm0jjmm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;theme-hope-content&quot;&gt;&lt;h2 id=&quot;基础概念与常识&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基础概念与常识&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 基础概念与常识&lt;/h2&gt;&lt;h3 id=&quot;java-语言有哪些特点&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-语言有哪些特点&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; Java 语言有哪些特点?&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;简单易学；&lt;/li&gt;&lt;li&gt;面向对象（封装，继承，多态）；&lt;/li&gt;&lt;li&gt;平台无关性（ Java 虚拟机实现平台无关性）；&lt;/li&gt;&lt;li&gt;支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；&lt;/li&gt;&lt;li&gt;可靠性；&lt;/li&gt;&lt;li&gt;安全性；&lt;/li&gt;&lt;li&gt;支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；&lt;/li&gt;&lt;li&gt;编译与解释并存；&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;🐛 修正（参见： &lt;a href=&quot;https://github.com/Snailclimb/JavaGuide/issues/544&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;issue#544&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;）&lt;/strong&gt; ：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用&lt;code&gt;std::thread&lt;/code&gt;和&lt;code&gt;std::async&lt;/code&gt;来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;🌈 拓展一下：&lt;/p&gt;&lt;p&gt;“Write Once, Run Anywhere（一次编写，随处运行）”这句宣传口号，真心经典，流传了好多年！以至于，直到今天，依然有很多人觉得跨平台是 Java 语言最大的优势。实际上，跨平台已经不是 Java 最大的卖点了，各种 JDK 新特性也不是。目前市面上虚拟化技术已经非常成熟，比如你通过 Docker 就很容易实现跨平台了。在我看来，Java 强大的生态才是！&lt;/p&gt;&lt;h3 id=&quot;jvm-vs-jdk-vs-jre&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#jvm-vs-jdk-vs-jre&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; JVM vs JDK vs JRE&lt;/h3&gt;&lt;h4 id=&quot;jvm&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#jvm&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; JVM&lt;/h4&gt;&lt;p&gt;Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。&lt;/strong&gt; 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。&lt;/p&gt;&lt;p&gt;除了我们平时最常用的 HotSpot VM 外，还有 J9 VM、Zing VM、JRockit VM 等 JVM 。维基百科上就有常见 JVM 的对比：&lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Comparison of Java virtual machines&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; ，感兴趣的可以去看看。并且，你可以在 &lt;a href=&quot;https://docs.oracle.com/javase/specs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java SE Specifications&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; 上找到各个版本的 JDK 对应的 JVM 规范。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/java-se-specifications.58c8e615.png&quot; alt=&quot;Java SE Specifications&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;&lt;h4 id=&quot;jdk-和-jre&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#jdk-和-jre&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; JDK 和 JRE&lt;/h4&gt;&lt;p&gt;JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。&lt;/p&gt;&lt;p&gt;JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。&lt;/p&gt;&lt;p&gt;如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。&lt;/p&gt;&lt;h3 id=&quot;什么是字节码-采用字节码的好处是什么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么是字节码-采用字节码的好处是什么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 什么是字节码?采用字节码的好处是什么?&lt;/h3&gt;&lt;p&gt;在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 &lt;code&gt;.class&lt;/code&gt; 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Java 程序从源代码到运行的过程如下图所示：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/java程序转变为机器代码的过程.3af43aee.png&quot; alt=&quot;Java程序转变为机器代码的过程&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们需要格外注意的是 &lt;code&gt;.class-&amp;gt;机器码&lt;/code&gt; 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 &lt;strong&gt;Java 是编译与解释共存的语言&lt;/strong&gt; 。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;为什么说-java-语言-编译与解释并存&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#为什么说-java-语言-编译与解释并存&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 为什么说 Java 语言“编译与解释并存”？&lt;/h3&gt;&lt;p&gt;其实这个问题我们讲字节码的时候已经提到过，因为比较重要，所以我们这里再提一下。&lt;/p&gt;&lt;p&gt;我们可以将高级编程语言按照程序的执行方式分为两种：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/assets/编译型语言和解释型语言.9908e5e6.png&quot; alt=&quot;编译型语言和解释型语言&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;&lt;p&gt;根据维基百科介绍：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;为了改善编译语言的效率而发展出的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;即时编译&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E7%A0%81&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;字节码&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;。到执行期时，再将字节码直译，之后执行。&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Java&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;与&lt;a href=&quot;https://zh.wikipedia.org/wiki/LLVM&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LLVM&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;是这种技术的代表产物。&lt;/p&gt;&lt;p&gt;相关阅读：&lt;a href=&quot;https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;基本功 | Java 即时编译器原理解析及实践&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;为什么说 Java 语言“编译与解释并存”？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（&lt;code&gt;.class&lt;/code&gt; 文件），这种字节码必须由 Java 解释器来解释执行。&lt;/p&gt;&lt;h3 id=&quot;oracle-jdk-vs-openjdk&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#oracle-jdk-vs-openjdk&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; Oracle JDK vs OpenJDK&lt;/h3&gt;&lt;p&gt;可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle JDK 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。&lt;/p&gt;&lt;p&gt;对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？&lt;/p&gt;&lt;p&gt;答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些闭源的第三方组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：&lt;a href=&quot;https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; 。&lt;/li&gt;&lt;li&gt;OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；&lt;/li&gt;&lt;li&gt;Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；&lt;/li&gt;&lt;li&gt;在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；&lt;/li&gt;&lt;li&gt;Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；&lt;/li&gt;&lt;li&gt;Oracle JDK 使用 BCL/OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;🌈 拓展一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;BCL 协议（Oracle Binary Code License Agreement）： 可以使用 JDK（支持商用），但是不能进行修改。&lt;/li&gt;&lt;li&gt;OTN 协议（Oracle Technology Network License Agreement）： 11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/java-guide-blog/20210425151835918.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;&lt;p&gt;相关阅读 👍：&lt;a href=&quot;https://www.baeldung.com/oracle-jdk-vs-openjdk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;《Differences Between Oracle JDK and OpenJDK》&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;java-和-c-的区别&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-和-c-的区别&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; Java 和 C++ 的区别?&lt;/h3&gt;&lt;p&gt;我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来。&lt;/p&gt;&lt;p&gt;虽然，Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java 不提供指针来直接访问内存，程序内存更加安全&lt;/li&gt;&lt;li&gt;Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。&lt;/li&gt;&lt;li&gt;Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。&lt;/li&gt;&lt;li&gt;C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。&lt;/li&gt;&lt;li&gt;......&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;基本语法&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基本语法&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 基本语法&lt;/h2&gt;&lt;h3 id=&quot;字符型常量和字符串常量的区别&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符型常量和字符串常量的区别&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 字符型常量和字符串常量的区别?&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;形式&lt;/strong&gt; : 字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;含义&lt;/strong&gt; : 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;占内存大小&lt;/strong&gt; ： 字符常量只占 2 个字节; 字符串常量占若干个字节。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;(&lt;strong&gt;注意： &lt;code&gt;char&lt;/code&gt; 在 Java 中占两个字节&lt;/strong&gt;)&lt;/p&gt;&lt;h3 id=&quot;注释有哪几种形式&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#注释有哪几种形式&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 注释有哪几种形式？&lt;/h3&gt;&lt;p&gt;Java 中的注释有三种：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;单行注释&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;多行注释&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文档注释。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。&lt;/p&gt;&lt;p&gt;《Clean Code》这本书明确指出：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;p&gt;去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token comment&quot;&gt;// check to see if the employee is eligible for full benefits&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flags &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; HOURLY_FLAG&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;应替换为&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;employee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isEligibleForFullBenefits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;标识符和关键字的区别是什么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#标识符和关键字的区别是什么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 标识符和关键字的区别是什么？&lt;/h3&gt;&lt;p&gt;在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 &lt;strong&gt;标识符&lt;/strong&gt; 。简单来说， &lt;strong&gt;标识符就是一个名字&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 &lt;strong&gt;关键字&lt;/strong&gt; 。简单来说，&lt;strong&gt;关键字是被赋予特殊含义的标识&lt;/strong&gt;符 。比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。&lt;/p&gt;&lt;h3 id=&quot;java-语言关键字有哪些&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-语言关键字有哪些&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; Java 语言关键字有哪些？&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;分类&lt;/th&gt;&lt;th&gt;关键字&lt;/th&gt;&lt;th/&gt;&lt;th/&gt;&lt;th/&gt;&lt;th/&gt;&lt;th/&gt;&lt;th/&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;访问控制&lt;/td&gt;&lt;td&gt;private&lt;/td&gt;&lt;td&gt;protected&lt;/td&gt;&lt;td&gt;public&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;类，方法和变量修饰符&lt;/td&gt;&lt;td&gt;abstract&lt;/td&gt;&lt;td&gt;class&lt;/td&gt;&lt;td&gt;extends&lt;/td&gt;&lt;td&gt;final&lt;/td&gt;&lt;td&gt;implements&lt;/td&gt;&lt;td&gt;interface&lt;/td&gt;&lt;td&gt;native&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;&lt;td&gt;new&lt;/td&gt;&lt;td&gt;static&lt;/td&gt;&lt;td&gt;strictfp&lt;/td&gt;&lt;td&gt;synchronized&lt;/td&gt;&lt;td&gt;transient&lt;/td&gt;&lt;td&gt;volatile&lt;/td&gt;&lt;td&gt;enum&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;程序控制&lt;/td&gt;&lt;td&gt;break&lt;/td&gt;&lt;td&gt;continue&lt;/td&gt;&lt;td&gt;return&lt;/td&gt;&lt;td&gt;do&lt;/td&gt;&lt;td&gt;while&lt;/td&gt;&lt;td&gt;if&lt;/td&gt;&lt;td&gt;else&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;&lt;td&gt;for&lt;/td&gt;&lt;td&gt;instanceof&lt;/td&gt;&lt;td&gt;switch&lt;/td&gt;&lt;td&gt;case&lt;/td&gt;&lt;td&gt;default&lt;/td&gt;&lt;td&gt;assert&lt;/td&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;错误处理&lt;/td&gt;&lt;td&gt;try&lt;/td&gt;&lt;td&gt;catch&lt;/td&gt;&lt;td&gt;throw&lt;/td&gt;&lt;td&gt;throws&lt;/td&gt;&lt;td&gt;finally&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;包相关&lt;/td&gt;&lt;td&gt;import&lt;/td&gt;&lt;td&gt;package&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;基本类型&lt;/td&gt;&lt;td&gt;boolean&lt;/td&gt;&lt;td&gt;byte&lt;/td&gt;&lt;td&gt;char&lt;/td&gt;&lt;td&gt;double&lt;/td&gt;&lt;td&gt;float&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;long&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;&lt;td&gt;short&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;变量引用&lt;/td&gt;&lt;td&gt;super&lt;/td&gt;&lt;td&gt;this&lt;/td&gt;&lt;td&gt;void&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;保留字&lt;/td&gt;&lt;td&gt;goto&lt;/td&gt;&lt;td&gt;const&lt;/td&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。&lt;/p&gt;&lt;p&gt;&lt;code&gt;default&lt;/code&gt; 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在程序控制中，当在 &lt;code&gt;switch&lt;/code&gt; 中匹配不到任何情况时，可以使用 &lt;code&gt;default&lt;/code&gt; 来编写默认匹配的情况。&lt;/li&gt;&lt;li&gt;在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 &lt;code&gt;default&lt;/code&gt; 关键字来定义一个方法的默认实现。&lt;/li&gt;&lt;li&gt;在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 &lt;code&gt;default&lt;/code&gt;，但是这个修饰符加上了就会报错。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;⚠️注意 ：虽然 &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, 和 &lt;code&gt;null&lt;/code&gt; 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。&lt;/p&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;自增自减运算符&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#自增自减运算符&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 自增自减运算符&lt;/h3&gt;&lt;p&gt;在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。&lt;/p&gt;&lt;p&gt;++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 &lt;code&gt;b = ++a&lt;/code&gt; 时，先自增（自己增加 1），再赋值（赋值给 b）；当 &lt;code&gt;b = a++&lt;/code&gt; 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。&lt;/p&gt;&lt;h3 id=&quot;continue、break-和-return-的区别是什么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#continue、break-和-return-的区别是什么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; continue、break 和 return 的区别是什么？&lt;/h3&gt;&lt;p&gt;在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; ：指跳出当前的这一次循环，继续下一次循环。&lt;/li&gt;&lt;li&gt;&lt;code&gt;break&lt;/code&gt; ：指跳出整个循环体，继续执行循环下面的语句。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;code&gt;return&lt;/code&gt; 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;return;&lt;/code&gt; ：直接使用 return 结束方法执行，用于没有返回值函数的方法&lt;/li&gt;&lt;li&gt;&lt;code&gt;return value;&lt;/code&gt; ：return 一个特定值，用于有返回值函数的方法&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;思考一下：下列语句的运行结果是什么？&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                flag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;xixi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;heihei&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;运行结果：&lt;/p&gt;&lt;div class=&quot;language-text ext-text line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;0
xixi
1
2
xixi
3
haha
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&quot;方法&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#方法&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 方法&lt;/h3&gt;&lt;h4 id=&quot;什么是方法的返回值-方法有哪几种类型&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么是方法的返回值-方法有哪几种类型&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 什么是方法的返回值?方法有哪几种类型？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法的返回值&lt;/strong&gt; 是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！&lt;/p&gt;&lt;p&gt;我们可以按照方法的返回值和参数类型将方法分为下面这几种：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.无参数无返回值的方法&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 下面这个方法也没有返回值，虽然用到了 return&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 表示结束方法的执行,下方的输出语句不会执行&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2.有参数无返回值的方法&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Parameter&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Parameter&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;3.有返回值无参数的方法&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;4.有返回值有参数的方法&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h4 id=&quot;静态方法为什么不能调用非静态成员&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#静态方法为什么不能调用非静态成员&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 静态方法为什么不能调用非静态成员?&lt;/h4&gt;&lt;p&gt;这个需要结合 JVM 的相关知识，主要原因如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。&lt;/li&gt;&lt;li&gt;在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&quot;静态方法和实例方法有何不同&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#静态方法和实例方法有何不同&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 静态方法和实例方法有何不同？&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、调用方式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在外部调用静态方法时，可以使用 &lt;code&gt;类名.方法名&lt;/code&gt; 的方式，也可以使用 &lt;code&gt;对象.方法名&lt;/code&gt; 的方式，而实例方法只有后面这种方式。也就是说，&lt;strong&gt;调用静态方法可以无需创建对象&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;不过，需要注意的是一般不建议使用 &lt;code&gt;对象.方法名&lt;/code&gt; 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。&lt;/p&gt;&lt;p&gt;因此，一般建议使用 &lt;code&gt;类名.方法名&lt;/code&gt; 的方式来调用静态方法。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;staicMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 调用实例方法&lt;/span&gt;
        person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 调用静态方法&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;staicMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2、访问类成员是否存在限制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。&lt;/p&gt;&lt;h4 id=&quot;重载和重写的区别&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#重载和重写的区别&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 重载和重写的区别&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理&lt;/p&gt;&lt;p&gt;重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;重载&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。&lt;/p&gt;&lt;p&gt;《Java 核心技术》这本书是这样介绍重载的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果多个方法(比如 &lt;code&gt;StringBuilder&lt;/code&gt; 的构造方法)有相同的名字、不同的参数， 便产生了重载。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt; sb2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。 如果编译器找不到匹配的参数， 就会产生编译时错误， 因为根本不存在匹配， 或者没有一个比其他的更好(这个过程被称为重载解析(overloading resolution))。&lt;/p&gt;&lt;p&gt;Java 允许重载任何方法， 而不只是构造器方法。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;重写&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。&lt;/li&gt;&lt;li&gt;如果父类方法访问修饰符为 &lt;code&gt;private/final/static&lt;/code&gt; 则子类就不能重写该方法，但是被 &lt;code&gt;static&lt;/code&gt; 修饰的方法能够被再次声明。&lt;/li&gt;&lt;li&gt;构造方法无法被重写&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;综上：&lt;strong&gt;重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。&lt;/strong&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;区别点&lt;/th&gt;&lt;th&gt;重载方法&lt;/th&gt;&lt;th&gt;重写方法&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;发生范围&lt;/td&gt;&lt;td&gt;同一个类&lt;/td&gt;&lt;td&gt;子类&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;参数列表&lt;/td&gt;&lt;td&gt;必须修改&lt;/td&gt;&lt;td&gt;一定不能修改&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;返回类型&lt;/td&gt;&lt;td&gt;可修改&lt;/td&gt;&lt;td&gt;子类方法返回值类型应比父类方法返回值类型更小或相等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;异常&lt;/td&gt;&lt;td&gt;可修改&lt;/td&gt;&lt;td&gt;子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;访问修饰符&lt;/td&gt;&lt;td&gt;可修改&lt;/td&gt;&lt;td&gt;一定不能做更严格的限制（可以降低限制）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;发生阶段&lt;/td&gt;&lt;td&gt;编译期&lt;/td&gt;&lt;td&gt;运行期&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;方法的重写要遵循“两同两小一大”&lt;/strong&gt;（以下内容摘录自《疯狂 Java 讲义》，&lt;a href=&quot;https://github.com/Snailclimb/JavaGuide/issues/892&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;issue#892&lt;span&gt;&lt;svg class=&quot;external-link-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; aria-hidden=&quot;true&quot; focusable=&quot;false&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewbox=&quot;0 0 100 100&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;/&gt;&lt;polygon fill=&quot;currentColor&quot; points=&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;/&gt;&lt;/svg&gt;&lt;span class=&quot;external-link-icon-sr-only&quot;&gt;open in new window&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; ）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;“两同”即方法名相同、形参列表相同；&lt;/li&gt;&lt;li&gt;“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；&lt;/li&gt;&lt;li&gt;“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;⭐️ 关于 &lt;strong&gt;重写的返回值类型&lt;/strong&gt; 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;超级英雄&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperMan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;超人&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hero&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperSuperMan&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperMan&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;超级超级英雄&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperMan&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SuperMan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&quot;什么是可变长参数&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什么是可变长参数&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 什么是可变长参数？&lt;/h3&gt;&lt;p&gt;从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面的这个 &lt;code&gt;printVariable&lt;/code&gt; 方法就可以接受 0 个或者多个参数。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; arg1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token comment&quot;&gt;//......&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;答案是会优先匹配固定参数的方法，因为固定参数的方法匹配度更高。&lt;/p&gt;&lt;p&gt;我们通过下面这个例子来证明一下。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token doc-comment comment&quot;&gt;/**
 * 微信搜 JavaGuide 回复&quot;面试突击&quot;即可免费领取个人原创的 Java 面试手册
 *
 * &lt;span class=&quot;token keyword&quot;&gt;@author&lt;/span&gt; Guide哥
 * &lt;span class=&quot;token keyword&quot;&gt;@date&lt;/span&gt; 2021/12/13 16:52
 **/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VariableLengthArgument&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; arg1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; arg2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; arg2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;p&gt;另外，Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的 &lt;code&gt;class&lt;/code&gt;文件就可以看出来了。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VariableLengthArgument&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;printVariable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; var1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; var2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; var3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; var3 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; var2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;var3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; var1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;var3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ......&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&quot;基本数据类型&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基本数据类型&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 基本数据类型&lt;/h2&gt;&lt;h3 id=&quot;java-中的几种基本数据类型了解么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java-中的几种基本数据类型了解么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; Java 中的几种基本数据类型了解么？&lt;/h3&gt;&lt;p&gt;Java 中有 8 种基本数据类型，分别为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;6 种数字类型： &lt;ul&gt;&lt;li&gt;4 种整数型：&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;&lt;/li&gt;&lt;li&gt;2 种浮点型：&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;1 种字符类型：&lt;code&gt;char&lt;/code&gt;&lt;/li&gt;&lt;li&gt;1 种布尔型：&lt;code&gt;boolean&lt;/code&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这 8 种基本数据类型的默认值以及所占空间的大小如下：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;基本类型&lt;/th&gt;&lt;th&gt;位数&lt;/th&gt;&lt;th&gt;字节&lt;/th&gt;&lt;th&gt;默认值&lt;/th&gt;&lt;th&gt;取值范围&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;byte&lt;/code&gt;&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;-128 ~ 127&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;short&lt;/code&gt;&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;-32768 ~ 32767&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;-2147483648 ~ 2147483647&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;0L&lt;/td&gt;&lt;td&gt;-9223372036854775808 ~ 9223372036854775807&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;&#x27;u0000&#x27;&lt;/td&gt;&lt;td&gt;0 ~ 65535&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;0f&lt;/td&gt;&lt;td&gt;1.4E-45 ~ 3.4028235E38&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;0d&lt;/td&gt;&lt;td&gt;4.9E-324 ~ 1.7976931348623157E308&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td/&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;true、false&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;对于 &lt;code&gt;boolean&lt;/code&gt;，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。&lt;/p&gt;&lt;p&gt;另外，Java 的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java 编程思想》2.2 节有提到）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Java 里使用 &lt;code&gt;long&lt;/code&gt; 类型的数据一定要在数值后面加上 &lt;strong&gt;L&lt;/strong&gt;，否则将作为整型解析。&lt;/li&gt;&lt;li&gt;&lt;code&gt;char a = &#x27;h&#x27;&lt;/code&gt;char :单引号，&lt;code&gt;String a = &quot;hello&quot;&lt;/code&gt; :双引号。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这八种基本类型都有对应的包装类分别为：&lt;code&gt;Byte&lt;/code&gt;、&lt;code&gt;Short&lt;/code&gt;、&lt;code&gt;Integer&lt;/code&gt;、&lt;code&gt;Long&lt;/code&gt;、&lt;code&gt;Float&lt;/code&gt;、&lt;code&gt;Double&lt;/code&gt;、&lt;code&gt;Character&lt;/code&gt;、&lt;code&gt;Boolean&lt;/code&gt; 。&lt;/p&gt;&lt;h3 id=&quot;基本类型和包装类型的区别&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基本类型和包装类型的区别&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 基本类型和包装类型的区别？&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;包装类型不赋值就是 &lt;code&gt;null&lt;/code&gt; ，而基本类型有默认值且不是 &lt;code&gt;null&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;包装类型可用于泛型，而基本类型不可以。&lt;/li&gt;&lt;li&gt;基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 &lt;code&gt;static&lt;/code&gt; 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。&lt;/li&gt;&lt;li&gt;相比于对象类型， 基本数据类型占用的空间非常小。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;为什么说是几乎所有对象实例呢？&lt;/strong&gt; 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存&lt;/p&gt;&lt;p&gt;⚠️注意 ： &lt;strong&gt;基本数据类型存放在栈中是一个常见的误区！&lt;/strong&gt; 基本数据类型的成员变量如果没有被 &lt;code&gt;static&lt;/code&gt; 修饰的话（不建议这么使用，应该要使用基本数据类型对应的包装类型），就存放在堆中。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BasicTypeVar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3 id=&quot;包装类型的常量池技术了解么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#包装类型的常量池技术了解么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 包装类型的常量池技术了解么？&lt;/h3&gt;&lt;p&gt;Java 基本类型的包装类的大部分都实现了常量池技术。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Byte&lt;/code&gt;,&lt;code&gt;Short&lt;/code&gt;,&lt;code&gt;Integer&lt;/code&gt;,&lt;code&gt;Long&lt;/code&gt; 这 4 种包装类默认创建了数值 &lt;strong&gt;[-128，127]&lt;/strong&gt; 的相应类型的缓存数据，&lt;code&gt;Character&lt;/code&gt; 创建了数值在 &lt;strong&gt;[0,127]&lt;/strong&gt; 范围的缓存数据，&lt;code&gt;Boolean&lt;/code&gt; 直接返回 &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Integer 缓存源码：&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;low &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;high&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;low&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntegerCache&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; low &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; high&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// high value may be configured by property&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Character&lt;/code&gt; 缓存源码:&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// must cache&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CharacterCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CharacterCache&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CharacterCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            cache&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Boolean&lt;/code&gt; 缓存源码：&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; TRUE &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FALSE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。&lt;/p&gt;&lt;p&gt;两种浮点数类型的包装类 &lt;code&gt;Float&lt;/code&gt;,&lt;code&gt;Double&lt;/code&gt; 并没有实现常量池技术。&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; i2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 输出 true&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Float&lt;/span&gt; i11 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;333f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Float&lt;/span&gt; i22 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;333f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i11 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; i22&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 输出 false&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt; i3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Double&lt;/span&gt; i4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i3 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; i4&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 输出 false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;下面我们来看一下问题。下面的代码的输出结果是 &lt;code&gt;true&lt;/code&gt; 还是 &lt;code&gt;false&lt;/code&gt; 呢？&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i1&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;i2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Integer i1=40&lt;/code&gt; 这一行代码会发生装箱，也就是说这行代码等价于 &lt;code&gt;Integer i1=Integer.valueOf(40)&lt;/code&gt; 。因此，&lt;code&gt;i1&lt;/code&gt; 直接使用的是常量池中的对象。而&lt;code&gt;Integer i2 = new Integer(40)&lt;/code&gt; 会直接创建新的对象。&lt;/p&gt;&lt;p&gt;因此，答案是 &lt;code&gt;false&lt;/code&gt; 。你答对了吗？&lt;/p&gt;&lt;p&gt;记住：&lt;strong&gt;所有整型包装类对象之间值的比较，全部使用 equals 方法比较&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20210422164544846.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot;/&gt;&lt;/p&gt;&lt;h3 id=&quot;自动装箱与拆箱了解吗-原理是什么&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#自动装箱与拆箱了解吗-原理是什么&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 自动装箱与拆箱了解吗？原理是什么？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;什么是自动拆装箱？&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;装箱&lt;/strong&gt;：将基本类型用它们对应的引用类型包装起来；&lt;/li&gt;&lt;li&gt;&lt;strong&gt;拆箱&lt;/strong&gt;：将包装类型转换为基本数据类型；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;举例：&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//装箱&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;//拆箱&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;上面这两行代码对应的字节码为：&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;   L1

    LINENUMBER &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; L1

    ALOAD &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    BIPUSH &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;

    INVOKESTATIC java&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lang&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;valueOf &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Ljava&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lang&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    PUTFIELD &lt;span class=&quot;token class-name&quot;&gt;AutoBoxTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Ljava&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lang&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   L2

    LINENUMBER &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; L2

    ALOAD &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    ALOAD &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    GETFIELD &lt;span class=&quot;token class-name&quot;&gt;AutoBoxTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Ljava&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lang&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    INVOKEVIRTUAL java&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;lang&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intValue &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;I&lt;/span&gt;

    PUTFIELD &lt;span class=&quot;token class-name&quot;&gt;AutoBoxTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;I&lt;/span&gt;

    RETURN
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;从字节码中，我们发现装箱其实就是调用了 包装类的&lt;code&gt;valueOf()&lt;/code&gt;方法，拆箱其实就是调用了 &lt;code&gt;xxxValue()&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;因此，&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Integer i = 10&lt;/code&gt; 等价于 &lt;code&gt;Integer i = Integer.valueOf(10)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;int n = i&lt;/code&gt; 等价于 &lt;code&gt;int n = i.intValue()&lt;/code&gt;;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;注意：&lt;strong&gt;如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;language-java ext-java line-numbers-mode&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 应该使用 long 而不是 Long&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Long&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p class=&quot;line-numbers&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&quot;参考&quot; tabindex=&quot;-1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#参考&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt; 参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre&lt;/li&gt;&lt;li&gt;https://www.educba.com/oracle-vs-openjdk/&lt;/li&gt;&lt;li&gt;https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>22f9e865fa753212ed13d2a65d22e20a</guid>
<title>前端掌握这些 Linux 命令，够用了</title>
<link>https://toutiao.io/k/6q14us5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;大厂技术&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;高级前端&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Node进阶&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;点击上方 &lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(0, 128, 255)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(0, 128, 255)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(0, 128, 255)&quot;&gt;程序员成长指北&lt;/span&gt;&lt;span data-darkmode-bgcolor-16021670869911=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16021670869911=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16021670869911=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030289161394=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030289161394=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030289161394=&quot;rgb(136, 136, 136)&quot; data-darkmode-bgcolor-16030315732716=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16030315732716=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-16030315732716=&quot;rgb(136, 136, 136)&quot; data-darkmode-original-color-16030315732716=&quot;rgb(136, 136, 136)&quot;&gt;，关注公众号&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回复&lt;/span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;，加入高级Node交流群&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;前言&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在翻译完 TypeScript 官方文档后，我用 VuePress 搭建博客，又实现了 GitHub 和 Gitee Pages 的自动部署，但我最终还是决定自己建站，而在建站的过程中，必不可少会用到 Linux 命令，所以此篇写一份基本够用的  Linux 命令，会涵盖博客搭建系列文章用到的各种命令，方便查询和学习使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;0. Owner、Group、Others、Root&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux 系统是一种多用户系统，它将文件访问者身份分为三种：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件所有者（Owner）&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当创建一个用户的时候，Linux 会为该用户创建一个主目录，路径为 &lt;code&gt;/home/&amp;lt;username&amp;gt;&lt;/code&gt;，我们可以使用 &lt;code&gt;cd ~&lt;/code&gt;，快捷进入主目录。如果你想放一个私密文件，就可以放在自己的主目录里，然后设置只能自己查看。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;群组（Group）&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个用户都有一个用户组，方便多人操作的时候，为一群人分配权限。当创建用户的时候，会自动创建一个与它同名的用户组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果一个用户同时属于多个组，用户需要在用户组之间切换，才能具有其他用户组的权限。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他人（Others）&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既不是文件所有者又不是文件所属群组成员的用户，就是其他人。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;超级用户（Root）&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Root 用户是一类特殊的用户，该用户可以访问所有文件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. adduser 添加用户 和 passwd 更改密码&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 添加一个名为 git 的用户&lt;/span&gt;&lt;br/&gt;adduser git&lt;br/&gt;&lt;span&gt;# 设置 git 用户的密码&lt;/span&gt;&lt;br/&gt;passed git&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是由于创建的用户权限较低，有的时候我们需要为用户提权，此时我们可以这样做：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 会打开 sudoers 配置文件&lt;/span&gt;&lt;br/&gt;sudo visudo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意同样是编辑 &lt;code&gt;sudoers&lt;/code&gt; 配置文件，使用这个命令会比使用 &lt;code&gt;sudo vim /etc/ sudoers&lt;/code&gt; 更安全， 除了对语法有校验，并且还会在多用户编辑的时候锁住文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开 &lt;code&gt;sudoers&lt;/code&gt; 配置文件后，我们添加这样一行配置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# Allow git to run any commands anywhere&lt;/span&gt;&lt;br/&gt;git ALL=(ALL:ALL) ALL &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单解释下这句话 &lt;code&gt;git ALL=(ALL:ALL) ALL&lt;/code&gt;：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;git 表示规则应用的用户名&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第一个 &lt;code&gt;ALL&lt;/code&gt; 表示规则应用于所有 hosts&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二个 &lt;code&gt;ALL&lt;/code&gt; 表示规则应用于所有 users&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三个 &lt;code&gt;ALL&lt;/code&gt; 表示规则应用于所有 groups&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四个 &lt;code&gt;ALL&lt;/code&gt; 表示规则应用于所有 commands&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们保存退出后，&lt;code&gt;git&lt;/code&gt; 用户就会获得 root 权限。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. ls 列出文件和目录&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ls&lt;/code&gt; 列出文件和目录&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze learn-typescript.git]&lt;span&gt;# ls&lt;/span&gt;&lt;br/&gt;branches  config  description  HEAD  hooks  index  info  objects  refs&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ls -la&lt;/code&gt; 由 &lt;code&gt;-a&lt;/code&gt; 显示所有文件和目录（包括隐藏）和 &lt;code&gt;-l&lt;/code&gt; 显示详细列表组成：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze learn-typescript.git]&lt;span&gt;# ls -la&lt;/span&gt;&lt;br/&gt;总用量 20&lt;br/&gt;drwxrwxr-x  7 git git  132 12月 15 12:33 .&lt;br/&gt;drwx------  3 git git  127 12月 15 14:51 ..&lt;br/&gt;drwxrwxr-x  2 git git    6 12月 15 12:21 branches&lt;br/&gt;-rw-rw-r--  1 git git   66 12月 15 12:21 config&lt;br/&gt;-rw-rw-r--  1 git git   73 12月 15 12:21 description&lt;br/&gt;-rw-rw-r--  1 git git   23 12月 15 12:21 HEAD&lt;br/&gt;drwxrwxr-x  2 git git 4096 12月 15 13:10 hooks&lt;br/&gt;-rw-rw-r--  1 git git  217 12月 15 12:33 index&lt;br/&gt;drwxrwxr-x  2 git git   21 12月 15 12:21 info&lt;br/&gt;drwxrwxr-x 10 git git   90 12月 15 12:33 objects&lt;br/&gt;drwxrwxr-x  4 git git   31 12月 15 12:21 refs&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一行都有 7 列，我们以 &lt;code&gt;branches&lt;/code&gt; 为例讲解每列的含义：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;drwxrwxr-x&lt;/th&gt;&lt;th&gt;2&lt;/th&gt;&lt;th&gt;git&lt;/th&gt;&lt;th&gt;git&lt;/th&gt;&lt;th&gt;6&lt;/th&gt;&lt;th&gt;12月 15 12:21&lt;/th&gt;&lt;th&gt;branches&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;文件类型和权限信息&lt;/td&gt;&lt;td&gt;链接数或者一级子目录数&lt;/td&gt;&lt;td&gt;所有者&lt;/td&gt;&lt;td&gt;所属组&lt;/td&gt;&lt;td&gt;文件大小，单位字节&lt;/td&gt;&lt;td&gt;最后修改时间&lt;/td&gt;&lt;td&gt;文件名&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点看第 1 列的内容，以 &lt;code&gt;drwxrwxr-x&lt;/code&gt; 为例，这里一共 10 位，第 1 位表示文件类型，其中 &lt;code&gt;-&lt;/code&gt; 表示普通文件，&lt;code&gt;d&lt;/code&gt; 表示目录文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第 2 到第 4 位，表示所有者权限，其中 &lt;code&gt;r&lt;/code&gt; 表示读权限，&lt;code&gt;w&lt;/code&gt; 表示写权限，&lt;code&gt;x&lt;/code&gt; 表示可执行权限， &lt;code&gt;-&lt;/code&gt;表示无权限，第 2 到 5 位为 &lt;code&gt;rwx&lt;/code&gt;，表示所有者可读可写可执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第 5 到第 7 位，表示组用户权限，这里也是 &lt;code&gt;rwx&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第 8 到第 10 位，表示其他用户权限，这里是 &lt;code&gt;r-x&lt;/code&gt;，表示有可读可执行权限，无写入权限。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里再额外补充一点：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 &lt;code&gt;root&lt;/code&gt; 用户创建文件夹的默认权限为 &lt;code&gt;rwxr-xr-x&lt;/code&gt;:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze www]&lt;span&gt;# mkdir test&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# ls -l&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;drwxr-xr-x  2 root root  6 12月 17 23:53 &lt;span&gt;test&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而创建文件的默认权限是 &lt;code&gt;rw-r--r--&lt;/code&gt;，注意创建文件默认会去掉 &lt;code&gt;x&lt;/code&gt; 权限：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze www]&lt;span&gt;# touch index.html&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# ls -l&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;-rw-r--r--  1 root root  0 12月 17 23:54 index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是为什么我们有的时候需要在创建文件后，又加上执行权限。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. chown 更改文件属主，也可以同时更改文件属组&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;chown (change owner)&lt;/strong&gt; 语法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -R：递归更改文件属组&lt;/span&gt;&lt;br/&gt;chown [–R] 属主名 文件名&lt;br/&gt;chown [-R] 属主名：属组名 文件名&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 &lt;code&gt;index.html&lt;/code&gt; 的所有者更改为 &lt;code&gt;git&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze www]&lt;span&gt;# chown git index.html&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# ls -&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;-rw-r--r-- 1 git  root  0 12月 17 23:54 index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 &lt;code&gt;index.html&lt;/code&gt; 的所有者和群组都改为 &lt;code&gt;git&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze www]&lt;span&gt;# chown git:git index.html&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# ls -l&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;-rw-r--r-- 1 git  git   0 12月 17 23:54 index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. chmod 更改文件权限&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;权限除了用 &lt;code&gt;r&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 这种方式表示，也可以用数字表示，数组与字母的对应关系为：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所有如此对应关系，主要还是为了方便推导，比如我们希望一个文件可读可写，那我们可以方便的设置权限为 6（4 + 2），同样，如果我们知道一个权限为 3，我们也可以推导出权限为可写可执行，因为只有 2 + 1 才可能等于 3。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看下 &lt;strong&gt;chmod （change mode）&lt;/strong&gt;的具体语法：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -R：递归更改文件属组&lt;/span&gt;&lt;br/&gt;chmod [-R] xyz 文件或目录&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 xyz 分别表示 Owner、Group、Others 的权限，如果我们这样设置一个文件的权限：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;chomd &lt;span&gt;750&lt;/span&gt; index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以得知，Owner 的权限为 7，为可读可写可执行，Group 的权限为 5，为可读可执行，Others 的权限为 0，表示不可读写不可执行。对应字母为：&lt;code&gt;rwxr-x---&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了这种数字的方式，还有一种使用符号类型改变权限的方式：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这种方式里，我们将三种身份 &lt;code&gt;Owner&lt;/code&gt;、&lt;code&gt;Group&lt;/code&gt;、&lt;code&gt;Others&lt;/code&gt;，分别简写为 &lt;code&gt;u（User）&lt;/code&gt;、&lt;code&gt;g&lt;/code&gt;、&lt;code&gt;o&lt;/code&gt;，用 &lt;code&gt;a&lt;/code&gt; 表示所有身份，再使用 &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; 表示加入、去除、设定一个权限，&lt;code&gt;r&lt;/code&gt; &lt;code&gt;w&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; 则继续表示读，写，执行权限，举个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;chomd u+x,g-x,o-x index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;意思就是 &lt;code&gt;Owner&lt;/code&gt; 加上执行权限，&lt;code&gt;Group&lt;/code&gt; 和 &lt;code&gt;Others&lt;/code&gt; 去除执行权限。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然我们也可以直接设定权限&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;chmod u=rwx,g=rx,o=r index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时文件的权限就相当于 &lt;code&gt;-rwxr-xr--&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，我们还可以省略不写 &lt;code&gt;ugoa&lt;/code&gt; 这类身份内容，直接写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;chmod +x index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时相当于使用了 &lt;code&gt;a&lt;/code&gt;，会给所有身份添加执行权限。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. su 切换身份&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 切换为 git 用户&lt;/span&gt;&lt;br/&gt;su git&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. whoami 显示用户名&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# whoami &lt;/span&gt;&lt;br/&gt;root&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. pwd 显示当前目录&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[git@iZ2ze www]$ &lt;span&gt;pwd&lt;/span&gt;&lt;br/&gt;/home/www&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9. cd 切换工作目录&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 进入 /home/www/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; /home/www&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 进入自己的主目录&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; ~&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 进入当前目录的上上两层 :&lt;/span&gt;&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; ../..&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10. mkdir 创建目录&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;mkdir&lt;/code&gt; 创建目录：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mkdir new_folder&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;mkdir -p&lt;/code&gt; 递归创建目录：&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mkdir -p one/two/three&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;11. touch 创建文件&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用于修改文件或者目录的时间属性，当文件不存在，系统会创建空白文件&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;touch new_file&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;12. echo 打印输出&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;echo 是 Shell 命令，用于打印输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 显示转义字符&lt;/span&gt;&lt;br/&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;\&quot;test content\&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建或覆盖文件内容为 &quot;test content&quot;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;test content&quot;&lt;/span&gt; &amp;gt; index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是想追加内容，就用 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[root@iZ2ze www]&lt;span&gt;# echo &quot;test content&quot; &amp;gt; index.html&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# cat index.html&lt;/span&gt;&lt;br/&gt;&lt;span&gt;test&lt;/span&gt; content&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# echo &quot;test content&quot; &amp;gt;&amp;gt; index.html&lt;/span&gt;&lt;br/&gt;[root@iZ2ze www]&lt;span&gt;# cat index.html&lt;/span&gt;&lt;br/&gt;&lt;span&gt;test&lt;/span&gt; content&lt;br/&gt;&lt;span&gt;test&lt;/span&gt; content&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;13. cat 连接文件并打印输出&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看文件内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat ~&lt;span&gt;/.ssh/i&lt;/span&gt;d_rsa.pub&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;清空 index.html 内容：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat /dev/null &amp;gt; index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 index.html 的内容写入 second.html：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat index.html &amp;gt; second.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 index.html 的内容追加写入 second.html：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat index.html &amp;gt;&amp;gt; second.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把 index.html 和 second.html 追加写入 third.html：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;cat index.html second.html &amp;gt;&amp;gt; third.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;14. cp 复制文件或目录&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将目录 website/ 下的所有文件复制到新目录 static 下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。&lt;/span&gt;&lt;br/&gt;cp –r website/ static&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;15. mv 移动并重命名&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件改名：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mv index.html index2.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;隐藏文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 文件名上加上 .&lt;/span&gt;&lt;br/&gt;mv index.html .index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;移动文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 仅仅移动&lt;/span&gt;&lt;br/&gt;mv  /home/www/index.html   /home/static/&lt;br/&gt;&lt;span&gt;# 移动又重命名&lt;/span&gt;&lt;br/&gt;mv /home/www/index.html   /home/static/index2.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;批量移动：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;mv  /home/www/website/*  /home/www/static&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;16. rm 删除一个文件或者目录&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 系统会询问&lt;/span&gt;&lt;br/&gt;rm file&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# -f 表示直接删除&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# -r 表示目录下的所有文件删除&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 删除当前目录下的所有文件及目录&lt;/span&gt;&lt;br/&gt;rm -r  * &lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 跑路&lt;/span&gt;&lt;br/&gt;rm -rf /*&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;17. vi/vim&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Linux 内建 vi 文书编辑器，Vim 是从 vi 发展出来的一个文本编辑器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本上 vi/vim 共分为三种模式，分别是&lt;strong&gt;命令模式（Command mode）&lt;/strong&gt;，&lt;strong&gt;输入模式（Insert mode&lt;/strong&gt;）和&lt;strong&gt;底线命令模式（Last line mode）&lt;/strong&gt;。我们边操作边介绍这三种模式：我们执行 &lt;code&gt;vim index.html&lt;/code&gt;，如果没有该文件，则会创建文件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;vim index.html&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时界面为：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7932551319648093&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UfCRfwFgbJ3CUNgCeaVqChN7vFsKgBFlKiaVFU06YO7cmib4F96x826szvYrxNqxr8j9gyLe0cwIicJyXc6hEOxyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时是&lt;strong&gt;命令模式&lt;/strong&gt;，在命令模式下，输入的任何字符都会被视为命令，接下来几个常用的命令：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;i  切换到输入模式。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;x 删除当前光标所在处的字符。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;:  切换到底线命令模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们按下 &lt;code&gt;i&lt;/code&gt;，便会进入&lt;strong&gt;输入模式&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7935185185185185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UfCRfwFgbJ3CUNgCeaVqChN7vFsKgBFlVt4fRydiaiala8bRwWeNZfMBbRMeibsyep44PibKgO5wqIY1nPE3s1X6Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入模式下，左下角有 &lt;code&gt;-- INSERT --&lt;/code&gt; 标志：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时我们可以进行各种输入，当输入完毕后，按下 ESC 回到命令模式：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7932551319648093&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UfCRfwFgbJ3CUNgCeaVqChN7vFsKgBFlN7vibdicCY7YPxhW3N0oZZXpX99IwkoLOVCCcNTibwiarPEicrJggy7KPicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时左下角的 INSERT已经消失不见了，如果我们要保存退出，我们先输入 &lt;code&gt;:&lt;/code&gt; ，进入&lt;strong&gt;底线命令模式&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7932551319648093&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UfCRfwFgbJ3CUNgCeaVqChN7vFsKgBFlZhwQ3YkHY2HI8jQzUckxS7epCBnckibeJOGxDoAgtpPZaZfkjLqktuw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1364&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在底线命令模式中，常见的命令有：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们输入 &lt;code&gt;wq&lt;/code&gt;，表示保存并退出，此时我们就会发现并创建了一个 HTML 文件。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;18. ssh 远程连接工具&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意 ssh 监听是 22 端口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其基本语法为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ssh [OPTIONS] [-p PORT] [USER@]HOSTNAME [COMMAND]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;监听端口示例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ssh -p 300 git@8.8.8.8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;打开调试模式：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# -v 冗详模式，打印关于运行情况的调试信息&lt;/span&gt;&lt;br/&gt;ssh -v git@8.8.8.8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-darkmode-color-16057140139831=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(0,0,0)&quot; data-style=&quot;padding-right: 10px; padding-left: 10px; color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; letter-spacing: 0px; text-align: left; white-space: normal; font-size: 16px; line-height: 1.6; word-break: break-word;&quot; data-darkmode-color-16072568501583=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(0, 0, 0)&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxNzk1MjQ0Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/YBFV3Da0Nwvv72YkFO0qPibDKicOCsfltiaE9070DOu4iahXnicYwRIHcxe9VBicAy45MkPqy8nZzLTVibugOtV0ORFcg/0?wx_fmt=png&quot; data-nickname=&quot;程序员成长指北&quot; data-alias=&quot;coder_growth&quot; data-signature=&quot;专注 Node.js 技术栈分享，从 前端 到 Node.js 再到 后端数据库，祝您成为优秀的高级 Node.js 全栈工程师。一个有趣的且乐于分享的人。座右铭：今天未完成的，明天更不会完成。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section label=&quot;Copyright © 2016 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_t_042&#x27;)&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;Node 社群&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;89226&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我组建了一个氛围特别好的 Node.js 社群，里面有很多 Node.js小伙伴，如果你对Node.js学习感兴趣的话（后续有计划也可以），我们可以一起进行Node.js相关的交流、学习、共建。下方加 考拉 好友回复「Node」即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwsF7OKB4iaaXAzQPbNstk2LybA0Zz5I1hiaiazE9W7WH2Ojt2dibDODWMVUmHqgfXCefVwt7z5ibNMWLvg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;578.2649006622516&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;700.2119205298013&quot; data-fileid=&quot;100016913&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2093425605536332&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YBFV3Da0NwvFQgO67XibvUG5S2UMXwCghOuJvE8BFRzUXnCAfWXkU1qHld6Ly9xiarib3siaWicJWJ0U3lI8kSgD38w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-style=&quot;padding-top: 8px; padding-bottom: 8px; color: rgb(89, 89, 89); line-height: 26px;&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;&lt;span&gt;如果你觉得这篇内容对你有帮助，我想请你帮我2个小忙：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;1. 点个&lt;/span&gt;&lt;span&gt;「在看」&lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;，让更多人也能看到这篇文章&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;2. 订阅官方博客 &lt;/span&gt;&lt;span&gt;www.inode.club &lt;/span&gt;&lt;span data-darkmode-color-16057140139831=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16057140139831=&quot;rgb(89, 89, 89)&quot; data-darkmode-color-16072568501583=&quot;rgb(141, 141, 141)&quot; data-darkmode-original-color-16072568501583=&quot;rgb(89, 89, 89)&quot;&gt;让我们一起成长&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>533848e8ec93fc54fb48eae8392ae4f9</guid>
<title>如何获取优质信息？推荐一种高手都在用的方式！</title>
<link>https://toutiao.io/k/z1cjtf0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavib3NlJt37DBSrTmLaGd7y82j0SCAaW8XmlHAt33xPM7x3iaib7e2IWPWRXJuoYJczl3ibCpPpQSyH2rg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;你是通过什么方式&lt;/span&gt;&lt;span&gt;&lt;strong&gt;获取优质信息&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;呢？&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;公众号？博客？播客？短视频？微博？图书？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;今天推荐一种&lt;/span&gt;&lt;span&gt;&lt;strong&gt;高手都在用&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;的「优质信息获取」方式！&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Newsletter&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavib3NlJt37DBSrTmLaGd7y82icbyrtFQ5edhQTZA13mpdrBmbianfFq2ib4Jiar4GBhSN4ppvVY1RrTgPQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Newsletter中文可翻译成新闻信或电子报，是一个&lt;/span&gt;&lt;span&gt;&lt;strong&gt;基于电子邮件的信息分发&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;产品。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Newsletter多用于组织机构向客户推送相关新闻信息，一般机构网站首页上会有邮件订阅的链接。&lt;br/&gt;对于个人，Newsletter作为信息发布产品，有免中介、一对多自动分发的特点，开始&lt;/span&gt;&lt;span&gt;&lt;strong&gt;受到一些高手的青睐&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。比如一些知名记者开始逃离Facebook、Twitter等社交平台，面向用户推出付费Newsletter订阅服务。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavib3NlJt37DBSrTmLaGd7y82DrAxiaNsRbvwj4Zia3EfVibO9icDGEw4sXicqGia1qajnleLEU7q74qIa16w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;码农周刊是一份&lt;/span&gt;&lt;strong&gt;&lt;span&gt;专为广大程序员、编程爱好者们打造&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的IT技术周刊。每周发送。&lt;br/&gt;2013年9月12日创刊至今，已发送300多期，订阅用户超20万。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;专业、简单、有用&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;2020年4月，为了给用户提供更优质的服务，我们面向码农周刊VIP会员推出了&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Newsletter服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。目前已发送87期。&lt;br/&gt;以下内容节选自&lt;/span&gt;&lt;span&gt;&lt;strong&gt;码农周刊VIP会员专属Newsletter&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，供参考。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊VIP会员福利&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavib3NlJt37DBSrTmLaGd7y822mOhDWWbtShmv7DouHMmYgZx9sxtfRibCpF3MNjADgYSfNgPDl4p0Og/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 52 期码农周刊VIP会员专属&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Newsletter&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，让你及时掌握技术动向；&lt;br/&gt;2. 只限VIP会员加入的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;交流圈子&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，让你与技术大牛切磋学习；&lt;br/&gt;3. VIP会员独享的&lt;/span&gt;&lt;span&gt;&lt;strong&gt;工作机会&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，为你介绍好公司的好机会；&lt;br/&gt;4. 更多会员福利，持续更新……&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何订阅「码农周刊VIP会员专属Newsletter」？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. &lt;/span&gt;&lt;span&gt;&lt;strong&gt;微信扫描下方二维码&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，加入码农周刊VIP会员知识星球。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请&lt;/span&gt;&lt;span&gt;&lt;strong&gt;留意知识星球内的私信&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心动不如行动，赶快订阅吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>10c12467bda25cb13ccc5e98e8687195</guid>
<title>基于Apache组件，分析对象池原理</title>
<link>https://toutiao.io/k/1f98yoz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;池塘里养：Object；&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;一、设计与原理&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基础案例&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;首先看一个基于&lt;code&gt;common-pool2&lt;/code&gt;对象池组件的应用案例，主要有工厂类、对象池、对象三个核心角色，以及池化对象的使用流程：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; org.apache.commons.pool2.BasePooledObjectFactory;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.apache.commons.pool2.PooledObject;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.apache.commons.pool2.impl.DefaultPooledObject;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.apache.commons.pool2.impl.GenericObjectPool;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.apache.commons.pool2.impl.GenericObjectPoolConfig;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ObjPool&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 声明对象池&lt;/span&gt;&lt;br/&gt;        DevObjPool devObjPool = &lt;span&gt;new&lt;/span&gt; DevObjPool() ;&lt;br/&gt;        &lt;span&gt;// 池中借用对象&lt;/span&gt;&lt;br/&gt;        DevObj devObj = devObjPool.borrowObject();&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Idle=&quot;&lt;/span&gt;+devObjPool.getNumIdle()+&lt;span&gt;&quot;；Active=&quot;&lt;/span&gt;+devObjPool.getNumActive());&lt;br/&gt;        &lt;span&gt;// 使用对象&lt;/span&gt;&lt;br/&gt;        devObj.devObjInfo();&lt;br/&gt;        &lt;span&gt;// 归还给对象池&lt;/span&gt;&lt;br/&gt;        devObjPool.returnObject(devObj);&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;Idle=&quot;&lt;/span&gt;+devObjPool.getNumIdle()+&lt;span&gt;&quot;；Active=&quot;&lt;/span&gt;+devObjPool.getNumActive());&lt;br/&gt;        &lt;span&gt;// 查看对象池&lt;/span&gt;&lt;br/&gt;        System.out.println(devObjPool.listAllObjects());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 对象定义&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DevObj&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(DevObj&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;) &lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DevObj&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;build...dev...obj&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;devObjInfo&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        logger.info(&lt;span&gt;&quot;dev...obj...info&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 对象工厂&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DevObjFactory&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;BasePooledObjectFactory&lt;/span&gt;&amp;lt;&lt;span&gt;DevObj&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; DevObj &lt;span&gt;create&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 创建对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DevObj() ;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; PooledObject&amp;lt;DevObj&amp;gt; &lt;span&gt;wrap&lt;/span&gt;&lt;span&gt;(DevObj devObj)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 池化对象&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DefaultPooledObject&amp;lt;&amp;gt;(devObj);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * 对象池&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DevObjPool&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;GenericObjectPool&lt;/span&gt;&amp;lt;&lt;span&gt;DevObj&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;DevObjPool&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; DevObjFactory(), &lt;span&gt;new&lt;/span&gt; GenericObjectPoolConfig&amp;lt;&amp;gt;());&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例中对象是完全自定义的；对象工厂中则重写两个核心方法：创建和包装，以此创建池化对象；对象池的构建依赖定义的对象工厂，配置采用组件提供的常规配置类；可以通过调整对象实例化的时间以及创建对象的个数，初步理解对象池的原理。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、接口设计&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 PooledObjectFactory 接口&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;工厂类，负责对象实例化，创建、验证、销毁、状态管理等；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;案例中&lt;code&gt;BasePooledObjectFactory类&lt;/code&gt;则是该接口的基础实现；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1.2 ObjectPool 接口&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;对象池，并且继承&lt;code&gt;Closeable&lt;/code&gt;接口，管理对象生命周期，以及活跃和空闲对象的数据信息获取；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;案例中&lt;code&gt;GenericObjectPool类&lt;/code&gt;是对于该接口的实现，并且是可配置化的方式；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1.3 PooledObject 接口&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;池化对象，基于包装类被维护在对象池中，并且维护一些附加信息用来跟踪，例如时间、状态；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;案例中采用&lt;code&gt;DefaultPooledObject&lt;/code&gt;包装类，实现该接口并且线程安全，注意工厂类中的重写；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;3、运行原理&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4543795620437956&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDUNYfNibicsicpnZ1wQC9O7jexgobNliamwdX7gJfZ4j6pdefcTwgZ72ZQfcZBZ4jOj6COZdObTLyhDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过对象池获取对象，可能是通过工厂新创建的，也可能是空闲的对象；当对象获取成功且使用完成后，需要归还对象；在案例执行过程中，不断查询对象池中空闲和活跃对象的数量，用来监控池的变化。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、构造分析&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、对象池&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;GenericObjectPool&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; PooledObjectFactory&amp;lt;T&amp;gt; factory,&lt;span&gt;final&lt;/span&gt; GenericObjectPoolConfig&amp;lt;T&amp;gt; config)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在完整的构造方法中，涉及到三个核心对象：工厂对象、配置对象、双端阻塞队列；通过这几个对象创建一个新的对象池；在config中提供了一些简单的默认配置：例如maxTotal、maxIdle、minIdle等，也可以扩展自定义配置；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、双端队列&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; LinkedBlockingDeque&amp;lt;PooledObject&amp;lt;T&amp;gt;&amp;gt; idleObjects;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;GenericObjectPool&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; PooledObjectFactory&amp;lt;T&amp;gt; factory,&lt;span&gt;final&lt;/span&gt; GenericObjectPoolConfig&amp;lt;T&amp;gt; config)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    idleObjects = &lt;span&gt;new&lt;/span&gt; LinkedBlockingDeque&amp;lt;&amp;gt;(config.getFairness());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LinkedBlockingDeque支持在队列的首尾操作元素，例如添加和移除等；操作需要通过主锁进行加锁，并且基于两个状态锁进行协作；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 队首节点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; LinkedBlockingDeque.Node&amp;lt;E&amp;gt; first;&lt;br/&gt;&lt;span&gt;// 队尾节点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;transient&lt;/span&gt; LinkedBlockingDeque.Node&amp;lt;E&amp;gt; last;&lt;br/&gt;&lt;span&gt;// 主锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; InterruptibleReentrantLock lock;&lt;br/&gt;&lt;span&gt;// 非空状态锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition notEmpty;&lt;br/&gt;&lt;span&gt;// 未满状态锁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Condition notFull;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于链表和队列的特点，在之前的文章中有单独分析过，此处的源码在JDK的容器中也很常见，这里不再赘述，对象池的整个构造有大致轮廓之后，下面再来细看对象的管理逻辑。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、对象管理&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、添加对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;创建一个新对象并且放入池中，通常应用在需要&lt;strong&gt;预加载&lt;/strong&gt;的场景中；涉及到两个核心操作：工厂创建对象，对象池化管理；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GenericObjectPool.addObject() &lt;span&gt;throws&lt;/span&gt; Exception ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、借用对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; T GenericObjectPool.borrowObject(&lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; borrowMaxWaitMillis) &lt;span&gt;throws&lt;/span&gt; Exception ;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4813614262560778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDUNYfNibicsicpnZ1wQC9O7jeITDFGLIIRiacapviauelicv17g3mxp6FKRHicOtTQBAgsH7NFWXard72Ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1234&quot;/&gt;&lt;/p&gt;&lt;p&gt;首先从队列中获取对象；如果没有获取到，调用工厂创建方法，之后池化管理；对象获取之后会改变状态为&lt;code&gt;ALLOCATED&lt;/code&gt;使用中；最后经过工厂的确认，完成对象获取动作；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3、归还对象&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GenericObjectPool.returnObject(&lt;span&gt;final&lt;/span&gt; T obj) ；&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4975767366720517&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDUNYfNibicsicpnZ1wQC9O7jeq6VicVMKOQ1zhqwHcopF8a9z8HUBIFb2bBAvrWqBIRjzm0kRTibS5PRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1238&quot;/&gt;&lt;/p&gt;&lt;p&gt;归还对象的时候，首先转换为池化对象和标记&lt;code&gt;RETURNING&lt;/code&gt;状态；经过多次校验判断，如果失败则销毁该对象，并重新维护对象池中可用的空闲对象；最终对象被标记为空闲状态，如果不超出最大空闲数，则对象被放到队列的某一端；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;4、对象状态&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;关于池化对象的状态在&lt;code&gt;PooledObjectState&lt;/code&gt;类中有枚举和描述，在图中只是对部分几个状态流转做示意，更多细节可以参考状态类；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6565143824027073&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDUNYfNibicsicpnZ1wQC9O7je4DV7LAiaVZ78Zy03oBppPJ64Rc72EWYjRSzMvPVuW6iaLYZuzibJmiakPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1182&quot;/&gt;&lt;/p&gt;&lt;p&gt;可以参考在上述案例中使用到的&lt;code&gt;DefaultPooledObject&lt;/code&gt;默认池化对象类中相关方法，结合状态枚举，可以理解不同状态之间的校验和转换。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、Redis应用&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;Lettuce作为Redis高级的客户端组件，通信层使用Netty组件，并且是线程安全，支持同步和异步模式，支持集群和哨兵模式；作为当下项目中常用的配置，其底层对象池基于&lt;code&gt;common-pool2&lt;/code&gt;组件。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;1、配置管理&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;基于如下配置即表示采用Lettuce组件，其中涉及到池的几个参数配置：最小空闲、最大活跃、最大空闲；这里可以对比GenericObjectPoolConfig中的配置：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;redis:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;host:&lt;/span&gt; &lt;span&gt;${REDIS_HOST:127.0.0.1}&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;lettuce:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;pool:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;min-idle:&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;max-active:&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;max-idle:&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;2、源码分析&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p&gt;围绕对象池的特点，自然去追寻源码中关于：配置、工厂、对象几个核心的角色类；从上述配置参数切入，可以很容易发现如下几个类：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.46286701208981&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvDUNYfNibicsicpnZ1wQC9O7je7syf9ZaOmCOdZ8gODzicialPmCib0EROqmku8znvuOF7sn3Aox1xH9ELw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1158&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1 配置转换&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 连接配置&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LettuceConnectionConfiguration&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;RedisConnectionConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PoolBuilderFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 构建对象池配置&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;private&lt;/span&gt; GenericObjectPoolConfig&amp;lt;?&amp;gt; getPoolConfig(RedisProperties.Pool properties) {&lt;br/&gt;            GenericObjectPoolConfig&amp;lt;?&amp;gt; config = &lt;span&gt;new&lt;/span&gt; GenericObjectPoolConfig&amp;lt;&amp;gt;();&lt;br/&gt;            config.setMaxTotal(properties.getMaxActive());&lt;br/&gt;            config.setMaxIdle(properties.getMaxIdle());&lt;br/&gt;            config.setMinIdle(properties.getMinIdle());&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; config;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里将配置文件中Redis的相关参数，构建到GenericObjectPoolConfig类中，即配置加载过程；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2 对象池构造&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LettucePoolingConnectionProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;LettuceConnectionProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 对象池核心角色&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; GenericObjectPoolConfig poolConfig;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; BoundedPoolConfig asyncPoolConfig;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, GenericObjectPool&amp;gt; pools = &lt;span&gt;new&lt;/span&gt; ConcurrentHashMap(&lt;span&gt;32&lt;/span&gt;);&lt;br/&gt;    LettucePoolingConnectionProvider(LettuceConnectionProvider provider, LettucePoolingClientConfiguration config) {&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.poolConfig = clientConfiguration.getPoolConfig();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.asyncPoolConfig = CommonsPool2ConfigConverter.bounded(&lt;span&gt;this&lt;/span&gt;.config);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在构造方法中获取对象池的配置信息，这里并没有直接实例化池对象，而是采用ConcurrentHashMap容器来动态维护；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.3 对象管理&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LettucePoolingConnectionProvider&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;LettuceConnectionProvider&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 获取Redis连接&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &amp;lt;T extends StatefulConnection&amp;lt;?, ?&amp;gt;&amp;gt; &lt;span&gt;T &lt;span&gt;getConnection&lt;/span&gt;&lt;span&gt;(Class&amp;lt;T&amp;gt; connectionType)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        GenericObjectPool pool = (GenericObjectPool)&lt;span&gt;this&lt;/span&gt;.pools.computeIfAbsent();&lt;br/&gt;        StatefulConnection&amp;lt;?, ?&amp;gt; connection = (StatefulConnection)pool.borrowObject();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 释放Redis连接&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;release&lt;/span&gt;&lt;span&gt;(StatefulConnection&amp;lt;?, ?&amp;gt; connection)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        GenericObjectPool&amp;lt;StatefulConnection&amp;lt;?, ?&amp;gt;&amp;gt; pool = (GenericObjectPool)&lt;span&gt;this&lt;/span&gt;.poolRef.remove(connection);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在获取池对象时，如果不存在则根据相关配置创建池对象，并维护到Map容器中，然后从池中借用Redis连接对象；释放对象时首先判断对象所属的池，将对象归还到相应的池中。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最后总结&lt;/strong&gt;，本文从对象池的一个简单案例切入，主要分析&lt;code&gt;common-pool2&lt;/code&gt;组件关于：池、工厂、配置、对象管理几个角色的源码逻辑，并且参考其在Redis中的实践，只是冰山一角，像这种通用型并且应用范围广的组件，很值得时常去读一读源码，真的令人惊叹其鬼斧天工的设计。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、参考源码&lt;/span&gt;&lt;span/&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;应用仓库：&lt;br/&gt;https://gitee.com/cicadasmile/butte-flyer-parent&lt;br/&gt;&lt;br/&gt;组件封装：&lt;br/&gt;https://gitee.com/cicadasmile/butte-frame-parent&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4Njg0MzYwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBCuF3zfJnqPKpUia4wfn1FUtTHpxxkR5HvbicPgOjibPicX0goMOkny1NdkLAJvBaqrYh3UdwMjiaDQMA/0?wx_fmt=png&quot; data-nickname=&quot;知了一笑&quot; data-alias=&quot;cicada_smile&quot; data-signature=&quot;积累是一个孤独且枯燥的过程&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>762b45e6ededcc0000117f742a713c69</guid>
<title>Java实现一个打飞机的小游戏【附源码】</title>
<link>https://toutiao.io/k/5ss7kqc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;&lt;code&gt;文末源码&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;适合人群：Java初级学习者和爱好者，下面有展示图。&lt;/p&gt;

&lt;p&gt;@[toc]&lt;/p&gt;

&lt;h1&gt;1 前言&lt;/h1&gt;

&lt;p&gt;🚀获取源码，文末公众号回复【飞机】，即可。
⭐欢迎点赞留言&lt;/p&gt;

&lt;h1&gt;2 正文&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;公众号：JavaPub&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;2.1 展示&lt;/h2&gt;

&lt;p&gt;64MB GIF可以欣赏：&lt;a href=&quot;https://www.z4a.net/images/2022/03/23/ae8bacca260b5e978f1dab8010d9a2a1.gif&quot;&gt;https://www.z4a.net/images/2022/03/23/ae8bacca260b5e978f1dab8010d9a2a1.gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.z4a.net/images/2022/03/23/ae8bacca260b5e978f1dab8010d9a2a1.gif&quot; alt=&quot;ae8bacca260b5e978f1dab8010d9a2a1.gif&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/0fc4adf9f4c34961a6c2886249d8f90c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASmF2YVB1Yi1yb2RlcnQ=,size_12,color_FFFFFF,t_70,g_se,x_16&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/1c76b0c4313043ee98e055c6774e2d2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASmF2YVB1Yi1yb2RlcnQ=,size_12,color_FFFFFF,t_70,g_se,x_16&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.2 项目结构&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/67222af056e144989baba173b33ab2a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASmF2YVB1Yi1yb2RlcnQ=,size_17,color_FFFFFF,t_70,g_se,x_16&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2.2 主要代码展示&lt;/h2&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;package main;

import data.Data;
import utils.Load;

import javax.sound.sampled.Clip;
import javax.swing.*;

public class Main {

    public static void main(String[] args) {
        // 创建窗口
        JFrame frame = new JFrame(&quot;飞机大战&quot;);
        // 添加 JPanel
        Data.canvas = new Canvas(frame);
        frame.setContentPane(Data.canvas);
        // 初始化 Data
        Data.init();
        // 设置图标
        frame.setIconImage(Load.image(&quot;ICON.png&quot;));
        // 设置窗口可见
        frame.setVisible(true);
        // 获取标题栏的高度和宽度
        Data.TITLE_BOX_HEIGHT = frame.getInsets().top;
        // 设置大小
        frame.setSize(Data.WIDTH, Data.HEIGHT + Data.TITLE_BOX_HEIGHT);
        // 窗口大小固定
        frame.setResizable(false);
        // 窗口居中显示
        frame.setLocationRelativeTo(frame.getOwner());
        // 窗口关闭时结束程序
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // 播放背景音乐
        Load.sound(&quot;background&quot;).loop(Clip.LOOP_CONTINUOUSLY);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2.4 按钮相关类&lt;/h2&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;package scenes;

import data.Data;
import scenes.connector.Scenes;
import utils.Load;
import utils.Rect;

import java.awt.*;

public class About implements Scenes {
    // 背景图片
    Image background;
    // 确定按钮
    Image[] buttonOk;
    // 按钮状态
    int buttonOkStruts = 0;

    public About() {
        buttonOk = new Image[3];

        background = Load.image(&quot;关于作者-背景.png&quot;);
        buttonOk[0] = Load.image(&quot;确定.png&quot;);
        buttonOk[1] = Load.image(&quot;确定-鼠标移上.png&quot;);
        buttonOk[2] = Load.image(&quot;确定-鼠标按下.png&quot;);
    }

    public void onKeyDown(int keyCode) {

    }

    public void onKeyUp(int keyCode) {

    }

    public void onMouse(int x, int y, int struts) {
        buttonOkStruts = 0;

        if(Rect.isInternal(x, y, 188, 600 + Data.TITLE_BOX_HEIGHT, 132, 42)) {
            buttonOkStruts = struts == Scenes.MOUSE_MOVED ? 1 : struts == Scenes.MOUSE_DOWN ? 2 : 0;
            if(struts == Scenes.MOUSE_UP) Data.canvas.switchScenes(&quot;Home&quot;);
        }
    }

    public void draw(Graphics g) {
        // 绘制背景
        Data.background.show(g);
        // 绘制关于作者
        g.drawImage(background, 48, 60, null);
        // 绘制按钮
        g.drawImage(buttonOk[buttonOkStruts], 188, 600, null);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2.5 背景音乐类&lt;/h2&gt;

&lt;pre lang=&quot;java&quot;&gt;&lt;code&gt;package utils;

import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;

public class Load {

    public static Image image(String path) {
        BufferedImage img = null;
        URL url = Load.class.getResource(&quot;/resources/img/&quot; + path);
        try {
            img = ImageIO.read(url);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return img;
    }

    // 返回一段音乐
    public static Clip sound(String path) {
        try {
            AudioInputStream ais = AudioSystem.getAudioInputStream(Load.class.getResourceAsStream(&quot;/resources/sound/&quot; + path + &quot;.wav&quot;));
            Clip sound = AudioSystem.getClip();
            sound.open(ais);
            return sound;
        } catch (LineUnavailableException | UnsupportedAudioFileException | IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    public static void playSound(String path) {
        new Thread(() -&amp;gt; Load.sound(path).start()).start();
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取源码，公众号回复【飞机】，即可。更多最新Java面试题加群、见群公告。~&lt;/p&gt;

&lt;p&gt;不会还有人没 &lt;strong&gt;点赞 + 关注 + 收藏&lt;/strong&gt; 吧!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/d97cf77b018443a399bda97be2dadeb2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASmF2YVB1Yi1yb2RlcnQ=,size_10,color_FFFFFF,t_70,g_se,x_16&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>