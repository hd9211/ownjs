<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>439d191b0f2b207cf79e985d5458f4ce</guid>
<title>什么是真正的程序员？| 码农周刊第 323 期</title>
<link>https://toutiao.io/k/v08ikpz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;什么是真正的程序员？| 码农周刊第 323 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第323期（2020-10-28）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=323&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3230&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=323&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3230&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=323&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;适合入门&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;该框架由阿里云机器学习 PAI 团队研发，让自然语言处理场景的模型预训练和迁移学习开发与部署更加简单和高效。&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;硬核&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;论文笔记&lt;/p&gt;
        
        &lt;p&gt;系列文章&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;因子分解机算法&lt;/p&gt;
        
        &lt;p&gt;深入讲解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;Yahoo 开源的 Kafka 集群管理平台&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;更多可能&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;源码分析&lt;/p&gt;
        
        &lt;p&gt;一个 Android Jetpack 扩展库&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;系列文章&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;倾向于使用 Less 或 Stylus&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;这里有最接地气的架构师一线实战经验、核心技能的分享。运营和产品的总结。以及一些个人的深度思考。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 268968 即可&lt;/p&gt;
        
        &lt;p&gt;GO PHP JS 一网打尽&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 146415 即可&lt;/p&gt;
        
        &lt;p&gt;分享技术，专注程序员成长&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 137785 即可&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;Coding虽易，debug不易....&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 98777 即可&lt;/p&gt;
        
        &lt;p&gt;专注分享Java实战技术、Java基础原理、微服务实战技术、分布式系统架构&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 22887 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书为对基本概率论感兴趣的读者以及之前未接触过此方向的人提供了一个坚实的基础。通过对话的方式和详细的数学推导，在迷人的风格和信息丰富的讨论上取得了平衡。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;真实&lt;/p&gt;
        
        &lt;p&gt;值得思考&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>857293b1ec60cf59690b60063f374e29</guid>
<title>爱了！一个现代化的 Git CLI 客户端，一堆命令不用记了</title>
<link>https://toutiao.io/k/s3pgs9r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span&gt;关注公众号 “&lt;/span&gt;&lt;span&gt;&lt;span&gt;转角遇到GitHub&lt;/span&gt;&lt;/span&gt;&lt;span&gt;” ，每天推荐给你优秀开源项目&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是欧盆索思（opensource），每天为你带来优秀的开源项目！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看一张动图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.290625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/lkYNiaZsfpqbfTtJ24frNJpobbiczdSTj9oD67Zl7o7Jk1yKia0KoosN5fe77camiatzBGX10WR5lR4IMErePVoWtQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天推荐的这个工具是：bit，它是构建在 git 之上的实验性现代化 git CLI，可提供令人满意的默认值和其他优点。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;命令和 flag 建议，以帮助你浏览 git 为您提供的众多选项；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;bit add、bit checkout 能自动完成分支名和文件名；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动获取（fetch）和分支快速转发（fast-forwarding），减少合并冲突的可能性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;建议与 git 别名一起使用；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一些新命令，如 bit sync 等，能极大地简化了工作流程；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;来自 git-extras 的命令，例如 bit release &amp;amp; bit info；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;与 git 完全兼容，允许您在需要时回退到 git。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;项目地址：https://github.com/chriswalz/bit，Star 数：2.7k+。这是一个 Go 项目。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;安装&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）最简单的安装方式&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ curl -sf https://gobinaries.com/chriswalz/bit | sh; curl -sf https://gobinaries.com/chriswalz/bit/bitcomplete | sh &amp;amp;&amp;amp; &lt;span&gt;echo&lt;/span&gt; y | COMP_INSTALL=1 bitcomplete&lt;br/&gt;$ bit&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）也可以直接从这里下载&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/chriswalz/bit/releases&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3）如果安装了 Go，则可以从源码编译&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;确保使用了 go module。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ go get github.com/chriswalz/bit&lt;br/&gt;$ bit&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，bit 依赖 git。所以你本地需要安装 git。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前支持如下平台：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;iTerm2 (macOS)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Terminal.app (macOS)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Command Prompt (Windows)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;WSL/Windows Subsystem for Linux (Windows)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;gnome-terminal (Ubuntu)&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;bit 特有的命令&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、bit save [commit message]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个新的提交。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、bit sync&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步对 origin 分支的更改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大部分时候，bit sync 相当于 &lt;code&gt;bit commit -m &quot;I can still use git commands&quot;&lt;/code&gt;, &lt;code&gt;bit pull -r origin master&lt;/code&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;bit 常见工作流&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过例子演示 bit 常见工作流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、切换分支&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ bit&lt;br/&gt;&amp;gt; bit switch example-branch&lt;br/&gt;? Branch does not exist. Do you want to create it? Yes&lt;br/&gt;Switched to a new branch &lt;span&gt;&#x27;example-branch&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、做一些改动&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ bit add *&lt;br/&gt;$ bit save &lt;span&gt;&quot;add important feature&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、做其他改动&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ bit save&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、push 改变到 origin&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ bit sync&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;5、一段时间后，可以再同步别人的修改&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;$ bit sync&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般都直接输入 bit，然后回车。接着输入会自动提示，如开始的动图。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文末&lt;strong&gt;「阅读原文」&lt;/strong&gt;可直达项目首页。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;今天的项目大家觉得怎么样吗？如果你喜欢，请在文章底部留言、点赞或关注转发，你的支持就是我持续更新的最大动力！&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;转角遇到GitHub - 送给爱开源的你&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;258&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;258&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/lkYNiaZsfpqYm0bG0MRgJIZRoicricTQsNEEbzuja1veleica9PFicSiayqmibQZzSRZBNufMjJIq2tKXpb4VK0DjbibZQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;344&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Git · GitHub · GitLab · Gitee&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>27eca2d4130cb989450a57c46a3d7b7e</guid>
<title>编程体系结构（七）：JavaEE 之 Web 开发</title>
<link>https://toutiao.io/k/cw7764i</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、基础概念&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.78828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZiaFkExPr74ibibCkpZaHRQdMEc4icDKQ82viaSibKh5GUJs6quNlvAcFOq0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、CS与BS架构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CS架构模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;客户端/服务器（Client/Server）模式，既要编写服务器端程序，也要开发客户端程序，软件更新时需要同时更新客户端和服务器端，整体模式相比BS架构要复杂，但是安全性比较高。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;B/S架构模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;即浏览器/服务器（Browser/Server），只需要编写服务器端程序，浏览器的界面作为访问的服务端的入口，架构相对简单，可以快速迭代，但是安全性较差。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Socket通信机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TCP/IP 协议&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;传输控制协议/网际协议是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇，只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Socket套接字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;网络中不同主机上的应用进程之间进行双向通信的端点的抽象，一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。通常接收请求数据，并做业务处理的称为服务端即ServerSocket，发送请求并接收处理结果的称为客户端。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、Http协议&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、Http和Https&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Http协议&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;HTTP超文本传输协议,是用于从万维网服务器传输超文本到本地浏览器的传送协议，基于TCP/IP通信协议来传递数据：HTML文件、图片、查询数据等。HTTP协议基于客户端-服务端架构模式。浏览器作为HTTP客户端通过URL向服务端即WEB服务器发送请求。Web服务器根据接收到的请求后，处理完请求后向客户端发送响应信息。&lt;/p&gt;&lt;p&gt;协议特点：简单快速、灵活、无连接、无状态、支持客户/服务器模式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Https协议&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;以安全为准则的HTTP通道，是HTTP的安全版，在HTTP请求上加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Https和Http区别&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;安全证书：Https协议需要到CA申请证书，一般免费证书较少，因而需要一定费用。&lt;/p&gt;&lt;p&gt;数据传输：Http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。&lt;/p&gt;&lt;p&gt;连接方式：Http和Https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Get和Post请求&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;浏览器端&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;从浏览器角度看这个两种请求的区别：GET方式读取资源，比如Get到静态页面，即使多次读取不会对访问数据产生影响，也被称为&quot;幂等&quot;请求。POST方式在页面中定义表单，提交表单会把数据提交到服务器，而且多数情况下会产生数据，比如常用的保存数据接口，并非&quot;幂等&quot;操作，不幂等也就意味着不能随意多次执行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;服务接口&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里指用Ajax程序请求服务接口，提交的请求类型。或者其他Http请求工具类，还有情况是微服务中各种Feign接口间的请求。这种情况接口发送请求时，限制相对较少，比如REST风格接口常用GET、POST、PUT、DELETE，几种方式分别获取、创建、更新、删除 资源。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、握手挥手机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三次握手&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9899244332493703&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZoyG3uyOqsBIezeA5MfnO7rMCibFQCibcW0qdYNJfpiaVVf3OVGkwLic0UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;p&gt;第一次握手：客户端主动向服务器发起请求连接，请求报文中发送SYN=1，此时随机生成初始序列号seq=x，此时，客户端进程进入SYN-SENT同步已发送状态。&lt;/p&gt;&lt;p&gt;第二次握手：服务端收到请求报文后，确认客户的SYN，如果请求没有拒绝，则发出确认报文。报文中应该ACK=1，SYN=1，确认号是ack=x+1，同时自己也发送一个SYN包seq=y，此时，服务器进程进入SYN-RCVD同步收到状态。&lt;/p&gt;&lt;p&gt;第三次握手：客户端收到确认后，需要向服务器确认报文的ACK=1，ack=y+1，此时，TCP连接建立，客户端进入ESTABLISHED已建立连接状态。完成三次握手，客户端与服务器开始传送数据。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四次挥手&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9063829787234042&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZsLzLmhmdibiaF8GwaSpiby3Y1WFIP4LiabPNgJbDmXsjAciaJexzc0h3QGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;470&quot;/&gt;&lt;/p&gt;&lt;p&gt;第一次挥手：客户端发送一个结束FIN，用来主动关闭和服务端的数据传输，释放连接且停止发送数据，报文首部：FIN=1，序列号seq=u；随后客户端进入终止等待1状态FIN-WAIT-1。&lt;/p&gt;&lt;p&gt;第二次挥手：服务端收到这个FIN，发出确认报文ACK=1，确认收到序号是收到的序号+1，即ack=u+1，且带上自己的序列号seq=v，和SYN一样，一个FIN将占用一个序号。如此，服务器通知应用进程，客户端已经没有数据要发送，如果服务器发送数据，客户端依然要接收，该状态会持续一段时间，服务端进入关闭等待状态CLOSE-WAIT。客户端收到服务器的确认请求后，进入终止等待2状态FIN-WAIT-2，等待服务器发送连接释放报文。&lt;/p&gt;&lt;p&gt;第三次挥手：服务器向客户端发送释放连接报文FIN=1，ack=u+1，此时服务端还处于半关闭状态，服务器可能还会发送一些数据，此时序列号为seq=w，如此，服务器进入最后确认状态LAST-ACK，等待客户端的确认。&lt;/p&gt;&lt;p&gt;第四次挥手：客户端收到服务器的连接释放报文后，回发确认，ACK=1，ack=w+1，序列号是seq=u+1，如此，客户端进入时间等待状态TIME-WAIT。此时TCP连接还没有释放，必须经过最长报文段寿命的时间后，才进入CLOSED状态。MSL：最长报文段寿命，一般2分钟，TCP连接释放时，主动方必须经过2MSL后才进入CLOSED状态，因此主动方关闭时间比较晚。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、Servlet组件&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。使用Servlet，可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、实现方式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;继承HttpServlet，HttpServlet担任抽象模板角色，模板方法：由service()方法担任；&lt;/p&gt;&lt;p&gt;继承GenericServlet抽象类，其中的service方法为抽象方法；&lt;/p&gt;&lt;p&gt;实现Servlet接口，包含init、getServletConfig、service、getServletInfo、destroy几个核心方法；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、生命周期&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;加载和实例化，初始化init，服务service，销毁：destroy。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、核心API组件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ServletConfig&lt;/strong&gt;：获取servlet初始化参数和servletContext对象；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ServletContext&lt;/strong&gt;：在整个Web应用的动态资源之间共享数据；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ServletRequest&lt;/strong&gt;：封装Http请求信息，在请求时创建；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ServletResponse&lt;/strong&gt;：封装Http响应信息，在请求时创建；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、转发和重定向&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;转发：服务器端进行的页面跳转的控制 ;&lt;/p&gt;&lt;p&gt;重定向：服务端响应跳转信息，浏览器端进行的页面跳转 ;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZAJoXrARn3XuS0KTHIlBYCiciaT9Z1pZx7E9w3PAbjcS7Hsc7yEQZ8t3Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、Cookie与Session&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Cookie机制&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5946666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZicUib5xtoL2CWwgE18ICic95MsicqFYibuKfFoStOfRqHg74NicM165icy9AQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;375&quot;/&gt;&lt;/p&gt;&lt;p&gt;Cookie在HTTP中通常是用来辨别用户身份，进行会话跟踪而储存在用户本地终端上的数据，一般会加密处理，由用户客户端计算机暂时或永久保存的信息。其结构就是一个键和一个值构成的。随着服务器端的响应发送给客户端浏览器。然后客户端浏览器会把Cookie保存起来，当下一次再访问服务器时把Cookie再发送给服务器。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Session会话&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.35172413793103446&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBBzlMwgEw40jaIxfnX8iaXZjXeY2dFib90hGjwPbjqJGu9tz3ZibQ0ovicjagJcOH7uWx7EtjeAQI2YQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;435&quot;/&gt;&lt;/p&gt;&lt;p&gt;用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。Servlet中可以把一个会话内需要共享的数据保存到HttSession对象中。四大域对象：PageContext、ServletRequest、HttpSession、ServletContext。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、监听.过滤.拦截&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;监听器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;JavaWeb三大组件：Servlet，Listener，Filter，监听器就是指在应用程序中监听相关对象状态变化的组件。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;过滤器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;客户端请求Servlet时，先执行相关Filter，如果Filter通过，则继承执行请求的Servlet；如果Filter不通过，则不会执行用户请求的Servlet。过滤器可以动态地拦截请求和响应。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;拦截器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Spring框架中的拦截器Interceptor类似于Servlet中的过滤器Filter，主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。请求转发不执行拦截、过滤；重定向执行拦截和过滤。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、数据库连接池&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、C3P0连接池&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;C3P0是一个开源的JDBC连接池，应用程序根据C3P0配置来初始化数据库连接，可以自动回收空闲连接的功能。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Druid连接池&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Druid连接池为监控而生，内置强大的监控功能，监控特性不影响性能。内置了StatFilter功能，能采集非常完备的连接池中访问数据库执行信息，Druid连接池内置一个监控页面，提供了非常完备的监控信息，可以快速诊断系统的瓶颈，也是当前最常用的连接池。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、运行服务器&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、Jetty容器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Tomcat服务器&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Tomcat服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP程序的首选。使用Tomcat最关键的两个操作：使用开发工具连接Tomcat并部署web应用；将应用程序打包放到Tomcat服务下运行。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;六、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a8c97a99595fba8cb8b42a73370af9ef</guid>
<title>分布式系统课程笔记（一）：绪论</title>
<link>https://toutiao.io/k/bq2loro</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;是的，我又开新坑了，一直想系统的学学6.824，总是有这样那样的理由就放下了，看到现在开个坑，欢迎大家监督打脸，这个系列会以视频笔记，以及实现Lab为主。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个人非常喜欢 &lt;span&gt;Robert Morris 教授的讲课风格，深入浅出，而且很注重交流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;视频大家可以通过科学的方法去油管看，B站上[simviso官方]会把一堂课拆分成几个小视频，对于我这种精力很难长时间集中的人来说简直不要太友好，非常推荐。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;载体所限，这里只能发截图了，公众号回复 【导论】，获取完整PPT。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U71TiaSnH0ibbicyVF9f3J8SsOicib7wYbf5PhsnQ3G8LoicwgZxeYRcmfAQBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7lUMuicpwiaPOgWiaFWgLoGUcPicWbWMqMiafbn3Umm8wHYxhAvyIC4jpvdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7d7G4dxdTF2dKRVT0Rz4zYg8HxPz9MEmVOtZB6RHVuAsDIagU4WByXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7jGDM5pibGico5AWMOZbPOLVc3qzSjHrwYKdiaZNNPVnXyOkm67HKDQUdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7CVMzFIsBvsxrf3icEKJD2uTnlXD5296VPDyONAia7k1NtVgKSS2M3U7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7ibsrPNY88ZZib429uBzEaBC6CpHYjht5HmicI75FDjcDzxQicGzdCEdTZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7GAl2xibwPgOC9g53cMBsbAMOKmERpeeWH03dYibTlB6kTk8UkKN1NYEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7p97Ofy0REAVdJBlUwVn3HyvrtEZXY4qypyHLCWRYRibNfhdLT3H79Bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7nCFJibxyNgS1ialZSKxU5CgyLlB6ZqOS3jDkMFDLuxhhIRGpPRFJMBGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7fWkn9x3XpKJNzPF2STbK43KYjhy2q2Ndd3SnPsicrqujH6CGv127zTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7dt5e8vhMpYFXDC3EIN1p94ewXVkbAsujpYGW8K7BWoT7had5lNkPqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7vXMxvnUyJ7tuNqlYhD4ZWrhleCrYUTSUa6Xa7sVZtmeo4bssgSgJHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7la5ULm7HQlosiaaNlmCMibvYvTbNjWvbTfqX5TkCX7alXereIS4PkDgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7cCYq7UVpqSwiaaW63gWicRgpmepGzz10JiaraGEn9vauNDYSLoTJSdp5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag9ojEhgvRoWVUp4e6k0z4U7s1xdzLmeoIyzkbFnDDs5DOdiak4fK3awVXiaLxcGFEvLrEEojPgMLLibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;部分内容也参考知乎大佬,穆尼奥的文章。 &lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注 【&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;麒思妙想&lt;/span&gt;&lt;span&gt;】解锁更多硬核。&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;历史文章导读&lt;/strong&gt;：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果文章对您有那么一点点帮助，我将倍感荣幸&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;欢迎  &lt;span&gt;&lt;strong&gt;关注、在看、点赞、转发 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8uJ0ic6nAag8EItgzqIEhe3GbK3ibibrSC3kGNLaCYoEXEEEV8vatdHqibkazrs7oLJERAG1cldW9pbVmcTKvXL3fA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>779cf9dbc6c46cbfee80d1a0ab0865f5</guid>
<title>Pigeon：Flutter 多端接口一致性以及规范化管理实践</title>
<link>https://toutiao.io/k/yeyymvu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.559375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6GYDCe0a26982L0Ot2BhKbpx7oeAlEicnIBAwakXf6qvuzxNN9JibcK30j9IKeRM2I5toBDfWYiaXPRdYWj1AR1CQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;导语： 跨端开发中，经常会遇到插件，接口管理上的问题。了解完本文，你将会了解Flutter是如何通过Pigeon去解决plugin中多端开发难以管理的问题。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;8&quot; data-source-title=&quot;https://github.com/linpenghui958/flutterPigeonDemo&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;&lt;span&gt;demo&lt;span&gt;源码地址&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%3Cp%3Edemo%3C%2Fp%3E%22%2C%22digestLen%22%3A4%2C%22text%22%3A%22%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22https%3A%2F%2Fgithub.com%2Flinpenghui958%2FflutterPigeonDemo%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;https://github.com/linpenghui958/flutterPigeonDemo&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;warning&lt;/span&gt;：目前Pigeon还是prerelease版本，所以可能会有breaking change。下文以0.1.7版本为例。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为何需要Pigeon&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在hybird开发中，前端需要native能力，需要native双端开发提供接口。这种情况下就如何规范命名，参数等就成了一个问题，如果单独维护一份协议文件，三端依照协议文件进行开发，很容易出现协议更改后，没有及时同步，又或者在实际开发过程没有按照规范，可能导致各种意外情况。在Flutter插件包的开发中，因为涉及到native双端代码实现能力，dart侧暴露统一的接口给使用者，也会出现同样的问题，这里Flutter官方推荐使用Pigeon进行插件管理。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Pigeon的作用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Flutter官方提供的Pigeon插件，通过dart入口，生成双端通用的模板代码，Native部分只需通过重写模板内的接口，无需关心methodChannel部分的具体实现，入参，出参也均通过生成的模板代码进行约束。假设接口新增，或者参数修改，只需要在dart侧更新协议文件，生成双端模板，即可达到同步更新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以Flutter官方plugin中的video_player为例，接入pigeon后最终效果如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.493167701863354&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6GYDCe0a26982L0Ot2BhKbpx7oeAlEicnkusU172AJsCibwr9atCFHWCpILXUQuy5OWcupaWuHxluGNf5fBZfzIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;805&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到接入pigeon后整体代码简洁了不少，而且规范了类型定义。接下来我们看一下如何从零接入Pigeon。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;接入Pigeon&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看一下pub.dev上Pigeon的介绍，Pigeon只会生成Flutter与native平台通信所需的模板代码，没有其他运行时的要求，所以也不用担心Pigeon版本不同而导致的冲突。（这里的确不同版本使用起来差异较大，笔者这里接入的时候0.1.7与0.1.10，pigeon默认导出和使用都不相同）&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;创建package&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ps：如果接入已有plugin库，可以跳过此部分，直接看接入部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行生成插件包命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;flutter create --org com.exmple --template plugin flutterPigeonDemo&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要创建插件包，使用&lt;code&gt;--template=plugin&lt;/code&gt;参数执行&lt;code&gt;flutter create&lt;/code&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;lib/flutter_pigeon_demo.dart&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;android/src/main/kotlin/com/example/flutter_pigeon_demo/FlutterPigeonPlugin.kt&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;ios/Classes/FlutterPigeonDemoPlugin.m&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;example/&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里常规通过methodChannel实现plugin的部分省略，主要讲解一下如何接入pigeon插件。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;添加依赖&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先在&lt;code&gt;pubspec.yaml&lt;/code&gt;中添加依赖&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;dev_dependencies:&lt;br/&gt;  flutter_test:&lt;br/&gt;    sdk: flutter&lt;br/&gt;  pigeon:&lt;br/&gt;    version: 0.1.7&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后按照官方的要求添加一个pigeons目录，这里我们放dart侧的入口文件，内容为接口、参数、返回值的定义，后面通过pigeon的命令，生产native端代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里以&lt;code&gt;pigeons/pigeonDemoMessage.dart&lt;/code&gt;为例&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import &lt;span&gt;&#x27;package:pigeon/pigeon.dart&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;class DemoReply {&lt;br/&gt;  String result;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;class DemoRequest {&lt;br/&gt;  String methodName;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 需要实现的api&lt;br/&gt;@HostApi()&lt;br/&gt;abstract class PigeonDemoApi {&lt;br/&gt;  DemoReply getMessage(DemoRequest params);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 输出配置&lt;br/&gt;void configurePigeon(PigeonOptions opts) {&lt;br/&gt;  opts.dartOut = &lt;span&gt;&#x27;./lib/PigeonDemoMessage.dart&#x27;&lt;/span&gt;;&lt;br/&gt;  opts.objcHeaderOut = &lt;span&gt;&#x27;ios/Classes/PigeonDemoMessage.h&#x27;&lt;/span&gt;;&lt;br/&gt;  opts.objcSourceOut = &lt;span&gt;&#x27;ios/Classes/PigeonDemoMessage.m&#x27;&lt;/span&gt;;&lt;br/&gt;  opts.objcOptions.prefix = &lt;span&gt;&#x27;FLT&#x27;&lt;/span&gt;;&lt;br/&gt;  opts.javaOut =&lt;br/&gt;  &lt;span&gt;&#x27;android/src/main/kotlin/com/example/flutter_pigeon_demo/PigeonDemoMessage.java&#x27;&lt;/span&gt;;&lt;br/&gt;  opts.javaOptions.package = &lt;span&gt;&#x27;package com.example.flutter_pigeon_demo&#x27;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;pigeonDemoMessage.dart&lt;/code&gt;文件中定义了请求参数类型、返回值类型、通信的接口以及pigeon输出的配置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里&lt;code&gt;@HostApi()&lt;/code&gt;标注了通信对象和接口的定义，后续需要在native侧注册该对象，在Dart侧通过该对象的实例来调用接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;configurePigeon&lt;/code&gt;为执行pigeon生产双端模板代码的输出配置。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;dartOut&lt;/code&gt;为dart侧输出位置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;objcHeaderOut、objcSourceOut&lt;/code&gt;为iOS侧输出位置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;prefix&lt;/code&gt;为插件默认的前缀&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;javaOut、javaOptions.package&lt;/code&gt;为Android侧输出位置和包名&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后我们只需要执行如下命令，就可以生成对应的代码到指定目录中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;flutter pub run pigeon --input pigeons/pigeonDemoMessage.dart&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;生成模板代码后的项目目录如下&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.8198433420365536&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6GYDCe0a26982L0Ot2BhKbpx7oeAlEicnyibzelSZPVyFhcPCURbfcyK0WE0AgicLpBPbRrxQrpd3IHpR1H5Ibjaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;766&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;项目目录&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在Plugin库中只需要管理标红的dart文件，其余标绿的则为通过Pigeon自动生成的模板代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们接下来看一下双端如何使用Pigeon生成的模板文件。&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Android端接入&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里Pigeon生产的&lt;code&gt;PigeonDemoMessage.java&lt;/code&gt;文件中，可以看到入参和出参的定义&lt;code&gt;DemoRequest、DemoReply&lt;/code&gt;，而&lt;code&gt;PigeonDemoApi&lt;/code&gt;接口，后面需要在plugin中继承PigeonDemoApi并实现对应的方法，其中setup函数用来注册对应方法所需的methodChannel。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;ps: 这里生成的PigeonDemoApi部分，setup使用了接口中静态方法的默认实现，这里需要api level 24才能支持，这里需要注意一下。&lt;/p&gt;&lt;p&gt;考虑到兼容性问题，可以将setup的定义转移到plugin中。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先需要在plugin文件中引入生成的PigeonDemoMessage中的接口和类。FlutterPigeonDemoPlugin先要继承PigeonDemoApi。然后在onAttachedToEngine中进行PigeonDemoApi的setup注册。并在plugin中重写PigeonDemoApi中定义的getMessage方法&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;伪代码部分&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;// ... 省略其他引入&lt;br/&gt;import com.example.flutter_pigeon_demo.PigeonDemoMessage.*&lt;br/&gt;&lt;br/&gt;// 继承PigeonDemoApi&lt;br/&gt;public class FlutterPigeonDemoPlugin: FlutterPlugin, MethodCallHandler, PigeonDemoApi {&lt;br/&gt;&lt;br/&gt; //...&lt;br/&gt; override fun onAttachedToEngine(@NonNull flutterPluginBinding: FlutterPlugin.FlutterPluginBinding) {&lt;br/&gt;     channel = MethodChannel(flutterPluginBinding.getFlutterEngine().getDartExecutor(), &lt;span&gt;&quot;flutter_pigeon_demo&quot;&lt;/span&gt;)&lt;br/&gt;     channel.setMethodCallHandler(this);&lt;br/&gt;     // pigeon生成的api进行初始化&lt;br/&gt;     PigeonDemoApi.setup(flutterPluginBinding.binaryMessenger, this);&lt;br/&gt;   }&lt;br/&gt;   &lt;br/&gt;   // 重写PigeonDemoApi中的getMessage方法&lt;br/&gt;   override fun getMessage(arg: DemoRequest): DemoReply {&lt;br/&gt;      var reply = DemoReply();&lt;br/&gt;      reply.result = &lt;span&gt;&quot;pigeon demo result&quot;&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; reply;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;iOS接入&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ios相关目录下的&lt;code&gt;PigeonDemoMessage.m&lt;/code&gt;也有&lt;code&gt;FLTDemoReply、FLTDemoRequest、FLTPigeonDemoApiSetup&lt;/code&gt;的实现。首先需要在plugin中引入头文件&lt;code&gt;PigeonDemoMessage.h&lt;/code&gt;，需要在registerWithRegistrar中注册setup函数，并实现getMessage方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;#import &quot;FlutterPigeonDemoPlugin.h&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#import &quot;PigeonDemoMessage.h&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;@implementation FlutterPigeonDemoPlugin&lt;br/&gt;+ (void)registerWithRegistrar:(NSObject&amp;lt;FlutterPluginRegistrar&amp;gt;*)registrar {&lt;br/&gt;    FlutterPigeonDemoPlugin* instance = [[FlutterPigeonDemoPlugin alloc] init];&lt;br/&gt;    // 注册api&lt;br/&gt;    FLTPigeonDemoApiSetup(registrar.messenger, instance);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;// 重写getMessage方法&lt;br/&gt;- (FLTDemoReply*)getMessage:(FLTDemoRequest*)input error:(FlutterError**)error {&lt;br/&gt;    FLTDemoReply* reply = [[FLTDemoReply alloc] init];&lt;br/&gt;    reply.result = @&lt;span&gt;&quot;pigeon demo result&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; reply;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;@end&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Dart侧使用&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终在dart侧如何调用呢
首先看一下lib下Pigeon生成的dart文件&lt;code&gt;PigeonDemoMessage.dart&lt;/code&gt;&lt;code&gt;DemoReply、DemoRequest&lt;/code&gt;用来实例化入参和出参
然后通过&lt;code&gt;PigeonDemoApi&lt;/code&gt;的实例去调用方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import &lt;span&gt;&#x27;dart:async&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;import &lt;span&gt;&#x27;package:flutter/services.dart&#x27;&lt;/span&gt;;&lt;br/&gt;import &lt;span&gt;&#x27;PigeonDemoMessage.dart&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;class FlutterPigeonDemo {&lt;br/&gt;  static const MethodChannel _channel =&lt;br/&gt;      const MethodChannel(&lt;span&gt;&#x27;flutter_pigeon_demo&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;  static Future&amp;lt;String&amp;gt; get platformVersion async {&lt;br/&gt;    final String version = await _channel.invokeMethod(&lt;span&gt;&#x27;getPlatformVersion&#x27;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; version;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  static Future&amp;lt;DemoReply&amp;gt; testPigeon() async {&lt;br/&gt;    // 初始化请求参数&lt;br/&gt;    DemoRequest requestParams = DemoRequest()..methodName = &lt;span&gt;&#x27;requestMessage&#x27;&lt;/span&gt;;&lt;br/&gt;    // 通过PigeonDemoApi实例去调用方法&lt;br/&gt;    PigeonDemoApi api = PigeonDemoApi();&lt;br/&gt;    DemoReply reply = await api.getMessage(requestParams);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; reply;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此，Pigeon的接入就已经完成了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;接入Pigeon后的效果&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文demo代码较为简单，接入Pigeon前后的差异并不明显，我们可以看下一Flutter官方plugin中的video_player接入前后的对比。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;左侧为接入Pigeon前，处理逻辑都在onMethodCall中，不同的方法通过传入的call.method来区分，代码复杂后很容易变成面条式代码，而且返回的参数也没有约定，有较多不确定因素。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;右侧接入Pigeon后，只需要重写对应的方法，逻辑分离，直接通过函数名区分，只需要关心具体的业务逻辑即可。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6GYDCe0a26982L0Ot2BhKbpx7oeAlEicnMbXODFr4ekmE2tYSKqmfrdbHqvicENVORUTlQRMb6bk8DsEoBOghEHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而在dart的调用侧，接入前都是通过invokeMethod调用，传入的参数map内也是dynamic类型的值。接入后直接调用api的实例对象上的方法，并且通过Pigeon生成的模板代码，直接实例化参数对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6GYDCe0a26982L0Ot2BhKbpx7oeAlEicnA9C63TPUAxpGFx8GL1xaL8HYw4bNlNqmvIRtgkSaiajMwbHLZnRx2kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结：通过Pigeon来管理Flutter的plugin库，只需要在dart侧维护一份协议即可，即使在多端协同开发的情况下，也能达到约束和规范的作用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实现原生插件时我们可以省去很多重复代码，并且不需要关心具体methodchannel的name，也避免了常规情况下，可能出现的面条式代码，只需通过重写pigeon暴露的方法就可以完成双端的通信。而dart侧也只需要通过模板暴露的实例对象来调用接口方法。&lt;/p&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;源码分析&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用的时候，我们只知道运行命令&lt;code&gt;flutter pub run pigeon --input xxx&lt;/code&gt;就可以生成双端模板代码，接下来我们深入了解一下，这其中Pigeon到底做了什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，看一下plugin库默认导出的pigeon_lib.dart入口文件，这里主要有几个定义PigeonOptions、ParseResults、Pigeon。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PigeonOptions，是执行命令生成模板时的选项。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;ParseResults，表示解析的结果集合包含了AST对象root，和解析过程产生的错误信息集合erros。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Pigeon，是实际进行代码生成的类。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中Pigeon的入口为run方法，这里进行了模板代码的生成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;run函数的入参是一个String类型的List，这里对应的是通过命令行输入的，PigeonOptions的选项。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数开始先实例化了pigeon对象，并对传入的options进行解析生成编译所需的PigeonOptions。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里提供了两种方式，一种是通过命令直接传入，一种是通过入口文件内configurePigeon的定义传入。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// Pigeon实例初始化&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; Pigeon pigeon = Pigeon.setup();&lt;br/&gt;&lt;span&gt;// 解析命令行穿传入的参数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; PigeonOptions options = Pigeon.parseArgs(args);&lt;br/&gt;&lt;span&gt;// 解析入口文件内的参数&lt;/span&gt;&lt;br/&gt;_executeConfigurePigeon(options);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//校验input(输入文件)或者dartOut(dart输出路径)是否为空&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (options.input == &lt;span&gt;null&lt;/span&gt; || options.dartOut == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;print&lt;/span&gt;(usage);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来会对objcHeaderOut、javaOut为空的情况取默认值处理。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// 解析apis&lt;/span&gt;&lt;br/&gt;&lt;span&gt;final&lt;/span&gt; ParseResults parseResults = pigeon.parse(apis);&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; (Error err &lt;span&gt;in&lt;/span&gt; parseResults.errors) {&lt;br/&gt;  errors.add(Error(message: err.message, filename: options.input));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里parse解析生成的parseResults对象，最终用parseResults中的ast对象root来生成多端模板代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里首先将需要实现的api类和参数类进行了区分。（ps：这里_isApi中便是通过dart入口中@HostApi注解进行区分）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;Type&lt;/span&gt; type &lt;span&gt;in&lt;/span&gt; types) {&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; ClassMirror classMirror = reflectClass(type);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (_isApi(classMirror)) {&lt;br/&gt;    apis.add(classMirror);&lt;br/&gt;  } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;    classes.add(classMirror);&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后对参数类型进行区分，并给root对象添加了classes和apis属性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里classes对应模板中参数的类。而apis则对应模板中含有函数的方法类。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;root.classes =&lt;br/&gt;      _unique(_parseClassMirrors(classes), (Class x) =&amp;gt; x.name).toList();&lt;br/&gt;&lt;br/&gt;  root.apis = &amp;lt;Api&amp;gt;[];&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (ClassMirror apiMirror &lt;span&gt;in&lt;/span&gt; apis) {&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;Method&amp;gt; functions = &amp;lt;Method&amp;gt;[];&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (DeclarationMirror declaration &lt;span&gt;in&lt;/span&gt; apiMirror.declarations.values) {&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (declaration &lt;span&gt;is&lt;/span&gt; MethodMirror &amp;amp;&amp;amp; !declaration.isConstructor) { &lt;br/&gt;        &lt;span&gt;// 省略处理过程&lt;/span&gt;&lt;br/&gt;      }&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; HostApi hostApi = _getHostApi(apiMirror);&lt;br/&gt;    root.apis.add(Api(&lt;br/&gt;        name: MirrorSystem.getName(apiMirror.simpleName),&lt;br/&gt;        location: hostApi != &lt;span&gt;null&lt;/span&gt; ? ApiLocation.host : ApiLocation.flutter,&lt;br/&gt;        methods: functions,&lt;br/&gt;        dartHostTestHandler: hostApi?.dartHostTestHandler));&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后根据解析后的root对象，来生成对应各端的代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt; (options.dartOut != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; _runGenerator(&lt;br/&gt;    options.dartOut,&lt;br/&gt;    (&lt;span&gt;StringSink&lt;/span&gt; sink) =&amp;gt;&lt;br/&gt;    generateDart(options.dartOptions, parseResults.root, sink));&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (options.objcHeaderOut != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; _runGenerator(&lt;br/&gt;    options.objcHeaderOut,&lt;br/&gt;    (&lt;span&gt;StringSink&lt;/span&gt; sink) =&amp;gt; generateObjcHeader(&lt;br/&gt;      options.objcOptions, parseResults.root, sink));&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (options.objcSourceOut != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; _runGenerator(&lt;br/&gt;    options.objcSourceOut,&lt;br/&gt;    (&lt;span&gt;StringSink&lt;/span&gt; sink) =&amp;gt; generateObjcSource(&lt;br/&gt;      options.objcOptions, parseResults.root, sink));&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (options.javaOut != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; _runGenerator(&lt;br/&gt;    options.javaOut,&lt;br/&gt;    (&lt;span&gt;StringSink&lt;/span&gt; sink) =&amp;gt;&lt;br/&gt;    generateJava(options.javaOptions, parseResults.root, sink));&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里每个具体生成输出的函数就比较简单，这里以dart端的generateDart函数为例，通过root对象，遍历其中的class和api来生成对应的模板代码，这里模板都是已经预先定义好的。如果项目本身有定制化输出模板的需求，只需要修改对应的部分就好了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;void&lt;/span&gt; generateDart(DartOptions opt, Root root, &lt;span&gt;StringSink&lt;/span&gt; sink) {&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; &lt;span&gt;List&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; customClassNames =&lt;br/&gt;      root.classes.map((Class x) =&amp;gt; x.name).toList();&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; Indent indent = Indent(sink);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;// &lt;span&gt;$generatedCodeWarning&lt;/span&gt;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;// &lt;span&gt;$seeAlsoWarning&lt;/span&gt;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;br/&gt;      &lt;span&gt;&#x27;// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;// @dart = &lt;span&gt;${opt.isNullSafe ? &lt;span&gt;&#x27;2.10&#x27;&lt;/span&gt; : &lt;span&gt;&#x27;2.8&#x27;&lt;/span&gt;}&lt;/span&gt;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;import \&#x27;dart:async\&#x27;;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;import \&#x27;package:flutter/services.dart\&#x27;;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;br/&gt;      &lt;span&gt;&#x27;import \&#x27;dart:typed_data\&#x27; show Uint8List, Int32List, Int64List, Float64List;&#x27;&lt;/span&gt;);&lt;br/&gt;  indent.writeln(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; nullBang = opt.isNullSafe ? &lt;span&gt;&#x27;!&#x27;&lt;/span&gt; : &lt;span&gt;&#x27;&#x27;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;// 遍历输出参数类&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (Class klass &lt;span&gt;in&lt;/span&gt; root.classes) {&lt;br/&gt;    sink.write(&lt;span&gt;&#x27;class &lt;span&gt;${klass.name}&lt;/span&gt; &#x27;&lt;/span&gt;);&lt;br/&gt;    indent.scoped(&lt;span&gt;&#x27;{&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;, () {&lt;br/&gt;      &lt;span&gt;for&lt;/span&gt; (Field field &lt;span&gt;in&lt;/span&gt; klass.fields) {&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; datatype =&lt;br/&gt;            opt.isNullSafe ? &lt;span&gt;&#x27;&lt;span&gt;${field.dataType}&lt;/span&gt;?&#x27;&lt;/span&gt; : field.dataType;&lt;br/&gt;        indent.writeln(&lt;span&gt;&#x27;&lt;span&gt;$datatype&lt;/span&gt; &lt;span&gt;${field.name}&lt;/span&gt;;&#x27;&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;      indent.writeln(&lt;span&gt;&#x27;// ignore: unused_element&#x27;&lt;/span&gt;);&lt;br/&gt;      indent.write(&lt;span&gt;&#x27;Map&amp;lt;dynamic, dynamic&amp;gt; _toMap() &#x27;&lt;/span&gt;);&lt;br/&gt;      indent.scoped(&lt;span&gt;&#x27;{&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;, () {&lt;br/&gt;        indent.writeln(&lt;br/&gt;            &lt;span&gt;&#x27;final Map&amp;lt;dynamic, dynamic&amp;gt; pigeonMap = &amp;lt;dynamic, dynamic&amp;gt;{};&#x27;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (Field field &lt;span&gt;in&lt;/span&gt; klass.fields) {&lt;br/&gt;          indent.write(&lt;span&gt;&#x27;pigeonMap[\&#x27;&lt;span&gt;${field.name}&lt;/span&gt;\&#x27;] = &#x27;&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (customClassNames.contains(field.dataType)) {&lt;br/&gt;            indent.addln(&lt;br/&gt;                &lt;span&gt;&#x27;&lt;span&gt;${field.name}&lt;/span&gt; == null ? null : &lt;span&gt;${field.name}&lt;/span&gt;&lt;span&gt;$nullBang&lt;/span&gt;._toMap();&#x27;&lt;/span&gt;);&lt;br/&gt;          } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            indent.addln(&lt;span&gt;&#x27;&lt;span&gt;${field.name}&lt;/span&gt;;&#x27;&lt;/span&gt;);&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;        indent.writeln(&lt;span&gt;&#x27;return pigeonMap;&#x27;&lt;/span&gt;);&lt;br/&gt;      });&lt;br/&gt;      indent.writeln(&lt;span&gt;&#x27;// ignore: unused_element&#x27;&lt;/span&gt;);&lt;br/&gt;      indent.write(&lt;br/&gt;          &lt;span&gt;&#x27;static &lt;span&gt;${klass.name}&lt;/span&gt; _fromMap(Map&amp;lt;dynamic, dynamic&amp;gt; pigeonMap) &#x27;&lt;/span&gt;);&lt;br/&gt;      indent.scoped(&lt;span&gt;&#x27;{&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;, () {&lt;br/&gt;        indent.writeln(&lt;span&gt;&#x27;final &lt;span&gt;${klass.name}&lt;/span&gt; result = &lt;span&gt;${klass.name}&lt;/span&gt;();&#x27;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (Field field &lt;span&gt;in&lt;/span&gt; klass.fields) {&lt;br/&gt;          indent.write(&lt;span&gt;&#x27;result.&lt;span&gt;${field.name}&lt;/span&gt; = &#x27;&lt;/span&gt;);&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (customClassNames.contains(field.dataType)) {&lt;br/&gt;            indent.addln(&lt;br/&gt;                &lt;span&gt;&#x27;pigeonMap[\&#x27;&lt;span&gt;${field.name}&lt;/span&gt;\&#x27;] != null ? &lt;span&gt;${field.dataType}&lt;/span&gt;._fromMap(pigeonMap[\&#x27;&lt;span&gt;${field.name}&lt;/span&gt;\&#x27;]) : null;&#x27;&lt;/span&gt;);&lt;br/&gt;          } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            indent.addln(&lt;span&gt;&#x27;pigeonMap[\&#x27;&lt;span&gt;${field.name}&lt;/span&gt;\&#x27;];&#x27;&lt;/span&gt;);&lt;br/&gt;          }&lt;br/&gt;        }&lt;br/&gt;        indent.writeln(&lt;span&gt;&#x27;return result;&#x27;&lt;/span&gt;);&lt;br/&gt;      });&lt;br/&gt;    });&lt;br/&gt;    indent.writeln(&lt;span&gt;&#x27;&#x27;&lt;/span&gt;);&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// 省略apis接口部分的输出&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span&gt;腾讯音乐QQ音乐/全民K歌招聘客户端、web前端、后台开发，点击查看原文投递简历！&lt;/span&gt;&lt;span&gt;或邮箱联系: godjliu@tencent.com&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>