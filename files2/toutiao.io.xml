<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>570576c0bf7854777c6a77574da6ff88</guid>
<title>资料 | 英语进阶指南</title>
<link>https://toutiao.io/k/4yqc5t5</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f325e6d223643985b5499921cab9a604</guid>
<title>优质网站同好者周刊（第 5 期）</title>
<link>https://toutiao.io/k/ubsth9i</link>
<content:encoded>&lt;div&gt;&lt;html lang=&quot;zh-CN&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;/&gt;
  

    &lt;title&gt;优质网站同好者周刊（第 5 期）- 倾城之链 | 晚晴幽草轩&lt;/title&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;/&gt;
    
    &lt;meta name=&quot;author&quot; content=&quot;晚晴幽草轩轩主&quot;/&gt;
    
    &lt;meta name=&quot;theme-color&quot; content=&quot;#fffffb&quot;/&gt;
    &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;PKEtLPjO56&quot;/&gt;
    

    &lt;meta name=&quot;keywords&quot; content=&quot;倾城之链, 优质网站, 开放平台, 倾城&quot;/&gt;
    &lt;meta name=&quot;description&quot; content=&quot;倾城之链作为一个开放平台，旨在云集全球优秀网站，探索互联网中更广阔的世界。此周刊，将汇聚过去一周倾城所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见关于倾城。&quot;/&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;
&lt;meta property=&quot;og:title&quot; content=&quot;优质网站同好者周刊（第 5 期）- 倾城之链&quot;/&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;https://www.jeffjade.com/2021/03/18/188-nicelinks-weekly-006/index.html&quot;/&gt;
&lt;meta property=&quot;og:site_name&quot; content=&quot;晚晴幽草轩&quot;/&gt;
&lt;meta property=&quot;og:description&quot; content=&quot;倾城之链作为一个开放平台，旨在云集全球优秀网站，探索互联网中更广阔的世界。此周刊，将汇聚过去一周倾城所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见关于倾城。&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/forum.lovejade.cn.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/www.gitpod.io.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/defonic.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/rainbowhunt.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/mouto.org.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/coder.com.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://oss.nicelinks.site/embed.so.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot;/&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&quot;/&gt;
&lt;meta property=&quot;og:updated_time&quot; content=&quot;2021-03-20T03:21:08.828Z&quot;/&gt;
&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;
&lt;meta name=&quot;twitter:title&quot; content=&quot;优质网站同好者周刊（第 5 期）- 倾城之链&quot;/&gt;
&lt;meta name=&quot;twitter:description&quot; content=&quot;倾城之链作为一个开放平台，旨在云集全球优秀网站，探索互联网中更广阔的世界。此周刊，将汇聚过去一周倾城所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见关于倾城。&quot;/&gt;
&lt;meta name=&quot;twitter:image&quot; content=&quot;https://oss.nicelinks.site/forum.lovejade.cn.png?x-oss-process=style/png2jpg&quot;/&gt;
&lt;meta name=&quot;twitter:creator&quot; content=&quot;@nicejadeyang&quot;/&gt;

    
    
    
    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    

    
    
    
    
    
    
&lt;/head&gt;&lt;/html&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d7580bf3aaa6fc7d40cc7167081f8f5e</guid>
<title>卧槽，线上数据删错了，差点被老板开除</title>
<link>https://toutiao.io/k/exd77nu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUxODkzNTQ3Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/uL371281oDFEpxenPicr7Kh8c9P0I97yVWw9JfljjPy5gVBLDiaIrWkzAGHGib09Kib4TQtyw8jpLicW3yoyibMY8yMA/0?wx_fmt=png&quot; data-nickname=&quot;苏三说技术&quot; data-alias=&quot;&quot; data-signature=&quot;「苏三说技术」 维护者目前就职于某知名互联网公司，从事开发、架构和部分管理工作。实战经验丰富，对jdk、spring、springboot、springcloud、mybatis等开源框架源码有一定研究，欢迎关注，和我一起交流。&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论是开发、测试，还是DBA，都难免会涉及到数据库的操作，比如：创建某张表，添加某个字段、添加数据、更新数据、删除数据、查询数据等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正常情况下还好，但如果操作数据库时出现失误，比如：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;删除订单数据时where条件写错了，导致多删了很多用户订单。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;更新会员有效时间时，一次性把所有会员的有效时间都更新了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;修复线上数据时，改错了，想还原。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有很多很多场景，我就不一一列举了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果出现线上环境数据库误操作怎么办？有没有后悔药？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是有的，请各位看官仔细往下看。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.不要用聊天工具发sql语句&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通常开发人员写好sql语句之后，习惯通过聊天工具，比如：qq、钉钉、或者腾讯通等，发给&lt;code&gt;团队老大&lt;/code&gt;或者&lt;code&gt;DBA&lt;/code&gt;在线上环境执行。但由于有些聊天工具，对部分&lt;code&gt;特殊字符&lt;/code&gt;会自动转义，而且有些消息由于&lt;code&gt;内容太长&lt;/code&gt;，会被自动分成多条消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样会导致团队老大或者DBA复制出来的sql不一定是正确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们需要手动拼接成一条&lt;code&gt;完整的sql&lt;/code&gt;，有时甚至需要把转义后的字符替换回以前的特殊字符，无形之中会浪费很多额外的时间。即使最终sql拼接好了，真正执行sql的人，心里一定很虚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，强烈建议你把要在线上执行的sql语句用&lt;code&gt;邮件&lt;/code&gt;发过去，可以避免使用聊天工具的一些弊端，减少一些误操作的机会。而且有个存档，方便今后有问题的时候回溯原因。很多聊天工具只保留最近&lt;code&gt;7天&lt;/code&gt;的历史记录，邮件会保留更久一些。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;别用聊天工具发sql语句！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;别用聊天工具发sql语句！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;别用聊天工具发sql语句！&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重要的事情说三遍，它真的能减少一些误操作。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.把sql语句压缩成一行&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些时候，开发人员写的sql语句很长，使用了各种&lt;code&gt;join&lt;/code&gt;和&lt;code&gt;union&lt;/code&gt;，而且使用美化工具，将一条sql变成了多行。在复制sql的时候，自己都无法确定sql是否完整。（为了装逼，把自己也坑了，哈哈哈）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线上环境有时候需要通过命令行连接数据库，比如：mysql，你把sql语句复制过来后，在命令行界面执行，由于屏幕滚动太快，这时根本无法确定sql是否都执行成功。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这类问题，强烈建议把sql语句&lt;code&gt;压缩成一行&lt;/code&gt;，去掉多余的&lt;code&gt;换行符&lt;/code&gt;和&lt;code&gt;空格&lt;/code&gt;，可以有效的减少一些误操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sql压缩工具&lt;/code&gt;推荐使用：https://tool.lu/sql/&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3.操作数据之前先select一下&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要特别说明的是：本文的操作数据主要指&lt;code&gt;修改&lt;/code&gt;和&lt;code&gt;删除&lt;/code&gt;数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，由于我们人为失误，把where条件写错了。但没有怎么仔细检查，就把sql语句直接执行了。影响范围小还好，如果影响几万、几十万，甚至几百万行数据，我们可能要哭了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种情况，在操作数据之前，把sql先改成&lt;code&gt;select count(*)&lt;/code&gt;语句，比如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=1 where status=0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改成：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;count&lt;/span&gt;(*) &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查一下该sql执行后影响的记录行数，做到自己心中有数。也给自己一次测试sql是否正确，确认是否执行的机会。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4.操作数据sql加limit&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;即使通过上面的&lt;code&gt;select&lt;/code&gt;语句确认了sql语句没有问题，执行后影响的记录行数是对的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也建议你不要立刻执行，建议在正在执行的时候，加上&lt;code&gt;limit&lt;/code&gt; + &lt;code&gt;select出的记录行数&lt;/code&gt;。例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=1 where status=0 limit 1000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设有一次性更新的数据太多，所有相关记录行都会被锁住，造成长时间的锁等待，而造成用户请求超时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，加&lt;code&gt;limit&lt;/code&gt;可以避免一次性操作太多数据，对服务器的cpu造成影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个最重要的原因：加&lt;code&gt;limit&lt;/code&gt;后，操作数据的影响范围是完全可控的。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5.update时更新修改人和修改时间&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人写&lt;code&gt;update&lt;/code&gt;语句时，如果要修改状态，就只更新状态，不管其他的字段。比如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=1 where status=0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这条sql会把&lt;code&gt;status&lt;/code&gt;等于0的数据，全部更新成1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后来发现业务逻辑有问题，不应该这么更新，需要把&lt;code&gt;status&lt;/code&gt;状态回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时你可能会很自然想到这条sql：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=0 where status=1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但仔细想想又有些不对。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样不是会把有部分以前&lt;code&gt;status&lt;/code&gt;就是1的数据更新成0？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这回真的要哭了，呜呜呜。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，送你一个好习惯：在更新数据的时候，同时更新&lt;code&gt;修改人&lt;/code&gt;和&lt;code&gt;修改时间&lt;/code&gt;字段。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=1,edit_date=now(),edit_user=&#x27;admin&#x27; where status=0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;这样在恢复数据时就能通过&lt;/span&gt;&lt;code&gt;修改人&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;修改时间&lt;/code&gt;&lt;span&gt;字段过滤数据了。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面需要用到的&lt;code&gt;修改时间&lt;/code&gt;通过这条sql语句可以轻松找到：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; edit_user ,edit_date &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;by&lt;/span&gt; edit_date &lt;span class=&quot;code-snippet__keyword&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当然，如果是高并发系统不建议这种批量更新方式，可能会锁表一定时间，造成请求超时。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些同学可能会问：为什么要同时更新修改人，只更新修改时间不行吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要有如下的原因：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;为了标识非正常用户操作，方便后面统计和定位问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;有些情况下，在执行sql语句的过程中，正常用户产生数据的修改时间跟你的可能一模一样，导致回滚时数据查多了。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6.多用逻辑删除，少用物理删除&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在业务开发中，删除数据是必不可少的一种业务场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有些人开发人员习惯将表设计成&lt;code&gt;物理删除&lt;/code&gt;，根据主键只用一条&lt;code&gt;delete&lt;/code&gt;语句就能轻松搞定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他们给出的理由是：&lt;code&gt;节省数据库的存储空间&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想法是好的，但是现实很残酷。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有条极重要的数据删错了，想恢复怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时只剩八个字：没有数据，恢复不了。（PS：或许通过binlog二进制文件可以恢复）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果之前设计表的时候用的&lt;code&gt;逻辑删除&lt;/code&gt;，上面的问题就变得好办了。删除数据时，只需&lt;code&gt;update&lt;/code&gt;删除状态即可，例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;update&lt;/span&gt; order set del_status=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,edit_date=now(),edit_user=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;admin&#x27;&lt;/span&gt; where id=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如出现异常，要恢复数据，把该id的删除状态还原即可，例如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;update&lt;/span&gt; order set del_status=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;,edit_date=now(),edit_user=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;admin&#x27;&lt;/span&gt; where id=&lt;span class=&quot;code-snippet__number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;7.操作数据之前先做备份&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果只是修改了少量的数据，或者只执行了一两条sql语句，通过上面的&lt;code&gt;修改人&lt;/code&gt;和&lt;code&gt;修改时间&lt;/code&gt;字段，在需要回滚时，能快速的定位到正确的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是如果修改的记录行数很多，并且执行了多条sql，产生了很多&lt;code&gt;修改时间&lt;/code&gt;。这时，你可能就要犯难了，没法一次性找出哪些数据需要回滚。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这类问题，可以将表做备份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以使用如下sql备份：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; order_bak_2021031721 &lt;span class=&quot;code-snippet__keyword&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;into&lt;/span&gt; order_bak_2021031721 &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先创建一张一模一样的表，然后把数据复制到新表中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以简化成一条sql：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;table&lt;/span&gt; order_bak_2021031722 &lt;span class=&quot;code-snippet__keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;创建表的同时复制数据到新表中。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;此外，建议在表名中加上&lt;code&gt;bak&lt;/code&gt;和&lt;code&gt;时间&lt;/code&gt;，一方面是为了通过表名快速识别出哪些表是备份表，另一方面是为了备份多次时好做区分。因为有时需要执行多次sql才能把数据修复好，这种情况建议把表备份多次，如果出现异常，把数据回滚到最近的一次备份，可以节省很多重复操作的时间。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恢复数据时，把sql语句改成&lt;code&gt;select&lt;/code&gt;语句，先在备份库找出相关数据，每条数据对应一条&lt;code&gt;update&lt;/code&gt;语句，还原到老表中。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;8.中间结果写入临时表&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有时候，我们要先用一条sql查询出要更新的记录的id，然后通过这些id更新数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;批量更新之后，发现不对，要回滚数据。但由于有些数据已更新，此时使用相同的sql相同的条件，却查不出上次相同的id了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时，我们开始慌了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对这种情况，我们可以先将第一次查询的id存入一张&lt;code&gt;临时表&lt;/code&gt;，然后通过&lt;code&gt;临时表&lt;/code&gt;中的id作为查询条件更新数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要恢复数据，只用通过&lt;code&gt;临时&lt;/code&gt;表中的id作为查询条件更新数据即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改完，3天之后，如果没有出现问题，就可以把&lt;code&gt;临时表&lt;/code&gt;删掉了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;9.表名前面一定要带库名&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在写sql时为了方便，习惯性不带数据库名称。比如：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;update order set status=1,edit_date=now(),edit_user=&#x27;admin&#x27; where status=0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;假如有多个数据库中有相同的表&lt;/span&gt;&lt;code&gt;order&lt;/code&gt;&lt;span&gt;，表结构一模一样，只是数据不一样。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于执行sql语句的人一个小失误，进错数据库了。&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;trade1&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后执行了这条sql语句，结果悲剧了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有个非常有效的预防这类问题的方法是加&lt;code&gt;数据库名&lt;/code&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`trade2`&lt;/span&gt;.&lt;span class=&quot;code-snippet__string&quot;&gt;`order`&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,edit_date=&lt;span class=&quot;code-snippet__keyword&quot;&gt;now&lt;/span&gt;(),edit_user=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;admin&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;status&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;这样即使执行sql语句前进错数据库了，也没什么影响。&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;10.字段增删改的限制&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多时候，我们少不了对表字段的操作，比如：新加、修改、删除字段，但每种情况都不一样。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;新加的字段一定要允许为空&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新加的字段一定要允许为空。为什么要这样设计呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正常情况下，如果程序新加了字段，一般是先在数据库中加字段，然后再发程序的最新代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么是这种顺序？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为如果先发程序，然后在数据库中加字段。在该程序刚部署成功，但数据库新字段还没来得及加的这段时间内，最新程序中，所有使用了新加字段的增删改查sql都会报字段不存在的异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，就按先在数据库中加字段，再发程序的顺序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果数据库中新加的字段非空，最新的程序还没发，线上跑的还是老代码，这时如果有&lt;code&gt;insert&lt;/code&gt;操作，就会报字段不能为空的异常。因为新加的非空字段，老代码是没法赋值的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以说新加的字段一定要允许为空。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除此之外，这种设计更多的考虑是为了程序发布失败时的回滚操作。如果新加的字段允许为空，则可以不用回滚数据库，只需回滚代码即可，是不是很方便？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;不允许删除字段&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;删除字段是不允许的，特别是必填字段一定不能删除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么这么说？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设开发人员已经把程序改成不使用删除字段了，接下来如何部署呢？&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果先把程序部署好了，还没来得及删除数据库相关表字段。当有&lt;code&gt;insert&lt;/code&gt;请求时，由于数据库中该字段是必填的，会报必填字段不能为空的异常。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果先把数据库中相关表字段删了，程序还没来得及发。这时所有涉及该删除字段的&lt;code&gt;增删改查&lt;/code&gt;，都会报字段不存在的异常。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，线上环境必填字段一定不能删除的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;根据实际情况修改字段&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改字段要分为这三种情况：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;1.修改字段名称&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改字段名称也不允许，跟删除必填字段的问题差不多。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果把程序部署好了，还没来得及修改数据库中表字段名称。这时所有涉及该字段的&lt;code&gt;增删改查&lt;/code&gt;，都会报字段不存在的异常。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果先把数据库中字段名称改了，程序还没来得及发。这时所有涉及该字段的&lt;code&gt;增删改查&lt;/code&gt;，同样也会报字段不存在的异常。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，线上环境字段名称一定不要修改。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;2.修改字段类型&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改字段类型时一定要兼容之前的数据。例如：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;tinyint改成int可以，但int改成tinyint要仔细衡量一下。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;varchar改成text可以，但text改成varchar要仔细衡量一下。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;3.修改字段长度&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字段长度建议改大，通常情况下，不建议改小。如果一定要改小，要先确认该字段可能会出现的最大长度，避免&lt;code&gt;insert&lt;/code&gt;操作时出现字段太长的异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，建议改大也需要设置一个合理的长度，避免数据库资源浪费。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文分享了10种减少数据库误操作的方法，并非所有场景都适合你。特别是在一些高并发，或者单表数据量非常大的场景，你需要根据实际情况酌情选择。但我敢肯定的是读完这篇文章，你一定会有一些收获，因为大部分方法对你来说是适用的，可能会让你少走很多弯路，强烈建议收藏。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>171742333c9d0f69e8dc4810f34d11a8</guid>
<title>写给开发人员的实用密码学：非对称加密算法</title>
<link>https://toutiao.io/k/ajk71ed</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在前面的文章《&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3NTQyMzEzNQ==&amp;amp;mid=2247486210&amp;amp;idx=1&amp;amp;sn=a63107bab37b9406f19a2ca7e5a0ba2e&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;写给开发人员的实用密码学 - 对称加密算法&lt;/a&gt;》中，介绍了现代密码学中非常重要的加密解密算法。从工程学的角度，选取密钥足够长的加密算法（比如AES 256、AES 512），是无法破解的。但在对称加密算法中，存在明显的薄弱环节，那就是密钥的存储与分发。因为算法是公开的，那么决定加密系统是否安全的因素就是密钥。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而在开放的互联网环境下，如何高效分发密钥成了一个难题。比如一个服务器，可能会服务千万级的用户，如果为每个用户分配不同的密钥，那密钥的维护是个大问题。密钥发放也是问题，如果是企业内部，还可以通过邮件发送密钥，但在开放的互联网上，这种方式行不通。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公开密钥算法（Public KeyCryptography），也称为非对称加密算法（Asymmetrical Cryptography），可以用于解决这一难题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义，非对称加密算法就是加密密钥和解密密钥不是同一个。算法的密钥是一对，分别是公钥（public key）和私钥（private key）。一般私钥由密钥对的生成方（比如服务器端）持有，避免泄露，而公钥任何人都可以持有，也不怕泄露。这里没有使用加密密钥和解密密钥，是因为公钥和私钥都可以用来加密，也可以用来解密。如果使用公钥加密，就要使用私钥解密，反之依然。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公开密钥算法不是一个算法而是一组算法，通常提供如下算法：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;密钥对生成：生成随机对的私钥+对应的公钥。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;加密/解密：通过公钥加密数据，并通过私钥解密数据（通常使用混合加密方案）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数字签名（消息认证）：通过私钥对消息签名，并通过公钥验证签名。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;密钥交换算法：通过不安全的通道在两方之间安全地交换加密密钥。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果公开密钥算法用于加密解密运算，习惯上称为非对称加密算法。非对称加密算法的加密解密过程如下图所示。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2885572139303483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibQ4mtgHYXv6I2wbKslbeib7VTCdtGvpyrr2EL4yJL8XZVvITsV9ibAoeNwHNoZp42qwiavWZYDrdqtKtiaZAaHicT1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;402&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前非对称加密算法还无法取代对称加密算法，相比对称加密算法来说，公开密钥算法尤其是RSA算法运算非常缓慢，一般情况下，需要加密的明文数据都非常大，如果使用公开密钥算法进行加密，运算性能会惨不忍睹。公开密钥算法在密码学中一般进行密钥协商或者数字签名，因为这两者运算的数据相对较小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前，最重要和最常用的公钥密码系统是 RSA 和 椭圆曲线密码算法（ECC）。推荐使用 ECC，因为它具有较小的密钥，较短的签名和更好的性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;国密 SM2 算法就是一种 ECC 算法，所以下面着重讲一讲 ECC。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ECC 算法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC是比离散对数类算法（比如RSA和DH算法）更复杂的算法，非常难于理解，本身也是很复杂的一个结构体，在理解起来的时候有一定的难度。不理解ECC理论知识没有关系，但需要了解以下这张图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.695&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibQ4mtgHYXv6I2wbKslbeib7VTCdtGvpyrJNra3zLFMuzsjTr3Mxo7JLicGoaCkj7h4HHfVibfKyuWtkFfMaVEjRlw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC椭圆曲线由很多点组成，这些点由特定的方程式组成的，比如方程式可以是y^2 = x^3 + ax + b，这些点连接起来就是一条曲线，但曲线并不是一个椭圆。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;椭圆曲线有个特点，任意两个点能够得到这条椭圆曲线上的另外一点，这个操作称为打点，经过多次（比如d次）打点后，能够生成一个最终点（F）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面的图中，A点称为基点（G）或者生成器。A可以和自己打点从而生成B点，在实际应用的时候，一般有基点就可以了。经过多次打点，就得到了最终点G。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC密码学的关键点就在于就算知道具体方程式、基点（G）、最终点（F），也无法知晓一共打点了多少次（d）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC中，打点次数(d)就是私钥，这通常是一个随机数，公钥就是最终点（F)，包含(x，y)两个分量，通常组合成一个数字来传输和存储。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC由方程式（比如a、b这样的方程式参数）、基点（G）、质数（P）组成。理论上方程式和各种参数组合可以是任意的，但是在密码学中，为了安全，系统预先定义了一系列的曲线，称为命名曲线（name curve），比如secp256k1就是一个命名曲线。对于开发者而言，在使用ECC密码学的时候，就是选择具体的命名曲线。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;命名曲线&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ECC本质上就是一个数学公式，任何人基于公式都可以设计出椭圆曲线，在实现的时候一定要注意ECC离散对数问题（Elliptic-Curve Discrete-Logarithm Problem，简称ECDLP），如果实现不当，那么ECC公式就会存在安全风险。为了简化ECC的使用，可以选用设计规范的命名曲线，命名曲线中包含了ECC椭圆曲线的参数，比如基点、有限域等，对于大部分开发者来说，如果要使用ECC椭圆曲线，要做的就是选择一条安全且性能高的命名曲线。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常见的命名曲线有 secp192r1、secp256r1、secp384r1、secp512r1。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用GmSSL命令行可以查看所实现的命名曲线。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ gmssl ecparam -list_curves&lt;br/&gt;  secp112r1 : SECG/WTLS curve over a 112 bit prime field&lt;br/&gt;  secp112r2 : SECG curve over a 112 bit prime field&lt;br/&gt;  secp128r1 : SECG curve over a 128 bit prime field&lt;br/&gt;  secp128r2 : SECG curve over a 128 bit prime field&lt;br/&gt;  secp160k1 : SECG curve over a 160 bit prime field&lt;br/&gt;  secp160r1 : SECG curve over a 160 bit prime field&lt;br/&gt;  secp160r2 : SECG/WTLS curve over a 160 bit prime field&lt;br/&gt;  secp192k1 : SECG curve over a 192 bit prime field&lt;br/&gt;  secp224k1 : SECG curve over a 224 bit prime field&lt;br/&gt;  secp224r1 : NIST/SECG curve over a 224 bit prime field&lt;br/&gt;  secp256k1 : SECG curve over a 256 bit prime field&lt;br/&gt;  secp384r1 : NIST/SECG curve over a 384 bit prime field&lt;br/&gt;  secp521r1 : NIST/SECG curve over a 521 bit prime field&lt;br/&gt;  prime192v1: NIST/X9.62/SECG curve over a 192 bit prime field&lt;br/&gt;  prime192v2: X9.62 curve over a 192 bit prime field&lt;br/&gt;  prime192v3: X9.62 curve over a 192 bit prime field&lt;br/&gt;  prime239v1: X9.62 curve over a 239 bit prime field&lt;br/&gt;  prime239v2: X9.62 curve over a 239 bit prime field&lt;br/&gt;  prime239v3: X9.62 curve over a 239 bit prime field&lt;br/&gt;  prime256v1: X9.62/SECG curve over a 256 bit prime field&lt;br/&gt;  sect113r1 : SECG curve over a 113 bit binary field&lt;br/&gt;  sect113r2 : SECG curve over a 113 bit binary field&lt;br/&gt;  sect131r1 : SECG/WTLS curve over a 131 bit binary field&lt;br/&gt;  sect131r2 : SECG curve over a 131 bit binary field&lt;br/&gt;  sect163k1 : NIST/SECG/WTLS curve over a 163 bit binary field&lt;br/&gt;  sect163r1 : SECG curve over a 163 bit binary field&lt;br/&gt;  sect163r2 : NIST/SECG curve over a 163 bit binary field&lt;br/&gt;  sect193r1 : SECG curve over a 193 bit binary field&lt;br/&gt;  sect193r2 : SECG curve over a 193 bit binary field&lt;br/&gt;  sect233k1 : NIST/SECG/WTLS curve over a 233 bit binary field&lt;br/&gt;  sect233r1 : NIST/SECG/WTLS curve over a 233 bit binary field&lt;br/&gt;  sect239k1 : SECG curve over a 239 bit binary field&lt;br/&gt;  sect283k1 : NIST/SECG curve over a 283 bit binary field&lt;br/&gt;  sect283r1 : NIST/SECG curve over a 283 bit binary field&lt;br/&gt;  sect409k1 : NIST/SECG curve over a 409 bit binary field&lt;br/&gt;  sect409r1 : NIST/SECG curve over a 409 bit binary field&lt;br/&gt;  sect571k1 : NIST/SECG curve over a 571 bit binary field&lt;br/&gt;  sect571r1 : NIST/SECG curve over a 571 bit binary field&lt;br/&gt;  c2pnb163v1: X9.62 curve over a 163 bit binary field&lt;br/&gt;  c2pnb163v2: X9.62 curve over a 163 bit binary field&lt;br/&gt;  c2pnb163v3: X9.62 curve over a 163 bit binary field&lt;br/&gt;  c2pnb176v1: X9.62 curve over a 176 bit binary field&lt;br/&gt;  c2tnb191v1: X9.62 curve over a 191 bit binary field&lt;br/&gt;  c2tnb191v2: X9.62 curve over a 191 bit binary field&lt;br/&gt;  c2tnb191v3: X9.62 curve over a 191 bit binary field&lt;br/&gt;  c2pnb208w1: X9.62 curve over a 208 bit binary field&lt;br/&gt;  c2tnb239v1: X9.62 curve over a 239 bit binary field&lt;br/&gt;  c2tnb239v2: X9.62 curve over a 239 bit binary field&lt;br/&gt;  c2tnb239v3: X9.62 curve over a 239 bit binary field&lt;br/&gt;  c2pnb272w1: X9.62 curve over a 272 bit binary field&lt;br/&gt;  c2pnb304w1: X9.62 curve over a 304 bit binary field&lt;br/&gt;  c2tnb359v1: X9.62 curve over a 359 bit binary field&lt;br/&gt;  c2pnb368w1: X9.62 curve over a 368 bit binary field&lt;br/&gt;  c2tnb431r1: X9.62 curve over a 431 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls1: WTLS curve over a 113 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls3: NIST/SECG/WTLS curve over a 163 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls4: SECG curve over a 113 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls5: X9.62 curve over a 163 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls6: SECG/WTLS curve over a 112 bit prime field&lt;br/&gt;  wap-wsg-idm-ecid-wtls7: SECG/WTLS curve over a 160 bit prime field&lt;br/&gt;  wap-wsg-idm-ecid-wtls8: WTLS curve over a 112 bit prime field&lt;br/&gt;  wap-wsg-idm-ecid-wtls9: WTLS curve over a 160 bit prime field&lt;br/&gt;  wap-wsg-idm-ecid-wtls10: NIST/SECG/WTLS curve over a 233 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls11: NIST/SECG/WTLS curve over a 233 bit binary field&lt;br/&gt;  wap-wsg-idm-ecid-wtls12: WTLS curve over a 224 bit prime field&lt;br/&gt;  Oakley-EC2N-3: &lt;br/&gt;        IPSec/IKE/Oakley curve &lt;span&gt;#3 over a 155 bit binary field.&lt;/span&gt;&lt;br/&gt;        Not suitable &lt;span&gt;for&lt;/span&gt; ECDSA.&lt;br/&gt;        Questionable extension field!&lt;br/&gt;  Oakley-EC2N-4: &lt;br/&gt;        IPSec/IKE/Oakley curve &lt;span&gt;#4 over a 185 bit binary field.&lt;/span&gt;&lt;br/&gt;        Not suitable &lt;span&gt;for&lt;/span&gt; ECDSA.&lt;br/&gt;        Questionable extension field!&lt;br/&gt;  brainpoolP160r1: RFC 5639 curve over a 160 bit prime field&lt;br/&gt;  brainpoolP160t1: RFC 5639 curve over a 160 bit prime field&lt;br/&gt;  brainpoolP192r1: RFC 5639 curve over a 192 bit prime field&lt;br/&gt;  brainpoolP192t1: RFC 5639 curve over a 192 bit prime field&lt;br/&gt;  brainpoolP224r1: RFC 5639 curve over a 224 bit prime field&lt;br/&gt;  brainpoolP224t1: RFC 5639 curve over a 224 bit prime field&lt;br/&gt;  brainpoolP256r1: RFC 5639 curve over a 256 bit prime field&lt;br/&gt;  brainpoolP256t1: RFC 5639 curve over a 256 bit prime field&lt;br/&gt;  brainpoolP320r1: RFC 5639 curve over a 320 bit prime field&lt;br/&gt;  brainpoolP320t1: RFC 5639 curve over a 320 bit prime field&lt;br/&gt;  brainpoolP384r1: RFC 5639 curve over a 384 bit prime field&lt;br/&gt;  brainpoolP384t1: RFC 5639 curve over a 384 bit prime field&lt;br/&gt;  brainpoolP512r1: RFC 5639 curve over a 512 bit prime field&lt;br/&gt;  brainpoolP512t1: RFC 5639 curve over a 512 bit prime field&lt;br/&gt;  sm2p256v1 : SM2 curve over a 256 bit prime field&lt;br/&gt;  wapip192v1: WAPI curve over a 192 bit prime field&lt;br/&gt;  sm9bn256v1: SM9 BN curve over a 256 bit prime field&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中 sm2p256v1、wapip192v1、sm9bn256v1 就是国密定义的命名曲线。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;国密SM2算法&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SM2算法就是一种ECC算法，准确来说，就是设计了一条ECC命名曲线。在《GMT 0003-2012》这份标准中，有SM2算法的设计背景知识，有兴趣的可以了解，对于开发者而言，最重要的是《GMT 0005-2012》标准中的曲线参数：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3490740740740741&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ibQ4mtgHYXv6I2wbKslbeib7VTCdtGvpyrd5qNW1iaH3hL8KPKCliaveDlpXIA7AkZibF6Xpc8yvMibYPqK3KAKAVDVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在的网络库，比如NSS、OpenSSL、libtomcrypt等，都有ECC算法的支持，要在网络库中加入SM2算法支持，只需加入命名曲线的参数即可。比如在GmSSL代码的 ec_curve.c 文件中就有 sm2p256v1 命名曲线的参数定义：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;&lt;span&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;    EC_CURVE_DATA h;&lt;br/&gt;    &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; data[&lt;span&gt;0&lt;/span&gt; + &lt;span&gt;32&lt;/span&gt; * &lt;span&gt;6&lt;/span&gt;];&lt;br/&gt;} _EC_SM2_PRIME_256V1 = {&lt;br/&gt;    {&lt;br/&gt;        NID_X9_62_prime_field, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;32&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    },&lt;br/&gt;    {&lt;br/&gt;        &lt;span&gt;/* no seed */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;/* p */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFE&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;/* a */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFE&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFC&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;/* b */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0x28&lt;/span&gt;, &lt;span&gt;0xE9&lt;/span&gt;, &lt;span&gt;0xFA&lt;/span&gt;, &lt;span&gt;0x9E&lt;/span&gt;, &lt;span&gt;0x9D&lt;/span&gt;, &lt;span&gt;0x9F&lt;/span&gt;, &lt;span&gt;0x5E&lt;/span&gt;, &lt;span&gt;0x34&lt;/span&gt;, &lt;span&gt;0x4D&lt;/span&gt;, &lt;span&gt;0x5A&lt;/span&gt;, &lt;span&gt;0x9E&lt;/span&gt;, &lt;span&gt;0x4B&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xCF&lt;/span&gt;, &lt;span&gt;0x65&lt;/span&gt;, &lt;span&gt;0x09&lt;/span&gt;, &lt;span&gt;0xA7&lt;/span&gt;, &lt;span&gt;0xF3&lt;/span&gt;, &lt;span&gt;0x97&lt;/span&gt;, &lt;span&gt;0x89&lt;/span&gt;, &lt;span&gt;0xF5&lt;/span&gt;, &lt;span&gt;0x15&lt;/span&gt;, &lt;span&gt;0xAB&lt;/span&gt;, &lt;span&gt;0x8F&lt;/span&gt;, &lt;span&gt;0x92&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xDD&lt;/span&gt;, &lt;span&gt;0xBC&lt;/span&gt;, &lt;span&gt;0xBD&lt;/span&gt;, &lt;span&gt;0x41&lt;/span&gt;, &lt;span&gt;0x4D&lt;/span&gt;, &lt;span&gt;0x94&lt;/span&gt;, &lt;span&gt;0x0E&lt;/span&gt;, &lt;span&gt;0x93&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;/* x */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0x32&lt;/span&gt;, &lt;span&gt;0xC4&lt;/span&gt;, &lt;span&gt;0xAE&lt;/span&gt;, &lt;span&gt;0x2C&lt;/span&gt;, &lt;span&gt;0x1F&lt;/span&gt;, &lt;span&gt;0x19&lt;/span&gt;, &lt;span&gt;0x81&lt;/span&gt;, &lt;span&gt;0x19&lt;/span&gt;, &lt;span&gt;0x5F&lt;/span&gt;, &lt;span&gt;0x99&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0x46&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0x6A&lt;/span&gt;, &lt;span&gt;0x39&lt;/span&gt;, &lt;span&gt;0xC9&lt;/span&gt;, &lt;span&gt;0x94&lt;/span&gt;, &lt;span&gt;0x8F&lt;/span&gt;, &lt;span&gt;0xE3&lt;/span&gt;, &lt;span&gt;0x0B&lt;/span&gt;, &lt;span&gt;0xBF&lt;/span&gt;, &lt;span&gt;0xF2&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x0B&lt;/span&gt;, &lt;span&gt;0xE1&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0x71&lt;/span&gt;, &lt;span&gt;0x5A&lt;/span&gt;, &lt;span&gt;0x45&lt;/span&gt;, &lt;span&gt;0x89&lt;/span&gt;, &lt;span&gt;0x33&lt;/span&gt;, &lt;span&gt;0x4C&lt;/span&gt;, &lt;span&gt;0x74&lt;/span&gt;, &lt;span&gt;0xC7&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;/* y */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0xBC&lt;/span&gt;, &lt;span&gt;0x37&lt;/span&gt;, &lt;span&gt;0x36&lt;/span&gt;, &lt;span&gt;0xA2&lt;/span&gt;, &lt;span&gt;0xF4&lt;/span&gt;, &lt;span&gt;0xF6&lt;/span&gt;, &lt;span&gt;0x77&lt;/span&gt;, &lt;span&gt;0x9C&lt;/span&gt;, &lt;span&gt;0x59&lt;/span&gt;, &lt;span&gt;0xBD&lt;/span&gt;, &lt;span&gt;0xCE&lt;/span&gt;, &lt;span&gt;0xE3&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0x6B&lt;/span&gt;, &lt;span&gt;0x69&lt;/span&gt;, &lt;span&gt;0x21&lt;/span&gt;, &lt;span&gt;0x53&lt;/span&gt;, &lt;span&gt;0xD0&lt;/span&gt;, &lt;span&gt;0xA9&lt;/span&gt;, &lt;span&gt;0x87&lt;/span&gt;, &lt;span&gt;0x7C&lt;/span&gt;, &lt;span&gt;0xC6&lt;/span&gt;, &lt;span&gt;0x2A&lt;/span&gt;, &lt;span&gt;0x47&lt;/span&gt;, &lt;span&gt;0x40&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0xDF&lt;/span&gt;, &lt;span&gt;0x32&lt;/span&gt;, &lt;span&gt;0xE5&lt;/span&gt;, &lt;span&gt;0x21&lt;/span&gt;, &lt;span&gt;0x39&lt;/span&gt;, &lt;span&gt;0xF0&lt;/span&gt;, &lt;span&gt;0xA0&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;/* order */&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFE&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0xFF&lt;/span&gt;, &lt;span&gt;0x72&lt;/span&gt;, &lt;span&gt;0x03&lt;/span&gt;, &lt;span&gt;0xDF&lt;/span&gt;, &lt;span&gt;0x6B&lt;/span&gt;, &lt;span&gt;0x21&lt;/span&gt;, &lt;span&gt;0xC6&lt;/span&gt;, &lt;span&gt;0x05&lt;/span&gt;, &lt;span&gt;0x2B&lt;/span&gt;,&lt;br/&gt;        &lt;span&gt;0x53&lt;/span&gt;, &lt;span&gt;0xBB&lt;/span&gt;, &lt;span&gt;0xF4&lt;/span&gt;, &lt;span&gt;0x09&lt;/span&gt;, &lt;span&gt;0x39&lt;/span&gt;, &lt;span&gt;0xD5&lt;/span&gt;, &lt;span&gt;0x41&lt;/span&gt;, &lt;span&gt;0x23&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码中的order就是参数表中的 n。对于大部分ECC操作来说，不需要该值，但在计算签名的时候会对n取模。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们也可以通过GmSSL查看命名曲线的参数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;$ gmssl ecparam -name sm2p256v1 -out sm2p256v1.pem&lt;br/&gt;$ gmssl ecparam -&lt;span&gt;in&lt;/span&gt; sm2p256v1.pem -text -param_enc explicit -noout&lt;br/&gt;Field Type: prime-field&lt;br/&gt;Prime:&lt;br/&gt;    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:&lt;br/&gt;    ff:ff:ff:ff:ff:ff:00:00:00:00:ff:ff:ff:ff:ff:&lt;br/&gt;    ff:ff:ff&lt;br/&gt;A:   &lt;br/&gt;    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:&lt;br/&gt;    ff:ff:ff:ff:ff:ff:00:00:00:00:ff:ff:ff:ff:ff:&lt;br/&gt;    ff:ff:&lt;span&gt;fc&lt;/span&gt;&lt;br/&gt;B:   &lt;br/&gt;    28:e9:fa:9e:9d:9f:5e:34:4d:5a:9e:4b:cf:65:09:&lt;br/&gt;    a7:f3:97:89:f5:15:ab:8f:92:dd:bc:bd:41:4d:94:&lt;br/&gt;    0e:93&lt;br/&gt;Generator (uncompressed):&lt;br/&gt;    04:32:c4:ae:2c:1f:19:81:19:5f:99:04:46:6a:39:&lt;br/&gt;    c9:94:8f:e3:0b:bf:f2:66:0b:e1:71:5a:45:89:33:&lt;br/&gt;    4c:74:c7:bc:37:36:a2:f4:f6:77:9c:59:bd:ce:e3:&lt;br/&gt;    6b:69:21:53:d0:a9:87:7c:c6:2a:47:40:02:df:32:&lt;br/&gt;    e5:21:39:f0:a0&lt;br/&gt;Order: &lt;br/&gt;    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:&lt;br/&gt;    ff:ff:72:03:df:6b:21:c6:05:2b:53:bb:f4:09:39:&lt;br/&gt;    d5:41:23&lt;br/&gt;Cofactor:  1 (0x1)&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从非对称密码算法开始，逐步介绍到国密SM2算法。我们可以看到，SM2并不是一个全新设计的算法，而是借助现有的ECC理论，设计了一条命名曲线。这样，在已经实现了ECC算法的网络库上增加SM2算法的支持就非常简单，只需要将曲线参数添加即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一套完整的公开密码算法，更重要的作用是用于密钥交换和数字签名，在后面的文章将继续探讨这些话题，敬请关注！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3NTQyMzEzNQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ibQ4mtgHYXv4tOEn4Uicn7b1ITAz13SSd95USUDHGciaIrrd3whtY0IwTvH5NXTpe0LMq5YerBI24lMw5plu7T2DA/0?wx_fmt=png&quot; data-nickname=&quot;云水木石&quot; data-alias=&quot;ourpoeticlife&quot; data-signature=&quot;生活不只是眼前的编程，还有远方的读书、跑步、旅行。谈谈人工智能，读读闲书，来场说走就走的旅行，就这样。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibQ4mtgHYXv50C2zJtfH5icNbOicm63Mwia4EaZdIJtQDz9rJLxS6LBsVgWJXtbJIFBaAH2nzu7tBEic76fFUEphPjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e1014db2f2a28c80caf53a93e935812d</guid>
<title>浅谈分库分表那些事儿</title>
<link>https://toutiao.io/k/vulmd0h</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJLbNqwYo1Q4K8RRKqaGphubONCiac15rdKKrUp3CsYcibRDO86hJhGYbAEyMl56Vh8hB7Qgw0mDcsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;本文适合：需要从单库单表改造为多库多表的新手。&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文主要阐述在分库分表改造过程中需要考虑的因素以及对应的解法，还有踩过的那些坑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  前言&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们既然要做分库分表，那总要有个做事的动机。那么，在动手之前，首先就要弄明白下面两个问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  什么是分库分表？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实就是字面意思，很好理解：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  为什么要分库分表？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关键字：提升性能、增加可用性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;从性能上看&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;随着单库中的数据量越来越大、数据库的查询QPS越来越高，相应的，对数据库的读写所需要的时间也越来越多。数据库的读写性能可能会成为业务发展的瓶颈。对应的，就需要做数据库性能方面的优化。本文中我们只讨论数据库层面的优化，不讨论缓存等应用层优化的手段。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果数据库的查询QPS过高，就需要考虑拆库，通过分库来分担单个数据库的连接压力。比如，如果查询QPS为3500，假设单库可以支撑1000个连接数的话，那么就可以考虑拆分成4个库，来分散查询连接压力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果单表数据量过大，当数据量超过一定量级后，无论是对于数据查询还是数据更新，在经过索引优化等纯数据库层面的传统优化手段之后，还是可能存在性能问题。这是量变产生了质变，这时候就需要去换个思路来解决问题，比如：从数据生产源头、数据处理源头来解决问题，既然数据量很大，那我们就来个分而治之，化整为零。这就产生了分表，把数据按照一定的规则拆分成多张表，来解决单表环境下无法解决的存取性能问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;从可用性上看&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单个数据库如果发生意外，很可能会丢失所有数据。尤其是云时代，很多数据库都跑在虚拟机上，如果虚拟机/宿主机发生意外，则可能造成无法挽回的损失。因此，除了传统的Master-Slave、Master-Master等部署层面解决可靠性问题外，我们也可以考虑从数据拆分层面解决此问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此处我们以数据库宕机为例： &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当然，我们也不能无限制的拆库，这也是牺牲存储资源来提升性能、可用性的方式，毕竟资源总是有限的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  如何分库分表&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  分库？分表？还是既分库又分表？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从第一部分了解到的信息来看，分库分表方案可以分为下面3种：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.27490996398559425&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKZHuDktkFpbWzxwmCdCsJgtqpjpGFUDtKsHI5MuBkIqJEeaxEGib9eSUDx6QkCjRWkr95hicUiaicib3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;833&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  如何选择我们自己的切分方案？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;如果需要分表，那么分多少张表合适？&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于所有的技术都是为业务服务的，那么，我们就先从数据方面回顾下业务背景。 &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，我们这个业务系统是为了解决会员的咨询诉求，通过我们的XSpace客服平台系统来服务会员，目前主要以同步的离线工单数据作为我们的数据源来构建自己的数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;假设，每一笔离线工单都会产生对应一笔会员的咨询问题（我们简称：问题单），如果：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;合计共 &lt;/span&gt;&lt;span&gt;1.5w + 2w + 3w = 6.5w&lt;/span&gt;&lt;span&gt; 笔/天&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;考虑到以后可能要继续覆盖的新的业务场景，需要提前预留部分扩展空间，这里我们假设为每天产生8w笔问题单。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除问题单外，还有另外2张常用的业务表：用户操作日志表、用户提交的表单数据表。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中，每笔问题单都会产生多条用户操作日志，根据历史统计数据来可以看到，平均每个问题单大约会产生8条操作日志，我们预留一部分空间，假设每个问题单平均产生约10条用户操作日志。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果系统设计使用年限5年，那么问题单数据量大约为 &lt;/span&gt;&lt;span&gt;5年 * 365天/年 * 8w/天 = 1.46亿&lt;/span&gt;&lt;span&gt;，那么估算出的表数量如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;如果需要分库，那么分多少库合适？&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分库的时候除了要考虑平时的业务峰值读写QPS外，还要考虑到诸如双11大促期间可能达到的峰值，需要提前做好预估。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据我们的实际业务场景，问题单的数据查询来源主要来自于阿里客服小蜜首页。因此，可以根据历史QPS、RT等数据评估，假设我们只需要3500数据库连接数，如果单库可以承担最高1000个数据库连接，那么我们就可以拆分成4个库。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  如何对数据进行切分？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据行业惯例，通常按照 水平切分、垂直切分 两种方式进行切分，当然，有些复杂业务场景也可能选择两者结合的方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）水平切分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是一种横向按业务维度切分的方式，比如常见的按会员维度切分，根据一定的规则把不同的会员相关的数据散落在不同的库表中。由于我们的业务场景决定都是从会员视角进行数据读写，所以，我们就选择按照水平方式进行数据库切分。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）垂直切分&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;垂直切分可以简单理解为，把一张表的不同字段拆分到不同的表中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如：假设有个小型电商业务，把一个订单相关的商品信息、买卖家信息、支付信息都放在一张大表里。可以考虑通过垂直切分的方式，把商品信息、买家信息、卖家信息、支付信息都单独拆分成独立的表，并通过订单号跟订单基本信息关联起来。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;也有一种情况，如果一张表有10个字段，其中只有3个字段需要频繁修改，那么就可以考虑把这3个字段拆分到子表。避免在修改这3个数据时，影响到其余7个字段的查询行锁定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  分库分表之后带来的新问题&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  分库分表后，如何让数据均匀散落在各个分库分表内？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，当热点事件出现后，怎么避免热点数据集中存取到某个特定库/表，造成各分库分表读写压力不均的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，细思之下可以发现这个问题其实跟负载均衡的问题很相似，所以，我们可以去借鉴下负载均衡的解法来解决。我们常见的负责均衡算法如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.527756059421423&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKZHuDktkFpbWzxwmCdCsJgE2AQzPBShG7qMRB2OeDzm1tU59icoZxCdyvMrzziagEK6cLmWxOylKoA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1279&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们的选择：基于 一致性Hash算法 裁剪，相较于一致性Hash算法，我们裁剪后的算法&lt;/span&gt;&lt;span&gt;主要区别在以下几点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）Hash环节点数量的不同&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一致性Hash有 &lt;/span&gt;&lt;span&gt;2^32-1&lt;/span&gt;&lt;span&gt; 个节点，考虑到我们按照buyerId切分，而且buyerId基数本就很庞大，整体已经具备一定的均匀度，所以，我们把Hash环的数量降低到4096个；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）DB索引算法的不同&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;一致性Hash通过类似 &lt;/span&gt;&lt;span&gt;hash(DB的IP) % 2^32&lt;/span&gt;&lt;span&gt; 公式计算DB在Hash环的位置。如果DB数量较少，需要通过增加虚拟节点来解决Hash环偏斜问题，而且DB的位置可能会随着IP的变动而变化，尤其是在云环境下。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;数据均匀分布到Hash环的问题，经过之前的判断，我们可以通过  &lt;/span&gt;&lt;span&gt;Math.abs(buyerId.hashCode()) % 4096&lt;/span&gt;&lt;span&gt; 计算定位到Hash环位置，那么剩下的问题就是让DB也均匀分布到这个Hash环上即可。由于我们都是使用阿里的TDDL中间件，只需要通过逻辑上的分库索引号定位DB，因此，我们把分库DB均分到这个Hash环上即可，如果是hash环有4096个环节，拆分4库的话，那么4个库分别位于第1、1025、2049、3073个节点上。分库的索引定位可通过 &lt;/span&gt;&lt;span&gt;(Math.abs(buyerId.hashCode()) % 4096) / (4096 / DB_COUNT)&lt;/span&gt;&lt;span&gt; 这个公式计算得出。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分库索引的Java伪代码实现如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; final &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; DB_COUNT = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;indexDbByBuyerId&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long buyerId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (Math.&lt;span class=&quot;code-snippet__built_in&quot;&gt;abs&lt;/span&gt;(buyerId.hashCode()) % &lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;) / (&lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt; / DB_COUNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  分库分表环境下，如何解决分库后主键ID的唯一性问题？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在单库环境下，我们的问题单主表的ID采用的MySQL自增的方式。但是，分库之后如果还继续使用数据库自增的方式，就很容易出现各门口的主键ID重复问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于这种情况，有很多种解决方案，比如采用UUID的方式，不过UUID太长，查询性能太差，占用空间也大，而且主键的类型也变了，也不利于应用平滑迁移。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实，我们也可以对ID继续拆分，比如对ID进行分段，不同的库表使用不同的ID段，但也会产生新的问题，这个ID段要多长才合适？如果ID段分配完了，那可能会占用第二个库的ID段，产生ID不唯一问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;但是，如果我们让所有的分库使用的ID段按照等差数列进行分隔，每次ID段用完之后，再按照固定的步长比递增的话，那是不是就可以解决这个问题了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，像下面这样，假设每次分配的ID间隔为1000，也就是步长1000，那么每次分配的ID段起止索引则可以按照下面的公式计算得出：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;X &lt;span class=&quot;code-snippet__bullet&quot;&gt;* 步长 + (Y-1) *&lt;/span&gt; (库数量 * 步长)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;markdown&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;X &lt;span class=&quot;code-snippet__bullet&quot;&gt;* 步长 + (Y-1) *&lt;/span&gt; (库数量 * 步长) + (1000 -1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果是分4库，那么最终分配的ID段就会是下面这个样子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2547945205479452&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKZHuDktkFpbWzxwmCdCsJgHrKDDxbJkpVllz74uDN5m6VT0Pork7Vupkjkg6tTwKgY6gRrwBq68w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1095&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们的问题单库采用的就是这种先对ID分段，再按固定步长递增的方式。这也是TDDL官方提供的解决方案。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，实际场景下，通常为了分析排查问题方便，往往会在ID中增加一些额外信息，比如我们自己的问题单ID就包含了日期、版本、分库索引等信息。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;问题单ID生成Java伪代码参考：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; lombok.Setter;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.lang3.time.DateFormatUtils;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Setter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ProblemOrdIdBuilder&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; DB_COUNT = &lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;final&lt;/span&gt; String DATE_FORMATTER = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;yyMMdd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String version = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;01&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; buyerId;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; timeInMills;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; seqNum;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Long &lt;span class=&quot;code-snippet__title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; dbIndex = indexDbByBuyerId(buyerId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        StringBuilder pid = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; StringBuilder(&lt;span class=&quot;code-snippet__number&quot;&gt;18&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .append(DateFormatUtils.format(timeInMills, DATE_FORMATTER))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .append(version)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .append(String.format(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%02d&quot;&lt;/span&gt;, dbIndex))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            .append(String.format(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;%08d&quot;&lt;/span&gt;, seqNum % &lt;span class=&quot;code-snippet__number&quot;&gt;10000000&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; Long.valueOf(pid.toString());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     * &lt;span class=&quot;code-snippet__doctag&quot;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;indexDbByBuyerId&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Long buyerId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (Math.abs(buyerId.hashCode()) % &lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt;) / (&lt;span class=&quot;code-snippet__number&quot;&gt;4096&lt;/span&gt; / DB_COUNT);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  分库分表环境下，事务问题怎么解决？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于分布式环境下，一个事务可能跨多个分库，所以，处理起来相对复杂。目前常见的有2种解决方案：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）使用分布式事务&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）由应用程序+数据库共同控制&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对上面2种分布式事务解决方案，我们该如何选择？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先，没有万能的解决方案，只有适合自己的方案。那就先看看我们的业务中，事务的使用场景有哪些吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论是来咨询问题的会员，还是为会员解决问题的客服小二，亦或者从第三方系统同步相关数据，主要有2个核心动作：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于问题单数据、操作日志都是分开查询，所以，不涉及分布式关联查询场景，这个可以忽略不考虑。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么就剩下用户提交数据场景了，可能会同时写入问题单以及操作日志数据。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;既然使用场景确定了，那么可以选择事务解决方案了。虽然分布式事务实现简单，但这个简单是因为中间件帮我们解决了它本身的复杂性。复杂性越高，必然会带来一定的性能损耗。而且，目前大部分应用都是基于SpringBoot开发，默认使用的都是内嵌tomcat容器，不像IBM提供的WebSphere Application Server、Oracle的WebLogic这些重量级应用服务器，都提供了内置的分布式事务管理器。因此，如果我们要接入，必然要自己引入额外的分布式事务管理器，这个接入成本就更高了。所以，这种方案就暂不考虑了。那么，就只能自己想办法把大事务切分成单库可以解决的小事务了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，现在问题就成了，如何让同一个会员的问题单数据和这个问题单相关的操作日志数据写入到同一个分库中。其实，解决方案也比较简单，由于都是使用会员ID做切分，那么使用相同的分库路由规则即可。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，我来看下最终的TDDL分库分表规则配置：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;xml&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;&amp;lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;vtabroot&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.taobao.tddl.interact.rule.VirtualTableRoot&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;init-method&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;init&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dbType&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;MYSQL&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;defaultDbIndex&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PROBLEM_0000_GROUP&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tableRules&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_ord&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value-ref&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_ord&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_operate_log&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value-ref&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_operate_log&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- 问题(诉求)单表 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_ord&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.taobao.tddl.interact.rule.TableRule&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dbNamePattern&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PROBLEM_{0000}_GROUP&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tbNamePattern&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_ord_{0000}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dbRuleArray&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;((Math.abs(#buyer_id,1,4#.hashCode()) % 4096).intdiv(1024))&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tbRuleArray&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &amp;lt;![CDATA[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            def hashCode = Math.abs(#buyer_id,1,32#.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int dbIndex = ((hashCode % 4096).intdiv(1024)) as int;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableCountPerDb = 32 / 4;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndexStart = dbIndex * tableCountPerDb;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndexOffset = (hashCode % tableCountPerDb) as int;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndex = tableIndexStart + tableIndexOffset;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return tableIndex;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          ]]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;allowFullTableScan&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- 问题操作日志表 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_operate_log&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;com.taobao.tddl.interact.rule.TableRule&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dbNamePattern&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;PROBLEM_{0000}_GROUP&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tbNamePattern&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;problem_operate_log_{0000}&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- 【#buyer_id,1,4#.hashCode()】 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__comment&quot;&gt;&amp;lt;!-- buyer_id 代表分片字段；1代表分库步长；4代表一共4个分库，当执行全表扫描时会用到 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;dbRuleArray&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;((Math.abs(#buyer_id,1,4#.hashCode()) % 4096).intdiv(1024))&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;tbRuleArray&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          &amp;lt;![CDATA[&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            def hashCode = Math.abs(#buyer_id,1,512#.hashCode());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int dbIndex = ((hashCode % 4096).intdiv(1024)) as int;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableCountPerDb = 512 / 4;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndexStart = dbIndex * tableCountPerDb;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndexOffset = (hashCode % tableCountPerDb) as int;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            int tableIndex = tableIndexStart + tableIndexOffset;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            return tableIndex;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;          ]]&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;&lt;span class=&quot;code-snippet__name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;allowFullTableScan&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__tag&quot;&gt;&amp;lt;/&lt;span class=&quot;code-snippet__name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4  分库分表后，历史数据如何平滑迁移？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据库复制方案，阿里云上面也开放了以前阿里内部使用的数据库复制、迁移方案《数据传输服务(Data Transmission Service)》[1]，详情可咨询阿里云客服或者阿里云数据库专家。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分库切换发布流程可选择停机、不停机发布两种：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（1）如果选择停机发布&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（2）如果选择不停机发布话，流程会略微复杂点&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5  TDDL配置分库分表路由时的注意事项&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于阿里的TDDL中间件使用Groovy脚本计算分库分表路由，而&lt;span&gt;G&lt;/span&gt;&lt;span&gt;roovy&lt;/span&gt;的 &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; 运算符或者 &lt;/span&gt;&lt;span&gt;/=&lt;/span&gt;&lt;span&gt; 运算符可能会产生一个double类型的结果，并非像Java那样得出一个整数，因此需要使用 &lt;/span&gt;&lt;span&gt;x.intdiv(y)&lt;/span&gt;&lt;span&gt; 函数做整除运算。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在 Java 中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;System.out.&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; / &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 结果 = 1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__comment&quot;&gt;// 在 Groovy 中&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt; / &lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;);       &lt;span class=&quot;code-snippet__comment&quot;&gt;// 结果 = 1.6666666667          &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;println&lt;/span&gt; (&lt;span class=&quot;code-snippet__number&quot;&gt;5.i&lt;/span&gt;ntdiv(&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)); &lt;span class=&quot;code-snippet__comment&quot;&gt;// 结果 = 1（Groovy整除正确用法）&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;详情可查看Groovy官方说明《The case of the division operator》：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32242990654205606&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKZHuDktkFpbWzxwmCdCsJgJuQcOsJno2NNPr3y8xPibapt009CmofEQcAzmNUD95ral1V7Dom3ebA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1498&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;四  分库分表文中案例图示&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.008729388942774&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKZHuDktkFpbWzxwmCdCsJgL4z1cibCqKwDW0ZLeYH0ZKo9Kh9QfXQBPicNz2qZmYNpE1MCB2m9lpTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;招聘&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎加入 新零售技术事业群 CCO技术部，CCO技术部旨在建立更高的客户服务标准，让客户在阿里享受到最“爽”的服务，为阿里经济体提供一站式服务解决方案。通过我们的产品、数据智能、技术去提升阿里集团服务客户的能力，提升全网客户体验。同时我们的产品通过阿里云、钉钉侧，赋能企业和商家以提升服务数字化能力，用服务改变未来。我们期待你的加入！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;社招岗位：Java技术专&lt;/span&gt;&lt;span&gt;家/Java高级开发工程师/前端开发工程师&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;校招岗位：Java开发工程师、前端开发工程师、算法工程师、测试工程师&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面向2022届应届毕业生（毕业时间：2021年11月~2022年10月）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎联系我们：binga.wbg@alibaba-inc.com&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;参考资料&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;[1]https://baijiahao.baidu.com/s?id=1622441635115622194&amp;amp;wfr=spider&amp;amp;for=pc&lt;/p&gt;&lt;p&gt;[2]http://www.zsythink.net/archives/1182&lt;/p&gt;&lt;p&gt;[3]https://www.aliyun.com/product/dts&lt;/p&gt;&lt;p&gt;[4]https://docs.groovy-lang.org/latest/html/documentation/core-syntax.html#integer_division&lt;/p&gt;&lt;p&gt;[5]https://github.com/alibaba/tb_tddl&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;电子书&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;免费下载&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《Apache RocketMQ 源码解析》&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;《RocketMQ 技术内幕》作者推出，从RocketMQ ACL、RocketMQ消息轨迹、RocketMQ多副本等多个方面&lt;span&gt;深入解析，&lt;/span&gt;带你彻底掌握Apache RocketMQ。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点击“阅&lt;/span&gt;&lt;span&gt;读&lt;/span&gt;&lt;span&gt;原文”&lt;/span&gt;&lt;span&gt;，立即下&lt;/span&gt;&lt;span&gt;载吧~&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>