<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>1b241b77409b0f9aad775cb49326e1ad</guid>
<title>2022 年来了！抓紧啦！</title>
<link>https://toutiao.io/k/rf8ezjy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a57f9aa6c823dc2a2bf668c6f3038fe9</guid>
<title>分布式任务队列Celery的实践</title>
<link>https://toutiao.io/k/td1pjzw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article__content&quot; itemprop=&quot;articleBody&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://chaycao-1302020836.cos.ap-shenzhen-fsi.myqcloud.com/blog/img/celery-logo.png&quot; alt=&quot;celery-logo&quot;/&gt;&lt;/p&gt;

&lt;p&gt;笔者在近期工作中有接触到 Celery，这是一个开源的分布式任务队列（Distributed Task Queue），在 Github 上现有 18k star，主要可以用于实现应用中的异步任务和定时任务，虽然是用 Python 编写，但协议可以用任何语言实现，现已有 gocelery、nodecelery 和 celery-php 等。&lt;/p&gt;

&lt;p&gt;笔者写下此文总结对 Celery 的了解和在工作中的使用。本文的大概内容如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;任务队列是什么；&lt;/li&gt;
  &lt;li&gt;Celery 做了什么；&lt;/li&gt;
  &lt;li&gt;Celery 在工作中的实践。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;任务队列是什么&quot;&gt;任务队列是什么&lt;/h1&gt;

&lt;p&gt;“消息队列（Message Queue）”，后端同学应该都有了解，常见的有 RabbitMQ、RocketMQ、Kafka。而“任务队列（Task Queue）”，笔者在接触 Celery 之前是没有听过的。任务队列是什么，而任务队列和消息队列，这两者之间有何关系。带着问题，先看看 Celery 的架构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://chaycao-1302020836.cos.ap-shenzhen-fsi.myqcloud.com/blog/img/Celery.png&quot; alt=&quot;Celery&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在 Celery 的架构中，可看出由多台 Server 发起异步任务（Async Task），发送任务到 Broker 的队列中，其中的 Celery Beat 进程可负责发起定时任务。当 Task 到达 Broker 后，会将其分发给相应的 Celery Worker 进行处理。当 Task 处理完成后，其结果存储至 Backend。&lt;/p&gt;

&lt;p&gt;在上述过程中的 Broker 和 Backend，Celery 没有实现，而是使用了现有开源实现，例如 RabbitMQ 作为 Broker 提供消息队列服务，Redis 作为 Backend 提供结果存储服务。Celery 就像是抽象了消息队列架构中 Producer、Consumer 的实现，将消息队列中基本单位“消息”抽象成了任务队列中的“任务”，并将异步、定时任务的发起和结果存储等操作进行了封装，让开发者可以忽略 AMQP、RabbitMQ 等实现细节，为开发带来便利。&lt;/p&gt;

&lt;p&gt;综上所述，&lt;strong&gt;Celery 作为任务队列是基于消息队列的进一步封装，其实现依赖消息队列&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;接下来，通过一个简单的应用来具体了解 Celery 做了什么。&lt;/p&gt;

&lt;h1 id=&quot;celery-做了什么&quot;&gt;Celery 做了什么&lt;/h1&gt;

&lt;p&gt;在应用开发中，为了保证响应速度，耗时且不影响流程的操作通常被做异步处理。例如在用户注册的处理过程中，通常会异步发送邮件通知用户，下面看看 Celery 是如何实现该异步操作。&lt;/p&gt;

&lt;p&gt;在 task.py 中声明了发送邮件的方法 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send_mail&lt;/code&gt;，并为其加上 Celery 提供的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@app.task&lt;/code&gt; 装饰器。通过该装饰器，可以将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send_mail&lt;/code&gt; 函数变成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;celery.app.task:Task&lt;/code&gt; 实例对象。而该 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; 实例可提供了两个核心功能&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;将消息发送给队列；&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;声明 Worker 接收到消息后需要执行的具体函数。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;celery&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;tasks&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;amqp://guest@localhost//&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;send mail to &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; 已经定义完成，若要发起异步任务，可通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; 方法，该方法会将消息发送至队列，例如在用户注册完成时，发起发邮件的异步任务：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# user.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_mail&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1. 插入记录到数据库&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2. 通过celery异步发邮件&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chaycao@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3. 告诉用户注册成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;__main__&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行以上程序后，消息已经发送至 RabbitMQ 的队列中，可观察到其消息格式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://chaycao-1302020836.cos.ap-shenzhen-fsi.myqcloud.com/blog/img/Task%20in%20RabbitMQ.png&quot; alt=&quot;Task in RabbitMQ&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可看出 Celery 封装后的消息包含了 task 标识和运行参数等内容。&lt;/p&gt;

&lt;p&gt;接着，启动 Worker 消费 RabbitMQ 中的消息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;celery &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; tasks worker &lt;span class=&quot;nt&quot;&gt;--loglevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Worker 启动后，可以看到下面打印信息：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://chaycao-1302020836.cos.ap-shenzhen-fsi.myqcloud.com/blog/img/Worker%20Start.png&quot; alt=&quot;Worker Start&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先是 Worker 的配置信息，然后是 Worker 所执行的 Task 列表，接着是从 RabbitMQ 中成功获取消息并执行相应的 Task。&lt;/p&gt;

&lt;p&gt;通过以上示例，可以进一步明白 Celery 作为任务队列框架所做的工作，而“分布式任务队列”中的”分布式“指的则是 Producer、Consumer 可以有多个，即多个进程向 Broker 发送任务，多个 Worker 从 Broker 中获取 Task 并执行。&lt;/p&gt;

&lt;p&gt;以上只是一个简单的示例，接着再看下笔者在工作中所接触到的关于 Celery 使用的一些实践经验。&lt;/p&gt;

&lt;h1 id=&quot;celery-在工作中的实践&quot;&gt;Celery 在工作中的实践&lt;/h1&gt;

&lt;h2 id=&quot;根据业务场景划分队列&quot;&gt;根据业务场景划分队列&lt;/h2&gt;

&lt;p&gt;在笔者所工作的项目中，Celery 用于处理下单、解析轨迹、推送上游等异步任务和定时任务。根据每个 Task 的业务场景，可为其指定对应的队列，例如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_CELERY_ROUTES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.pending_create&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;create&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.multi_create&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;create&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.pull_tracking&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;pull&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.pull_branch&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;pull&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.push_tracking&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;push&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.push_weight&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;push&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CELERY_ROUTES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEFAULT_CELERY_ROUTES&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据业务场景，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEFAULT_CELERY_ROUTES&lt;/code&gt; 配置中指定 6 个 Task 对应的 Queue，共有 3 个队列 create、pull、push，并将该路由规则加入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CELERY_ROUTES&lt;/code&gt; 中以生效。这样设计的目的是为了不同场景彼此之间互不影响，例如解析任务阻塞不应该影响下单任务。&lt;/p&gt;

&lt;h2 id=&quot;进一步划分队列&quot;&gt;进一步划分队列&lt;/h2&gt;

&lt;p&gt;在根据业务场景粗略划分后，对于某个场景，可能需要更细致的划分，例如在向上游推送时，为了避免一个上游的阻塞影响向其他上游推送，需要做到不同上游彼此之间互不影响。所以需要针对不同上游使用不同队列，例如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CLIENT_CELERY_ROUTES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# {0} 为 client 的占位符，在 ClientRouter 中进行格式化
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.push_tracking_retry&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;push_tracking_retry_{0}&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;celery_task.push_weight_retry&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;push_weight_retry_{0}&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLIENT_CELERY_ROUTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;client_id&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 根据 client_id 获取队列名
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;queue_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLIENT_CELERY_ROUTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CELERY_ROUTES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#x27;ClientRouter&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEFAULT_CELERY_ROUTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLIENT_CELERY_ROUTES&lt;/code&gt; 中指定了需要根据 Client 隔离队列的 Task 和其对应的 Queue 名称格式，队列名中含有一个占位符，为的是根据不同 Client 得到不同的队列名。&lt;/p&gt;

&lt;p&gt;接着实现了一个路由器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClientRouter&lt;/code&gt; ，其中定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;router_for_task&lt;/code&gt; 方法，其作用是为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task&lt;/code&gt; 指定对应的队列名。可看出其中的逻辑是如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;task&lt;/code&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLIENT_CELERY_ROUTES&lt;/code&gt; 中，将会用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kwargs&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_id&lt;/code&gt; 格式化队列名，得到最终发送消息的队列名，达到根据入参 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_id&lt;/code&gt; 来决定具体使用的队列，从而起到隔离不同 Client 使用不同队列的效果。&lt;/p&gt;

&lt;p&gt;除了在 Client 的维度上划分，若需要在其他维度进一步划分队列以达到隔离的效果，也可参考该方法来设计路由规则。&lt;/p&gt;

&lt;h2 id=&quot;动态队列&quot;&gt;动态队列&lt;/h2&gt;

&lt;p&gt;再来说说动态队列，其本质是预备队列，其目的是为了在线上环境减轻某些队列消息堆积的压力，起到快速支援的作用。通过配置来定义动态队列需要支援哪些队列，例如当 push 队列的压力较大，可配置 json 如下，将 push_tracking 和 push_weight 两个 Task 路由到预备的动态队列中。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;celery_dynamic_router&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;配置&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;celery_task.push_tracking&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dynamic_queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dynamic_percentage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;celery_task.push_weight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dynamic_queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dynamic_percentage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述配置的作用是将 70% 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;celery_task.push_tracking&lt;/code&gt; Task 路由到动态队列 1、2 上，70% 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;celery_task.push_weight&lt;/code&gt; Task 路由到动态队列 3、4 上。&lt;/p&gt;

&lt;p&gt;动态队列的路由器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicRouter&lt;/code&gt; 大致实现如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;route_for_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 获取配置
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;task_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_conf_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;celery_dynamic_router&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# task如果没在配置中，则直接返回
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 获取task对应的动态队列配置
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;dynamic_queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;dynamic_queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dynamic_percentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;dynamic_percentage&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 将一定比例的task路由到动态队列中
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamic_percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# 决定使用哪个动态队列
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;queue_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;router_load_balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dynamic_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;get_router| task_name:%s, queue:%s&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;queue&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;动态配置的定时任务&quot;&gt;动态配置的定时任务&lt;/h2&gt;

&lt;p&gt;前文提到 Celery 不仅能实现异步任务，还能通过 Celery Beat 实现定时任务，首先看一个例子：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;celery.schedules&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crontab&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beat_schedule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 每30秒发送一次邮件
&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;&#x27;sendmail-every-30-seconds&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#x27;task&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;asks.send_mail&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#x27;schedule&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;30.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#x27;args&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#x27;chaycao@gmail.com&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成上述配置后，执行 Celery Beat 命令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://chaycao-1302020836.cos.ap-shenzhen-fsi.myqcloud.com/blog/img/image-20211029225456294.png&quot; alt=&quot;celery beat&quot;/&gt;&lt;/p&gt;

&lt;p&gt;即根据配置每 30 秒执行一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send_email&lt;/code&gt; 任务。&lt;/p&gt;

&lt;p&gt;上述示例是在代码中配置定时任务。而在笔者的工作中使用了 djcelery 提供的数据库调度模型，通过结合 django 提供的 ORM 功能来动态设置，更为方便。下面叙述如何实现，首先在 Celery 配置中新增：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CELERYBEAT_SCHEDULER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#x27;djcelery.schedulers.DatabaseScheduler&#x27;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatabaseScheduler&lt;/code&gt;，然后再生成定时任务的配置表：&lt;/p&gt;



&lt;p&gt;可以看到数据库中多出了以下表：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| celery_taskmeta            |
| celery_tasksetmeta         |
| djcelery_crontabschedule   |
| djcelery_intervalschedule  |
| djcelery_periodictask      |
| djcelery_periodictasks     |
| djcelery_taskstate         |
| djcelery_workerstate       |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成以上操作，最后只用执行 Celery Beat 命令，则会去数据库中读取配置发起定时任务。这样的好处是可以通过修改数据库中的记录来实现动态配置定时任务，例如调整任务的周期或者参数。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以上便是笔者在工作中接触到 Celery 所收获的内容，如果有需要实现异步任务、定时任务的场景，可以考虑使用 Celery。&lt;/p&gt;

&lt;p&gt;我是草捏子，一只热爱技术和生活的草鱼，我们下期见！&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://newbedev.com/message-queue-vs-task-queue-difference&quot;&gt;Message Queue vs Task Queue difference&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844903689103081480&quot;&gt;高性能异步框架Celery入坑指南&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jmilkfan-fanguiju/p/10589779.html&quot;&gt;分布式任务队列 Celery—深入 Task&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1624006babf7312843857fb976eb1bce</guid>
<title>生产故障｜Kafka消息发送延迟达到几十秒的罪魁祸首竟然是...</title>
<link>https://toutiao.io/k/u0sbbi3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、故障现象&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;笔者在双十一期间负责的kafka集群的响应时间飙升到了10～30s，严重影响消息的写入。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29262926292629265&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1micUhAAXrNKiblFrahnR6GzFoZJhPJxiar1TzxNnic5UbgpcQyXWelWmaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;909&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过对日志分析发现存在大面积分区Leader选举，__consumer_offsets主题的分区也大量进行分区Leader选举，从而导致消息发送几乎停止，大量消费组触发重平衡，整个集群接近瘫痪，&lt;strong&gt;最终确定了根因：Broker节点与Zookeeper会话超时，触发大量分区重新选举。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;本文借此故障，与大家一起剖析一下Zookeeper在Kafka中起了哪些作用，以及确定“罪魁祸首”的过程，希望给大家排查问题能带来一定的启发。&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、Zookeeper在Kafka中具有举足轻重的作用&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在正式进入故障分析之前，我们首先介绍一下Zookeeper在kafka架构设计中所起的角色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;核心理念：kafka的设计者对待Zookeeper的使用是非常谨慎的，即需要依靠Zookeeper进行控制器选举，Broker节点故障实时发现，但又尽量降低对Zookeeper的依赖&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于Zookeeper进行的程序开发，我们一般可以通过查看zookeeper中的目录布局，可以窥探出哪些功能是依靠Zookeeper完成，Kafka在Zookeeper中的存储目录结构如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26416819012797077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1dEz9YcEyJOEmWQttfkLAfqVRKTic4sPg2pOnCV8hZ1WGic7mXSlYr2Tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;5470&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述各个节点，其背后都关联着Kafka一个核心工作机制，大家可以顺藤摸瓜进行探究，本文需要重点介绍/brokers这个目录的布局与作用，目录详情如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40816326530612246&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1soBYbtMaSCEoPmFvb2jhcJz4B7XWdicklbj9CNCDiaStlqKVJKM6JnGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1323&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;/controller
Kafka控制器的信息，Kafka控制器的选举依靠zookeeper。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;/brokers/ids/{id}
在持久节点/brokers/ids下创建众多的临时节点，每一个节点，表示一个Broker节点，节点的内容存储了Broker的基本信息，例如端口、版本、监听地址等。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;/brokers/topics/{topic}/partitions/{partition}/state&lt;/p&gt;&lt;p&gt;在kafka2.8版本一下，Kafka中topic中的路由信息最终持久化在zookeeper中，每一个broker节点启动后会在内存中缓存一份数据。/brokers节点每一个子节点表示一个具体的主题，主题的元数据主要包括分区的个数与每一个分区的状态信息。每一个分区的状态信息主要包括：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;controller_epoch
当前集群控制器的epoch，表示controller选举的次数，我们可以理解为controller的“版本号”。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;leader
当前分区Leader所在的broker id。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Leader_epoch
分区的leader_epoch，表示分区Leader选举的次数，从0开始，每发生一次分区leader选举该值就会加一，kafka通过引入leader epoch机制解决低版本依靠依赖水位线表示副本进度可能造成的数据丢失与数据不一致问题，这个将在后续文章中深入剖析。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;isr
分区的isr集合。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;version
存储状态分区状态数据结构的版本号，这个字段大家可以忽略&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Zookeeper中有一种同样的“设计模式”，就是可以通过在zookeeper中&lt;strong&gt;创建临时节点+事件监听机制&lt;/strong&gt;，从而实现数据的实时动态感知，以/brokers/ids为例进行阐述：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka broker进程启动时会向zookeeper创建一个临时节点/brokers/ids/{id}，其中id为broker的编号&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka Broker进程停止后，创建的临时节点在broker与zookeeper的会话超时后会被自动删除，产生节点删除事件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Kafka controller 会自动监听/brokers/ids 目录的节点新增与删除事件，一旦broker下线、上线，controller都会实时感知，从而采取必要处理。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上面的初步介绍，Kafka对zookeeper的依赖还是非常大的，特别是Kafka控制器的选举、broker节点的存活状态等都依赖zookeeper。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 控制器可以看出是整个kafka集群的“大脑”，如果它出现异动，其影响范围之广，影响程度之大可想而知，接下来的故障分析会给出更直观的展现。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨提示：本文主要是一个故障分析过程，后续关于kafka控制器如何选举、leader_epoch副本同步机制等会在《Kafka原理与实战》专栏中一一介绍，敬请关注。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、问题分析&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一看到消息发送响应时间长，我的第一反应是查看线程栈，是不是有锁阻塞，但查看线程堆栈发现Kafka用于处理请求的线程池大部分都阻塞在获取任务处，表明“无活可干”状态：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13798614810868406&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj16ynLh8DRU95JAh2wOxDEBWJA2pmcFTbaMvqekOU3epRwv0MvUOo79Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1877&quot;/&gt;&lt;span&gt;说明客户端端消息发送请求都没有到达Kafka的排队队列，并且专门用于处理网络读写的线程池也很空闲，那又是为什么呢？&lt;/span&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息发送端延迟超级高，但服务端线程又极度空闲，有点诡异？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续查看服务端日志，发现了大量主题(甚至连系统主题__consumer_offsets主题也发生了Leader选举)，日志如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12244897959183673&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1QXmIxosgNtiabnHpsYNqapGrriaFX0bic2lhbibnqPattzGLXVJNh4w6OQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1617&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心日志：&lt;strong&gt;start at Leader Epoch&lt;/strong&gt; 大量分区在进行Leader选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka中中只有Leader分区能处理读、写请求,follower分区只是从leader分区复制数据，在Leader节点宕机后参与leader选举，故分区在进行Leader选举时无法处理客户端的写入请求，而发送端又有重试机制，故消息发送延迟很大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;那到底在什么情况下会触发大量主题进行重新选举呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们找到当前集群的Controler节点，查看state-change.log中，发现如下日志：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09462759462759462&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1ZEsAicIWRwCQ7iae8CiaXZRoRbq0YabcCFH9sbEYYJia4GEcZQqy4Ju40A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1638&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出现了大量分区的状态从OnlinePartition变更为OfflinePartition。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;温馨提示：根据日志我们可以去查看源码，找到输出这些方法的调用链，就可以顺藤摸瓜去找针对性的日志。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;继续查看Controler节点下的controller.log中发现关键日志：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.06624383368569416&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1XtGhl5qV1cIp9I2udWSNIT151nWeVVP32ZSDDsukoalyTiaic4VMibdXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1419&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心日志解读：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;[Controller id=1] Broker failure callback for 8 (kafka.controller.KafkaController)
控制器将节点8从集群的在线中移除，控制器为什么会将节点8移除呢？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来顺藤摸瓜，去看一下节点8上的日志如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.05341246290801187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1nAeodRjhp6hWibdYsLGvKW6vlI2miaBqNFqyOwXd5EjrMvNMqZ0BG2xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1348&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心日志解读：原来broker与zookeeper的会话超时，导致临时节点被移除。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先不探究会话为什么会超时，我们先来看一下会话超时，会给Kafka集群带来什么严重影响。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;/brokers/ids下任意一个节点被删除，Kafka控制器都能及时得到，并执行对应的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里需要分两种情况考虑。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 普通Broker节点被移除&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;处理入口为：KafkaController的onBrokerFailure方法，代码详情如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2721003134796238&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1RHrx8GEBc44bIU4U65xzme4B8P3qWescr1NKqXuoibjPp90iaDDsLibUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1595&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个普通的broker在zk中被移除，Kafka控制器会将该节点上分配的所有分区的状态从OnlinePartition变更为OfflinePartition，从而触发分区的重新选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;扩展知识点&lt;/strong&gt;：&lt;strong&gt;__consumer_offsets分区如果进行Leader重新选举，大面积的消费组会触发重平衡&lt;/strong&gt;，背后的机制：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费组需要在Broker端进行组协调器选举，选举算法如下：消费组的名称的hashcode与主题 __ consumer_offsets的队列总数取模，取余数，映射成 __consumer_offsets 分区，该分区的leader在哪个broker节点，该节点则会充当消费组的组协调器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一旦该分区的Leader发生变化，对应的消费组必须重新选举新的组协调器，从而触发消费组的&lt;strong&gt;重平衡&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 Controller节点被移除&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果zookeeper中移除的broker id 为 Kafka controller，其影响会更大，主要的入口如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.23847695390781562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1cw3QYO8Z6iaZuUTONuuiaicGMU59Che3ww2KDNv2MJAncsicKc03O7pS6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;998&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是controller节点会话超时,临时节点/controller节点会被删除，从而会触发Kafka controller选举，最终所有的broker节点都会收到节点/controller的删除、新增或节点数据变化的通知，KafkaController的onControllerFailover方法会被执行，与会将于zookeeper相关的事件监听器重新注册、分区状态机、副本状态机都会停止并重新启动，各个分区会触发自动leader分区选举。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;可以这样形容：一朝天子一朝臣，全部重新来过。&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 zookeeper会话超时根因排查&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看服务端日志，可以看到如下日志：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.1098556183301946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1RmGtU43JNwvoYiakxoL0c9viczWct5egjpkNVjH9LjRG7pb0HTRzicNmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1593&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;核心日志解读：Closed socket connection for client ... 表示连接被客户端主动关闭。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那为什么客户端会主动关闭心跳呢？心跳处理的套路就是客户端需要定时向服务端发送心跳包，服务端在指定时间内没有收到或处理心跳包，则会超时。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想一探究竟，唯一的办法：&lt;strong&gt;阅读源码&lt;/strong&gt; ，通过研读Zookeeper客户端源码，发现存在这样一个设计：客户端会把所有的请求先放入一个队列中，然后通过一个发送线程(SendThread)从队列中获取请求，发送到服务端，关键代码如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5435049019607843&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1G0KPeR8eTxeZyUtb3s5mKjjO9z3wqmbIb8nknzDeNHhEr7j6Cl902g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3264&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果存在大量的zk更新操作，心跳包可能会处理不及时，而在出现zookeeper session会话超时之前，集群在大面积ISR扩张与收缩，频繁更新zk，从而触发了客户端端心跳超时，这个问题也可以通过如下代码进行复现：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41779661016949154&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFuu2qnOJZhnGnTOETrnErj1iciawpQU074UyhL27pA6vYrvo0pjjsUGFHtXS0ZSbOa3E1xiasiaTnMy8Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1180&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过这波分析，由于zookeeper会话超时，导致大量分区重新选举，最终导致消息发送延迟很大，并且消费组大面积重平衡的根本原因就排查清楚了，本期分享就到此为止，我们下期见。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span data-raw-text=&quot;最&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2943&quot; class=&quot;character&quot;&gt;最&lt;/span&gt;&lt;span data-raw-text=&quot;后&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2944&quot; class=&quot;character&quot;&gt;后&lt;/span&gt;&lt;span data-raw-text=&quot;说&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2945&quot; class=&quot;character&quot;&gt;说&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2946&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;句&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2947&quot; class=&quot;character&quot;&gt;句&lt;/span&gt;&lt;span data-raw-text=&quot;(&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2948&quot; class=&quot;character&quot;&gt;(&lt;/span&gt;&lt;span data-raw-text=&quot;求&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2949&quot; class=&quot;character&quot;&gt;求&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2950&quot; class=&quot;character&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2951&quot; class=&quot;character&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2952&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;别&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2953&quot; class=&quot;character&quot;&gt;别&lt;/span&gt;&lt;span data-raw-text=&quot;白&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2954&quot; class=&quot;character&quot;&gt;白&lt;/span&gt;&lt;span data-raw-text=&quot;嫖&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2955&quot; class=&quot;character&quot;&gt;嫖&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2956&quot; class=&quot;character&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;)&quot; data-textnode-index-1641215183112=&quot;112&quot; data-index-1641215183112=&quot;2957&quot; class=&quot;character&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2958&quot; class=&quot;character&quot;&gt;如&lt;/span&gt;&lt;span data-raw-text=&quot;果&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2959&quot; class=&quot;character&quot;&gt;果&lt;/span&gt;&lt;span data-raw-text=&quot;这&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2960&quot; class=&quot;character&quot;&gt;这&lt;/span&gt;&lt;span data-raw-text=&quot;篇&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2961&quot; class=&quot;character&quot;&gt;篇&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2962&quot; class=&quot;character&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2963&quot; class=&quot;character&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;对&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2964&quot; class=&quot;character&quot;&gt;对&lt;/span&gt;&lt;span data-raw-text=&quot;您&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2965&quot; class=&quot;character&quot;&gt;您&lt;/span&gt;&lt;span data-raw-text=&quot;有&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2966&quot; class=&quot;character&quot;&gt;有&lt;/span&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2967&quot; class=&quot;character&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;帮&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2968&quot; class=&quot;character&quot;&gt;帮&lt;/span&gt;&lt;span data-raw-text=&quot;助&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2969&quot; class=&quot;character&quot;&gt;助&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2970&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;或&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2971&quot; class=&quot;character&quot;&gt;或&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2972&quot; class=&quot;character&quot;&gt;者&lt;/span&gt;&lt;span data-raw-text=&quot;有&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2973&quot; class=&quot;character&quot;&gt;有&lt;/span&gt;&lt;span data-raw-text=&quot;所&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2974&quot; class=&quot;character&quot;&gt;所&lt;/span&gt;&lt;span data-raw-text=&quot;启&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2975&quot; class=&quot;character&quot;&gt;启&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2976&quot; class=&quot;character&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2977&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;话&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2978&quot; class=&quot;character&quot;&gt;话&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2979&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;帮&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2980&quot; class=&quot;character&quot;&gt;帮&lt;/span&gt;&lt;span data-raw-text=&quot;忙&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2981&quot; class=&quot;character&quot;&gt;忙&lt;/span&gt;&lt;span data-raw-text=&quot;扫&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2982&quot; class=&quot;character&quot;&gt;扫&lt;/span&gt;&lt;span data-raw-text=&quot;描&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2983&quot; class=&quot;character&quot;&gt;描&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2984&quot; class=&quot;character&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2985&quot; class=&quot;character&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;二&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2986&quot; class=&quot;character&quot;&gt;二&lt;/span&gt;&lt;span data-raw-text=&quot;维&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2987&quot; class=&quot;character&quot;&gt;维&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2988&quot; class=&quot;character&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2989&quot; class=&quot;character&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2990&quot; class=&quot;character&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2991&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;下&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2992&quot; class=&quot;character&quot;&gt;下&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2993&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;您&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2994&quot; class=&quot;character&quot;&gt;您&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2995&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;支&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2996&quot; class=&quot;character&quot;&gt;支&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2997&quot; class=&quot;character&quot;&gt;持&lt;/span&gt;&lt;span data-raw-text=&quot;是&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2998&quot; class=&quot;character&quot;&gt;是&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;2999&quot; class=&quot;character&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;坚&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3000&quot; class=&quot;character&quot;&gt;坚&lt;/span&gt;&lt;span data-raw-text=&quot;持&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3001&quot; class=&quot;character&quot;&gt;持&lt;/span&gt;&lt;span data-raw-text=&quot;写&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3002&quot; class=&quot;character&quot;&gt;写&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3003&quot; class=&quot;character&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;最&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3004&quot; class=&quot;character&quot;&gt;最&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3005&quot; class=&quot;character&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3006&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;动&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3007&quot; class=&quot;character&quot;&gt;动&lt;/span&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3008&quot; class=&quot;character&quot;&gt;力&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;113&quot; data-index-1641215183112=&quot;3009&quot; class=&quot;character&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;求&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3010&quot; class=&quot;character&quot;&gt;求&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3011&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;键&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3012&quot; class=&quot;character&quot;&gt;键&lt;/span&gt;&lt;span data-raw-text=&quot;三&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3013&quot; class=&quot;character&quot;&gt;三&lt;/span&gt;&lt;span data-raw-text=&quot;连&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3014&quot; class=&quot;character&quot;&gt;连&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3015&quot; class=&quot;character&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3016&quot; class=&quot;character&quot;&gt;点&lt;/span&gt;&lt;span data-raw-text=&quot;赞&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3017&quot; class=&quot;character&quot;&gt;赞&lt;/span&gt;&lt;span data-raw-text=&quot;、&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3018&quot; class=&quot;character&quot;&gt;、&lt;/span&gt;&lt;span data-raw-text=&quot;转&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3019&quot; class=&quot;character&quot;&gt;转&lt;/span&gt;&lt;span data-raw-text=&quot;发&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3020&quot; class=&quot;character&quot;&gt;发&lt;/span&gt;&lt;span data-raw-text=&quot;、&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3021&quot; class=&quot;character&quot;&gt;、&lt;/span&gt;&lt;span data-raw-text=&quot;在&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3022&quot; class=&quot;character&quot;&gt;在&lt;/span&gt;&lt;span data-raw-text=&quot;看&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3023&quot; class=&quot;character&quot;&gt;看&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3024&quot; class=&quot;character&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIzNzgyMjYxOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Wkp2azia4QFvs5UnzjhzrS6h29QXbfK4I0GLibNP4Qlpt1ovSdmwfsoY7D4JYUZzkACtqe3wrKh6icG7oHUTMibJbA/0?wx_fmt=png&quot; data-nickname=&quot;中间件兴趣圈&quot; data-alias=&quot;dingwpmz_zjj&quot; data-signature=&quot;《RocketMQ技术内幕》作者维护，主打成体系剖析JAVA主流中间件架构与设计原理，为构建完备的互联网分布式架构体系而努力，助力突破职场瓶颈。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;关&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3025&quot; class=&quot;character&quot;&gt;关&lt;/span&gt;&lt;span data-raw-text=&quot;注&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3026&quot; class=&quot;character&quot;&gt;注&lt;/span&gt;&lt;span data-raw-text=&quot;公&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3027&quot; class=&quot;character&quot;&gt;公&lt;/span&gt;&lt;span data-raw-text=&quot;众&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3028&quot; class=&quot;character&quot;&gt;众&lt;/span&gt;&lt;span data-raw-text=&quot;号&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3029&quot; class=&quot;character&quot;&gt;号&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3030&quot; class=&quot;character&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3031&quot; class=&quot;character&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3032&quot; class=&quot;character&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3033&quot; class=&quot;character&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3034&quot; class=&quot;character&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3035&quot; class=&quot;character&quot;&gt;兴&lt;/span&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3036&quot; class=&quot;character&quot;&gt;趣&lt;/span&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3037&quot; class=&quot;character&quot;&gt;圈&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3038&quot; class=&quot;character&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3039&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;在&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3040&quot; class=&quot;character&quot;&gt;在&lt;/span&gt;&lt;span data-raw-text=&quot;公&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3041&quot; class=&quot;character&quot;&gt;公&lt;/span&gt;&lt;span data-raw-text=&quot;众&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3042&quot; class=&quot;character&quot;&gt;众&lt;/span&gt;&lt;span data-raw-text=&quot;号&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3043&quot; class=&quot;character&quot;&gt;号&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3044&quot; class=&quot;character&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3045&quot; class=&quot;character&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3046&quot; class=&quot;character&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3047&quot; class=&quot;character&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3048&quot; class=&quot;character&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;P&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3049&quot; class=&quot;character&quot;&gt;P&lt;/span&gt;&lt;span data-raw-text=&quot;D&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3050&quot; class=&quot;character&quot;&gt;D&lt;/span&gt;&lt;span data-raw-text=&quot;F&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3051&quot; class=&quot;character&quot;&gt;F&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3052&quot; class=&quot;character&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3053&quot; class=&quot;character&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3054&quot; class=&quot;character&quot;&gt;获&lt;/span&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3055&quot; class=&quot;character&quot;&gt;取&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3056&quot; class=&quot;character&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;量&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3057&quot; class=&quot;character&quot;&gt;量&lt;/span&gt;&lt;span data-raw-text=&quot;学&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3058&quot; class=&quot;character&quot;&gt;学&lt;/span&gt;&lt;span data-raw-text=&quot;习&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3059&quot; class=&quot;character&quot;&gt;习&lt;/span&gt;&lt;span data-raw-text=&quot;资&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3060&quot; class=&quot;character&quot;&gt;资&lt;/span&gt;&lt;span data-raw-text=&quot;料&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3061&quot; class=&quot;character&quot;&gt;料&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3062&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3063&quot; class=&quot;character&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3064&quot; class=&quot;character&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;「&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3065&quot; class=&quot;character&quot;&gt;「&lt;/span&gt;&lt;span data-raw-text=&quot;专&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3066&quot; class=&quot;character&quot;&gt;专&lt;/span&gt;&lt;span data-raw-text=&quot;栏&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3067&quot; class=&quot;character&quot;&gt;栏&lt;/span&gt;&lt;span data-raw-text=&quot;」&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3068&quot; class=&quot;character&quot;&gt;」&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3069&quot; class=&quot;character&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;获&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3070&quot; class=&quot;character&quot;&gt;获&lt;/span&gt;&lt;span data-raw-text=&quot;取&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3071&quot; class=&quot;character&quot;&gt;取&lt;/span&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3072&quot; class=&quot;character&quot;&gt;1&lt;/span&gt;&lt;span data-raw-text=&quot;5&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3073&quot; class=&quot;character&quot;&gt;5&lt;/span&gt;&lt;span data-raw-text=&quot;个&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3074&quot; class=&quot;character&quot;&gt;个&lt;/span&gt;&lt;span data-raw-text=&quot;主&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3075&quot; class=&quot;character&quot;&gt;主&lt;/span&gt;&lt;span data-raw-text=&quot;流&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3076&quot; class=&quot;character&quot;&gt;流&lt;/span&gt;&lt;span data-raw-text=&quot;J&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3077&quot; class=&quot;character&quot;&gt;J&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3078&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;v&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3079&quot; class=&quot;character&quot;&gt;v&lt;/span&gt;&lt;span data-raw-text=&quot;a&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3080&quot; class=&quot;character&quot;&gt;a&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3081&quot; class=&quot;character&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3082&quot; class=&quot;character&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3083&quot; class=&quot;character&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3084&quot; class=&quot;character&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3085&quot; class=&quot;character&quot;&gt;码&lt;/span&gt;&lt;span data-raw-text=&quot;分&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3086&quot; class=&quot;character&quot;&gt;分&lt;/span&gt;&lt;span data-raw-text=&quot;析&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3087&quot; class=&quot;character&quot;&gt;析&lt;/span&gt;&lt;span data-raw-text=&quot;专&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3088&quot; class=&quot;character&quot;&gt;专&lt;/span&gt;&lt;span data-raw-text=&quot;栏&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3089&quot; class=&quot;character&quot;&gt;栏&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3090&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;另&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3091&quot; class=&quot;character&quot;&gt;另&lt;/span&gt;&lt;span data-raw-text=&quot;外&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3092&quot; class=&quot;character&quot;&gt;外&lt;/span&gt;&lt;span data-raw-text=&quot;回&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3093&quot; class=&quot;character&quot;&gt;回&lt;/span&gt;&lt;span data-raw-text=&quot;复&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3094&quot; class=&quot;character&quot;&gt;复&lt;/span&gt;&lt;span data-raw-text=&quot;：&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3095&quot; class=&quot;character&quot;&gt;：&lt;/span&gt;&lt;span data-raw-text=&quot;加&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3096&quot; class=&quot;character&quot;&gt;加&lt;/span&gt;&lt;span data-raw-text=&quot;群&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3097&quot; class=&quot;character&quot;&gt;群&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3098&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3099&quot; class=&quot;character&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;以&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3100&quot; class=&quot;character&quot;&gt;以&lt;/span&gt;&lt;span data-raw-text=&quot;跟&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3101&quot; class=&quot;character&quot;&gt;跟&lt;/span&gt;&lt;span data-raw-text=&quot;很&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3102&quot; class=&quot;character&quot;&gt;很&lt;/span&gt;&lt;span data-raw-text=&quot;多&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3103&quot; class=&quot;character&quot;&gt;多&lt;/span&gt;&lt;span data-raw-text=&quot;B&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3104&quot; class=&quot;character&quot;&gt;B&lt;/span&gt;&lt;span data-raw-text=&quot;A&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3105&quot; class=&quot;character&quot;&gt;A&lt;/span&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3106&quot; class=&quot;character&quot;&gt;T&lt;/span&gt;&lt;span data-raw-text=&quot;大&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3107&quot; class=&quot;character&quot;&gt;大&lt;/span&gt;&lt;span data-raw-text=&quot;厂&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3108&quot; class=&quot;character&quot;&gt;厂&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3109&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;前&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3110&quot; class=&quot;character&quot;&gt;前&lt;/span&gt;&lt;span data-raw-text=&quot;辈&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3111&quot; class=&quot;character&quot;&gt;辈&lt;/span&gt;&lt;span data-raw-text=&quot;交&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3112&quot; class=&quot;character&quot;&gt;交&lt;/span&gt;&lt;span data-raw-text=&quot;流&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3113&quot; class=&quot;character&quot;&gt;流&lt;/span&gt;&lt;span data-raw-text=&quot;和&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3114&quot; class=&quot;character&quot;&gt;和&lt;/span&gt;&lt;span data-raw-text=&quot;学&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3115&quot; class=&quot;character&quot;&gt;学&lt;/span&gt;&lt;span data-raw-text=&quot;习&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3116&quot; class=&quot;character&quot;&gt;习&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3117&quot; class=&quot;character&quot;&gt;。&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;114&quot; data-index-1641215183112=&quot;3024&quot; class=&quot;character&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;115&quot; data-index-1641215183112=&quot;3117&quot; class=&quot;character&quot;/&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot; data-style=&quot;white-space: normal; background-color: rgb(255, 255, 255); color: rgb(62, 62, 62); letter-spacing: 0.544px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, Arial, sans-serif; font-size: 16px;&quot; class=&quot;js_darkmode__155&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;paragraph&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93589&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span data-raw-text=&quot;走&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3118&quot; class=&quot;character&quot;&gt;走&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3119&quot; class=&quot;character&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;作&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3120&quot; class=&quot;character&quot;&gt;作&lt;/span&gt;&lt;span data-raw-text=&quot;者&quot; data-textnode-index-1641215183112=&quot;116&quot; data-index-1641215183112=&quot;3121&quot; class=&quot;character&quot;&gt;者&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/pre&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484618&amp;amp;idx=1&amp;amp;sn=e24d7d19006f0d66e697e8d2be4aa508&amp;amp;chksm=e8c3f33edfb47a286f4515c4b11e822c35eab9b6c7ada25ac2cce3d2f7e5dac0230b54c56646&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6831&quot;&gt;&lt;span data-raw-text=&quot;1&quot; data-textnode-index-1641215183112=&quot;117&quot; data-index-1641215183112=&quot;3122&quot; class=&quot;character&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;0&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6832&quot;&gt;&lt;span data-raw-text=&quot;0&quot; data-textnode-index-1641215183112=&quot;118&quot; data-index-1641215183112=&quot;3123&quot; class=&quot;character&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;年&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6833&quot;&gt;&lt;span data-raw-text=&quot;年&quot; data-textnode-index-1641215183112=&quot;119&quot; data-index-1641215183112=&quot;3124&quot; class=&quot;character&quot;&gt;年&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;I&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6834&quot;&gt;&lt;span data-raw-text=&quot;I&quot; data-textnode-index-1641215183112=&quot;120&quot; data-index-1641215183112=&quot;3125&quot; class=&quot;character&quot;&gt;I&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6835&quot;&gt;&lt;span data-raw-text=&quot;T&quot; data-textnode-index-1641215183112=&quot;121&quot; data-index-1641215183112=&quot;3126&quot; class=&quot;character&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;老&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6836&quot;&gt;&lt;span data-raw-text=&quot;老&quot; data-textnode-index-1641215183112=&quot;122&quot; data-index-1641215183112=&quot;3127&quot; class=&quot;character&quot;&gt;老&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;兵&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6837&quot;&gt;&lt;span data-raw-text=&quot;兵&quot; data-textnode-index-1641215183112=&quot;123&quot; data-index-1641215183112=&quot;3128&quot; class=&quot;character&quot;&gt;兵&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6838&quot;&gt;&lt;span data-raw-text=&quot;给&quot; data-textnode-index-1641215183112=&quot;124&quot; data-index-1641215183112=&quot;3129&quot; class=&quot;character&quot;&gt;给&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;职&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6839&quot;&gt;&lt;span data-raw-text=&quot;职&quot; data-textnode-index-1641215183112=&quot;125&quot; data-index-1641215183112=&quot;3130&quot; class=&quot;character&quot;&gt;职&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;场&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6840&quot;&gt;&lt;span data-raw-text=&quot;场&quot; data-textnode-index-1641215183112=&quot;126&quot; data-index-1641215183112=&quot;3131&quot; class=&quot;character&quot;&gt;场&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;新&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6841&quot;&gt;&lt;span data-raw-text=&quot;新&quot; data-textnode-index-1641215183112=&quot;127&quot; data-index-1641215183112=&quot;3132&quot; class=&quot;character&quot;&gt;新&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6842&quot;&gt;&lt;span data-raw-text=&quot;人&quot; data-textnode-index-1641215183112=&quot;128&quot; data-index-1641215183112=&quot;3133&quot; class=&quot;character&quot;&gt;人&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6843&quot;&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;129&quot; data-index-1641215183112=&quot;3134&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6844&quot;&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;130&quot; data-index-1641215183112=&quot;3135&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6845&quot;&gt;&lt;span data-raw-text=&quot;些&quot; data-textnode-index-1641215183112=&quot;131&quot; data-index-1641215183112=&quot;3136&quot; class=&quot;character&quot;&gt;些&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6846&quot;&gt;&lt;span data-raw-text=&quot;建&quot; data-textnode-index-1641215183112=&quot;132&quot; data-index-1641215183112=&quot;3137&quot; class=&quot;character&quot;&gt;建&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;议&quot; data-textnode-index=&quot;489&quot; data-index=&quot;6847&quot;&gt;&lt;span data-raw-text=&quot;议&quot; data-textnode-index-1641215183112=&quot;133&quot; data-index-1641215183112=&quot;3138&quot; class=&quot;character&quot;&gt;议&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247486100&amp;amp;idx=1&amp;amp;sn=3166338465f9b4a47ad93ecf13df6e48&amp;amp;chksm=e8c3fd60dfb47476e0c3ff65673eee47a5b99c7455f70252d08d6d0330828ea9050b27526a7d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3139&quot; class=&quot;character&quot;&gt;“&lt;/span&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3140&quot; class=&quot;character&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3141&quot; class=&quot;character&quot;&gt;”&lt;/span&gt;&lt;span data-raw-text=&quot;被&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3142&quot; class=&quot;character&quot;&gt;被&lt;/span&gt;&lt;span data-raw-text=&quot;阿&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3143&quot; class=&quot;character&quot;&gt;阿&lt;/span&gt;&lt;span data-raw-text=&quot;里&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3144&quot; class=&quot;character&quot;&gt;里&lt;/span&gt;&lt;span data-raw-text=&quot;巴&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3145&quot; class=&quot;character&quot;&gt;巴&lt;/span&gt;&lt;span data-raw-text=&quot;巴&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3146&quot; class=&quot;character&quot;&gt;巴&lt;/span&gt;&lt;span data-raw-text=&quot;宠&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3147&quot; class=&quot;character&quot;&gt;宠&lt;/span&gt;&lt;span data-raw-text=&quot;幸&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3148&quot; class=&quot;character&quot;&gt;幸&lt;/span&gt;&lt;span data-raw-text=&quot;了&quot; data-textnode-index-1641215183112=&quot;134&quot; data-index-1641215183112=&quot;3149&quot; class=&quot;character&quot;&gt;了&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485407&amp;amp;idx=1&amp;amp;sn=0e0de515b3a66ac91e55fdf583be5c0d&amp;amp;chksm=e8c3f02bdfb4793daecebbead9c5cdf6e64da25b80f2fd3f2bcfcc52a6c3a57b2414298bd0b5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6848&quot;&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index-1641215183112=&quot;135&quot; data-index-1641215183112=&quot;3150&quot; class=&quot;character&quot;&gt;程&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6849&quot;&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index-1641215183112=&quot;136&quot; data-index-1641215183112=&quot;3151&quot; class=&quot;character&quot;&gt;序&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6850&quot;&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index-1641215183112=&quot;137&quot; data-index-1641215183112=&quot;3152&quot; class=&quot;character&quot;&gt;员&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6851&quot;&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;138&quot; data-index-1641215183112=&quot;3153&quot; class=&quot;character&quot;&gt;如&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6852&quot;&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index-1641215183112=&quot;139&quot; data-index-1641215183112=&quot;3154&quot; class=&quot;character&quot;&gt;何&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;提&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6853&quot;&gt;&lt;span data-raw-text=&quot;提&quot; data-textnode-index-1641215183112=&quot;140&quot; data-index-1641215183112=&quot;3155&quot; class=&quot;character&quot;&gt;提&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6854&quot;&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index-1641215183112=&quot;141&quot; data-index-1641215183112=&quot;3156&quot; class=&quot;character&quot;&gt;高&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;影&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6855&quot;&gt;&lt;span data-raw-text=&quot;影&quot; data-textnode-index-1641215183112=&quot;142&quot; data-index-1641215183112=&quot;3157&quot; class=&quot;character&quot;&gt;影&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;响&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6856&quot;&gt;&lt;span data-raw-text=&quot;响&quot; data-textnode-index-1641215183112=&quot;143&quot; data-index-1641215183112=&quot;3158&quot; class=&quot;character&quot;&gt;响&lt;/span&gt;&lt;/span&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index=&quot;490&quot; data-index=&quot;6857&quot;&gt;&lt;span data-raw-text=&quot;力&quot; data-textnode-index-1641215183112=&quot;144&quot; data-index-1641215183112=&quot;3159&quot; class=&quot;character&quot;&gt;力&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247485573&amp;amp;idx=1&amp;amp;sn=4d936fa700b38b5158316bdaf1aeac68&amp;amp;chksm=e8c3ff71dfb476675613afe09c682bc5fbd454b35f8d3d6d0458360149d5f0d673965c8852c4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;优&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3160&quot; class=&quot;character&quot;&gt;优&lt;/span&gt;&lt;span data-raw-text=&quot;秀&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3161&quot; class=&quot;character&quot;&gt;秀&lt;/span&gt;&lt;span data-raw-text=&quot;程&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3162&quot; class=&quot;character&quot;&gt;程&lt;/span&gt;&lt;span data-raw-text=&quot;序&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3163&quot; class=&quot;character&quot;&gt;序&lt;/span&gt;&lt;span data-raw-text=&quot;员&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3164&quot; class=&quot;character&quot;&gt;员&lt;/span&gt;&lt;span data-raw-text=&quot;必&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3165&quot; class=&quot;character&quot;&gt;必&lt;/span&gt;&lt;span data-raw-text=&quot;备&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3166&quot; class=&quot;character&quot;&gt;备&lt;/span&gt;&lt;span data-raw-text=&quot;技&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3167&quot; class=&quot;character&quot;&gt;技&lt;/span&gt;&lt;span data-raw-text=&quot;能&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3168&quot; class=&quot;character&quot;&gt;能&lt;/span&gt;&lt;span data-raw-text=&quot;之&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3169&quot; class=&quot;character&quot;&gt;之&lt;/span&gt;&lt;span data-raw-text=&quot;如&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3170&quot; class=&quot;character&quot;&gt;如&lt;/span&gt;&lt;span data-raw-text=&quot;何&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3171&quot; class=&quot;character&quot;&gt;何&lt;/span&gt;&lt;span data-raw-text=&quot;高&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3172&quot; class=&quot;character&quot;&gt;高&lt;/span&gt;&lt;span data-raw-text=&quot;效&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3173&quot; class=&quot;character&quot;&gt;效&lt;/span&gt;&lt;span data-raw-text=&quot;阅&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3174&quot; class=&quot;character&quot;&gt;阅&lt;/span&gt;&lt;span data-raw-text=&quot;读&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3175&quot; class=&quot;character&quot;&gt;读&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3176&quot; class=&quot;character&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;码&quot; data-textnode-index-1641215183112=&quot;145&quot; data-index-1641215183112=&quot;3177&quot; class=&quot;character&quot;&gt;码&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==&amp;amp;mid=2247484822&amp;amp;idx=1&amp;amp;sn=ecaada01b1bcf73b3a9fb750872b8e9d&amp;amp;chksm=e8c3f262dfb47b74d6f03be903dc734953e83ee720ac5b98e7ffcd92da39df5d68308b26bf85&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span data-raw-text=&quot;我&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3178&quot; class=&quot;character&quot;&gt;我&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3179&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;另&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3180&quot; class=&quot;character&quot;&gt;另&lt;/span&gt;&lt;span data-raw-text=&quot;一&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3181&quot; class=&quot;character&quot;&gt;一&lt;/span&gt;&lt;span data-raw-text=&quot;种&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3182&quot; class=&quot;character&quot;&gt;种&lt;/span&gt;&lt;span data-raw-text=&quot;参&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3183&quot; class=&quot;character&quot;&gt;参&lt;/span&gt;&lt;span data-raw-text=&quot;与&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3184&quot; class=&quot;character&quot;&gt;与&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3185&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;R&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3186&quot; class=&quot;character&quot;&gt;R&lt;/span&gt;&lt;span data-raw-text=&quot;o&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3187&quot; class=&quot;character&quot;&gt;o&lt;/span&gt;&lt;span data-raw-text=&quot;c&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3188&quot; class=&quot;character&quot;&gt;c&lt;/span&gt;&lt;span data-raw-text=&quot;k&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3189&quot; class=&quot;character&quot;&gt;k&lt;/span&gt;&lt;span data-raw-text=&quot;e&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3190&quot; class=&quot;character&quot;&gt;e&lt;/span&gt;&lt;span data-raw-text=&quot;t&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3191&quot; class=&quot;character&quot;&gt;t&lt;/span&gt;&lt;span data-raw-text=&quot;M&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3192&quot; class=&quot;character&quot;&gt;M&lt;/span&gt;&lt;span data-raw-text=&quot;Q&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3193&quot; class=&quot;character&quot;&gt;Q&lt;/span&gt;&lt;span data-raw-text=&quot; &quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3194&quot; class=&quot;character&quot;&gt; &lt;/span&gt;&lt;span data-raw-text=&quot;开&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3195&quot; class=&quot;character&quot;&gt;开&lt;/span&gt;&lt;span data-raw-text=&quot;源&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3196&quot; class=&quot;character&quot;&gt;源&lt;/span&gt;&lt;span data-raw-text=&quot;社&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3197&quot; class=&quot;character&quot;&gt;社&lt;/span&gt;&lt;span data-raw-text=&quot;区&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3198&quot; class=&quot;character&quot;&gt;区&lt;/span&gt;&lt;span data-raw-text=&quot;的&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3199&quot; class=&quot;character&quot;&gt;的&lt;/span&gt;&lt;span data-raw-text=&quot;方&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3200&quot; class=&quot;character&quot;&gt;方&lt;/span&gt;&lt;span data-raw-text=&quot;式&quot; data-textnode-index-1641215183112=&quot;146&quot; data-index-1641215183112=&quot;3201&quot; class=&quot;character&quot;&gt;式&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-raw-text=&quot;点&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3202&quot; class=&quot;character&quot;&gt;点&lt;/span&gt;&lt;span data-raw-text=&quot;击&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3203&quot; class=&quot;character&quot;&gt;击&lt;/span&gt;&lt;span data-raw-text=&quot;查&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3204&quot; class=&quot;character&quot;&gt;查&lt;/span&gt;&lt;span data-raw-text=&quot;看&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3205&quot; class=&quot;character&quot;&gt;看&lt;/span&gt;&lt;span data-raw-text=&quot;“&quot; data-textnode-index-1641215183112=&quot;147&quot; data-index-1641215183112=&quot;3206&quot; class=&quot;character&quot;&gt;“&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;阅&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3207&quot; class=&quot;character&quot;&gt;阅&lt;/span&gt;&lt;span data-raw-text=&quot;读&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3208&quot; class=&quot;character&quot;&gt;读&lt;/span&gt;&lt;span data-raw-text=&quot;原&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3209&quot; class=&quot;character&quot;&gt;原&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;148&quot; data-index-1641215183112=&quot;3210&quot; class=&quot;character&quot;&gt;文&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span data-raw-text=&quot;”&quot; data-textnode-index-1641215183112=&quot;149&quot; data-index-1641215183112=&quot;3211&quot; class=&quot;character&quot;&gt;”&lt;/span&gt;&lt;span data-raw-text=&quot;，&quot; data-textnode-index-1641215183112=&quot;149&quot; data-index-1641215183112=&quot;3212&quot; class=&quot;character&quot;&gt;，&lt;/span&gt;&lt;strong&gt;&lt;span data-raw-text=&quot;可&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3213&quot; class=&quot;character&quot;&gt;可&lt;/span&gt;&lt;span data-raw-text=&quot;直&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3214&quot; class=&quot;character&quot;&gt;直&lt;/span&gt;&lt;span data-raw-text=&quot;接&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3215&quot; class=&quot;character&quot;&gt;接&lt;/span&gt;&lt;span data-raw-text=&quot;进&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3216&quot; class=&quot;character&quot;&gt;进&lt;/span&gt;&lt;span data-raw-text=&quot;入&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3217&quot; class=&quot;character&quot;&gt;入&lt;/span&gt;&lt;span data-raw-text=&quot;[&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3218&quot; class=&quot;character&quot;&gt;[&lt;/span&gt;&lt;span data-raw-text=&quot;中&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3219&quot; class=&quot;character&quot;&gt;中&lt;/span&gt;&lt;span data-raw-text=&quot;间&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3220&quot; class=&quot;character&quot;&gt;间&lt;/span&gt;&lt;span data-raw-text=&quot;件&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3221&quot; class=&quot;character&quot;&gt;件&lt;/span&gt;&lt;span data-raw-text=&quot;兴&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3222&quot; class=&quot;character&quot;&gt;兴&lt;/span&gt;&lt;span data-raw-text=&quot;趣&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3223&quot; class=&quot;character&quot;&gt;趣&lt;/span&gt;&lt;span data-raw-text=&quot;圈&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3224&quot; class=&quot;character&quot;&gt;圈&lt;/span&gt;&lt;span data-raw-text=&quot;]&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3225&quot; class=&quot;character&quot;&gt;]&lt;/span&gt;&lt;span data-raw-text=&quot;文&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3226&quot; class=&quot;character&quot;&gt;文&lt;/span&gt;&lt;span data-raw-text=&quot;章&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3227&quot; class=&quot;character&quot;&gt;章&lt;/span&gt;&lt;span data-raw-text=&quot;合&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3228&quot; class=&quot;character&quot;&gt;合&lt;/span&gt;&lt;span data-raw-text=&quot;集&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3229&quot; class=&quot;character&quot;&gt;集&lt;/span&gt;&lt;span data-raw-text=&quot;。&quot; data-textnode-index-1641215183112=&quot;150&quot; data-index-1641215183112=&quot;3230&quot; class=&quot;character&quot;&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>887224ffa92dfe2b88da9c9d81c782ce</guid>
<title>Kubernetes容器平台，从繁荣走向碎片化</title>
<link>https://toutiao.io/k/z0w44gr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;stroke joinstyle=&quot;miter&quot;/&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; connecttype=&quot;rect&quot;/&gt;&lt;lock aspectratio=&quot;t&quot;/&gt;&lt;/shapetype&gt;&lt;shape type=&quot;#_x0000_t75&quot; filled=&quot;f&quot;&gt;&lt;imagedata title=&quot;image1&quot;/&gt;&lt;/shape&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5226039783001808&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWB7bGt7C6dLhbkv0F2IP6Lep3ib9gSgiaDgezO8s4dwvg8vicGgktaAAGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;云计算的拐点已至进入成熟期，&lt;/span&gt;&lt;span&gt;云原生成为驱动业务发展的动力引擎&lt;/span&gt;&lt;span&gt;，作为新型基础设施，不仅是企业数字化转型的最佳技术路径，同时也成为新领域人工智能、大数据、边缘计算、5G 等底层平台基础设施。&lt;/span&gt;&lt;span&gt;随着云原生技术的成熟和市场需求的升级，云计算的发展已步入新的阶段。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;云原生2.0&lt;/span&gt;&lt;span&gt;，将&lt;/span&gt;&lt;span&gt;充分地释放了云计算的红利，未来将有更多的业务应用&lt;/span&gt;&lt;span&gt;生于云，长于云&lt;/span&gt;&lt;span&gt;；为了最大程度发挥云原生的优势，支持好各种复杂个性化场景，云原生技术在不断完善演进，从中心到边缘；理念也在不断总结升华，从微服务到Mesh，再到无服务，&lt;/span&gt;&lt;span&gt;业驱云长，云随业动&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.1.云原生时代&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3074141048824593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWg07c2ykib5pc5hYFEFowvXe24WTy6sF26TLyiaiaKnXKIVjrjQUWkFOqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kubernetes开启了整个云原生的时代，以两年为一个大的阶段，可以分为五个阶段，分别是&lt;/span&gt;&lt;span&gt;孵化期&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;高速发展期&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;野蛮生长期&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;普及推广期&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;业务重构期。&lt;/span&gt;&lt;span&gt;随着物联网、人工智能等技术的不断发展，尤其是产业互联网发展落地，云原生作为新一代基础设施，从互联网大厂走向企业，走向产业；云原生2.0，企业云化从“On Cloud”走向“In Cloud“，生于云、长于云且立而不破；企业新生能力基于云原生构建，使其生于云；应用、数据和AI的全生命周期云上完成，使其长于云；企业原来的业务核心系统开始基于云原生的技术理念解构及重构，实现借助技术的敏捷实现业务敏捷的数字化转型。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;未来云原生必将更全面的服务于产业与实业，分布式云 + 云原生，将成为云基础设施新范式，赋能新云原生企业敏捷创新，推动云原生生态有序繁荣，让云无处不在，让智能无所不及。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.2.Kubernetes架构及扩展性&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5804701627486437&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWHaTd5ic484XLibNiaysaibibS6uF0p0sSQhsbXNt8rAlcGtwsdia43Yqo7Gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubernetes主要由以下几个核心组件组成：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(1)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;etcd&lt;/span&gt;&lt;span&gt;保存整个集群的状态；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(2)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;apiserver&lt;/span&gt;&lt;span&gt;提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(3)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;controller manager&lt;/span&gt;&lt;span&gt;负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(4)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;scheduler&lt;/span&gt;&lt;span&gt;负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(5)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;kubelet&lt;/span&gt;&lt;span&gt;负责维护容器的生命周期，负责Volume（CSI）和网络（CNI）的管理；同时也负责管控Device Plugins，主要是GPU，FPGA及网络设备。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(6)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;container runtime&lt;/span&gt;&lt;span&gt;负责镜像管理以及Pod和容器的真正运行（CRI）；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(7)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;kube-proxy&lt;/span&gt;&lt;span&gt;负责为Service提供cluster内部的服务发现和负载均衡；&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;早期在Kubernetes在&lt;/span&gt;&lt;span&gt;高速发展期，为了快速适配各个各样的场景，将&lt;/span&gt;&lt;span&gt;Kubernetes打造成一个可扩展的平台，大致可以分为基础设施（Infrastructure）及应用管理（Application Management）扩展两个方面：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一）基础设施（Infrastructure）扩展：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(1)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;OCI与CRI&lt;/span&gt;&lt;span&gt;标准容器镜像（image spec）及容器运行时（runtime spec）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(2)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;CNI与CSI&lt;/span&gt;&lt;span&gt;标准化网络及存储，开放网络及存储扩展能力。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(3)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;Device Plugins&lt;/span&gt;&lt;span&gt;插件框架，将系统硬件资源引入到Kubernetes体系。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;二）应用管理（Application Management）扩展：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(1)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;CRD&lt;/span&gt;&lt;span&gt;扩展Kubernetes用户自定义资源。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;(2)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;通过&lt;/span&gt;&lt;span&gt;Operators&lt;/span&gt;&lt;span&gt;实现Kubernetes应用生命周期管理。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt;可扩展性架构及CNCF开放式生态发展方向&lt;/span&gt;&lt;span&gt;，在&lt;/span&gt;&lt;span&gt;高速发展期&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;野蛮生长期乃至普及推广期&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;开放式平台及生态都是非常正确明智的选择&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;但是进入&lt;/span&gt;&lt;span&gt;业务重构期，面向业务需要提供整体性一体化的平台，&lt;/span&gt;&lt;span&gt;而不是一个碎片化的功能部件，不是所有公司都具备组装及调优能力，这时候平台的价值就会被重复的组装及调优将价值拉低；平台需要从散装转化成一体化，开箱即用的品牌机，要么就直接选择企业级容器平台或公有云容器产品，比如Openshift及阿里云ACK；要么通过生态治理，逐步收紧平台扩展能力，增加组件的成熟度监管，&lt;/span&gt;&lt;span&gt;分久必合合久必分，在分与合中保障平台及生态的良性发展。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.3.Kubernetes走向碎片化&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;/span&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWAC0DFgVWdHde3AXQMvqtWYUZkKSVobMichtlmIlZSib29iabBAW2ibfl7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CNCF开放式生态，是导致整个生态体系碎片化的根源；从2015年CNCF只有Kubernetes一个项目，到如今高达&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;多个官方项目，其中毕业项目&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;个，孵化项目&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt;个，沙盒&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;&lt;span&gt;个项目；包含底层众多的容器运行时、容器存储、容器网络以及硬件加速器项目，还有以应用为中心的北向数据库、中间件等项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过CNCF官方认证的Kubernetes的云服务或者发行版也多达&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;&lt;span&gt;款&lt;/span&gt;&lt;span&gt;，通过CNCF官方认证服务商和培训合作伙伴超过&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;&lt;span&gt;家。在中国CNCF的会员数量超过&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;家成员单位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如此庞大的软件生态体系，集结了开源，云厂商，软件服务商及设备厂商等多个利益方；整个生态大跃进式发展，无论是公有云厂家还是企业，&lt;/span&gt;&lt;span&gt;都是忙于通过积木式能力组装容器平台，乐此不疲&lt;/span&gt;&lt;span&gt;。还有公有云厂商，疲于跟进与整合容器技术，但只能提供毫无壁垒，毫无优势的工具平台，无法形成真正&lt;/span&gt;&lt;span&gt;产品及竞争力&lt;/span&gt;&lt;span&gt;；还有从容器，微服务到无服务技术，平台能力几乎应有尽有，貌似全部就绪，好像就只差最理想的应用迁入即可；但是在实际的使用及推广过程，与喧嚣的社区相比，云原生的价值被&lt;/span&gt;&lt;span&gt;疲于应对平台各种诡异问题&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;兼容新老业务的痛苦过程&lt;/span&gt;&lt;span&gt;中消耗殆尽，一片哀嚎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.3.1.容器运行时的碎片化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;容器运行时（Container Runtime Interface，简称 CRI）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是Kubernetes v1.5引入的容器运行时接口，它将Kubelet与容器运行时解耦，将原来完全面向Pod级别的内部接口拆分成面向Sandbox和Container的gRPC接口，并将镜像管理和容器管理分离到不同的服务。在v1.6时已经有了很多外部容器运行时，如frakti和cri-o等。&lt;/span&gt;&lt;span&gt;v1.7中又新增了cri-containerd支持用containerd来管理容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3888888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWgxbmC1ScibvslbL1BpczB2dsmdWqNzsx9uYTn6PbbOfq1pwXmKt2Tbw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kubelet衔接运行时的方式及调用链路如下：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1)&lt;span/&gt;&lt;/span&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;strong&gt;ocker &lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;dockershim =&amp;gt; dockerd =&amp;gt; &lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;ontainerd =&amp;gt; runc&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2)&lt;span/&gt;&lt;/span&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;strong&gt;ontainerd&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;containerd &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;shim v2 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt; runc&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3)&lt;span/&gt;&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;runc&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;(4)&lt;span/&gt;&lt;/strong&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;strong&gt;rakti&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;span&gt;frakti &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;runv&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;(5)&lt;span/&gt;&lt;/strong&gt;&lt;span&gt;pouch&lt;/span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;strong&gt;p&lt;/strong&gt;&lt;strong&gt;ouchContainer&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;=&amp;gt; &lt;/strong&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;strong&gt;ontainerd =&amp;gt; &lt;/strong&gt;&lt;span&gt;runc&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5479204339963833&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWzVj0YBOPdfNdn9HRGCbRPVibeMJahHicY9p7OzdRAiciadwfQ4vjOfkhxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;containerd与&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;两者&lt;/span&gt;&lt;span&gt;都是调用runc，containerd是内置runc代码，通过函数直接调用；&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt;是通过linux命令方式调用runc二进制文件，在性能上containerd更具优势，但是&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt;集成方式更为合理优雅，比较推荐&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;runc与runv：&lt;/span&gt;&lt;span&gt;runc创建的容器进程，直接运行在宿主机内核上，而runv是运行在由Hypervisor虚拟出来的虚拟机上，占用的资源更多启动速度慢，而且runv容器在调用底层硬件时，中间多了一层虚拟硬件层，计算效率上不如runc容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，生产环境的运行时选择主要取决于运行效率，&lt;/span&gt;&lt;span&gt;端到端的全流程运行效率&lt;/span&gt;&lt;span&gt;，因此建议结合自身业务需求，使用场景以及团队技术储备等选择合适的容器运行时。&lt;/span&gt;&lt;span&gt;对性能要求大于安全隔离要求时&lt;/span&gt;&lt;span&gt;，推荐使用&lt;/span&gt;&lt;span&gt;cri-o&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+ runc&lt;/span&gt;&lt;span&gt;；对安全隔离要求大于性能要求时，&lt;/span&gt;&lt;span&gt;在隔离性要求较高的业务场景下&lt;/span&gt;&lt;span&gt;，推荐使用&lt;/span&gt;&lt;span&gt;frakti + runv&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.3.2.容器网络的碎片化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41335740072202165&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoW9EicE4Bfyn9BDluCD1eM6s19EA4UGRYae6T4Df50d157tpzxp0Fgj2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容器网络&lt;/span&gt;&lt;span&gt;属于Kubernetes容器平台核心组件&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;技术复杂度高，对业务&lt;/span&gt;&lt;span&gt;影响大。&lt;/span&gt;&lt;span&gt;Kubernetes网络依赖底层的技术大致可以分为三大类：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（一）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Overlay&lt;/span&gt;&lt;span&gt;模式&lt;/span&gt;&lt;span&gt;是在二层或三层网络之上再构建起来一个独立的网络，这个网络通常会有自己独立的IP地址空间、交换或者路由的实现。VXLAN协议是目前最流行的Overlay网络隧道协议之一，显著优势就是灵活，对底层网络没有侵入性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（二）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;路由模式&lt;/span&gt;&lt;span&gt;放弃了跨主机容器在L2的连通性，而专注于通过路由协议提供容器在L3的通信方案；&lt;/span&gt;&lt;span&gt;路由模式&lt;/span&gt;&lt;span&gt;更易于集成到现在的数据中心的基础设施之上，便捷地连接容器和主机，并在报文过滤和隔离方面有着更好的扩展能力及更精细的控制模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（三）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Underlay模式&lt;/span&gt;&lt;span&gt;是借助驱动程序将宿主机的底层网络接口直接暴露给容器使用的一种网络构建技术，较为常见的解决方案有MAC VLAN、IP VLAN和直接路由等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3140794223826715&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWdiaKibYRAzeEPoZ6M4Guq6Sc68JibiclicW2ibJZmiasMlQhl0CcLSazMAF2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时&lt;/span&gt;&lt;span&gt;容器网络技术也在持续演进&lt;/span&gt;&lt;span&gt;发展&lt;/span&gt;&lt;span&gt;，社区&lt;/span&gt;&lt;span&gt;开源的&lt;/span&gt;&lt;span&gt;网络&lt;/span&gt;&lt;span&gt;组件众多，每个组件都有各自的优点及适应的场景，难以形成统一的标准组件，以下是比较常用&lt;/span&gt;&lt;span&gt;Flannel、Calico、Cilium、OVN&lt;/span&gt;&lt;span&gt;网络插件简单介绍：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（一）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Flannel&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Flannel&lt;/span&gt;&lt;span&gt;是最流行的Kubernetes容器网络插件&lt;/span&gt;&lt;span&gt;，提供多种网络&lt;/span&gt;&lt;span&gt;模式&lt;/span&gt;&lt;span&gt;实现，覆盖多种场景&lt;/span&gt;&lt;span&gt;，支持3种网络模式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;UDP模式&lt;/span&gt;&lt;span&gt;使用设备flannel.0进行封包解包，不是内核原生支持，上下文切换较大，性能非常差；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;VXLAN模式&lt;/span&gt;&lt;span&gt;使用flannel.1进行封包解包，内核原生支持，性能较强，性能损失可以控制在20%~30%左右；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;HOST-GW模式&lt;/span&gt;&lt;span&gt;直接将宿主机当作子网的下一跳地址，性能最强，性能损失大约在10%左右。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（二）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Calico&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Calico 是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，支持3种网络模式：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;全互联模式(node-to-node mesh)&lt;/span&gt;&lt;span&gt;基于BGP协议，&lt;/span&gt;&lt;span&gt;每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;路由反射模式Router Reflection（RR）&lt;/span&gt;&lt;span&gt;基于BGP协议，&lt;/span&gt;&lt;span&gt;指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3．&lt;span/&gt;&lt;/span&gt;&lt;span&gt;IPIP模式&lt;/span&gt;&lt;span&gt;把IP层封装到IP层的一个tunnel&lt;/span&gt;&lt;span&gt;，常规&lt;/span&gt;&lt;span&gt;的网桥是mac层的，而ipip 则是通过两端的路由做一个tunnel，&lt;/span&gt;&lt;span&gt;从而将&lt;/span&gt;&lt;span&gt;两个本来不通的网络通过点对点连接起来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（三）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Cilium&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;Cilium是一个基于eBPF和XDP的高性能容器网络方案,是Kubernetes第一个基于BPF的CNI，支持L3/L4/L7安全策略，支持三层平面网络(如Overlay，VXLAN和Geneve等)，提供基于BPF的负载均衡，提供便利的监控和排错能力，为大规模集群环境而设计。Cilium的卖点并不是eBPF，相对于固化的iptables或ipvs而言，Cillium真正的卖点是eBPF提供的无限可编程能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（四）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;OVN : &lt;/span&gt;&lt;span&gt;ovn-kubernetes提供了一个OVS/OVN网络插件，支持underlay和 overlay两种模式。underlay是容器运行在虚拟机中，而ovs则运行在虚拟机所在的物理机上，OVN将容器网络和虚拟机网络连接在一起；overlay是OVN通过logical overlay network连接所有节点的容器，此时ovs可以直接运行在物理机或虚拟机上。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，&lt;/span&gt;&lt;span&gt;Overlay模式&lt;/span&gt;&lt;span&gt;对底层网络要求低、落地容易、IP地址占用少等特点，但是对性能损失比较大。&lt;/span&gt;&lt;span&gt;路由模式&lt;/span&gt;&lt;span&gt;更易于集成到现在的数据中心的基础设施之上，便捷地连接容器和主机，并在报文过滤和隔离方面有着更好的扩展能力及更精细的控制模型；&lt;/span&gt;&lt;span&gt;Underlay模式&lt;/span&gt;&lt;span&gt;对底层网络要求较高，但是如果底层已经有一个完整的虚拟化IaaS层，尤其是公有云场景，将云原生能力直接融入到现有的云体系，通过Underlay&lt;/span&gt;&lt;span&gt;模式实现高性能，灵活可定义的容器网络才是最佳选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1.3.3.容器存储的碎片化&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5985533453887885&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWwj7Ofo7B7EaW8F3KCWxyBTOjJHibFBpZkrptM8zzLSQpZP47jbCe7lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;市面上的存储产品种类繁多，主要分为四大类，分别是分布式文件存储，分布式块存储，Local-Disk和传统NAS。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（一）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;分布式块存储：&lt;/span&gt;&lt;span&gt;包括开源社区的Ceph，Sheepdog，商业产品中EMC的Scale IO，Vmware的vSAN等，分布式块存储不适合容器场景，关键问题是缺失RWX的特性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（二）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;分布式文件存储：&lt;/span&gt;&lt;span&gt;包括开源社区的Glusterfs，Cephfs，Lustre，Moosefs，Lizardfs，商业产品中EMC的isilon，IBM的GPFS等。分布式文件存储适合容器场景，但是性能问题比较突出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（三）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;Local-Disk：&lt;/span&gt;&lt;span&gt;有明显的缺点，尤其是针对数据库，大数据类的应用。节点故障后，数据的恢复时间长，对业务影响范围广。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（四）&lt;span/&gt;&lt;/span&gt;&lt;span&gt;传统NAS：&lt;/span&gt;&lt;span&gt;也是一种文件存储，但是协议网关（机头）是性能瓶颈，传统NAS已经跟不上时代发展的潮流。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt; v1.9 引入的容器存储接口CSI，并于v1.13版本正式GA。CSI的引入极大的增强了容器存储生态体系，标准化容器&lt;/span&gt;&lt;span&gt;平台&lt;/span&gt;&lt;span&gt;与外部存储系统的集成。有状态应用不需要了解底层存储系统的任何信息，只需将数据写入文件系统或块设备的容器存储卷，由容器&lt;/span&gt;&lt;span&gt;平台&lt;/span&gt;&lt;span&gt;透明地处理存储相关的编排与调度工作。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5533453887884268&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoW12jCLeypyovBBzOKtGeeiaZn4rLfT4Rd0iaYUQvs13Za5qehjMzz8MfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于CSI实现的持久化Volume的创建和挂载流程如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;1、用户提交PVC，Kubernetes平台自动创建出PV&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;2、Kubernetes平台将PV和PVC进行绑定&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;3、部署Pod并使用已创建的PVC，Kubernetes将Pod调度到某宿主机&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;4、Kubernetes将PVC对应的Volume进行Attach到对应宿主机&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        &lt;span&gt;5、宿主机上的kubelet完成Volume的Mount操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4484629294755877&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWM1ko8MQibomn6sQjh366OXzRic1THWxhYJBzdTDYgdUSrAlyM90wWzmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，&lt;/span&gt;&lt;span&gt;容器存储方案的选择，需要基于实际的业务需求出发，深刻理解容器平台未来承载的业务类型，&lt;/span&gt;&lt;span&gt;如果基于云平台构建云原生平台，尽量与IaaS底层保持一致，同时需要考虑团队的技术实力，开源产品对技术能力要求比较高，选择开源产品，最好有相应的技术人员储备。如果技术储备不足，最好是选择商用产品，虽然成本高点但经过了众多企业的技术验证。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;1.3.4.&lt;/span&gt;&lt;span&gt;应用管理的碎片化&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;一、&lt;span/&gt;&lt;/span&gt;&lt;span&gt;资源对象及CRD，Kubernetes平台开放基础&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt;标准&lt;/span&gt;&lt;span&gt;的资源对象&lt;/span&gt;&lt;span&gt;超过一&lt;/span&gt;&lt;span&gt;百多&lt;/span&gt;&lt;span&gt;个，自下而上可以分为四层：&lt;/span&gt;&lt;span&gt;资源层，&lt;/span&gt;&lt;span&gt;实现网络、存储及基础平台等资源对象；&lt;/span&gt;&lt;span&gt;调度层，&lt;/span&gt;&lt;span&gt;实现各种调度控制器及调度等资源对象；&lt;/span&gt;&lt;span&gt;隔离与服务访问层，&lt;/span&gt;&lt;span&gt;实现资源限制与隔离、配置、身份、路由规则等资源对象；&lt;/span&gt;&lt;span&gt;应用层，&lt;/span&gt;&lt;span&gt;实现应用逻辑、服务定义、生命周期控制等资源对象；云原生平台类产品主要是在&lt;/span&gt;&lt;span&gt;调度层&lt;/span&gt;&lt;span&gt;扩展，通过自定义CRD及控制器，实现&lt;/span&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt;的能力扩展，比如边缘容器，istio等。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6311030741410488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWhcCK1fiaIquiaV1M5sbJ1ia2K9F8MYuL5p69nkjicWiaWZa4LMeVs47jqJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  CRD功能是在Kubernetes v1.7版本引入的，通过 CRD 可以快速自定义 Kubernetes资源对象。CRD可以是命名空间的，也可以是集群范围的，由CRD的作用域(scpoe)字段中所指定的，与Kubernetes内置对象一样，删除名称空间将删除该名称空间中的所有自定义对象。基于Kubernetes内置对象与CRD就可以创建出千变万化的组合；另外&lt;/span&gt;&lt;span&gt;同一个资源对象又有多种实现方式，比如 Ingress就有10多种实现，PV就更不用说，&lt;/span&gt;&lt;span&gt;部分&lt;/span&gt;&lt;span&gt;互不相干扩展能力&lt;/span&gt;&lt;span&gt;存在相互&lt;/span&gt;&lt;span&gt;冲突&lt;/span&gt;&lt;span&gt;及版本不兼容，一个生产运行的Kubernetes容器集群，尤其是启动了Istio，Knative能力，CRD的数量是远远超过Kubernetes内置对象，&lt;/span&gt;&lt;span&gt;对于开发者&lt;/span&gt;&lt;span&gt;与平台&lt;/span&gt;&lt;span&gt;管理&lt;/span&gt;&lt;span&gt;挑战巨大&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;二、&lt;span/&gt;&lt;/span&gt;&lt;span&gt;从Helm到Operator，实现应用全生命周期管理&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云原生应用日趋复杂，仅仅通过Kubernetes对象及Yaml很难清晰的描述一个复杂的应用程序，所以诞生Helm与Operator。&lt;/span&gt;&lt;span&gt;Helm &lt;/span&gt;&lt;span&gt;主要实现是云原生应用打包和版本管理等。&lt;/span&gt;&lt;span&gt;Operator&lt;/span&gt;&lt;span&gt;本质是一种调节器模式（Reconciler Pattern）的应用，主要实现云原生应用管理，尤其是有状态应用管理，协调应用的实际状态达到预期状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2572463768115942&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWp5AUNlGts1Kg6HhJfSicKdohia6sG54NLZL8hSt06tPXzz7R48TQ5x5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;552&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Helm ：&lt;/span&gt;&lt;span&gt;开发非常容易，可以使用git仓库管理，运维效率相对不高，用户使用简单，开源生态丰富。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Operator：&lt;/span&gt;&lt;span&gt;开发入门较难，OperatorHub搭建困难，运维效率更高，用户使用简单，开源生态丰富&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建议当前考虑使用Operator作为容器应用首选，社区有大量基于operator开源实现支持各种中间件和应用&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;同时也存在比较严重的碎片化问题，在Helm hub上Kafka的chart多大十几个，如果包含Kafka配置管理就更多很难选择。O&lt;/span&gt;&lt;span&gt;perator&lt;/span&gt;&lt;span&gt; Hub稍微好点，Kafka有三个Operator供选择。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3616636528028933&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWXbdpla0bObl9q3gFpaaMBbvvEnX8HbsiaXh8D6fUz2yfQrdGN4NUP6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三、&lt;span/&gt;&lt;/span&gt;&lt;span&gt;OAM与KubeVela，走向标准与治理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;OAM：&lt;/span&gt;&lt;span&gt;Kubernetes的核心API资源比如Service、Deployment等，只是云原生应用部分描述，所以衍生出Helm及Operator以应用为中心，描述一个可部署的应用，但是缺乏标准及规范，复用性差冲突难以排查处理，需要一个专注于应用管理的、标准的、高度一致的模型标准与规范，所以就有衍生出了&lt;/span&gt;&lt;span&gt;开放应用模型 Open Application Model （OAM），&lt;/span&gt;&lt;span&gt;基于OAM实现应用描述与基础设施部署，管理应用解耦，通过应用组件（Components），应用部署配置文件（Application Configuration），应用运维特征（Traits）实现平台无关、高可扩展的应用描述能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;shapetype coordsize=&quot;21600,21600&quot; xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; o:spt=&quot;75&quot; path=&quot;m@4@5l@4@11@9@11@9@5xe&quot; o:preferrelative=&quot;t&quot; filled=&quot;f&quot; stroked=&quot;f&quot;&gt;&lt;formulas&gt;&lt;f eqn=&quot;if lineDrawn pixelLineWidth 0&quot;/&gt;&lt;f eqn=&quot;sum @0 1 0&quot;/&gt;&lt;f eqn=&quot;sum 0 0 @1&quot;/&gt;&lt;f eqn=&quot;prod @2 1 2&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;prod @3 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @0 0 1&quot;/&gt;&lt;f eqn=&quot;prod @6 1 2&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelWidth&quot;/&gt;&lt;f eqn=&quot;sum @8 21600 0&quot;/&gt;&lt;f eqn=&quot;prod @7 21600 pixelHeight&quot;/&gt;&lt;f eqn=&quot;sum @10 21600 0&quot;/&gt;&lt;/formulas&gt;&lt;path o:extrusionok=&quot;f&quot; gradientshapeok=&quot;t&quot; o:connecttype=&quot;rect&quot;/&gt;&lt;/shapetype&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.620253164556962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8Tts2IxBm8tL3WdQgreia4FjzIhDFNBoWXG8kbOHeLfTicVIZDyAMk7zczPzFkZsMm79TI3WWibrY93KrUP8kXicMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;553&quot;/&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;KubeVela：&lt;/span&gt;&lt;span&gt;是基于OAM标准实现的，面向平台构建者的、简单易用，高度可扩展的开源云原生平台构建引擎。目标是让任何平台团队都能够以Kubernetes原生的方式，快速、高效的打造出适合不同业务场景的、能够直面用户的云原生平台出来。比如构建应用 PaaS、数据库 PaaS、AI PaaS 或者持续交付系统等。KubeVela&lt;/span&gt;&lt;span&gt;开发入门简单&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;环境搭建&lt;/span&gt;&lt;span&gt;困难&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;混合云场景优势&lt;/span&gt;&lt;span&gt;明显，&lt;/span&gt;&lt;span&gt;运维效率高&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;但是处于&lt;/span&gt;&lt;span&gt;生态发展初期&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总的来说，Kubernetes原生的应用原生比较标准，但是一些偏平台的产品及应用就相当杂乱，大部分都只是借助Kubernetes 屏蔽了底层技术设施差异，对于上层的应用来说没有什么变化。这些应用大部分是传统云时代PaaS平台范畴的产品及应用，还有少部分基于云原生技术及理念的新产品，企业及研发团队需要根据自己的需求，通过这些产品及应用拼装成一个面向应用全生命周期的平台，依然有大量的重复建设工作。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;1.4.总结&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;对Kubernetes平台及CNCF社区来说，&lt;/span&gt;&lt;span&gt;Kubernetes作为云原生的核心平台，CNCF作为一个生态运营管理组织，要足够开放，满足上下游个性化集成的需求，确保整个生态繁荣及良性竞争，实现技术与平台快速演进，持续保持行业领先；同时也要去拥抱企业及开发者的真正需求，解决当前企业及研发团队平台杂乱，投入成本过大，无流程难以管控的难题，真正助力企业实现业务价值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对企业及用户说&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;“境”优先，“器”其次&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;在云原生时代，面对复杂的平台，繁荣且碎片化的生态，&lt;/span&gt;&lt;span&gt;不&lt;/span&gt;&lt;span&gt;要&lt;/span&gt;&lt;span&gt;过度追求“神兵利器”&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;至少先掌握一种工具&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;能搞定问题的就是好工具&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>337dbc11110f085e8b181d9df0ce1aa1</guid>
<title>盘点2021年晋升为Apache TLP的大数据相关项目</title>
<link>https://toutiao.io/k/6j61pd7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxMjI3NTI5OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/DicvpKIBbiaxdvguk5d6BgaNvk9mvMnmticIjibcW5fOibhicUCZDRVGq2SfEib6bRT7djd8icz5HV0sWuKkse9k0Ve7ow/0?wx_fmt=png&quot; data-nickname=&quot;Java与大数据架构&quot; data-alias=&quot;deltalake_bigdata&quot; data-signature=&quot;7年老码农，10W关注者。【Java与大数据架构】全面分享Java编程、Spark、Flink、Kafka、Elasticsearch、数据湖等干货。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;时间过得真快，2021年就过去了，又到了一年总结的时候了。本文将延续之前的惯例来总结一下过去一年大数据相关的项目顺利毕业成 Apache 顶级项目。在2021年一共有四个大数据相关项目顺利毕业成顶级项目，主要是 Apache® DataSketches™、Apache® Gobblin™、Apache® DolphinScheduler™ 以及 Apache® Pinot™；同时有两个项目进入到 Apache 孵化器，主要是 Apache Kyuubi 以及 Apache SeaTunnel。值得关注的是，国内主导的 Apache 开源项目越来越多了，这个还是很不错的现象。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibSzAo1hkef7EPDNrRYgxP8g5hmXlh868duQ2oclbSheQcWASyiaFh7wg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-ratio=&quot;1&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关于过去几年毕业成 TLP 的大数据项目可以参见&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MTc0NTMwNQ==&amp;amp;mid=2650714849&amp;amp;idx=1&amp;amp;sn=612298d256d8df188720c42853a50b03&amp;amp;chksm=887daf97bf0a26817c005f847460938c34db3be91c4d162b0583e0633494fb5de7b200970e94&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《盘点2017年晋升为Apache TLP的大数据相关项目》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《盘点2017年晋升为Apache TLP的大数据相关项目》&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MTc0NTMwNQ==&amp;amp;mid=2650716284&amp;amp;idx=1&amp;amp;sn=b476d9f740c7ef6a0911f643f4e84718&amp;amp;chksm=887da50abf0a2c1ca459e457cf70535e6956045342a520838ddac91f8382d4495d8fc5ec5ef5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《盘点2018年晋升为Apache TLP的大数据相关项目》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《盘点2018年晋升为Apache TLP的大数据相关项目》&lt;/a&gt; 、 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MTc0NTMwNQ==&amp;amp;mid=2650719154&amp;amp;idx=1&amp;amp;sn=ab733005f4487b669d805e879edbf5dc&amp;amp;chksm=887ddec4bf0a57d2b3e83023a77a35d27961daebfeec0d8f0cced86f0cca0a37352e2ca4074d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《盘点2019年晋升为Apache TLP的大数据相关项目》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《盘点2019年晋升为Apache TLP的大数据相关项目》&lt;/a&gt; 以及&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MTc0NTMwNQ==&amp;amp;mid=2650726627&amp;amp;idx=2&amp;amp;sn=3092e37a2460de6838953204596b9256&amp;amp;chksm=887dfd95bf0a74839837e00a098fc5c68c2f91aab0c4838d341e1606bf8a0a717746c7db8ff2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《盘点2020年晋升为Apache TLP的大数据相关项目》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《盘点2020年晋升为Apache TLP的大数据相关项目》&lt;/a&gt; 。下面我们来按照毕业的顺序简单介绍一下这些新晋的 Apache 顶级项目。&lt;/p&gt;&lt;h2&gt;Apache® DataSketches™：高性能大数据流算法库&lt;/h2&gt;&lt;p&gt;Apache DataSketches 是一个用于可扩展近似算法的高性能大数据分析库。该项目于2012年由雅虎发起，2015年开源，并于2019年3月进入Apache孵化器，2021年02月03日正式毕业成为 Apache 顶级项目。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.42559109874826145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibibljw11VW6y0Vyt5KGVZfrzqKorvib6mPHOPkd1UhMB50bozshXGCDwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1438&quot;/&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在大数据分析中，经常会出现一些不能伸缩的查询问题，因为它们需要大量的计算资源和时间来生成精确的结果。包括 count distinct、分位数（quantiles）、最频繁项（most-frequent items）、joins、矩阵计算（matrix computations）和图分析（graph analysis）。&lt;/p&gt;&lt;p&gt;如果近似结果是可以接受的，那么有一类专门的算法，称为流算法（streaming algorithms），或 sketches，可以更快地产生结果，并具有数学证明的误差界限。对于交互式查询，可能没有其他可行的替代方案，而在实时分析的情况下，sketches 是唯一已知的解决方案。&lt;/p&gt;&lt;p&gt;对于任何需要从大数据中提取有用信息的系统，这些 sketches 都是必需的工具包，应该紧密地集成到它们的分析功能中。这项技术帮助雅虎成功地将其内部平台上的数据处理时间从数天或数小时减少到数分钟或数秒。Apache DataSketches 具有以下特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;非常快&lt;/strong&gt;：产生近似结果的速度比传统方法快几个数量级——用户可配置的大小与精度的权衡;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;高效&lt;/strong&gt;：sketch 算法可以在同一个进程处理实时和批数据；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;针对处理大数据的计算环境进行优化，如 Apache Hadoop、Apache Spark、Apache Druid、Apache Hive、Apache Pig、PostgreSQL等；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;兼容多种语言和平台：Java, C++ 和 Python;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关于 Apache® DataSketches™ 的更多介绍可以到 &lt;span&gt;Apache DataSketches&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; 查看。&lt;/p&gt;&lt;h2&gt;Apache® Gobblin™：开源分布式大数据集成框架&lt;/h2&gt;&lt;p&gt;Apache Gobblin 是一个用于流数据和批处理数据生态系统的分布式大数据集成框架。可以简化大数据集成里面的常见问题，比如数据摄取、复制、组织以及生命周期管理等。该项目2014年起源于 LinkedIn，2015年开源，2017年2月进入 Apache 孵化器，2021年02月16日正式毕业成为 Apache 顶级项目。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4984709480122324&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibzDLMeYxTqGSbbSNEgLQ6E0fD5VoUPUxDtKTCNjX4GgQR6D5fPz1UDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;981&quot;/&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多年来，LinkedIn 的数据基础架构团队构建了自定义的数据摄取解决方案，用于将不同的数据引入到 Hadoop 生态系统。&lt;/span&gt;&lt;span&gt;最终，LinkedIn 运行了 15 种类型的摄取管道，这给数据质量、元数据管理、开发和操作带来了重大挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;上面这个问题促使 LinkedIn 构建了 Gobblin。Gobblin 是一种通用数据摄取框架，用于从各种数据源（例如数据库、REST API、FTP/SFTP 服务器、文件管理器等）中提取、转换和加载大量数据到 Hadoop。Gobblin 处理所有数据摄取 ETL 所需的常见例行任务，包括作业/任务调度、任务分区、错误处理、状态管理、数据质量检查、数据发布等。Gobblin 在同一执行框架中摄取来自不同数据源的数据，并在同一个地方管理不同来源的元数据。结合其他特性，例如自动扩展、容错性、数据质量保证、可扩展性和处理数据模型演化的能力，使 Gobblin 成为一个易于使用、自我服务且高效的数据摄取框架。&lt;/p&gt;&lt;p&gt;Gobblin 是围绕可扩展性的思想构建的，即用户可以轻松添加新适配器或扩展现有适配器以使用新数据。Gobblin 的架构体现了这一思想：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6238532110091743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibllvFF1kxibyTs9YCBgJ3Hgrb5ogtZ7hI9jibpO5cgN6iaR5yssXibGM6Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1308&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Gobblin 作业建立在一组 constructs 上（由上图中的浅绿色框表示），它们以某种方式协同工作并完成数据提取工作。所有的 constructs 都可以通过作业配置插入，并且可以通过添加新的或扩展现有的实现来扩展。&lt;/p&gt;&lt;p&gt;一个 Gobblin 作业由一组任务组成，每个任务对应一个要完成的工作单元，负责提取一部分数据。Gobblin 作业的任务由 Gobblin 运行时（Gobblin runtime）（由上图中的橙色框表示）根据选择的部署设置（由上图中的红色框表示）执行。&lt;/p&gt;&lt;p&gt;Gobblin 运行时（Gobblin runtime）负责在选择的部署设置上运行用户定义的 Gobblin 作业。它处理常见的任务，包括作业和任务调度、错误处理和任务重试、资源协商和管理、状态管理、数据质量检查、数据发布等。&lt;/p&gt;&lt;p&gt;Gobblin 目前支持两种部署模式：单节点的 Standalone 模式和 Hadoop 集群的 Hadoop MapReduce 模式。当然，这部分还在扩展。&lt;/p&gt;&lt;p&gt;Gobblin 的运行和操作由一些组件和实用程序（由上图中的蓝色框表示）支持，它们处理重要的事情，例如元数据管理、状态管理、指标收集和报告以及监控。&lt;/p&gt;&lt;p&gt;关于 Apache® Gobblin™ 的更多介绍可以到 &lt;span&gt;Apache Gobblin&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; 查看。&lt;/p&gt;&lt;h2&gt;Apache® DolphinScheduler™：开源分布式大数据可视化工作流调度系统&lt;/h2&gt;&lt;p&gt;Apache DolphinScheduler是一个分布式去中心化，易扩展的可视化DAG工作流任务调度平台。致力于解决数据处理流程中错综复杂的依赖关系，使调度系统在数据处理流程中开箱即用。该项目最初于 2017 年 12 月在易观创建，并于 2019 年 8 月进入 Apache 孵化器，2021年04月08日正式毕业成为 Apache 顶级项目。&lt;/p&gt;&lt;p&gt;Apache DolphinScheduler 以 DAG 流式的方式将 Task 组装起来，可实时监控任务的运行状态，同时支持重试、从指定节点恢复失败、暂停及 Kill 任务等操作。其主要有以下几个特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;高可靠性&lt;/strong&gt;：去中心化的多 Master 和多 Worker 服务对等架构, 避免单 Master 压力过大，另外采用任务缓冲队列来避免过载&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;简单易用&lt;/strong&gt;：DAG 监控界面，所有流程定义都是可视化，通过拖拽任务完成定制 DAG，通过 API 方式与第三方系统集成, 一键部署&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;丰富的使用场景&lt;/strong&gt;：支持多租户，支持暂停恢复操作. 紧密贴合大数据生态，提供 Spark, Hive, M/R, Python, Sub_process, Shell 等近20种任务类型&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;高扩展性&lt;/strong&gt;：支持自定义任务类型，调度器使用分布式调度，调度能力随集群线性增长，Master 和 Worker 支持动态上下线&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下图是 Apache DolphinScheduler 调度系统架构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5419222903885481&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibR0CvXkuNWicAEib5jc7iareMgancc8pU6CGjbo8mm34cX6UQ6PSkdUmPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;主要模块介绍如下：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;MasterServer&lt;/strong&gt;：MasterServer采用分布式无中心设计理念，MasterServer主要负责 DAG 任务切分、任务提交监控，并同时监听其它MasterServer和WorkerServer的健康状态。MasterServer服务启动时向Zookeeper注册临时节点，通过监听Zookeeper临时节点变化来进行容错处理。MasterServer基于netty提供监听服务。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;WorkerServer&lt;/strong&gt;：WorkerServer也采用分布式无中心设计理念，支持自定义任务插件，主要负责任务的执行和提供日志服务。WorkerServer服务启动时向Zookeeper注册临时节点，并维持心跳。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;Registry&lt;/strong&gt;：注册中心，使用插件化实现，默认支持Zookeeper, 系统中的MasterServer和WorkerServer节点通过注册中心来进行集群管理和容错。另外系统还基于注册中心进行事件监听和分布式锁。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;Alert&lt;/strong&gt;：提供告警相关功能，仅支持单机服务。支持自定义告警插件。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;API&lt;/strong&gt;：API接口层，主要负责处理前端UI层的请求。该服务统一提供RESTful api向外部提供请求服务。接口包括工作流的创建、定义、查询、修改、发布、下线、手工启动、停止、暂停、恢复、从该节点开始执行等等。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;UI&lt;/strong&gt;：系统的前端页面，提供系统的各种可视化操作界面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;关于 Apache® DolphinScheduler™ 的更多介绍可以到 &lt;span&gt;Apache DolphinScheduler&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt; 查看。&lt;/p&gt;&lt;h2&gt;Apache® Pinot™：开源分布式实时大数据分析基础设施&lt;/h2&gt;&lt;p&gt;Apache Pinot 是一个分布式实时分布式 OLAP 数据存储，旨在以高吞吐量和低延迟提供可扩展的实时分析。该项目最初于 2013 年由 LinkedIn 创建，2015 年开源，于 2018 年 10 月进入 Apache 孵化器，2021年08月02日正式毕业成为 Apache 顶级项目。&lt;/p&gt;&lt;p&gt;Apache Pinot 可以直接从流数据源（例如 Apache Kafka 和 Amazon Kinesis）中提取，并使事件可用于即时查询。它还可以从批处理数据源（例如 Hadoop HDFS、Amazon S3、Azure ADLS 和 Google Cloud Storage）中提取。该系统的核心是列式存储，具有多种智能索引和预聚合技术以实现低延迟。这使得 Pinot 最适合面向用户的实时分析。同时，Pinot 也是其他分析用例的绝佳选择，例如内部仪表板、异常检测和临时数据探索。&lt;/p&gt;&lt;p&gt;Apache Pinot 主要有以下特点：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;面向列的数据库&lt;/strong&gt;：具有各种压缩方案，如 Run Length，Fixed Bit Length；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;可插拔索引技术&lt;/strong&gt;：支持排序索引（Sorted Index），位图索引（Bitmap Index），倒排索引（Inverted Index,），StarTree 索引，Bloom 过滤器，范围索引（Range Index），文本搜索索引（Lucence/FST）， Json 索引，地理空间索引（Geospatial Index ）；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;具有基于查询和 segment 元数据优化查询/执行计划的能力&lt;/strong&gt;；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;支持从 Kafka、Kinesis 等流系统近实时的摄取数据&lt;/strong&gt;，也支持从 Hadoop、S3、Azure、GCS 等批处理系统摄取数据；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;类似 sql 的查询语言&lt;/strong&gt;，支持对数据进行选择、聚合、过滤、分组、排序和 distinct 查询；（过往记忆大数据备注：Apache Pinot 使用 Presto 实现了 ANSI SQL 查询语言，支持 JOIN 等操作。）&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;支持多值字段&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;支持水平扩展和容错&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Pinot 是 LinkedIn 和 Uber 的工程师共同设计的，可以根据集群中的节点数量来扩展查询性能。随着添加更多节点，查询性能总是会根据期望的每秒查询量配额提高。为了在不降低性能的情况下实现无限数量节点和数据存储的水平可伸缩性，Pinot 遵守以下设计原则：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;高可用性&lt;/strong&gt;：构建 Pinot 是为了为客户应用程序提供低延迟的分析查询。根据设计，Pinot 没有单点故障。当节点故障时，系统继续提供查询服务。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;水平可伸缩&lt;/strong&gt;：在工作负载发生变化时通过添加新节点进行伸缩的能力；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;延迟 vs 存储&lt;/strong&gt;：构建 Pinot 是为了在高吞吐量的情况下提供低延迟。为此，开发了段分配策略（segment assignment strategy）、路由策略、星树索引（star-tree indexing）等特性来实现这个功能。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;不可变数据&lt;/strong&gt;：Pinot 假设所有存储的数据都是不可变的。对于 GDPR 遵从性，我们提供了一个附加解决方案来清除数据，同时提供性能保证；&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;动态配置更改&lt;/strong&gt;：必须在不影响查询可用性或性能的情况下执行添加新表、扩展集群、摄取数据、修改索引配置和重新平衡等操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下面是 Apache Pinot 的架构：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7736842105263158&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibSVZsLxicEkZ7u5dmvP85Kq4wRZlKu50aPr5FJ1PFRL6KlIGQBVLhNKw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;760&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从上图可以看出主要有 Controller, Broker, Server, 以及 Minion 等组件。&lt;/p&gt;&lt;h3&gt;Apache Helix &amp;amp;&amp;amp; Apache Zookeeper&lt;/h3&gt;&lt;p&gt;Pinot 使用 Apache Helix 进行集群管理。Helix 作为代理（agent）嵌入到不同的组件中，并使用 Apache Zookeeper 来协调和维护整个集群状态和运行状况。所有的 Pinot servers 和 brokers 都由 Helix 管理。Helix 是一个通用的集群管理框架，用于管理分布式系统中的分区和副本。可以将 Helix 看作是一个事件驱动的发现服务，它具有推和拉通知功能，可以将集群的状态驱动到理想的配置。&lt;/p&gt;&lt;h3&gt;Controller&lt;/h3&gt;&lt;p&gt;Pinot 的 Controller 充当集群整体状态和运行状况的驱动程序。由于它的角色是 Helix 的参与者（participant）和旁观者（spectator），它驱动其他组件的状态，所以它通常是在 Zookeeper 之后启动的第一个组件。启动 Controller 需要两个参数：Zookeeper地址和集群名称。如果集群还不存在，Controller 将自动通过 Helix 创建一个集群。&lt;/p&gt;&lt;h3&gt;Broker&lt;/h3&gt;&lt;p&gt;Broker 的职责是将给定的查询路由到适当的 server 实例。Broker 将收集并合并来自所有 server 的响应，并将其发送回请求客户机。broker 提供接收 SQL 查询并以 JSON 格式返回响应的 HTTP 端点。&lt;/p&gt;&lt;h3&gt;Server&lt;/h3&gt;&lt;p&gt;Server 管理 segments，并在查询处理期间完成大部分繁重的工作。Pinot 有两种 servers：实时 server 和离线 server，但 server 并不真正知道它将是实时 server 还是离线 server 。server 的职责取决于表分配策略（table assignment strategy）。&lt;/p&gt;&lt;h3&gt;Minion&lt;/h3&gt;&lt;p&gt;Minion 是一个可选的组件。Minion 用于从 Pinot 集群中清除数据（比如出于英国的 GDPR 遵从性等原因）。&lt;/p&gt;&lt;p&gt;关于 Apache® Pinot™ 的更多介绍可以到 &lt;span&gt;Apache Pinot&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt; 查看。&lt;/p&gt;&lt;h2&gt;Apache kyuubi：分布式多租户的 Thrift JDBC/ODBC 服务器（孵化中）&lt;/h2&gt;&lt;p&gt;Apache Kyuubi 是一个分布式多租户的 Thrift JDBC/ODBC 服务器，用于大规模数据管理、处理和分析，其构建在 Apache Spark 之上，并且设计支持更多的引擎（比如 Apache Flink）。由网易在2018年开源，并于2021年06月21日进入 Apache 孵化器。&lt;/p&gt;&lt;p&gt;Kyuubi 主要应用在大数据领域场景，包括大数据离线计算、数据仓库、Ad Hoc等方向。Kyuubi 提供了以下几个功能：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;多租户&lt;/strong&gt;：Kyuubi 支持端到端的多租户，这就是为什么尽管已经存 在Spark Thrift JDBC/ODBC 服务器，网易还是要创建这个项目。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;简单易用&lt;/strong&gt;：您只需熟悉 SQL 和JDBC 即可处理海量数据，Kyuubi 帮助您专注于业务系统的设计和实现。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;到处运行&lt;/strong&gt;：Kyuubi 可以向所有支持的集群管理器提交 Spark 应用程序，包括 YARN、Mesos、Kubernetes、Standalone 和 local。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;安全和认证&lt;/strong&gt;：通过强大的身份验证和细粒度的列/行级授权，Kyuubi 可以确保系统和数据的安全。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;&lt;strong&gt;高可用&lt;/strong&gt;：是企业级SQL引擎的基本特性。Spark Thrift Server不具备这种能力；而Kyuubi提供了基于ZooKeeper的高可用解决方案，以支持高可用特性；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Apache Kyuubi 的系统架构如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5676982591876208&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibY0RRtB0Rib68ibbHibNrsOyWQnY4BouwibHYiajKYNohjDSXWPY8krDadfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2068&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想及时了解Spark、Hadoop或者HBase相关的文章，欢迎关注微信公众号：过往记忆大数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;图的中间部分显示了 Kyuubi 服务器的主组件，该组件处理图中左侧所示的客户端连接和执行请求。在 Kyuubi 中，这些连接请求被维护为 Kyuubi 会话，执行请求被支持为 Kyuubi 操作，这些操作被绑定到相应的会话。&lt;/p&gt;&lt;p&gt;Kyuubi Session 的创建可以分为两种情况：轻量级和重量级。大多数会话创建都是轻量级的，用户不感知。唯一的重量级情况是，在用户的共享域中没有实例化或缓存 SparkContext，这通常发生在用户第一次连接或很长时间没有连接时。这种一次性成本会话维护模型可以满足大多数特别的快速响应需求。&lt;/p&gt;&lt;p&gt;Kyuubi 以松散耦合的方式维护 SparkConext 的连接。这些 SparkContexts 可以是通过这个服务实例在客户端部署模式下本地创建的 Spark 程序，也可以是在 Yarn 或 Kubernetes 集群中以集群部署模式创建的 Spark 程序。在高可用模式下，这些 SparkConext 也可以由不同机器上的其他 Kyuubi 实例创建，并由该实例共享。&lt;/p&gt;&lt;p&gt;这些 SparkConexts 实例本质上是由 Kyuubi 服务托管的远程查询执行引擎程序。这些程序在 Spark SQL 上实现，端到端编译、优化和执行SQL语句，并与元数据服务（如Hive Metastore）和存储服务（如 HDFS）进行必要的交互，最大限度地发挥 Spark SQL 的功能。它们可以管理自己的生命周期，并且不受 Kyuubi 服务器上的故障转移的影响。&lt;/p&gt;&lt;p&gt;关于 Apache® Kyuubi™ 的更多介绍可以到 &lt;span&gt;Apache Kyuubi&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt; 查看。&lt;/p&gt;&lt;h2&gt;Apache SeaTunnel：高性能、分布式、海量数据集成框架（孵化中）&lt;/h2&gt;&lt;p&gt;Apache SeaTunnel （原名 Waterdrop）是一个非常易于使用的超高性能分布式数据集成平台，支持实时流式和离线批处理的海量数据处理，架构于 Apache Spark 和 Apache Flink 之上。由 Interesting Lab 于 2018年开源，并于2021年12月09日进入 Apache 孵化器。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.073385518590998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibNHmQ5ZqQ7QpxQliccu3icN8LB6cWsszZrg5RYVljTISzR7Q8ibjIVza4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过 Apache SeaTunnel 可以让 Spark 的使用更简单、更高效，并巩固了行业的高质量经验，并将业界和 Interesting Lab 使用 Spark 的优质经验固化到SeaTunnel 这个产品中，明显减少学习成本，加快分布式数据处理能力在生产环境落地。Databricks 开源的 Apache Spark 对于分布式数据处理来说是一个伟大的进步。Interesting Lab 在使用 Spark 时发现了很多可圈可点之处。除了大大简化分布式数据处理难度外，seatunnel 尽所能为您解决可能遇到的问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;数据丢失与重复&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;任务堆积与延迟&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;吞吐量低&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;应用到生产环境周期长&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;缺少应用运行状态监控&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Apache SeaTunnel 的特性：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;简单易用，灵活配置，无需开发&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;实时流式处理&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;高性能&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;海量数据处理能力&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;模块化和插件化，易于扩展&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持利用SQL做数据处理和聚合&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;Spark Structured Streaming&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;支持Spark 2.x&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Apache SeaTunnel 的工作流程如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.170909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/0yBD9iarX0nuEdichxmdLEXiaCKxpjKG87ibOu9sYu8iaVMs4mKNpvOk8AchtQEDmnq233kz6iczHPwvslg0WjJYFJrw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于 Apache® SeaTunnel™ 的更多介绍可以到 &lt;/span&gt;&lt;span&gt;Apache SeaTunnel&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;span&gt; 查看。&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; Apache DataSketches: &lt;em&gt;https://datasketches.apache.org/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; Apache Gobblin: &lt;em&gt;https://gobblin.apache.org/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; Apache DolphinScheduler: &lt;em&gt;https://dolphinscheduler.apache.org/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; Apache Pinot: &lt;em&gt;https://pinot.apache.org/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; Apache Kyuubi: &lt;em&gt;https://kyuubi.apache.org/&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; Apache SeaTunnel: &lt;em&gt;https://seatunnel.apache.org/&lt;/em&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>