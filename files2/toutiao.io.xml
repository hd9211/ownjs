<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>3993bbe28ee4164e43abb808086c8393</guid>
<title>30 岁的程序员出路在哪里？| 码农周刊第 321 期</title>
<link>https://toutiao.io/k/qdeuemt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;30 岁的程序员出路在哪里？| 码农周刊第 321 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第321期（2020-10-15）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3210&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=321&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;最佳实践&lt;/p&gt;
        
        &lt;p&gt;偏好模型在贝壳的应用&lt;/p&gt;
        
        &lt;p&gt;实战经验&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;共包含 9 种英伟达开发的图像及视频合成方法&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;以 DDD 思想为基础，融合中台核心要素，赋能中台建设。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;开箱即用的中后台前端/设计解决方案&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;细致讲解&lt;/p&gt;
        
        &lt;p&gt;无废话&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;适合入门&lt;/p&gt;
        
        &lt;p&gt;多维度看问题&lt;/p&gt;
        
        &lt;p&gt;&lt;a href=&quot;https://github.com/streamnative/mop&quot; target=&quot;_blank&quot;&gt;GitHub 地址&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;适合新手&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;完备分析&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;通俗易懂&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;细致分析&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;一线互联网工程师，分享Linux C++ Go Python等后端开发技术。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 444675 即可&lt;/p&gt;
        
        &lt;p&gt;老年程序猿，工作15年以上。以前极其不擅长写作，最近决定对着弱点迎难而上，写写原创的经验、心得。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 426740 即可&lt;/p&gt;
        
        &lt;p&gt;分享一些在 ThinkJS 项目开发过程中总结的一些经验以及问题&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 253319 即可&lt;/p&gt;
        
        &lt;p&gt;专注互联网金融&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 26661 即可&lt;/p&gt;
        
        &lt;p&gt;主要是分享作为一个机器学习算法工程师的工作学习生活方面的内容，包括Python编程、机器学习和深度学习算法知识，偶尔可能分享一些计算机基础方面的知识，以及一些练习项目等&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 1584 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本书介绍了 Kotlin 的基本语法、常用类型、面向对象编程以及一些高阶的知识。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;天无绝程序员之路&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验之谈&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4eb8403f04a76bce05411707abe6dbba</guid>
<title>为何不推荐使用 Sass 作为 css 预处理器</title>
<link>https://toutiao.io/k/6t740h7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;pos-relative js-post-content&quot;&gt;
                
                &lt;p&gt;&lt;a href=&quot;https://sass-lang.com/guide&quot;&gt;Sass&lt;/a&gt; 是成熟、稳定、强大的专业级 CSS 扩展语言。它兼容 CSS、功能丰富、社区庞大，为业界认可，被广泛应用；本文将根据使用 Sass 存在的痛点，以及更好的替代品，来陈述个人观点：&lt;strong&gt;不推荐使用 scss 作为 css 预处理器&lt;/strong&gt;，更倾向于使用 &lt;a href=&quot;http://lesscss.org/&quot;&gt;Less&lt;/a&gt; 或 &lt;a href=&quot;https://stylus.bootcss.com/&quot;&gt;Stylus&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;sassvsscss&quot;&gt;Sass Vs Scss&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Sass 有两种语法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第一个被称为 SCSS（Sassy CSS），在本参考文献中一直使用，它是 CSS 语法的扩展。这意味着每个有效的 CSS 样式表，都是具有相同含义的有效 SCSS 文件，两者完全兼容。下文描述的 Sass 功能增强了此语法。使用此语法的文件扩展名为 &lt;strong&gt;.scss&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第二种或&lt;strong&gt;更旧的语法&lt;/strong&gt;称为缩进语法（有时也称为“ Sass”），提供了一种更为简洁的 CSS 编写方式。它使用缩进而不是方括号来表示选择器的嵌套，并使用换行符而不是分号来分隔属性。使用此语法的&lt;strong&gt;文件&lt;/strong&gt;扩展名为 &lt;strong&gt;.sass&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上出自 &lt;a href=&quot;https://sass-lang.com/documentation/syntax&quot;&gt;Sass 官网对两者的解释&lt;/a&gt;。因为 scss 完全兼容 css，目前一般常用的是 scss；但 scss 也是 Sass 语法一部分，因此就以此为标题；言下之意，无论是 &lt;code&gt;.scss&lt;/code&gt; 还是 &lt;code&gt;.sass&lt;/code&gt; 皆不推荐使用。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;不推荐使用的理由&lt;/h2&gt;
&lt;p&gt;Sass 是采用 Ruby 语言编写的一款 CSS 预处理语言，如果安装并&lt;code&gt;单独使用&lt;/code&gt; sass，这并无什么问题；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装 sass
npm install -g sass

# 使用 sass
sass source/stylesheets/index.scss build/stylesheets/index.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但在工程化项目中，就另当别论了；，需要借助 &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt;。它虽然能够以惊人的速度，通过连接中间件自动将 &lt;code&gt;.scss&lt;/code&gt; 文件本地编译为 &lt;code&gt;css&lt;/code&gt;，但同时存在很多问题，导致在有的时候引发巨大痛点，这便是“不推荐使用 Sass 作为 css 预处理器”主要理由。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node-sass is a library that provides binding for Node.js to &lt;a href=&quot;https://github.com/sass/libsass&quot;&gt;LibSass&lt;/a&gt;, the C version of the popular stylesheet preprocessor, Sass.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;nodesass&quot;&gt;node-sass 存在的痛点&lt;/h3&gt;

&lt;p&gt;node-sass 与 Node.js 版本相关联；这就导致，一旦本地 Node.js 升级，就会出现 node-sass 无法工作的情况，如下报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;Module build failed: ModuleBuildError: Module build failed: Error: Node Sass does not yet support your current environment:&lt;br/&gt;
This usually happens because your environment has changed since running npm install. Run npm rebuild node-sass to build the binding for your current environment.&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;Module build failed (from ./node_modules/sass-loader/index.js):Error: Missing binding /.../xxx/node_modules/node-sass/vendor/darwin-x64-64/binding.node&lt;br/&gt;
Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js 10.x&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常遇见类似问题，你就需要通过 rebuild 或重新安装 node-sass 来解决，徒增烦恼；当然，也可以借助 &lt;code&gt;nvm&lt;/code&gt; 来切换至 node-sass 对应 Node.js 版本；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm rebuild node-sass

# Or
npm uninstall node-sass
npm install node-sass

# Or
nvm use [node-sass 对用的 Node 版本]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;node-sass&lt;/code&gt; 需要 node-gyp 作为先决条件，而 &lt;code&gt;node-gyp&lt;/code&gt; 又需要您安装了兼容版本的 Python，啧啧，这真是，不出问题还好；出现就得好一番折腾（而且其报错并不是很友好，就需要定位排查、查阅各种资料来修复）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;node-gyp&lt;/code&gt; requires that you have installed a compatible version of Python, one of: v2.7, v3.5, v3.6, v3.7, or v3.8. If you have multiple Python versions installed ......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先前因为需要，在 Mac 上，需要将 Python2 升级至 Python3，之后就导致各种 &lt;code&gt;node-sass&lt;/code&gt; 问题，好一番折腾才修复。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;gyp verb check python checking for Python executable &quot;python&quot; in the PATH&lt;br/&gt;
gyp verb &lt;code&gt;which&lt;/code&gt; succeeded python /usr/local/bin/python&lt;br/&gt;
gyp ERR! configure error&lt;br/&gt;
gyp ERR! stack Error: Command failed: /usr/local/bin/python -c import sys; print &quot;%s.%s.%s&quot; % sys.version_info[:3];&lt;br/&gt;
gyp ERR! stack File &quot;&lt;string&gt;&quot;, line 1&lt;br/&gt;
gyp ERR! stack import sys; print &quot;%s.%s.%s&quot; % sys.version_info[:3];&lt;br/&gt;
gyp ERR! stack ^&lt;br/&gt;
gyp ERR! stack SyntaxError: invalid syntax&lt;br/&gt;
&lt;span/&gt;&lt;/string&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;/Users/xxx/.node-gyp/12.13.0/include/node/v8.h:3039:5: note: candidate constructor not&lt;br/&gt;
viable: requires 2 arguments, but 1 was provided&lt;br/&gt;
Utf8Value(Isolate* isolate, Local&lt;a href=&quot;v8::Value&quot;&gt;v8::Value&lt;/a&gt; obj);&amp;gt; &lt;span/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际上 node-sass 依赖了一个二进制文件 binding.node，从 npm 源安装完本体后还会从 github（默认源） 下载 binding.node；这就导致默认情况下，下载 node-sass 依赖很迟缓。&lt;/p&gt;
&lt;p&gt;以上，SASS 不仅需要额外安装 node-sass （很慢），而且跟本地开发环境（Node.js，Python）高度挂钩，容易出现各种诡异问题，故而不推荐使用；而且，SASS 所提供的常用功能，Less、Stylus 也同样具备；而且 Less、Stylus 易于安装，使用便捷，何乐不为？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot;&gt;Less&lt;/a&gt;：Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。Less 可以运行在 Node 或浏览器端。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stylus.bootcss.com/&quot;&gt;Stylus&lt;/a&gt;：Stylus 是一种创新的样式表语言，可编译为 CSS。受 SASS 的启发，Stylus 是用 node.js 构建的，并能够在本交互式教程中说明的浏览器中运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人生苦短兮，预处理 CSS，我选 Less。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;您可能会感兴趣的文章&lt;/h2&gt;


              &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cc9c3236829aef4ac1af5341c51ccbb5</guid>
<title>[译] 50+ 有用的 DevOps 工具（一）</title>
<link>https://toutiao.io/k/lo4v773</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;原文: https://dzone.com/articles/50-useful-devops-tools?edition=627291&amp;amp;utm_medium=email&amp;amp;utm_source=dzone&amp;amp;utm_content=50%2B%20useful%20DevOps%20tools&amp;amp;utm_campaign=&lt;/p&gt;&lt;p&gt;翻译: 时序(祝坤荣)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;什么是DevOps?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;DevOps方法学，是由开发与运维定义的一种软件与团队管理方法，其最初提出是在2009年，之后在IT领域成为了流行的概念。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;DevOps对于使用的的每个人来说都意味着很多东西，它不只是定义好的标准，软件或流程，更是一种文化。Gartner对DevOps的定义是：&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;DevOps代表IT文化的变化，通过对敏捷方法的适配并聚焦在快速的IT服务交付，在面向系统方法的情境中实践精益。DevOps鼓励人们(和文化)，寻求改进在运维与开发团队间协同的办法。DevOps实现工具技术 - 特别是可以在研发生命周期中增强编程与动态基础架构的自动化工具。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从以上定义看出，DevOps是软件生命周期(SDLC)的多面方法，它更主要的强项是通过技术与软件来提升SDLC的效率。所以通过使用正确的DevOps方法，尤其是适配其合作的哲学并实现正确的工具，你的业务相对传统方法可以增加大约30倍的部署频率，数据来自CapGemini(https://www.capgemini.com/de-de/wp-content/uploads/sites/5/2016/03/devops-the-future-of-application-lifecycle-automation.pdf)调查。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;工作使用的正确工具&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这份清单想尽可能全面。文档提供了对于DevOps新手的工具，也有最近才在市场上发布的工具- 两种都可对于你和你的业务有帮助。对于已经熟练使用DevOps的你们，我希望你们可以找到对于自己增长中的企业有帮助的内容。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对于这么多可选择的工具，用哪个是没有“正确的”答案的。没有一个工具可以覆盖你可以用到的各种开发与运维团队中需要用到的东西，让我们在选择会用到的工具前看看什么会有用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;• 计划与协作：在你启动SDLC前，你需要对于哪些工具可以在你的团队中可以用于实现要有个统一思想。甚至有DevOps工具可以帮助你完成这一关键步骤。&lt;/p&gt;&lt;p&gt;• 构建：你需要一些工具来创建配置相同环境的工具。你最不想听到的是“但它在我的电脑是好的”&lt;/p&gt;&lt;p&gt;• 自动化：这就是DevOps能给你的，但自动化也能比手工方法更能快速增加生产力。&lt;/p&gt;&lt;p&gt;• 持续集成：工具需要能提供固定和快速的反馈，一天几次，但不是所有集成产品实现都是一样的，你选择的工具是否适合你的需要？&lt;/p&gt;&lt;p&gt;• 部署：部署需要是可预测，平滑，可靠并极小风险的，自动化在这个流程中可以大显身手。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;脑子里记着上面的内容，我希望选择的工具对你的业务有帮助并能扩展到DevOps生命周期。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;工具目录列表：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基础设置既代码&lt;/p&gt;&lt;p&gt;持续集成与交付&lt;/p&gt;&lt;p&gt;开发自动化&lt;/p&gt;&lt;p&gt;可用性测试&lt;/p&gt;&lt;p&gt;数据库与大数据&lt;/p&gt;&lt;p&gt;监控&lt;/p&gt;&lt;p&gt;测试&lt;/p&gt;&lt;p&gt;安全&lt;/p&gt;&lt;p&gt;有用的CLI工具&lt;/p&gt;&lt;p&gt;开发&lt;/p&gt;&lt;p&gt;可视化&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基础设施即代码&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9712918660287081&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4Wy3wc85lBLW0nfFVBGbmOppZtssoBQO7JK8wJwqrwXzicPKadVL0icz5d9JgcEShOnhryhTONwYUthZI2SrUGicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;209&quot;/&gt;&lt;/p&gt;&lt;p&gt;1. AWS CloudFormation&lt;/p&gt;&lt;p&gt;如果你目前正在使用或计划使用AWS云，AWS CloudFormation是一个必选项。CloudFormation让你对你的AWS基础设施进行建模并可以平滑简单地配置所有你的AWS资源。所有东西都可以用JSON或YAML模板文件来实现自动化特性来保证你的部署是可预测，可靠与可管理。&lt;/p&gt;&lt;p&gt;链接：https://aws.amazon.com/cloudformation/&lt;/p&gt;&lt;p&gt;2. Azure Resource Manager&lt;/p&gt;&lt;p&gt;Azure Resource Manager(ARM)是微软对于IAC工具的回答。通过ARM模板，可描述的JSON文件，Azure Resource Manager可以提供你基础设施，处理依赖，声明不同的资源。&lt;/p&gt;&lt;p&gt;链接：https://azure.microsoft.com/en-us/features/resource-manager/&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8212765957446808&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/4Wy3wc85lBLW0nfFVBGbmOppZtssoBQO99CENsYzAxU5nYznhVbPQwlqB68T9albV7nU8zZib8q55Hibk8ibQtgFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;235&quot;/&gt;&lt;/p&gt;&lt;p&gt;3. Google Cloud Deployment Manager&lt;/p&gt;&lt;p&gt;跟上面提到的工具类似，Google Cloud Deployment Manager是谷歌为Google云平台准备的IAC工具。这个工具使用YAML作为配置文件，使用JINJA2或PYTHON作为模板。一个关于部署的值得一提的特性是‘预览’，让你可以在提交前看到变更。&lt;/p&gt;&lt;p&gt;链接：https://cloud.google.com/deployment-manager/&lt;/p&gt;&lt;p&gt;4. Terraform&lt;/p&gt;&lt;p&gt;Terraform是HashiCorp(Vault和Nomad的提供者)提供给你的工具。Terraform与以上提到的工具有很大不同，它没有限制到一个具体的云平台，这提供处理复杂分布式应用的能力而不被绑定到一个平台。并且与谷歌云部署管理类似，Terraform也提供了预览功能：&lt;/p&gt;&lt;p&gt;链接：https://www.terraform.io/&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文来自祝坤荣(时序)的微信公众号「麦芽面包，id「darkjune_think」&lt;/p&gt;&lt;p&gt;转载请注明。&lt;/p&gt;&lt;p&gt;&lt;span&gt;交流&lt;/span&gt;Email: zhukunrong@yeah.net&lt;/p&gt;&lt;p&gt;微博：祝坤荣&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d58b4940a91c6f48bfd61ed4963b975b</guid>
<title>微信研发体系下的分布式配置系统设计概要</title>
<link>https://toutiao.io/k/43s9snk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;作者：ypaapyyang，腾讯 WXG 后台开发工程师，个人公众号：码农课代表。&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文旨在分析分布式配置系统的必要性、可行性，及其关键约束，并介绍一款基于该系列分析，在微信研发体系下的实践尝试。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对很多的业务开发同学而言，对运营素材的处理不是一件轻松的事，通常需要定制化的进行数据的清理、格式的转换、工具的开发。笔者就曾过这样一段不愉快的回忆，为了导入一次性的近十种类型的配置数据，就耗去了两天的时间。如果说这段经历有何价值的话，那就是促使我思考分布式配置系统，并且在工作中实践，使自己避免再次陷入如此槽糕的过程中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文正是旨在分析分布式配置系统的必要性、可行性，及其关键约束，并介绍一款基于该系列分析，在微信研发体系下的实践尝试。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置的定义&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们清楚软件建模的本质是对现实世界（人、事、物及规则）的映射，映射的产出物即包括编程系统和配置。配置为我们提供了&lt;strong&gt;动态修改程序运行时行为的能力&lt;/strong&gt;，即常说的“系统运行时飞行姿态的动态调整”，究其根源则是“我们人类无法掌控和预知一切，映射到软件领域上，我们总是需要对系统的某些功能特性预留出一些控制的线头，以便我们在未来需要的时候，可以人为的拨弄这些线头从而控制系统的行为特征。”&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，本文所指的配置特指内部运营人员产生的数据（广义的系统运营人员，包括产品、运营、研发等），并且作为输入参数而作用于编程系统（包括实时系统、批跑程序以及数据任务等）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;归纳而言，配置通常包含如下三种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a. 环境配置，定义了应用程序运行的环境相关参数，如 IP、Port 等；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;b. 应用配置，定义了应用程序自身相关的参数或者信息安全控制等，如初始内存分配大小、数据库连接池大小、日志级别、账号密码等；&lt;strong&gt;（密码、证书这类东西肯定不要放在配置系统中，而应当走统一加解密服务）&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;c. 业务配置，定义了应用程序所执行的业务行为数据，比如最常见的&lt;strong&gt;功能开关&lt;/strong&gt;，参与活动的商户名单等。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统约束&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据模型&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置最基本的数据单元是&lt;code&gt;key=value&lt;/code&gt;（即配置项），比如功能开关通常就是最简单的类型，用 boolean 型值来影响程序执行链路（不考虑灰度的情况）。然而只有 key-value 类型是不足的，比如 DB 的连接配置就包含了 ip、port、username、password 等字段，在 ini 文件的实现中即是不同配置项来组成，它们在逻辑上是属于同一个配置对象，因此基于面向对象的设计思路，&lt;code&gt;key=object&lt;/code&gt;才是更通用的配置模型，在物理实现中可以为 json 或者 xml，或者 protobuf message。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;object 类型的数据即可以是&lt;strong&gt;平坦的&lt;/strong&gt;，也可以是&lt;strong&gt;多层次（嵌套）的&lt;/strong&gt;。在实际的业务应用中，&lt;strong&gt;平坦&lt;/strong&gt;类型的数据有其特殊性，即其通常条目较多，最典型的数据是&lt;strong&gt;白名单&lt;/strong&gt;，可能多达上万条。线下，内部运营人员通过&lt;strong&gt;excel&lt;/strong&gt;进行这类数据的管理，如果我们只是粗暴的将其打包成一个对象，那么过大的数据可能会导致系统效率的下降（不是配置的写入效率下降，就是配置读出效率下降），因此我们会使用&lt;code&gt;array of plain object&lt;/code&gt;来表达，即&lt;code&gt;key=table&lt;/code&gt;类型的数据。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;访问模型&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相别于产品用户产生的数据，&lt;strong&gt;配置系统的数据流是单向的，离线系统与实时系统结合而读写分离（异步写、实时读）的&lt;/strong&gt;。最终我们要搭建的分布式配置系统，它的系统设计，也必然是建立在这类访问模型上的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35428571428571426&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlgDzXqicX6ZBiasNcltZ5saclia6dedQAN93IN6HVZUAf4WOJBvcSSh3TA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2100&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统约束&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;显然，内部运营人员作为生产者，所有的&lt;strong&gt;配置肯定都是文本类型的（Readable）&lt;/strong&gt;，并且&lt;strong&gt;数据量少&lt;/strong&gt;(相对于用户、系统等生产数据而言），对存储空间需求少，&lt;strong&gt;更新频次低&lt;/strong&gt;。可以这么理解，在整个配置系统架构中，输入方就如同键盘相对于 CPU 而言是超慢速设备，他们对系统的&lt;strong&gt;易用性、易操作性、安全性&lt;/strong&gt;要求更高。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;em&gt;我们思考下用户画像系统，它部分满足配置系统的访问模型，即数据流是单向的，离线系统负责写入画像数据，而实时系统读数据。但是首先它的数据生产者通常是离线任务，而非运营人员；再次，它涉及到的数据量是巨大的，通常需要定制的存储引擎。配置系统与之相比，不可同日而语。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相较而言，配置系统的消费者则是&lt;strong&gt;高频&lt;/strong&gt;的读访问，对系统的&lt;strong&gt;吞吐量&lt;/strong&gt;、&lt;strong&gt;延时&lt;/strong&gt;、&lt;strong&gt;网络流量&lt;/strong&gt;、&lt;strong&gt;可用性、一致性、请求单调性&lt;/strong&gt;都有更高的要求。后续我们逐一展开深入的思考。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置系统的设计应当充分考虑到上述的数据模型、访问模型以及系统约束。（比较奇怪的是，笔者在查阅相关配置系统实现时，鲜少看到有针对一致性、请求单调性的讨论。这也是促使笔者撰写本文的原因）&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安全约束&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正因为配置可以轻易的调整系统运行期行为，因此配置的安全性至关重要。实现安全的必要条件是：&lt;strong&gt;让正确的人，以正确的方式，在正确的时机，发布正确的配置&lt;/strong&gt;。因此，配置系统不但要&lt;strong&gt;支持灰度发布&lt;/strong&gt;的基本能力，还要在&lt;strong&gt;权限管理、权限粒度管理、配置变更审核、审计、历史版本&lt;/strong&gt;等方面都要加强建设。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;系统的演进&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;单机配置文件&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在单机系统时代，我们基本上都是使用配置文件来存储配置数据（比如 ini 文件、xml 文件等）。配置文件易于理解、便于实现、可用性高，因此进入分布式集群时代，仍在广泛使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而配置文件存在诸多的缺点，包括：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;易用性差&lt;/strong&gt;，主要体现为表达的数据类型单一，比如 ini 只能管理配置项，即 key=value 类型数据；而如果使用 xml 文件来管理 key=table 类型数据，那么文件内容的初始化效率低下，容易出错，难以维护；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可操作性差&lt;/strong&gt;，配置文件基本只能由开发来进行修改并且发布，产品、运营的常规业务素材变更工作就不得不卷入开发执行，对业务的流程效率有严重的影响；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;正确性、安全性难以保障&lt;/strong&gt;，正因为配置文件的易于实现，导致很多团队疏忽了运营系统的建设，研发人员随意修改、恶意修改配置文件的情况无法杜绝，细粒度的权限管理、操作的审核、审计无从谈起；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;发布效率低下&lt;/strong&gt;，配置文件是单机部署的，在集群规模较大的情况下，配置文件的任意变更都需要经过漫长的灰度发布过程发布到全网，如果配置文件是静态加载的，还需要重启二进制，需要消耗研发、运维人员较多的精力；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;文件一致性难以保障&lt;/strong&gt;，在发布配置变更的过程中，如果集群中出现宕机情况，会导致不同机器间的配置出现差异，而没有自动校正的能力，依赖于人员或者运维系统的支持，从而导致业务进入未定义的行为。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.24298621017593913&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlkicukmCCP39ON0A94aVicxcAMqt5vvlMnQn2u2gibf4y3S4c3qXKTyROw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2103&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说易用性、可操作性、正确性、安全性可以通过搭建运营系统来进行改进，而发布效率低下、文件一致性难以保障则是单机配置文件的致命弱点，究其本质，是因为单机配置文件系统是被动的、离散的接受外界的变更，而没有主动的能力。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;集中式配置文件中心&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由此，出现了集中式的配置文件系统，针对性的解决了上述的问题，开发人员将配置文件存储到独立的第三方服务（典型的由 ZooKeeper 进行管理，也有部分团队自行实现微服务管理），然后由 agent 周期性的将配置拉取到本地进行缓存（&lt;strong&gt;拉&lt;/strong&gt;），或者通过事件的订阅通知能力来将变更发布到相应集群（&lt;strong&gt;推&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.31351094196003804&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlzyMMyKiadSc5IxPWqEjibzfdYpS06vanyEEHfhE2aT8Fw1HQ8QcQ0atQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2102&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集中式配置文件系统针对性的解决了发布变更效率问题以及配置文件一致性保障问题。然而在笔者所知的应用案例中，仍然存在如下的问题亟需解决：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;一致性粒度粗&lt;/strong&gt;，集中式配置文件只能确保分布式集群达到最终一致（时间取决于拉、推的频率及速率），却无法保证任一时刻，对任一配置，所有进程、线程、协程看到相同的数据，而这通常会导致出现不预期的业务失败；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;无法保证请求单调性&lt;/strong&gt;，在一次业务请求中，我们希望用户看到的配置内容是静态的，如果中间发生变更，可能带来业务失败，严重的导致用户数据状态错乱；而基于集中式配置文件系统的配置通常是动态加载的，配置的变更可能随时的反应到实时系统中，导致一次业务请求先后看到不同的数据状态；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安全性仍无法彻底保障&lt;/strong&gt;，虽然集中式配置文件的修改可以控制权限，但是在消费者机器上，开发者仍然可以手动的修改本地配置文件 cache 来影响程序的运行行为；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;无法支持灰度能力&lt;/strong&gt;，配置文件变更的下发是全量的，如果要支持灰度发布的能力，就需要卷入业务方自行实现；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件系统，无论是单机配置文件，还是集中式配置文件，存在的问题，归根结底，是由于配置文件这个载体以及集中式配置文件系统的管道定位决定的，从而导致进行精细化管理的成本高：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置文件的可视可读能力对生产者而言是重要的，但对消费者却是无关紧要的，因此全链路都由配置文件作为载体反而可能导致&lt;strong&gt;加载效率低下&lt;/strong&gt;（比如应对千万级黑白名单，或者业务方实时请求链路动态加载）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置文件难以安全、便利管理元信息，为了实现一致性、单调性、安全性，配置需要一些元数据信息管理（下文展开详述），但是配置文件系统没有这种能力，除非业务方使用高成本自行实现；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置文件的数目与配置的数量息息相关，随着时间的发展，&lt;strong&gt;配置文件数目膨胀&lt;/strong&gt;，带来新的运营问题；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集中式配置文件系统通常只把自己定位成&lt;strong&gt;管道&lt;/strong&gt;（据笔者所知），即不理解也不维护配置文件的内容，agent 功能单一，业务消费方不与系统直接交互，而是只看到配置文件，虽然松耦合可以提高可用性，但也让业务方仍然投入不少的开发成本来处理配置文件。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件只是配置的物理载体，上述缺点并非无法克服，只是在基于配置文件的配置系统下，实现上述能力的成本高，需要更多的使用约束，以及外围配套。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据库配置存储&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对结构复杂、类型较多的配置，业务研发同学通常也不会直接使用配置文件来承载，而是使用数据库（关系型或非关系型）库表来存储配置，然后再编写工具进行数据的导入。这种存储方案克服了配置文件的部分问题，对配置有更精细化的管理。但是也存在明显的不足，即高度的定制化，不可复用，重复开发高。因此，我们需要对此进行完善，将配置的存储、读、写、管理等过程提炼共性，通用化、平台化。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;方案思考&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;物理模型&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然配置文件难以精细化管理，且具备易侵入的物理实体（本地文件），我们需要新的数据结构来承载配置。前文我们讨论过，配置有两种数据模型，分别是&lt;code&gt;key=object&lt;/code&gt;以及&lt;code&gt;key=table&lt;/code&gt;。对使用者而言，配置必须是可视、可读、易管理的。为了达成这目的，我们只需在内部运营人员与配置系统核心之间搭一套设计良好的&lt;strong&gt;运营系统&lt;/strong&gt;即可。那么在后端呢？对消费者而言，最注重传输、计算的效率，同时为了与微服务框架的对齐，&lt;strong&gt;protobuf message&lt;/strong&gt;无疑是最佳的形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而 protobuf 无法自解释，在没有 message 定义的情况下，我们即没办法将文本性的配置转换成 pb 二进制流，也没办法反序列化。因此必须将业务的 message 定义上提到运营系统，然而 protobuf 却对可视化编辑不太友好。因此一个可行的思路是基于&lt;strong&gt;JSON 数据&lt;/strong&gt;进行配置的定义、可视化操作、传输及存储。只有到达业务侧才进行数据类型的转换。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.14469300333174678&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlPPCH15korB8frykYMU7VpxfDcicCuIMQ2KmEAMiaUXvbaicZmLSwoVdicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2101&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;安全管理&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;搭建一套配置运营系统，让之成为运营人员管理配置的唯一入口，轻松就可以得到很高的回报。我们可以基于运营系统进行各种配置安全加固，如配置的变更必须具备相应的权限，而且只有通过审核才能应用到系统，所有的操作都要有审计的能力，配置的历史版本快速可查等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时灰度、回退等能力也需要基于运营系统进行操作。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2557142857142857&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlpq3KDhJSuzTWVXWic8R7sjnpoDvicndW25gK9rkQr2xnmhe4wj3icBvWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2100&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;配置系统 SDK&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文提及，集中式配置文件系统的管道定位，agent 只负责定期的拉取配置然后缓存到本地的文件系统。业务系统与配置系统松耦合。我们认为配置文件仍然具有较高的开发成本，对业务方而言，最佳的开发形式应当是：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; GetConfig&amp;lt;Message&amp;gt;(&lt;span&gt;const&lt;/span&gt; &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;string&lt;/span&gt;&amp;amp; key, ::google::protobuf::Message&amp;amp; msg);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而不需要再去理解文件内容、形式。那么我们就有必要为业务方提供一套配置系统的 SDK，将配置系统的细节、数据结构等信息都屏蔽起来，让业务只看到配置的 Protobuf Message 对象。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 SDK 的基础上，消费者只需轻度介入（业务插件，见下），我们就可以完成协议转换、配置缓存、进程，线程，协程快速最终一致、请求单调、灰度发布的能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;配置系统 SDK 是精细化管理的基础&lt;/strong&gt;，我们可以通过维护配置本身内容之外的&lt;strong&gt;配置元数据信息&lt;/strong&gt;来完成上述能力。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.21751546882436934&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlvjlpuupZ9SqXNAFzgwniciakY68sQrgwmGwWlyAthcEficnT2sIvpic90w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2101&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;异步化&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;异步化是配置 SDK 的关键&lt;/strong&gt;。很多本地缓存的更新是周期性的由实时链路请求负责，易于实现，但效率上存在问题，尤其考虑到我们还需要对配置进行配置业务逻辑的处理。因此，最佳方案应当是通过异步过程来进行配置的加载、初始化及其它逻辑处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异步带来的问题是异步过程与实时请求的并发问题，即异步过程在进行配置变更过程中，应如何处理实时链路的读请求，这是一个工程问题，我们会另文讨论，一个可行的思路是&lt;strong&gt;多版本及引用计数技术&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.37957244655581945&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlI9OYbu8UfFJDBncIEzVBDnyfFwxDkF5qG9kFd56YbD9V4fvjiaqooCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2105&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;业务插件&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异步为我们提供的另外一个好处是，业务可以在配置生效的时候进行一些初始化动作，比如进行进行&lt;strong&gt;配置正确性校验&lt;/strong&gt;，以及&lt;strong&gt;搭建业务适合的数据结构&lt;/strong&gt;。比如业务白名单在 pb 中只是一个数组，如果业务进行命中查找，代价比较高。业务最期望的方式肯定还是使用 map 来存储。因此配置 SDK 异步化，就为业务插件能力提供了基础。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.27423954372623577&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlEe3UuNxQvicQYwGkGbAia0AsZWMInicmVNLdq8kMzhJzH0IdZJy33wSpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2104&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;推与拉&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们更倾向于配置 SDK 主动拉取配置的更新。推与拉的辩证在于效率和可用性。推比较高效，不存在无用的网络消耗。但是推又引入了新的系统依赖（即事件中心）。如无必要，勿增实体，基于这样的思想，我们倾向于由&lt;strong&gt;SDK 周期性主动拉取&lt;/strong&gt;。至于效率，完全可以通过各种工程的手段加以优化，达到可以接受的程度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然这也取决于系统规模，如果我们要讨论的是公司机的配置系统，而不是部分中心级，那么我们也会认真的思考推或者推拉结合的模式。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;快速最终一致&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;无论是单机配置文件系统，还是集中配置文件系统，都存在严重的不一致问题。对一次配置变更，基本上都需要很长的时间才能达到最终一致（即所有并发看到相同的数据状态）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个可行的思路是&lt;strong&gt;多版本以及定时生效&lt;/strong&gt;。配置只有在未来的某个时间（该时间内 SDK 已经拉到了最新数据）才对外可见。至于如何确保所有 SDK 都拉到了数据，这涉及到可用性的问题，我们另文讨论。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.23750594954783436&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVl29mZXf7lWEf0pSYuHIcHD02NKhcuiavjcg6adFn2ia2WzIkeia5L0IibVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2101&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;请求单调&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定时生效没办法解决请求单调性的问题。&lt;strong&gt;请求单调性&lt;/strong&gt;是指，实时服务处理一次请求，在请求的调用栈过程中，读到的配置内容必须是静态、没有变动的，即使中间有待生效数据变成了生效数据。一个思路是我们可以通过&lt;strong&gt;线程私有变量&lt;/strong&gt;（协程私有变量）缓存配置版本即可。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;灰度发布&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在配置 SDK 多版本能力的基础上，实现灰度发布的能力也是轻而易举的。灰度发布的能力，不过就是选择生效配置版本的能力，如果本机、本角色、本请求业务 key（如用户、商户、订单）等命中灰度范围，则使用新版本，否则使用原版本。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.25131139723414403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/j3gficicyOvavVZf7eHBnCicVCPkFCwjfVlAx8MviaG69BBgempD5xMRnAmvObETXCDT9gxow541qCiajNCKObiaFIeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2097&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;效率提升&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效率提升包括降低网络传输数据量、降低配置存储服务的压力，这些都是具体的工程手段，我们不在本理论篇内讨论。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可用性提升&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式系统的可用性提升是老生常谈的话题，为了聚焦于配置系统独特的能力，我们本篇不专门进行讨论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（However，尽量减少系统中的单点，是一个重要的原则。在前节”推与拉“中也有涉及。同时为了业务的可用性，第三方配置系统的运营能力、故障主动发现能力、故障通知能力、再现及定位能力也非常重要。也这是重复造轮子的一个不得已的重要原因，很多团队软件可能作的不错，但服务能力（主要指运营能力）却有点差强人意。）&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;加入我们&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;境外支付团队在不断追求卓越的路上寻找同路人，岗位需求：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://careers.tencent.com/m/jobdesc.html?postId=1298934958332583936&quot; data-linktype=&quot;2&quot;&gt;28605-微信支付境外支付前端开发工程师（深圳）&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;10月24日，约你来腾讯滨海大厦&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;3.5164835164835164&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvathJtXibmj1iaEQC217HgGPiawibKQ8coQib2FW96OSmVdOOZrsbtP29pPEwqMLsUx30RI8K66pktzDhpw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;728&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;10.16 世界粮食日&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们用AI技术助力了一场光盘行动&lt;/span&gt;&lt;/h4&gt;&lt;span&gt;‍&lt;/span&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAqH0WReF1EgAAAAstQy6ubaLX4KHWvLEZgBPEx6EwJkhHT6L5zNPgMItSRNKrAt6Gsw0ShaWLH3DR&quot; data-url=&quot;https://findermp.video.qq.com/251/20350/stodownload?encfilekey=jEXicia3muM3GjTlk1Z3kYCefzc4VU4EAS349rsIhicRvwqMY1rPNVs7Mr3Zw2uQVyb2m8ASiaPO2kP67BJ4uzUWPzmqibPJLc4rLesJ7PmbCL84RImw611wYdnksbbvLCM1nF2EFKiafW44PT54iabG7F4a1icG6qZ3ibHyODd6oY3kobK0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SH&amp;amp;idx=1&amp;amp;m=a6dea7fde49f377219ff2eab5724d45f&amp;amp;token=x5Y29zUxcibA4jnHycsS44PCgdLMqKXOg3XBUx1pDrvFx4AKhCcF8tWzlsv1SPcqy&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xEecUymmic8cw4v7Y2zbnVDuo/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;拍照也能助力光盘行动？关于节约粮食，大家有什么妙招呢？  @腾讯公益  @微信派 #光盘行动#  #世界粮食日#  #节约粮食#  #技术公益# &quot; data-nonceid=&quot;4871113052233066306&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;‍&lt;/span&gt;欢迎关注视频号 腾讯程序员&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为你分享有趣、实用的腾讯产品&amp;amp;技术&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;&lt;span&gt;‍&lt;/span&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.729264475743349&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvatricjRxhpM1x45aB6doaVg7WMhINPwOiaqpskia1kH7hgibO0dicW2HLcW8HRGMzESQwehIcyckLXtwsA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4442327d6442dd5358f78ae8cd15ad53</guid>
<title>搞定客户端证书错误，看这篇就够了</title>
<link>https://toutiao.io/k/7wb56dd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;mPaaS&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;ant_mpaas&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;mPaaS (https://aliyun.com/product/mpaas) 源于蚂蚁金服金融科技，致力于提供高效、灵活、稳定的移动研发、管理平台。&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>