<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5cc0dbaa3c550045dd2c2340fb411fd5</guid>
<title>带你深入理解 Java 内存模型理论</title>
<link>https://toutiao.io/k/0ic2o68</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3529480&quot; data-style-type=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3356876&quot; data-style-type=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18170426065162906&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;798&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qMicvibdvl7p0KEd3bHYcm99nBiclZbia548oyvliaq8PrrmrcyuT3QS3urMcfaXDPEumnHP9KYcMV3Fad5Pepzic81Q/640?wx_fmt=jpeg&quot;/&gt;&lt;img data-ratio=&quot;0.23416666666666666&quot; data-type=&quot;gif&quot; data-w=&quot;1200&quot; class=&quot;__bg_gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qMicvibdvl7p0shmw7MKGyutc63KZyibndlEzXkYJiaS1fUicrkRRKdOhPHMOic2dB36fnECUbaN0h6EJNcYU0HuY49g/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3335002&quot; data-style-type=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;本文字数：&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;5036 &lt;/strong&gt;&lt;/span&gt;字&lt;/p&gt;&lt;p&gt;预计阅读时间：&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;30&lt;/strong&gt;&lt;/span&gt;分钟&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Java并发是一个很大的主题，包含很多方面的知识。&lt;/span&gt;&lt;span&gt;本文从内存模型的角度分析，从概念理论上尽量精确理解Java内存模型，及其对并发的影响。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3&gt;文章目录&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;一. 引入&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;二. 内存模型的理解&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1. 什么叫内存模型&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;2. 顺序一致性模型&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;3. happens-before 模型&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;4. Java内存模型 及 “因果关系”（Causality）&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;三. 提炼理念&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;1. 技术层次观念与思想方法的互通&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. executed 和 exhibit 的区别，及双向视图&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;一. 引入&lt;/h2&gt;&lt;h3&gt;1. 并发的概念&lt;/h3&gt;&lt;p&gt;&lt;span&gt;并发听起来是一个计算机术语，但计算机技术毕竟才发展百年，起初理念一定是来源于生活的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如在打饭窗口排队打饭，顾客排队的时候是空闲的，而打饭阿姨是忙碌的。没有并发的情况下，一个阿姨对应所有顾客，效率很慢。如果增加窗口同时进行，会成倍提高效率。当然，严格来讲这个情景可以叫“并行”，当每个菜盆在同一时间只有一个勺子可以打饭的时候才叫做“并发”。其中便包含了并发与并行的区别。由此可见，并发最原始的动力就是：充分利用长板，补齐短板，把空闲的东西利用起来，提高效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;特别的，在计算机技术领域。从冯·诺依曼提出计算机的五大组成部分开始，后来进一步抽象到主要由CPU、内存和I/O组成运转的体系，一直存在的问题就是速度差异巨大且一直存在，表现为 CPU 的速度 &amp;gt; 内存的速度 &amp;gt; I/O 设备的速度。为了充分开发利用计算机的潜能，体系结构、操作系统、编译程序等都做出了改变，比如CPU多核、流水线技术、进程线程概念、数据库中的事务处理等，足见这是一个普适的理念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有得必有失。在成倍提高效率的同时，并发也引入了新的问题。主要包括：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;缓存导致的可见性问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;切换执行导致的原子性问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重排序导致的有序性问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;这三个问题在很多文章中都有介绍，在此就不多赘述。为了解决这些问题，就引出了本文重点内存模型的概念。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;二. 内存模型的理解&lt;/h2&gt;&lt;h3&gt;1. 什么叫内存模型&lt;/h3&gt;&lt;section&gt;&lt;span&gt;还是先要明晰概念。内存模型是什么，用途是什么。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们已经知道，没有并发的程序执行起来效率是极慢的。于是在计算机技术的硬件软件各个层次对程序执行进行了大量的优化，比如缓存、并发、重排序等，但是这样会出现类似上一节中提到的安全性问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;“究其原因在于“共享内存”的方式，即线程之间通过读写内存中的公共状态来隐式进行通信。但是如果没有一个执行顺序的规则，这些公共状态就会被以随机或者无法预知的顺序规则进行修改，程序执行结果也就无法保证。”&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;内存模型就是应用于此的一种规则，一种标准，用来保证程序的最终执行结果是符合代码期望逻辑的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;引用 JSR-133 中，笔者觉得最经典的一句话：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;“These semantics do not describe how a multithreaded program &lt;/span&gt;&lt;span&gt;&lt;strong&gt;should be executed&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;. Rather, they describe the behaviors that multithreaded programs are &lt;strong&gt;allowed to exhibit&lt;/strong&gt;.”&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;顺便来提一下JSR-133是什么。JCP（Java Community Process Program）是管理 java 技术的官方组织，JCP制定的技术规范称为JSR（Java Specification Requests），可以翻译为Java规范提案。在 JDK5.0 中，加入了JSR-133的内容，JSR-133的全称是《Java Memory Model and Thread Specification》。这个提案更正了 volatile 和 final 语义的问题，也明确定义了Java内存模型的概念和规范，是直到现在Java并发编程的准则。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;原文中，should be executed，意思是应该如何执行，是实现层面的东西。而 be allowed to exhibit，意思是允许如何展示。由此可见，内存模型并不管底层是如何具体执行的，只是向上层形成了一个“视图”。在接下来的学习中可以慢慢体会这句原文。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;2. 顺序一致性模型&lt;/h3&gt;&lt;section&gt;&lt;span&gt;要理解Java内存模型，首先要理解顺序一致性模型：&lt;/span&gt;&lt;/section&gt;&lt;blockquote&gt;&lt;section&gt;&lt;span&gt;在顺序一致性模型里，所有动作以全序（程序顺序）的顺序发生，与程序顺序一致；而且，每个对变量 v 的读操作 r 都将看到写操作 w 写入 v 的值，只要符合：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;执行顺序上 w 在 r 之前&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;执行顺序上不存在这样一个 w’ ，w 在 w’ 之前且 w’ 在 r 之前。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;span&gt;以上是顺序一致性模型的定义，但是比较枯燥难懂。形象化地类比一下就像这张图：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;img data-ratio=&quot;0.2859259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPibDby2W85gUARhzIUrLBuko5YVhzZUhEUCIA3uNqx8I2BC13eazZreg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1350&quot;/&gt;&lt;section&gt;&lt;span&gt;在顺序一致性模型里，所有动作都存在一个全序关系，与程序顺序一致，每辆车都是有编号的，想让他第几个过去必须按照编号排队；每一个动作都是原子的，不存在一辆车分成两半通过的情况，中间也不能插队；每个动作执行后立即对所有线程可见，一个通过之后立马有个大喇叭向后面所有车喊：“XXX已经过去了”。而且拒绝了一切的优化，不管车的大小胖瘦，都不可以并排通过。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;术语表述就是：保证了有序性、原子性和可见性，且拒绝一切优化。由此可见，顺序一致性模型好像回到了最原始的阶段，所以只能是一种理想模型。因为如果实际采用的话，L1  L2 Cache、流水线技术等都将变为非法（硬件工程师几十年的努力就拜拜了）。现实中的处理器和语言都是在顺序一致性模型的基础上，为了执行效率优化，做了不同程度的实现变通。&lt;/span&gt;&lt;/section&gt;&lt;h3&gt;3. happens-before 模型&lt;/h3&gt;&lt;p&gt;&lt;span&gt;happens-before 是我们提及JMM最常讨论的一个词，happens-before 规则在JSR-133中是通过 synchronized-with 边缘来辅助定义的。许多资料上将其总结为6条规则，实际上JSR-133中有更多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先来说 Synchronizes-With 边缘的规则定义。关于“边缘”这个词，英文原文中就是用的“Synchronizes-With Edges”来表述的，我意会的意思就像如果没有这个边缘，语句的执行是在一个平面上的，是可以来回换且不影响的，但是一旦出现这个边缘，就上了一个台阶，和前一个平面是不能互通的。或者理解成“border”这个词，有点界限的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果存在以下七种情况，就认为存在Synchronizes-With 边缘。而只要存在Synchronizes-With 边缘，就存在happens-before关系。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“monitor锁定规则”：某个monitor上的解锁动作 synchronizes-with 所有后续在其上的锁定动作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“volatile变量规则”：对volatile变量v的写操作 synchronizes-with 所有后续任意线程对v的读操作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“线程启动规则”：用于启动一个线程的动作 synchronizes-with 该新启动线程中的第一个动作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“线程终止规则”：线程T1的最后一个动作 synchronizes-with 线程T2中任一用于探测T1是否终止的动作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“线程中断规则”：如果线程T1中断了线程T2，T1的中断操作 synchronizes-with 任意时刻任何其它线程（包括 T2）用于确定 T2 是否被中断的操作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“默认值规则”：为每个变量写默认值（0，false或null）的动作 synchronizes-with 该线程中的第一个动作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“对象终结规则”：调用对象的终结方法时，会隐式的读取该对象的引用。从一个对象的构造器末尾到该引用的读取之间存在一个 synchronizes-with 边缘；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;在Synchronizes-With 边缘的基础上，还加入了两条，程序顺序规则和传递性规则，这两条是最基本的。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;ol start=&quot;8&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“程序顺序规则”：如果 x 和 y 是 同一个线程中的动作，且在程序顺序上 x 在 y 之前，那么有 x happens-before y；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;“传递性规则”：happens-before 是传递闭包的。换而言之，如果 x happens-before y，且 y happens-before z，那么可以得到 x happens-before z。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;这9条共同定义了happens-before规则，满足这些的就可以说满足happens-before规则，具有了happens-before关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果一个动作 happens-before 另一个动作，则第一个对第二个可见，且第一个排在第二个之前。这在JSR-133中是一种非正式语义（Informal Semantics），是易于理解的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;happens-before已经是一种很强的保证了，所以我们经常说，一个操作是happens-before另一个操作的，就说明是可见的、顺序的、原子的。但是很多网上的理解都说happens-before就是Java内存模型的规则，这个当然是错误的。happens-before也是一种模型而已，它离真正的Java内存模型还差那么一点点。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;4. Java内存模型 及 “因果关系”（Causality）&lt;/h3&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;span&gt;终于到了主角。Java内存模型在JSR-133中有详细的定义，截取如下图：&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.8121178432462479&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPMqibSibQjPpLolH9Tf0GM24u7utjwoZy8P19KGYUBfyvp95uyzCWQkhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1799&quot;/&gt;&lt;section&gt;&lt;br/&gt;&lt;span&gt;其中用了很多符号和公式以及集合知识来表示线程的行为和行为之间的关系，但是太过复杂。确实只有这样他才能称之为一个规范、一个标准，是严密的经得起推敲验证的，有兴趣的读者可以自行研究。当然了，JSR-133也知道大多数人看不懂，给了一些解释，我们已经有了刚才两个模型的知识铺垫，可以迂回地去理解Java内存模型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Java内存模型和happens-before模型的那“一点点”差距，在于“因果关系”（Causality）。这是大部分博客都没有提过的，也比较绕。原文说的是，“Happens-Before is too Weak”。“因果关系”的表述是：一个写操作不能发生在一个其依赖的读操作之前，因为它涉及写操作是否会触发自身发生的问题。&lt;br/&gt;JSR-133原文目录如下图：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;img data-ratio=&quot;0.20935672514619882&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVP36y3T3FPulDtbu7hVVWbLx7at1gLg8ToRib1k1QwdACqJHmnbGqECEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1710&quot;/&gt;&lt;p&gt;&lt;span&gt;举一个JSR -133给出的官方示例，如下图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5842894969108562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPibN96ubGqbcQibI0JtMOS2qAN6cUrch9TiaVibEbPuhzVdStCPteoKlfVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2266&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;按照我们通常的理解，r1 == r2 == 0 是唯一合法结果。但是&lt;strong&gt;在 happens-before 内存模型下&lt;/strong&gt;，存在执行结果是 r1 == r2 == 1 的可能性，其原理如下图：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3722627737226277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPhn2Olcv94ptI3rUXicfUt2rHOMew4lfFZpbHOAic6737e0oOWfm6nTGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1644&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;happens-before 内存模型下，这里在执行 r1 = x 的时候，已经看到了 x = 1 的执行结果。我们会感到奇怪，赋值在 if 里，为什么会已经看到了x = 1的写操作结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为程序这样表现没有违反 synchronizes-with 或 happens-before 边缘，是完全符合happens-before模型规定的，允许每个读操作看到其它线程写的值。读者可能会对上一节第8条程序顺序规则产生疑问，但是上述执行顺序确实已经遵守了单线程中的程序顺序规则。&lt;strong&gt;因为 r1 = x 并没有看到 y = 1 的执行结果，r2 = y 也没有看到 x = 1 的执行结果，这才是单线程的程序顺序规则。&lt;/strong&gt;这个问题笔者当时也纠结了一周，直到读了很多遍原文才明白。r1 = x 读操作 和 x = 1 写操作是两个线程的事情，按照happens-before模型单线程的程序顺序规则是不相互制约的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;顺便一提，这里是解释“标准”或者说“规范”的一个绝佳的例子。还记得那句话吗， should be executed 和 are allowed to exhibit。happens-before 包括JMM都只是一种规范理论，而不去管能不能实现或者怎么样实现（真实情况可能由于多级缓存可能由于重排序也可能先执行再决定是否回滚等，这些都是实现层面的事情）。在此处，由于遵守了 happens-before 规则的约定，所以此顺序的任意读操作可以看到任意写操作的结果，也就看到了x = 1的写操作结果。总的来说，要从一个内存模型而不是内存模型实现的角度去理解它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;说回JMM，这种执行顺序是 happens-before 允许的，但JMM不允许，也就是上述的因果关系。所以，happens-before 模型可以理解为JMM的真子集，它们的差别就是因果关系（Causality）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因果关系正式的表述是：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;因果关系解决 什么时候一个顺序靠前的读操作 被允许看到 顺序靠后的写操作的执行结果（在 happens-before 基础上）：&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;具体到我们的代码，什么样的操作算是因果关系呢。其实我们的程序也就三种过程结构，顺序结构、选择结构、循环结构。在其中用到判断因果关系的地方，比如 if else, switch case等，用语义去理解就可以。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如如果感到幸福你就拍拍手，拍手的前提是感到幸福，这就是因果关系，是符合我们正常认知的，不用在写代码的时候刻意在意。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综上，对JMM的理解总结如下图：&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.6016771488469602&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPVVibLxFnD8TCbas2oTqVVfFexqY6YNUHh6JyzU18wTBBVJ53MGQuSqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;954&quot;/&gt;&lt;br/&gt;&lt;span&gt;我们终于可以比较全面地来理解Java内存模型了。Java内存模型是什么？上图是笔者总结JSR-133之后认为的干货。首先Java内存模型是一种共享内存方式的内存模型，它比起顺序一致性模型这种理想化模型要宽松很多，从编译到底层执行部分各个层次都做了不同程度的优化。和它最贴近的是happens-before内存模型，两者只相差一个因果关系的约束。在因果关系的前提下，只要它满足happens-before，就是JMM允许的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我们的编程中，尤其要注意上一节所说的 happens-before 的第 1- 7 条规则。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;了解JMM之后，我引用一个网上流传类似的图，看一下JMM在各种内存模型中处于什么样的位置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5470514429109159&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPZ88SgIpyMvPmfjd29fp9cqGmibc9gXbF2fJr2QEeFjicrzFDB0kjSVAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3188&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有两个可以说互斥的指标在约束着内存模型们。一般来说，易编程性越好，就是要注意的并发的坑越少，这个内存模型的执行性能就会越差。最极端的例子是顺序一致性模型，完全不用考虑这个变量会不会同时被两个线程操作之类的问题。当然我们不可能用这样的理想模型，因为我们对于执行性能是有很大要求的。菱形的是语言级别的内存模型，JMM相比C的内存模型会更严格一些，执行性能也会差一些。虽然语言级别的内存模型已经做了一些优化，但是处理器级别的内存模型还是会秒杀他们，对于用户不能感知的优化会更多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;三. 提炼理念&lt;/h2&gt;&lt;h3&gt;1. 技术层次观念与思想方法的互通&lt;/h3&gt;&lt;p&gt;&lt;span&gt;类似并发这样的思想在计算机技术的每一个层次都会用到。比如在CPU层为了并发用到了多级缓存，会产生不一致的问题，MESI协议在这一层解决了这个问题，给了CPU使用者一个统一的视图。但是在上层，如操作系统、汇编语言、高级语言等层次也会用到缓存等提高效率，这时候MESI不能解决这些层次的问题，需要该层次对应的解决办法，如高级语言层次的Java内存模型。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;2. executed 和 exhibit 的区别，及双向视图&lt;/h3&gt;&lt;p&gt;&lt;span&gt;内存模型对于开发者强调的概念是如何&lt;strong&gt;表现&lt;/strong&gt;，就像一个黑盒展现给人们的输入输出视图。JMM协调了底层硬件和上层开发者之间相反的需求，形象表示如下图：&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.33560864618885095&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p0eibqKmf1FgaH3M64V7YBVPT3Etzicz78WkIjKYcPpKM6Q8o67xOQBDia4eInibx2ApHghdJib9lyYic9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1758&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;JMM做出了双向承诺：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从Java开发者的视角，希望内存模型易于理解、易于编程，所以希望基于一个强内存模型来编写代码。JMM向开发者提供保证，只要程序是正确同步的（满足A happens-before B 和因果关系），那么A的操作结果一定对B可见，且A的执行顺序排在B之前。虽然这么说是骗我们的，但是我们心甘情愿被骗了。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;从编译器和处理器的视角，希望内存模型对其优化的束缚越小越好，这样就可以尽可能提高性能，所以希望实现一个弱内存模型。JMM遵循一个基本原则：只要不改变程序的执行结果（单线程程序和&lt;strong&gt;正确同步的&lt;/strong&gt;多线程程序），编译器和处理器可以随意优化。这里的“正确同步”就是指如volatile、synchronized等规定的具体规则，不多赘述。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;本文主要从内存模型理论的角度，分析了内存模型的概念和侧重点，运用逼近的方法理解Java内存模型，尤其深入了“因果关系”的概念，帮助大家了解 happens-before 模型和JMM的区别。同时浅析了JMM中涉及的技术理念。具体实践方面有更多的问题需要学习探究，如volatile、synchronized底层原理与应用方法、并发相关JUC类库等，可以继续深入研究。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-ratio=&quot;0.2777777777777778&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qMicvibdvl7p15cy8dCBsQ3qGTK2dseYLWrVLkN9aFvGpjpnjDGxz1LCUaNpQvHGPvkzokhibu8B66J5uOhiaHFslg/640?wx_fmt=gif&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;a class=&quot;weapp_image_link js_weapp_entry&quot; data-miniprogram-appid=&quot;wx17eb4d48e11ce306&quot; data-miniprogram-path=&quot;interbar/pages/topic?id=179189&amp;amp;type=2&quot; data-miniprogram-nickname=&quot;小互动助手&quot; href=&quot;&quot; data-miniprogram-type=&quot;image&quot; data-miniprogram-servicetype=&quot;&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.64&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p3iaGw410lUuf12ZXwtXKiaMyATYBpLfibvBvpmicsegZnX7JUe5T3eEzrOkbHibicd3em145Y5soC9Z0Lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.41875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/qMicvibdvl7p3emlMBeH8cjIR9M42WeicHrLqtvW5kllgTtwrO1eCibhhfYn20Lkiagb0xibNBk6JibBaNiazVDicQicDK4w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b9acae832203746487af70f7d9ba35dd</guid>
<title>手摸手搭建一个实时数据仓库</title>
<link>https://toutiao.io/k/lhucyfr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.42566510172143973&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEMvtSE9W0cqD6WjDWnxAO1DLC353dpD4JJVJ8ug2Dbs9iaySKAyYF00A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;639&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;    本文来自于大数据架构师吴庆志，江湖人称“中国好胖子”。稿件略有修改。&lt;/span&gt;&lt;/h1&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;99383&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;311:304&quot;&gt;实时数仓应用场景&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;场景决定一切。&lt;/span&gt;&lt;span&gt;离线数仓的时候数据更新频率是T+1，也就是说必须隔一天才能看到结果，今天看昨天的数据。但是数据界有一个确定的结论，就是数据越新，价值越大。于是就有了推荐、风控等各种实时应用场景，让数据在最有价值的时候被利用好。在这些场景中，对数据的实时性要求就非常高，往往需要毫秒级反应，否则会影响用户体验，带来不必要的损失&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    在最开始的时候，业界采用Storm进行实时数据流计算。后来有了&lt;span&gt;spark streaming，现在最火热的当属Flink了&lt;/span&gt;。在离线数据仓库架构设计的时候，大家知道需要分层，数据得落地在数据存储介质中，一般是各种数据库。但是实时场景，数据一直是在流动的，&lt;/span&gt;&lt;span&gt;数据怎么落地？怎么分层？以下图为例，数据从各种日志中实时读取过来，最后流向实时大屏，&lt;/span&gt;&lt;span&gt;大屏计算结果就必须得有个地方存着啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.210124826629681&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEib0sibnBo9TdWX66EPdFJlPcCGghJBrLV9Ij07wicC4FpGguypRdc4jyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1442&quot;/&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;99383&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;311:304&quot;&gt;实时数仓设计中需要考虑的问题&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;    上图看上去很不错，能在大屏上直接展示结果。但是一细看，就会有无数问题：大屏上需要展示多少&lt;span&gt;指标&lt;/span&gt;？面对任性的业务，面对他们&lt;span&gt; &lt;/span&gt;&lt;span&gt;无穷无尽&lt;/span&gt;&lt;span&gt; 的&lt;/span&gt;需求，作为技术能做的是怎么能更好的服务他们？如何做到以数据驱动业务的成长，以数据驱动产业数字化？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    业务的需求多变，指标可能是无穷无尽的，导致的也就是开发速度可能不尽人意。可能两天才有一个指标的产出，复杂的可能一个星期乃至更长。如果需求不能加以控制，我们将陷入无尽的任务中。如果拒绝需求，业务的需求得不到满足，数据团队存在的意义又会大大降低。我们该怎么办？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    那么我们有没有可能在牺牲一些查询速度的同时，来提升我们的开发速度，我们应该都知道spark streaming 和flink都是支持sql开发的。那么flink 或者spark streaming 来进行sql 开发，时效性和灵活性会比较低，直接开放给业务方，用户体验会非常不好。这是一个很值得思考的问题。那么我们又该咋办？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    我们是不是可以尝试将我们的binlog 数据以及埋点数据进行拉宽，也就是宽表化的一些操作？变成离线数仓那样的OLAP？自主化的查询呢？对，这就是实时数仓的诞生！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    实时数仓在我理解中呢，可以对外进行服务，并且可以实时的进行OLAP查询，也就是在线化查询 Ad-hoc化的查询。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;99383&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;311:304&quot;&gt;实战中实时数仓的架构演进&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;初始&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    在我刚来公司的时候，并没有实时数仓，只是一些批处理化的操作，并且是一种烟囱式的开发。数据流程是这样的，我们采用的greenplum来做的准实时数仓，每15分钟去业务库和神策系统拉取实时数据到greenplum中进行计算，如下图所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.27132579650565264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEYdRnyWrk4Vb7dOGHtfv3dnFbhIwK9h8WNK1K2uCDQhKcc1UyWxxehw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;973&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    我们这个时候肯定可以发现，假如指标多的时候，那么对于开发速度来讲是一个十分缓慢的一个过程，并且会造成很多数据的冗余计算，有些指标并不能复用。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;实时数仓0.1&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    在对公司情况有所了解之后，我选择了Flink作为实时数仓的核心组件。在熟悉了业务之后，我选了一个线上分析的需求，简单梳理了一下数据流向：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.20649651972157773&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcE5NibnkL5dq8DfahhfZiaibDgsPelkueB3TicCricqMsmyEaK8gGw8zXL2yQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;862&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    上线之后效果还不错，业务方非常满意，领导也加以赞许。但是后来慢慢的需求多了起来，我意识到拿flink写需求肯定会陷入无尽的任务。我明白必须要避免&lt;span&gt;烟囱式的开发&lt;/span&gt;，应该做好数据架构，把数据和业务彻底解耦！&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;实时数仓1.0&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    其实实时数仓也很简单，你把实时表都想象成离线宽表一样的话，那么直接在宽表上进行计算不就好了吗。OK，咱开始实战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    按照CIF设计规范，要拉宽这些数据表，得有核心场景。我们公司是比较关心销售的，把离线的销售宽表拿实时展现出来就是很好的一个场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    先确定数据源，我们的数据是从业务库来。但是我们的postgresql 比较老，并没有binlog这些的操作。我当初就和研发的架构探讨了一下，他们那边借助触发器来进行给我往kafka中打数据，解决数据源的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    然后解决数据质量问题，我对数据先进行了校验，也就是看看我要的字段是否都齐全，数据是否有问题。这两个问题都解决之后，就开始尝试用flink接入kafka的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3292181069958848&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcENfzxfIeySica2oQ9CPZdJ3DOv8A7ZDwPvY3UYz1Q9SSnhGnPraic85xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;486&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    这个时候我数据是拿到了，但是我需要拉宽，我应该怎么拉宽？我选择把相关维度表放置到redis，这样比较快。这样在flink的map方法中进行查询redis中的数据来进行拉宽维度表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7221095334685599&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcE5LrURKX39PTKicJLetCUgH2Yl6oXwU5MIgHy29LkSICKWVY9AW0SmOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    这个时候就来问题了，我的维度表是会更新的啊。我也就问了我们组的业务大佬，咨询了一下，发现维度表无非就是门店维表、品类维表（一级类、二级类、三级类等）、城市维表、商品维表、主推表等。这些都是缓慢变化&lt;span&gt;维&lt;/span&gt;，即使是更新，也会提前上线几天进行更新。并且我们在凌晨0点到2点是不进行出库操作的，我在这个时候进行维度表更新操作不就好了吗。那么也就有下面的设计，定时进行redis中的维度数据更新：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8862068965517241&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcECK4t2n9b1Bv6AvbLybMhWO7mIOSR29kKMUGBjtMj2Du8ckkgy9SX5g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    那么接下来我们就可以进行销售宽表的拉宽操作了，但是我这个时候又发现了一个问题，我拉宽之后存在哪里，这个时候我得思考的几点是。第一单表查询足够快、最好支持join。那么我开始的调研过几款 Tidb、Doris、Druid、Clickhouse。我在单机测试的表现上来看，clickhouse给我带来了无与伦比的感觉。并且考虑到当时的业务场景，也就毅然决然的采用了Clickhouse为基础的实时数仓。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8086330935251799&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEVRA2zB8ocuuzPpQ7J3B7WKc7vlibatFe7yCMuxq3uZEtT91K9n4sicbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;实时数仓2.0&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    然后就这样的一个架构持续了大概两个月的时间，业务也越来越复杂。比如：&lt;span&gt;门店需要对导购拉新来做当日的绩效考核，因此需&lt;/span&gt;要接入一些用户维度表。那么我们总计有2000多万的用户，我全部都导入的redis话会有一些问题。同时还有一些实时需求，例如要在用户宽表中标记出来这个用户是不是新会员、是否是孕妇等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    另外还有一些交易回溯分摊的问题，例如一个用户购买了一个A 产品，赠了一个B产品，那么这个时候，品类间的毛利就有了一些损失。例如买一件衣服送一罐奶粉，那么这个时候就有了问题，不同品类的负责人不干了，因为赠品的KPI少了。衣服的总监愿意啊，买的人多了，但是奶粉的总监不干了，我毛利没了啊。所以就有了回溯分摊这一个事情。人生太艰难了，解决技术问题，还得解决业务问题&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEibdtVbZk7SblXDrWeRPsB8Ct4Yc5ek6nPkmB2BTe1ibwzxvStDp2QJCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    我就写了个flink程序，自定义了一个source实时的去库里面拉取数据，因为没有binlog。但是不能实时的去啊，对库的影响太大了。那么这个时候就想到了我每次间隔一分钟去拉取一次放到redis当中，然后flink join 的时候就写入到clickhouse中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    对于没有join上的，就放到kafka的另一个topic中例如 &lt;span&gt;dws_sold_detail_retry&lt;/span&gt; 然后再开一个flink 专门消费这个。假如还没有join上 就继续放到这个topic中，在日志中追加一个重试次数，假如这个消息重试了超过5次，则认为消费失败，不再消费。为了避免此类情况影响统计结果，我增加了一个实时数据监控，每天的销售额差异不能超过百分之3，超过就报警，进行人工干预。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5314232902033271&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEsLgjrAiaI9NticXqahzXhEHwz95qbwlS4og2ZpkGeaQBZv9aic0MfKOlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1082&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    就这样，慢慢的加入了其他的一些宽表，例如库存、优惠券、会员宽表、促销宽表等。但是慢慢的问题也有了，那就是flink写入clickhouse的时候假如表特别宽的话，代码量是很大的。后来我就引入了waterdrop。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4150375939849624&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcENsfuiawu5a5U2ZzggrGTK6OXEHGjbnjrspz5sBPKfyhUQlV5KPhWiaaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1330&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是以上的架构图。&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;99383&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;311:304&quot;&gt;实战总结与发展&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在以上的架构中，我的核心思想就是，用flink拉宽、计算之后，交给olap引擎做多维分析，对数据和业务进行解耦。&lt;br/&gt;这个架构是灵活可扩展的，部分组件是可以完美的可插拔的，例如flink可以改成spark streaming、storm。clickhouse可以根据不同的业务场景更改为tidb、drois、greenplum、kudu等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;那么上面的架构也有一些问题，例如维度表太大了怎么办，后面我又引入了二级缓存。也就是引入的hbase，并且支持对外提供查询三个月内的数据实时查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最终架构图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5966460723742277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEXxtVo5sBZFDnyWarqVvJDYM3jPdReeTwlhg0p009LEx8yQuq2HpLpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1133&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    以上就是中国好胖子吴庆志的分享，有任何问题，欢迎添加好胖子微信&lt;span&gt;wuqingzhi128&lt;/span&gt;私聊，代价：&lt;/span&gt;&lt;span&gt;一顿烧烤&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    扩展阅读：Flink+ClickHouse+各厂实战分享案例，后台回复“&lt;/span&gt;&lt;span&gt;实时数仓&lt;/span&gt;&lt;span&gt;”即可下载。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.217032967032967&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/7VHriaQOsnjk98H81yKwVa5cYQ8pDlhcEoLeNFdOIsLlTPTZZyGfzPQm6DL4CQsnF29YVNlBaAk8tVGj8jaBJyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;364&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;配合以下文章享受更佳&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-bdless=&quot;spin&quot; data-bdlessp=&quot;280&quot; data-bdopacity=&quot;50%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247485555&amp;amp;idx=1&amp;amp;sn=9e9a13ad3f384ec269e3cdb3601d2c02&amp;amp;chksm=97225b6ea055d27893a516220fcc772f596abf2e8e2b0be40af3366db5998c3cc7757e1db866&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;【附下载】实时数仓架构设计与选型&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247485719&amp;amp;idx=1&amp;amp;sn=6c84886621565fe5554db4e7422ec29f&amp;amp;chksm=97225a0aa055d31caddae1a24e0fe4152f5cd4531ffd3da8d72bf25e310c37b282afb3710e8d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【附下载】手摸手带你搭建广告需求平台DSP&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;【附下载】手摸手带你搭建广告需求平台DSP&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247485372&amp;amp;idx=1&amp;amp;sn=20359e5a696144ace29f1b705ca69f97&amp;amp;chksm=972254a1a055ddb7944bfacd7927df6188276c8668411b538ad1ea60ea54c1fd0bb6af702b39&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【附下载】ClickHouse为什么这么火？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【附下载】ClickHouse为什么这么火？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247485146&amp;amp;idx=1&amp;amp;sn=add1643c853e2372939672522cb76178&amp;amp;chksm=972255c7a055dcd1bdc44234f427a67f5d854bbd67d63dc0ff58384deb8ff9b5b9229ccfc633&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【详解】SparkStreaming实时任务处理的三种语义&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【详解】SparkStreaming实时任务处理的三种语义&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwNjM0MTc0Ng==&amp;amp;mid=2247485307&amp;amp;idx=1&amp;amp;sn=6bf9b05fa022f71af229652508c4c2b6&amp;amp;chksm=97225466a055dd702ce0037df78b286ecb04fea1a440d4652fe7d228a86dec7ea0f5eae212b4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;【详解】Flink的Checkpoints机制详解&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;【详解】Flink的Checkpoints机制详解&lt;/span&gt;&lt;/a&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>71e124e52821f0388fef8ce97b2ef42c</guid>
<title>21 大软件架构特点的全面解析</title>
<link>https://toutiao.io/k/2n0entj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;作者 | sergiuoltean&lt;/section&gt;&lt;section&gt;策划 | 万佳&lt;/section&gt;&lt;p&gt;众所周知，架构特点多以&quot;ility&quot;结尾（例如 scalability、deployability），也被称为 NFR（非功能需求）、质量属性。架构的特点没有固定清单，但标准是有的，就是 ISO25010：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.28203125&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqVFrDFzHyB9k3US7k8UdllGNpeuibRBMD0f4C6UbOe1k2Qw9hmzNQa9Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们从业务需求（业务特征）、我们期望的系统运营方式（运营特征）中总结出这些特点，它们是隐式的、贯穿各领域，是架构师在字里行间能看出来的特点。《软件架构基础》书中的这张表是隐藏特点的一个例子。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.24406224406224405&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqiaO89N3PN3Quvvn5oz6zDXIZTD4ZhyXibWHoMibiauodxZ2yzzdVF5IiaVg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;《实践中的软件架构》一书中对架构特点解释得很清楚。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4306640625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erq6zECHjPicDPLxm41ZeTiaI08emicaFDcofcYTlNBLibMlgPflviawQ16K3g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;刺激的来源（Source of Stiumulus）可以是角色、触发事件的东西等。刺激（Stimulus）是实际产生的事件。环境（Environment）代表事件发生的系统条件。工件（Artifact）是系统中正在被刺激的部分。响应（Response）就是工件在我们应该度量（measure）的刺激下的行为方式。背景了解完毕，让我们来看具体的特点。&lt;/p&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;性能&lt;/section&gt;&lt;p&gt;根据 Smith 所说，“性能是指响应能力：响应特定事件所需的时间，或给定时间间隔内处理的事件数”。性能可以有以下指标：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;延迟&lt;/strong&gt; 。表示获得响应之前经过的时间，这里指的是一段时间。我们有最小延迟（开始时间）和 &lt;strong&gt;截止日期&lt;/strong&gt; （结束时间）。衡量延迟的其他因素包括 &lt;strong&gt;优先级&lt;/strong&gt;（我们在其中查看响应的顺序）和 &lt;strong&gt;抖动&lt;/strong&gt; （随时间观察到的延迟波动）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;。是指在固定时间间隔内获得的响应数。但为了提高精度，我们应该度量多个时间间隔。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;可用容量&lt;/strong&gt;。以上度量的结合体。在不超出延迟要求的情况下可实现的最大吞吐量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;可调度的利用率&lt;/strong&gt;。利用率是资源繁忙时间的百分比，而可调度的利用率是满足一定时间要求的最大利用率。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据丢失&lt;/strong&gt;。如果使用缓存来提高性能，那么缓存未命中将成为性能指标。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span/&gt; 提高性能的技术&lt;/section&gt;&lt;p&gt;首先我们要了解影响性能的因素。&lt;/p&gt;&lt;p&gt;我们需要控制需求，为此我们可以使用队列、节流和背压机制。通过改进算法，我们可以减少资源需求。通过设置最大响应时间（超时）和某种优先级，我们可以进一步控制需求。&lt;/p&gt;&lt;p&gt;可以使用垂直缩放来获得更好的响应时间。提高性能的另一种方法是并发。还需要注意阿姆达尔定律。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7503105590062111&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;805&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqkHkGgQ2nGKvvCoiaTV5nlOb4ltrOxItm0MqrEjIVqCAwChaEtpcRV6Q/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加速效果的瓶颈是程序的串行部分。例如，如果 95％的代码可以并行化，则并行计算的理论最大加速比将是 20 倍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;限制你的资源、对所有内容（线程、队列）实施固定的生产限制、规划资源使用并尽可能避免争用……这些说起来容易，做起来难。还可以充分利用缓存、水平缩放、添加多个处理单元等。&lt;/p&gt;&lt;p&gt;你应该了解你的框架和你的数据库，并优化它们。&lt;/p&gt;&lt;section&gt;&lt;span&gt;2&lt;/span&gt;可靠性&lt;/section&gt;&lt;p&gt;根据《牛津词典》，可靠意味着质量或性能始终如一，且能够被信任。可靠性可以用平均故障间隔时间（MTBF）来表示，可靠性 =exp（-t/MTBF）。&lt;/p&gt;&lt;p&gt;可靠性很难用数字度量。我们可以用一些软件指标衡量复杂度和代码覆盖率，以了解可靠性的边缘情况。适应度函数也可用于度量可靠性。未解决问题的数量、成功的构建和部署的数量也是一些可用指标。ISO-9001 是衡量可靠性的另一种方法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://sergiuoltean.com/2020/04/29/fitness-functions/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 提高可靠性的技术&lt;/section&gt;&lt;p&gt;遵循最佳工程实践将产生更好的产品。使用更好的管理实践和流程，可以实现更高的可靠性。突变测试技术会让系统考虑边缘情况。混沌测试是提高可靠性的另一个重要工具。总之我们要强化系统来提高可靠性。&lt;/p&gt;&lt;section&gt;&lt;span&gt;3&lt;/span&gt;可用性&lt;/section&gt;&lt;p&gt;表示可用系统时间与总工作时间的比率。这是可靠性之上的另一层。它是系统掩盖或修复特定阈值（例如时间间隔）内故障的能力。可用性可以表示为&lt;/p&gt;&lt;p&gt;在公众号互联网架构师后台回复“2T”，获取Java面试题和答案惊喜礼包。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.30526315789473685&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;380&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqtkqWLJibqaGVWw8aKuxrCLAFYVIxu4hOw7q8wVB9dswQb54Tcq4U8aw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;MTBF= 平均无故障时间；MTTR= 平均修复时间&lt;/p&gt;&lt;p&gt;于是我们计算出下表：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2532894736842105&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1216&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erq5viaev7W7cZ6Fiaicc4OgLcfWGeVZEaKBwicZI4dXxOWvdVQdtd2HzZfaw/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 提高可用性的技术&lt;/section&gt;&lt;p&gt;为了提升它，首先我们需要检测潜在的故障。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.21428571428571427&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erq6guAullicqfZVgjtTuh4SefwcHC6OIeqr9zKMbmb4mJl48OWsH2Zc5Q/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;检测到异常情况后，我们可以进行干预。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3235053235053235&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqHHiaLlc8VHJvliaNFm3hVS1icpKgiaxHKuetLkhAPqmdjly309jJz9oNyQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;4&lt;/span&gt;弹性&lt;/section&gt;&lt;p&gt;弹性指的是系统遇到问题时可以降级（而非中断服务），等待问题修复完成，表示的是系统在遇到严重故障时的持续运行能力。为实现弹性，需要提前设置防御机制（断路器模式）。弹性有时被称为&lt;strong&gt;容错性&lt;/strong&gt; 。弹性系统指的是可以适应压力并持续运行的系统。很难用数字指标来度量弹性。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 增强弹性的技术&lt;/section&gt;&lt;p&gt;首先是确定潜在风险：系统有哪些关键功能？哪些硬件至关重要？然后我们需要实施保护策略，为此需要检查哪些事件可能导致这些重要部件发生故障。找出风险因素后就需要确定容忍阈值。具体的保护策略包括对请求数和线程数施加限制、缓存相同的请求、批量发送请求等。&lt;/p&gt;&lt;section&gt;&lt;span&gt;5&lt;/span&gt;可信赖性&lt;/section&gt;&lt;p&gt;它包括&lt;strong&gt;可靠性&lt;/strong&gt; 、&lt;strong&gt;可用性&lt;/strong&gt; 、&lt;strong&gt;弹性&lt;/strong&gt; 、&lt;strong&gt;可持续性&lt;/strong&gt; （可用性 / 弹性的比值）、&lt;strong&gt;可恢复性&lt;/strong&gt; （弹性函数）和 &lt;strong&gt;稳健性&lt;/strong&gt; （可靠性函数）。我们应该始终将它们视为一个整体。&lt;/p&gt;&lt;p&gt;拿一辆汽车来说，如果它是新车并且是知名的可靠品牌（例如梅赛德斯），我们可以说它是可靠的。它有备用轮胎，所以有一些可用性。四轮驱动意味着弹性，其中两轮出故障还有两轮能工作（但性能会下降）。可持续性是可用性（备用轮胎）和弹性（四轮驱动）的综合。健壮性在这里可以指道路通过能力。如果汽车是电动的，那么充电速度就是一个可恢复性指标。&lt;/p&gt;&lt;section&gt;&lt;span&gt;6&lt;/span&gt;可伸缩性&lt;/section&gt;&lt;p&gt;它是系统在重负载下在可接受的阈值内的执行能力。它分为手动和自动可伸缩性两种，后者也叫 &lt;strong&gt;灵活性&lt;/strong&gt; 。当负载突增时，系统会做出反应并水平缩放（添加 / 删除更多实例）。我们可以查看 CPU 和内存来观察这些突发事件。这些突发操作完成后，系统将杀死不必要的实例，从而降低成本。垂直伸缩意味着我们向系统添加了更多物理资源（例如更多的内存、更好的 cpu）。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 实现可伸缩性的技术&lt;/section&gt;&lt;p&gt;这里涉及到 devops，最好使用 aws fargate 之类的云服务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://aws.amazon.com/fargate/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;下图中可以看到放大和缩小策略。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3251953125&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqictxBRPIvNIDX5kz4Fg7qEJk6VdYhfT3DTxjlgbUx7USx7QJU3uvsibw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;7&lt;/span&gt;安全性&lt;/section&gt;&lt;p&gt;它实际上是许多特点的集合：&lt;strong&gt;机密性&lt;/strong&gt; 是指系统保护用户数据安全的能力；&lt;strong&gt;完整性&lt;/strong&gt; 是保护外部资源免遭篡改的能力；&lt;strong&gt;身份验证&lt;/strong&gt; 允许用户访问系统；&lt;strong&gt;授权&lt;/strong&gt; 则告诉用户可以访问系统的哪些部分。授权通常使用 RBAC、ACL 或 ABAC 来实现。&lt;strong&gt;不可否认性&lt;/strong&gt; 保证了消息的发送者不能否认自己发送了消息，并且接收者也不能否认自己接收了消息。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 增强安全性的技术&lt;/section&gt;&lt;p&gt;首先我们需要检测。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1722723543888433&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1219&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqnGXRrSgAyiacrwUFzmKc3p7as8nV0Dju5txibtFXWlONeP5kMFhtawMQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;针对攻击行为，我们需要制定灵活的应对策略。大多数情况下我们可以撤消访问权限，在某些极端情况下我们可以关闭系统，当然最好还是避免后一种情况出现。最好使用成熟的安全解决方案，自行实现往往不是好办法。&lt;/p&gt;&lt;section&gt;&lt;span&gt;8&lt;/span&gt;互操作性&lt;/section&gt;&lt;p&gt;它表示系统与外部系统通信的能力。合约接口是互操作性中最重要的概念，其涵盖了通信的所有方面，包括错误处理。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善互操作性的技术&lt;/section&gt;&lt;p&gt;最好的策略是使用企业集成模式。如果用到多个通信协议，这种策略就是最佳方法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://learning.oreilly.com/library/view/enterprise-integration-patterns/0321200683/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;9&lt;/span&gt;可调整性&lt;/section&gt;&lt;p&gt;也称为 &lt;strong&gt;可变性&lt;/strong&gt; ，其描述了系统变化的难易程度。一般来说它是一个隐含的特征。作为架构师，你要知道系统变化的概率是未知的，但一旦出现变化，系统应该能够优雅地应对。变化是软件世界中唯一确定的事物。话虽如此，我们不能将整个系统都设计为可变组件。如果每个组件都是即插即用组件，设计就做不完了。因此我们需要找到那些变化概率很高的部分。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改进可调整性的技术&lt;/section&gt;&lt;p&gt;有两个维度。作为一名架构师，你需要确定哪些部分具有较高的变化概率；作为软件工程师，你必须确保这些部分容易改动。遵循 SOLID 原则是一个很好的开始。可以使用适应度函数度量传入和传出耦合。我们需要计算变化成本。比如要构建一个 UI 表单，它需要的位置比我们最初想像的要多，则我们可以复制粘贴代码并进行必要的调整，也可以构建一个新组件并插进来。然后我们得到了变化的成本：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;N x 编写代码的成本（复制粘贴）&amp;lt;= 编写组件 +（N x 将其插进来的成本）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;还需要考虑时间，观察较长的时间才能得到可靠的观察结果。&lt;/p&gt;&lt;section&gt;&lt;span&gt;10&lt;/span&gt;可部署性&lt;/section&gt;&lt;p&gt;所有系统都应封装在某种工件中，可以是 war、jar、ear、apk、dll、gem 等。它们被部署在能够运行它们的环境中。由于 docker 的进化，现在我们可以在一台机器上拥有多个环境。可部署性是一种将代码转换为客户可用产品的机制。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善可部署性的技术&lt;/section&gt;&lt;p&gt;最有效的是实施持续集成 / 持续部署（CI/CD）。认真的话，每次代码推送都将触发一个生产部署。为此，应通过适应度函数和自动化测试来保护你的代码。它是抗脆弱性的关键部分。我们希望能按需部署，一键完成工作。我们也会部署硬件。使用基础架构即代码之类的技术可以提高效率。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqzn6VSE0NOrhUxApjTwYtAhCpu6Okwo1AQPicVU2MFOiapYbS2KiazAAsg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;11&lt;/span&gt;可测试性&lt;/section&gt;&lt;p&gt;在所有系统中它都是一个重要特征。我们必须确保构建的系统尊重了客户的需求。复杂的系统很难测试。以微服务架构为例，我们有很多独立开发的活动部件。这个特征经常会让步给其他特征。为了使系统可测试，我们需要能控制每个组件的输入和输出。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善可测试性的技术&lt;/section&gt;&lt;p&gt;请尽量控制系统的复杂性。我们应该构建较小的组件，不要重新发明轮子；还应该编写可测试的代码，在适当的位置应用 TDD。&lt;/p&gt;&lt;section&gt;&lt;span&gt;12&lt;/span&gt;简单性&lt;/section&gt;&lt;p&gt;这条特征是很难实现的。一切都是权衡取舍，而大多数情况下这一条都会被牺牲掉。但如果我们需要在有限的时间内快速构建某些东西，那么就应该优先考虑简单性。在构建 MVP（最小可行产品）时，我们关心的只有简单性。但请注意，实现目标之后，我们不应丢掉所有东西。不要与 PoC（概念验证）或某种 R&amp;amp;D 混淆。&lt;strong&gt;可重用性&lt;/strong&gt; 在这里也很重要。在公众号互联网架构师后台回复“2T”，获取一份惊喜礼包。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善简单性的技术&lt;/section&gt;&lt;p&gt;可以构建粗粒度的组件；使用 RAD 框架，例如 ApacheIsis、Vaadin 或 JHipster；牺牲简单性之前请确保自己能承受对应的代价；遵循 KISS 原则。记住时间是关键：先跑起来，再考虑美观和性能。&lt;/p&gt;&lt;section&gt;&lt;span&gt;13&lt;/span&gt;可移植性&lt;/section&gt;&lt;p&gt;指的是系统从一个操作系统移植到另一个的能力，它会影响编程语言的选择。例如，我们知道为了运行 Java 代码需要一个 JVM，因此问题就是“JVM 是否可移植？”答案是肯定的。另一个例子是 golang：它打包为二进制文件，不需要外部依赖项，因此是可移植的。一些微软专属技术就不行，它们只能运行在微软操作系统中。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善可移植性的技术&lt;/section&gt;&lt;p&gt;一个显而易见的选项就是容器化、docker。一个 docker 引擎能够运行多个隐藏了实现细节的 docker 容器。&lt;/p&gt;&lt;section&gt;&lt;span&gt;14&lt;/span&gt;易用性&lt;/section&gt;&lt;p&gt;谈到易用性时通常会提到 &lt;strong&gt;可配置性&lt;/strong&gt; ，即用户自定义系统的能力，比如通过 UI 主题更改外观和配置系统行为（例如控制用户访问权限等）。还有 &lt;strong&gt;本地化&lt;/strong&gt;，也称为 i18n（internationalization）。它指的是系统支持多种标准的能力，一般是通过用户体验（UX）实现的。这里的标准指的是语言、货币、公制单位、字符编码等。本地化资源通常是静态的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;可访问性&lt;/strong&gt; 是另一个易用性特征。世界上有些人是残疾的（失明、听力受损、色盲），我们如何确保这些人可以受益于我们的系统呢？对于色盲来说，选择颜色会花很多时间。Siri/Alexa 是盲人的好帮手。考虑可访问性时，请想到我们的祖父母是不是能方便地使用我们的系统。&lt;/p&gt;&lt;p&gt;另外还有 &lt;strong&gt;可支持性&lt;/strong&gt; ，比如说帮助页面或者 24x7 技术支持。我们应该努力让系统直观易用，这会影响可学习性，也就是用户习惯系统所需的时间。用户培训和帮助页面之类的策略很好用。&lt;/p&gt;&lt;section&gt;&lt;span&gt;15&lt;/span&gt;可扩展性&lt;/section&gt;&lt;p&gt;它是描述系统对即插即用组件需求程度的特征。对于使用内核架构的系统来说，这是很重要的特征。Eclipse Platform 和 OSGI 标准就是经典的例子。&lt;/p&gt;&lt;section&gt;&lt;span&gt;16&lt;/span&gt;抗脆弱性&lt;/section&gt;&lt;p&gt;它是系统应对压力、冲击、波动、噪声、错误、故障或攻击的能力。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8887993553585818&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1241&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqRaQgOWhjpJNO9eeIc9UNz8y2TKtUCnDexX76UqjHoSfYmBvANTGtgg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善抗脆弱性的技术&lt;/section&gt;&lt;p&gt;首先我们要敲打敲打系统。可以使用 CI/CD，它们本来就是做这种事的。每次代码更改都必须投入生产。当然，我们也要有防御机制，适应度函数就是个好方法；Simian Army 也是个不错的工具。&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://github.com/Netflix/SimianArmy&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;17&lt;/span&gt;可升级性&lt;/section&gt;&lt;p&gt;它是指系统无缝升级自身的能力。对于非 Web 产品（例如 App Store 和 Google Play），这很容易实现，因为它们的升级能力是嵌入到 OS 中的；涉及到 Web 应用时，事情就麻烦多了。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善可升级性的技术&lt;/section&gt;&lt;p&gt;首先我们需要为服务提供版本控制。下一步是使用蓝绿部署或金丝雀部署等策略进行零停机的时间部署。&lt;/p&gt;&lt;section&gt;&lt;span&gt;18&lt;/span&gt;合规性&lt;/section&gt;&lt;p&gt;不管我们需要的是哪种第三方工具和框架，都应该得到它们的合法授权。我们需要重视开源软件的合规性因素，因为它们可能会附带一些我们不想要的额外约束。没有人愿意暴露自己的源代码，因此我们应该远离 GPL 许可证。在欧盟，《GDPR》已成为强制规定，因此我们需要确保系统符合其规定。还要考虑一些 ISO 标准，公司可能需要遵循某些流程才能符合它们的要求。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FE4VibF0SjfP4FIqmEzg5sEcuGxyg2erqc34toXzc9KFA2TNLzt6Tt6j9FNNDQZGbPg2ZMISO78AHNjcTeoxARA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 改善合规性的技术&lt;/section&gt;&lt;p&gt;理想情况下，每家公司都应该有一个法律部门，但现实并非如此。适应度函数（例如许可证检查）可以保护我们免受列入黑名单的许可证的影响。在设计系统时，我们必须找到一种保护用户数据隐私的方法。&lt;/p&gt;&lt;section&gt;&lt;span&gt;19&lt;/span&gt;成本&lt;/section&gt;&lt;p&gt;可能是最重要的架构特点。一切都有成本，虚拟的、还是现实的都一样。任何成本都可以换算成金钱。如果我们需要购买某些工具（IDE）、云服务（例如 AWS）、第三方框架（例如 new-relic）的许可证，则总会产生财务成本。开发团队也要发工资，学习新技术或培训团队成员需要花钱。不尊重敏捷宣言是有代价的；错误的代码要付出代价；缺少单元测试会有代价；缺少 CI/CD 会有代价；没有基础架构即代码也会有代价……这个列表是没有尽头的。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 降低成本的技术&lt;/section&gt;&lt;p&gt;帮助客户控制成本是我们的责任。我们需要区分单纯的成本和投资，并让客户相信投资是划算的。&lt;/p&gt;&lt;p&gt;以 Scrum 流程为例，我个人认为它没什么用。在一个固定的周期（通常为两周）中，我们有这么多的仪式（计划、站会、演示、回顾），然后根据（猜出来的）估计值做计算，结果 Sprint 完成度 100％只是偶然而非必然。我们需要敏捷和适应，而不是盲目地遵循流程。我们应该减少会议和仪式，这样成本就会下降。我们应该专注于完成工作的本质要素。&lt;/p&gt;&lt;p&gt;测试是必要的投资，快速前进的唯一方法就是正确前进。我们必须说服客户，从长远来看，成本是会下降的。测试会减少错误的数量，从而减少成本。&lt;/p&gt;&lt;p&gt;代码质量是另一项投资。好的代码将带来更好的测试，提高稳健性、可维护性、可调整性等。与难以维护的系统相比，我们的更改花费的时间会更少，成本会下降。&lt;/p&gt;&lt;section&gt;&lt;span&gt;20&lt;/span&gt;可存档性&lt;/section&gt;&lt;p&gt;指系统保留历史数据记录的能力。在数据是一等公民的系统中（例如财务系统），这个特征非常重要。数据绝不会删除，而只会归档，这主要是考虑到法律要求。可归档性是对可审计性的支持。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 实现可归档性的技术&lt;/section&gt;&lt;p&gt;首先是在数据上使用时间戳（例如 updatedOn、createdOn）。然后要有一个 cron 作业，将所有低于特定阈值的数据移入历史表中。另一种技术是将数据标记为软删除，但这会影响查询性能。&lt;/p&gt;&lt;section&gt;&lt;span&gt;21&lt;/span&gt;可审核性 / 可跟踪性&lt;/section&gt;&lt;p&gt;这是支持重构历史的系统特征。我们必须记录所有关键操作（尤其是在安全场景中），以便重现问题并从错误中学习经验。我们也可以将这些记录用作法律依据。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 实现可审核性的技术&lt;/section&gt;&lt;p&gt;记录每个关键操作并集中存放这些记录。可以使用 ELK，或 sleuth-zipkin 具。&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.elastic.co/what-is/elk-stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://sergiuoltean.com/2017/10/04/zipkin-sleuth/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原文链接：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://sergiuoltean.com/2020/06/26/architecture-characteristics/&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>acbd34134d2839cc65ff6cfc9a880ecb</guid>
<title>2021 有哪些不容错过的后端技术趋势</title>
<link>https://toutiao.io/k/e3lq37o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020 年注定是不平凡的一年，虽疫情肆虐，但我国互联网产业展现出巨大韧性，不仅为精准有效防控疫情发挥了关键作用，还在数字基建、数字经济等方面取得了显著进展，成为我国应对新挑战、建设新经济的重要力量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯在线教育部后台中心团队，作为在线教育行业的从业者，我们尝试整理一下 2020 年后端技术要点，以此窥探后台未来技术的发展趋势：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;云计算进程提速，一切皆服务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;云上安全越来越受到企业的重视。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从资源云向业务云化转变，最终全面云原生化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务、DDD、中台技术并非企业技术架构设计的银弹。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Python、Go、Rust 成为后端未来最先考虑学习编程语言。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 语言生态发展稳健，越来越多企业在生产中使用 Go 语言落地业务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;疫情催化在线教育行业产品升级转型，音视频技术不断迭代升级。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;云原生&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 业内趋势&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;云原生技术生态日趋完善，细分项目不断涌现&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;云原生关键技术正在被广泛采纳，如 43.9%的用户已在生产环境中采纳容器技术，超过七成的用户已经或计划使用微服务架构进行业务开发部署。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;容器云平台将传统云计算的 IaaS 层和 PaaS 层融合&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从技术角度看，容器云平台采用容器、容器编排、服务网格，无服务等技术构建的一种轻量化 PaaS 平台，为应用提供了开发、编排、发布、治理和运维等全生命周期管理。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2669649515287099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXricVRsFIOn8gVF1SicZ8HUBIht5UicjRaymUxKSWU6qGsPnJ1iaT0qZvlQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2682&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;容器云平台的整体架构，自下而上包括交互(UI)层、接口(API)层、PaaS 服务层、基础层。运维和安全则涵盖了从应用层到容器云引擎层的部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;交互层：提供界面供用户使用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;接口层：提供 OpenAPI 能力供第三方调用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;PaaS 服务层：提供数据服务、应用服务（微服务、中间件）、DevOps、平台管理、平台运营、应用管理能力，为实现业务应用其自身的生命周期管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基础层：以 Kubernetes 为核心，包括服务网格（ServiceMesh）、无服务计算（Serverless）、容器引擎（Docker）、容器镜像管理等，主要实现对计算、网络和存储资源的池化管理，以及以 Pod 为核心的调度和管理。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务网格为微服务带来新的变革&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Mesh 化加速业务逻辑与非业务逻辑的解耦，将非业务功能从客户端 SDK 中分离出来放入独立进程，利用 Pod 中容器共享资源的特性，实现用户无感知的治理接管。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;从资源云向业务云化转变，最终全面云原生化&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;云原生技术通过标准化资源，轻量化弹性调度等特征，应用场景较为广泛，随着技术和生态不断成熟和完善，有效缓解企业上云顾虑，拉动全行业的上云程度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;云原生技术栈的标准统一化&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构标准统一（微服务之间标准 API 接口通信）、交付标准统一（标准容器化的打包方式实现真正的应用可移植）、研运过程标准统一（DevOps 工具链标准统一），通过标准化后提整体研发运维效能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 在线教育实践&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3359477124183007&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXcFuUtC3gtENroQLFfiaCticdoC1t3zzJoZPI325oLkibs0hZjBZ92w6gw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1530&quot;/&gt;&lt;figcaption&gt;enter image description here&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;各类 PaaS 服务上云&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年我们完成了 IaaS、存储层、直播、回放以及各类 PaaS 服务的上云。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;服务全面容器化升级&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020 年我们重点进行服务全面的容器化升级，目前已经完成企鹅辅导和开心鼠英语两个产品的全面改造，到年底会完成腾讯课堂剩余部分的升级，实现全面完成改造。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;完善 DevOps 流程&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完善 CI/CD/CO、蓝盾流水线、容器化、STKE、全链路监控等，提高研发效率，降低现网运营难度&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;业务中台架构演进&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在整体架构上，我们依托腾讯云，确定了教育业务中台的架构演进方向，不断的进行重复模块的抽象和整合。我们在腾讯云上实现部署了接入中台、Push 中台、支付中台、音视频中台、运营中台等服务，让各个业务之间的相似能力得以复用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;存储层上云&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存储层上云后，一方面稳定性提高。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;异地容灾。通过挂载异地的灾备机器，可以实现 master 主机异地灾备。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;负载均衡。服务连接 RO 组，RO 组的多个实例会对请求进行负载均衡。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据备份。RO 发生异常，将会被剔除 RO 组，恢复后自动加入 RO 组，保证了 RO 组的可用性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据加密。提供透明数据加密（Transparent Data Encryption，TDE）功能，透明加密指数据的加解密操作对用户透明，支持对数据文件进行实时 I/O 加密和解密，在数据写入磁盘前进行加密，从磁盘读入内存时进行解密，可满足静态数据加密的合规性要求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另一方面运营能力也有所提升。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可以实时看到数据库连接情况，慢查询、全表扫描、查询、更新、删除、插入情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实时 CPU、内存、磁盘使用情况，并根据设置阈值进行告警优化微服务架构&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是在线教育上云前后架构对比&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3801452784503632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXSibYZcOXHGic8trd84LZCK4rKOZnf0DSPuuibgRNxwGQ9FL7A5GcQUE6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;826&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;微服务&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务,Service Mesh 在过去的一年依旧保持着热度。在已经过去的 2020，微服务可以说有坚守也有破局，有对服务微化共识的形成也有对特殊场景的理性思考。我们可以看到服务框架依然在持续演进，奔向云原生，拥抱云化。越来越多的企业开始跟上服务化云化步伐。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;微服务框架：加速奔向云原生&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;SpringCloud&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2018 年开始 Hystrix、Ribbon 等核心组件相继进入维护状态，开发者们一度变得忧心忡忡，时至今日我们回过头来再看一下，Spring Cloud 已经针对这些担忧给出了解决方案，Zuul 由 Spring Cloud GateWay 子项目替代，Hystrix 由 Spring Cloud Circuit Breaker 替代，同时也给出了长期的演进方案。在经历了这段小小的波折后，Spring Cloud 也改变了策略，将这些企业贡献的 OSS 库独立出来成为其子项目。目前我们可以看到有 Azure，Alibaba, Amazon 等 3 个带有企业名字的子项目，这种策略在某种程度上可以说解绑了企业开源策略对开源核心组件的影响。截至目前 Spring Cloud 下面的子项目已经新增至 34 个，越来越庞大。供开发者选择的组件越来越多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Dubbo&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年 05 月 20 日 Dubbo 毕业，成为 Apache 的顶级项目，在过去的一年社区还是非常努力的，一年 release 5 个版本，加速奔向云原生。在 2.7.5 版本中，其服务模型调整以及协议支持调整带来的新旧版本兼容问题，稳定性等问题值得我们持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;记得 2019 年我们一直在谈 istio 版本难产问题，在 2020 年却出乎意外的因为商标问题上了头条，让我们吃了个大瓜。Google 与 IBM 在商标问题上发生分歧，Istio 商标被 Google 捐献给 Open Usage Commons 组织，而非 CNCF。而这在加速了 Service Mesh 阵营依旧的分化，各大软件厂商纷纷发布了自己的 Service Mesh 产品，如微软发布了 Open Service Mesh，Kong 推出了 Kuma，Nginx 也推出了 NGINX Service Mesh（NSM）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;企业微服务建设：长期修行，苦练内功&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在微服务框架的演进过程中我们看到都在朝着趋同的方向发展，主要聚焦于微服务治理形态上组件的差异化以及应对场景的方案细化，可能你们家服务中心用的 ZK，我们家就自研。恰逢内源的兴起，似乎在企业内部再造一次轮子，研发一套特定的框架来适配企业业务以及标准化企业内部 IT 治理也是一件很容易的事情，基于这种写实的场景部分企业开始涌现出了内源的服务框架如，腾讯的 tRPC 框架。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5243317340644277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXMibsibicg9KtvUo69xbSyEU3bmoE6SYQTt3wicrWKX6LhsvymVicb7bY53w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1459&quot;/&gt;&lt;figcaption&gt;enter image description here&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;腾讯 tRPC 建设情况&lt;/strong&gt; 目前 tRPC 在腾讯内部已经大面积推广使用，覆盖 5 个 BG，40+部门，2700+服务，10000+容器，支持 c++,go,java,js,rust,python 6 种编程语言。其可插拔的插件化架构，高性能，友好的架构兼容特性正在吸引内部越来越多的开发者以及业务用户。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在线教育业务也在积极的拥抱这套框架，逐步将各业务牵引到 tRPC 框架。在解决历史技术架构痛点的过程中，通过微服务构筑，形成微服务群，构筑稳定的支付,音视频等小中台以及面向 C、B 端用户的互联网业务系统。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;中台&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;中台，是最近几年最火热的技术名词之一，关于中台的讨论，甚至是争论，一直都没有停止过。我们尝试结合腾讯在线教育部在中台方向的实践经验，谈谈中台对我们的意义和建设情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯在线教育部从 2018 年开始规划部门内的中台建设，2019 年基本完成组织架构和技术架构的中台转型。我们和大多数公司一样，并不是从 0 开始构建中台，而是在保证现有业务快速迭代的前提下，同时完成架构的转型，大家形象的称这个过程是“开着飞机换引擎”。对于一个风险看起来这么高的事情，在决定做之前，我们要回答好几个问题：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 我们为什么要做中台，部门需要什么样的中台？&lt;/span&gt;&lt;/h4&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3997539975399754&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXEz65VsUwlIx8XqMHHcr5Cj3QcehUFTrNOPiccibG5Aic44icvZg3cIYzvg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1626&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们部门主要有三款产品：腾讯课堂——职业在线教育学习平台，具有 2B 和 2C 的双重属性。支持教育机构的入驻、直播上课、售卖、结算 等功能。腾讯企鹅辅导——腾讯自营的，主打 K12 名师教学的学习应用，为老师和学生提供了丰富的在线教学的功能。腾讯开心鼠英语——主打 3-8 岁的少儿英语学习，通过生动有趣的交互式学习设计，实现了边玩边学的有趣的学习体验。可以看到，这三个产品有不少类似的功能，例如直播、回放、支付、退款 等，因为这些共性，决定了他们会有很多相同的产品和技术需求。这些形成我们做中台的业务基础。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3786635404454865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXKJAQq1hyT7FXsvoMf9rtBNfEwVGXTGV9Kribiaz4zNg9Jp7FuAsGKe9g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1706&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在产品发展的初期，由于时间窗口非常紧，需求变化也很频繁。为了快速并行迭代，我们拉起了三个独立的团队进行研发，除了基础设施外，业务逻辑部分完全是独立的。这种组织架构，在当时确实为我们达成了上线时间的目标，帮助产品实现了从 0 到 1 的突破。但是，随着产品形态的成熟，3 个问题越来越突出：第一个问题，功能无法在不同的产品间快速复用。因为独立的代码和架构，复用变得非常的困难，很多开发同学反馈复用代码还不如重写一遍更快。第二个问题，同类的 Bug 的解决和技术优化在不同的产品之间重复进行，非常的浪费人力。第三个问题，不同的时期，我们需要发力的产品方向不一样。当一个产品面临发展窗口期的时候，对研发人力的需求就会成倍的增长。而独立的研发模式，让人力调配非常的困难。基于业务的模型，和团队碰到的痛点，我们提出了中台化的解决方案。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.45970937912813736&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBX2E2mFRO2vicFUbcGXroCwYwJ1ibgrQIkaCA7Ic9pex6sGDSat7DoAa4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1514&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们需要的中台应该长什么样子？经过前期的思考，我们总结出在线教育的中台应该包含 4 个部分。首先 是业务支持部分，这个很好理解，包含了各类共性的产品功能，例如前面提到的 直播、回放、支付 等等。其次 是技术支持部分，服务开发过程中 必然会涉及到例如 技术栈怎么选择，高可用怎么做 的共性技术问题，我们希望这部分有一个统一的技术实现。接下来 是数据支持部分，数据上报、计算、汇总、分析 已经是现在互联网产品必不可少的能力，也具备很强的通用性。因此这部分也应该有一个中台来承载。最后，是研发效能部分，我们需要有一整套好用的工具来提高研发效率和保障研发质量。到这里，我们对于中台的模样，应该是比较清晰了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据这个规划，我们画出了我们中台的组成图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5476772616136919&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBX4Ez7wicyB4xvvKTBupemIQtDj2H3BiaPBzQnvvYttZ7nlK0moFVT1wag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1636&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 怎么保证中台能做成功，最大的风险是什么？&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人说，中台是“一把手工程”，意思是一定是自上而下推动的，需要老板的鼎力支持，是因为做中台确实是非常的需要人力，并且很大程度上改变了团队的资源投入模式，在多个业务需求压力都很大的情况下，做这么大的转变，团队短期内一定会碰到各种不适应的问题。虽然我们的中台方案也得到了老板的支持，但是绝不是中台优先，毕竟保障业务的高速发展才是团队追求的结果。一开始我们就意识到了困难的存在，为了不让中台死在半路，我们定了几个原则：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;控制人力占比：在人力有限的情况下，为了保障业务需求不受太大的进度影响，中台的人力投入原则上不超过总人力的 30%。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;不做过度设计：中台的设计目标只控制在部门内的需求（腾讯课堂、企鹅辅导、开心鼠英语），不面向行业做完全通用化的设计，根据实际需求做决策。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;完整规划，逐步实施：在做好完整的技术方案设计之后，我们不追求一次性完成中台的建设，而是结合业务产品需求的情况逐步实施，每半年也会 review 一次方案是否需要调整。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上的规则，可以说很好的帮助我们保障了中台平滑转型的过程。另外，我们也在一个合适的时间点进行了团队人员组织结构的中台化匹配升级，保证了技术架构和组织架构的一致。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.452991452991453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXasT1LlVr2zaSlibUia1qwFib25dJmv9sl7oNaSLOS5YGcicYSAFd4wIia1g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1638&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 中台建设的指导原则是什么，目标是什么？&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们中台服务设计的原则是什么，应该做哪些，什么时候做，做到什么程度。这个在业务部门里面其实是一个非常棘手的问题。很多时候我们需要在“时效性” 和 “扩展性”方面做选择。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32523148148148145&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXowQPlN53WBoeeBeegkxg4PeKqpW41lywsTLOGKd5OMI4c2ia5bHOSsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1728&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后我们总结出来的一套方法是这样：对于一个新的需求，如果看到了可复用性，优先让业务团队自己做，一般这种需求时间紧、不明确，如果这时候讨论宏大的中台设计，往往效率低，耽误上线时间，但是，我会在过方案的时时候问大家“通用性是怎么考虑的”，最终在方案设计上做好通用型的前期 准备即可。后面如果再次收到另外一个产品的类似需求，这时候我们就认真考虑要把这个服务交接到中台组来维护了，由中台组安排人力来进行中台化。最后再有新的业务接入，就直接由中台组来承接了，就会非常的简单，我们很多中台服务都是这么跑出来的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4156171284634761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBX3HibeKf74HXvF3RFr2H0yslZNSbklA6amUFibOpGzFe6qtoL6hO4e3VA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1588&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一个需要思考的问题是，中台服务的建设目标是什么。提出这个问题的背景是，我们希望给中台团队一个统一的、清晰的阶段性目标，当然也可以用来做团队考核。我们总结出来三个点：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;功能的复用：这个是最基本的，也是提出中台的初衷。具体到落地上，必须是一套代码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;统一运营：要求中台服务能分产品输出标准化的实时监控看板和报表邮件，让业务一目了然。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;容灾调度的能力：不同业务的多套部署之间，在紧急情况下可以互备。需要进行实际的线上演习。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们认为，达成这三个目标之后，才真正的发挥了中台的威力，可以实现 1+1 大于 2 的效果。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;DevOps&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020 年，在云原生的浪潮下，devops 相关的技术栈也在稳步地向前演进，下面将从以下几个方面分别进行阐述：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;敏捷的应用交付流程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监控告警系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;tracing 系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;云原生对提升 devops 的展望&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 敏捷的应用交付流程&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;业内趋势&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当前出现了一系列的基于 Kubernetes 的 CI/CD 工具，如 Jenkins-x、Gitkube，它提供了从代码提交、自动编译、打包镜像、配置注入、发布部署到 Kubernetes 平台的一系列自动化流程。甚至出现了像 ballerina 这样的云原生编程语言，它的出现就是为了解决应用开发到服务集成之间的鸿沟。然后结合监控告警系统实时掌握服务运行情况，结合调用链系统进行服务故障定位。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4939293598233996&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXB5viaQLaialh7f5CHH42znHV013ASs5vPbfJLqILYNyOs18HHibFIh9RQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1812&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在线教育的实践&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;蓝盾是腾讯从业务安全出发，贯穿产品研发、测试和运营的全生命周期；助力业务平滑过渡到敏捷研发模式，打造的一站式研发运维体系。它助力业务持续快速交付高质量的产品。蓝盾提供了丰富的特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可视化&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一键式部署&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;和持续集成无缝集成&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持并行部署&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;架构水平扩展，相同逻辑的节点无主备关系&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据安全&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;小核心，大扩展！可插件化扩展，优先添加所需要的流程控制部件，同时可方便的扩展其他部件&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可监控，监控一切异常的构建并告警&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;灰度切换，达到切换时不影响正在构建的流水线&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4797867614393603&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXGeWelspV6pMtevueROn33g0SUMMMQjK6MY5uQgUjOHjfOn4icGiagWcg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2251&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 监控告警系统&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;监控系统事实上的标准 prometheus&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Prometheus 在度量领域的统治力虽然还暂时不如日志领域中 Elastic Stack 的统治地位那么稳固，但在云原生时代里，基本也已经能算是事实标准了。2020 年，对 prometheus 来说，是忙碌的一年：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;grafana cloud agent 发布：为 grafana cloud 优化的的一个轻量级 prometheus 分支，它使用 prometheus 的代码，保证 prometheus 生态依赖的一些属性：数据完整性、数据过期处理等等。允许使用一种更灵活的方式定义从何处以什么方法拉取和传输数据，它已经成为一种更受欢迎的方式将数据写入后端存储。它的 remote_write 方式相比于传统 prometheus agent 的 remote_write，内存使用降低了 40%；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;v2.19.0 的发布：最核心的功能是，对于完整的 chunk，在内存中使用 head 结构映射磁盘中的 block，单就这一个点，内存使用就降低了 20%-40%，并且使得 prometheus 的重启速度更快；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;v2.20.0 的发布：它为 Docker Swarm 和 DigitalOcean 支持了本地的服务发现；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提升批量插入一大批老数据到 prometheus 的效率；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Grafana Metrics Enterprise 的启动：提供针对大企业的 prometheus-as-a-service 的解决方案&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6002960769800149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXvNEicnE71PVs5Bkh2bA5BibrlmqKz3k1pGqhm5pZCgDdQVGCsCp7R1lw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1351&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在线教育的实践&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3754019292604502&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXbO09MNmgeEiatbkHj24R0YoXrTkxtPbVxPadqnFX1JmlLuZuBibhF7PQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2488&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;nginx 访问日志和服务间模块调用相关信息都上报到全链路 es 集群&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过一个 exporter 对 es 中的数据按照项目和接口维度进行汇聚，将相关的聚合数据存入 prometheus&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全链路 es 和 prometheus 都可以作为 grafana 的数据源进行数据展示和告警判断&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;alert 模块将告警信息发送到相应的渠道&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;收到告警之后，去 grafana 查看对应时间段的趋势图，去全链路 es 集群查看对应时间段的原始日志&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. tracing 系统&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比起日志与度量， tracing 这个领域的产品竞争要相对激烈得多。一方面，目前还没有像日志、度量那样出现具有明显统治力的产品。另一方面，几乎市面上所有的追踪系统都是以 Dapper 的论文为原型发展出来的，功能上并没有太本质的差距，却又受制于实现细节，彼此互斥，很难搭配工作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;OpenTracing 规范&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了推进追踪领域的产品的标准化，2016 年 11 月，CNCF 技术委员会接受了 OpenTracing 作为基金会第三个项目。OpenTracing 是一套与平台无关、与厂商无关、与语言无关的追踪协议规范。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;OpenCensus 规范&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenTracing 规范公布后，几乎所有业界有名的追踪系统，譬如 Zipkin、Jaeger、SkyWalking 等都很快宣布支持 OpenTracing，但是 Google 自己却在此时提出了与 OpenTracing 目标类似的 OpenCensus 规范。OpenCensus 不仅涉及到追踪，还把指标度量也纳入进来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;OpenTelemetry 规范&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2019 年，OpenTracing 和 OpenCensus 又共同发布了可观测性的终极解决方案 OpenTelemetry，并宣布会各自冻结 OpenTracing 和 OpenCensus 的发展。OpenTelemetry 野心颇大，不仅包括追踪规范，还包括日志和度量方面的规范、各种语言的 SDK、以及采集系统的参考实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在线教育的实践&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯基于 OpenTelemetry 规范，自研了天机阁系统。天机阁主要分为三大部分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;分布式追踪（distributed tracing）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监控（monitoring，metrics）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;日志（logging）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与之对应提供七大能力：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;故障定位：天机阁中能够提供整个请求全链路上下文信息，具体哪个环节出错一目了然&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;耗时分析：天机阁的耗时分布图，可以快速了解全链路耗时情况&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多维染色：在天机阁基于通用的设计理念下，天机阁提供的染色能力，不会局限在某个业务的具体字段，同样也不会局限单个维度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;架构治理：天机阁架构治理的核心功能是微服务架构拓扑，基于微服务架构拓扑可以构建更加丰富更加具体的上层分析能力&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全链路日志：天机阁核心建立在分布式追踪方法论下，提供将分散在各个微服务的日志根据因果和时间有机进行组合，达到提供全链路上下文日志的效果&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务监控：天机阁在监控领域将会重点推出如下几大领域监控（机器基础指标监控、数据库监控、进程监控、模调监控）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务看板：主要用于业务定制化的数据指标配置和展示&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统架构图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.49944994499449946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXl7L12RLDwwG00w4Ywp6GYiblnJx54bHo5ppaqRsoWyOGx03jsykYPWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1818&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;功能模块图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5075921908893709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXVibz1nKNyR1Nh4x98ia2yWictrWf2uffgNWoPNdhntfGKpMr1nNorc2Aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1844&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.云原生对提升 devops 的展望&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;serverless 对提升 devops 的展望&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;降低运维需求&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缩短迭代周期、上线时间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;快速试错&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;极致弹性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;降低运营成本&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;service mesh 对提升 devops 的展望&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;更好发挥掌握不同编程语言的人才优势&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;框架的部分能力平台化，加速应用迭代速度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微服务软件架构从解决&quot;拆&quot;到解决&quot;连&quot;的加速落地&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;灵活的流量治理能力改善软件的发布与回滚效率&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;音视频&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 音视频技术回顾&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着 AI 技术的兴起、5G 时代的到来，音视频技术不断加速应用发展，像直播、短视频这样的产品遍地开花，火热程度相信大家或多或少都接触过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;音视频技术的加速应用依赖底层编解码标准的发展，当前主流的 H.264 编解码技术已经不能满足未来 4K、8K 的需求，今年年中刚发布的 H266/VCC，与 H.265 相比进一步提高了压缩效率，这项耗时 3 年的标准，主要面向未来的 4K 和 8K，后续的落地应用非常值得期待。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实时音视频技术领域，不得不提及谷歌的开源项目 WebRTC，可以在浏览器上快速开发出各种音视频应用，目前主流的浏览器包括 Chrome、Firefox、Safari 等都将 WebRTC 作为首选的实时音视频方案。同时也催生了像声网、即构科技这样的专门音视频服务商。从 StackOverflow Trends 和 GoogleTrends 来看，未来关注度仍会持续上升，腾讯也是 WebRTC 应用的主力军。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前直播后台开发主要分为三大块：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;标准直播：我们日常生活中使用频率最高的直播，例如电视节目直播、游戏直播、直播带货。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;快直播：标准直播在超低延迟直播场景基础上的延伸，毫秒级超低延迟播放的同时，也兼顾了秒开、卡顿等核心问题，为用户带来超低延迟流畅度的直播体验。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;慢直播：能够提供更稳定清晰的直播画面，基本的使用场景都用于监控领域，国内疫情早期，4000 万人同时在线，通过一个固定机位观看雷神山医院建筑工地的现场直播，让云监工迅速火爆。2020 行至年终，各大机构评选的网络热词相继出炉，其中，“云监工”频繁出没于「十大网络热词」榜单中，与之并列的多是“后浪”“网抑云”“打工人”等。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着网络技术的不断发展，持续提供高质量的视频信号传播已经算不上浪费网络资源，即使一个直播无人观看，未来慢直播具有极大的延伸价值以及发展前景，让我们期待慢直播行业的蓬勃发展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助 5G 技术低时延、高速率、大容量等显著优势，音视频的大赛道，从目前的短视频慢慢走向中长视频发展，这是未来的大风口。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 平台的新技术点&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前腾讯在线教育音视频直播已完成整体上云，腾讯云的互动直播也从早期的 opensdk 全面升级到 TRTC，TRTC 是腾讯实时音视频[Tencent Real-Time Communication]，源自 QQ 音视频团队，是基于 QQ 十几年来的音视频技术积累。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯云提供 TRTC(全球延时&amp;lt;300ms)+WebRTC 快直播(上行走 RTMP 推流或 FLV、HLS、RTMP 回源，下行支持标准 WebRTC 协议输出，延时 500ms 左右）+标准 LVB 直播(FLV/HLS/DASH，平均延时 3-5 秒)融合解决方案，如下图中用户可以针对自己的业务场景组合不同的直播解决方案。承载大规模带宽、支撑高并发，保证客户业务正常运作，达到 99.9%以上的可用性，整体资源储备及业务突发承接能力行业领先。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5157728706624606&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXIPibIkPv1weU8ompic9ib1LpibfTme7ZSU6W3BjPo6n3aNEE7YADrYrwMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1268&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着全民抗疫，“停课不停学”的号召，在线教育也成为直播的主力军，直播的进房成功率/首帧延迟/卡顿率/音画同步时延/分辨率等指标直接影响用户核心体验。站在云的肩膀上，在线教育直播业务通过组合云上多种直播模式，结合业务流控系统，对各端直播接入进行多级流控及直播模式切换，在保证直播质量的前提下支撑远超互动直播极限的房间容量，下图是具体的直播架构。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5698924731182796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXWrQ4hWM9sEWzqX81ymIQVTZXtywVkctW1l9I2snuLBZwE6LVu3m4Bw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;837&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;3. 业务应用新技术的能力扩展&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前直播课普遍采用大班授课方式，老师在上课的时候，跟学生的互动有限，学生的注意力和参与感有限。大班教室人数太多，老师无法提供足量的 presentation 机会，学生与学生之间缺少有效的学习互动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;腾讯在线教育部推出如下图的六人小班课，基于 TRTC 在互动课堂场景下，为学员提供了稳定优质的服务，延迟低至原来的 1/10，互动效果得到很大提升。六人小班课给用户带来更多“被关注”的感觉，相比于大班课，家长的价值感知更高。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.562874251497006&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXVGTCoEVtRtHMPuKZqzCRKyPdyn5YyfzQglQh2zm0N5nIaKjWCkic6ibg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1336&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接入网关&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1. 网关发展历程&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接入网关有四大职能&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;API 入口：作为所有 API 接口服务请求的接入点，负责请求的转发。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务聚合：网关封装了系统内部架构，为每个客户端提供一个定制的 API。作为所有后端业务服务的聚合点，所有的业务服务都可以在这里被调用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;中介策略：身份验证、路由、过滤、流控、缓存、监控、负载均衡、请求分片与管理、静态响应处理等策略，进行一些必要的中介处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;统一管理：提供统一的管理界面，提供配置管理工具，对所有 API 服务的调用生命周期和相应的中介策略进行统一管理&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开源网关发展迅速。从 nginx 横空出世，到 openresty 解放程序员，更加专注解决业务需求，再到 kong 成为 api 网关的独角兽，以及最近出现不久的 apisix，当然也不能少了大名鼎鼎的 envoy。下面介绍主要的几个网关。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;nginx&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2004 年 10 月 4 日发布的第一个公开版本以来，nginx 已成为高性能 web 服务器、反向代理服务器的代名词。相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，能够支持高达 50,000 个并发连接数的响应。模块化和将一个请求分为多个阶段的设计，方便开发人员扩展。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;openresty&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。python、js、lua 三种语言中，lua 是解析器最小、性能最高的语言，而 LuaJIT 比 lua 又快数 10 倍，开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;kong&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;kong 是 API 管理的强大效率工具，主要有 4 个特点&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;扩展性：通过增添更多的服务器实例达到横向扩展&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;灵活性：可以部署在单个或多个数据中心环境的私有云或公有云上。支持大多数流行的操作系统，比如 Linux、Mac 和 Windows。包括许多实用技巧，以便针对大多数现代平台完成安装和配置工作&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;模块性：可以与新的插件协同运行，扩展基本功能。可将 API 与许多不同的插件整合起来，以增强安全、分析、验证、日志及/或监测机制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;生态：开源免费使用，同时也能获得企业版，此外还提供初始安装、从第三方 API 管理工具来迁移、紧急补丁、热修复程序及更多特性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2. 在线教育网关实践&lt;/span&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;在线教育网关发展过程中的包袱&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;通道 proxy 多语言, 多框架, 多协议功能无法服用，维护成本高&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;配置动态加载能力和插件能力不统一&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;一个接口上线配置多次，验证多次。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;缺乏完善的监控&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;频控，容灾、熔断、下载等能力缺失&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;非云原生应用，不支持自动扩缩容&lt;/p&gt;&lt;p&gt;&lt;strong&gt;tiny 网关&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tiny 网关主要的能力如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供 app 端, web, pc 端快速接入，统一 sdk 和协议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持智能路由，支持按照 cmd, uid, roomid, cid 字段的路由&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全房间和多维度组合推送策略&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可靠 push 保障&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;业务级别的监控告警&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;命令字配置集中管理，支持热加载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持插件化的能力，方便添加业务特性的插件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全面落地容器化，支持自动扩缩容&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完整的架构如下图所示&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8737864077669902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXH63yr5QxgMKGic33cVwxISM2U9GKqzSa2p4fsJpKIul73BNap8FuDvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1236&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;go 语言&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着云原生在互联网行业的普及,golang 从众多语言中,脱颖而出,成为了云原生时代的新秀。越来越多的开源项目采用 golang 语言来实现。因此学习和掌握 golang 语言,越来越成为一种趋势。本篇文章,主要围绕 golang 语言的主要特性来展开讲解,希望对大家有帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;语法简单&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 素以简单著称,总共 25 个保留字,相比 c++的 82 个,java 语言的 50 个,少的不能再少了。golang 官方也比较吝于新增命令字。常见的结构和判断,对于 golang 来说,就只有 if,for,switch 等非常简单的命令字。自带的 array,slice,map 等数据结构,基本可以 cover 大多数的使用场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;部署方便&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译好的 golang 程序,是一个独立的二进制程序,只依赖操作系统的一些基础库,除此之外,没有任何其他外部依赖。有使用过 golang 语言开发开源软件的同学,应该感触。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;静态编译&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 是一门静态强类型的编译型语言,与 c++类似,golang 也是也有一个完整的编译链接过程,并且有严格的编译期的语法检查过程。配合 golang 强大的工具链,在编译期可以提前解决脚本语言运行时才能发现的诸多问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一直以来,c++程序员饱受内存问题的困扰,常见的比如内存泄漏,溢出,double free 等问题层出不穷,并且定位起来费时费力。c++官方为了降低使用成本,也在 c++0x 之后,引入了智能指针来解决内存使用的问题。但是内存问题依然存在。golang 跟 java 语言一样,从语言层面提供了 GC 能力,自带的垃圾回收机制,有效解决了内存使用的诸多问题。但是垃圾回收并非完美无缺, 不合理的内存使用方式,依然会导致程序出现严重的 gc 问题，从而导致程序出现性能问题,因此也有一定的 trick 需要遵循。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;工具链支持&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了 golang 语言自带的编译,安装,单元测试等工具之外,c++的调试神器 gdb 也能够使用。同时第三方提供的 delve 调试工具, 兼容性和易用性更好,同时还提供了远程调试的能力。原生自带的 perf 工具,配合第三方的 go-torch 工具,生成的火焰图,调试的时候非常方便, 让性能瓶颈能够一目了然。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;泛型&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 被人诟病的特性之一,就是不支持泛型。官方认为虽然泛型很赞，但会使语言设计复杂度提升，所以并没有把这个泛型支持作为紧急需要增加的特性，也许在不久的将来, 会引入这个特性。现阶段可以通过使用 Interface 作为中间层,起到抽象和适配的作用。一些第三方工具,比如 genny,通过模板化生成代码,也可以作为泛型的一种解决方案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;错误处理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 语言, 错误处理从语言层面得到了支持, 基于 Error 接口来实现,配合函数的多返回值机制,, ，一般情况下, 错误码也会作为函数的最后一个返回值。在 golang 中, 错误处理非常重要, 语言的设计和规范,也鼓励开发人员显示的检查错误。也正因为如此,golang 的错误处理，也被很多人所诟病，觉得不像其他高级语言,比如 java 的错误处理那么简洁。不过整体来说,golang 作者将错误码显性化,目的是为了让大家能够重视错误处理，所以应该说是各有特色。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;包管理&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 语言刚诞生的时候,并不支持版本管理。GOPATH 方式,也只能算是包管理基本的雏形。后来经过一系列的演变，社区先后支持了 dodep,glide 的工具。直到 2016 年,官方才提出采用外部依赖包的方式,引入了 vendor 机制。2017 的时候推出的 dep 工具,基本可以作为准官方的解决方案了。然而,直到 2019,go modules 的推出, golang 的包管理争论才最终尘埃落定。基于 go mod 的版本管理机制,基本上可以说是一统江湖。具体的 golang 包管理演进过程,如下图所示:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.32132963988919666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXBibicCoVng3ccSAUlpDzZq629gHyElRET6Rqia9OjN8zPR8Leu9640GQw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1805&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;并发性能&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 从语言层面就支持了并发,大大简化了并发程序的编写。这也是 golang 广受大家欢迎的原因之一。goroutine 是 golang 并发设计的核心, 本质上讲就是协程,也叫做用户态线程,它比线程更易用,更高效,更轻便,占用内存更小,并对开发者屏蔽了底层的协程调度细节。提供的 go,select,channel 等关键字,易用性非常好。配合 golang 中提供的 sync 包,可以非常高效的实现并发控制能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;常见网站&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;golang 百科全书: https://awesome-go.com/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;golang developer roadmap: https://github.com/Alikhll/golang-developer-roadmap&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;sql2go 工具: http://stming.cn/tool/sql2go.html&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;toml2go 工具: https://xuri.me/toml-to-go/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;curl2go 工具: https://mholt.github.io/curl-to-go/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;json2go 工具: https://mholt.github.io/json-to-go/&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;泛型工具: https://github.com/cheekybits/genny&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;生态&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 在未来企业会有更多布道：Go Conference 一直都是 Gopher 关注的技术大会，20 年 11 月国内的 Go Conferernce(https://github.com/gopherchina/conference)分享主题主要包括 Go 语言基础（Go 编程模式、Go Module、Go 编译器、组件包）和架构落地实践（微服务实践、微服务框架、云原生实践、大数据和高并发挑战），侧面也印证了 Go 语言在后端领域具备较强的业务实战落地能力，对打算采用 Go 的互联网企业，具有较强的指导和借鉴意义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;业界认可度&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;golang 作为云原生的首选语言,在业界获得广泛的认可。基于 golang 的很多明星项目,包括 docker,k8s,etcd,influxdb,tidb,prometheus,kibana,nsq 等覆盖了容器化,容器编排,存储,监控,消息队列等各个场景, 在各大公司都获得了大量的应用。同时从 github 拉取数据查看语言流行程度, 我们对比了 java,c++,c,go 等语言发现,golang 在 github 开源库的使用上越来越流行。如下图所示的 golang 占比情况:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8307508939213349&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXayq6QuCFr42cUx5uBBPBm4IeDavOCGOC0FnpXR22xL97tM1u1iaNfYA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;839&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9212218649517685&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvat3NmhGhH1ia9XZaVsLmOpBXo2M4ISUBRaHBg7ZNZO5lkrdbTicTrsFHRAiblfoWicmLEl05FkElcqEhA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;622&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;趋势&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全面转到 Go Module：官方会终止对 GOPATH 的开发支持，全面转到 Go Module。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2021 年,golang 中的泛型还要持续打磨。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着云原生浪潮，越来越多的企业将会考虑将 Go 作为其主要后端开发语言。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2020 年已经过去，可以确定技术的发展是一分钟也不会停滞。可以预见云原生、微服务等新技术依旧是后台技术发展趋势，2021 年也会有更多创新出现。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1cf7ebba854de52648106f92a12c5f92</guid>
<title>CDN &amp; 游戏加速器，两者是一个原理吗？</title>
<link>https://toutiao.io/k/iizkszd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;说起加速，大家可能就会联想到“游戏加速”之类的场景，而说到现在流行的云服务加速，则离不开 CDN 这个词。那么 CDN 和游戏加速器是同一种东西么？从效果上看两者都是为了“加速”，似乎是一样的。但是，在本质上却有区别。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5820d68bad2f3ce40119778f682404c4_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;397&quot; data-rawheight=&quot;221&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;397&quot; data-rawheight=&quot;221&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-5820d68bad2f3ce40119778f682404c4_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;以上图举例，假设我们需要从 A 地点到 B 地点取东西，那么走直线肯定是最短距离。但如果 AB 之间的通路路面满是巨大的障碍物，极其难走，通行时间为 4 小时。而C和AB之间的通路十分通畅，从 A 经过 C 再到 B 只需要 2 小时，你会如何选择呢？相信大家肯定会选择走 C 去 B，毕竟虽然路远了，但是时间更短。游戏加速器就是让大家通过 C 点，能够更快速地到达 B。而 CDN 则是让东西放置在 C 点，从而加倍缩短时间。&lt;/p&gt;&lt;p&gt;当然以上只是一个简单的举例，游戏加速器和 CDN 的具体运作原理我们下面细说。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;游戏加速器的原理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;游戏加速器是针对个人用户快速、安全连接服务器的一种服务。它使用的是 VPN（虚拟专用网络）技术，通过虚拟专用网络将电信加速到网通，或将网通加速到电信等等，为玩家提供优质的网络加速服务。&lt;/p&gt;&lt;p&gt;在没有使用游戏加速器的时候走的就是平常通道，登录游戏加速器以后，玩家的网游数据转入游戏加速器专属传输网络中，这个网络是经过优化、只传网游数据，从而在用户和服务器之间建立了“绿色通道”，保障了数据传输的优先性与稳定性，能够有效解决游戏下载开启时存在的延时高、登录难、易掉线等问题。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d1017a3fe07e4bf4097fcfdfe5676d14_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;351&quot; data-rawheight=&quot;434&quot; class=&quot;content_image&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;351&quot; data-rawheight=&quot;434&quot; class=&quot;content_image lazy&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d1017a3fe07e4bf4097fcfdfe5676d14_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;CDN 加速的原理&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;CDN （Content Delivery Network），即内容分发网络。当用户访问网站时，CDN 会根据客户端的地区和运营商，将用户分配到距离最近速度最快的节点服务器，让用户以更快的速度获取到所需内容。&lt;/p&gt;&lt;p&gt;&lt;b&gt;CDN 的设计思路&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;避让：尽可能避开互联网上可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输得更快、更稳定。&lt;/li&gt;&lt;li&gt;检测：通过在网络各处放置节点服务器所构成的在现有的互联网基础上的一层智能虚拟网络，CDN 系统能够实时监测网络流量和各节点的连接，负载状况以及到用户的距离和相应时间等综合信息。&lt;/li&gt;&lt;li&gt;分发：根据监测情况重新导向离用户最近的服务节点上。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;CDN 的工作过程&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7f759153540b096feab38e1b903104cf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;221&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-7f759153540b096feab38e1b903104cf_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;221&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-7f759153540b096feab38e1b903104cf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-7f759153540b096feab38e1b903104cf_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;以上图进行举例，假如 &lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.abc.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;abc.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;/&gt;&lt;/a&gt; 使用了又拍云 CDN 服务。当他的用户需要访问这个网站时，首先由用户端发起访问请求，之后 Local DNS 会向上级 DNS 服务器进行域名解析，解析 CNAME 地址。解析出 CNAME 地址后，网站会授权给 DNS 解析出的 CNAME 地址，并将这个地址返回给 Local DNS。而这时，又拍云智能调度系统会根据 LocaL DNS 请求的 CNAME 地址分配最优的用户所在地区的运营商节点。这个节点 IP 会由 Local DNS 返回给请求客户端，而客户端则访问这个最优节点。&lt;/p&gt;&lt;p&gt;如果是客户端第一次访问，那么节点可能没有该网站内容的缓存。那么节点会到网站源服务器去请求资源，这个时间可能会相对较长。而如果节点已经有网站内容缓存，那则会直接将缓存内容返回给用户，让用户查看到网站内容。&lt;/p&gt;&lt;p&gt;如果是游戏内容，那么当游戏厂商使用了 CDN 以后，就可以将软件缓存到遍布各地的 CDN 边缘节点上，当用户请求下载时，会直接选择就近最优的节点进行下载，提供下载的稳定性和速度。相比游戏加速器只是提供专用的一条带宽来进行加速，CDN 还可以解决因用户流量持续增长，下载服务器处理能力、服务器出口宽带压力增加而影响玩家体验的问题。&lt;/p&gt;&lt;p&gt;尽管 CDN 和游戏加速器在用户端体验效果上看似乎是是一样的，但是无论是在成本还是在分解源服务器压力等方面，二者的原理是完全不同的。如果你要问二者哪种更好，那需要考虑到用户自身的需求和实际情况。&lt;/p&gt;&lt;p&gt;&lt;b&gt;推荐阅读：&lt;/b&gt;&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/621/%25E6%259C%2580%25E5%25AE%25B9%25E6%2598%2593%25E8%25A2%25AB%25E7%259B%2597%25E7%259A%2584%25E5%25AF%2586%25E7%25A0%2581%25EF%25BC%258C%25E4%25BD%25A0%25E4%25B8%25AD%25E4%25BA%2586%25E4%25B9%2588%25EF%25BC%259F.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-aff4360946aa152e795103f2eedfdf05_180x120.jpg&quot; data-image-width=&quot;1080&quot; data-image-height=&quot;588&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;最容易被盗的密码，你中了么？&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-aff4360946aa152e795103f2eedfdf05_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//www.upyun.com/tech/article/618/%25E7%25BD%2591%25E9%25A1%25B5%25E5%2587%25BA%25E7%258E%25B0%25E4%25B8%258D%25E6%25B2%25B3%25E8%259F%25B9%25E5%25BC%25B9%25E7%25AA%2597%25EF%25BC%259F%25E9%2582%25A3%25E6%2598%25AF%25E8%25A2%25AB%25E5%258A%25AB%25E6%258C%2581%25E4%25BA%2586%25EF%25BC%2581.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-ff9909d5d496a9175fa22d64419cb011_180x120.jpg&quot; data-image-width=&quot;640&quot; data-image-height=&quot;277&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;网页出现不河蟹弹窗？那是被劫持了！&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.upyun.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic2.zhimg.com/v2-ff9909d5d496a9175fa22d64419cb011_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>