<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>115e46ea6278c90720531123f8e5ccb0</guid>
<title>5000 字长文解析：带你解读阿里大数据建设方法论 OneData</title>
<link>https://toutiao.io/k/oyyyjrr</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hello，大家好，我是大白，很高兴和大家分享阿里的 onedata 体系方法论。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;onedata体系方法论最早发起于阿里，随着数据时代的全面到来，数据中台产品的完善，很多公司在建设自己的产品和方法论体系时，也都有参考和借鉴此观点，本文将围绕阿里早期业务情况以及数仓建设遇到的问题，结合作者的一些想法，分享一下这个概念，如有不足，敬请谅解。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;onedata体系方法论产生的背景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5764546684709067&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEQibePUEVCtDevak3R2LZrFKaF9X3ECGBQyq9gEqxxib99sU1pQ2gKkdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;739&quot;/&gt;&lt;figcaption&gt;阿里早期业务情况及问题&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面这张图非常清晰的展示了2014年前后淘宝的的产品线矩阵，从这里我们可以了解到早期阿里是以淘宝业务线为主，1688及淘宝国际站为辅的方式，慢慢衍生出广告、天猫、本地生活、聚划算等众多业务，从而构建了自己的完整电商生态矩阵。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品矩阵中不同的产品往往代表不同的业务，每个业务都会产生自己的数据，同时也有着自己独特的产品形态。早期的阿里数仓体系建设对数据的管理还是较为独立的，按照业务的角度去建设，甚至一个业务就是一个小型数据仓库，早期还好，灵活多变可以快速的响应业务需求、从而支撑业务决策。但随着数据增长、业务场景更加复杂，也产生了很多问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数仓建设常见问题整理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者总结了部分部分较为常见的问题，这些问题不仅仅阿里有，甚至在现在很多公司中也是深受困扰，急需解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、数据孤岛、烟囱式重复建设
缺少公共数据的提炼和汇总，出现烟囱式重复建设，同时也加剧了数据孤岛的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、数据不一致
孤岛式的建设，缺少统一的组织及方法论，指标口径不统一、数据表级字段名不一致，数据有二义性&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、缺少统一模型规范
当不同业务之间有数据交叉的场景时，为了尽快响应业务需求，直接从其他业务明细层甚至原始数据层获取数据，不同的研发团队不同规范，造成模型设计不统一，复用性差。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、效率差、响应慢
缺少公共聚合数据的沉淀和积累，每次新的需求都需要5-7天以上的研发，无法服用，产出时效差，数据质量低，资源消耗成本高居不下&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;onedata方法论的定义&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;针对上面的问题，阿里制定了 OneData 作为内部数据整合及管理的方法论。期望在这一方法论下，构建统一、规范、可共享的全域数据体系，避免数据的冗余和重复建设，规避烟囱式建设和不一致性，从而快速响应需求，对外提供高质量服务。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.11214953271028037&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTED1kHDYexG5gzeicnQwxL7hWiabliavzicER5Vsa0BPvXWyd2ehxQabnarw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2782&quot;/&gt;&lt;figcaption&gt;阿里onedata方法论定义&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我理解的话，onedata 是通过完善的规范定义，同时结合数据中台产品，进行指标的统一定义及梳理，进一步标准化建模，从而保证数据只加工一次的目标实现。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;onedata体系架构&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里整理了一个经典的阿里onedata体系架构，对这一体系的阐述我觉得还是很全面的。甚至随着中台概念的兴起，现在很多数据中台产品都是以这一架构的内容，进行数据产品的研发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如：网易有数的数据中台产品中有EasyIndex指标系统对指标进行管理，EasyDesign实现模型设计等；阿里有MaxCompute。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5909631391200951&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEeCEzDCBNAEzZUky1AyrzWYlPVtPdeqvDlvR0ATna8Jb86dUhX1ib7icw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1682&quot;/&gt;&lt;figcaption&gt;onedata体系架构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;业务板块：根据业务属性，将业务划分出几个相对独立的板块，使业务板块之间的指标或业务重叠性较小&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;规范定义：结合行业的数据仓库建设经验和阿里数据自身特点，设计出的一套数据规范命名体系，规范定义将会被用在模型设计中；&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;模型设计：以维度建模理论为基础，基于维度建模总线架构，构建一致性的维度和事实（进行规范定义），同时，在落地表模型时，基于阿里自身业务特点，设计一套规范命名体系。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;OneData 在公司中怎么建设，实施流程有哪些呢？&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;指导方针: 首先，在建设大数据数据仓库时，要进行充分的业务调研和需求分析。这是数据仓库建设的基石，业务调研和需求分析做得是否充分直接决定了数据仓库建设是否成功。其次，进行数据总体架构设计，主要是根据数据域对数据进行划分；按照维度建模理论，构建总线矩阵、抽象出业务过程和维度。再次，对报表需求进行抽象整理出相关指标体系，使用OneData工具完成指标规范定义和模型设计。最后，就是代码研发和运维。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;业务调研&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据仓库是要涵盖所有业务领域，还是各个业务领域独自建设，业务领域内的业务线也同样面临着这个问题。所以要构建大数据数据仓库，就需要了解各个业务领域、业务线的业务有什么共同点和不同点，以及各个业务线可以细分为哪几个业务模块，每个业务模块具体的业务流程又是怎样的。业务调研是否充分，将会直接决定数据仓库建设是否成功。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;需求调研&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了业务系统的业务后并不代表就可以进行实施了，还需要和业务运营人员或数据分析师等，去沟通需求，了解他们有什么数据诉求，一般比较直观的就是一个个报表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需求调研的途径有那些呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一是根据与分析师、业务运营人员的沟通（邮件、IM）获知需求；二是对报表系统中现有的报表进行研究分析。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过需求调研分析后，就清楚数据要做成什么样的。很多时候，都是由具体的数据需求驱动数据仓库团队去了解业务系统的业务数据，这两者并没有严格的先后顺序。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数据域划分&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5981132075471698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEwmNmKN4SboBwpo9P2dCXmBcovfwBuaibGleXwPpm8KzJUCFiamniasqHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据域是指面向业务分析，将业务过程或者维度进行抽象的集合。业务过程可以概括为一个个不可拆分的行为事件，如下单、支付、退款。为保障整个体系的生命力，数据域需要抽象提炼，并且长期维护和更新，但不轻易变动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在划分数据域时，既能涵盖当前所有的业务需求，又能在新业务进入时无影响地被包含进已有的数据域中或者扩展新的数据域。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;针对如何划分数据域，可以点击下方文章链接：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484478_1&quot; data-recommend-article-time=&quot;1625877443&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUIib7OMZydnTc35eibYfEbmxibARMoVQh4dkUy9ly0vMkDUOzSN8eXJaN9fyIg8Pib3Y5pTqYyll8oxw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;都说数仓是面向主题建设的，那数仓的主题和主题域又应该怎么划分呢？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484478&amp;amp;idx=1&amp;amp;sn=955bf5f03cc762c8909ccde78a08c563&amp;amp;chksm=906a9929a71d103f12ca218408ad0c0860eb9fd67ab294fb829bb0b8189e82ffd02a5fd5f681#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484478&amp;amp;idx=1&amp;amp;sn=955bf5f03cc762c8909ccde78a08c563&amp;amp;chksm=906a9929a71d103f12ca218408ad0c0860eb9fd67ab294fb829bb0b8189e82ffd02a5fd5f681&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUIib7OMZydnTc35eibYfEbmxibARMoVQh4dkUy9ly0vMkDUOzSN8eXJaN9fyIg8Pib3Y5pTqYyll8oxw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;都说数仓是面向主题建设的，那数仓的主题和主题域又应该怎么划分呢？&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;构建总线矩阵，探查业务过程&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3336252189141856&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEyyGzur6ZfQ1wXEnm2G08Y221P63nfnBp5YlHiagAIAUBWlDtDR5ZVnw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1142&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在进行充分的业务调研和需求调研后，就要着手构建总线矩阵了。在这一步我们需要做两件事情：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、明确每个数据域下有哪些业务过程； &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、业务过程与哪些维度相关，并定义每个数据域下的业务过程和维度。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;规范定义（标准化定义）&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在数仓建设进行开发前，就要进行数据的规范定义。通过以业务的视角进行数据的统一和标准定义后，从而确保计算口径一致、算法一致、命名一致，后续的数据模型设计和ETL开发都是在此基础上进行的。在这一规范也可以说是标准化的定义下，进一步保障数据域、业务过程，以及在数据域、业务过程之下的指标、实体属性等的命名和定义。。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6055045871559633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEfoQXcWrjVaS46b1qwox43Bjv12sd7ZEicYrl5WbgJhHGAX6eb4JvBtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1744&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;名词定义&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据域：面向业务的大模块，不会经常变。比如我们公司有环贸快版打版服务、亿订电商业务、供应链业务等等大的业务模块类似产品线。&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名词&lt;/th&gt;&lt;th&gt;名词定义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;业务过程&lt;/td&gt;&lt;td&gt;如电商业务中的下单、支付、退款等都属于业务过程&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;时间周期&lt;/td&gt;&lt;td&gt;就是统计范围，如近30天、自然周、截止到当天等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;修饰类型&lt;/td&gt;&lt;td&gt;比较好理解的如电商中支付方式，终端类型等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;修饰词&lt;/td&gt;&lt;td&gt;除了维度以外的限定词，如电商支付中的微信支付、支付宝支付、网银支付等。终端类型为安卓、IOS等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;原子指标&lt;/td&gt;&lt;td&gt;不可再拆分的指标如支付金额、支付件数等指标&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;维度&lt;/td&gt;&lt;td&gt;常见的维度有地理维度（国家、地区等）、时间维度（年、月、周、日等）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;维度属性&lt;/td&gt;&lt;td&gt;如地理维度中的国家名称、ID、省份名称等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;派生指标&lt;/td&gt;&lt;td&gt;原子指标+修饰词+时间周期就组成了一个派生指标&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;数仓规范一般有哪些呢？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数仓的规范建设一般包括数仓命名规范、开发规范、模型设计规范等，下面进行一下简述，至于具体内容，可以看作者专门的数仓规范篇内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、数仓命名规范，一般包括数据库命名规范、系统来源命名规范、数据表级字段命名规范、指标命名规范等。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、开发规范：一般包括建表规范、作业流规范、数据格式规范、数据字典规范、词根规范、任务注释规范等。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、模型设计规范：一致性维度设计规范、事实表设计规范、数仓分层规范、主题域划分规范等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;作者整理的实战数仓规范，可以点击下方文章链接查看：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484036_1&quot; data-recommend-article-time=&quot;1617344502&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaViaCNwvct8rk2Po24kdiaJyW7k1oMSice49x02nLIwygp5eicS41DiaXibXOT0Y8bJiahsUibdDQwr4vNLkQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数仓规范篇 | 开发规范&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484036&amp;amp;idx=1&amp;amp;sn=598ea97cc82f4274b70867c59f61c249&amp;amp;chksm=906a9f93a71d1685301806528c0aa8954df470c544db22448ff0418d313b79943dd9bc665a7b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484036&amp;amp;idx=1&amp;amp;sn=598ea97cc82f4274b70867c59f61c249&amp;amp;chksm=906a9f93a71d1685301806528c0aa8954df470c544db22448ff0418d313b79943dd9bc665a7b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaViaCNwvct8rk2Po24kdiaJyW7k1oMSice49x02nLIwygp5eicS41DiaXibXOT0Y8bJiahsUibdDQwr4vNLkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;数仓规范篇 | 开发规范&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484024_1&quot; data-recommend-article-time=&quot;1617151800&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaWViaOJial8QcUEtDy2ibBIBE14jpxpucNSxSSeiaQ4CasvmfeI7lWykaWGVkfrnOS6GJhg0JjIFQJqeA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数仓规范篇 | 命名规范&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484024&amp;amp;idx=1&amp;amp;sn=9e75798cc1148134042d33ef7299afb8&amp;amp;chksm=906a9f6fa71d1679f7b5182a8963c74f855063bf787836470343db8262eecf598350960843c6#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484024&amp;amp;idx=1&amp;amp;sn=9e75798cc1148134042d33ef7299afb8&amp;amp;chksm=906a9f6fa71d1679f7b5182a8963c74f855063bf787836470343db8262eecf598350960843c6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42578125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaWViaOJial8QcUEtDy2ibBIBE14jpxpucNSxSSeiaQ4CasvmfeI7lWykaWGVkfrnOS6GJhg0JjIFQJqeA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;数仓规范篇 | 命名规范&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;业务指标的标准化&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数仓规范的定义除了指导命名，数据域、业务过程、修饰类型等的定义之外，还有一个重要的目标是管理每个指标，为上层数据产品、应用和服务提供公共指标。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5317307692307692&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEician34tIs3M1Vxl9fjBE05vg9ZrFNe8faDrnu6LramPicovCJaxkzIoA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1040&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;据阿里巴巴公共数据平台负责人介绍，阿里通过对30000多个数据指标进行了口径的规范和统一，梳理后缩减为3000余个，尽管工程浩大，但是此举却为阿里带来了显著的收效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以拆这么彻底，就是要消除歧义。条件允许的话可以协调开发同事、测试同事、产品同事口述一下对这个指标的理解看看有什么不同。最大程度的消除指标的歧义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后基于onedata如何构建数据指标这是一个很大的论点和内容，后续作者会单独写一篇文章，进行介绍，欢迎大家关注。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;模型设计及开发&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43037974683544306&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEbHRDkX9yOjJKqFy1Via33rTial8RCmwAXnv9ARHA8sdrCFjeib8bQERBQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;869&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6710144927536232&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEftyJT1OEnB0dq56I5C568bMicKe2U3icczjibMiaaL8dq34lRuhK6W19GA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据模型的设计主要还是以维度建模理论为基础，基于维度数据模型总线架构，构建一致性的维度和事实。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;针对如何进行数仓分层，可以点击下方文章链接：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend-list&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-from=&quot;yb-recommend&quot; data-recommend-article-type=&quot;normal&quot; data-recomment-template-id=&quot;1&quot; data-recommend-article-id=&quot;2247484854_1&quot; data-recommend-article-time=&quot;1626136560&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUWynbmIiciahE1M6aKOmvj5uHHlRVJ04Z475Vichvuv8Cjt59L8SGe0cRX8BpH9HeuGYwtqvmGJw0Tw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;最全面的数仓分层剖析，一文搞定企业数仓分层&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484854&amp;amp;idx=1&amp;amp;sn=d8acacc1d996e0487d035d91e373d3e9&amp;amp;chksm=906a98a1a71d11b7c0e9c67344a7892087c36d1cb05fd1aeba95952b5f0194e112119b41f120#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484854&amp;amp;idx=1&amp;amp;sn=d8acacc1d996e0487d035d91e373d3e9&amp;amp;chksm=906a98a1a71d11b7c0e9c67344a7892087c36d1cb05fd1aeba95952b5f0194e112119b41f120&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-type=&quot;normal&quot; data-recommend-tid=&quot;1&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42506350550381033&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUWynbmIiciahE1M6aKOmvj5uHHlRVJ04Z475Vichvuv8Cjt59L8SGe0cRX8BpH9HeuGYwtqvmGJw0Tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1181&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;最全面的数仓分层剖析，一文搞定企业数仓分层&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;知识扩展&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在2019年的阿里大会上，结合数据中台概念，阿里对onedata这一定义进行了更新完善更加前面的讲解，细化成OneModel,oneID,OneService。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4793452844894778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/p8gfFXwpDiaVWEsaHAL24IPMSrbGlElTEdW74ibt6Fv1h7yglIicicY0BbYcscyibSk02k5mqbWcK1RF4fIV4EUsKyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2566&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OneModel 即建立企业统一的数据公共层，从设计、开发、部署和使用上保障了数据口径规范和统一，实现数据资产全链路管理，提供标准数据输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OneID 即建立业务实体要素资产化为核心，实现全域链接、标签萃取、立体画像，其数据服务理念根植于心，强调业务模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OneService 即数据被整合和计算好之后，需要提供给产品和应用进行数据消费，为了更好的性能和体验，需要构建数据服务层，通过统一的接口服务化方式对外提供数据服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OneData 的实施过程是一个高度迭代和动态的过程，一般采用螺旋式实施方法。在总体架构设计完成后，开始根据数据域进行迭代示模型设计和评审。同时在架构设计、规范定义和模型设计等模型实施过程中，都会引入评审机制，以确保模型实施过程的正确性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里再强调一下作者对这一体系的总结，onedata 是通过完善的规范定义，同时结合数据中台产品，进行指标的统一定义及梳理，进一步标准化建模，从而保证数据只加工一次。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-recommend-type=&quot;list-title&quot; data-recommend-tid=&quot;6&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;往期推荐&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247485412_1&quot; data-recommend-article-time=&quot;1626851760&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaXaehtabFxAWROcYtLBuMzia3Mc7su5U1FNxjzA44rUuEHX7JIhh3Nl9xoN8gGrbG2Ps3bRHolv9XQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;大数据学习资料，你想要的全在这！&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247485412&amp;amp;idx=1&amp;amp;sn=336db89cfaffd54a311f542875fd4026&amp;amp;chksm=906a9af3a71d13e513ad2967a724c58c11e04e501689d678a73e064abe46e8be4825e114c5ae#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247485412&amp;amp;idx=1&amp;amp;sn=336db89cfaffd54a311f542875fd4026&amp;amp;chksm=906a9af3a71d13e513ad2967a724c58c11e04e501689d678a73e064abe46e8be4825e114c5ae&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;大数据学习资料，你想要的全在这！&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247484854_1&quot; data-recommend-article-time=&quot;1626136560&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUWynbmIiciahE1M6aKOmvj5uHHlRVJ04Z475Vichvuv8Cjt59L8SGe0cRX8BpH9HeuGYwtqvmGJw0Tw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;最全面的数仓分层剖析，一文搞定企业数仓分层&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484854&amp;amp;idx=1&amp;amp;sn=d8acacc1d996e0487d035d91e373d3e9&amp;amp;chksm=906a98a1a71d11b7c0e9c67344a7892087c36d1cb05fd1aeba95952b5f0194e112119b41f120#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484854&amp;amp;idx=1&amp;amp;sn=d8acacc1d996e0487d035d91e373d3e9&amp;amp;chksm=906a98a1a71d11b7c0e9c67344a7892087c36d1cb05fd1aeba95952b5f0194e112119b41f120&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;最全面的数仓分层剖析，一文搞定企业数仓分层&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247484478_1&quot; data-recommend-article-time=&quot;1625877443&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaUIib7OMZydnTc35eibYfEbmxibARMoVQh4dkUy9ly0vMkDUOzSN8eXJaN9fyIg8Pib3Y5pTqYyll8oxw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;都说数仓是面向主题建设的，那数仓的主题和主题域又应该怎么划分呢？&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484478&amp;amp;idx=1&amp;amp;sn=955bf5f03cc762c8909ccde78a08c563&amp;amp;chksm=906a9929a71d103f12ca218408ad0c0860eb9fd67ab294fb829bb0b8189e82ffd02a5fd5f681#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484478&amp;amp;idx=1&amp;amp;sn=955bf5f03cc762c8909ccde78a08c563&amp;amp;chksm=906a9929a71d103f12ca218408ad0c0860eb9fd67ab294fb829bb0b8189e82ffd02a5fd5f681&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;都说数仓是面向主题建设的，那数仓的主题和主题域又应该怎么划分呢？&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247484036_1&quot; data-recommend-article-time=&quot;1617344502&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaViaCNwvct8rk2Po24kdiaJyW7k1oMSice49x02nLIwygp5eicS41DiaXibXOT0Y8bJiahsUibdDQwr4vNLkQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数仓规范篇 | 开发规范&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484036&amp;amp;idx=1&amp;amp;sn=598ea97cc82f4274b70867c59f61c249&amp;amp;chksm=906a9f93a71d1685301806528c0aa8954df470c544db22448ff0418d313b79943dd9bc665a7b#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484036&amp;amp;idx=1&amp;amp;sn=598ea97cc82f4274b70867c59f61c249&amp;amp;chksm=906a9f93a71d1685301806528c0aa8954df470c544db22448ff0418d313b79943dd9bc665a7b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数仓规范篇 | 开发规范&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247484024_1&quot; data-recommend-article-time=&quot;1617151800&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaWViaOJial8QcUEtDy2ibBIBE14jpxpucNSxSSeiaQ4CasvmfeI7lWykaWGVkfrnOS6GJhg0JjIFQJqeA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;数仓规范篇 | 命名规范&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484024&amp;amp;idx=1&amp;amp;sn=9e75798cc1148134042d33ef7299afb8&amp;amp;chksm=906a9f6fa71d1679f7b5182a8963c74f855063bf787836470343db8262eecf598350960843c6#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484024&amp;amp;idx=1&amp;amp;sn=9e75798cc1148134042d33ef7299afb8&amp;amp;chksm=906a9f6fa71d1679f7b5182a8963c74f855063bf787836470343db8262eecf598350960843c6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;数仓规范篇 | 命名规范&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-title&quot; data-recomment-template-id=&quot;6&quot; data-recommend-article-id=&quot;2247484039_1&quot; data-recommend-article-time=&quot;1619087400&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/p8gfFXwpDiaV5pWZjLhlP9ELKhJX5fgnibHTGgmM2bQrZYJ2tWRuAyJ4m5CFfI2JUUpu24MxscFleiaEFDVRYdLHg/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;最值得阅读的数据仓库书籍推荐&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484039&amp;amp;idx=1&amp;amp;sn=143f50a845c85841af18c2e1092f2319&amp;amp;chksm=906a9f90a71d16863dde53487f7e97a3d1add666b29953731bf3df09a4206489dd05fb9d77f6#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&amp;amp;mid=2247484039&amp;amp;idx=1&amp;amp;sn=143f50a845c85841af18c2e1092f2319&amp;amp;chksm=906a9f90a71d16863dde53487f7e97a3d1add666b29953731bf3df09a4206489dd05fb9d77f6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;section data-recommend-title=&quot;t&quot; data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;最值得阅读的数据仓库书籍推荐&lt;/p&gt;&lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/p8gfFXwpDiaXaehtabFxAWROcYtLBuMziaqE6czxUdQtTXjGwL1E74k1AXiaECV6uheh97LLTb94j0icNyTS2icLu0g/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-role=&quot;outer&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-id=&quot;94248&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.6222222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/BFibC8wtke3uHUXGDkSn8SOuc7g3vHgRr7gSZp0so3bUYlWy2sh8os4EDA1319nasSp0K6wLYNDuD7eAv4NzbFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;45&quot;/&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-brushtype=&quot;text&quot; mpa-from-tpl=&quot;t&quot;&gt;🧐&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;分享&lt;/span&gt;&lt;/strong&gt;、&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;点赞&lt;/span&gt;&lt;/strong&gt;、&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;在看&lt;/span&gt;&lt;/strong&gt;，给个&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span&gt;3连击&lt;/span&gt;&lt;/strong&gt;呗！👇&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>03e51024222c87733381edb2090b455a</guid>
<title>如何使用 DDD 指导微服务拆分？</title>
<link>https://toutiao.io/k/3yzh7i0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.33184855233853006&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgRgzIV2YTLYP1C9K6m6ZesXIGMic8cBk5es1ZicMDfULrExGEw49a51icWhlYkA1pXmib62xNNUDrMgXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;71&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;我是架构精进之路，大厂架构师，CSDN博客专家，点击上方“关注”，坚持每天为你分享技术干货，私信我回复“01”，送你一份程序员成长进阶大礼包。&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;span&gt;软件架构发展经历&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;软件架构的发展经历了从单体架构、垂直架构、SOA架构到微服务架构以及到现在最新的service mesh（网格服务架构）的过程。借用dubbo的网站架构发展图和说明：&lt;/span&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.3005952380952381&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgR3dp9YAOgwyM85pIibib21D4qiayibFYOarO1XicLXjEG9FFTSX94S9IgwJs24hmEqNPh2dffHNntr4Yg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1008&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;微服务存在的问题&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;进入微服务之后 ， 解决了集中式架构的单体应用很多问题， 但是新的问题应运而生 ， 微服务的力度应该多大 ？微服务如何设计呢？微服务如何拆分 ？微服务边界在哪里 ？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很长时间人们都没有解决这一问题，就连Martin Fowler在提出微服务架构的时候也没有告诉我们这该如何拆分微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;甚至在很长的时间里人们对微服务拆分产生了一些误解， 有人认为：&quot;微服务很简单，就是将之前的单体应用拆分成多个部署包， 或者将原来的单体应用架构替换为一套支持微服务的技术架构，就算是微服务了。&quot; 还有人认为微服务应该拆分得越小越好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;鉴于上述情形， 很多项目因为前期拆分过度， 导致复杂度过高， 导致后期难以运维甚至难以上线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以得出一个结论：&lt;span&gt;微服务拆分困境产生的根本原因就是不知道业务或者微服务的边界到底在什么地方。换句话说，确定了业务边界和应用边界，这个困境也就迎刃而解了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;DDD的诞生&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;而DDD就是解决了这个确定业务边界的问题，可见DDD并不是一种技术架构，而是一种划分业务领域范围的方法论。DDD的兴起是由于很多熟悉领域驱动建模(DDD)的工程师在进行微服务设计时， 发现用DDD的思路进行业务梳理可以很好规划服务边界， 可以很好实现微服务内部和外部的&quot;高内聚、低耦合&quot;。于是越来越多的人将DDD作为业务划分的指导思想。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DDD是一种拆解业务、划分业务、确定业务边界的方法， 是一种高度复杂的领域设计思想，将我们的问题拆分成一个个地域， 试图分离技术实现的复杂性，主要解决的是软件难以理解难以演进的问题，DDD不是一种架构， 而是一种架构方法论， 目的就是将复杂问题领域简单化， 帮助我们设计出清晰的领域和边界， 可以很好的实现技术架构的演进。DDD包括两部分，战略设计部分和战术设计部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务拆分难题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发者在刚开始尝试实现自己的微服务架构时，往往会产生一系列问题 ：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微服务到底应该怎么划分？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一个典型的微服务到底应该有多微？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果做了微服务设计，最后真的会有好处吗？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;回答上面的问题需要首先了解微服务设计的逻辑，&lt;strong&gt;科学的架构设计应该通过一些输入并逐步推导出结果&lt;/strong&gt;，架构师要避免凭空设计和“拍脑门”的做法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务的划分有一些基本的方法和原则，通过这些方法能让微服务划分更有操作性。最终在微服务落地实施时也能按图索骥，无论是对遗留系统改造还是全新系统的架构都能游刃有余。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务拆分的几个阶段&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在开始划分微服务之前，架构师需要在大脑中有一个重要的认识：&lt;strong&gt;微服务只是手段，不是目的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务架构是为了让系统变得更容易拓展、更富有弹性。在把单体应用变成靠谱的微服务架构之前，单体系统的各个模块应该是合理、清晰地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，从逻辑上单体系统和微服务没有区别，某种理想情况下微服务只是把单体系统的各个模块分开部署了而已&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大量的实践教训告诉我们，混沌的微服务架构，比解耦良好的单体应用会带来更多麻烦。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBIgWq1BBpiblPa6yJx8uaJ2Y1ibwibwSr9f4dcPThgd8icGbq1m4A2EWNfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;混乱的微服务VS良好的单体&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;领域驱动设计立足于面向对象思想，从业务出发，通过领域模型的方式反映系统的抽象，从而得到合理的服务划分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;采用 DDD 来进行业务建模和服务拆分时，可以参考下面几个阶段：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用 DDD（领域驱动建模） 进行业务建模，从业务中获取抽象的模型（例如订单、用户），根据模型的关系进行划分限界上下文。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;检验模型是否得到合适的的抽象，并能反映系统设计和响应业务变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从 DDD 的限界上下文往微服务转化，并得到系统架构、API列表、集成方式等产出。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.38828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBQicia5EuFF5Kov7znJalJwJnNLUO2O0yT2yEic5kBPhfFULFJu8XAvIbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用DDD划分微服务的过程&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如何抽象？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;抽象需要找到看似无关事务的内在联系，对微服务的设计尤为重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而现实的例子比比皆是，电信或移动营业厅还需要用户分两步办理号卡业务、宽带业务。原始是不合适的抽象模型造成的，并最终影响了微服务的划分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以使用概念图来描述一些概念的抽象关系。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9529652351738241&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icB3tcL7qH6ZzaQ7jlOuwZoX2zNPjQTjWCBLs1hr215CF8ft8S6YHZxtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;978&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;商品这一概念的概念图&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如果没有抽象出领域模型，就得不到正确的微服务划分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用DDD进行业务建模&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过利用DDD对系统从业务的角度分析，对系统进行抽象后，得到内聚更高的业务模型集合，&lt;/span&gt;在DDD中一组概念接近、高度内聚并能找到清晰的边界的业务模型被称作限界上下文（Bounded Context）。&lt;/p&gt;&lt;p&gt;&lt;span&gt;限界上下文可以视为逻辑上的微服务，或者单体应用中的一个组件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在电商领域就是订单、商品以及支付等几个在电商领域最为常见的概念；在社交领域就是用户、群组、消息等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DDD的方法论中是如何找到子系统的边界的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中一项实践叫做事件风暴工作坊，工作坊要求业务需求提出者和技术实施者协作完成领域建模。把系统状态做出改变的事件作为关键点，从系统事件的角度触发，提取能反应系统运作的业务模型。再进一步识别模型之间的关系，划分出限界上下文，可以看做逻辑上的微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;事件是系统数据流中的关键点，类似于电影制作中的关键帧。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;98&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;例如系统管理员可以登录、创建商品、上架商品，对应的系统状态的改变是用户已登录、商品已创建、商品已经上架；相应的顾客可以登录、创建订单、支付，对应的系统状态改变是用户已登录、订单已创建、订单已支付。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBzOmxUp38qR5ic7Y1tU05FbibQlgfOa6vWkb7bv1gfQ389nrIjze8aZEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;利用事件刺探业务黑盒并抽象出模型&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在得到模型之后，通过分析模型之间的关系得出限界上下文。例如商品属性和商品相对于用户、用户组关系更为密切，通过这些关系作出限界上下文拆分的基本线索。&lt;/p&gt;&lt;p&gt;其次是识别模型中的二义性，让限界上下文划分更为准确。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;49&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;例如，在电商领域，另外一个不恰当设计的例子是：把订单中的订单项当做和商品同样的概念划分到了商品服务&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;但订单中的商品实际上和商品库中的商品不是同一个概念。当订单需要修改订单下的商品信息时，需要访问商品服务，这势必造成了订单和商品服务的耦合。&lt;/p&gt;&lt;p&gt;合理的设计应该是：商品服务提供商品的信息给订单服务，但是订单服务没有理由修改商品信息，而是访问作为商品快照的订单项。&lt;/p&gt;&lt;p&gt;订单项应该作为一个独立的概念被划分到订单服务中，而不是和商品使用同一个概念，甚至共享同一张数据库表。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6403846153846153&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBIIg3OiaXgicXzVwsNe2mtqrsKhWP72a9ibyuuRAB7jPdbuNGt981icI6PQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;典型具有”二义性“陷阱的场景&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;一组关系密切的模型形成了上下文（context），二义性的识别能帮我们找到上下文的边界（bounded）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;验证和评审领域模型&lt;/span&gt;&lt;/p&gt;&lt;p&gt;前面我们说到限界上下文可以作为逻辑上的微服务，但并不意味着我们可以直接把限界上下文变成微服务。&lt;/p&gt;&lt;p&gt;限界上下文被设计出来后，验证它的方法可以从我们采用微服务的两个目的出发：降低耦合、容易扩展，可以作为限界上下文评审原则：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;原则1：&lt;/span&gt;&lt;/strong&gt;设计出来的限界上下文之间的互相依赖应该越少越好，依赖的上游不应该知道下游的信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;原则2：&lt;/span&gt;&lt;/strong&gt;使用潜在业务进行适配，如果能在一定程度上响应业务变化，则证明用它指导出来的微服务可以在相当一段时间内足以支撑应用开发。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是理想的领域模型往往抽象程度、成本、复用性这几个因素中获取平衡。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6442953020134228&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBIUXWPMcrnic3gicmNXxPr8eU9hWbG5nCAeNf63miavcZblB9e3tBNf9bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;span&gt;”抽象”的成本&lt;/span&gt;&lt;/p&gt;&lt;p&gt;用一个简单的图来表达话，我们的领域模型设计往往在复用性和成本取得平衡的中间区域才有实用价值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;几个典型的误区&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在大量使用DDD指导微服务拆分的实践后，我们发现很多系统设计存在一些常见的误区&lt;/p&gt;&lt;p&gt;主要分为两类：未成功做出抽象、抽象程度过高、错误的抽象。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）未成功做出抽象&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在实际开发过程中，大家都有一个体会，设计阶段只考虑了一些常见的服务，但是发现项目中有大量可以重用的逻辑，并应该做成单独服务。&lt;/p&gt;&lt;p&gt;当我们在做服务拆分时，遗漏了服务的结果是有一些业务逻辑被分散到各个服务中，并不断重复。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）抽象程度过高&lt;/span&gt;&lt;/p&gt;&lt;p&gt;抽象程度过高最典型的一个特征是得到的限界上下文极端的微小。&lt;/p&gt;&lt;p&gt;抽象程度过高带来的成本有：更多的微服务部署带来的运维压力、开发调试难度提高、服务间通信带来的性能开销、跨服务的分布式事务协调等。因此抽象不是越高越好，应根据实际业务需要和成本考虑。&lt;/p&gt;&lt;p&gt;那相应的，微服务到底应该多小呢？&lt;/p&gt;&lt;p&gt;业界流传一句话来形容，微服务应该多小：“一个微服务应该可以在二周内完成重写“。&lt;/p&gt;&lt;p&gt;这句话可能只是一句调侃，如果真的作为微服务应该多微的标准是不可取的。&lt;/p&gt;&lt;p&gt;微服务的大小应该取决于划分限界上下文时各个限界上下文内聚程度。&lt;/p&gt;&lt;p&gt;&lt;span&gt;3）错误抽象&lt;/span&gt;&lt;/p&gt;&lt;p&gt;对微服务或DDD理解不够。模型具有二义性，被放到不同的限界上下文。&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;34&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;例如，订单中的收货地址、用户配置的常用地址以及地址库中的标准地址。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;这三种地址虽然名称类似，但是在概念上完全不是一回事&lt;/p&gt;&lt;p&gt;假如架构师将”地址“划分到了标准地址库中，势必会造成用户上下文和系统配置上下文、订单上下文存在不必要的耦合。&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.33671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMKX7MvDD7wzOdJ6BYXAr1icBzfLeQwhia2naX2c1E0VOlZWyU9G70YphSuic0XFyc0DUK7orIibF76IwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;抽象错误带来的依赖&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上图的右边为正常的依赖关系，左边产生了不正常的依赖，会进一步产生双向依赖。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从限界上下文到系统架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在通过 DDD 得到领域模型和限界上下文后，理论上我们已经得到了微服务的拆分。但是，限界上下文到系统架构还需要完成下面几件事。&lt;/p&gt;&lt;p&gt;&lt;span&gt;1）设计微服务之间的依赖关系&lt;/span&gt;&lt;/p&gt;&lt;p&gt;一个合理的分布式系统，系统之间的依赖应该是非常清晰地。依赖，在软件开发中指的是一个应用或者组件需要另外一个组件提供必要的功能才能正常工作。因此被依赖的组件是不知道依赖它的应用的，换句话说，被调用者不需要知道调用方的信息，否则这不是一个合理的依赖&lt;/p&gt;&lt;p&gt;在微服务设计时，如果 domain service 需要通过一个 from 参数，根据不同的渠道做出不同的行为，这对系统的拓展是致命的。例如，用户服务对于访问他的来源不应该知晓；用户服务应该对订单、商品、物流等访问者提供无差别的服务。&lt;/p&gt;&lt;p&gt;因此，微服务的依赖关系可以总结为：上游系统不需要知道下游系统信息，否则请重新审视系统架构。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2）设计微服务间集成方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拆分微服务是为了更好的集成到一起，对于后续落地来说，还有服务集成这一重要的阶段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务之间的集成方式会受到很多因素的制约，前面在讨论微服务到底有多微的时候就顺便提到了集成会带来成本，处于不同的目的可以采用不同的集成方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三种集成方式耦合程度由高到低，适用于不同的场景，需要根据实际情况选择，甚至在系统中可能同时存在。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务间集成的方式还有其他方式，一般来说，上面三种微服务集成的方式可以概括目前常见系统大部分需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8105395232120451&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/aaVJqS7LaMLt6TpKkfb6RASk88Kib7arRqaRpLDSPM8r2OCWRQx0hnWjwf8IHACSvTqQ5FYLFQftYnzSiaaTOibPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;797&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这篇文章主要研讨了DDD火起来的原因， 解决了什么业界难题， 知道DDD主要思路 ， 以及DDD大概的实现步骤等 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;逻辑往往比经验更为重要。写这篇文章的初衷是为了得到&lt;/span&gt;微服务划分的依据是什么，我该怎么有说服力的回复？&lt;/p&gt;&lt;p&gt;&lt;span&gt;是具体情况具体分析？By experience？还是说，我是通过一套方法对业务逻辑进行分析得到的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;🎉&lt;/span&gt; 福利&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;关注公众号回复关键字：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;DDD&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，即可免费获取&lt;strong&gt;《DDD大会全套资料》一套&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;·················· &lt;/span&gt;&lt;span&gt;END&lt;/span&gt;&lt;span&gt; ··················&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注公众号，免费领学习资料&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzA3MDg5MDkzOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgQmUQ0Aca9qSYNFn0tQEXQc5EibBkqQLYtibYBj1hXuagwXkNc3kVwplHxIl7KQfBIiagysgn9GDUUibw/0?wx_fmt=png&quot; data-nickname=&quot;架构精进之路&quot; data-alias=&quot;jiagou_jingjin&quot; data-signature=&quot;十年研发风雨路，大厂架构师，CSDN博客专家。专注软件架构研究，技术学习与职业成长，坚持分享接地气儿的架构技术干货文章！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;十年研发路，大厂架构师，&lt;/span&gt;&lt;span&gt;CSDN博客专家&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;专注架构技术学习及分享，职业与认知升级&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;坚持分享接地气儿的干货，&lt;span&gt;期待与你一起成长&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98311&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z2bVaFK6CgTqLjdQBs7fV8zqHRaQhA2ibia13fFn6ibS5qr5PpmZoxd8nlhAyJu7d1CjLicAruicOEb7uxibEGM476xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;87502&quot;&gt;&lt;p&gt;&lt;span&gt;「架构精进之路」专注架构研究，技术分享&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97708&quot;&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;点“赞”和“在看”哦&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;1.5925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/noz2jw2hPlWiaCrGuJxBicU5mcib3QapDLyo6eKnNVm9dPTV4Z1SicHLtrCCwOG9gblMBFlKf7p9cvwL6wIkZJvamg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;135&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1ff5ab32840f1f6d9022db7337672ce</guid>
<title>Go 语言到底有没有引用？</title>
<link>https://toutiao.io/k/pmn4eg8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;Go怎么可能有引用？得了吧~&lt;br/&gt;有人要说了，那利用&lt;code&gt;make()&lt;/code&gt;函数执行后得到的slice、map、channel等类型，不都是得到的引用吗？&lt;/p&gt;&lt;p&gt;我要说：那能叫&lt;strong&gt;引用&lt;/strong&gt;吗？你能确定啥叫&lt;strong&gt;引用&lt;/strong&gt;吗？&lt;br/&gt;如果你有点迷糊，那么请听我往下讲：&lt;/p&gt;&lt;p&gt;这一切要从变量说起。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;什么是变量&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;无论是引用变量还是指针变量，都是变量；那么，什么叫变量？&lt;br/&gt;其实变量本质就是一块内存。通常，我们对计算机内存进行操作，最直接的方式就是：“计算机，在0x0201地址内存一个整数100，在0x00202地址存一个浮点数10.6，读取0x00203的数据…” 这种方式让机器来操作还行，如果直接写成代码让人看的话，这一堆“0x0201、0x0202…”难记的地址能把人给整崩溃了~&lt;br/&gt;于是，聪明的人们想出了一种方法：把一堆难记的地址用其他人类可以方便读懂的方式来间接表示。例如：将“0x0201”的地址命名为“id”，将“0x0202”命名为“score”…然后，代码编译期间，再将&quot;name&quot;等人类能读懂的文字转化为真实的内存地址；于是，变量诞生了~&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;234&quot; data-backw=&quot;371&quot; data-ratio=&quot;0.6307277628032345&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9ojXSNCtvmrdHgibTd9fEsLtepOp5q33RTJ72mTdWgXJMnC1IOXWNhm8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;371&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;所以，其实每个变量都代表了一块内存，变量名是我们给那块儿内存起的一个别名，内存中存的值就是我们给变量赋的值。变量名在程序编译期间会直接转化为内存地址。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;什么是引用&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;引用是指向另外一个变量的变量，或者说，叫一个已知变量的别名。&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;264&quot; data-backw=&quot;371&quot; data-ratio=&quot;0.7115902964959568&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9oLLUiaNADlq80jeV95vSAIwv8lUibib0B0TicFVaRia6jYqZAEg74GAQTFvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;371&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;注意，引用和引用本身指向的变量对应的是同一块内存地址。引用本身也会在编译期间转化为真正的内存地址。当然咯，引用和它指向的变量在编译期间会转化为同一个内存地址。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;什么是指针&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;指针本身也是一个变量，需要分配内存地址，但是内存地址中存的是另一个变量的内存地址。有点绕口，请看图：&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;274&quot; data-backw=&quot;391&quot; data-ratio=&quot;0.7007672634271099&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9oyXau4gB7hCqub0GFrbeiaYAD1ql4er6CAQJdp7G63cmmkU10JYQOuDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;391&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;GO中的引用和指针&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们先看看“正统”的引用的例子，在C++中(C中是没有引用的哈)：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;span&gt;include&lt;/span&gt; &lt;span&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(&lt;span&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;3&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; *ptr = &amp;amp;i;&lt;br/&gt;        &lt;span&gt;int&lt;/span&gt; &amp;amp;ref = i;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;printf&lt;/span&gt;(&lt;span&gt;&quot;%p %p %p\n&quot;&lt;/span&gt;, &amp;amp;i, ptr, &amp;amp;ref); &lt;br/&gt;        &lt;span&gt;// 打印出：0x7ffeeac553a8 0x7ffeeac553a8 0x7ffeeac553a8&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量地址、引用地址、指针的值 均相同；符合常理&lt;/p&gt;&lt;p&gt;那我们再试试Go中类似代码的例子:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    i := &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;    ref := i&lt;br/&gt;    ptr := &amp;amp;i&lt;br/&gt;&lt;br/&gt;    fmt.Println(fmt.Sprintf(&lt;span&gt;&quot;%p %p %p&quot;&lt;/span&gt;, &amp;amp;i, &amp;amp;ref, ptr))&lt;br/&gt;    &lt;span&gt;// 打印出 0xc000118000 0xc000118008 0xc000118000&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量i地址和指针ptr的值一样，这是符合预期的；但是：正如Go中没有特别的“引用符号”（C++中是&lt;code&gt;int &amp;amp;ref = i;&lt;/code&gt;）一样，上述go代码中的&lt;code&gt;ref&lt;/code&gt;压根就是个变量，根本不是引用。&lt;/p&gt;&lt;p&gt;可是，很多人不死心，是不是“实验对象”不对啊？代码中使用的是int整型，我们换做&lt;code&gt;slice&lt;/code&gt;和&lt;code&gt;map&lt;/code&gt;试试？毕竟网上的&quot;资料&quot;都是这么写的：&lt;br/&gt;例如以下截图（只看标红部分就好）：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.258148631029987&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9owP3UgaG6Cnv70nk988PZshTPVXhQyK4pRZ20sgnP5icR3OfFpaBrQYg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1534&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;还有如下截图（只看标红部分就好）：&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;279&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.4830393487109905&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9oSD8ftONBjoEMK0HaiaKddVHHBwub2NeSYuIWhKwNca6OVD5OpgQho9A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1474&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;ok，那我们可以试试如下map的代码，看到底有没有引用：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    i := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;)&lt;br/&gt;    i[&lt;span&gt;&quot;key&quot;&lt;/span&gt;]=&lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    ref := i&lt;br/&gt;&lt;br/&gt;    fmt.Println(fmt.Sprintf(&lt;span&gt;&quot;%p %p&quot;&lt;/span&gt;, &amp;amp;i, &amp;amp;ref))&lt;br/&gt;    &lt;span&gt;// 打印出：0xc00010e018 0xc00010e020&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哈哈！不对呀，如果是引用的话，打印的地址应该相同才对，但是现在不相同！所以不存在？&lt;br/&gt;别着急，紧接着看下面的例子：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    i := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;)&lt;br/&gt;    i[&lt;span&gt;&quot;key&quot;&lt;/span&gt;]=&lt;span&gt;&quot;value&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    ref := i&lt;br/&gt;    ref[&lt;span&gt;&quot;key&quot;&lt;/span&gt;] = &lt;span&gt;&quot;value1&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fmt.Println(i[&lt;span&gt;&quot;key&quot;&lt;/span&gt;]) &lt;span&gt;// 打印结果：value1&lt;/span&gt;&lt;br/&gt;    fmt.Println(ref[&lt;span&gt;&quot;key&quot;&lt;/span&gt;]) &lt;span&gt;// 打印结果：value1&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fmt.Println(fmt.Sprintf(&lt;span&gt;&quot;%p %p&quot;&lt;/span&gt;, &amp;amp;i, &amp;amp;ref))&lt;br/&gt;    &lt;span&gt;// 打印结果：0xc00000e028 0xc00000e030&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;能猜出来打印了什么吗？变量地址是不对，但是，但是值居然变了！ref变量可以“操控”i变量的内容！就和引用一样！&lt;/p&gt;&lt;p&gt;这就很奇怪了~ 咋回事儿呢？&lt;/p&gt;&lt;p&gt;我们细细研究一下&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;channel&lt;/code&gt;等具体实现（详情请看：我的其他文章 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjcwOTA3NA==&amp;amp;mid=2651220479&amp;amp;idx=1&amp;amp;sn=a8ddbd3da195ca9e1faf193a1e477d17&amp;amp;chksm=81348ac2b64303d401b818164cd042b8e2c5c84892b9b06a6a57765f354d0534d6c6499644d5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图解Go map底层实现&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;图解Go map底层实现&lt;/a&gt;、图解Go slice底层实现https://juejin.cn/post/6988377165242826760、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjcwOTA3NA==&amp;amp;mid=2651220462&amp;amp;idx=1&amp;amp;sn=810bcad2b794e137d316e397860cf561&amp;amp;chksm=81348ad3b64303c50e4a8a16980dbad47fabf3d102f652c4fefd1459994468185c568c435279&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;图解Go channel底层实现&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;图解Go channel底层实现&lt;/a&gt;）我们发现，这些类型的底层实现都是会有一个指针指向另外的存储地址，所以，在&lt;code&gt;make&lt;/code&gt;函数创建了具体的类型实例后，实际上在内存空间中会开辟多个地址空间，而随着变量的赋值，指针引用的那个地址值也会跟着“复制”，因而其他变量可以改变原有变量的内容。&lt;/p&gt;&lt;p&gt;听着是不是有点绕？我们来看看图：&lt;/p&gt;&lt;p&gt;首先实例化了map并赋值&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;281&quot; data-backw=&quot;446&quot; data-ratio=&quot;0.6300448430493274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9o8ckLia7Uo4hiaG259tgrzWUowLIaIgMqrju9kSXY7NlJnTHS26EIZ94Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;446&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;然后又赋值给了另外一个变量ref&lt;/p&gt;&lt;figure&gt;&lt;img data-backh=&quot;386&quot; data-backw=&quot;483&quot; data-ratio=&quot;0.7991718426501035&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9oasH3Y29Q9lBBVoqvRA5GYSV8KV3f4rtmMWIGMAdmRtmJZ1bvZ7RSXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;483&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;由于对于指针变量的值而言，就是一个地址(程序实现上就是一串数字)，所以，在赋值的时候，就“复制”了一串数字，但是，这串数字背后的含义确是另外一个地址，而地址的内容，恰恰就是&lt;code&gt;map&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &lt;code&gt;channel&lt;/code&gt; 等数据结构真正底层存储的数据!&lt;/p&gt;&lt;p&gt;所以，两变量因为同一个指针变量指向的内存，而产生了类似于“引用”的效果。假如实例化的类型数据中，没有&lt;code&gt;指针&lt;/code&gt;属性，则不会产生这种“类引用”的效果：&lt;br/&gt;例如如下代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    i := &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    ref := i&lt;br/&gt;    ref = &lt;span&gt;4&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fmt.Println(i, ref) &lt;span&gt;// 打印输出：3 4&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fmt.Println(fmt.Sprintf(&lt;span&gt;&quot;%p %p&quot;&lt;/span&gt;, &amp;amp;i, &amp;amp;ref))&lt;br/&gt;    &lt;span&gt;// 打印输出：0xc000016070 0xc000016078&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以将代码上述仔细看看能输出什么，不出意外的话你会发现：“类引用”效果消失了~&lt;/p&gt;&lt;p&gt;要想再次展现“类引用”效果，只要创建一个带有指针属性的类型即可，我们自己实现都可以，无需依赖Go基础库中的&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;slice&lt;/code&gt;、&lt;code&gt;channel&lt;/code&gt;等&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Instance &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    Name &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    Data *&lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(i Instance)&lt;/span&gt; &lt;span&gt;Store&lt;/span&gt;&lt;span&gt;(num &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    *(i.Data) = num&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(i Instance)&lt;/span&gt; &lt;span&gt;Show&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; *(i.Data)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    data := &lt;span&gt;5&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    i := Instance{&lt;br/&gt;        Name:&lt;span&gt;&quot;hello&quot;&lt;/span&gt;,&lt;br/&gt;        Data:&amp;amp;data,&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    ref := i&lt;br/&gt;    ref.Store(&lt;span&gt;7&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;    fmt.Println(i.Show(), ref.Show())&lt;br/&gt;    &lt;span&gt;// 打印出：7 7&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    fmt.Println(fmt.Sprintf(&lt;span&gt;&quot;%p %p&quot;&lt;/span&gt;, &amp;amp;i, &amp;amp;ref))&lt;br/&gt;    &lt;span&gt;// 打印出：0xc0000a6018 0xc0000a6030&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看看以上代码，是不是实现了“类引用”？有人要说了&lt;code&gt;map&lt;/code&gt;展示key值，&lt;code&gt;slice&lt;/code&gt;展示某个下标的值，没有用方法呀？&lt;br/&gt;这就不对了，其实&lt;code&gt;map&lt;/code&gt;的展示key的值&lt;code&gt;mapData[key]&lt;/code&gt;也好，更改值也好，&lt;code&gt;slice&lt;/code&gt;展示下标值&lt;code&gt;sliceArray[0]&lt;/code&gt;也好，更改值也好；背后底层实现也都是些“函数”和“方法”，只不过Go语言把这些函数和方法做成了语法糖，我们无感知罢了~&lt;/p&gt;&lt;p&gt;好了，现在我再问你：还敢说Go语言有引用类型吗？是不是感觉：也有、也没有了？😝&lt;/p&gt;&lt;h2&gt;&lt;span&gt;更多精彩内容，请关注我的微信公众号 ``互联网技术窝``&lt;/span&gt;&lt;/h2&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/f2nwBpf5ibzvyjN2uDk0qw5D8LHC7ZK9olUCLr0hpR6KYM5MCH1zI3JW6FucBx4v01e2rNtItiaG6jMeV0BSAzsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>27f457feee47a9cfb00c3c20e41c662c</guid>
<title>MySQL 8.0 Server 层最新架构详解</title>
<link>https://toutiao.io/k/p5bya5q</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuR0N5bSG37M8P4McjtRLucVnXlBjfBAqdbIsWOg7yIWzZ3yWOpytCn5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;一  背景和架构&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文基于MySQL 8.0.25源码进行分析和总结。这里MySQL Server层指的是MySQL的优化器、执行器部分。我们对MySQL的理解还建立在5.6和5.7版本的理解之上，更多的是对比PostgreSQL或者传统数据库。然而从MySQL 8.0开始，持续每三个月的迭代和重构工作，使得MySQL Server层的整体架构有了质的飞越。下面来看下MySQL最新的架构。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.2844243792325056&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuR95nlpgM1qYeKhQo5KiaHwnhHM0AcSiaObGAGqUwBedticZ7uD4GZFbCIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;886&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们可以看到最新的MySQL的分层架构和其他数据库并没有太大的区别，另外值得一提的是从图中可以看出MySQL现在更多的加强InnoDB、NDB集群和RAPID(HeatWave clusters)内存集群架构的演进。下面我们就看下具体细节，我们这次不随着官方的Feature实现和重构顺序进行理解，本文更偏向于从优化器、执行器的流程角度来演进。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;二  MySQL 解析器Parser &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先从Parser开始，官方MySQL 8.0使用Bison进行了重写，生成Parser Tree，同时Parser Tree会contextualize生成MySQL抽象语法树（Abstract Syntax Tree）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuR1ibtUiaLiclnTh4cs5AS95yaGdAqribcwxAoY5u1wR4JISFUAQOjwD5icgg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MySQL抽象语法树和其他数据库有些不同，是由比较让人拗口的SELECT_LEX_UNIT/SELECT_LEX类交替构成的，然而这两个结构在最新的版本中已经重命名成标准的SELECT_LEX -&amp;gt; Query_block和SELECT_LEX_UNIT -&amp;gt; Query_expression。Query_block是代表查询块，而Query_expression是包含多个查询块的查询表达式，包括UNION AND/OR的查询块（如SELECT * FROM t1 union SELECT * FROM t2）或者有多Level的ORDER BY/LIMIT (如SELECT * FROM t1 ORDER BY a LIMIT 10) ORDER BY b LIMIT 5。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;例如，来看一个复杂的嵌套查询：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; ttt1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; ttt2) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; a,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     (&lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; ttt3&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;SELECT&lt;/span&gt; *&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;      &lt;span class=&quot;code-snippet__keyword&quot;&gt;FROM&lt;/span&gt; ttt4) &lt;span class=&quot;code-snippet__keyword&quot;&gt;AS&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在MySQL中就可以用下面方式表达：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.428125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRrXPTIzshNM8IKiatAXwIWG9HjawiazLD0UgYibhBccFTHxhGlZqQgRaEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;经过解析和转换后的语法树仍然建立在Query_block和Query_expression的框架下，只不过有些LEVEL的query block被消除或者合并了，这里不再详细展开。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;三  MySQL prepare/rewrite阶段&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来我们要经过resolve和transformation过程Query_expression::prepare-&amp;gt;Query_block::prepare，这个过程包括（按功能分而非完全按照执行顺序）：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  Setup and Fix&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  Transformation&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里，节省篇幅，我们只举例关注下和top_join_list相关的simple_joins这个函数的作用，对于Query_block中嵌套join的简化过程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8949096880131363&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRJNSH2LLJj3vRs15T08ic51oQnYQvJGgeqwMSK2qBGL75CIicgB5grDnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  对比PostgreSQL&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了更清晰的理解标准数据库的做法，我们这里引用了PostgreSQL的这三个过程：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Parser&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图首先Parser把SQL语句生成parse tree。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;testdb=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.44140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRNpNfYFE2P27RnS8L3Sla0a35XBiaoeDUyUnHGQasQdYTIu2SqHKILmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Analyzer/Analyser&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图展示了PostgreSQL的analyzer/analyser如何将parse tree通过语义分析后生成query tree。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.43984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuR0EcC8icCOaXOVkQBuGSvE7C395dTlPwhd3bo29dPaP0b38ib3Bu9BsXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Rewriter&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Rewriter会根据规则系统中的规则把query tree进行转换改写。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sampledb=# CREATE VIEW employees_list &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sampledb-#      AS SELECT e.id, e.name, d.name AS department &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sampledb-#            FROM employees AS e, departments AS d WHERE e.department_id = d.id;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图的例子就是一个包含view的query tree如何展开成新的query tree。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;sampledb=&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.353125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRyz3aut0Q2ZoeGMZ5YyNf2DGjppz1RUkwDspfFS5jYK4OqG87Tptw2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;四  MySQL Optimize和Planning阶段&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来我们进入了逻辑计划生成物理计划的过程，本文还是注重于结构的解析，而不去介绍生成的细节，MySQL过去在8.0.22之前，主要依赖的结构就是JOIN和QEP_TAB。&lt;/span&gt;&lt;span&gt;JOIN是与之对应的每个Query_block，而QEP_TAB对应的每个Query_block涉及到的具体“表”的顺序、方法和执行计划。然而在8.0.22之后，新的基于Hypergraph的优化器算法成功的抛弃了QEP_TAB结构来表达左深树的执行计划，而直接使用HyperNode/HyperEdge的图来表示执行计划。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.48359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRBU7DDtSic9soQt1U34UvJxlice29FqY89YIB3iaMQCJaBonvWudfawicFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举例可以看到数据结构表达的left deep tree和超图结构表达的bushy tree对应的不同计划展现：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;perl&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| -&amp;gt; Inner hash &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;no&lt;/span&gt; condition)  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;1.40&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -&amp;gt; Table scan on R4  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -&amp;gt; Hash&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -&amp;gt; Inner hash &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;no&lt;/span&gt; condition)  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;1.05&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -&amp;gt; Table scan on R3  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -&amp;gt; Hash&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                -&amp;gt; Inner hash &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;no&lt;/span&gt; condition)  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;70&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    -&amp;gt; Table scan on R2  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    -&amp;gt; Hash&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        -&amp;gt; Table scan on R1  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;| -&amp;gt; Nested loop inner &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;55&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;55&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -&amp;gt; Nested loop inner &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -&amp;gt; Table scan on R4  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -&amp;gt; Filter: (R4.c1 = R3.c1)  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -&amp;gt; Table scan on R3  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    -&amp;gt; Nested loop inner &lt;span class=&quot;code-snippet__keyword&quot;&gt;join&lt;/span&gt;  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -&amp;gt; Table scan on R2  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        -&amp;gt; Filter: (R2.c1 = R1.c1)  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;35&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            -&amp;gt; Table scan on R1  (cost=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt;..&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;code-snippet__number&quot;&gt;25&lt;/span&gt; rows=&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;MySQL8.0.2x为了更好的兼容两种优化器，引入了新的类AccessPath，可以认为这是MySQL为了解耦执行器和不同优化器抽象出来的Plan Tree。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.031496062992126&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRHLkUgJMS4XRicypM3g9P6PGyHmzvYbeQ0QJIrTYxw48zibH9KFuEquGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1016&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;1  老优化器的入口&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;老优化器仍然走JOIN::optimize来把query block转换成query execution plan (QEP)。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这个阶段仍然做一些逻辑的重写工作，这个阶段的转换可以理解为基于cost-based优化前做准备，详细步骤如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2  新优化器的入口&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;新优化器默认不打开，必须通过set optimizer_switch=&quot;hypergraph_optimizer=on&quot;; 来打开。&lt;/span&gt;&lt;span&gt;主要通过FindBestQueryPlan函数来实现，逻辑如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;举例看下Plan（AccessPath）和SQL的关系：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.53515625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuRwbo0ddGboxwEWm5t1LE3RqdGey6iahr2tHw7KXfcNdE8qzFicWLMhic0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后生成Iterator执行器框架需要的Iterator执行载体，AccessPath和Iterator是一对一的关系（Access paths are a query planning structure that correspond 1:1 to iterators）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Query_expression::m_root_iterator = CreateIteratorFromAccessPath(......)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;unique_ptr_destroy_only&amp;lt;RowIterator&amp;gt; CreateIteratorFromAccessPath(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     THD *thd, AccessPath *path, JOIN *join, bool eligible_for_batch_mode) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   &lt;span class=&quot;code-snippet__keyword&quot;&gt;switch&lt;/span&gt; (path-&amp;gt;type) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; AccessPath::TABLE_SCAN: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; auto &amp;amp;param = path-&amp;gt;table_scan();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       iterator = NewIterator&amp;lt;TableScanIterator&amp;gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;           thd, param.table, path-&amp;gt;num_output_rows, examined_rows);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; AccessPath::INDEX_SCAN: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; auto &amp;amp;param = path-&amp;gt;index_scan();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (param.reverse) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         iterator = NewIterator&amp;lt;IndexScanIterator&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             thd, param.table, param.idx, param.use_order, path-&amp;gt;num_output_rows,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             examined_rows);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         iterator = NewIterator&amp;lt;IndexScanIterator&amp;lt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;false&lt;/span&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             thd, param.table, param.idx, param.use_order, path-&amp;gt;num_output_rows,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;             examined_rows);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;       &lt;span class=&quot;code-snippet__keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;     &lt;span class=&quot;code-snippet__keyword&quot;&gt;case&lt;/span&gt; AccessPath::REF: {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;......&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3  对比PostgreSQL&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;testdb=# EXPLAIN SELECT * FROM tbl_a WHERE id &amp;lt; 300 ORDER BY data;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                          QUERY PLAN                           &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;---------------------------------------------------------------&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; Sort  (cost=182.34..183.09 rows=300 width=8)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   Sort Key: data&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;   -&amp;gt;  Seq Scan on tbl_a  (cost=0.00..170.00 rows=300 width=8)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;         Filter: (id &amp;lt; 300)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;(4 rows)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.31796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naJRnJyj1icgoqmHe3kdQeWuR5jVsG0ILnoRYHdbMOhCRBx7XXPqJ2y1OcuZ60jpSKPMxrrKNW3LbNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;五  总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文主要focus在MySQL最新版本官方的源码上，重点分析了官方的重构在多阶段和各阶段结构上的变化和联系，更多的是为了让大家了解一个全新的MySQL的发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;关于我们&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PolarDB 是阿里巴巴自主研发的云原生分布式关系型数据库，于2020年进入Gartner全球数据库Leader象限，并获得了2020年中国电子学会颁发的科技进步一等奖。PolarDB 基于云原生分布式数据库架构，提供大规模在线事务处理能力，兼具对复杂查询的并行处理能力，在云原生分布式数据库领域整体达到了国际领先水平，并且得到了广泛的市场认可。在阿里巴巴集团内部的最佳实践中，PolarDB还全面支撑了2020年天猫双十一，并刷新了数据库处理峰值记录，高达1.4亿TPS。欢迎有志之士加入我们，简历请投递到daoke.wangc@alibaba-inc.com，期待与您共同打造世界一流的下一代云原生分布式关系型数据库。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;数据库技术图谱&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库技术图谱&lt;span&gt;由阿里云数据库专家团出品&lt;/span&gt;，含7个知识点，17个课程 ，6个体验场景，9个公开课，带你从基础到进阶玩转常见数据库，同时深入实战，学习阿里云使用各数据库的最佳实践！ &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;点击“阅读原文”，开始学习吧~&lt;/span&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0769c15d72dee799a3e87055df08f0ad</guid>
<title>10 分钟入门响应式：Spring Boot 整合 Kafka 实现 Reactive</title>
<link>https://toutiao.io/k/m6vnj5r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5471923536439666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag87SiaDwHFa3GQ2qCzxiaWKsEX7qgoDhWly9jsic4bdO0GmcviaWkfh1uxyWKlG1ttia2M9gHfqMEibDPEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;837&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n262&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Springboot引入Reactor已经有一段时间了，笔者潜伏在各种技术群里暗中观察发现，好像scala圈子的同仁们，似乎对响应式更热衷一点。也许是因为他们对fp理解的更深吧，所以领悟起来障碍性更少一些的原因吧。尽管webflux对于数据库的支持，还不那么完善，也不妨我们试上一试。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n64&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;首先请允许我引用全部的反应式宣言作为开篇，接下来会介绍webflux整合kafka做一个demo。&lt;/span&gt;&lt;/p&gt;&lt;p mdtype=&quot;paragraph&quot; cid=&quot;n60&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n61&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;反应式宣言&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n38&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在不同领域中深耕的组织都在不约而同地尝试发现相似的软件构建模式。希望这些系统会更健壮、更具回弹性 、更灵活，也能更好地满足现代化的需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n39&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;近年来，应用程序的需求已经发生了戏剧性的更改，模式变化也随之而来。仅在几年前， 一个大型应用程序通常拥有数十台服务器、 秒级的响应时间、 数小时的维护时间以及GB级的数据。而今，应用程序被部署到了形态各异的载体上, 从移动设备到运行着数以千计的多核心处理器的云端集群。用户期望着毫秒级的响应时间，以及服务100%正常运行（随时可用）。而数据则以PB计量。昨日的软件架构已经根本无法满足今天的需求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n40&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们相信大家需要一套贯通整个系统的架构设计方案， 而设计中必需要关注的各个角度也已被理清， 我们需要系统具备以下特质：即时响应性（Responsive）、回弹性（Resilient）、弹性（Elastic）以及消息驱动（Message Driven）。我们称这样的系统为反应式系统（Reactive System）。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n41&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;反应式系统更加灵活、松耦合和 &lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;可伸缩&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。这使得它们的开发和调整更加容易。它们对系统的&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;失败&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 也更加的包容， 而当失败确实发生时， 它们的应对方案会是得体处理而非混乱无序。反应式系统具有高度的即时响应性， 为&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用户&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;提供了高效的互动反馈。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n42&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;反应式系统的特质:&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n43&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;即时响应性:&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; ：只要有可能， &lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;系统&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;就会及时地做出响应。即时响应是可用性和实用性的基石， 而更加重要的是，即时响应意味着可以快速地检测到问题并且有效地对其进行处理。即时响应的系统专注于提供快速而一致的响应时间， 确立可靠的反馈上限， 以提供一致的服务质量。这种一致的行为转而将简化错误处理、 建立最终用户的信任并促使用户与系统作进一步的互动。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n44&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;回弹性：&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;系统在出现&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;失败&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;时依然保持即时响应性。这不仅适用于高可用的、 任务关键型系统——任何不具备回弹性的系统都将会在发生失败之后丢失即时响应性。回弹性是通过&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;复制&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;、 遏制、 &lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;隔离&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;以及&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;委托&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;来实现的。失败的扩散被遏制在了每个&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;组件&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;内部， 与其他组件相互隔离， 从而确保系统某部分的失败不会危及整个系统，并能独立恢复。每个组件的恢复都被委托给了另一个（外部的）组件， 此外，在必要时可以通过复制来保证高可用性。（因此）组件的客户端不再承担组件失败的处理。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n45&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;弹性：&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt; 系统在不断变化的工作负载之下依然保持即时响应性。反应式系统可以对输入（负载）的速率变化做出反应，比如通过增加或者减少被分配用于服务这些输入（负载）的&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;资源&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。这意味着设计上并没有争用点和中央瓶颈， 得以进行组件的分片或者复制， 并在它们之间分布输入（负载）。通过提供相关的实时性能指标， 反应式系统能支持预测式以及反应式的伸缩算法。这些系统可以在常规的硬件以及软件平台上实现成本高效的&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;弹性&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;消息驱动：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;反应式系统依赖&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;异步的&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;消息传递&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;，从而确保了松耦合、隔离、&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;位置透明&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;的组件之间有着明确边界。这一边界还提供了将&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;失败&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;作为消息委托出去的手段。使用显式的消息传递，可以通过在系统中塑造并监视消息流队列， 并在必要时应用&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;回压&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;， 从而实现负载管理、 弹性以及流量控制。使用位置透明的消息传递作为通信的手段， 使得跨集群或者在单个主机中使用相同的结构成分和语义来管理失败成为了可能。&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;非阻塞的&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;通信使得接收者可以只在活动时才消耗&lt;/span&gt;&lt;span md-inline=&quot;link&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;资源&lt;/span&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;， 从而减少系统开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag87SiaDwHFa3GQ2qCzxiaWKsEOib69zm37tfbia5FXdyRKzhcUWrzgujuZHqn4aZ9UY8MVLDZ0j39p7kA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;大型系统由多个较小型的系统所构成， 因此整体效用取决于它们的构成部分的反应式属性。 这意味着， 反应式系统应用着一些设计原则，使这些属性能在所有级别的规模上生效，而且可组合。世界上各类最大型的系统所依赖的架构都基于这些属性，而且每天都在服务于数十亿人的需求。现在，是时候在系统设计一开始就有意识地应用这些设计原则了， 而不是每次都去重新发现它们。&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 mdtype=&quot;heading&quot; cid=&quot;n8&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Springboot Webflux&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.83828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8uJ0ic6nAag87SiaDwHFa3GQ2qCzxiaWKsExW35wCa1LR8mXJ9vjclAf61qORetqjezrEODW99Fuq2S4GK24icyoaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;引入springboot官网的一张图来解释Spring webflux和spring mvc的区别：&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n105&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n106&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Spring MVC is built on the Servlet API and uses a synchronous blocking I/O architecture whth a one-request-per-thread model.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n107&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;Spring MVC 构建在 Servlet API 之上，使用的是同步阻塞式 I/O 模型，什么是同步阻塞式 I/O 模型呢？就是说，每一个请求对应一个线程去处理。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n75&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n118&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n119&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Spring WebFlux is a non-blocking web framework built from the ground up to take advantage of multi-core, next-generation processors and handle massive numbers of concurrent connections.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;Spring WebFlux 是一个异步非阻塞式的 Web 框架，它能够充分利用多核 CPU 的硬件资源去处理大量的并发请求。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n125&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们不难看出，持久层上Webflux针对部分NoSQL有一定的支持，而对应传统的关系型数据库就不那么友善了，这也许就是目前大部分javaer还是做着Crud Boy吧，限制了他们响应式的梦想 ... ...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5575&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag87SiaDwHFa3GQ2qCzxiaWKsEzZJZxUnicTibOKtRhfqVicHbMJO2hSJAKWIOfbflCI3h7afyeVowX5k6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n96&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;当然非阻塞IO并不是银弹，如果你想用它来提升应用的访问效率，那么还是放弃吧，引用下面一段话，作为回答&lt;/span&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n91&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n92&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Reactive and non-blocking generally do not make applications run faster.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n93&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;WebFlux 并不能使接口的响应时间缩短，它仅仅能够提升吞吐量和伸缩性&lt;/strong&gt;&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n24&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;所以如果你的应用是 IO密集型，还是很建议你试一试的。好了国际惯例TICSMTC...&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n133&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 mdtype=&quot;heading&quot; cid=&quot;n137&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Talk Is Cheap, Show Me The Code&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n139&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;我们本次应用的流程大体如下：创建一个路由用于生产数据，写入kafka里，然后再由注册的kafka消费者，消费该数据&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n180&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n164&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;引入依赖&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n174&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;这次demo使用了gradle代替了maven&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;groovy&quot; cid=&quot;n168&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;implementation&lt;/span&gt; &lt;span&gt;group:&lt;/span&gt; &lt;span&gt;&#x27;io.projectreactor.kafka&#x27;&lt;/span&gt;, &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&#x27;reactor-kafka&#x27;&lt;/span&gt;, &lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;1.3.4&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;implementation&lt;/span&gt; &lt;span&gt;group:&lt;/span&gt; &lt;span&gt;&#x27;org.springframework.kafka&#x27;&lt;/span&gt;, &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&#x27;spring-kafka&#x27;&lt;/span&gt;, &lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;2.7.4&#x27;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;implementation&lt;/span&gt; &lt;span&gt;group:&lt;/span&gt; &lt;span&gt;&#x27;org.springframework.boot&#x27;&lt;/span&gt;, &lt;span&gt;name:&lt;/span&gt; &lt;span&gt;&#x27;spring-boot-starter-webflux&#x27;&lt;/span&gt;, &lt;span&gt;version:&lt;/span&gt; &lt;span&gt;&#x27;2.5.2&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n177&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n141&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建实体&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n179&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;该实体，用于在kafka中传输&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n172&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;dto&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Warehouse&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;Long&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;label&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;lon&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;lat&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Long&lt;/span&gt; &lt;span&gt;getId&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setId&lt;/span&gt;(&lt;span&gt;Long&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;id&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setName&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;name&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getLabel&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;label&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setLabel&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;label&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;label&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;label&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getLon&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;lon&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setLon&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;lon&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;lon&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;lon&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;getLat&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;lat&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setLat&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;lat&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;this&lt;/span&gt;.&lt;span&gt;lat&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;lat&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;toString&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;Warehouse{&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;id=&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;, name=&#x27;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;, label=&#x27;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;label&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;, lon=&#x27;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;lon&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&quot;, lat=&#x27;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;lat&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;&#x27;\&#x27;&#x27;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;&#x27;}&#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n143&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n182&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建service&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n191&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;用于mock数据，并将对象发送至kafka&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n189&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;service&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;beans&lt;/span&gt;.&lt;span&gt;factory&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Autowired&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;stereotype&lt;/span&gt;.&lt;span&gt;Service&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;publisher&lt;/span&gt;.&lt;span&gt;Mono&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;sender&lt;/span&gt;.&lt;span&gt;SenderResult&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;dto&lt;/span&gt;.&lt;span&gt;Warehouse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;util&lt;/span&gt;.&lt;span&gt;Random&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WarehouseService&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;WAREHOUSE_NAME&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;[]{&lt;span&gt;&quot;天津仓库&quot;&lt;/span&gt;,&lt;span&gt;&quot;北京仓库&quot;&lt;/span&gt;,&lt;span&gt;&quot;上海仓库&quot;&lt;/span&gt;,&lt;span&gt;&quot;广州仓库&quot;&lt;/span&gt;,&lt;span&gt;&quot;深圳仓库&quot;&lt;/span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;WAREHOUSE_LEVEL&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;[]{&lt;span&gt;&quot;A级&quot;&lt;/span&gt;,&lt;span&gt;&quot;B级&quot;&lt;/span&gt;,&lt;span&gt;&quot;C级&quot;&lt;/span&gt;,&lt;span&gt;&quot;D级&quot;&lt;/span&gt;,&lt;span&gt;&quot;E级&quot;&lt;/span&gt;};&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Warehouse&lt;/span&gt; &lt;span&gt;mock&lt;/span&gt;(&lt;span&gt;long&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;Random&lt;/span&gt; &lt;span&gt;random&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Random&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;Thread&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;(&lt;span&gt;random&lt;/span&gt;.&lt;span&gt;nextInt&lt;/span&gt;(&lt;span&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        } &lt;span&gt;catch&lt;/span&gt; (&lt;span&gt;InterruptedException&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;Warehouse&lt;/span&gt; &lt;span&gt;warehouse&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Warehouse&lt;/span&gt;();&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;setId&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;setName&lt;/span&gt;(&lt;span&gt;WAREHOUSE_NAME&lt;/span&gt;[&lt;span&gt;random&lt;/span&gt;.&lt;span&gt;nextInt&lt;/span&gt;(&lt;span&gt;WAREHOUSE_NAME&lt;/span&gt;.&lt;span&gt;length&lt;/span&gt;)]);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;setLabel&lt;/span&gt;(&lt;span&gt;WAREHOUSE_LEVEL&lt;/span&gt;[&lt;span&gt;random&lt;/span&gt;.&lt;span&gt;nextInt&lt;/span&gt;(&lt;span&gt;WAREHOUSE_LEVEL&lt;/span&gt;.&lt;span&gt;length&lt;/span&gt;)]);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;setLon&lt;/span&gt;(&lt;span&gt;random&lt;/span&gt;.&lt;span&gt;nextDouble&lt;/span&gt;()&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;setLat&lt;/span&gt;(&lt;span&gt;random&lt;/span&gt;.&lt;span&gt;nextDouble&lt;/span&gt;()&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;warehouse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt; &lt;span&gt;template&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;WAREHOUSE_TOPIC&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;warehouse&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Mono&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;add&lt;/span&gt;(&lt;span&gt;Warehouse&lt;/span&gt; &lt;span&gt;warehouse&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;Mono&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SenderResult&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Void&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;resultMono&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;template&lt;/span&gt;.&lt;span&gt;send&lt;/span&gt;(&lt;span&gt;WAREHOUSE_TOPIC&lt;/span&gt;, &lt;span&gt;warehouse&lt;/span&gt;.&lt;span&gt;getId&lt;/span&gt;(), &lt;span&gt;warehouse&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;resultMono&lt;/span&gt;.&lt;span&gt;flatMap&lt;/span&gt;(&lt;span&gt;rs&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;rs&lt;/span&gt;.&lt;span&gt;exception&lt;/span&gt;() &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;System&lt;/span&gt;.&lt;span&gt;out&lt;/span&gt;.&lt;span&gt;println&lt;/span&gt;(&lt;span&gt;&quot;send kafka error&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;rs&lt;/span&gt;.&lt;span&gt;exception&lt;/span&gt;());&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Mono&lt;/span&gt;.&lt;span&gt;just&lt;/span&gt;(&lt;span&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;Mono&lt;/span&gt;.&lt;span&gt;just&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        });&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n186&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n193&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建handler 并 注册 route&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n203&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建handler&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n201&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;beans&lt;/span&gt;.&lt;span&gt;factory&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Autowired&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;stereotype&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;ServerRequest&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;ServerResponse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;publisher&lt;/span&gt;.&lt;span&gt;Flux&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;publisher&lt;/span&gt;.&lt;span&gt;Mono&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;dto&lt;/span&gt;.&lt;span&gt;User&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;dto&lt;/span&gt;.&lt;span&gt;Warehouse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;service&lt;/span&gt;.&lt;span&gt;WarehouseService&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WarehouseHandler&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;WarehouseService&lt;/span&gt; &lt;span&gt;warehouseService&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;Mono&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ServerResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;addWarehouse&lt;/span&gt;(&lt;span&gt;ServerRequest&lt;/span&gt; &lt;span&gt;request&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;//mock 数据&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;Warehouse&lt;/span&gt; &lt;span&gt;warehouse&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;warehouseService&lt;/span&gt;.&lt;span&gt;mock&lt;/span&gt;(&lt;span&gt;i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;Mono&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;tag&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;warehouseService&lt;/span&gt;.&lt;span&gt;add&lt;/span&gt;(&lt;span&gt;warehouse&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;ServerResponse&lt;/span&gt;.&lt;span&gt;ok&lt;/span&gt;().&lt;span&gt;body&lt;/span&gt;(&lt;span&gt;tag&lt;/span&gt;,&lt;span&gt;Boolean&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n199&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;注册route，用于访问&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n206&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;route&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;beans&lt;/span&gt;.&lt;span&gt;factory&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Autowired&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;context&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Bean&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;context&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Configuration&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;RequestPredicates&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;RouterFunction&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;RouterFunctions&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;function&lt;/span&gt;.&lt;span&gt;server&lt;/span&gt;.&lt;span&gt;ServerResponse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;.&lt;span&gt;UserHandler&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;.&lt;span&gt;WarehouseHandler&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Routes&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;UserHandler&lt;/span&gt; &lt;span&gt;userHandler&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;WarehouseHandler&lt;/span&gt; &lt;span&gt;warehouseHandler&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;RouterFunction&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ServerResponse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;routersFunction&lt;/span&gt;(){&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;RouterFunctions&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;route&lt;/span&gt;(&lt;span&gt;RequestPredicates&lt;/span&gt;.&lt;span&gt;GET&lt;/span&gt;(&lt;span&gt;&quot;/api/warehouse&quot;&lt;/span&gt;),&lt;span&gt;warehouseHandler&lt;/span&gt;::&lt;span&gt;addWarehouse&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n197&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n208&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建kafka消费者&lt;/span&gt;&lt;/h2&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n212&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;consumer&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;beans&lt;/span&gt;.&lt;span&gt;factory&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Autowired&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;boot&lt;/span&gt;.&lt;span&gt;autoconfigure&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;KafkaProperties&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;ReactiveKafkaConsumerTemplate&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;stereotype&lt;/span&gt;.&lt;span&gt;Service&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;receiver&lt;/span&gt;.&lt;span&gt;ReceiverOptions&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;dto&lt;/span&gt;.&lt;span&gt;Warehouse&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;.&lt;span&gt;service&lt;/span&gt;.&lt;span&gt;WarehouseService&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;javax&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;PostConstruct&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;java&lt;/span&gt;.&lt;span&gt;util&lt;/span&gt;.&lt;span&gt;Collections&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WarehouseConsumer&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;KafkaProperties&lt;/span&gt; &lt;span&gt;properties&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;consumer&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;ReceiverOptions&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Long&lt;/span&gt;, &lt;span&gt;Warehouse&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;options&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;ReceiverOptions&lt;/span&gt;.&lt;span&gt;create&lt;/span&gt;(&lt;span&gt;properties&lt;/span&gt;.&lt;span&gt;getConsumer&lt;/span&gt;().&lt;span&gt;buildProperties&lt;/span&gt;());&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;options&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;options&lt;/span&gt;.&lt;span&gt;subscription&lt;/span&gt;(&lt;span&gt;Collections&lt;/span&gt;.&lt;span&gt;singleton&lt;/span&gt;(&lt;span&gt;WarehouseService&lt;/span&gt;.&lt;span&gt;WAREHOUSE_TOPIC&lt;/span&gt;));&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ReactiveKafkaConsumerTemplate&lt;/span&gt;(&lt;span&gt;options&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;receiveAutoAck&lt;/span&gt;()&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                .&lt;span&gt;subscribe&lt;/span&gt;(&lt;span&gt;record&lt;/span&gt; &lt;span&gt;-&amp;gt;&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                    &lt;span&gt;System&lt;/span&gt;.&lt;span&gt;out&lt;/span&gt;.&lt;span&gt;println&lt;/span&gt;(&lt;span&gt;&quot;Warehouse Record:&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;record&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;                });&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n145&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 cid=&quot;n216&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;配置springboot的kafka信息&lt;/span&gt;&lt;/h2&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;yaml&quot; cid=&quot;n223&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;  kafka&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;    producer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      bootstrap-servers&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;172.18.70.184&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      key-serializer&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;org.apache.kafka.common.serialization.LongSerializer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      value-serializer&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;org.springframework.kafka.support.serializer.JsonSerializer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;    consumer&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      bootstrap-servers&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;172.18.70.184&lt;span&gt;:&lt;/span&gt;&lt;span&gt;9092&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      key-serializer&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;org.apache.kafka.common.serialization.LongSerializer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      value-serializer&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;org.springframework.kafka.support.serializer.JsonSerializer&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;      group-id&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;warehouse-consumers&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n219&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 mdtype=&quot;heading&quot; cid=&quot;n227&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;构建完整应用&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n229&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n231&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;加载kafka配置&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;Java&quot; cid=&quot;n235&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;beans&lt;/span&gt;.&lt;span&gt;factory&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Autowired&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;boot&lt;/span&gt;.&lt;span&gt;autoconfigure&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;KafkaProperties&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;context&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Bean&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;context&lt;/span&gt;.&lt;span&gt;annotation&lt;/span&gt;.&lt;span&gt;Configuration&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;core&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;reactor&lt;/span&gt;.&lt;span&gt;kafka&lt;/span&gt;.&lt;span&gt;sender&lt;/span&gt;.&lt;span&gt;SenderOptions&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;KafkaConfig&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;KafkaProperties&lt;/span&gt; &lt;span&gt;properties&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt; &lt;span&gt;reactiveKafkaProducerTemplate&lt;/span&gt;() {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;SenderOptions&lt;/span&gt; &lt;span&gt;options&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;SenderOptions&lt;/span&gt;.&lt;span&gt;create&lt;/span&gt;(&lt;span&gt;properties&lt;/span&gt;.&lt;span&gt;getProducer&lt;/span&gt;().&lt;span&gt;buildProperties&lt;/span&gt;());&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt; &lt;span&gt;template&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ReactiveKafkaProducerTemplate&lt;/span&gt;(&lt;span&gt;options&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;template&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n225&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n237&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;启动应用&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;java&quot; cid=&quot;n245&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;package&lt;/span&gt; &lt;span&gt;wang&lt;/span&gt;.&lt;span&gt;datahub&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;boot&lt;/span&gt;.&lt;span&gt;SpringApplication&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;boot&lt;/span&gt;.&lt;span&gt;autoconfigure&lt;/span&gt;.&lt;span&gt;SpringBootApplication&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;org&lt;/span&gt;.&lt;span&gt;springframework&lt;/span&gt;.&lt;span&gt;web&lt;/span&gt;.&lt;span&gt;reactive&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt;.&lt;span&gt;EnableWebFlux&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;@EnableWebFlux&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WebfluxApplication&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;(&lt;span&gt;String&lt;/span&gt;[] &lt;span&gt;args&lt;/span&gt;) {&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;        &lt;span&gt;SpringApplication&lt;/span&gt;.&lt;span&gt;run&lt;/span&gt;(&lt;span&gt;WebfluxApplication&lt;/span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;args&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n239&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n241&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h2 cid=&quot;n247&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;kafka no zookeeper&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n257&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;启动kafka还需要额外的zk配置，是不是让你很不爽呢？2.8开始，kafka已经开始准备着手去掉外部zk了，尽管现在还不推荐上生产环境，至少是一个好的开始，下面我们简单的看下，如何抛弃zk&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;bash&quot; cid=&quot;n254&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt; ⚡ root@DESKTOP-2J030JA  /mnt/e/devlop/envs/kafka_2.13-2.8.0  bin/kafka-storage.sh random-uuid&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;dKcraOLdTH6PCYuGizZ1nw&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt; ⚡ root@DESKTOP-2J030JA  /mnt/e/devlop/envs/kafka_2.13-2.8.0  bin/kafka-storage.sh format &lt;span&gt;-t&lt;/span&gt; dKcraOLdTH6PCYuGizZ1nw &lt;span&gt;-c&lt;/span&gt; config/kraft/server.properties&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;Formatting /tmp/kraft-combined-logs&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt; ⚡ root@DESKTOP-2J030JA  /mnt/e/devlop/envs/kafka_2.13-2.8.0  bin/kafka-server-start.sh  config/kraft/server.properties&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;/&gt;&lt;/pre&gt;&lt;p cid=&quot;n249&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n147&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;完整代码库地址：&lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://github.com/dafei1288/reactor_kafka_springboot_demo&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n131&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 cid=&quot;n272&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;写在最后&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n274&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;之所以写了这篇文章，也是因为最近在读的这本书，刚读了2章，就被其吸引了，对反应式也开始有了兴趣，尽管这本书里面的案例都是scala和akka的，但是还是挺推荐读一读的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.181981981981982&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8uJ0ic6nAag87SiaDwHFa3GQ2qCzxiaWKsECuv2zicnSu1VPibRfzAIFHBSx0qaIiaibr5zicBmGYxy4WE6F8jom632qjg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;555&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n281&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;同时感谢群里的几位大佬的催更以及指点，排名不分先后&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n270&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;@superleo @简单 @箱子  @龙叁 @Jacob_Bishop @tofu @星辰 @sfq&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n283&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n26&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;感谢你能看到这里，如果本文对您有一点点帮助，希望您与我交流，也期待您的转发和关注支持。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n268&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n266&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h1 mdtype=&quot;heading&quot; cid=&quot;n28&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;参考链接&lt;/span&gt;&lt;/h1&gt;&lt;p cid=&quot;n30&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://www.reactivemanifesto.org/zh-CN&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://www.cnblogs.com/quanxiaoha/p/10713782.html&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n32&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://blog.csdn.net/qq_28423433/article/details/81221933?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n156&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://www.cnblogs.com/niechen/p/9303451.html&lt;/span&gt;&lt;span md-inline=&quot;softbreak&quot;/&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://www.jianshu.com/p/15d0a2bed6da&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>