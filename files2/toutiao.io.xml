<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>0279be4fea98b9247c6e42d0b3aa4403</guid>
<title>2020 读过的好书推荐</title>
<link>https://toutiao.io/k/ocr2mmk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;1.引言&lt;/h1&gt;&lt;p&gt;2020年也读了不少书，是时候回顾一下，把好书列成书单，作为今年的一个小总结。大部分是在平时上下班通勤路上完成阅读，主要分为IT技术类，经管励志类和人文社科类。&lt;/p&gt;&lt;h1&gt;2.好书推荐列表&lt;/h1&gt;&lt;h2&gt;2.1 IT技术类&lt;/h2&gt;&lt;h3&gt;《计算机：一部历史》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：[&lt;span&gt;英] 彼得·本特利&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt; ， 《连线》杂志特约编辑。英国伦敦大学学院（UCL）计算机系教授 。译者，顾纹天&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：计算机科学的科普知识，通过计算机科学的先驱们的故事，把计算机技术的发展来龙去脉说清楚，包括计算机诞生，互联网诞生，人工智能诞生等，图灵，冯诺依曼，香农，柯尔斯坦，瑟夫，蒂姆•伯纳斯-李，达特茅斯会议等等，值得一读，扩展知识，了解计算机、互联网和科技发展史。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;《程序是怎么跑起来的》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：作者: [&lt;span&gt;日] 矢泽久雄&lt;sup&gt;[2]&lt;/sup&gt;&lt;/span&gt; ， 译者，李逢俊&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：如果对计算的组成，为什么使用二进制，二进制的运算，内存，cpu工作原理怎样，输入输出如何控制等问题还有疑惑，看这本书就对了， 图文并茂，通俗易懂 。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;《未来世界幸存者》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者: &lt;span&gt;阮一峰&lt;sup&gt;[3]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：我们正处于新一轮技术革命的浪潮中，这本书带我们看清当前世界正在发生的剧烈的变化，人工智能，基因技术的发展可能带来的后果。作者对技术人员，特别是IT从事人员的建议和观点很值得让人思考，如雇佣制度，创业……。ps，每周看作者的《科技爱好者周刊》，了解世界的技术发展变化！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;《架构解密：从分布式到微服务（第2版）》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt; 作者: &lt;span&gt;吴治辉&lt;sup&gt;[4]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：对分布式架构有兴趣的同学应该看看此书，在广度和深度上均可获得提升。书中从网络、分布式理论、RPC、内存缓存，分布式存储，分布式计算，全文检索，消息队列，微服务架构，k8s等专题，对分布式架构进行了讲解，算是深入浅出。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;专栏-《数据结构与算法之美》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;极客时间专栏（收费）：&lt;span&gt;数据结构与算法之美&lt;sup&gt;[5]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：王争&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：做开发都知道数据结构和算法是计算机的基础课程，然而却不容易学。作者以生动的语言，循序渐进的节奏，把数据结构和算法讲得深入浅出，受益匪浅。既有理论基础，又有高级实战，还结合实际开发中的问题进行解决讲解，值得推荐。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;专栏-《设计模式之美》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;极客时间专栏（收费）：&lt;span&gt;设计模式之美&lt;sup&gt;[6]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：王争&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：程序开发要说有什么高手秘笈，那就是设计模式了，设计模式是前人总结的设计套路，是让程序具备扩展性的好方法，是高手必经之路。与前面“数据结构与算法之美”是同作者。同样深入浅出，结合实战，通俗易懂。从面向对象、设计原则、编程规范、重构到23种设计模式，娓娓道来，值得一读。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;专栏-《用技术人的眼光看世界》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;慕课网专栏（收费）：&lt;span&gt; 用技术人的眼光看世界 • 程序员技术指北 &lt;sup&gt;[7]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：liuyubobobo&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：此专栏并不是某一技术领域的讲解，而是对现实世界现状的一种解读，而且是以技术眼光来解读。有IT界时事作者的见解，有作者对学习方法的感悟，也有“群体免疫”的解释。作者角度很广，语言也通俗易懂，是IT人扩展视野的好地方。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;2.2 人文社科类&lt;/h2&gt;&lt;h3&gt;《系统之美- 决策者的系统思考 》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：[&lt;span&gt;美] 德内拉·梅多斯&lt;sup&gt;[8]&lt;/sup&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：作者是大牛， 世界上最伟大的系统思考大师之一 。系统思考有助于我们发现问题的根本原因，从而让我们更好地管理、适应复杂挑战性。理解系统的动态性，整体大于部分之和、具有反馈、调节回路，增强回路规则，把系统特征，陷阱与对策都做了总结描述。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;《这里是中国》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：星球研究所&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：这是一本中国地理科普。书中以中国的三级阶梯地理为结构，流畅的文字，精美的图片，介绍了中国的名山大川，江河海湖，城市村落，了解中国，了解地理变迁带来的结果，感叹祖国的美好河山。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;它的公众号也叫“星球研究所 ”，里面的文章和图片质量都很高，推荐。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;2.3 经管励志类&lt;/h2&gt;&lt;h3&gt;《智能商业》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：曾鸣&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：作者是阿里巴巴集团前总参谋长，以在阿里的实践经验为基础，总结为网络协同和数据智能商业系统DNA。数据驱动，推动企业演变成长，优化决策。网络协同，增强企业内连接与文化，扩大企业外的合作与共赢！&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;《新零售》&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;作者：刘润&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;推荐理由：书本结构清晰，语言流畅。理解零售的本质，对现在电商的各种形式就会有清晰的理解。零售就是连接人和货的场，新零售是更有效率的零售。从信息流，资金流，物流角度，探讨了新零售的各种形式，受益匪浅。&lt;/span&gt;&lt;span&gt;&lt;span&gt;•&lt;/span&gt;刘润老师的文章和课程都思路清晰，深入浅出，在得到的《五分钟商学院》课程也非常值得一学。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;引用链接&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; 英] 彼得·本特利: &lt;em&gt;https://book.douban.com/search/彼得·本特利&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[2]&lt;/code&gt; 日] 矢泽久雄: &lt;em&gt;https://book.douban.com/search/矢泽久雄&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[3]&lt;/code&gt; 阮一峰: &lt;em&gt;https://book.douban.com/search/阮一峰&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[4]&lt;/code&gt; 吴治辉: &lt;em&gt;https://book.douban.com/search/吴治辉&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[5]&lt;/code&gt; 数据结构与算法之美: &lt;em&gt;https://time.geekbang.org/column/intro/126&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[6]&lt;/code&gt; 设计模式之美: &lt;em&gt;https://time.geekbang.org/column/intro/100039001&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[7]&lt;/code&gt; 用技术人的眼光看世界 • 程序员技术指北 : &lt;em&gt;https://www.imooc.com/read/27&lt;/em&gt;&lt;br/&gt;&lt;code&gt;[8]&lt;/code&gt; 美] 德内拉·梅多斯: &lt;em&gt;https://book.douban.com/author/919913/&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>67f7528bd2da0052cc1f3d8fa1dbafb5</guid>
<title>Improving DL for Airbnb Search：科学炼丹实践指南</title>
<link>https://toutiao.io/k/g99hk6t</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;论文地址: &lt;a href=&quot;https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/3394486.3403333&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ACM&lt;/a&gt;、&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2002.05515&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;arXiv&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;1. 写在前面&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;许多观众和影评人会对某个导演的电影情有独钟，即使他们曾经拍过烂片，观众待他们依然如初恋，比如拍出了《阳光灿烂的日子》的姜文。&lt;/p&gt;&lt;p&gt;对于 Airbnb 的论文，我也抱有同样的感情。何况从 KDD&#x27;18 的最佳论文，到这两年他们将深度学习应用于搜索实践的两篇论文，篇篇佳作，字字珠玑。&lt;/p&gt;&lt;p&gt;本文是 Airbnb 发表于 KDD&#x27;20 的论文，是前一篇《Applying Deep Learning to Airbnb Search》的续作，讲述了他们在搜索排序模型迭代方面的尝试。第二节写得尤其好，为&lt;b&gt;科学炼丹&lt;/b&gt;做出了良好示范！&lt;/p&gt;&lt;p&gt;本文，我们以论文的第二节为范本，来看看他们是如何做数据分析、如何做模型迭代的。保证原汁原味！（全文约3500字，阅读时长约 20 分钟）&lt;/p&gt;&lt;p&gt;前两篇论文的笔记在这里，诸位同道不妨先看一看，特别是一脉相承的《Applying Deep Learning to Airbnb Search》：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/146453076&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-79ffeaf06a8337752f4aab53cb043d6c_180x120.jpg&quot; data-image-width=&quot;1568&quot; data-image-height=&quot;481&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;赵喧典：【Papernotes】Applying DL To Airbnb Search&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic1.zhimg.com/v2-79ffeaf06a8337752f4aab53cb043d6c_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/55854838&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-06b795f90be414f344558d4d8e8b27df_180x120.jpg&quot; data-image-width=&quot;617&quot; data-image-height=&quot;230&quot; class=&quot;LinkCard LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;赵喧典：【Papernotes】Real-time Personalization at Airbnb&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;zhuanlan.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--horizontal&quot; alt=&quot;图标&quot; src=&quot;https://pic4.zhimg.com/v2-06b795f90be414f344558d4d8e8b27df_180x120.jpg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;h2&gt;&lt;b&gt;2. 模型优化&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在正式开始之前，我们先来看一下他们的基线模型，一个双隐层的神经网络：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;输入的特征是房源（listing）的基本特征，如价格、历史预订数等，以及一些类别特征的 embeddings；&lt;/li&gt;&lt;li&gt;两个隐藏层分别是 127 维、83 维的全连接层，使用 ReLU 作为激活函数。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这是他们上一个工作的结论之一：&lt;b&gt;加深模型对于 CNN 这样的模型是有效的优化手段，但是对于他们的场景（搜索排序），模型容量并不是问题，两个隐藏层已经足够了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;既然加深网络不是模型迭代的方向，他们开始尝试一些专用的网络架构，比如 Deep&amp;amp;Wide、基于注意力机制的网络等等。但是都失败了。&lt;/p&gt;&lt;p&gt;这里，他们失败的教训与洞见是：&lt;b&gt;特定深度模型的成功应用，与具体业务、产品是高度绑定的。简单的拿来主义——只看到一个模型的成功，却看不到它解决了基线模型的哪些痛点——是危险的。深度学习欠解释的特点，使得理解一个模型究竟解决什么困难、又是如何解决的，变得更加困难。这又使得深度模型的迁移应用变得更加困难。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;于是，他们放弃了&lt;b&gt;论文驱动的模型迭代方式（下载论文-&amp;gt;复现模型-&amp;gt;A/B测试）&lt;/b&gt;，坚持&lt;b&gt;第一性原理&lt;/b&gt;，从&lt;b&gt;用户第一的核心价值观&lt;/b&gt;出发，对模型进行迭代优化。&lt;/p&gt;&lt;p&gt;所谓用户第一的模型迭代方式，就是&lt;b&gt;发现并量化用户的问题，以解决用户的问题为目标，迭代模型&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;他们上一个工作的结果是：&lt;b&gt;房源的预订率上去了，但是搜索结果的平均价格下降了&lt;/b&gt;。这说明，之前的模型迭代工作使得模型越来越懂用户的价格偏好了。&lt;/p&gt;&lt;p&gt;怀疑此间仍有优化的空间，于是他们分析了房源价格对用户预订决策的影响。如下图所示，X 轴是预订价格与搜索结果的价格中位数（以下简称价格中位数）的对数差，Y 轴是用户数。他们期望，用户数对价格差，状似正态分布：相对于价格中位数，用户偶尔出价更高，偶尔更低，总的来说，是一个对称的分布。但事实是，它是一个&lt;b&gt;明显的偏态分布&lt;/b&gt;。这意味着，用户的平均出价低于价格中位数，也就是，&lt;b&gt;用户偏好价格更低的房源，Cheaper Is Better&lt;/b&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8558029a8dccf54452f12e48c3d7833d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;478&quot; data-rawheight=&quot;345&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-8558029a8dccf54452f12e48c3d7833d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;478&quot; data-rawheight=&quot;345&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-8558029a8dccf54452f12e48c3d7833d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-8558029a8dccf54452f12e48c3d7833d_b.jpg&quot;/&gt;&lt;figcaption&gt;图 1：房源价格对预订决策的影响&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;其后是几次&lt;b&gt;将 Cheaper Is Better 注入模型&lt;/b&gt;的尝试。来简单看一下他们是如何做的，又是如何总结失败，并最终成功的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2.1 第一次尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第一次尝试，他们将房源的价格从输入特征中抽离了出来，得到一个独独对价格无感的模型​ &lt;img src=&quot;https://www.zhihu.com/equation?tex=DNN_%7B%5Ctheta%7D%28u%2C+q%2C+l_%7Bno%5C_price%7D%29&quot; alt=&quot;DNN_{\theta}(u, q, l_{no\_price})&quot; eeimg=&quot;1&quot;/&gt; ，其中，u​、q​、​l分别是用户、查询关键字（以下简称query）、房源的特征。&lt;/p&gt;&lt;p&gt;然后将模型最终的输出建模为&lt;img src=&quot;https://www.zhihu.com/equation?tex=DNN_%7B%5Ctheta%7D%28u%2C+q%2C+l_%7Bno%5C_price%7D%29-tanh%28w%2Alog%28%5Cfrac%7B1%2Bprice%7D%7B1%2Bprice_%7Bmedian%7D%7D%29%2Bb%29&quot; alt=&quot;DNN_{\theta}(u, q, l_{no\_price})-tanh(w*log(\frac{1+price}{1+price_{median}})+b)&quot; eeimg=&quot;1&quot;/&gt; ​。&lt;/p&gt;&lt;p&gt;对数 &lt;img src=&quot;https://www.zhihu.com/equation?tex=P%3Dlog%28%5Cfrac%7B1%2Bprice%7D%7B1%2Bprice_%7Bmedian%7D%7D%29&quot; alt=&quot;P=log(\frac{1+price}{1+price_{median}})&quot; eeimg=&quot;1&quot;/&gt; ，对价格是一个单调递增的函数。并且，当一个房源的价格小于价格中位数时，对数结果是一个负值；反之，对数结果是正值。Tanh 同样是一个单调递增的函数，因此 &lt;b&gt;-tanh 将使得模型输出对价格单调递减&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;线上 A/B 测试，与基线相比，该模型的搜索平均价格下降了 5.7%，效果显著。&lt;b&gt;但是，降价并没有带来预订率的提高，反而下降了 1.5%&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;对此，一个说得通的解释是：&lt;b&gt;价格与房源的其他特征是深度耦合的，将其独立出来会使得模型欠拟合&lt;/b&gt;。训练集与测试集上的 NDCG 的下降证明了这一点。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2.2 第二次尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第二次尝试，他们使用了一个 &lt;b&gt;lattice network&lt;/b&gt; (实在不知道这种网络的中文名)，既保证价格与其他特征的交互，又保持了 Cheaper Is Better。模型结构如下。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3b05a49d589b60350d1b3247a5f83299_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;586&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3b05a49d589b60350d1b3247a5f83299_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;586&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3b05a49d589b60350d1b3247a5f83299_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3b05a49d589b60350d1b3247a5f83299_b.jpg&quot;/&gt;&lt;figcaption&gt;图 2：Lattice Network&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如图例所示，虚线表示正常的权重，实线表示平方的权重。隐藏层全部使用 tanh 作为激活函数。&lt;/p&gt;&lt;p&gt;于是，左半网络保证了价格与其他特征的交互，并保持了模型输出对价格的单调递减：&lt;/p&gt;&lt;p&gt;-P 对价格是单调递减的 -&amp;gt; 平方的权重和 tanh，即&lt;img src=&quot;https://www.zhihu.com/equation?tex=tanh%28-w%5E2+%2AP%2Bb%29&quot; alt=&quot;tanh(-w^2 *P+b)&quot; eeimg=&quot;1&quot;/&gt;保证了输入层对价格是单调递减的 -&amp;gt; 隐藏层与输出层采取相同的做法，因此也保证了对价格的单调递减。&lt;/p&gt;&lt;p&gt;右半网络不以价格为输入且没有单调性限制，保证了除价格外所有特征的自然交互。&lt;/p&gt;&lt;p&gt;乍看之下，该模型简直太优雅了！然而，线上的预订率依然下降了 1.6%。&lt;/p&gt;&lt;p&gt;由此，Airbnb 得出结论：&lt;b&gt;对价格的单调性是一个太严苛的约束，以致于模型总是欠拟合的&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这里有一个对深度模型的比喻，很有意思：&lt;/p&gt;&lt;blockquote&gt;深度神经网络就像团队里的明星工程师。给定一个问题，而不加任何限制，它们通常能给出一个合理的解。但是约束它们往某个方向求解时，灾难就如影随形了。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;2.3 第三次尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第三次不再硬性要求模型输出对价格的单调性了，而是加了一个软约束。具体地，在既有的 pairwise loss（记作 booking loss，预订损失）基础上，加入了一个引入价格信息的辅助损失函数 price loss（价格损失）。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-47cb4a2ab45a113e96cbcd67f638c510_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1331&quot; data-rawheight=&quot;303&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-47cb4a2ab45a113e96cbcd67f638c510_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1331&quot; data-rawheight=&quot;303&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-47cb4a2ab45a113e96cbcd67f638c510_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-47cb4a2ab45a113e96cbcd67f638c510_b.jpg&quot;/&gt;&lt;figcaption&gt;图 3：第三次尝试的损失函数：预订损失+价格损失&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;通过调整超参数 alpha，他们将新模型在测试集上的 NDCG 调整为与基线一致。此举的意图在于：&lt;b&gt;在不损失相关性的前提下，强调价格的影响&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;然而，线上 A/B 测试的结果未达预期：搜索结果的均价降了 3.3%，预订率下降了 0.67%。&lt;b&gt;原因在于线上线下数据的 diff&lt;/b&gt;：线下训练时，模型仅对日志中有记录的 TOP 结果进行了重排；在线上，模型面对的是全体召回（或粗排）的房源，price loss 的真实影响与线下有所不同。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2.4 第四次尝试&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;经历过三次失败，他们回到了问题的原点：&lt;b&gt;新模型全都不及基线，那么基线是如何利用价格信息的呢&lt;/b&gt;？&lt;/p&gt;&lt;p&gt;对于深度学习而言，以上问题很难回答：&lt;b&gt;第一次尝试已经揭示了房源的其他特征与价格是高度耦合的，因此难以确定模型对价格的偏依赖程度，也就难以确定价格对模型的影响&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这一次，他们对问题进行了简化，并不尝试解释价格对模型的影响，而是专注于理解每一次的搜索结果。借助 Individual Conditional Expectation (ICE) 的思想，他们将每一次（基线的）搜索结果的房源拎出来，绘制了房源的排序得分-价格的关系图，如下图所示。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8db07691ae9e2d85c61825401599f30b_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;567&quot; data-rawheight=&quot;354&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/v2-8db07691ae9e2d85c61825401599f30b_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;567&quot; data-rawheight=&quot;354&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic4.zhimg.com/v2-8db07691ae9e2d85c61825401599f30b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-8db07691ae9e2d85c61825401599f30b_b.jpg&quot;/&gt;&lt;figcaption&gt;图 4：房源的排序得分-价格关系图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;可以看到，&lt;b&gt;房源的排序得分与价格几乎是单调递减的关系。这说明，Cheaper Is Better 已经反映在基线模型中了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;前几次压低价格的尝试，实际上以损害搜索质量为代价换取了更低的搜索均价&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;那么，该如何正确地理解图 1 反映的“用户对低价房源的偏好”呢？答案在于&lt;b&gt;城市&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;下图反映了不同城市，用户预订价格与价格中位数的差异。可以看到，&lt;b&gt;价格差异在不同城市之间具有明显的分化&lt;/b&gt;：在代表成熟市场的头部城市，比如洛杉矶（Los Angeles）、旧金山（San Francisco），价格差异很小；在代表新兴市场的长尾城市，比如北京、Santiago（智利首都，圣地亚哥），价格差异就非常大。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-991b10fd95f56e85d999af48419d985d_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;664&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-991b10fd95f56e85d999af48419d985d_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;664&quot; data-rawheight=&quot;426&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-991b10fd95f56e85d999af48419d985d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-991b10fd95f56e85d999af48419d985d_b.jpg&quot;/&gt;&lt;figcaption&gt;图 5：不同城市，用户预订价格与价格中位数的差异&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;这为图 1 的现象提供了一重解释：&lt;b&gt;模型对头部城市过拟合了，过拟合的模型无法很好地泛化应用于长尾城市&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;与以上假设相契合的另一个现象是：&lt;b&gt;使用 pairwise loss 训练模型，两个房源差异更大的特征对模型的影响也更大&lt;/b&gt;。不同城市的房源的特征差异大，这继续加大了模型泛化的难度。相反，query 之间的差异并不大，对模型的影响也很小。&lt;/p&gt;&lt;p&gt;于是，第四次尝试的目标就从&lt;b&gt;关注 Cheaper Is Better&lt;/b&gt;调整为了&lt;b&gt;为旅程找到合适的定价，the Right Price for a Trip&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;他们选择了一个&lt;b&gt;双塔结构，第一座塔的输入为 query 与用户特征，输出 100 维的向量，表征 query-用户组合的理想房源；第二座塔的输入为房源特征，输出 100 维的向量，表征当前房源；用欧式距离表征当前房源与理想房源的差距&lt;/b&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-59fbb49ed562b7a1eca94b3152cec5f9_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;350&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-59fbb49ed562b7a1eca94b3152cec5f9_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;350&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-59fbb49ed562b7a1eca94b3152cec5f9_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-59fbb49ed562b7a1eca94b3152cec5f9_b.jpg&quot;/&gt;&lt;figcaption&gt;图 6：第四次尝试的双塔结构&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;如上图所示，模型看起来像一个三塔结构。事实上，训练的样本依然是房源对：一个预订的房源和一个未预订的房源，而两个房源由同一座塔进行处理。&lt;/p&gt;&lt;p&gt;双塔模型的 A/B 测试显示，&lt;b&gt;线上 NDCG 提高了 0.7%，而由于搜索相关性的提升，预订率提高了 0.6%。相关性提高的另一个效果是，搜索均价下降了 2.3%，说明模型更加准确地捕捉到了用户对价格的偏好&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;与基线相比，双塔模型的另一个优点在于：能够减小排序计算的开销&lt;/b&gt;。对于基线模型而言，第一个隐藏层的计算开销最大，计算复杂度为&lt;img src=&quot;https://www.zhihu.com/equation?tex=O%28N%2AH%2A%28Q%2BL%29%29&quot; alt=&quot;O(N*H*(Q+L))&quot; eeimg=&quot;1&quot;/&gt;，此处 N、H、Q、L 分别表示参与排序的房源数、隐藏层的大小、query 与用户特征数、房源特征数。采用双塔结构之后，由于 query-用户塔只需要做一次计算（需要工程方面的优化），第一个隐藏层的计算复杂度减小为&lt;img src=&quot;https://www.zhihu.com/equation?tex=O%28N%2AH_%7Bl%7D%2AL%2BH_%7Bq%7D%2AQ%29&quot; alt=&quot;O(N*H_{l}*L+H_{q}*Q)&quot; eeimg=&quot;1&quot;/&gt; ，&lt;img src=&quot;https://www.zhihu.com/equation?tex=H_%7Bl%7D&quot; alt=&quot;H_{l}&quot; eeimg=&quot;1&quot;/&gt; ​、​&lt;img src=&quot;https://www.zhihu.com/equation?tex=H_%7Bq%7D&quot; alt=&quot;H_{q}&quot; eeimg=&quot;1&quot;/&gt; 分别表示两座塔的隐藏层大小。排序的 TP99 减小了 33%。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-56bc50984a90369f21a50df63c7f2c4e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;876&quot; data-rawheight=&quot;586&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-56bc50984a90369f21a50df63c7f2c4e_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;876&quot; data-rawheight=&quot;586&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-56bc50984a90369f21a50df63c7f2c4e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-56bc50984a90369f21a50df63c7f2c4e_b.jpg&quot;/&gt;&lt;figcaption&gt;图 7：双塔模型的 ICE 曲线&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;绘制双塔模型的 ICE 曲线，如上所示。与图 4 呈现的单调向下的曲线不同，此时，排序得分对于一定区间的价格是平稳的；对另一区间的价格，随着价格的提高，排序得分甚至会先升再降。&lt;/p&gt;&lt;p&gt;&lt;b&gt;排序得分的尖峰，意味着模型为用户找到的合适的定价（the Right Price for a Trip），而不是只强调低价优先&lt;/b&gt;。&lt;b&gt;而单调向下的曲线的继续存在，说明模型依然能够捕捉用户的低价偏好&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;写在后面&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;从 Airbnb 的模型优化工作，可以看到，模型的迭代优化绝非一蹴而就的，需要坚实的数据分析工作、以及不断的不断的求索。如果一开始找错了方向，问题会变得更加困难，甚至不可解。&lt;/p&gt;&lt;p&gt;我个人的一点收获是：&lt;b&gt;模型优化也需要第一性原理&lt;/b&gt;。优化的目标是什么、基线的不足在哪里，在优化的过程中，需要不断地回过头来审视这两个问题，必要时重新出发。&lt;/p&gt;&lt;p&gt;论文的剩余部分介绍了他们对于冷启动的优化、以及如何剔除位置偏差的工作。我自己的工作尚未涉及这两方面，以后有机会再聊吧。&lt;/p&gt;&lt;p&gt;祝，新年快乐、升职加薪！&lt;/p&gt;&lt;h2&gt;参考文献&lt;/h2&gt;&lt;p&gt;[1] Applying Deep Learning to Airbnb Search.&lt;/p&gt;&lt;p&gt;[2] Wide &amp;amp; Deep Learning for Recommender Systems.&lt;/p&gt;&lt;p&gt;[3] Attention is All you Need.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ce1cb074a6f951632fe317f00aa4a5d7</guid>
<title>9 条消除 if...else 的锦囊妙计，助你写出更优雅的代码</title>
<link>https://toutiao.io/k/6o9uhdv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近在做代码重构，发现了很多代码的烂味道。其他的不多说，今天主要说说那些又臭又长的if...else要如何重构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在介绍更更优雅的编程之前，让我们一起回顾一下，不好的if...else代码&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一、又臭又长的if...else&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;废话不多说，先看看下面的代码。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AliaPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起支付宝支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeixinPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         System.out.println(&lt;span&gt;&quot;===发起微信支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt;  &lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JingDongPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起京东支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayService&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;@Autowired&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; AliaPay aliaPay;  &lt;br/&gt;     &lt;span&gt;@Autowired&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; WeixinPay weixinPay;  &lt;br/&gt;     &lt;span&gt;@Autowired&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; JingDongPay jingDongPay;  &lt;br/&gt;    &lt;br/&gt;   &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;toPay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;alia&quot;&lt;/span&gt;.equals(code)) {  &lt;br/&gt;             aliaPay.pay();  &lt;br/&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;weixin&quot;&lt;/span&gt;.equals(code)) {  &lt;br/&gt;              weixinPay.pay();  &lt;br/&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;jingdong&quot;&lt;/span&gt;.equals(code)) {  &lt;br/&gt;              jingDongPay.pay();  &lt;br/&gt;         } &lt;span&gt;else&lt;/span&gt; {  &lt;br/&gt;              System.out.println(&lt;span&gt;&quot;找不到支付方式&quot;&lt;/span&gt;);  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PayService类的toPay方法主要是为了发起支付，根据不同的code，决定调用用不同的支付类（比如：aliaPay）的pay方法进行支付。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码有什么问题呢？也许有些人就是这么干的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想一下，如果支付方式越来越多，比如：又加了百度支付、美团支付、银联支付等等，就需要改toPay方法的代码，增加新的else...if判断，判断多了就会导致逻辑越来越多？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很明显，这里违法了设计模式六大原则的：&lt;code&gt;开闭原则&lt;/code&gt; 和 &lt;code&gt;单一职责原则&lt;/code&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;开闭原则：对扩展开放，对修改关闭。就是说增加新功能要尽量少改动已有代码。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;单一职责原则：顾名思义，要求逻辑尽量单一，不要太复杂，便于复用。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那有什么办法可以解决这个问题呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;二、消除if...else的锦囊妙计&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1、使用注解&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码中之所以要用code判断使用哪个支付类，是因为code和支付类没有一个绑定关系，如果绑定关系存在了，就可以不用判断了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先定义一个注解。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)  &lt;br/&gt;&lt;span&gt;@Target&lt;/span&gt;(ElementType.TYPE)  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;@interface&lt;/span&gt; PayCode {  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;String &lt;span&gt;value&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;    &lt;br/&gt;     &lt;span&gt;String &lt;span&gt;name&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在所有的支付类上都加上该注解&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@PayCode&lt;/span&gt;(value = &lt;span&gt;&quot;alia&quot;&lt;/span&gt;, name = &lt;span&gt;&quot;支付宝支付&quot;&lt;/span&gt;)  &lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AliaPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         System.out.println(&lt;span&gt;&quot;===发起支付宝支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;@PayCode&lt;/span&gt;(value = &lt;span&gt;&quot;weixin&quot;&lt;/span&gt;, name = &lt;span&gt;&quot;微信支付&quot;&lt;/span&gt;)  &lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeixinPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         System.out.println(&lt;span&gt;&quot;===发起微信支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;} &lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;@PayCode&lt;/span&gt;(value = &lt;span&gt;&quot;jingdong&quot;&lt;/span&gt;, name = &lt;span&gt;&quot;京东支付&quot;&lt;/span&gt;)  &lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JingDongPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起京东支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后增加最关键的类：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayService2&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationListener&lt;/span&gt;&amp;lt;&lt;span&gt;ContextRefreshedEvent&lt;/span&gt;&amp;gt; &lt;/span&gt;{  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map&amp;lt;String, IPay&amp;gt; payMap = &lt;span&gt;null&lt;/span&gt;;  &lt;br/&gt;     &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;onApplicationEvent&lt;/span&gt;&lt;span&gt;(ContextRefreshedEvent contextRefreshedEvent)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         ApplicationContext applicationContext = contextRefreshedEvent.getApplicationContext();  &lt;br/&gt;         Map&amp;lt;String, Object&amp;gt; beansWithAnnotation = applicationContext.getBeansWithAnnotation(PayCode&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;  &lt;br/&gt;        &lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (beansWithAnnotation != &lt;span&gt;null&lt;/span&gt;) {  &lt;br/&gt;             payMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();  &lt;br/&gt;             beansWithAnnotation.forEach((key, value) -&amp;gt;{  &lt;br/&gt;                 String bizType = value.getClass().getAnnotation(PayCode&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;).&lt;span&gt;value&lt;/span&gt;()&lt;/span&gt;;  &lt;br/&gt;                 payMap.put(bizType, (IPay) value);  &lt;br/&gt;             });  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt;    &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        payMap.get(code).pay();  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;PayService2类实现了&lt;code&gt;ApplicationListener&lt;/code&gt;接口，这样在&lt;code&gt;onApplicationEvent&lt;/code&gt;方法中，就可以拿到&lt;code&gt;ApplicationContext&lt;/code&gt;的实例。我们再获取打了PayCode注解的类，放到一个map中，map中的key就是PayCode注解中定义的value，跟code参数一致，value是支付类的实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样，每次就可以每次直接通过code获取支付类实例，而不用if...else判断了。如果要加新的支付方法，只需在支付类上面打上PayCode注解定义一个新的code即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：这种方式的code可以没有业务含义，可以是纯数字，只有不重复就行。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2、动态拼接名称&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方法主要针对code是有业务含义的场景。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayService3&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextAware&lt;/span&gt; &lt;/span&gt;{   &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String SUFFIX = &lt;span&gt;&quot;Pay&quot;&lt;/span&gt;;  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationContext&lt;/span&gt;&lt;span&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext = applicationContext;  &lt;br/&gt;     }  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;toPay&lt;/span&gt;&lt;span&gt;(String payCode)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         ((IPay) applicationContext.getBean(getBeanName(payCode))).pay();  &lt;br/&gt;     }  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getBeanName&lt;/span&gt;&lt;span&gt;(String payCode)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         &lt;span&gt;return&lt;/span&gt; payCode + SUFFIX;  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，支付类bean的名称是由code和后缀拼接而成，比如：aliaPay、weixinPay和jingDongPay。这就要求支付类取名的时候要特别注意，前面的一段要和code保持一致。调用的支付类的实例是直接从&lt;code&gt;ApplicationContext&lt;/code&gt;实例中获取的，默认情况下&lt;code&gt;bean&lt;/code&gt;是单例的，放在内存的一个&lt;code&gt;map&lt;/code&gt;中，所以不会有性能问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特别说明一下，这种方法实现了&lt;code&gt;ApplicationContextAware&lt;/code&gt;接口跟上面的&lt;code&gt;ApplicationListener&lt;/code&gt;接口不一样，是想告诉大家获取&lt;code&gt;ApplicationContext&lt;/code&gt;实例的方法不只一种。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;3、模板方法判断&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然除了上面介绍的两种方法之外，spring的源码实现中也告诉我们另外一种思路，解决if...else问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先一起看看&lt;code&gt;spring AOP&lt;/code&gt;的部分源码，看一下&lt;code&gt;DefaultAdvisorAdapterRegistry&lt;/code&gt;的&lt;code&gt;wrap&lt;/code&gt;方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Advisor &lt;span&gt;wrap&lt;/span&gt;&lt;span&gt;(Object adviceObject)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; UnknownAdviceTypeException &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; (adviceObject &lt;span&gt;instanceof&lt;/span&gt; Advisor) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (Advisor) adviceObject;  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; (!(adviceObject &lt;span&gt;instanceof&lt;/span&gt; Advice)) {  &lt;br/&gt;        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnknownAdviceTypeException(adviceObject);  &lt;br/&gt;     }  &lt;br/&gt;     Advice advice = (Advice) adviceObject;  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; (advice &lt;span&gt;instanceof&lt;/span&gt; MethodInterceptor) {    &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DefaultPointcutAdvisor(advice);  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;for&lt;/span&gt; (AdvisorAdapter adapter : &lt;span&gt;this&lt;/span&gt;.adapters) {  &lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (adapter.supportsAdvice(advice)) {  &lt;br/&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DefaultPointcutAdvisor(advice);  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnknownAdviceTypeException(advice);  &lt;br/&gt; }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重点看看&lt;code&gt;supportAdvice&lt;/code&gt;方法，有三个类实现了这个方法。我们随便抽一个类看看&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AfterReturningAdviceAdapter&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;AdvisorAdapter&lt;/span&gt;, &lt;span&gt;Serializable&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;supportsAdvice&lt;/span&gt;&lt;span&gt;(Advice advice)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (advice &lt;span&gt;instanceof&lt;/span&gt; AfterReturningAdvice);  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; MethodInterceptor &lt;span&gt;getInterceptor&lt;/span&gt;&lt;span&gt;(Advisor advisor)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        AfterReturningAdvice advice = (AfterReturningAdvice) advisor.getAdvice();  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AfterReturningAdviceInterceptor(advice);  &lt;br/&gt;     }   &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该类的&lt;code&gt;supportsAdvice&lt;/code&gt;方法非常简单，只是判断了一下&lt;code&gt;advice&lt;/code&gt;的类型是不是&lt;code&gt;AfterReturningAdvice&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到这里应该有所启发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，我们可以这样做，定义一个接口或者抽象类，里面有个&lt;code&gt;support&lt;/code&gt;方法判断参数传的code是否自己可以处理，如果可以处理则走支付逻辑。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;support&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt;&lt;/span&gt;;   &lt;br/&gt;     &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AliaPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{   &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;support&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;alia&quot;&lt;/span&gt;.equals(code);  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起支付宝支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt; &lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeixinPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;support&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;weixin&quot;&lt;/span&gt;.equals(code);  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起微信支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}  &lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JingDongPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;support&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;jingdong&quot;&lt;/span&gt;.equals(code);  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起京东支付===&quot;&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个支付类都有一个support方法，判断传过来的code是否和自己定义的相等。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Service&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayService4&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextAware&lt;/span&gt;, &lt;span&gt;InitializingBean&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;IPay&amp;gt; payList = &lt;span&gt;null&lt;/span&gt;;  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{  &lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (payList == &lt;span&gt;null&lt;/span&gt;) {  &lt;br/&gt;             payList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();  &lt;br/&gt;             Map&amp;lt;String, IPay&amp;gt; beansOfType = applicationContext.getBeansOfType(IPay&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;  &lt;br/&gt; &lt;br/&gt;             beansOfType.forEach((key, value) -&amp;gt; payList.add(value));  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;@Override&lt;/span&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationContext&lt;/span&gt;&lt;span&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext = applicationContext;  &lt;br/&gt;     }  &lt;br/&gt; &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;toPay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;         &lt;span&gt;for&lt;/span&gt; (IPay iPay : payList) {  &lt;br/&gt;             &lt;span&gt;if&lt;/span&gt; (iPay.support(code)) {  &lt;br/&gt;                iPay.pay();  &lt;br/&gt;             }  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码中先把实现了IPay接口的支付类实例初始化到一个list集合中，返回在调用支付接口时循环遍历这个list集合，如果code跟自己定义的一样，则调用当前的支付类实例的pay方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;4.策略+工厂模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式也是用于code是有业务含义的场景。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;策略模式&lt;/code&gt;定义了一组算法，把它们一个个封装起来, 并且使它们可相互替换。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;工厂模式&lt;/code&gt;用于封装和管理对象的创建，是一种创建型模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AliaPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        PayStrategyFactory.register(&lt;span&gt;&quot;aliaPay&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起支付宝支付===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeixinPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        PayStrategyFactory.register(&lt;span&gt;&quot;weixinPay&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起微信支付===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JingDongPay&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;IPay&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@PostConstruct&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        PayStrategyFactory.register(&lt;span&gt;&quot;jingDongPay&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;===发起京东支付===&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayStrategyFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Map&amp;lt;String, IPay&amp;gt; PAY_REGISTERS = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;register&lt;/span&gt;&lt;span&gt;(String code, IPay iPay)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; != code &amp;amp;&amp;amp; !&lt;span&gt;&quot;&quot;&lt;/span&gt;.equals(code)) {&lt;br/&gt;            PAY_REGISTERS.put(code, iPay);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IPay &lt;span&gt;get&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; PAY_REGISTERS.get(code);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayService3&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;toPay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        PayStrategyFactory.get(code).pay();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码的关键是&lt;code&gt;PayStrategyFactory&lt;/code&gt;类，它是一个策略工厂，里面定义了一个全局的map，在所有IPay的实现类中注册当前实例到map中，然后在调用的地方通过&lt;code&gt;PayStrategyFactory&lt;/code&gt;类根据code从map获取支付类实例即可。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;5.责任链模式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式在代码重构时用来消除if...else非常有效。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;责任链模式：将请求的处理对象像一条长链一般组合起来，形成一条对象链。请求并不知道具体执行请求的对象是哪一个，这样就实现了请求与处理对象之间的解耦。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;常用的&lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;spring aop&lt;/code&gt;就是使用了责任链模式，这里我稍微改良了一下，具体代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Getter&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Setter&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;protected&lt;/span&gt; PayHandler next;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;(String pay)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AliaPayHandler&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;PayHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;alia&quot;&lt;/span&gt;.equals(code)) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;===发起支付宝支付===&quot;&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            getNext().pay(code);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WeixinPayHandler&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;PayHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;weixin&quot;&lt;/span&gt;.equals(code)) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;===发起微信支付===&quot;&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            getNext().pay(code);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;JingDongPayHandler&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;PayHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;pay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;&quot;jingdong&quot;&lt;/span&gt;.equals(code)) {&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;===发起京东支付===&quot;&lt;/span&gt;);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;            getNext().pay(code);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;@Service&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;PayHandlerChain&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ApplicationContextAware&lt;/span&gt;, &lt;span&gt;InitializingBean&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; PayHandler header;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;handlePay&lt;/span&gt;&lt;span&gt;(String code)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        header.pay(code);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setApplicationContext&lt;/span&gt;&lt;span&gt;(ApplicationContext applicationContext)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; BeansException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.applicationContext = applicationContext;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;afterPropertiesSet&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, PayHandler&amp;gt; beansOfTypeMap = applicationContext.getBeansOfType(PayHandler&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (beansOfTypeMap == &lt;span&gt;null&lt;/span&gt; || beansOfTypeMap.size() == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        List&amp;lt;PayHandler&amp;gt; handlers = beansOfTypeMap.values().stream().collect(Collectors.toList());&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; handlers.size(); i++) {&lt;br/&gt;            PayHandler payHandler = handlers.get(i);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (i != handlers.size() - &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;                payHandler.setNext(handlers.get(i + &lt;span&gt;1&lt;/span&gt;));&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;        header = handlers.get(&lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码的关键是每个PayHandler的子类，都定义了下一个需要执行的PayHandler子类，构成一个链式调用，通过PayHandlerChain把这种链式结构组装起来。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;6、其他的消除if...else的方法&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然实际项目开发中使用if...else判断的场景非常多，上面只是其中几种场景。下面再列举一下，其他常见的场景。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1.根据不同的数字返回不同的字符串&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt; (code == &lt;span&gt;1&lt;/span&gt;) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;成功&quot;&lt;/span&gt;;  &lt;br/&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (code == -&lt;span&gt;1&lt;/span&gt;) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;失败&quot;&lt;/span&gt;;  &lt;br/&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (code == -&lt;span&gt;2&lt;/span&gt;) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;网络超时&quot;&lt;/span&gt;;  &lt;br/&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (code == -&lt;span&gt;3&lt;/span&gt;) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;参数错误&quot;&lt;/span&gt;;  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;code错误&quot;&lt;/span&gt;);  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，这种判断没有必要，用一个枚举就可以搞定。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; MessageEnum {  &lt;br/&gt;     SUCCESS(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;成功&quot;&lt;/span&gt;),  &lt;br/&gt;     FAIL(-&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;&quot;失败&quot;&lt;/span&gt;),  &lt;br/&gt;     TIME_OUT(-&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&quot;网络超时&quot;&lt;/span&gt;),  &lt;br/&gt;     PARAM_ERROR(-&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;&quot;参数错误&quot;&lt;/span&gt;);  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; code;  &lt;br/&gt;     &lt;span&gt;private&lt;/span&gt; String message;  &lt;br/&gt;&lt;br/&gt;     MessageEnum(&lt;span&gt;int&lt;/span&gt; code, String message) {  &lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;.code = code;  &lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;.message = message;  &lt;br/&gt;     }  &lt;br/&gt;   &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;getCode&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.code;  &lt;br/&gt;     }  &lt;br/&gt;&lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.message;  &lt;br/&gt;     }  &lt;br/&gt;  &lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageEnum &lt;span&gt;getMessageEnum&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; Arrays.stream(MessageEnum.values()).filter(x -&amp;gt; x.code == code).findFirst().orElse(&lt;span&gt;null&lt;/span&gt;);  &lt;br/&gt;     }  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再把调用方法稍微调整一下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     MessageEnum messageEnum = MessageEnum.getMessageEnum(code);  &lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; messageEnum.getMessage();  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完美。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;2.集合中的判断&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的枚举MessageEnum中的getMessageEnum方法，如果不用java8的语法的话，可能要这样写&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageEnum &lt;span&gt;getMessageEnum&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;for&lt;/span&gt; (MessageEnum messageEnum : MessageEnum.values()) {  &lt;br/&gt;         &lt;span&gt;if&lt;/span&gt; (code == messageEnum.code) {  &lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; messageEnum;  &lt;br/&gt;         }  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于集合中过滤数据，或者查找方法，java8有更简单的方法消除if...else判断。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MessageEnum &lt;span&gt;getMessageEnum&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; Arrays.stream(MessageEnum.values()).filter(x -&amp;gt; x.code == code).findFirst().orElse(&lt;span&gt;null&lt;/span&gt;);  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;3.简单的判断&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实有些简单的if...else完全没有必要写，可以用三目运算符代替，比如这种情况：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage2&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt;(code == &lt;span&gt;1&lt;/span&gt;) {  &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt;  &lt;span&gt;&quot;成功&quot;&lt;/span&gt;;  &lt;br/&gt;     }  &lt;br/&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;失败&quot;&lt;/span&gt;;  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;改成三目运算符：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getMessage2&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; code == &lt;span&gt;1&lt;/span&gt; ? &lt;span&gt;&quot;成功&quot;&lt;/span&gt; : &lt;span&gt;&quot;失败&quot;&lt;/span&gt;;  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;修改之后代码更简洁一些。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;4.spring中的判断&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于参数的异常，越早被发现越好，在spring中提供了&lt;code&gt;Assert&lt;/code&gt;用来帮助我们检测参数是否有效。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(Integer code，String name)&lt;/span&gt; &lt;/span&gt;{  &lt;br/&gt;     &lt;span&gt;if&lt;/span&gt;(code == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;       &lt;span&gt;throw&lt;/span&gt; Exception(&lt;span&gt;&quot;code不能为空&quot;&lt;/span&gt;);     &lt;br/&gt;     } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;         &lt;span&gt;if&lt;/span&gt;(name == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;             &lt;span&gt;throw&lt;/span&gt; Exception(&lt;span&gt;&quot;name不能为空&quot;&lt;/span&gt;);     &lt;br/&gt;         } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;             System.out.println(&lt;span&gt;&quot;doSave&quot;&lt;/span&gt;);&lt;br/&gt;         }&lt;br/&gt;     }&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果参数非常多的话，if...else语句会很长，这时如果改成使用&lt;code&gt;Assert&lt;/code&gt;类判断，代码会简化很多：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;save2&lt;/span&gt;&lt;span&gt;(Integer code，String name)&lt;/span&gt; &lt;/span&gt;{      &lt;br/&gt;     Assert.notNull(code,&lt;span&gt;&quot;code不能为空&quot;&lt;/span&gt;); &lt;br/&gt;     Assert.notNull(name,&lt;span&gt;&quot;name不能为空&quot;&lt;/span&gt;); &lt;br/&gt;     System.out.println(&lt;span&gt;&quot;doSave&quot;&lt;/span&gt;);&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，还有很多其他的场景可以优化if...else，我再这里就不一一介绍了，感兴趣的朋友可以给我留言，一起探讨和研究一下。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;最后说一句(求关注，别白嫖我)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果这篇文章对您有所帮助，或者有所启发的话，帮忙扫描下发二维码关注一下，您的支持是我坚持写作最大的动力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;求一键三连：点赞、转发、在看。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在公众号中回复：面试、代码神器、开发手册、时间管理有超赞的粉丝福利，另外回复：加群，可以跟很多BAT大厂的前辈交流和学习。&lt;/p&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;span&gt;更多好文敬请关注公众号&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;扫描二维码&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;关注公众号&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;苏三说技术&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;99&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;99&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uL371281oDHUdzOhPCwBUOUgBJ8TrNhn8g5OiaO1C12Y71FPVcyqFkOzz4FnwsLyvZic0dNSYw8hfSjQOeJhDnWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.12462908011869436&quot; data-type=&quot;png&quot; data-w=&quot;1348&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/pVibvv4KleFsnBBpxZsEibYGOXkgfekPUTZRBBZM4OqltADkUibt0xDic7ZY2MzBx4M7MLwTCXmia2kHCliccmCUQwuA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p data-style=&quot;font-variant-numeric: normal; font-variant-east-asian: normal; white-space: normal; text-align: center; color: rgb(127, 127, 127); letter-spacing: 0.54px; font-family: 微软雅黑; font-size: 16px; word-spacing: 1px; min-height: 1em; max-width: 100%; box-sizing: border-box; widows: 1; overflow-wrap: break-word; background-color: rgb(255, 255, 255);&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎跟我一起唠嗑，加下方微信备注【加群】即可，欢迎加入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.26356589147286824&quot; data-type=&quot;png&quot; data-w=&quot;258&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/836iaaYdRmibxXjurZRm6AMAJydTZntswnnAmTWCfLag8Jdl3I1d745CkibAeBtdFB6Ej9iccMexDjXmJHibJEDgacw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-cropselx1=&quot;0&quot; data-cropselx2=&quot;101&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;101&quot; data-ratio=&quot;1.0048309178743962&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uL371281oDHUdzOhPCwBUOUgBJ8TrNhnfLeme2LIF0wf8xJX3Oich2efGXhGJic7ibdIDhY9icZiaPAyAFSvVn8AM6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;414&quot;/&gt;&lt;/section&gt;&lt;p data-mid=&quot;&quot;&gt;扫描二维码加好友&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2604a83ff924a328bbbfcfeda7cbe0cb</guid>
<title>[译] Hugo 作者、Go 核心团队成员 Steve Francia 谈诞生 13 年的 Go 语言</title>
<link>https://toutiao.io/k/3tvjjmq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5241666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/cH6WzfQ94mYDSVtu6OKC9sjkxicCl2vG9BNib8icJXjpJJhgEX3cdOfyJicJxTJPpmE5sb3KzjIUsP800nQNfT2VcA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文翻译自&lt;span&gt;《Go Language at 13 Years: Ecosystem, Evolution, and Future in Conversation with Steve Francia》&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;blockquote&gt;&lt;p&gt;译注：Go 开源于 2009 年，如果从那时算起，&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486181&amp;amp;idx=1&amp;amp;sn=fd0f1dca3a1296451d4fb09a10bfba91&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go 才 11 岁&lt;/a&gt;；但在 Go 核心 开发团队眼中，Go 的真正诞生年份是 2007 年，至今 13 个年头了。关于 Go 的演化简史可以参见我的专栏文章：&lt;span&gt;《Go 语言的前生今世》&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文要点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Go 的简单性&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;让你可以快速上手使用它--你可以在一个下午就消化掉整个&lt;span&gt;Go 语言规范&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;作者认为 Go 是当今最好的现代语言之一（其他的还包括：Dart、Flutter 和 Rust）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 的未来是由它的开源社区决定的，它对所有的功能建议进行讨论和辩论。除非达成明确的共识，否则该功能不会被实现。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;社区的规模大约每 18 个月翻一番。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最初，Go 的早期采用者多来自 python 或 ruby 等动态语言的开发人员，现在随着语言的成熟，来自 Java、.NET 和 C++程序员也开始接纳并使用 Go。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在充满挑战的一年里，社区适应了相互支持，出现了多个 meetup，并出现了新的资源。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编程语言的历史只朝着一个方向发展，每一种新的语言的出现都让事情都变得越来越复杂，越来越抽象。然而，就在十几年前，Go 在 Google 诞生了。这种编程语言走的是另外一条路，它把赌注押在了简单和精心的设计和实现上。这个配方一直保留到今天，你可以直接开始写 Go 代码，没有太大的障碍。当你想到现代软件的大部分流行和可靠的作品都是用 Go 编写的，比如 Docker、Kubernetes、Prometheu 等，这就足以让你印象深刻。这个列表还在持续增加。为了了解 Go 从哪里来，更重要的是它要往哪里去，InfoQ 联系了 Google 负责战略和产品的 Go 编程语言团队核心成员&lt;span&gt;Steve Francia&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;(译注：他也是知名静态站点生成工具&lt;span&gt;gohugo&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;的作者)。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：非常感谢您抽出宝贵时间回答读者的几个问题。我们能否首先请您介绍一下自己并描述您在 Google 的角色和日常工作？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Steve Francia：我是 Steve Francia，是 Google Go 编程语言团队的核心成员，负责产品和策略。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：您将技术挑战和工程挑战归因于十三年前点燃了 Go 的火花。还有其他吗？当时 Google 的官方编程语言是什么，缺少什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：创建 Go 的主要动机是认识到我们的系统已经变得越来越复杂。为了跟上“Google 规模”的指数增长，我们设计了复杂的系统来满足我们的需求。随着时间的流逝，我们又在这些基础系统/库和语言的基础上构建了新的复杂系统。人们通常不会想到复杂性的隐性成本。事实是，代码被读取的次数比其编写的次数多。复杂性给团队效率带来了极大的负担。相反，Go 很简单。你仅需要花一个下午的时间来学习。Go 代码非常简单易读。这种简单性使团队能够以前所未有的方式进行协作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：这一切是如何开始的？是自上而下的请求（管理人员要求一种语言来满足需求），还是自下而上的请求？来自 Google 的 20％著名的创新？工程师尽其所能-解决问题？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：没人要求过。这实际上不是一个 20％的项目。是一次谈话导致一个研究项目获得了关注，并且被广泛采用，超出了所有人的想象。当然，Google 从上到下都对寻找降低复杂性和提高生产力的方法感兴趣。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：在起步阶段，有一种说法是，如果您在发布之日不为自己的产品感到羞耻，那么您可能为时已晚。Go 于 2011 年发布 1.0 版本，当时 Google 为了支持它，将其添加到 Google App Engine 中，YouTube 也开始使用 Vitess(译注：一种 Go 实现的 Mysql 前置代理，用于建立 mysql 集群）。Go 在发布时就已经准备好投入生产了吗？还是人们努力用它来构建产品？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：Go 发布的恰逢其时。有很多 Go 的基础设计是正确的，但是今天 Go 中有很多东西不在早期版本中-这在开源中很常见。最明显的是，当时没有“go”命令，所以在如今的 Go 版本中可以很自然做的事情（例如“go build”）在早期则要困难得多。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;提前发布的最大好处是它使社区能够参与 Go 的设计过程。社区为 Go 的成功做出了很大的贡献。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们的 Go 的第一个公开发行版就可以应用于生产环境了，这表现在用 Go 构建的程序在生产环境中的高性能和稳定的，但是 Go 仍然缺乏很多完善之处，Go 团队和社区随后可以共同塑造和打磨。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：回顾一下，构建 Go 时需要解决的最技术性问题是什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：这个问题很难讲。这有点暗示我们已经完成了 Go。我认为 Go 项目多年来解决了许多“最棘手”的技术问题，我们将继续解决非常具有挑战性的技术问题。我们目前正在努力&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486235&amp;amp;idx=1&amp;amp;sn=d0f80cb89099360a801603109e6ab0b6&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;为 Go 添加泛型支持&lt;/a&gt;。添加泛型本身就是一项艰巨的任务，但是我们也希望它仍然看起来像 Go，这意味着使用泛型可以提高可读性。这是一件非常困难的事情，而且我们的一些关键人员已经思考了&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486814&amp;amp;idx=1&amp;amp;sn=59f4001525ec28d737015a14330f41d2&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;十多年&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在过去的几年中，我们解决了有关如何管理 Go 依赖的一些最大挑战。我们在 Go 中&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486758&amp;amp;idx=1&amp;amp;sn=607e38d21ce911c07e19da95ba9360a5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;添加了 module 支持&lt;/a&gt;，但却没有引入菱形依赖项或依赖项地狱，这是以前的编程语言所没能做到过的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;另一个挑战是 Go 在每个版本中持续改进其性能。其体现之一是将垃圾收集的暂停时间延迟(STW)从几秒减少到几毫秒再到几微秒。这对于 Go 而言是具有变革性的，对于其在服务中的成功至关重要。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：如果您必须重新实现一次 Go，您会采取什么不同的措施？为什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：借助事后观察的优势，作为今天帮助塑造 Go 的人，但在最初的几年中我并没有出现，我真的不会改变。这是一种美丽的，经过深思熟虑的语言，虽然它并不完美，但使用起来非常好。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我希望我们进行一些小调整，但讨论它们会把太多的焦点放在这些微不足道的事情上。相反，如果我们可以重来一次，我希望我们会犯同样的错误，只是更早而已。Go 的发展速度非常快，大约每 18 个月，Go 的用户群的规模就会增加一倍。这意味着，今天与五年前相比，一个变化会影响大约 10 倍的人。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;今天的 Go 依赖管理机制非常棒，但它可能比预期的晚了五年。这种延误使本来已经很困难的问题变得更加困难，结果给社区造成了不必要的压力。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;同样，我们现在正在努力进行的重大语言更改是&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486347&amp;amp;idx=1&amp;amp;sn=97c184ce49c2dfa82e3cf5e034aef760&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;泛型&lt;/a&gt;。这将对社区产生重大影响。如果我们能够重新做一遍，而事后才明白此功能的重要性，我希望我们早在七年前就可以认真地开始这项工作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：Go 编程语言还缺少什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：作为一种语言，泛型确实是我们所缺少的唯一主要功能，正如我之前所说，我们目前正专注于此。现在&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIyNzM0MDk0Mg==&amp;amp;mid=2247486347&amp;amp;idx=1&amp;amp;sn=97c184ce49c2dfa82e3cf5e034aef760&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;有一个支持新泛型语法的 playground&lt;/a&gt;，您可以在其中使用新泛型语法原型并提供反馈。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;除此之外，大部分要做的工作是改进和完善，主要是在语言本身的周边。对于工具，我们计划改善创作，发布和编辑体验。我们还致力于帮助人们做出有关其依赖关系的更好决策。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：Go 始于 Google，但现在是开源的。如今，谁才是幕后的决策人呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：2020 年 11 月，&lt;span&gt;Go 庆祝了自己开源 11 周年&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;决定了整个项目的方向。想法和经验来自社区的每个角落。它们作为提案发布到 Github 上的项目中。从那里社区可以评估他们对提案的看法，并帮助进一步完善提案。提案委员会每周开会，审查未完成的提案。目前，委员会有六名成员，其中四名是 Google 员工。但决策几乎总是来自社区对提案问题本身的讨论。除非问题讨论明确同意，否则该提议将被拒绝。通过设计和意图，Go 的更改会在公开环境中缓慢而有意识地发生。该过程旨在加强这一点。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：随着 Go 的普及，Go 的生态系统如何演变？Go 最初主要专注于网络和基础架构。这些年来其用法是如何演变的？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：关于 Go 的一个有趣的事情是 Go 语言走了一条与其创始人最初计划不同的途径。Go 语言之父们创建 Go 的最初目的是构建流行的高性能服务器端编程语言（当时为 Java 和 C++）的替代品。创始人们认为，一种简单的语言可以在保持性能的同时，极大地提高此类开发人员的生产率。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;尽管 Go 在争取到了一些 Java 和 C++工程师的支持和早期采纳，但 Go 的大部分早期采用者都来自动态语言程序员群体，这些语言来自 Python，Javascript，Ruby 和 PHP 等语言。事实证明，Go 最初对动态语言类的吸引力更大，动态语言类看到了在保持生产力的的同时大幅提高性能的机会。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;随着 Go 及其生态系统的成熟，Go 的采用已扩展到企业中，并且 Java，C++和 C＃工程师的最初受众也加快了他们对 Go 的采用。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Go 的独特魅力之一是，它是一种小语言，其大多数创新就发生在其生态系统中。我们一直对社区采用 Go 的创造性和多样化方向感到惊讶。Go 的优势仍然是 Go 十分适合的云/服务器应用程序，但事实证明 Go 确实也非常适合许多其他类型的应用程序。DevOps / SRE，CLI，Web 应用程序和数据处理已全部转到 Go。现在，我们看到 Go 用于微控制器，机器人技术，游戏等。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：Kubernetes，Docker 和 Prometheus 都是用 Go 编写的。还有其他用该语言编写的工具吗？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：这里能列出的工具太多了。我个人经常使用的一些比较流行的工具是：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Hugo&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;，一个静态网站生成器（我几年前创建的）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Syncthing&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;，一种分布式同步工具（请考虑 Dropbox / Google 驱动器，但不带服务器）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;服务网格 Istio&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Terraform&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;，基础架构即代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;InfluxDB&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;，时间序列数据库&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在&lt;span&gt;Awesome Go&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;上可以找到更详细的列表。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：在网络和系统编程方面，Go 是高效且可靠的，但是 Go 所不适合的领域是什么呢？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：对我自己来说，今天只有三种现代语言。每种语言都经过精心设计，以解决前代语言的不同缺点，从而使每种语言在不同方面都具有出色的表现，并且是其他语言的很好补充。这是我看这三种语言的方式：&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Go 是一种很好的默认语言。它是系统，服务器，API，守护程序，数据库，网站，工具等的理想选择。Go 达到了性能与开发人员生产力之间的关键平衡。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Dart + Flutter，用于基于 GUI 的应用程序（移动+桌面）。Flutter 在编写一个可以在多种操作系统和多种格式下工作的客户端应用程序的想法方面表现出色。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;需要精细控制时可以使用 Rust。对于低级编程、内核之类的东西，Rust 提供了更高的精度，但代价是增加了复杂性。有时候，这种权衡是有意义的，而当这样做时，Rust 是一个不错的选择。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我认为，未来 10 年以上的大多数“现代”工作负载将以其中一种语言编写。当然，总会有需要支持的旧工作负载，因此请不要认为我在这里的观点暗示了任何语言的消亡。肯定还存在在某些领域中，诸如 R，SQL 甚至 Javascript 之类的利基语言可以发挥作用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：史蒂夫，我记得几年前在布达佩斯参加了一次会议，在那里您举办了有关使用 Go 的研讨会。我有种感觉，您会更多向对手推销并建议 Go，而不是向朋友-为什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：那是一次很棒的会议，也是我第一次在布达佩斯。从那以后我已经回来过几次了，这是我最喜欢的城市之一，如此充满魅力。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;许多年前，我在 MongoDB 工作。我的角色是领导开发人员体验团队，这意味着我应对与用户相关的一切负责。其中包括文档，网站，开发人员关系，MongoDB 界面，以及设计和设计我们与语言和框架的集成。这是一个非常广泛且具有挑战性的角色，需要我的团队使用 10 多种不同的编程语言（以及几种人类语言）进行编写。到那时为止，我在职业生涯中一直使用多种语言，并以能够为我们的每种语言做出贡献为目标。当时，我认为自己是一个会说多种语言的人，并且很高兴能借此机会扩展自己的经验并了解这些不同的语言。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;首先，我们专注于支持最受欢迎的语言，而我一直在寻找“下一种语言”可能是什么。由于马丁·奥德斯基（Martin Odersky）在 Scala 上的免费在线课程，我学到的第一门“下一门语言”是 Scala。我喜欢学习语言，并且一直在搜寻。我尝试的下一种语言是 Go。我恋爱了。就像有人为我设计了一种语言。我花了大量的空闲时间，大部分时间每天花 3 个小时以上，坐火车去曼哈顿，写 Go 软件。这就是&lt;span&gt;Hugo&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;，&lt;span&gt;Cobra&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;，&lt;span&gt;Viper&lt;/span&gt;&lt;sup&gt;[16]&lt;/sup&gt;，&lt;span&gt;Afero&lt;/span&gt;&lt;sup&gt;[17]&lt;/sup&gt;和许多其他库。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在此过程中，我了解到我不是一个会说多种语言的人，只是我还没有发现自己的语言。从我第一次使用 Go 的那一刻起，我就沉浸在 Go 社区和生态系统中，在世界各地进行培训，在许多会议上发表演讲并组织一些活动。在过去的七年中，我一直在告诉任何尝试了解 Go 语言的人，在此过程中，我以某种方式说服了 Go 团队和 Google 让我加入他们。除此之外，我还帮助了无数其他人讲述他们的故事，其中许多故事都在&lt;span&gt;Go.dev&lt;/span&gt;&lt;sup&gt;[18]&lt;/sup&gt;上。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：Go 语言才 13 岁，所以还是个少年(译注：在编程语言领域)。你怎么看待这件事？它是可靠的类型，它使用户的生活变得更轻松，还是仍然叛逆而喜怒无常，使操作变得棘手？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：作为用户，我认为 Go 从来没有比现在更好。向 module 的迁移非常顺利。Go 非常稳定，性能不断提高。Go 工具也越来越好。Go.dev 是一个很棒的一站式资源，它将来自整个社区的所有最终用户的参考资料，教程，文档和库集中在一个地方。我可能有偏见，但是作为 Go 的用户，在加入 Go 团队很久之前，我对 Go 的现状和发展方向感到非常满意。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：对于 Go 开发要使用的工具箱，您会推荐哪些？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：Go 的一大优点是，它真正满足了您的需求。Go 开发在 Mac，Linux 或 Windows 上几乎完全相同，并且&lt;span&gt;Go 的交叉编译&lt;/span&gt;&lt;sup&gt;[19]&lt;/sup&gt;使其可为任何架构和 OS 轻松构建。随着&lt;span&gt;gopls 语言服务器&lt;/span&gt;&lt;sup&gt;[20]&lt;/sup&gt;的引入，所有编辑器和 IDE 都将具有很棒的编写 Go 语言的体验。Go 发行版中附带的 Go 工具包含开发人员开始使用该语言所需的一切。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;尽管我主要在 Windows 上使用 VSCodium 或 Vim 进行开发，但我将时间分配在这三个 OS 之间。我经常使用 Cobra 工具和库，但是这些天我个人对 Go 的使用主要是构建一些小的 CLI 应用程序和实用程序来自动化或简化任务，因此非常适合。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：对于从零开始学习 Go 的程序员来说，Go 的学习曲线有多陡峭？您对新手的建议是什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：正如我之前提到的，Go 的最大优势之一就是入门非常容易。人们常常会感到震惊，但这确实是事实-您可以在一个下午阅读并消化整个 Go 规范。您可以在周末学习 Go。在几周内，您将精通 Go 语言。有些甚至比这快。如果您以其他几种语言的经验来学习该语言，则可以很快选择 Go。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;当我们与采用 Go 的公司会面时，这是他们告诉我们的最一致的内容之一。Go 非常容易上手。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：对于新手而言，学习 Go 的前提是什么？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：老实说，只是时间和兴趣。Go 适合所有人。来自社区的&lt;span&gt;go.dev&lt;/span&gt;&lt;sup&gt;[21]&lt;/sup&gt;上有一些很棒的入门资源。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：Go 的发展让所有人（包括您自己）都感到惊讶。在接下来的十年中，您认为 Go 会如何发展？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：如果回顾一下计算机编程语言的历史，我们会发现绝大多数主流编程语言将在其 15 至 20 年间大步前进。Java，Python，Ruby，JavaScript 和许多其他语言都是如此。自诞生以来的 13 年中，Go 奠定了坚实的基础，并正在成为主流语言。Go 的杰出之处在于可以同时提供高性能和高开发人员生产力。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在接下来的 10 年中，向云计算的大规模转变只会继续加速。公司希望缩短上市时间，降低运营成本并提高安全性。迁移的第一阶段将主要是将其现有工作负载迁移到云中。Go 在这里起着关键的支持作用，提供 API 桥接能力，以使“传统”工作负载能够在云服务上运行。第二个更重要的阶段将是行业转变为利用独特的云产品，逐渐转向云原生应用程序开发。在这些情况下，Go 是明智的选择。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;所有云提供商都在 Go 中编写其关键基础架构。随着公司寻求现代化，有哪家公司不想使用一种安全可靠的语言以及经过十多年来来自全球一些最大公司的关键工作负载的测试，既可以降低开发成本，又可以大大降低其运营成本的语言呢？简而言之，Go 将成为云开发的代名词，而云开发将发展成为该行业绝大多数的业务。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InfoQ：我应该问你什么，但没有问？&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;Francia：谈论一种语言而不谈论其社区是不可能的。实际上，Go 之所以存在，是因为全世界有数百万人使用 Go 开发。Go 社区强大，热情且多样化。与所有人一样，今年 Go 社区进行了调整，并且也做了调整。在世界各地，gopher 聚在一起并互相帮助。召开了 30 次&lt;span&gt;（虚拟）会议&lt;/span&gt;&lt;sup&gt;[22]&lt;/sup&gt;。数百次聚会（主要是虚拟聚会）以及&lt;span&gt;/r/golang&lt;/span&gt;&lt;sup&gt;[23]&lt;/sup&gt;和&lt;span&gt;Gopher slack&lt;/span&gt;&lt;sup&gt;[24]&lt;/sup&gt;的参与度显着增长。我们启动了两个值得注意的新的社区主导程序，以帮助新的 Gophers &lt;span&gt;play-with-go.dev&lt;/span&gt;&lt;sup&gt;[25]&lt;/sup&gt;和&lt;span&gt;mentoring.gobridge.org&lt;/span&gt;&lt;sup&gt;[26]&lt;/sup&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我们感谢世界上所有为 Go 蓬勃发展的生态系统做出贡献的 Gopher，并共同期待 Go 的美好未来。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;“Gopher 部落”，新年新气象&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“Gopher 部落”&lt;/span&gt;&lt;sup&gt;[27]&lt;/sup&gt;正式转正（从试运营星球变成了正式星球）！“gopher 部落 ”旨在打造一个精品 Go 学习和进阶社群，目前虽小，但持续力很强。在 2021 年上半年，部落将策划两个专题系列分享，并且是部&amp;gt;落独享哦：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Go 技术书籍的书摘和读书体会系列&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Go 与 eBPF 系列&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;考虑到部落尚处于推广期，这里仍然为大家准备了新人优惠券，虽然优惠幅度有所下降，但依然物超所值，早到早享哦！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.5862068965517242&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mYDSVtu6OKC9sjkxicCl2vG9JcoAeQMu9tTaIXEiaEh7RqW5wFra5qEBH2997DiaibR5wfxNbqF7BdeFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感谢大家对本星球的支持！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 技术专栏“&lt;span&gt;改善 Go 语⾔编程质量的 50 个有效实践&lt;/span&gt;&lt;sup&gt;[28]&lt;/sup&gt;”正在慕课网火热热销中！本专栏主要满足广大 gopher 关于 Go 语言进阶的需求，围绕如何写出地道且高质量 Go 代码给出 50 条有效实践建议，上线后收到一致好评！欢迎大家订阅！&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mYw2sZQ17UCzEAJOtJicg6Wsdia39U9fnegshdL8UvGLD0yeftGLIdl2vCLuibQzg4WibvibDtib9RynL1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;540&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的网课“&lt;span&gt;Kubernetes 实战：高可用集群搭建、配置、运维与应用&lt;/span&gt;&lt;sup&gt;[29]&lt;/sup&gt;”在慕课网热卖中，欢迎小伙伴们订阅学习！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.7777777777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cH6WzfQ94mYw2sZQ17UCzEAJOtJicg6Ws9icQOUjfBnArIZRW0PKtgic6FlAJOTicicxGs9z3N8L3yXH58aFEen6rrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我爱发短信&lt;/span&gt;&lt;sup&gt;[30]&lt;/sup&gt;：企业级短信平台定制开发专家 https://51smspush.com/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;smspush : 可部署在企业内部的定制化短信平台，三网覆盖，不惧大并发接入，可定制扩展；短信内容你来定，不再受约束, 接口丰富，支持长短信，签名可选。2020 年 4 月 8 日，中国三大电信运营商联合发布《5G 消息白皮书》，51 短信平台也会全新升级到“51 商用消息平台”，全面支持 5G RCS 消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;著名云主机服务厂商 DigitalOcean 发布最新的主机计划，入门级 Droplet 配置升级为：1 core CPU、1G 内存、25G 高速 SSD，价格 5$/月。有使用 DigitalOcean 需求的朋友，可以打开这个&lt;span&gt;链接地址&lt;/span&gt;&lt;sup&gt;[31]&lt;/sup&gt;：https://m.do.co/c/bff6eed92687 开启你的 DO 主机之路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Gopher Daily(Gopher 每日新闻)归档仓库 - https://github.com/bigwhite/gopherdaily&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的联系方式：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微博：https://weibo.com/bigwhite20xx&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微信公众号：iamtonybai&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;博客：tonybai.com&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github: https://github.com/bigwhite&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;“Gopher 部落”知识星球：https://public.zsxq.com/groups/51284458844544&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;商务合作方式：&lt;/span&gt;&lt;span&gt;撰稿、出书、培训、在线课程、合伙创业、咨询、广告合作。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;《Go Language at 13 Years: Ecosystem, Evolution, and Future in Conversation with Steve Francia》: &lt;em&gt;https://www.infoq.com/articles/go-language-13-years/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;《Go 语言的前生今世》: &lt;em&gt;https://www.imooc.com/read/87/article/2320&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;Go的简单性: &lt;em&gt;https://www.imooc.com/read/87/article/2321&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;Go语言规范: &lt;em&gt;https://tip.golang.org/ref/spec&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5] &lt;/span&gt;&lt;p&gt;Steve Francia: &lt;em&gt;https://github.com/spf13&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6] &lt;/span&gt;&lt;p&gt;gohugo: &lt;em&gt;https://github.com/gohugoio/hugo&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7] &lt;/span&gt;&lt;p&gt;Go庆祝了自己开源11周年: &lt;em&gt;https://mp.weixin.qq.com/s/woQeEQUhOLJ7KSE5rm5q6g&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8] &lt;/span&gt;&lt;p&gt;Hugo: &lt;em&gt;https://gohugo.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9] &lt;/span&gt;&lt;p&gt;Syncthing: &lt;em&gt;https://syncthing.net/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10] &lt;/span&gt;&lt;p&gt;服务网格Istio: &lt;em&gt;https://istio.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11] &lt;/span&gt;&lt;p&gt;Terraform: &lt;em&gt;https://www.terraform.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12] &lt;/span&gt;&lt;p&gt;InfluxDB: &lt;em&gt;https://www.influxdata.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13] &lt;/span&gt;&lt;p&gt;Awesome Go: &lt;em&gt;https://github.com/avelino/awesome-go#software-packages&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14] &lt;/span&gt;&lt;p&gt;Hugo: &lt;em&gt;https://gohugo.io/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15] &lt;/span&gt;&lt;p&gt;Cobra: &lt;em&gt;https://cobra.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[16] &lt;/span&gt;&lt;p&gt;Viper: &lt;em&gt;https://github.com/spf13/viper&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[17] &lt;/span&gt;&lt;p&gt;Afero: &lt;em&gt;https://github.com/spf13/afero&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[18] &lt;/span&gt;&lt;p&gt;Go.dev: &lt;em&gt;https://go.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[19] &lt;/span&gt;&lt;p&gt;Go的交叉编译: &lt;em&gt;https://tonybai.com/2014/10/20/cross-compilation-with-golang/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[20] &lt;/span&gt;&lt;p&gt;gopls语言服务器: &lt;em&gt;https://github.com/golang/tools/tree/master/gopls&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[21] &lt;/span&gt;&lt;p&gt;go.dev: &lt;em&gt;https://go.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[22] &lt;/span&gt;&lt;p&gt;（虚拟）会议: &lt;em&gt;https://www.meetup.com/pro/go&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[23] &lt;/span&gt;&lt;p&gt;/r/golang: &lt;em&gt;https://www.reddit.com/r/golang/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[24] &lt;/span&gt;&lt;p&gt;Gopher slack: &lt;em&gt;https://gophers.slack.com/messages/general/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[25] &lt;/span&gt;&lt;p&gt;play-with-go.dev: &lt;em&gt;https://play-with-go.dev/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[26] &lt;/span&gt;&lt;p&gt;mentoring.gobridge.org: &lt;em&gt;https://promo.qooper.io/organizations/MjE1&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[27] &lt;/span&gt;&lt;p&gt;“Gopher部落”: &lt;em&gt;https://public.zsxq.com/groups/51284458844544&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[28] &lt;/span&gt;&lt;p&gt;改善Go语⾔编程质量的50个有效实践: &lt;em&gt;https://www.imooc.com/read/87&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[29] &lt;/span&gt;&lt;p&gt;Kubernetes实战：高可用集群搭建、配置、运维与应用: &lt;em&gt;https://coding.imooc.com/class/284.html&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[30] &lt;/span&gt;&lt;p&gt;我爱发短信: &lt;em&gt;https://51smspush.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[31] &lt;/span&gt;&lt;p&gt;链接地址: &lt;em&gt;https://m.do.co/c/bff6eed92687&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c6b1e9b39818dab994e4a299180297f1</guid>
<title>商业、自由和公平</title>
<link>https://toutiao.io/k/key686a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;今年互联网行业最火爆的方向，一个是社区团购，一个是直播电商，另一个是在线教育。&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;社区团购&lt;/strong&gt;号称万亿级市场，引得各大巨头纷纷入场（可以思考下，这么大市场怎么之前没发现）。有的投资布局，有的作为战略项目亲自调兵遣将。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3884992987377279&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GXjTj2xclXgpfkqSkxucY8jN1DQCeFYwiaDKWRMrSrU09uwUOOZPGqiaWq7B36vRuArbs9Kw397ao5rrGHauLHIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1426&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;看这阵仗，和当年团购和出行一样，又要有几年的厮杀。也有不少人，开始像当年一样薅起了羊毛。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后就是最近，有关部门约谈了布局社区团购的几大公司，提出了「九不得」的要求，包括不得滥用自主定价权，不得利用数据优势杀熟等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;人民日报发表评论：「&lt;span&gt;互&lt;/span&gt;&lt;span&gt;联网巨头别只惦记着几捆白菜，科技创新的星辰大海、未来的无限可能性，其实更令人心潮澎湃&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中央政治局也专门讨论和要求了「强化反垄断，防止资本无序扩张」。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比社区团购稍早些时候，&lt;strong&gt;直播电商&lt;/strong&gt;火了起来。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;广告、游戏、电商，一直是各个平台型公司的主要变现方式（可能还要加上金融）。而直播电商，把电商这种成熟的变现方式和直播这种新的流量分发方式结合起来，很快便产生了非同凡响的效果&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是借助网红主播的号召力，做电商的淘宝搭起了直播的台子，做短视频/直播的抖音、快手做起了导购，甚至开始布局自己的电商平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GXjTj2xclXjjTkrqgTzwXuhH9K9pW4tenmSU4D4ld6Jn0EBE6ck8emeXOvMdeP5icEjt3ddxOWgdH2gMiaXu2YcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;电商这边赚的盆满钵满，流量主这边的转化和变现效率大幅拉升，网红主播也能和一线明星做邻居了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好像谁都受益了。除了一些赔本买吆喝的商家，以及买到假货的消费者。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后爆出了一些网红主播售假的问题，有关部门介入，平台方在「文过饰非」和「挥泪斩马谡」之间犹豫不决。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比直播电商更早的&lt;strong&gt;在线教育&lt;/strong&gt;市场似乎要安稳不少。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;毫无疑问，教育是个大市场。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以很多年前就开始有公司进入，早期是像新东方这样以出国考试为主的线下模式，到这两年开始全面铺开的 K12 线上模式，乃至大小班、AI、音乐这样的细分场景。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8835078534031413&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GXjTj2xclXgpfkqSkxucY8jN1DQCeFYwAW6B4k3eZCB5FRmf011ibvnAwj5LGoF2IEf92sX8KSMoAibLOqWicMWyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1528&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还在创业的，融资额都很吓人；已经上市的，市值也很夸张。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;没办法，中国的父母都为孩子而活，而教育又是人尽皆知的重中之重。节衣缩食也不能让孩子输在起跑线上，不，是全程都不能输。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是，在线教育的公司们自然赚的盆满钵满，而家长们的钱袋子却越来越空，孩子们的时间也被压榨的所剩无几了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;用时髦的词讲，在线教育促成了家长和孩子们的「&lt;span&gt;内&lt;/span&gt;卷」。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另一方面，学校承担的责任似乎越来越少，老师们连批改作业的任务也安排给了家长。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是，教育部三令五申：「不得通过微信和 QQ 布置作业」，「对于要求家长批改作业等行为发现一起严处一起」。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;社区团购、直播电商和在线教育，这三个今年最火最赚钱的方向，无一例外都让平台方/中间商们赚了个够，却也无一例外的引起了「有关部门」的关注甚至介入。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是有些别有用心的公知和无知无畏的网友跳出来，说不自由民主，说没有法制精神，说限制创新，说天朝就这德性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这样的例子还有很多，比如坑了无数人的蛋壳，比如 18 亿亩耕地红线等等。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我无意探讨政治，而是想从商业、自由和公平的角度谈谈我的看法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先是商业&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;商业的本质，就是通过提供产品和服务来赚钱。另一个关系紧密的词是资本，大家应该都听过，资本是逐利的。资本裹挟的商业，一定会把赚钱这件事做的更加彻底和高效。这是事实，不以人的意见为转移。（所以像 wikipedia 这样的非盈利性组织是非常值得尊敬和支持的。）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;老祖宗也说过，「天下熙熙皆为利来，天下攘攘皆为利往。」这是经验，是既定的，也不受人的意见影响。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，&lt;strong&gt;我们在评判商业公司的行为的时候，一定要有这个清醒的认识&lt;/strong&gt;。他们做&lt;strong&gt;这些产品，不管冠以多么冠冕堂皇的理由，也不管是否会提高整体效率或者带来看得见的实惠，出发点和最终目的，一定是赚钱&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现在的亏钱，是为了以后赚更多的钱。现在给你发钱，是为了以后从你身上赚更多的钱。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不能排除有些商业产品，也在做有关社会责任感、关爱弱势群体等赚钱甚至赔钱的事。人是很复杂的，人的思想也会投射到公司和产品上，我们不能这么简单、二项性的理解商业产品和商业行为。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;所以需要抓准主要目标和长期目标。尤其当目标之间出现冲突的时候，你很快就会发现商业产品一定会选择忠于自己的天职 -- 赚钱&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后是自由&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;80 之后的几代人，和我们父辈那一代人的一个很重要的区别，就是我们在教科书以及互联网上接触到了更多的西方的东西。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而西方在科技和经济上的成功，赋予了他们主流话语权，使得很多思想还没来得及经受评判性的思考，就被铺天盖地灌入我们的脑子。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自由，就是其中的典型。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;仿佛有了自由，这个世界上就不会有任何问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;一个国家，如果出了问题，那一定是不够自由民主。一个市场，如果发展不景气，一定是不够自由开放。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;哪怕有那么多反例摆在眼前：自由民主的印度，10 几亿人都吃不好住的差呢；自由开放的南非，整个金融市场都被欧美公司把持，国内企业和老百姓赚的钱，大头都进了这些公司的口袋。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;国家发展和经济进步的原因，是生产力（更多更勤奋的人口）和生产效率（蒸汽机、电气、互联网革命）的提高。而不是什么自由、民主、神的指引&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;自由有没有有好处，当然有。自由的金融市场，带来了更高的资本效率，确实能帮助经济发展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但是，还是刚才说的，我们不能这么简单看问题，要分清主次。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当一个声音告诉你「自由是一切问题的解法」的时候，你需要想想他为什么会这么说。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;自由，不仅不是万能的，也不是绝对的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们之所以需要法律，一方面是要赋予和保护权利，另一方面就是要限制自由。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;道理也很简单，自由是相对的，一个人的自由可能会侵犯到别人的自由和其他权利。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，当&lt;strong&gt;你看到商业公司的行为被监管限制的时候，不要再被提高效率、带来实惠这样的说辞蒙蔽，记住他们的核心目的是自己赚钱；也不要再高举自由的大旗狂按键盘，有些自由就是需要被限制的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;对商业自由而言，到底什么样的自由是必须保护的，什么样的自由又需要被限制？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其中相关之一，就是我今天想说的&lt;span&gt;第三点：公平&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;回头再看看我开头说的三个例子，为什么社区团购会比其他两个受到更快速更坚决的处理，甚至可以说引出了新一轮对反垄断的关注和推进。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;类似的例子，&lt;span&gt;还有吵了很&lt;/span&gt;&lt;span&gt;多年的 18 亿亩耕地红线，很多力量在暗中推动，明明去国外买粮食更便宜，为什么要财政补贴国内农民种田。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还有近年来愈演愈烈的医疗私有化，医生能有更好的待遇，患者也能得到更好的服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;还有闻名国内的黄冈中学，优秀的老师和学生都被武汉甚至沿海城市挖了墙角，成绩逐年下降。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;等等等等，这些例子都有一个共同点，就是事关社会的公平性。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;医疗私有化&lt;/strong&gt;，很显然是商业行为，背后有资本的推动，目的自然是为了赚钱。但带来的必然是对优秀的硬件和医护人员的吸引；为了赚钱，也必然带来患者医疗费用的增加。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结果就是有钱人确实能得到更高质量的医疗服务，而穷人，到公立医院排两个月还不一定看的好，或者在家等死吧。去看看美国就知道了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;好在这次新冠疫情难得的好处，就是好好给全国上了一堂课，关键时候，还得看公立医院。希望这件事，能给医疗私有化刹车，也能给医疗系统提高下福利待遇。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;教育私有化&lt;/strong&gt;，和医疗私有化一样，最终的结果，必然是富人能接受更好的教育，而穷人则只能读更便宜但也更差的公立学校。同样是美国，已经很好的给我们证明了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;连黄冈这个级别的名校，都阻挡不了师资和学生流失到更好的公立学校，更不用说碰到吸引力更强的私立学校了。黄冈本地的普通学生们，很难再接受到以前那样的教学质量了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;而在线教育，又在另一个维度加速助长这个趋势。有了互联网的加持，可谓降维打击。更多更好的教育资源，需要花更多的钱才能得到了。甚至有些以前在学校就能学到的基础内容，也需要课外报班才能学到了。层层筛选人的，不再是聪明和努力，而是家长们钱包的厚度。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;18 亿亩耕地红线&lt;/strong&gt;，很显然是和自由、效率站在对立面的。美国巴西的粮食就是便宜很多，国内的粮食由于地形限制和以户为单位耕种，导致自动化率提升不起来，价格就是贵。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;但种地实在太不赚钱了，一旦停止农业补贴，不再高价收购农产品，种地的人就更少了。不仅买国外粮食会带来国家安全问题，更多的农民进城却找不到工作，最后只能形成贫民窟，连吃饭都成问题，而在农村，高低有口饭吃、有个大房子住。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果一墙之隔是高楼大厦，另一边是饿殍遍地，这不是同一片天空下该出现的情况。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.3142857142857143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/GXjTj2xclXjjTkrqgTzwXuhH9K9pW4tefmicn48uMfGrPGL9VfHb9H3CocSLuDwK100qwr3ZrBSdibMDC1k4zlVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;490&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以，&lt;strong&gt;如果会带来社会的不公平，那商业自由，就应该被限制。尤其在吃饭、教育、医疗这样的基础民生领域，以及影响一切行业的金融业，商业自由就应该受到更加严格的监管&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;绵延几千年的中国古代史，已经反复告诉我们，不公平，社会就会瓦解，个人就没有长久的幸福可言。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;希望大家在面对这些问题的时候，能有更加全面的思考，而不是一味的跟风吐槽。也希望大家在参与到这些事情中的时候，能尽可能多的为社会公平尽一份力。&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>