<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>7903e7dfcd35d5aca0eb87b12c1eab23</guid>
<title>领导看了我写的关闭超时订单，让我出门左转！</title>
<link>https://toutiao.io/k/mlmijzl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哈喽大家好，我是阿Q！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前几天领导突然宣布几年前停用的电商项目又重新启动了，带着复杂的心情仔细赏阅“儿时”的代码，心中的酸楚只有自己能够体会。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这不，昨天又被领导叫进了“小黑屋”，让我把代码重构下进行升级。看到这么“可爱”的代码，心中一万只“xx马”疾驰而过。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让我最深恶痛觉的就是里边竟然用&lt;strong&gt;定时任务&lt;/strong&gt;实现了“关闭超时订单”的功能，现在想来，哭笑不得。我们先分析一波为什么大家都在抵制用定时任务来实现该功能。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;定时任务&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关闭超时订单是在创建订单之后的一段时间内未完成支付而关闭订单的操作，该功能一般要求每笔订单的超时时间是&lt;strong&gt;一致&lt;/strong&gt;的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果我们使用定时任务来进行该操作，很难把握定时任务轮询的时间间隔：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间间隔足够小，在误差允许的范围内可以达到我们说的时间一致性问题，但是频繁扫描数据库，执行定时任务，会造成网络IO和磁盘IO的消耗，对实时交易造成一定的冲击；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间间隔比较大，由于每个订单创建的时间不一致，所以上边的一致性要求很难达到，举例如下：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5108538350217077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCEiaVOqRbzpz1GcibY6zzGMwdOkAdMDWiamqc2kAs8VmPuyec4ylKf9Ulkg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;691&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;假设30分钟订单超时自动关闭，定时任务的执行间隔时间为30分钟：&lt;/span&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们在第5分钟进行下单操作；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第30分钟时，定时任务执行一次，但是我们的订单未满足条件，不执行；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第35分钟时，订单达到关闭条件，但是定时任务未执行，所以不执行；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当时间来到第60分钟时，开始执行我们的订单关闭操作，而此时，误差达到25分钟。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经此种种，我们需要舍弃该方式。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;延时队列&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了满足领导的需求，我便将手伸向了消息队列：&lt;/span&gt;&lt;code&gt;&lt;span&gt;RabbitMQ&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。尽管它本身并没有提供延时队列的功能，但是我们可以利用它的存活时间和死信交换机的特性来间接实现。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先我们先来简单介绍下什么是存活时间？什么是死信交换机？&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;存活时间&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;存活时间的全拼是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Time To Live&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，简称 &lt;/span&gt;&lt;code&gt;&lt;span&gt;TTL&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。它既支持对消息本身进行设置（延迟队列的关键），又支持对队列进行设置（该队列中所有消息存在相同的过期时间）。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对消息本身进行设置：即使消息过期，也不会马上从队列中抹去，因为每条消息是否过期是在即将投递到消费者之前判定的；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对队列进行设置：一旦消息过期，就会从队列中抹去；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果同时使用这两种方法，那么以过期时间&lt;strong&gt;小&lt;/strong&gt;的那个数值为准。当消息达到过期时间还没有被消费，那么该消息就“死了”，我们把它称为 &lt;strong&gt;死信&lt;/strong&gt; 消息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;消息变为死信的条件：&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息被拒绝（&lt;/span&gt;&lt;code&gt;&lt;span&gt;basic.reject/basic.nack&lt;/span&gt;&lt;/code&gt;&lt;span&gt;），并且&lt;/span&gt;&lt;code&gt;&lt;span&gt;requeue=false&lt;/span&gt;&lt;/code&gt;&lt;span&gt;;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的过期时间到期了；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列达到最大长度；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;队列设置注意事项&lt;/strong&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列中该属性的设置要在第一次声明队列的时候设置才有效，如果队列一开始已存在且没有这个属性，则要删掉队列再重新声明才可以；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;队列的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ttl&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 只能被设置为某个固定的值，一旦设置后则不能更改，否则会抛出异常；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;死信交换机&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;死信交换机全拼&lt;/span&gt;&lt;code&gt;&lt;span&gt;Dead-Letter-Exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，简称&lt;/span&gt;&lt;code&gt;&lt;span&gt;DLX&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当消息在一个队列中变成死信之后，如果这个消息所在的队列设置了&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;参数，那么它会被发送到&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;对应值的交换机上，这个交换机就称之为死信交换机，与这个死信交换器绑定的队列就是死信队列。&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：出现死信之后将死信重新发送到指定交换机；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;&lt;span&gt;x-dead-letter-routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：出现死信之后将死信重新按照指定的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;发送，如果不设置默认使用消息本身的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;死信队列与普通队列的区别就是它的&lt;/span&gt;&lt;code&gt;&lt;span&gt;RoutingKey&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;Exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;需要作为参数，绑定到正常的队列上。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;实战教学&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先来张图感受下我们的整体思路&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.374845869297164&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCE0loXeQPC28TnUrUbzsuDsw8V3KgiarRn6JHic9U61mOu0XnmrkiajzK9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;811&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生产者发送带有 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ttl&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的消息放入交换机路由到延时队列中；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在延时队列中绑定死信交换机与死信转发的&lt;/span&gt;&lt;code&gt;&lt;span&gt;routing-key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等延时队列中的消息达到延时时间之后变成死信转发到死信交换机并路由到死信队列中；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最后供消费者消费。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们在&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI5MDg2NjEzNA==&amp;amp;mid=2247488055&amp;amp;idx=1&amp;amp;sn=6cc16652a669318a020ca1a8c474192a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;上文&lt;/span&gt;&lt;/a&gt;&lt;span&gt;的基础上进行代码实现：&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;配置类&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayQueueRabbitConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_QUEUE = &lt;span&gt;&quot;queue.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_EXCHANGE = &lt;span&gt;&quot;exchange.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DLX_ROUTING_KEY = &lt;span&gt;&quot;routingkey.dlx&quot;&lt;/span&gt;;&lt;span&gt;//死信队列与死信交换机绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_QUEUE = &lt;span&gt;&quot;queue.order&quot;&lt;/span&gt;;&lt;span&gt;//订单的延时队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_EXCHANGE = &lt;span&gt;&quot;exchange.order&quot;&lt;/span&gt;;&lt;span&gt;//订单交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ORDER_ROUTING_KEY = &lt;span&gt;&quot;routingkey.order&quot;&lt;/span&gt;;&lt;span&gt;//延时队列与订单交换机绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;/**&lt;br/&gt;     * 定义死信队列&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;dlxQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(DLX_QUEUE,&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义死信交换机&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; DirectExchange &lt;span&gt;dlxExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DirectExchange(DLX_EXCHANGE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 死信队列和死信交换机绑定&lt;br/&gt;     * 设置路由键：routingkey.dlx&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;Binding &lt;span&gt;bindingDLX&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(dlxQueue()).to(dlxExchange()).with(DLX_ROUTING_KEY);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 订单延时队列&lt;br/&gt;     * 设置队列里的死信转发到的DLX名称&lt;br/&gt;     * 设置死信在转发时携带的 routing-key 名称&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;orderQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; params = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;        params.put(&lt;span&gt;&quot;x-dead-letter-exchange&quot;&lt;/span&gt;, DLX_EXCHANGE);&lt;br/&gt;        params.put(&lt;span&gt;&quot;x-dead-letter-routing-key&quot;&lt;/span&gt;, DLX_ROUTING_KEY);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(ORDER_QUEUE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, params);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 订单交换机&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; DirectExchange &lt;span&gt;orderExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; DirectExchange(ORDER_EXCHANGE, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 把订单队列和订单交换机绑定在一起&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Binding &lt;span&gt;orderBinding&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(orderQueue()).to(orderExchange()).with(ORDER_ROUTING_KEY);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;发送消息&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/order&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OrderSendMessageController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RabbitTemplate rabbitTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendMessage&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        String delayTime = &lt;span&gt;&quot;10000&quot;&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;//将消息携带路由键值&lt;/span&gt;&lt;br/&gt;        rabbitTemplate.convertAndSend(DelayQueueRabbitConfig.ORDER_EXCHANGE, DelayQueueRabbitConfig.ORDER_ROUTING_KEY,&lt;br/&gt;                &lt;span&gt;&quot;发送消息！&quot;&lt;/span&gt;,message-&amp;gt;{&lt;br/&gt;            message.getMessageProperties().setExpiration(delayTime);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;        });&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;消费消息&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RabbitListener&lt;/span&gt;(queues = DelayQueueRabbitConfig.DLX_QUEUE)&lt;span&gt;//监听队列名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OrderMQReciever&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RabbitHandler&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;OrderMQReciever接收到的消息是：&quot;&lt;/span&gt;+ message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;测试&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;通过调用接口，发现10秒之后才会消费消息&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5983066792097836&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCEG8vmeygPQIP7Rib8hn1icMs8GmyzFcicTkxV2MtdW5RBMfJyl5eR71IGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1063&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;问题升级&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于开发环境和测试环境使用的是同一个交换机和队列，所以发送的延时时间都是30分钟。但是为了在测试环境让测试同学方便测试，故手动将测试环境的时间改为了1分钟。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;问题复现&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着问题就来了：延时时间为1分钟的消息并没有立即被消费，而是等30分钟的消息被消费完之后才被消费了。至于原因，我们下边再分析，先用代码来给大家复现下该问题。&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendManyMessage&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendManyMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡10秒&quot;&lt;/span&gt;,&lt;span&gt;10000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡2秒&quot;&lt;/span&gt;,&lt;span&gt;2000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    send(&lt;span&gt;&quot;延迟消息睡5秒&quot;&lt;/span&gt;,&lt;span&gt;5000&lt;/span&gt;+&lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(String msg, String delayTime)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; rabbitTemplate.convertAndSend(DelayQueueRabbitConfig.ORDER_EXCHANGE, &lt;br/&gt;                                  DelayQueueRabbitConfig.ORDER_ROUTING_KEY,&lt;br/&gt;                                  msg,message-&amp;gt;{&lt;br/&gt;                                      message.getMessageProperties().setExpiration(delayTime);&lt;br/&gt;                                      &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;                                  });&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;执行结果如下：&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;OrderMQReciever接收到的消息是：延迟消息睡10秒&lt;br/&gt;OrderMQReciever接收到的消息是：延迟消息睡2秒&lt;br/&gt;OrderMQReciever接收到的消息是：延迟消息睡5秒&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;原因就是延时队列也满足队列先进先出的特征，当10秒的消息未出队列时，后边的消息不能顺利出队，造成后边的消息阻塞了，未能达到精准延时。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;问题解决&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们可以利用&lt;/span&gt;&lt;code&gt;&lt;span&gt;x-delay-message&lt;/span&gt;&lt;/code&gt;&lt;span&gt;插件来解决该问题&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;消息的延迟范围是 Delay &amp;gt; 0, Delay =&amp;lt; ?ERL_MAX_T（在 Erlang 中可以被设置的范围为 (2^32)-1 毫秒）&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.36414253897550114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCENGwdYXIvwc0Kvm0vibuTsFyKVzfIEyj1WcChtIDX8XYo8773s0KF5Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;898&quot;/&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生产者发送消息到交换机时，并不会立即进入，而是先将消息持久化到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Mnesia&lt;/span&gt;&lt;/code&gt;&lt;span&gt;（一个分布式数据库管理系统）；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;插件将会尝试确认消息是否过期；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果消息过期，消息会通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;x-delayed-type&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型标记的交换机投递至目标队列，供消费者消费；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;实践&lt;/h4&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;官网下载：https://www.rabbitmq.com/community-plugins.html&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我这边使用的是&lt;/span&gt;&lt;code&gt;&lt;span&gt;v3.8.0.ez&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，将文件下载下来放到服务器的&lt;/span&gt;&lt;code&gt;&lt;span&gt;/usr/local/soft/rabbitmq_server-3.7.14/plugins&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 路径下，执行&lt;/span&gt;&lt;code&gt;&lt;span&gt;rabbitmq-plugins enable rabbitmq_delayed_message_exchange&lt;/span&gt;&lt;/code&gt;&lt;span&gt;命令即可。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26819541375872386&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCETZBEmlZiatJXPu4JGnRsb3Vnm0c6yckujsjVMvcxbAv5xnsMQWic8kgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1003&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7257257257257257&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPnah5VLYRMDTIkiaCwVhHCE9Uu2Pr4GicwibP0bRibP3PiaAb9FPu9Fk58icEcsSEkZOCw9hRUa2Y2uGlA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;出现如图所示，代表安装成功。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;配置类&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;XDelayedMessageConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DIRECT_QUEUE = &lt;span&gt;&quot;queue.direct&quot;&lt;/span&gt;;&lt;span&gt;//队列&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String DELAYED_EXCHANGE = &lt;span&gt;&quot;exchange.delayed&quot;&lt;/span&gt;;&lt;span&gt;//延迟交换机&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String ROUTING_KEY = &lt;span&gt;&quot;routingkey.bind&quot;&lt;/span&gt;;&lt;span&gt;//绑定的routing-key&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义队列&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Queue &lt;span&gt;directQueue&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Queue(DIRECT_QUEUE,&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 定义延迟交换机&lt;br/&gt;     * args:根据该参数进行灵活路由，设置为“direct”，意味着该插件具有与直连交换机具有相同的路由行为，&lt;br/&gt;     * 如果想要不同的路由行为，可以更换现有的交换类型如：“topic”&lt;br/&gt;     * 交换机类型为 x-delayed-message&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CustomExchange &lt;span&gt;delayedExchange&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        Map&amp;lt;String, Object&amp;gt; args = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;();&lt;br/&gt;        args.put(&lt;span&gt;&quot;x-delayed-type&quot;&lt;/span&gt;, &lt;span&gt;&quot;direct&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CustomExchange(DELAYED_EXCHANGE, &lt;span&gt;&quot;x-delayed-message&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, args);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 队列和延迟交换机绑定&lt;br/&gt;     **/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Binding &lt;span&gt;orderBinding&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; BindingBuilder.bind(directQueue()).to(delayedExchange()).with(ROUTING_KEY).noargs();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;发送消息&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;/delayed&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayedSendMessageController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RabbitTemplate rabbitTemplate;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/sendManyMessage&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;sendManyMessage&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡10秒&quot;&lt;/span&gt;,&lt;span&gt;10000&lt;/span&gt;);&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡2秒&quot;&lt;/span&gt;,&lt;span&gt;2000&lt;/span&gt;);&lt;br/&gt;        send(&lt;span&gt;&quot;延迟消息睡5秒&quot;&lt;/span&gt;,&lt;span&gt;5000&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;ok&quot;&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;send&lt;/span&gt;&lt;span&gt;(String msg, Integer delayTime)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;//将消息携带路由键值&lt;/span&gt;&lt;br/&gt;        rabbitTemplate.convertAndSend(&lt;br/&gt;                XDelayedMessageConfig.DELAYED_EXCHANGE,&lt;br/&gt;                XDelayedMessageConfig.ROUTING_KEY,&lt;br/&gt;                msg,&lt;br/&gt;                message-&amp;gt;{&lt;br/&gt;                    message.getMessageProperties().setDelay(delayTime);&lt;br/&gt;                    &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;                });&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;消费消息&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RabbitListener&lt;/span&gt;(queues = XDelayedMessageConfig.DIRECT_QUEUE)&lt;span&gt;//监听队列名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DelayedMQReciever&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@RabbitHandler&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;process&lt;/span&gt;&lt;span&gt;(String message)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        System.out.println(&lt;span&gt;&quot;DelayedMQReciever接收到的消息是：&quot;&lt;/span&gt;+ message);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;DelayedMQReciever接收到的消息是：延迟消息睡2秒&lt;br/&gt;DelayedMQReciever接收到的消息是：延迟消息睡5秒&lt;br/&gt;DelayedMQReciever接收到的消息是：延迟消息睡10秒&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这样我们的问题就顺利解决了。&lt;/span&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;局限性&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;延迟的消息存储在一个&lt;/span&gt;&lt;code&gt;&lt;span&gt;Mnesia&lt;/span&gt;&lt;/code&gt;&lt;span&gt;表中，当前节点上只有一个磁盘副本，它们将在节点重启后存活。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然触发计划交付的计时器不会持久化，但它将在节点启动时的插件激活期间重新初始化。显然，集群中只有一个预定消息的副本意味着丢失该节点或禁用其上的插件将丢失驻留在该节点上的消息。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;该插件的当前设计并不适合延迟消息数量较多的场景（如数万条或数百万条），另外该插件的一个可变性来源是依赖于 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Erlang&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 计时器，在系统中使用了一定数量的长时间计时器之后，它们开始争用调度程序资源，并且时间漂移不断累积。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>18fccfd84b3a9c462e8757bca00acd84</guid>
<title>通用接口设计准则</title>
<link>https://toutiao.io/k/sk2qg0s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p data-source-line=&quot;1&quot;&gt;&lt;span&gt;接口设计作为软件设计的一部分，那些通用的软件设计准则对它同样适用。&lt;/span&gt;&lt;/p&gt;&lt;ol data-source-line=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;开闭原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;5&quot;&gt;&lt;span&gt;一个软件实体应当对扩展开放，对修改关闭，即使这个实体可以在不被修改的前提下被扩展。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;2&quot; data-source-line=&quot;7&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;单一职责原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;9&quot;&gt;&lt;span&gt;一个实体应该只有一个引起它变化的原因。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;3&quot; data-source-line=&quot;11&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;里氏替换原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;13&quot;&gt;&lt;span&gt;一个软件实体如果使用的是一个基类的话，那么一定适用于其子类，但反过来不成立。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;4&quot; data-source-line=&quot;15&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;依赖倒置原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;17&quot;&gt;&lt;span&gt;抽象不应该依赖细节，细节应该依赖抽象。高层模块不应该依赖低层模块，两者都应该依赖其抽象。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;5&quot; data-source-line=&quot;19&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口隔离原则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-source-line=&quot;21&quot;&gt;&lt;p&gt;&lt;span&gt;这里的接口是指用interface关键字定义的接口。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-source-line=&quot;23&quot;&gt;&lt;span&gt;建立单一接口，不要建立臃肿庞大的接口接口，尽量细化，同时接口中的方法尽量少。&lt;/span&gt;&lt;/p&gt;&lt;ol start=&quot;6&quot; data-source-line=&quot;25&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;迪米特法则&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-source-line=&quot;27&quot;&gt;&lt;span&gt;一个对象应该对其他对象保持最少的了解，它只需要知道如何调用其他对象的公用方法就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;29&quot;&gt;&lt;span&gt;除了这些通用的设计准则外，接口设计也有一些具有接口特色的设计准则，比如：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;39&quot;&gt;&lt;span&gt;这正是：&lt;/span&gt;&lt;/p&gt;&lt;p data-source-line=&quot;41&quot;&gt;&lt;strong&gt;&lt;span&gt;接口设计要准则，六大准则需琢磨&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-source-line=&quot;43&quot;&gt;&lt;strong&gt;&lt;span&gt;考虑接口独特性，细分优化不落窠&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-source-line=&quot;48&quot;&gt;&lt;span&gt;参考文献：&lt;/span&gt;&lt;/p&gt;&lt;ol data-source-line=&quot;50&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;软件质量保证和管理，作者：朱少民，出版社：清华大学出版社&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口设计的16个原则 - Accident - 博客园&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;h6 data-source-line=&quot;58&quot;&gt;&lt;span&gt;作者简介：王小双，长期从事GJB5000推广、实施、评价、改进的工作，创建《软件工程之思》微信公众号，一直在《软件工程之思》分享GJB5000、CMMI、软件工程的知识和感悟。现致力于GJB5000咨询以及软件过程改进、软件工程能力提升的研究工作。&lt;/span&gt;&lt;/h6&gt;&lt;p&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                          
              &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                  &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                    &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                  &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                  &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                &lt;/div&gt;
                                              
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9643ba222d579c1a026b2b97686118f2</guid>
<title>码农周刊 - 每周五发送，欢迎订阅！打破「信息茧房」，不妨从这份Newsletter开始！</title>
<link>https://toutiao.io/k/t49l6og</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive global-focus-styles&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      




    
    








  



&lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;
  
  


  
      
  &lt;div class=&quot;clearfix container-xl px-3 px-md-4 px-lg-5 mt-4&quot;&gt;
    

&lt;div&gt;
  

  &lt;p class=&quot;d-none d-lg-block mt-6 mr-3 Popover top-0 right-0 color-shadow-medium col-3&quot;&gt;
    
  &lt;/p&gt;

  &lt;div id=&quot;spoof-warning&quot; class=&quot;mt-0 pb-3&quot; hidden=&quot;&quot; aria-hidden=&quot;&quot;&gt;
  &lt;div data-view-component=&quot;true&quot; class=&quot;flash flash-warn mt-0 clearfix&quot;&gt;
  
  
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert float-left mt-1&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;

      &lt;p class=&quot;overflow-hidden&quot;&gt;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&lt;/p&gt;


  
&lt;/div&gt;&lt;/div&gt;

  &lt;include-fragment src=&quot;/toutiaoio/weekly.manong.io/spoofed_commit_check/68a741beb43611fb8e6f78f2e9644f4dfa87cc40&quot; data-test-selector=&quot;spoofed-commit-check&quot;/&gt;

  &lt;/div&gt;

  &lt;/div&gt;


&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e1dbfab22ce59c96e1dbef9975a20675</guid>
<title>如何设计一个牛逼的消息队列？</title>
<link>https://toutiao.io/k/tyty975</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;点击上方蓝字“设为星标”&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU5MzY4NTMwOQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPZJL75J8t2KRIBkH377m1xmSasTiaZkbH1ALNn1tSgbMVyY7KnTpGO9A0Bnzh8IOYhmckmib9U5SgpQ/0?wx_fmt=png&quot; data-nickname=&quot;架构摆渡人&quot; data-alias=&quot;jiagoubaiduren&quot; data-signature=&quot;架构摆渡人，助你通往架构师方向的领路人。本号会定期分享架构相关的文章，专注于架构方向，关注我们，下一个架构师就是你。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;init&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，我是【架构摆渡人】，一只十年的程序猿。这是消息队列的第一篇文章，这个系列会给大家分享很多在实际工作中有用的经验，如果有收获，还请分享给更多的朋友。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过前面文章的学习，我们对消息队列的作用以及目前主流的一些消息队列中间件有了更深刻的了解。但是那些优秀的中间件都是别人写出来的，如果你在面试的时候，面试官问你：&lt;strong ql-global=&quot;true&quot;&gt;如果让你去设计一个消息队列，你打算怎么做？&lt;/strong&gt;如果你对消息队列了解的不彻底，那么很有可能被这个问题问懵掉，最后支支吾吾的说不知道。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;W4o6&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;服务端&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们从日常使用消息队列来入手，看设计一个消息队列到底要有哪些关键的点。当你要用消息队列的时候首先肯定是下载部署包，然后部署在服务器上。部署的这个程序我们就理解它是消息队列的服务端程序。在其他消息队列里面都有一个固定的名称：&lt;strong ql-global=&quot;true&quot;&gt;Broker&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;/&gt;&lt;p line=&quot;faJw&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么为什么需要Broker呢？&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p line=&quot;fOaR&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你的消息要发送出去，必然得有接收方，这个接收方就是Broker。Broker收到消息后不是直接转给消费方，而是要先落盘，存储起来。这样才能保证消息不丢失，不影响业务。同时还有一些其他的业务操作，比如消息的查询。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;P0o5&quot; ql-global=&quot;true&quot;&gt; &lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;存储&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p line=&quot;fOaR&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然说到存储，我们做业务的时候，都会用三方存储，也就是数据库，比如Mysql。但是MQ的存储，基本上都不会用三方存储，而是直接采用写磁盘的方式，也就是自己要设计要存储格式，自己写，自己解析等等一系列操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，也不是说不能用三方存储去实现，下篇文章我们再给大家讲讲如何用数据库做消息队列的存储。用数据库做存储其实也就是利用已有的实现来解决复杂度，涉及到底层存储这块，而且还要考虑高性能，其实对技术要求很高的。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;PCbI&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.43423423423423424&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRBkhnhWS3uQlxB6SgR4CsBWO6ItpYHbCVAmIhkJ8yIEWD2mFl13xMNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;像RocketMQ中的存储就涉及到CommitLog，ConsumeQueue，IndexFile等概念。最重要的是磁盘操作我们都知道很慢，而我们经常用的Mysql为了提高性能也是有一套很复杂的设计，比如redo log，buffer pool等，所以如果直接用数据库做存储，是不是相当于站在巨人的肩上去摘果实呢！&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;SiYP&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8792792792792793&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRwicuCI6yrgY3TQMX76YNTHL5Q68u4pYaGzLZdxyxz1MGD4Kftwlia1VQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gKCr&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;主从&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们设计了一个Broker，使用过程中万一这个Broker挂掉了怎么办？这里是不是得考虑下高可用性，所以Broker还需要有主从的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主节点的数据会同步给从节点，主节点出问题后，从节点可以顶上来提供服务，同时从节点也可以提供读的操作，为主节点减轻压力。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;avpt&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;TYr3&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.564638783269962&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaR2rPRpCR4IylN8Ywmib2q4h6uibI3Z4sc6VVyqH3792QT54BhcibKkn5VA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;boJ4&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;/&gt;&lt;h2 data-foldable-wrapper=&quot;&quot;&gt;&lt;section&gt;&lt;section data-mpa-template=&quot;t&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;分片&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个Broker是部署在某一台服务器上面，这个服务的磁盘存储空间是有限制的，不可能无限扩容。所以当消息量很大的时候，如果只是一直往机器的本地磁盘写数据，最终会写不进去的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在设计的时候还要考虑数据分片的场景，一个Topic的数据可以分成很多份进行存储，分别存储在不同的Broker上，这样当磁盘不够的时候，可以通过增加Broker的节点来扩容。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gJkd&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26463963963963966&quot; data-type=&quot;png&quot; data-w=&quot;1776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRTmbql9asUjoG5fo7qQ8ibXEEdXVucTRG8SH7D4pBNkj5BwNPKH4RCuQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;DWtB&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;那么问题来了，客户端写入的时候怎么知道这个Topic有哪些分片的存储信息，怎么知道有哪些Broker是在线的呢？这就要引入另一个设计：注册中心，在RocketMq中叫NameServer。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Xfne&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;注册中心&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NameServer叫注册中心或者路由中心都可以，本质上都一样。Broker启动的时候需要将自身的信息告诉NameServer，同时也要保持一个心跳检查，这样NameServer才能知道Broker当前是否处于正常状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;NameServer也要支持水平扩展，这样才能保证高可用性。既然要支持水平扩展，那么必然得无状态才行，但是NameServer本身就会存储一些数据，比如Broker信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里有几个实现方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候轮流向所有的NameServer进行注册，这样每个NameServer中都有全量的信息，即使某个节点挂了也不影响。RocketMQ就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gMly&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;8GDy&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRm0fUH449Aj4chUoyGD1NEIROAxRCFV6BDNmdbzWntdpAZt6lkUMF3A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;LCLN&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候只向某一台NameServer进行注册，立马返回，然后NameServer之间再进行相互同步，Eureka就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;rCkK&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRGdrc8MWicEbEjLZK2Slg4GpK9yCOOF5gx7ictBvVter1pibpxahPjus9A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;l8MK&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;7GkS&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Broker启动的时候只向某一台NameServer进行注册，NameServer会同步向其他的NameServer进行数据的同步操作，等待所有写入成功或者半数写入成功，然后再返回给客户端。Zookeeper就是使用的这种方式。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Q2Rt&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;igpH&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5210237659963437&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JReUsicfmEPb3vLbQElP7QbEpcbicykEiaRJt17FbZDb9wnm277Y9XzH4KwBUE4CAkuzOXqqtlsrbVricnc6JmWCww/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;h1 data-foldable-wrapper=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;SDK&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务端有了，还有一个必须要有的设计就是SDK了。应用程序通过依赖SDK就可以直接发送消息和消费消息。SDK同时可以考虑支持多语言，这样使用场景更广泛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDK主要是用来跟Broker通信的，所以对于网络通信我们也要选择一个合适的框架，比如Netty就非常合适，你要是觉得太难，直接用Http协议也可以，或者直接支持多协议，这些都是需要考虑的场景。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;sTst&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;后台管理&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;sTst&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台管理可以实现很多治理的工作，方便我们在使用消息队列的时候去排查各种问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心功能点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当前集群状态的查看&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的消费轨迹查询&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息的重复投递&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息生产的监控大盘&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;消息消费的监控大盘&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;SDK消费线程数的动态调整&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;等等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;DBSW&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-type=&quot;png&quot; data-w=&quot;42&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/5mcydv0qFicXzFsgOt7fWRZ6jAeG9zhzouNZNH0VxZKHibuVlq9U111AVmg9d4fDy86NhewMnfrSCKf3ia0EBf0zA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文只是简单的给大家介绍了下设计一个消息队列需要做哪些核心的工作，看起来就几个点而已。但是这几个点你要真正的去写代码实现难度是很大的。当然，我们其实也没必要自己去造轮子，因为你造了也不一定能比目前主流在用的好，但是整体的架构我们还是要了解的，至于细节就看自己需不需要深入了解了。比如消息存储那块，存储格式是怎样的？顺序写如何实现的？mmap技术如何应用的等等。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9cm1&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;gpHC&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;p&gt;&lt;strong ql-global=&quot;true&quot;&gt;&lt;span&gt;原创：架构摆渡人（公众号ID：jiagoubaiduren），欢迎分享，转载请保留出处。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;oVKf&quot; ql-global=&quot;true&quot;&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>bc083c9f6b5a718725a3c3e8262c9bac</guid>
<title>干货 | 字节跳动构建Data Catalog数据目录系统的实践（下）</title>
<link>https://toutiao.io/k/1wa5kiy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;字节跳动数据平台&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;byte-dataplatform&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;字节跳动数据平台团队，赋能字节跳动各业务线，降低数据应用的门槛为始，以建立数据驱动的智能化企业，赋能各行业的数字化转型，创造更大的社会价值为终。对内支持字节绝大多数业务线，对外发布了火山引擎品牌下的数据智能产品，服务行业企业客户。&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>