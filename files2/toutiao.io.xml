<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>984a75641ef8d8e8cd4dce1607c0d36a</guid>
<title>WICC 2020 重磅来袭！你关心的通信前沿技术都在这里！</title>
<link>https://toutiao.io/k/fwudviq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2413793103448276&quot; data-type=&quot;gif&quot; data-w=&quot;638&quot; data-backw=&quot;578&quot; data-backh=&quot;140&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AUS4TZmVkaEY7hxNFbvia18U3jCictMrnoZ3B9marXlrRpKImKoMDIKQSianz68PAaAEQEJUiaqtvsSMlEMblU62Dw/0?wx_fmt=gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AUS4TZmVkaEY7hxNFbvia18U3jCictMrnoZ3B9marXlrRpKImKoMDIKQSianz68PAaAEQEJUiaqtvsSMlEMblU62Dw/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;随着信息技术的不断发展，以云计算技术理念和服务模式所提供的 IP 通信能力，已经开始被广泛应用于互联网应用、企业级应用和新兴的智能硬件场景中。毋庸置疑的是，以云方式来实现话音、视频、消息等能力的运营、维护和管理，并以服务的方式向应用提供支持，将带来业务运营和产品体验上的显著升级和突破。&lt;/p&gt;&lt;p&gt;如今，面对开发者企业对通信的新诉求，通信的场景正由单一走向多样化。尤其是在新基建及 5G 技术的浪潮下，通信云将在提升互联网应用及企业通信开发和使用的效率、降低成本方面发挥出巨大的价值。不在变革中兴起，就在沉默中灭亡。&lt;span&gt;&lt;strong&gt;10 月 31 日，WICC 2020 全球互联网通信云大会&lt;/strong&gt;&lt;/span&gt;将于深圳前海华侨城 JW 万豪酒店拉开帷幕，本届大会将以“融汇通信，云启未来”为主题，探讨在新基建、5G 生态等国家发展战略中，通信云技术未来所发挥的价值与作用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;WICC 2020 将汇聚全球通信云技术领袖和行业领导企业，开展技术及行业的巅峰对话，同时现场将以多形式进行互动交流，为开发者提供更多的行业发展、前沿技术趋势，以及一线实践经验。&lt;/strong&gt;&lt;/span&gt;此外，在现场还将有丰富的礼品以及免费自助午宴值得期待~&lt;/p&gt;&lt;section&gt;&lt;span&gt;1&lt;/span&gt;作为一场通信领域的全球技术盛会，本次大会将有哪些重磅干货？&lt;/section&gt;&lt;p&gt;当前，通信云正在从传统通信迈向互联网通信时代，5G、云计算等技术的迅猛发展，更加速了这一变革。在这样的时代浪潮下，我们更需要洞悉未来趋势，把握机遇，明确发展方向。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 行业新风向&lt;/section&gt;&lt;p&gt;来自信息通信领域的专家将为你解读新基建下的国家通信云生态建设；华为 5G 通信技术专家将从前台通信到架构构建，详细剖析 5G 生态的关键技术挑战；还有通信领域投资人带你洞悉通信云产业的格局与未来发展趋势！&lt;/p&gt;&lt;p&gt;此外，本次大会将围绕 5G 下的新通信技术突破、实时音视频新应用场景和通信技术在业务架构中的演进三大主题展开讨论，并关注 VR、IoT、AI、国产化等热点领域下正在发生的通信技术变革，解读通信云技术在后疫情时代下的机遇与挑战。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 技术最解码&lt;/section&gt;&lt;p&gt;VR、车联网等新应用场景将成为 5G 大有可为之领域。在此次全球互联网通信云大会上，行业领军企业将揭秘 VR 沉浸式体验背后的低延迟通信技术。车联网优秀企业也将带来 5G 出行时代高互动性能实现路径的前沿探索与分享。与此同时，互联网巨头将现场解读实时音视频直播的架构建设，解读国产化统一操作系统架构下的多边技术融合，也会带来在亿级终端数据体量下的高并发架构的深度解析 ，从技术角度解码“架构”。&lt;/p&gt;&lt;section&gt;&lt;span/&gt; 实践出真知&lt;/section&gt;&lt;p&gt;随着网络基础设施的优化和底层技术的成熟，实时音视频在互联网通信中的地位逐渐提升，并能够与即时通讯结合发挥协同效应。实时音视频云服务可以满足用户对线上实时音频、视频交流的需求，除了高质量的音视频通话外，还可应用于视频会议、无接触服务、智能硬件等诸多场景中。对于用户来讲，极致的体验才是“王道”，而通信技术能力的优劣直接关系到用户的使用体验。&lt;strong&gt;本次大会将探讨实时音视频背后的场景实践及技术发展策略，并展现头部厂商在远程会议、电商、在线教育等领域为用户带来的全新体验与技术突破。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2&lt;/span&gt;参与这次全球技术盛会，你将收获什么？&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;洞见通信云领域的前沿趋势，了解通信技术在新基建、5G 生态下的机遇与挑战；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;技术领袖巅峰对话，为你照亮通信云的未来发展之路；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;深入了解音视频领域在多种新场景下的最新实践与技术应用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;丰富的开发者互动环节，现场多种形式的深度交流，让你与志同道合者分享经验与心得，一起进行思维碰撞；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;礼品丰厚，五星酒店免费自助午餐，现场福利不断，在提升认知、开拓思维和眼界的同时，尽情享受福利，把礼品带回家！&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;全球通信云时代已经到来！你还在等待什么？&lt;/p&gt;&lt;p&gt;点击&lt;span&gt;阅读原文&lt;/span&gt;或扫描下方&lt;span&gt;海报二维码&lt;/span&gt;，快速报名：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://wicc.rongcloud.cn/?utm_source=wechat&amp;amp;utm_term=wicc&quot; textvalue=&quot;你已选中了添加链接的内容&quot; tab=&quot;outerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;312&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AUS4TZmVkaHfKkvpcm0tzib5cDaVNSEuGCPHnEXibeOWvexFXvjhOgGlWavZyooyDfjaAn5Yp0fxGguh0EPg4enQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section label=&quot;Copyright © 2014 playhudong All Rights Reserved.&quot; donone=&quot;shifuMouseDownOther(&#x27;shifu_o_028&#x27;)&quot;&gt;&lt;img data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AUS4TZmVkaE7mKqiamP9Qc99skibiaMM3kqt2wASCXHaP3QmZGLQjlqrZibduRfqQPz7epcVaXgEtXt7HA8gbpL0bQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;section xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;section label=&quot;Copyleft 2018 iPaiban All lefts Reserved （本样式已做版权保护，未经正式授权不允许任何第三方编辑器、企业、个人使用，违者必纠）&quot; donone=&quot;shifuMouseDownPayStyle(&#x27;shifu_qmi_015&#x27;)&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;往 届 WICC 精 彩 推 荐 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;【PPT 下载】走进 WICC 2019 预见互联网通信云未来技术&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MTIyNTU2MQ==&amp;amp;mid=2247485988&amp;amp;idx=2&amp;amp;sn=d0f176b2d7fbcc0dad95d32a646519ea&amp;amp;chksm=e9f77e92de80f7845a20092af36408f70c88e3b9df5da01e533c21e4bc5e0bdb8f26db5c79a5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; tab=&quot;outerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;167&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;167&quot; data-ratio=&quot;0.28923076923076924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AUS4TZmVkaHfKkvpcm0tzib5cDaVNSEuGPVGfIp0miaY6DicTPerVpfBYdS67Y5UmOnEcmXz2KYVecib80dIYaOicNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;650&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一张图领略 WICC 精彩看点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MTIyNTU2MQ==&amp;amp;mid=2247485988&amp;amp;idx=3&amp;amp;sn=a14a851c979170ee3533ba9cd5e9b2c6&amp;amp;chksm=e9f77e92de80f78419b97f3c51486d75426ab7139df2355ba7e7a7e78eb69774e292ae7a0f3d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; tab=&quot;outerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;167&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;167&quot; data-ratio=&quot;0.28923076923076924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AUS4TZmVkaHfKkvpcm0tzib5cDaVNSEuGREKhkPAdKuvYkFEnwQzicw3PwHDZcnEiak3PKyuSqUicQS3oBCqAwSnrg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;650&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;WICC 2019：融云首次解密全球通信网底层基础架构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzI1MTIyNTU2MQ==&amp;amp;mid=2247486025&amp;amp;idx=1&amp;amp;sn=013248f0e94261c506a4c1da6f21b085&amp;amp;chksm=e9f77effde80f7e9599bb645dd51a3b15c2d94df2dc9e83ddb2dadd119ab404ab23d173275e3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; tab=&quot;outerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;167&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;167&quot; data-ratio=&quot;0.28923076923076924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AUS4TZmVkaHfKkvpcm0tzib5cDaVNSEuG7vzTo8OmNeadibSRDEzGauIMgianBvia0XPdE7MoqbQnLWEK9ichUdo9jA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;650&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5712050078247262&quot; data-type=&quot;gif&quot; data-w=&quot;639&quot; data-backw=&quot;578&quot; data-backh=&quot;330&quot; data-before-oversubscription-url=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AUS4TZmVkaEY7hxNFbvia18U3jCictMrnomGCQ2sj4hJTSLIzpPIE0GJHG7dAQAoG1icLhyichyMIctPn2T1yOszTg/0?wx_fmt=gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AUS4TZmVkaEY7hxNFbvia18U3jCictMrnomGCQ2sj4hJTSLIzpPIE0GJHG7dAQAoG1icLhyichyMIctPn2T1yOszTg/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;立刻免费报名&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;↓↓&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3b012eb88ab6c1013f0897c992dff091</guid>
<title>Rocket API：快速开发 API 接口</title>
<link>https://toutiao.io/k/2fawv0b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;




    


  

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;



  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    






  


  

&lt;div class=&quot;container-xl clearfix new-discussion-timeline px-3 px-md-4 px-lg-5&quot;&gt;
  &lt;div class=&quot;repository-content &quot;&gt;

    
      

  &lt;p class=&quot;d-none d-lg-block mt-6 mr-3 Popover top-0 right-0 box-shadow-medium col-3&quot;&gt;
    
  &lt;/p&gt;

    &lt;signup-prompt class=&quot;signup-prompt-bg rounded-1&quot; data-prompt=&quot;signup&quot; hidden=&quot;&quot;&gt;
    &lt;div class=&quot;signup-prompt p-4 text-center mb-4 rounded-1&quot;&gt;
      &lt;div class=&quot;position-relative&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;position-absolute top-0 right-0 btn-link link-gray&quot; data-action=&quot;click:signup-prompt#dismiss&quot; data-ga-click=&quot;(Logged out) Sign up prompt, clicked Dismiss, text:dismiss&quot;&gt;
          Dismiss
        &lt;/button&gt;
        &lt;h3 class=&quot;pt-2&quot;&gt;Join GitHub today&lt;/h3&gt;
        &lt;p class=&quot;col-6 mx-auto&quot;&gt;GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.&lt;/p&gt;
        &lt;a class=&quot;btn btn-primary&quot; data-ga-click=&quot;(Logged out) Sign up prompt, clicked Sign up, text:sign-up&quot; data-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;authentication.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;location_in_page&amp;quot;:&amp;quot;files signup prompt&amp;quot;,&amp;quot;repository_id&amp;quot;:null,&amp;quot;auth_type&amp;quot;:&amp;quot;SIGN_UP&amp;quot;,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/alenfive/rocket-api?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-hydro-click-hmac=&quot;7cd11a7a4b2a6cb90e648d0fbca487334e5f699944960fa382852a31343b1df3&quot; href=&quot;/join?source=prompt-code&amp;amp;source_repo=alenfive%2Frocket-api&quot;&gt;Sign up&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/signup-prompt&gt;



  &lt;div class=&quot;gutter-condensed gutter-lg flex-column flex-md-row d-flex&quot;&gt;

  &lt;div class=&quot;flex-shrink-0 col-12 col-md-9 mb-4 mb-md-0&quot;&gt;
    




      &lt;div class=&quot;file-navigation mb-3 d-flex flex-items-start&quot;&gt;
  



  

  &lt;p class=&quot;flex-auto&quot;/&gt;

  &lt;a class=&quot;btn ml-2&quot; data-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;FIND_FILE_BUTTON&amp;quot;,&amp;quot;repository_id&amp;quot;:265986110,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/alenfive/rocket-api?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-hydro-click-hmac=&quot;e72123bb7b6940f92645888c0c826b2b9e014137e3d151dc8197f44045c9c6d7&quot; data-ga-click=&quot;Repository, find file, location:repo overview&quot; data-hotkey=&quot;t&quot; data-pjax=&quot;true&quot; href=&quot;/alenfive/rocket-api/find/master&quot;&gt;
    Go to file
&lt;/a&gt;



    &lt;span class=&quot;d-none d-md-flex ml-2&quot;&gt;
        
&lt;get-repo&gt;
  &lt;details class=&quot;position-relative details-overlay details-reset&quot; data-action=&quot;toggle:get-repo#onDetailsToggle&quot;&gt;
    &lt;summary class=&quot;btn btn-primary&quot; data-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;repository_id&amp;quot;:265986110,&amp;quot;target&amp;quot;:&amp;quot;CLONE_OR_DOWNLOAD_BUTTON&amp;quot;,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/alenfive/rocket-api?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-hydro-click-hmac=&quot;82e62dd13e2fca9a6a393435f636528992c4d46e16055c28f567315fe1cb167d&quot;&gt;
      &lt;svg class=&quot;octicon octicon-download mr-1&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.47 10.78a.75.75 0 001.06 0l3.75-3.75a.75.75 0 00-1.06-1.06L8.75 8.44V1.75a.75.75 0 00-1.5 0v6.69L4.78 5.97a.75.75 0 00-1.06 1.06l3.75 3.75zM3.75 13a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5z&quot;/&gt;&lt;/svg&gt;
      Code
      &lt;span class=&quot;dropdown-caret&quot;/&gt;
&lt;/summary&gt;    &lt;div class=&quot;position-relative&quot;&gt;
      &lt;div class=&quot;dropdown-menu dropdown-menu-sw p-0&quot;&gt;
        &lt;div data-target=&quot;get-repo.modal&quot;&gt;
          &lt;div class=&quot;border-bottom p-3&quot;&gt;
            &lt;a class=&quot;muted-link float-right tooltipped tooltipped-s&quot; href=&quot;https://docs.github.com/articles/which-remote-url-should-i-use&quot; target=&quot;_blank&quot; aria-label=&quot;Which remote URL should I use?&quot;&gt;
  &lt;svg class=&quot;octicon octicon-question&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm9 3a1 1 0 11-2 0 1 1 0 012 0zM6.92 6.085c.081-.16.19-.299.34-.398.145-.097.371-.187.74-.187.28 0 .553.087.738.225A.613.613 0 019 6.25c0 .177-.04.264-.077.318a.956.956 0 01-.277.245c-.076.051-.158.1-.258.161l-.007.004a7.728 7.728 0 00-.313.195 2.416 2.416 0 00-.692.661.75.75 0 001.248.832.956.956 0 01.276-.245 6.3 6.3 0 01.26-.16l.006-.004c.093-.057.204-.123.313-.195.222-.149.487-.355.692-.662.214-.32.329-.702.329-1.15 0-.76-.36-1.348-.863-1.725A2.76 2.76 0 008 4c-.631 0-1.155.16-1.572.438-.413.276-.68.638-.849.977a.75.75 0 101.342.67z&quot;/&gt;&lt;/svg&gt;
&lt;/a&gt;



&lt;tab-container&gt;

  

  &lt;div role=&quot;tabpanel&quot;&gt;
    

    &lt;p class=&quot;mt-2 mb-0 f6 text-gray&quot;&gt;
      Use Git or checkout with SVN using the web URL.
    &lt;/p&gt;
  &lt;/div&gt;


  
&lt;/tab-container&gt;

          &lt;/div&gt;
          
        &lt;/div&gt;

        

        

        &lt;div class=&quot;p-3&quot; data-targets=&quot;get-repo.platforms&quot; data-platform=&quot;xcode&quot; hidden=&quot;&quot;&gt;
          &lt;h4 class=&quot;lh-condensed mb-3&quot;&gt;Launching Xcode&lt;span class=&quot;AnimatedEllipsis&quot;/&gt;&lt;/h4&gt;
          &lt;p class=&quot;text-gray&quot;&gt;If nothing happens, &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;download Xcode&lt;/a&gt; and try again.&lt;/p&gt;
          &lt;button type=&quot;button&quot; class=&quot;btn-link&quot; data-action=&quot;click:get-repo#onDetailsToggle&quot;&gt;Go back&lt;/button&gt;
        &lt;/div&gt;

        

      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/details&gt;
&lt;/get-repo&gt;


      
    &lt;/span&gt;
&lt;/div&gt;


      

&lt;div class=&quot;Box mb-3&quot;&gt;
  
  &lt;h2 id=&quot;files&quot; class=&quot;sr-only&quot;&gt;Files&lt;/h2&gt;
  


    &lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/alenfive/rocket-api/tree/d3805925854b0c98e771cba947aa36b347c72c66&quot;&gt;Permalink&lt;/a&gt;

  &lt;div class=&quot;include-fragment-error flash flash-error flash-full py-2&quot;&gt;
  &lt;svg class=&quot;octicon octicon-alert&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;&lt;/svg&gt;&lt;p&gt;
  
    Failed to load latest commit information.

&lt;/p&gt;&lt;/div&gt;  &lt;div class=&quot;js-details-container Details&quot;&gt;
    &lt;div role=&quot;grid&quot; aria-labelledby=&quot;files&quot; class=&quot;Details-content--hidden-not-important js-navigation-container js-active-navigation-container d-md-block&quot; data-pjax=&quot;&quot;&gt;
      &lt;div class=&quot;sr-only&quot; role=&quot;row&quot;&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Type&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Name&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot; class=&quot;d-none d-md-block&quot;&gt;Latest commit message&lt;/p&gt;
        &lt;p role=&quot;columnheader&quot;&gt;Commit time&lt;/p&gt;
      &lt;/div&gt;

        
        
        
        
        
        
        
        
    &lt;/div&gt;
    &lt;p class=&quot;Details-content--shown Box-footer d-md-none p-0&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;d-block btn-link js-details-target width-full px-3 py-2&quot; aria-expanded=&quot;false&quot;&gt;
        View code
      &lt;/button&gt;
    &lt;/p&gt;
  &lt;/div&gt;




&lt;/div&gt;

  


&lt;/div&gt;
    &lt;div class=&quot;flex-shrink-0 col-12 col-md-3&quot;&gt;
            

      &lt;div class=&quot;BorderGrid BorderGrid--spacious&quot; data-pjax=&quot;&quot;&gt;
        &lt;div class=&quot;BorderGrid-row hide-sm hide-md&quot;&gt;
          &lt;div class=&quot;BorderGrid-cell&quot;&gt;
            &lt;h2 class=&quot;mb-3 h4&quot;&gt;About&lt;/h2&gt;

    &lt;p class=&quot;f4 mt-3 text-gray text-italic&quot;&gt;
      No description, website, or topics provided.
    &lt;/p&gt;


  &lt;h3 class=&quot;sr-only&quot;&gt;Resources&lt;/h3&gt;
  

  &lt;h3 class=&quot;sr-only&quot;&gt;License&lt;/h3&gt;
  

          &lt;/div&gt;
        &lt;/div&gt;
          
          
          
          
      &lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

        




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot;&gt;
    &lt;svg class=&quot;octicon octicon-alert&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg class=&quot;octicon octicon-x&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;


    
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      
    
    

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg class=&quot;octicon octicon-alert&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
  &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default text-gray-dark hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg class=&quot;octicon octicon-x&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

  


  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ef071c0211747bd9efd50fe77f2da0e5</guid>
<title>分布式事务精华总结篇，实打实的干货</title>
<link>https://toutiao.io/k/xdryz90</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f1b0a56258e969585edad1e500695315</guid>
<title>Go 使用标准库 net/http 包构建服务器</title>
<link>https://toutiao.io/k/ah8srmt</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.0374331550802138&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gf7zJ2NXUibEatLJbcDLrEklG7PpIJibibEZ243hQfTYAOnUKKO8WJGtNK0FtNOyibfohow3qklfpW5e7l6y8hXefA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;748&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;01&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;概念&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Go 语言中，使用标准库 net/http 可以很方便的构建服务器，只要调用 ListenAndServe 函数，并传入参数IP地址与端口组成的字符串和处理器（handler）即可。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;func ListenAndServe(addr string, &lt;span class=&quot;code-snippet__keyword&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Handler&lt;/span&gt;) &lt;span class=&quot;code-snippet__keyword&quot;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果 IP 地址与端口组成的字符串参数为空字符串，那么服务器默认使用 80 端口进行网络连接，如果处理器（handler）参数为 nil，那么服务器将使用默认多路复用器 DefaultServeMux。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;02&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;构建服务器&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;细心的读者可能会说，服务器配置信息除了 IP 地址和端口之外，还有很多其它配置信息，应该怎么配置给服务器呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Go 语言为我们提供了一个结构体 Server，其中包含了很多对服务器的其它配置，结构体 Server 的完整代码如下：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;type &lt;span class=&quot;code-snippet__type&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;Addr&lt;/span&gt;              string&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;Handler&lt;/span&gt;           &lt;span class=&quot;code-snippet__type&quot;&gt;Handler&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;TLSConfig&lt;/span&gt;         *tls.&lt;span class=&quot;code-snippet__type&quot;&gt;Config&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;ReadTimeout&lt;/span&gt;       time.&lt;span class=&quot;code-snippet__type&quot;&gt;Duration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;ReadHeaderTimeout&lt;/span&gt; time.&lt;span class=&quot;code-snippet__type&quot;&gt;Duration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;WriteTimeout&lt;/span&gt;      time.&lt;span class=&quot;code-snippet__type&quot;&gt;Duration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;IdleTimeout&lt;/span&gt;       time.&lt;span class=&quot;code-snippet__type&quot;&gt;Duration&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;MaxHeaderBytes&lt;/span&gt;    int&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;TLSNextProto&lt;/span&gt;      &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[string]&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(*Server, *tls.Conn, Handler)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;ConnState&lt;/span&gt;         &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(net.Conn, ConnState)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;ErrorLog&lt;/span&gt;          *log.&lt;span class=&quot;code-snippet__type&quot;&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;BaseContext&lt;/span&gt;       &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(net.Listener)&lt;/span&gt;&lt;/span&gt; context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__type&quot;&gt;ConnContext&lt;/span&gt;       &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(ctx context.Context, &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt; net.Conn)&lt;/span&gt;&lt;/span&gt; context.&lt;span class=&quot;code-snippet__type&quot;&gt;Context&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    inShutdown        atomicBool&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    disableKeepAlives int32&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    nextProtoOnce     sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Once&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    nextProtoErr      error&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    mu                sync.&lt;span class=&quot;code-snippet__type&quot;&gt;Mutex&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    listeners         &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[*net.&lt;span class=&quot;code-snippet__type&quot;&gt;Listener&lt;/span&gt;]&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    activeConn        &lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;[*conn]&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    doneChan          chan &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    onShutdown        []&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用结构体 Server 构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Handler: nil,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;03&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;接收 HTTP 请求&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Go 语言中，一个处理器就是一个拥有 ServeHTTP 方法的接口，这个 ServeHTTP 方法需要接收两个参数，第一个参数是一个 ResponseWriter 接口，&lt;span&gt;第二个参数是一个指向 Request 结构的指针。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;DefaultServeMux 默认多路复用器是多路复用器 ServeMux 结构的一个实例，ServeMux 也拥有 ServeHTTP 方法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;所以 DefaultServeMux 既是 ServeMux 结构的实例，也是处理器 Handler 结构的实例，因此 DefaultServeMux 不仅是一个多路复用器，还是一个处理器。&lt;span&gt;但是 DefaultServeMux 是一个特殊的处理器，它唯一要做的就是根据请求的 URL 将请求重定向到不同的处理器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自定义一个处理器，替代 DefaultServeMux。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; MyHandler &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(h *MyHandler)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintf(w, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;使用自定义处理器，配置服务器。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;handler&lt;/span&gt; := MyHandler{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;server&lt;/span&gt; := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;Handler&lt;/span&gt;: &amp;amp;&lt;span class=&quot;code-snippet__keyword&quot;&gt;handler&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;细心的读者可能已经发现，使用自定义的处理器与服务器进行绑定，启动服务器，不管浏览器访问什么地址，服务器返回的都是同样的响应 Hello World!&lt;/p&gt;&lt;p&gt;&lt;br/&gt;这是因为使用自定义的处理器替代了默认多路复用器 DefaultServeMux，服务器不会再通过 URL 匹配来将请求路由至不同的处理器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;怎么解决这个问题呢？&lt;/p&gt;&lt;p&gt;使用多个处理器。&lt;span&gt;使用 http 包的 Handle 函数绑定到 DefaultServeMux。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;为了使用多个处理器去处理不同的 URL，我们不再在 Serve 结构&lt;/p&gt;&lt;p&gt;的 Handler 字段中指定处理器，而是让服务器使用默认多路复用器 DefaultServeMux，&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后通过 http.Handle 函数将处理器绑定到 DefaultServeMux。&lt;/span&gt;&lt;span&gt;http 包的 Handle 函数实际上是 ServeMux 结构的方法，为了操作便利而创建的函数，调用它们等同于调用 DefaultServeMux 的某个方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;例如，调用 &lt;/span&gt;&lt;span&gt;http.Handle，实际上就是在调用 DefaultServeMux 的 Handle 方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;p&gt;编写多个处理器，处理请求&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; FirstHandler &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(f *FirstHandler)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintf(w, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;FirstHandler&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;type&lt;/span&gt; SecondHandler &lt;span class=&quot;code-snippet__keyword&quot;&gt;struct&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__params&quot;&gt;(s *SecondHandler)&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintf(w, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;SecondHandler&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;first := FirstHandler{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;second := SecondHandler{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.Handle(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/first&quot;&lt;/span&gt;, &amp;amp;first)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.Handle(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/second&quot;&lt;/span&gt;, &amp;amp;second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;以上我们通过使用 http.Handle 函数，将一个创建的处理器绑定到一个 URL 上，实现使用多个处理器处理不同的 URL。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;现在，可能有读者会说，创建多个处理器来处理多个请求，这也太不优雅了，有没有其它方式呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;先告诉大家答案，有其它方式，使用处理器函数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;http.HandleFunc 函数将自定义函数转换成一个处理器 Handler，并将它与 DefaultServeMux 进行绑定，从而简化创建并绑定 Handler 的工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;p&gt;编写多个函数，处理请求&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintf&lt;/span&gt;(w, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;func first&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintf&lt;/span&gt;(w, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;func second&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// http.HandleFunc&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/first&quot;&lt;/span&gt;, first)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/second&quot;&lt;/span&gt;, second)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用处理器函数和使用处理器，都可以实现根据请求的 URL 将请求重定向到不同的处理器，而且处理器函数比处理器的代码更为简洁。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;但是也不是完全使用处理器函数代替处理器，因为如果代码已经包含了某个接口或某种类型，我们只需为它们添加 ServeHTTP 方法就可以将它们转变为处理器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;ServeMux 无法使用变量实现 URL 模式匹配，使用三方多路复用器 httprouter 包可以实现 URL 模式匹配。&lt;span&gt;此外，还有一个非常优秀的三方多路复用器，gorilla/mux。&lt;/span&gt;&lt;span&gt;篇幅限制，这里就不展开了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;04&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;处理 HTTP 请求&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;客户端和服务器端传递的消息，我们称之为 HTTP 报文，有两种类型，分别是 HTTP 请求和 HTTP 响应，并且这两种类型的结构相同。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;请求行/响应行&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;零个/多个首部&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个空行&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一个可选的报文主体&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Go 语言中，标准库 net/http 提供了一系列用于表示 HTTP 报文的结构体。其中，Request 结构体代表 HTTP 请求报文。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Request 结构体的组成部分：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;请求/响应的首部都是使用 Header 类型描述，Header 类型使用一个 map 来表示 HTTP 首部中的多个键值对。Header 类型有 4 个基本方法，这些方法可以根据给定的键执行添加、删除、获取和设置等操作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取请求首部的示例代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;headers&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ResponseWriter&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;r&lt;/span&gt; *&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Request&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attribute&quot;&gt;h &lt;/span&gt;:= r.Header&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Fprintln&lt;/span&gt;(w, h)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  h2 := r.Header[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Fprintln&lt;/span&gt;(w, h2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  h3 := r.Header.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Get&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Fprintln&lt;/span&gt;(w, h3)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/headers&quot;&lt;/span&gt;, headers)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代码中，通过 r.Header 获取所有首部，通过 r.Header[&quot;key&quot;] 获取指定的首部，直接引用 Header 获取的是一个字符串切片，如果我们需要获取字符串格式的首部值，可以使用 r.Header.Get(&quot;key&quot;) 方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;请求/响应的主体都是用 Request 结构体的 Body 字段表示，这个字段是一个io.ReadCloser 接口，该接口即包含了 Reader 接口，也包含了 Closer 接口。其中 Reader 接口有 Read 方法，该方法接收一个字节切片参数，返回一个被读取内容的字节数和一个可选的错误。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取请求主体中的数据的代码：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;body&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ResponseWriter&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;r&lt;/span&gt; *&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Request&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attribute&quot;&gt;len &lt;/span&gt;:= r.ContentLength&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  body := &lt;span class=&quot;code-snippet__built_in&quot;&gt;make&lt;/span&gt;([]byte, len)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r.Body.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Read&lt;/span&gt;(body)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Fprintln&lt;/span&gt;(w, string(body))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/body&quot;&lt;/span&gt;, body)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;代码中，通过 r.ContentLength 方法获取主体数据的字节长度，然后根据字节长度创建一个字节数组，然后调用 Read 方法将主体数据读取到字节数组中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可能有的读者朋友们开始抱怨了，这也太麻烦了。别担心，Go 语言标准库net/http 提供了相关函数来满足用户对数据提取方面的需求，通过调用 Request 结构体提供的方法，可以将 URL、主体的数据提取到该结构体的 Form、PostForm 和 MultipartForm 等字段中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;p&gt;使用 Request 结构体提供的方法提取数据&lt;span&gt;（enctype 属性的值为&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getVal&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r.&lt;span class=&quot;code-snippet__type&quot;&gt;ParseForm&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;Form&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;PostForm&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;FormValue&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;username&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;PostFormValue&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;username&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 Request 结构体提供的方法&lt;/span&gt;&lt;span&gt;提取数据（enctype 属性的值为multipart/form-data&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getMultipart&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  r.&lt;span class=&quot;code-snippet__type&quot;&gt;ParseMultipartForm&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;Form&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;PostForm&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;MultipartForm&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;FormValue&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;username&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.&lt;span class=&quot;code-snippet__type&quot;&gt;Fprintln&lt;/span&gt;(w, r.&lt;span class=&quot;code-snippet__type&quot;&gt;PostFormValue&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;username&quot;&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/getVal&quot;&lt;/span&gt;, getVal)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/getMultipart&quot;&lt;/span&gt;, getMultipart)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用 Request 结构的方法获取表单数据：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;1. 调用 ParseForm 方法或者 ParseMultipartForm 方法，对请求进行语法分析。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;2. 取值：&lt;/p&gt;&lt;p&gt;r.Form，map 类型，键是字符串，值是字符串切片。&lt;/p&gt;&lt;p&gt;如果键同时存在表单和 URL，值包含表单值和 URL 值，并且表单值排在前面。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;r.PostForm，如果键同时存在表单和 URL，只取要表单的值。&lt;/p&gt;&lt;p&gt;只支持 application/x-www-form-urlencoded 编码。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;r.MultipartForm，支持 multipart/form-data 编码。&lt;/p&gt;&lt;p&gt;只取表单的值，不取 URL 的值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面提到的几个方法，可能有些读者朋友感觉比较繁琐，别担心，Request 结构体还提供了另外一些方法，FormValue &lt;span&gt;和 PostFormValue，&lt;/span&gt;&lt;span&gt;它们可以让用户更容易地获取表单中的键值对。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;FormValue 方法直接获取指定键的值，不需要在之前调用语法分析的方法。&lt;/p&gt;&lt;p&gt;如果键同时存在表单和 URL，只取表单的值。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;PostFormValue 方法只会取表单的值，不取 URL 的值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;给客户端发送响应&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;处理器通过 ResponseWriter 接口创建 HTTP 响应。ResponseWriter 接口有以下 3 个方法：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;p&gt;写主体：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;setVal&lt;/span&gt;(&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.ResponseWriter&lt;/span&gt;, &lt;span class=&quot;code-snippet__selector-tag&quot;&gt;r&lt;/span&gt; *&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.Request&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  &lt;span class=&quot;code-snippet__attribute&quot;&gt;str &lt;/span&gt;:= &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.&lt;span class=&quot;code-snippet__built_in&quot;&gt;WriteHeader&lt;/span&gt;(501) // 设置响应返回的状态码，必须在 Write 方法之前调用。&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.&lt;span class=&quot;code-snippet__built_in&quot;&gt;Write&lt;/span&gt;([]byte(str)) // 写入响应主体&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;写首部：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setHeader&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.&lt;span class=&quot;code-snippet__type&quot;&gt;Header&lt;/span&gt;().&lt;span class=&quot;code-snippet__type&quot;&gt;Set&lt;/span&gt;(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Location&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;https://www.baidu.com&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.&lt;span class=&quot;code-snippet__type&quot;&gt;WriteHeader&lt;/span&gt;(&lt;span class=&quot;code-snippet__number&quot;&gt;302&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/setVal&quot;&lt;/span&gt;, setVal)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/setHeader&quot;&lt;/span&gt;, setHeader)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;需要注意的是，&lt;span&gt;WriteHeader 方法执行完，不能再对首部写入，所以要提前对首部写入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;06&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Cookie&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于 Cookie 本身的内容，可以阅读我们之前的一篇文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247483895&amp;amp;idx=1&amp;amp;sn=f380337159998cc8b21ceb5d0956ba6b&amp;amp;chksm=9f81ab99a8f6228fc98a2dbc3b2dd426518ebfb3b216a8f1e1e595f9736e624fa73bd87f9398&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Gin 学习之 cookie 读写&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本篇文章，我们只演示一些如何使用标准库 net/http 操作 cookie，包括写 cookie、读 cookie 和删 cookie。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在 Go 语言中，使用 Cookie 结构体表示 cookie。Cookie 结构体完整字段：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Cookie struct {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Name&lt;/span&gt;       &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Value&lt;/span&gt;      &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Path&lt;/span&gt;       &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Domain&lt;/span&gt;     &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Expires&lt;/span&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;time.Time&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;RawExpires&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;MaxAge&lt;/span&gt;     &lt;span class=&quot;code-snippet__string&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Secure&lt;/span&gt;     &lt;span class=&quot;code-snippet__string&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;HttpOnly&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;SameSite&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;SameSite&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Raw&lt;/span&gt;        &lt;span class=&quot;code-snippet__string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__attr&quot;&gt;Unparsed&lt;/span&gt;   &lt;span class=&quot;code-snippet__string&quot;&gt;[]string&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通过代码，我们演示如何使用标准库 net/http 操作 cookie。&lt;/p&gt;&lt;p&gt;示例代码：&lt;/p&gt;&lt;p&gt;操作 cookie：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;go&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setCookie&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c1 := http.Cookie{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Name:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;val1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c2 := http.Cookie{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Name:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;val2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c3 := http.Cookie{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Name:  &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Value: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;val3&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.Header().Set(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Set-Cookie&quot;&lt;/span&gt;, c1.String())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  w.Header().Add(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Set-Cookie&quot;&lt;/span&gt;, c2.String())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  http.SetCookie(w, &amp;amp;c3) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;getCookie&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintln(w, r.Header[&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c1, _ := r.Cookie(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintln(w, c1)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  fmt.Fprintln(w, r.Cookies())&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;delCookie&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  c2 := http.Cookie{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Name:    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c2&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MaxAge:  &lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Expires: time.Unix(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  http.SetCookie(w, &amp;amp;c2)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;构建服务器：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;makefile&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server := http.Server{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Addr: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;127.0.0.1:8080&quot;&lt;/span&gt;,&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/setCookie&quot;&lt;/span&gt;, setCookie)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/getCookie&quot;&lt;/span&gt;, getCookie)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;http.HandleFunc(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/delCookie&quot;&lt;/span&gt;, delCookie)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;server.ListenAndServe()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5405405405405406&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/gf7zJ2NXUibHrBBNc13c09hsck0LRuBWagGRXUlOPE7Nto7kj7M5peJTpdZlgatE5HwOkQibCPDOjUC0FfcboIbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;370&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推荐阅读：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==&amp;amp;mid=2247483931&amp;amp;idx=1&amp;amp;sn=1f9ab3dd100b9c300175f0db6b6fb31b&amp;amp;chksm=9f81a875a8f62163d1ced8c835e0e3dbf516908a4dd870c44cc245086979d14acddf09579af1&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Go 使用三方 Redis 包操作 Redis&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>63f36a30202e37a6ca0335373b873597</guid>
<title>[译] VueJS 中更好的组件组合方式</title>
<link>https://toutiao.io/k/algd8ut</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;原文地址：https://itnext.io/better-composition-in-vue-fd35b9fe9c79&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;原文作者：&lt;span&gt;👉&lt;/span&gt;Francesco Vitullo&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;译文出自：&lt;span&gt;👉&lt;/span&gt;掘金翻译计划&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;本文永久链接：https://github.com/xitu/gold-miner/blob/master/article/2020/better-composition-in-vue.md&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;校对者：&lt;span&gt;👉&lt;/span&gt;Gesj-yean, &lt;span&gt;👉&lt;/span&gt;dupanpan&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;383&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aqicFmRvjIbiayf0KbLeBiaQOwLxSYzMfI2pfAEibOssdC0etlKPOfSm7YcTn6P6sVibY3uqQhqWJia1XWxZIXalTD3g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;VueJS&lt;/strong&gt; 中有一些组合组件并复用逻辑的方法。在本文中，我将展示一种在 Vuejs (2.* 及 3.*) 中改进组合方式的方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的确欣赏最近的 &lt;strong&gt;Composition API&lt;/strong&gt; 提案，但我认为视野还可以更开阔。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面，你可以看到一个实现了一种常规用例（从远端获取一个简单的数据并将其搭配不同的转场效果显示出来）的组件，尽管大部分逻辑及其相关的模版、数据和其它变量等与出现在其它地方或组件中的相同逻辑并无不同，它们还是出现在了该组件中。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;loading&quot;&amp;gt; Loading... &amp;lt;/div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;error&quot;&amp;gt; An Error occured, please try again&amp;lt;/div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;hasData&quot;&amp;gt; {{ data }} &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script&amp;gt;&lt;br/&gt;    export default {&lt;br/&gt;        data() {&lt;br/&gt;            return {&lt;br/&gt;                loading: false,&lt;br/&gt;                error: false,&lt;br/&gt;                data: {}&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        methods: {&lt;br/&gt;            fetchData() {&lt;br/&gt;                this.loading = true;&lt;br/&gt;                setTimeout(() =&amp;gt; {&lt;br/&gt;                    this.data = { text: &#x27;example&#x27; };&lt;br/&gt;                    this.loading = false;&lt;br/&gt;                }, 4000);&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        computed: {&lt;br/&gt;            hasData() {&lt;br/&gt;                return this.data &amp;amp;&amp;amp; !!this.data.text;&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        mounted() {&lt;br/&gt;            this.fetchData();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该如何重构并改善这个组件呢？让我们一步步地让其更易读且更容易复用。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Vue Composition API&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感谢新的 Vue Composition API，使得我们可以在不丢失由 Vue 组件提供的响应性或其它特性的前提下，抽出一些逻辑以来复用它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式有助于组织代码、让组件更易读，并有助于降低总体复杂度。作为一种建议，我相信这些应该是重构巨大、复杂和混乱的组件时的首要之事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将抽取与获取数据有关的部分及相关的变量（&lt;strong&gt;loading、error&lt;/strong&gt; 等……），但我并不想谈论什么是 Composition API 以及其特性、优点和缺点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们来创建一个提供了获取数据必要功能及若干响应式变量的简单函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { reactive, toRefs, computed, Ref, ComputedRef } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;@vue/composition-api&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;interface&lt;/span&gt; ReceivedData {&lt;br/&gt;    text?: &lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;interface&lt;/span&gt; FetchState {&lt;br/&gt;    loading: &lt;span&gt;boolean&lt;/span&gt;,&lt;br/&gt;    error: &lt;span&gt;boolean&lt;/span&gt;,&lt;br/&gt;    data: ReceivedData&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;interface&lt;/span&gt; FetchDataVars {&lt;br/&gt;    loading: Ref&amp;lt;&lt;span&gt;boolean&lt;/span&gt;&amp;gt;;&lt;br/&gt;    error: Ref&amp;lt;&lt;span&gt;boolean&lt;/span&gt;&amp;gt;;&lt;br/&gt;    data: Ref&amp;lt;object&amp;gt;;&lt;br/&gt;    fetchData: &lt;span&gt;Function&lt;/span&gt;;&lt;br/&gt;    hasData: ComputedRef&amp;lt;&lt;span&gt;boolean&lt;/span&gt;&amp;gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; (): &lt;span&gt;&lt;span&gt;FetchDataVars&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; state = reactive&amp;lt;FetchState&amp;gt;({&lt;br/&gt;        loading: &lt;span&gt;true&lt;/span&gt;,&lt;br/&gt;        error: &lt;span&gt;false&lt;/span&gt;,&lt;br/&gt;        data: {}&lt;br/&gt;    });&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; fetchData = &lt;span&gt;async&lt;/span&gt; () =&amp;gt; {&lt;br/&gt;        state.loading = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        setTimeout(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;            state.data = { text: &lt;span&gt;&#x27;example&#x27;&lt;/span&gt; };&lt;br/&gt;            state.loading = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;        }, &lt;span&gt;4000&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; hasData = computed(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; state.data &amp;amp;&amp;amp; !!state.data.text)&lt;br/&gt;    &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;        ...toRefs(state),&lt;br/&gt;        fetchData,&lt;br/&gt;        hasData&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;新创建的函数现在返回了可被用于组件的一组响应式变量 (&lt;strong&gt;loading、error、data&lt;/strong&gt;，及 &lt;strong&gt;hasData&lt;/strong&gt;) 及一个用来执行数据获取任务的异步函数 (&lt;strong&gt;fetchData&lt;/strong&gt;，将会改变上述响应式变量) 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而后，来使用 Composition API 重构组件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;br/&gt;&amp;lt;div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;loading&quot;&amp;gt; Loading... &amp;lt;/div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;error&quot;&amp;gt; An Error occured, please try again&amp;lt;/div&amp;gt;&lt;br/&gt;    &amp;lt;div v-if=&quot;hasData&quot;&amp;gt; {{ data }} &amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;/template&amp;gt;&lt;br/&gt;&lt;br/&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;&lt;br/&gt;    import useFetchData from &#x27;../composables/use-fetch-data&#x27;;&lt;br/&gt;    import { defineComponent } from &#x27;@vue/composition-api&#x27;;&lt;br/&gt;&lt;br/&gt;    export default defineComponent({&lt;br/&gt;        setup() {&lt;br/&gt;            const { loading, error, data, fetchData, hasData } = useFetchData();&lt;br/&gt;            return {&lt;br/&gt;                loading,&lt;br/&gt;                error,&lt;br/&gt;                data, fetchData,&lt;br/&gt;                hasData&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        mounted() {&lt;br/&gt;            this.fetchData();&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如你所注意到的，我们的组件还包含了 setup 方法，由其调用 &lt;strong&gt;useFetchData&lt;/strong&gt; 函数，同时解构返回的变量和函数并将它们返回给组件实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这个例子中，我在 mounted 生命周期钩子中使用了 &lt;strong&gt;fetchData&lt;/strong&gt; 函数，但其实你可以在期望的任意位置调用它。无论何时，被该函数求值或改变的结果都会反映在组件中，因为它们都是响应式属性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;JSX 和 TSX&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在假设我们想要将获取的数据传递到一个内部组件中。借助 VueJS 有多种实现的方法，但我却想使用  &lt;strong&gt;TSX&lt;/strong&gt; (你若更喜欢 &lt;strong&gt;JSX&lt;/strong&gt; 也行) 来重构代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;script lang=&quot;tsx&quot;&amp;gt;&lt;br/&gt;    import useFetchData from &#x27;../composables/use-fetch-data&#x27;;&lt;br/&gt;    import { defineComponent } from &#x27;@vue/composition-api&#x27;;&lt;br/&gt;&lt;br/&gt;    export default defineComponent({&lt;br/&gt;        setup() {&lt;br/&gt;            const { loading, error, data, fetchData, hasData } = useFetchData();&lt;br/&gt;            return {&lt;br/&gt;                loading,&lt;br/&gt;                error,&lt;br/&gt;                data, fetchData,&lt;br/&gt;                hasData&lt;br/&gt;            }&lt;br/&gt;        },&lt;br/&gt;        mounted() {&lt;br/&gt;            this.fetchData();&lt;br/&gt;        },&lt;br/&gt;        render() {&lt;br/&gt;            return (&lt;br/&gt;                &amp;lt;div&amp;gt;&lt;br/&gt;                    { this.loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt; Loading ... &amp;lt;/div&amp;gt; }&lt;br/&gt;                    { this.error &amp;amp;&amp;amp; &amp;lt;div&amp;gt; An Error occured, please try again &amp;lt;/div&amp;gt; }&lt;br/&gt;                    { &amp;lt;div&amp;gt; { this.data } &amp;lt;/div&amp;gt; }&lt;br/&gt;                &amp;lt;/div&amp;gt;&lt;br/&gt;            )&lt;br/&gt;        }&lt;br/&gt;    });&lt;br/&gt;&amp;lt;/script&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我知道这看起来很像 React，但我相信这开启了以更好的方法优化组合方式的许多可能之门。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这其实很易懂，它完成了和模板同样的事情，但我们将 HTML 部分移入了 render 函数中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们尚未完成将数据传递进内部组件的任务，实际上我们像下面这样改进一点代码就行，也就是将所有东西导出成一个我们可复用的函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import useFetchData from &#x27;../composables/use-fetch-data&#x27;;&lt;br/&gt;import { defineComponent } from &#x27;@vue/composition-api&#x27;;&lt;br/&gt;&lt;br/&gt;export default () =&amp;gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        const { loading, error, data, fetchData, hasData } = useFetchData();&lt;br/&gt;        return {&lt;br/&gt;            loading,&lt;br/&gt;            error,&lt;br/&gt;            data, fetchData,&lt;br/&gt;            hasData&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;    mounted() {&lt;br/&gt;        this.fetchData();&lt;br/&gt;    },&lt;br/&gt;    render() {&lt;br/&gt;        return (&lt;br/&gt;            &amp;lt;div&amp;gt;&lt;br/&gt;                { this.loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt; Loading ... &amp;lt;/div&amp;gt; }&lt;br/&gt;                { this.error &amp;amp;&amp;amp; &amp;lt;div&amp;gt; An Error occured, please try again &amp;lt;/div&amp;gt; }&lt;br/&gt;                { &amp;lt;div&amp;gt; { this.data } &amp;lt;/div&amp;gt; }&lt;br/&gt;            &amp;lt;/div&amp;gt;&lt;br/&gt;        )&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们已经更上一层楼了，摆脱 &lt;strong&gt;SFC&lt;/strong&gt; (单文件组件 -- Single File Component 文件) 后我们就可以真正的改进组织方式了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在此阶段，我们使用 defineComponent 创建了一个使用 Composition API 的组件并依托 JSX/TSX 消除了模板部分。这种方式的妙处在于可以将一个组件视为一个函数并自如运用函数式编程范式（如一级函数、纯函数等等……）了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举例来说，render 函数也包含了一个显示数据的 div，但想象下若将一个组件作为刚才所导出函数的一个参数，并在返回的 JSX/TSX 中使用它（将响应/数据作为属性传递给组件）是如何的呢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看起来可能会是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import useFetchData from &#x27;../composables/use-fetch-data&#x27;;&lt;br/&gt;import { defineComponent } from &#x27;@vue/composition-api&#x27;;&lt;br/&gt;import { Component } from &#x27;vue&#x27;;&lt;br/&gt;&lt;br/&gt;export default (component: Component) =&amp;gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        const { loading, error, data, fetchData, hasData } = useFetchData();&lt;br/&gt;        return {&lt;br/&gt;            loading,&lt;br/&gt;            error,&lt;br/&gt;            data, fetchData,&lt;br/&gt;            hasData&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;    mounted() {&lt;br/&gt;        this.fetchData();&lt;br/&gt;    },&lt;br/&gt;    render() {&lt;br/&gt;        const injectedComponentProps = {&lt;br/&gt;            data: this.data&lt;br/&gt;        }&lt;br/&gt;        return (&lt;br/&gt;            &amp;lt;div&amp;gt;&lt;br/&gt;                { this.loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt; Loading ... &amp;lt;/div&amp;gt; }&lt;br/&gt;                { this.error &amp;amp;&amp;amp; &amp;lt;div&amp;gt; An Error occured, please try again &amp;lt;/div&amp;gt; }&lt;br/&gt;                &amp;lt;component props={ injectedComponentProps } /&amp;gt;&lt;br/&gt;            &amp;lt;/div&amp;gt;&lt;br/&gt;        )&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在我们正期待着将一个组件作为参数并在 render 函数中使用它。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还可以做得更多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，我们也可以期待将 &lt;strong&gt;useFetchData&lt;/strong&gt; 函数作为所导出函数的一个参数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;import useFetchData from &#x27;../composables/use-fetch-data&#x27;;&lt;br/&gt;import { defineComponent, ComputedRef, Ref } from &#x27;@vue/composition-api&#x27;;&lt;br/&gt;import { Component } from &#x27;vue&#x27;;&lt;br/&gt;&lt;br/&gt;interface FetchDataVars {&lt;br/&gt;    loading: Ref&amp;lt;boolean&amp;gt;;&lt;br/&gt;    error: Ref&amp;lt;boolean&amp;gt;;&lt;br/&gt;    data: Ref&amp;lt;object&amp;gt;;&lt;br/&gt;    fetchData: Function;&lt;br/&gt;    hasData: ComputedRef&amp;lt;boolean&amp;gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;type FetchData = () =&amp;gt; FetchDataVars ;&lt;br/&gt;&lt;br/&gt;export default (component: Component, factoryFetchData: FetchData) =&amp;gt; defineComponent({&lt;br/&gt;    setup() {&lt;br/&gt;        const { loading, error, data, fetchData, hasData } = factoryFetchData();&lt;br/&gt;        return {&lt;br/&gt;            loading,&lt;br/&gt;            error,&lt;br/&gt;            data, fetchData,&lt;br/&gt;            hasData&lt;br/&gt;        }&lt;br/&gt;    },&lt;br/&gt;    mounted() {&lt;br/&gt;        this.fetchData();&lt;br/&gt;    },&lt;br/&gt;    render() {&lt;br/&gt;        const injectedComponentProps = {&lt;br/&gt;            data: this.data&lt;br/&gt;        }&lt;br/&gt;        return (&lt;br/&gt;            &amp;lt;div&amp;gt;&lt;br/&gt;                { this.loading &amp;amp;&amp;amp; &amp;lt;div&amp;gt; Loading ... &amp;lt;/div&amp;gt; }&lt;br/&gt;                { this.error &amp;amp;&amp;amp; &amp;lt;div&amp;gt; An Error occured, please try again &amp;lt;/div&amp;gt; }&lt;br/&gt;                &amp;lt;component data={ injectedComponentProps } /&amp;gt;&lt;br/&gt;            &amp;lt;/div&amp;gt;&lt;br/&gt;        )&lt;br/&gt;    }&lt;br/&gt;});&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;借助这些改变，在组件之上，接受一个类型为 &lt;strong&gt;FetchData&lt;/strong&gt; 并返回一组符合预期的变量/函数/计算值的 &lt;strong&gt;函数&lt;/strong&gt; 作为参数，就可以使用包装过的新组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是一种依托函数式途径达成的相当有用的替代继承/扩展的方法。所以，不同于扩展已有的组件并覆写组件的函数的是，我们可以真正传入期望的组件和函数了。Typescript 在此仅有助于强类型化和类型推断，所以只用 Javascript 也是足够的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如，如果我们想要使用它，看起来会是这样的：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; withLoaderAndFetcher &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./components/withLoaderAndFetcher&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useFetchDataForEndpointOne &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./composables/useFetchDataForEndpointOne&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useFetchDataForEndpointTwo &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./composables/useFetchDataForEndpointTwo&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; useFetchDataForEndpointThree &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./composables/useFetchDataForEndpointThree&#x27;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; ComponentA &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./components/ComponentA.vue&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; ComponentB &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./components/ComponentB.vue&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; ComponentC &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./components/ComponentC.vue&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; composedA = withLoaderAndFetcher(ComponentA, useFetchDataForEndpointOne);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; composedB = withLoaderAndFetcher(ComponentB, useFetchDataForEndpointTwo);&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; composedC = withLoaderAndFetcher(ComponentC, useFetchDataForEndpointThree);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们将上例导出的函数称为 &lt;strong&gt;withLoaderAndFetcher&lt;/strong&gt; 并使用其组合了 3 个不同的组件和 3 个不同的函数（装饰者模式）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这项工作还能推进得更远，但我想展示的是达到这种状态的可能性并增加趋向函数式组合方式的方法数量。这只是示例代码，也可能不会工作得很好，但这种想法和概念才是要义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;干杯 :)&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果发现译文存在错误或其他需要改进的地方，欢迎到 &lt;span&gt;👉&lt;/span&gt;掘金翻译计划 对译文进行修改并 PR，也可获得相应奖励积分。文章开头的 &lt;strong&gt;本文永久链接&lt;/strong&gt; 即为本文在 GitHub 上的 MarkDown 链接。&lt;/p&gt;&lt;/blockquote&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt;掘金翻译计划 是一个翻译优质互联网技术文章的社区，文章来源为 &lt;span&gt;👉&lt;/span&gt;掘金 上的英文分享文章。内容覆盖 &lt;span&gt;👉&lt;/span&gt;Android、&lt;span&gt;👉&lt;/span&gt;iOS、&lt;span&gt;👉&lt;/span&gt;前端、&lt;span&gt;👉&lt;/span&gt;后端、&lt;span&gt;👉&lt;/span&gt;区块链、&lt;span&gt;👉&lt;/span&gt;产品、&lt;span&gt;👉&lt;/span&gt;设计、&lt;span&gt;👉&lt;/span&gt;人工智能等领域，想要查看更多优质译文请持续关注 &lt;span&gt;👉&lt;/span&gt;掘金翻译计划、&lt;span&gt;👉&lt;/span&gt;官方微博、&lt;span&gt;👉&lt;/span&gt;知乎专栏。&lt;/p&gt;&lt;/blockquote&gt;&lt;center data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;--End--&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/aqicFmRvjIbiayf0KbLeBiaQOwLxSYzMfI2GTViajXvmiaCyzVTVV0DI96eFbRzjuIFPWEZkSbJibhJef6u4gMTY6ibVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;p&gt;查看更多前端好文&lt;br/&gt;请搜索 fewelife 关注公众号&lt;br/&gt;&lt;br/&gt;&lt;span&gt;转载请注明出处&lt;/span&gt;&lt;/p&gt;&lt;/center&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>