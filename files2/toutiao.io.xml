<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cd4c6debf92331f2d0cd1f8ccead0244</guid>
<title>优质网站同好者周刊（第 54 期）- 倾城之链 - 悠然宜想亭</title>
<link>https://toutiao.io/k/y8jsfcd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;Post-body&quot;&gt;
                    &lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界。此周刊，将汇聚过去一周&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城&lt;/a&gt;所收录的内容，以飨同好；欢迎推荐或自荐（仅限有独立域名的网站，可以是二级域名）。您如果要了解收录要求，请参见&lt;a href=&quot;https://nicelinks.site/about?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;关于倾城&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：本周刊&lt;strong&gt;每周五&lt;/strong&gt;生成，首发于个人微信公众号&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI5MDIwMzM2Mg==&amp;amp;action=getalbum&amp;amp;album_id=1530765143352082433&amp;amp;scene=173&amp;amp;from_msgid=2650641087&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;、博客&lt;a href=&quot;https://www.jeffjade.com&quot; rel=&quot; nofollow ugc&quot;&gt;晚晴幽草轩&lt;/a&gt;，以及&lt;a href=&quot;https://forum.lovejade.cn/&quot; rel=&quot; nofollow ugc&quot;&gt;悠然宜想亭&lt;/a&gt;社区；此一键生成脚本基于 &lt;a href=&quot;https://nicelinks.site/post/602d30aad099ff5688618591&quot; rel=&quot; nofollow ugc&quot;&gt;Deno&lt;/a&gt; 编写，并在 Github 开源：&lt;a href=&quot;https://github.com/nicejade/nicelinks-weekly&quot; rel=&quot; nofollow ugc&quot;&gt;nicejade/nicelinks-weekly&lt;/a&gt;。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;SVG&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%9C%A8%E7%BA%BF&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;在线&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%B7%A5%E5%85%B7&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;工具&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：svg, svg tool, svg viewer, online svg, svg to jsx, svg to react, svg to react native, svg optimize&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;SVG Viewer is an online tool to view and optimize SVGs.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.svgviewer.dev.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - SVG Viewer - View, save, and optimize SVGs&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt;，是一个在线工具，用于查看（预览）和优化 &lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG&lt;/a&gt;，这对 &lt;strong&gt;Web 开发&lt;/strong&gt;相关从业人员，颇为有用。在介绍该网站功能之前，有必要对 &lt;code&gt;SVG&lt;/code&gt; 做一个大致科普：&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/tags/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG&lt;/a&gt;：&lt;strong&gt;可缩放矢量图形&lt;/strong&gt;（Scalable Vector Graphics，SVG），是一种用于描述二维的&lt;strong&gt;矢量&lt;/strong&gt;图形，基于 XML 的标记语言。作为一个基于文本的开放网络标准，SVG 能够优雅而简洁地渲染不同大小的图形，并和 CSS，DOM，JavaScript 和 SMIL 等其他网络标准无缝衔接。本质上，&lt;strong&gt;SVG 相对于图像，就好比 HTML 相对于文本&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;SVG 图像及其相关行为被定义于 XML 文本文件之中，这意味着可以对它们进行搜索、索引、编写脚本以及压缩。此外，这也意味着可以使用任何文本编辑器和绘图软件来创建和编辑它们。&lt;/p&gt;

&lt;p&gt;和传统的点阵图像模式，像 JPEG 和 PNG 不同，SVG 格式提供的是矢量图，这意味着它的图像能够被无限放大，而且不失真或降低质量，并且可以方便地修改内容。&lt;/p&gt;

&lt;p&gt;正如 HTML 一样，SVG 也有可被 JavaScript 访问的文档对象模型（DOM）和事件。这允许开发者创建丰富的动画和可交互的图像。如欲了解 SVG 更多，可参见 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://developer.mozilla.org/zh-CN/docs/Web/SVG&quot; rel=&quot; nofollow ugc&quot;&gt;SVG | MDN&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;再说回 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt;，因为可以方便预览 SVG 内容和美化（Prettify）SVG 代码，您可以基于该网站来编写 SVG（支持清除（Clear）、调整大小（Resize）、以及大量可选项设置（Options））；还支持一键转换为 React、React Native 代码及 PNG 图片；此外，您可以一键&lt;strong&gt;下载&lt;/strong&gt;和&lt;strong&gt;分享&lt;/strong&gt;您所创建的 SVG。如果您有操作 SVG 相关诉求，&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.svgviewer.dev/&quot; rel=&quot; nofollow ugc&quot;&gt;SVG Viewer&lt;/a&gt; 是您值得关注且典藏的网站。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/621739aa2d17f22050cf1a31&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - SVG Viewer - View, save, and optimize SVGs&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Vue&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Vue&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/vueuse.org.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - VueUse&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt;，是一组基于 Vue Composition API 的实用函数（常用工具集）；支持 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot; rel=&quot; nofollow ugc&quot;&gt;Vue&lt;/a&gt; 2 和 3。它的初衷是：将一切原本并不支持响应式的 JS API，变得支持响应式，省去程序员自己写相关代码。目前 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 已提供几十个解决方案，适用于常见的开发者用例，如跟踪 Ref 变化、检测元素可见性、简化常见的 &lt;a href=&quot;https://nicelinks.site/post/5b1a221c0526c920d6dfaada&quot; rel=&quot; nofollow ugc&quot;&gt;Vue&lt;/a&gt; 模式、键盘/鼠标输入等。使用 &lt;code&gt;VueUse&lt;/code&gt; 是一个节省开发时间的好方法，因为您不必自己添加所有这些标准功能。它具有以下功能特征：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;🎛 &lt;strong&gt;功能丰富&lt;/strong&gt;：140+功能供您选择；&lt;/li&gt;
&lt;li&gt;🕶 &lt;strong&gt;无缝迁移&lt;/strong&gt;：适用于 Vue 3 和 2；&lt;/li&gt;
&lt;li&gt;⚡ &lt;strong&gt;完全可摇树&lt;/strong&gt;：（tree shakeable）只拿你想要的；&lt;/li&gt;
&lt;li&gt;🦾 &lt;strong&gt;类型增强&lt;/strong&gt;：用 TypeScript 编写，带有完整的 TS 文档；&lt;/li&gt;
&lt;li&gt;🛠 &lt;strong&gt;灵活&lt;/strong&gt;：将 refs 作为参数传递，完全可定制、可配置的事件过滤器和目标；&lt;/li&gt;
&lt;li&gt;☁️ &lt;strong&gt;无需捆绑器&lt;/strong&gt;：可通过 CDN 使用，无需任何捆绑程序；&lt;/li&gt;
&lt;li&gt;🔋 &lt;strong&gt;SSR 友好&lt;/strong&gt;：与服务器端渲染/生成完美配合；&lt;/li&gt;
&lt;li&gt;🎪 &lt;strong&gt;互动演示&lt;/strong&gt;：功能文档还附带交互式演示；&lt;/li&gt;
&lt;li&gt;🔌 &lt;strong&gt;附加组件&lt;/strong&gt;：支持 Router、Firebase、RxJS 等各种插件。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 使用方式也非常简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 安装 VueUse
npm i @vueuse/core

// 使用 VueUse
import { useMouse, usePreferredDark, useLocalStorage } from &#x27;@vueuse/core&#x27;
export default {
  setup() {
    // tracks mouse position
    const { x, y } = useMouse()

    // is user prefers dark theme
    const isDark = usePreferredDark()

    // persist state in localStorage
    const store = useLocalStorage(
      &#x27;my-storage&#x27;,
      {
        name: &#x27;Apple&#x27;,
        color: &#x27;red&#x27;,
      },
    )

    return { x, y, isDark, store }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总结一下，VueUse 中有以下 9 种类型的函数。如果你想了解实用程序的完整列表，建议移步至 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse 官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Animation&lt;/strong&gt;：包含易于使用的过渡、超时和计时功能；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser&lt;/strong&gt;：可用于不同的屏幕控制、剪贴板、偏好等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component&lt;/strong&gt;：提供了不同组件方法的简写；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formatters&lt;/strong&gt;：提供响应时间格式化功能；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensors&lt;/strong&gt;：用来监听不同的 DOM 事件、输入事件和网络事件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;：管理用户状态（全局、本地存储、会话存储）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Utility&lt;/strong&gt;：不同的实用函数，如 getter、条件、引用同步等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Watch&lt;/strong&gt;：更多高级类型的观察器，如可暂停的观察器、退避的观察器和条件观察器；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Misc&lt;/strong&gt;：不同类型的事件、WebSockets 和 Web workers 的功能。&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://vueuse.org/&quot; rel=&quot; nofollow ugc&quot;&gt;VueUse&lt;/a&gt; 很大程度启发于 &lt;code&gt;react-use&lt;/code&gt;、&lt;code&gt;vue-hooks、react-hooks&lt;/code&gt; 等项目。Vue Compostion API 支持了更好的逻辑分离，让这些常用的工具可以被复用，能够让你快速地构建丰富的应用。VueUse 中的大多数函数都会返回一个&lt;strong&gt;refs 对象&lt;/strong&gt;，您可以使用 ES6 的对象解构语法来获取您需要的内容。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6217279e2d17f22050cf1a2f&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - VueUse&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E7%A8%8B%E5%BA%8F&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;程序&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E6%A1%86%E6%9E%B6&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;框架&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;A web-app framework that includes everything needed to create database-backed web applications according to the Model-View-Controller (MVC) pattern.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/rubyonrails.org.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - Ruby on Rails — A web-app Framework &quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Ruby on Rails&lt;/a&gt;（官方简称为 Rails，亦被简称为 RoR），是一个基于 Ruby 语言写的开源 Web 应用程序框架，包括根据&lt;strong&gt;模型-视图-控制器&lt;/strong&gt;（MVC）模式创建数据库支持的 Web 应用程序所需的一切。它努力使自身保持简单，来使实际的应用开发时的代码更少，使用最少的配置。Rails 的设计原则包括 “不做重复的事”（Don&#x27;t Repeat Yourself）和 “惯例优于设置”（Convention Over Configuration）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Ruby on Rails&lt;/a&gt; 是一种结合 Ruby 语言与 Rails 平台的一种网页程序框架，Ruby 语言以自然、简洁、快速著称，全面支持面向对象程序设计，而 Rails 则是 Ruby 广泛应用方式之一，在 Rails 平台上设计出一套独特的 MVC 开发架构，采取模型（Model）、视图（View）、控制器（Controller）分离的开发方式，不但减少了开发中的问题，更简化了许多繁复的动作。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://rubyonrails.org/&quot; rel=&quot; nofollow ugc&quot;&gt;Rails&lt;/a&gt; 是一个全栈框架。它附带了在前端和后端构建出色的 Web 应用程序所需的所有工具：渲染 HTML 模板、更新数据库、发送和接收电子邮件、通过 WebSocket 维护实时页面、为异步工作排队作业、将上传存储在云中，为常见攻击提供可靠的安全保护。Rails 可以做到这一切，且还有更多。&lt;/p&gt;

&lt;p&gt;Ruby on Rails 的数千个程序已经在线上得到应用。包括 Twitter、Airbnb、GitLab、Shopify 等知名网站。如果您对其感兴趣，不妨前往其官网了解一下。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/621646542d17f22050cf1a2d&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - Ruby on Rails — A web-app Framework &lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/npm&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Node.js&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;npm is the package manager for Node.js. It was created in 2009 as an open source project to help JavaScript developers easily share packaged modules of code.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/www.npmjs.com.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - npm ｜ the package manager for Node.js&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;NPM&lt;/a&gt;（&lt;strong&gt;Node Package Manager&lt;/strong&gt;) 是 JavaScript 运行时环境 Node.js 的默认包管理器，由 npm, Inc. 维护（一家成立于 2014 年的公司，于 2020 年 3 月 17 日被 GitHub 收购）。&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;npm&lt;/a&gt; 是 JavaScript 社区的重要组成部分，有助于支持世界上最大的开发者生态系统之一。npm 有非常多东西：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;npm 是 Node.js 的包管理器。它作为一个开源项目创建于 2009 年，旨在帮助 JavaScript 开发人员轻松共享打包的代码模块。&lt;/li&gt;
&lt;li&gt;npm Registry 是一个公开的开源代码包集合，用于 Node.js、前端 Web 应用程序、移动应用程序、机器人、路由器以及 JavaScript 社区的无数其他需求。&lt;/li&gt;
&lt;li&gt;npm 是允许开发人员安装和发布这些包的命令行客户端。&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;GitHub 现在已经保证 npm 将永远免费。截至 2020 年 3 月 17 日，npm 为大约 1200 万开发人员，提供了 130 万个软件包，这些开发人员每月下载这些软件包达 750 亿次。&lt;/p&gt;

&lt;p&gt;新版的 &lt;a href=&quot;https://nicelinks.site/tags/Node.js&quot; rel=&quot; nofollow ugc&quot;&gt;Node.js&lt;/a&gt; 已经集成了 npm；如果您有安装 Node.js，那么 npm 也一并安装好了。您可以通过输入 &lt;code&gt;npm -v&lt;/code&gt; 来测试是否成功安装。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/redirect?url=https://www.npmjs.com/&quot; rel=&quot; nofollow ugc&quot;&gt;NPM&lt;/a&gt; 是一种重用其他开发人员的代码的方法，也是一种与他人共享代码的方式，并且可以很容易地管理不同版本的代码。&lt;code&gt;npm&lt;/code&gt; 开始作为 Node 包管理器，所以你会发现很多模块可以在服务器端使用。也有很多的包添加命令供您在命令行中使用。如果您从事&lt;strong&gt;前端开发&lt;/strong&gt;相关工作，想必 &lt;code&gt;npm&lt;/code&gt; 是您必不可少的工具；当然，您也可以使用其替代性产品 &lt;code&gt;yarn&lt;/code&gt;，详情可参见文章 ──&lt;a href=&quot;https://www.jeffjade.com/2017/12/30/135-npm-vs-yarn-detial-memo/&quot; rel=&quot; nofollow ugc&quot;&gt;Npm vs Yarn 之备忘详单&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6216392f2d17f22050cf1a2b&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - npm ｜ the package manager for Node.js&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/tags/JavaScript&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;JavaScript&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;前端开发&lt;/code&gt;&lt;/a&gt; · &lt;a href=&quot;https://nicelinks.site/tags/Web%E5%BC%80%E5%8F%91&quot; rel=&quot; nofollow ugc&quot;&gt;&lt;code&gt;Web开发&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;Search term highlighting intended for every use case. Can be used with plain JavaScript or as jQuery plugin.&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://oss.nicelinks.site/markjs.io.png?x-oss-process=style/png2jpg&quot; title=&quot;&quot; alt=&quot;倾城之链 - mark.js – JavaScript keyword highlight&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐语&lt;/strong&gt;：&lt;a href=&quot;https://nicelinks.site/redirect?url=https://markjs.io/&quot; rel=&quot; nofollow ugc&quot;&gt;mark.js&lt;/a&gt;，是一个用 JavaScript 编写的文本荧光笔（高亮工具库），可以与纯 JavaScript 或作为 jQuery 插件一起使用。它可以用来动态标记搜索词或自定义正则表达式，并为您提供内置选项，如支持标点符号、单独的单词搜索、自定义同义词、支持 iframes、自定义过滤器、准确性定义、自定义元素、自定义类名等。它不仅功能强大，而且使用非常简单，如下示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;# 基于 npm 安装
npm install mark.js --save-dev
# 或者基于 yarn
yarn add mark.js

// 使用
import Mark from &#x27;mark.js&#x27;
const contentDom = document.querySelector(&#x27;.content&#x27;)
const instance = new Mark(contentDom);
instance.mark(keyword, {
  exclude: [&quot;h1&quot;],
  className: &quot;mark-highlight&quot;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果您有打算做&lt;strong&gt;本地搜索&lt;/strong&gt;功能，那么 &lt;a href=&quot;https://nicelinks.site/redirect?url=https://markjs.io/&quot; rel=&quot; nofollow ugc&quot;&gt;mark.js&lt;/a&gt; 工具库非常拥有，可以帮您&lt;strong&gt;高亮&lt;/strong&gt;关键字。&lt;/p&gt;

&lt;p&gt;── 出自&lt;a href=&quot;https://nicelinks.site/post/6213944196847213f2febb08&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链 - mark.js – JavaScript keyword highlight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对倾城之链感兴趣的朋友，可通过 Web，小程序，快应用等渠道进行访问(后续将支持更多，如 VsCode 插件，Chrome 扩展等)。您有任何问题，欢迎随时向我们反馈（您可以通过官网反馈渠道，或添加如下客服微信），🤲 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/%E5%80%BE%E5%9F%8E%E4%B9%8B%E9%93%BE-%E5%BE%AE%E4%BF%A1-mini.jpeg&quot; title=&quot;&quot; alt=&quot;倾城之链 - 客服微信&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;本期文末寄语&lt;/h2&gt;

&lt;p&gt;舜发于畎亩之中，傅说举于版筑之间，胶鬲举于鱼盐之中，管夷吾举于士，孙叔敖举于海，百里奚举于市。&lt;strong&gt;故天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能&lt;/strong&gt;。── 战国 · 孟子《生于忧患死于安乐》&lt;/p&gt;

&lt;blockquote class=&quot;uncited&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;https://nicelinks.site/?utm_source=weekly&quot; rel=&quot; nofollow ugc&quot;&gt;倾城之链&lt;/a&gt;作为一个开放平台，旨在云集全球&lt;strong&gt;优秀网站&lt;/strong&gt;，探索互联网中更广阔的世界；在这里，你可以轻松发现、学习、分享更多有用或有趣的事物。&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://image.nicelinks.site/nicelinks-miniprogram-code.jpeg?imageView2/1/w/300/h/300/interlace/1/ignore-error/1&quot; title=&quot;&quot; alt=&quot;小程序码 - 倾城之链&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;您可能感兴趣的文章&lt;/h3&gt;



                &lt;/div&gt;
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5ffcd52b44ed3d7750b1ffb0c8a74670</guid>
<title>如何写一份让面试官眼前一亮的简历？</title>
<link>https://toutiao.io/k/n5pmmlc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0OTE4MzYzMw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk55KKLFaGCDRURMvFtPXf9fZXJOHOFsA3Ye8Qbibf3qHLkBQNpdjicAVpPf2T03EcakjAFbwqicjXSibXA/0?wx_fmt=png&quot; data-nickname=&quot;架构师社区&quot; data-alias=&quot;devabc&quot; data-signature=&quot;架构师社区，专注分享架构师技术干货，架构师行业秘闻，汇集各类奇妙好玩的架构师话题和流行的架构师动向！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;一份好的简历，能给面试官一个好的印象，可能你接下来的面试就很顺利。一份糟糕的简历，可能连简历筛查都过不了，所以写好一份简历很重要。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可是笔者发现很多伙伴根本不会写简历，有的内容不全，有的重点不突出，有的语句不通，有的错字连篇，还有的看一眼就想丢到垃圾桶去。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;于是笔者今天想就这个话题聊聊，如何写好一份简历？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;笔者不想长篇大论，讲一些原则，要写些什么，不要写什么，这样你看完这篇文章还是无从下手，笔者就从实战的角度说一说。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、简历制作&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;不要随便在网上找一份简历模板，修修改改，更不要随手打开一个word就开写。现在有很多专门制作简历的网站，可以根据你填写的信息导出一份精美的简历，这种简历既美观条理又清晰，看起来一目了然，是比较推荐的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;按下面的顺序填写简历就可以了。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;基本信息 &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;个⼈总结 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;教育经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;专业技能 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;⼯作经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;项⽬经历 &lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他（选填）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、基本信息&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个没什么好说的，无非就是姓名，年龄，联系方式，如实填写就好了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;&lt;strong&gt;个人总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;个人总结部分，就是要突出自己的亮点，扬长避短，尽量给面试官留下深刻印象的部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在这里，可以先写上自己的开发经验，然后对一两家比较重要的公司进行深入说明，比如带过团队，负责过比较重要的项目，负责过比较核心的业务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后写上自己深⼊研究的技术。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总之，个人总结就是要多写一些让⾯试官和HR眼前⼀亮的东⻄。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;xxx年java开发经验，⽬前在xxx公司（xxxx万⽤户，xxx头部平台）担任系统架构师，从事分布式、⾼并发、⼤数据量平台架构设计以及研发，最⾼系统总⽤户量超过xxxx万，⽇活跃⽤户xxx万。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你level没那么高，可以这样写：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;xxx年开发经验，曾在xxx&lt;span&gt;公司（上市公司，市值xxxx亿美⾦，知名xxx平台）从事分布式、高并发的金融系统开发，⾼峰期qps过xx万。对⽹络、并发编程、分布式系统，Redis、kafka、zookeeper等技术有深⼊研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、教育经历&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（1）写上⾃⼰的教育经历，如果是985或211⼤学，要标记出来，相当一部分公司是很看重学历学校的。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;（2）教育经历保留最⾼的学历，其他的可以不写，等HR⾯试的时候⾃⼰想办法去聊学历这个事。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、专业技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;（1）写上你熟悉的，深⼊理解的，和精通的技术，不熟的不要写，被问倒了就尴尬了。&lt;/section&gt;&lt;section&gt;（2）同时在写的时候要有⼀定的层次感。&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先写从基础内容开始，⽐如jdk集合与并发包，线程池，jvm，mysql 等技术；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后写中间件rocketmq kafka zk netty等技术；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最后再写⼀些运维相关的技术；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、工作经历&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;这部分建议从最近的公司开始写，每段工作经历中写上比较重要的项目。&lt;/section&gt;&lt;section&gt;（1）如果公司做的是C端项⽬，要写产品名，不要写公司全名，能简写就尽量简写。&lt;/section&gt;&lt;section&gt;（2）如果公司是独⻆兽，融过资的，或上市公司等，可以标注上，⽐如上市公司（市值60亿美⾦）、D轮融资等。 &lt;/section&gt;&lt;section&gt;（3）如果是外包给甲⽅做项⽬的，可以写甲⽅的产品名或公司名。&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后写具体的项⽬，然后把每个项⽬拆分成下面这些部分：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;项⽬名称&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬背景&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬描述&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;把你项⽬的具体业务描述出来，挑重点业务来写，每个业务是怎样去实现的，也可以适当的把一些学到但并没有用上的技术融入到项目中去。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;项⽬职责&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;负载情况&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要写上应⽤的总⽤户量、⽇活跃⽤户量、⽇访问量、⾼峰连接数、⾼峰请求并发数、⽇数据量、总数据量等数字。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你的项⽬并发量⽐较⾼，就突出并发量相关的数字。如果项⽬没有并发，但是数据量很⼤，就突出数据量相关的数字。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果实在是并发量和数据量都不⾏，就写项⽬规模相关的数字，⽐如项⽬拆分了多少个服务， 每个服务部署了多少台机器，每个中间件部署了多少台机器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;上⾯这些数字，都可以根据你真实的业务情况去适当的增加。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;技术挑战、解决⽅案&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这⾥是体现你项⽬亮点的地⽅。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要⼤概写⼀个简单标题，你在做项⽬中，做了什么样的业务或使⽤了什么样的技术（中间件、 框架）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后标题下⾯写，做这个业务或使⽤这个技术时遇到了怎么样【技术挑战】。（这⾥⾄少写2个）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;然后在对应上⾯的技术挑战，你的解决⽅案是什么。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以去写⼀些复杂业务、源码级别、⼤数据量、⾼并发的解决⽅案。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt; &lt;strong&gt;7、其他（选填）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;根据自己的具体情况，可以适当的增加一些栏目，比如有的伙伴有写技术文章和开源项目的，可以加上去，&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;简历写完后，导出要保存为pdf格式，因为如果是word格式，打开的时候可能排版变得很乱，也可能因为不同版本兼容问题打不开，pdf格式就不存在这些问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面详细说了下如何写好一份简历，但是笔者想说的是，简历只是一块敲门砖，让用人单位给你一个面试机会，能不能通过面试最终还要靠你的真才实学。如果没有真才实学，就算你的简历写的天花乱坠，照样不能通过面试。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后，给伙伴们一个小小的忠告，诚实点，不要试图撒谎。常常你撒一个谎的时候，需要无数个谎言来掩饰，如果其中某一个谎言被戳穿，那你这次面试就失败了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;另外现在很多公司都会做背调，有的是自己公司的hr做背调，还有的是请专门的背调公司做背调，比如91背调，八方锦程，全景求是。不要低估这些背调公司的手段，如果你被调查出来有违法违纪，跟简历不符的内容，那就会触及背调红线，很可能你就会被pass掉。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总之写好一份简历，不能敷衍了事，要适度包装，给人耳目一新的感觉，又不能包装的离谱，给人假的离谱的感觉。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU0OTE4MzYzMw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/fEsWkVrSk55KKLFaGCDRURMvFtPXf9fZXJOHOFsA3Ye8Qbibf3qHLkBQNpdjicAVpPf2T03EcakjAFbwqicjXSibXA/0?wx_fmt=png&quot; data-nickname=&quot;架构师社区&quot; data-alias=&quot;devabc&quot; data-signature=&quot;架构师社区，专注分享架构师技术干货，架构师行业秘闻，汇集各类奇妙好玩的架构师话题和流行的架构师动向！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4e3d262a5154f0b478f47c7d02b061ab</guid>
<title>开源｜一款适合于快速开发业务的 Go 框架</title>
<link>https://toutiao.io/k/wnwdwqc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;以下内容选自「码农周刊 VIP 会员」圈子，每日更新，精彩不断。&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一款适合于快速开发业务的 Go 框架，可快速构建 API 服务或 Web 网站。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;1656&quot; data-ratio=&quot;1.8853333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ5xCK35MmIAZY2MoAmliafucpaNAuXPBmPxibsF9bKh4bg0SmMP9gzockMFdzT9ALeYqowEbXUbNgEQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e3d29d8800859525a99142b6b9e0ddf2</guid>
<title>当 synchronized 遇到这玩意儿，有个大坑，要注意！</title>
<link>https://toutiao.io/k/s694r65</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;前几天在某技术平台上看到别人提的关于 Synchronized 的一个用法问题，我觉得挺有意思的，这个问题其实也是我三年前面试某公司的时候遇到的一个真题，当时不知道面试官想要考什么，没有回答的特别好，后来研究了一下就记住了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以看到这个问题的时候觉得特别亲切，准备分享给你一起看看：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1466346153846154&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1PnnJ0BDwdRKKhw7MwmTQhJWCF64lbXib1M6xugjWz55WT1IdLPWgb8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先为了方便你看文章的时候复现问题，我给你一份直接拿出来就能跑的代码。希望你有时间的话也把代码拿出来跑一下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;SynchronizedTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Thread why = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TicketConsumer(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;why&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Thread mx = &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; TicketConsumer(&lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;mx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        why.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        mx.start();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TicketConsumer&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt; Integer ticket;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;TicketConsumer&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; ticket)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;.ticket = ticket;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-snippet__keyword&quot;&gt;true&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            System.out.println(Thread.currentThread().getName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;开始抢第&quot;&lt;/span&gt; + ticket + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;张票，对象加锁之前：&quot;&lt;/span&gt; + System.identityHashCode(ticket));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;synchronized&lt;/span&gt; (ticket) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                System.out.println(Thread.currentThread().getName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;抢到第&quot;&lt;/span&gt; + ticket + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;张票，成功锁到的对象：&quot;&lt;/span&gt; + System.identityHashCode(ticket));&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (ticket &amp;gt; &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;try&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        TimeUnit.SECONDS.sleep(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    } &lt;span class=&quot;code-snippet__keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                        e.printStackTrace();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    System.out.println(Thread.currentThread().getName() + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;抢到了第&quot;&lt;/span&gt; + ticket-- + &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;张票，票数减一&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                } &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;程序逻辑也很简单，是一个模拟抢票的过程，一共 10 张票，开启两个线程去抢票。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;票是共享资源，且有两个线程来消费，所以为了保证线程安全，TicketConsumer 的逻辑里面用了 synchronized 关键字。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是应该是大家在初学 synchronized 的时候都会写到的例子，期望的结果是 10 张票，两个人抢，每张票只有一个人能抢到。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是实际运行结果是这样的，我只截取开始部分的日志：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5309734513274337&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1H7wF7IyoXibYyc8k0xZAic6AWefp4Q5aKVdMVHoX24nxga2FJlsUMYNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;339&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;截图里面有三个框起来的部分。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;最上面的部分，就是两个人都在抢第 10 张票，从日志输出上看也完全没有任何毛病，最终只有一个人抢到了票，然后进入到第 9 张票的争夺过程。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是下面被框起来的第 9 张票的争夺部分就有点让人懵逼了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;why抢到第9张票，成功锁到的对象：288246497&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;mx抢到第9张票，成功锁到的对象：288246497&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么两个人都抢到了第 9 张票，且成功锁到的对象都一样的？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这玩意，超出认知了啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这两个线程怎么可能拿到同一把锁，然后去执行业务逻辑呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，提问者的问题就浮现出来了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为什么 synchronized 没有生效？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为什么锁对象 System.identityHashCode 的输出是一样的？&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;为什么没有生效？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们先来看一个问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，我们从日志的输出上已经非常明确的知道，synchronized 在第二轮抢第 9 张票的时候失效了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过理论知识支撑，我们知道 synchronized 失效，肯定是锁出问题了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果只有一把锁，多个线程来竞争同一把锁，synchronized 绝对是不会有任何毛病的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这里两个线程并没有达成互斥的条件，也就是说这里绝对存在的不止一把锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是我们可以通过理论知识推导出来的结论。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1954887218045114&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1pLjIpQYbe9GRf7ljWHy9V2OmMqTdAnIVFopSAJ8gytMkeCeK8HiaHhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;266&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;先得出结论了，那么我怎么去证明“&lt;/span&gt;&lt;span&gt;锁不止一把&lt;/span&gt;&lt;span&gt;”呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;能进入 synchronized 说明肯定获得了锁，所以我只要看各个线程持有的锁是什么就知道了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么怎么去看线程持有什么锁呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;jstack 命令，打印线程堆栈功能，了解一下？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这些信息都藏在线程堆栈里面，我们拿出来一看便知。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在 IDEA 里面怎么拿到线程堆栈呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就是一个在 IDEA 里面调试的小技巧了，我之前的文章里面应该也出现过多次。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先为了方便获取线程堆栈信息，我把这里的睡眠时间调整到 10s：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41411042944785276&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1ziblicL48RVdj6ar2akxicHg8In4Fxnh8Uu38ia5SPQNUgPbVibNBVGbFfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;326&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;跑起来之后点击这里的“照相机”图标：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49506903353057197&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm11bgRMc8PPHASbicnZP5GFlQicFpdd7vrfbRwPqh4bw0p7wuZNpuZSqAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;507&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;点&lt;/span&gt;&lt;span&gt;击几次就会有对应点击时间点的几个 Dump 信息&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6634382566585957&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1wC5k7o7y7vYSVMd9jxkOLSwicGrnWskfofzmxKmkAasmDEgCBLROjMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;413&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于我需要观察前两次锁的情况，而每次线程进入锁之后都会等待 10s 时间，所以我就在项目启动的第一个 10s 和第二个 10s 之间各点击一次就行。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了更直观的观察数据，我选择点击下面这个图标，把 Dump 信息复制下来：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7203389830508474&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1JL2wqAYb4T1KQexEYqhDAt2lgqRsoyjo5EHudPhyey0TSzpRkcvYsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;354&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;复制下来的信息很多，但是我们只需要关心 why 和 mx 这两个线程即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这是第一次 Dump 中的相关信息：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.29906542056074764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1Gc35508WcHE3vn8LplOeXibF8a2AzCbMvgFdWFCgvUiatyDDWxAgB4cA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;963&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;mx 线程是 BLOCKED 状态，它在等待地址为 0x000000076c07b058 的锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;why 线程是 TIMED_WAITING 状态，它在 sleeping 状态。说明它抢到了锁，在执行业务逻辑。而它抢到的锁，你说巧不巧，正是 mx 线程等待的 0x000000076c07b058。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从输出日志上来看，第一次抢票确实是 why 线程抢到了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.27300613496932513&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1l7twHqnSNFekcxhsvibyDhUvlyjBhOTbahFUy0SDNAuNB5g2SoQ2fvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;326&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从 Dump 信息看，两个线程竞争的是同一把锁，所以第一次没毛病。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好，我们接着看第二次的 Dump 信息：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.40217391304347827&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1qUHO0tZdMDwboPwMabEjRJyHIkx6oMbVSLia1NjMa7FLHibBNVX93jNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这一次，两个线程都在 TIMED_WAITING 状态，都在 sleeping。说明都拿到了锁，进入了业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是仔细一看，两个线程拿的锁是不相同的锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;由于不是同一把锁，所以并不存在竞争关系，因此都可以进入 synchronized 执行业务逻辑，所以两个线程都在 sleeping，也没毛病。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后，我再把两次 Dump 的信息放在一起给你看一下，这样就更直观了：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7586568730325288&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1EERxyhnpjjI6MMMrAibdd2dba0TTC45gBJeibmJ02TdfWicN65mbYIVQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;953&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果我用“&lt;strong&gt;锁一&lt;/strong&gt;”来代替 0x000000076c07b058，“&lt;strong&gt;锁二&lt;/strong&gt;”来代替 0x000000076c07b048。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么流程是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;why 加锁一成功，执行业务逻辑，mx 进入锁一等待状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;why 释放锁一，等待锁一的 mx 被唤醒，持有锁一，继续执行业务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时 why 加锁二成功，执行业务逻辑。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从线程堆栈中，我们确实证明了 synchronized 没有生效的原因是锁发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时，从线程堆栈中我们也能看出来为什么锁对象 System.identityHashCode 的输出是一样的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3108233117483811&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1HLyicbc0cnRQ91gafGLHV9bgb3hoxul31aWcGb9Z6zy29a1qs2VScTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1081&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一次 Dump 的时候，ticket 都是 10，其中 mx 没有抢到锁，被 synchronized 锁住。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;why 线程执行了 ticket-- 操作，ticket 变成了 9，但是此时 mx 线程被锁住的 monitor 还是 ticket=10 这个对象，它还在 monitor 的 _EntryList 里面等着的，并不会因为 ticket 的变化而变化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以，当 why 线程释放锁之后，mx 线程拿到锁继续执行，发现 ticket=9。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;而 why 也搞到一把新锁，也可以进入 synchronized 的逻辑，也发现 ticket=9。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好家伙，ticket 都是 9， System.identityHashCode 能不一样吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按理来说，why 释放锁一后应该继续和 mx 竞争锁一，但是却不知道它在哪搞到一把新锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么问题就来了：锁为什么发生了变化呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48704663212435234&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm17r1vQlNogE7LseDcLp6a9dvsdDYzFKGqdVTywf9gmib2LiagMyRiaB4gw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;386&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;谁动了我的锁？&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过前面一顿分析，我们坐实了锁确实发生了变化。当你分析出这一点的时候勃然大怒，拍案而起，大喊一声：&lt;strong&gt;是哪个瓜娃子动了我的锁&lt;/strong&gt;？这不是坑爹吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9795918367346939&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm19YMgfWM8yTgKS8uUFicEJNrYzOXWQicMBl6SibGHFDxnqMJLbtFWE0Deg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;294&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按照我的经验，这个时候不要急着甩锅。继续往下看，你会发现小丑竟是自己：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.39304347826086955&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm18KdofZXmOaeicDbjLcIh0V4Y9AWdKMx4nr5TqMKUBJA7mWaDYj76n8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1150&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;抢完票之后，执行了 ticket-- 的操作，而这个 ticket 不就是你的锁对象吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个时候你把大腿一拍，恍然大悟，对着围观群众说：问题不大，手抖而已。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;于是大手一挥，把加锁的地方改成这样：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;css&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;code-snippet__selector-tag&quot;&gt;TicketConsumer&lt;/span&gt;&lt;span class=&quot;code-snippet__selector-class&quot;&gt;.class&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;利用 class 对象来作为锁对象，保证了锁的唯一性。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;经过验证也确实没毛病，非常完美，打完收工。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，真的就收工了吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0014265335235377&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1QqwuA4kEV6VgfdEDYhWIO9xJqFsJx03OaBWszniazHKIaKXkNCdNMKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;701&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实关于锁对象为什么发生了变化，还隔了一点点东西没有说出来。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;它就藏在字节码里面。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们通过 javap 命令，反查字节码，可以看到这样的信息：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3289156626506024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1E1UzAEehLAXgDe2kZLuOR7ib9Jc0IYsRyAYXwYAbGtPxoujTADROBNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;830&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Integer.valueOf &lt;/span&gt;&lt;span&gt;这是什么玩意？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.25051334702258726&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1kh2QbGEibaT8kgauxR130mNOa8skDMIn93E48hDs7PJm9aiaiaWgw28hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;让人熟悉的 Integer 从 -128 到 127 的缓存。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;也就是说我们的程序里面，会涉及到拆箱和装箱的过程，这个过程中会调用到 Integer.valueOf 方法。具体其实就是 ticket-- 的这个操作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对于 Integer，当值在缓存范围内的时候，会返回同一个对象。当超过缓存范围，每次都会 new 一个新对象出来。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这应该是一个必备的八股文知识点，我在这里给你强调这个是想表达什么意思呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;很简单，改动一下代码就明白了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我把初始化票数从 10 修改为 200，超过缓存范围，程序运行结果是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6068965517241379&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm171XdJJ5HsIia6wvmhmof3Ay0ATUd4F344f2UBZmffWwEric6JUm0zw8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;580&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;很明显，从第一次的日志输出来看，锁都不是同一把锁了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这就是我前面说的：因为超过缓存范围，执行了两次 new Integer(200) 的操作，这是两个不同的对象，拿来作为锁，就是两把不一样的锁（注意这里的程序是去掉了static）。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;再修改回 10，运行一次，你感受一下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5743944636678201&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1XyyiaBxFxmKPE3eVNwjiaVVGD7RKanAdgBfVTMs9y0sNGpXxtSnFIhhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从日志输出来看，这个时候只有一把锁，所以只有一个线程抢到了票。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为 10 是在缓存范围内的数字，所以每次是从缓存中获取出来，是同一个对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我写这一小段的目的是为了体现 Integer 有缓存这个知识点，大家都知道。但是当它和其他东西揉在一起的时候因为这个缓存会带来什么问题，你得分析出来，这比直接记住干瘪的知识点有效一点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是……&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我们的初始票是 10，ticket-- 之后票变成了 9，也是在缓存范围内的呀，怎么锁就变了呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果你有这个疑问的话，那么我劝你再好好想想。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;10 是 10，9 是 9。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;虽然它们都在缓存范围内，但是本来就是两个不同的对象，构建缓存的时候也是 new 出来的：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3713527851458886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1yJ4iccwlVnCia7Jz8OiclpD31tqNPicveuVo2iaHM4VXQ7Ua7icZvsAojwMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;377&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为什么我要补充这一段看起来很傻的说明呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因为我在网上看到其他写类似问题的时候，有的文章写的不清楚，会让读者误认为“缓存范围内的值都是同一个对象”，这样会误导初学者。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;总之一句话：请别用 Integer 作为锁对象，你把握不住。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是……&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.5234375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1hldG2DmkicKE83JIGuvNVq8chmCCMwnibNGrOQ74yqs1gvSuP6o7SWFw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;StackOverflow&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是，我写文章的时候在 StackOverflow 上也看到了一个类似的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个哥们的问题在于：他知道 Integer 不能做为锁对象，但是他的需求又似乎必须把 Integer 作为锁对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://stackoverflow.com/questions/659915/synchronizing-on-an-integer-value&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1387213510253318&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1FRiaLXKSa99PnwtJGcJN9kia6eHfwPFEibhHGEYAuia8todFajGicn9GOEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;829&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我给你描述一下他的问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先看标号为 ① 的地方，他的程序其实就是先从缓存中获取，如果缓存中没有则从数据库获取，然后再放到缓存里面去。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;非常简单清晰的逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是他考虑到并发的场景下，如果有多个线程同一时刻都来获取同一个 id，但是这个 id 对应的数据并没有在缓存里面，那么这些线程都会去执行查询数据库并维护缓存的动作。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;对应查询和存储的动作，他用的是 fairly expensive 来形容。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就是“相当昂贵”的意思，说白了就是这个动作非常的“重”，最好不要重复去做。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以只需要让某一个线程来执行这个 fairly expensive 的操作就好了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;于是他想到了标号为 ② 的地方的代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用 synchronized 来把 id 锁一下。不幸的是，id 是 Integer 类型的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在标号为 ③ 的地方他自己也说了：不同的 Integer 对象，它们并不会共享锁，那么 synchronized 也没啥卵用。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;其实他这句话也不严谨，经过前面的分析，我们知道&lt;strong&gt;在缓存范围内的 Integer 对象，它们还是会共享同一把锁的&lt;/strong&gt;，这里说的“共享”就是竞争的意思。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是很明显，&lt;/span&gt;&lt;span&gt;他的 id 范围肯定比 Integer 缓存范围大&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么问题就来了：这玩意该咋搞啊？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我看到这个问题的时候想到的第一个问题是：上面这个需求我好像也经常做啊，我是怎么做的来着？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;想了几秒恍然大悟。哦，现在都是分布式应用了，我特么直接用的是 Redis 做锁呀。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根本就没有考虑过这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果现在不让用 Redis，就是单体应用，那么怎么解决呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;在看高赞回答之前，我们先看看这个问题下面的一个评论：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10996119016817593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1kt4frslK9ECKgK6hXiaH1maGH9fsoiaZ4IDHv4gle9txIQuvZiaQawEKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;773&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;开头三个字母：FYI。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看不懂没关系，因为这个不是重点。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是你知道的，我的英语水平 very high，所以我也顺便教点英文。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;FYI，是一个常用的英文缩写，全称是 for your information，供参考的意思。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;所以你就知道，他后面肯定是给你附上一个资料了，翻译过来就是：Brian Goetz 在他的 Devoxx 2018 演讲中提到，我们不应该把 Integer 作为锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你可以通过这个链接直达这一部分的讲解，只有不到 30s秒的时间，顺便练练听力：https://www.youtube.com/watch?v=4r2Wg-TY7gU&amp;amp;t=3289s&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么问题又来了？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Brian Goetz 是谁，凭什么他说的话看起来就很权威的样子？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.1215189873417721&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1YMr3RGO8BbSUlOssTvTQJQJMzlRHnA5XAcfINejbkUpVIcgMYkpqFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;395&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Java Language Architect at Oracle，开发 Java 语言的，就问你怕不怕。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;同时，他还是我多次推荐过的《Java并发编程实践》这本书的作者。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好了，现在也找到大佬背书了，接下来带你看看高赞回答是怎么说的。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26477272727272727&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1BKF8Eb2FWIrXwuT0dM7sNVUV3Q8VMlMdRrGGtjvl8dRyaBRtWTcc6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;880&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;前部分就不详说了，其实就是我们前面提到的那一些点，不能用 Integer ，涉及到缓存内、缓存外巴拉巴拉的……&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关注划线的部分，我加上自己的理解给你翻译一下：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;如果你真的必须用 Integer 作为锁，那么你需要搞一个 Map 或 Integer 的 Set，通过集合类做映射，你就可以保证映射出来的是你想要的明确的一个实例。而这个实例，就可以拿来做锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;然后他给出了这样的代码片段：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6912114014251781&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm11jLLvDarWePLmnibnOeSCx4Is7Efiav9JaGetvnCibEm75Zg7TwpxIeAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就是用 ConcurrentHashMap 然后用 putIfAbsent 方法来做一个映射。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;比如多次调用 locks.putIfAbsent(200, 200)，在 Map 里面也只有一个值为 200 的 Integer 对象，这是 Map 的特性保证的，无需过多解释。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是这个哥们很好，为了防止有人转不过这个弯，他又给大家解释了一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;首先，他说你也可以这样写：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2194513715710723&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1BpWBGsVZSyptCXxuIhRdOHA4GqUibNBKfZbXnR1ibkBR8kic40PE2v0ng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但这样一来，你就会多产生一个很小成本，就是每次访问的时候，如果这个值没有被映射，你都会创建一个 Object 对象。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了避免这一点，他只是把整数本身保存在 Map 中。这样做的目的是什么？这与直接使用整数本身有什么不同呢？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;他是这样解释的，其实就是我前面说的“这是 Map 的特性保证的”：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2804878048780488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1gfgY1ZS2frA0gWibn6BNuwQHG8JxaqtcRBibkS4MWGLX1Jr9BskE4qibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;820&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当你从 Map 中执行 get() 时，会用到 equals() 方法比较键值。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;两个相同值的不同 Integer 实例，调用 equals() 方法是会判定为相同的 。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5589430894308943&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1UVSncqNFeO5vRne1L0guwh5XmWiapdicDop1dbNmmlpOTHg5Jl9m8A0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;492&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;因此，你可以传递任何数量的 &quot;new Integer(5)&quot; 的不同 Integer 实例作为 getCacheSyncObject 的参数，但是你将永远只能得到传递进来的包含该值的第一个实例。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;就是这个意思：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.526824034334764&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1QIayoJT6s1reV2Nmq9u9p2Nf6IvlaC06TktuJG91o81LRVlnPDxSwQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;932&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;汇总一句话：就是通过 Map 做了映射，不管你 new 多少个 Integer 出来，这多个 Integer 都会被映射为同一个 Integer，从而保证即使超出  Integer 缓存范围时，也只有一把锁。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;除了高赞回答之外，还有两个回答我也想说一下。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第一个是这个：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.24671052631578946&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1v1Nl2pokwU53bhMOdib8rXdUtOnbd6ujdURYBc7adexiaSUM1sX7y2WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不用关心他说的内容是什么，只是我看到这句话翻译的时候虎躯一震&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13399153737658676&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1S3lbKiaGFgAwicUiak1iaFFFgKK8CY41fCJTkN25g1wSZryZFtDVotV1Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1418&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;skin this cat ？？？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;太残忍了吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0067114093959733&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1zgHWkXeehUaBLYLd8BMxdqEeyH8P6LiaannMiaC9qH1xMbPNy6sIAKRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;298&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我当时就觉得这个翻译肯定不太对，这肯定是一个小俚语。于是考证了一下，原来是这个意思：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3483309143686502&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1PbbRK3nUxbnf12mIqUouVKTC3IRMiaQC7FXNhYicTDmoSPFKTLiaVrddQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;689&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;免费送你一个英语小知识，不用客气。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第二个应该关注的回答排在最后：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4721919302071974&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1pbtAAbO6xyhpQfsibc9GqialpHuWVylmZm92MWfRibqu57ia1wUnsmvbTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;这个哥们叫你看看《Java并发编程实战》的第 5.6 节的内容，里面有你要寻找的答案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;巧了，我手边就有这本书，于是我翻开看了一眼。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;第 5.6 节的名称叫做“构建高效且可伸缩的结果缓存”：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2852664576802508&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt0gvhRmic0vKEialQOB1ALhgTOJTGTgu45h7ru1AhLVYWtoRj8dEztBOz0TmP5hiadrM1u2o4jefZFIw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;好家伙，我仔细一看这一节，发现这是宝贝呀。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你看书里面的示例代码：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.25546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt0gvhRmic0vKEialQOB1ALhgTicVYGnK6WV6Oz0nibVibswOmDmgx7BslaoK69ibEysO3nB0rZeDEC8uSVg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不就和提问题的这个哥们的代码如出一辙吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6386292834890965&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ELQw2WCMgt3dicmGicZib9K9UaC2YxTdhm1kH1NN8AAkmEWofbhUj9XgicLOynfVuM9FCdAHiagJVcFHH2Yb9Xon23w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;321&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;都是从缓存中获取，拿不到再去构建。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;不同的地方在于书上把 synchronize 加在了方法上。但是书上也说了，这是最差的解决方案，只是为了引出问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随后他借助了 ConcurrentHashMap、putIfAbsent 和 FutureTask 给出了一个相对较好的解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你可以看到完全是从另外一个角度去解决问题的，根本就没有在 synchronize 上纠缠，直接第二个方法就拿掉了 synchronize。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;看完书上的方案后我才恍然大悟：好家伙，虽然前面给出的方案可以解决这个问题，但是总感觉怪怪的，又说不出来哪里怪。原来是死盯着 synchronize 不放，思路一开始就没打开啊。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;书里面一共给出了四段代码，解决方案层层递进，具体是怎么写的，由于书上已经写的很清楚了，我就不赘述了，大家去翻翻书就行了。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;没有书的直接在网上搜“构建高效且可伸缩的结果缓存”也能搜出原文。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我就指个路，看去吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651496468&amp;amp;idx=2&amp;amp;sn=d444b83210adfb4d5b326d98fcaf8643&amp;amp;chksm=bd25cc6b8a52457dc2c903f9c948e534e159c1c861c375471ab5a2dc8e87b57ca7e4ff6d7102&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;synchronized 的超多干货！&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;synchronized 的超多干货！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651494369&amp;amp;idx=2&amp;amp;sn=940e5269433dd9939d6e1ec8427ce688&amp;amp;chksm=bd25fb9e8a5272881227f62b9c5bcc2764c93f928371154c7f399d11a77677e8e1d4ead216a1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Synchronized 的一个点，面试官可能都记错了&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Synchronized 的一个点，面试官可能都记错了&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651484446&amp;amp;idx=1&amp;amp;sn=d98927babc32ec0676540edfdd12a8a4&amp;amp;chksm=bd251d618a529477af77caaa5516ca79e17298c706e14fa47c03a5adb1e44a260ea1fa47cbfc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Java 并发编程：Synchronized 及其实现原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Java 并发编程：Synchronized 及其实现原理&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;点赞和在看就是最大的支持&lt;/span&gt;&lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ca560a0d2534f8b3cd18148ba58c5dac</guid>
<title>跟着 Go 作者掌握泛型</title>
<link>https://toutiao.io/k/821lotp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是 polarisxu。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 GopherCon 2021 年大会上，Go 两位作者 Robert Griesemer 和 Ian Lance Taylor 做了泛型相关的演讲，即将在 Go1.18 发布的 Go 泛型，正是两位设计的。一直想着把他们的演讲做一个梳理，然后分享给大家。拖的有点久，趁春节假期整理出来了。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意，本文中的 constraints 包，已经确定在 Go1.18 正式版中去除，放入 golang.org/x/exp 中。详细可以参考该文：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAxNzY0NDE3NA==&amp;amp;mid=2247489468&amp;amp;idx=1&amp;amp;sn=6f4a4579ab9aef880702f80993e33674&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go1.18 这个包确定没了&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.18 关于泛型部分，主要有三个特性：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Type parameters for functions and types，即函数和类型的类型参数&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Type sets defined by interfaces，即由接口定义的类型集合&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Type inference，即类型推断&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1、类型参数&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看函数的类型参数。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型参数列表（Type parameter lists）&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型参数列表看起来是带方括号的普通参数列表。通常，类型参数以大写字母开头，以强调它们是类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[P, Q constraint1, R constraint2]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一个例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非泛型版本的求最小值：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;&lt;span&gt;(x, y &lt;span&gt;float64&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;float64&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; x &amp;lt; y {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; x&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果有 int 类型的 min 版本需求，得另外写一个类似的函数，这完全是重复代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那泛型版本呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Ordered&lt;/span&gt;]&lt;span&gt;(x, y T)&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; x &amp;lt; y {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; x&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; y&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意和上面版本的区别。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多了一个 &lt;code&gt;[T constraints.Ordered]&lt;/code&gt;，这就是类型参数列表，声明了一个类型 T，它的约束是 constraints.Ordered，即类型 T 满足它规定的条件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参数类型 float64 变成了 T，而不是具体的某个类型&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那这个泛型函数如何调用呢？&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;m := min[&lt;span&gt;int&lt;/span&gt;](&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是很奇怪？其实仔细一琢磨，好像没问题。因为函数声明中有  &lt;code&gt;[T constraints.Ordered]&lt;/code&gt;，跟普通的函数参数有点像。调用时，提供 int，表明普通函数参数是 int 类型。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实例化&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用时，会进行实例化过程：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1）用类型实参（type arguments）替换类型形参（type parameters）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2）检查类型实参（type arguments）是否实现了类型约束&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果第 2 步失败，实例化（调用）失败。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，调用过程可以分解为以下两步：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;fmin := min[&lt;span&gt;float64&lt;/span&gt;]&lt;br/&gt;m := fmin(&lt;span&gt;2.3&lt;/span&gt;, &lt;span&gt;3.4&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 和下面等价&lt;/span&gt;&lt;br/&gt;m := min[&lt;span&gt;float64&lt;/span&gt;](&lt;span&gt;2.3&lt;/span&gt;, &lt;span&gt;3.4&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;// 相当于 m := (min[float64])(2.3, 3.4)&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，实例化产生了一个非泛型函数。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型的类型参数&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型也可以有类型参数。通过一个例子理解一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个泛型版二叉树：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Tree[T &lt;span&gt;interface&lt;/span&gt;{}] &lt;span&gt;struct&lt;/span&gt; {&lt;br/&gt; left, right *Tree[T]&lt;br/&gt; data        T&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(t *Tree[T])&lt;/span&gt; &lt;span&gt;Lookup&lt;/span&gt;&lt;span&gt;(x T)&lt;/span&gt; *&lt;span&gt;Tree&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; stringTree Tree[&lt;span&gt;string&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意其中的 &lt;code&gt;[T interface{}]&lt;/code&gt; ，跟函数的类型参数语法是一样的，T 相当于是一个类型，所以，之后用到 Tree 的地方，T 都跟随着，即 &lt;code&gt;Tree[T]&lt;/code&gt;，包括方法的接收者（receiver）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意实例化的地方：&lt;code&gt;var stringTree Tree[string]&lt;/code&gt;，和上面两个实例化步骤中的第一步一样。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2、类型集合（Type sets）&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先看值参数的类型（the type of value parameters）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;函数普通参数列表中的每个值参数都有一个类型，这个类型定义值的集合。比如 float64 定义了浮点数值的集合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;相应的有类型参数的类型（the type of type parameters），也就是说，类型参数列表中的每个类型参数都有一个类型，这个类型定义了类型的集合，这叫做类型约束（type constraint）：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;min&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Ordered&lt;/span&gt;]&lt;span&gt;(x, y T)&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的 constraints.Ordered 是类型参数列表中的 T 参数的类型，它定义了类型的集合，即类型约束。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;constraints.Ordered 是 Go1.18 内置的一个类型约束，它有两个功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;只有值支持排序的类型才能传递给类型参数 T；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;T 类型的值必须支持 &lt;code&gt;&amp;lt;&lt;/code&gt; 操作符，因为函数体中使用了该操作符。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;类型约束是接口&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家都知道接口定义了方法集（method sets），演讲中给了一张图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.559375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ6UPpdeNPpPObBibtCxQpEg9jXGkZzmowBnqS2bN95iaKnrLJSClQGmQ6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;method sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据 Go 的规则，类型 P、Q、R 方法中包含了 a、b、c，因此它们实现了接口。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，反过来可以说，接口也定义了类型集（type sets）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ6ghSJibyTZnKXU7ed8OU8YwYRcXGIMkgLb9alPWNVFR97WrHsuHGs4hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;type sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上图中，类型 P、Q、R 都实现了左边的接口（因为都实现了接口的方法集），因此我们可以说该接口定义了类型集。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;既然接口是定义类型集，只不过是间接定义的：类型实现接口的方法集。而类型约束是类型集，因此完全可以重用接口的语义，只不过这次是直接定义类型集：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.490625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UzjmETLXwBbP6LicH9XoqcyMicRellBBJ62fouib1vdHmhAM9pTx66qwd1oke8iamygSLq1g69yybWtIKtKNDl5G6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;interface defines type sets&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是类型约束的语法，通过接口直接定义类型集：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Xxx &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;int&lt;/span&gt; | &lt;span&gt;string&lt;/span&gt; | &lt;span&gt;bool&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而 constraints.Ordered 的定义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// Ordered is a constraint that permits any ordered type: any type&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// that supports the operators &amp;lt; &amp;lt;= &amp;gt;= &amp;gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// If future releases of Go add new ordered types,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// this constraint will be modified to include them.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Ordered &lt;span&gt;interface&lt;/span&gt; {&lt;br/&gt; Integer | Float | ~&lt;span&gt;string&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Ordered 定义了所有 interger、浮点数和字符串类型的集合。所以，&amp;lt; 操作符也是支持的。这其中的 Integer、Float 也在 constraints 包有定义。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的朋友应该发现了 &lt;code&gt;~string&lt;/code&gt;，类型前面的 &lt;code&gt;~&lt;/code&gt;。&lt;code&gt;~T&lt;/code&gt; 意味着包含底层类型 T 的所有类型集合。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果约束中的所有类型都支持一个操作，则该操作可以与相应的类型参数一起使用&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;除了将约束单独定义为类型外，还可以写成字面值的形式，比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S &lt;span&gt;interface&lt;/span&gt;{~[]E}, E &lt;span&gt;interface&lt;/span&gt;{}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这看着有点晕，其实可以直接这么写：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S ~[]E, E &lt;span&gt;interface&lt;/span&gt;{}]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go1.18 中，any 是 interface{} 的别名，因此可以进一步写为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;[S ~[]E, E any]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;E 是切片的元素类型，&lt;code&gt;~[]E&lt;/code&gt; 表示底层是 &lt;code&gt;[]E&lt;/code&gt; 切片类型的都符合该约束。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3、类型推断&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在调用泛型函数时，提供类型实参感觉有点多余。Go 虽然是静态类型语言，但擅长类型推断。因此泛型这里，Go 也实现了类型推断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用泛型版的 min，可以不提供类型实参，而是直接由 Go 进行类型推断：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; a, b, m &lt;span&gt;float64&lt;/span&gt;&lt;br/&gt;m := min[&lt;span&gt;float64&lt;/span&gt;](a, b)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类型推断的细节很复杂，但使用起来还是很简单，大部分时候，跟普通函数调用没有区别。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于类型推断，演讲中给了一个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s []E, c E)&lt;/span&gt; []&lt;span&gt;E&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;([]E, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个函数的目的是希望对 s 中的每个元素都乘以参数 c，最后返回一个新的切片。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接着定义一个类型：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; Point []&lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(p Point)&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 实现细节不重要，忽略&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;point&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很显然，Point 类型的切片可以传递给 Scale：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ScaleAndPrint&lt;/span&gt;&lt;span&gt;(p Point)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := Scale(p, &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt; fmt.Println(r.String())&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们希望对 p 进行 Scale，得到一个新的 p，但发现返回的 r 根本不是 Point：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; p := Point{&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;}&lt;br/&gt; ScaleAndPrint(p)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会报错：&lt;code&gt;r.String undefined (type []int32 has no field or method String)&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们应该这样修改 Scale 函数：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;S&lt;/span&gt; ~[]&lt;span&gt;E&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s S, c E)&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;(S, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意其中的变化：加入了泛型 S，以及额外的类型约束 &lt;code&gt;~[]E&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用 Scale 时，不需要 &lt;code&gt;r := Scale[Point, int32](p, 2)&lt;/code&gt;，因为 Go 会进行类型推断。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正确的完整代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;constraints&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Scale&lt;/span&gt;[&lt;span&gt;S&lt;/span&gt; ~[]&lt;span&gt;E&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;]&lt;span&gt;(s S, c E)&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := &lt;span&gt;make&lt;/span&gt;(S, &lt;span&gt;len&lt;/span&gt;(s))&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; i, v := &lt;span&gt;range&lt;/span&gt; s {&lt;br/&gt;  r[i] = v * c&lt;br/&gt; }&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; r&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;type&lt;/span&gt; Point []&lt;span&gt;int32&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;(p Point)&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// 实现细节不重要，忽略&lt;/span&gt;&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;point&quot;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ScaleAndPrint&lt;/span&gt;&lt;span&gt;(p Point)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; r := Scale(p, &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt; fmt.Println(r.String())&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; p := Point{&lt;span&gt;3&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;}&lt;br/&gt; ScaleAndPrint(p)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4、什么时候用泛型&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型的加入，无疑增加了复杂度。我个人认为，能不用泛型就不用泛型。在演讲中，两位大佬提到，在以下场景可以考虑使用泛型：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于 slice、map、channel 等类型，如果它们的元素类型是不确定的，操作这类类型的函数可以考虑用泛型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一些通用目的的数据结构，比如前面提到的二叉树等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果一些函数行为相同，只是类型不同，可以考虑用泛型重构&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意，目前 Go 方法不支持类型参数，所以，如果方法有需要泛型的场景，可以转为函数的形式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，不要为了泛型而泛型。比如这样的泛型就很糟糕：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ReadFour&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;io&lt;/span&gt;.&lt;span&gt;Reader&lt;/span&gt;]&lt;span&gt;(r T)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而应该使用非泛型版本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;ReadFour&lt;/span&gt;&lt;span&gt;(r io.Reader)&lt;/span&gt; &lt;span&gt;([]&lt;span&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5、总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;泛型是一把双刃剑。泛型的加入，让 Go 不那么简单了。有些代码写出来，可读性可能非常差。我们应该按没有泛型时候写代码，当发现在 Repeat Yourself 时，再考虑能不能用泛型重构，千万别玩什么花样！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，放上演讲的视频地址，有兴趣的可以观看：https://www.youtube.com/watch?v=Pa_e9EeCdy8。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>