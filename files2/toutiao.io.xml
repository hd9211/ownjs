<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>73933803024018767b41c83b419771b2</guid>
<title>从MVC到DDD的架构演进</title>
<link>https://toutiao.io/k/c7mn7hz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;markdown-body mt-4&quot;&gt;
        &lt;p&gt;DDD这几年越来越火，资料也很多，大部分的资料都偏向于理论介绍，有给出的代码与传统MVC的三层架构差异较大，再加上大量的新概念很容易让初学者望而却步。本文从MVC架构角度来讲解如何演进到DDD架构。&lt;/p&gt;
&lt;h3 id=&quot;从ddd的角度看mvc架构的问题&quot;&gt;从DDD的角度看MVC架构的问题&lt;/h3&gt;
&lt;p&gt;代码角度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;瘦实体模型：只起到数据类的作用，业务逻辑散落到service，可维护性越来越差；&lt;/li&gt;
&lt;li&gt;面向数据库表编程，而非模型编程；&lt;/li&gt;
&lt;li&gt;实体类之间的关系是复杂的网状结构，成为大泥球，牵一发而动全身，导致不敢轻易改代码；&lt;/li&gt;
&lt;li&gt;service类承接的所有的业务逻辑，越来越臃肿，很容易出现几千行的service类；&lt;/li&gt;
&lt;li&gt;对外接口直接暴露实体模型，导致不必要开放内部逻辑对外暴露，就算有DTO类一般也是实体类的直接copy；&lt;/li&gt;
&lt;li&gt;外部依赖层直接从service层调用，字段转换、异常处理大量充斥在service方法中；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目管理角度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交付效率：越来越低；&lt;/li&gt;
&lt;li&gt;稳定性差：不好测试，代码改动的影响范围不好预估；&lt;/li&gt;
&lt;li&gt;理解成本高：新成员介入成本高，长期会导致模块只有一个人最熟悉，离职成本很大；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第一层初出茅庐&quot;&gt;第一层：初出茅庐&lt;/h3&gt;
&lt;p&gt;以上的问题越来越严重，很多人开始把眼光转向DDD，于是埋头啃了几本大部头的书，对以下概念有了基本的了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统一语言&lt;/li&gt;
&lt;li&gt;限界上下文&lt;/li&gt;
&lt;li&gt;领域、子域、支撑域&lt;/li&gt;
&lt;li&gt;聚合、实体、值对象&lt;/li&gt;
&lt;li&gt;分层：用户接口层、应用层、领域层、基础层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是把MVC架构进行了改造，演进成DDD的分层架构。&lt;/p&gt;
&lt;p&gt;DDD分层架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/5fKsjeq0ZqpGk7XvauObZBXrtzjMiXOpLhzJhKLUBiI.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MVC架构到DDD分层架构的映射：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/nm2JYF5eU_NhBTjnuQzNg9SJL5ViYyHKfL_myGe5ojY.jpeg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，算了基本入门了DDD架构，扩展性也得到了一定的提升。不过随着业务的发展，不断冒出新的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一段业务逻辑代码，到底应该放到应用层还是领域层？&lt;/li&gt;
&lt;li&gt;领域服务当成原来的MVC中的service层，随着业务不断发展，类也在不断膨胀，好像还是老样子啊？&lt;/li&gt;
&lt;li&gt;聚合包含多个实体类，这个接口用不到这么多实体，为了性能还是直接写个SQL返回必要的操作吧，不过这样貌似又回到了MVC模式&lt;/li&gt;
&lt;li&gt;既然实体类可以包含业务逻辑、领域服务也可以放业务逻辑，那到底放哪里？&lt;/li&gt;
&lt;li&gt;资料上说领域层不能有外部依赖，要做到100%单测覆盖，可是我的领域服务中需要用到外部接口、中央缓存等等，那这不就有了外部依赖了吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;第二层草船借箭战术设计&quot;&gt;第二层：草船借箭（战术设计）&lt;/h3&gt;
&lt;p&gt;带着问题不断学习他人经验，并不断的尝试，逐渐get到以下技能：&lt;/p&gt;
&lt;h4 id=&quot;1领域层&quot;&gt;1、领域层&lt;/h4&gt;
&lt;p&gt;领域（domain）是个模块，包含以下组成部分，传统的service按功能可能拆分到任何一个地方，各司其职。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1个聚合&lt;/li&gt;
&lt;li&gt;1到多个实体&lt;/li&gt;
&lt;li&gt;若干值对象&lt;/li&gt;
&lt;li&gt;多个DomainService&lt;/li&gt;
&lt;li&gt;1个Factory：新建聚合&lt;/li&gt;
&lt;li&gt;1个Repository：聚合仓储服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;聚合根aggregateroot&quot;&gt;聚合根（AggregateRoot）&lt;/h5&gt;
&lt;p&gt;聚合本身也是一个实体，聚合可以包含其他实体，其他实体不能脱离聚合而单独提供服务，比如一篇文章下的评论，评论必须从属于文章，没有文章也就没有评论。仓库层（repository）也必须是以聚合为核心提供服务的；&lt;/p&gt;
&lt;p&gt;实体：可以理解为一张数据库表，必须有主键；&lt;/p&gt;
&lt;p&gt;值对象：没有主键，依附于实体而存在，比如用户实体下住址对象，一般在数据库中已json字符串的形式存在；最常见的值对象是枚举；&lt;/p&gt;
&lt;h5 id=&quot;仓库服务repository&quot;&gt;仓库服务（repository）&lt;/h5&gt;
&lt;p&gt;资源库是聚合的仓储机制，外部世界通过资源库，而且只能通过资源库来完成对聚合的访问。资源库以聚合的整体管理对象。因此，一个聚合只能有一个资源库对象，那就是以聚合根命名的资源库。除此之外的其他对象，都不应该提供资源库对象。仓储服务的实现一般有Spring Data JPA、Mybatis两种方式。&lt;/p&gt;
&lt;p&gt;如果是用Spring Data JPA实现，直接使用JPA注解@OneToOne、@OneToMany，配合fetch配置，即可一个方法查询出所有的关联实体。&lt;/p&gt;
&lt;p&gt;如果是用Mybatis实现，那么repository需要加入多个mapper的引用，再手动做拼装。&lt;/p&gt;
&lt;p&gt;这里有一个经典的Hibernate笛卡尔积问题，答案是在聚合根中，一般不会加在大量的关联实体对象。如果确实需要查询关联对象而关联对象又比较多怎么办呢？在DDD中有一个CQRS(Command-Query Responsibility Segregation)模式，是一种读写分离模式，在此场景中需要将查询操作放到查询命令中分页查询。&lt;/p&gt;
&lt;p&gt;当然CQRS也是一个很复杂模式，不应照搬他人方案，而是根据自己的业务场景选择适合自己的方案，以下列举了CQRS的几种应用模式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/RBQqPimBOS1s4cpPxkHAlxZFpyhdQ4bcSfkzJu_1pGQ.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;工厂服务factory&quot;&gt;工厂服务（factory）&lt;/h5&gt;
&lt;p&gt;作用是创建聚合，只传入必要的参数，工厂服务内部隐藏复杂的创建逻辑。简单的聚合可以直接通过new、静态方法等创建，不是必须由factory创建。&lt;/p&gt;
&lt;h5 id=&quot;领域服务&quot;&gt;领域服务&lt;/h5&gt;
&lt;p&gt;单个实体对象能处理的逻辑放到实体里，多个实体或有交互的场景放到领域服务里。&lt;/p&gt;
&lt;p&gt;领域服务可不可以调用仓储层或外部接口？ 可以，但不能直接和领域服务代码放一起，领域服务模块存放API，实现放基础层（infrastructure）。&lt;/p&gt;
&lt;p&gt;领域服务对象不建议直接以聚合名+DomainService命名，而要以操作命令关联，比如用户保存服务命名为：UserSaveService, 审核服务：UserAuditSerivce。&lt;/p&gt;
&lt;h4 id=&quot;2应用层&quot;&gt;2、应用层&lt;/h4&gt;
&lt;p&gt;应用层通过应用服务接口来暴露系统的全部功能。在应用服务的实现中，它负责&lt;strong&gt;编排和转发&lt;/strong&gt;，它将要实现的功能委托给一个或多个领域对象来实现，它本身只负责处理业务用例的执行顺序以及结果的拼装。通过这样一种方式，它隐藏了领域层的复杂性及其内部实现机制。&lt;/p&gt;
&lt;p&gt;比如下订单服务的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Plain&quot;&gt;public void submitOrder(Long orderId) {
    Order order = OrderFetchService.fetchById(orderId);   //获取订单对象
    OrderCheckSerivce.check(order);    //验证订单是否有效
    OrderSubmitSerivce.submit(order);  //提交订单
    ShoppingCartClearService.clear(order);  //移除购物车中已购商品
    NotifySerivce.emailNotify(order.getUser());  //发送邮件通知买家
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于复杂的业务来说，应用层也有几种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编排服务：最典型比如Drools；&lt;/li&gt;
&lt;li&gt;Command、Query命令模式；&lt;/li&gt;
&lt;li&gt;业务按Rhase、Step逐层拆分模式；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/hVk44fi54NRfIpszQndvINbvAW_wpEX2MM1u10Jz488.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;3maven模块划分&quot;&gt;3、Maven模块划分&lt;/h4&gt;
&lt;p&gt;基础层是比较简单一层，不过这里还有个比较疑惑的问题：按照DDD的四层架构图去划分Maven模块，基础层是最上的一层，但是基础层也要包含基础组件供其他层使用，这时基础层应该是放到最下层，直接按照这样构建Maven模块会造成循环依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/-yfk48fv1-8tdlIQi9NXhhT85G1229lmVCYgmqhCJCw.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相比来说，另一个架构图更准确一些，不过依然没有直观体现Maven模块如何划分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/SBZB_QjiM_JcIm4Bwbv8EoUhnhjaKPp50A_000GaiwU.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我的最佳实践是将基础层拆分两部分，一部分是基础的组件+仓储API，一部分是实现，maven模块划分图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/0tlMJCqf85yTrqKHDYkdgArjLtIzShP12CUQoX8_zhU.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;第三层运筹帷幄战略设计&quot;&gt;第三层：运筹帷幄（战略设计）&lt;/h3&gt;
&lt;p&gt;经过以上的两层的磨炼，恭喜你把DDD战术都学习完了，应付日常的代码开发也够了，不过作为架构师来说，探索的道路还不能止步于此，接下来会DDD战略部分。战略部分关注点有3个：&lt;/p&gt;

&lt;h5 id=&quot;1统一语言&quot;&gt;1、统一语言&lt;/h5&gt;
&lt;p&gt;统一语言的重要性可以根据Jeff Patton 在《用户故事地图》中给出的一副漫画来直观的描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/Qltdl7WxKJoQgq9hzp94skZxw_SLjRXyCmm9KVz3WlY.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;统一语言是提炼领域知识的输出结果，也是进行后续需求迭代及重构的基础，统一语言的建立有以下几个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统一语言必须以文档的形式提供出来，并且在整个项目组的各团队达成共识；&lt;/li&gt;
&lt;li&gt;统一语言必须每个中文名有对应的英文名，并且在整个技术栈保持一致；&lt;/li&gt;
&lt;li&gt;统一语言必须是完整的，包含以下要素：
&lt;ol&gt;
&lt;li&gt;领域模型的概念与逻辑；&lt;/li&gt;
&lt;li&gt;界限上下文（Bounded Context）；&lt;/li&gt;
&lt;li&gt;系统隐喻；&lt;/li&gt;
&lt;li&gt;职责的分层；&lt;/li&gt;
&lt;li&gt;模式（patterns）与惯用法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2领域划分&quot;&gt;2、领域划分&lt;/h5&gt;
&lt;p&gt;以事件风暴的形式（Event Storming），列出所有的用户故事（Use Story），用户故事可通过&lt;strong&gt;6W模型&lt;/strong&gt;来构建，即描写场景的 &lt;strong&gt;W&lt;/strong&gt;ho、&lt;strong&gt;W&lt;/strong&gt;hat、&lt;strong&gt;W&lt;/strong&gt;hy、&lt;strong&gt;W&lt;/strong&gt;here、&lt;strong&gt;W&lt;/strong&gt;hen 与 ho&lt;strong&gt;W&lt;/strong&gt; 六个要素。然后圈选功能相近的部分，就形成了领域，领域又根据职能不同划分为：核心域、支撑域、通用域，&lt;/p&gt;
&lt;p&gt;具体的过程有很多参考资料，这里不再细讲，最终的输出是领域划分图，以下是一个保险业务示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/GQaI_aQ2C9MeqT7kQ5_VXbv-4WAp-K-Hn3bJUf9cIxQ.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;3限界上下文&quot;&gt;3、限界上下文&lt;/h5&gt;
&lt;p&gt;限界上下文包含两部分：上下文（Context）是业务目标，限界（Bounded）则是保护和隔离上下文的边界。&lt;/p&gt;
&lt;p&gt;比如上图中的实现部分即是限界上下文的边界，虚线部分代表了领域的边界。限界上下文没有统一的划分标准，需要的读者根据自己的业务场景来甄别如何划分。&lt;/p&gt;
&lt;p&gt;一个上下文中包含了相同的领域知识，角色在上下文中完成动作目标；&lt;/p&gt;
&lt;p&gt;边界体现在以下几方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;领域逻辑层&lt;/strong&gt;：确定了领域模型的业务边界，维护了模型的完整性与一致性，从而降低系统的业务复杂度；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;团队合作层&lt;/strong&gt;：限界上下文一般也是用户换分团队的依据；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术实现层&lt;/strong&gt;：限界上下文可当成是微服务的划分边界；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ddd的不足&quot;&gt;DDD的不足&lt;/h3&gt;
&lt;p&gt;DDD架构作为一套先进的方法论，在很多场景能发挥很大价值，但是DDD也不是银弹。高级的架构师把DDD架构当成一种工具，结合其他架构经验一起为业务服务。&lt;/p&gt;
&lt;p&gt;DDD的不足有几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性能：DDD是基于聚合来组织代码，对于高性能场景下，加载聚合中大量的无用字段会严重影响性能，比如报表场景中，直接写SQL会更简单直接；&lt;/li&gt;
&lt;li&gt;事务：DDD中的事务被限定在限界上下文中，跨多个限界上下文的场景需要开发者额外考虑分布式事务问题；&lt;/li&gt;
&lt;li&gt;难度系数高，推广成本大：DDD项目需要领域专家专家，且需要特别熟悉业务、建模、OOP，对于管理者来说评估一个人是否真的能胜任也是一件困难的事情；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;本文从MVC架构开始讲述了如何从演进到DDD架构，限于篇幅很多DDD的知识点没有讲到，希望大家在实践过程中能灵活运用，尽享DDD给业务带来的价值。本文如有不足之处敬请反馈。&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a href=&quot;https://lesofn.com/archives/mvn-to-ddd-architecture&quot;&gt;从MVC到DDD的架构演进&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者简介：木小丰，美团Java技术专家，专注分享软件研发实践、架构思考。欢迎关注公共号：&lt;strong&gt;Java研发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogpic.chekuspace.com/二维码小_1607785087313.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

    &lt;/article&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0cb616a6e1beafcd5919f0e8021879bd</guid>
<title>超快速定位OOM，值得收藏</title>
<link>https://toutiao.io/k/f8d9xam</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;strong&gt;大家好，我是冰河~~&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天给大家推荐一篇我的好朋友—子牙兄弟的文章，这个男人手撸过JVM、JMM、synchronized、线程池、NIO…&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ef6ec1428bf1a5d9741a7e981f5d5a88&quot;&gt;&lt;span&gt;金三银四跳槽季将至，估计小伙伴们都在备战，来问问题的也多了起来，尤其是问OOM与JVM调优相关的问题。只能感叹，大家都太不容易了。明明只是小白、明明只想找份工作、明明没有机会接触到OOM与调优……却被现实逼着要去搞懂JVM、OOM、调优……本篇文章是结合大厂与小厂的同学们问的问题，结合我的工作经历整理总结而来。看懂、理解、背下来，当面试官再问你OOM与调优，一定被你征服。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;eaf1f6a1344a1c42c7fb11888c06aadd&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ce260f9c33749a2f6c7988ad325e5897&quot;&gt;&lt;span&gt;看完这篇文章，大家能获得的知识：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0284aeb3141c6dc128f47ba20a0feef9&quot;&gt;&lt;span&gt;1、什么是OOM&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;819934ee8151350ae6aafd529bfa6af4&quot;&gt;&lt;span&gt;2、为什么会发生OOM&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4546fcd35d4a8c3d5653fbd2b199d023&quot;&gt;&lt;span&gt;3、哪些区域会发生OOM&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0c7a579d96c74c1ce243120b262e5393&quot;&gt;&lt;span&gt;4、JVM进程挂了，会有哪些可能性&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5938f9584dae6074ef5dbb392290c915&quot;&gt;&lt;span&gt;5、生产环境的JVM无响应了，如何快速定位问题&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9e45f9c1c3e1c8e5b20f1041e67f9975&quot;&gt;&lt;span&gt;6、子牙老师给你的一些成熟的调优建议&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;01&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;什么是OOM&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b66ca7ee2b510eae5d1affabf454f450&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b66ca7ee2b510eae5d1affabf454f450&quot;&gt;&lt;span&gt;OOM是Out Of Memory的缩写。即内存溢出。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b66ca7ee2b510eae5d1affabf454f450&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;b89ce7efabe13c3a82c9cc946b1581af&quot;&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;02&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;为什么会发生OOM&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;47679bdff78248b83510aba2c49981d5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1c780c005b32f96efab09880a7623e03&quot;&gt;&lt;span&gt;如果面试官问这个问题，我知道每个人都能说一大堆，但是我希望大家就回答下面三句话，言简意赅：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1c780c005b32f96efab09880a7623e03&quot;&gt;&lt;/p&gt;&lt;ol data-lake-id=&quot;380598011a3cc9e480f1b25f285b77e7&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务正常运行起来就需要比较多的内存，而给JVM设置的内存过小。具体表现就是程序跑不起来，或者跑一会就挂了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GC回收内存的速度赶不上程序运行消耗内存的速度。出现这种情况一般就是往list、map中填充大量数据，内存紧张时JVM拆东墙补西墙补不过来了。所以查询记得分页啊！不需要的字段，尤其是数据量大的字段，就不要返回了！比如文章的内容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存在内存泄漏情况，久而久之也会造成OOM。哪些情况会造成内存泄漏呢？比如打开文件不释放、创建网络连接不关闭、不再使用的对象未断开引用关系、使用静态变量持有大对象引用……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;03&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;哪些区域会发生OOM&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3ae49e390eb640600288a8affd553974&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d091f96abb704de94babfec425341a53&quot;&gt;&lt;span&gt;JVM运行时数据区五个区域中，除了程序计数器不会发生OOM，其他区域都有可能。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e59080922880d1f6077a20e083705584&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;36098d190d5864dd6589e3afd0450bea&quot;&gt;&lt;span&gt;除了元空间、本地方法栈、虚拟机栈、堆外，还有一块区域大家容易忽略，即直接内存。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;780728f0ee390b32342734e5ebe9a6da&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6b7c5478682eb2bbb12f61cffeea8ed3&quot;&gt;&lt;span&gt;不知道什么是直接内存？看这张图&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;6b7c5478682eb2bbb12f61cffeea8ed3&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7768456375838926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDHBiau3pZKadnGX0p2fsT43qm1M1ko5ezFNwJIjymX47mIFkqTreUQKSg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;596&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;模拟这五个区域的OOM，可能有些小伙伴不知道程序怎么写，我已经给大家写好测好了，后台回复领取：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;OOM&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.790224032586558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDHvggCRqmqibEEvmd3TAglfkc0KfIgy5FAb0ZkCXGFYPXM6MS35nOWSRQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;491&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;可能有些小伙伴又要说了：搞挂JVM，我有无数的办法，可怎么让它一直活着或活得更久更好呢？之前写过调优相关的文章 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwOTE2MDQyNA==&amp;amp;mid=2247483800&amp;amp;idx=1&amp;amp;sn=0fbafa1a6ef9f8fbc432d40a4ac12bbb&amp;amp;chksm=9779501fa00ed90933e151a1a2baadd0ef1e861b69770bb6197be1555740d721f802f8e4a69e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;传送门&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;span&gt;传送门&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;04&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;JVM挂了有哪些可能性&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2769720f2c1e2d990eeed296a147e168&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f3f062d49ed299eabd49267de157ceda&quot;&gt;&lt;span&gt;从Windows系统角度说，JVM进程如果不是你手动关闭的，那就是OOM导致的。但是在Linux下就不一定了，因为Linux系统有一种保护机制：OOM Killer。这个机制如果展开来说又能说一堆，这里我就大概说下吧，这个机制是Unix内核独有的，它的出现是为了保证系统在可用内存较少的情况下依旧能够运行，会选择杀掉一些分值较高的进程来回收内存。这个分值是Unix内核根据一些参数动态计算出来的，当然，我们也可以改变，感兴趣的小伙伴百度学习吧。作为Java程序员，了解到这个程度基本够用了，再底层的话，很多面试官也不知道，也不会问。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a950c3a54f94f832c04dc472939e52fc&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;764e2c45676d546f7b1a9b4e039dba1f&quot;&gt;&lt;span&gt;除了OOM Killer，剩下的就是OOM导致JVM进程挂了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;05&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;生产环境如何快速定位问题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ecc3de17c0da9489720e3ac00a2e8db9&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8916e44ed7293e3b238f23fb20c34ba6&quot;&gt;&lt;span&gt;如果面试官问你这个问题；如果你们公司的生产环境出现过这样的问题；如果你想解决却束手无策……照着这个流程去说去做即可。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;730943ef4c68dde62fbf05359d030aac&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;163fe9b4287ff4d034211f0aa12f4b0b&quot;&gt;&lt;span&gt;前面说了，算上直接内存，共有五个区域会发生OOM：直接内存、元空间、本地方法栈、虚拟机栈、元空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0257df37cdaed543af2cfc2741ccb16e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7c629b6cf9d4da0662ce93097fbebe80&quot;&gt;&lt;span&gt;本地方法栈与虚拟机栈的OOM咱们可以不用管，为什么呢？因为这两个区域的OOM你在开发阶段或在测试阶段就能发现。GET到了吗？小伙伴们。所以这两个区域的OOM是不会生成dump文件的。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f3025fa7e3f4aad58764a96591cf5c2b&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2ba56e48c569699f2ac6d16c4886139a&quot;&gt;&lt;span&gt;好，开始正题。如果生产环境JVM挂了，这时候不要慌，有节奏的来分析来排除。首先排除是不是被Linux杀死了，怎么看呢？通过命令[sudo egrep -i -r &#x27;Out Of&#x27; /var/log]查看，如果是，关闭一些服务，或者把一些服务移走，腾出点内存。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;62335e2e040088ed7338137d620f6e36&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.20744186046511628&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDHjm1Nu19lGyHVzQa91BC7feByJGgMJxDoxLb03AdiawohCQTI98KlxRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1075&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果不是，这时候就可以确定是OOM导致的，那具体是哪个OOM导致的呢？看有没有生成dump文件。如果生成了，要么是堆OOM，要么是元空间OOM；如果没生成，直接可以确定是直接内存导致的OOM。怎么解决呢？调优呗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.35015290519877673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDHvXo0o884TKuFyXfqfhq9tX9ROqV4r86s6ciavUIeWFgxicDPL5LgribMg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我这边是生成了的，所以需要进一步排查，是堆OOM还是元空间OOM。这时候需要把dump文件从服务器上下载下来，用visualvm分析。当前其他工具如MAT、JProfiler都可以，我习惯用visualvm。很多小伙伴不会看dump日志哈，子牙老师教给你诀窍，学会了，受益无穷。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.15934065934065933&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDH0tOmwOaHlxI4BdkNzy3ThJe1ibNwyZ53HAyO1succuuhElP3oMGrrqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;728&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你发现发生OOM的位置是创建对象，调用构造方法之类的代码，那一定是堆OOM。&amp;lt;init&amp;gt;就是构造方法的字节码格式。所以学点JVM底层知识还是有必要的啊。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3578088578088578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/E88SOazia0iccibZclRpO9SGCnjByyCyuDHR9icgKDQfKNZrVolhysZZoDvqHIiagcqzEvYWwR25eXpKzly8oFT8OAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;858&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;cca43bcbed844194aa76aa24c92ccc59&quot;&gt;&lt;span&gt;如果你发现发生OOM的位置是类加载器那些方法，那一定是元空间OOM。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c0176102c1860f9ca11c9438dffe4bc0&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;41586e8913b9353009a3f69a36fba781&quot;&gt;&lt;span&gt;怎么样，学会了吗？&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1517e239fc8f7afdc90442f64b32d81d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;068534b8a81552a27e8fec457b3b9fdd&quot;&gt;&lt;span&gt;如果发生OOM让JVM自动dump内存的设置你没开，那你可以跑路了，老板正在赶来的路上，手上拿着大刀！&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;068534b8a81552a27e8fec457b3b9fdd&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;068534b8a81552a27e8fec457b3b9fdd&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为了让大家更好的理解，我画成了流程图。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;后台回复领取：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;OOM&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;068534b8a81552a27e8fec457b3b9fdd&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.765906362545018&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/E88SOazia0iccNCHgWg9nz1DvfC9pwCYuR0KOuQaYYIH7AuvQ7m9BJn97x2EdH7UcalMz3v2ia0qpsjtiby5Jrq0rQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;833&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;068534b8a81552a27e8fec457b3b9fdd&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;06&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;一些成熟的建议&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;bc3584da97bb5bb8008fe4267f08994f&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3b89cfa540fda283a9b8dd3d31e01d0b&quot;&gt;&lt;span&gt;接下来才是重点，我来给你一些实战经验，让你在面试中或工作中更加自信：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3b89cfa540fda283a9b8dd3d31e01d0b&quot;&gt;&lt;/p&gt;&lt;ol data-lake-id=&quot;da976a9d1c6402c0bc28ca7f9e89b6e5&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;调优参数务必加上-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=，发生OOM让JVM自动dump出内存，方便后续分析问题解决问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;堆内存不要设置的特别大，因为你设置的特别大，发生OOM时生成的dump文件就特别大，不好分析。建议不超过8G。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;想主动dump出JVM的内存，有挺多方式，但不管哪种方式，主动dump内存会引发STW，请择时操作。即通过arthas提供的命令heapdump主动dump出JVM的内存，这个操作会引发FGC，背后是STW，操作时请选择好时机，不然老板可能提刀来见。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我提供的代码务必拉下来跑跑，找下感觉。最好是自己也去写一份与我提供的不同的，加深理解，加深印象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.03496503496503497&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9xJfHKo2Wussa2gjmILvRNicNkfo5IRUwpO54ow496Lrv7E8Cpv2rib6mRM6erRKzTLBjkZQVibTibgxApY7VvWicwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;286&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;span&gt;你好，我是子牙。十余年技术生涯，一路披荆斩棘从小白到技术总监到大厂中间件到创业。技术栈如汇编、C语言、C++、Windows内核、Linux内核及特别喜欢研究虚拟机底层实现，对JVM有深入研究。分享的文章偏硬核，很硬的那种。不考虑交个朋友吗？&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;关注&lt;/span&gt;&lt;/span&gt;&lt;span&gt;硬核子牙&lt;/span&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwOTE2MDQyNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/sz_mmbiz_png/E88SOazia0icdmo1EiaVR1lSDEMZMAHeKrtOAOtFaC5pXc0NRmqKNQMocsUCP3hA8hozeTuZnFmhqicibzJID7eZTdw/0?wx_fmt=png&quot; data-nickname=&quot;硬核子牙&quot; data-alias=&quot;yingheziya&quot; data-signature=&quot;对编程语言的设计与实现有浓厚兴趣。聚焦Hotspot源码、Linux内核研究，硬核干货分享&quot; data-from=&quot;0&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;span&gt;目前在做手写JVM小班，我知道大家底层都很薄弱，我的想法就是以手写JVM为契机帮助大家打底层基础，感兴趣的可以点进去看看。超良心教学。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIwOTE2MDQyNA==&amp;amp;mid=2247485337&amp;amp;idx=1&amp;amp;sn=733012f40bbcd8fede92bf0965178737&amp;amp;chksm=9779561ea00edf08e7da75899a2ad3dbb59aa18304f9d1f2a129a802c513aa6d8456de08f92a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46194225721784776&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/E88SOazia0icf2HR6wYs1QnFZVIIwQepA3fs3QMZJreKrnSWuAb7ASlvvhwDsrCf6AdH4oic0rYlSoM0Ekf9U7bPg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3618e48190a424b1d00c6b2dc2568b78&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;技术交流群&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我喜欢分享，缺乏素材。如果你在研究JVM的过程中，或者在工作中，遇到问题，不知道问谁，问我。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果你到今天还没有人脉，找工作只能投简历，你渴望打破这个局面。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果……加我微信，咱们做个朋友。我拉你进群，加入牙家军一起卷。一个人的梦想很小，一群人的梦想很大！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0060240963855422&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/E88SOazia0icdyWK4UXs33eQeScdWDzjK1hoO2LrfNQj8EnI7HgAPNIclVhUX2TiahhxTLRZJGLThiahGqX2N4mH9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;332&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c0532edb2ab293637e36a852db7f3ee8</guid>
<title>程序员思维：老公和儿子的区别</title>
<link>https://toutiao.io/k/eoom3nh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNjAxODg4MQ==&amp;amp;action=getalbum&amp;amp;album_id=2135674072645582850#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2135674072645582850&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#非技术&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;6个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9BJLbORF2a8HticRGibO5YwWsCFBvUmdpa0uvWccrDBnNX2hib1SQp8w5yTcHOEI8HSp9BttNGOGGBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;车厘子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我和老公下班都很晚，因怕影响宿舍其他人，衣服好久没洗了。幸好我平时生活上也很注意容灾，每次买衣服都是批处理做好容灾备份。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这次实在堆太多，老公就顺口说让我明天早点下班把衣服洗了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第二天，我真的正点下班三下五除二把衣服都洗完了。还买了半斤车厘子。洗好后自己吃了不到一小半，其他留下给老公下班回来吃。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;老公下班回来看了一眼，说：&quot;果然洗了衣服，还给我买了水果，不错。&quot;然后洗刷完，旁若无人的吃起来。连一句&quot;你吃了吗&quot;都没有。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在最后还剩4个的时候，我实在气不过，说：“平分，一人两个。&lt;span&gt;” &lt;/span&gt;自己抓了两个吃掉了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;老公的心思我明白，我绝不是会亏待自己的人。并且人家也没连盆端走，仍然放在我手边上，只是连句话没有着实让人寒心。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9BJLbORF2a8HticRGibO5YwW6L5Ig4ZJMLqxqCgKTCsgONRj0RdB8pqqgHNPH8LwAtIzLLeIqSNxGA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;进口果冻&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我是个很有容灾意识的人，包里总有现金，食物和水。家里每个房间都放着些吃的。有次我跟儿子说：“这屋的进口果冻可以吃掉了，食物要定期更新防止过期。&lt;span&gt;”&lt;/span&gt;下一个周末，我刚睡醒儿子，就把一个果冻塞到我手上。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我有点懵，问儿子：“你不吃吗？&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;儿子说：“我已经吃了一个了，这个是你的。&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我想了想，对儿子说：“给你吃行吗？&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;听了这话他以迅雷不及掩耳之势几乎是抢过去三下五除二吃完了。旁边还有他爸爸的旁白解释：“他就等这一句了。”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;瞅瞅，差别就出来了。&lt;span&gt;老公&lt;/span&gt;是程序员，做的多表达的少。还不如小孩子，起码人家表达了心里装着我。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从这件事还可以这么来看，在工作中，很多人抱怨：“做的好不如说的好。&lt;span&gt;” 从我今天写的两件事上换位思考一下：做的好被看到是需要领导耗费很大的精力去自己探索和感受的。感受到了也还是希望对方能把自己的想法表达出来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然哈，工作中的切实感受：在一个好公司，能表达清楚的，往往是想清楚的人。谋定而后动，想清楚比做的多对公司的长远收益更大。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d9890d1d5a21598cc4173fd1df96b750</guid>
<title>如何打造企业通用脚手架？</title>
<link>https://toutiao.io/k/nacthxg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着前端工程化的概念越来越深入FEer心，前端开发过程的技术选型、代码规范、构建发布等流程的规范化、标准化是需要工具来保驾护航的，而不是每次都对重复工作进行手动复制粘贴。脚手架则可作为工程化的辅助工具，从很大程度上&lt;strong&gt;为前端研发提效&lt;/strong&gt;。&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MjcxNTQ0Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0dLQzNJW15CVaCoNjposvTpccciaj05o5nPiaqfLRRfTQiaYFYPN41Etrrqt8jPOWukPmJWt3lYxwuA/0?wx_fmt=png&quot; data-nickname=&quot;全栈修仙之路&quot; data-alias=&quot;FerRoad&quot; data-signature=&quot;专注分享 TS、Vue3、前端架构和源码解析等技术干货。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;脚手架是什么？&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那脚手架是什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在以往工作中，我们可能需要先做如下操作才能开始编写业务代码：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;技术选型&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;初始化项目，选择包管理工具，安装依赖&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;编写基础配置项&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置本地服务，启动项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开始编码&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着&lt;code&gt;Vue/React&lt;/code&gt;的兴起，我们可以借助官方提供的脚手架&lt;code&gt;vue-cli&lt;/code&gt;或&lt;code&gt;create-react-app&lt;/code&gt;在命令行中通过&lt;strong&gt;选择&lt;/strong&gt;或&lt;strong&gt;输入&lt;/strong&gt;来按我们的要求和喜好快速生成项目。它们能&lt;strong&gt;让我们专注于代码，而不是构建工具。&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;脚手架能力&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这些脚手架是针对于具体语言（Vue/React）的，而在我们实际工作中不同BU针对不同端（PC、Wap、小程序...）所采用的技术栈也可能不同，往往特定端采用的技术栈在一定程度上都可以复用的到其他类似项目中。我们更期望能在命令行通过几个命令和选择、输入构建出不同端不同技术栈的项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9404494382022472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p2kPDSm7GdYyRkHg2sgV5L3dnQ8ic2CdYGhwKcftrqr31Nibg12iaFM0eQj63DRd4Zn10yAzY8HkMoqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1780&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述只是新建项目的例子，前端开发过程中不止于此，一般有如下场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;创建项目+集成通用代码&lt;/strong&gt;。项目模板中包含大量通用代码，比如通用工具方法、通用样式、通用请求库处理HTTP请求、内部组件库、埋点监控...&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Git操作&lt;/strong&gt;。一般需要手动在&lt;code&gt;Gitlab&lt;/code&gt;中创建仓库、解决代码冲突、远程代码同步、创建版本、发布打Tag...等操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;CICD&lt;/strong&gt;。业务代码编写完成后，还需要对其进行构建打包、上传服务器、域名绑定、区分测试正式环境、支持回滚...等持续集成、持续部署操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;为什么不用自动化构建工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般情况下，我们会采用&lt;code&gt;Jenkins、Gitlab CI、Webhooks等&lt;/code&gt;进行自动化构建，为什么还需要脚手架？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为这些自动化构建工具都是在服务端执行的，在云端就无法覆盖研发同学本地的功能，比如上述创建项目、本地&lt;code&gt;Git&lt;/code&gt;操作等；并且这些自动化工具定制过程需要开发插件，前端同学对语言和实现需要一定学习和时间成本，前端同学也更期望只使用&lt;code&gt;JavaScript&lt;/code&gt;就能实现这些功能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;脚手架核心价值&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，前端脚手架存在意义重大。脚手架的核心目标是提升前端研发整个流程的效能。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自动化&lt;/strong&gt;。避免项目重复代码拷贝删改的场景；将项目周期内的Git操作自动化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;标准化&lt;/strong&gt;。快速根据模板创建项目；提供&lt;code&gt;CICD&lt;/code&gt;能力。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;数据化&lt;/strong&gt;。通过对脚手架自身埋点统计，将耗时量化，形成直观对比。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;往往各个公司对于&lt;strong&gt;自动化&lt;/strong&gt;和&lt;strong&gt;标准化&lt;/strong&gt;的部分功能&lt;code&gt;Git操作、CICD&lt;/code&gt;都有实现一套完善的类似于&lt;strong&gt;代码发布管理系统&lt;/strong&gt;，帮助我们在&lt;code&gt;Gitlab&lt;/code&gt;上管理项目，并提供&lt;strong&gt;持续集成、持续部署&lt;/strong&gt;的能力。更有甚者，针对&lt;strong&gt;小程序的项目&lt;/strong&gt;也会对其进行代码发布管理，将其规范化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可能就只需要考虑&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;创建项目+集成通用代码&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;常见痛点的解决方案（快速生成页面并配置路由...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;配置（eslint、tsconfig、prettier...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提效工具（拷贝各种文件）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;插件（解决webpack构建流程中的某个问题...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面则介绍我们在公司内部基于这些场景所做的尝试。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;使用脚手架&lt;/span&gt;&lt;/h2&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先在终端通过&lt;code&gt;focus create projectName&lt;/code&gt;命令新建一个项目。其中&lt;code&gt;focus&lt;/code&gt;表示&lt;strong&gt;主命令&lt;/strong&gt;，&lt;code&gt;create&lt;/code&gt;表示&lt;strong&gt;command&lt;/strong&gt;，&lt;code&gt;projectName&lt;/code&gt;表示&lt;strong&gt;command的param&lt;/strong&gt;。然后根据终端交互去&lt;strong&gt;选择和输入&lt;/strong&gt;最终生成项目。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7976501305483029&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qMicvibdvl7p3EQOqlQQmJicqMDTq1hCTMaR01I4icQm0afEhrCOKzlLyGS0bUPfQCLyiagbFvvSatdXTiaoLPuH9SwQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1532&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们为各个BU、各个端、各个技术栈提供不同模板项目，于此同时，每个同学都能将小组内的项目沉淀并提炼成一个模板项目，并按一定规范集成到脚手架中，反哺整个BU。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;@focus/cli&lt;/code&gt;架构&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下架构图，采用Lerna做项目的管理工具，目前babel、vue-cli、create-react-app大型项目均采用&lt;code&gt;Lerna&lt;/code&gt;进行管理。它的优势在于：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;大幅减少重复操作&lt;/strong&gt;。多个&lt;code&gt;Package&lt;/code&gt;时的本地link、单元测试、代码提交、代码发布，可以通过&lt;code&gt;Lerna&lt;/code&gt;一键操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;提升操作的标准化&lt;/strong&gt;。多个&lt;code&gt;Package&lt;/code&gt;时的发布版本和相互依赖可以通过&lt;code&gt;Lerna&lt;/code&gt;保持一致性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5411655874190564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p2kPDSm7GdYyRkHg2sgV5L3v0XRic15oSsIUAhvicAOdgdfRvPGqY741kPqxkaovowNk5v9yFqFTPtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2162&quot;/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;@focus/cli&lt;/code&gt;脚手架中，根据功能进行拆分：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@focus/cli&lt;/code&gt;存放脚手架主要功能&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;focus create projectName&lt;/code&gt;拉取模板项目&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;focus add material&lt;/code&gt;新建物料，可以是一个&lt;code&gt;package、page、component...&lt;/code&gt;粒度可大可小&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;focus cache&lt;/code&gt;清除缓存、配置文件信息、临时存放的模板&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;focus domain&lt;/code&gt;拷贝配置文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;focus upgrade&lt;/code&gt;更新脚手架版本，也有自动询问更新机制&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;@focus/eslint-config-focus-fe&lt;/code&gt;存放组内统一的&lt;code&gt;eslint&lt;/code&gt;规则&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;也可通过&lt;code&gt;focus add material&lt;/code&gt;新建&lt;code&gt;子Package&lt;/code&gt;实现特定功能...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;依赖项概览&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个脚手架核心功能需要依赖以下基础库去做支撑。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;chalk：控制台字符样式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;commander：node.js命令行接口的完整解决方案&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;fs-extra：增强的基础文件操作库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;inquirer：实现命令行之间的交互&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ora：优雅终端Spinner等待动画&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;axios：结合&lt;code&gt;Gitlab API&lt;/code&gt;获取仓库列表、Tags...&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;download-git-repo：从&lt;code&gt;Github/Gitlab&lt;/code&gt;中拉取仓库代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;consolidate ：模板引擎整合库。主要使用&lt;code&gt;ejs&lt;/code&gt;实现模板字符替换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ncp ：像&lt;code&gt;cp -r&lt;/code&gt;一样拷贝目录、文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;metalsmith ：可插入的静态网站生成器；例如获取到根据用户自定义的输入或选择配合&lt;code&gt;ejs&lt;/code&gt;渲染变量后的最终内容后，通过它做插入修改。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;semver ：获取库的有效版本号&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;ini ：一个用于节点的ini格式解析器和序列化器。主要是对配置做编码和解码。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;jscodeshift ：可以解析文件将代码从&lt;code&gt;AST-to-AST&lt;/code&gt;。例如新建一个页面后需要在&lt;code&gt;routes.ts&lt;/code&gt;中新建一份路由。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;采用&lt;code&gt;Typescript&lt;/code&gt;编码，使用&lt;code&gt;babel&lt;/code&gt;编译。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;除了&lt;code&gt;tsc&lt;/code&gt;之外，&lt;code&gt;babel7&lt;/code&gt;也能编译&lt;code&gt;typescript&lt;/code&gt;代码了，这是两个团队合作一年的结果。但是&lt;code&gt;babel&lt;/code&gt;因为单文件编译的特点，做不了和&lt;code&gt;tsc&lt;/code&gt;的多文件类型编译一样的效果，有几个特性不支持（主要是 &lt;code&gt;namespace&lt;/code&gt; 的跨文件合并、导出非 &lt;code&gt;const&lt;/code&gt; 的值），不过影响不大，整体是可用的。&lt;code&gt;babel&lt;/code&gt; 做代码编译，还是需要用 &lt;code&gt;tsc&lt;/code&gt; 来进行类型检查，单独执行 &lt;code&gt;tsc --noEmit&lt;/code&gt; 即可。引用自&lt;span&gt;为什么说用 babel 编译 typescript 是更好的选择&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;{&lt;br/&gt;  &lt;span&gt;&quot;scripts&quot;&lt;/span&gt;: {&lt;br/&gt;    &lt;span&gt;&quot;dev&quot;&lt;/span&gt;: &lt;span&gt;&quot;npx babel src -d lib -w -x \&quot;.ts, .tsx\&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;build&quot;&lt;/span&gt;: &lt;span&gt;&quot;npx babel src -d lib -x \&quot;.ts, .tsx\&quot;&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;lint&quot;&lt;/span&gt;: &lt;span&gt;&quot;eslint src/**/*.ts --ignore-pattern src/types/*&quot;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;&quot;typeCheck&quot;&lt;/span&gt;: &lt;span&gt;&quot;tsc --noEmit&quot;&lt;/span&gt;&lt;br/&gt;  },  &lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;pre-commit&lt;/code&gt;中需要先&lt;code&gt;npm run lint &amp;amp;&amp;amp; npm run typeCheck&lt;/code&gt;再&lt;code&gt;build&lt;/code&gt;最后才能提交代码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;focus create projectName&lt;/code&gt;核心流程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对依赖项做了初步了解并做好准备工作后，我们再来了解核心功能&lt;code&gt;focus create xxx&lt;/code&gt;的流程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8118908382066277&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p2kPDSm7GdYyRkHg2sgV5L3BLZCdPS443SjibII75FX2cMKXL4rxowEviaMIO2ZxhlFTS5vJbY3bPaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2052&quot;/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在终端运行&lt;code&gt;focus create xxx&lt;/code&gt;，会先借助&lt;code&gt;figlet&lt;/code&gt;打印logo&lt;/section&gt;&lt;section&gt;·借助&lt;code&gt;semver&lt;/code&gt;获取有效版本号后，设置&lt;code&gt;N天&lt;/code&gt;后自动检测最新版本提示是否要更新&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;结合&lt;code&gt;Gitlab API&lt;/code&gt;能力通过&lt;code&gt;axios&lt;/code&gt;拉取&lt;strong&gt;所有的模板项目&lt;/strong&gt;并罗列以供选择&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择具体模板后，拉取该&lt;strong&gt;模板所有Tags&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;选择具体Tag后，需要安装依赖时所需要的包管理工具&lt;code&gt;npm/yarn&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用&lt;code&gt;download-git-repo&lt;/code&gt;在&lt;code&gt;Gitlab&lt;/code&gt;中拉取具体模板具体Tag，并缓存到&lt;code&gt;.focusTemplate&lt;/code&gt;中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果模板项目中没提供&lt;code&gt;ask-for-cli.js&lt;/code&gt;文件，则使用&lt;code&gt;ncp&lt;/code&gt;直接拷贝代码到本地&lt;/section&gt;&lt;section&gt;·如果存在则使用&lt;code&gt;inquirer&lt;/code&gt;根据用户输入和选择渲染（&lt;code&gt;consolidate.ejs&lt;/code&gt;）变量最终通过&lt;code&gt;metalsmith&lt;/code&gt;遍历所有文件做插入修改&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;安装依赖，并执行&lt;code&gt;git init&lt;/code&gt;初始化仓库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;完成&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;核心代码实现&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中值得关注的在&lt;strong&gt;第6步&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;src/create/index.ts&lt;/code&gt;中实现拷贝&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 拷贝操作&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; (!fs.existsSync(path.join(result, CONFIG.ASK_FOR_CLI &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;))) {&lt;br/&gt;  &lt;span&gt;// 不存在直接拷贝到本地&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; ncp(result, path.resolve(projectName));&lt;br/&gt;  successTip();&lt;br/&gt;} &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; args = &lt;span&gt;require&lt;/span&gt;(path.join(result, CONFIG.ASK_FOR_CLI &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;));&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Promise&lt;/span&gt;&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt;&lt;span&gt;(&lt;span&gt;(&lt;span&gt;resolve, reject&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;    MetalSmith(&lt;span&gt;__dirname&lt;/span&gt;)&lt;br/&gt;      .source(&lt;span&gt;result&lt;/span&gt;)&lt;br/&gt;      .destination(&lt;span&gt;path.resolve(&lt;span&gt;projectName&lt;/span&gt;)&lt;/span&gt;)&lt;br/&gt;      .use(&lt;span&gt;&lt;span&gt;async&lt;/span&gt; (&lt;span&gt;files, metal, done&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;        &lt;span&gt;// requiredPrompts 没有时取默认导出&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; obj = &lt;span&gt;await&lt;/span&gt; Inquirer.prompt(&lt;span&gt;args.requiredPrompts || args&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; meta = metal.metadata(&lt;span/&gt;);&lt;br/&gt;        &lt;span&gt;Object&lt;/span&gt;.assign(&lt;span&gt;meta, obj&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;delete&lt;/span&gt; files[CONFIG.ASK_FOR_CLI];&lt;br/&gt;        done(&lt;span&gt;&lt;span&gt;null&lt;/span&gt;, files, metal&lt;/span&gt;);&lt;br/&gt;      }&lt;/span&gt;)&lt;br/&gt;      .use(&lt;span&gt;(&lt;span&gt;files, metal, done&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; obj = metal.metadata(&lt;span/&gt;);&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; effectFiles = args.effectFiles || [];&lt;br/&gt;        Reflect.ownKeys(&lt;span&gt;files&lt;/span&gt;).forEach(&lt;span&gt;&lt;span&gt;async&lt;/span&gt; (&lt;span&gt;file&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;          &lt;span&gt;// effectFiles 为空时 就都需要遍历&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;effectFiles.length === 0 || effectFiles.includes(&lt;span&gt;file&lt;/span&gt;)&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;let&lt;/span&gt; content = files[file &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;].contents.toString(&lt;span/&gt;);&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;/&amp;lt;%=(&lt;span&gt;[\s\S]+?&lt;/span&gt;)%&amp;gt;/g.test(&lt;span&gt;content&lt;/span&gt;)&lt;/span&gt;) {&lt;br/&gt;              content = &lt;span&gt;await&lt;/span&gt; ejs.render(&lt;span&gt;content, obj&lt;/span&gt;);&lt;br/&gt;              files[file &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;].contents = Buffer.&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;content&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;          }&lt;br/&gt;        }&lt;/span&gt;);&lt;br/&gt;        successTip(&lt;span/&gt;);&lt;br/&gt;        done(&lt;span&gt;&lt;span&gt;null&lt;/span&gt;, files, metal&lt;/span&gt;);&lt;br/&gt;      }&lt;/span&gt;)&lt;br/&gt;      .build(&lt;span&gt;(&lt;span&gt;err&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;err&lt;/span&gt;) {&lt;br/&gt;          reject(&lt;span/&gt;);&lt;br/&gt;        } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;          resolve(&lt;span/&gt;);&lt;br/&gt;        }&lt;br/&gt;      }&lt;/span&gt;);&lt;br/&gt;  }&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;ask-for-cli.js&lt;/code&gt;中配置变量&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 需要根据用户填写修改的字段&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; requiredPrompts = [&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;input&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;repoNameEn&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;message&lt;/span&gt;: &lt;span&gt;&#x27;please input repo English Name ? (e.g. `smart-case`.focus.cn)&#x27;&lt;/span&gt;,&lt;br/&gt;  },&lt;br/&gt;  {&lt;br/&gt;    &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;input&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;name&lt;/span&gt;: &lt;span&gt;&#x27;repoNameZh&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;message&lt;/span&gt;: &lt;span&gt;&#x27;please input repo Chinese Name ?(e.g. `智慧案场`)&#x27;&lt;/span&gt;,&lt;br/&gt;  },&lt;br/&gt;];&lt;br/&gt;&lt;span&gt;// 需要修改字段所在文件&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; effectFiles = [&lt;br/&gt;  &lt;span&gt;`README.md`&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`code/package.json`&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`code/client/package.json`&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;`code/client/README.md`&lt;/span&gt;,&lt;br/&gt;  &lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;]&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = {&lt;br/&gt;  requiredPrompts,&lt;br/&gt;  effectFiles,&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;README.md&lt;/code&gt;中使用ejs变量语法占位&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;## &amp;lt;%=repoNameZh%&amp;gt;项目&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;访问地址 &lt;span&gt;&amp;lt;&lt;span&gt;%=repoNameEn%&lt;/span&gt;&amp;gt;&lt;/span&gt;.focus.cn&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如用户输入&lt;code&gt;repoNameEn&lt;/code&gt;值为&lt;code&gt;smart-case&lt;/code&gt;，&lt;code&gt;repoNameZh&lt;/code&gt;值为&lt;code&gt;智慧案场&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终会将&lt;code&gt;README.md&lt;/code&gt;渲染成如下内容&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;## 智慧案场项目&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;访问地址 smart-case.focus.cn&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还能将&lt;strong&gt;变量&lt;/strong&gt;使用到项目的其他配置，例如&lt;code&gt;publicPath、base、baseURL...&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过以上步骤实现了项目的初始化，组内的新同学不必关注各种繁琐的配置，即可愉快的进入业务编码。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;code&gt;focus add material&lt;/code&gt;核心流程&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开发一个页面的过程中，你可能需要如下几个步骤&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/pages/&lt;/code&gt;新建&lt;code&gt;NewPage&lt;/code&gt;目录，以及&lt;code&gt;index.tsx/index.less/index.d.ts&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/models/&lt;/code&gt;新建&lt;code&gt;NewPage.ts&lt;/code&gt;文件，去做状态管理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/servers/&lt;/code&gt;新建&lt;code&gt;NewPage.ts&lt;/code&gt;文件，去管理接口调用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;config/routes.ts&lt;/code&gt;文件中插入一条&lt;code&gt;NewPage&lt;/code&gt;的路由&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每次新增页面都需要这么繁琐的操作，我们其实也能将以上步骤集成到脚手架中，通过一行命令、选择即可得到效果。&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7976501305483029&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/qMicvibdvl7p3EQOqlQQmJicqMDTq1hCTMarAXMvleKto5QfJa90E7iaCAib1Ih2sKEebhu00QeYrpdiavT0J8Ik9PMw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1532&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;大致思路如下&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;事先准备好&lt;code&gt;index.tsx/index.less/index.d.ts/models.ts/servers.ts&lt;/code&gt;模板，可根据功能再做细分，例如常见的&lt;code&gt;List&lt;/code&gt;页面、&lt;code&gt;Drawer&lt;/code&gt;组件...&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将模板拷贝到指定的目录下&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;利用&lt;code&gt;jscodeshift&lt;/code&gt;读取项目的路由配置文件，然后插入一条路由&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;完成&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33830455259026687&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p2kPDSm7GdYyRkHg2sgV5L3RnKMW7nuicyDl6TVw9xeIpTgKJ2esb7iaBicJh3slTcQOFNa6iby2ibOiavw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2548&quot;/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;核心代码实现&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/add/umi.page/template.ts&lt;/code&gt;中准备好&lt;code&gt;jsContent/cssContent/modelsContent/servicesContent&lt;/code&gt;模板&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; jsContent = &lt;span&gt;`&lt;br/&gt;import React from &#x27;react&#x27;;&lt;br/&gt;import &#x27;./index.less&#x27;;&lt;br/&gt;interface IProps {}&lt;br/&gt;const Page: React.FC&amp;lt;IProps&amp;gt; = (props) =&amp;gt; {&lt;br/&gt;  console.log(props);&lt;br/&gt;  return &amp;lt;div&amp;gt;Page&amp;lt;/div&amp;gt;;&lt;br/&gt;};&lt;br/&gt;`&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; cssContent = &lt;span&gt;`&lt;br/&gt;// TODO: write here ...&lt;br/&gt;`&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; modelsContent = &lt;span&gt;(&lt;span&gt;upperPageName: &lt;span&gt;string&lt;/span&gt;, lowerPageName: &lt;span&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (&lt;span&gt;`&lt;br/&gt;import type { Effect, Reducer } from &#x27;umi&#x27;;&lt;br/&gt;import {&lt;br/&gt;  get&lt;span&gt;${upperPageName}&lt;/span&gt;List,&lt;br/&gt;} from &#x27;@/services/&lt;span&gt;${lowerPageName}&lt;/span&gt;&#x27;;&lt;br/&gt;&lt;br/&gt;export type &lt;span&gt;${upperPageName}&lt;/span&gt;ModelState = {&lt;br/&gt;  &lt;span&gt;${lowerPageName}&lt;/span&gt;List: {&lt;br/&gt;    list: any[];&lt;br/&gt;  };&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;export type &lt;span&gt;${upperPageName}&lt;/span&gt;ModelType = {&lt;br/&gt;  namespace: string;&lt;br/&gt;  state: &lt;span&gt;${upperPageName}&lt;/span&gt;ModelState;&lt;br/&gt;  effects: {&lt;br/&gt;    get&lt;span&gt;${upperPageName}&lt;/span&gt;List: Effect;&lt;br/&gt;  };&lt;br/&gt;  reducers: {&lt;br/&gt;    updateState: Reducer;&lt;br/&gt;  };&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;const &lt;span&gt;${upperPageName}&lt;/span&gt;Model: &lt;span&gt;${upperPageName}&lt;/span&gt;ModelType = {&lt;br/&gt;  namespace: &#x27;&lt;span&gt;${lowerPageName}&lt;/span&gt;&#x27;,&lt;br/&gt;&lt;br/&gt;  state: {&lt;br/&gt;    &lt;span&gt;${lowerPageName}&lt;/span&gt;List: {&lt;br/&gt;      list: [],&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  effects: {&lt;br/&gt;    *get&lt;span&gt;${upperPageName}&lt;/span&gt;List({ payload }, { call, put }) {&lt;br/&gt;      const res = yield call(get&lt;span&gt;${upperPageName}&lt;/span&gt;List, payload);&lt;br/&gt;      yield put({&lt;br/&gt;        type: &#x27;updateState&#x27;,&lt;br/&gt;        payload: {&lt;br/&gt;          &lt;span&gt;${lowerPageName}&lt;/span&gt;List: {&lt;br/&gt;            list: res ? res.map((l: any) =&amp;gt; ({&lt;br/&gt;              ...l, &lt;br/&gt;              id: l.&lt;span&gt;${lowerPageName}&lt;/span&gt;Id,&lt;br/&gt;              key: l.&lt;span&gt;${lowerPageName}&lt;/span&gt;Id,&lt;br/&gt;            })) : []&lt;br/&gt;          },&lt;br/&gt;        },&lt;br/&gt;      });&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;&lt;br/&gt;  reducers: {&lt;br/&gt;    updateState(state, action) {&lt;br/&gt;      return {&lt;br/&gt;        ...state,&lt;br/&gt;        ...action.payload,&lt;br/&gt;      };&lt;br/&gt;    },&lt;br/&gt;  },&lt;br/&gt;};&lt;br/&gt;export default &lt;span&gt;${upperPageName}&lt;/span&gt;Model;&lt;br/&gt;`&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; servicesContent = &lt;span&gt;(&lt;span&gt;upperPageName: &lt;span&gt;string&lt;/span&gt;, lowerPageName: &lt;span&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (&lt;span&gt;`&lt;br/&gt;import { MainDomain } from &#x27;@/utils/env&#x27;;&lt;br/&gt;import request from &#x27;./decorator&#x27;;&lt;br/&gt;export async function get&lt;span&gt;${upperPageName}&lt;/span&gt;List(&lt;br/&gt;  params: any,&lt;br/&gt;): Promise&amp;lt;any&amp;gt; {&lt;br/&gt;  return request(\`\${MainDomain}/&lt;span&gt;${lowerPageName}&lt;/span&gt;\`, {&lt;br/&gt;    params,&lt;br/&gt;  });&lt;br/&gt;}&lt;br/&gt;`&lt;/span&gt;);&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/add/umi.page/index.ts&lt;/code&gt;中将拷贝的目的地址和模板做映射&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; fs &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;fs&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; path &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;path&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; jf &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;jscodeshift&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; {&lt;br/&gt;  cssContent,&lt;br/&gt;  jsContent,&lt;br/&gt;  modelsContent,&lt;br/&gt;  servicesContent,&lt;br/&gt;} &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;./template&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { firstToUpper, getUmiPrefix } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;../../../utils/util&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { IGenerateRule } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;../../../index.d&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = (cwdDir: &lt;span&gt;string&lt;/span&gt;, pageName: &lt;span&gt;string&lt;/span&gt;): &lt;span&gt;&lt;span&gt;IGenerateRule&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; lowerPageName = pageName.toLocaleLowerCase();&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; upperPageName = firstToUpper(pageName);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; pagesPrefix = getUmiPrefix(cwdDir, &lt;span&gt;&#x27;src/pages&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; modelsPrefix = getUmiPrefix(cwdDir, &lt;span&gt;&#x27;src/models&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; servicesPrefix = getUmiPrefix(cwdDir, &lt;span&gt;&#x27;src/services&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; routesPrefix = getUmiPrefix(cwdDir, &lt;span&gt;&#x27;config&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; routesPath = path.resolve(cwdDir, &lt;span&gt;`&lt;span&gt;${routesPrefix}&lt;/span&gt;/routes.ts`&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; routeContent = fs.readFileSync(routesPath, &lt;span&gt;&#x27;utf-8&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; routeContentRoot = jf(routeContent);&lt;br/&gt;  routeContentRoot.find(jf.ArrayExpression)&lt;br/&gt;    .forEach(&lt;span&gt;(&lt;span&gt;p, pIndex&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (pIndex === &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;        p.get(&lt;span&gt;&#x27;elements&#x27;&lt;/span&gt;).unshift(&lt;span&gt;`{&lt;br/&gt;  path: &#x27;/&lt;span&gt;${pageName}&lt;/span&gt;&#x27;, // TODO: 是否需要菜单调整位置？&lt;br/&gt;  name: &#x27;&lt;span&gt;${pageName}&lt;/span&gt;&#x27;,&lt;br/&gt;  component: &#x27;./&lt;span&gt;${upperPageName}&lt;/span&gt;&#x27;,&lt;br/&gt;}`&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;    });&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    [&lt;span&gt;`&lt;span&gt;${pagesPrefix}&lt;/span&gt;/&lt;span&gt;${upperPageName}&lt;/span&gt;/index.tsx`&lt;/span&gt;]: jsContent,&lt;br/&gt;    [&lt;span&gt;`&lt;span&gt;${pagesPrefix}&lt;/span&gt;/&lt;span&gt;${upperPageName}&lt;/span&gt;/index.less`&lt;/span&gt;]: cssContent,&lt;br/&gt;    [&lt;span&gt;`&lt;span&gt;${modelsPrefix}&lt;/span&gt;/&lt;span&gt;${lowerPageName}&lt;/span&gt;.ts`&lt;/span&gt;]: modelsContent(upperPageName, lowerPageName),&lt;br/&gt;    [&lt;span&gt;`&lt;span&gt;${servicesPrefix}&lt;/span&gt;/&lt;span&gt;${lowerPageName}&lt;/span&gt;.ts`&lt;/span&gt;]: servicesContent(upperPageName, lowerPageName),&lt;br/&gt;    [&lt;span&gt;`&lt;span&gt;${routesPrefix}&lt;/span&gt;/routes.ts`&lt;/span&gt;]: routeContentRoot.toSource(),&lt;br/&gt;  };&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中使用&lt;code&gt;jscodeshift&lt;/code&gt;先读取项目中路由配置，找到路由的第一项，然后插入&lt;code&gt;unshift&lt;/code&gt;一条路由。&lt;/p&gt;&lt;ol start=&quot;3&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;再在&lt;code&gt;src/add/index.ts&lt;/code&gt;中读取所有的&lt;strong&gt;物料模板与映射关系&lt;/strong&gt;，最后做拷贝。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; chalk &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;chalk&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; inquirer &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;inquirer&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; path &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;path&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { getDirName } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;../../utils/util&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; writeFileTree &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;../../utils/writeFileTree&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; { UMI_DIR_ARR } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;../../utils/constants&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;module&lt;/span&gt;.exports = &lt;span&gt;async&lt;/span&gt; (pageName: &lt;span&gt;string&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; cwdDirArr = process.cwd().split(&lt;span&gt;&#x27;/&#x27;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; cwdDirTail = cwdDirArr[cwdDirArr.length - &lt;span&gt;1&lt;/span&gt;];&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!UMI_DIR_ARR.includes(cwdDirTail)) {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${chalk.red(&lt;span&gt;&#x27;please make sure in the &quot;src&quot; directory when executing the &quot;focus add material&quot; command !&#x27;&lt;/span&gt;)}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; pages = getDirName(__dirname);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (!pages.length) {&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${chalk.red(&lt;span&gt;&#x27;please support page !&#x27;&lt;/span&gt;)}&lt;/span&gt;`&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { pageType } = &lt;span&gt;await&lt;/span&gt; inquirer.prompt({&lt;br/&gt;    name: &lt;span&gt;&#x27;pageType&#x27;&lt;/span&gt;,&lt;br/&gt;    &lt;span&gt;type&lt;/span&gt;: &lt;span&gt;&#x27;list&#x27;&lt;/span&gt;,&lt;br/&gt;    message: &lt;span&gt;&#x27;please choose a type to add page&#x27;&lt;/span&gt;,&lt;br/&gt;    choices: pages,&lt;br/&gt;  });&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; generateRule = &lt;span&gt;require&lt;/span&gt;(path.resolve(__dirname, &lt;span&gt;`&lt;span&gt;${pageType}&lt;/span&gt;`&lt;/span&gt;));&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; fileTree = &lt;span&gt;await&lt;/span&gt; generateRule(process.cwd(), pageName);&lt;br/&gt;  writeFileTree(process.cwd(), fileTree);&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;4&quot; data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;src/utils/writeFileTree.ts&lt;/code&gt;中实现拷贝的逻辑&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; chalk &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;chalk&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; fs &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;fs-extra&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; path &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;path&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; writeFileTree = &lt;span&gt;async&lt;/span&gt; (dir: &lt;span&gt;string&lt;/span&gt;, files: &lt;span&gt;any&lt;/span&gt;) =&amp;gt; {&lt;br/&gt;  &lt;span&gt;Object&lt;/span&gt;.keys(files).forEach(&lt;span&gt;(&lt;span&gt;name&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; filePath = path.join(dir, name);&lt;br/&gt;    fs.ensureDirSync(path.dirname(filePath));&lt;br/&gt;    fs.writeFileSync(filePath, files[name]);&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;`&lt;span&gt;${chalk.green(name)}&lt;/span&gt; write done .`&lt;/span&gt;);&lt;br/&gt;  });&lt;br/&gt;};&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; writeFileTree;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码实现了&lt;strong&gt;快速新建一个页面&lt;/strong&gt;的场景，不仅仅于此，我们能将工作中&lt;strong&gt;在多个文件下有关联且频繁拷贝粘贴的重复操作&lt;/strong&gt;进行模板提炼，按一定规范放置在脚手架的&lt;code&gt;src/add/&lt;/code&gt;目录下即可实现&lt;strong&gt;一键新建物料&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41083099906629317&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/qMicvibdvl7p2kPDSm7GdYyRkHg2sgV5L3uuEVeJqHDjtN6iciaq5Zmicq7Bic0q3Kh4KJo0733jbEheyHTFgvicpwdyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2142&quot;/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;通用能力&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上述从&lt;code&gt;focus create projectName&lt;/code&gt;和&lt;code&gt;focus add material&lt;/code&gt;的使用和核心实现阐述了脚手架&lt;code&gt;@focus/cli&lt;/code&gt;在前端研发过程的所起到提效作用。我们实现了对&lt;strong&gt;创建项目+集成通用代码&lt;/strong&gt;和&lt;strong&gt;常见痛点的解决方案（快速生成页面并配置路由...）&lt;/strong&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;[x] &lt;strong&gt;创建项目+集成通用代码&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[x] &lt;strong&gt;常见痛点的解决方案（快速生成页面并配置路由...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[ ] &lt;strong&gt;配置（eslint、tsconfig、prettier...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[ ] &lt;strong&gt;提效工具（拷贝各种文件）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;[ ] &lt;strong&gt;插件（解决webpack构建流程中的某个问题...）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还基于特定业务场景对上面的下三项做了部分支持，使得我们在开发过程中&lt;strong&gt;重工具、轻工程&lt;/strong&gt;，大大提高了交付速度，也能让组内研发同学参与进来共同构建。比如说实现&lt;strong&gt;通过脚手架新建脚手架？通过脚手架新建一切物料？&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI2MjcxNTQ0Nw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/jQmwTIFl1V0dLQzNJW15CVaCoNjposvTpccciaj05o5nPiaqfLRRfTQiaYFYPN41Etrrqt8jPOWukPmJWt3lYxwuA/0?wx_fmt=png&quot; data-nickname=&quot;全栈修仙之路&quot; data-alias=&quot;FerRoad&quot; data-signature=&quot;专注分享 TS、Vue3、前端架构和源码解析等技术干货。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;上述代码存放在仓库&lt;span&gt;@careteen/cli&lt;/span&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;脚手架的核心目标是提升前端研发整个流程的效能。虽然脚手架没有固定形态，在不同公司有不同实现，他是有必须具备的要素。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;从功能实现的角度，要考虑与业务的高度匹配。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从底层框架的角度，要具备高度的可扩展性和执行环境多样性支持。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;引用链接：&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;38&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt; https://zhuanlan.zhihu.com/p/376867546&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;32&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;p&gt;https://github.com/careteenL/cli&lt;/p&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>875ad8426186123133338fb1d5e11eeb</guid>
<title>一本书的诞生</title>
<link>https://toutiao.io/k/xhzx1uy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;&lt;span&gt;零、背景&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;今天(2022-01-12)对我来说应该算是一个特别的日子，自己花了小半年撰写的《Flutter内核源码剖析》终于出版了。&lt;/p&gt;&lt;p&gt;思来想去，还是应该写点什么。毕竟，这件事情倾注了自己不少心血，一条简简单单的朋友圈是说不清楚的；另一方面，写书也并非什么高深莫测、遥不可及的事情。所以，最好的方法还是用最真实的文字记录下过去一年在这件事情上的投入。功过是非，自由他人评说，如果能对本文读者产生一些帮助和启发，自然是最好的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;一、契机&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;2020年下旬的时候，我因为工作内容调整，开始接触Flutter，当时可供系统研究的资料并不多，加之遇到问题时感觉自己总是囿于局部而不见整体，于是便梳理了一个Flutter相关知识点的脑图，并开始逐步研究：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7483629560336763&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7Qvth2uhBbIAokNmhy7uvYNfyHZx2dc7MxiaoknNk7as3Iy0I2FiaYHHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1069&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图1：2020年底发表的几篇文章&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;没写几篇文章后，出版社的一位编辑就通过微信公众号后台找到了我。由于我之前已经梳理了一个Flutter相关的脑图，于是写书的计划我们算是一拍即合。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9448818897637795&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO74cMOpibuqZQ7RSCFnFBUv2XePOIaVB7dU313gbnYW3Mup59or9icby9g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;635&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图2: 和编辑一拍即合，决定写书&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其中，要着重说一下关于选题。市场上关于Flutter的书当时已经有了不少，每年技术领域新出的书籍也可谓汗牛充栋。但客观来说，大多数书籍都存在&lt;br/&gt;&lt;strong&gt;同质化问题&lt;/strong&gt;，书和书之间的内容同质、书和官网上、技术社区里的内容同质，等等。&lt;/p&gt;&lt;p&gt;对于我个人来说，撷取部分这样的内容来写一本书当然也是可以的，但这样就背离了初心。所以，我一开始就明确了定位，就是往深了挖，因为我非常确定，当时市面上（现在依旧如此）没有一本系统讲述Flutter源码的书籍。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、历程&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;大概在2020年底的时候，我签订了合同，开始写作。由于之前多年的博客写作经历，以及个人对技术问题的表达颇有研究，所以在大的方向上基本没有问题。主要挑战集中在三个方面。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2.1 时间&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我当时的的工作节奏并不清闲，但幸好是双休。从2020年12月到2022年4月底交稿，我所有的周末和假期都用来写书。&lt;/p&gt;&lt;p&gt;这几个月，也算是深刻体会到了鲁迅先生的那句&quot;时间就像海绵里的水,只要愿挤,总还是有的&quot;。&lt;/p&gt;&lt;p&gt;但是，客观来说，这种节奏是非常折磨的、不适合长期维持的。所以我当时赶着在五一前交稿，好让自己安心度个长假。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2.2 内容&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;另一方面的挑战是内容，因为一开始我并没有计划写那么多，但是对于书籍的宏观设想已经决定了有些内容我必须得写，否则留下的遗憾可能是更长久的。&lt;/p&gt;&lt;p&gt;由于这些计划外的内容，自己除了写作本身，还要去调试、写Demo验证等等，有些主题自己得保证先消化透了才能动笔写。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2.3 体力&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;不得不说，写作也是一项体力活。比如画图，一开始自己计划用graphviz画图，好处是一旦定型，后面的修改管理都很方便。但是，我发现很多图由于过于复杂，用结构化文本描述的效率其实比手工绘制还要低，于是我统一换成了draw.io绘图，差不多50多张图，一张一张手绘~&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6203703703703703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7CqR0xbOqFk0YVMAHXWuOnyCzVlkZ1JtgUeg1cdNm6xE3VUESJHOjDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图3：各种手绘的配图&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;此外，由于出版社要求交稿用Word，而自己平时习惯用Vim，最后交稿的时候打字也是异常痛苦，时不时&lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;:w&lt;/code&gt; 就打进去了。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、影响&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;3.1 对工作的影响&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;客观来说，写书让自己在工作之余的恢复时间几乎没有了。但另一方面，自己在工作上遇到的问题，也得益于写书期间的积累，而得以逐一攻克。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5121638924455826&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7duyJR9ib0XqCSblN7FFMWZFiapeMbcM0Wdc5EzkQJcm159IPeYQhSAbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;781&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图4：工作期间解决的一些问题&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;3.2 对成长的影响&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;个人觉得，这是写作这本书最有价值的一部分，写作这本书，让自己从一个&quot;不知道自己不知道&quot;的阶段过渡到了&quot;知道自己不知道&quot;的阶段。&lt;/p&gt;&lt;p&gt;在此之前，自己多少对未来有点恐惧和迷茫，在写作的过程中反而渐渐释怀了。努者，奴之力也，与其被绩效、他人的评价等种种外部因素驱使驾驭，不如回归自己内心，专注在事情本身上。&lt;/p&gt;&lt;p&gt;此外，在等待出版期间，我还将本书的核心内容提炼成了一门课程：《Flutter源码导读》，讲了几次，效果都还可以，自己也从学员的反馈中受益匪浅。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3592592592592593&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7xxqR7z3Yvm9XoSHceborqJrnscd5EPcRnVej6edrC5Qn63yKdU2qJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图5：一些课程反馈&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、关于本书&lt;/span&gt;&lt;/h1&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.41203703703703703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7j8icX3aSF1OkMDI9WLQs6QuSUhwos01AaCv6KDqlmXU4aOJ3Lh4Ij4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;图6: 本书的目录大纲&lt;/p&gt;&lt;p&gt;我可以很负责任地说：我尽力了。&lt;strong&gt;如有纰漏不足，大概率不是我粗心大意，而是我彼时彼刻水平真的只有那样&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;多年以后，我希望自己回头看这本书的时候，能把它作为一部不够完美的作品，而非自己技术生涯的顶点。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、关于未来&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Peter Norvig有一篇闻名遐迩的文章 &lt;em&gt;Teach Yourself Programming in Ten Years&lt;/em&gt; ，而我的技术生涯显然还缺乏更多的历练。&lt;/p&gt;&lt;p&gt;这本书为我带来的是毁是誉，可能还得让子弹飞一会才知道。&lt;/p&gt;&lt;p&gt;但无论结果如何，我都会按照惯例，引用路遥在《早晨从中午开始》中的一段话作为我今后的注脚：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;…..是的，只要不丧失远大的使用感，或者说还保持着较为清醒的头脑，就决然不能把人生之船长期停泊在某个温暖的港湾，应该重新扬起风帆，驶向生活的惊涛骇浪中，以领略其间的无限风光。人，不仅要战胜失败，而且还要超越胜利。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;认识到自己的不足，然后去超越它。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;六、写在最后&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;放个链接（如果需要或者感兴趣就支持一下 \^_\^）：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48703703703703705&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RR7uaJDPx4olBPvXl6BMm5HqH0JZGVO7zibFT5jWiaL9koPQISdqT1K9uqfNUUH32k9ib8LQ7kyx9JWDWoGfYssxA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;图7：Flutter内核源码剖析&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>