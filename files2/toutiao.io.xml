<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>daba6d0f72d988b243cccc4d5c574be7</guid>
<title>Java 中的锁居然有这么多</title>
<link>https://toutiao.io/k/6qkwv3g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们晚上好呀~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;干货可能会迟到，但是不能缺席呀！😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;嘿嘿  这篇来讲讲锁 🔒 啦~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看完上文的 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 是不是发现有很多个 锁呀，这篇就带大家缕一缕~ 😝&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/zIjiaGEEKdYEMtm8j5FMx1CYXNE6BRlUVUeuxllVguBFyBeoxdSC9yI5Sf1KA1VTGT7TUXOfE2jqBoXYC2IRiaPA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;200&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;Java 中的锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为啥是 Java 中的锁呢， 因为 锁的种类 也有很多的，像我们平时使用的 &lt;strong&gt;「MySQL」&lt;/strong&gt;，它也有自己的 &lt;strong&gt;「表锁，行锁，间隙锁」&lt;/strong&gt; ... ... 还有 &lt;strong&gt;「基于redis 的分布式锁」&lt;/strong&gt; （&lt;strong&gt;「RedLock——红锁」&lt;/strong&gt;）呀，&lt;strong&gt;「zookeeper的分布式锁」&lt;/strong&gt; 等各种各样的🔒~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;埋个坑🕳 ~ 以后写数据库专题的时候写写 😝&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4ye 总结了一份思维导图，小伙伴们可以看看~&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5071174377224199&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEMtm8j5FMx1CYXNE6BRlUV2icsogkw9gztNtnSmm4m5icmpUMCFtbVE5CuRHNObUpyfWqYDcpmB5bg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1124&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;乐观锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到这个就不得不提下 &lt;code&gt;JAVA&lt;/code&gt; 中的 &lt;code&gt;CAS&lt;/code&gt; 了，它是这种思想的具体实现~，还记得上文 频繁出现的 &lt;code&gt;Unsafe&lt;/code&gt; 类吗，&lt;code&gt;ConcurrentHashMap&lt;/code&gt; 就是通过它去调用这个 &lt;code&gt;CAS&lt;/code&gt; （ Compare And Swap / Set ），去设置值的 😋&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读不加锁，更新数据期间会加锁（保证原子性）&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;详解：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「读数据时」&lt;/strong&gt; 会很乐观的认为别的线程没有在修改数据，所以不会上锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「写数据时」&lt;/strong&gt; 会判断当前值和期望值一不一样，一样的话会进行修改，此时修改会加锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;（这里还有些很硬核的点，涉及到硬件层面的锁~  &lt;strong&gt;「基于MESI协议滴」&lt;/strong&gt;  后面具体专题再扩展下！😝 ）&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CAS 机制、版本号机制，时间戳机制&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为什么会多后面两种机制呢，其实这里是为了解决这个 &lt;strong&gt;「ABA 问题」&lt;/strong&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;ABA问题&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;场景模拟，现在有三条线程&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程1 读取变量a，此时a=1&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程2 读取变量a，此时a=1, 比较后将它改为 a=2&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程3 读取变量a，此时a=2, 比较后将它改为 a=1&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时线程1 发现变量a 还是1 ，和原来一样，就将它改成其他值了&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以发现这个过程中 线程1 在修改值的时候，线程2,3已经修改过变量a的值了，但是它毫不知情~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以呢，为了解决这个问题，就引入了这个&lt;strong&gt;「版本号机制 或者 时间戳机制~」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实就是多比较一个值，比如 &lt;strong&gt;「每次更改时再比较下这个版本号或者时间戳对不对得上~」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;额 这里既然只讲Java ，那也不扯远啦~  嘿嘿，不过道理还是通用的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们可以参考下 这个 &lt;strong&gt;「原子类中的」&lt;/strong&gt; &lt;code&gt;AtomicStampedReference&lt;/code&gt;  ，它就解决了这个 &lt;strong&gt;「ABA 问题」&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;悲观锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个就和乐观完全相反啦~  不管读操作还是写操作，都悲观的认为会被别的线程改变，所以 &lt;strong&gt;「不管是读还是写都会 加锁」&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;悲观的认为，读写都要加锁，不然值会被其他线程改变~&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「synchronized」&lt;/strong&gt; ，&lt;strong&gt;「ReentrantLock」&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;公平锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公平嘛，要讲究先来后到  😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;多个线程按照申请锁的顺序来获取锁&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「原理」&lt;/strong&gt;：主要依赖于维护这个锁的  &lt;strong&gt;「等待队列」&lt;/strong&gt;，当队列为空时就直接占有锁, 不为空就加入到 &lt;strong&gt;「等待队列」&lt;/strong&gt; 的末尾，然后按照 &lt;strong&gt;「FIFO」&lt;/strong&gt; 的原则去获取锁。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建 &lt;strong&gt;「ReentrantLock」&lt;/strong&gt; 时，显示指定 &lt;code&gt;new ReentrantLock(true)&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实是靠这个 &lt;strong&gt;「AQS」&lt;/strong&gt; 来实现公平和非公平的，这里也埋个坑🕳 后面会详解这个专题的😋&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.10260586319218241&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEMtm8j5FMx1CYXNE6BRlUVnoMBJTZ1Z81ibarBvtuKwMavbYVLYsGph4ATryK1MObuSficCdSdIZ7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;非公平锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个就不和你讲先来后到了  😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;多个线程 不按照先到先得的方式去获取锁， 有可能后申请的线程会先得到锁~&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「原理」&lt;/strong&gt;：非公平锁会尝试获取锁，失败的话会加入到 &lt;strong&gt;「等待队列」&lt;/strong&gt; 的末尾，然后按照 &lt;strong&gt;「FIFO」&lt;/strong&gt; 的原则去获取锁 ，变成公平锁的方式~&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建 &lt;code&gt;ReentrantLock&lt;/code&gt; 时，显示指定 &lt;code&gt;new ReentrantLock(false)&lt;/code&gt;  或者使用默认的方式 &lt;code&gt;new ReentrantLock();&lt;/code&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.13785557986870897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zIjiaGEEKdYEMtm8j5FMx1CYXNE6BRlUVtKNS8hczLyXoPwl7AGve0LpdlkIPstEhciarrdJCajEdRtIElCGBiazw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;457&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;image&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有 &lt;code&gt;synchronized&lt;/code&gt; 这个关键字也是非公平的&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;独享锁(独占锁)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;独自占有锁，不和其他线程共享~ 😄   和 互斥锁，排他锁，悲观锁 同义&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;只允许一条线程占有该锁&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt; ，&lt;code&gt;ReentrantLock&lt;/code&gt; 还有 &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;  中 的 &lt;strong&gt;「写锁」&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;共享锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以和其他线程共享该锁~ 😄   和 乐观锁，读写锁 同义&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;锁可被多个线程所持有&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; ，&lt;code&gt;ReadWriteLock&lt;/code&gt;  这两个中的 &lt;strong&gt;「读锁」&lt;/strong&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;互斥锁(同步锁)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以理解为独占锁的具体实现~😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;表示该资源只能被一条线程访问，不能被其他访问&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt; ，&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;读写锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;顾名思义~ 有读锁和写锁 😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;表示该资源允许 &lt;strong&gt;「多条持有读锁的线程共同访问，但是只允许一条持有写锁的线程独占」&lt;/strong&gt;&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; ，&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里还涉及到&lt;strong&gt;「锁的降级」&lt;/strong&gt;，还有&lt;strong&gt;「可重入」&lt;/strong&gt;等一些有意思的点~ ，埋个坑🕳  后面也会写到的😋&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;可重入锁(递归锁)&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是可重入呢~  😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;当一个线程持有某个锁时，&lt;strong&gt;「可以再次获取该锁而不会导致死锁或者阻塞」&lt;/strong&gt;&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;特点：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「获取 n 次 锁 ，也要释放 n 次锁」&lt;/strong&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt; ，&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;分段锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个主要是 &lt;strong&gt;「Jdk1.7」&lt;/strong&gt; 版本 的 &lt;code&gt;CurrentHashMap&lt;/code&gt;   😄&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单回忆下~&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;&lt;code&gt;CurrentHashMap&lt;/code&gt;   中 的  &lt;code&gt;Segment&lt;/code&gt; 数组 ，put 操作时会调用 &lt;code&gt;ReentrantLock&lt;/code&gt;   的 lock 方法，锁住该 &lt;code&gt;Segment&lt;/code&gt;&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;synchronized&lt;/code&gt; ，&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;自旋锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;哈哈 看了上文之后是不是觉得这个也特眼熟呀~  😄&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小伙伴们可以参看下 &lt;code&gt;CurrentHashMap&lt;/code&gt;     中源码对这块的实现 ，如 &lt;code&gt;put&lt;/code&gt; 源码&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;让线程不断地循环，去尝试获取锁&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;实现方式：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;CAS&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里其实有很多可以扩展的，除了它的优缺点之外，还有  &lt;strong&gt;「自适应自旋」&lt;/strong&gt;  这个和 &lt;strong&gt;「虚拟机」&lt;/strong&gt; 相关的 ，埋个坑🕳 😋&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;死锁&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「情景模拟」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;线程1 拥有 资源A 的锁，线程2 拥有 资源B 的锁，但是线程1在持有A锁的情况下，还想拥有B锁。同理 线程2在持有B锁的情况下，还想拥有A锁。他们两就这样僵持着，互相等待对方释放锁🔒&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;概念：&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;锁升级&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「无锁 -&amp;gt; 偏向锁 -&amp;gt; 轻量级锁 -&amp;gt; 重量级锁」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里涉及到 &lt;strong&gt;「锁优化技术」&lt;/strong&gt;  ，后面和 &lt;strong&gt;「锁粗化」&lt;/strong&gt;，&lt;strong&gt;「锁解除」&lt;/strong&gt; 等作为一个专题写写✍&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/zIjiaGEEKdYEMtm8j5FMx1CYXNE6BRlUVTcibxlVRLBSdiaIADWM32J3fdEePDaiaJLd5wicnOdiasJh71qxBLsIGmyQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;299&quot;/&gt;&lt;figcaption&gt;&lt;span/&gt;img&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5281ffe94bdaf3c14bd5160adef2faf5</guid>
<title>这 2 个工作流自动化工具  yyds</title>
<link>https://toutiao.io/k/2beczyw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cfd8d8040bc94e58eedeeb9c9bb7d42b</guid>
<title>系统设计之路：如何设计搜索提示（二）</title>
<link>https://toutiao.io/k/an5g85n</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;接着 &lt;/span&gt;&lt;span&gt;Part 1 &lt;/span&gt;&lt;span&gt;的思路，我们来&lt;span&gt;继续&lt;/span&gt;完善搜索提示的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. &lt;/strong&gt;系统容量预估&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;请求数估算&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正常情况下，如果客户端没有对 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 做缓存处理，那么用户每输入一个字符，客户端就会向服务器发送一次搜索提示的查询请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如下图所示，用户在搜索框中输入“&lt;/span&gt;&lt;span&gt;ultraman&lt;/span&gt;&lt;span&gt;” ，每输入 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 个字符，浏览器就向服务器发送一个搜索提示请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;514&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8887122416534181&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQVAZQdQ3PEUiaB6iaGTHF7XuIibMH7C6S9xhjzweY7z6GnUI6JEgZibyvw9RhrS5jicPHQ28myHRjrWvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;629&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;图 10&lt;/span&gt;&lt;span&gt;：搜索 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;ultraman&quot; &lt;/span&gt;&lt;span&gt;过程中实际发出的请求&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，根据假设&lt;/span&gt;&lt;span&gt; II &lt;/span&gt;&lt;span&gt;和 &lt;/span&gt;&lt;span&gt;III&lt;/span&gt;&lt;span&gt;，查询一个 &lt;span&gt;query&lt;/span&gt;，平均需向服务器发送：&lt;/span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt; &lt;/span&gt;&lt;/em&gt;&lt;span&gt;*&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;次搜索请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进而，我们可以估算出：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平均每天的请求数为：&lt;/span&gt;&lt;em&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span/&gt;&lt;/em&gt;&lt;span&gt;*&lt;/span&gt;&lt;em&gt;&lt;span&gt; 5  &lt;/span&gt;&lt;/em&gt;&lt;span&gt;*&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;100,000,000 &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;亿次。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;平均每秒的请求数为：&lt;em&gt;&lt;span&gt;1,500,000,000&lt;/span&gt;&lt;/em&gt; / &lt;/span&gt;&lt;em&gt;&lt;span&gt;(3600 * 24) &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;  &lt;/span&gt;&lt;em&gt;&lt;span&gt;1.7 &lt;/span&gt;&lt;/em&gt;&lt;span&gt;万次。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;存储容量估算&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来估算一下磁盘空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设每天 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 亿次查询中，只有 &lt;/span&gt;&lt;span&gt;20%&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 是唯一的，其他的都是重复查询。即，每天去重后的&lt;/span&gt; &lt;span&gt;query &lt;/span&gt;&lt;span&gt;数量为： &lt;/span&gt;&lt;em&gt;&lt;span&gt;100,000,000&lt;/span&gt;&lt;/em&gt;&lt;span&gt; * &lt;/span&gt;&lt;em&gt;&lt;span&gt;0.2&lt;/span&gt;&lt;/em&gt;&lt;span&gt;= &lt;/span&gt;&lt;em&gt;&lt;span&gt;20,&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;000,000&lt;/span&gt;&lt;/em&gt; &lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;与此同时，每天也会产生一些新的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。假设每天新产生的查询 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 占当天去重后的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数量的 &lt;/span&gt;&lt;span&gt;10%&lt;/span&gt;&lt;span&gt;，即：&lt;em&gt;&lt;span&gt;20,000,000&lt;/span&gt;&lt;/em&gt; &lt;em&gt;&lt;span&gt;* 0.1&lt;/span&gt;&lt;/em&gt; = &lt;em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;2,000,000&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，这 &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; 万的新增 &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;需占用磁盘空间： &lt;em&gt;&lt;span&gt;2,&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;000,000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt; * &lt;/span&gt;&lt;em&gt;&lt;span&gt;15 byte&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt; = 30 M&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每月新增&lt;span&gt; &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;需占用磁盘空间&lt;/span&gt;： &lt;/span&gt;&lt;em&gt;&lt;span&gt;30&lt;/span&gt;&lt;/em&gt;&lt;span&gt; * &lt;/span&gt;&lt;em&gt;&lt;span&gt;30&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;em&gt;&lt;span&gt;M&lt;/span&gt;&lt;/em&gt; = &lt;/span&gt;&lt;em&gt;&lt;span&gt;900 M&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每年新增&lt;span&gt; &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;需占用磁盘空间&lt;/span&gt;：&lt;em&gt;&lt;span&gt;365&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;* &lt;em&gt;&lt;span&gt;30 M&lt;/span&gt;&lt;/em&gt; &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;/span&gt; &lt;/span&gt;&lt;em&gt;&lt;span&gt;11 G&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;年新增&lt;span&gt; &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;需占用磁盘空间&lt;/span&gt;：&lt;em&gt;&lt;span&gt;10&lt;/span&gt;&lt;/em&gt; * &lt;em&gt;&lt;span&gt;365&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;* &lt;em&gt;&lt;span&gt;30 M&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;  &lt;/span&gt;&lt;em&gt;&lt;span&gt;110 G&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些原始的 &lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数据，通常以数据库或文件的形式存储在磁盘中。所以，要存储近 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;年的所有原始&lt;/span&gt;&lt;span&gt; query &lt;/span&gt;&lt;span&gt;数据，预计需要几百 &lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt; 的磁盘空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再来分析一下内存占用情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来看一下一个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点需占用多少内存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照之前对 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的定义：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Trie&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; String prefix;          &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;float&lt;/span&gt; rank;             &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; Queue&amp;lt;Trie&amp;gt; topKList;   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Trie&amp;gt; childNodes;  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;根据前文对前缀长度&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;L = 20 &lt;/span&gt;&lt;span&gt;的限定&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;prefix &lt;/span&gt;&lt;span&gt;最少占用 &lt;/span&gt;&lt;span&gt;1 byte&lt;/span&gt;&lt;span&gt;，最多占用 &lt;/span&gt;&lt;span&gt;20 byte&lt;/span&gt;&lt;span&gt;，排序值 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 固定为 &lt;/span&gt;&lt;span&gt;4 byte&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;topKList&lt;/span&gt;&lt;span&gt; 存放 &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; 个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 节点的引用，假设 &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt; 位机上已开启指针压缩，那么会占用：&lt;/span&gt;&lt;span&gt;10  *  4 = 40 byte&lt;/span&gt;&lt;span&gt;，英文环境下，&lt;/span&gt;&lt;span&gt;childNodes&lt;/span&gt;&lt;span&gt; 最多有 &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt; 个子节点，最多需占用：&lt;/span&gt;&lt;span&gt;26 * 4 = 104 byte&lt;/span&gt;&lt;span&gt;。&lt;span&gt;开启指针压缩&lt;/span&gt;的情况下，&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt; 对象头占用 &lt;/span&gt;&lt;span&gt;12 byte&lt;/span&gt;&lt;span&gt;，所以一个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点最多占用：&lt;/span&gt;&lt;span&gt;20 byte + 4 byte + 40 byte + 104 byte + 12 byte = 180 byte&lt;/span&gt;&lt;span&gt;，考虑内存地址的字节对齐，一个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点约需占用 &lt;/span&gt;&lt;span&gt;184 byte&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们需要考虑把哪些 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 放入 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。由于每个人输入的搜索关键词千差万别，所以大部分的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 其实是很低频的，甚至是没有语义的，我们没有必要把这部分 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 放入内存。为了达到这个过滤效果，可以给每一个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 计算一个 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 值，&lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 值受搜索次数和时间的影响，具体计算见下文 &lt;strong&gt;&quot;&lt;/strong&gt;&lt;strong&gt;数据搜集服务&quot; &lt;/strong&gt;小节。计算出 &lt;span&gt;rank&lt;/span&gt;&lt;span&gt; &lt;/span&gt;值后，只有&lt;/span&gt;&lt;span&gt; rank&lt;/span&gt;&lt;span&gt; 值超过阈值的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 才能进入内存。我们假设每天有 &lt;/span&gt;&lt;span&gt;20 %&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 能符合要求，那么每天新增的 &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; 万 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，过滤后可以放入 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的只有 &lt;/span&gt;&lt;span&gt;40 &lt;/span&gt;&lt;span&gt;万，即：&lt;em&gt;&lt;span&gt;&lt;em&gt;2,000,000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt; * &lt;/span&gt;&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt; = &lt;em&gt;&lt;span&gt;&lt;em&gt;400,000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设存储 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 平均需要创建 &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; 个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 节点，那么 &lt;/span&gt;&lt;span&gt;40&lt;/span&gt;&lt;span&gt; 万个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 共会生成 &lt;span&gt;400&lt;/span&gt;&lt;span&gt; 万个 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点&lt;/span&gt;，即： &lt;em&gt;&lt;span&gt;&lt;em&gt;400,000 * 10 = 4&lt;em&gt;&lt;span&gt;,&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;000,000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于相同前缀的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 可以共享相同的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点，在英文环境下，我们假设有 &lt;/span&gt;&lt;span&gt;30 %&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt;&lt;span&gt; 节点是可以共享的，那么最终需创建的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 节点的个数为：&lt;em&gt;&lt;span&gt;4,&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;000,000 * &lt;/em&gt;&lt;/span&gt;&lt;/em&gt; &lt;em&gt;&lt;span&gt;&lt;em&gt;0.7 = 2, &lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;800, 000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，每天新增的 &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; 万 &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;经过一系列处理后，共需占用内存：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt;2, 800, 000 * 184 byte = 515, 200,000&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt; 约为 &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt; &lt;/em&gt;M&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然英文单词的数量是有限的，常用的英文单词在 &lt;/span&gt;&lt;span&gt;3000~5000&lt;/span&gt;&lt;span&gt; 个左右，但 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 却可以由不同的单词组成，所以理论上 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的数量是没有上限的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，每天新增的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 需占用 &lt;span&gt;500&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;M&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;内存，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每月&lt;span&gt;新增的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 需&lt;/span&gt;占用内存：&lt;/span&gt;&lt;em&gt;&lt;span&gt;30&lt;/span&gt;&lt;/em&gt;&lt;span&gt; * &lt;/span&gt;&lt;em&gt;&lt;span&gt;500&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;em&gt;&lt;span&gt;M&lt;/span&gt;&lt;/em&gt; &lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;  &lt;/span&gt;&lt;em&gt;&lt;span&gt;15 G&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每年&lt;span&gt;新增的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 需&lt;/span&gt;占用内存：&lt;em&gt;&lt;span&gt;365&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;* &lt;em&gt;&lt;span&gt;500 M&lt;/span&gt;&lt;/em&gt; &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;  &lt;/span&gt;&lt;em&gt;&lt;span&gt;180 G&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;年&lt;span&gt;新增的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 需&lt;/span&gt;占用内存：&lt;em&gt;&lt;span&gt;10&lt;/span&gt;&lt;/em&gt; * &lt;em&gt;&lt;span&gt;365&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt;* &lt;em&gt;&lt;span&gt;500 M&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;&lt;em&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;≅&lt;/span&gt;&lt;/em&gt;  &lt;/span&gt;&lt;em&gt;&lt;span&gt;1.8 P&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;5. &lt;/strong&gt;&lt;strong&gt;Trie&lt;/strong&gt; 树的扩容策略&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到目前为止，我们都是假设经过处理后&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&lt;span&gt; 都能存储在同&lt;/span&gt;一棵 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，经过上述的分析，当系统达到每天需处理 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 亿次搜索请求的时候，即使单台内存是 &lt;/span&gt;&lt;span&gt;64 G&lt;/span&gt;&lt;span&gt; 的服务器，差不多撑个 &lt;/span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;个月也快爆了。这时如果再去继续升级服务器内存，来作垂直扩容已经不现实了。考虑到系统整体的可扩展性、可用性以及高吞吐能力，我们需要采用水平扩容的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么，接下来的问题就是，定期重建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的时候，怎么对 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 做分区&lt;/span&gt;&lt;span&gt;(sharding)&lt;/span&gt;&lt;span&gt;，把数据打散后，尽量均匀地分布到每台服务器，最终可以在每台服务器上分别建立大小合适的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们来看一下几种常用的 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt; 策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 策略 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 按字母序做 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，所有以字母 &lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;a&quot;&lt;/span&gt;&lt;span&gt; 开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 建一棵 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树 &lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;，这样所有以 &lt;/span&gt;&lt;span&gt;&quot;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 开头的查询请求，都会路由到树 &lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt; 所在的服务器。所有以字母 &lt;/span&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;&lt;span&gt; 开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 建一棵 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树 &lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;， 这样所有以 &lt;/span&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;&lt;span&gt; 开头的查询请求，都会路由到树 &lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt; 所在的服务器。以此类推，共创建 &lt;/span&gt;&lt;span&gt;26&lt;/span&gt;&lt;span&gt; 棵 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种策略很简单，也很粗暴。但通常也能解决&lt;span&gt;短期内的&lt;/span&gt;问题。简单粗暴带来的主要问题是：可能导致服务器之间的数据和负载不平衡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;I. 数据不平衡：所有以字母 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&quot; &lt;/span&gt;开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 会放在一个分区中，&lt;span&gt;以字母 &lt;span&gt;&quot;z&quot; &lt;/span&gt;开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 放在其他分区中&lt;/span&gt;。&lt;span&gt;经过统计后，可能会发现&lt;/span&gt;以 &lt;span&gt;&quot;a&quot;&lt;/span&gt; 开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 远多于&lt;span&gt;以 &lt;span&gt;&quot;z&quot; &lt;/span&gt;开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;，导致不同服务器的内存使用率很不一致，有的内存占用过多，有的接近闲置。甚至有可能存放 &lt;span&gt;&lt;span&gt;&quot;a&quot; &lt;/span&gt;开头的 &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;太多，多到把服务器的内存撑爆。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;II. 负载不平衡：&lt;span&gt;可能&lt;/span&gt;许多用户的查询关键词以 &lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;w&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 开头，但很少以 &lt;/span&gt;&lt;span&gt;&quot;z&quot;&lt;/span&gt;&lt;span&gt; 开头。这样会导致存放 &lt;/span&gt;&lt;span&gt;&quot;z&quot;&lt;/span&gt;&lt;span&gt; 开头 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的服务器很闲，而&lt;/span&gt;&lt;span&gt;存放 &lt;/span&gt;&lt;span&gt;&quot;w&quot;&lt;/span&gt;&lt;span&gt; 开头 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的服务器&lt;/span&gt;&lt;span&gt;负载却很高。负载高的服务器很可能会宕机，且重启后很可能会再次宕机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 策略 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 按单机内存容量做 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种策略下，在重建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的时候会根据单台服务器的最大内存容量来做 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt;。当然，也不能把全部内存用来建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，这里的 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;最大内存&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; &lt;span&gt;可以定义&lt;/span&gt;为实际最大物理内存的 &lt;/span&gt;&lt;span&gt;80%&lt;/span&gt;&lt;span&gt;。只要服务器占用的内存还没达到 &lt;span&gt;&quot;&lt;/span&gt;最大内存&lt;span&gt;&quot;&lt;/span&gt;，就可以继续新增 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点来存放 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。当&lt;span&gt;服务器的&lt;/span&gt;可用内存到达阈值，就停止新增 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树&lt;span&gt;节点&lt;/span&gt;，然后在下一台服务器上对后续的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 继续构建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，重复这个过程直至处理完所有的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：假设第 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 台服务器中的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树存储了前缀从 &lt;/span&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;span&gt; 到 &lt;/span&gt;&lt;span&gt;&quot;bas&quot;&lt;/span&gt;&lt;span&gt; 的所有 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，那么第&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;&lt;span&gt; 台服务器的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树就存储前缀从 &lt;/span&gt;&lt;span&gt;&quot;bat&quot;&lt;/span&gt;&lt;span&gt; 开始的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&quot;bat&quot; &lt;/span&gt;&lt;span&gt;开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 存完了就接着存 &lt;/span&gt;&lt;span&gt;&quot;bau&quot;&lt;/span&gt;&lt;span&gt; 开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。假设第 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 台服务器最多可以存完以&lt;/span&gt;&lt;span&gt; &quot;faang&quot; &lt;/span&gt;&lt;span&gt;为前缀的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，即第 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 台服务器存储的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的前缀范围为：&lt;/span&gt;&lt;span&gt;&quot;bat&quot;&lt;/span&gt;&lt;span&gt; ~ &lt;/span&gt;&lt;span&gt;&quot;faang&quot;&lt;/span&gt;&lt;span&gt;。那么，第 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; 台服务器就存放以&lt;/span&gt;&lt;span&gt; &quot;fab&quot;&lt;/span&gt;&lt;span&gt; 为前缀的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，假设能存完以&lt;/span&gt;&lt;span&gt; &quot;oj&quot;&lt;/span&gt;&lt;span&gt; 开头的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。剩余其他的服务器，按照这个规律类推。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设当前的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 可以全部放在 &lt;/span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;台服务器上。下表展示了各服务器上 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; &lt;span&gt;的&lt;span&gt;前缀&lt;/span&gt;&lt;/span&gt;分布情况。&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;服务器名&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;前缀字符起止范围&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Server 1&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&quot;a&quot;    ~ &quot;bas&quot;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;Server 2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;&quot;bat&quot; ~ &quot;faang&quot;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;Server 3&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;&quot;fab&quot; ~ &lt;span&gt;&quot;oj&quot;&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;Server 4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;&quot;ok&quot;&lt;/span&gt; &lt;span&gt; ~&lt;/span&gt; &quot;&lt;span&gt;zu&lt;/span&gt;&quot;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;表 3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;服务器与前缀范围之间的映射关系确定之后，&lt;/span&gt;我们还需把它存储起来。这样，当用户输入关键词查询时，我们就可以根据前缀范围，将请求转发到该前缀所在的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是，一次新的用户搜索请求，可能需要跨多台服务器查询，再对多台服务器返回的结果做 &lt;/span&gt;&lt;span&gt;merge&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，如果用户输入&lt;/span&gt;&lt;span&gt;&quot;b&quot;&lt;/span&gt;&lt;span&gt;，根据前缀和分片的映射关系，就会去&lt;span&gt;分别请求&lt;/span&gt; &lt;span&gt;Server 1 (&lt;/span&gt;前缀范围：&lt;span&gt;&quot;a&quot; ~ &quot;bas&quot;) &lt;/span&gt;和 &lt;span&gt;Server 2&lt;/span&gt; (前缀范围：&lt;/span&gt;&lt;span&gt;&quot;bat&quot; ~ &quot;faang&quot;&lt;/span&gt;&lt;span&gt;)，最后将结果做 &lt;/span&gt;&lt;span&gt;merge&lt;/span&gt;&lt;span&gt;，并&lt;span&gt;按 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;&lt;span&gt; 值排序&lt;/span&gt;，最后返回 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 个结果。接着，如果用户继续输入&lt;/span&gt;&lt;span&gt;&quot;e&quot;&lt;/span&gt;&lt;span&gt;，这时前缀为 &lt;span&gt;&quot;be&quot;&lt;/span&gt;，只需向 &lt;span&gt;Server 2 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;发送请求&lt;/span&gt;&lt;span&gt;就可以了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 能有效地将数据进行分片，构建起大小适合的 &lt;/span&gt;&lt;span&gt;Trie &lt;/span&gt;&lt;span&gt;树，解决了策略 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 中数据不平衡的问题。缺点是：仍然有可能导致负载不平衡。一些热搜词所在的服务器，其负载要高于冷门词所在的服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 策略 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：按 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt; 值做 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种策略下，需要对每个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 计算 &lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;，然后根据 &lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt; 值，将 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 分配到对应的服务器。为减小新增和删除服务器节点引起的大范围 &lt;/span&gt;&lt;span&gt;rehash&lt;/span&gt;&lt;span&gt;，可以引入一致性哈希算法。这样，&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 可以&lt;span&gt;按其&lt;/span&gt; &lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt; 值均匀分布到各个分片，各分片所在服务器的负载就会相对均衡一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按&lt;/span&gt;&lt;span&gt; hash&lt;/span&gt;&lt;span&gt; 值进行分片，即使两个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 有相同的前缀，只要后缀字符不一样，它们对应的&lt;/span&gt;&lt;span&gt; hash &lt;/span&gt;&lt;span&gt;值就会不一样。比如：&lt;/span&gt;&lt;span&gt;&quot;cat&quot;&lt;/span&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;span&gt;&quot;cap&quot;&lt;/span&gt;&lt;span&gt;，虽然有相同的前缀 &lt;/span&gt;&lt;span&gt;&quot;ca&quot;&lt;/span&gt;&lt;span&gt;，但是 &lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt; 值不一样，这两个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 就会被分配到不同的分片。这种策略能让各个分片上的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数据的基本都是均匀分布的，各分片的请求负载也是均衡的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;But&lt;/span&gt;&lt;span&gt;，策略&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;&lt;span&gt; 最主要的问题的是：没有了类似策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 中前缀和分片之间的映射关系，每次新的查询都需请求所有的分片，然后对结果进行 &lt;/span&gt;&lt;span&gt;merge&lt;/span&gt;&lt;span&gt;，再排序，最后才能返回 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 的结果。注意，这里是查询&lt;span&gt;所有的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;分片&lt;/span&gt;&lt;span&gt;，而不是像策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 那样，只需查询单台或几台服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从上述 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; 种 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt; 策略中，基于可扩展性、负载均衡、首次查询耗时等方面的综合考虑，&lt;span&gt;策略&lt;/span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 相对好一些。但是如果后续用户的查询基本都能命中缓存，没有了首次查询需遍历所有分片的耗时，那么&lt;span&gt;策略&lt;/span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; 反而会更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里，我们选择策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么问题来了：策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 中，前缀范围和服务器之间的映射关系该如何存储呢？可以用典型 &lt;/span&gt;&lt;span&gt;KV &lt;/span&gt;&lt;span&gt;结构来存储，&lt;span&gt;如 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;也可以用 &lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;。本文中我们基于下述原因选择&lt;/span&gt;&lt;span&gt;用 &lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面，在&lt;/span&gt;&lt;span&gt; Trie &lt;/span&gt;&lt;span&gt;树没有重建的情况下，&lt;span&gt;前缀和分片之间的映射关系&lt;/span&gt;就不会发生修改，而 &lt;span&gt;Trie &lt;/span&gt;&lt;span&gt;树的重建周期一般&lt;/span&gt;是一天或几天，这意味着对 &lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;写&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;&lt;span&gt;操作几乎可以忽略。与查询 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这个前缀分布在哪台服务器？&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;&lt;span&gt;这种频繁的 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;读&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;&lt;span&gt;&lt;span&gt;操作相比，&lt;/span&gt;是典型的 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;读多写少&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;&lt;span&gt;场景；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一方面，随着 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数据量的增加，&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树也会分成更多的分片，导致存放 &lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树&lt;/span&gt;的服务器数量不断增加。这时就需要引入 &lt;span&gt;zookeeper &lt;/span&gt;来监控&lt;/span&gt;&lt;span&gt; Trie &lt;/span&gt;&lt;span&gt;树服务器的运行状态。各服务器需与 &lt;span&gt;zookeeper &lt;/span&gt;保持正常的心跳，如果某一台服务器挂了，&lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt; 能及时感应到，并将来自用户的请求转发到健康的服务器节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;ZooKeeper &lt;/span&gt;中的 &lt;/span&gt;&lt;span&gt;znode&lt;/span&gt;&lt;span&gt; 数据结构设计&lt;span&gt;如下图 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;11 &lt;/span&gt;&lt;span&gt;所示。叶子节点是临时顺序节点，节点中存放一些元数据，比如：各台 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器的&lt;/span&gt;&lt;span&gt; ip&lt;/span&gt;&lt;span&gt;，端口，以及该服务器上的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的前缀范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;455&quot; data-backw=&quot;517&quot; data-ratio=&quot;0.8800773694390716&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQXHHoIeZs04bXgiaQERzEeBBPbjnbicOjkiamDfL1eh9eFuFzlcicjxUvDRvib59OW4WEzUG0hjFqbLdw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图 11&lt;/span&gt;&lt;span&gt;： &lt;/span&gt;&lt;/span&gt;&lt;span&gt;znode &lt;/span&gt;&lt;span&gt;的数据结构&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;现在，我们来看一下到目前为止的系统架构，与 &lt;/span&gt;&lt;span&gt;Part 1 &lt;/span&gt;&lt;span&gt;中的那个初步版本相比，这里姑且称作 &lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt; 版。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;611&quot; data-backw=&quot;578&quot; data-ratio=&quot;1.05625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQ4HibJm7RIKtVuiaicgyK58eOzCaBNqrBmNswu3W22SQUafoCnbB4ZGTmrRQqMpqL7ia2kXMLajqEjqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;图 12&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;搜索提示的系统架构(v1)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图中，&lt;/span&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt; ~ &lt;/span&gt;&lt;span&gt;T8 &lt;/span&gt;&lt;span&gt;是 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器，&lt;/span&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;span&gt; 作为一组，互为主备，&lt;/span&gt;&lt;span&gt;T3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T4&lt;/span&gt;&lt;span&gt; 互为主备，&lt;/span&gt;&lt;span&gt;T5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;T6&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T7 &lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt; T8 &lt;/span&gt;&lt;span&gt;也是一样的策略。互为主备的机制，可以在一台服务器宕机或做 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树更新期间，组中另外一台服务器仍可以对外提供服务，保证服务的&lt;span&gt;整体&lt;/span&gt;高可用性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;S1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;S2&lt;/span&gt;&lt;span&gt; 是搜索提示的应用服务器，不存储数据，只对外提供 &lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt; 接口。负责接收负载均衡器 (&lt;/span&gt;&lt;span&gt;LB) &lt;/span&gt;&lt;span&gt;传过来的用户请求，到&lt;span&gt;缓存中查询，或在未命中缓存时从特定的&lt;/span&gt;&lt;/span&gt;&lt;span&gt; Trie &lt;/span&gt;&lt;span&gt;树服务器中查询，并将结果返回给客户端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前缀范围和 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器的映射关系 &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;如表 &lt;/span&gt;&lt;span&gt;3 &lt;/span&gt;&lt;span&gt;所示)，作为集群的元信息，会保存在 &lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt; 中。当用户请求没有命中 &lt;/span&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;span&gt; 缓存服务时，应用服务器 &lt;span&gt;S1 &lt;/span&gt;&lt;span&gt;或 &lt;/span&gt;&lt;span&gt;S2 &lt;/span&gt;会请求 &lt;span&gt;zookeeper&lt;/span&gt;，获取每台 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器对应的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的前缀范围，然后把它放在本地缓存中，这样就不用每次都请求 &lt;span&gt;zookeeper&lt;/span&gt; 了。下次再发生缓存不命中时，&lt;span&gt;S1 &lt;/span&gt;&lt;span&gt;或 &lt;/span&gt;&lt;span&gt;S2 &lt;/span&gt;直接查询本地缓存，看看哪个前缀该去请求哪台 &lt;/span&gt;&lt;span&gt;Trie &lt;/span&gt;&lt;span&gt;树服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们会&lt;span&gt;定时&lt;/span&gt;对 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务集群做快照，并将快照存到文件系统中。当&lt;/span&gt;&lt;span&gt; T1&lt;/span&gt;&lt;span&gt; ~ &lt;/span&gt;&lt;span&gt;T8&lt;/span&gt;&lt;span&gt; 中的某台服务器宕机重启时，可以读取相应的快照文件，快速恢复出最近一次使用的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上述架构，从用户输入一个查询词 &lt;/span&gt;&lt;span&gt;&quot;&lt;span&gt;ultraman&lt;/span&gt;&quot;&lt;/span&gt;&lt;span&gt;，到应用服务器返回 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt;&lt;span&gt; 个结果，我们来看一下&lt;/span&gt;完整的请求流程：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;1. &lt;/span&gt;&lt;span&gt;用户输出关键词 &lt;/span&gt;&lt;span&gt;&quot;ultraman&quot;&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2 - 3.  &lt;/span&gt;&lt;span&gt;网关接收到用户请求，根据内置的负载策略将请求转发给 &lt;/span&gt;&lt;span&gt;S1 &lt;/span&gt;&lt;span&gt;或&lt;/span&gt;&lt;span&gt; S2&lt;/span&gt;&lt;span&gt;，假设路由到 &lt;/span&gt;&lt;span&gt;S2&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;S2&lt;/span&gt;&lt;span&gt; 首先查询 &lt;/span&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;span&gt; 缓存中是否存在 &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt; 为 &lt;span&gt;&quot;ultraman&quot;&lt;/span&gt; 的键值对；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5.&lt;/span&gt;&lt;span&gt;  如果命中缓存，就直接返回结果 。如果缓存未命中，再去本地缓存中查询是否有前缀的路由信息。如果有，就直接跳到第 &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; 步；如果没有，则跳到第 &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; 步；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6.&lt;/span&gt;&lt;span&gt;  &lt;span&gt;S2&lt;/span&gt; 请求 &lt;/span&gt;&lt;span&gt;zookeeper&lt;/span&gt;&lt;span&gt; ，希望获取所有 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器的前缀范围信息；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;7. &lt;/span&gt;&lt;span&gt; &lt;span&gt;zookeeper&lt;/span&gt; 返回数据给 &lt;span&gt;S2&lt;/span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8.  &lt;/span&gt;&lt;span&gt;&lt;span&gt;S2&lt;/span&gt; 将数据存在本地，并知道了前缀范围是 &lt;span&gt;&quot;ok&quot; ~ &quot;zu&quot;&lt;/span&gt; 的请求，应该发送给 &lt;/span&gt;&lt;span&gt;T7 &lt;/span&gt;&lt;span&gt;或 &lt;/span&gt;&lt;span&gt;T8&lt;/span&gt;&lt;span&gt;。假设 &lt;span&gt;S2&lt;/span&gt; 随机选择 &lt;/span&gt;&lt;span&gt;T8&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9.&lt;/span&gt;&lt;span&gt;  &lt;span&gt;T8&lt;/span&gt; 收到请求，从 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树中查询前缀是 &lt;span&gt;&quot;ultraman&quot; &lt;/span&gt;的&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 个结果，将其返回给 &lt;span&gt;S2&lt;/span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10.&lt;/span&gt;&lt;span&gt;  &lt;span&gt;S2 &lt;/span&gt;将结果返回&lt;span&gt;给客户端&lt;/span&gt;，&lt;span&gt;并把这些数据异步缓存到 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt; 中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;至此，搜索提示的查询服务已经基本实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，我们来设计另一个重要的服务：数据收集服务 &lt;/span&gt;&lt;span&gt;(Gathering Service)&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;6. Gathering Service &lt;span&gt;详细设计&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户的搜索意图会随着时间、地点、爱好、热点事件等因素的变化而变化，搜索提示返回的 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 列表要能体现出这种变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就需要实时或定时地分析搜索日志，计算出 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的最新 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;，再定期去更新 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。这样，查询特定 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 返回的 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 列表可能就会产生变化：可能是列表中新出现了一些提示词，也可能是列表的前后顺序发生了变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;通过&lt;span&gt;数据收集服务&lt;/span&gt;，可以实现对 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的收集及其热度值 &lt;/span&gt;&lt;span&gt;(rank)&lt;/span&gt;&lt;span&gt; 的更新。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设后端服务器有一个按天归档的原始搜索日志，里面记录了用户的搜索、点击、浏览等行为。这份日志是&lt;span&gt;数据收集服务的源头活水。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 &lt;/span&gt;&lt;span&gt;Part 1&lt;/span&gt;&lt;span&gt; 中我们说过，&lt;span&gt;在&lt;span&gt;大多情况下，我们并不需要实时计算 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; 值，因为 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt; 个 &lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;的排序，&lt;span&gt;通常&lt;/span&gt;在一段时间内不会有明显的变化。所以，这里我们&lt;span&gt;无需实时计算 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;&lt;span&gt;，而是&lt;/span&gt;采用 &lt;/span&gt;&lt;span&gt;Map-Reduce&lt;/span&gt;&lt;span&gt; 来定时计算&lt;span&gt; &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来，我们分析一下，设计&lt;span&gt;数据收集服务的关键步骤&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;步骤 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：起一个 &lt;span&gt;Map-Reduce &lt;/span&gt;&lt;/span&gt;&lt;span&gt;Job (&lt;/span&gt;&lt;span&gt;简称 &lt;/span&gt;&lt;span&gt;Job A)&lt;/span&gt;&lt;span&gt;，每天读取前一天的原始搜索日志，经过简单的词频统计，如果词频超过某个阈值，比如 &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; 次，就将统计结果以一定的格式（如按：&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;frequent&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt; 这样的格式）输出到词频文件。词频文件按天进行命名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是两个生成好的词频文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;文件 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;query_frequent_20210601&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Query&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Frequent&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Date&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cake custom&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;50&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cannon serials&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;60&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cap for children&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;30&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;car gift&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;80&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;card ultraman&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;100&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;children gift&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;150&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-01&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;文件 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;query_frequent_20210602&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Query&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Frequent&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;strong&gt;&lt;span&gt;Date&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;card ultraman&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;50&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cat food&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cannon 8D&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;30&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;coca cola&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;45&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;coffee brand&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;25&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;coworking&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;20&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;2020-06-02&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;......&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;span&gt;为什么我们要保存 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt; 信息呢？&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;因为，我们在下一步计算 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 动态&lt;span&gt;权重&lt;span&gt;的&lt;/span&gt;&lt;/span&gt;时候，除了词频这个因子之外，还需要将时间因子也考虑进去。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常，最近被搜索得越多的&lt;/span&gt;&lt;span&gt; query&lt;/span&gt;&lt;span&gt;，给到的权重就越高，而越久没有被查询的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，给的权重就越低。这样，由于综合考虑了词频和时间的影响，那些最近出现的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，虽然词频小，仍有可能出现在 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 列表。而那些很久没有被搜索的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，即使词频很大，但由于考虑了时间的衰减，也不一定会出现在 &lt;/span&gt;&lt;span&gt;Top K&lt;/span&gt;&lt;span&gt; 列表中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;步骤 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于步骤&lt;/span&gt;&lt;span&gt; 1 &lt;/span&gt;&lt;span&gt;生成的词频文件，每天更新 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重，生成&lt;/span&gt;&lt;span&gt; rank &lt;/span&gt;&lt;span&gt;文件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来说一下权重的计算公式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面我们有讲到，计算 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 权重的时候需要考虑词频和时间因子。具体实现的时候，可以用&lt;strong&gt;指数移动平均加权 &lt;/strong&gt;(&lt;/span&gt;&lt;span&gt;Exponential Moving Average: EMA)&lt;/span&gt;&lt;span&gt;。各数值的加权影响力随时间而指数式递减，越近期的数据加权影响力越重，但较旧的数据也会给予一定的加权值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于&lt;/span&gt;&lt;span&gt; EMA&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 值可按如下公式计算：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/em&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.12041884816753927&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elF8ycCIvhxsFSLPeARKUvEYLFh0DOJIjLAlpXFIsu7x2NVxuC2Lm730A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;191&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上式 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 中：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.95&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elFJp7bGGJswaWicMsOSiculk7d4s0X3KuTzOtMOdMSia97VhpUFr1FBH2Kw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;    &lt;span&gt;表示某个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 当天的权重；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.46875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elFXy34kTQeicFRWrpv7ZMy9gibNPiceF4icknaMFf49QhV6CZZvkVpe5qZqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;32&quot;/&gt;  &lt;span&gt;表示该 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 前一天的权重；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elFic172nxmPNUYMSCic5fyQe0hen9EqOX4VFrpic7kOBFx7foI1JxPTyyQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;16&quot;/&gt;     &lt;span&gt;表示 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 当天的词频；&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.5714285714285714&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elFPAONjxfCXxiccmInodxibfu7fIka6glJZoITNicM4hyJ8ZcYEAXY42HLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;14&quot;/&gt;    &lt;span&gt;表示衰减因子，一般取大于 &lt;/span&gt;&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt; 的值。本文取 &lt;/span&gt;&lt;span&gt;0.9&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;式 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 继续展开后，可以得到：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.045098039215686274&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elF9uwYlfjSDniaW0YS0IOmtY2ePMcjK1LY1d2cKLt3OFFicibRqAOUVIQaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;510&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从式 &lt;/span&gt;&lt;span&gt;2 &lt;/span&gt;&lt;span&gt;可以看出，词频对权重的影响，是随着时间而呈指数衰减的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;式 &lt;span&gt;2 &lt;/span&gt;中的 &lt;/span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8421052631578947&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQSeWU8GicFZYKicQGqpn6elFviaxFvWwxd0nSq4DzLMOpyNXhRrDk3MkV1uQNZz4TAEzeC0M1l9A76A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;19&quot;/&gt;&lt;span&gt; 是 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的初始权重值。简单起见可以取 &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;，更好一点做法是取 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 一段时间内的平均值。本文取开始两天 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 词频的平均值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了权重计算公式，接下来就可以进行具体的计算逻辑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. &lt;/span&gt;&lt;span&gt; 定义 &lt;/span&gt;&lt;span&gt;Map-Reduce Job B&lt;/span&gt;&lt;span&gt;，来初始化 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重，并将结果保存到&lt;/span&gt;&lt;span&gt; rank&lt;/span&gt;&lt;span&gt; 文件。&lt;/span&gt;&lt;span&gt;Job B&lt;/span&gt;&lt;span&gt; 只需运行一次。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;假设初始化的权重文件名为：&lt;/span&gt;&lt;span&gt;query_rank_0&lt;/span&gt;&lt;span&gt;，各 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的初始化权重如下表 &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;Query&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;strong&gt;&lt;span&gt;Ra&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;nk&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;cake custom&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;25.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cannon serials&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;30.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cannon 8D &lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;15.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;cap for children &lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;15.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;car gift&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;40.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;card ultraman&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;75.5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;cat food &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;7.5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;children gift&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;75.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;coca cola&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;22.5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;p&gt;&lt;span&gt;coffee brand&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;12.5&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;coworking space&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;10.0&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;表 4&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. &lt;/span&gt;&lt;span&gt; 定义 &lt;span&gt;Map-Reduce Job&lt;/span&gt;&lt;/span&gt;&lt;span&gt; C&lt;/span&gt;&lt;span&gt;，读取初始化的前一天的权重文件和当天的词频文件，根据式 &lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;更新 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重，并将结果写到当天的&lt;/span&gt;&lt;span&gt; rank&lt;/span&gt;&lt;span&gt; 文件中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面是计算 &lt;/span&gt;&lt;span&gt;&quot;20210601&quot;&lt;/span&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;span&gt;&quot;20210602&quot;&lt;/span&gt;&lt;span&gt; 这两天 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt;&lt;span&gt; 值的例子&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Job&lt;/span&gt;&lt;span&gt; C&lt;/span&gt; 首次更新 &lt;span&gt;query&lt;/span&gt; 的权重时，先读取初始化的权重文件 &lt;/span&gt;&lt;span&gt;query_rank_0&lt;/span&gt;&lt;span&gt; 和 第一天的词频文件 &lt;/span&gt;&lt;span&gt;query_frequent_20210601&lt;/span&gt;&lt;span&gt;，根据式&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;，依次更新各个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如，&lt;/span&gt;&lt;span&gt;&quot;card ultraman&quot;&lt;/span&gt;&lt;span&gt; 的最新权重：&lt;/span&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v1(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;card ultraman&quot;&lt;/span&gt;) = β  * v0(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;card ultraman&quot;&lt;/span&gt;) + (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; - β) * θ&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    = &lt;span class=&quot;code-snippet__number&quot;&gt;0.9&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;75.5&lt;/span&gt; + &lt;span class=&quot;code-snippet__number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;100&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    = &lt;span class=&quot;code-snippet__number&quot;&gt;77.95&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;各个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重更新完后，存至文件：&lt;/span&gt;&lt;span&gt;query_rank_20210601。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一个周期，&lt;/span&gt;&lt;span&gt;Job C&lt;/span&gt;&lt;span&gt; 读取当天词频文件 &lt;/span&gt;&lt;span&gt;query_frequent_20210602&lt;/span&gt;&lt;span&gt; 和前一天的权重文件 &lt;/span&gt;&lt;span&gt;query_rank_20210601&lt;/span&gt;&lt;span&gt;，按照式&lt;span&gt; &lt;span&gt;1&lt;/span&gt;&lt;/span&gt;，再次更新各个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的权重。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时，&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;card ultraman&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt; 的最新权重为：&lt;/span&gt;&lt;em&gt;&lt;span/&gt;&lt;/em&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;v2(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;card ultraman&quot;&lt;/span&gt;) = β  * v1(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;card ultraman&quot;&lt;/span&gt;) + (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt; - β) * θ&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    = &lt;span class=&quot;code-snippet__number&quot;&gt;0.9&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;79.95&lt;/span&gt; + &lt;span class=&quot;code-snippet__number&quot;&gt;0.1&lt;/span&gt; * &lt;span class=&quot;code-snippet__number&quot;&gt;50&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                    = &lt;span class=&quot;code-snippet__number&quot;&gt;75.16&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;各个 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 权重更新完后，存至文件：&lt;/span&gt;&lt;span&gt;query_rank_20210602&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再下一个周期，&lt;/span&gt;&lt;span&gt;Job C&lt;/span&gt;&lt;span&gt; 读取&lt;span&gt;当天词频文件&lt;/span&gt; &lt;/span&gt;&lt;span&gt;query_frequent_20210603&lt;/span&gt;&lt;span&gt; 和&lt;span&gt;前一天的权重文件&lt;/span&gt; &lt;/span&gt;&lt;span&gt;query_rank_20210602&lt;/span&gt;&lt;span&gt;，计算出新的权重值，并将结果存到新的权重文件：&lt;/span&gt;&lt;span&gt;query_rank_20210603&lt;/span&gt;&lt;span&gt;。以此类推。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;步骤 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;3&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：将最新的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 权重数据，分发到 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;步骤 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 完成后，会生成当天的&lt;/span&gt;&lt;span&gt; rank&lt;/span&gt;&lt;span&gt; 文件。&lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 文件又是怎么分发到 &lt;/span&gt;&lt;span&gt;Trie &lt;/span&gt;&lt;span&gt;树服务器的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在第 &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; 小节 &quot;&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的扩容策略&quot; 中，我们讨论过，当 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数量到达一定量级之后，需要对 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 数据做分片，让每台服务器都只含部分的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;。我们根据 &lt;/span&gt;&lt;span&gt;sharding&lt;/span&gt;&lt;span&gt; 策略 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;，将数据分成了&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt; 个分片，假设&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;span&gt; 存放分片 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T4&lt;/span&gt;&lt;span&gt;存放分片 &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T6&lt;/span&gt;&lt;span&gt;存放分片 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T7&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T8 &lt;/span&gt;&lt;span&gt;存放分片 &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样，我们就可以创建 &lt;/span&gt;&lt;span&gt;4 &lt;/span&gt;&lt;span&gt;个后台线程，分别称为 &lt;/span&gt;&lt;span&gt;Fetcher1&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Fetcher2&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Fetcher3&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Fetcher4&lt;/span&gt;&lt;span&gt;。每个 &lt;/span&gt;&lt;span&gt;Fetcher&lt;/span&gt;&lt;span&gt; 只负责从&lt;/span&gt;&lt;span&gt; rank&lt;/span&gt;&lt;span&gt; 文件中取特定前缀范围内的数据，&lt;span&gt;比如，&lt;/span&gt;&lt;span&gt;Fetcher1 &lt;/span&gt;&lt;span&gt;负责从 &lt;/span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;span&gt; 文件中取前缀是 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt; ~ &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;abs&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt; 的 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&lt;span&gt;。各 &lt;span&gt;Fetcher &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;取得数据后，&lt;/span&gt;&lt;span&gt;再将&lt;/span&gt;&lt;span&gt;&lt;span&gt;其分发给对应的 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt;&lt;span&gt; 树服务器。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;各 &lt;span&gt;&lt;span&gt;Fetcher &lt;/span&gt;&lt;/span&gt;&lt;span&gt;负责抓取的 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;query &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以及发送到的目标服务器，如下表 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;5 &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&lt;span&gt;取数据的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;线程&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;取数据&lt;/span&gt;的前缀范围&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;接收数据的目标服务器&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Fe&lt;/span&gt;&lt;span&gt;tch&lt;/span&gt;&lt;span&gt;er&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&quot;a&quot;  -- &quot;bas&quot;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Fetcher2&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&quot;bat&quot; -- &quot;faang&quot;&lt;/span&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;T3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;T4&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Fetcher3&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&quot;fab&quot; -- &lt;span&gt;&quot;oj&quot;&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;T5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;T6&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;Fetcher4&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;&quot;ok&quot;&lt;/span&gt;  --  &quot;&lt;span&gt;zu&lt;/span&gt;&quot;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;&lt;span&gt;T7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;T8&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;表 5&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;步骤 &lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;4&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 重建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的更新机制&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;&lt;span&gt;一节，我们讨论了&lt;/span&gt;&lt;span&gt; Trie &lt;/span&gt;&lt;span&gt;树的两种更新策略：&lt;span&gt;Double Buffer &lt;/span&gt;&lt;/span&gt;&lt;span&gt;双缓冲策略&lt;/span&gt;&lt;span&gt;和 &lt;span&gt;Master-Backup &lt;/span&gt;&lt;/span&gt;&lt;span&gt;主从配置策略&lt;/span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;受内存限制，我们选择主从配置策略来更新 &lt;/span&gt;&lt;span&gt;Tr&lt;/span&gt;&lt;span&gt;ie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于 &lt;/span&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;span&gt;，假设 &lt;/span&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt; 为 &lt;/span&gt;&lt;span&gt;master&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T2 &lt;/span&gt;&lt;span&gt;为 &lt;span&gt;backup&lt;/span&gt;。&lt;span&gt;当从 &lt;span&gt;Fe&lt;/span&gt;&lt;span&gt;tch&lt;/span&gt;&lt;span&gt;er&lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;/span&gt;接收到新的权重数据后，会启动 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的更新。我们先停掉 &lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;span&gt;，仅由 &lt;/span&gt;&lt;span&gt;T1 &lt;/span&gt;&lt;span&gt;提供对于前缀是 &lt;span&gt;&quot;a&quot; ~ &quot;bas&quot;&lt;/span&gt; 的查询。当 &lt;/span&gt;&lt;span&gt;T2&lt;/span&gt;&lt;span&gt; 新建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树完成后，重新上线，同时停掉 &lt;/span&gt;&lt;span&gt;T1&lt;/span&gt;&lt;span&gt; 的服务，接下来由&lt;/span&gt;&lt;span&gt; T1&lt;/span&gt;&lt;span&gt; 开始重建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;T3&lt;/span&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;span&gt;T4&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T5&lt;/span&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;span&gt;T6&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;T7&lt;/span&gt;&lt;span&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;T8&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;也是一样的流程。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;下面是加入数据收集服务后架构图。相较于之前的 &lt;/span&gt;&lt;span&gt;v1&lt;/span&gt;&lt;span&gt; 版，姑且称作 &lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt; 版。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;478&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.8265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQMxqDoTib2l7SaV7mbwN57OGkRck8cLzIrvcyHqdRYEgRYDIWKcI8zqnmKibZqPsXml1SOC7A1PJ4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 13&lt;/span&gt;&lt;span&gt;：搜索提示的系统架构(v2)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;7. &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;进阶讨论&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1)&lt;/span&gt;&lt;span&gt;    对于用户输入的关键词，如果提示词不仅要满足前缀匹配，还要求能任意位置匹配，该怎么处理？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，用户输入&lt;/span&gt;&lt;span&gt;&quot;ultraman&quot;&lt;/span&gt;&lt;span&gt;，不仅能返回满足前缀匹配的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ultraman&lt;/span&gt;&lt;span&gt; card&quot;&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;&quot;ultraman zero&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ultraman&lt;/span&gt;&lt;span&gt; tiga&quot;&lt;/span&gt;&lt;span&gt; 等，还能返回非前缀匹配的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，如：&lt;/span&gt;&lt;span&gt;&quot;all &lt;/span&gt;&lt;span&gt;ultraman&lt;/span&gt;&lt;span&gt; name&quot;&lt;/span&gt;&lt;span&gt;。这种情况下，需要通过搜索引擎的全文检索来实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;2)&lt;/span&gt;    如何实现非英文的搜索提示？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;英文搜索提示中，&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的节点存储的是 &lt;/span&gt;&lt;span&gt;ASCII&lt;/span&gt;&lt;span&gt; 编码的字符，长度为 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 个&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;。非英文环境下的搜索提示，&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的节点需要存储 &lt;/span&gt;&lt;span&gt;Unicode&lt;/span&gt;&lt;span&gt; 编码的字符，字符长度可能是 &lt;/span&gt;&lt;span&gt;1 byte&lt;/span&gt;&lt;span&gt;，或 &lt;/span&gt;&lt;span&gt;2 byte&lt;/span&gt;&lt;span&gt;，或 &lt;/span&gt;&lt;span&gt;3 byte&lt;/span&gt;&lt;span&gt;，视具体字符及不同的 &lt;/span&gt;&lt;span&gt;Unicode&lt;/span&gt;&lt;span&gt; 编码格式而定，比如：&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;UTF-16&lt;/span&gt;&lt;span&gt; 等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;需要注意的是，如果选择了某个字符串编码来建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，比如 &lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;，那么对于用户输入的关键词，也要先将其转换成 &lt;/span&gt;&lt;span&gt;U&lt;/span&gt;&lt;span&gt;TF-8&lt;/span&gt;&lt;span&gt;，再到 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树中查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再进一步，怎么实现中文的搜索提示呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于中文而言，有两种方法构建 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将&lt;/span&gt;&lt;span&gt;中文拆解成单个的字，&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点中的 &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt; 字段存的是前缀词的&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt; 编码，这种方式创建的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，叫 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;中文 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将中文转换为拼音，&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树节点中的 &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt; 字段存的是&lt;span/&gt;&lt;span&gt;前缀词&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;公共前缀&lt;span&gt;，这种方式创建的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，叫 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;拼音&lt;/span&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;Trie&lt;/span&gt; 树&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;我们可以同时建立中文 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树和拼音 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。系统会根据一定的策略选择查询 中文 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树还是拼音 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。一样的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 存在两种形式的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树中，这是一种用空间换时间的策略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，我们也可以只创建拼音 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树。如果用户输入的关键词是拼音，就可以直接查询 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，获取搜索提示。如果用户输入的关键词是中文 &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;比如采用了手写输入&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;，那么系统会先将关键词转换成拼音，再到 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树中查询。与&lt;span&gt;同&lt;/span&gt;&lt;span&gt;时建立两棵 &lt;/span&gt;&lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt;&lt;span&gt; 树&lt;/span&gt;&lt;/span&gt;&lt;span&gt;相比，这种方式省了近一半的空间。但由于查询过程中可能会存在汉字转拼音的耗时，所以这是一种用时间换空间的策略。这种方法比较适合用户多是拼音输入的场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;3)    &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树还可以优化吗？&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在文中，我们对 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树进行了一定的优化，比如固定前缀长度，合并单独的子节点等。实际工作中，特别是对于非英文的搜索提示，如中文搜索提示，使用得更多的不是传统的 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树，而是 &lt;/span&gt;&lt;span&gt;Double Array Trie &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;双数组 &lt;/span&gt;&lt;span&gt;Trie &lt;/span&gt;&lt;span&gt;树，简称 &lt;/span&gt;&lt;span&gt;DAT)&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;DAT&lt;/span&gt;&lt;span&gt; 能在保证查询效率的前提下，进一步减少 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树的占用空间。具体实现可参考： &lt;/span&gt;&lt;span&gt;https://linux.thai.net/~thep/datrie/datrie.html&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4)    &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端 &lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;网页或 &lt;/span&gt;&lt;span&gt;App) &lt;/span&gt;&lt;span&gt;的优化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以在 &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端上执行以下优化，以改善用户体验：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;降低 &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端对 &lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; 端请求的频率。可以在 &lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端设置一定的策略，比如输入 &lt;/span&gt;&lt;span&gt;2~3&lt;/span&gt;&lt;span&gt; 个字符或间隔 &lt;/span&gt;&lt;span&gt;100 ms&lt;/span&gt;&lt;span&gt;，才向 &lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; 请求一次。这种 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;延迟请求&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 的策略在 &lt;/span&gt;&lt;span&gt;Kafka &lt;/span&gt;&lt;span&gt;中也有体现；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端可以从 &lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; 端预取一些数据，保存在本地。比如，用户输入&lt;/span&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;span&gt;，服务器除了返回以 &lt;/span&gt;&lt;span&gt;&quot;a&quot;&lt;/span&gt;&lt;span&gt; 作为前缀的提示词，还会根据一定规则，返回前缀为 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ab&lt;/span&gt;&lt;span&gt;&quot; &lt;/span&gt;或 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ac&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; 的提示词。这样，如果用户下一个字符输入&lt;span&gt;&quot;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;，&lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端就可以直接在本地拿到结果，而不必再向服务端发请求；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端可以在本地缓存最近的搜索提示。下图所示是 &lt;/span&gt;&lt;span&gt;Google&lt;/span&gt;&lt;span&gt; 的关键词搜索，搜索结果缓存了 &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 小时，这样在 &lt;/span&gt;&lt;span&gt;1 &lt;/span&gt;&lt;span&gt;小时内，同样的用户搜索同样的关键词，就可以直接从客户端本地缓存中取数据，而不需要发送请求从服务端获取数据；&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6688741721854304&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/la8s6uvJibdQMxqDoTib2l7SaV7mbwN57OeHKsnyQt1OzPe7fJokD4TB0vhJ7fmZdlGr0pvjZhVuLibLl9lwVamQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;604&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端可以与 &lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt; 端提前建立连接。这样，&lt;/span&gt;&lt;span&gt;Client&lt;/span&gt;&lt;span&gt; 端不会等到用户开始输入关键词时，才开始花时间建立连接。毕竟建立 &lt;/span&gt;&lt;span&gt;TCP&lt;/span&gt;&lt;span&gt; 连接是比较耗时的，慢的时候，用户可能输了好多字，系统也没有给出提示。当然，提前建立连接，也要视情况而定，如果网站或应用当天有大流量的活动，这个时候我们反而要控制提前连接的数量，甚至关闭提前连接的机制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5)     &lt;/span&gt;&lt;span&gt;Query&lt;/span&gt;&lt;span&gt; 的过滤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 进行过滤，主要出于两方面的原因：&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;防止搜索的无结果：用户输入关键词的进行搜索的目的，主要是为了找想要的结果。如果用户选择了某个提示词，但是点击搜索之后搜索引擎却返回空，这中用户体验是不太好的。所以，我们应该在每天跑词频统计的 &lt;/span&gt;&lt;span&gt;Map-Reduce &lt;/span&gt;&lt;span&gt;任务阶段，在从原始日志中抽取 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 的时候，就要过滤掉无搜索结果的 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;，防止这些 &lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt; 进入 &lt;/span&gt;&lt;span&gt;Trie&lt;/span&gt;&lt;span&gt; 树；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;某些敏感词汇，也需要在做 &lt;/span&gt;&lt;span&gt;Map-Reduce&lt;/span&gt;&lt;span&gt; 词频统计的时候，把它们过滤掉。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;6)    &lt;/span&gt;个性化搜索提示&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果需要进一步考虑提升搜索提示的用户体验，不同用户搜同一个关键词，系统会结合用户的历史搜索信息、地理位置信息 &lt;/span&gt;&lt;span&gt;(GEO)&lt;/span&gt;&lt;span&gt;、语言、偏好等信息，返回个性化的搜索提示，这需要涉及更多的推荐算法，有兴趣的同学可以继续深入了解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;终于来到了尾声，感谢你的坚持！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Enjoy ~&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>01d164421258ff763dfaf7dbee363fc8</guid>
<title>面试官：你说你精通 Redis，你看过持久化的配置吗？</title>
<link>https://toutiao.io/k/sd8x1dj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前边我们已经介绍了&lt;code&gt;Redis&lt;/code&gt;&lt;strong&gt;五种数据类型的命令&lt;/strong&gt;与&lt;strong&gt;配置文件的基本配置&lt;/strong&gt;，今天让我们从理论和配置两个层面来揭开&lt;code&gt;Redis&lt;/code&gt;持久化的神秘面纱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓持久化可以简单理解为将内存中的数据保存到硬盘上存储的过程。持久化之后的数据在系统重启或者宕机之后依然可以进行访问，保证了数据的安全性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Redis&lt;/code&gt;有两种持久化方案，一种是快照方式（&lt;code&gt;SNAPSHOTTING&lt;/code&gt;），简称&lt;code&gt;RDB&lt;/code&gt;；一种是只追加模式（&lt;code&gt;APPEND ONLY MODE&lt;/code&gt;），称为AOF。接下来让我们分别了解一下它们的使用与注意事项。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;RDB&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;RDB&lt;/code&gt;为&lt;code&gt;Redis DataBase&lt;/code&gt;的缩写，是 &lt;code&gt;Redis&lt;/code&gt; 默认的持久化方案。它能够在指定的时间间隔内将内存数据集快照（&lt;code&gt;snapshot&lt;/code&gt;）写入磁盘，恢复时将快照文件（ &lt;code&gt;dump.rdb&lt;/code&gt; ）读回内存。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3778280542986425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpPM2hwOgfQibfibWxxDm1Xnfic1XFrOueOROABq8t3Wdc7qYllVnYfkKhfK1PtAvHdeT03PZlmbRrlsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;442&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们先来扒一下配置文件中的&lt;code&gt;SNAPSHOTTING&lt;/code&gt;:&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置文件&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;save  &lt;code&gt;&amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;&lt;/code&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在给定的&lt;strong&gt;秒数&lt;/strong&gt;内，如果对数据库执行的&lt;strong&gt;写入操作数&lt;/strong&gt;达到设定的值，则将数据同步到数据文件。支持多个条件配合，&lt;code&gt;Redis&lt;/code&gt;默认配置文件中提供了三个条件：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;save 900 1 //900s内有1个更改&lt;br/&gt;save 300 10 //300s内有10个更改&lt;br/&gt;save 60 10000 //60s内有10000次更改&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：若不想用&lt;code&gt;RDB&lt;/code&gt;方案，可以把 &lt;code&gt;save &quot;&quot;&lt;/code&gt;的注释打开，上边三个注释掉。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;stop-writes-on-bgsave-error yes&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当&lt;code&gt;bgsave&lt;/code&gt;出现错误时，&lt;code&gt;Redis&lt;/code&gt;是否停止执行写命令；&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果为&lt;code&gt;yes&lt;/code&gt;，则当硬盘出现问题时，&lt;code&gt;Redis&lt;/code&gt;将停止接受写入操作，这样我们可以及时发现，避免数据的大量丢失；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果为&lt;code&gt;no&lt;/code&gt;，则&lt;code&gt;Redis&lt;/code&gt;无视&lt;code&gt;bgsave&lt;/code&gt;的错误继续执行写命令。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果已经设置了对&lt;code&gt;Redis&lt;/code&gt;服务器的正确监视和持久性，即采用了其他手段发现和控制数据完整性，可能希望禁用此功能，以便即使在磁盘、权限等方面出现问题时，&lt;code&gt;Redis&lt;/code&gt;仍能正常工作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果后台保存过程将再次开始工作，&lt;code&gt;Redis&lt;/code&gt;将自动允许再次写入。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;rdbcompression yes&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定存储到本地数据库时是否&lt;strong&gt;压缩&lt;/strong&gt;（&lt;code&gt;Redis&lt;/code&gt;采用&lt;code&gt;LZF&lt;/code&gt;压缩）数据，默认为&lt;code&gt;yes&lt;/code&gt;。如果为了节省&lt;code&gt;CPU&lt;/code&gt;时间，可以关闭该选项，但会导致数据库文件变得巨大。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;rdbchecksum yes&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从&lt;code&gt;RDB&lt;/code&gt;版本&lt;code&gt;5&lt;/code&gt;开始，在存储快照后，还可以使用&lt;code&gt;CRC64&lt;/code&gt;算法来进行数据校验，&lt;code&gt;CRC64&lt;/code&gt;校验放在文件的末尾。开启之后，保存和加载&lt;code&gt;RDB&lt;/code&gt;文件时会增加大约&lt;code&gt;10%&lt;/code&gt;的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;禁用&lt;strong&gt;校验和&lt;/strong&gt;创建的&lt;code&gt;RDB&lt;/code&gt;文件的校验和为零，这将告诉加载代码跳过检查。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;dbfilename dump.rdb&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定本地数据库文件名，重启之后自动加载进&lt;strong&gt;内存&lt;/strong&gt;，手动执行&lt;code&gt;save&lt;/code&gt; 命令的话即刻生效。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;strong&gt;大坑请注意&lt;/strong&gt;：&lt;code&gt;flushall&lt;/code&gt;、&lt;code&gt;shutdown&lt;/code&gt;命令都会清空并提交至&lt;code&gt;dump.rdb&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;dir ./&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;指定本地数据库存放目录。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;理论&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;工作方式&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当 &lt;code&gt;Redis&lt;/code&gt; 需要保存&lt;code&gt;dump.rdb&lt;/code&gt;文件时，它会调用系统函数&lt;code&gt;fork()&lt;/code&gt;，创建一个子进程（与主进程完全一致）;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子进程将数据集写入临时文件&lt;code&gt;RDB&lt;/code&gt;中；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当子进程完成对新 &lt;code&gt;RDB&lt;/code&gt; 文件的写入时，&lt;code&gt;Redis&lt;/code&gt; 用新 &lt;code&gt;RDB&lt;/code&gt; 文件替换原来的 &lt;code&gt;RDB&lt;/code&gt; 文件，并删除旧的 &lt;code&gt;RDB&lt;/code&gt; 文件。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种工作方式使得 &lt;code&gt;Redis&lt;/code&gt; 可以从写时复制（&lt;code&gt;copy-on-write&lt;/code&gt;）机制中获益。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何触发RDB快照&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置文件中默认的快照配置；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;命令&lt;code&gt;save&lt;/code&gt;（阻塞， 只管保存快照，其他的等待）或者是&lt;code&gt;bgsave&lt;/code&gt;（异步）命令，快照同时还可以响应客户端命令；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行&lt;code&gt;flushall&lt;/code&gt; 命令，清空数据库所有数据，意义不大;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;执行&lt;code&gt;shutdown&lt;/code&gt; 命令，保证服务器正常关闭且不丢失任何数据，意义也不大。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;通过RDB文件恢复数据&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际开发中，一般会考虑到物理机硬盘损坏的情况，所以我们会选择备份&lt;code&gt;dump.rdb&lt;/code&gt;文件。将备份的&lt;code&gt;dump.rdb&lt;/code&gt; 文件拷贝到&lt;code&gt;redis&lt;/code&gt;的安装目录的&lt;code&gt;bin&lt;/code&gt;目录下，重启&lt;code&gt;redis&lt;/code&gt;服务即可。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RDB&lt;/code&gt;是一个非常紧凑的文件，非常适用于数据集的备份；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RDB&lt;/code&gt;是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Redis&lt;/code&gt;的主进程不进行&lt;code&gt;I/O&lt;/code&gt;操作，确保了极高的性能；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;适合大规模数据的恢复，对于数据的完整性和一致性要求不高的话，&lt;code&gt;RDB&lt;/code&gt;比&lt;code&gt;AOF&lt;/code&gt;方式更加高效。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缺点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;Redis&lt;/code&gt;意外宕机时，你可能会丢失几分钟的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;RDB&lt;/code&gt; 需要经常&lt;code&gt;fork&lt;/code&gt;子进程来保存数据集到硬盘上，当数据集比较大的时候，&lt;code&gt;fork&lt;/code&gt;的过程是非常耗时的，可能会导致&lt;code&gt;Redis&lt;/code&gt;在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且&lt;code&gt;CPU&lt;/code&gt;性能不是很好的情况下，这种情况会持续1秒；&lt;code&gt;AOF&lt;/code&gt;也需要&lt;code&gt;fork&lt;/code&gt;，但是可以调节重写日志文件的频率来提高数据集的耐久度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;AOF&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决&lt;code&gt;RDB&lt;/code&gt;方式在宕机时丢失数据过多的问题，从&lt;code&gt;1.1&lt;/code&gt; 版本开始，&lt;code&gt;Redis&lt;/code&gt;增加了一种&lt;code&gt;durable&lt;/code&gt;的持久化方式：&lt;code&gt;AOF&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AOF&lt;/code&gt;是&lt;code&gt;Append Only File&lt;/code&gt;的缩写，默认不开启。&lt;code&gt;AOF&lt;/code&gt;以日志的形式来记录每个写操作，只允许追加文件但不可以改写文件，当服务器重启的时候会重新执行这些命令来恢复原始的数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再来看一下配置文件中的&lt;code&gt;APPEND ONLY MODE&lt;/code&gt;:&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;配置文件&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;appendonly no&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认为关闭状态，改为&lt;code&gt;yes&lt;/code&gt;打开持久化。&lt;code&gt;AOF&lt;/code&gt;和&lt;code&gt;RDB&lt;/code&gt;可以同时启用而不会出现问题。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;appendfilename &quot;appendonly.aof&quot;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文件默认名称，启动即创建。加载&lt;strong&gt;先于&lt;/strong&gt;&lt;code&gt;dump.rdb&lt;/code&gt;文件&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;appendfsync&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步策略：系统函数&lt;code&gt;fsync()&lt;/code&gt; 告诉操作系统在磁盘上实际写入数据。&lt;code&gt;Redis&lt;/code&gt;支持三种不同的模式&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;appendfsync always //每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好&lt;br/&gt;appendfsync everysec //默认推荐，异步操作，每秒记录，如果宕机，有1秒内数据丢失&lt;br/&gt;appendfsync no //不同步，只有在操作系统需要时在刷新数据&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要想了解接下来的配置内容，先得说一下“日志重写”的原理：&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;重写&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于&lt;code&gt;AOF&lt;/code&gt;采用的是将命令追加到文件末尾的方式，所以随着写入命令的不断增加，&lt;code&gt;AOF&lt;/code&gt;文件的体积会变得越来越大。为避免出现此种情况，新增了重写机制：可以在不打断服务客户端的情况下，对&lt;code&gt;AOF&lt;/code&gt;文件进行重建（&lt;code&gt;rebuild&lt;/code&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;重写触发：&lt;/strong&gt; 通过执行&lt;code&gt;bgrewriteaof&lt;/code&gt;命令，可以生成一个新的&lt;code&gt;AOF&lt;/code&gt;文件，该文件包含重建当前数据集所需的&lt;strong&gt;最少&lt;/strong&gt;命令。&lt;code&gt;Redis 2.2&lt;/code&gt;需手动执行该命令，&lt;code&gt;Redis 2.4&lt;/code&gt;则可以通过修改配置文件的方式自动触发（配置在下边涉及）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;重写原理：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Redis&lt;/code&gt; 执行系统函数&lt;code&gt;fork()&lt;/code&gt; ，创建一个子进程（与主进程完全一致）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;子进程开始将新 &lt;code&gt;AOF&lt;/code&gt; 文件的内容写入到临时文件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 &lt;code&gt;AOF&lt;/code&gt; 文件的末尾，这样即使在重写的中途发生停机，现有的 &lt;code&gt;AOF&lt;/code&gt; 文件也是安全的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 &lt;code&gt;AOF&lt;/code&gt; 文件的末尾。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Redis&lt;/code&gt; 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 &lt;code&gt;AOF&lt;/code&gt;文件的末尾。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;no-appendfsync-on-rewrite no&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们同时执行主进程的&lt;strong&gt;写操作&lt;/strong&gt;和子进程的&lt;strong&gt;重写&lt;/strong&gt;操作时，两者都会操作磁盘，而重写往往会涉及到大量的磁盘操作，这样就会造成主进程在写&lt;code&gt;aof&lt;/code&gt;文件的时候出现阻塞的情形。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，&lt;code&gt;no-appendfsync-on-rewrite&lt;/code&gt;参数出场了。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果该参数设置为&lt;code&gt;no&lt;/code&gt;，是最安全的方式，不会丢失数据，但是要忍受阻塞的问题；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果设置为&lt;code&gt;yes&lt;/code&gt;，这就相当于将&lt;code&gt;appendfsync&lt;/code&gt;设置为&lt;code&gt;no&lt;/code&gt;，这说明并没有执行磁盘操作，只是写入了缓冲区。因此这样并不会造成阻塞（因为没有竞争磁盘），但是如果这个时候&lt;code&gt;redis&lt;/code&gt;挂掉，就会丢失数据。丢失多少数据呢？在&lt;code&gt;linux&lt;/code&gt;的操作系统的默认设置下，最多会丢失30s的数据。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为&lt;code&gt;yes&lt;/code&gt;；如果应用系统无法忍受数据丢失，则设置为&lt;code&gt;no&lt;/code&gt;。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;auto-aof-rewrite-percentage 100&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写百分比，默认为上次重写后&lt;code&gt;aof&lt;/code&gt;文件大小的一倍。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;auto-aof-rewrite-min-size 64mb&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重写触发的最小值：64mb。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据&lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;和&lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt;参数确定自动触发时机。&lt;code&gt;Redis&lt;/code&gt;会记录上次重写时的&lt;code&gt;AOF&lt;/code&gt;大小，默认配置是当&lt;code&gt;AOF&lt;/code&gt;文件大小是上次&lt;code&gt;rewrite&lt;/code&gt;后大小的一倍且文件大于&lt;code&gt;64M&lt;/code&gt;时触发。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;大型互联网公司一般都是&lt;code&gt;3G&lt;/code&gt;起步&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;aof-load-truncated yes&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当&lt;code&gt;AOF&lt;/code&gt;文件被截断时，即&lt;code&gt;AOF&lt;/code&gt;文件的最后命令不完整，如果此时启动&lt;code&gt;Redis&lt;/code&gt;，会将&lt;code&gt;AOF&lt;/code&gt;数据加载回内存，此时便会出现问题。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;yes：加载一个截断的&lt;code&gt;AOF&lt;/code&gt;，&lt;code&gt;Redis&lt;/code&gt;服务器开始发出日志，通知用户该事件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;no：服务器将中止并出现错误，拒绝启动。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们得知&lt;code&gt;AOF&lt;/code&gt;文件报错时，可以用以下方法来修复出错的 &lt;code&gt;AOF&lt;/code&gt; 文件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;为现有的 &lt;code&gt;AOF&lt;/code&gt;文件创建一个备份；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用 &lt;code&gt;Redis&lt;/code&gt; 附带的 &lt;code&gt;redis-check-aof&lt;/code&gt; 命令，对原来的&lt;code&gt;AOF&lt;/code&gt;文件进行修复；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;redis-check-aof –fix&lt;/code&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;code&gt;redis-check-aof --fix appendonly.aof&lt;/code&gt;  修复命令，杀光不符合规范的语法&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;（&lt;strong&gt;可选&lt;/strong&gt;）使用 &lt;code&gt;diff -u&lt;/code&gt; 对比修复后的 &lt;code&gt;AOF&lt;/code&gt;文件和原始 &lt;code&gt;AOF&lt;/code&gt; 文件的备份，查看两个文件之间的不同之处；&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;重启 &lt;code&gt;Redis&lt;/code&gt;服务器，等待服务器载入修复后的 &lt;code&gt;AOF&lt;/code&gt;文件，并进行数据恢复。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;aof-use-rdb-preamble yes&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在重写&lt;code&gt;AOF&lt;/code&gt;文件时，&lt;code&gt;Redis&lt;/code&gt;能够在&lt;code&gt;AOF&lt;/code&gt;文件中使用&lt;code&gt;RDB&lt;/code&gt;前导，以加快重写和恢复速度。启用此选项后，重写的&lt;code&gt;AOF&lt;/code&gt;文件由两个不同的节组成：&lt;code&gt;RDB file&lt;/code&gt;、&lt;code&gt;AOF tail&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加载&lt;code&gt;Redis&lt;/code&gt;时，会识别&lt;code&gt;AOF&lt;/code&gt;文件以&lt;strong&gt;Redis&lt;/strong&gt;字符串开头，并加载带前缀的&lt;code&gt;RDB&lt;/code&gt;文件，然后继续加载&lt;code&gt;AOF&lt;/code&gt;尾部。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;理论&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;数据的完整性和一致性更高，&lt;code&gt;AOF&lt;/code&gt;的持久化通过使用不同的策略，最多丢失1秒的数据；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;AOF&lt;/code&gt;文件是一个只进行追加的日志文件，不需要写入&lt;code&gt;seek&lt;/code&gt;；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Redis&lt;/code&gt;可以在 &lt;code&gt;AOF&lt;/code&gt;文件体积变得过大时，自动地在后台对 &lt;code&gt;AOF&lt;/code&gt; 进行重写，重写操作是绝对安全的；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;AOF&lt;/code&gt;文件记录的写入操作以&lt;code&gt;Redis&lt;/code&gt;协议的格式保存，容易读懂，容易对文件进行分析；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;缺点&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;对于相同的数据集来说，&lt;code&gt;AOF&lt;/code&gt;文件的体积通常要大于&lt;code&gt;RDB&lt;/code&gt;文件的体积；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;根据所使用的 &lt;code&gt;fsync&lt;/code&gt; 策略，&lt;code&gt;AOF&lt;/code&gt;的速度可能会慢于&lt;code&gt;RDB&lt;/code&gt; 。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;在一般情况下，每秒 &lt;code&gt;fsync&lt;/code&gt; 的性能依然非常高，而关闭 &lt;code&gt;fsync&lt;/code&gt; 可以让 &lt;code&gt;AOF&lt;/code&gt; 的速度和 &lt;code&gt;RDB&lt;/code&gt; 一样快， 即使在高负荷之下也是如此。不过在处理巨大的写入载入时，&lt;code&gt;RDB&lt;/code&gt; 可以提供更有保证的最大延迟时间（&lt;code&gt;latency&lt;/code&gt;）。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;对比与总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;如何选择使用哪种持久化方式？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一般来说，如果想达到足以媲美 &lt;code&gt;PostgreSQL&lt;/code&gt; 的数据安全性，应该同时使用两种持久化功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果非常关心数据，但仍然可以承受数分钟以内的数据丢失，那么可以只使用 &lt;code&gt;RDB&lt;/code&gt; 持久化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于AOF持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此&lt;code&gt;AOF&lt;/code&gt;是目前&lt;strong&gt;主流&lt;/strong&gt;的持久化方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有很多用户都只使用&lt;code&gt;AOF&lt;/code&gt;持久化，但我们并不推荐这种方式：因为定时生成 &lt;code&gt;RDB&lt;/code&gt; 快照（&lt;code&gt;snapshot&lt;/code&gt;）非常便于进行数据库备份，并且 &lt;code&gt;RDB&lt;/code&gt; 恢复数据集的速度也要比 &lt;code&gt;AOF&lt;/code&gt; 恢复的速度要快。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;AOF和RDB之间的相互作用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在版本号大于等于 &lt;code&gt;2.4&lt;/code&gt; 的 &lt;code&gt;Redis&lt;/code&gt; 中，&lt;code&gt;BGSAVE&lt;/code&gt; 执行的过程中，不可以执行 &lt;code&gt;BGREWRITEAOF&lt;/code&gt; 。反过来说，在 &lt;code&gt;BGREWRITEAOF&lt;/code&gt; 执行的过程中，也不可以执行 &lt;code&gt;BGSAVE&lt;/code&gt;。这可以防止两个 &lt;code&gt;Redis&lt;/code&gt; 后台进程同时对磁盘进行大量的&lt;code&gt;I/O&lt;/code&gt; 操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果 &lt;code&gt;BGSAVE&lt;/code&gt; 正在执行，并且用户显示地调用 &lt;code&gt;BGREWRITEAOF&lt;/code&gt; 命令，那么服务器将向用户回复一个 &lt;code&gt;OK&lt;/code&gt; 状态， 并告知用户&lt;code&gt;BGREWRITEAOF&lt;/code&gt; 已经被预定执行：一旦 &lt;code&gt;BGSAVE&lt;/code&gt; 执行完毕，&lt;code&gt;BGREWRITEAOF&lt;/code&gt;就会正式开始。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当 &lt;code&gt;Redis&lt;/code&gt; 启动时，如果 &lt;code&gt;RDB&lt;/code&gt;持久化和 &lt;code&gt;AOF&lt;/code&gt; 持久化都被打开了， 那么程序会优先使用 &lt;code&gt;AOF&lt;/code&gt; 文件来恢复数据集，因为 &lt;code&gt;AOF&lt;/code&gt;文件所保存的数据通常是最完整的。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;备份redis数据&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建一个定期任务（&lt;code&gt;cron job&lt;/code&gt;），每小时将一个 &lt;code&gt;RDB&lt;/code&gt; 文件备份到一个文件夹，并且每天将一个 &lt;code&gt;RDB&lt;/code&gt; 文件备份到另一个文件夹；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;确保快照的备份都带有相应的日期和时间信息，每次执行定期任务脚本时，使用 &lt;code&gt;find&lt;/code&gt; 命令来删除过期的快照；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;至少每天一次，将 &lt;code&gt;RDB&lt;/code&gt; 备份到你的数据中心之外，或者至少是备份到你运行 &lt;code&gt;Redis&lt;/code&gt; 服务器的物理机器之外。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;性能建议&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际应用时，因为&lt;code&gt;RDB&lt;/code&gt;文件只用作后备用途，建议只在&lt;code&gt;slave&lt;/code&gt;上持久化&lt;code&gt;RDB&lt;/code&gt;文件，而且只需要15分钟备份一次就够了，只保留&lt;code&gt;save 900 1&lt;/code&gt;这条规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果开启&lt;code&gt;AOF&lt;/code&gt;，好处是在最恶劣情况下也只会丢失不超过2秒数据，启动脚本较简单只&lt;code&gt;load&lt;/code&gt;自己的&lt;code&gt;AOF&lt;/code&gt;文件就可以了。代价一是带来了持续的&lt;code&gt;IO&lt;/code&gt;，二是&lt;code&gt;AOF rewrite&lt;/code&gt;的最后将&lt;code&gt;rewrite&lt;/code&gt;过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要硬盘许可，应该尽量减少&lt;code&gt;AOF rewrite&lt;/code&gt;的频率，&lt;code&gt;AOF&lt;/code&gt;重写的基础大小默认值&lt;code&gt;64M&lt;/code&gt;太小了，可以设置到&lt;code&gt;5G&lt;/code&gt;以上。默认超过原大小的100%时重写可以改到适当的数值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不开启&lt;code&gt;AOF&lt;/code&gt;，仅靠&lt;code&gt;Master-Slave Replication&lt;/code&gt;实现高可用性也可以。能省掉一大笔&lt;code&gt;IO&lt;/code&gt;，也减少了&lt;code&gt;rewrite&lt;/code&gt;时带来的系统波动。代价是如果&lt;code&gt;Master/Slave&lt;/code&gt;同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个&lt;code&gt;Master/Slave&lt;/code&gt;中的&lt;code&gt;RDB&lt;/code&gt;文件，载入较新的那个。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是今天的全部内容了，如果你有不同的意见或者更好的&lt;code&gt;idea&lt;/code&gt;，欢迎联系阿Q，添加阿Q可以加入技术交流群参与讨论呦！&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI5MDg2NjEzNA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/55HPQyguvpMAn4Ha81WVBfsKnC9ficVemZff27LiaSoKX83JqwnNmrNhb4D4oAjW7wiaDwtkLTTCRs1A1hanfNu9g/0?wx_fmt=png&quot; data-nickname=&quot;阿Q说代码&quot; data-alias=&quot;AQ_Shuo&quot; data-signature=&quot;专注于后端技术栈分享：文章风格多变、配图通俗易懂、故事生动有趣&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7417d670eb132ed08136f62f3ac0fa5d</guid>
<title>Kubernetes 云原生监控之 cAdvisor 容器资源监控</title>
<link>https://toutiao.io/k/q0jzcg6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p mpa-paragraph-type=&quot;body&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;section data-recommend-type=&quot;list-normal&quot; data-recommend-tid=&quot;2&quot; data-mpa-template=&quot;t&quot; data-mid=&quot;&quot; data-from=&quot;yb-recommend&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247484431_1&quot; data-recommend-article-time=&quot;1630281900&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb0RsJonDpYCorlR5gVQpYzAgmPkHGQN5Q399GP9frRVaPicIAQdlhUXGCHk8O1icekSnlhCFicNH62tw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;【prometheus】-05 Kubernetes云原生监控之节点性能监控&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484431&amp;amp;idx=1&amp;amp;sn=cf9b9ed53fadabac3adfcf62f51258b5&amp;amp;chksm=978b2873a0fca1652e91e29be97d82c3f6bdf36dd8b017ad3f3942b3da1841f72a072aff04e7#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484431&amp;amp;idx=1&amp;amp;sn=cf9b9ed53fadabac3adfcf62f51258b5&amp;amp;chksm=978b2873a0fca1652e91e29be97d82c3f6bdf36dd8b017ad3f3942b3da1841f72a072aff04e7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;【prometheus】-05 Kubernetes云原生监控之节点性能监控&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-30&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb0RsJonDpYCorlR5gVQpYzAgmPkHGQN5Q399GP9frRVaPicIAQdlhUXGCHk8O1icekSnlhCFicNH62tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt; &lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247484394_1&quot; data-recommend-article-time=&quot;1629849900&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCq552mZicibytOL3sLOo85yaV8bS4Zaht3cfDMf0wpw4G29plaIibbVBDRw/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;【prometheus】-04 轻松搞定Prometheus Eureka服务发现&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484394&amp;amp;idx=1&amp;amp;sn=20576cfb678e3a28f46be93efa024947&amp;amp;chksm=978b2f96a0fca680e61749cc8c46339df79bbfc7596cb426c1ca19b6b051d7edb87b37267706#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484394&amp;amp;idx=1&amp;amp;sn=20576cfb678e3a28f46be93efa024947&amp;amp;chksm=978b2f96a0fca680e61749cc8c46339df79bbfc7596cb426c1ca19b6b051d7edb87b37267706&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;【prometheus】-04 轻松搞定Prometheus Eureka服务发现&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-25&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42578125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb1doddicXzKdSe5aGj2Y6SCq552mZicibytOL3sLOo85yaV8bS4Zaht3cfDMf0wpw4G29plaIibbVBDRw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt; &lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247484364_1&quot; data-recommend-article-time=&quot;1629677100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb0sKLyrjzeJ4B3bYbAQRdJ1XS0Pj3pGibvp3KNqxv0w6FnEKsMWbJPvIPqzBD0o9qqgFudYkPZFyMQ/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;【prometheus】-03 轻松搞定Prometheus文件服务发现&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484364&amp;amp;idx=1&amp;amp;sn=52e00b32275b994ac7e09cfe4f555f28&amp;amp;chksm=978b2fb0a0fca6a69759867116eb64682cad792165a0d010f8f2927883911b905ef5972edd90#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484364&amp;amp;idx=1&amp;amp;sn=52e00b32275b994ac7e09cfe4f555f28&amp;amp;chksm=978b2fb0a0fca6a69759867116eb64682cad792165a0d010f8f2927883911b905ef5972edd90&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;【prometheus】-03 轻松搞定Prometheus文件服务发现&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-23&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.4262295081967213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb0sKLyrjzeJ4B3bYbAQRdJ1XS0Pj3pGibvp3KNqxv0w6FnEKsMWbJPvIPqzBD0o9qqgFudYkPZFyMQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;854&quot;/&gt;&lt;/span&gt; &lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247484339_1&quot; data-recommend-article-time=&quot;1629245100&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb1onPQNJibtx9pJH80TaykSupIlrWb8cl4w4R32aKxqjpFrWSoy9yHvkMxCiaD8VEcse7WdWgk2BO5w/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;【prometheus】-02 一张图彻底搞懂Prometheus服务发现机制&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484339&amp;amp;idx=1&amp;amp;sn=d1e741665840251d775f974263495f7d&amp;amp;chksm=978b2fcfa0fca6d993aee10b7990c1528f2a254642e9b20bbdb9ba62d7c0bed96d3f96689e14#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484339&amp;amp;idx=1&amp;amp;sn=d1e741665840251d775f974263495f7d&amp;amp;chksm=978b2fcfa0fca6d993aee10b7990c1528f2a254642e9b20bbdb9ba62d7c0bed96d3f96689e14&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;【prometheus】-02 一张图彻底搞懂Prometheus服务发现机制&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-18&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42578125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb1onPQNJibtx9pJH80TaykSupIlrWb8cl4w4R32aKxqjpFrWSoy9yHvkMxCiaD8VEcse7WdWgk2BO5w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt; &lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; data-recommend-article-type=&quot;list-normal&quot; data-recomment-template-id=&quot;2&quot; data-recommend-article-id=&quot;2247484306_1&quot; data-recommend-article-time=&quot;1629072300&quot; data-recommend-article-cover=&quot;http://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb3O7JCTqYXofpAwwj6icYsRYiaEJEC8gqFElqfXianTYgsQgk8UIfYF59Ra4n11HOebiblb1rgicShMiaLA/0?wx_fmt=jpeg&quot; data-recommend-article-title=&quot;【prometheus】- 01 云原生时代的监控系统入门&quot; data-recommend-article-content-url=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484306&amp;amp;idx=1&amp;amp;sn=b87ef781b6917c0a013221cb33588d73&amp;amp;chksm=978b2feea0fca6f8a40ecd767a933182aa4cfd914ada859c836c9ce77799339de6c4205de3f5#rd&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIxNjM0OTk3MQ==&amp;amp;mid=2247484306&amp;amp;idx=1&amp;amp;sn=b87ef781b6917c0a013221cb33588d73&amp;amp;chksm=978b2feea0fca6f8a40ecd767a933182aa4cfd914ada859c836c9ce77799339de6c4205de3f5&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot;&gt;&lt;section data-recommend-content=&quot;t&quot; data-mid=&quot;&quot;&gt;&lt;section data-mid=&quot;&quot;&gt;&lt;p data-recommend-title=&quot;t&quot; data-mid=&quot;&quot;&gt;【prometheus】- 01 云原生时代的监控系统入门&lt;/p&gt;&lt;p data-recommend-date=&quot;t&quot; data-mid=&quot;&quot;&gt;2021-08-16&lt;/p&gt;&lt;/section&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-ratio=&quot;0.42421875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/O2TDJPu7cb3O7JCTqYXofpAwwj6icYsRYiaEJEC8gqFElqfXianTYgsQgk8UIfYF59Ra4n11HOebiblb1rgicShMiaLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt; &lt;/section&gt;&lt;/a&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Kubernetes监控接入之cAdvisor容器资源监控&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 云原生集群监控主要涉及到如下三类指标：&lt;code&gt;node&lt;/code&gt; 物理节点指标、&lt;code&gt;pod &amp;amp; container&lt;/code&gt; 容器资源指标和&lt;code&gt;Kubernetes&lt;/code&gt; 云原生集群资源指标。针对这三类指标都有比较成熟的方案，见下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.65078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb2rqVydNIpOUgA3icXuISFMC5iaKFy3GpFU0JoAWjacfKAexMY0dgwjtoKWRcmY4khmjibITQzPrp1hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上节我们整理了&lt;code&gt;node&lt;/code&gt;性能指标如何监控，这一节我们就来分析下&lt;code&gt;cAdvisor&lt;/code&gt;性能指标监控。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;cAdvisor(Container Advisor)&lt;/code&gt; 是 &lt;code&gt;Google&lt;/code&gt; 开源的一个容器监控工具，可用于对容器资源的使用情况和性能进行监控。它以守护进程方式运行，用于收集、聚合、处理和导出正在运行容器的有关信息。具体来说，该组件对每个容器都会记录其资源隔离参数、历史资源使用情况、完整历史资源使用情况的直方图和网络统计信息。&lt;code&gt;cAdvisor&lt;/code&gt; 本身就对 &lt;code&gt;Docker&lt;/code&gt; 容器支持，并且还对其它类型的容器尽可能的提供支持，力求兼容与适配所有类型的容器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由以上介绍我们可以知道，&lt;code&gt;cAdvisor&lt;/code&gt; 是用于监控容器引擎的，由于其监控的实用性，&lt;code&gt;Kubernetes&lt;/code&gt; 已经默认将其与 &lt;code&gt;Kubelet&lt;/code&gt; 融合，所以我们无需再单独部署 &lt;code&gt;cAdvisor&lt;/code&gt; 组件来暴露节点中容器运行的信息，直接使用 &lt;code&gt;Kubelet&lt;/code&gt; 组件提供的指标采集地址即可。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;环境信息&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本人搭建的 &lt;code&gt;Kubernetes&lt;/code&gt; 集群环境如下图，后续都是基于该集群演示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6395450568678915&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb2rqVydNIpOUgA3icXuISFMCyiaZ4pG9icqDibVmTMjmSWNUWicBbl7EdIRB3nDFPEF4iaibOWWTCZ8kNEWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1143&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Prometheus接入&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5847107438016529&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb2rqVydNIpOUgA3icXuISFMCgHRtF9YfOG5lSDAvtgTicnef0iaV6DLkv3GZVASTESUQURfzhOa4Kl6g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;968&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、访问&lt;code&gt;Prometheus API&lt;/code&gt;方式检查：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;kubectl get --raw /api/v1/nodes/&lt;span&gt;${1}&lt;/span&gt;/proxy/metrics/cadvisor&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、创建&lt;code&gt;Prometheus&lt;/code&gt;抓取任务&lt;code&gt;job&lt;/code&gt;：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;  &lt;span&gt;-&lt;/span&gt; &lt;span&gt;job_name:&lt;/span&gt; &lt;span&gt;kubernetes-nodes-cadvisor&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;metrics_path:&lt;/span&gt; &lt;span&gt;/metrics&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;scheme:&lt;/span&gt; &lt;span&gt;https&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;kubernetes_sd_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;role:&lt;/span&gt; &lt;span&gt;node&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;api_server:&lt;/span&gt; &lt;span&gt;https://apiserver.simon:6443&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;bearer_token_file:&lt;/span&gt; &lt;span&gt;/tools/token.k8s&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;tls_config:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;insecure_skip_verify:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;bearer_token_file:&lt;/span&gt; &lt;span&gt;/tools/token.k8s&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;tls_config:&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;insecure_skip_verify:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;relabel_configs:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 将标签(.*)作为新标签名，原有值不变&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;action:&lt;/span&gt; &lt;span&gt;labelmap&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;regex:&lt;/span&gt; &lt;span&gt;__meta_kubernetes_node_label_(.*)&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;# 修改NodeIP:10250为APIServerIP:6443&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;action:&lt;/span&gt; &lt;span&gt;replace&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;regex:&lt;/span&gt; &lt;span&gt;(.*)&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;source_labels:&lt;/span&gt; &lt;span&gt;[&quot;__address__&quot;]&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;target_label:&lt;/span&gt; &lt;span&gt;__address__&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;replacement:&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;.52&lt;/span&gt;&lt;span&gt;.151&lt;/span&gt;&lt;span&gt;:6443&lt;/span&gt; &lt;span&gt;#apiserver&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;-&lt;/span&gt; &lt;span&gt;action:&lt;/span&gt; &lt;span&gt;replace&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;source_labels:&lt;/span&gt; &lt;span&gt;[__meta_kubernetes_node_name]&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;target_label:&lt;/span&gt; &lt;span&gt;__metrics_path__&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;regex:&lt;/span&gt; &lt;span&gt;(.*)&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;replacement:&lt;/span&gt; &lt;span&gt;/api/v1/nodes/${1}/proxy/metrics/cadvisor&lt;/span&gt;  &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3、检查是否接入成功：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb2rqVydNIpOUgA3icXuISFMCiciaNjVPWJptt2qLtTibcv9qIpPp2BujnkYKMplKnibibAqsB6Db030qGLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4、&lt;code&gt;cAdvisor&lt;/code&gt;组件抓取指标列表：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;container_fs_write_seconds_total{}&lt;br/&gt;container_memory_swap{}&lt;br/&gt;container_spec_cpu_shares{}&lt;br/&gt;container_ulimits_soft{}&lt;br/&gt;container_fs_io_current{}&lt;br/&gt;container_fs_reads_bytes_total{}&lt;br/&gt;container_fs_writes_merged_total{}&lt;br/&gt;container_cpu_user_seconds_total{}&lt;br/&gt;container_memory_failcnt{}&lt;br/&gt;container_memory_failures_total{}&lt;br/&gt;container_cpu_cfs_throttled_seconds_total{}&lt;br/&gt;container_cpu_usage_seconds_total{}&lt;br/&gt;container_fs_io_time_seconds_total{}&lt;br/&gt;container_network_receive_packets_total{}&lt;br/&gt;container_spec_memory_reservation_limit_bytes{}&lt;br/&gt;cadvisor_version_info{}&lt;br/&gt;container_cpu_cfs_periods_total{}&lt;br/&gt;container_fs_limit_bytes{}&lt;br/&gt;container_fs_sector_writes_total{}&lt;br/&gt;container_memory_usage_bytes{}&lt;br/&gt;container_memory_working_set_bytes{}&lt;br/&gt;container_network_receive_errors_total{}&lt;br/&gt;container_network_transmit_packets_dropped_total{}&lt;br/&gt;container_spec_cpu_period{}&lt;br/&gt;container_file_descriptors{}&lt;br/&gt;container_fs_inodes_total{}&lt;br/&gt;container_fs_usage_bytes{}&lt;br/&gt;container_network_transmit_packets_total{}&lt;br/&gt;container_cpu_load_average_10s{}&lt;br/&gt;container_fs_writes_bytes_total{}&lt;br/&gt;container_memory_cache{}&lt;br/&gt;container_spec_cpu_quota{}&lt;br/&gt;container_cpu_cfs_throttled_periods_total{}&lt;br/&gt;container_network_receive_bytes_total{}&lt;br/&gt;container_network_transmit_errors_total{}&lt;br/&gt;container_sockets{}&lt;br/&gt;container_spec_memory_swap_limit_bytes{}&lt;br/&gt;container_threads{}&lt;br/&gt;container_threads_max{}&lt;br/&gt;container_cpu_system_seconds_total{}&lt;br/&gt;container_fs_read_seconds_total{}&lt;br/&gt;container_fs_reads_merged_total{}&lt;br/&gt;container_fs_sector_reads_total{}&lt;br/&gt;container_processes{}&lt;br/&gt;container_spec_memory_limit_bytes{}&lt;br/&gt;container_fs_inodes_free{}&lt;br/&gt;container_network_receive_packets_dropped_total{}&lt;br/&gt;container_network_transmit_bytes_total{}&lt;br/&gt;container_fs_io_time_weighted_seconds_total{}&lt;br/&gt;container_fs_reads_total{}&lt;br/&gt;container_fs_writes_total{}&lt;br/&gt;container_memory_max_usage_bytes{}&lt;br/&gt;container_memory_rss{}&lt;br/&gt;container_scrape_error{}&lt;br/&gt;container_start_time_seconds{}&lt;br/&gt;container_last_seen{}&lt;br/&gt;container_memory_mapped_file{}&lt;br/&gt;container_tasks_state{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;dashboard配置&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;导入&lt;code&gt;3125 或 13025 dashboard&lt;/code&gt;，&lt;code&gt;cAdvisor&lt;/code&gt;性能监控指标就展示到模板上，如下图：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.496875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb2rqVydNIpOUgA3icXuISFMC2IsbTXKmyY7tN4Q9WwOyibibQlGpG1uob6oSIHcsah81aOrBgjkWTe0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.29765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/O2TDJPu7cb0RsJonDpYCorlR5gVQpYzA88GXySRYqm4XQFkA0hztC7mAd7GX1FhFoQuibysnDFsdcu13rogxdFg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p mpa-paragraph-type=&quot;body&quot;&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>