<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>02328df5cf209d939c372339beab98c3</guid>
<title>生产力工具</title>
<link>https://toutiao.io/k/ltecz1p</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;生产力工具&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;当下什么才是最重要的?&quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;是时间, 我加了时间 &lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXhmIFpqtHiaheADHrTlqZlYqk1HPWlzm3QtJj3GJxRpIFgEeUPsiaf9Ow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt; &quot;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;省下时间才能做更多事情, 所以提高生产力才是王道啊! 文章内容均来自本人真实体验和观点, 分享一些我常用的生产力工具.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;utools&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用mac 的同学可能用过 &lt;strong&gt;Alfred&lt;/strong&gt;, &lt;strong&gt;utools&lt;/strong&gt; 功能与之类似.提供了诸多小工具, 和常用开发文档. utools 也是类 spotlight 应用. 没用过的可以体验一下.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持 macOS, windows 双平台. mac 上可以通过 option + space 呼出&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.47&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUHuhbV9kicGHH30ClsB6hSxibdVsGN1TIgS0oC5NemiaM0HXJDhVETnRJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;使用简单支持输入, 拖拽, 自动粘贴等. 如下拖拽图片会匹配相应的插件供用户筛选使用&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUAXRYbVGA0OhttMjjASGhPDq4PVwJAGGzHPO7H254ibNOZ3rMbAGt7sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;快速启动, 对中文友好.&lt;/p&gt;&lt;figure&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.67&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUicvVV3nnFRzic5C8TDO7JEjnAeQibIxdJc6VuEexSI49prnTO1dh0D4hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;以下是我常用的工具, 推荐大家试试:&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Everything(windows)&amp;amp;Everything(Mac) 可搜索搜索 文件名文件内容.&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图片压缩&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;图床&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;json 编辑器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Code 计算器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;hosts 切换&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动化助手&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;各种文档&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外, utools 开放了插件系统, 用户可以自助编写, 或提交插件供其他用户使用.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;typora&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.32196969696969696&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWVtiaFIFEDuo1RCrdCzeeTMCrL06t1X8tjA4nppVW63HJIlgoHK8iaWQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;792&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Typora 首先是一个 Markdown 文本编辑器, 它支持且仅支持 Markdown 语法的文本编辑.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;同样支持 window, macOS, linux 等多个平台. beta 版本可以免费使用. 目前只有 beta 版本&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;界面简洁美观, 写的舒服,提供多种 Markdown 选择的权利, 非常适合做笔记.&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5622254758418741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUuVAcIYmSFZ4ZhXlYDJvRzmJ2qB8X6NYDicu9EmTuKsXAxX8fPEnS3mQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1366&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;可以自定义主题, 是要你前端玩的6. 当然也提供能主题可供筛选&lt;/p&gt;&lt;p&gt;typora 主题&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUulX151EgicksDibjicA1zsVTDdzjgPaibcSH8kibJp2yWeUibia6icxh7NCKcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5657407407407408&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持导出 html, pdf, docx 等多种格式&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6771844660194175&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXsGX8qmsTINaRYPwnTic5OYCHqQIwSNc58SrWJletTG0BrP1pBPSUUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;412&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提一嘴, 本片文章就是使用的 typora 编写的. 在笔记工具挑选方面我做出了很多时间, 最终选择 typora + github 的方式.  想看一眼的话, 手机上可以同过 github App(未来可期) 预览.&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;PicGo&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图传 一开始用的是 utools 的图床插件. 没毛病的. 一样很好用, 直到我发现 typora 和 PicGo 联动功能之后, 便爱不释手.&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;PicGo 本体支持如下图床：&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;微博图床&lt;/code&gt; V1.0 &lt;strong&gt;微博图床从2019年4月开始进行防盗链，不建议继续使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;七牛图床&lt;/code&gt; V1.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;腾讯云COS v4\v5版本&lt;/code&gt; v1.1和v1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;又拍云&lt;/code&gt; V1.2.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;GitHub&lt;/code&gt; V1.5.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;SM.MS&lt;/code&gt; V1.5.1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;阿里云OSS&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;Imgur&lt;/code&gt; V1.6.0&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持 windows, macOS, linux 多个操作系统&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Typora 复制上传 PicGo&lt;/p&gt;&lt;img data-ratio=&quot;0.8650568181818182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvlCKpwxK97fvFLSwIEssCFqfZkf7nICTCujsq2icKJPribt8C2yNJpqw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1408&quot;/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;typora&amp;gt; 偏好设置&amp;gt;图片, 如下图设置即可&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.688034188034188&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUWibCX33YwMyMhJmoIIVyRztem3ickzyY2ibgnLqTJPC75ZaEoVd57JkRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Clipy&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUZibRwatibT2tsCyIs1fL9IsneAZzrOwHWpleZGYbjAttKskz05tibiafVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你在 Mac 上还在使用传统的 &lt;code&gt;⌘Command-C&lt;/code&gt; 和 &lt;code&gt;⌘Command-V&lt;/code&gt; 快捷键来操作剪贴版，那样是很难谈得上有效率的。而使用剪贴板工具能够帮助你减少重复性输入，提高输入文字的效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用 &lt;code&gt;⇧ +⌘ + V&lt;/code&gt; 呼出&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6469248291571754&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUricribWQhr8MUDvKrCPMib8ObnT044YEqauYtE65WKPCpqUeXuT9sq8Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;439&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Clipy 全面支持纯文本、富文本（RTF、RTFD）、PDF、Filename、URL、TIFF Image 这些格式，能基本满足使用者们的需求。!&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;支持自定义分组片断(一个复制的文本)&lt;/p&gt;&lt;p&gt;⇧ +⌘ + V &amp;gt; 编辑片段 &amp;gt; 添加文件夹&amp;gt;添加片断&lt;/p&gt;&lt;figure/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.77875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNURgKCWxzrq4fiaK4uWLJ9P5pqeTIghkStGCsWjgPjddvyUTHWB4I2ZuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;OneNote&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不能是工作还是学习, 可以说最接近真实是笔记本的存在. 一开始我也尝试过做自己的笔记博客载体, 但是实在是过于灵活了. 后来我选择 Markdown 编辑器 Typora . OneNote 我找到了新的使用场景  GTD (Getting Things Done).&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是 GTD? Getting Things Done 应该翻译为，“把事情处理完” 或者 “把事情做好”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;是不是有时候会觉得&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&quot;觉得自己每天都有好多事情要做，作业、培训、报表、项目、工作总结、微信、电话、邮箱……早上出门发现垃圾没扔，晚上回家发现洗衣机的衣服没晾……打开手机看到别人的出行照片和视频才发现，原来心心念念一年的旅行连计划都还没有做……睡前更要挣扎好久才能睡，因为你可能突然想到，单词没有背、买的几本书没看，收藏夹里还有数不清的文章在吃灰……&quot;  ----引自 topbook&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你是这种状态建议 可以了解一下 GTD, 本文不做过多赘述 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5044444444444445&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUgQyvkcCticFicsj633Dou0Od5pNbSLzpvZomictDSuyKQNWnfylnBDFDA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUl2Ll673pqcbUbG2FCcWkSyDKxWQmdkWt8QK420cpkrkWUB1LD0I7SQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;DataGrip&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUeFSFkvXeCDgVNBl1D4loicVkjZzXLxAOOBuES50RNH4FW6mQrOHq7lA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日常开发中少不了各种可视化数据库管理工具。如果需要同时能连接多种数据库，大家肯定都会想到 &lt;strong&gt;DBeaver&lt;/strong&gt;、&lt;strong&gt;Navicat Premium&lt;/strong&gt; , 其实 DataGrip 也很香的.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Intellij 全家桶工具之一, 所以你不用担心用不习惯, 有些操作手感来了就自己会了&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;提供多数据库驱动 比 Navicat多一些&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有智能的上下文敏感和编码语法提示&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拥有可视化的表格编辑，你可以添加、删除、编辑和克隆数据行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;提供版本控制支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重构支持（主要是会给你SQL优化的建议，使你能够重构sql）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.1435768261964736&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUTEh0qwUkanZb8ia2vDjoCC81hW4mwzBH2q667USg4iarVM83LviaCfKhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;397&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Chrome 插件&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;uBlock Origin&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一款高效的网络请求过滤工具，能去除网页的大部分广告包括视频的广告而且占用极低的内存和CPU(相对 adblock plus)。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.24770642201834864&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUvcScdOKyiaJB9E8dc4Qyr46PpCUfxO3mt0uAxGcTIwpuaUzEib92hJRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;654&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 的拦截更新里面能添加adblock的规则&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;uBlock Origin 能拦截视频广告 直接跳过非黑屏&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Aerys - 窗口标签管理器&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火, 清爽的网页标签管理器.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;⌘+⇧+k 快捷键打开&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直接输入搜索标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类显示现有标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;点击跳转，方便查找&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分类关闭，快速清理&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拖动改变顺序，方便在窗口之间移动标签页&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;显示最近关闭的标签页，点击重新开启&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5130784708249497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUyATlMNJKY5bsGZ8cAR0uiaqW6OX5XTWr7zxjibHXSLuZRXhTsoBICgVQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;994&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Dark Reader&lt;br/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;黑暗主题&lt;/strong&gt; 我知道很多人不喜欢. 但是我还是要说&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个护眼程序, 可以实时生成一个黑暗主题为每个网站启动夜间模式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4395702775290958&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUSqRLo6XE1R11fPdhSeaAcf9AqwjBzWcYMn3xa2IlGhXpb4iaWchLuRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1117&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU19KdeEzx6JFXdUH7ttldiaFKdkPC1fOBG7xibxibE51djDAy0N8DCtotg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Git Master&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好用不火&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;支持GIt目录树查看&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持文件夹和 文件名搜索&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GitHub显示仓库、文件大小，并支持文件复制下载&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;github 消息通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文件历史浏览 GitHub &amp;amp;&amp;amp; GitLab&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可能有些同学用过 Octotree, 但是 Octotree支持 github. Git Master 支持 github, gitLab, gitee,gitea&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0590277777777777&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNU1G5XMsdicym3K8nxWpgstrBL3bricBqjaP3XibGpLdm75hAibUtkCdOD0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;864&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;53&quot; data-cropselx2=&quot;303&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;250&quot; data-ratio=&quot;0.7015755329008341&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicX09OR6yyCDtUJFIj4Xolq2r8rziaHd06LrLuor2nZQBLNibM3SYZQ4fhA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1079&quot; data-backw=&quot;356&quot; data-backh=&quot;250&quot;/&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;IDEA 插件&lt;br/&gt;&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;EasyYapi&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;EasyYapi 是个Idea文档生成工具 . 详情可以参考API 管理平台工具&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;YAPI 部署地址 http://easy-interfaces.tongdun.me:8088&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49053627760252366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXicezibn4cqmoYMc0aticSyaZiaDJpENgDHiafddh3OVuT9R2LavOLxglEFg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;634&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;导出http到&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;section&gt;导出rpc到&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Call api 调用 API&lt;/section&gt;&lt;/li&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;MyBatisCodeHelperPro&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;406&quot; data-ratio=&quot;0.7852593266606005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmy0FkFRNRZC9fTiaKP38x2YH4881QCkvbKg40f5IT1My2U9bq3O6JPxEoQYuDohWk0JZdo1v5o1icWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1099&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;438&quot; data-ratio=&quot;0.7270560190703218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXCzhtPBjIEGEmA9JuESMvqy4icibPNkEHf8AY8GZia7SKgMAkf5bLgvwEQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;839&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;功能点&lt;/th&gt;&lt;th&gt;未激活版&lt;/th&gt;&lt;th&gt;激活版&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;接口与xml互相跳转 更换图标&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;接口方法名重构&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加param&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml中的 param的自动提示 resultMap refid 等的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中的property的自动提示&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测没有使用的xml 可一键删除&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测mybatis接口中方法是否有实现，没有则报红 可创建一个空的xml方法块&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测resultmap的property是否有误&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;支持spring 将mapper注入到spring中 intellij的spring注入不再报错 支持springboot&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成分页查询&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;代码模版，生成cdata和collection语句&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键添加resultMap中未被使用的属性&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;一键生成mybatis接口的testcase&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过方法名生成sql&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过数据库生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;通过java类生成crud代码&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xml collection中的 param提示&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;识别mybatis的标签 全自动sql补全&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;检测#{中的参数是否正确&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;if test when test foreach collection $中的OGNL支持&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;param重构功能(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;resultMap中column提示与检测(2.7.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mybatis xml代码格式化(2.8.2)&lt;/td&gt;&lt;td&gt;✘&lt;/td&gt;&lt;td&gt;✔&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还是收费的功能比较好用. 之前好像是 99块钱 3 年吧. 我之前买过.还是买的起的&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;MyBatisCodeHelper-Pro插件破解版 仅供大家学习, 有能力还是要支持一下正版&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Maven Helper&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Maven Helper 用于分析依赖冲突插件, 当然使用 Maven 命令也可以完成. maven helper 提高了 maven 使用体验 .&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8273504273504273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmys0DbnfBO7a6Zn9iakzCicNUXkKHTGhBhYtaXWLk6NFOh5bVSPm880efNHcLEU3viaG4bQnShibafyTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;558&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;691&quot; data-ratio=&quot;1.238709677419355&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iajeDPuwrjmxYfibAviaupH3U4OIwONKjicXvbdbmvdbbmeLicskNPsWO0G0FCG6MNNBot8r9mhbJ2ibmibxS6bHOrSicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;写在最后&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是推荐使用的生产力工具. 每个人喜好不一样. 大家酌情筛选. 顺便提一个问题 , mac 有没有什么好用的 gif 编辑器. photoshop 就算了. 想找个轻量级一点的 .&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天就分享这么多,欢迎关注,评论,点赞,转载~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/iajeDPuwrjmzRnkibQCicbgruQJxOGOYXYE7ZOpRiafYWaqSSdGFcicCyibI50SATqjc6qT7vm2ZFO7nsA6GfqcJbqmA/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;480&quot;/&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dd90df23f462174300ae154c29e396f0</guid>
<title>资料 | Linkedin 工程团队出品的 SRE 入门教程</title>
<link>https://toutiao.io/k/zak7avs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                              &lt;strong class=&quot;profile_nickname&quot;&gt;开发者头条&lt;/strong&gt;
                              &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;kaifazhetoutiao&lt;/span&gt;
                              &lt;/p&gt;

                              &lt;p class=&quot;profile_meta&quot;&gt;
                              &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                              &lt;span class=&quot;profile_meta_value&quot;&gt;程序员分享平台 | 官方应用下载地址：http://toutiao.io/download&lt;/span&gt;
                              &lt;/p&gt;
                              
                          &lt;/div&gt;
                          &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>15961f674ccf17e1d3a424d902756498</guid>
<title>Golang Mac M1 的性能压测</title>
<link>https://toutiao.io/k/sus7h8k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;clearfix entry-content&quot;&gt;&amp;#13;

&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;前言：&lt;/p&gt;



&lt;p&gt;同事在我的强烈推荐下购买了mac m1，13寸本，内存16g。😅&lt;/p&gt;



&lt;p&gt;主机来了后开始配置环境，这也是烦躁的开始。像一些开发者工具的教程多是x86的，所以需要找到m1的适配教程。像brew工具，官方文档中就有标注m1的安装文档。&lt;/p&gt;



&lt;p&gt;golang release里没有m1的版本，下载x86和arm版运行提示不可用，arm版直接报错，x86 golang二进制文件运行后一直hang住，没有任何提示。go官方博客中说1.16的版本会支持mac m1，但1.16的正式版是2021年的2月份，预计会提前先放出几版beta测试版。&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img src=&quot;http://xiaorui.cc/wp-content/uploads/2020/12/Jietu20201209-233910.jpg&quot; alt=&quot;golang mac m1 编译&quot; class=&quot;wp-image-7155&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;但这也不能耽误人家工作呀，所以在网上一堆找方案，安装rosetta 2指令翻译器，然后重新编译golang。 具体编译golang过程我就不描述了，自己在网上搜吧。&lt;/p&gt;



&lt;p&gt;Rosetta 2 的作用在于它通过指令翻译，可以让 ARM 平台的 macOS，直接运行绝大部分的 X86 软件。经过测试，以前常用的Mac x86软件多数可流程运行，也有一些各别的软件出现卡顿，比如karabiner、vimac、magnet等。vscode打开一瞬间像是hang住了，近2秒后才显示按钮布局。Rosetta 2的翻译还是有损耗，还是要等软件出m1适配版。&lt;/p&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;M1&lt;/p&gt;



&lt;p&gt;借来玩了几天Mac M1，续航真是不错。除了前期遇到些问题，后面的应用体验跟x86差不多，平时办公和开发用到的软件也都可以流畅跑起来。除了docker和虚拟机不能x86系统之外，没什么影响。&lt;/p&gt;



&lt;p&gt;我个人习惯使用Vim和vscode做为golang的代码编辑器，在M1下基本无问题，可以用。Goland支持当然也没有问题的。&lt;/p&gt;



&lt;p&gt;最让人惊艳的就是散热，首先没有风扇的声音干扰太爽了。😁 就日常开发工作中，相比16寸 mac来说温度着实低些。&lt;/p&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;性能对比&lt;/p&gt;



&lt;p&gt;全网都在鼓吹M1的性能，个人也相当的感兴趣，所以来一波简单粗暴、不可靠的压力测试。由于工作主要是基于golang开发，那么索性就测试github中较热门的benchmark。&lt;/p&gt;



&lt;p&gt;下面是 mac m1 跟 mac 2019 16寸 i7的性能对比，分别做了5轮测试，且go test都限制为4个u，取各个平台的多次结果中较为平均的测试输出。压力测试项目用的这个 github.com/cornelk/go-benchmark 。&lt;/p&gt;



&lt;p&gt;单单就测试耗时来说，m1是要比intel i7执行的快个14%。其实之前在两个mac上还做过 go_serialization_benchmarks 对比测试，m1耗时依然要比intel i7快12%左右。&lt;/p&gt;



&lt;p&gt;mac m1&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;// mac m1

➜  go-benchmark git:(master) go test -bench=. -cpu=4
goos: darwin
goarch: amd64
pkg: github.com/cornelk/go-benchmark
BenchmarkAtomicInt32-4                    334891      3539 ns/op
BenchmarkAtomicInt64-4                    335152      3551 ns/op
BenchmarkAtomicUintptr-4                  333566      3551 ns/op
BenchmarkDefer-4                         3812605       315 ns/op
BenchmarkDeferNo-4                      39484240        30.4 ns/op
BenchmarkGoroutineNew-4                    10000   2556633 ns/op
BenchmarkGoroutineChan1RteCPU-4            10000   1370799 ns/op
BenchmarkGoroutineChan10RteCPU-4           10000    314480 ns/op
BenchmarkGoroutineChanCPURteCPU-4          10000    349479 ns/op
BenchmarkGoroutineChan100RteCPU-4          10000    150737 ns/op
BenchmarkGoroutineChan10000RteCPU-4        10000    159831 ns/op
BenchmarkGoroutineChan10Rte10-4            10000    320326 ns/op
BenchmarkGoroutineChan100Rte100-4          10000    253850 ns/op
BenchmarkGoroutineChan10000Rte10000-4        100  14479701 ns/op
BenchmarkHashing64MD5-4                  5085172       250 ns/op  32.05 MB/s
BenchmarkHashing64SHA1-4                 4629715       280 ns/op  28.53 MB/s
BenchmarkHashing64SHA256-4               3403106       354 ns/op  22.62 MB/s
BenchmarkHashing64SHA3B224-4             1511235       828 ns/op   9.66 MB/s
BenchmarkHashing64SHA3B256-4             1791288       765 ns/op  10.45 MB/s
BenchmarkHashing64RIPEMD160-4            2268490       529 ns/op  15.11 MB/s
BenchmarkHashing64Blake2B-4              1834280       707 ns/op  11.32 MB/s
BenchmarkHashing64Blake2BSimd-4          1937584       622 ns/op  12.86 MB/s
BenchmarkHashing64Murmur3-4             13321485       134 ns/op  59.49 MB/s
BenchmarkHashing64Murmur3Twmb-4         14345737        89.2 ns/op  89.73 MB/s
BenchmarkHashing64SipHash-4             18197372        85.3 ns/op  93.77 MB/s
BenchmarkHashing64XXHash-4              16784458        68.6 ns/op 116.63 MB/s
BenchmarkHashing64XXHashpier-4          17751019        84.3 ns/op  94.90 MB/s
BenchmarkHashing64HighwayHash-4          8982220       141 ns/op  56.64 MB/s
BenchmarkHashing32XXHashvova-4          18115452        65.8 ns/op 121.56 MB/s
BenchmarkHashing32XXHashpier-4          20853364        63.9 ns/op 125.20 MB/s
BenchmarkHashing32XXHash-4              13377956        98.3 ns/op  81.40 MB/s
BenchmarkHashing16XXHash-4              18447655        98.3 ns/op  81.36 MB/s
BenchmarkHashing8XXHash-4               18637072        68.7 ns/op 116.47 MB/s
BenchmarkValueUnsafePointer-4           53164192        22.3 ns/op
BenchmarkValueInterface-4               23458231        51.0 ns/op
BenchmarkReflect-4                       2154338       555 ns/op
BenchmarkCast-4                         18145458        66.1 ns/op
BenchmarkParameterPassedByPointer-4     12744134        92.5 ns/op
BenchmarkParameterPassedByValue-4       12046428        93.0 ns/op
BenchmarkSliceReadRange-4               54937928        21.7 ns/op
BenchmarkSliceReadForward-4             38538789        31.0 ns/op
BenchmarkSliceReadBackwards-4           33178958        36.0 ns/op
BenchmarkSliceReadLastItemFirst-4       38209411        31.4 ns/op
BenchmarkSliceFillByIndex-4             55740060        21.5 ns/op
BenchmarkSliceFillByIndexMake-4         56151075        26.9 ns/op
BenchmarkSliceFillMakeAppend-4          50314112        23.9 ns/op
BenchmarkSliceFillAppendNoMake-4         3114499       601 ns/op
BenchmarkSliceFillSmallMakeAppend-4      2443990       943 ns/op
BenchmarkFillLinkedListPushBack-4         619824      3911 ns/op
BenchmarkFillLinkedListPushFront-4        692575      2082 ns/op
BenchmarkSyncRWMutex-4                  11111484       109 ns/op
BenchmarkSyncRWAtomic-4                 10568516       113 ns/op
BenchmarkSyncRWAtomicGosched-4          13135485        91.8 ns/op
PASS
ok  github.com/cornelk/go-benchmark327.366s
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;mac intel i7 2019 16寸&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;// mac intel i7 2019 16寸

 go test -bench=. -cpu=4
goos: darwin
goarch: amd64
pkg: github.com/cornelk/go-benchmark
BenchmarkAtomicInt32-4                    309592      3785 ns/op
BenchmarkAtomicInt64-4                    310130      3941 ns/op
BenchmarkAtomicUintptr-4                  300513      3910 ns/op
BenchmarkDefer-4                         3523532       328 ns/op
BenchmarkDeferNo-4                      12503139        91.2 ns/op
BenchmarkGoroutineNew-4                    10000   1820902 ns/op
BenchmarkGoroutineChan1RteCPU-4            10000    334300 ns/op
BenchmarkGoroutineChan10RteCPU-4           10000    220070 ns/op
BenchmarkGoroutineChanCPURteCPU-4          10000    204412 ns/op
BenchmarkGoroutineChan100RteCPU-4          10000    170625 ns/op
BenchmarkGoroutineChan10000RteCPU-4        10000    175718 ns/op
BenchmarkGoroutineChan10Rte10-4            10000    213040 ns/op
BenchmarkGoroutineChan100Rte100-4          10000    241891 ns/op
BenchmarkGoroutineChan10000Rte10000-4        100  19974006 ns/op
BenchmarkHashing64MD5-4                  7532625       189 ns/op  42.33 MB/s
BenchmarkHashing64SHA1-4                 5739030       186 ns/op  43.08 MB/s
BenchmarkHashing64SHA256-4               5050978       242 ns/op  33.01 MB/s
BenchmarkHashing64SHA3B224-4             1565026       901 ns/op   8.88 MB/s
BenchmarkHashing64SHA3B256-4             1690936       765 ns/op  10.45 MB/s
BenchmarkHashing64RIPEMD160-4            2395820       499 ns/op  16.02 MB/s
BenchmarkHashing64Blake2B-4              3472456       341 ns/op  23.49 MB/s
BenchmarkHashing64Blake2BSimd-4          3831225       340 ns/op  23.54 MB/s
BenchmarkHashing64Murmur3-4             18620680        64.3 ns/op 124.35 MB/s
BenchmarkHashing64Murmur3Twmb-4         19444350        63.5 ns/op 125.97 MB/s
BenchmarkHashing64SipHash-4             21155768        56.0 ns/op 142.77 MB/s
BenchmarkHashing64XXHash-4              31849977        51.3 ns/op 155.94 MB/s
BenchmarkHashing64XXHashpier-4          28207137        44.9 ns/op 178.29 MB/s
BenchmarkHashing64HighwayHash-4         13295876        92.0 ns/op  86.95 MB/s
BenchmarkHashing32XXHashvova-4          33265984        35.6 ns/op 224.68 MB/s
BenchmarkHashing32XXHashpier-4          31837797        37.0 ns/op 216.20 MB/s
BenchmarkHashing32XXHash-4              21471313        56.1 ns/op 142.53 MB/s
BenchmarkHashing16XXHash-4              21619030        55.0 ns/op 145.49 MB/s
BenchmarkHashing8XXHash-4               31882546        36.8 ns/op 217.49 MB/s
BenchmarkValueUnsafePointer-4           68717324        17.0 ns/op
BenchmarkValueInterface-4               30155677        38.9 ns/op
BenchmarkReflect-4                       7165081       165 ns/op
BenchmarkCast-4                         18640602        62.4 ns/op
BenchmarkParameterPassedByPointer-4     16345183        76.5 ns/op
BenchmarkParameterPassedByValue-4       10353224       120 ns/op
BenchmarkSliceReadRange-4               59617837        19.7 ns/op
BenchmarkSliceReadForward-4             18860553        61.5 ns/op
BenchmarkSliceReadBackwards-4           18713661        62.0 ns/op
BenchmarkSliceReadLastItemFirst-4       47315362        25.2 ns/op
BenchmarkSliceFillByIndex-4             72714333        16.3 ns/op
BenchmarkSliceFillByIndexMake-4         35459602        31.7 ns/op
BenchmarkSliceFillMakeAppend-4          41651622        28.7 ns/op
BenchmarkSliceFillAppendNoMake-4         3953661       671 ns/op
BenchmarkSliceFillSmallMakeAppend-4      2419346       430 ns/op
BenchmarkFillLinkedListPushBack-4         498951      2398 ns/op
BenchmarkFillLinkedListPushFront-4        503970      2394 ns/op
BenchmarkSyncRWMutex-4                  19353127        61.8 ns/op
BenchmarkSyncRWAtomic-4                  4075513       303 ns/op
BenchmarkSyncRWAtomicGosched-4          18012901        68.9 ns/op
PASS
ok  github.com/cornelk/go-benchmark375.283s&lt;/code&gt;&lt;/pre&gt;



&lt;p class=&quot;has-text-color has-vivid-green-cyan-color&quot;&gt;总结&lt;/p&gt;



&lt;p&gt;Mac M1各方面还真是可以，性能压测数据也相对可观，但还是建议够买需求的朋友再稳稳。毕竟对于程序员来说，Mac是生产工具，而不是让你烦躁的发动机。要么等开发工具完美适配，要么等M2出世。&lt;/p&gt;



&lt;p&gt;M1的发热控制的不错，在压测的几十分钟内，M1的发热要比16寸低一些。另外，长时间跑cpu密集运算，M1还是会有些降频的。&lt;/p&gt;
        &lt;div&gt;&amp;#13;
            &lt;hr/&gt;&amp;#13;
            &lt;span&gt;大家觉得文章对你有些作用！&amp;#13;
                如果想&lt;span&gt;赏钱&lt;/span&gt;，可以用微信扫描下面的二维码，感谢!&lt;br/&gt;另外再次标注博客原地址  &lt;a href=&quot;http://xiaorui.cc&quot; target=&quot;_blank&quot;&gt;xiaorui.cc&lt;/a&gt;&lt;br/&gt;&lt;span/&gt;&amp;#13;
&amp;#13;
            &lt;/span&gt;&amp;#13;
                &lt;center&gt;&lt;img src=&quot;http://static.xiaorui.cc/static/weixin_new.jpg&quot;/&gt;&lt;/center&gt;&amp;#13;
        &lt;/div&gt;&amp;#13;
&lt;/div&gt;&amp;#13;
&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f9c03ef0ee7b37d084a3daa5a1b94123</guid>
<title>Hadoop 框架：MapReduce 基本原理和入门案例</title>
<link>https://toutiao.io/k/x2r860r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、MapReduce概述&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、基本概念&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Hadoop核心组件之一：分布式计算的方案MapReduce，是一种编程模型，用于大规模数据集的并行运算，其中Map（映射）和Reduce（归约）。&lt;/p&gt;&lt;p&gt;MapReduce既是一个编程模型，也是一个计算组件，处理的过程分为两个阶段，Map阶段：负责把任务分解为多个小任务，Reduce负责把多个小任务的处理结果进行汇总。其中Map阶段主要输入是一对Key-Value，经过map计算后输出一对Key-Value值；然后将相同Key合并，形成Key-Value集合；再将这个Key-Value集合转入Reduce阶段，经过计算输出最终Key-Value结果集。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、特点描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;MapReduce可以实现基于上千台服务器并发工作，提供很强大的数据处理能力，如果其中单台服务挂掉，计算任务会自动转义到另外节点执行，保证高容错性；但是MapReduce不适应于实时计算与流式计算，计算的数据是静态的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、操作案例&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、流程描述&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3671875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOe7A0Y3P1DF6fGKxjY5gKwLHlmtkfgpjzrmIkwe6hdHxJLCvAU8ibPbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;数据文件一般以CSV格式居多，数据行通常以空格分隔，这里需要考虑数据内容特点；&lt;/p&gt;&lt;p&gt;文件经过切片分配在不同的MapTask任务中并发执行；&lt;/p&gt;&lt;p&gt;MapTask任务执行完毕之后，执行ReduceTask任务，依赖Map阶段的数据；&lt;/p&gt;&lt;p&gt;ReduceTask任务执行完毕后，输出文件结果。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、基础配置&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hadoop:&lt;br/&gt;  &lt;span&gt;# 读取的文件源&lt;/span&gt;&lt;br/&gt;  inputPath: hdfs:&lt;span&gt;//hop01:9000/hopdir/javaNew.txt&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;# 该路径必须是程序运行前不存在的&lt;/span&gt;&lt;br/&gt;  outputPath: /wordOut&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;3、Mapper程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    Text mapKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;    IntWritable mapValue = &lt;span&gt;new&lt;/span&gt; IntWritable(&lt;span&gt;1&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt; &lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;        &lt;span&gt;// 2、行内容切割，根据文件中分隔符&lt;/span&gt;&lt;br/&gt;        String[] words = line.split(&lt;span&gt;&quot; &quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;// 3、存储&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (String word : words) {&lt;br/&gt;            mapKey.set(word);&lt;br/&gt;            context.write(mapKey, mapValue);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;4、Reducer程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;IntWritable&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;int&lt;/span&gt; sum ;&lt;br/&gt;    IntWritable value = &lt;span&gt;new&lt;/span&gt; IntWritable();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;IntWritable&amp;gt; values,Context context)&lt;/span&gt;&lt;br/&gt;                        &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 1、累加求和统计&lt;/span&gt;&lt;br/&gt;        sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (IntWritable count : values) {&lt;br/&gt;            sum += count.get();&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// 2、输出结果&lt;/span&gt;&lt;br/&gt;        value.set(sum);&lt;br/&gt;        context.write(key,value);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;5、执行程序&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;WordWeb&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Resource&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; MapReduceConfig mapReduceConfig ;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/getWord&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getWord&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 声明配置&lt;/span&gt;&lt;br/&gt;        Configuration hadoopConfig = &lt;span&gt;new&lt;/span&gt; Configuration();&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.hdfs.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.hdfs.DistributedFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        hadoopConfig.set(&lt;span&gt;&quot;fs.file.impl&quot;&lt;/span&gt;,&lt;br/&gt;                org.apache.hadoop.fs.LocalFileSystem.class.getName()&lt;br/&gt;        );&lt;br/&gt;        Job job = Job.getInstance(hadoopConfig);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// Job执行作业 输入路径&lt;/span&gt;&lt;br/&gt;        FileInputFormat.addInputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getInputPath()));&lt;br/&gt;        &lt;span&gt;// Job执行作业 输出路径&lt;/span&gt;&lt;br/&gt;        FileOutputFormat.setOutputPath(job, &lt;span&gt;new&lt;/span&gt; Path(mapReduceConfig.getOutputPath()));&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 自定义 Mapper和Reducer 两个阶段的任务处理类&lt;/span&gt;&lt;br/&gt;        job.setMapperClass(WordMapper.class);&lt;br/&gt;        job.setReducerClass(WordReducer.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 设置输出结果的Key和Value的类型&lt;/span&gt;&lt;br/&gt;        job.setOutputKeyClass(Text.class);&lt;br/&gt;        job.setOutputValueClass(IntWritable.class);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;//执行Job直到完成&lt;/span&gt;&lt;br/&gt;        job.waitForCompletion(&lt;span&gt;true&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;success&quot;&lt;/span&gt; ;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;6、执行结果查看&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;将应用程序打包放到hop01服务上执行；&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -jar &lt;span&gt;map&lt;/span&gt;-reduce-case01.jar&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5587628865979382&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AOWC6Uiah1aNeBBVtabria5TxO2ZQPcu15HwibianEM8SoEsRSuqyfPnIbzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、案例分析&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、数据类型&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Java数据类型与对应的Hadoop数据序列化类型；&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4794520547945205&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO999VxYKd4ViaSMbIeyOOJHVrL93icHUEMbDRrHLiaxY8z9t891aqXcccw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、核心模块&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Mapper模块&lt;/strong&gt;：处理输入的数据，业务逻辑在map()方法中完成，输出的数据也是KV格式；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Reducer模块&lt;/strong&gt;：处理Map程序输出的KV数据，业务逻辑在reduce()方法中；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Driver模块&lt;/strong&gt;：将程序提交到yarn进行调度，提交封装了运行参数的job对象；&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、序列化操作&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span&gt;1、序列化简介&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;序列化：将内存中对象转换为二进制的字节序列，可以通过输出流持久化存储或者网络传输；&lt;/p&gt;&lt;p&gt;反序列化：接收输入字节流或者读取磁盘持久化的数据，加载到内存的对象过程；&lt;/p&gt;&lt;p&gt;Hadoop序列化相关接口：Writable实现的序列化机制、Comparable管理Key的排序问题；&lt;/p&gt;&lt;h2&gt;&lt;span&gt;2、案例实现&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;案例描述：读取文件，并对文件相同的行做数据累加计算，输出计算结果；该案例演示在本地执行，不把Jar包上传的hadoop服务器，驱动配置一致。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;实体对象属性&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt; &lt;span&gt;implements&lt;/span&gt; &lt;span&gt;Writable&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum01;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; addNum02;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; resNum;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 构造方法&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;AddEntity&lt;/span&gt;&lt;span&gt;(&lt;span&gt;long&lt;/span&gt; addNum01, &lt;span&gt;long&lt;/span&gt; addNum02)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01 = addNum01;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = addNum02;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = addNum01 + addNum02;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;// 序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;write&lt;/span&gt;&lt;span&gt;(DataOutput dataOutput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        dataOutput.writeLong(addNum01);&lt;br/&gt;        dataOutput.writeLong(addNum02);&lt;br/&gt;        dataOutput.writeLong(resNum);&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 反序列化&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;readFields&lt;/span&gt;&lt;span&gt;(DataInput dataInput)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;// 注意：反序列化顺序和写序列化顺序一致&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum01  = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.addNum02 = dataInput.readLong();&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.resNum = dataInput.readLong();&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;// 省略Get和Set方法&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Mapper机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span&gt;LongWritable&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    Text myKey = &lt;span&gt;new&lt;/span&gt; Text();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;&lt;span&gt;(LongWritable key, Text value, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 读取行&lt;/span&gt;&lt;br/&gt;        String line = value.toString();&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 行内容切割&lt;/span&gt;&lt;br/&gt;        String[] lineArr = line.split(&lt;span&gt;&quot;,&quot;&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 内容格式处理&lt;/span&gt;&lt;br/&gt;        String lineNum = lineArr[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01 = Long.parseLong(lineArr[&lt;span&gt;1&lt;/span&gt;]);&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02 = Long.parseLong(lineArr[&lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;&lt;br/&gt;        myKey.set(lineNum);&lt;br/&gt;        AddEntity myValue = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01,addNum02);&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 输出&lt;/span&gt;&lt;br/&gt;        context.write(myKey, myValue);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Reducer机制&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AddReducer&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;, &lt;span&gt;Text&lt;/span&gt;, &lt;span&gt;AddEntity&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;reduce&lt;/span&gt;&lt;span&gt;(Text key, Iterable&amp;lt;AddEntity&amp;gt; values, Context context)&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;throws&lt;/span&gt; IOException, InterruptedException &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum01Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;long&lt;/span&gt; addNum02Sum = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 处理Key相同&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (AddEntity addEntity : values) {&lt;br/&gt;            addNum01Sum += addEntity.getAddNum01();&lt;br/&gt;            addNum02Sum += addEntity.getAddNum02();&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;// 最终输出&lt;/span&gt;&lt;br/&gt;        AddEntity addRes = &lt;span&gt;new&lt;/span&gt; AddEntity(addNum01Sum, addNum02Sum);&lt;br/&gt;        context.write(key, addRes);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例最终结果：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.366&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvBMfiaK0lXA3qezX67I3l9AO9KYVrIJvskZOIrwm0rUfAQicj5AjS7X4jJpLIYKP6hbVgiaX726lK4xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1000&quot;/&gt;&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile/big-data-parent&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>12580d21475f8f563b1c1217e6560737</guid>
<title>区块链 2020 年度回顾之公链篇：比特币、以太坊、Polkadot 和 Filecoin</title>
<link>https://toutiao.io/k/xtems29</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97678&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section data-autoskip=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020年行将结束，这一年，区块链行业让你印象最深的是什么？是公链生态的爆发式增长？还是区块链应用的蓬勃发展？亦或是政策方面的重大利好？万向区块链于2020年年末，推出四篇重磅年度回顾系列文章：《公链篇》、《应用篇》、《服务实体经济篇》和&lt;span&gt;《监管篇》&lt;/span&gt;，记录一个乘风破浪的区块链发展之年。回顾文章将于每周三发布，敬请锁定我们的微信公众号，第一时间获取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下文为年度回顾系列之——公链篇，作者：万向区块链首席经济学家办公室。一起看，这一年公链的风起云涌。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020年即将结束，虽然疫情席卷全球，但没有影响到区块链行业的进步。在这一年中，公链和生态应用均有突破，各国对区块链及加密资产的政策也逐渐完善。本文是对区块链行业这一年进展的回顾，尤其是公链方面的进展，其中重点关注比特币、以太坊、Polkadot和Filecoin这四个热度比较高的公链。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93706&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-num=&quot;6&quot; data-num1=&quot;一&quot; data-num2=&quot;二&quot; data-num3=&quot;三&quot; data-num4=&quot;四&quot; data-num5=&quot;五&quot; data-num6=&quot;六&quot; data-num7=&quot;七&quot; data-num8=&quot;八&quot; data-num9=&quot;九&quot; data-num10=&quot;十&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;一&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;176:291&quot;&gt;&lt;p&gt;&lt;span&gt;比特币&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年比特币最大的技术进展在Taproot/Schnorr升级，这是由比特币开发人员Pieter Wuille提出，作为比特币改进提案（BIPs）发布，相关提案序号为BIP 340-342，现在已经正式合入比特币代码的主分支中。这是比特币自闪电网络上线后最大的技术拓展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一）Schnorr升级 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比特币目前使用的ECDSA签名算法与即将采用的Schnorr签名算法，都属于椭圆曲线数字签名算法，它们使用的椭圆曲线都是secp256k1和哈希函数SHA256，所以在这个层面它们具有同样的安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Schnorr签名算法主要有以下优点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一，Schnorr签名算法有可证明安全性。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在假设椭圆曲线离散对数问题难度的随机寓言（Random Oracle）模型，以及假设原像抗性（Preimage Resistance）和次原像抗性（Second Preimage Resistance）的通用群模型下，Schnorr签名算法具备选择消息攻击下的强不可伪造性（Strong Unforgeability under Chosen Message Attack，SUF-CMA）。换言之，如果不知道Schnorr签名的私钥，即使有针对任意消息的有效Schnorr签名，也没法推导出其他有效Schnorr签名。而ECDSA签名算法的可证明安全性则依赖于更强的假设。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第二，Schnorr签名算法具有不可延展性（Non-malleability）。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;签名延展性的含义是，第三方在不知道私钥的情况下，能将针对某一公钥和消息的有效签名，改造成针对该公钥和信息的另一个有效签名。ECDSA签名算法则有内在的可延展性，这是BIP 62和BIP 146针对的问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第三，Schnorr签名算法是线性的，使得多个合作方能生成对他们的公钥之和也有效的签名。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这一特点对多重签名、批验证（Batch Verification）等应用非常重要，既能提高效率，也有助于保护隐私。而在ECDSA签名算法下，如无额外的见证数据，批验证相对逐个验证并无效率提升。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，Schnorr签名算法因为使用同样的椭圆曲线secp256k1和哈希函数SHA256，能兼容目前的比特币公私钥生成机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（二）Taproot升级 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Taproot升级可以视为默克抽象语言树（Merkelized Abstract Syntax Tree，简称MAST）的一个应用，而MAST又与支付到脚本哈希（Pay-to-Script-Hash，简称P2SH）有关。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;P2SH是2012年推出的一类新型交易，使复杂脚本的使用与直接向比特币地址支付一样简单。在P2SH中，复杂的锁定脚本被其哈希值所取代，称为兑换脚本（Redeem Script）。当随后出现的一笔交易试图花费这个UTXO时，必须包含与哈希值匹配的脚本，同时解锁脚本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;P2SH的主要优点包括：一是在交易输出中，复杂脚本由哈希值取代，使得交易代码变短。二是将构建脚本的负担转移至接收方，而非发送方。三是隐私保护性更好。理论上，除了接收方，任何其他方都可以不知道兑换脚本中包含的支出条件。比如，在多重交易中，发送方可以不知道与多重签名地址有关的公钥；只在接收方支出资金时，才披露公钥。但P2SH也存在不足：一是所有可能的支出条件最终都必须被披露，包括那些实际上没有被触发的支出条件。二是在有多个可能的支出条件时，P2SH将变得繁复，会增加计算和验证的工作量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但P2SH与常见的支付到公钥哈希（Pay-to-Public-Key-Hash，P2PKH）在表现上不一样，仍然有隐私保护问题。Taproot解决的问题就是让P2SH和P2PKH在链上看起来一样（图1）：1、对“非协作式支出”脚本，采取MAST形式；2、对“协作式支出”脚本，采取基于Schnorr签名的多重签名算法；3、将“协作式支出” 与“非协作式支出”合在一起表示成P2PKH形式；4、“协作式支出”表现得如同P2PKH交易，有一个公钥和对应的私钥，而不需要披露底层的MAST，而只有在“非协作式支出”时，才需要披露MAST的存在，但也只需披露被执行的那部分脚本。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5667870036101083&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fDdiawLicfiaa2hRSGb2PrInFj3Niak5TNX0ImN0eVEsP3ic5SiaGZgicDnlQ72d4S8c1aHvCvc84OrMY4rFd4DM5XvicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1：Taproot&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93706&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-num=&quot;7&quot; data-num1=&quot;一&quot; data-num2=&quot;二&quot; data-num3=&quot;三&quot; data-num4=&quot;四&quot; data-num5=&quot;五&quot; data-num6=&quot;六&quot; data-num7=&quot;七&quot; data-num8=&quot;八&quot; data-num9=&quot;九&quot; data-num10=&quot;十&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;二&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;187:278&quot;&gt;&lt;p&gt;&lt;span&gt;以太坊&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可扩展性一直是困扰以太坊发展的问题，尤其是2020年DeFi应用爆发，网络拥堵导致了高昂的手续费。性能不足让以太坊很难达到“世界计算机”的要求，也影响了用户体验。扩容是以太坊网络的当务之急，2020年以太坊的进展主要集中在扩容方面，共分为两部分：一个是以太坊2.0的筹备与上线，另一个是Layer 2扩容方案的发展，其中Rollup路线最为突出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一）以太坊2.0的进展和路线 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以太坊的发展路线中，转为PoS公链是“宁静”阶段的目标，也就是以太坊2.0。之后ETH的产出将由挖矿转为Staking，成为Staking节点需要抵押32个ETH。在最初的规划中，以太坊2.0将分为三个阶段上线，分别是Phase 0、Phase 1和Phase 2。以太坊2.0为信标链加分片的区块链多链结构，所有分片链都与信标链相连，信标链负责分片链间的通信，并为各分片链选举验证委员。Phase 0阶段会上线信标链并开启Staking，Phase 1会上线分片链，初步计划共有64个分片，但是不支持智能合约和转账，Phase 2阶段才会上线智能合约，正式完成以太坊2.0的部署。在以太坊2.0的路线图中，整个方案将在2022年完成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以太坊2.0网络的启动条件是超过16384个验证者抵押32个ETH，也就是至少需要16384个节点参与。以太坊2.0的Phase 0阶段已于12月1日开启，目前活跃节点数为26861，未来还会增加。这些参与Staking的ETH只有在以太坊2.0的Phase 2阶段完成后才可以进行转账。以太坊2.0是以太坊长期的战略目标，不过以太坊创始人Vitalik多次发文支持rollup在以太坊中的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在近期以太坊开发团队和Vitalik的公开发言中，他们承认以太坊2.0的路线已经有所变化，共包括以下几点：1、未来的路线图将以Rollup为中心，Phase 1阶段简化为可供Rollup使用的数据分片，由于最初设想的优势仍未实现，eWASM的路线不再强调；2、简化以太坊1.0和2.0阶段的合并，将以太坊1.0的交易直接存于信标链上而非作为分片存在于以太坊2.0中，这样合并的进程将会缩短；3、工作并行化处理，轻客户端、数据分片和1.0与2.0的合并这三者独立进行，只要每个部分准备好就可以实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从以太坊2.0这几点改变可以看出，整体都是在向更快落地使用方向发展。引入Rollup的解决方案不仅是要解决目前急迫的扩容需求，也有利于创新。以太坊2.0的原有路线没有完全被抛弃，只是不再具有最高优先级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（二）以Rollup为中心的路线 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Layer 2解决可扩展性问题的方式是将主链上的行为操作转移到链下进行，以节约主链资源，同时不影响公链本身。Layer 2主流方案有状态通道、侧链、Plasma和Rollup。但是前三者在近年来的发展中都遇到了种种瓶颈，例如中心化，用户操作复杂，不支持智能合约，退出机制复杂等。Rollup方案的实现方式是将交易数据在链下打包成一笔再传到链上，同时保证和Layer 1层一致的安全性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于如何实现Rollup，不同的团队给出了不同的解决方案。Optimistic Rollup和ZK Rollup是目前开发团队最多也是应用范围最广的两种。Optimistic Rollup通过欺诈证明机制，保证节点不会作恶，ZK Rollup则使用了零知识证明保证了和主网相同的安全性。这两种方案也各有利弊，Optimistic Rollup支持智能合约，但是退出期比较长，会影响资金的使用率，ZK Rollup的退出期比较短，但很难支持通用的智能合约。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前以太坊上的很多应用都已经或将要进行不同Rollup的测试网试验，例如Curve、Synthetix和Uniswap等，也有一些已经基于Rollup方案上线的DeFi项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93706&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-num=&quot;8&quot; data-num1=&quot;一&quot; data-num2=&quot;二&quot; data-num3=&quot;三&quot; data-num4=&quot;四&quot; data-num5=&quot;五&quot; data-num6=&quot;六&quot; data-num7=&quot;七&quot; data-num8=&quot;八&quot; data-num9=&quot;九&quot; data-num10=&quot;十&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;三&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;187:291&quot;&gt;&lt;p&gt;&lt;span&gt;Polkadot&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一）技术与治理进展 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2020年8月份Polkadot上线了DOT转账功能，标志着主网上线阶段正式完成。Polkadot是一种异构的多链架构，采用中继链加平行链的形式进行跨链，让链与链之间进行交互并提高可扩展性，这其中Substrate框架扮演了很重要的角色。Substrate可以理解为通用的集合各种功能的模板，开发者可以选择调用不同的模块（pallet）以节约开发时间。目前Substrate上线了2.0版本，增加了70多个pallet和链下工作机功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Kusama测试网在Polkadot主网上线之后仍然存在，充当先行网络的角色， Kusama的代币KSM也保留了下来，功能和DOT类似。具有风险的功能在上线主网之前，会在Kusama网络上运行反馈，例如即将上线的平行链卡槽拍卖，会先上线Kusama进行实际测试之后才会在Polkadot上启动。Rococo则是专为测试平行链而推出的测试网，目前已经上线了平行链V1.0版本，意味着距离主网平行链上线又近了一步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在治理上，Polkadot的链上治理已经开启，但是大户权力大和公众投票率低的问题仍然存在。Polkadot的理事会由投票选出，此投票与公投和Staking不冲突，也就是大户可以选举出符合自己意愿的理事会成员，再用自己手中的DOT参与公投。虽然这种方式可以让治理结果表达最大利益相关者的意愿，但会引起治理的中心化问题。此外，在公投投票中，DOT持有者的投票率很低。在Polkadot中，Staking与治理投票互不影响，目前Staking的质押率在70%左右，但公投的投票率却在个位数左右。投票率低会影响治理的分布式程度，也无法真实地反映所有人的意愿。这可能由于投票的重复操作太复杂，也可能由于用户对提案内容不了解，无法做出选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（二）生态进展 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然Polkadot主网的功能还未完善，但生态中已经涌现了许多应用。根据PolkaProject统计，与Polkadot相关的项目已经达到了近300个，包括基于Substrate开发的项目、工具、论坛、钱包等。下图2是PolkaProject总结的Polkadot生态总览。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6207627118644068&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fDdiawLicfiaa2hRSGb2PrInFj3Niak5TNX0sVNu6oIk51R6zFOqu6d6y4ttNn9Ul6m98bsFd1HgQRm4WF83lTX0HQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;472&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 2：Polkadot生态总览（图片来源：PolkaProject.com）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Polkadot的生态应用主要集中在DeFi，这也是目前全行业最热门的领域，其他的有数据、隐私和资产桥类。相对于其他公链平台，Polkadot几乎没有关于游戏、预测和社交类的应用，这与Polkadot刚上线有关，也因为有些应用在其他公链上已经证伪或是跨链意义不大。在DeFi领域，流动性释放和DEX是最热门的板块，Polkadot中的DOT锁定流动性有多种方式，包括Staking、治理和卡槽拍卖（治理和其他功能的锁定不冲突），所以存在释放流动性的需求，DEX则是在链上进行价值交换必备的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前Polkadot的生态应用几乎全部都需要基于平行链开展业务，没有上线主网的应用还需要Polkadot中继链上的验证人保证安全，所以这些项目都要参与平行链的卡槽拍卖。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Polkadot的网络资源是有限的，目前最多支持100条平行链，想要使用平行链则需要项目方租用平行链卡槽。卡槽由Polkadot官方依次放出，每隔一段时间开放一个，时间间隔不固定。租用卡槽需要锁定DOT，等待租期结束后释放。租赁锁定的DOT会在租赁期结束后返还，所以租赁成本只是DOT的机会成本。Polkadot允许其他人为项目方存入DOT，帮助项目方在拍卖中胜出，这就需要项目方设置有效的激励方式吸引DOT持有者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般来说，项目方会将自己的token奖励给帮助其进行平行链拍卖的用户，这也叫做平行链释放发行（Parachain Lease Offering，PLO）。同样对于用户来说，参与PLO的成本为锁定DOT的机会成本。目前DOT的场景有Staking、治理、交易和平行链租赁，未来还会有一些应用场景。对于DOT的长期持有者来说，如果项目方给与token的价值要高于参与staking（目前在10%以上）或者某些DeFi的收益，会是比较有利的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在官方信息中，最初的平行链除了以拍卖的方式分发之外，Web3也会赞助一些公益链，包括含有基础设施或者转接桥的链。例如与智能合约相关的平行链，在卡槽使用上可能直接得到Web3的帮助。如果没有成功拿到卡槽，还有几种方案可以参与跨链，使用平行线程和部署到其他已经拿到卡槽的平行链上，如果已经拥有自己的主网，还可以通过跨链桥转接到Polkadot上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（三）Polkadot生态中的问题 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平行链的卡槽将采用租赁的方式，意味着绝大多数Polkadot项目都要付出成本（抵押DOT）换取Polkadot上的跨链资源，所以借助Polkadot中继链安全性进行平行链发行的门槛提高了很多。对于大部分项目来说，只有能够支付得起租赁跨链资源成本的项目方才可以借助Polkadot的安全性，否则要自行部署节点，这会增加早期项目的启动难度。目前项目方采用的PLO解决方案会存在可持续性的问题，如果Token分发完毕后，则必须采用其他方式吸引用户协助拍卖，项目方Token在平行链上线后的价值捕获能力也存在风险。在平行链插槽拍卖竞争激烈的情况下，项目方必须在上线前进行大面积宣传活动，冷启动在Polkadot生态中将很难存在。如果未来竞争激烈的话，出于对跨链资源的争夺，项目在上线前就会出现“优胜劣汰”的局面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过在Polkadot上存在有其他的跨链方案，例如平行线程或者集成到其他拥有平行链卡槽的项目中，也可以选择在Kusama网络发行来降低成本。目前平行链和平行线程的可用程度的区别，以其他方式跨链对团队的负担还需要在上线后持续观察。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Polkadot和测试网的Kusama功能差别不大，所以追求不同稳定性的团队会有不同选择，但是会造成用户和社区分散的情况。虽然两者在技术升级时不会产生分叉，但在最开始两个社区就分隔开来，这在隐形中造成了社区的分裂。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Polkadot的目标为平台的平台，公链之间的跨链是其解决的问题之一。对于公链来说，默认的跨链问题只存在于主流公链之间，目前的解决方案不断出现，Polkadot如何在众多跨链解决方案中胜出是有待观察的。Polkadot还有提高单链性能的优势，现在同样存在多种提高性能的方案，例如layer 2网络，Polkadot发挥的作用也需要时间考验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Polkadot在企业平台与公链、企业平台与企业平台之间跨链的想象空间比较大，但是跨链的成本与意义也需要进一步考察，目前联盟链与公链之间的连通需求并不急迫。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93706&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-num=&quot;9&quot; data-num1=&quot;一&quot; data-num2=&quot;二&quot; data-num3=&quot;三&quot; data-num4=&quot;四&quot; data-num5=&quot;五&quot; data-num6=&quot;六&quot; data-num7=&quot;七&quot; data-num8=&quot;八&quot; data-num9=&quot;九&quot; data-num10=&quot;十&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;四&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;192:296&quot;&gt;&lt;p&gt;&lt;span&gt;Filecoin&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Filecoin为分布式存储IPFS提供了激励机制，核心成员也包括了IPFS成员，两者均由Protocol Lab创建，一经推出便引起了全世界的关注。在2017年就以10%的份额获得了2.57亿美元的融资，创下了当时的最高纪录。上线的进程却远没有融资这么顺利，本计划2018年上线的测试网和主网一拖再拖，最终于2020年10份正式上线。虽然Filecoin项目已经推迟了两年的时间，但相关的社区热度依旧存在，尤其是矿工社区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（一）目前进展 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Filecoin共识中，出块采用预期共识（EC）的模式，指的是每一轮选举一名或者多名矿工来创建新的区块，矿工赢得选举的可能性跟矿工当前的存储能力成正比。矿工的存储能力则是利用时空证明（PoSt）及复制证明(PoRep)来证明。时空证明可以利用证明链及时间戳证明矿工在一定时长内存储数据，即使验证者不在线，也能够在未来去验证矿工在该段时间内生成了证明链，有效防止临时生成数据攻击。复制证明可以证明数据已经在一个特定的扇区创建成功。并且防范三种攻击: 一是女巫攻击; 二是外部数据源攻击; 三是生成攻击。复制证明避免让矿工可以透过不同方法让自身存储数据小于承诺存储数据，以获得额外报酬。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;矿工的奖励将线性释放，每6年产量减半。目前Filecoin的存储容量已经突破1 EiB（Exbibyte），现在达到了1.27EiB，活跃矿工的数量为789。虽然在Filecoin浏览器显示矿工分布在在亚洲、欧洲、北美洲、大洋洲和非洲，但从标签和披露信息上不难看出占有多数容量的参与者为中国矿工。矿工的有效算力分布上，还没有出现像比特币矿池类似的中心化局面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5812274368231047&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fDdiawLicfiaa2hRSGb2PrInFj3Niak5TNX05icstdSiaYFsXUgh6VDSeyz3DIQj6tleVE65VcA8nX305A2QUicU2SMgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图 3：矿工有效算力分布（图片来源：filfox.info）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（二）经济机制及现状 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Filecoin经济模型中存在两方市场：存储及检索市场，两个市场中分别存在客户及矿工。除了上述两个角色外，Filecoin经济模型生态中有开发者及投资者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在储存市场中，矿工可以通过三个方式获得奖励: 一是交易费;二是区块奖励;三是网络交易加速费（Networking Message Transaction Fees）。交易费及网络交易加速费为客户事前支付，区块奖励为系统所生成。Filecoin与比特币网络不同的地方主要在于提供服务性质差异：存储是长时间的服务，Filecoin需要矿工长时间维持网络的稳定，而非像比特币网络一样，矿工可以自由进出。储存市场中还引入了质押机制，这是一个矿工惩罚机制，目的是保障Filecoin存储市场客户的数据不被丢失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每一笔用户与矿工的存储协议中，存储市场矿工会将客户提供的数据存放于网络中，称为扇区(Sector)。每个矿工添加的扇区会包含存储文件内容及承诺存储时长，确保客户在约定存储时长中，可以自由运用自身存储的数据。当矿工添加一个扇区至Filecoin网络时，矿工需要质押一笔锁定资金。锁定资金由两个部分组成: 矿工自身的FIL代币以及部分区块奖励。如果矿工在承诺的存储时长中离线，他会损失一部分的锁定资金。如果矿工完全停止存储行为，他可能将失去所有锁定代币。锁定资金会在矿工履行存储协议后解锁，矿工可以在短暂的锁定期后收回所有资金。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就意味着矿工需要质押FIL以获得区块奖励，但FIL代币为线性逐步释放。目前有效算力的增长过快，加之上线初期FIL价格过高且波动较大，线性释放时间周期长，许多矿工不愿意在高位自掏腰包购买抵押所需要的FIL，所以在上线初期引起了矿工“罢工”的事件，许多存储容量由于没有足够的FIL而无法进入Filecoin网络，但这与矿机被超卖有很大关系。矿工没有治理渠道所以选择与项目方对峙，最后的结果为项目方妥协，将挖矿的奖励由180天线性释放改为了以及释放25%，剩余75%再线性释放。除此之外，为了解决FIL的短缺问题，官方和市场中的相关服务商都在筹备或已经上线了FIL借贷服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;（三）未来发展 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于Filecoin的复杂程度高而且是公司化集中决策引起了众多矿工不满，所以像其他公链项目一样，目前已经上线了分叉项目，例如Filecash，FileStar等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前很容易看出现在Filecoin目前挖矿市场热度较高，FIL的价格也与之相关。但在最初的设计中，FIL的供需和价格是靠市场服务调节的。矿工需要质押FIL以获得区块奖励，且FIL代币为线性逐步释放，因此预期供给端缓慢增长而增长率指数递减。需求端则因为服务需求逐步增长，决定了市场各参与方必须持续购买FIL。由于要维持服务价格的稳定性，无论FIL上涨或下跌，存储及检索交易费的价格需锚定法币或稳定币。当FIL价格上涨时，客户会支付较少FIL单位的交易费及网络加速费，矿工区块奖励占收益比例上升。当FIL价格下跌时，客户会支付较高FIL单位的交易费及网络加速费，矿工区块奖励占收益比例下降。假设只考虑服务需求因素，FIL价格上涨时，客户在二级市场购买FIL的速率会趋缓，FIL价格下跌时，客户在二级市场购买FIL的速率会上升，达到调节二级市场的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但目前矿工数量远远大于使用者数量，储存容量的供给大于需求，这一平衡就被打破。比特币的PoW矿工的加入与否是由利润决定的，所以随着币价的上升越来越多的矿工和算力加入到比特币网络中，是一个循序渐进的过程。然而Filecoin在上线前就已经有大量矿机生产和销售，如果矿机无法进入网络进行挖矿就难以维持现金流，如果挖矿收益不理想也会影响矿机厂商的利益，目前Filecoin网络的存储市场已经不止由客户与矿工参与。未来Filecoin中的市场机制能够发挥作用，是否存在真实用户使用还需要继续观察。Filecoin存储的抗审查性是否会制约其在全球市场的发展也是需要观察的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93706&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-num=&quot;10&quot; data-num1=&quot;一&quot; data-num2=&quot;二&quot; data-num3=&quot;三&quot; data-num4=&quot;四&quot; data-num5=&quot;五&quot; data-num6=&quot;六&quot; data-num7=&quot;七&quot; data-num8=&quot;八&quot; data-num9=&quot;九&quot; data-num10=&quot;十&quot; data-original-title=&quot;&quot; title=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;五&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;183:278&quot;&gt;&lt;p&gt;&lt;span&gt;思考与总结&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前来看，除了Filecoin涉及到存储，现在公链项目大多采用以PoS基础的共识机制，他们的不同点在于PoS的具体实现方法、治理机制和经济模型等，未来以太坊也将采用PoS共识。虽然公链没有应用场景的限制，而链上应用趋同意味着他们处于竞争的关系。未来应用在以太坊2.0阶段的迁移和Polkadot生态应用的发展是公链领域接下来的热点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于公链本身而言，性能和安全、去中心化三者如何平衡还是其面临的问题，例如以太坊的Rollup方案和以太坊2.0方案存在的种种难题，寻找三者的平衡点仍然是公链接下来的突破口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《公链篇》完结，下一篇《应用篇》将带大家一起回顾2020年区块链应用的发展情况，看看这一年在世界范围内激起波澜的区块链应用有哪些，对我们又有什么借鉴意义。《应用篇》将于下周三（12月16日）发布，敬请期待！&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>