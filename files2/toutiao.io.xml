<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>bffd49032b4d1ef777d7c503d7bf1f6f</guid>
<title>直播与 RTC 融合</title>
<link>https://toutiao.io/k/lexvyfc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h2 cid=&quot;n2&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1. 背景介绍&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n3&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直播和RTC（Real Time Communication）技术一直是以两种完全不同的形态发展的。直播通常应用于广播电视、体育赛事直播、游戏直播、秀场直播等场合，而RTC视频通话最典型的场景就是视频会议和传统的视频通话。随着近些年直播引入更多的互动方式，直播和RTC技术的界限也越来越模糊。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n4&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;从信息传输的角度，直播是单向的信息传输，而RTC是双向的信息传输，但这个并不构成本质意义上的区别，因为双向的RTC可以拆解成两个单向的信息传输流。带来本质差别的是对延迟的要求，不同的延迟对底层传输协议和分发网络有不一样的挑战。早期的互联网的底层基础设施较差（低带宽、高丢包率、高延迟），通过互联网公网来传输无法满足RTC的指标要求，使得传统RTC应用都采用专网或专线的方式来实现。而大规模的直播技术则利用成熟的CDN基础设施来实现直播的功能（牺牲一定的延迟），比如苹果推出的HLS协议，就是把视频流切成一段一段的分片，利用传统的文件CDN网络来实现分发。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n5&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;移动设备和4G网络的普及让手机直播成为流行的一种方式，各CDN厂商为了抓住商机，也纷纷进入直播CDN的建设。为了进一步降低延迟，各CDN厂商普遍采用以Adobe公司的RTMP和FLV协议为主要传输协议，铺设了新一代的直播CDN分发基础设施。这套基础设施在秀场直播、游戏直播、体育赛事直播领域获得了巨大的成功。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n6&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;当直播成为一种主流的应用形态后，各种各样纷繁复杂的变化随之而来。最显著的就是引入了主播与粉丝的互动。不管是文字聊天、礼物打赏、直播答题，无一例外的都是更加强调互动的实时性。主播能在第一时间回应粉丝的动作，让观众获得了参与感，极大的提升了用户黏性。更进一步，当观众可以请求与主播进行“现场连麦“时，更是直接以“面对面”的方式进行交流。现场连麦其实已经进入RTC的场合了，只不过在这个场景下，底层技术实现还是以两种不同的架构体系来完成的。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;再来看纯RTC最典型的视频会议场景。视频会议的参与方都能与其他人以“完全实时”的方式进行语音、视频、共享桌面等方式进行沟通、交流与互动。对于近几年来兴起的云视频会议，则还可以把会议房间里的音视频流转推出来进行“直播”，供不在会议房间里的人观看。这个时候，整体的参与者就分成了两个部分，一部分是房间内的成员，他们之间是“完全实时”的，另一部分，就是房间外的普通观众。这就构成了一种新型的“场内”和“场外”模式，场内的人能相互感知，场内的人则无法直接感知场外的人，但所有的一举一动又可以被场外的人观看到。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n8&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直播可以加入RTC连麦互动，同样视频会议可以转推出来进行直播，不管从哪一个场景，都在往另外一个方向进行延伸。从用户的视角，这两者的界限在逐渐模糊。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n92&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2. 直播和RTC融合统一方案&lt;/span&gt;&lt;/h2&gt;&lt;h3 cid=&quot;n176&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.1 SFU分发网络是基础，RTC分发CDN化是趋势&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n181&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;传统的视频会议或多人视频通话软件，一般都限定在几十个人以内。直播系统则不然，通常可以几万甚至上百万的人在同一个房间，不太可能一台机器上处理一个”房间“里的所有转发任务，必须通过级联或完全分布式的网络结构来承载。直播体系采用的是类似消息队列中的Pub和Sub的语义，传统的WebRTC本身是点对点通信的语义，需要有SFU服务来承载放大的流量转发任务。除了流量放大，还要解决节点覆盖问题，让不同地域、不同运营商接入的用户都能找到比较近的点接入，而SFU内部的网络结构，则是分发厂商自己构建。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n238&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;当前各个云厂商都有自己的RTC分发网络，虽然当前还不能完全实现互联互通。但是未来应该是会朝着标准化的方式发展。比如都会提供网关，支持以WebRTC的协议标准接入进行推拉流。虽然当前WebRTC的标准在视频体验上和私有传输协议的厂商们相比还有一定的差距，但随着5G、WIFI6等网络基础设施的改进，这方面的差距会越来越小。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n179&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.2 典型的应用方式&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n177&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;以常见的秀场直播和教学培训场景为例，主播和互动嘉宾都采用RTC的分发网络进行低延迟的互动。对于支持RTC的普通观众同样能用RTC网络加入网络，只订阅下行的流，从而获得超低延迟的体验。当前的RTC-分发网络也能支持超大规模的RTC方式直播。而对于不支持RTC的观众，则只能观看通过MCU合流转推出来的直播流，和原有的普通直播保持相同的体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Uwpaickwgz7WA9KI7Pibup24zYnSJ1g1JzDsdqaRQCxZeOBazq2DodhBnpuicT8pF4ROH9KxgyF7LlplM8y1fBZeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;h3 cid=&quot;n25&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2.3 主要的障碍&lt;/span&gt;&lt;/h3&gt;&lt;h4 cid=&quot;n180&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;设备兼容性问题&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n26&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于RTC而言，既有编解码、又有音频的3A算法（回声消除、降噪、自动增益控制），这些实现如果都用软件方式实现，会非常消耗CPU资源。通常情况下，设备端系统会自带一些编解码硬件加速、系统自带的3A算法，一方面能降低CPU消耗，另外一方面系统自带的实现能更匹配硬件设备获得更好的效果。在实际的应用中，苹果的iOS设备系统自带的硬件加速编解码和RTC的音频3A算法表现都比较好，但Android生态的设备，这方面的表现相对比较差，有很多兼容性的问题。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n27&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于直播而言，不会有回声消除、降噪等方面的问题，单纯只对解码有加速需求，整体来说兼容性就好很多。如果用RTC技术来做直播，会带来更多的兼容性问题。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n28&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直播与RTC的切换问题&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n29&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;RTC和直播本身可以完全统一，按相同方式管理，但存几个问题:&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n30&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1）Web端支持问题&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;在不支持WebRTC的浏览器版本上，只能用传统直播来播放，一方面延迟会较高，另一方面无法参与推流（也就是只能当观众，无法成为主播或嘉宾），降低了Web端用户参与的程度。&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n32&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2）成本问题&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;通常来说，有一定量级的直播业务会采用95%分位的峰值带宽来计费，而RTC通讯则是通过通话时长的方式计费。如果都换算到带宽方式，RTC的价格会比直播的价格高出很多。这个是由于RTC要保证低延迟的分发效果，同时还要满足跨运营商、跨地域的访问，一般采用的是BGP机房，而普通的直播则采用的是价格更加低廉的单线机房（BGP机房的带宽成本是普通机房的5-10倍）。&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n34&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3）切换问题&lt;/span&gt;&lt;/h5&gt;&lt;p cid=&quot;n35&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;出于成本考虑，可以把不参与互动的普通观众切换到普通直播上来。这种方式确实带来成本的节省。但是普通观众的身份不是固定的，他可以通过申请以“连麦”的方式加入到直播间，与直播间的主播进行实时的音视频连线互动。但是由于底层使用的分发网络是基于不同基础设施，在终端上需要有一个切换过程。而这个切换并不是“无缝”的，用户会有明确的感知。这里就需要在成本和用户体验之间做一个权衡。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n61&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3. 新一代编码技术AV1在互动直播场景下的应用&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n118&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;目前广泛应用的视频编码标准是H.264，HEVC也逐步普及。但是编码器的发展没有停下脚步，H.266、VVC、EVC、AV1等新的编码标准逐步涌现。其中AV1编码标准因为其零版税、优异的压缩效率以及开源社区的支持，越来越受到人们的关注。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n227&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;AV1编码除了压缩效率有较大的提升外，还有一个特别适合视频会议、在线教育的场景的特性，就是SCC（Screen Content Coding）技术。在会议和教学培训场景，通常都会播放ppt内容。ppt内容有三个方面的特性：&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;1. 内容很少变化&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;：只有翻页时才会有画面变化；&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;2. 绝对不变&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;：屏幕内容，不会像传感器一样对光线变化敏感（拿摄像机去拍静止不动的真实画面，得到的图像数据还是会有细微的变化，而屏幕生成的内容是每个bit都一样）；&lt;/span&gt;&lt;span md-inline=&quot;strong&quot;&gt;&lt;strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;3. 大部分是文字&lt;/span&gt;&lt;/strong&gt;&lt;span md-inline=&quot;plain&quot;&gt;。对于屏幕内容，一般编码器都有一些tune可以进行一些优化。尽管有这些方面的优化，但是对于屏幕上的文字内容，效果还是不那么好。HEVC在扩展的标准（extensions)里提供了SCC的编码工具，专门用来编码屏幕内容，但是主标准的Profile里并未支持。AV1则把SCC工具放到了主标准里，不用再担心是否支持扩展标准的问题了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n226&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3.1 直播如何应用AV1&lt;/span&gt;&lt;/h3&gt;&lt;h4 cid=&quot;n196&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;1）直播CDN对AV1的扩展支持&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n197&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;Adobe公司当初发布的标准并不支持新一代的编码标准，无法在RTMP协议和FLV容器里面使用诸如HEVC(H.265)的新编码标准。苹果在2017年发售的设备里支持了HEVC，很多直播厂商都开始尝试基于HEVC的直播。早期的直播CDN厂商为了支持新的编码标准，自己对RTMP、FLV协议做了扩展。由于各厂家都按同样的方式进行了支持，形成了行业内的事实标准。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n124&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;2）云端转码&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n126&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;对于终端设备上不能进行实时编码的场合，可以在云端进行转码。内容生产端可以用H.264或HEVC以较高的码率推流到云端，云端再实时进行转码，以AV1的格式进行输出。虽然云端转码需要消耗服务端的算力资源，消耗一定的成本，但当观看的人数规模上去后，节省的带宽成本就会远超转码成本。合适的做法就是只针对热门观看的直播流进行云端的转码，至于如何判断热门也有两种方式：一种是根据主播粉丝数预测，另外一种就是根据实际的观看人数后触发，保障转码开启后新进入的用户能看到AV1的直播流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.509375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Uwpaickwgz7WA9KI7Pibup24zYnSJ1g1JzRzs9wYIq7iaHoVWPickwYxxInCgN9GcJiaR5BbwawDAB5kzK2rLAcAEmA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;h4 cid=&quot;n90&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3）客户端直接推AV1码流&lt;/span&gt;&lt;br/&gt;&lt;/h4&gt;&lt;p cid=&quot;n174&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;除了云端转码，还可以终端直接编码实时的AV1码流。当前主要是在PC端，分辨率不是太高的场合可以采用这种方式。对于上行直接推AV1的场合，PC和移动端就可以直接从CDN拉流播放了，对于不支持AV1解码的，还需要在云端转一路H264出来。随着时间的推移，未来这种方式会越来越占主流。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n208&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;3.2 WebRTC中如何应用AV1&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n209&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;前面提到，目前Google的WebRTC项目已经整合了对AV1的支持。当前AOM联盟已经给出了AV1码流在rtp协议上的payload format建议文档（&lt;/span&gt;&lt;span md-inline=&quot;url&quot; spellcheck=&quot;false&quot;&gt;https://aomediacodec.github.io/av1-rtp-spec/&lt;/span&gt;&lt;span md-inline=&quot;plain&quot;&gt;），同时也规定AV1的SDP信息描述。下面是个简单的例子。&lt;/span&gt;&lt;/p&gt;&lt;pre spellcheck=&quot;false&quot; lang=&quot;&quot; cid=&quot;n218&quot; mdtype=&quot;fences&quot;&gt;&lt;span role=&quot;presentation&quot;&gt;m=video 49170 RTP/AVPF 98&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;a=rtpmap:98 AV1/90000&lt;/span&gt;&lt;br/&gt;&lt;span role=&quot;presentation&quot;&gt;a=fmtp:98 profile=2; level-idx=8; tier=1;&lt;/span&gt;&lt;/pre&gt;&lt;p cid=&quot;n216&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;不过，普通的用户能使用上支持AV1的Chrome版本，估计还需要一段时间。由于当前AV1的编码需要很大的计算能力，AOM开源的编解码器性能都不是非常好，很难做到实时编解码。在解码端，dav1d是目前解码性能最好的AV1开源解码器，解码AV1的开销已经可以和HEVC的解码相当。Web端上由于有WebAssembly的支持，也可以实现在Web端的AV1支持了。在编码端，虽然Google已经把AV1的支持整合到了WebRTC之中（使用的aom的编码器，Chrome的90版dev），但目前AOM的AV1编码器在终端设备上还无法进行大分辨率的实时编码。不过已经有一些厂商推出了闭源的编码器，性能已经可以在PC端实时编码720p的视频。&lt;/span&gt;&lt;/p&gt;&lt;h2 cid=&quot;n207&quot; mdtype=&quot;heading&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;4. 最后&lt;/span&gt;&lt;/h2&gt;&lt;p cid=&quot;n166&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;直播和RTC技术越来越走向融合，本文讨论了直播和RTC融合的典型应用方案和主要障碍。另外也讨论了新一代编码标准AV1在直播和RTC中的落地方案与挑战。相信在不久的将来，用RTC技术来做超低延迟直播的方式会越来越普遍，直播与RTC也不会有清晰的界限。同时大家也能在不久的将来享受AV1给我们带来的用户体验提升。最近谷歌也宣布了一个基于人工智能的语音编码器Lyra，和AV1配合起来能做到以极低的码率实现视频通话。科技是第一生产力，视频技术发展也让我们的生活更美好。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n68&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n71&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n72&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n73&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f0878a9937fed34550107ffaac013688</guid>
<title>Kubelet 从入门到放弃系列：GPU 加持</title>
<link>https://toutiao.io/k/ynak46f</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p cid=&quot;n178&quot; mdtype=&quot;paragraph&quot;&gt;在Kubernetes 1.10中Device Plugins升为Beta特性，在Kubernetes 1.8时，为了给第三方厂商通过插件化的方式将设备资源接入到Kubernetes，给容器提供Extended Resources。&lt;/p&gt;&lt;p cid=&quot;n179&quot; mdtype=&quot;paragraph&quot;&gt;通过Device Plugins方式，用户无需要改Kubernetes的代码，由第三方设备厂商开发插件，实现Kubernetes Device Plugins的相关接口即可（仔细想想，Kubernetes中的volume管理是否也是类似的逻辑？CSI、CNI、CRI？）。&lt;/p&gt;&lt;p cid=&quot;n180&quot; mdtype=&quot;paragraph&quot;&gt;目前Device Plugins典型实现有：&lt;/p&gt;&lt;p cid=&quot;n313&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        a） AMD GPU插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n315&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        b）Intel设备插件：GPU、FPGA和QuickAssist设备&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n317&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        c）KubeVirt用于硬件辅助的虚拟化设备插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n181&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        d）Nvidia提供的GPU插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n182&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        e）高性能低延迟RDMA卡插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n183&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        f）低延迟Solarflare万兆网卡驱动&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n319&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        g）SR-IOV网络设备插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n321&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        h）Xilinx FPGA设备插件&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n184&quot; mdtype=&quot;paragraph&quot;&gt;    Kubelet启动Device plugins服务端，对应设备商启动Device Plugin服务，对外暴露几个gRPC Service提供服务，并通过/var/lib/kubelet/device-plugins/kubelet.sock与Kubelet通信。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;        其中Kubelet问题描述：&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Events:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Type     Reason         Age                   From               Message&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  ----     ------         ----                  ----               -------&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Normal   Scheduled      &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;m                   &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt;-scheduler  Successfully assigned gpu-&lt;span class=&quot;code-snippet__keyword&quot;&gt;operator&lt;/span&gt;-resources/nvidia-device-plugin-daemonset-f99md to cl-gpu-md&lt;span class=&quot;code-snippet__number&quot;&gt;-0&lt;/span&gt;-f4gm6&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;  Warning  InspectFailed  &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;m (x3 over &lt;span class=&quot;code-snippet__number&quot;&gt;10&lt;/span&gt;m)     kubelet            Failed to inspect image &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2&quot;&lt;/span&gt;: rpc error: code = Unavailable desc = all SubConns are &lt;span class=&quot;code-snippet__keyword&quot;&gt;in&lt;/span&gt; TransientFailure, latest connection error: connection error: desc = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;transport: Error while dialing dial unix /run/containerd/containerd.sock: connect: connection refused&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n366&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        其中Nvidia Device Plugin Daemonset某一个Pod相关错误，如下&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2021/02/11 01:32:29 Loading NVML&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;2021/02/11 01:32:29 Failed to initialize NVML: could not &lt;span class=&quot;code-snippet__keyword&quot;&gt;load&lt;/span&gt; NVML library.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;If&lt;/span&gt; this &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; a GPU node, did you &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; the docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;default&lt;/span&gt; runtime &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;`nvidia`&lt;/span&gt;?&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;29&lt;/span&gt; You can &lt;span class=&quot;code-snippet__keyword&quot;&gt;check&lt;/span&gt; the prerequisites &lt;span class=&quot;code-snippet__keyword&quot;&gt;at&lt;/span&gt;: https://github.com/NVIDIA/k8s-device-&lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;29&lt;/span&gt; You can learn how &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; the runtime &lt;span class=&quot;code-snippet__keyword&quot;&gt;at&lt;/span&gt;: https://github.com/NVIDIA/k8s-device-&lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;If&lt;/span&gt; this &lt;span class=&quot;code-snippet__keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;not&lt;/span&gt; a GPU node, you should &lt;span class=&quot;code-snippet__keyword&quot;&gt;set&lt;/span&gt; up a toleration &lt;span class=&quot;code-snippet__keyword&quot;&gt;or&lt;/span&gt; nodeSelector &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;only&lt;/span&gt; deploy this &lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; GPU nodes&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;      该问题由于containerd的配置文件containerd.toml未将default_runtime_name = &quot;runc&quot;修改为default_runtime_name = &quot;nvidia&quot;,&lt;/span&gt;&lt;span&gt;相关问题：&lt;/span&gt;&lt;span&gt;https://github.com/NVIDIA/gpu-operator/issues/143&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;       &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h6 cid=&quot;n394&quot; mdtype=&quot;heading&quot;&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;span&gt;&lt;strong&gt;b. kubelet cgroup driver配置&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;&lt;section&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;相关问题：&lt;/span&gt;&lt;span&gt;https://github.com/NVIDIA/libnvidia-container/issues/119&lt;/span&gt;&lt;/section&gt;&lt;p cid=&quot;n403&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;在kubelet配置的cgroup driver为systemd时，Nvidia的container prestart hook在处理cgroup路径逻辑与containerd不一致。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;containerd[76114]: time=&quot;2020-12-04T08:52:13.029072066Z&quot; level=error msg=&quot;StartContainer for &quot;7a1453c6e7ab8af7395ccc8dac5efcffa94a0834aa7b252e1dcd5b51f92bf13e&quot; failed&quot; error=&quot;failed to &lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; containerd task: OCI runtime &lt;span class=&quot;code-snippet__keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;failed&lt;/span&gt;: container_linux.go:&lt;span class=&quot;code-snippet__number&quot;&gt;370&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;container&lt;/span&gt; process caused: process_linux.go:&lt;span class=&quot;code-snippet__number&quot;&gt;459&lt;/span&gt;: &lt;span class=&quot;code-snippet__keyword&quot;&gt;container&lt;/span&gt; init caused: Running hook &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n403&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        解决方案为升级libnvidia-container或者container-toolkit。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n403&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        接下来，介绍部署相关内容。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n426&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;h5 cid=&quot;n120&quot; mdtype=&quot;heading&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;        &lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.2 Containerd方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h5&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;‍‍‍&lt;/span&gt;       &lt;/span&gt;&lt;strong&gt;&lt;span&gt; 1）&lt;/span&gt;&lt;span&gt;版本说明&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span/&gt;软件&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;版本说明&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;CentOS&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;7&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;内核&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;4.19.25&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;GPU型号&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;Tesla T4&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;driver版本&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;418.39&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;CUDA版本&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;10.1&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;K8S&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;1.18.5&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;Nvidia Device Plugin&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;0.7.3&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;Containerd&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot;&gt;v1.4.3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;runc&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;span&gt;‍&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;1.0.0-rc1&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;      &lt;/span&gt;&lt;strong&gt;2）安装&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;       &lt;/span&gt;&lt;strong&gt;&lt;span&gt;注：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;下文为内网离线部署，若各位在联网环境下，只需参考部署步骤及部署配置即可&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;        &lt;/span&gt;&lt;strong&gt;&lt;span&gt;a. 安装驱动&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; tar ‐zxvf gpu.tar.gz &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; gpu/runtime &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; tar ‐zxvf dependency.tar.gz &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; dependency &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; ./lspci/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; yum localinstall ‐y *.rpm &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; lspci | grep ‐i nvidia &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; ../devel &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; yum localinstall ‐y *.rpm &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; yum localinstall ‐y *.rpm &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; lsmod | grep nouveau &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; rmmod nouveau &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; ../../../driver &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; sh cuda_10.1.105_418.39_linux.run &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;        结果验证&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; nvidia‐smi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.575503355704698&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HDR5NXtUkG0KLpGl7aibP8L6Ib4PprAwcXVicoaiazLE3ujRBxQ48wEicfxoUuvbHj5ra3Sb7Vj4iaz4thjRfRibL7pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;596&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;        附：安装驱动图&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;       &lt;span&gt;(1) 输入accept，回车&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6044260027662517&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HDR5NXtUkG0KLpGl7aibP8L6Ib4PprAwc983ecH5HJpkajyINboLb3SDP1hxZIibWNIS3l9ycSl1DOIoNqIUxzCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;        (2) 选择install，回车&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5076071922544951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HDR5NXtUkG0KLpGl7aibP8L6Ib4PprAwcepaeZksmPia1Zib6N6wBkfeG7AqEdOEp4exE7UuQBPaOvBrHV98uPQXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;723&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        &lt;strong&gt;2）配置Containerd&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; ../runtime &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; cp runc /usr/bin/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; tar ‐zxvf containerd‐1.4.3‐linux‐amd64.tar.gz &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; cp bin/* /usr/bin/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; nvidia‐container‐runtime &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; yum localinstall ‐y *.rpm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h5 cid=&quot;n889&quot; mdtype=&quot;heading&quot;&gt;      &lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;修改containerd启动参数 &lt;/span&gt;&lt;/h5&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;shell&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt; 配置containerd的参数 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; mkdir /etc/containerd/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; vi /etc/containerd/config.toml &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt; 配置containerd.service &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; vi /usr/lib/systemd/system/containerd.service &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; systemctl daemon‐reload &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; systemctl restart containerd &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt; 配置crictl &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; tar ‐zxvf crictl‐v1.18.0‐linux‐amd64.tar.gz &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; mv crictl /usr/bin/ &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; vi /etc/profile &lt;span class=&quot;code-snippet__built_in&quot;&gt;alias&lt;/span&gt; crictl=&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;crictl ‐‐runtime‐endpoint unix:///run/containerd/containerd.sock&#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;source&lt;/span&gt; /etc/profile &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;#&lt;/span&gt; 测试containerd和nvidia‐container‐runtime安装是否成功 &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;test&lt;/span&gt;‐image &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; ctr images import cuda‐vector‐add_v0.1.tar &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;$&lt;/span&gt; ctr images push ‐‐plain‐http registry.paas/cmss/cuda‐vector‐add:v0.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;        执行检验&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ctr run ‐t ‐‐gpus &lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt; registry.paas/cmss/cuda‐vector‐&lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt;:v0&lt;span class=&quot;code-snippet__number&quot;&gt;.1&lt;/span&gt; cp nvidia‐smi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;h5 cid=&quot;n889&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;strong&gt;        &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;结果如下&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.575503355704698&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HDR5NXtUkG0KLpGl7aibP8L6Ib4PprAwcXVicoaiazLE3ujRBxQ48wEicfxoUuvbHj5ra3Sb7Vj4iaz4thjRfRibL7pg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;596&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;        清理容器&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;ctr&lt;/span&gt; c rm cp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n484&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span md-inline=&quot;plain&quot;&gt;        &lt;/span&gt;&lt;span&gt;配置config.toml&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n496&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;执行containerd config default &amp;gt; /etc/containerd/config.toml生成配置，并做如下修改：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n496&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;    &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4702774108322325&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/HDR5NXtUkG0KLpGl7aibP8L6Ib4PprAwchyB0CN7LYU519XMO4y0T0X2paLiaCpp5SWV2iawCzv79H13Lvuhd5wibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;757&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n496&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        &lt;strong&gt;注意&lt;/strong&gt;：如上所述，1）default_runtime_name值为nvidia，2）新增一个runtimes 3）若有内部镜像仓库，可修改docker.io为内部仓库名称&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p cid=&quot;n496&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;配置containerd.service&lt;/span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ini&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;[Unit]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Description&lt;/span&gt;=containerd container runtime &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Documentation&lt;/span&gt;=https://containerd.io After=network.target&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Service]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ExecStartPre&lt;/span&gt;=‐/sbin/modprobe overlay &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;ExecStart&lt;/span&gt;=/usr/bin/containerd &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;KillMode&lt;/span&gt;=process &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;Delegate&lt;/span&gt;=&lt;span class=&quot;code-snippet__literal&quot;&gt;yes&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;LimitNOFILE&lt;/span&gt;=&lt;span class=&quot;code-snippet__number&quot;&gt;1048576&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;LimitCORE&lt;/span&gt;=infinity &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;TasksMax&lt;/span&gt;=infinity &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__section&quot;&gt;[Install]&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;WantedBy&lt;/span&gt;=multi‐user.target    &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n504&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;        c. 部署Device Plugin&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n508&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;        在部署完Kubernetes集群后，修改kubelet运行时配置：&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;ruby&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ vi /apps/conf/kubernetes/kubelet.env ‐‐container‐runtime=remote ‐‐container‐runtime‐endpoint=&lt;span class=&quot;code-snippet__symbol&quot;&gt;unix:&lt;/span&gt;/&lt;span class=&quot;code-snippet__regexp&quot;&gt;//run&lt;/span&gt;&lt;span class=&quot;code-snippet__regexp&quot;&gt;/containerd/containerd&lt;/span&gt;.sock&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n508&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cd device‐plugin &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ docker &lt;span class=&quot;code-snippet__keyword&quot;&gt;load&lt;/span&gt; ‐i k8s‐device‐plugin_v0&lt;span class=&quot;code-snippet__number&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.3&lt;/span&gt;.tar &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ docker push&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// https://github.com/NVIDIA/k8s-device-&lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt;/tree/&lt;span class=&quot;code-snippet__keyword&quot;&gt;master&lt;/span&gt;/deployments/&lt;span class=&quot;code-snippet__keyword&quot;&gt;static&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ kubectl &lt;span class=&quot;code-snippet__keyword&quot;&gt;apply&lt;/span&gt; ‐f nvidia‐device‐plugin.yml &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ kubectl &lt;span class=&quot;code-snippet__keyword&quot;&gt;logs&lt;/span&gt; ‐f nvidia‐device‐&lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt;‐daemonset‐q9svq ‐nkube‐&lt;span class=&quot;code-snippet__keyword&quot;&gt;system&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;36&lt;/span&gt; Loading NVML &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Starting&lt;/span&gt; FS watcher. &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Starting&lt;/span&gt; OS watcher. &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; Retreiving plugins. &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Starting&lt;/span&gt; GRPC &lt;span class=&quot;code-snippet__keyword&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;nvidia.com/gpu&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; serve &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;nvidia.com/gpu&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;on&lt;/span&gt; /&lt;span class=&quot;code-snippet__keyword&quot;&gt;var&lt;/span&gt;/lib/kubelet/device‐ plugins/nvidia‐gpu.sock &lt;span class=&quot;code-snippet__number&quot;&gt;2021&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;02&lt;/span&gt;/&lt;span class=&quot;code-snippet__number&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;06&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;32&lt;/span&gt;:&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt; Registered device &lt;span class=&quot;code-snippet__keyword&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;nvidia.com/gpu&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; Kubelet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n496&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;        d. 功能测试&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;sql&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ cd test‐image &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ kubectl apply ‐f demo.yml&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;// https://github.com/NVIDIA/gpu-operator/blob/master/tests/gpu-pod.yaml&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;$ kubectl logs ‐f cuda‐vector‐add &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;[Vector addition of 50000 elements] &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Copy input data from the host memory to the CUDA device &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;CUDA kernel launch &lt;span class=&quot;code-snippet__keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;196&lt;/span&gt; blocks &lt;span class=&quot;code-snippet__keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;256&lt;/span&gt; threads &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Copy &lt;span class=&quot;code-snippet__keyword&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; the CUDA device &lt;span class=&quot;code-snippet__keyword&quot;&gt;to&lt;/span&gt; the host &lt;span class=&quot;code-snippet__keyword&quot;&gt;memory&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;Test&lt;/span&gt; PASSED &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>02e0d4b92c979f066cb152874634b3e5</guid>
<title>聊聊项目打包发布到 maven 私仓常见的几种方式</title>
<link>https://toutiao.io/k/7sexyoc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.0344827586206897&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EPUeFZ7ty9CfkibKcARoDSRvY9fxotBZUiaqmesxs0TePmeM0ibafMJ3LM7IFvXia66S2ibyRCkhkGiaYUuy4lnT076Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;58&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.5714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/6XFhg7ldObyL6BJWO6fglOSCzuYh5p0BZA4ytIpMEiaicpn04ibsZ9RhzLYD3ibMYVKRX7FOvdcaueIdN92YMAUcbQicnKdeRhJAia/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;7&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;点击上方&lt;span data-mid=&quot;&quot;&gt;蓝字&lt;/span&gt;关注我们&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在早期没有使用maven之前，我们引用一些公有jar或者api jar，我们可能会采用这样的方式，通过手动导入这些jar到项目的classpath路径进行引用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有了maven后，我们公司内部可能就会搭建maven私仓比如nexus，然后把这些公有jar或者api jar上传到nexus私仓，在pom.xml配置一下这些jar的坐标就可以引用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天我们的话题就是来聊聊项目打包发布到maven私仓常见的几种方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;发布到maven私仓的步骤&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;01&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;在maven的settings.xml中&amp;lt; servers &amp;gt;节点配置用户名和密码，形如下&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;servers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus-releases&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus-snapshots&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;span&gt;username&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;span&gt;password&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt; &lt;span&gt;&amp;lt;/&lt;span&gt;servers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;span&gt; 其中id可先看做是一个标识。username和password为nexus私仓的用户名和密码&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;02&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;指定发布到nexus私仓的url并进行发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方式一：pom.xml文件添加distributionManagement节点&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rqe8ZlXI8qsNPLgD6ew1MzerlZqzSpZxVR3uLdds998fWr8FsaibXefKoNhS1M8Yyeuq7qSOriaUTwmCNlSXyNBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;形如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;distributionManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;!--正式版本--&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;!-- 在settings.xml中&amp;lt;server&amp;gt;的id--&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus-releases&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://192.168.0.11:8081/nexus/content/repositories/releases/&lt;span&gt;&amp;lt;/&lt;span&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;!--快照版本--&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;snapshotRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;             &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus-snapshots&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;             &lt;span&gt;&amp;lt;&lt;span&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;http://192.168.0.11:8081/nexus/content/repositories/snapshots/&lt;span&gt;&amp;lt;/&lt;span&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;snapshotRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;distributionManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果存在parent，只需在parent中的pom.xml中配置，没有则在本项目的pom.xml配置即可&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&amp;lt; repository &amp;gt;节点下的&amp;lt; id &amp;gt;对应maven的配置文件settings.xml文件中的server的id，两者必须保持一致&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;上传到私仓的是正式版本还是快照版本，取决于pom.xml文件version中是SNAPSHOT还是RELEASE。比如你项目中配置如下&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.example&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;demo&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;则上传到私仓的就是快照版本。最后执行maven的deploy命令进行发布&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方式二：在maven的settings.xml中&amp;lt; profiles &amp;gt;节点配置&amp;lt; properties &amp;gt;，并在&amp;lt; properties &amp;gt;指定 &amp;lt; altSnapshotDeploymentRepository &amp;gt; 和&amp;lt; altReleaseDeploymentRepository &amp;gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rqe8ZlXI8qsNPLgD6ew1MzerlZqzSpZxVR3uLdds998fWr8FsaibXefKoNhS1M8Yyeuq7qSOriaUTwmCNlSXyNBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;形如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;profiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;   &lt;span&gt;&amp;lt;&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;span&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;&lt;span&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;&lt;span&gt;altSnapshotDeploymentRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;             nexus-snapshots::default::http://192.168.0.11:8081/repository/maven-snapshots/&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;/&lt;span&gt;altSnapshotDeploymentRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;&lt;span&gt;altReleaseDeploymentRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            nexus-releases::default::http://192.168.0.11:8081/repository/maven-releases/&lt;br mpa-from-tpl=&quot;t&quot;/&gt;         &lt;span&gt;&amp;lt;/&lt;span&gt;altReleaseDeploymentRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;     &lt;span&gt;&amp;lt;/&lt;span&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;profiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;&lt;span&gt;activeProfiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;activeProfile&lt;/span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;span&gt;activeProfile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;  &lt;span&gt;&amp;lt;/&lt;span&gt;activeProfiles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;nexus-snapshots和 nexus-releases要和maven的配置文件settings.xml文件中的server的id，两者必须保持一致&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;属性altSnapshotDeploymentRepository和altReleaseDeploymentRepository是随maven-release-plugin 2.8版一起引入的。低于2.8版本，执行mvn deploy时，则会报如下错误&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;Deployment &lt;span&gt;failed:&lt;/span&gt; repository element was &lt;span&gt;not&lt;/span&gt; specified &lt;span&gt;in&lt;/span&gt; the POM inside distributionManagement element &lt;span&gt;or&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; -DaltDeploymentRepository=id::layout::url parameter&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;解决方案就是在发布的项目中指定一下2.8版本以上的插件，形如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;maven-deploy-plugin&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.8.2&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;最后再执行maven的deploy命令进行发布&lt;br/&gt;&lt;/span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方式三：通过mvn deploy指定参数&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rqe8ZlXI8qsNPLgD6ew1MzerlZqzSpZxVR3uLdds998fWr8FsaibXefKoNhS1M8Yyeuq7qSOriaUTwmCNlSXyNBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;形如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn deploy -DskipTests -DaltSnapshotDeploymentRepository=nexus-snapshot&lt;span&gt;s:&lt;/span&gt;:defaul&lt;span&gt;t:&lt;/span&gt;:http&lt;span&gt;s:&lt;/span&gt;//YOUR_NEXUS_URL/snapshots&lt;br mpa-from-tpl=&quot;t&quot;/&gt;-DaltReleaseDeploymentRepository=nexus-release&lt;span&gt;s:&lt;/span&gt;:defaul&lt;span&gt;t:&lt;/span&gt;:http&lt;span&gt;s:&lt;/span&gt;//YOUR_NEXUS_URL/releases&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;同理上述命令要执行成功，得确保deploy插件是基于2.8版本以上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;形如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-preserve=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;pre&gt;&lt;code&gt;mvn deploy:deploy-file -DskipTests -Dfile=jar包文件地址,绝对路径 -DgroupId=组名 -DartifactId=项目名称 -Dversion=版本号 -Dpackaging=jar -DrepositoryId=私库&lt;span&gt;id&lt;/span&gt;（和setting.xml文件中的server的&lt;span&gt;id&lt;/span&gt;保持一致） -Durl=私仓地址&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;方式四：通过nexus的可视化界面进行上传jar发布&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.9444444444444444&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Rqe8ZlXI8qsNPLgD6ew1MzerlZqzSpZxVR3uLdds998fWr8FsaibXefKoNhS1M8Yyeuq7qSOriaUTwmCNlSXyNBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;36&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;如下图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4959770114942529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/NW0r9OxcmxLsbXpD4Q6FFHEePiaup8h2D7bqy0jh65vcfujHVVgiaBhOkwkaCJVbfaAVdQBM5X7ibhmQOR8qIH8Eg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1740&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;h1 data-mid=&quot;&quot;&gt;03&lt;/h1&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;这几种发布方式的选择&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方式一，通过distributionManagement这种方式发布，可能是大多数人的选择。但如果要发布的项目很多，我们就可以考虑使用方式二，通过在全局的settings文件配置altSnapshotDeploymentRepository 和altReleaseDeploymentRepository进行发布，只需配置一次，所有项目就都可以发布，无需在多个项目pom指定&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;方式一和方式二比较适合公司自己内部开发项目，对于一些第三方提供的jar，推荐使用mvn deploy -DrepositoryId=私库id（和settings.xml文件中的server的id保持一致） -Durl=私仓地址的方式或者直接使用nexus可视化界面上传的方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4db8c1c67ae7f3e00d6f5045c130cfb7</guid>
<title>JDK 16 正式发布，新特性实践尝鲜来啦</title>
<link>https://toutiao.io/k/98az6to</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;img class=&quot;rich_pages __bg_gif&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot; data-backw=&quot;578&quot; data-backh=&quot;96&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/33P2FdAnju95xNQaJWFlU3fWicicxBac5nuOMtveZ6lxCCnoZU1Xd6ITUVhoibJib5eyx6d2hePhGFNbQ4nT3Gicgpg/640?wx_fmt=gif&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;88287&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;JDK 16在2021年2月18日已完成最终候选版本，并于2021年3月16日正式发布。&lt;/span&gt;&lt;span&gt;和JDK 15一样，JDK 16也会是一个短期版本，仅支持六个月。&lt;/span&gt;&lt;span&gt;而计划在2021年9月发布的JDK 17将会是一个长期支持（LTS）版本，并获得数年的支持。&lt;/span&gt;&lt;span&gt;虽然JDK 16是个短期版本，并且大部分的企业或者项目还依然停留在2018年9月发布的JDK 11（甚至更早的于2014年3月发布的JDK 8），但不妨碍Javaer对新版JDK的期待与持续学习的热情。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文将与大家一起来玩一玩 JDK 16。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;新特性一览&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;在开始之前，先让我们来一起浏览一下JDK 16版本所带来的17个新特性吧。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;本文将解读的新特性&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;357: OpenJDK源代码仓库从Mercurial迁移至Git。努力推动这一改变，将会在版本控制系统元数据大小、可用工具以及托管等方面体现优势。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;369: 迁移到GitHub，这个变化是基于OpenJDK源码库迁移至Git的，JDK 16源代码仓库将出现在最流行的程序员社交网站上。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;386: 在x64和AArch64架构上，将JDK移植到Alpine Linux和其他使用musl作为其主要C库的Linux发行版。Musl是 ISO C和Posix标准中描述的标准库功能的Linux实现。Alpine Linux由于其镜像小而被广泛应用于云部署、微服务以及容器环境中。Linux版本的Docker容器镜像小于6MB。让Java在此类设置中开箱即用地运行，并允许Tomcat、Jetty、Spring和其它流行的框架在这些环境中工作。通过使用jlink来减少Java运行时的大小，用户可以创建一个更小的镜像，以运行特定的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;394: instanceof操作符的模式匹配，在JDK 14和JDK 15中都已预览过，将于JDK 16最终确定。模式匹配使程序中的通用逻辑（即从对象中有条件的提取组件）可以更简洁、更安全的表达。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;395: 提供Record记录类，作为不可变数据的透明载体。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;其他的新特性&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;347: 启用C++ 14语言功能，允许在JDK C++源代码中使用C++ 14功能，并提供有关在HotSpot代码中可以使用哪些功能的具体指导。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;376: 将ZGC（可扩展低延迟垃圾收集器）线程堆栈处理从安全点移至并发阶段。ZGC垃圾收集器旨在使HotSpot中的GC暂停和可伸缩性问题成为过去。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;380: 添加Unix-Domain Socket Channels，其中Unix-Domain（AF_UNIX）套接字的支持被添加到nio.channels包中的Socket Channel和Server Socket Channel API中。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;387: 弹性Metaspace功能可将未使用的HotSpot虚拟机的Class Metadata(Metaspace)占用的内存更迅速的返回给操作系统，从而减少Metaspace的占用并简化Metaspace的代码以降低维护成本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;388: 将JDK移植到Windows/AArch64平台。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;389: 孵化阶段的外部链接程序API，支持静态类型的纯Java方式访问本地代码。此计划的目的在于通过用更高级的纯Java开发模式来替换JNI（Java本机接口），以提供与C语言的交互。它的性能将会比JNI更加优越。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;390: 基于值的类的警告建议：将原始包装类指定为基于值的类，弃用其构造函数以进行移除，并提示新的弃用警告。在Java平台中对于任何基于值的类的实例进行同步的错误尝试会予以警告。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;392: 提供用于打包独立的Java应用程序的jpackage工具。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;396: 默认情况下，JDK内部结构是强封装的，而关键内部API（例如misc.Unsafe）除外。此计划的目标包括提高JDK的安全性和可维护性，并鼓励开发人员从直接使用内部元素逐渐迁移为使用标准API，这样开发人员和最终用户都可以轻松地升级到 Java 的未来版本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;397: 之前在JDK 15中进行过预览，JDK 16中二次预览的密封类和接口限制了可以扩展或实现它们的类和接口。此计划的目标包括允许类或接口的创建者控制负责实现它的代码，提供比访问修饰符更声明性的方式来限制超类的使用，并通过提供模式分析基础来支持模式匹配的未来发展。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;338: 孵化阶段的矢量API（JDK将配备一个孵化器模块），jdk.incubator.vector，以表达在可支持的CPU架构上编译为最佳硬件指令的矢量计算，以实现优于等效标量计算的性能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;393: 孵化阶段的外部存储器访问API，允许Java程序安全的访问Java堆外的外部存储器（包括本地、持久化介质以及托管堆存储器）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上新特性前编号为JDK Enhancement Process的标识符，详见文末参考资料&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;立即尝鲜&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;浏览完17个新特性后，我都迫不及待的想尝试一下JDK 16，以及其中一些对工程上有所帮助的特性了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;那么先通过JDK官网进行&lt;/span&gt;&lt;span&gt;JDK 16候选版下载（http://jdk.java.net/16/）&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;由于要方便的在系统中针对多个JDK版本进行切换，可以使用&lt;/span&gt;&lt;span&gt;jenv（https://github.com/jenv/jenv）&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们把下载好的JDK16路径添加到jenv，在做如下设置即可使用。&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jenv &lt;span class=&quot;code-snippet__keyword&quot;&gt;add&lt;/span&gt; ${JDK16_Path}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;jenv &lt;span class=&quot;code-snippet__keyword&quot;&gt;global&lt;/span&gt; openjdk64&lt;span class=&quot;code-snippet__number&quot;&gt;-16&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果一切顺利，那么查看JDK版本时，会有类似如下信息的返回。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;-version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;openjdk&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;version &quot;16&quot;2021-03-16&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;OpenJDK&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;Runtime Environment (build 16+36-2231)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;OpenJDK&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;64-Bit Server VM (build 16+36-2231, mixed mode, sharing)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你在使用较早的IDEA版本作为开发工具，那么使用JDK 16运行程序时，可能收到如下的错误：&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Cannot determine path to &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;tools.jar&#x27;&lt;/span&gt; library &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt; (path/to/jdk&lt;span class=&quot;code-snippet__number&quot;&gt;-16&lt;/span&gt;) when running &lt;span class=&quot;code-snippet__keyword&quot;&gt;from&lt;/span&gt; IDEA, you should update to the latest version.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这是由于JDK9对Java运行时做了重构，已删除了rt.jar、tools.jar、dt.jar以及其它各种内部JAR包。而在较早的开发工具通常对这类JAR包有依赖，通过升级IDEA可以解决。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;到官网获取一个&lt;/span&gt;&lt;span&gt;IDEA 2021.1 EAP预发版本&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（https://www.jetbrains.com/zh-cn/idea/nextversion/）&lt;/span&gt;&lt;span&gt;来提前体验（也可以等待2021.3的正式版本）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;新特性解读&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;迁移到Git&lt;/span&gt;&lt;span&gt;Hub&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;早在2020年9月，OpenJDK已将Github上的jdk仓库作为JDK 16源码的主读取/写入仓库。随着JDK 16的正式发布，这将是OpenJDK在Github上开发完成的初代JDK版本。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;而促使将OpenJDK源代码仓库从Mercurial迁移到Git的三个主要原因：版本控制系统元数据，可用工具和可用托管的大小。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;版本控制元数据大小方面，转换后的存储库的初始原型已显示出版本控制元数据的大小显着减少。&lt;/span&gt;&lt;span&gt;例如，使用Git的jdk仓库的.git目录大约为300MB，而使用Mercurial的.hg目录大约为1.2GB。&lt;/span&gt;&lt;span&gt;减少元数据可保留本地磁盘空间并减少克隆时间，同时减少传输的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可用工具方面，与Mercurial相比，Git可用的工具更多。&lt;/span&gt;&lt;span&gt;所有的文本编辑器都可以本地或通过插件实现Git集成。&lt;/span&gt;&lt;span&gt;此外，几乎所有的IDE都带有Git集成，包括Eclipse、Visual Studio、IDEA。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可用托管方面，有许多选项可用于托管Git仓库，无论是自托管还是作为服务托管。&lt;/span&gt;&lt;span&gt;使用外部源码托管提供程序的原因包括性能、与开发人员进行交互的Web API的访问权限控制 以及 蓬勃发展的社区。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;OpenJDK迁移到Github之后，对于Java开发者而言还是有不少的便利：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过fork一份&lt;/span&gt;&lt;span&gt;JDK 16源码仓库（https://github.com/openjdk/jdk）&lt;/span&gt;&lt;span&gt;，可以一边阅读源代码，一边做笔记并提交，方便持续学习JDK源码。使用Git的upsteam保持JDK源码的更新，同时也保持自我更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如网速够快，通过Github在线阅读代码的工具&lt;/span&gt;&lt;span&gt;Github1s（https://github.com/conwnet/github1s）&lt;/span&gt;&lt;span&gt;，快速在浏览器中翻阅&lt;/span&gt;&lt;span&gt;JDK 16源码（https://github1s.com/openjdk/jdk/releases/tag/jdk-16%2B35）&lt;/span&gt;&lt;span&gt;也是非常方便。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果是在IDEA下工作与学习，clone好JDK 16源码，&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;打开Project Structure (command+;)，设置Project SDK为JDK 16，并设置Project language level到16。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;之后就可以愉快的看JDK 16源码了。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span lang=&quot;EN-US&quot;/&gt;&lt;span/&gt;&lt;span lang=&quot;EN-US&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4896073903002309&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicYQDcTPeVM91vDLQtCI9vnuUqTU4amecDibiaylhQVGeMKn55VUPKXPicyJOjHZOk4btTd4bSkHtwDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;&lt;span&gt;将JDK移植&lt;/span&gt;&lt;span&gt;到Alpine Linux&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在云原生时代，个人理解提升效率是第一原则：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更小的镜像体积分发时会更加迅速&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用程序/容器的启动要迅速&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样就能保障系统水平伸缩够快、问题出现时回滚处理够快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，出于降低成本考虑，更小的镜像体积内存占用会更小，分发时耗用的资源也更小。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Alpine Linux就是与云原生的提升效率原则契合的一款独立的非商业性的通用Linux发行版。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其关注于安全性、简单性和资源效率，围绕musl libc和busybox构建。这使得它比传统的GNU/Linux发行版更小。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JDK移植到Alpine Linux后，将允许Tomcat、Jetty、Spring和其它流行的框架在其中工作。用户可以创建一个更小的镜像，以启动、运行特定的应用程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;提前准备好Docker，我们先构建一个Alpine Linux镜像，然后添加JDK 16，最后运行一个简单的Spring Boot程序来演示一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;span&gt;&lt;span/&gt;&lt;span&gt;构建&lt;/span&gt;&lt;span&gt;Alpine L&lt;/span&gt;&lt;span&gt;inux镜&lt;/span&gt;&lt;span&gt;像&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;bash&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;docker pull alpine&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;docker run alpine &lt;span class=&quot;code-snippet__built_in&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;Hello Alpine!&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过docker images命令查看镜像大小会发现，alpine在截止本文完成时，镜像大小仅仅只有5.6MB。相对于debian、ubuntu、centos等系统动则几十甚至上百MB的镜像来说，alpine可是真的小！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;REPOSITORY&lt;/span&gt;          &lt;span class=&quot;code-snippet__string&quot;&gt;TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;alpine&lt;/span&gt;              &lt;span class=&quot;code-snippet__string&quot;&gt;latest              7731472c3f2a        7 weeks ago         5.61MB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;添加JDK 16&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;OpenJDK通过使用jlink（&lt;/span&gt;&lt;span&gt;JEP 282：https://openjdk.java.net/jeps/282&lt;/span&gt;&lt;span&gt;）来减少Java运行时的大小，我们可以从DockerHub上获取镜像：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;16-jdk-alpine（https://hub.docker.com/_/openjdk?tab=tags&amp;amp;page=1&amp;amp;name=16-jdk-alpine&amp;amp;ordering=last_updated）&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;或者如下Docker命令：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;docker pull openjdk:16-jdk-alpine&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;运行S&lt;/span&gt;&lt;span&gt;pring Boot&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先准备一个Spring Boot的FatJar程序，可以从Spring Boot官网获取&lt;/span&gt;&lt;span&gt;Hello World！样例程序（https://spring.io/guides/gs/rest-service/）&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;创建一份Dockerfile，使用openjdk:16-jdk-alpine，并添加Spring Boot程序。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;nginx&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attribute&quot;&gt;FROM&lt;/span&gt; openjdk:&lt;span class=&quot;code-snippet__number&quot;&gt;16&lt;/span&gt;-jdk-alpine&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;VOLUME /tmp&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ARG JAR_FILE&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ADD &lt;span class=&quot;code-snippet__variable&quot;&gt;${JAR_FILE}&lt;/span&gt; app.jar&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;ENTRYPOINT [&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;-Djava.security.egd=file:/dev/./urandom&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;/app.jar&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;构建并运行&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;build --build-argJAR_FILE=target/rest-service-0.0.1-SNAPSHOT.jar -t alpine-jdk16-app:latest .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;images&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;run -d-p8080:8080 alpine-jdk16-app:latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;ps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;stop${CONTAINER_ID}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;curl-w&#x27;\n&#x27;&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;http://127.0.0.1:8080/greeting?name=jdk16&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.08660508083140878&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicYQDcTPeVM91vDLQtCI9vnGK5h7uB34k5nvqnOE4Oo81wvJYeDklIulFJDLVjLUibib7CvpEMiaMDibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;866&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;至此，通过Alpine Linux系统带JDK 16运行时的Spring Boot已经启动并可以正常的访问了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Alpine系统JDK 16镜像大小约为321MB。相比Oracle官方的Linux版本镜像的467MB，减少30%+。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;记录类&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;从JDK 14开始提供了Record记录类的预览特性，这一特性将成为JDK 16的一项永久性特性。&lt;/span&gt;&lt;span&gt;Record记录类作为不可变数据的透明载体，其是为了回应有关Java过于冗长拘谨的抱怨。&lt;/span&gt;&lt;span&gt;此计划的目标包括设计一个表示简单值集合的面向对象的构造函数，帮助开发人员专注于对不可变数据的建模而不是扩展行为，自动实现数据驱动的方法（例如 equals() 和 属性的访问器）。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过较新版IDEA可以创建此类型：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5548037889039242&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnjuicYQDcTPeVM91vDLQtCI9vnCJtauh3Ma8ombYddjAhIxRezelII9AvQU2lVLS36MNVP5wNaFYLNPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;739&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;声明Record记录类后，几乎不需要添加额外的代码，一组隐式声明让其代码书写很简洁：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cs&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; record &lt;span class=&quot;code-snippet__title&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;code-snippet__params&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; y&lt;/span&gt;)&lt;/span&gt; {}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Record记录类支持Local Classes特性，那么当需要临时使用Record的时候，就可以非常方便的定义与使用：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;List&amp;lt;Merchant&amp;gt;findTopMerchants(List&amp;lt;Merchant&amp;gt; merchants, &lt;span class=&quot;code-snippet__keyword&quot;&gt;int&lt;/span&gt; month) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;record &lt;span class=&quot;code-snippet__title&quot;&gt;MerchantSales&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(Merchant merchant, &lt;span class=&quot;code-snippet__keyword&quot;&gt;double&lt;/span&gt; sales)&lt;/span&gt; &lt;/span&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; merchants.stream()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .&lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;(merchant -&amp;gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; MerchantSales(merchant, computeSales(merchant, month)))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .sorted((m1, m2) -&amp;gt;Double.compare(m2.sales(), m1.sales()))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .&lt;span class=&quot;code-snippet__built_in&quot;&gt;map&lt;/span&gt;(MerchantSales::merchant)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        .collect(toList());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Record记录类将可以代替Tuple、Pair等之前在JDK之外的工具库提供的元组功能，在与下面将介绍的模式匹配特性配合，可使代码将变得非常简洁。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▐&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;模式匹配&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4 data-lake-id=&quot;ca6fa186228ff7efaa653334195896c8&quot; data-wording=&quot;true&quot;&gt;&lt;br/&gt;&lt;/h4&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从JDK 14开始引入了一种模式匹配的预览特性，这一特性也将成为JDK 16的一项永久性特性。因此虽然JDK 16是个短期版本，也不妨碍我们在未来的JDK版本中继续使用模式匹配特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;模式匹配的现阶段仅限于一种模式（类型模式）和一种语言构造（instanceof），但这只是完整特性的一部分。即便如此，我们也已经获得了一个显著的好处：冗余的强制转换消失了，消除了冗余的代码，使更重要的代码得到了更清晰的关注，同时消除了隐藏bug的地方。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们在开发中当需要解析对象会用到类似如下的方式&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (obj instanceofString) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt; s = (&lt;span class=&quot;code-snippet__built_in&quot;&gt;String&lt;/span&gt;) obj;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用模式匹配后的等价代码：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (obj instanceofString s) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;代码看起来是不是整洁了许多。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用instanceof获取对象类型是一种条件提取形式，在获得到对象类型之后，总是要将对象强制转换为该类型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以前在instanceof之后必须进行显式类型转换，这是一种繁琐的操作，而融合这些操作的好处不仅仅是为了简洁，它还消除了一个常见的错误来源：在剪切和粘贴instanceof及强制转换代码，容易在修改了 instanceof的类型之后忘记修改强制转换类型，这就给了漏洞一个藏身之处。通过instanceof的模式匹配消除了这个问题，我们还可以消灭所有这种类型的bug。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另一个需要经常的做此类“先检测后强制转换”的地方是equals方法。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;再来看一个例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;publicbooleanequals(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; o) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; Point))&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        returnfalse;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    Point other = (Point) o;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; x == other.x &amp;amp;&amp;amp; y == other.y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;使用模式匹配后的等价代码：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;publicbooleanequals(&lt;span class=&quot;code-snippet__built_in&quot;&gt;Object&lt;/span&gt; o) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; (o &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; Point other)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &amp;amp;&amp;amp; x == other.x &amp;amp;&amp;amp; y == other.y;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这段代码起到同样的效果，但更简单直接，因为我们可以只使用一个复合布尔表达式来表达一个等价的条件，而不是使用控制流语句。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;模式匹配的绑定变量（如上代码例子中 obj instanceof String s的s就是一个绑定变量）除了特殊的声明位置以外，其作用域也与&quot;普通&quot;局部变量有所不同。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如我们可以这样写：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (a &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; Point p) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;} &lt;span class=&quot;code-snippet__keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (b &lt;span class=&quot;code-snippet__keyword&quot;&gt;instanceof&lt;/span&gt; Point p) {     &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        ...&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样特殊的作用域让我们能够在if-else的多分支情况下，自由的重新声明绑定变量，也考虑未来在switch中的case也是如此便利。如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;php&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (x instanceofInteger num) { ... }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;elseif&lt;/span&gt; (x instanceofLong num) { ... }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;elseif&lt;/span&gt; (x instanceofDouble num) { ... }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果模式匹配可以消除Java代码中99%的强制类型转换操作，那么它肯定会很流行。但还不仅限于此，随着时间的推移，将会出现其他类型的模式，它们可以进行更复杂的条件提取，使用更复杂的方式来组合模式，以及提供其他可以使用模式的构造：比如switch，甚至是catch，再加上目前已永久支持的Record类以及在预览中的密封类等相关特性，模式匹配未来一定能够大大简化我们编写的代码。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;尾声&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文从JDK 16版本所带来的17个新特性中抽取对工程工作和学习比较有帮助的几个特性展开解读，快速了解了这些特性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大部分的企业或者项目还在使用JDK 8（其依然占据JDK市场的80%，绝对的主流），&lt;/span&gt;&lt;span&gt;源于JDK 8的超豪华新特性，如函数式接口、Lambda表达式、方法引用 / 构造器引用、更强的Steam API、接口的增强、Optional、JVM中Metaspace取代PermGen空间等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们也能够看到Java为了跟上当下技术更迭的快节奏，不断的推陈出新。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从JDK 9开始，Java版本的发布改为每6个月一次，JDK 11是长期支持版本以及下半年将发布的JDK 17。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;JDK 9~JDK15也不乏一些重要的新特性，如&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 9 模块系统、JShell交互式命令行&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 10 局部变量类型推断&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 11 ZGC试用、HTTP Client API、Steam等增强&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 12 switch表达式扩展、增加基于JMH的一套微基准套件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 13 Socket API 重构、文本块（多行文本）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 14 更有价值的NPE错误信息、JDK 16特性的部分预览&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 15 密封类、Record类等JDK 16特性的预览&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;希望这种快速版本迭代的策略能够让Java保持持续的活力，能够让开发者使用的更高效、更健壮！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-lake-id=&quot;d6bdc6b54b61ab98b1cc65094d3b9ed6&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;JDK 1&lt;/span&gt;&lt;span&gt;6 的状态、发布计划与新特性&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d6bdc6b54b61ab98b1cc65094d3b9ed6&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;（http://openjdk.java.net/projects/jdk/16/）&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JDK 16: The new features in Java 16&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://www.infoworld.com/article/3569150/jdk-16-the-new-features-in-java-16.html）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Java源代码仓库迁移到Github&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://www.infoworld.com/article/3569068/javas-move-to-github-set-for-september.html）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在Alpine + OpenJDK镜像中运行Spring Boot&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://blogs.oracle.com/developers/running-spring-boot-in-a-docker-container-on-openjdk,-oracle-jdk,-zulu-on-alpine-linux,-oracle-linux,-ubuntu）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JEP 394: Pattern Matching for instanceof&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://openjdk.java.net/jeps/394）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JEP 395: Records&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://openjdk.java.net/jeps/395）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;JEP 397: Sealed Classes (Second Preview)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;（https://openjdk.java.net/jeps/397）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;  加入我们 &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;欢迎加入淘系架构团队，团队成员大牛云集，有阿里移动中间件的创始人员、Dubbo核心成员、更有一群热爱技术，期望用技术推动业务的小伙伴。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;淘系架构团队，推进淘系（淘宝、天猫等）架构升级，致力于为淘系、整个集团提供基础核心能力、产品与解决方案：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务高可用的解决方案与核心能力（精细化流量管控Marconi平台：为业务提供自适应流控、隔离与熔断的柔性高可用解决方案，站点高可用：故障自愈、多机房与异地容灾与快速切流恢复&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;新一代的业务研发模式FaaS（一站式函数研发Gaia平台）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;下一代网络协议QUIC实现与落地&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;移动中间件（API网关MTop、接入层AServer、消息/推送、配置中心等等）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;期待一起参与加入淘系基础平台的建设~&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;简历投递至📮：泽彬 zebin.xuzb@alibaba-inc.com&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;（淘系架构-应用架构Leader）&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;✿ &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;&lt;span&gt;拓展阅读&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650418838&amp;amp;idx=2&amp;amp;sn=ca5c4b7f10303aff1ac67c870c72ebf6&amp;amp;chksm=8396e68eb4e16f98b4eb91c16f2f5ef55c76d87de410665393571e2e39799680a5681de349a2&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.17777777777777778&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibHfl26hlezuDKEjiaW7vTB7XBSvDQhDHIU9Vvjt35kPzNrM62p3JIXq07oFY42H8N5wbOsJtx4Jcg/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650418756&amp;amp;idx=1&amp;amp;sn=716b8624834a633c998026b5bada3b93&amp;amp;chksm=8396e65cb4e16f4a6f2ccbf2e409b9c1c6f733649f024df55f789c9f29f061109be4157dcaef&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibHfl26hlezuDKEjiaW7vTB7CGn67jy4dbUUdqWlViaLUlLrCcpmLjLxricc7KTE6WbH0icIAunC7bFiag/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;amp;mid=2650418866&amp;amp;idx=1&amp;amp;sn=aedf87506e7291af918e05ca5b9440f5&amp;amp;chksm=8396e6aab4e16fbcc734b8d1fca458a9a90af40529484e21a418f5ec060066d19bcb1f8f03ba&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot; hasload=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnjuibHfl26hlezuDKEjiaW7vTB7OSHwIphiaKQgHdeCGQrmdqnDEvL7tXC2zAVSibuT2IXTjjkdTpRXK3bA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;|熊政(八风)  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;编辑|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;橙子君&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品|&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;阿里巴巴新零售淘系技术&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;331&quot; data-backw=&quot;578&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOiboFmk6AE4WC0UFUU2MfXQS9E9ibVUdVZoMpic6wE97ylUl6r4olNpDow/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;720&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;412.318339100346&quot; data-ratio=&quot;0.5722222222222222&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;720&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/33P2FdAnju9qJSYLusYZ20IeW1JcwLxOmYpQKzz1XI7PlgmOA3cPARTxwZuKFw6osZsksibeH7HrS9oiaVooQSZQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;94&quot; data-backw=&quot;562&quot; data-ratio=&quot;0.16666666666666666&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju9I3TY9EP8M3D7oDuMfTuEh37yxribyjc3viaicCKBT9nJhqBcib36SSRaib3vIobcZbx93RYyf9QvgzOA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6e9f7319f75e8f8a0525adc1d79b6f8f</guid>
<title>JavaScript 的数据类型</title>
<link>https://toutiao.io/k/6n6xsdc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section&gt;&lt;blockquote&gt;&lt;p&gt;这几天再看“JavaScript高级程序设计”，打算巩固下基础，顺便对一些常用的进行总结，之后的更新可能都是基础知识。有兴趣的可以关注下公众号&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;今天说说JavaScript的数据类型，很多人会认为有六种数据类型，其实不是很全面，我们就盘盘JavaScript到底有几种数据类型，我们分原始类型和引用类型说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1 typeof 操作符&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在说数据类型之前，我们需要知道如何去判断一个变量属于什么数据类型，typeof操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&quot;undefined&quot;&lt;/span&gt;    表示值未定义；&lt;br/&gt;&lt;span&gt;&quot;boolean&quot;&lt;/span&gt;      表示值为布尔值；&lt;br/&gt;&lt;span&gt;&quot;string&quot;&lt;/span&gt;       表示值为字符串；&lt;br/&gt;&lt;span&gt;&quot;number&quot;&lt;/span&gt;       表示值为数值；&lt;br/&gt;&lt;span&gt;&quot;object&quot;&lt;/span&gt;       表示值为对象；&lt;br/&gt;&lt;span&gt;&quot;function&quot;&lt;/span&gt;     表示值为函数；&lt;br/&gt;&lt;span&gt;&quot;symbol&quot;&lt;/span&gt;       表示值为符号；&lt;br/&gt;&lt;span&gt;&quot;bigint&quot;&lt;/span&gt;       表示值最大安全整数；&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2 原始数据类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在ES6之前，有五种原始数据类型，number、string、boolean、null、undefined，在ES6新增一种symbol，ES10新增一种bigint。算下来，原始数据类型就有7种。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1 number&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; b = &lt;span&gt;1.1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; c = &lt;span&gt;-1.1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;typeof&lt;/span&gt; a  &lt;span&gt;// &quot;number&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;typeof&lt;/span&gt; b  &lt;span&gt;// &quot;number&quot;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;typeof&lt;/span&gt; c  &lt;span&gt;// &quot;number&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们通过操作符typeof可以看出上面几个变量都是原始数据类型中的数字类型，这里我们说下特殊的数值NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;console.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;/&lt;span&gt;0&lt;/span&gt;);    &lt;span&gt;// NaN&lt;/span&gt;&lt;br/&gt;console.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;-0&lt;/span&gt;/+&lt;span&gt;0&lt;/span&gt;);  &lt;span&gt;// NaN&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;我们还可以通过Number()、parseInt()和 parseFloat()将非数值转换为数值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.2 string&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; firstName = &lt;span&gt;&quot;lilei&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; &lt;span&gt;last&lt;/span&gt;Name = &lt;span&gt;&#x27;lixiaolei&#x27;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这里就不多说了，单引号和双引号都是可以定义字符串的。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.3 boolean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Boolean（布尔值）类型是 ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和 false。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; a = &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; b = &lt;span&gt;true&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;.4 nul&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Null 类型只有一个值，即特殊值 null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个 null 会返回&quot;object&quot;的原因：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; car = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;typeof&lt;/span&gt; car); &lt;span&gt;// &quot;object&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.5 undefined&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Undefined 类型也只有一个值，就是特殊值 undefined。当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了 undefined 值：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; message;&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(message == &lt;span&gt;undefined&lt;/span&gt;); &lt;span&gt;// true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.6 symbol(ES6)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Symbol（符号）是 ECMAScript 6 新增的数据类型。用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; sym = &lt;span&gt;Symbol&lt;/span&gt;();&lt;br/&gt;&lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;typeof&lt;/span&gt; sym); &lt;span&gt;// symbol&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.7 bigint(ES10)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;BigInt数据类型的目的是比Number数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用BigInt，整数溢出将不再是问题。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; max = &lt;span&gt;Number&lt;/span&gt;.MAX_SAFE_INTEGER;    &lt;span&gt;// 最大安全整数&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; max1 = max + &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; max2 = max + &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;max1 === max2  &lt;span&gt;//true&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;由于JavaScript按照&lt;/span&gt;&lt;span&gt;IEEE 754-2008&lt;/span&gt;&lt;span&gt;标准的定义，所有数字都以&lt;/span&gt;&lt;span&gt;双精度64位浮点&lt;/span&gt;&lt;span&gt;格式表示。在此标准下，无法精确表示的非常大的整数将自动四舍五入。确切地说，JS 中的Number类型只能安全地表示-9007199254740991 (-(2^53-1)) 和9007199254740991(2^53-1)之间的整数，任何超出此范围的整数值都可能失去精度。使用BigInt，应用程序不再需要变通方法或库来安全地表示Number.MAX_SAFE_INTEGER和Number.Min_SAFE_INTEGER之外的整数。现在可以在标准JS中执行对大整数的算术运算，而不会有精度损失的风险。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; max = BigInt(&lt;span&gt;Number&lt;/span&gt;.MAX_SAFE_INTEGER);&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; max1 = max + &lt;span&gt;1&lt;/span&gt;n&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; max2 = max + &lt;span&gt;2&lt;/span&gt;n&lt;br/&gt;max1 === max2 &lt;span&gt;// false&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3 引用数据类型&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;引用数据类型（object类型），其实就是一组数据和功能的集合，通过 new 操作符后跟对象类型的名称来创建。我们常用的&lt;span&gt;object、array、function、data&lt;/span&gt;等都属于引用类型。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; a = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Function&lt;/span&gt;()&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Date&lt;/span&gt;()&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; c = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;()&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; d = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;()&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;关于引用类型的属性和方法，我们后期再讲。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4 总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Jav&lt;/span&gt;&lt;span&gt;aScript的数据类型&lt;/span&gt;一共有8种，基本数据类型有7种，&lt;span&gt;number、string、boolean、null、undefined，symbol(&lt;span&gt;ES&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;)，bigint(&lt;span&gt;E&lt;/span&gt;&lt;span&gt;S10)，引用类型有1种object，&lt;span&gt;我们常用的&lt;/span&gt;&lt;span&gt;object、array、function、data&lt;/span&gt;&lt;span&gt;等都属于引用类型&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>