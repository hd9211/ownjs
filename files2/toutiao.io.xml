<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>efb2268f95ba6208a7ec48d18fd62ddc</guid>
<title>快速找出redis大key删除</title>
<link>https://toutiao.io/k/yncwv3k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div data-md-url=&quot;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;amp;action=edit&amp;amp;isNew=1&amp;amp;type=10&amp;amp;token=181702514&amp;amp;lang=zh_CN&quot;&gt;&lt;p&gt;最近要做一些活动，需要考虑redis容量规划，发现redis集群内存使用率已经75%了，所以想着是不是能快速压缩。&lt;/p&gt;&lt;p&gt;所以第一目标就是找出那些key占用内存比较大，然后进行清理，比较幸运，真的找到了。&lt;/p&gt;&lt;p&gt;先说说redis的规划，因为redis计费完全基于内存，所以托管在云上，需要注意成本。&lt;/p&gt;&lt;p&gt;redis使用最怕的两个问题，第一就是不管业务性质，从不设置过期时间；第二就是单个key的内容过大。前者属于没有标准，后者属于使用不当。&lt;/p&gt;&lt;p&gt;当然最核心的问题还是redis使用规划，比如queue，storage，cache的使用必须区分，可以基于实例或分区进行隔离，方便后续迁移。&lt;/p&gt;&lt;p&gt;那么如何找出大的key，且业务上无用的key呢？使用python的rdbtools工具（https://github.com/sripathikrishnan/redis-rdb-tools），安装很简单：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;pip3 install rdbtools&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后从阿里云导出rdb文件进行分析，它的用法很多，比如：&lt;/p&gt;&lt;p&gt;将rdb文件转成json格式：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb --command json dump.rdb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找出某些前缀的key及其存储信息：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb -c json --db 2 --type hash --key &quot;a.*&quot; dump.rdb&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也能分析内存信息，比如找出大于128字节，或top大的key：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb -c memory dump.rdb --bytes 128 -f memory.csv
rdb -c memory dump.rdb --largest 10 -f memory.csv&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那返回什么信息呢：database,type,key,size_in_bytes,encoding,num_elements,len_largest_element，过期时间；有这么多信息就能做很多事，可以用shell来处理。&lt;/p&gt;&lt;p&gt;另外rdb还有很多 —command，比如 json, diff, justkeys, justkeyvals and protocol。&lt;/p&gt;&lt;p&gt;rdb还有redis-memory-for-key工具，能查找单个key信息，比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;redis-memory-for-key -s localhost -p 6379 -a mypassword person:1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到key就是删除，我是这么做的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rdb --command justkeys --key &quot;test*&quot; redis.rdb &amp;gt;del.txt
cat del.txt  | while read LINE ; do redis-cli del $LINE; done;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;另外redis-cli的—bigkeys也能找出比较大的key，只不过对于不同redis类型，其计算的规则不一样，比如string类型按照实际存储大小计算，而list类型按照长度计算，所以功能比rdb小了不少。&lt;/p&gt;&lt;p title=&quot;MDH:PHA+5pyA6L+R6KaB5YGa5LiA5Lqb5rS75Yqo77yM6ZyA6KaB6ICD6JmRcmVkaXPlrrnph4/op4Tl&amp;#10;iJLvvIzlj5HnjrByZWRpc+mbhue+pOWGheWtmOS9v+eUqOeOh+W3sue7jzc1JeS6hu+8jOaJgOS7&amp;#10;peaDs+edgOaYr+S4jeaYr+iDveW/q+mAn+WOi+e8qeOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRp&amp;#10;dGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYwNV8wLjg2MDQwMjc5NDg5NTA3MzkiPjwvbXBj&amp;#10;aGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+5omA5Lul56ys5LiA55uu5qCH5bCx5piv5om+5Ye6&amp;#10;6YKj5Lqba2V55Y2g55So5YaF5a2Y5q+U6L6D5aSn77yM54S25ZCO6L+b6KGM5riF55CG77yM5q+U&amp;#10;6L6D5bm46L+Q77yM55yf55qE5om+5Yiw5LqG44CCPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjA2XzAuMTAzMjQ4OTMxODkzMzQxNjEiPjwvbXBjaGVj&amp;#10;a3RleHQ+PC9wPjxwPjxicj48L3A+PHA+5YWI6K+06K+0cmVkaXPnmoTop4TliJLvvIzlm6DkuLpy&amp;#10;ZWRpc+iuoei0ueWujOWFqOWfuuS6juWGheWtmO+8jOaJgOS7peaJmOeuoeWcqOS6keS4iu+8jOmc&amp;#10;gOimgeazqOaEj+aIkOacrOOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBp&amp;#10;ZD0iMTYzOTc0NzczNTYwN18wLjA2NzQwMTUwOTQ2MzczOTQ2Ij48L21wY2hlY2t0ZXh0PjwvcD48&amp;#10;cD48YnI+PC9wPjxwPnJlZGlz5L2/55So5pyA5oCV55qE5Lik5Liq6Zeu6aKY77yM56ys5LiA5bCx&amp;#10;5piv5LiN566h5Lia5Yqh5oCn6LSo77yM5LuO5LiN6K6+572u6L+H5pyf5pe26Ze077ybPG1wY2hl&amp;#10;Y2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjEwXzAuNDAzMjEw&amp;#10;MjMwNDQyNjQ2OCI+PC9tcGNoZWNrdGV4dD7nrKzkuozlsLHmmK/ljZXkuKprZXnnmoTlhoXlrrno&amp;#10;v4flpKfjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3&amp;#10;MzU2MDhfMC4wOTk3NDE1ODY3ODc5MjYzMyI+PC9tcGNoZWNrdGV4dD7liY3ogIXlsZ7kuo7msqHm&amp;#10;nInmoIflh4bvvIzlkI7ogIXlsZ7kuo7kvb/nlKjkuI3lvZPjgII8bXBjaGVja3RleHQgY29udGVu&amp;#10;dGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MDlfMC45MzAyNTExMDk4NDU3NTY3Ij48&amp;#10;L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuW9k+eEtuacgOaguOW/g+eahOmXrumimOi/&amp;#10;mOaYr3JlZGlz5L2/55So6KeE5YiS77yM5q+U5aaCcXVldWXvvIxzdG9yYWdl77yMY2FjaGXnmoTk&amp;#10;vb/nlKjlv4XpobvljLrliIbvvIzlj6/ku6Xln7rkuo7lrp7kvovmiJbliIbljLrov5vooYzpmpTn&amp;#10;prvvvIzmlrnkvr/lkI7nu63ov4Hnp7vjgII8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJm&amp;#10;YWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MTFfMC43NzkwMTMzMTI2MjczNDgiPjwvbXBjaGVja3RleHQ+&amp;#10;PC9wPjxwPjxicj48L3A+PHA+6YKj5LmI5aaC5L2V5om+5Ye65aSn55qEa2V577yM5LiU5Lia5Yqh&amp;#10;5LiK5peg55So55qEa2V55ZGi77yfPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2Ui&amp;#10;IGlkPSIxNjM5NzQ3NzM1NjEyXzAuODk4OTcyMDY3MjY3MDYxMSI+PC9tcGNoZWNrdGV4dD7kvb/n&amp;#10;lKhweXRob27nmoRyZGJ0b29sc+W3peWFt++8iGh0dHBzOi8vZ2l0aHViLmNvbS9zcmlwYXRoaWty&amp;#10;aXNobmFuL3JlZGlzLXJkYi10b29sc++8ie+8jOWuieijheW+iOeugOWNle+8mjxtcGNoZWNrdGV4&amp;#10;dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYxM18wLjg3NDYxMTEzODY3&amp;#10;MzQ2ODUiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNv&amp;#10;bnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE0XzAuNDExODQ4MzQ0MjIwNjUx&amp;#10;MSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+cGlwMyBpbnN0YWxsIHJkYnRvb2xzPG1wY2hlY2t0ZXh0&amp;#10;IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE1XzAuNTU4MzUxNjYyMjI4&amp;#10;NDQ5NSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjE2XzAuMzAyOTMzODkxMzM5NTgwNSI+PC9tcGNoZWNr&amp;#10;dGV4dD48L3A+PHA+PGJyPjwvcD48cD7nhLblkI7ku47pmL/ph4zkupHlr7zlh7pyZGLmlofku7bo&amp;#10;v5vooYzliIbmnpDvvIzlroPnmoTnlKjms5XlvojlpJrvvIzmr5TlpoLvvJo8bXBjaGVja3RleHQg&amp;#10;Y29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MTdfMC42MTI2Mzg5OTQ4OTI2&amp;#10;MjE2Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuWwhnJkYuaWh+S7tui9rOaIkGpz&amp;#10;b27moLzlvI/vvJo8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3&amp;#10;NDc3MzU2MThfMC43NjcxMzgwMTQxOTA1MTY2Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9w&amp;#10;PjxwPmBgYDxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0Nzcz&amp;#10;NTYxOV8wLjk0ODE4MDUxNjI3NDI2MDciPjwvbXBjaGVja3RleHQ+PC9wPjxwPnJkYiAtLWNvbW1h&amp;#10;bmQganNvbiBkdW1wLnJkYjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0i&amp;#10;MTYzOTc0NzczNTYyMF8wLjgxMzY0OTI4NDkyMTgzNjIiPjwvbXBjaGVja3RleHQ+PC9wPjxwPmBg&amp;#10;YDxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyMV8w&amp;#10;LjM2ODUwOTU4OTA2NTE5MTkzIj48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuaJvuWH&amp;#10;uuafkOS6m+WJjee8gOeahGtleeWPiuWFtuWtmOWCqOS/oeaBr++8mjxtcGNoZWNrdGV4dCBjb250&amp;#10;ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyMl8wLjA3ODkxMzQwMjgyNzQ4OTM4&amp;#10;Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPmBgYDxtcGNoZWNrdGV4dCBjb250ZW50&amp;#10;ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTYyM18wLjEwNTM1ODgxMDA4MTU4NjMyIj48&amp;#10;L21wY2hlY2t0ZXh0PjwvcD48cD5yZGIgLWMganNvbiAtLWRiIDIgLS10eXBlIGhhc2ggLS1rZXkg&amp;#10;ImEuKiIgZHVtcC5yZGI8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2&amp;#10;Mzk3NDc3MzU2MjRfMC43NTIxNjgwNDIxMjc5MDA3Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5gYGA8&amp;#10;bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MjVfMC4z&amp;#10;NTk2MTU1MDc3NTY1MzEzIj48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPuS5n+iDveWI&amp;#10;huaekOWGheWtmOS/oeaBr++8jOavlOWmguaJvuWHuuWkp+S6jjEyOOWtl+iKgu+8jOaIlnRvcOWk&amp;#10;p+eahGtlee+8mjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYyNl8wLjc1NTE2NDc4NjE2MTcwMjEiPjwvbXBjaGVja3RleHQ+PC9wPjxwPjxicj48L3A+&amp;#10;PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1&amp;#10;NjI3XzAuNjgzNjY4MTYwMDQxNzk5NSI+PC9tcGNoZWNrdGV4dD48L3A+PHA+cmRiIC1jIG1lbW9y&amp;#10;eSBkdW1wLnJkYiAtLWJ5dGVzIDEyOCAtZiBtZW1vcnkuY3N2PG1wY2hlY2t0ZXh0IGNvbnRlbnRl&amp;#10;ZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjI4XzAuOTc4Mzc3NTMwNDEwMTYzNCI+PC9t&amp;#10;cGNoZWNrdGV4dD48L3A+PHA+cmRiIC1jIG1lbW9yeSBkdW1wLnJkYiAtLWxhcmdlc3QgMTAgLWYg&amp;#10;bWVtb3J5LmNzdjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYyOV8wLjE5MzE3NDE3MDMzMzYxMjk1Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5gYGA8bXBj&amp;#10;aGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzBfMC4xMTY1&amp;#10;NzA1NzI3NTIzNDk4MyI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48cD7pgqPov5Tlm57k&amp;#10;u4DkuYjkv6Hmga/lkaLvvJo8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9&amp;#10;IjE2Mzk3NDc3MzU2MzJfMC43MTc2Nzc2NTA3ODU1MzU4Ij48L21wY2hlY2t0ZXh0PmRhdGFiYXNl&amp;#10;LHR5cGUsa2V5LHNpemVfaW5fYnl0ZXMsZW5jb2RpbmcsbnVtX2VsZW1lbnRzLGxlbl9sYXJnZXN0&amp;#10;X2VsZW1lbnTvvIzov4fmnJ/ml7bpl7TvvJs8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJm&amp;#10;YWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzNfMC4yMDI1OTc3NzcxNTk3OTk3NiI+PC9tcGNoZWNrdGV4&amp;#10;dD7mnInov5nkuYjlpJrkv6Hmga/lsLHog73lgZrlvojlpJrkuovvvIzlj6/ku6XnlKhzaGVsbOad&amp;#10;peWkhOeQhuOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0&amp;#10;NzczNTYzMV8wLjgyMDE2OTIwOTE4NzUwMyI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48&amp;#10;cD7lj6blpJZyZGLov5jmnInlvojlpJogLS1jb21tYW5k77yM5q+U5aaCIGpzb24sIGRpZmYsIGp1&amp;#10;c3RrZXlzLCBqdXN0a2V5dmFscyBhbmQgcHJvdG9jb2zjgII8bXBjaGVja3RleHQgY29udGVudGVk&amp;#10;aXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzRfMC44NzIzNjgzNzgxOTkxMDQzIj48L21w&amp;#10;Y2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPnJkYui/mOaciXJlZGlzLW1lbW9yeS1mb3Ita2V5&amp;#10;5bel5YW377yM6IO95p+l5om+5Y2V5Liqa2V55L+h5oGv77yM5q+U5aaC77yaPG1wY2hlY2t0ZXh0&amp;#10;IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjM1XzAuODM2MDc1MDk0Nzc1&amp;#10;MDI2OCI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJyPjwvcD48cD5gYGA8bXBjaGVja3RleHQgY29u&amp;#10;dGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzZfMC40NDIyOTA3MTk3Nzk1MTE2&amp;#10;Ij48L21wY2hlY2t0ZXh0PjwvcD48cD5yZWRpcy1tZW1vcnktZm9yLWtleSAtcyBsb2NhbGhvc3Qg&amp;#10;LXAgNjM3OSAtYSBteXBhc3N3b3JkIHBlcnNvbjoxPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJs&amp;#10;ZT0iZmFsc2UiIGlkPSIxNjM5NzQ3NzM1NjM3XzAuMTcxNjAyNzkxNTgwMDI4OSI+PC9tcGNoZWNr&amp;#10;dGV4dD48L3A+PHA+YGBgPG1wY2hlY2t0ZXh0IGNvbnRlbnRlZGl0YWJsZT0iZmFsc2UiIGlkPSIx&amp;#10;NjM5NzQ3NzM1NjM4XzAuODUwODQ3NDI0NDg2MDE2MiI+PC9tcGNoZWNrdGV4dD48L3A+PHA+PGJy&amp;#10;PjwvcD48cD7mib7liLBrZXnlsLHmmK/liKDpmaTvvIzmiJHmmK/ov5nkuYjlgZrnmoTvvJo8bXBj&amp;#10;aGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2MzlfMC4zNjYy&amp;#10;NDU0NzA5MzU5NTM3Ij48L21wY2hlY2t0ZXh0PjwvcD48cD48YnI+PC9wPjxwPmBgYDxtcGNoZWNr&amp;#10;dGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBpZD0iMTYzOTc0NzczNTY0MF8wLjUxMjk0NDgy&amp;#10;MDkyNTM4NTciPjwvbXBjaGVja3RleHQ+PC9wPjxwPnJkYiAtLWNvbW1hbmQganVzdGtleXMgLS1r&amp;#10;ZXkgInRlc3QqIiByZWRpcy5yZGIgJmd0O2RlbC50eHQ8bXBjaGVja3RleHQgY29udGVudGVkaXRh&amp;#10;YmxlPSJmYWxzZSIgaWQ9IjE2Mzk3NDc3MzU2NDFfMC4zNzYxNTE3Njk4MTY4MDk1MyI+PC9tcGNo&amp;#10;ZWNrdGV4dD48L3A+PHA+Y2F0IGRlbC50eHQmbmJzcDsgfCB3aGlsZSByZWFkIExJTkUgOyBkbyBy&amp;#10;ZWRpcy1jbGkgZGVsICRMSU5FOyBkb25lOzxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZh&amp;#10;bHNlIiBpZD0iMTYzOTc0NzczNTY0Ml8wLjQzNzg1NDAwMDg1NTQyMjE0Ij48L21wY2hlY2t0ZXh0&amp;#10;PjwvcD48cD5gYGA8bXBjaGVja3RleHQgY29udGVudGVkaXRhYmxlPSJmYWxzZSIgaWQ9IjE2Mzk3&amp;#10;NDc3MzU2NDNfMC4zOTc1NDIxNzM3ODY5OTE1Ij48L21wY2hlY2t0ZXh0PjwvcD48cD7igIs8YnI+&amp;#10;PC9wPjxwPuWPpuWklnJlZGlzLWNsaeeahC0tYmlna2V5c+S5n+iDveaJvuWHuuavlOi+g+Wkp+ea&amp;#10;hGtlee+8jOWPquS4jei/h+WvueS6juS4jeWQjHJlZGlz57G75Z6L77yM5YW26K6h566X55qE6KeE&amp;#10;5YiZ5LiN5LiA5qC377yM5q+U5aaCc3RyaW5n57G75Z6L5oyJ54Wn5a6e6ZmF5a2Y5YKo5aSn5bCP&amp;#10;6K6h566X77yM6ICMbGlzdOexu+Wei+aMieeFp+mVv+W6puiuoeeul++8jOaJgOS7peWKn+iDveav&amp;#10;lHJkYuWwj+S6huS4jeWwkeOAgjxtcGNoZWNrdGV4dCBjb250ZW50ZWRpdGFibGU9ImZhbHNlIiBp&amp;#10;ZD0iMTYzOTc0NzczNTY0NF8wLjY2MDI1OTIxNTU0ODMzODIiPjwvbXBjaGVja3RleHQ+PC9wPjxw&amp;#10;Pjxicj48L3A+&quot;/&gt;&lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8aa0811f291f2b2d14e0c9390a3a8292</guid>
<title>面试官：思考Tomcat 类加载器为什么要违背双亲委派模型？</title>
<link>https://toutiao.io/k/6c9w8gs</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&amp;amp;scene=21&amp;amp;token=899450012&amp;amp;lang=zh_CN#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6mychickmupWpY1HeyVLK9Pw8lMMrdyD0AiaxhW2vgtibtlKMLaSg7T4AvKMcbSdYfoib7DqqRrOU2SSXBaFwwPyUw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;chksm=fa496f8ecd3ee698f4954c00efb80fe955ec9198fff3ef4011e331aa37f55a6a17bc8c0335a8&amp;amp;scene=21&amp;amp;token=899450012&amp;amp;lang=zh_CN#wechat_redirect&quot; data-linktype=&quot;2&quot;/&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我想，在研究tomcat 类加载之前，我们复习一下或者说巩固一下java 默认的类加载器。楼主以前对类加载也是懵懵懂懂，借此机会，也好好复习一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;楼主翻开了神书《深入理解Java虚拟机》第二版，p227, 关于类加载器的部分。请看：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码编译的结果从本地机器码转变成字节码，是存储格式的一小步，却是编程语言发展的一大步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java虚拟机把描述类的数据从Class文件加载进内存，并对数据进行校验，转换解析和初始化，最终形成可以呗虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这动作的代码模块成为“类加载器”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类加载阶段。对于任意一个类，都需要由加载他的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类命名空间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这句话可以表达的更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来自同一个Class文件，被同一个虚拟机加载，只要加载他们的类加载器不同，那这个两个类就必定不相等。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;推荐下自己做的 Spring Boot 的实战项目：&lt;/p&gt;&lt;p&gt;https://github.com/YunaiV/ruoyi-vue-pro&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1.从Java虚拟机的角度来说，只存在两种不同类加载器：一种是启动类加载器(Bootstrap ClassLoader)，这个类加载器使用C++语言实现（只限HotSpot），是虚拟机自身的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类&lt;code&gt;java.lang.ClassLoader&lt;/code&gt;.&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2.从Java开发人员的角度来看，类加载还可以划分的更细致一些，绝大部分Java程序员都会使用以下3种系统提供的类加载器：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;启动类加载器（Bootstrap ClassLoader）：&lt;/strong&gt; 这个类加载器复杂将存放在 JAVA_HOME/lib 目录中的，或者被-Xbootclasspath 参数所指定的路径种的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录下也不会重载）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;扩展类加载器（Extension ClassLoader）：&lt;/strong&gt; 这个类加载器由&lt;code&gt;sun.misc.Launcher$ExtClassLoader&lt;/code&gt;实现，它负责夹杂JAVA_HOME/lib/ext 目录下的，或者被java.ext.dirs 系统变量所指定的路径种的所有类库。开发者可以直接使用扩展类加载器。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;应用程序类加载器（Application ClassLoader）：&lt;/strong&gt; 这个类加载器由&lt;code&gt;sun.misc.Launcher$AppClassLoader&lt;/code&gt;实现。由于这个类加载器是ClassLoader 种的getSystemClassLoader方法的返回值，所以也成为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库。开发者可以直接使用这个类加载器，如果应用中没有定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些类加载器之间的关系一般如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5081723625557206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6mychickmupXicOvg8iaQo6eW4ibiaH0NOyLn97iax8I8XnTWibbhjnVSPYz6dOglG5Z0ibwAAl0bxFwOicH1PGryAl3tzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;673&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图中各个类加载器之间的关系成为 类加载器的双亲委派模型（Parents Dlegation Mode）。双亲委派模型要求除了顶层的启动类加载器之外，其余的类加载器都应当由自己的父类加载器加载，这里类加载器之间的父子关系一般不会以继承的关系来实现，而是都使用组合关系来复用父加载器的代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类加载器的双亲委派模型在JDK1.2 期间被引入并被广泛应用于之后的所有Java程序中，但他并不是个强制性的约束模型，而是Java设计者推荐给开发者的一种类加载器实现方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派父类加载器去完成。每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个请求（他的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果没有使用双亲委派模型，由各个类加载器自行加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，那系统将会出现多个不同的Object类， Java类型体系中最基础的行为就无法保证。应用程序也将会变得一片混乱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常简单：所有的代码都在&lt;code&gt;java.lang.ClassLoader&lt;/code&gt;中的loadClass方法之中，代码如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.722457627118644&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6mychickmupXicOvg8iaQo6eW4ibiaH0NOyLnLLpBUkROK2hP1dgSNu2Z92lPmDCa6ibodR0VTmB8Y84HKWWPicMicmC9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;逻辑清晰易懂：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass方法， 如父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass方法进行加载。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;推荐下自己做的 Spring Cloud 的实战项目：&lt;/p&gt;&lt;p&gt;https://github.com/YunaiV/onemall&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚刚我们说过，双亲委任模型不是一个强制性的约束模型，而是一个建议型的类加载器实现方式。在Java的世界中大部分的类加载器都遵循者模型，但也有例外，到目前为止，双亲委派模型有过3次大规模的“被破坏”的情况。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第一次：在双亲委派模型出现之前-----即JDK1.2发布之前。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第二次：是这个模型自身的缺陷导致的。&lt;/strong&gt; 我们说，双亲委派模型很好的解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API， 但没有绝对，如果基础类调用会用户的代码怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这不是没有可能的。一个典型的例子就是JNDI服务，JNDI现在已经是Java的标准服务，它的代码由启动类加载器去加载（在JDK1.3时就放进去的rt.jar）,但它需要调用由独立厂商实现并部署在应用程序的ClassPath下的JNDI接口提供者（SPI， Service Provider Interface）的代码，但启动类加载器不可能“认识“这些代码啊。因为这些类不在&lt;code&gt;rt.jar&lt;/code&gt;中，但是启动类加载器又需要加载。怎么办呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了解决这个问题，Java设计团队只好引入了一个不太优雅的设计：线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过&lt;code&gt;java.lang.Thread&lt;/code&gt;类的setContextClassLoader方法进行设置。如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过多的话，那这个类加载器默认即使应用程序类加载器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;嘿嘿，有了线程上下文加载器，JNDI服务使用这个线程上下文加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，实际上已经违背了双亲委派模型的一般性原则。但这无可奈何，Java中所有涉及SPI的加载动作基本胜都采用这种方式。例如JNDI，JDBC，JCE，JAXB，JBI等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;第三次：为了实现热插拔，热部署，模块化，意思是添加一个功能或减去一个功能不用重启，只需要把这模块连同类加载器一起换掉就实现了代码的热替换。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书中还说到：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 程序中基本有一个共识：OSGI对类加载器的使用时值得学习的，弄懂了OSGI的实现，就可以算是掌握了类加载器的精髓。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;牛逼啊！！！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在，我们已经基本明白了Java默认的类加载的作用了原理，也知道双亲委派模型。说了这么多，差点把我们的tomcat给忘了，我们的题目是Tomcat 加载器为何违背双亲委派模型？下面就好好说说我们的tomcat的类加载器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，我们来问个问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Tomcat 如果使用默认的类加载机制行不行？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们思考一下：Tomcat是个web容器， 那么它要解决什么问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个web容器可能需要部署两个应用程序，不同的应用程序可能会依赖同一个第三方类库的不同版本，不能要求同一个类库在同一个服务器只有一份，因此要保证每个应用程序的类库都是独立的，保证相互隔离。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部署在同一个web容器中相同的类库相同的版本可以共享。否则，如果服务器有10个应用程序，那么要有10份相同的类库加载进虚拟机，这是扯淡的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;web容器也有自己依赖的类库，不能于应用程序的类库混淆。基于安全考虑，应该让容器的类库和程序的类库隔离开来。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;web容器要支持jsp的修改，我们知道，jsp 文件最终也是要编译成class文件才能在虚拟机中运行，但程序运行后修改jsp已经是司空见惯的事情，否则要你何用？所以，web容器需要支持 jsp 修改后不用重启。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;再看看我们的问题：Tomcat 如果使用默认的类加载机制行不行？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;答案是不行的。为什么？我们看，第一个问题，如果使用默认的类加载器机制，那么是无法加载两个相同类库的不同版本的，默认的累加器是不管你是什么版本的，只在乎你的全限定类名，并且只有一份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个问题，默认的类加载器是能够实现的，因为他的职责就是保证唯一性。第三个问题和第一个问题一样。我们再看第四个问题，我们想我们要怎么实现jsp文件的热修改（楼主起的名字），jsp 文件其实也就是class文件，那么如果修改了，但类名还是一样，类加载器会直接取方法区中已经存在的，修改后的jsp是不会重新加载的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么怎么办呢？我们可以直接卸载掉这jsp文件的类加载器，所以你应该想到了，每个jsp文件对应一个唯一的类加载器，当一个jsp文件修改了，就直接卸载这个jsp类加载器。重新创建类加载器，重新加载jsp文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，Tomcat 是怎么实现的呢？牛逼的Tomcat团队已经设计好了。我们看看他们的设计图：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&amp;amp;mid=2247487551&amp;amp;idx=1&amp;amp;sn=18f64ba49f3f0f9d8be9d1fdef8857d9&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4177489177489178&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6mychickmupXicOvg8iaQo6eW4ibiaH0NOyLnFj1iaaJd0gjRap7iaIRrn6x4amXpufPapEct5Y7xicIJGpI7er5tvH7Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;462&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到，前面3个类加载和默认的一致，CommonClassLoader、CatalinaClassLoader、SharedClassLoader和WebappClassLoader则是Tomcat自己定义的类加载器，它们分别加载&lt;code&gt;/common/*&lt;/code&gt;、&lt;code&gt;/server/*&lt;/code&gt;、&lt;code&gt;/shared/*&lt;/code&gt;（在tomcat 6之后已经合并到根目录下的lib目录下）和&lt;code&gt;/WebApp/WEB-INF/*&lt;/code&gt;中的Java类库。其中WebApp类加载器和Jsp类加载器通常会存在多个实例，每一个Web应用程序对应一个WebApp类加载器，每一个JSP文件对应一个Jsp类加载器。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;commonLoader&lt;/code&gt;：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;catalinaLoader&lt;/code&gt;：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可见；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;sharedLoader&lt;/code&gt;：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;WebappClassLoader&lt;/code&gt;：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中的委派关系中可以看出：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;CommonClassLoader能加载的类都可以被Catalina ClassLoader和SharedClassLoader使用，从而实现了公有类库的共用，而CatalinaClassLoader和Shared ClassLoader自己能加载的类则与对方相互隔离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WebAppClassLoader可以使用SharedClassLoader加载到的类，但各个WebAppClassLoader实例之间相互隔离。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个.Class文件，它出现的目的就是为了被丢弃：当Web容器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的Jsp类加载器来实现JSP文件的HotSwap功能。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;好了，至此，我们已经知道了tomcat为什么要这么设计，以及是如何设计的，那么，tomcat 违背了java 推荐的双亲委派模型了吗？答案是：违背了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们前面说过：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;双亲委派模型要求除了顶层的启动类加载器之外，其余的类加载器都应当由自己的父类加载器加载。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很显然，tomcat 不是这样实现，tomcat 为了实现隔离性，没有遵守这个约定，每个webappClassLoader加载自己的目录下的class文件，不会传递给父类加载器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们扩展出一个问题：如果tomcat 的 Common ClassLoader 想加载 WebApp ClassLoader 中的类，该怎么办？看了前面的关于破坏双亲委派模型的内容，我们心里有数了，我们可以使用线程上下文类加载器实现，使用线程上下文加载器，可以让父类加载器请求子类加载器去完成类加载的动作。牛逼吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;好了，终于，我们明白了Tomcat 为何违背双亲委派模型，也知道了tomcat的类加载器是如何设计的。顺便复习了一下 Java 默认的类加载器机制，也知道了如何破坏Java的类加载机制。这一次收获不小哦！！！嘿嘿。&lt;/p&gt;&lt;span&gt;- END -&lt;/span&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>276cc7f4c1eac51dd17f6de57dbafe39</guid>
<title>Python 的切片为什么不会索引越界？</title>
<link>https://toutiao.io/k/ewtmepb</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片（slice）是 Python 中一种很有特色的特性，在正式开始之前，我们先来复习一下关于切片的知识吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片主要用于序列对象中，按照索引区间截取出一段索引的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片的书写形式：[i : i+n : m] ；其中，i 是切片的起始索引值，为列表首位时可省略；i+n 是切片的结束位置，为列表末位时可省略；m 可以不提供，默认值是 1，不允许为 0，当 m 为负数时，列表翻转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片的基本含义是：&lt;strong&gt;从序列的第 i 位索引起，向右取到后 n 位元素为止，按 m 间隔过滤&lt;/strong&gt; 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是一些很有代表性的例子，基本涵盖了切片语法的使用要点：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;# @Python猫&lt;/span&gt;&lt;br/&gt;li = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, &lt;span&gt;16&lt;/span&gt;]&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 以下写法都可以表示整个列表，其中 X &amp;gt;= len(li)&lt;/span&gt;&lt;br/&gt;li[&lt;span&gt;0&lt;/span&gt;:X] == li[&lt;span&gt;0&lt;/span&gt;:] == li[:X] == li[:] == li[::] == li[-X:X] == li[-X:]&lt;br/&gt;&lt;br/&gt;li[&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;] == [&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;] &lt;span&gt;# 从1起，取5-1位元素&lt;/span&gt;&lt;br/&gt;li[&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;] == [&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;] &lt;span&gt;# 从1起，取5-1位元素，按2间隔过滤&lt;/span&gt;&lt;br/&gt;li[&lt;span&gt;-1&lt;/span&gt;:] == [&lt;span&gt;16&lt;/span&gt;] &lt;span&gt;# 取倒数第一个元素&lt;/span&gt;&lt;br/&gt;li[&lt;span&gt;-4&lt;/span&gt;:&lt;span&gt;-2&lt;/span&gt;] == [&lt;span&gt;9&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;] &lt;span&gt;# 从倒数第四起，取-2-(-4)=2位元素&lt;/span&gt;&lt;br/&gt;li[:&lt;span&gt;-2&lt;/span&gt;] == li[-len(li):&lt;span&gt;-2&lt;/span&gt;] == [&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;] &lt;span&gt;# 从头开始，取-2-(-len(li))=7位元素&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 步长为负数时，列表先翻转，再截取&lt;/span&gt;&lt;br/&gt;li[::&lt;span&gt;-1&lt;/span&gt;] == [&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;# 翻转整个列表&lt;/span&gt;&lt;br/&gt;li[::&lt;span&gt;-2&lt;/span&gt;] == [&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;# 翻转整个列表，再按2间隔过滤&lt;/span&gt;&lt;br/&gt;li[:&lt;span&gt;-5&lt;/span&gt;:&lt;span&gt;-1&lt;/span&gt;] == [&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;14&lt;/span&gt;,&lt;span&gt;11&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;] &lt;span&gt;# 翻转整个列表，取-5-(-len(li))=4位元素&lt;/span&gt;&lt;br/&gt;li[:&lt;span&gt;-5&lt;/span&gt;:&lt;span&gt;-3&lt;/span&gt;] == [&lt;span&gt;16&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;] &lt;span&gt;# 翻转整个列表，取-5-(-len(li))=4位元素，再按3间隔过滤&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 切片的步长不可以为0&lt;/span&gt;&lt;br/&gt;li[::&lt;span&gt;0&lt;/span&gt;]  &lt;span&gt;# 报错（ValueError: slice step cannot be zero）&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;像 C/C++、Java 和 JavaScript 等语言，虽然也支持某些“切片”功能，例如截取数组或字符串的片段，但是，它们并没有一种在语法层面上的通用性支持。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据维基百科资料，Fortran 是最早支持切片语法的语言（1966），而 Python 则是最具代表性的语言之一。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.3448873483535528&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LLRiaS9YfFTMT0CCW9Zrkw8DufBOj6BofSyOFXZvyoT5Xp4DZHx7M0C7DxOdkniaLrLoEWicYLViaZ1PqoTbOCe0GA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;577&quot;/&gt;&lt;figcaption&gt;主要编程语言对切片的支持&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，像 Perl、Ruby、Go 和 Rust 等语言，虽然也有切片，但都不及 Python 那样灵活和自由（因为它支持 step、负数索引、缺省索引）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.260752688172043&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LLRiaS9YfFTMT0CCW9Zrkw8DufBOj6BofQw54JSuU7MibPKbG0jibUeaIatuX53crfpdO0z5Gz5aVugPDgoLUJ0xQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;744&quot;/&gt;&lt;figcaption&gt;编程语言中切片语法的形式&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片的基本用法就能够满足大部分的需求，但是，Python 切片还有一些进阶的用法，例如：切片占位符用法（可实现列表的赋值、删除与拼接操作）、自定义对象实现切片功能、迭代器切片（itertools.islice()）、文件对象切片等等。关联阅读：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247483894&amp;amp;idx=1&amp;amp;sn=0f354bfa77d3647137f0cdda97c64a0b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Python进阶：全面解读高级特性之切片！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关于切片的介绍与温习，就到这里了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面进入文章标题的问题：&lt;strong&gt;Python 的切片语法为什么不会出现索引越界呢？&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们根据单个索引进行取值时，如果索引越界，就会得到报错：“IndexError: list index out of range”。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li[&lt;span&gt;5&lt;/span&gt;]&lt;br/&gt;Traceback (most recent call last):&lt;br/&gt;  File &lt;span&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;br/&gt;IndexError: list index out of range&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一个非空的序列对象，假设其长度为 length，则它有效的索引值是从 0 到（length - 1）。如果把负数索引也考虑进去，则单个索引值的有效区间是 [-length, length - 1] 闭区间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，当 Python 切片中的索引超出这个范围时，程序并不会报错。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li[&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;]  &lt;span&gt;# 右索引超出&lt;/span&gt;&lt;br/&gt;[&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li[&lt;span&gt;5&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;]  &lt;span&gt;# 左右索引都超出&lt;/span&gt;&lt;br/&gt;[]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，对于这种现象，官方文档中有所介绍：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;span&gt;The slice of &lt;em&gt;s&lt;/em&gt; from &lt;em&gt;i&lt;/em&gt; to &lt;em&gt;j&lt;/em&gt; is defined as the sequence of items with index &lt;em&gt;k&lt;/em&gt; such that &lt;/span&gt;&lt;code&gt;&lt;span&gt;i &amp;lt;= k &amp;lt; j&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. If &lt;em&gt;i&lt;/em&gt; or &lt;em&gt;j&lt;/em&gt; is greater than &lt;/span&gt;&lt;code&gt;&lt;span&gt;len(s)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, use &lt;/span&gt;&lt;code&gt;&lt;span&gt;len(s)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. If &lt;em&gt;i&lt;/em&gt; is omitted or &lt;/span&gt;&lt;code&gt;&lt;span&gt;None&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, use &lt;/span&gt;&lt;code&gt;&lt;span&gt;0&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. If &lt;em&gt;j&lt;/em&gt; is omitted or &lt;/span&gt;&lt;code&gt;&lt;span&gt;None&lt;/span&gt;&lt;/code&gt;&lt;span&gt;, use &lt;/span&gt;&lt;code&gt;&lt;span&gt;len(s)&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. If &lt;em&gt;i&lt;/em&gt; is greater than or equal to &lt;em&gt;j&lt;/em&gt;, the slice is empty.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当左或右索引值大于序列的长度值时，就用长度值作为该索引值；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当左索引值缺省或者为 None 时，就用 0 作为左索引值；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当右索引值缺省或者为 None 时，就用序列长度值作为右索引值；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当左索引值大于等于右索引值时，切片结果为空对象。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对照上面的例子，可以得到：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li = [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li[&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;]  &lt;span&gt;# 等价于 li[1:2]&lt;/span&gt;&lt;br/&gt;[&lt;span&gt;2&lt;/span&gt;]&lt;br/&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;li[&lt;span&gt;5&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;]  &lt;span&gt;# 等价于 li[2:2]&lt;/span&gt;&lt;br/&gt;[]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;归结起来一句话：Python 解释器把可能导致索引越界的操作给屏蔽了，你的写法可以很自由，但是最终的结果会被死死限制在合法的索引区间内。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于这个现象，我其实是有点疑惑的，为什么 Python 不直接报索引越界呢，为什么要修正切片的边界值，为什么一定要返回一个值呢，即便这个值可能是个空序列？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们使用“li[5:6]”时，至少在字面意义上想表达的是“取出索引从 5 到 6 所对应的值”，就像是在说“取出书架上从左往右数的第 6 和 7 本书”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果程序是如实地遵照我们的指令的话，它就应该报错，就应该说：对不起，书架上的书不够数。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实话说，我并没有查到这方面的解释，这篇文章也不是要给大家科普 Python  在设计上有什么独到的见解。恰恰相反，这篇文章的主要目的之一是希望得到大家的回复解答。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Go 语言中，遇到同样的场景时，它的做法是报错“runtime error: slice bounds out of range”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Rust 语言中，遇到同样的场景时，它的做法是报错“byte index 5 is out of bounds of ......”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在其它支持切片语法的语言中，也许还有跟 Python 一样的设计。但是，我还不知道有没有（学识浅薄）……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，继续回到标题中的问题“Python 的切片为什么不会索引越界”。我其实想问的问题有两个：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当切片语法中的索引超出边界时，为什么 Python 还能返回结果，返回结果的计算原理是什么？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为什么 Python 的切片语法要允许索引超出边界呢，为什么不设计成抛出索引错误？&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第一个问题的回答，官方文档已经写得很明白了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第二个问题，本文暂时没有答案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也许我很快就能找到答案，但是，也可能需要很久。不管如何，本文先到此为止了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你喜欢研究 Python 设计上的小细节，感兴趣探求“为什么”问题的解答，欢迎关注“Python为什么”系列文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;推荐阅读最受大家喜欢的往期话题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（1）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247485664&amp;amp;idx=1&amp;amp;sn=0ee98e223efeb5c83641d2ff15e0f79a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 为什么推荐蛇形命名法？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（2）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247485871&amp;amp;idx=1&amp;amp;sn=d8a373ae45d3fe2464a325d087e6a94b&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 为什么用 # 号作注释符？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（3）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247486813&amp;amp;idx=1&amp;amp;sn=2e45a6491ead2a0a1c9fe60d8b864db3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 之父为什么嫌弃 lambda 匿名函数？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（4）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247486955&amp;amp;idx=1&amp;amp;sn=0dfa7c8c7e842f05a3a954469bb0cd62&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 为什么不支持 switch 语句？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（5）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247487079&amp;amp;idx=1&amp;amp;sn=bc2472de8ac0a0631d3908d87676bc64&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 疑难问题：[] 与 list() 哪个快？为什么快？快多少呢？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;（6）&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUyOTk2MTcwNg==&amp;amp;mid=2247485677&amp;amp;idx=1&amp;amp;sn=8bc7f9b2ddd2bfc8f3a1dc8e0404557a&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;Python 为什么不支持 i++ 自增语法，不提供 ++ 操作符？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文属于“Python为什么”系列（Python猫出品），该系列主要关注 Python 的语法、设计和发展等话题，以一个个“为什么”式的问题为切入点，试着展现 Python 的迷人魅力。所有文章将会归档在 Github 上，项目地址：&lt;span&gt;https://github.com/chinesehuazhou/python-whydo&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3bd5150bc428d92a99132017e46c3b7a</guid>
<title>123 python|第一部分：python核心（ 七）函数下</title>
<link>https://toutiao.io/k/yqmn53g</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言：&lt;span&gt;&lt;strong&gt;&lt;span&gt;今天的内容是python核心的最后一个模块——&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;函数（下）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;，本篇文章将从&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基础语法、函数参数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这两&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;个&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;部分来进行学习。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;                        &lt;br mpa-from-tpl=&quot;t&quot; data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-type=&quot;png&quot; data-w=&quot;30&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZcWNHRSIjJGs9bvuzwV9GxaCvA4ic5qN3EhBUUSmSLdmc9YTk9M815IRRFboPVT3Klpyd0bCVEdIsgn7p6ue1Zg/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;&lt;span&gt;06 函数下&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.4  基础语法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUO54LuJbh78tMMYyiav6tM98N9ouoQQTft4O3IWh4GbXmy4DLUYM3ECeaqyg9U36gDRH7rNrjqlvA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）定义函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;（1）语法：&lt;/p&gt;&lt;p&gt;def 函数名（形式参数）:&lt;/p&gt;&lt;p&gt;        函数体&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6526946107784432&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXVAt9AgSalGsBly2q0S6qKY6yiccBmdt5ibT4TYTa5mbmGicS5no0icJY0PrwiaGgD3hlEbdiccQALeTiaFg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1002&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;函数基础语法示例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）调用函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;（1）语法：函数名（实际参数）&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    定义一个吃瓜函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    :return: str类型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;蕾神之锤第一波！&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;宏宏:爸爸救我～&#x27;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;result = eat_melon()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(result)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3）返回值&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;（1）语法：return 数据&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon02&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    定义一个吃瓜函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    :return: None&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;蕾神之锤第二波！&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;result = eat_melon02()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;print(result) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon03&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    定义一个吃瓜函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    :return: str类型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;蕾神之锤第三波！&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;yumi:报警了！&#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;蕾神之锤第四波！&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon03()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon04&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    定义一个吃瓜函数&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    :return: str类型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                print(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;蕾神：三点道歉！&#x27;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;宏宏:孩子救我！&#x27;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon04()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.5 函数参数&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.027777777777777776&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uyZsSl2gvXUO54LuJbh78tMMYyiav6tM9jn6yFFic11B0vQhibEicFyiariaZf5bK51KJpPAgasmPLgL01e3Ulr4ibTzQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;1）参数分类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;python函数中的参数分为两类，分别是形式参数和实际参数。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot;&gt;&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;形参&lt;span&gt;parameter&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;实参argument&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;定义&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;在定义函数名和&lt;/span&gt;&lt;span&gt;函数体&lt;/span&gt;&lt;span&gt;&lt;span&gt;的时候使用的参数,目的是用来接收调用该函数时传入的参数&lt;/span&gt;。&lt;span&gt;不是实际存在的变量，又称为&lt;/span&gt;&lt;/span&gt;&lt;span&gt;虚拟变量&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;在调用时传递给函数的参数，即传递给&lt;/span&gt;&lt;span&gt;被调用函数&lt;/span&gt;&lt;span&gt;的值。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;区别&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;本质是一个名字，不占用内存空间&lt;/span&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot;&gt;&lt;span&gt;本质是一个变量，已经占用内存空间。&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2）参数传递&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在python中变量是没有类型的，一切都是对象，对象才有类型，对象的类型分为可变对象类型&lt;span&gt;（类似c++&lt;/span&gt;&lt;span&gt;中的引用传递）&lt;/span&gt;和不可变对象类型（类似c++中的值传递）。&lt;/p&gt;&lt;p&gt;注：args:参数；kwargs:关键字参数&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; rowspan=&quot;1&quot; colspan=&quot;3&quot; align=&quot;center&quot;&gt;&lt;strong&gt;形参分类（5种）：约束、限制实际参数&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;类型&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;要求&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;语法&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;位置形参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;实参必填&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;def 函数名（参数1，参数2）&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;默认形参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;实参可选&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;def 函数名（参数1=数据，参数2=数据）&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;星号元组形参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;将多个位置实参合并为一个元组&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;def 函数名（*args）&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;双星号字典形参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;将多个关键字实参合并为一个字典&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;def 函数名（**kwargs）&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;center&quot;&gt;&lt;strong&gt;命名关键字形参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;center&quot;&gt;必须是关键字实参&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; colspan=&quot;1&quot; rowspan=&quot;1&quot; align=&quot;center&quot;&gt;&lt;p&gt;def 函数名（*args，参数1）&lt;/p&gt;&lt;p&gt;def 函数名（*，参数1）&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;table interlaced=&quot;enabled&quot;&gt;&lt;tbody&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot; rowspan=&quot;1&quot; colspan=&quot;3&quot;&gt;&lt;strong&gt;实参分类（4种）：和形参对应&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;类型&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;要求&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;语法&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;位置实参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;按顺序&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;函数名（数据1，数据2）&lt;br/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;序列实参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;一序列拆多元素&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;函数名（*序列）&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-single&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;关键字实参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;按名字&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;函数名（参数1=数据&lt;/span&gt;&lt;span&gt;，参数2=数据&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;ue-table-interlace-color-double&quot;&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;strong&gt;字典实参&lt;br/&gt;&lt;/strong&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;一字典拆多元素&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;middle&quot; align=&quot;center&quot;&gt;&lt;span&gt;函数名（**字典）&lt;/span&gt;&lt;span/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;python&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon01&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a,b,c)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(a,b,c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon01(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;瓜&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;保熟嘛&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__keyword&quot;&gt;True&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon02&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;&quot;&lt;/span&gt;,b=True,c=&lt;span class=&quot;code-snippet__number&quot;&gt;0.0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(a,b,c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon02()  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon02(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;今天有瓜嘛？&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon02(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;今天还有瓜嘛？&quot;&lt;/span&gt;,bool(&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon02(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;吃吐了！&quot;&lt;/span&gt;,c=&lt;span class=&quot;code-snippet__number&quot;&gt;10086&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon03&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(*args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(args)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon03() &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon03(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;年底&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;冲&quot;&lt;/span&gt;,&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;kpi&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon04&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(**kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(kwargs)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon04(name=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;宏宏&quot;&lt;/span&gt;,performance=&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;2亿&quot;&lt;/span&gt;)  &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon05&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a,b,c)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(a)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(b)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(c)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;list05 = [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;tuple05 = (&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;str05 = &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;瓜熟了&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon05(*list05)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon05(*tuple05)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon05(*str05)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;dict05 = {&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;a&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;蹲&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;b&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;一&quot;&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;c&quot;&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;个&quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon05(**dict05) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon06&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(*args, a=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(args)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(a)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon06(&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;冲&quot;&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;eat_melon07&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(a=&lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;,*, b=&lt;span class=&quot;code-snippet__number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    print(a)&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;eat_melon07(&lt;span class=&quot;code-snippet__number&quot;&gt;666&lt;/span&gt;) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.945&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXVAt9AgSalGsBly2q0S6qKYicnQDgLa9c958tUefado0d4m4iarOQDMibNg7b2MmVGjOFNy6oVQnYNsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.12&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/U9kKudHzsK3W5c0NRAdWnuRVSW6XQyGvg6OGgAx0tyceatfwtlSTTwQN8GvP155mZttbHucmWyonfEPlOiamy9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;350&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot; data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.0859375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/JrRY60XUiczCB0aAKusfQXhclcbPLWbWc64icUBDfxMM47JVqSw3IOFHpry1wBXo1ryBDcXMIAWicGppjb6JJ3RCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;[1] &lt;span&gt;Python之可变参数，*参数，**参数，以及传入*参数，**参数解包，*args，**kwargs的理解&lt;/span&gt;&lt;/p&gt;&lt;p&gt;https://blog.csdn.net/cadi2011/article/details/84871401&lt;/p&gt;&lt;h1&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;花样早餐展位&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/uyZsSl2gvXVAt9AgSalGsBly2q0S6qKYUvJETSOEeBk2CNX130ia7VTepibiaOu0Aib2SZhvgibgtkocf1hzVMOfoyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>58870effcf72ab1d3add6876aa93bdc9</guid>
<title>locust python实现</title>
<link>https://toutiao.io/k/6ibht53</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;content custom&quot;&gt;&lt;h1 id=&quot;使用locust-in-python-介绍、关联变量和基本断言&quot;&gt;&lt;a href=&quot;#使用locust-in-python-介绍、关联变量和基本断言&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 使用locust in python:介绍、关联变量和基本断言&lt;/h1&gt; &lt;p&gt;Locust 是一个很好的开源负载测试工具，可以为有 Python 经验的开发人员提供测试，因为测试可以作为代码创建。我们在之前的一些文章中已经讨论过这个问题。但是如果你从来没有用过它呢？在这篇文章中，我们将向你展示如何使用这个性能测试工具开始你的第一步，通过展示一个用 Python 开发的基本工作流程的例子，一个高级的工作流程，以及如何关联贵重物品和断言你的脚。&lt;/p&gt; &lt;h2 id=&quot;开始-安装-python&quot;&gt;&lt;a href=&quot;#开始-安装-python&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 开始: 安装 Python&lt;/h2&gt; &lt;p&gt;为了运行 Locust，你需要安装 Python。如果这不是你的情况，我们将留给你一个链接下载它在这里。然后，你所要做的就是运行以下命令:&lt;/p&gt; &lt;p&gt;pip3 install locust&lt;/p&gt; &lt;h2 id=&quot;从-locust-gui-脚本和执行负载测试&quot;&gt;&lt;a href=&quot;#从-locust-gui-脚本和执行负载测试&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 从 Locust GUI 脚本和执行负载测试&lt;/h2&gt; &lt;p&gt;下一步是为名为 locustfile.py 的脚本创建一个文件。在这个文件中，我们将定义在负载测试中执行的 HTTP 请求。使用该脚本的文件名使 Locust 能够自动找到该文件。(如果要为文件使用另一个名称，在执行时需要添加参数 -f 和文件名。我将在下面向你展示。&lt;/p&gt; &lt;p&gt;在这个例子中，我们将加载测试站点的 https://www.demoblaze.com/。&lt;/p&gt; &lt;h3 id=&quot;创建一个基本脚本&quot;&gt;&lt;a href=&quot;#创建一个基本脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 创建一个基本脚本&lt;/h3&gt; &lt;p&gt;首先，我们将编写一个脚本，调用 demoblaze 主页，如下所示:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;from locust import HttpUser, task
            
class User(HttpUser):
    @task
    def mainPage(self):
        self.client.get(&quot;/&quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，脚本中没有指定被测试站点的 url。相反，它是在运行测试时从 UI 指定的。
Locust 将只在 decorator@任务中运行函数，因此我们必须记住添加它。对于定义了多个任务的情况，默认情况下它们将随机执行。&lt;/p&gt; &lt;h3 id=&quot;running-the-script-2-运行脚本&quot;&gt;&lt;a href=&quot;#running-the-script-2-运行脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; Running the Script 2. 运行脚本&lt;/h3&gt; &lt;p&gt;为了运行这个测试，我们需要从命令行执行脚本目录中的 locust 命令，这将启动端口8089上的 web 用户界面。只需在浏览器上导航到 http://localhost:8089地图就可以访问它。&lt;/p&gt; &lt;p&gt;注意: 如果您在另一个程序使用端口时得到一个错误，您可以使用 locust 命令 -- web-port [ port ]更改它。正如我上面提到的，如果您想运行一个不同名称的脚本，可以执行 locust-f [ file name ]。&lt;/p&gt; &lt;p&gt;用户的数量，每秒启动的用户数量和主机(测试中的 URL)可以从 Locust 的 web 用户界面中选择。Locust 将使用脚本中的路径和这里指定的主机为每个请求创建完整的 url。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/3C_q1XK49SNSd2iJ5UhxoYJXWgFC8KL74gI3MA4bUqx9_pxPesM7zX_K3QgVzivG8GTkF6NdRewdO-soLcM8nuKCT_JPXTXaaoqe5-zszX-L4XI-ZExQKUqvsoGv2OAgct20acyX&quot; alt=&quot;&quot;/&gt;
现在你可以通过点击 Start swarming 按钮来运行测试，浏览器会显示一个如下图所示的仪表盘:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/517zhtWrs-ygVZYpRPD-RLrSqYulCWmDnQL6EcQwXETo2-k7ClyLUBxl1JiGzZ2BPI0dq3gpzZA1__jhdJ6wdzlqRNAMpGx1bLcmFawlUB8U9SIZxGRni9qjyBBZDCwjmHUhGiAc&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;在这个仪表板中，我们将看到一个报告，其中包括执行的请求数量、失败请求数量、90% 以及其他实时统计信息。默认情况下，虚拟用户将继续运行，直到测试停止。&lt;/p&gt; &lt;p&gt;如果你不想使用 web UI 来运行脚本，你可以运行以下命令:&lt;/p&gt; &lt;p&gt;locust --headless -u 1 -r 1 -H https://www.demoblaze.com&lt;/p&gt; &lt;p&gt;其中 -u 指定用户数,-r 表示产生率,-h 表示主机。&lt;/p&gt; &lt;h3 id=&quot;创建更高级的脚本&quot;&gt;&lt;a href=&quot;#创建更高级的脚本&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 创建更高级的脚本&lt;/h3&gt; &lt;p&gt;现在我们了解了如何创建和运行基本测试，接下来让我们用更复杂的工作流来做一个测试。&lt;/p&gt; &lt;p&gt;这个工作流程包括4个步骤:&lt;/p&gt; &lt;p&gt;进入网站
登录
向购物车中添加产品
提交购物车&lt;/p&gt; &lt;p&gt;一旦我们获得了工作流中每个步骤的 HTTP 请求，我们就可以为每个用户操作创建一个方法。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;from locust import HttpUser, SequentialTaskSet, task, between
            
class User(HttpUser):    
    @task
    class SequenceOfTasks(SequentialTaskSet):
        wait_time = between(1, 5)
        @task
        def mainPage(self):
            self.client.get(&quot;/&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
        @task
        def login(self):
            self.client.options(&quot;https://api.demoblaze.com/login&quot;)
            self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})            
        @task
        def clickProduct(self):
            self.client.get(&quot;/prod.html?idp_=1&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
        @task
        def addToCart(self):
            self.client.options(&quot;https://api.demoblaze.com/addtocart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/addtocart&quot;,json={&quot;id&quot;:&quot;fb3d5d23-f88c-80d9-a8de-32f1b6034bfd&quot;,&quot;cookie&quot;:&quot;YWFhYTE2MzA5NDU=&quot;,&quot;prod_id&quot;:1,&quot;flag&quot;:&#x27;true&#x27;})
        @task 
        def viewCart(self):
            self.client.get(&quot;/cart.html&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/viewcart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,json={&quot;cookie&quot;:&quot;YWFhYTE2MzA5NDU=&quot;,&quot;flag&quot;:&#x27;true&#x27;})
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:&quot;YWFhYTE2MzA5NDU=&quot;})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如您所看到的，所有方法都使用 SequentialTaskSet 包含在类中，因此它们可以按照声明的相同顺序执行。&lt;/p&gt; &lt;p&gt;另外，通过使用 wait _ time，我们可以在任务之间添加一个暂停。在这种情况下，是1到5秒之间的随机停顿。&lt;/p&gt; &lt;p&gt;您还会注意到，对 API 的请求是使用完整的 URL 编写的，因为 Locust web 用户界面只允许在 host 字段中使用一个 URL。&lt;/p&gt; &lt;h3 id=&quot;相关变量&quot;&gt;&lt;a href=&quot;#相关变量&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 相关变量&lt;/h3&gt; &lt;p&gt;下一步是将硬编码令牌关联起来。关联动态的参数非常重要，我们知道这个标记在用户每次登录时都会发生变化。令牌可能过期，如果没有将其参数化，脚本就会停止工作。&lt;/p&gt; &lt;p&gt;通过分析 HTTP 请求工作流，我们可以看到可以从/login 响应中提取/check post 中发送的令牌。然后，我们可以将它保存到一个变量中，并在以下所有需要它的请求中使用它。&lt;/p&gt; &lt;p&gt;响应的标记格式如下:&lt;/p&gt; &lt;p&gt;&quot;Auth_token: YWFhYTE2MzA1ODg=&quot;
因此可以使用下面的正则表达式来提取它:&lt;/p&gt; &lt;p&gt;&quot;Auth_token: (.+?)&quot;
接下来，需要导入模块 re，并使用 match 方法将提取的值保存到变量中。&lt;/p&gt; &lt;p&gt;因此，为了从响应中提取标记，我们首先保存对变量的响应，如下所示:&lt;/p&gt; &lt;p&gt;response = self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})&lt;br/&gt;
现在我们可以定义一个全局变量并使用正则表达式提取标记。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;global token 
  token = re.match(&quot;\&quot;Auth_token: (.+?)\&quot;&quot;,response.text)[1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以在以下请求中使用该变量&lt;/p&gt; &lt;p&gt;self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token}
这就是登录和点击产品交易的样子:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;@task
        def login(self):
            self.client.options(&quot;https://api.demoblaze.com/login&quot;)
            response = self.client.post(&quot;https://api.demoblaze.com/login&quot;,json={&quot;username&quot;:&quot;aaaa&quot;,&quot;password&quot;:&quot;YWFhYQ==&quot;})
            global token 
            token = re.match(&quot;\&quot;Auth_token: (.+?)\&quot;&quot;,response.text)[1]
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.get(&quot;https://api.demoblaze.com/entries&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})            
        @task
        def clickProduct(self):
            self.client.get(&quot;/prod.html?idp_=1&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意: 在这个例子中，我们只使用了一个用户。如果你想学习如何在多个用户中运行脚本，你可以查看这篇文章。&lt;/p&gt; &lt;p&gt;https://www.blazemeter.com/blog/how-to-run-locust-with-different-users&lt;/p&gt; &lt;h3 id=&quot;使用断言&quot;&gt;&lt;a href=&quot;#使用断言&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 使用断言&lt;/h3&gt; &lt;p&gt;现在，我将向您展示如何添加一个简单的断言来验证添加到购物车中的产品是否被正确添加。&lt;/p&gt; &lt;p&gt;Locust 没有很多内置功能，但是使用 Python 可以轻松地添加自定义功能。&lt;/p&gt; &lt;p&gt;Failure (“ Error message”)可用于将请求标记为 failed。为了让断言正常工作，这个函数应该在 if 子句中使用，并且应该添加 catch _ response 参数来验证响应，如下所示。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;@task 
        def viewCart(self):
            self.client.get(&quot;/cart.html&quot;)
            self.client.options(&quot;https://api.demoblaze.com/check&quot;)
            self.client.options(&quot;https://api.demoblaze.com/viewcart&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            with self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}) as response:
                if &#x27;&quot;prod_id&quot;:1&#x27; not in response.text:
                    response.failure(&quot;Assert failure, response does not contain expected prod_id&quot;)
            self.client.options(&quot;https://api.demoblaze.com/view&quot;)
            self.client.post(&quot;https://api.demoblaze.com/check&quot;,json={&quot;token&quot;:token})
            self.client.post(&quot;https://api.demoblaze.com/view&quot;,json={&quot;id&quot;:&quot;1&quot;})
            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们运行测试，我们可以看到它没有错误。但是，我们如何知道这种主张是否有效呢？让我们将产品 id 更改为响应中不存在的 id。&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;with self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}) as response:
                if &#x27;&quot;prod_id&quot;:1234&#x27; not in response.text:
                    response.failure(&quot;Assert failure, response does not contain expected prod_id&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当再次执行测试时,/viewcart POST 将失败，并且定义的错误消息可以在 Failures 选项卡中看到。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/AtBXDZPI6KkPtLREktViG22DC1xfj3reLvGUrO_KpEbJi4QOXVRTLwNWC4BNOO4_VDGFAGFrvhPQxNZ_fpLXhR3RlIuBb0ZkOy4iHSuGknf_zG3_fmB-GigSX6KHeKXqsSxANvQN&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/VKM3V3gWA0pNh5qPbCm-6QXnuW37geWbPAxlJR2BgHH_P5_wkeaTeh0cnN_frc1kTb0h2HXz_C0Mvm_FKgNkiufHKlNxZx_7IN3oWX4iK0y_E_CfqfgKK4UemJloJFgr1ZTumAmb&quot; alt=&quot;&quot;/&gt;&lt;/p&gt; &lt;p&gt;如果你要使用多个断言，最好创建一个函数，避免重写类似的代码，比如这个:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;def assertContains(response,text):
    with response as r:
        if text not in r.text:
            r.failure(&quot;Expected &quot;+ response.text + &quot; to contain &quot;+ text)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以像下面这样调用它，每次你想用文本做一个断言:&lt;/p&gt; &lt;div class=&quot;language- extra-class&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code&gt;            assertContains(self.client.post(&quot;https://api.demoblaze.com/viewcart&quot;,catch_response=True,json={&quot;cookie&quot;:token,&quot;flag&quot;:&#x27;true&#x27;}),&#x27;&quot;prod_id&quot;:1&#x27;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦你完成locust脚本，你可以运行它在 BlazeMeter 的规模，集成在 CI/CD 和看到先进的报告。现在就开始。&lt;/p&gt; &lt;h3 id=&quot;author&quot;&gt;&lt;a href=&quot;#author&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; author&lt;/h3&gt; &lt;p&gt;石头 磊哥 seven 随便叫&lt;/p&gt; &lt;h3 id=&quot;company&quot;&gt;&lt;a href=&quot;#company&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; company&lt;/h3&gt; &lt;p&gt;HSBC
大家好，我已经加入了HSBC&lt;/p&gt; &lt;h3 id=&quot;roles&quot;&gt;&lt;a href=&quot;#roles&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; roles&lt;/h3&gt; &lt;p&gt;QA（营生） dev（front-end dev 兴趣爱好）&lt;/p&gt; &lt;h3 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; 联系方式&lt;/h3&gt; &lt;p&gt;如果想转载或者高薪挖我 请直接联系我 哈哈&lt;/p&gt; &lt;h4 id=&quot;wechat&quot;&gt;&lt;a href=&quot;#wechat&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; wechat:&lt;/h4&gt; &lt;p&gt;qileiwangnan&lt;/p&gt; &lt;h4 id=&quot;email&quot;&gt;&lt;a href=&quot;#email&quot; aria-hidden=&quot;true&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt; email:&lt;/h4&gt; &lt;p&gt;qileilove@gmail.com&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>