<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>fa14b4aa6a5fddcaf2e489ea939e525f</guid>
<title>项目中的富文本编辑器该如何选择？</title>
<link>https://toutiao.io/k/1pn2akj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entryContent&quot;&gt;&amp;#13;
        &lt;p&gt;项目中经常需要用到富文本编辑器的时候，而常见的富文本编辑器都有哪些？该如何选择？&lt;/p&gt;
&lt;p&gt;先看看市面上都有哪些可用的富文本编辑器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.tiny.cloud%2F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyMCE&lt;/a&gt;（插件式的，支持 &lt;code&gt;Vue&lt;/code&gt;，&lt;code&gt;React&lt;/code&gt;，&lt;code&gt;Angular&lt;/code&gt; 框架）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.wangeditor.com%2F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wangEditor&lt;/a&gt;（Typescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费，支持 &lt;code&gt;JS&lt;/code&gt; 直接引入使用，或者 &lt;code&gt;Vue2/3&lt;/code&gt;，&lt;code&gt;React&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Ffex.baidu.com%2Fueditor%2F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UEditor&lt;/a&gt;（开源，插件多，功能齐全，支持 &lt;code&gt;JS&lt;/code&gt; 直接引入使用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fckeditor.com%2F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CKEditor&lt;/a&gt;（模块化的简洁强大，丰富的框架支持，支持 &lt;code&gt;Vue&lt;/code&gt;，&lt;code&gt;React&lt;/code&gt;，&lt;code&gt;Angular&lt;/code&gt; ，&lt;code&gt;Jquery&lt;/code&gt;，&lt;code&gt;Electron&lt;/code&gt; 框架）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fquilljs.com%2F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Quill-editor&lt;/a&gt;（轻量、简洁，支持 &lt;code&gt;JS&lt;/code&gt; 直接引入使用，&lt;code&gt;Vue&lt;/code&gt;，&lt;code&gt;Angular&lt;/code&gt;，&lt;code&gt;React&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于项目中有一条必不可少的需求是可直接复制 &lt;code&gt;Excel&lt;/code&gt; 中内容和格式到编辑器中，分别研究了以上等编辑器，只有TinyMCE支持的比较好，因为它是插件式的，&lt;code&gt;powerpaste&lt;/code&gt; 很少地做到了这一点。&lt;/p&gt;
&lt;p&gt;然而问题又来了，我们开发喜欢使用开源免费的，这个插件是收费的功能。也就是说 TinyMCE 是半开源的，基础功能是免费的，而涉及到复杂功能则需要收费。&lt;/p&gt;
&lt;p&gt;正常的收费肯定就有破解的，或者网友共享出来的。通过搜索我们找到了一个低版本的 powerpaste 的插件 &lt;code&gt;4.8.2&lt;/code&gt;，以下就来介绍下使用过程。&lt;/p&gt;
&lt;h4&gt;安装依赖包&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;Vue&lt;/code&gt; 项目中使用，需要安装以下包文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sh language-sh&quot;&gt;&quot;dependencies&quot;: {&amp;#13;
    &quot;@tinymce/tinymce-vue&quot;: &quot;3.2.8&quot;,&amp;#13;
    &quot;tinymce&quot;: &quot;4.8.2&quot;,&amp;#13;
  }&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;封装组件&lt;/h4&gt;
&lt;p&gt;然后我们封装一个组件，在组件中引入该富文本组件，向外暴露参数可灵活使用。&lt;/p&gt;
&lt;p&gt;模板代码，只提供初始化 &lt;code&gt;init&lt;/code&gt; 参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tinymce-box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;editor&amp;#13;
      &lt;span class=&quot;token attr-name&quot;&gt;v-model&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myValue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;edit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token attr-name&quot;&gt;:init&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;init&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;editor&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后引入 &lt;code&gt;tinymce&lt;/code&gt; 和 &lt;code&gt;tinymce-vue&lt;/code&gt; 两个包文件，和主题文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  import tinymce from &#x27;tinymce/tinymce&#x27; //tinymce默认hidden，不引入不显示&amp;#13;
  import Editor from &#x27;@tinymce/tinymce-vue&#x27;&amp;#13;
  import &#x27;tinymce/themes/modern&#x27;&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;配置参数&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;data&lt;/code&gt; 里针对 &lt;code&gt;init&lt;/code&gt; 配置参数进行设置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-kotlin&quot;&gt;export default &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    components&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Editor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
        myValue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;token keyword&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
          menubar&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
          height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
          skin_url&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;/tinymce/skins/lightgray&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
          plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;code colorpicker image link lists preview table&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
          external_plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
            &lt;span class=&quot;token string&quot;&gt;&#x27;powerpaste&#x27;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;/tinymce/plugins/powerpaste/plugin.js&#x27;&lt;/span&gt;&amp;#13;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token function&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      tinymce&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;menubar&lt;/code&gt; 是控制菜单栏显示的，主要的功能是通过 &lt;code&gt;plugins&lt;/code&gt; 属性配置的，里面是字符串通过空格隔开。这里的 &lt;code&gt;external_plugins&lt;/code&gt; 属性是拓展插件需要的，不仅支持官方的插件，还支持自己独立开发的功能。&lt;/p&gt;
&lt;h4&gt;引入拓展插件&lt;/h4&gt;
&lt;p&gt;由于通过 &lt;code&gt;npm&lt;/code&gt; 安装是没有 &lt;code&gt;powerpaste&lt;/code&gt; 插件的，我们可以下载了放在 &lt;code&gt;public&lt;/code&gt; 目录下，通过 &lt;code&gt;external_plugins&lt;/code&gt; 来配置使用。&lt;/p&gt;

&lt;h4&gt;最后&lt;/h4&gt;
&lt;p&gt;验证效果，我们从左侧这样的一个 &lt;code&gt;Excel&lt;/code&gt; 文件中把表格复制出来，黏贴到富文本编辑器中&lt;/p&gt;

&lt;p&gt;会弹出提示，需不需要附带格式一起，于是我们选择保持格式。&lt;/p&gt;

&lt;p&gt;完整代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tinymce-box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;editor &lt;span class=&quot;token attr-name&quot;&gt;v-model&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myValue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;edit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token attr-name&quot;&gt;:init&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;init&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;editor&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  import tinymce from &#x27;tinymce/tinymce&#x27; //tinymce默认hidden，不引入不显示&amp;#13;
  import Editor from &#x27;@tinymce/tinymce-vue&#x27;&amp;#13;
  import &#x27;tinymce/themes/modern&#x27;&amp;#13;
&amp;#13;
  // 更多插件参考：https://www.tiny.cloud/docs/plugins/&amp;#13;
  import &#x27;tinymce/plugins/image&#x27;// 插入上传图片插件&amp;#13;
  import &#x27;tinymce/plugins/media&#x27;// 插入视频插件&amp;#13;
  import &#x27;tinymce/plugins/table&#x27;// 插入表格插件&amp;#13;
  import &quot;tinymce/plugins/link&quot;;&amp;#13;
  import &quot;tinymce/plugins/code&quot;;&amp;#13;
  import &#x27;tinymce/plugins/lists&#x27;// 列表插件&amp;#13;
  import &#x27;tinymce/plugins/wordcount&#x27;// 字数统计插件&amp;#13;
  import &quot;tinymce/plugins/colorpicker&quot;;&amp;#13;
  import &quot;tinymce/plugins/textcolor&quot;;&amp;#13;
  import &quot;tinymce/plugins/contextmenu&quot;;&amp;#13;
  import &quot;tinymce/plugins/preview&quot;&amp;#13;
  import &quot;tinymce/plugins/hr&quot;&amp;#13;
&amp;#13;
  export default {&amp;#13;
    components: { Editor },&amp;#13;
    data() {&amp;#13;
      return {&amp;#13;
        myValue: &#x27;&#x27;,&amp;#13;
        init: {&amp;#13;
          menubar: false,&amp;#13;
          height: 400,&amp;#13;
          skin_url: &#x27;/tinymce/skins/lightgray&#x27;,&amp;#13;
          toolbar: &#x27;undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help&#x27;,&amp;#13;
          plugins: &#x27;code colorpicker image link lists preview table&#x27;,&amp;#13;
          external_plugins: {&amp;#13;
            &#x27;powerpaste&#x27;: &#x27;/tinymce/plugins/powerpaste/plugin.js&#x27;&amp;#13;
          }&amp;#13;
        }&amp;#13;
      }&amp;#13;
    },&amp;#13;
    mounted() { // 这个是必要的，初始化的时候需要给init 一个空对象，不然报错&amp;#13;
      tinymce.init({})&amp;#13;
    }&amp;#13;
  }&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;插件可通过公众号“&lt;strong&gt;太空编程&lt;/strong&gt;”，回复 &lt;code&gt;powerpaste&lt;/code&gt; 获取&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-83 aligncenter&quot; src=&quot;http://wiki.i-fanr.com/wp-content/uploads/2021/02/1614247105-wechat-end.png&quot; alt=&quot;&quot; srcset=&quot;https://i-fanr.com/wp-content/uploads/2021/02/1614247105-wechat-end.png 546w, https://i-fanr.com/wp-content/uploads/2021/02/1614247105-wechat-end-300x180.png 300w&quot; sizes=&quot;(max-width: 546px) 100vw, 546px&quot;/&gt;&lt;/p&gt;
    &lt;/div&gt;&amp;#13;
&amp;#13;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>07d77de03d40ec095f791e701497ed0e</guid>
<title>如何建设一个云原生数据中心的网络？</title>
<link>https://toutiao.io/k/lijqznp</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIwODA2NjIxOA==&amp;amp;action=getalbum&amp;amp;album_id=2096604515050356739#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2096604515050356739&quot; data-tag_source=&quot;3&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#云原生&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;1个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-sourcepos=&quot;3:1-3:246&quot;&gt;干我们这行免不了要阅读大量资料，但这个行业又存在大量细分的领域，我们的时间是有限的，现代人能投入读书的时间更是少之又少，一个问题是我们到底应该深入阅读还是广泛阅读？&lt;/p&gt;&lt;p data-sourcepos=&quot;5:1-5:521&quot;&gt;最近读到 Shopify 某个开发团队前负责人 Simon Eskildsen 的采访[1]。Simon Eskildsen 只是一个高中生，却在 gap year 加入创业期的 Shopify 并跟随公司一同成长为技术管理者。没有任何学位的他表示，自己是靠着大量阅读来学习计算机和管理的知识。Simon Eskildsen 在采访中提到自己努力成为&lt;strong&gt;T 型人才&lt;/strong&gt;：&lt;strong&gt;在一个领域深入，但在多个领域有广博的知识面&lt;/strong&gt;。&lt;/p&gt;&lt;p data-sourcepos=&quot;7:1-7:290&quot;&gt;之前的文章中，我们聊过分布式计算、存储、协调等主题，唯独网络方面没有谈过。在《SRE：Google运维解密》中有一句令我影响深刻的话：“&lt;strong&gt;UNIX 系统内部细节和1～3层网络知识是Google最看重的两类额外的技术能力。&lt;/strong&gt;”&lt;/p&gt;&lt;p data-sourcepos=&quot;9:1-9:305&quot;&gt;本身我的网络知识也比较薄弱，恰好最近工作涉及一些网络架构相关的知识，于是从10月开始我停了下来，开始阅读一些现代数据中心网络架构的知识。读者可以和我一起思考，如果新的数据中心网络架构让你来设计，你会怎么做？&lt;/p&gt;&lt;p data-sourcepos=&quot;11:1-11:276&quot;&gt;这在 O&#x27;REILLY 的新书&lt;span&gt;&lt;em&gt;《Cloud Native Data Center Networking》&lt;/em&gt;&lt;/span&gt;（中文&lt;span&gt;《云原生数据中心网络&lt;/span&gt;》）中有解答。我本来读的原版，可是没法理解书中一些英文网络词汇。最近中文版出版，正好找来对照着读一下，并记此笔记。&lt;/p&gt;&lt;section&gt;&lt;mpcps frameborder=&quot;0&quot; class=&quot;js_editor_cps&quot; data-datakey=&quot;1634558612492_0.8647674634394305&quot; data-uid=&quot;1634558612490&quot; data-type=&quot;1&quot; data-product=&quot;&quot; data-templateid=&quot;list&quot; data-pid=&quot;29293590&quot; data-categoryid=&quot;3&quot; data-appuin=&quot;3084391334&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;99&quot; data-cropselx2=&quot;480&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;507&quot; data-fileid=&quot;100000749&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.75&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hBL5R2neMA37KBb455jdft4icXYIAeBOAYf5AeeepDWT4AnIUUGtyib4tlnuCnqu4UjYjokuCBx7V8jT4rn3uqMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;blockquote data-sourcepos=&quot;14:1-14:103&quot;&gt;&lt;p data-sourcepos=&quot;14:3-14:103&quot;&gt;本书作者 Dinesh G. Dutt 是 VXLAN 协议的设计者，在网络行业有着多年丰富经验。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-sourcepos=&quot;16:1-16:42&quot;&gt;为什么需要一个新的网络架构&lt;/h2&gt;&lt;p data-sourcepos=&quot;18:1-18:219&quot;&gt;如果应用一层不变，那我们就没有必要进行讨论了。我们谈云原生数据中心网络，那这个架构就是要为现代云原生应用而设计的。所以，现代云原生应用有什么特点？&lt;/p&gt;&lt;p data-sourcepos=&quot;20:1-20:85&quot;&gt;书中提到，“应用-网络”架构的演进经历了如下图的四个阶段。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000750&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.1348973607038124&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA37KBb455jdft4icXYIAeBOAKWOtoibZ2J8scgQh4vibwUqQQCQeFW04ftOPo9BOWZRt9qhWTWNg0l2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;682&quot;/&gt;&lt;/p&gt;&lt;ol data-sourcepos=&quot;25:1-37:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;单体应用&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;客户端-服务器(C/S)架构&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Web 应用&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;微服务&lt;/p&gt;&lt;/li&gt;&lt;p data-sourcepos=&quot;38:1-38:117&quot;&gt;可见，分布式应用发生巨变，网络被打了个措手不及。传统网络为什么“跟不上节奏”？&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000751&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.842560553633218&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA37KBb455jdft4icXYIAeBOAakJzZb014TmhT9DcmQ1599PIzOjlcCIjs2GjWU6fS0iak2aDaBSwiaQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;42:1-42:271&quot;&gt;上图是传统网络，这种网络设计被称为“接入-汇聚-核心（access-aggregation-core）”架构。计算机连接到接入交换机，之上是一对分布式的汇聚交换机，汇聚交换机连接到核心网络，从而使接入层连接到外网。&lt;/p&gt;&lt;p data-sourcepos=&quot;46:1-46:95&quot;&gt;“接入-汇聚-核心”网络严重依赖于&lt;strong&gt;桥接&lt;/strong&gt;（Bridging）技术，原因有三：&lt;/p&gt;&lt;ol data-sourcepos=&quot;47:1-50:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;数据转发芯片的出现，这种硬件技术最初仅支持桥接&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;企业专有的网络软件栈，除 IP 协议外还有别的协议&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;交换网络零配置的承诺，路由网络相对桥接网络来说很难配置，而人为配置错误不是导致网络故障的第一大原因，就是第二大原因&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-sourcepos=&quot;51:1-51:312&quot;&gt;&lt;p data-sourcepos=&quot;51:3-51:312&quot;&gt;路由和桥接的区别：桥接工作在 OSI 网络模型第二层即链路层，&lt;strong&gt;交换机或网桥&lt;/strong&gt;根据 MAC 地址来交换数据，链路层交换的是数据帧(frame)。路由工作在 OSI 第三层即网络层，&lt;strong&gt;路由器&lt;/strong&gt;根据 IP 地址来找到目标地址，网络层交换的是数据包。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-sourcepos=&quot;53:1-53:78&quot;&gt;尽管传统网络取得很大成功，但桥接网络依然有以下限制：&lt;/p&gt;&lt;ol data-sourcepos=&quot;52:1-55:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;广播风暴和生成树协议（STP）的影响&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;泛洪带来负担&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IP 层的冗余设计，为了使汇聚交换机高可用，需要支持两台交换机使用同一个IP地址，但同一时间只有一台路由器支持，为此又发明了 FHRP 协议来支持。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote data-sourcepos=&quot;56:1-56:415&quot;&gt;&lt;p data-sourcepos=&quot;56:3-56:415&quot;&gt;在转发网络中，每个数据包都携带两个 MAC 地址：源地址和目标地址。网桥会在自身的 MAC 地址表中查找目标 MAC 地址。如果不知道，它将数据包发送到除接收数据包的接口以外的所有其他接口。当网桥在自身的 MAC 地址表中找不到待转发数据包的目的 MAC 地址，而向所有端口发送该数据包的行为称为泛洪(flooding)。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-sourcepos=&quot;58:1-58:225&quot;&gt;“接入-汇聚-核心”很适合客户端-服务器应用架构这种南北向流量为主的模式，如今服务器-服务器架构越来越多，应用规模显著变大，“接入-汇聚-核心”存在以下问题：&lt;/p&gt;&lt;ol data-sourcepos=&quot;59:1-68:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;不可扩展性&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;复杂性。桥接网络需要很多协议支持：STP、FHRP、链路失效侦测、供应商私有协议（如 VTP）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;失效域（Failure Domain）。容易发生粗粒度的失效，比如：单个链路的失效造成带宽减半&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不可预测性。许多组件会导致网络变得不可预测，增加故障定位难度&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缺乏敏捷。云计算领域，不停地有租户使用资源或销毁资源，而 VLAN 需要网络中每个节点都正确配置了 VLAN 信息才能正常工作，添加或移除 VLAN 是一个费时费力的过程&lt;/p&gt;&lt;/li&gt;&lt;p data-sourcepos=&quot;69:1-69:132&quot;&gt;桥接技术的支持者没有放弃，针对这些问题提出了许多解决方案，但在当代企业数据中心少有使用。&lt;/p&gt;&lt;p data-sourcepos=&quot;71:1-71:110&quot;&gt;云原生数据中心基础设施想建立一个可大规模扩展的网络架构，Clos 就是这个架构。&lt;/p&gt;&lt;h2 data-sourcepos=&quot;73:1-73:14&quot;&gt;Clos 拓扑&lt;/h2&gt;&lt;p data-sourcepos=&quot;75:1-75:139&quot;&gt;Clos 拓扑结构以其发明者 Charles Clos 命名，如下图所示，该拓扑也称为 leaf-spine 拓扑（或 spine-leaf 架构）。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000752&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4126679462571977&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA37KBb455jdft4icXYIAeBOA8TWsXIQJdyqiaWPGqibbvLtOsAAmREunjTHYpFrJwwnicTKvBRWs2r3fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;521&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;79:1-79:12&quot;&gt;上图中：&lt;/p&gt;&lt;p data-sourcepos=&quot;83:1-83:197&quot;&gt;Clos 拓扑在任何两台服务器之间都有两条以上的路径，产生了一个高容量网络支持东西向流量。对比传统网络，Clos 架构还有着&lt;strong&gt;很好的水平扩展性&lt;/strong&gt;：&lt;/p&gt;&lt;ul data-sourcepos=&quot;84:1-86:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;增加 leaf 交换机和服务器来扩展系统容量&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;增加 spine 交换机扩展带宽&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-sourcepos=&quot;87:1-87:95&quot;&gt;而“接入-汇聚-核心”只能换成性能更强的汇聚交换机来进行垂直扩展。&lt;/p&gt;&lt;h3 data-sourcepos=&quot;89:1-89:30&quot;&gt;深入探讨 Clos 架构&lt;/h3&gt;&lt;p data-sourcepos=&quot;91:1-91:32&quot;&gt;Clos 架构还有以下特性：&lt;/p&gt;&lt;ol data-sourcepos=&quot;92:1-105:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;leaf、spine 可以使用同类、较小的交换机来构建网络&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;路由作为基本的互连模式&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;p&gt;Clos 收敛比&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;链路速率&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;一些现实的限制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;细粒度失效域&lt;/p&gt;&lt;/li&gt;&lt;ul data-sourcepos=&quot;102:5-105:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;如果有两个以上的 spine 交换机，单个链路故障不会带来灾难&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;leaf 到 spine 的一条链路故障，其余部分仍可以继续使用全部带宽，故障影响范围尽可能小&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;系统性的控制平面故障可能会影响整个网络，但不会出现”接入-汇聚-核心“网络中系统性故障（如广播风暴）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-sourcepos=&quot;106:1-106:21&quot;&gt;扩展 Clos 架构&lt;/h2&gt;&lt;p data-sourcepos=&quot;108:1-108:165&quot;&gt;如果你想要构建一个支持数万或数十万台服务器的超大数据中心，还要拓展出三层 Clos 拓扑，如下图所示，有两种扩展方法：&lt;/p&gt;&lt;p data-sourcepos=&quot;112:1-112:85&quot;&gt;拓展后的三层 Clos 拓扑最上层交换机称为“超级 spine 交换机”。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000753&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.019197207678883&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA37KBb455jdft4icXYIAeBOAjXG8UGlvZwj3nTSQYTmX1lOMQY17bxtQaIxHj0Vz8MZO1miaO8MYhnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;573&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;116:1-116:33&quot;&gt;两种模型的优缺点对比：&lt;/p&gt;&lt;h2 data-sourcepos=&quot;124:1-124:38&quot;&gt;Clos 拓扑的影响和最佳实践&lt;/h2&gt;&lt;p data-sourcepos=&quot;126:1-126:38&quot;&gt;Clos 拓扑结构带来如下影响：&lt;/p&gt;&lt;ol data-sourcepos=&quot;127:1-131:0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;重新思考故障和排错。交换机固定且单一，故障类型简单，可以直接替换故障交换机&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;布线。Clos 拓扑需要管理大量线缆，可以使用线缆验证技术：PTM 或 Ansible 来验证线缆&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;固定样式的交换机可以简化库存管理&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;由于存在大量交换机，不再可能手动配置网络，网络自动化必不可少&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos=&quot;132:1-132:29&quot;&gt;Clos 拓扑的一些最佳实践：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-fileid=&quot;100000754&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3702928870292887&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA37KBb455jdft4icXYIAeBOANVRIPeGPxBcwnLKoKhEWawLBElVSkW7ibuVcMsavFoeKGSYzcLUwnibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;478&quot;/&gt;&lt;/p&gt;&lt;p data-sourcepos=&quot;140:1-140:75&quot;&gt;书中提到，LinkedIn 和 Dropbox 就后悔使用不一致的交换机。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注我的公众号：&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIwODA2NjIxOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hBL5R2neMA0g3RQ9bRYaJib92ovwsSB9pPup1lt5cB24cJVJia1dc3Nr2kFSBHsJq5HL9DcLhoAGribSBvHU7ZzjA/0?wx_fmt=png&quot; data-nickname=&quot;多颗糖&quot; data-alias=&quot;duoketang&quot; data-signature=&quot;一名系统研究者的攀登之路&quot; data-from=&quot;1&quot;/&gt;&lt;span/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c44f65490a1f4e2d829e61873ae69930</guid>
<title>使用 MinDiff 框架减轻 ML 模型中的不公平偏见</title>
<link>https://toutiao.io/k/ygul097</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;p&gt;机器学习 (ML) 的负责任研发可以在帮助解决各种社会挑战方面发挥关键作用。在谷歌，我们的研究反映了我们的人工智能原则，从帮助保护患者免受用药错误和改进洪水预测模型，到展示解决产品中不公平偏见的方法，例如谷歌翻译，并为其他研究人员提供资源来做同样的事情。&lt;/p&gt;&lt;p&gt;负责任地应用机器学习的一大类是分类任务——将数据分类为标记类别的系统。在 Google，我们在整个产品中都使用此类模型来执行政策，从检测仇恨言论到适合年龄的内容过滤。虽然这些分类器具有重要的功能，但它们的构建方式也必须最大限度地减少对用户的不公平偏见。&lt;/p&gt;&lt;p&gt;今天，我们宣布发布MinDiff，这是TF 模型修复库中提供的一种新的正则化技术，用于在训练 ML 模型时有效且高效地减轻不公平的偏见。在这篇博文中，我们讨论了这项技术背后的研究，并解释了它如何解决 我们在将其纳入 Google 产品时所观察到的实际限制和要求。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;分类器中的不公平偏差&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;为了说明如何使用 MinDiff，请考虑一个产品策略分类器的示例，该分类器的任务是识别和删除可能被视为有毒的文本评论。一个挑战是确保分类器不会对来自特定用户组的提交产生不公平的偏见，这可能导致从这些组中错误地删除内容。&lt;/p&gt;&lt;p&gt;学术界为 ML 公平性奠定了坚实的理论基础，就不公平偏见的含义以及评估公平性的不同框架之间的紧张关系提供了广泛的观点。最常见的指标之一是机会均等，在我们的示例中，这意味着测量和寻求最小化组间误报率(FPR) 的差异。在上面的例子中，这意味着分类器不应该更可能错误地从一个组中删除安全评论而不是另一个。同样，分类器的假阴性率应该在组之间相等。也就是说，分类器不应该比对另一组更多地错过针对一组的有害评论。&lt;/p&gt;&lt;p&gt;当最终目标是改进产品时，重要的是能够将不公平偏见缓解措施扩展到许多模型。然而，这带来了许多挑战：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;稀疏的人口统计数据：关于机会平等的原始工作提出了一种针对该问题的后处理方法，包括在服务时间为每个用户组分配不同的分类器阈值以抵消模型的偏差。然而，在实践中这通常是不可能的，原因有很多，例如隐私政策。例如，人口统计数据通常由用户自行识别并选择加入，但有些用户会选择这样做，而其他用户可能会选择退出或删除数据。即使对于过程中的解决方案（即改变模型训练方式的方法），也需要假设大多数数据不会有相关的人口统计数据，因此需要有效地利用少数几个已知人口统计数据的例子。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;易用性：为了广泛采用任何技术，它应该很容易融入现有的模型架构，并且对超参数不高度敏感。虽然将 ML 公平原则纳入应用程序的早期方法利用了对抗性学习，但我们发现它在训练期间过于频繁地导致模型退化，这使得产品团队难以迭代并使新产品团队变得谨慎。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;质量：消除不公平偏差的方法也应该尽可能少地降低整体分类性能（例如，准确性）。由于缓解方法导致准确性的任何下降都可能导致审核模型允许更多有害评论，因此达到正确的平衡至关重要。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;em&gt;MinDiff 框架&lt;/em&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们在前几年迭代开发了 MinDiff 框架来满足这些设计要求。由于人口统计信息很少为人所知，因此我们使用过程中方法，其中模型的训练目标增加了一个专门针对消除偏差的目标。然后在具有已知人口统计信息的小数据样本上优化这个新目标。为了提高易用性，我们从对抗性训练切换到正则化框架，该框架会惩罚其预测与非有害示例的人口统计信息之间的统计依赖性。这鼓励模型在组间均衡错误率，例如，将无害示例分类为有毒示例。&lt;/p&gt;&lt;p&gt;有几种方法可以对预测和人口统计信息之间的这种依赖性进行编码。我们最初的 MinDiff 实现最小化了预测和人口统计组之间的相关性，这基本上优化了预测的平均值和方差在各组之间相等，即使之后分布仍然不同。此后，我们通过考虑最大平均差异(MMD) 损失进一步改进了MinDiff ，这更接近于优化独立于人口统计的预测分布。我们发现这种方法能够更好地消除偏差并保持模型准确性。&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100000361&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eG1jA7faiceEzyhGYuyc1yGuqzS5eyFViciayRe2EichQAjcFtAG8mVJGX4VVTOdjvfx3Qb2BZBd0DTDOqAJGDWhsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/p&gt;&lt;p&gt;迄今为止，我们已经在 Google 的多个分类器中启动了建模改进，以降低内容质量。我们经历了多次迭代，以开发一种强大、负责且可扩展的方法，解决研究挑战并实现广泛采用。&lt;/p&gt;&lt;p&gt;分类器错误率的差距是一组重要的不公平偏见，需要解决，但不是机器学习应用程序中出现的唯一问题。对于 ML 研究人员和从业者，我们希望这项工作可以进一步推进研究，以解决更广泛的不公平偏见类别，并开发可用于实际应用的方法。&lt;/p&gt;&lt;/ul&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>106d89aebef98ee2ab415031f8af66b1</guid>
<title>.NET 内存管理五大基础知识</title>
<link>https://toutiao.io/k/666x6u3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;h1&gt;.NET内存管理五大基础知识&lt;/h1&gt;&lt;h2&gt;1.小对象怎么处理的？&lt;/h2&gt;&lt;p&gt;小型.NET对象被分配到小型对象堆（SOH）上。其中有3种：第0代，第1代和第2代。对象根据其寿命向上移动。&lt;/p&gt;&lt;p&gt;将新对象放在Gen 0上。当Gen 0充满时，.NET垃圾收集器（GC）运行，处理不再需要的对象，并将其他所有内容移至Gen1。如果Gen 1充满，则GC再次运行，也可以将Gen 1中的对象移动到Gen 2中。&lt;/p&gt;&lt;p&gt;当Gen 2变满时，将发生GC完全运行。这将清除不需要的Gen 2对象，将Gen 1对象移至Gen 2，然后将Gen 0对象移至Gen 1，最后清除所有未引用的内容。每次运行GC之后，都会压缩受影响的堆，以将仍在使用的内存保持在一起。&lt;/p&gt;&lt;p&gt;这种代代相传的方法可确保事情高效运行-耗时的压缩过程仅在绝对必要时才会发生。&lt;/p&gt;&lt;p&gt;注意：如果您在Gen 2中看到大量的内存，则表明内存已被保留很长时间，并且可能存在内存问题。这是内存分析工具可以派上用场的地方。&lt;/p&gt;&lt;h2&gt;2.较大的对象会怎样？&lt;/h2&gt;&lt;p&gt;大于85 KB的对象被分配到大对象堆（LOH）。由于复制大块内存的开销，它们没有被压缩。当发生完整的GC时，未使用的LOH对象的地址范围将记录在可用空间分配表中。&lt;/p&gt;&lt;p&gt;分配新对象后，将在此可用空间表中检查足以容纳该对象的地址范围。如果存在，则将对象分配到那里，如果不存在，则将对象分配到下一个可用空间。&lt;/p&gt;&lt;p&gt;由于对象不太可能是空地址范围的确切大小，因此对象之间几乎总是会留有小块内存，从而导致碎片。如果这些块小于85 KB，则根本没有重用的可能性。因此，随着分配需求的增加，即使碎片空间仍然可用，也会保留新的段。&lt;/p&gt;&lt;p&gt;此外，当需要分配大对象时，.NET还是倾向于将对象附加到末尾，而不是运行昂贵的Gen 2 GC。这对性能有好处，但是是导致内存碎片的重要原因&lt;/p&gt;&lt;h2&gt;3.垃圾收集器可以在不同的模式下运行以优化性能&lt;/h2&gt;&lt;p&gt;.NET通过为GC提供多种模式来解决性能与堆效率之间的权衡问题。&lt;/p&gt;&lt;p&gt;工作站模式为用户提供了最大的响应速度，并减少了由于GC造成的暂停。它可以作为“并发”或“非并发”运行，指的是运行GC的线程。默认值为并发，它为GC使用单独的线程，因此应用程序可以在GC运行时继续执行。&lt;/p&gt;&lt;p&gt;服务器模式可为服务器环境提供最大的吞吐量，可伸缩性和性能。在服务器模式下，段大小和生成阈值通常比工作站模式大得多，这反映了对服务器的更高要求。&lt;/p&gt;&lt;p&gt;服务器模式在多个线程上并行运行垃圾回收，为每个逻辑处理器分配一个单独的SOH和LOH，以防止线程相互干扰。&lt;/p&gt;&lt;p&gt;.NET框架提供了一种交叉引用机制，因此对象仍然可以在堆之间相互引用。但是，由于应用程序响应能力不是服务器模式的直接目标，因此在GC期间，所有应用程序线程都将被挂起。&lt;/p&gt;&lt;h2&gt;4.引用不足会在性能和内存效率之间折衷&lt;/h2&gt;&lt;p&gt;弱对象引用了GC根的替代来源，使您可以保留对象，同时在GC需要时可以收集对象。它们是代码性能和内存效率之间的折衷。创建对象需要占用CPU时间，但保持加载状态需要占用内存。&lt;/p&gt;&lt;p&gt;弱引用特别适用于大型数据结构。例如，假设您有一个允许用户浏览大型数据结构的应用程序，他们可能会返回其中的一些数据。您可以将任何强引用转换为他们浏览的结构为弱引用。如果用户返回到这些结构，则可以使用它们，但如果没有，GC可以根据需要回收内存。&lt;/p&gt;&lt;h2&gt;5.对象固定可以创建在托管和非托管代码之间传递的引用&lt;/h2&gt;&lt;p&gt;.NET使用一种称为GCHandle的结构来跟踪堆对象。GCHandle可用于在托管域和非托管域之间传递对象引用，.NET维护一个GCHandles表以实现此目的。GCHandle有四种类型，包括固定的，用于将对象固定在内存中的特定地址。&lt;/p&gt;&lt;p&gt;对象固定的主要问题是它可能导致SOH碎片化。如果将对象固定在GC期间，则根据定义，该对象无法重定位。根据您使用固定的方式，它会降低压缩的效率，在堆中留下间隙。避免这种情况的最佳策略是在很短的时间内锁定，然后释放。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>37db9d31b56eb79ddea938d62d8a8706</guid>
<title>如何高效刷 LeetCode</title>
<link>https://toutiao.io/k/ws2do5o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;span class=&quot;RichText ztext CopyrightRichText-richText css-hnrfcf&quot; options=&quot;[object Object]&quot; itemprop=&quot;text&quot;&gt;&lt;h2 id=&quot;h_2177365491_0&quot; data-into-catalog-status=&quot;&quot;&gt;心理建设篇&lt;/h2&gt;&lt;p&gt;在讲述具体的方法之前，先要明白一件事。凡事都分『道』与『术』。本问题下面大部分回答介绍的都是『术』。而对于刷LeetCode这件事，无论你看到多少高明的的方法，如果你不能持之以恒，都没有用。所有在刷LeetCode这件事上，他的『道』就是：如何能持之以恒的保持刷题热情。我认为『道』更重要。我先谈一下这部分。&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_1&quot; data-into-catalog-status=&quot;&quot;&gt;寻找标尺，让进步可衡量&lt;/h3&gt;&lt;p&gt;为什么王者荣耀有段位，有青铜、白银、黄金。以我个人的经验来看，这些都是刺激你持续玩游戏的游戏机制。通过段位，彰显个人的实力，没错，装逼是人类进步的一大动力。同时也让进步可以衡量。刷LeetCode也是同样，一般刚开始我们会关注解决了多少道题。更进一步，我们需要关心自己的排名。LeetCode也有排名机制。每刷一道题，就前进一点点。可以每周给自己做一个记录，记一下自己的排名。让自己重视排名。逐渐的自己就会把积极性调动起来，想让自己的排名越来越高，就是打排位一样。&lt;/p&gt;&lt;p&gt;除了排名，你还可以每周记录一下&lt;b&gt;通过率。&lt;/b&gt;&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_2&quot; data-into-catalog-status=&quot;&quot;&gt;寻找小惊喜，给自己正反馈&lt;/h3&gt;&lt;p&gt;坚持做每日一题，LeetCode每天都有一道题，完成后，你的打卡日历就会勾上一个圈。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-4ff4085cc4284d82382f7274896ced6b_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;709&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-62841d2ea95c64d5723c118fe15667e7_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-4ff4085cc4284d82382f7274896ced6b_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;658&quot; data-rawheight=&quot;709&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-62841d2ea95c64d5723c118fe15667e7_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-4ff4085cc4284d82382f7274896ced6b_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-4ff4085cc4284d82382f7274896ced6b_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p&gt;如果打满一个月就会获得一个月度徽章。另外LeetCode有很多“学习计划”，每个学习计划完成后也会有一个徽章。我有段时间就喜欢收集徽章，为了收集这些小玩意，会刺激自己持续解题。其实和游戏里面也差不多。学会游戏化学习。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pica.zhimg.com/50/v2-06d7085bd091a82ba07c35ce9029feac_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;936&quot; data-rawheight=&quot;189&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-78b5ea39d29bd51501fafe96b6bbbb7e_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-06d7085bd091a82ba07c35ce9029feac_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;936&quot; data-rawheight=&quot;189&quot; data-default-watermark-src=&quot;https://pic3.zhimg.com/50/v2-78b5ea39d29bd51501fafe96b6bbbb7e_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-06d7085bd091a82ba07c35ce9029feac_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pica.zhimg.com/50/v2-06d7085bd091a82ba07c35ce9029feac_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_3&quot; data-into-catalog-status=&quot;&quot;&gt;不要死磕，学会放弃&lt;/h3&gt;&lt;p&gt;开始刷LeetCode感到吃力是正常的。我这里说的学会放弃，不是说放弃刷力扣，而是说碰到自己无法解决的题目，不要死磕。赶紧看一下题解去学习，这没有什么丢人的。每个人都是从这个阶段过来的。就比如小学生无法做出高中生的题目，并不是因为小学生笨，而是因为中间有很多知识，小学生没学过。对于算法而言，自然也是如此。靠自己死磕，是很难想到很多前辈科学家们总结出来的算法。这时候去看题解学习也不为过。&lt;/p&gt;&lt;p&gt;如果遇到特别难的题，看题解也不理解。也不用纠结。就隔着它。可以把题号记下来。过段时间再回顾。&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_4&quot; data-into-catalog-status=&quot;&quot;&gt;好记性不如烂笔头&lt;/h3&gt;&lt;p&gt;我是笔记强迫症患者……我现在刷LeetCode，每道做过的题，我都会记到Notion里。打上几个标签，方便回顾。记忆是有遗忘曲线的，不能因为你现在能做出一道题，就认为自己能永远做出来。小学时，老师就教导我们：&lt;/p&gt;&lt;blockquote&gt;好记性不如烂笔头&lt;/blockquote&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/50/v2-be3b36b257cbe2e34a133788d8f3f693_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1938&quot; data-rawheight=&quot;1194&quot; data-default-watermark-src=&quot;https://pic1.zhimg.com/50/v2-2fd8b5a9009e33b0ef4e999159780a69_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-be3b36b257cbe2e34a133788d8f3f693_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1938&quot; data-rawheight=&quot;1194&quot; data-default-watermark-src=&quot;https://pic1.zhimg.com/50/v2-2fd8b5a9009e33b0ef4e999159780a69_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-be3b36b257cbe2e34a133788d8f3f693_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic2.zhimg.com/50/v2-be3b36b257cbe2e34a133788d8f3f693_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;讲完『道』，我也谈一下我的『术』。我这里不对具体的算法和数据结构题型做解析了，我主要给你指路。&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;我伸手给你指路，希望你看见的是路，而不是我的手&lt;/b&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;h_2177365491_5&quot; data-into-catalog-status=&quot;&quot;&gt;刷题顺序篇&lt;/h2&gt;&lt;p&gt;当然我不建议从头按顺序刷，我分为“正排”刷题和“倒排”刷题，两种策略。&lt;/p&gt;&lt;p&gt;所谓“正排刷题”可以刷LeetCode上面的题单。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-7bd833f94705ad016aa7df711d131122_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;631&quot; data-rawheight=&quot;1083&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-7bc22ddfa13e873db0ba039316ec26c4_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-7bd833f94705ad016aa7df711d131122_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;631&quot; data-rawheight=&quot;1083&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-7bc22ddfa13e873db0ba039316ec26c4_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-7bd833f94705ad016aa7df711d131122_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-7bd833f94705ad016aa7df711d131122_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p&gt;我个人建议从《剑指Offer》开始刷。《剑指Offer》现有出了两册，在LeetCode上都有题单。建议从《剑指Offer》刷起，碰到不会的，可以看书中的讲解。&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;mcn-link-card&quot; data-mcn-id=&quot;1433578379710324736&quot;/&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;mcn-link-card&quot; data-mcn-id=&quot;1433578591381000192&quot;/&gt;&lt;p&gt;根据书来刷题，当你刷完一本书后，常见的题目类型几乎都覆盖到了。当然同一种类型的题目数不胜数，重要是培养一下各种题型大概的思路。这属于“正排”刷题。&lt;/p&gt;&lt;p&gt;“倒排”刷题，是打破常规，不根据题目类型或按照某种顺序来做题。玩的就是措手不及。比如坚持做&lt;b&gt;每日一题&lt;/b&gt;。坚持一个月你就会见到各种各样的题型，有的甚至很刁钻。方便查漏补缺。另外如果有信心的话，可以参加一下周赛，进一步给自己惊喜。&lt;/p&gt;&lt;h2 id=&quot;h_2177365491_6&quot; data-into-catalog-status=&quot;&quot;&gt;网站/APP使用篇&lt;/h2&gt;&lt;h3 id=&quot;h_2177365491_7&quot; data-into-catalog-status=&quot;&quot;&gt;自定义测试用例&lt;/h3&gt;&lt;p&gt;不要着急提交代码。多用测试用例自测。如果是提交之后发现某个case不过，调试的时候一定要在测试用例这里调试。不要用重复提交代码的方式调试。每次提交代码都会跑N多个case，时间慢。另外就是会降低你在LeetCode上的“通过率”&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-2c63c5e6f80eacc55e808ec74eb1b8df_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;893&quot; data-rawheight=&quot;417&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-e6d17fcaa87fc627ee635c82a6aba414_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pica.zhimg.com/v2-2c63c5e6f80eacc55e808ec74eb1b8df_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;893&quot; data-rawheight=&quot;417&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-e6d17fcaa87fc627ee635c82a6aba414_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pica.zhimg.com/v2-2c63c5e6f80eacc55e808ec74eb1b8df_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-2c63c5e6f80eacc55e808ec74eb1b8df_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;h3 id=&quot;h_2177365491_8&quot; data-into-catalog-status=&quot;&quot;&gt;高效安排刷题时间&lt;/h3&gt;&lt;p&gt;如果你是学生，那么恭喜你有一大把的时间用来刷题。但是如果你是已工作人士，则需要高效利用时间了。由于我经常做每日一题，而每日一题，是零点更新。有时候躺在床上没睡，就用力扣APP打开看一眼题目，如果题目不难，就直接用APP刷了。另外你也可以利用上下班通勤的时间、出去玩乘坐地铁、公交的时间来用手机看看题解，或者直接用手机刷。比如我坐长途车从家里回北京的路上就用手机刷过题。&lt;/p&gt;&lt;p&gt;手机刷题，其实官方APP，有很多编程语言中的特殊符号的候选功能，提升不少速度。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/50/v2-38d952f62f964c3d70392fc8d8f5bed3_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;1443&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-217862778bed21dfed649ba32a4820e8_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-38d952f62f964c3d70392fc8d8f5bed3_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;1443&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-217862778bed21dfed649ba32a4820e8_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-38d952f62f964c3d70392fc8d8f5bed3_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic3.zhimg.com/50/v2-38d952f62f964c3d70392fc8d8f5bed3_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p&gt;另外你可以给你的输入法用自定义，加入一些常用的代码。&lt;/p&gt;&lt;figure data-size=&quot;small&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/50/v2-1bfe4dba7115a5cd1e021f42bc4c1f1a_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;698&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-5b478c5285431ac108cde03896209037_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-1bfe4dba7115a5cd1e021f42bc4c1f1a_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;698&quot; data-default-watermark-src=&quot;https://pic2.zhimg.com/50/v2-5b478c5285431ac108cde03896209037_720w.jpg?source=1940ef5c&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-1bfe4dba7115a5cd1e021f42bc4c1f1a_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic3.zhimg.com/50/v2-1bfe4dba7115a5cd1e021f42bc4c1f1a_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;h2 id=&quot;h_2177365491_9&quot; data-into-catalog-status=&quot;&quot;&gt;Trick篇&lt;/h2&gt;&lt;h3 id=&quot;h_2177365491_10&quot; data-into-catalog-status=&quot;&quot;&gt;修改函数参数&lt;/h3&gt;&lt;p&gt;leetcode的参数名，有时候很长，你可以改名字，减少输入的字符数。当然正常在网站上刷题有补全功能。但是改一下名字，还是简化不少。另外就是有两个例外情况是没有补全的：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;手机刷题（力扣手机APP可以刷题，但是没有补全功能）&lt;/li&gt;&lt;li&gt;参加周赛（周赛IDE，无自动补全功能）&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;h_2177365491_11&quot; data-into-catalog-status=&quot;&quot;&gt;调用待补全函数自身&lt;/h3&gt;&lt;p&gt;如果函数的参数是等价的，但是你根据某种策略，把他们分出来差别。但是你不确定哪个参数是满足的。比如这道：415. 字符串相加&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/add-strings/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;力扣&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p&gt;官方给出的代码是这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;num1和num2在题目中含义是等价的。但是我们希望以长度长的那个num作为base，来叠加长度短的那个num。这样可以方便处理。你可以直接去判断长度，然后再搞两个变量出来。比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;num2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后让base再去加delta。。但其实没必要这么麻烦，直接这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 调用自身
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// num1长度 肯定大于等于num2
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#x27;0&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&#x27;0&#x27;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_12&quot; data-into-catalog-status=&quot;&quot;&gt;给解题函数增加默认值&lt;/h3&gt;&lt;p&gt;每道题，LeetCode都会给出一个待补全的函数，这个函数，你是可以增加默认值的。&lt;/p&gt;&lt;p&gt;对于某些递归的解法，可以少定义一个函数.&lt;/p&gt;&lt;h2 id=&quot;h_2177365491_13&quot; data-into-catalog-status=&quot;&quot;&gt;官方库提升刷题效率（C++）&lt;/h2&gt;&lt;p&gt;因为我是C++程序员所以下面就值介绍C++了。&lt;/p&gt;&lt;p&gt;一定要学好STL！&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_14&quot; data-into-catalog-status=&quot;&quot;&gt;swap替代手写交换&lt;/h3&gt;&lt;p&gt;不要在自己写三行式去写交换了。直接用swap。&lt;/p&gt;&lt;p&gt;针对链表的Node也使用哦。比如，226. 翻转二叉树：&lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/invert-binary-tree/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;力扣&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; * Definition for a binary tree node.
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; * struct TreeNode {
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; *     int val;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; *     TreeNode *left;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; *     TreeNode *right;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; * };
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mirrorTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mirrorTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mirrorTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_2177365491_15&quot; data-into-catalog-status=&quot;&quot;&gt;pair替代二元数据结构&lt;/h3&gt;&lt;p&gt;有时候我们可能需要一些临时的数据结构。如果这个数据结构只有两个成员变量，那么你大可不必定义出来一个struct或class。直接上pair！&lt;/p&gt;&lt;p&gt;比如这道：38. 外观数列&lt;br/&gt; &lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/count-and-say/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-text=&quot;力扣&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countAndSay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 直接用pair
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pair对emplace友好
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&#x27;0&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;pair还有其他好处，那就是它自带 operator&amp;lt; 比较运算符。如果你的自定义类型需要排序的话，那么pair就不需要你自己写这个比较函数了。而自定义类型则需要。&lt;/p&gt;&lt;p&gt;而且pair的构造函数可以直接接受first和second的值做参数。这对于emplace或者emplace_back都很友好！&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_16&quot; data-into-catalog-status=&quot;&quot;&gt;accumulate求数组的和&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_2177365491_17&quot; data-into-catalog-status=&quot;&quot;&gt;partial_sum 部分求和&lt;/h3&gt;&lt;p&gt;对于某些“前缀和”相关的题目，可以简化代码&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;partial_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back_inserter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;p class=&quot;ztext-empty-paragraph&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_18&quot; data-into-catalog-status=&quot;&quot;&gt;min()和max()&lt;/h3&gt;&lt;p&gt;比如我们一般怎么求最小值呢？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以直接用std::min()来简化if else：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;工作中不太需要，刷题适合。如果你需要从三个数字中求最小值呢？加一层{}&lt;/p&gt;&lt;p&gt;&lt;b&gt;如果求最大值就用std::max()&lt;/b&gt;&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_19&quot; data-into-catalog-status=&quot;&quot;&gt;max_element()和min_element()&lt;/h3&gt;&lt;p&gt;如果要从一个数组中找出最大值呢？&lt;/p&gt;&lt;p&gt;一般我们可能这么写：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 假设-1是肯定小于dp[i]的
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// dp是vector&amp;lt;int&amp;gt; 类型
&lt;/span&gt;&lt;span class=&quot;c1&quot;/&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;太长了，可以直接：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这样写的前提是能保证dp不是空的，否则段错误！
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;h_2177365491_20&quot; data-into-catalog-status=&quot;&quot;&gt;二分查找相关&lt;/h3&gt;&lt;p&gt;upper_bound()和lower_bound()有时可以极大简化你手写二分法。&lt;/p&gt;&lt;h3 id=&quot;h_2177365491_21&quot; data-into-catalog-status=&quot;&quot;&gt;持续更新……&lt;/h3&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>