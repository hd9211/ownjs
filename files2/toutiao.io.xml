<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>86e657386c7e624896595ca04c5e7fe6</guid>
<title>探索使用 Golang 和 Webassembly 构建一个多人游戏服务器</title>
<link>https://toutiao.io/k/r1j2iq6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4921793534932221&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTu3ic4Nr3ia1WjanGs37EiazVWdW1HhxDsXuM6l3w9RFGxPB3t8XLc86NA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;959&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.youtube.com/watch?v=ZyGw1yLNO9E(原创整理)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;什么是 &lt;code&gt;WebAssembly&lt;/code&gt;？由 &lt;code&gt;Google&lt;/code&gt;、&lt;code&gt;Microsoft&lt;/code&gt;、&lt;code&gt;Mozilla&lt;/code&gt;、&lt;code&gt;Apple &lt;/code&gt;等发起的 &lt;code&gt;WebAssembly&lt;/code&gt; 是一种新的字节码格式，主流浏览器都已经支持 &lt;code&gt;WebAssembly&lt;/code&gt;。和 &lt;code&gt;JS&lt;/code&gt; 需要解释执行不同，&lt;code&gt;WebAssembly&lt;/code&gt; 字节码和底层机器码很相似可快速装载运行，因此性能相对于 &lt;code&gt;JS&lt;/code&gt; 解释执行大大提升。&lt;code&gt;WebAssembly&lt;/code&gt; 并不是一门编程语言，而是一份字节码标准，需要用高级编程语言编译出字节码放到 &lt;code&gt;WebAssembly&lt;/code&gt; 虚拟机中才能运行。&lt;/p&gt;&lt;h2&gt;Panzr.io 简介&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;基于开源技术的游戏&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;Web&lt;/code&gt; 作为发行平台&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;轻巧快速&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;探索基本的多人游戏技术&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;扩展 &lt;code&gt;Go&lt;/code&gt; 技术知识&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Panzr.io 架构&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4198542805100182&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTB9Wib3ic96jME1A42Hfia647SuUPiaevQmV72Jmicmh3ElMibp0BzWupBqBg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1098&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Panzr.io 部署架构&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5006031363088058&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTgwnHssG6HiapCibPPLNx8dIynS2bhhoPyhkXcXoN8EzTJZCmBIZs3HicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;829&quot;/&gt;&lt;/p&gt;&lt;h2&gt;Triebwerk 简介&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;项目源码：&lt;/p&gt;&lt;p&gt;项目 Status:&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;Triebwerk&lt;/code&gt; 是一个开源的多人游戏服务器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;Go&lt;/code&gt; 语言编写&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;目前仅是基础原型&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;游戏是如何运行的?&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.3023255813953488&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTuwsJZV5TibPiaJIsH8DHcc6O1qTHuEQxk7pEswVoibiaXMH1ntMaXK9ibDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;860&quot;/&gt;&lt;/p&gt;&lt;h2&gt;服务器权威架构&lt;br/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;仅通过服务器进行通讯&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;客户端将所有输入发送到服务器&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务器有权进行模拟&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;防止作弊并引入延迟&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7677261613691931&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTF1ZpJQUfvKu8iavvsBwq5eJyjTJt9JFnenCQTIZZ5icp4z92ZMM6VFZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;409&quot;/&gt;&lt;/p&gt;&lt;h2&gt;客户端预测和服务器协调&lt;br/&gt;&lt;/h2&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;最早由 &lt;code&gt;QuakeWorld&lt;/code&gt; 推广&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;本地模拟运动&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不断与服务器状态同步&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据服务器状态更正本地状态&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7596899224806202&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTxfaT1LSyhjQZCEcA19ib6VR5R9RtuwLRYfccGodqfpUBwR8LZdKZbow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;387&quot;/&gt;&lt;/p&gt;&lt;h2&gt;客户端插值&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9156626506024096&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTnRrofG5fmrsL8EPgKtey9sia2CDPG7DVPOdmFcyOMtsnowIxibYml9mg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;332&quot;/&gt;&lt;/p&gt;&lt;h2&gt;定义边界&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;限制：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;所有游戏逻辑仅在 &lt;code&gt;2D&lt;/code&gt; 空间中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;均匀表面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;仅通过键盘进行输入控制&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;限制地图尺寸&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缓慢移动的车辆&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;没有物理引擎&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.937007874015748&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTHxVcXhyF1hSxibgf5oKpicUkl51FuMjuSF97Vx1HZxQMR748iaUm1uqJA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;381&quot;/&gt;&lt;/p&gt;&lt;h2&gt;服务器实现&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4236453201970443&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTTk92ke5PfzwPA1ZU4iaibHh5ibHUH1Pppd7QibI4nkhKrYOAUnnpAlib5gQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;812&quot;/&gt;&lt;/p&gt;&lt;h2&gt;玩家移动&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6788432267884322&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZThTVCS53V0KH1kJJhM7mw6JA49GOqH8VPfXC78ZoREnhZfaLLJicP5Mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;657&quot;/&gt;&lt;/p&gt;&lt;h2&gt;碰撞检测&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5146137787056367&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZT9zwekuWzop5Yp8iaoibF4mTLIIEqGw4SicIJh3oo4RiaSxuYKQmricZXDzg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;958&quot;/&gt;&lt;/p&gt;&lt;h2&gt;二进制数据传输&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.43956043956043955&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hD75vrNauXZEs8Q1F5KB41AsicyH8YEZTH82Pj47zRl5PznY5DTq1jjgwPJ0BU2h5tCXd7aokoqEUyT3fjOJc7w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;910&quot;/&gt;&lt;/p&gt;&lt;h2&gt;WebAssembly 模块&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;游戏逻辑(&lt;code&gt;Game logic&lt;/code&gt;)&lt;/span&gt;：&lt;code&gt;Server&lt;/code&gt; -&amp;gt; &lt;code&gt;Client&lt;/code&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;文件大小 &amp;gt; 2MB&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务器和客户端根据相同的逻辑计算状态&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过二进制类型进行数据传输&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;编译：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GOOS=js GOARCH=wasm go build -o tanks.wasm cmd/wasm/tanks.go&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Client：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;=&lt;span&gt;&quot;/game/wass_exec.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; go = &lt;span&gt;new&lt;/span&gt; Go();&lt;br/&gt;WebAssembly.instantiateStreaming(featch(&lt;span&gt;&quot;/game/tanks.wass&quot;&lt;/span&gt;), go.importObject).then(&lt;span&gt;&lt;span&gt;result&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    go.run(result.instance);&lt;br/&gt;});&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Server：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;js.Global().Set(&lt;span&gt;&quot;updateNetworkPlayer&quot;&lt;/span&gt;, js.FuncOf(updateNetworkPlayer))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;在 Go 中编码 state&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;posX := &lt;span&gt;float32&lt;/span&gt;(&lt;span&gt;30.457777&lt;/span&gt;)&lt;br/&gt;posY := &lt;span&gt;float32&lt;/span&gt;(&lt;span&gt;10.336666&lt;/span&gt;)&lt;br/&gt;buf := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;byte&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;)&lt;br/&gt;&lt;br/&gt;binary.LittleEndian.PutUint32(buf[&lt;span&gt;0&lt;/span&gt;:], math.Float32bits(posX))&lt;br/&gt;binary.LittleEndian.PutUint32(buf[&lt;span&gt;4&lt;/span&gt;:], math.Float32bits(posY))&lt;br/&gt;&lt;br/&gt;&lt;span&gt;var&lt;/span&gt; uint8Array = js.Global().Get(&lt;span&gt;&quot;Uint8Array&quot;&lt;/span&gt;)&lt;br/&gt;dst := uint8Array.New(&lt;span&gt;len&lt;/span&gt;(buf))&lt;br/&gt;js.CopyBytesToJS(dst, buf)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;在 Javascript 中解码 state&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;let&lt;/span&gt; dv = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;DataView&lt;/span&gt;(state.buffer)&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; posX = dv.getFloat32(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;let&lt;/span&gt; posY = dv.getFloat32(&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;在线试玩&lt;/h2&gt;&lt;p&gt;http://panzr.io&lt;/p&gt;&lt;h2&gt;Refs&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU4MjQ0MTU4Ng==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z9BgVMEm7YtTw2oONBkwaiaM9hBxUj6yRLDEw8rSSxR8wWZFLjjXWpmGq5LNDlEAn4v9lSALDiaGfC4MyPZwL95g/0?wx_fmt=png&quot; data-nickname=&quot;k8s技术圈&quot; data-alias=&quot;kube100&quot; data-signature=&quot;专注容器、专注 kubernetes 技术......&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f9120bf0f691093093b57de0d429b9b8</guid>
<title>微服务设计原则</title>
<link>https://toutiao.io/k/4sywkcm</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5156431054461182&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgibgw06zQIIxhdI36Q8EAb9T3ialL8E27A24VEicHn1VVdIHffhfNSOCDg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;863&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;良好的微服务设计可以使后期的升级维护更加轻松，否则将会令人非常头疼。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面几个设计原则强烈建议采用：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;单一职责&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高内聚&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;低耦合&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;隐藏内部实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免代码库共享&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免数据过度暴露&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免数据库共享&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最小化同步调用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最小化硬件共享&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;避免使用平台独特性技术&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三大原则是面向对象设计中的核心，同样适用于微服务设计。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 单一职责&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;每个微服务只应担负一个职责。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4128787878787879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMg3Z0IHNSZ2hgh1yALicaEudMn663UDyQE4BljHZgd9dIOaJib76MrezkA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如一个微服务中有两大功能：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把它们放在一起看起来问题不大，因为使用的技术相同、功能和数据上会有比较紧密的联系，在组织结构上，通常是由同一个开发小组负责。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是，这会造成两个功能有大量的代码耦合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;时间长了之后，会带来和单体架构一样的问题，维护难、测试难、部署难 ……&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3193612774451098&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMg3jrMT2GrBeJgqvwvG9YItOhE1bKqOMiaXmUO0WZm790QDq8csBIcXNw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1002&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，按照“单一职责”原则，应该分为两个微服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 高内聚&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;关系紧密的行为应放在一起。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.29942418426103645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgcy8Ts6QcbXZ2W2Bic2WrFcNamMhYibBhkc3qYxtjlhTLCzPhn7AZMNtg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1042&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如有2个微服务：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;“订单金额统计” 服务需要请求 “订单管理” 服务，以获取所需数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如价格、税、服务费 ……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;刚开始一切安好，但突然某一天上头增加税种了，需要更改新的计算规则。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，订单服务就要提供新的数据，金额统计服务也需要更改计算方式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，每次变更基本都需要两个服务一起改，是紧耦合的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.44421906693711966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMg1SAeHX04MfLuiaxDvg37vwESOTvIniadlUYaI2uEpaB1VIsmibFcBC8dA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;986&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为订单金额统计服务的逻辑只与订单相关，所以应该并入订单服务。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把紧密相关的行为放在一起，实现高内聚。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. 低耦合&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一个服务的变更不要影响其他服务。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此原则涉及到多个方面。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1 隐藏内部实现&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如上一节 “高内聚” 中，把金额统计服务并入了订单管理服务，那么，之前金额统计服务中的 “统计接口” 还需要对外暴露吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在已经是订单服务的内部功能了，统计结果可以作为订单对象中的数据，所以无需对外暴露，防止误操作和造成不必要的耦合关系。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2 避免共享代码库&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4127725856697819&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgHTp5Ab3tstweDHjysyR3aicZUobfwP4lUaeAzaeM7dbyicmVQeTF0npQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1284&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;共享代码的确非常方便，但是会造成底层代码关联度太强。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于以后的升级非常不便，例如某个服务想把语言版本升级，但共享库使用的是低版本，其中某些用法在高版本中是过期的，这就很尴尬了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;想要完美的避免也是不现实的，只能尽量规避。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如&lt;strong&gt;不共享&lt;/strong&gt;，各服务重新造轮子，这样服务之间就有边界了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但这个方式只适用于需要共享的库是非常稳定的，不怎么需要改了，否则的话相关服务都需要改。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如把共享库的&lt;strong&gt;粒度缩小&lt;/strong&gt;，避免形成功能特别全的大库。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大库必然导致被引用的范围非常广，影响面大。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果粒度很小的话，涉及的服务也就少。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.3 避免数据过度暴露&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如用户服务有一个获取用户详情的接口，返回用户所有信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;购物车服务获取用户信息时，就会拿到很全的数据，例如包括支付信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这是没必要的，只需要返回用户的基本属性即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;特殊的属性应通过另外的接口提供。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;过度暴露会增加服务间的耦合度。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.4 避免数据库共享&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5337301587301587&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgw82fL94K8VCxIydxBG9p6Y4TibPaNIvUJHACicmv6aqpYKzRdXST3ibtw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1008&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个服务想获取另一个服务的数据时，只应该通过接口，而不是直接从对方的数据库中拿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;否则，这种数据层面的耦合会带来噩梦。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.5 最小化同步调用&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9039812646370023&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgVzbricUsibC7Cibpqo1BYhYzHohlqiapDSAwl3b8uiaWd3GYSsu7foHVcdA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;854&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如订单服务创建订单的时候需要调用很多其他服务，例如用户、商品、支付、库存、物流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;直接同步调用各个服务的接口吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不现实，如果其中有一个服务接口调用失败，那么创建订单就失败了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最好使用事件驱动的异步调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同步调用会产生网络的阻塞，对被调用服务的可用性要求极高，所以要慎重使用。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.6 避免硬件基础设施的共享&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4229934924078091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/wv3K6j4ibl91IycK5ZI5eG3LhpTCj7dMgkmCBRNqqNYXbVqFty6pwvt013YI4TpAscGibVqE4GCbvynbg6UpXpkQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务设计得很好，但如果硬件部署没有规划好，一样非常痛苦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如两个服务部署在一台服务器上，服务B 非常消耗资源，那么服务A可能就没法用了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，不能忽略硬件这个关键点，要根据各个服务的特点做好均衡部署。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.7 避免使用平台特性技术&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如 Java RMI 做远程调用不错，但它是平台特性，要求服务双方都用一套技术，这种高耦合就不如平台独立的 REST 更自由了。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc740136f9b90b50532116477999ecb0</guid>
<title>一代传奇！经典播放器 Winamp 的开源实现</title>
<link>https://toutiao.io/k/wesd48c</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;RichText ztext Post-RichText&quot;&gt;&lt;p&gt;【导语】：Winamp 是一个超级经典的音频播放器，诞生于 1997 年。它随着 MP3 共享文件的繁荣而迅速走红，如今已经名存实亡了。&lt;/p&gt;&lt;p&gt;用过 Winamp 这个软件的人中，80 后应该居多。&lt;/p&gt;&lt;p&gt;Winamp 有很多插件，比如：Winamp 2. 的“歌词伴侣”就非常实用。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3f53b1ed23e69485aceb271c56f5dbc1_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;617&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-3f53b1ed23e69485aceb271c56f5dbc1_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;617&quot; data-rawheight=&quot;526&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-3f53b1ed23e69485aceb271c56f5dbc1_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3f53b1ed23e69485aceb271c56f5dbc1_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;今天推荐的开源项目就是 &lt;code&gt;Winamp 2.9&lt;/code&gt; 的开源实现。&lt;/p&gt;&lt;h3&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Webamp 使用了HTML5 和 JavaScript 对 Winamp 2.9 进行了重新实现，Webamp 可以运行在现代浏览器上，包括 Edge、Firefox、Safari 和 Chrome，不支持 IE。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a690933cb27058fd67b73d8679d568b0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;707&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-a690933cb27058fd67b73d8679d568b0_r.jpg&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;707&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-a690933cb27058fd67b73d8679d568b0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a690933cb27058fd67b73d8679d568b0_b.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;项目地址是：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/captbaritone/webamp&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/captbaritone&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/webamp&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;下载安装&lt;/b&gt;&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save webamp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/webamp@1.4.0/built/webamp.bundle.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;将 Webamp 添加到自己的网页中最简单的方法：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script src=&quot;https://unpkg.com/webamp&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;new Webamp().renderWhenReady(app);&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;b&gt;用法&lt;/b&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;创建容器。在HTML中创建一个DOM元素，Webamp将使用它来查找其初始位置：&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&quot;winamp-container&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;import Webamp from &#x27;webamp&#x27;;

// 如果通过tag标签引入，则Winamp可在全局`window`对象上使用：
// const Winamp = window.Webamp;

// 检查当前环境中是否支持Winamp
if(!Webamp.browserIsSupported()) {
    alert(&quot;Oh no! Webamp does not work!&quot;)
    throw new Error(&quot;What&#x27;s the point of anything?&quot;)
}

// 所有配置都是可选的
const webamp = new Webamp({
  initialTracks: [{
    metaData: {
      artist: &quot;DJ Mike Llama&quot;,
      title: &quot;Llama Whippin&#x27; Intro&quot;,
    },
    url: &quot;path/to/mp3/llama-2.91.mp3&quot;
  }],
  initialSkin: {
    url: &quot;path/to/skins/TopazAmp1-2.wsz&quot;
  },
});
webamp.renderWhenReady(document.getElementById(&#x27;winamp-container&#x27;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;webamp的api包括很多函数方法，静态方法、构造方法、实例方法等，详细参考官方的api文档。&lt;/li&gt;&lt;/ul&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.zhihu.com/zvideo/1374083713932877824&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg&quot; class=&quot;LinkCard old LinkCard--hasImage&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;/&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-text&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;知乎视频&lt;/span&gt;&lt;span class=&quot;LinkCard-meta&quot;&gt;&lt;span&gt;​&lt;svg class=&quot;Zi Zi--InsertLink&quot; fill=&quot;currentColor&quot; viewbox=&quot;0 0 24 24&quot;&gt;&lt;path d=&quot;M13.414 4.222a4.5 4.5 0 1 1 6.364 6.364l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005a2.5 2.5 0 1 0-3.536-3.536l-3.005 3.005a.5.5 0 0 1-.707 0l-.707-.707a.5.5 0 0 1 0-.707l3.005-3.005zm-6.187 6.187a.5.5 0 0 1 .638-.058l.07.058.706.707a.5.5 0 0 1 .058.638l-.058.07-3.005 3.004a2.5 2.5 0 0 0 3.405 3.658l.13-.122 3.006-3.005a.5.5 0 0 1 .638-.058l.069.058.707.707a.5.5 0 0 1 .058.638l-.058.069-3.005 3.005a4.5 4.5 0 0 1-6.524-6.196l.16-.168 3.005-3.005zm8.132-3.182a.25.25 0 0 1 .353 0l1.061 1.06a.25.25 0 0 1 0 .354l-8.132 8.132a.25.25 0 0 1-.353 0l-1.061-1.06a.25.25 0 0 1 0-.354l8.132-8.132z&quot;/&gt;&lt;/svg&gt;&lt;/span&gt;www.zhihu.com&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-imageCell&quot;&gt;&lt;img class=&quot;LinkCard-image LinkCard-image--square&quot; alt=&quot;图标&quot; src=&quot;https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;p&gt;&lt;b&gt;后话&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我看到有微博网友是这样调侃这个开源项目的：&lt;/p&gt;&lt;blockquote&gt; @Funarp: 草，当年最费内存的播放器现在用最费内存的语言在最费内存的浏览器里面重制了&lt;br/&gt; &lt;/blockquote&gt;&lt;p&gt;稍微解释一下，2002年8月发布了 Winamp 3，不过其系统资源占用率高的一批。&lt;/p&gt;&lt;p&gt;当年就被很多用户吐槽，好在 Winamp 立马反应过来，分了两条产品线来开发：保留经典的 Winamp 2，同时继续改进 Winamp 3。&lt;/p&gt;&lt;p&gt;为什么说 Winamp 经典？它还启发了其他后继播放器，比如：foobar 和千千静听。&lt;/p&gt;&lt;p&gt;随着盗版操作系统内置千千静听，Winamp 在国内慢慢丢失市场了。&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a665722d13f10c3c32372aef12e75c37</guid>
<title>数据分析十年，我只推荐这些书</title>
<link>https://toutiao.io/k/gc13z71</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;a class=&quot;weui-flex original_primary_card appmsg_card_context appmsg_card_active&quot; href=&quot;#&quot; id=&quot;copyright_info&quot;&gt;
                                
                                &lt;div class=&quot;weui-flex__item&quot;&gt;
                                    &lt;strong class=&quot;original_primary_nickname&quot;&gt;玩转数据分析&lt;/strong&gt;
                                                                            &lt;p class=&quot;original_primary_desc&quot;&gt;我是一名有9年多互联网数据分析工作经验的女性分析师。教是最好的学，分享是最好的交流，这里记录我的思考与总结，欢迎关注，共同交流。&lt;/p&gt;
                                                                    &lt;/div&gt;
                                &lt;p class=&quot;weui-flex__ft&quot;/&gt;
                            &lt;/a&gt;
                        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e5a383bfbb88f77a3fd9543b4926fc17</guid>
<title>图算法系列之深度优先搜索（一）</title>
<link>https://toutiao.io/k/uea8zyc</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;吐血整理程序员必读书单：https://github.com/silently9527/ProgrammerBooks&lt;/p&gt;&lt;p&gt;微信公众号：贝塔学Java&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上一篇中我们把图通过邻接表数组表示出来了，这个数据结构将会做我们实现图算法的基础，本篇我们将一起开始学习图算法的第一个搜索算法 - 深度优先搜索&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;搜索API的定义&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class Search {&lt;br/&gt;    Search(Graph graph, int s);&lt;br/&gt;&lt;br/&gt;    boolean marked(int v);&lt;br/&gt;    &lt;br/&gt;    int count();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在开始实现算法之前，我们依然先来定义搜索的API&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;构造方法提供了一个图对象，以及一个起点s，需要找到与s连通的所有顶点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;marked判断顶点s与v是否相邻&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;count返回与顶点s相连的总顶点数&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;深度优先搜索&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6145833333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMLS1JjQlnf5suLzpCnx2Mmj5SJHIyZHaIqwslLc2wibtxpUWNl0Wv9Tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;384&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假如上图是一个迷宫，我们需要从顶点0开始找到一条出路，假设我们有一条无限长的绳子，和一支粉笔，那么可以这样考虑找到出路：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;先选择一条通道走，在走的路上放上一根绳子&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;每遇到一个路口就用笔标记一下，继续选择一条未走过的通道&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当遇到一个已经被标记的路口时就退回到上一个路口继续选择一个未走过的通道&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;当回退的路口已经没有路可以走的时候就在继续往后回退&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式绳子总能帮你找到一条出路，而标记不会让你重复走已经走过的通道。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;深度优先搜索的实现思路就和走迷宫的方式一样；&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class DepthFirstSearch {&lt;br/&gt;    private boolean marked[]; &lt;br/&gt;    private int count;&lt;br/&gt;&lt;br/&gt;    public DepthFirstSearch(Graph graph, int s) {&lt;br/&gt;        this.marked = new boolean[graph.V()];&lt;br/&gt;        this.dfs(graph, s);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    private void dfs(Graph graph, int v) {&lt;br/&gt;        marked[v] = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        count++;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int w : graph.adj(v)) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!marked[w]) {&lt;br/&gt;                dfs(graph, w);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Override&lt;br/&gt;    public boolean marked(int v) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; marked[v];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Override&lt;br/&gt;    public int &lt;span&gt;&lt;span&gt;count&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; count;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在搜索一张图的时候，使用递归来遍历所有的顶点，在访问其中一个顶点时：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;标记它被已经访问&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;递归的访问与之相连的所有邻接点&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;单元测试：&lt;/strong&gt;构建下面这张图，然后测试深度优先搜索&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5483193277310925&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMO50lPvCGHvb5cVnfQVrYmuKXRxMT225xiceQ8pRez5gwkFymt02o5rA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;476&quot;/&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Test&lt;br/&gt;public void &lt;span&gt;&lt;span&gt;test&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    Graph graph = new Graph(8); //构建一张图&lt;br/&gt;    graph.addEdge(0, 1);&lt;br/&gt;    graph.addEdge(0, 2);&lt;br/&gt;    graph.addEdge(0, 5);&lt;br/&gt;    graph.addEdge(1, 3);&lt;br/&gt;    graph.addEdge(2, 4);&lt;br/&gt;    graph.addEdge(4, 3);&lt;br/&gt;    graph.addEdge(5, 3);&lt;br/&gt;    &lt;br/&gt;    graph.addEdge(6, 7); //为了展示&lt;br/&gt;&lt;br/&gt;    SeDepthFirstSearcharch search = new DepthFirstSearch(graph, 0);&lt;br/&gt;    System.out.println(search.count());&lt;br/&gt;    System.out.println(search.marked(6));&lt;br/&gt;    System.out.println(search.marked(7));&lt;br/&gt;    System.out.println(search.marked(2));&lt;br/&gt;    System.out.println(search.marked(5));&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.30377906976744184&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMIM7UqticTAW3c25Xibp5nQsU4D1hqlu1P7AGLYF8ZpHWufySg8VSkYsA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;688&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;寻找路径的API&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上的递归算法只是一个开始，从上面的结果我们可以看出，我们只能判断出哪些顶点与起点s是连通的，无法给出具体的路径出来；换句话说，&lt;strong&gt;我们需要实现从顶点s到顶点v是否存在路径可达，如果存在请打印出来&lt;/strong&gt;&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class Paths {&lt;br/&gt;    Paths(Graph graph, int s);&lt;br/&gt;    &lt;br/&gt;    boolean hasPathTo(int v); //判断出从s-&amp;gt;v是否存在路径&lt;br/&gt;    &lt;br/&gt;    Iterable&amp;lt;Integer&amp;gt; pathTo(int v); //如果存在路径，返回路径&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基于深度优先搜索查找图中的可达路径&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6145833333333334&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMLS1JjQlnf5suLzpCnx2Mmj5SJHIyZHaIqwslLc2wibtxpUWNl0Wv9Tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;384&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们依然基于这张图来看，由于我们需要找出可达的路径，所以我们在进行搜索的时候需要记录下图中的边，这里我们使用的是一个数组edgeTo[]，如果存在一条边是v-&amp;gt;w，那么可以表示成edgeTo[w]=v，在深度搜索完成之后这个edgeTo[]数组就是一颗由父链表示的一颗树
（父链树在之前的文章中也使用过《如何检测社交网络中两个人是否是朋友关系（union-find算法）》）&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;public class DepthFirstPaths {&lt;br/&gt;    private boolean marked[];&lt;br/&gt;    private int[] edgeTo;&lt;br/&gt;    private int s;&lt;br/&gt;&lt;br/&gt;    DepthFirstPaths(Graph graph, int s) {&lt;br/&gt;        this.s = s;&lt;br/&gt;        this.marked = new boolean[graph.V()];&lt;br/&gt;        this.edgeTo = new int[graph.V()];&lt;br/&gt;        this.dfs(graph, s);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    private void dfs(Graph graph, int v) {&lt;br/&gt;        this.marked[v] = &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (int w : graph.adj(v)) {&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (!marked[w]) {&lt;br/&gt;                this.edgeTo[w] = v;&lt;br/&gt;                this.dfs(graph, w);&lt;br/&gt;            }&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public boolean hasPathTo(int v) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; marked[v];&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    public Iterable&amp;lt;Integer&amp;gt; pathTo(int v) {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!hasPathTo(v)) {&lt;br/&gt;            throw new IllegalStateException(&lt;span&gt;&quot;s不能到达v&quot;&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;        Stack&amp;lt;Integer&amp;gt; stack = new LinkedListStack&amp;lt;&amp;gt;();&lt;br/&gt;        stack.push(v);&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt; (edgeTo[v] != s) {&lt;br/&gt;            stack.push(edgeTo[v]);&lt;br/&gt;            v = edgeTo[v];&lt;br/&gt;        }&lt;br/&gt;        stack.push(s);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; stack;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;画图来详细跟踪深度优先搜索的运行轨迹，记录了edgeTo的变化以及父链树的逐渐形成&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7005813953488372&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LM6rtGlzALECnhS7Q4RkbaLo379UCsTIusiadsLmWa4pDdvgxj3qc4ibuA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1032&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6778741865509761&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMV6Ps2iceSTKngOREz4Fnayiclm8PAgMObkVC6L5libmRJYcQiarsGibKLXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3179916317991632&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMsXyjqM2JJENH7x486FYXBwXxDIH48rUeyKVa5AILN0Cj5Gia5dezJng/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;956&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终父链树形成了，接下来我们来写单元测试校验下生成的父链树和实际的运行结果是否一致&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Test&lt;br/&gt;public void &lt;span&gt;&lt;span&gt;test&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;    Graph graph = new Graph(8);&lt;br/&gt;    graph.addEdge(0, 1);&lt;br/&gt;    graph.addEdge(0, 2);&lt;br/&gt;    graph.addEdge(0, 5);&lt;br/&gt;    graph.addEdge(1, 3);&lt;br/&gt;    graph.addEdge(2, 4);&lt;br/&gt;    graph.addEdge(4, 3);&lt;br/&gt;    graph.addEdge(5, 3);&lt;br/&gt;    graph.addEdge(6, 7);&lt;br/&gt;&lt;br/&gt;    DepthFirstPaths paths = new DepthFirstPaths(graph, 0);&lt;br/&gt;    System.out.println(paths.hasPathTo(5));&lt;br/&gt;    System.out.println(paths.hasPathTo(2));&lt;br/&gt;    System.out.println(paths.hasPathTo(6));&lt;br/&gt;&lt;br/&gt;    paths.pathTo(5).forEach(System.out::&lt;span&gt;print&lt;/span&gt;);&lt;br/&gt;    System.out.println();&lt;br/&gt;    paths.pathTo(4).forEach(System.out::&lt;span&gt;print&lt;/span&gt;);&lt;br/&gt;    System.out.println();&lt;br/&gt;    paths.pathTo(2).forEach(System.out::&lt;span&gt;print&lt;/span&gt;);&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;验证结果完全匹配了父链树&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4841549295774648&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ggRgNal7zGibaOia6nfgWdYPGDIcYZZ0LMgKLuialpYf0SvYI267Uic71bBWwj8bhgb1tXzgVicKsXLyicgXYNFvice5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;568&quot;/&gt;&lt;/figure&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中所有源码已放入到了github仓库:https://github.com/silently9527/JavaCore&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;最后（点关注，不迷路）&lt;/span&gt;&lt;span/&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文中或许会存在或多或少的不足、错误之处，有建议或者意见也非常欢迎大家在评论交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，&lt;strong&gt;写作不易，请不要白嫖我哟&lt;/strong&gt;，希望朋友们可以&lt;strong&gt;点赞评论关注&lt;/strong&gt;三连，因为这些就是我分享的全部动力来源🙏&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>