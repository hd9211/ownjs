<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>57d41a30b459a983618265a27c9e21f7</guid>
<title>2021 年 Go 生态圈 rpc 框架 benchmark</title>
<link>https://toutiao.io/k/nwr0uyg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;
      
      
      
      &lt;p&gt;有朋友问，每年年初的时候我会发布一个rpc的框架的大比拼，今年为啥没有了？&lt;br/&gt;&lt;a id=&quot;more&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有几个原因，一是我去年下半年换了一份工作，熟悉新的业务耗费了很大精力，导致博客文章相对少了，开源的贡献也少了，二是rpcx我自己觉得性能已经很不错了没有想着进一步的优化，所以也没有做相应的benchmark比较。&lt;/p&gt;
&lt;p&gt;前几个星期头条的同学推出他们的rpcx框架&lt;a href=&quot;https://github.com/cloudwego/kitex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kitex&lt;/a&gt;,据说性能要比rpcx和grpc好很多，加上今年GopherChina2021大会上他们也分享了他们的netpoll的优化。&lt;/p&gt;
&lt;p&gt;本来，我对自定义epoll一类的框架如evio、gnet是不感冒的，因为go本身的net库也是基于epoll实现的，只不过这类框架在处理epoll事件之后的处理和标准库是不一样的。在GopherChina大会上我也和小伙伴说，我担心的这类框架的&quot;长尾效应&quot;,也就是从客户端视角看，大大并发的情况下latency的长尾效应可能是一个很大的痛点。这个话题我一直想专门写一篇文章探讨一下，希望这个秋季能出一篇深度分析标准库和自定义epoll的文章。&lt;/p&gt;
&lt;p&gt;当然，既然头条的同学测试kitex性能不错，那么我也就把kitex加入到我的&lt;a href=&quot;https://github.com/rpcxio/rpcx-benchmark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rpc benchmark项目&lt;/a&gt;中了,并且在这个周末也对几种Go rpc框架做了benchmark对比,我想自己测试看看这些框架的性能表现。&lt;/p&gt;
&lt;p&gt;当然，每次发表benchmark文章，我都会先声明，没有一个benchmark可以全面的反应这些框架的完整的性能的，更不用说完整的特性了。每个人在使用rpc框架时，面对的场景可能都不同，有些是CPU敏感的服务、有的是IO敏感的服务、有的是内存敏感的服务、有的是读数据库的服务、有的是提供缓存的服务、有些是写文件的服务，消息的长度有大有小、消息的编码格式也不尽相同，有的是同步调用，有的是异步调用，有些是同机房的调用，有些是跨机房的调用，有些用tcp，有些用udp,......,各种各样五花八门，所以没有一种benchmark可以涵盖所有的场景。这次我做的benchmark，也只是覆盖了其中的一种场景。但是幸运的是，这个项目提供了一个框架，可以根据你的场景自己定制，如果你感兴趣，你可以在这个项目的基础上做一些修改，以便和你的使用场景做匹配。&lt;/p&gt;
&lt;p&gt;另外，性能只是比较rpc框架的一个方面，千万不要因为测试结果A框架比B框架好就拿去吹嘘，那是幼稚的表现。另外也不可能Go生态圈只有一个框架存在，目前Go生态圈至少有十几个框架存在，各有特色。我个人对于Go生态圈的微服务框架持开放态度，而且也会了解和学习其它框架的优点，让rpcx框架变得更好，我相信·其他开发者也是这么想的。&lt;/p&gt;
&lt;p&gt;想比以前的测试，我把Dubbo、Motan、Tarsgo等rpc框架去掉了。我个人不认为这些框架真的适合Go生态群的开发。Go的设计哲学就是简单，这几种框架都需要复杂的配置。当然我知道这些框架原先是Java、C++语言的，只不过为了跨语言才port到Go生态圈，导致这些框架的使用非常的复杂，因为为了保持和主语言的框架的兼容。如果单纯的Go生态圈的使用的话，我还是建议挑选简单可依赖的纯Go生态圈的框架。&lt;/p&gt;
&lt;p&gt;为了尽量保持一致的测试环境，所有的框架统一遵循下面的约定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分别测试并发数为100、200、500、1000、2000、5000的场景，测试单个服务在面对不同并发量的情况下的性能。&lt;/li&gt;
&lt;li&gt;从客户端统计吞吐率和延迟(latency)&lt;/li&gt;
&lt;li&gt;采用共享的client。创建一定数量的client作为client池。&lt;/li&gt;
&lt;li&gt;所有的框架都是在“公平”的情况下测试。测试数据都是一致的，采用protobuf进行测试。虽然有比Protobuf性能更好的序列化框架，但是因为不具有通用性所以不考虑。&lt;/li&gt;
&lt;li&gt;测试会进行预热。&lt;/li&gt;
&lt;li&gt;避免&lt;a href=&quot;http://highscalability.com/blog/2015/10/5/your-load-generator-is-probably-lying-to-you-take-the-red-pi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coordinated omission&lt;/a&gt;:测试统计的是等待时间+服务时间,而不是服务端服务时间&lt;/li&gt;
&lt;li&gt;统计既包含平均值，也包含P99.9值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;测试环境&quot;&gt;测试环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz,2颗&lt;/li&gt;
&lt;li&gt;总物理核 8个， 开超线程逻辑核数为 32个&lt;/li&gt;
&lt;li&gt;内存 128G&lt;/li&gt;
&lt;li&gt;Go 1.16.6&lt;/li&gt;
&lt;li&gt;各框架版本&lt;ul&gt;
&lt;li&gt;arpc: 1.1.5&lt;/li&gt;
&lt;li&gt;go std rpc: 1.16.6&lt;/li&gt;
&lt;li&gt;grpc: 1.39.0&lt;/li&gt;
&lt;li&gt;kitex: 0.0.3&lt;/li&gt;
&lt;li&gt;rpcx: 1.6.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试是在单机上进行的。 坏处就是测试是没有像实际情况一样经过实际网络，而是本机网络支持处理，好处就是我们可以刨去长距离或者不好的网络的影响，只关注于rpc框架的处理。&lt;/p&gt;
&lt;h2 id=&quot;测试步骤&quot;&gt;测试步骤&lt;/h2&gt;
&lt;p&gt;生成每个框架的服务端和客户端:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;2&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;3&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;4&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;5&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;6&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;7&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;8&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;9&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;10&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;11&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;9756450&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt; arpc_server&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12800584&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;51&lt;/span&gt; gostd_server&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12520016&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;52&lt;/span&gt; grpc_server&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11240760&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;53&lt;/span&gt; kitex_server&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11810350&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;54&lt;/span&gt; rpcx_server&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;/&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;5021980&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt; arpc_client&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11109233&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt; gostd_client&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12581237&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt; grpc_client&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11559544&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt; kitex_client&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;rwxr-xr-x &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; smallnest &lt;span class=&quot;constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16065065&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;Aug&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;00&lt;/span&gt; rpcx_client&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;启动服务端:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;./xxx_server &lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8972&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;客户端测试(并发数100)&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;1&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;p class=&quot;line&quot;&gt;./xxx_client -c &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; -n &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8973&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每个场景会发送一千万个请求，内容一个不大不小的protobuf编码的数据，服务端收到后会设置某个字段为&lt;code&gt;OK&lt;/code&gt;,并返回。没有复杂的计算。&lt;/p&gt;
&lt;p&gt;相对于简单的echo 字符串的服务，消息体适中，编码格式通用，业务处理简单，耗时很短吞吐率有保障。&lt;/p&gt;
&lt;h2 id=&quot;测试结果&quot;&gt;测试结果&lt;/h2&gt;
&lt;p&gt;当前对5种rpc框架做了测试，有些是普通的rpc服务，比如arpc、Go标准库中的rpc、有些是支持微服务治理的框架如kitex、rpcx，有些是有一些微服务治理的功能如grpc。测试的时候，并没有测试他们的微服务治理的功能，而是只是测试了他们简单的rpc调用。&lt;/p&gt;
&lt;p&gt;实际测试是，发现kitex在并发数为2000的时候，客户端调用会有少量出错，并发数为5000时，会有10+%的调用出错。&lt;/p&gt;
&lt;h3 id=&quot;吞吐率_(越高越好)&quot;&gt;吞吐率 (越高越好)&lt;/h3&gt;
&lt;p&gt;也就是每秒完成的调用数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;throughputs.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;延迟(平均耗时，越小越好)&quot;&gt;延迟(平均耗时，越小越好)&lt;/h3&gt;
&lt;p&gt;单位毫秒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;latency.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;延迟(P99-9耗时，越小越好)&quot;&gt;延迟(P99.9耗时，越小越好)&lt;/h3&gt;
&lt;p&gt;单位毫秒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;p99.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;原始测试数据&quot;&gt;原始测试数据&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;data.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;简单总结&quot;&gt;简单总结&lt;/h2&gt;
&lt;p&gt;arpc表现亮眼，吞吐率和耗时表现都不错。它是一个类似go web编程风格的rpc框架，采用router和handler的方式实现服务，值的学习。&lt;/p&gt;
&lt;p&gt;kitex在并发量小的时候吞吐率要比rpcx要好，随着并发量增多，吞吐率基本差不多，吞吐率在大一些，它的长尾效应很明显P99.9延迟很高，这符合我对自定义epoll框架的推测。如果有小伙伴有不同的想法，欢迎发送评论。&lt;/p&gt;
&lt;p&gt;Go标准库rpc框架中规中矩。&lt;/p&gt;
&lt;p&gt;rpcx框架表现优异，在各种并发量的情况下都领先，并且没有明显的长尾效应。&lt;/p&gt;
&lt;p&gt;grpc本来也是很不错的框架，但是性能和这几位比起来，还稍差一些。&lt;/p&gt;
&lt;p&gt;通过这次测试，我对rpcx当前的性能有了一个大致的了解，并且通过对其它rpc框架测试，又进一步优化了rpcx的性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可能这个测试对于基于netpoll的kitex不&quot;公平&quot;，我的理解是自定义netpoll适合那种有巨量socket连接，并发量适中的场景。&lt;/p&gt;
&lt;/blockquote&gt;

      
    &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a6166e508ae15e06b7507458494158d7</guid>
<title>恐惧和自我偏见：成长的最大障碍</title>
<link>https://toutiao.io/k/45ae6zg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;em data-type=&quot;italic&quot;&gt;我们每个人都有一些害怕的事情，成长就是克服恐惧，做到原来不敢做的事情。如果自己都不相信自己能做到，还有谁会相信我们呢？只有克服内心的恐惧和自我偏见，才能收获成长。原文链接：[&lt;/em&gt;Fears and Limiting Beliefs](https://www.patreon.com/posts/20851818)&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;通常来说，我们每个人在生活中都或多或少面临懒惰、拖延症以及缺乏决心的困扰，本质上这都是我们内心中的恐惧和自我偏见的反映，大概率我们并不真的懒惰&lt;span data-type=&quot;sup&quot;&gt;[1]&lt;/span&gt;。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;实现梦想的最大障碍并不是懒惰、意志力不足或没有时间，最大的障碍是我们内心的恐惧和自我偏见。&lt;/p&gt;&lt;h5 data-id=&quot;heading0&quot; data-type=&quot;heading&quot; top=&quot;424&quot;&gt;信念 Beliefs&lt;/h5&gt;&lt;p data-type=&quot;paragraph&quot;&gt;我们的信念似乎会影响很多事情：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;信念影响动机&lt;span data-type=&quot;sup&quot;&gt;[2]&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;信念影响压力&lt;span data-type=&quot;sup&quot;&gt;[3]&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;信念影响我们的自控能力&lt;span data-type=&quot;sup&quot;&gt;[4]&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-type=&quot;paragraph&quot;&gt;信念影响我们学习、改变的潜力&lt;span data-type=&quot;sup&quot;&gt;[5]&lt;/span&gt;（成长心态）。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;自我限制信念（self-limiting belief）&lt;span data-type=&quot;sup&quot;&gt;[6]&lt;/span&gt;是指那些你自认为是正确的、但却限制了你进步的信念。它可以表现为消极的自我暗示或对世界的悲观看法。例如：“我赚不到更多钱了，因为这已经是我们行业的玻璃天花板”，“像我这样的人不可能成为企业家”，“别人总是说我数学不好，所以我是一个糟糕的程序员”。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;大多数信念都是我们自认为的事实，然而并没有得到任何积极的验证。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;好消息是，信念是可以改变的。马丁·塞格利曼在《活出最乐观的自己》(Learned Optimism)&lt;span data-type=&quot;sup&quot;&gt;[7]&lt;/span&gt;中很好的解释了如何通过重塑信念来改变生活态度。还有一本书叫《伯恩斯新情绪疗法》(Feeling Good: The New Mood Therapy)&lt;span data-type=&quot;sup&quot;&gt;[8]&lt;/span&gt;，是开始了解认知行为疗法&lt;span data-type=&quot;sup&quot;&gt;[9]&lt;/span&gt;的最好的入门书籍。&lt;/p&gt;&lt;h5 data-id=&quot;heading1&quot; data-type=&quot;heading&quot; top=&quot;936&quot;&gt;恐惧 Fears&lt;/h5&gt;&lt;p data-type=&quot;paragraph&quot;&gt;内心的恐惧也会产生类似的效果：阻止我们做自己想做的事情。恐惧的问题在于它们会撒谎、会逃避。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;恐惧是非常微妙的，它会导致一些看似无关的行为——你会沉迷于追剧，而不是写一篇思考了一整天的文章。为什么会这样？因为你害怕这篇文章不够完美，人们会不喜欢。这篇文章还不够好，甚至文章还没有写出来，但已经不够好了！&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;我们的大脑在估计可能性和概率的时候表现非常糟糕，尤其是当事情可能出错的时候。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;恐惧让我们厌恶风险，让我们错过完全可以把握的机会。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;解决恐惧问题不仅能帮助我们自己，还能帮助到我们的团队&lt;span data-type=&quot;sup&quot;&gt;[10]&lt;/span&gt;。&lt;/p&gt;&lt;h5 data-id=&quot;heading2&quot; data-type=&quot;heading&quot; top=&quot;1298&quot;&gt;我们能做什么？&lt;/h5&gt;&lt;p data-type=&quot;paragraph&quot;&gt;首先，有一个很重要但颇有争议的观点：不要只相信真实的东西，而要相信有用的东西，甚至迷信也有帮助&lt;span data-type=&quot;sup&quot;&gt;[11]&lt;/span&gt;。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;其次，谨慎地采取小的、不完美的步骤&lt;span data-type=&quot;sup&quot;&gt;[12]&lt;/span&gt;，而不是一下子制定一个巨大的、雄心勃勃的计划。变化不会在一瞬间发生，也不会立即看到显著的变化。事实可能恰恰相反：为改变付出的努力越多，阻力就越大&lt;span data-type=&quot;sup&quot;&gt;[13]&lt;/span&gt;。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;最后，走出舒适区，直面我们的恐惧。例如，如果我们害怕拒绝，那就挑战一下”拒绝“，看看它是什么感觉。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;总之，开始通过实验来验证我们的信念。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;关于在生活中运用信念和自我认知的知识，阅读马克·曼森（Mark Manson）的&lt;em data-type=&quot;italic&quot;&gt;&lt;span data-type=&quot;strong&quot;&gt;自我认知指南&lt;/span&gt;&lt;/em&gt;&lt;span data-type=&quot;sup&quot;&gt;[14]&lt;/span&gt;是一个很好的起点。&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote data-type=&quot;blockquote&quot;&gt;&lt;p data-type=&quot;paragraph&quot;&gt;&lt;span data-type=&quot;strong&quot;&gt;Reference:&lt;/span&gt;&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[1] https://medium.com/personal-growth/youre-not-lazy-7e357516c007&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[2] https://www.stanforddaily.com/2010/10/25/willpower-can-be-an-unlimited-resource-study-says/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[3] https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3374921/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[4] https://medicalxpress.com/news/2015-04-dont-self-control-believing.html&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[5] https://sharpbrains.com/blog/2018/08/13/meta-analysis-finds-value-in-teaching-the-science-of-neuroplasticity-especially-for-math-achievement-among-at-risk-students/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[6] http://www.stevepavlina.com/blog/2012/07/dissolving-limiting-beliefs/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[7] https://book.douban.com/subject/4934590/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[8] https://book.douban.com/subject/5980113/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[9] http://cbtsanfrancisco.com/cbt-is-for-hackers/&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[10] https://blog.liberationist.org/this-idea-will-get-you-fired-928d816f8f64&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[11] http://journals.sagepub.com/doi/abs/10.1177/0956797610372631&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[12] https://practicingruby.com/articles/low-cost-approach-to-side-projects&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[13] https://www.goodreads.com/book/show/10645233-do-the-work&lt;/p&gt;&lt;p data-type=&quot;paragraph&quot;&gt;[14] https://markmanson.net/downloads/self-knowledge&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;封面题图来自https://unsplash.com/@jasmin_sessler&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>867ec2981b98efd8c8f445ddff87dabd</guid>
<title>第 062 期「码农周刊 VIP 会员专属邮件周报」今晚发送，请查收！</title>
<link>https://toutiao.io/k/s01gzxl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>5fae7fe93f491454b0093732e081464c</guid>
<title>了解这些软件设计思想，你的思维至少上升一个段位</title>
<link>https://toutiao.io/k/mjj6g4o</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;一、介绍&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念，四位作者合称 GOF（全拼 Gang of Four），简称四人帮！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书中共说到 23 种设计模式，这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，随着软件的快速发展，还出现另一类我们所熟知的设计模式：&lt;strong&gt;J2EE 设计模式&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先要跟大家说明的是，&lt;strong&gt;设计模式其实不是一项新技术&lt;/strong&gt;，而是众多软件开发人员经过相当长的一段时间的试用和试错总结出来的一套软件设计开发实践方案，学习这些知识有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也不BB了，下面我们就一起来深入了解一下大神们总结的这套方法论！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;二、方法论&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1、单一职责原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单一职责原则，顾名思义，一个类负责一个功能的处理，比如我们在代码中经常会涉及到调用第三方的接口，通常我们往往会将一个接口请求方法封装成一个&lt;code&gt;http&lt;/code&gt;请求的工具类，这样其他的调用方能非常方便的进行调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;单一职责原则，主要的目的是将一个功能划分到合适的粒度，让这些各自执行单一职责的类，各司其职。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有我们常常说的mvc模式，将数据操作与业务逻辑处理进行分离，也是属于单一职责原则的一种。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2、开闭原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;开闭原则，指的是：&lt;strong&gt;对扩展开放，对修改关闭&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的意思是在增加新功能的时候，&lt;strong&gt;能不改代码就尽量不要改，如果只增加代码就完成了新功能，那是最好的&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面我举个简单的例子，大家可能就懂了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际的项目开发过程中，尤其是与第三方公司进行接口对接的时候，例如 a 公司，他的接口协议要求采用&lt;code&gt;rsa&lt;/code&gt;加密；b 公司，他的接口协议采用&lt;code&gt;aes&lt;/code&gt;加密，c公司，他的接口协议要求采用&lt;code&gt;md5&lt;/code&gt;就可以了...&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在一开始的时候，可能你没有想那么多，设想所有其他公司跟你对接的时候，全部采用&lt;code&gt;rsa&lt;/code&gt;加密，那么当第二家公司来了时候，要求采用&lt;code&gt;aes&lt;/code&gt;，这个时候，你必须得改代码才能支持这种功能，假如又来了其他公司呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这种情况下，我们可以采用面向接口编程的思想，定义一个抽象的方法，然后针对不同的加密算法，编写不同的实现类，当新来了一家公司要求采用不同的加密算法时，我们只需要扩展一个新的实现类，在逻辑处理层进行路由即可快速完成开发和对接！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实现开闭原则的主要步骤就是将业务方法里面的逻辑进行抽象化，从而实现逻辑层面代码的解耦。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.3、里氏代换原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;里氏替换原则，通俗的说就是：子类可以扩展父类的功能，但不能改变父类原有的功能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说：&lt;strong&gt;子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当子类在重写父类的方法时，如果使用不当，很可能会改变父类方法中的逻辑语义，进而造成逻辑处理混乱。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际的业务开发中，尤其是大家在使用类继承操作时，应当谨慎重新父类方法，方法定义的时候，名称也尽量不要发生重名。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时，应该注意类过多的继承，例如 A 类继承自 B 类，B 类 继承自 C 类，C 类继承 D 类，这种场景下，第一：逻辑很可能非常复杂，代码可读性可能很差，第二种可能会出现方法名或者属性名冲突。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我曾经修改一个老项目 bug 的时候，就出现过这种情况，一个实体类出现三层关系的继承，当我把子类进行序列化成&lt;code&gt;json&lt;/code&gt;的时候，突然报错，原因就是因为里面有个属性，在基类里面也定义了，但是类型却不一样，也就是说在这个子类里面有两个相同的属性，只是字段类型不同而已，从而导致这个序列化报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，大家在使用类继承操作时，一定要谨慎处理，最好的情况下是一层关系继承，这样即使出现问题了，也好排查，范围可控；继承关系多了，反而代码变的非常复杂，每个方法逻辑都需要一一梳理清楚，你才敢去下手，这种情况下，反而为难了自己！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.4、依赖倒转原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依赖倒转原则，简单的说就是&lt;strong&gt;面向接口编程，依赖于抽象而不依赖于具体&lt;/strong&gt;，他是实现&lt;strong&gt;开闭原则&lt;/strong&gt;的一个途径。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;依赖倒转原则主要有以下几点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;高层的模块不应该依赖于低层的模块，这两者都应该依赖于其抽象&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;抽象不应该依赖细节&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;细节应该依赖抽象&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换句话说，就是将具体类里面的方法进行逻辑抽象化，提升到接口或者抽象类里面，由具体的实现类去实现具体的业务逻辑，抽象层不关注细节。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是我们俗称的，不管遇到啥事情，先看大局，在看小点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子，例如我们常常使用的&lt;code&gt;MVC&lt;/code&gt;框架，在&lt;code&gt;Service&lt;/code&gt;层通常会&lt;strong&gt;先编写接口类，然后在编写服务实现类，这就是典型的面向接口编程&lt;/strong&gt;，这种方案有哪些好处呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可以减少研发人员并行开发引起的风险&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以显著提高代码的可读性和可维护性&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可以降低类间的耦合性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个大项目开发的时候，试想一下，如果2个以上研发人员在编写同一个类的同一个方法，没有定义接口的情况下，随着时间的流逝，这个类大概率会非常混乱，同时，里面的方法估计阅读起来也很困难，一眼望去基本上不知道这个方法是干嘛的，尤其是重载方法很多的时候，尤其困难。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们引入接口之后，将所有的核心方法全部抽象定义，当我们对其进行二次开发的时，也会能快速定位到以前的和谐方法，然后进行快速定位和维护。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面向接口编程，还有一个很大的好处，就是可以降低类之间的耦合度。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.5、接口隔离原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接口隔离原则的意思是：&lt;strong&gt;尽量将一个接口拆的更细，使用多个隔离的接口，比使用单个接口要好&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个原则基本上是从大型软件架构出发、便于升级和维护的思想诞生出来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如，一个第三方保险服务系统里面，如果是小项目，你可以在一个接口里面定义&lt;code&gt;投保方法&lt;/code&gt;、&lt;code&gt;取消方法&lt;/code&gt;、 &lt;code&gt;退保方法&lt;/code&gt;、 &lt;code&gt;理赔方法&lt;/code&gt;、 &lt;code&gt;保单方法&lt;/code&gt;这5种方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你只跟一家保险公司合作的时候，这套接口定义是没问题的，但是假如现在公司的业务发展的非常快，已经引入10几家保险公司了，你会发现这个接口基本上顶不住了，在此有两种方法可以解决这种技术难题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;1、针对不同的保险公司，又重新定义一个接口，然后还是里面的5种方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;2、针对不同的操作行为，比如&lt;code&gt;投保&lt;/code&gt;，单独定义一套接口，然后针对不同的保险公司编写不同的实现类&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两种其实本质都是将一个接口，拆成多个颗粒度更细的接口，然后从行为上，让各种的实现类更加独立，进而降低类之间的耦合度，开发起来层次清晰，有利于系统的稳定！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.6、组合/聚合复用原则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;合成复用原则的意思就是：&lt;strong&gt;尽量使用组合/聚合的方式，而不是使用继承&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓&lt;strong&gt;组合/聚合的方式&lt;/strong&gt;，其实就是我们在&lt;code&gt;springMVC&lt;/code&gt;里面使用的&lt;code&gt;ioc&lt;/code&gt;依赖注入方式，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AService&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;/**&lt;br/&gt;     * ioc依赖注入&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; BService bService;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;//业务代码...&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AService&lt;/code&gt;类调用&lt;code&gt;BService&lt;/code&gt;类，有两种方式可以实现，第一种就是通过继承方式，可以直接调用；第二种方式就是通过&lt;code&gt;ioc&lt;/code&gt;依赖注入的方式，在类里面进行组合操作，然后进行调用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;很明显，第二种方式，我们使用的爱不释手&lt;/strong&gt;！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种方式有个好处就是，代码层次清晰，编写优雅，用上之后容易上瘾，推荐使用！&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.7、迪米特法则&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迪米特法则，又称最少知道原则，意思就是说：&lt;strong&gt;一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;类似单一原则的思想，例如我们编写实体类的时候，基本上就是属性名称，加&lt;code&gt;get/set&lt;/code&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt; &lt;span&gt;/**&lt;br/&gt;     * 用户id&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Long userId;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;/**&lt;br/&gt;     * 用户姓名&lt;br/&gt;     */&lt;/span&gt;&lt;br/&gt; &lt;span&gt;private&lt;/span&gt; String userName;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Long &lt;span&gt;getUserId&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.userId;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setUserId&lt;/span&gt;&lt;span&gt;(Long userId)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.userId = userId;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; String &lt;span&gt;getUserName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.userName;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;setUserName&lt;/span&gt;&lt;span&gt;(String userName)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;this&lt;/span&gt;.userName = userName;&lt;br/&gt; }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当一个实体里面出现跟自己没太大关系的代码时，例如数据运算逻辑处理，这个时候应当将这部分代码全部清理出去，交由业务处理层来出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从实体类的定义来说，它主要的功能就是承担数据展示，当多个业务处理层在使用这个实体类的时候，如果你们嵌套了很多的数据运算逻辑，可能在返回的时候，客户端得到的实体类的属性值，并不是正确的结果！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;三、小结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面一共介绍了 7 种设计原则，基本上都是大神们经过很多次血的教训，总结出来的一套方法论。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些设计原则，可以给同行在实际的软件设计过程中，提供一些思路，具体的应用，还需要结合实际的业务场景进一步思考，怎么让系统变的更加可靠，开发更佳迅速，代码阅读起来更佳轻松，关键在于灵活运用！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>92f19a75952364b042e3d20774d521b5</guid>
<title>Vue 刷新页面有哪几种方式</title>
<link>https://toutiao.io/k/pha8yz4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entryContent&quot;&gt;&amp;#13;
        &lt;p&gt;在Vue项目中，刷新当前页除了 &lt;code&gt;window.reload()&lt;/code&gt;，你还能想到什么办法？而且这种办法会重新加载资源出现短暂的空白页面。体验不是很好。&lt;/p&gt;
&lt;p&gt;在某个详情页面的时候，我们经常需要通过路由中的详情 &lt;code&gt;id&lt;/code&gt; 去获取内容，当我们在不同的详情页来回切换的时候，打开的页面是同一个，只是需要通过监听路由中的参数 &lt;code&gt;id&lt;/code&gt; 的变化去重新请求详情接口。&lt;/p&gt;
&lt;p&gt;如果这个详情页只需要一个接口还好，只需要通过 &lt;code&gt;watch&lt;/code&gt; 去监听，里面做数据请求就好。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-csharp&quot;&gt;watch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    $route&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      immediate&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;Detail&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
          &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&amp;#13;
           &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那一旦这个页面有很多的接口，数据逻辑依赖很复杂的时候，这个时候再写一推的监听就很容易出现屎山代码。而且不好维护。&lt;/p&gt;
&lt;p&gt;此时我们最希望的是进入每个详情页都刷新页面，也就是重新加载一遍组件。怎么去维护好一个全局刷新页面的方法去更新路由组件？&lt;/p&gt;
&lt;p&gt;我们可以通过在 &lt;code&gt;App.vue&lt;/code&gt; 里定义一个 &lt;code&gt;reload&lt;/code&gt; 方法，通过&lt;code&gt;provide&lt;/code&gt; 和 &lt;code&gt;inject&lt;/code&gt; 来抛出和注入到其它页面使用。&lt;/p&gt;
&lt;p&gt;而最终的重担落在这个 &lt;code&gt;reload&lt;/code&gt; 方法身上，其实也简单，这个方法主要的做的事是控制一个变量的值来控制整个页面的路由组件移除和显示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;router-view &lt;span class=&quot;token attr-name&quot;&gt;v-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;isRouterAlive&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;js language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#x27;App&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token function&quot;&gt;provide&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      reload&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reload&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      isRouterAlive&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
  methods&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRouterAlive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$nextTick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRouterAlive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在其它页面注入该方法直接调用即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
  inject&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#x27;reload&#x27;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&amp;#13;
&amp;#13;
  methods&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token function&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&amp;#13;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际项目中经常有各种曲线救国的思路可以帮我们解决很多问题。遇到问题一定要发散下思维，这个时候搞懂原理，再结合各种特性才能想到解决办法。&lt;/p&gt;
&lt;p&gt;实践告诉我们文档中的方法很正，但是并不能解决所有的问题。往往需要根据文档中的多个特性相结合找到思路。&lt;/p&gt;
    &lt;/div&gt;&amp;#13;
&amp;#13;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>