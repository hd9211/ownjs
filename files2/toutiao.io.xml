<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4c331bea8e8f57d53602a42fd0839af5</guid>
<title>好的自我介绍，面试成功一大半</title>
<link>https://toutiao.io/k/lpyu6km</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p data-tools=&quot;西瓜插件，运行于电脑浏览器上的插件，可在公众号后台找优质文章素材，一键美化排版，检测文章违规，查看任意公众号粉丝阅读数&quot; data-label=&quot;Power by：chajian.xiguaji.com&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;这里是Z哥的个人公众号&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;每周五11：45 按时送达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;当然了，也会时不时加个餐～&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的第「164」篇原创敬上&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;大家好，我是Z哥。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于面试时的自我介绍，我想大家遇到的情况都差不多，大部分面试的第一个环节基本都是这个。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;每个人也都知道留下好的第一印象很重要，但我估计很多人对这件事的解决方式，也就在网上找个自我介绍的模版就完事了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;先不说你找的模版会不会过于普通，导致面试官听到的千篇一律。更重要的是，如果你搞不清楚自我介绍背后的深意和价值，哪怕是套用模版也只是学了它的“形”而没学到“神”，效果自然不会太好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我做面试官也有将近6年时间了，不管是从我自己的感受还是与其他面试官的交流后得到的信息来看，自我介绍环节能让人有惊喜的，只要后面不太“拉胯”基本都能被录用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;心理学中有一个概念阐述了这背后的原因——「&lt;/span&gt;&lt;strong&gt;&lt;span&gt;首因效应&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;」，由美国心理学家洛钦斯提出。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;71&quot; data-source-title=&quot;维基百科&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;首因效应是对“第一印象”或“先入为主”所产生的心理学现象，指在行为过程中，最先接触的事物会给人留下深刻的感知或认知，影响人对事物的感知和判断。&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;blockquote_info js_blockquote_source&quot; data-json=&quot;%7B%22type%22%3A%22out%22%2C%22source%22%3A%22url%22%2C%22digest%22%3A%22%22%2C%22digestLen%22%3A71%2C%22text%22%3A%22%E9%A6%96%E5%9B%A0%E6%95%88%E5%BA%94%E6%98%AF%E5%AF%B9%E2%80%9C%E7%AC%AC%E4%B8%80%E5%8D%B0%E8%B1%A1%E2%80%9D%E6%88%96%E2%80%9C%E5%85%88%E5%85%A5%E4%B8%BA%E4%B8%BB%E2%80%9D%E6%89%80%E4%BA%A7%E7%94%9F%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E7%8E%B0%E8%B1%A1%EF%BC%8C%E6%8C%87%E5%9C%A8%E8%A1%8C%E4%B8%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E6%9C%80%E5%85%88%E6%8E%A5%E8%A7%A6%E7%9A%84%E4%BA%8B%E7%89%A9%E4%BC%9A%E7%BB%99%E4%BA%BA%E7%95%99%E4%B8%8B%E6%B7%B1%E5%88%BB%E7%9A%84%E6%84%9F%E7%9F%A5%E6%88%96%E8%AE%A4%E7%9F%A5%EF%BC%8C%E5%BD%B1%E5%93%8D%E4%BA%BA%E5%AF%B9%E4%BA%8B%E7%89%A9%E7%9A%84%E6%84%9F%E7%9F%A5%E5%92%8C%E5%88%A4%E6%96%AD%E3%80%82%22%2C%22article%22%3A%7B%7D%2C%22hasReportOverSize%22%3Afalse%2C%22editorReportData%22%3A%5B%7B%22id%22%3A%22122333%22%2C%22key%22%3A%2276%22%2C%22len%22%3A1%7D%5D%2C%22from%22%3A%22%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%22%7D&quot;&gt;&lt;span class=&quot;blockquote_other&quot;&gt;维基百科&lt;/span&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;那么我们如何能够把握住这个机会，借助「首因效应」让你在激烈的岗位竞争中占得先机呢？自然就得做好自我介绍的准备，下面我就来分享一些我的经验。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/01  自我介绍的意义/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多人都会告诉你，自我介绍是你主动展示自己更多信息的机会，所以自我介绍的时候要讲一些简历里没有提到的内容。这个方式没错，但是思路其实不完全对。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;阐述一个残酷的现实，面试你的面试官不一定就是筛选你简历的人，大家平时工作都很忙的，他很可能没有看过你的简历。所以自我介绍环节不但是你主动展示自己的机会，也是让面试官现场评估你简历的“刚需”环节。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以重点来了，你脑子里一定要有这样一个画面：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;我在向一个一心二用的人做自我介绍&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这个场景下，你的终极目的是：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;提醒他注意到你的亮点，以及为什么适合这个职位&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;知己知彼才能百战不殆，那么对于面试官来说，除了获得了一个熟悉你简历的缓冲期还有什么意义呢？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;破冰。两个陌生人之间建立良好沟通的方式永远是开放性问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;初步判断你的沟通能力。在一个组织协作的中，1对1的对话是常见的场景，能不能把话讲明白决定了你未来与他人一起共事的能力下限。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;初步判断你的逻辑能力。通过你自我介绍阐述的内容顺序、结构，判断你的逻辑能力如何，是有条不紊的、还是混乱的。这决定了你未来做事能力的上限。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;判断你的可塑性。这个大多数时候只是一种感觉，感觉从何而来？除了语言外，你的表情、眼神等肢体语言也能传递出相关的信号。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;搞清楚了自我介绍的意义，那么我们就可以提炼出一些要点了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;/02  六个要点/&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;01&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;时长控制&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般来说，好的简历最多不超过3页A4纸，所以自我介绍不用准备的太长。因为面试官熟悉完你的简历后基本上就要准备发问了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大多数人快速阅读一页A4纸的内容大概也就1分钟，所以我建议自我介绍的时长控制在（简历页数*60 + 30）秒左右。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如，你的简历是3页，那么就是210秒，3分半；2页是150秒，2分半。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你是职场新人，那么最好能多准备一段1分钟左右的精简版，以防群面的时候做自我介绍。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;02&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;内容构成&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;首先大家都知道的一点是，不要重复复述简历上的个人介绍，这就不多说了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外需要注意的是，不同的工作时长自我介绍的侧重点应该是不同的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;比如你作为一个拥有8年丰富工作经验的人，做自我介绍的时候还在花不少时间突出自己学习能力强、抗压能力强，其实反而会起反面效果（实际这样的人还不少）。而更应该突出自己解决问题的能力和所创造的价值。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于不同资历的人需要阐述的内容组成，我大概划分了三个维度做了一个表供你参考，三个维度分别是：行业经历、业绩体现、可塑性。你在准备内容的时候可以参考这个比例来。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.410958904109589&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/oB5bd6W6hI1YM0H3SbSu8C7sic16c1JslJOpa23NQ6oBgCQR9plLChJOWgXcvt58R9dzW4wYCmI2YMmkAD78CRQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;如果你对自己的能力有自信，也可以提高一级来写。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;03&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;精简内容&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;具体的内容信息就像写作文、写报告一样，内容太拖沓，会让人觉得你的逻辑不清晰，概括能力差，没有重点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;要知道，对逻辑能力的印象其实就是在别人眼里你是不是一个聪明人。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，尽量把不影响信息完整性的那部分文字删掉，比如一些空话（只说自己学习能力强，并不举例），一些修饰性形容词什么的。然后再把剩下的内容按照某个顺序组织起来，并且要把why和how讲清楚。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;04&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;量化相关指标&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数字自己会说话，能量化的地方尽量去量化，这样可以减少很多冗长的文字描述。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;05&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;注意做好内容承接准备，不要给自己挖坑&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多时候，面试官在你的自我介绍中发现了一个亮点，他后续会基于这个亮点展开来向你提问。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;所以，在自我介绍部分你千万不能吹牛，不要把别人的业绩说成你的，否则面试官问你是怎么做到的，具体的细节是什么？你却支支吾吾的，那基本就要请你回家了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;06&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;语气不要过于谦虚&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这点对有一定工作年限的小伙伴非常重要。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;职场新人谦虚一点也可以理解，但是作为老人，如果过度的谦虚，会让人觉得，你要么不够自信，在以后的工作中会出现沟通不畅的问题；要么是自身能力达不到你阐述的和简历上写的，心虚。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，意义和要点都清楚了，那么具体该怎么准备内容呢？你可以试试&lt;/span&gt;&lt;strong&gt;&lt;span&gt;「PME」框架&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;「PME」中的三个字母分别表示热情（Passion）、匹配（Match）、出众（Excellence）。思路是，先展现出你对这个行业、这个岗位的「热情」，然后证明你是「匹配」这个岗位的，最后再亮出自己「出众」的地方说明比其他候选人更棒。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;体现Passion，你可以从下面三个方向入手：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你对该领域有深入的体验或研究&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。比如说你就读的是计算机相关的专业、学习过十几个「某时间」的课程等、看多二十多本XX领域的书。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;你时刻关注该领域动态&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。比如说你经常浏览XX网站、XX社区，会对各个大厂新出的框架花几天时间去折腾一下。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你的兴趣爱好相近&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;。比如你平常会写点东西，会把所学到的知识重新整理后发表在自己的博客上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;体现Match，需要从你过去的经历中做两件事情：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;体现Excellence就是做好一点：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;用数字量化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。比如，你通过引入了某个技术框架，并做了二次改造，使得某个系统的负载上限提高了3倍，资源消耗降低 了50%。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;体现Excellence是最后一部分内容，也是最重要的内容，因为这里说的内容是在表达你比别人牛逼，所以&lt;/span&gt;&lt;strong&gt;&lt;span&gt;很容易成为面试官接下去发问的点&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，不过你这也是一个你引导面试导向的一个机会，所以要把握好。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后来举个例子，感受一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;212&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;我叫 XX，就读于 XX 大学 XX 专业。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我每周会写博客，会将当周从书本或者「某时间」的课程上学到的知识进行整理，并用自己的语言写出来分享给所有人，对软件开发行业充满兴趣。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;我了解到贵公司有对分布式系统方面的要求，恰好我在上一家公司的系统就是分布式的。我在其中工作了3年，主导过多项核心技术的落地。比如在XX年，我引入了XXX框架并做了二次改造，使得某个系统的负载上限提高了3倍，资源消耗降低 了50%。&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;所以对于胜任当前的岗位很有信心。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，以后可千万不能再做下面这样的自我介绍了哦。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;98&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;我叫 XX，就读于 XX 大学 XX 专业，之前是 XX 公司的高级软件工程师。我在该公司负责的工作是A系统、B系统、C系统、……的开发。现在应聘贵公司高级软件工程师岗位，希望能得到这个宝贵的机会，非常感谢！&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;好了，总结一下。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这篇呢，Z哥和你聊的是面试的时候自我介绍这件事。虽然这是一件很小的事，但是由于「&lt;/span&gt;&lt;strong&gt;&lt;span&gt;首因效应&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;」的存在，它对你能否拿到offer起到的作用可不小。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自我介绍的意义其实除了展现你自己之外，大多数时候也是面试官熟悉你简历的时候，所以面对这样一个一心二用的人，你要注意以下六个要点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时长控制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;内容构成。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;精简内容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;量化相关指标。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;注意做好内容承接准备，不要给自己挖坑&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;语气不好过于谦虚。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如果你还是无从下手，可以使用「PME」结构来试试。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;就这么多，希望对你有所帮助。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;原创不易，如果你觉得这篇文章还不错，就「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在看&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」或者「&lt;/span&gt;&lt;span&gt;&lt;strong&gt;分享&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;」一下吧。鼓励我的创作 ：）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4428822495606327&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/oB5bd6W6hI1Xrkr3iaFRP5fErfmjHqlBw160icnia8yicWBlicnPEfqGE80alzGl9FLj6FxyuibIuliceoH9zicibj95loQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1138&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你有关于软件架构、分布式系统、产品、运营的困惑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以试试点击「&lt;strong&gt;阅读原文&lt;/strong&gt;」&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7ba2146373f79b26545e3b8c9f386d04</guid>
<title>全网最全 Log 配置教程及框架性能比较，看这篇就够了</title>
<link>https://toutiao.io/k/d1m5297</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;一、摘要&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不管是使用何种编程语言，何种框架，日志输出几乎无处不再，也是任何商业软件中必不可少的一部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结起来，日志的用途大致可以归纳成以下三种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;问题追踪&lt;/strong&gt;：通过日志不仅仅包括我们程序的一些bug，也可以在安装配置时，通过日志可以发现问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;状态监控&lt;/strong&gt;：通过实时分析日志，可以监控系统的运行状态，做到早发现问题、早处理问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;安全审计&lt;/strong&gt;：审计主要体现在安全上，通过对日志进行分析，可以发现是否存在非授权的操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 Java 编程语言为例，打印日志的方式有很多，例如通过&lt;code&gt;System.out.print()&lt;/code&gt;方法将关键信息输出到控制台，也可以通过 JDK 自带的日志&lt;code&gt;Logger&lt;/code&gt;类输出，虽然 JDK 从1.4开始支持日志输出，但是功能单一，无法更好的满足商业要求，于是诞生了很多第三方日志库，像我们所熟悉的主流框架&lt;code&gt;log4j&lt;/code&gt;、&lt;code&gt;log4j2&lt;/code&gt;、&lt;code&gt;logback&lt;/code&gt;等，提供的 API 功能都远胜 JDK 提供的&lt;code&gt;Logger&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;二、Log4j&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1、介绍&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Log4j 是一种非常流行的日志框架，由&lt;code&gt;Ceki Gülcü&lt;/code&gt;首创，之后将其开源贡献给 Apache 软件基金会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Log4j 有三个主要的组件：&lt;code&gt;Loggers&lt;/code&gt;(记录器)，&lt;code&gt;Appenders&lt;/code&gt; (输出源)和&lt;code&gt;Layouts&lt;/code&gt;(布局)。这里可简单理解为&lt;strong&gt;日志类别&lt;/strong&gt;、&lt;strong&gt;日志要输出的地方&lt;/strong&gt;和&lt;strong&gt;日志以何种形式输出&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Log4j 的架构大致如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.35379061371841153&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/laEmibHFxFw4AzzT8jZibLlgwC0zwdoX4afMA3jjukl0ypPKHjKYRUricAgia4ajRZmARsXgA4LicczAh6maqIL02Cg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1108&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们使用 Log4j 输出一条日志时，Log4j 自动通过不同的&lt;code&gt;Appender&lt;/code&gt;（输出源）把同一条日志输出到不同的目的地。例如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;console&lt;/strong&gt;：输出到屏幕；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;file&lt;/strong&gt;：输出到文件；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;socket&lt;/strong&gt;：通过网络输出到远程计算机；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;jdbc&lt;/strong&gt;：输出到数据库&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在输出日志的过程中，通过&lt;code&gt;Filter&lt;/code&gt;来过滤哪些&lt;code&gt;log&lt;/code&gt;需要被输出，哪些&lt;code&gt;log&lt;/code&gt;不需要被输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在&lt;code&gt;Loggers&lt;/code&gt;(记录器)组件中，级别分五种：&lt;code&gt;DEBUG&lt;/code&gt;、&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;ERROR&lt;/code&gt;和&lt;code&gt;FATAL&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这五个级别是有顺序的，&lt;code&gt;DEBUG&lt;/code&gt; &amp;lt; &lt;code&gt;INFO&lt;/code&gt; &amp;lt; &lt;code&gt;WARN&lt;/code&gt; &amp;lt; &lt;code&gt;ERROR&lt;/code&gt; &amp;lt; &lt;code&gt;FATAL&lt;/code&gt;，分别用来指定这条日志信息的重要程度，明白这一点很重要，&lt;code&gt;Log4j&lt;/code&gt;有一个规则：&lt;strong&gt;只输出级别不低于设定级别的日志信息&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;假设&lt;code&gt;Loggers&lt;/code&gt;级别设定为&lt;code&gt;INFO&lt;/code&gt;，则&lt;code&gt;INFO&lt;/code&gt;、&lt;code&gt;WARN&lt;/code&gt;、&lt;code&gt;ERROR&lt;/code&gt;和&lt;code&gt;FATAL&lt;/code&gt;级别的日志信息都会输出，而级别比&lt;code&gt;INFO&lt;/code&gt;低的&lt;code&gt;DEBUG&lt;/code&gt;则不会输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后，通过&lt;code&gt;Layout&lt;/code&gt;来格式化日志信息，例如，自动添加日期、时间、方法名称等信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体输出样式配置，可以参考如下内容Log4j2 - Layouts布局介绍&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2、项目应用&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以 Java 项目为例，在 Maven 的&lt;code&gt;pom.xml&lt;/code&gt;中添加如下依赖！&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.1、添加 maven 依赖&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;1.6.6&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;1.6.6&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;&amp;lt;/dependencies&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.2、创建log4j配置&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在实际应用中，要使&lt;code&gt;Log4j&lt;/code&gt;在系统中运行须事先设定配置文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;配置文件实际上也就是对&lt;code&gt;Logger&lt;/code&gt;、&lt;code&gt;Appender&lt;/code&gt;及&lt;code&gt;Layout&lt;/code&gt;进行相应设定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Log4j&lt;/code&gt;支持两种配置文件格式，一种是&lt;code&gt;XML&lt;/code&gt;格式的文件，一种是&lt;code&gt;properties&lt;/code&gt;属性文件，二选一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创建一个log4j.xml或者log4j.properties，将其放入项目根目录下。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、XML格式&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;?xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;br/&gt;&amp;lt;!DOCTYPE log4j:configuration PUBLIC &lt;span&gt;&quot;-//APACHE//DTD LOG4J 1.2//EN&quot;&lt;/span&gt; &lt;span&gt;&quot;log4j.dtd&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;log4j:configuration xmlns:log4j=&lt;span&gt;&quot;http://jakarta.apache.org/log4j/&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;!-- 控制台输出配置 --&amp;gt;&lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;console&quot;&lt;/span&gt; class=&lt;span&gt;&quot;org.apache.log4j.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 目标为控制台 --&amp;gt;&lt;br/&gt;        &amp;lt;param name=&lt;span&gt;&quot;Target&quot;&lt;/span&gt; value=&lt;span&gt;&quot;System.out&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;layout class=&lt;span&gt;&quot;org.apache.log4j.PatternLayout&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 输出格式 --&amp;gt;&lt;br/&gt;            &amp;lt;param name=&lt;span&gt;&quot;ConversionPattern&quot;&lt;/span&gt; value=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %l %m%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/layout&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt;    &amp;lt;!-- 文件输出配置 --&amp;gt;&lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;log_file&quot;&lt;/span&gt; class=&lt;span&gt;&quot;org.apache.log4j.DailyRollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 目标为文件 --&amp;gt;&lt;br/&gt;        &amp;lt;param name=&lt;span&gt;&quot;File&quot;&lt;/span&gt; value=&lt;span&gt;&quot;/logs/log/file.log&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;!-- 向文件追加输出 --&amp;gt;&lt;br/&gt;        &amp;lt;param name=&lt;span&gt;&quot;Append&quot;&lt;/span&gt; value=&lt;span&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;!-- 每个小时生成一个&lt;span&gt;log&lt;/span&gt; --&amp;gt;&lt;br/&gt;        &amp;lt;param name=&lt;span&gt;&quot;DatePattern&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&#x27;.&#x27;yyyy-MM-dd-HH&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;layout class=&lt;span&gt;&quot;org.apache.log4j.PatternLayout&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 输出格式 --&amp;gt;&lt;br/&gt;            &amp;lt;param name=&lt;span&gt;&quot;ConversionPattern&quot;&lt;/span&gt; value=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %l %m%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/layout&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt;    &amp;lt;!-- Application Loggers --&amp;gt;&lt;br/&gt;    &amp;lt;logger name=&lt;span&gt;&quot;org.example&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;level value=&lt;span&gt;&quot;info&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;/logger&amp;gt;&lt;br/&gt;    &amp;lt;!-- 根目录 --&amp;gt;&lt;br/&gt;    &amp;lt;!-- Root Logger --&amp;gt;&lt;br/&gt;    &amp;lt;root&amp;gt;&lt;br/&gt;        &amp;lt;priority value=&lt;span&gt;&quot;info&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;console&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;log_file&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;/root&amp;gt;&lt;br/&gt;&amp;lt;/log4j:configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、XML格式&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;log4j.rootLogger=INFO,M,C,E&lt;br/&gt;log4j.additivity.monitorLogger=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# INFO级别文件输出配置&lt;/span&gt;&lt;br/&gt;log4j.appender.M=org.apache.log4j.DailyRollingFileAppender&lt;br/&gt;log4j.appender.M.File=/logs/info.log&lt;br/&gt;log4j.appender.M.ImmediateFlush=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;log4j.appender.M.BufferedIO=&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;log4j.appender.M.BufferSize=16384&lt;br/&gt;log4j.appender.M.Append=&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;log4j.appender.M.Threshold=INFO&lt;br/&gt;log4j.appender.M.DatePattern=&lt;span&gt;&#x27;.&#x27;&lt;/span&gt;yyyy-MM-dd&lt;br/&gt;log4j.appender.M.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.M.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %p %l %m %n&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# ERROR级别文件输出配置&lt;/span&gt;&lt;br/&gt;log4j.appender.E=org.apache.log4j.DailyRollingFileAppender&lt;br/&gt;log4j.appender.E.File=/logs/error.log&lt;br/&gt;log4j.appender.E.ImmediateFlush=&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;log4j.appender.E.Append=&lt;span&gt;true&lt;/span&gt;&lt;br/&gt;log4j.appender.E.Threshold=ERROR&lt;br/&gt;log4j.appender.E.DatePattern=&lt;span&gt;&#x27;.&#x27;&lt;/span&gt;yyyy-MM-dd&lt;br/&gt;log4j.appender.E.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.E.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} %p %l %m %n&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 控制台输出配置&lt;/span&gt;&lt;br/&gt;log4j.appender.C=org.apache.log4j.ConsoleAppender&lt;br/&gt;log4j.appender.C.Threshold=INFO&lt;br/&gt;log4j.appender.C.layout=org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.C.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %l %m %n&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.3、log4j使用&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在需要打印日志的类中，引入&lt;code&gt;Logger&lt;/code&gt;类，在需要的地方打印即可！&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; org.example.log4j.service;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogPrintUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;/**log静态常量*/&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(LogPrintUtil&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;            logger.info(&lt;span&gt;&quot;info信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.warn(&lt;span&gt;&quot;warn信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.error(&lt;span&gt;&quot;error信息&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然你还可以这样写&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;if&lt;/span&gt;(logger.isInfoEnabled()) {&lt;br/&gt;    logger.info(&lt;span&gt;&quot;info信息&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;if&lt;/span&gt;(logger.isWarnEnabled()) {&lt;br/&gt;    logger.warn(&lt;span&gt;&quot;warn信息&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2.4、isInfoEnabled()有何作用呢？&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单来说，&lt;strong&gt;在某些场景下&lt;/strong&gt;，用&lt;code&gt;isInfoEnabled()&lt;/code&gt;方法判断下是能提升性能的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;例如我们打印这段内容&lt;code&gt;logger.info(&quot;User:&quot; + userId + appId)&lt;/code&gt;，程序在打印这行代码时，先对内容&lt;code&gt;(&quot;User:&quot; + userId + appId)&lt;/code&gt;进行字符串拼接，然后再输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果当前配置文件中日志输出级别是&lt;code&gt;info&lt;/code&gt;，是直接输出的，当日志输出级别是&lt;code&gt;error&lt;/code&gt;时，&lt;code&gt;logger.info()&lt;/code&gt;的内容时不输出的，但是我们却进行了字符串拼接，如果加上&lt;code&gt;if(logger.isInfoEnabled())&lt;/code&gt;进行一次判定，&lt;code&gt;logger.info()&lt;/code&gt;就不会执行，从而更好的提升性能，这个尤其是在高并发和复杂&lt;code&gt;log&lt;/code&gt;打印情况下提升非常显著。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外，&lt;code&gt;ERROR&lt;/code&gt;及其以上级别的log信息是一定会被输出的，所以只有&lt;code&gt;logger.isDebugEnabled&lt;/code&gt;、&lt;code&gt;logger.isInfoEnabled&lt;/code&gt;和&lt;code&gt;logger.isWarnEnabled()&lt;/code&gt;方法，而没有&lt;code&gt;logger.isErrorEnabled&lt;/code&gt;方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;三、Log4j2&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.1、介绍&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;log4j2 是 log4j 1.x 的升级版，参考了 logback 的一些优秀的设计，并且修复了一些问题，因此带来了一些重大的提升，主要特点有：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3508541392904074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/laEmibHFxFw4AzzT8jZibLlgwC0zwdoX4aGuZzJ0ngoiba7ksTVPWaBE6UlK8095kMyqmPv2lbyatOZphGicW33SWA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;761&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;异常处理&lt;/strong&gt;：在logback中，Appender中的异常不会被应用感知到，但是在log4j2中，提供了一些异常处理机制。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;性能提升&lt;/strong&gt;， log4j2相较于log4j 1和logback都具有很明显的性能提升，后面会有官方测试的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;自动重载配置&lt;/strong&gt;：参考了logback的设计，当然会提供自动刷新参数配置，最实用的就是我们在生产上可以动态的修改日志的级别而不需要重启应用——那对监控来说，是非常敏感的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;无垃圾机制&lt;/strong&gt;：log4j2在大部分情况下，都可以使用其设计的一套无垃圾机制，避免频繁的日志收集导致的jvm gc。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2、项目应用&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.1、添加 maven 依赖&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;br/&gt;    &amp;lt;!-- slf4j核心包 --&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;1.7.13&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;!--用于与common-log保持桥接 --&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;jcl-over-slf4j&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;1.7.13&amp;lt;/version&amp;gt;&lt;br/&gt;        &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;!--核心log4j2jar包 --&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;log4j-api&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;2.4.1&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;2.4.1&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;!--用于与slf4j保持桥接 --&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;log4j-slf4j-impl&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;2.4.1&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;    &amp;lt;!--需要使用log4j2的AsyncLogger需要包含disruptor --&amp;gt;&lt;br/&gt;    &amp;lt;dependency&amp;gt;&lt;br/&gt;        &amp;lt;groupId&amp;gt;com.lmax&amp;lt;/groupId&amp;gt;&lt;br/&gt;        &amp;lt;artifactId&amp;gt;disruptor&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;version&amp;gt;3.2.0&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;&lt;br/&gt;&amp;lt;/dependencies&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.2、创建log4j2配置&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在项目的根目录下创建一个&lt;code&gt;log4j2.xml&lt;/code&gt;的文件，与&lt;code&gt;log4j&lt;/code&gt;相比，&lt;code&gt;log4j2&lt;/code&gt;的异步输出日志性能非常强劲，配置如下：&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、同步输出日志&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;?xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;br/&gt;&amp;lt;!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时。&lt;br/&gt; 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大1MB一个文件， &lt;br/&gt;    文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 ，最多存放20个文件--&amp;gt;&lt;br/&gt;&amp;lt;Configuration status=&lt;span&gt;&quot;error&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;!-- 配置日志文件输出目录，此配置将日志输出到根目录下的指定文件夹 --&amp;gt;&lt;br/&gt;    &amp;lt;Properties&amp;gt;&lt;br/&gt;        &amp;lt;Property name=&lt;span&gt;&quot;fileDir&quot;&lt;/span&gt;&amp;gt;/logs/log4j2&amp;lt;/Property&amp;gt;&lt;br/&gt;        &amp;lt;Property name=&lt;span&gt;&quot;fileHistory&quot;&lt;/span&gt;&amp;gt;/logs/log4j2/&lt;span&gt;history&lt;/span&gt;&amp;lt;/Property&amp;gt;&lt;br/&gt;    &amp;lt;/Properties&amp;gt;&lt;br/&gt;    &amp;lt;Appenders&amp;gt;&lt;br/&gt;        &amp;lt;!-- 优先级从高到低分别是 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL --&amp;gt;&lt;br/&gt;        &amp;lt;!-- 单词解释：Match：匹配 DENY：拒绝 Mismatch：不匹配 ACCEPT：接受 --&amp;gt;&lt;br/&gt;        &amp;lt;!-- DENY，日志将立即被抛弃不再经过其他过滤器；NEUTRAL，有序列表里的下个过滤器过接着处理日志；ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&amp;gt;&lt;br/&gt;        &amp;lt;!--输出日志的格式&lt;br/&gt;        %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间&lt;br/&gt;        %t 输出当前线程名称&lt;br/&gt;        %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0&lt;br/&gt;        %logger 输出logger名称，因为Root Logger没有名称，所以没有输出&lt;br/&gt;        %msg 日志文本&lt;br/&gt;        %n 换行&lt;br/&gt;        其他常用的占位符有：&lt;br/&gt;        %F 输出所在的类文件名，如Client.java&lt;br/&gt;        %L 输出行号&lt;br/&gt;        %M 输出所在方法名&lt;br/&gt;        %l  输出语句所在的行数, 包括类名、方法名、文件名、行数&lt;br/&gt;         --&amp;gt;&lt;br/&gt;        &amp;lt;!--这个输出控制台的配置，这里输出all信息到System.out --&amp;gt;&lt;br/&gt;        &amp;lt;console name=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; target=&lt;span&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 输出日志的格式 --&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/console&amp;gt;&lt;br/&gt;        &amp;lt;!--这个输出文件的配置，这里输出info信息到junbao_info.log --&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileInfo&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/info.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/info/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 此Filter意思是，只输出info级别的数据 DENY，日志将立即被抛弃不再经过其他过滤器；NEUTRAL，有序列表里的下个过滤器过接着处理日志； &lt;br/&gt;                    ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;            &amp;lt;!-- 如果启用此配置，则日志会按文件名生成新文件， 即如果filePattern配置的日期格式为 %d{yyyy-MM-dd HH} &lt;br/&gt;                    ，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d{yyyy-MM-dd} ，则天生成一个压缩文件,默认为1 --&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;!-- 每个日志文件最大1MB,超过1MB生产新的文件 ; --&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;             &amp;lt;!--文件夹下最多的文件个数--&amp;gt;  &lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileWarn&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/warn.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/warn/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;warn&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileError&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/error.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/error/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;error&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;    &amp;lt;/Appenders&amp;gt;&lt;br/&gt;    &amp;lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 --&amp;gt;&lt;br/&gt;    &amp;lt;Loggers&amp;gt;&lt;br/&gt;        &amp;lt;!--全异步输出info级以上的日志信息--&amp;gt; &lt;br/&gt;        &amp;lt;!-- &amp;lt;asyncRoot level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; includeLocation=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;RollingFileInfo&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/asyncRoot&amp;gt; --&amp;gt;&lt;br/&gt;        &amp;lt;!--同步输出info级以上的日志信息--&amp;gt; &lt;br/&gt;        &amp;lt;root level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; includeLocation=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/root&amp;gt;&lt;br/&gt;    &amp;lt;/Loggers&amp;gt;&lt;br/&gt;&amp;lt;/Configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、异步输出日志&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;?xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;br/&gt;&amp;lt;!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时。&lt;br/&gt; 注：本配置文件的目标是将不同级别的日志输出到不同文件，最大1MB一个文件， &lt;br/&gt;    文件数据达到最大值时，旧数据会被压缩并放进指定文件夹 ，最多存放20个文件--&amp;gt;&lt;br/&gt;&amp;lt;Configuration status=&lt;span&gt;&quot;error&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;!-- 配置日志文件输出目录，此配置将日志输出到根目录下的指定文件夹 --&amp;gt;&lt;br/&gt;    &amp;lt;Properties&amp;gt;&lt;br/&gt;        &amp;lt;Property name=&lt;span&gt;&quot;fileDir&quot;&lt;/span&gt;&amp;gt;/logs/log4j2&amp;lt;/Property&amp;gt;&lt;br/&gt;        &amp;lt;Property name=&lt;span&gt;&quot;fileHistory&quot;&lt;/span&gt;&amp;gt;/logs/log4j2/&lt;span&gt;history&lt;/span&gt;&amp;lt;/Property&amp;gt;&lt;br/&gt;    &amp;lt;/Properties&amp;gt;&lt;br/&gt;    &amp;lt;Appenders&amp;gt;&lt;br/&gt;        &amp;lt;!-- 优先级从高到低分别是 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL --&amp;gt;&lt;br/&gt;        &amp;lt;!-- 单词解释：Match：匹配 DENY：拒绝 Mismatch：不匹配 ACCEPT：接受 --&amp;gt;&lt;br/&gt;        &amp;lt;!-- DENY，日志将立即被抛弃不再经过其他过滤器；NEUTRAL，有序列表里的下个过滤器过接着处理日志；ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&amp;gt;&lt;br/&gt;        &amp;lt;!--输出日志的格式&lt;br/&gt;        %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间&lt;br/&gt;        %t 输出当前线程名称&lt;br/&gt;        %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0&lt;br/&gt;        %logger 输出logger名称，因为Root Logger没有名称，所以没有输出&lt;br/&gt;        %msg 日志文本&lt;br/&gt;        %n 换行&lt;br/&gt;        其他常用的占位符有：&lt;br/&gt;        %F 输出所在的类文件名，如Client.java&lt;br/&gt;        %L 输出行号&lt;br/&gt;        %M 输出所在方法名&lt;br/&gt;        %l  输出语句所在的行数, 包括类名、方法名、文件名、行数&lt;br/&gt;         --&amp;gt;&lt;br/&gt;        &amp;lt;!--这个输出控制台的配置，这里输出all信息到System.out --&amp;gt;&lt;br/&gt;        &amp;lt;console name=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; target=&lt;span&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 输出日志的格式 --&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/console&amp;gt;&lt;br/&gt;        &amp;lt;!--这个输出文件的配置，这里输出info信息到junbao_info.log --&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileInfo&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/info.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/info/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 此Filter意思是，只输出info级别的数据 DENY，日志将立即被抛弃不再经过其他过滤器；NEUTRAL，有序列表里的下个过滤器过接着处理日志； &lt;br/&gt;                    ACCEPT，日志会被立即处理，不再经过剩余过滤器。 --&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;            &amp;lt;!-- 如果启用此配置，则日志会按文件名生成新文件， 即如果filePattern配置的日期格式为 %d{yyyy-MM-dd HH} &lt;br/&gt;                    ，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d{yyyy-MM-dd} ，则天生成一个压缩文件,默认为1 --&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;!-- 每个日志文件最大1MB,超过1MB生产新的文件 ; --&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;             &amp;lt;!--文件夹下最多的文件个数--&amp;gt;  &lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileWarn&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/warn.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/warn/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;warn&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;        &amp;lt;RollingFile name=&lt;span&gt;&quot;RollingFileError&quot;&lt;/span&gt; fileName=&lt;span&gt;&quot;&lt;span&gt;${fileDir}&lt;/span&gt;/error.log&quot;&lt;/span&gt; filePattern=&lt;span&gt;&quot;&lt;span&gt;${fileHistory}&lt;/span&gt;/error/%d{yyyy-MM-dd}-%i.log&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;ThresholdFilter level=&lt;span&gt;&quot;error&quot;&lt;/span&gt; onMatch=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; onMismatch=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;PatternLayout charset=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt; pattern=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %l %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;Policies&amp;gt;&lt;br/&gt;                &amp;lt;TimeBasedTriggeringPolicy /&amp;gt;&lt;br/&gt;                &amp;lt;SizeBasedTriggeringPolicy size=&lt;span&gt;&quot;100MB&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/Policies&amp;gt;&lt;br/&gt;            &amp;lt;DefaultRolloverStrategy max=&lt;span&gt;&quot;20&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/RollingFile&amp;gt;&lt;br/&gt;    &amp;lt;/Appenders&amp;gt;&lt;br/&gt;    &amp;lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 --&amp;gt;&lt;br/&gt;    &amp;lt;Loggers&amp;gt;&lt;br/&gt;        &amp;lt;!--全异步输出info级以上的日志信息--&amp;gt; &lt;br/&gt;        &amp;lt;asyncRoot level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; includeLocation=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;RollingFileInfo&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/asyncRoot&amp;gt;&lt;br/&gt;        &amp;lt;!--同步输出info级以上的日志信息--&amp;gt; &lt;br/&gt;        &amp;lt;!-- &amp;lt;root level=&lt;span&gt;&quot;info&quot;&lt;/span&gt; includeLocation=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;appender-ref ref=&lt;span&gt;&quot;Console&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;/root&amp;gt; --&amp;gt;&lt;br/&gt;    &amp;lt;/Loggers&amp;gt;&lt;br/&gt;&amp;lt;/Configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;详细 API 可以参考官方网站！&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3.2.3、log4j2使用&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与 log4j 类似，直接在需要位置打印日志即可&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package org.example.log4j.service;&lt;br/&gt;import org.slf4j.Logger;&lt;br/&gt;import org.slf4j.LoggerFactory;&lt;br/&gt;public class LogPrintUtil {&lt;br/&gt;    /**&lt;span&gt;log&lt;/span&gt;静态常量*/&lt;br/&gt;    private static final Logger logger = LoggerFactory.getLogger(LogPrintUtil.class);&lt;br/&gt;    public static void main(String[] args){&lt;br/&gt;            logger.info(&lt;span&gt;&quot;info信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.warn(&lt;span&gt;&quot;warn信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.error(&lt;span&gt;&quot;error信息&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;四、Logback&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.1、介绍&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Logback 也是用 java 编写一款非常热门的日志开源框架，由 log4j 创始人写的，性能比 log4j 要好!&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;logback 主要分为3个模块：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;logback-core：核心代码模块&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback-classic：log4j的一个改良版本，同时实现了slf4j的接口，这样你如果之后要切换其他日志组件也是一件很容易的事&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2、项目应用&lt;span/&gt;&lt;/h4&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.1、添加 maven 依赖&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;!--这个依赖直接包含了 logback-core 以及 slf4j-api的依赖--&amp;gt;&lt;br/&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;1.2.3&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&amp;lt;!-- 支持在xml中写判断标签 --&amp;gt;&lt;br/&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;org.codehaus.janino&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;janino&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;2.7.8&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.2、创建logback配置文件&lt;span/&gt;&lt;/h5&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1、配置说明&lt;span/&gt;&lt;/h6&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;logback在启动的时候，会按照下面的顺序加载配置文件：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果java程序启动时指定了&lt;code&gt;logback.configurationFile&lt;/code&gt;属性，就用该属性指定的配置文件。如j&lt;code&gt;ava -Dlogback.configurationFile=/path/to/mylogback.xml Test&lt;/code&gt;，这样执行&lt;code&gt;Test&lt;/code&gt;类的时候就会加载&lt;code&gt;/path/to/mylogback.xml&lt;/code&gt;配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;classpath&lt;/code&gt;中查找&lt;code&gt;logback.groovy&lt;/code&gt;文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;classpath&lt;/code&gt;中查找&lt;code&gt;logback-test.xml&lt;/code&gt;文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在&lt;code&gt;classpath&lt;/code&gt;中查找&lt;code&gt;logback.xml&lt;/code&gt;文件&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果是&lt;code&gt;jdk6+&lt;/code&gt;,那么会调用S&lt;code&gt;erviceLoader&lt;/code&gt;查找 &lt;code&gt;com.qos.logback.classic.spi.Configurator&lt;/code&gt;接口的第一个实现类&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自动使用&lt;code&gt;ch.qos.logback.classic.BasicConfigurator&lt;/code&gt;，在控制台输出日志&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的顺序表示优先级，使用&lt;code&gt;java -D&lt;/code&gt;配置的优先级最高，只要获取到配置后就不会再执行下面的流程。相关代码可以看&lt;code&gt;ContextInitializer#autoConfig()&lt;/code&gt;方法。&lt;/p&gt;&lt;h6 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2、同步输出日志&lt;span/&gt;&lt;/h6&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;?xml version=&lt;span&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;?&amp;gt;&lt;br/&gt;&amp;lt;!-- scan:当此属性设置为&lt;span&gt;true&lt;/span&gt;时，配置文件如果发生改变，将会被重新加载，默认值为&lt;span&gt;true&lt;/span&gt;。scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为&lt;span&gt;true&lt;/span&gt;时，此属性生效。默认的时间间隔为1分钟。 &lt;br/&gt;    debug:当此属性设置为&lt;span&gt;true&lt;/span&gt;时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为&lt;span&gt;false&lt;/span&gt;。 --&amp;gt;&lt;br/&gt;&amp;lt;configuration scan=&lt;span&gt;&quot;true&quot;&lt;/span&gt; scanPeriod=&lt;span&gt;&quot;60 seconds&quot;&lt;/span&gt; debug=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &amp;lt;!-- 运行环境，dev:开发，&lt;span&gt;test&lt;/span&gt;:测试，pre:预生产，pro:生产 --&amp;gt;&lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;system_host&quot;&lt;/span&gt; value=&lt;span&gt;&quot;dev&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;property file=&lt;span&gt;&quot;system.properties&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 上下文变量设置,用来定义变量值,其中name的值是变量的名称，value的值时变量定义的值。 通过&amp;lt;property&amp;gt;定义的值会被插入到logger上下文中。定义变量后，可以使“&lt;span&gt;${}&lt;/span&gt;”来使用变量。 --&amp;gt;&lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;CONTEXT_NAME&quot;&lt;/span&gt; value=&lt;span&gt;&quot;logback-test&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 日志文件存放路径设置，绝对路径 --&amp;gt;&lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;logs.dir&quot;&lt;/span&gt; value=&lt;span&gt;&quot;/opt/logs&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 日志文件存放路径设置，tomcat路径 --&amp;gt;&lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;logs.dir&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;span&gt;${catalina.base}&lt;/span&gt;/logs&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 定义日志文件 相对输入位置 --&amp;gt;  &lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;log_dir&quot;&lt;/span&gt; value=&lt;span&gt;&quot;log&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 日志输出格式设置 --&amp;gt;&lt;br/&gt;    &amp;lt;!-- &lt;br/&gt;    %d{yyyy-MM-dd HH:mm:ss} [%level] - %msg%n&lt;br/&gt;      Logger: %logger&lt;br/&gt;      Class: %class&lt;br/&gt;      File: %file&lt;br/&gt;      Caller: %&lt;span&gt;caller&lt;/span&gt;&lt;br/&gt;      Line: %line&lt;br/&gt;      Message: %m&lt;br/&gt;      Method: %M&lt;br/&gt;      Relative: %relative&lt;br/&gt;      Thread: %thread&lt;br/&gt;      Exception: %ex&lt;br/&gt;      xException: %xEx&lt;br/&gt;      nopException: %nopex&lt;br/&gt;      rException: %rEx&lt;br/&gt;      Marker: %marker&lt;br/&gt;      newline:%n&lt;br/&gt;    --&amp;gt;&lt;br/&gt;    &amp;lt;property name=&lt;span&gt;&quot;CUSTOM_LOG_PATTERN&quot;&lt;/span&gt;&lt;br/&gt;        value=&lt;span&gt;&quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{90} - %msg%n&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;!-- 上下文名称：&amp;lt;contextName&amp;gt;, 每个logger都关联到logger上下文， 默认上下文名称为“default”。但可以使用&amp;lt;contextName&amp;gt;设置成其他名字，用于区分不同应用程序的记录。 &lt;br/&gt;        一旦设置，不能修改。 --&amp;gt;&lt;br/&gt;    &amp;lt;contextName&amp;gt;&lt;span&gt;${CONTEXT_NAME}&lt;/span&gt;&amp;lt;/contextName&amp;gt;&lt;br/&gt;    &amp;lt;!-- &amp;lt;appender&amp;gt;是&amp;lt;configuration&amp;gt;的子节点，是负责写日志的组件。 有两个必要属性name和class。name指定appender名称， &lt;br/&gt;        class指定appender的实现类。 --&amp;gt;&lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;console&quot;&lt;/span&gt; class=&lt;span&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 对日志进行格式化。 --&amp;gt;&lt;br/&gt;        &amp;lt;encoder&amp;gt;&lt;br/&gt;            &amp;lt;pattern&amp;gt;&lt;span&gt;${CUSTOM_LOG_PATTERN}&lt;/span&gt;&amp;lt;/pattern&amp;gt;&lt;br/&gt;            &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt;&lt;br/&gt;        &amp;lt;/encoder&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;file&quot;&lt;/span&gt;&lt;br/&gt;        class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} --&amp;gt;&lt;br/&gt;        &amp;lt;rollingPolicy class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;fileNamePattern&amp;gt;&lt;span&gt;log&lt;/span&gt;/testC.%d{yyyy-MM-dd}.%i.log&amp;lt;/fileNamePattern&amp;gt;&lt;br/&gt;            &amp;lt;!-- 如果按天来回滚，则最大保存时间为30天，30天之前的都将被清理掉 --&amp;gt;&lt;br/&gt;            &amp;lt;maxHistory&amp;gt;30&amp;lt;/maxHistory&amp;gt;&lt;br/&gt;            &amp;lt;!-- 按时间回滚的同时，按文件大小来回滚 --&amp;gt;&lt;br/&gt;            &amp;lt;timeBasedFileNamingAndTriggeringPolicy&lt;br/&gt;                class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;                &amp;lt;maxFileSize&amp;gt;100MB&amp;lt;/maxFileSize&amp;gt;&lt;br/&gt;            &amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;&lt;br/&gt;        &amp;lt;/rollingPolicy&amp;gt;&lt;br/&gt;        &amp;lt;!-- 过滤器，只记录WARN级别的日志 --&amp;gt;&lt;br/&gt;        &amp;lt;!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 --&amp;gt;&lt;br/&gt;        &amp;lt;filter class=&lt;span&gt;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 设置过滤级别 --&amp;gt;&lt;br/&gt;            &amp;lt;level&amp;gt;WARN&amp;lt;/level&amp;gt;&lt;br/&gt;            &amp;lt;!-- 用于配置符合过滤条件的操作 --&amp;gt;&lt;br/&gt;            &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;&lt;br/&gt;            &amp;lt;!-- 用于配置不符合过滤条件的操作 --&amp;gt;&lt;br/&gt;            &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;&lt;br/&gt;        &amp;lt;/filter&amp;gt;&lt;br/&gt;        &amp;lt;!-- 日志输出格式 --&amp;gt;&lt;br/&gt;        &amp;lt;encoder&amp;gt;&lt;br/&gt;            &amp;lt;pattern&amp;gt;&lt;span&gt;${CUSTOM_LOG_PATTERN}&lt;/span&gt;&amp;lt;/pattern&amp;gt;&lt;br/&gt;            &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt;&lt;br/&gt;        &amp;lt;/encoder&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt; &lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;log_file&quot;&lt;/span&gt;&lt;br/&gt;        class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 --&amp;gt;&lt;br/&gt;        &amp;lt;file&amp;gt;&lt;span&gt;${logs.dir}&lt;/span&gt;/logback-test.log&amp;lt;/file&amp;gt;&lt;br/&gt;        &amp;lt;!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志 --&amp;gt;&lt;br/&gt;        &amp;lt;rollingPolicy class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz &lt;br/&gt;                或者 没有&lt;span&gt;log&lt;/span&gt;%i.log.zip --&amp;gt;&lt;br/&gt;            &amp;lt;FileNamePattern&amp;gt;&lt;span&gt;${logs.dir}&lt;/span&gt;/logback-test.%i.log&amp;lt;/FileNamePattern&amp;gt;&lt;br/&gt;            &amp;lt;!-- 窗口索引最小值 --&amp;gt;&lt;br/&gt;            &amp;lt;minIndex&amp;gt;1&amp;lt;/minIndex&amp;gt;&lt;br/&gt;            &amp;lt;!-- 窗口索引最大值 --&amp;gt;&lt;br/&gt;            &amp;lt;maxIndex&amp;gt;3&amp;lt;/maxIndex&amp;gt;&lt;br/&gt;        &amp;lt;/rollingPolicy&amp;gt;&lt;br/&gt;        &amp;lt;!-- 日志级别过滤器 --&amp;gt;&lt;br/&gt;        &amp;lt;filter class=&lt;span&gt;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 日志级别过滤器 --&amp;gt;&lt;br/&gt;            &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt;&lt;br/&gt;            &amp;lt;!-- 符合要求的日志级别，过滤，ACCEPT:接受 --&amp;gt;&lt;br/&gt;            &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt;&lt;br/&gt;            &amp;lt;!-- 不符合要求的日志级别，过滤，DENY:拒绝 --&amp;gt;&lt;br/&gt;            &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt;&lt;br/&gt;        &amp;lt;/filter&amp;gt;&lt;br/&gt;        &amp;lt;!-- 激活滚动的条件。 --&amp;gt;&lt;br/&gt;        &amp;lt;triggeringPolicy&lt;br/&gt;            class=&lt;span&gt;&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;!-- 活动文件的大小，默认值是10MB --&amp;gt;&lt;br/&gt;            &amp;lt;maxFileSize&amp;gt;30MB&amp;lt;/maxFileSize&amp;gt;&lt;br/&gt;        &amp;lt;/triggeringPolicy&amp;gt;&lt;br/&gt;        &amp;lt;!-- 对记录事件进行格式化。 --&amp;gt;&lt;br/&gt;        &amp;lt;encoder&amp;gt;&lt;br/&gt;            &amp;lt;pattern&amp;gt;&lt;span&gt;${CUSTOM_LOG_PATTERN}&lt;/span&gt;&amp;lt;/pattern&amp;gt;&lt;br/&gt;            &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt;&lt;br/&gt;        &amp;lt;/encoder&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt; &lt;br/&gt;    &amp;lt;!-- 异步输出 --&amp;gt;&lt;br/&gt;    &amp;lt;appender name=&lt;span&gt;&quot;ASYNC_logback&quot;&lt;/span&gt; class=&lt;span&gt;&quot;ch.qos.logback.classic.AsyncAppender&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&amp;gt;&lt;br/&gt;        &amp;lt;!-- &amp;lt;discardingThreshold&amp;gt;0&amp;lt;/discardingThreshold&amp;gt; --&amp;gt;&lt;br/&gt;        &amp;lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&amp;gt;&lt;br/&gt;        &amp;lt;!-- &amp;lt;queueSize&amp;gt;256&amp;lt;/queueSize&amp;gt; --&amp;gt;&lt;br/&gt;        &amp;lt;!-- 添加附加的appender,最多只能添加一个 --&amp;gt;&lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;log_file&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;/appender&amp;gt;&lt;br/&gt;    &amp;lt;!-- 指定包输出路径 --&amp;gt;&lt;br/&gt;    &amp;lt;!-- 用来设置某一个 包 或者具体的某一个 类 的日志打印级别、以及指定&amp;lt;appender&amp;gt;, name:用来指定受此logger约束的某一个包或者具体的某一个类。 &lt;br/&gt;        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 &lt;br/&gt;        additivity:是否向上级logger传递打印信息。默认是&lt;span&gt;true&lt;/span&gt;。(这个logger的上级就是上面的root) &amp;lt;logger&amp;gt;可以包含零个或多个&amp;lt;appender-ref&amp;gt;元素，标识这个appender将会添加到这个logger。 --&amp;gt;&lt;br/&gt;    &amp;lt;logger name=&lt;span&gt;&quot;org.logback.test&quot;&lt;/span&gt; level=&lt;span&gt;&quot;DEBUG&quot;&lt;/span&gt; additivity=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;stdout&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;/logger&amp;gt;&lt;br/&gt;    &amp;lt;!-- 特殊的&amp;lt;logger&amp;gt;元素，是根logger。只有一个level属性，应为已经被命名为&lt;span&gt;&quot;root&quot;&lt;/span&gt;. level:设置打印级别，大小写无关：TRACE, &lt;br/&gt;        DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 &amp;lt;root&amp;gt;可以包含零个或多个&amp;lt;appender-ref&amp;gt;元素，标识这个appender将会添加到这个loger。 --&amp;gt;&lt;br/&gt;    &amp;lt;root&amp;gt;&lt;br/&gt;        &amp;lt;level value=&lt;span&gt;&quot;WARN&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;        &amp;lt;!-- &lt;span&gt;if&lt;/span&gt;表达式，需要Janino jar --&amp;gt;&lt;br/&gt;        &amp;lt;!-- Janino 2.6.0版本开始，除了janino.jar之外， commons-compiler.jar也需要在类路径中 --&amp;gt;&lt;br/&gt;        &amp;lt;&lt;span&gt;if&lt;/span&gt; condition=&lt;span&gt;&#x27;property(&quot;system_host&quot;).contains(&quot;dev&quot;)&#x27;&lt;/span&gt;&amp;gt;&lt;br/&gt;            &amp;lt;&lt;span&gt;then&lt;/span&gt;&amp;gt;&lt;br/&gt;                &amp;lt;appender-ref ref=&lt;span&gt;&quot;stdout&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;            &amp;lt;/&lt;span&gt;then&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;        &amp;lt;appender-ref ref=&lt;span&gt;&quot;file&quot;&lt;/span&gt; /&amp;gt;&lt;br/&gt;    &amp;lt;/root&amp;gt;&lt;br/&gt;&amp;lt;/configuration&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：&lt;code&gt;logback&lt;/code&gt;如果配置要输出行号，性能会明显降低，如果不是必须，建议不要配置！&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4.2.3、logback使用&lt;span/&gt;&lt;/h5&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package org.example.logback.service;&lt;br/&gt;import org.slf4j.Logger;&lt;br/&gt;import org.slf4j.LoggerFactory;&lt;br/&gt;public class LogPrintUtil {&lt;br/&gt;    /**&lt;span&gt;log&lt;/span&gt;静态常量*/&lt;br/&gt;    private static final Logger logger = LoggerFactory.getLogger(LogPrintUtil.class);&lt;br/&gt;    public static void main(String[] args){&lt;br/&gt;         logger.info(&lt;span&gt;&quot;info信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.warn(&lt;span&gt;&quot;warn信息&quot;&lt;/span&gt;);&lt;br/&gt;            logger.error(&lt;span&gt;&quot;error信息&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;五、SLF4J桥接&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;细心的你，会发现上面代码使用时，都使用的是&lt;code&gt;private static final Logger logger = LoggerFactory.getLogger(LogPrintUtil.class)&lt;/code&gt;这个，其中都来自&lt;code&gt;org.slf4j&lt;/code&gt;包，&lt;code&gt;SLF4J&lt;/code&gt;是啥？有什么作用呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;SLF4J&lt;/code&gt;本身并不输出日志，最大的特色是**：它可以通过适配的方式挂接不同的日志系统，属于一个日志接口**。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果项目适配到&lt;code&gt;log4j&lt;/code&gt;就使用&lt;code&gt;log4j&lt;/code&gt;日志库进行输出；如果适配到&lt;code&gt;logback&lt;/code&gt;就使用&lt;code&gt;logback&lt;/code&gt;日志库进行输出；如果适配到&lt;code&gt;log4j2&lt;/code&gt;就使用&lt;code&gt;log4j2&lt;/code&gt;日志库进行输出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这样最大的好处，就是当你想将项目从&lt;code&gt;log4j&lt;/code&gt;换成&lt;code&gt;log4j2&lt;/code&gt;的时候，只需要在项目&lt;code&gt;pom.xml&lt;/code&gt;中进行桥接适配即可，&lt;strong&gt;不用修改具体需要打印日志的代码&lt;/strong&gt;！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;六、三大主流日志框架性能比较&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;介绍了这么多，但是我们还不知道三个日志框架的日志输出性能如何，本文以&lt;strong&gt;10000&lt;/strong&gt;条数据进行打印，比较&lt;code&gt;log4j&lt;/code&gt;、&lt;code&gt;log4j2&lt;/code&gt;、&lt;code&gt;logback&lt;/code&gt;日志的输出时间。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本次测试采用的是本地电脑（win7），每个电脑的配置不一样，测试的结果也不一样，结果是真实的。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.264&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/laEmibHFxFw4AzzT8jZibLlgwC0zwdoX4a5c5aurjujSlWseFZcur9eOPTxibcWrWG8zpLd0kaJq1Dpq5aqkexXdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2716297786720322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/laEmibHFxFw4AzzT8jZibLlgwC0zwdoX4a9EbzIjujkSMLnn7stItN2ibaYzUODricdcwiausfLfjribicNq38LqWFib0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;994&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从测试结果上可以看出：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不建议生产环境进行控制台输出；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;在纯文件输出的环境下，&lt;code&gt;logback&lt;/code&gt;的输出优于&lt;code&gt;log4j2&lt;/code&gt;，而&lt;code&gt;log4j2&lt;/code&gt;要优于&lt;code&gt;log4j&lt;/code&gt;，如果要进行生产环境的部署，建议采用&lt;code&gt;logback&lt;/code&gt;，如果是使用&lt;code&gt;log4j2&lt;/code&gt;，建议使用异步方式进行输出，输出结果基本是实时输出；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后需要注意的地方是：&lt;code&gt;log&lt;/code&gt;有风险，输出需谨慎！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于输出&lt;code&gt;log&lt;/code&gt;过程需要进行磁盘操作，且&lt;code&gt;log4j&lt;/code&gt;为了保证&lt;code&gt;log&lt;/code&gt;输出过程的线程安全性而使用同步锁，就使得输出&lt;code&gt;log&lt;/code&gt;成为很耗时的操作，所以&lt;code&gt;log&lt;/code&gt;信息一定要言简意赅，不要输出一些无用的&lt;code&gt;log&lt;/code&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;七、总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文主要围绕项目中使用到的日志框架进行应用介绍，限于笔者的才疏学浅，对本文内容可能还有理解不到位的地方，如有阐述不合理之处还望留言一起探讨。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;八、参考&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;1、Log4j2官方地址&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2、廖雪峰官方网站 - java教程&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>2e7e7a0d275e218af45c1639ca3a38d5</guid>
<title>华为 18 级工程师总结的 50W 字算法、LeetCode、操作系统、计算机底层刷题必备笔记</title>
<link>https://toutiao.io/k/u76was8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot;&gt;
        
                &lt;div id=&quot;content_views&quot; class=&quot;htmledit_views&quot;&gt;
                    &lt;p&gt;最近又有不少老铁在后台留言说，想进大厂，但是算法不好。最近我整理了一份刷题实录，这份刷题实录，也让我进了心仪的大厂。现在开放分享给大家。希望对大家有所帮助。&lt;/p&gt; 
&lt;p&gt;任何的算法题，如同写作文一样，都有一些模板可以套用的。比如面试常考的DP（动态规划），难的是一些关键点是否能想清楚。比如你能写出动态转移方程，这题基本上就可以AC了。&lt;/p&gt; 
&lt;p&gt;整个刷题实录内容，包括 &lt;strong&gt;双子针、动态规划、二分查找、贪心算法、深度优先搜索、字符串、递归、字典树、排序、链表&lt;/strong&gt;等相关专题内容。图文并茂，附有刷题答案源码。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/4d5b4e16b7b88392a8f4203566034e97.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;刷题任务的题目，是根据题目的类型来汇总的，总结了八个类别，每个类别下面也总结了5个左右的题型，帮助大家分门别类的突破，所以刷起来相对会更有重点和针对性。如果从头到尾的刷，每周按顺序刷42题，很容易让自己坚持不下来，也会觉得很枯燥。所以在制定计划的时候可以让这个计划变得更“有趣&quot;和针对性，让它看起来更容易实现一点，才会更容易坚持。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.qq.com/doc/DTVZkZ3ZmeUt4Tk5n&quot;&gt;点击鸡可免费获取&lt;/a&gt;LeetCode刷题笔记、6000页Java教程、操作系统、计算机底层教程笔记&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/554976ea852cfba29fcdfc987974e2b6.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/c1cd9362e965cd112465ed3fd2cc8a5d.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/b8316656d9a071b49b02fec862aff81e.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;除此之外，我还写了一套 6000 页的 Java 学习手册，以及珍藏四本 Java 人必读4大神器&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;整个资料包内容专注 Java技术，包括 Spring、Spring Boot/Cloud、Dubbo、JVM、集合、多线程、JPA、MyBatis、MySQL、大数据、Nginx、Git、Docker、GitHub、Servlet、JavaWeb、IDEA、Redis、算法、面试题等相关内容。图文并茂，附有源码，还送一波电子书。内容包括但不限于：&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;JavaWeb 相关（带答案）&lt;/li&gt;&lt;li&gt;精选面试题（带答案）&lt;/li&gt;&lt;li&gt;Spring 全家桶（带答案）&lt;/li&gt;&lt;li&gt;Linux 相关（带答案）&lt;/li&gt;&lt;li&gt;Spring Boot 教程和实战&lt;/li&gt;&lt;li&gt;MyBatis 框架（带答案）&lt;/li&gt;&lt;li&gt;MySQL（带答案）&lt;/li&gt;&lt;li&gt;Nginx（带答案）&lt;/li&gt;&lt;li&gt;Git（带答案）&lt;/li&gt;&lt;li&gt;GitHub（带答案）&lt;/li&gt;&lt;li&gt;IDEA 教程 &amp;amp; 实战（带答案）&lt;/li&gt;&lt;li&gt;Java基础：多线程，集合，JVM等（带答案）&lt;/li&gt;&lt;li&gt;DeBug 技巧（带答案）&lt;/li&gt;&lt;li&gt;Dubbo（带答案）&lt;/li&gt;&lt;li&gt;Redis（带答案）&lt;/li&gt;&lt;li&gt;. . .&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;每篇文章图文并茂，附有源码。还有电子书合集&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.qq.com/doc/DTVZkZ3ZmeUt4Tk5n&quot;&gt;点击鸡可免费获取&lt;/a&gt;LeetCode刷题笔记、6000页Java教程、操作系统、计算机底层教程笔记&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/d18dbd489dda93c92e8d8c79cd175bc8.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;最后一份资料是计算机的相关知识&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;看完能让你对计算机有一个基础的了解和入门，是培养你 内核 的基础，我们看下目录大纲&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/bae094059e837ffb34dce0f011e20012.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;基本上涵盖了计算机所有基础知识，从 CPU 到内存、讲解什么是二进制、磁盘、压缩算法、操作系统、汇编等知识。&lt;/p&gt; 
&lt;p&gt;我们来看下内容是怎样的&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/622591054cebd6d4eaf0560fefae49c2.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;这个图画的很漂亮啊，看起来就是作者在用心画的，而且排版非常精美。&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/2f225d06f308e31f53d6c18cbb75b9e2.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;看起来一点不枯燥&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/e575d326fa9facb4ad891b0974f2854c.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://img-blog.csdnimg.cn/img_convert/065707a3c53f7a74aad1e9e6df467972.png&quot;/&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.qq.com/doc/DTVZkZ3ZmeUt4Tk5n&quot;&gt;点击鸡可免费获取&lt;/a&gt;LeetCode刷题笔记、6000页Java教程、操作系统、计算机底层教程笔记 &lt;/p&gt; 
&lt;p&gt;关注我添加助理VX：MXW5308 即可免费获取LeetCode刷题笔记、6000页Java教程、操作系统、计算机底层教程笔记 &lt;/p&gt;
                &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a3ed0a54f736e1ebd36118990059cb29</guid>
<title>万亿级数据应该怎么迁移？</title>
<link>https://toutiao.io/k/qk70u1x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;blockquote&gt;&lt;p&gt;之前写过一篇文章:&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5Mjg2MDQ5NQ==&amp;amp;mid=2452509718&amp;amp;idx=1&amp;amp;sn=139b17d40b8afd6291537c12883476b1&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;binlog还能这么用之Canal篇&lt;/a&gt;，在里面介绍了一些增量数据迁移的一些方法，但是对于整体的数据的迁移介绍得不是很深，这里想对迁移数据整体做一个介绍，希望能帮助到大家。&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;span&gt;背景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h1&gt;&lt;p&gt;在星爷的《大话西游》中有一句非常出名的台词：“曾经有一份真挚的感情摆在我的面前我没有珍惜，等我失去的时候才追悔莫及，人间最痛苦的事莫过于此，如果上天能给我一次再来一次的机会，我会对哪个女孩说三个字：我爱你，如果非要在这份爱上加一个期限，我希望是一万年！”在我们开发人员的眼中，这个感情就和我们数据库中的数据一样，我们多希望他一万年都不改变，但是往往事与愿违，随着公司的不断发展，业务的不断变更，我们对数据的要求也在不断的变化，大概有下面的几种情况：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;分库分表&lt;/strong&gt;：业务发展越来越快，导致单机数据库承受的压力越来越大，数据量也越来越多，这个时候通常会使用分库的方法去解决这个问题，将数据库的流量均分到不同的机器上。从单机数据库到分库这个过程，我们就需要完整的迁移我们的数据，我们才能成功的分库的方式上使用我们的数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;更换存储介质&lt;/strong&gt;：上面介绍的分库，一般来说我们迁移完之后，存储介质依然是同样的，比如说之前使用的是单机Mysql，分库之后就变成了多台机器的Mysql，我们的数据库表的字段都没有发生变化,迁移来说相对比较简单。有时候我们分库分表并不能解决所有的问题，如果我们需要很多复杂的查询，这个时候使用Mysql可能就不是一个靠谱的方案，那么我们就需要替换查询的存储介质，比如使用elasticsearch，这种的迁移就会稍微要复杂一些，涉及到不同存储介质的数据转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;切换新系统&lt;/strong&gt;：一般公司在高速发展中，一定会出现很多为了速度快然后重复建设的项目，当公司再一定时间段的时候，往往这部分项目会被合并，变成一个平台或者中台，比如我们一些会员系统，电商系统等等。这个时候往往就会面临一个问题，将老的系统中的数据需要迁移到新的系统中，这个时候就更加复杂了，有可能不仅是存储介质有变动，有可能项目语言也不同，从更上层的角度来看，部门有可能也不同，所以这种数据迁移的难度是比较高，风险也更加的大。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在实际业务开发中，我们会根据不同的情况来做出不同的迁移方案，接下来我们来讨论一下到底应该怎么迁移数据。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;数据迁移&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h1&gt;&lt;p&gt;数据迁移其实不是一蹴而就的，每一次数据迁移都需要一段漫长的时间，有可能是一周，有可能是几个月，通常来说我们迁移数据的过程基本都和下图差不多：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5148861646234676&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z796G2KhBiafFU2uR8Nyqgahq7gXVzzmjUic2uZDN1mvjgPJsc3uwaQ6H3nugC7rL2O7qYzvh2QnoOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;首先我们需要将我们数据库已经存在的数据进行批量的迁移，然后需要处理新增的这部分数据，需要实时的把这部分数据在写完原本的数据库之后然后写到我们的新的存储，在这一过程中我们需要不断的进行数据校验。当我们校验基本问题不大的时候，然后进行切流操作，直到完全切流之后，我们就可以不用再进行数据校验和增量数据迁移。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;存量数据迁移&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先我们来说一下存量数据迁移应该怎么做，存量数据迁移在开源社区中搜索了一圈发现没有太好用的工具，目前来说阿里云的DTS提供了存量数据迁移，DTS支持同构和异构不同数据源之间的迁移，基本支持业界常见的数据库比如Mysql,Orcale,SQL Server等等。DTS比较适合我们之前说的前两个场景，一个是分库的场景，如果使用的是阿里云的DRDS那么就可以直接将数据通过DTS迁移到DRDS,另外一个是数据异构的场景，无论是Redis还是ES，DTS都支持直接进行迁移。&lt;/p&gt;&lt;p&gt;那么DTS的存量迁移怎么做的呢？其实比较简单大概就是下面几个步骤：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当存量迁移任务启动的时候，我们获取当前需要迁移的最大的id和最小id&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;设置一个分段，比如1万，从最小id开始每次查询1万的数据给DTS服务器，交给DTS处理。sql如下：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; table_name &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;gt; curId &lt;span&gt;and&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &amp;lt; curId + &lt;span&gt;10000&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.当id大于maxId之后，存量数据迁移任务结束&lt;/p&gt;&lt;p&gt;当然我们在实际的迁移过程中可能不会去使用阿里云，或者说在我们的第三个场景下，我们的数据库字段之间需要做很多转换，DTS不支持，那么我们就可以模仿DTS的做法，通过分段批量读取数据的方式来迁移数据，这里需要注意的是我们批量迁移数据的时候需要控制分段的大小，以及频率，防止影响我们线上的正常运行。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;增量数据迁移&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;存量数据的迁移方案比较有限，但是增量的数据迁移方法就是百花齐放了，一般来说我们有下面的几种方法：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DTS: 阿里云的DTS算是一条龙服务了，在提供存量数据迁移的同时也提供了增量数据迁移，只不过需要按量收费。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;服务双写：比较适合于系统没有切换的迁移，也就是只换了存储但是系统还是同一个，比如说分库分表，redis数据同步等，这个的做法比较简单直接在代码里面同步的去写入需要迁移的数据，但是由于不是同一个数据库就不能保证事务，有可能导致迁移数据的时候会出现数据丢失，这个过程通过后续的数据校验会进行解决。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MQ异步写入：这个可以适用于所有的场景，当有数据修改的时候发送一个MQ消息，消费者收到这个消息之后再进行数据更新。这个和上面的双写有点类似，但是他把数据库的操作变成了MQ异步了出问题的概率就会小很多&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;监听binlog: 我们可以使用之前说过的canal或者其他的一些开源的如databus去进行binlog监听，监听binlog的方式 就和上面的消息MQ方式一样，只是发送消息的这一步被我们省略了。这个方式的一个开发量来说基本是最小的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这么多种方式我们应该使用哪种呢？我个人来说是比较推荐监听binlog的做法的，监听binlog减少开发成本，我们只需要实现consumer逻辑即可，数据能保证一致性，因为是监听的binlog这里不需要担心之前双写的时候不是一个事务的问题。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;数据校验&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;前面所说的所有方案，虽然有很多是成熟的云服务(dts)或者中间件(canal)，但是他们都有可能出现一些数据丢失，出现数据丢失的情况整体来说还是比较少，但是非常难排查，有可能是dts或者canal不小心抖了一下，又或者是接收数据的时候不小心导致的丢失。既然我们没有办法避免我们的数据在迁移的过程中丢失，那么我们应该通过其他手段来进行校正。&lt;/p&gt;&lt;p&gt;通常来说我们迁移数据的时候都会有数据校验这一个步骤，但是在不同团队可能会选取不同的数据校验方案：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;之前在美团的时候，我们会做一个双读，也就是我们所有的读取都会从新的里面读取一份，但是返回的还是老的，这个时候我们需要做这部分数据的校验，如果有问题可以发出报警人工修复或者自动修复。通过这种方式，我们常用的数据就能很快的进行一个修复，当然也会不定时的去跑一个全量的数据check，只是这种check出来修复数据的时间就比较滞后。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;现在在猿辅导之后，我们没有采用之前的那种方式，因为双读check虽然能很快发现数据的不对，但是我们并没有对这部分数据有那么高的一个实时性校验并且双读的一个代码开发量还是稍微比较大的，但是又不能依靠不定时全量check去保证，这样就会导致我们的数据校验时间会非常的延长。我们采取了一个折中的方法，我们借鉴了对账里面的T+1的一个思路，我们每天凌晨获取老数据库中昨天更新的数据，然后和我们新数据库中的数据做一一比对，如果有数据不一样或者数据缺失，我们都可以立马进行一个修复。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然在实际开发过程中我们也需要注意下面几点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据校验任务的一个正确性如何保证，校验任务本来就是去校正其他数据的，但是如果他自身出现了问题，就失去了校验的意义，这里目前来说只能靠review代码这种方式去保证校验任务的正确性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;校验任务的时候需要注意日志的打印，有时候出现问题可能是直接所有数据出现问题，那么校验任务就有可能会打出大量的错误日志，然后进行报警，有可能会将系统打挂，或者说影响其他人的服务。这里如果要简单一点搞，可以将一些非人工处理的报警搞成warn，复杂一点搞得话，可以封装一个工具，某个error打印再某个时间段超过一定量然后就不用再打印了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;校验任务注意不要影响线上运行的服务，通常校验任务会写很多批查询的语句，会出现批量扫表的情况，如果代码没有写好很容易导致数据库挂掉。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;切流&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;当我们数据校验基本没有报错了之后，说明我们的迁移程序是比较稳定的了，那么我们就可以直接使用我们新的数据了吗？当然是不可以的，如果我们一把切换了，顺利的话当然是很好的，如果出现问题了，那么就会影响所有的用户。&lt;/p&gt;&lt;p&gt;所以我们接下来就需要进行灰度，也就是切流。对于不同的业务切流的的维度会不一样，对于用户维度的切流，我们通常会以userId的取模的方式去进行切流，对于租户或者商家维度的业务，就需要按照租户id取模的方式去切流。这个切流需要制定好一个切流计划，在什么时间段，放出多少的流量，并且切流的时候一定要选择流量比较少的时候进行切流，每一次切流都需要对日志做详细的观察，出现问题尽早修复，流量的一个放出过程是一个由慢到快的过程，比如最开始是以1%的量去不断叠加的，到后面的时候我们直接以10%，20%的量去快速放量。因为如果出现问题的话往往在小流量的时候就会发现，如果小流量没有问题那么后续就可以快速放量。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;注意主键ID&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;在迁移数据的过程中特别要注意的是主键ID，在上面双写的方案中也提到过主键ID需要双写的时候手动的去指定，防止ID生成顺序错误。&lt;/p&gt;&lt;p&gt;如果我们是因为分库分表而进行迁移，就需要考虑我们以后的主键Id就不能是自增id,需要使用分布式id，这里比较推荐的是美团开源的leaf，他支持两种模式一种是雪花算法趋势递增，但是所有的id都是Long型，适合于一些支持Long为id的应用。还有一种是号段模式，这种会根据你设置的一个基础id，从这个上面不断的增加。并且基本都走的是内存生成，性能也是非常的快。&lt;/p&gt;&lt;p&gt;当然我们还有种情况是我们需要迁移系统，之前系统的主键id在新系统中已经有了，那么我们的id就需要做一些映射。如果我们在迁移系统的时候已经知道未来大概有哪些系统会迁移进来，我们就可以采用预留的方式，比如A系统现在的数据是1到1亿，B系统的数据也是1到1亿，我们现在需要将A,B两个系统合并成新系统，那么我们可以稍微预估一些Buffer,比如给A系统留1到1.5亿，这样A就不需要进行映射，B系统是1.5亿到3亿，那么我们转换成老系统Id的时候就需要减去1.5亿，最后我们新系统的新的Id就从3亿开始递增。&lt;br/&gt;但是如果系统中没有做规划的预留段怎么办呢？可以通过下面两种方式：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;需要新增一个表，将老系统的id和新系统的id做一个映射记录，这个工作量还是比较大的，因为我们一般迁移都会涉及几十上百张表，记录的成本还是非常的高。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果id是Long型的话，我们可以好好利用long是64位这个因素，我们可以制定一个规则，我们新系统的id都是从一个比较大的数开始，比如从大于Int的数开始，将小Int的那部分数都可以留给我们的老系统做Id迁移，比如我们上面的1.5亿的数据量，其实只用了28位，我们的Int是32位，那么还有4位可以使用，这个4位可以代表16个系统做迁移，当然如果规划中有更多的系统做迁移，可以将新系统的id起始点设置得更大一点。如下图所示：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4451476793248945&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/WLIGprPy3z796G2KhBiafFU2uR8NyqgahK8ZazUiaScHIpWMnWYNJkXA3u5QUibCoicDg3WEqdcntEo4RyeySYV8mQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h1&gt;&lt;p&gt;最后简单来总结下这个套路，其实就是四个步骤，一个注意：存量，增量，校验，切流，最后再注意一下id。不管是多大量级的数据，基本上按照这个套路来迁移就不会出现大的问题。希望能在大家的后续迁移数据工作中，这篇文章能帮助到你。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a1ec69d468c1b4f31e0498da0df34695</guid>
<title>编程体系结构：Java 面向对象</title>
<link>https://toutiao.io/k/g097j3l</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1&gt;&lt;span&gt;一、基础概念&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、面向对象概念&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;面向对象编程的主要思想是把构成问题的各个事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙一个事物在整个解决问题的步骤中的行为。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.9984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvA3BiaicSGTcfafvADC9PD1FGITNW7xEKbIzjHAZPGX1HdnUuxoGyohhvQ6N3y84gDzbqRtxibSyq08Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、类和对象&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对象：真实存在唯一的事物；在应用程序中对象是数据和动作的结合体，不仅能够进行操作，同时还能够记录下操作结果。&lt;/p&gt;&lt;p&gt;类：抽象的概念，实际就是对某种类型事物的共性属性与行为的抽取；例如User[名称.年龄.性别]类用来描述用户的基础信息。&lt;/p&gt;&lt;p&gt;Java开发中如何理解面向对象：构建合适的对象接口API体系，创建合适的对象，解决合适的问题，例如JDK的API已经定义好的类，通过这些类创建对象直接使用；通过自定义类来创建对象使用，在MVC中模式中，不同业务功能创建不同的接口和类系统。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、属性和方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;类中变量&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;位置区别：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;成员变量是定义在方法之外，类内；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;局部变量是定义在方法之内。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;作用区别：&lt;/p&gt;&lt;p&gt;初始值区别：&lt;/p&gt;&lt;p&gt;生命周期：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;类中方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对一个类功能的具体描述，可能是类方法或者对象方法；&lt;/p&gt;&lt;p&gt;&lt;strong&gt;构造方法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;构造函数的作用是用来给对应的对象进行初始化处理，没有返回值类型的，构造函数的函数名必须要与类名一致，如果一个类没有显式的声明一个构造方法，那么java编译器会为该类添加一个无参的构造函数的，如果一个类已经显式的写上一个构造方法时,那么java编译器则不会再为该类添加一个无参的构造方法，构造函数是可以在一个类中以重载的形式存在多个。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、接口&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;接口是一个特殊的类，接口的成员变量默认的修饰符为：public-static-final，接口中的方法都是抽象的方法，默认的修饰符：public-abstract，接口不能创建对象且没有构造方法的，接口是给类去实现时使用的，非抽象类实现接口，必须要把接口中所有方法全部实现。&lt;/p&gt;&lt;p&gt;接口的作用：程序的解耦，定义实现类的约束规范，如果需要拓展特别功能，也可以基于接口形式实现。&lt;/p&gt;&lt;p&gt;类与接口之间关系：多实现关系；接口与接口之间关系：多继承关系。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、重载与重写&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;方法重写&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;父类的功能无法满足子类的需求时，可以进行方法的重写即子父类使用同名的函数，且子类重写的方法使用@Override注解，这里存在继承的关系。&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方法名与形参列表必须一致；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;子类的权限修饰符必须要大于或者等于父类的权限修饰符；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;子类的返回值类型必须要小于或者等于父类的返回值类型；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;子类抛出的异常类型要小于或者等于父类抛出的异常类型；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;方法重载&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在一个类中存在两个或者两个以上的同名函数,称作为方法重载，函数名要一致，形参列表不一致（形参的个数或形参的类型不一致）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、包与权限&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;权限修饰符&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;权限修饰符就是控制被修饰的成员的范围可见性，分为：public、private、protected、default(没有修饰)。在不同包下面只有public 与 protected 可以访问，而且protected必须是在继承关系下才能够访问。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;包package&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;包可以理解为计算机系统中的文件夹，用来解决类名重复产生冲突的问题，包名全部小写，语句必须位于java文件中中第一个语句。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;二、基本特征&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;封装&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;把类中内部的实现细节进行隐藏，只暴露对外的接口，例如实际开发场景中一般实体类的所有成员属性（成员变量）都要封装起来，可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问，适当的封装可以让程序代码更容易理解与维护，加强安全性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在现有父类的基础上在重新构建一个新类即子类，通过子类对象可以访问父类非私有的成员变量和成员方法，以及重写父类中的非私有成员方法，继承的作用就是能提高代码的复用性。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多态&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;多态指一个对象可以具备多种形态，例如：父类的引用类型变量指向了子类的对象；接口的引用类型变量指向了接口实现类的对象；这种情况是存在于继承或者实现关系中，多态情况下，子父类存在同名的成员变量时，访问的都是父类的成员，除了在同名非静态函数时才是访问子类的。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;三、常用关键字&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、This关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;this关键字代表了所属函数的调用者对象，如果存在同名成员变量与局部变量时，在方法内部默认是访问局部变量的数据，可以通过this关键字指定访问成员变量的数据，在一个构造函数中可以调用另外一个构造函数初始化对象。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、Static关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;static修饰成员变量：如果有数据需要被共享给所有对象使用时，那么就可以使用static修饰。&lt;/p&gt;&lt;p&gt;static修饰成员函数：该静态方法不依赖于任何对象就可以进行访问，非静态成员方法/变量都必须依赖具体的对象才能够被调用。&lt;/p&gt;&lt;p&gt;static修饰代码块：static关键字用来包装静态代码块以提升程序性能，静态代码块可以置于类中的任何地方，在类初次被加载的时候，会依次执行一次每个静态代码块。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、Super关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;super关键字代表了父类空间的引用，子父类存在着同名的成员时，在子类中默认是访问子类的成员，可以通过super关键字指定访问父类的成员；创建子类对象时，默认会先调用父类无参的构造方法，可以通过super关键字指定调用父类的构造方法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4、Instanceof关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;instanceof关键字的作用：判断一个对象是否属于指定的类别，对象与指定的类别必须要存在继承或者实现的关系。在强制类型转换之前通常会使用该关键字先判断，然后在进行转换。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5、Final关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;final修饰类：表明该类不能被继承，final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。&lt;/p&gt;&lt;p&gt;final修饰方法：锁定方法防止任何继承类修改它的含义；第二个原因是效率，父类的final方法是不能被子类所覆盖的。&lt;/p&gt;&lt;p&gt;final修饰变量：成员变量被标识为常量，只能被赋值一次，赋值后值不再改变，当函数的参数类型声明为final时，说明该参数是只读型的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6、Abstract关键字&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;abstract修饰类：该抽象类不能被实例化，抽象类与接口的不同之处，接口中不能有实例方法去实现业务逻辑，而抽象类中可以有实例方法，并实现业务逻辑，抽象类不能使用final关键字修饰，因为final修饰的类是无法被继承，而对于抽象类来说就是需要通过继承去实现抽象方法。&lt;/p&gt;&lt;p&gt;abstract修饰方法：抽象方法没有方法主体，与接口方法有点类似，抽象方法不能用private修饰，因为抽象方法必须被子类实现，抽象方法也不能用static修饰，抽象类.抽象方法这样的操作没有意义。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;四、场景分析&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、设计模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;面向对象与设计模式是之前几年很火热的概念，面试时必问的问题，在编程中想用好设计模式，前提理解面向对象机制，都是对问题的高度向上抽象封装，向下逐层解决实现，提高代码的复用性、可读性、灵活性、可维护性强，最主要是格调高。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、IO流体系&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果想理解面向对象和设计模式的代码，在Java中可以重点读读IO流体系的API，顶级接口，向下实现，包装类，扩展类，是真的把这两大理念用到极致了，当然IO流最为文件处理的核心，也值得读读源码。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、MVC开发模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在MVC的开发模式中，业务层接口，业务层实现；数据库接口，数据访问实现，也是面向对象的最基础用法接口与接口的实现类。&lt;/p&gt;&lt;h1&gt;&lt;span&gt;五、源代码地址&lt;/span&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;GitHub·地址&lt;br/&gt;https:&lt;span&gt;//github.com/cicadasmile&lt;/span&gt;&lt;br/&gt;GitEE·地址&lt;br/&gt;https:&lt;span&gt;//gitee.com/cicadasmile&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3783359497645212&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/uUIibyNXbAvCjMheLZtcM2iaVMBOpIUKR4CDRCG9FLT5K6NmGXvG7exrW0TSuDjnTKJQ5PDq8j8Y7PHDd17Z3gicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1274&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>