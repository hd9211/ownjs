<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>879b817b40d0305c29149562c49487b7</guid>
<title>【故障演练】 Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out</title>
<link>https://toutiao.io/k/l5ws76z</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;性能不够，缓存来凑&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个高并发系统肯定少不了缓存的身影，为了保证缓存服务的高可用，我们通常采用 Redis Cluster 集群模式。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.43359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEB00b2A4St1D1qOkwC4ItsRP27WrHrXXGVibrPks2Vf0z9HneibaTPM8Dw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;集群部署采用了 &lt;code&gt;3主3从&lt;/code&gt; 拓扑结构，&lt;code&gt;数据读写&lt;/code&gt;访问master节点， slave节点负责备份。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随便登录一台 redis 节点，都可以看到集群的slot的槽位分步区间，以及对应的主从节点映射关系。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:8001&amp;gt; cluster slots&lt;br/&gt;1) 1) (&lt;span&gt;integer&lt;/span&gt;) 10923&lt;br/&gt;   2) (&lt;span&gt;integer&lt;/span&gt;) 16383&lt;br/&gt;   3) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8003&lt;br/&gt;      3) &lt;span&gt;&quot;6c574c9d1323c69ebc73a5977bcbd3d4c073a4d4&quot;&lt;/span&gt;&lt;br/&gt;   4) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8006&lt;br/&gt;      3) &lt;span&gt;&quot;123d0b157078925743ac1deb96be8c3395d7d038&quot;&lt;/span&gt;&lt;br/&gt;2) 1) (&lt;span&gt;integer&lt;/span&gt;) 0&lt;br/&gt;   2) (&lt;span&gt;integer&lt;/span&gt;) 5460&lt;br/&gt;   3) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8001&lt;br/&gt;      3) &lt;span&gt;&quot;99bc05e81ef0035a4ab2d13cbae2599425b7ed7d&quot;&lt;/span&gt;&lt;br/&gt;   4) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8004&lt;br/&gt;      3) &lt;span&gt;&quot;402e900ef364ce9382beddf92747cf28e3ea9c2f&quot;&lt;/span&gt;&lt;br/&gt;3) 1) (&lt;span&gt;integer&lt;/span&gt;) 5461&lt;br/&gt;   2) (&lt;span&gt;integer&lt;/span&gt;) 10922&lt;br/&gt;   3) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8002&lt;br/&gt;      3) &lt;span&gt;&quot;fda6a9e49205a52418c0bca4c66c981066017a3c&quot;&lt;/span&gt;&lt;br/&gt;   4) 1) &lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;br/&gt;      2) (&lt;span&gt;integer&lt;/span&gt;) 8005&lt;br/&gt;      3) &lt;span&gt;&quot;24a1e23f6cbfb761234970b66043d562e79e3d9c&quot;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人为模拟，master-1 机器意外宕机&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;docker stop c1dff012392d&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时，Redis Cluster 集群能自动感知，并自动完成主备切换，对应的slave会被选举为新的master节点&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.484375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEBpl9iaibaHgxN1g0oobtpiaLwDYUXWNgl2r4lI5S1ibjBeTSgJkUCEz9H7g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看下 redis cluster 集群最新的主从关系&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8624708624708625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEB4p0oFtXicg5YYBic5dwsSdvwgkfiaIQUXw1x8Lk8evEIC1HxTkkDDc0TA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;858&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看似也没什么问题，一切正常&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此时 Spring Boot 应用依然在线服务，当我们再尝试操作缓存时，会报错&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.21796875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEB1iaM2X0HoePPzVc3KATjiccItZfccLNmQkPZ8f8CrLoQJshB9vbqYfMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题边界还是非常清晰的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis Cluster 集群已经完成了切换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是 Spring Boot 客户端&lt;code&gt;没有动态感知到&lt;/code&gt; Redis Cluster 的最新集群信息&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;原因分析：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 2.X 版本， Redis默认的连接池采用 &lt;code&gt;Lettuce&lt;/code&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当Redis 集群节点发生变化后，Letture默认是不会刷新节点拓扑&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将 &lt;code&gt;Letture&lt;/code&gt; 二方包仲裁掉&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;2.3.12.RELEASE&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;exclusions&amp;gt;&lt;br/&gt;        &amp;lt;exclusion&amp;gt;&lt;br/&gt;            &amp;lt;groupId&amp;gt;io.lettuce&amp;lt;/groupId&amp;gt;&lt;br/&gt;            &amp;lt;artifactId&amp;gt;lettuce-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;        &amp;lt;/exclusion&amp;gt;&lt;br/&gt;    &amp;lt;/exclusions&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，引入 &lt;code&gt;Jedis&lt;/code&gt; 相关二方包&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;    &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;&lt;br/&gt;    &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;&lt;br/&gt;    &amp;lt;version&amp;gt;3.7.0&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译代码，并重新启动 SpringBoot 微服务，万事俱备，只欠再次验证&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.8828451882845189&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEB6okB0U85yiak1eek1ZUtYsHYSyqzmNnH7FFXkGbUFeonAXAZicVicje5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;239&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重新模拟将 &lt;code&gt;127.0.0.1：8001&lt;/code&gt; master 节点宕机，看看系统的日志&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;[2022-03-17 18:03:34:595] - master /127.0.0.1:8001 used as slave&lt;br/&gt;[2022-03-17 18:03:34:596] - slave redis://127.0.0.1:8004 removed &lt;span&gt;for&lt;/span&gt; slot ranges: [[0-5460]]&lt;br/&gt;[2022-03-17 18:03:34:611] - 1 connections initialized &lt;span&gt;for&lt;/span&gt; /127.0.0.1:8004&lt;br/&gt;[2022-03-17 18:03:34:639] - /127.0.0.1:8001 master and related slaves: [addr=redis://127.0.0.1:8004] removed&lt;br/&gt;[2022-03-17 18:03:34:641] - 24 connections initialized &lt;span&gt;for&lt;/span&gt; /127.0.0.1:8004&lt;br/&gt;[2022-03-17 18:03:34:655] - 1 connections initialized &lt;span&gt;for&lt;/span&gt; /127.0.0.1:8004&lt;br/&gt;[2022-03-17 18:03:34:678] - master: redis://127.0.0.1:8004 added &lt;span&gt;for&lt;/span&gt; slot ranges: [[0-5460]]&lt;br/&gt;[2022-03-17 18:03:34:678] - 24 connections initialized &lt;span&gt;for&lt;/span&gt; /127.0.0.1:8004&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从打印的日志来看，客户端已经感知到了&lt;code&gt;主备切换&lt;/code&gt;，并与最新的主节点 &lt;code&gt;127.0.0.1:8004&lt;/code&gt; 初始化了 24 个连接。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后，回归业务功能，&lt;code&gt;读写缓存&lt;/code&gt; 数据也都是操作最新的主节点。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwdYkic2YvgVgwFKAsNf08HEBicFU63mlwM3JOHrwDdaOoFPmicOQXxQZO0NOcv9p9Xud3mSDkibWTKguQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;225&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有一种方案：&lt;strong&gt;刷新节点拓扑视图&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Lettuce 官方描述：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;https://github.com/lettuce-io/lettuce-core/wiki/Redis-Cluster#user-content-refreshing-the-cluster-topology-view&lt;/p&gt;&lt;p&gt;&lt;span&gt;Lettuce 处理 Moved 和 Ask 永久重定向，由于命令重定向，必须刷新节点拓扑视图。&lt;/span&gt;&lt;span&gt;而自适应拓扑刷新（Adaptive updates）与定时拓扑刷新（Periodic updates）默认关闭&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;调用 RedisClusterClient.reloadPartitions&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后台基于时间间隔的周期刷新&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;后台基于持续的&lt;code&gt;断开&lt;/code&gt; 和 &lt;code&gt;移动、重定向&lt;/code&gt; 的自适应更新&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编写代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;@Bean(destroyMethod = &lt;span&gt;&quot;destroy&quot;&lt;/span&gt;)&lt;br/&gt;public LettuceConnectionFactory &lt;span&gt;&lt;span&gt;lettuceConnectionFactory&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;&lt;br/&gt;    //开启 自适应集群拓扑刷新和周期拓扑刷新&lt;br/&gt;    ClusterTopologyRefreshOptions clusterTopologyRefreshOptions =  ClusterTopologyRefreshOptions.builder()&lt;br/&gt;            // 开启自适应刷新。否则，Redis集群变更后将会导致连接异常&lt;br/&gt;            .enableAllAdaptiveRefreshTriggers() &lt;br/&gt;            // 自适应刷新超时时间(默认30秒)&lt;br/&gt;            .adaptiveRefreshTriggersTimeout(Duration.ofSeconds(30)) &lt;br/&gt;            // 开周期刷新&lt;br/&gt;            .enablePeriodicRefresh(Duration.ofSeconds(20))  &lt;br/&gt;            .build();&lt;br/&gt;&lt;br/&gt;    ClientOptions clientOptions = ClusterClientOptions.builder()&lt;br/&gt;            .topologyRefreshOptions(clusterTopologyRefreshOptions)&lt;br/&gt;            .build();&lt;br/&gt;&lt;br/&gt;    LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder()&lt;br/&gt;            .poolConfig(genericObjectPoolConfig(redisProperties.getJedis().getPool()))&lt;br/&gt;            .clientOptions(clientOptions)&lt;br/&gt;            .commandTimeout(redisProperties.getTimeout()) //默认RedisURI.DEFAULT_TIMEOUT 60&lt;br/&gt;            .build();&lt;br/&gt;&lt;br/&gt;    List&amp;lt;String&amp;gt; clusterNodes = redisProperties.getCluster().getNodes();&lt;br/&gt;    Set&amp;lt;RedisNode&amp;gt; nodes = new HashSet&amp;lt;RedisNode&amp;gt;();&lt;br/&gt;    clusterNodes.forEach(address -&amp;gt; nodes.add(new RedisNode(address.split(&lt;span&gt;&quot;:&quot;&lt;/span&gt;)[0].trim(), Integer.valueOf(address.split(&lt;span&gt;&quot;:&quot;&lt;/span&gt;)[1]))));&lt;br/&gt;&lt;br/&gt;    RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration();&lt;br/&gt;    clusterConfiguration.setClusterNodes(nodes);&lt;br/&gt;    clusterConfiguration.setPassword(RedisPassword.of(redisProperties.getPassword()));&lt;br/&gt;    clusterConfiguration.setMaxRedirects(redisProperties.getCluster().getMaxRedirects());&lt;br/&gt;&lt;br/&gt;    LettuceConnectionFactory lettuceConnectionFactory = new LettuceConnectionFactory(clusterConfiguration, clientConfig);&lt;br/&gt;    // 是否允许多个线程操作同一个缓存连接，默认&lt;span&gt;true&lt;/span&gt;，&lt;span&gt;false&lt;/span&gt; 每个操作都将创建新的连接&lt;br/&gt;    // lettuceConnectionFactory.setShareNativeConnection(&lt;span&gt;false&lt;/span&gt;); &lt;br/&gt;    // 重置底层共享连接, 在接下来的访问时初始化&lt;br/&gt;    // lettuceConnectionFactory.resetConnection(); &lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; lettuceConnectionFactory;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于我：Tom哥，前阿里P7技术专家，offer收割机，参加多次淘宝双11大促活动。欢迎关注，我会持续输出更多经典原创文章，为你晋级大厂助力&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前微信群已开放，&lt;/span&gt;&lt;span&gt;&lt;span&gt;想进交流群&lt;/span&gt;&lt;/span&gt;&lt;span&gt;的小伙伴请添加Tom哥微信，暗号「&lt;/span&gt;&lt;span&gt;&lt;span&gt;进群&lt;/span&gt;&lt;/span&gt;&lt;span&gt;」，唠嗑聊天， 技术交流，围观朋友圈，人生打怪不再寂寞&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;阿里P7技术专家，研究生，出过专利。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16362991689819=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16362991689819=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16362991689819=&quot;rgb(132, 144, 168)&quot; data-darkmode-original-color-16362991689819=&quot;#fff|rgb(0, 0, 0)|rgb(66, 75, 93)&quot; data-style=&quot;outline: 0px; max-width: 100%; font-weight: bolder; color: rgb(66, 75, 93); letter-spacing: 1px; word-spacing: 3px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__152&quot;&gt;推荐阅读👍：&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NzYyNjQzNg==&amp;amp;action=getalbum&amp;amp;album_id=1911852085562703875#wechat_redirect&quot; textvalue=&quot;《我想去大厂列》（包含Java、MySQL、Redis、MQ消息队列、TCP网络、项目亮点、团队管理等）&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;《我想去大厂》（包含Java、MySQL、Redis、MQ消息队列、TCP网络、项目亮点、团队管理等）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span data-darkmode-bgcolor-16362991689819=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16362991689819=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16362991689819=&quot;rgb(132, 144, 168)&quot; data-darkmode-original-color-16362991689819=&quot;#fff|rgb(0, 0, 0)|rgb(66, 75, 93)&quot; data-style=&quot;outline: 0px; max-width: 100%; font-weight: bolder; color: rgb(66, 75, 93); letter-spacing: 1px; word-spacing: 3px; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__152&quot;&gt;推荐阅读👍：&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NzYyNjQzNg==&amp;amp;action=getalbum&amp;amp;album_id=1874600102896467974#wechat_redirect&quot; textvalue=&quot;SpringBoot 生态系列，JPA、ElasticSearch、Kafka、Redis等几十个主流开源框架&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot;&gt;SpringBoot 生态系列，JPA、ElasticSearch、Kafka、Redis等几十个主流开源框架&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ae8a5e84b1099453cbefe17bbbb78ed6</guid>
<title>幸福生活的三大准则｜码农周刊VIP会员专属邮件周报 Vol.084</title>
<link>https://toutiao.io/k/6tbdnkv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single js_wx_tap_highlight wx_tap_card&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left js_a11y_comma js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5MzA0ODkyMA==&amp;amp;action=getalbum&amp;amp;album_id=2218111508427898886#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;2218111508427898886&quot; data-tag_source=&quot;1&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#码农周刊&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;9个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;以下内容节选自「码农周刊VIP会员专属邮件周报 Vol.084」，查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本期，首先分享的是&lt;strong&gt;查理·芒格幸福生活的三大准则&lt;/strong&gt;，供参考。&lt;br/&gt;1）&lt;strong&gt;降低期望值&lt;/strong&gt;；&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 2）遇到挫折时，&lt;strong&gt;诚实面对并处理好&lt;/strong&gt;；&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 3）&lt;strong&gt;说实话&lt;/strong&gt;，尤其是对自己。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;325&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AjN1jquNavibHVJLA1Veb2tAXpnl02QjBibx9jXswWvKtM0RibSXRzPHGqwibAj3N2CxMQstlfzjONXS2swoianPvSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;叶军：我在阿里巴巴做 “CIO” 的日子&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://mp.weixin.qq.com/s/vqnP0jHNOYiZSAjQZnYiJw&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里巴巴如何跨越从信息化（IT）到数字化（DT）转型的关键时刻？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Foresight Ventures: Crypto 思潮编年史（1997 - 2022）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://mp.weixin.qq.com/s/mtpUympekLcCQRddylJzSw&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;以时间顺序重新回顾在 Crypto 发展史中那些重要的 “故事”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;微信全文搜索技术优化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/fvhw2yp&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全面升级经验&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;设计模式二三事&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/xxsl3zv&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;讲解几类常用设计模式的应用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;腾讯开源的云原生多运行时微服务框架&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/polarismesh/femas/blob/develop/README-zh.md&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚焦微服务运行时，提供给多框架统一服务发现、南北及东西流量治理、服务可观测、配置管理等一站式微服务管控能力，解决企业微服务架构转型中异构框架复用难、激增流量管控难、排障恢复耗时长等核心问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;京东开源的轻量级移动端 Vue2、Vue3 组件库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://github.com/jdf2e/nutui&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;支持一套代码生成 H5 和小程序&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Android 13 第一个开发者预览版本来了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/6mcniy8&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网友直呼：Android 12 还没透&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Go官方 - 1.18 发布说明&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/vxpgeo7&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正在进行中的发布说明&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2022年最值得关注的Chrome浏览器扩展插件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/lz60fko&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;程序员必备的几种常见排序算法和搜索算法总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://toutiao.io/k/j230wfq&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;供参考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;查看完整链接版请微信扫描下方二维码，加入「码农周刊VIP会员」。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavicibroqCN98y5SNT9NbfA3oHYQiaicFScHFfppgek7ZGicJiaHK45qc2zoccBibfEzIvzTsI4AB2xO2IaOw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>180a602c2ea815066248479c91de1a68</guid>
<title>你管这破玩意儿叫高可用</title>
<link>https://toutiao.io/k/qudsbeg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;今天我们来聊一下互联网三高（高并发、高性能、高可用）中的高可用，看完本文相信能解开你关于高可用设计的大部分困惑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高可用（High availability，即 HA）的主要目的是为了保障「业务的连续性」，即在用户眼里，业务永远是正常（或者说基本正常）对外提供服务的。高可用主要是针对架构而言，那么要做好高可用，就要首先设计好架构，第一步我们一般会采用分层的思想将一个庞大的 IT 系统拆分成为应用层，中间件，数据存储层等独立的层，每一层再拆分成为更细粒度的组件，第二步就是让每个组件对外提供服务，毕竟每个组件都不是孤立存在的，都需要互相协作，对外提供服务才有意义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要保证架构的高可用，就要保证架构中所有组件以及其对外暴露服务都要做高可用设计，任何一个组件或其服务没做高可用，都意味着系统存在风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么这么多组件该怎么做高可用设计呢，其实任何组件要做高可用，都离不开「冗余」和「自动故障转移」，众所周知单点是高可用的大敌，所以组件一般是以集群（至少两台机器）的形式存在的，这样只要某台机器出现问题，集群中的其他机器就可以随时顶替，这就是「冗余」。简单计算一下，假设一台机器的可用性为 90%，则两台机器组成的集群可用性为 1-0.1*0.1 = 99%，所以显然冗余的机器越多，可用性越高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但光有冗余还不够，如果机器出现问题，需要人工切换的话也是费时费力，而且容易出错，所以我们还需要借助第三方工具（即仲裁者）的力量来实现「自动」的故障转移，以达到实现&lt;/span&gt;&lt;span&gt;近实时&lt;/span&gt;&lt;span&gt;的故障转移的目的，&lt;/span&gt;&lt;span&gt;近实时的故障转移才是高可用的主要意义&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;怎样的系统可以称之为高可用呢，业界一般用几个“九”来衡量系统的可用性，如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6686103012633625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQxECjvy7L8AZicH8XP4AbRqRxpFgsx4rKKOTOmCL4lL9I6QzGdh2yvZgeN7kX6qd3px0MLvjibfGauA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一般实现两个 9 很简单，毕竟每天宕机 14 分钟已经严重影响业务了，这样的公司迟早歇菜，大厂一般要求 4 个 9，其他要求严苛的业务要达到五个九以上，比如如果因为一个电脑的故障导致所有列车停驶，那么就会有数以万计的人正常生活受到阻碍，这种情况就要求五个九以上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们就来一起看看架构中的各个组件如何借助「冗余」和「自动故障转移」来实现高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 互联网架构剖析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前多数互联网都会采用微服务架构，常见架构如下:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9707792207792207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFF2y5qicTib6bSVPvebnjeAzMMqAWTWB2r5Bx5Vwz2THY50RIic1nBMmgQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;924&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到架构主要分以下几层：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;接入层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：主要由 F5 硬件或 LVS 软件来承载所有的流量入口；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反向代理层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：Nginx，主要负责根据 URL 来分发流量，限流等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;网关&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：主要负责流控、风控、协议转换等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;站点层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：主要负责调用会员，促销等基本服务来装配 JSON 等数据并返回给客户端；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基础 service&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：其实与站点层都属于微服务，是平级关系，只不过基础 service 属于基础设施，能被上层的各个业务层 server 调用而已；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;存储层&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：也就是 DB，如 MySQL、Oracle 等，一般由基础 service 调用返回给站点层；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;中间件&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：ZK、ES、Redis、MQ 等，主要起到加速访问数据等功能，在下文中我们会简单介绍下各个组件的作用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如前所述，要实现整体架构的高可用，必须要实现每一层组件的高可用，接下来我们就来分别看一下每一层的组件都是如何实现高可用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 接入层 &amp;amp; 反向代理层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这两层的高可用都和 keepalived 有关，所以我们结合起来一起看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0052447552447552&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFVgylNIdGrhDkSF8FibpNr6eoUGjEibuCFm4bmcz5ibszdZ6XefKTwG9LA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;572&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对外，两个 LVS 以主备的形式对外提供服务，注意只有 master 在工作（即此时的 VIP 在 master 上生效），另外一个 backup 在 master 宕机之后会接管 master 的工作，那么 backup 怎么知道 master 是否正常呢？答案是通过 keepalived，在主备机器上都装上 keepalived 软件，启动后就会通过心跳检测彼此的健康状况，一旦  master 宕机，keepalived 会检测到，从而 backup 自动转成 master 对外提供服务，此时 VIP 地址（即图中的 115.204.94.139）即在 backup 上生效，也就是我们常说的「IP漂移」，通过这样的方式即解决了 LVS 的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;keepalived 的心跳检测主要通过发送 ICMP 报文，或者利用 TCP 的端口连接和扫描检测来检测的，同样的，它也可以用来检测 Nginx 暴露的端口，这样的话如果某些 Nginx 不正常 Keepalived 也能检测到并将其从 LVS 能转发的服务列表中剔出。Nginx也能通过端口检测服务健康状态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;借用 keepalived 这个第三方工具，同时实现了 LVS 和 Nginx 的高可用，同时在出现故障时也可以将宕机情况发送到对应开发人员的邮箱以让他们及时收到通知处理，确实很方便，Keepalived 应用广泛，下文我们会看到它也可以用在 MySQL 上来实现 MySQL 的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 微服务&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们再来看一下「网关」、「站点层」、「基础服务层」，这三者一般就是我们所说的微服务架构组件。当然这些微服务组件还需要通过一些 RPC 框架如 Dubbo 来支撑才能通信，所以微服务要实现高可用，就意味着 Dubbo 这些 RPC 框架也要提供支撑微服务高可用的能力，我们就以 Dubbo 为例来看下它是如何实现高可用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先来简单地看下 Dubbo 的基本架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7773584905660378&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFvmiaryD4ebUrFo6Be22J24afz1w72oyUlyOemjYH7ZBccsV5RpcyCMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;思路也很简单，首先是 Provider（服务提供者）向 Registry（注册中心，如 ZK 或 Nacos 等）注册服务，然后 Consumer（服务消费者）向注册中心订阅和拉取 Provider 服务列表，获取服务列表后，Consumer 就可以根据其负载均衡策略选择其中一个  Provider 来向其发出请求，当其中某个 Provider 不可用（下线或者因为 GC 阻塞等）时，会被注册中心及时监听（通过心跳机制）到，也会及时推送给 Consumer，这样 Consumer 就能将其从可用的 Provider 列表中剔除，也就实现了故障的自动转移，不难看出，注册中心就起到了类似 keepalived 的作用。&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 中间件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们再来看下这些中间件如 ZK、Redis 等是如何实现高可用的呢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.1 ZooKeeper（ZK）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;h4/&gt;&lt;h4/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上一节微服务中我们提到了注册中心，那我们就以 ZK 为例来看看它的高可用是如何实现的，先来看下它的整体架构图如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5825&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGF48MtucWD8DPMCz0mfjqytSlSvljubib3ia1xIR6La51orJIssR1ISmZA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Zookeeper 中的主要角色如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Leader&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即领导者，在集群中只有一个 Leader，主要承担了以下的功能：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;事务请求的唯一调度和处理者，保证集群事务处理的顺序性，所有 Follower 的写请求都会转给 Leader 执行，用来保证事务的一致性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集群内部各服务器的调度者：处理好事务请求后，会将数据广播同步到各个 Follower，统计 Follower 写入成功的数量，超过半数 Follower 写入成功，Leader 就会认为写请求提交成功，通知所有的 Follower commit 这个写操作，保证事后哪怕是集群崩溃恢复或者重启，这个写操作也不会丢失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Follower&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;处理客户端非事务请求、转发事务请求给 leader 服务器；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;参与事物请求 Proposal 的投票（需要半数以上服务器通过才能通知 leader commit 数据; Leader 发起的提案，要求 Follower 投票）；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;参与 Leader 选举的投票。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;画外音：Zookeeper 3.0 之后新增了一种 Observer 的角色，不过与此处讨论的 ZK 高可用关系不是很大，为了简化问题，所以省略。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以看到由于只有一个 Leader，很显然，此 Leader 存在单点隐患，那么 ZK 是怎么解决此问题的呢，首先 Follower 与 Leader 会用心跳机制保持连接，如果 Leader 出现问题了（宕机或者因为 FullGC 等原因无法响应），Follower 就无法感知到 Leader 的心跳，就会认为 Leader 出问题了，于是它们就会发起投票选举，最终在多个 Follower 中选出一个 Leader 来（这里主要用到了 Zookeeper Atomic Broadcast，即 ZAB 协议，它是为 ZK 专门设计的一种支持崩溃恢复的一致性协议），选举的细节不是本文重点，就不在此详述了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了 ZAB 协议，业界上常用的还有 Paxos，Raft 等协议算法，也可以用在 Leader 选举上，也就是是在分布式架构中，这些协议算法承担了“第三者”也就是仲裁者的作用，以承担故障的自动转移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.2 Redis&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Redis 的高可用需要根据它的部署模式来看看，主要分为「主从模式」和「Cluster 分片模式」两种。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;主从模式&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先来看一下主从模式，架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.0134529147982063&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFFWlG0mOU7CGJ7PocwSNywKzyqLicoR0dPFSGYSZxeyqpyz4vBib9j39g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;446&quot; title=&quot;主从模式&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;主从模式&lt;/span&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;主从模式即一主多从（一个或者多个从节点），其中主节点主要负责读和写，然后会将数据同步到多个从节点上，Client 也可以对多个从节点发起读请求，这样可以减轻主节点的压力，但和 ZK 一样，由于只有一个主节点，存在单点隐患，所以必须引入第三方仲裁者的机制来判定主节点是否宕机以及在判定主节点宕机后快速选出某个从节点来充当主节点的角色，这个第三方仲裁者在 Redis 中我们一般称其为「哨兵」（sentinel），当然哨兵进程本身也有可能挂掉，所以为了安全起见，需要部署多个哨兵（即哨兵集群）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4821428571428572&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFjCMq4hjcVibRr7ODrhBwMJG1wfAJOaO3F5VGpJ9GyEAgTWhM1yPyEAg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;504&quot; title=&quot;哨兵集群&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;哨兵集群&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些哨兵通过 Gossip（流言） 协议来接收关于主服务器是否下线的信息，并在判定主节点宕机后使用 Raft 协议来选举出新的主节点。&lt;/span&gt;&lt;/p&gt;&lt;h5&gt;&lt;br/&gt;&lt;/h5&gt;&lt;h5&gt;&lt;strong&gt;&lt;span&gt;Cluster 分片集群&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/h5&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主从模式看似完美，但存在以下几个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主节点写的压力难以降低：因为只有一个主节点能接收写请求，如果在高并发的情况下，写请求如果很高的话可能会把主节点的网卡打满，造成主节点对外无法服务；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;主节点的存储能力受到单机存储容量的限制：因为不管是主节点还是从节点，存储的都是全量缓存数据，那么随着业务量的增长，缓存数据很可能直线上升，直到达到存储瓶颈；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同步风暴：因为数据都是从 master 同步到 slave 的，如果有多个从节点的话，master 节点的压力会很大。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了解决主从模式的以上问题，分片集群应运而生，所谓分片集群即将数据分片，每一个分片数据由相应的主节点负责读写，这样的话就有多个主节点来分担写的压力，并且每个节点只存储部分数据，也就解决了单机存储瓶颈的问题，但需要注意的是每个主节点都存在单点问题，所以需要针对每个主节点做高可用，整体架构如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.731457800511509&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGF14icPLDKtw0iagY9sFicsZrFDibZESUInZXgbAq2J6iaaAtF7z6EEWiaoIOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;782&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原理也很简单，在 Proxy 收到 client 执行的 redis 的读写命令后，首先会对 key 进行计算得出一个值，如果这个值落在相应 master 负责的数值范围（一般将每个数字称为槽，Redis 一共有 16384 个槽）之内，那就把这条 redis 命令发给对应的 master 去执行，可以看到每个 master 节点只负责处理一部分的 redis 数据，同时为了避免每个 master 的单点问题，也为其配备了多个从节点以组成集群，当主节点宕机时，集群会通过 Raft 算法来从从节点中选举出一个主节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.3 Elasticsearch（ES）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再来看一下 ES 是如何实现高可用的，在 ES 中，数据是以分片（Shard）的形式存在的。如下图所示，一个节点中索引数据共分为三个分片存储：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4613259668508287&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFicqfXTgHCVicUOE5iaLX0J1ogI140QfpkaQGCRAW6U52VNXeq3gj4DPtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;362&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但只有一个节点的话，显然存在和 Redis 的主从架构一样的单点问题，这个节点挂了，ES 也就挂了，所以显然需要创建多个节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.46344086021505376&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFYLmibg8rMgib2wCwcTicmiaoElKcI3ZnR5UrkHTxaOAFAjg4OAmfQ7h20g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;930&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一旦创建了多个节点，分片（图中 P 为主分片，R 为副本分片）的优势就体现出来了，可以将分片数据分布式存储到其它节点上，极大提升了数据的水平扩展能力，同时每个节点都能承担读写请求，采用负载均衡的形式避免了单点的读写压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ES 的写机制与 Redis 和 MySQL 的主从架构有些差别（后两者的写都是直接向 master 节点发起写请求，而 ES 则不是），所以这里稍微解释一下 ES 的工作原理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先说下节点的工作机制，节点（Node）分为主节点（Master Node）和从结点（Slave Node），主节点的主要职责是负责集群层面的相关操作，管理集群变更，如创建或删除索引，跟踪哪些节点是集群的一部分，并决定哪些分片分配给相关的节点，主节点也只有一个，一般通过类 Bully 算法来选举出来，如果主节点不可用了，则其他从节点也可以通过此算法来选举以实现集群的高可用，任何节点都可以接收读写请求以达到负载均衡的目的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再说一下分片的工作原理，分片分为主分片（Primary Shard，即图中 P0，P1，P2）和副本分片（Replica Shard，即图中 R0，R1，R2），主分片负责数据的写操作，所以虽然任何节点可以接收读写请求，但如果此节点接收的是写请求并且没有写数据所在的主分片话，此节点会将写请求调度到主分片所在的节点上，写入主分片后，主分片再把数据复制到其他节点的副本分片上，以有两个副本的集群为例，写操作如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3515704154002026&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGF693SL8F4eVU8zOQjwcndJIKL38DBIp1ThXwpnDZjSicvibq8N8N0zEcQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;987&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.4 Message Queue（MQ）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;ES 利用数据分片来提升高可用和水平扩展能力的思想也应用在其他组件的架构设计上，我们以 MQ 中的 Kafka 为例再来看下数据分片的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6520833333333333&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGF5QticRNDibRbvK5yY68X5bXiaUKboEibtbFBfVHhPBoUXg5K3B17WXkGyw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;960&quot; title=&quot;Kafka 高可用设计，图片来自《武哥漫谈IT》&quot;/&gt;&lt;figcaption&gt;&lt;span&gt;Kafka 高可用设计，图片来自《武哥漫谈IT》&lt;/span&gt;&lt;/figcaption&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;如上是 Kafka 集群，可以看到每个 Topic 的 Partition 都分布式存储在其它消息服务器上，这样一旦某个 Partition 不可用，可以从 follower 中选举出 leader 继续服务，不过与 ES 中的数据分片不同的是，follower Partition 属于冷备，也就是说在正常情况下不会对外服务，只有在 leader 挂掉之后从 follower 中选举出 leader 后它才能对外提供服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 存储层&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来我们再来看一下最后一层，存储层（DB），这里我们以 MySQL 为例来简单地讨论一下其高可用设计，其实大家如果看完了以上的高可用设计，会发现 MySQL 的高可用也不过如此，思想都是类似的，与 Redis 类似，它也分主从和分片（即我们常说的分库分表）两种架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主从的话与 LVS 类似，一般使用 keepalived 的形式来实现高可用，如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.647766323024055&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFgHR6pzBAx1fEzzgiaaax5JBlcWFXOz4uiaNBBBGlX2YYzGngfYOCpKBg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;582&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果 master 宕机了，Keepalived 也会及时发现，于是从库会升级主库，并且 VIP 也会“漂移”到原从库上生效，所以说大家在工程配置的 MySQL 地址一般是 VIP 以保证高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据量大了之后就要分库分表了，于是就有了多主，就像 Redis 的分片集群一样，需要针对每个主配备多个从，如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5478170478170478&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFmmhvFuzrI226JU1zyEKGwOdvecu8iaLXLVw2Cko1p5ppByw4Hd8k8tw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;962&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前有读者问分库分表之后为啥还要做主从，现在我想大家应该都明白了，不是为了解决读写性能问题，主要是为了实现高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完了架构层面的高可用设计，相信大家对高可用的核心思想「冗余」和「自动故障转移」会有更深刻的体会，观察以上架构中的组件你会发现冗余的主要原因是因为只有一主，为什么不能有多主呢，也不是不可以，但这样在分布式系统下要保证数据的一致性是非常困难的，尤其是节点多了的话，数据之间的同步更是一大难题，所以多数组件采用一主的形式，然后再在主和多从之间同步，多数组件之所以选择一主本质上是技术上的 tradeoff。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么做好每个组件的高可用之后是否整个架构就真的可用了呢，非也，这只能说迈出了第一步，在生产上还有很多突发情况会让我们的系统面临挑战，比如：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;瞬时流量问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：比如我们可能会面临秒杀带来的瞬时流量激增导致系统的承载能力被压垮，这种情况可能影响日常交易等核心链路，所以需要做到系统之间的隔离，如单独为秒杀部署一套独立的集群；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;安全问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：比如 DDOS 攻击，爬虫频繁请求甚至删库跑路等导致系统拒绝服务；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：比如代码 bug 引起内存泄露导致 FullGC 导致系统无法响应等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;部署问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：在发布过程中如果贸然中止当前正在运行的服务也是不行的，需要做到优雅停机，平滑发布；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三方问题&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：比如我们之前的服务依赖第三方系统，第三方可能出问题导致影响我们的核心业务；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;不可抗力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：如机房断电，所以需要做好容灾，异地多活，之前我司业务就由于机房故障导致服务四小时不可用，损失惨重。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以除了做好架构的高可用之外，我们还需要在做好系统隔离，限流，熔断，风控，降级，对关键操作限制操作人权限等措施以保证系统的可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里特别提一下降级，这是为了保证系统可用性采取的常用的措施，简单举几个例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们之前对接过一个第三方资金方由于自身原因借款功能出了问题导致无法借款。这种情况为了避免引起用户恐慌，于是我们在用户申请第三方借款的时候返回了一个类似「为了提升你的额度，资金方正在系统升级」这样的文案，避免了客诉；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在流媒体领域，当用户观看直播出现严重卡顿时，很多企业的第一选择不是查 log 排查问题，而是为用户自动降码率。因为比起画质降低，卡得看不了显然会让用户更痛苦；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;双十一零点高峰期，我们把用户的注册登录等非核心功能给停掉了，以保证下单等核心流程的顺利。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外我们最好能做到事前防御，在系统出问题前把它扼杀在摇篮里，所以我们需要做单元测试，做全链路压测等来发现问题，还需要针对 CPU，线程数等做好&lt;strong&gt;监控&lt;/strong&gt;，当其达到我们设定的域值时就触发告警以让我们及时发现修复问题（我司之前就碰到过一个类似的&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651486188&amp;amp;idx=1&amp;amp;sn=46cc45885e42c0d5028359ba85193eca&amp;amp;chksm=bd251b938a529285c1ade09ffeac58fc88e997b02c028cd911514861e278b243efdc4e26b9e1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;‍生产事故复盘‍&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;生产事故复盘&lt;/span&gt;&lt;/a&gt;&lt;span&gt;大家可以看一下），此外在做好单元测试的前提下，依然有可能因为代码的潜在 bug 引起线上问题，所以我们需要在关键时间（比如双十一期间）封网（也就是不让发布代码）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外我们还需要在出事后能快速定位问题，快速回滚，这就需要记录每一次的发布时间，发布人等，这里的发布不仅包括工程的发布，还包括配置中心等的发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2505733944954128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGFDZduepG2dgaBNDNkI7HVfXQ2l4WMzgHtc2Wiasgm0SHiaLdPZKWbZ4ew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;3488&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;画外音：上图是我司的发布记录，可以看到有代码变更，回滚等，这样如果发现有问题的话可以一键回滚。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后我们以一张图来总结一下高可用的常见手段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7684887459807074&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/OyweysCSeLWiadZz9DR96fy1xdNgWkIGF6n4vJibqCjicK5G405dyccnUoPVfU14fp7TtyfiaYbW89nEumuWJkAW7g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;622&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;- EOF -&lt;/span&gt;&lt;/p&gt;&lt;section donone=&quot;shifuMouseDownCard(&#x27;shifu_c_030&#x27;)&quot; label=&quot;Copyright Reserved by PLAYHUDONG.&quot;&gt;&lt;section&gt;&lt;span&gt;推荐阅读&lt;/span&gt;  &lt;span&gt;点击标题可跳转&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651506905&amp;amp;idx=2&amp;amp;sn=be4dc72831a156ff656ca5c40e643944&amp;amp;chksm=bd25a4a68a522db0b135b5fb87ffc5b76c27aeeaf9407a3ca7beadda7b47b61e06a963556516&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;B站高可用架构实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;B站高可用架构实践&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651496233&amp;amp;idx=2&amp;amp;sn=213ecb44769419caa0121e90e12d57e7&amp;amp;chksm=bd25f3568a527a40763d094b84609e27bea2b05e42819bb0898f97907a4ebb67c5a33fc7f9ff&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Kafka宕机后不再高可用？探究Kafka高可用实现&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Kafka宕机后不再高可用？探究Kafka高可用实现&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;amp;mid=2651498116&amp;amp;idx=2&amp;amp;sn=dcc1fb4707cbc355679d4f1c9af91c72&amp;amp;chksm=bd25cafb8a5243ed6ffcfb07c004c1a4518d98a6c503fd457cfff099c3fa46fee3d48a870ebd&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;Elastic Job从单点到高可用、同城主备、同城双活&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;Elastic Job从单点到高可用、同城主备、同城双活&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完本文有收获？请转发分享给更多人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;关注「ImportNew」，提升Java技能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9166666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点赞和在看就是最大的支持❤️&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>704d5fbb6a8d5c2c298a592b4bfe4dbb</guid>
<title>「GoCN酷Go推荐」基于泛型的 Golang lodash 库 — samber/lo</title>
<link>https://toutiao.io/k/yyh16rl</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;近日，Go 核心开发团队终于宣布了 Go 1.18 正式版本的发布！&lt;/span&gt;&lt;span&gt;这是一个大家期待很久的版本！&lt;/span&gt;&lt;span&gt;Go 1.18 包含大量新功能：&lt;/span&gt;&lt;span&gt;模糊测试、性能改进、工作区等，以及 Go 语言开源以来最大的一次语法特性变更 —— 支持泛型！&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支持泛型后，我们便不再需要写如下冗余的代码：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48829953198127923&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/vbERicIdYZbCz0XYiaPZ8JxBIGicdwDsvAZBycpCtwOxXT3U7dSfF1TRebJQ9ZXQEVanTxE55rLEJEvtff5sld1lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;641&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在只需要简单的一行即可：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Min&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Ordered&lt;/span&gt;]&lt;span&gt;(a, b T)&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&lt;/span&gt; { &lt;span&gt;if&lt;/span&gt; a &amp;lt; b { &lt;span&gt;return&lt;/span&gt; a }; &lt;span&gt;return&lt;/span&gt; b}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;lodash&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 JavaScript 的世界里，&lt;code&gt;lodash.js&lt;/code&gt; 是一个一致性、模块化、高性能的 JavaScript 实用工具库，其通过降低 array、number、objects、string 等等的使用难度让 JavaScript 变得更简单。并且其不需要引入其他第三方依赖。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以直接调用其中封装好的方法，比如数组去重，防抖函数等等，简化很多代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如去重：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; _ &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&#x27;lodash&#x27;&lt;/span&gt;&lt;br/&gt;_.uniq([&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;]);&lt;br/&gt;&lt;span&gt;// =&amp;gt; [2, 1]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如过滤掉数组中不符合规则的元素：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;var&lt;/span&gt; users = [&lt;br/&gt;  { &lt;span&gt;&#x27;user&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;barney&#x27;&lt;/span&gt;, &lt;span&gt;&#x27;age&#x27;&lt;/span&gt;: &lt;span&gt;36&lt;/span&gt;, &lt;span&gt;&#x27;active&#x27;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; },&lt;br/&gt;  { &lt;span&gt;&#x27;user&#x27;&lt;/span&gt;: &lt;span&gt;&#x27;fred&#x27;&lt;/span&gt;,   &lt;span&gt;&#x27;age&#x27;&lt;/span&gt;: &lt;span&gt;40&lt;/span&gt;, &lt;span&gt;&#x27;active&#x27;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt; }&lt;br/&gt;];&lt;br/&gt; &lt;br/&gt;_.filter(users, &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span&gt;o&lt;/span&gt;) &lt;/span&gt;{ &lt;span&gt;return&lt;/span&gt; !o.active; });&lt;br/&gt;&lt;span&gt;// =&amp;gt; objects for [&#x27;fred&#x27;]&lt;/span&gt;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;// The `_.matches` iteratee shorthand.&lt;/span&gt;&lt;br/&gt;_.filter(users, { &lt;span&gt;&#x27;age&#x27;&lt;/span&gt;: &lt;span&gt;36&lt;/span&gt;, &lt;span&gt;&#x27;active&#x27;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt; });&lt;br/&gt;&lt;span&gt;// =&amp;gt; objects for [&#x27;barney&#x27;]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;somber/lo&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Golang 支持泛型之前，实现像 &lt;code&gt;lodash.js&lt;/code&gt; 这样一套适配多种数据类型的完整的工具库是非常不容易的。有一些开源库通过其他方式实现了部分功能，大致有三种方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;纯手撸&lt;/strong&gt; - 毫无疑问，这种方式是最不优雅的，需要对每种类型进行开发，需要做很多无聊的工作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;代码生成&lt;/strong&gt; - 通过脚本辅助生成针对不同类型的工具函数，比如 go-dash/slice。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;使用反射&lt;/strong&gt; - 这种方式可以实现目的，但是反射会带来较大复杂度和造成运行时性能的下降。go-funk 和robpike/filter都是通过该种方式实现的工具库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;code&gt;somber/lo&lt;/code&gt;&lt;/strong&gt; 是一个基于 Golang 泛型实现的的 lodash 风格工具库，比较好的避免了上面的问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;somber/lo&lt;/code&gt; 包含了非常多的方法，主要可以划分为以下几类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;slice 辅助方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;map 辅助方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;tuples 辅助方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多个集合之间计算辅助方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;搜索查询辅助方法&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;其他函数式编程辅助方法等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以切片去重举例：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;names := lo.Uniq[&lt;span&gt;string&lt;/span&gt;]([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;Samuel&quot;&lt;/span&gt;, &lt;span&gt;&quot;Marc&quot;&lt;/span&gt;, &lt;span&gt;&quot;Samuel&quot;&lt;/span&gt;})&lt;br/&gt;&lt;span&gt;// []string{&quot;Samuel&quot;, &quot;Marc&quot;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用非常简单，并且在大多数情况下，我们可以省略类型的指定:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;names := lo.Uniq([]&lt;span&gt;string&lt;/span&gt;{&lt;span&gt;&quot;Samuel&quot;&lt;/span&gt;, &lt;span&gt;&quot;Marc&quot;&lt;/span&gt;, &lt;span&gt;&quot;Samuel&quot;&lt;/span&gt;})&lt;br/&gt;&lt;span&gt;// []string{&quot;Samuel&quot;, &quot;Marc&quot;}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再比如过滤掉切片中不符合规则的元素：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;even := lo.Filter([]&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;}, &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;(x &lt;span&gt;int&lt;/span&gt;, _ &lt;span&gt;int&lt;/span&gt;)&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; x%&lt;span&gt;2&lt;/span&gt; == &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;})&lt;br/&gt;&lt;span&gt;// []int{2, 4}&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;somber/lo&lt;/code&gt; 基于泛型包装了非常多的工具方法，可以大大节省我们的开发时间，避免重复开发，提升效率。但是该库开源至今才两周，可能会有一些问题缺陷存在其中，线上使用还需要谨慎一些。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 1.18 is released! - The Go Programming Language&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;The benefits of using Lodash in the Go language without reflection (freecodecamp.org)&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;samber/lo: 💥 A Lodash-style Go library based on Go 1.18+ Generics (map, filter, contains, find...) (github.com)&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0400e597b094b0dcc46f3f5680c656a3</guid>
<title>云原生中间件 -- Redis Operator 篇</title>
<link>https://toutiao.io/k/mtls0ge</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;246&quot; data-backw=&quot;578&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;361&quot; data-ratio=&quot;0.425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRic5he50yCuib7JCOjMGaZBkMicBjJv2yaYIwrjPSyPd3Q4rZcuzibKBIOQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;应用上云的进程在全球范围内，进行得如火如荼。以应用为中心，云原生的相关技术和方案，已经覆盖了非常多的领域。除了应用的运行时以外，最靠近应用，也是应用依赖性最大的范围，就是周边的中间件、数据库、大数据等技术。&lt;/span&gt;&lt;span&gt;在云原生&lt;/span&gt;&lt;span&gt;持续&lt;/span&gt;&lt;span&gt;发展，应用上云&lt;/span&gt;&lt;span&gt;逐步&lt;/span&gt;&lt;span&gt;成熟的今天，企业和客户&lt;/span&gt;&lt;span&gt;也开始&lt;/span&gt;&lt;span&gt;考虑自己的下一步&lt;/span&gt;&lt;span&gt;云原生能力规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本篇就来聊聊中间件领域&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;在云原生背景下的一些思考&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;一些思路&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;一些总结。&lt;/span&gt;&lt;span&gt;本篇&lt;/span&gt;&lt;span&gt;以&lt;/span&gt;&lt;span&gt; R&lt;/span&gt;&lt;span&gt;edi&lt;/span&gt;&lt;span&gt;s &lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span&gt;间件为&lt;/span&gt;&lt;span&gt;切&lt;/span&gt;&lt;span&gt;入口，来介绍中间件在云原生中的一些玩法。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;发展过程&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;Dockerfile 构建阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从描述可以看出在做的事情，在起初 docker 刚刚进入大家视野的时候，除了用 docker 来构建件镜像，启动容器之外，也有很多社区的参与者，在尝试着使用这个新颖的技术，来结合到自己熟悉的领域，其中就包括中间件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致的玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 选择基础的操作系统的发行版本；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 构建镜像的 entrypoint script，这个步骤是这个阶段最关键，也是最有挑战的一个部分。一般没有运维经验是写不出来健壮的脚本，因为这个镜像的所有能力都在这个脚本里，会有很多脚本的参数、条件判断、集群模式的版本、存储管理、监控管理能力、软件依赖包的安装、中间件本身的基本配置和高级配置；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 基于构建好的镜像，设计一下运行和部署的方式，用脚本构建不同角色的机器应该部署怎样的容器，以及对应容器的运行参数是什么，同时还要考虑日志的管理，方便运维排查问题；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 最终以部署文档的方式和运维文档，提交给交付人员去交付整体方案。这种尝试和使用容器来运行中间件的方式，是最接近传统的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;docker-compose 编排阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经历了第一个阶段，已经相对熟悉了之后，会思考的问题是，有没有一个好的、简单的编排机制，可以统一来编排和交付。这里就出现了，由 docker 官方提供的编排技术 docker-compose。它可以在一台机器上管理编排能力和编排服务中的各个服务的依赖关系，以及基于本机的服务发现能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致的玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 准备相关的镜像，这些镜像在第一个阶段已经基本 OK 了；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 设计服务之间的依赖关系和启动顺序，保证可以通过统一的命令启动、重启和删除所有的服务，同时在设计这部分的时候，也是需要考虑使用的网络以及使用的存储配置；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 构建 docker-compose 文件、部署文档的方式和运维文档，提交给交付人员去交付整体方案。这种方式已经有了云原生编排和统一运维的风格了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;docker swarm：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在有了基本的编排之后，接下来会思考，如何去跨越主机完成集群的下发和服务发现和网络通信能力。在那个年代，可以选择的也就只有类似 docker swarm、mesos 等类似技术。而 swarm 又是 docker 官方推荐的技术，于是尝试用这种方式来构建的方案越来越多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致的玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 首先要考虑，在不基于主机网络的情况下，容器跨集群的网络应该怎么解决，这里出现了 docker 的 CNM 网络模型，swarm 可以实现跨主机的通信、routing mesh、dns rr 等能力;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 需要分析中间件集群在这样的网络方案中，网络的使用方式是什么，特别要考虑是不是使用 dnsrr 的服务发现机制；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 基于选择的技术方案，构建编排文件，这里的编排文件其实就是 docker-conpose，因为 docker-compose、swarm 都是 docker 官方的方案，所以互通能力是很正常的；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 最终以部署文档的方式和运维文档，提交给交付人员去交付整体方案。这种方式已经是实现了跨主机，在整个 swarm 集群中动态的，统一的管理中间件的部署了，也是看起来更云原生的方式了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;K8s 尝试和验证:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候，就会触发大家的重新思考和技术选型。最终不负所望，K8s 成为了容器运行、容器编排的事实标准。那接下来，中间件的容器化方案，肯定也是要跟着升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 首先还是要有可靠的容器镜像方案，随着整个阶段的发展，有很多不错的中间件，都逐步有了官方的镜像，这让中间件容器化更加的有动力去做这个事情；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 接下来就是要升级之前的编排方案，依据是之就开始在尝试和积累的阶段。如果上手的阶段，是 K8s YAML 编排阶段，那就是从这里开始设计。如果是 docker-compose 或者 swarm 的阶段，那升级的思路就是使用 K8s YAML 的各种能力，适配之前 docker-compose 和 swarm 的各种能力，如服务发现机制、网络组建能力、镜像启动方式、容器资源使用限制、服务对外访问方式、集群内部组件之间的集群通信网络、存储的方式、基于 sidecar 的监控方式等等；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 最终以部署文档的方式和运维文档，提交给交付人员去交付整体方案。这种方式已经基于 K8s 实现了跨主机。在整个 K8s 集群中，相对手动一点的统一管理中间件的部署，完成了基于 K8s 的中间件部署能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;helm 编排阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;helm 是类似 docker-compose 的工作，只是作用的对象不一样，一个是作用于 docker 和 swarm，一个是作用于 K8s。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 根据 YAML 编排阶段，设计和完成的 YAML 文件，使用 helm 的编排技术进行模版的制作；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 使用 helm 提供的打包机制，进行打包和发布，这样可以批量完成，在不同环境进行的安装和使用；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 如果对模版有特殊的要求，比如有一些平台可以基于 json schema 完成动态表单能力，还会进一步的制作 helm 的模版，让其支持更多的能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 最终以部署文档的方式和运维文档，提交给交付人员去交付整体方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Operator 能力阶段：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最近这一两年，对中间件的更高级的玩法，社区也在不断思考和发展。其中很有代表性的一个技术就是 Operator。那 Operator 是什么？这里简单的总结一下，Operator 是一种基于 K8s 的申明式的能力，是扩展 K8s 生态和能力的方式。Operator 可以理解成是一个框架，或一个 SDK。具体使用这个技术完成什么样的业务能力，由使用者和需求来决定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举例，基于 Operator 可以完成自己产品的安装和管理、产品能力的开发、服务的统一管理和上下架能力等等。那在有了 Operator 之后，中间件的方案会有怎样的变化呢？首先，最大的特点是程序化、自动化能力可以更加的灵活，可以工程化的设计方案、研发方案、发布方案。每一个中间件都是非常复杂的一套系统，解决特殊领域的问题。既能发挥出中间件复杂业务能力，还能更加自动化、可自治化、可迭代化，可以说 Operator 是一个很好的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前面几个阶段，都是基于手动、模版、编排的能力，完成方案设计和部署能力。在使用 Operator 之后，整体的工作会有很大的区别。首先需要在之前的基础上，熟悉中间件本身的能力，熟悉基本的编排。其次需要精通 Operator 开发的能力，来支持开发出一个健壮稳定的 Operator，这是非常重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大致的玩法可以总结为以下几个步骤：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 构建基础镜像，既然有开发能力，那推荐的玩法是可以基于配置文件，或者中间件的 API/SDK 来扩展其能力，所以更加倾向于选择基础镜像，这样可以借助社区的能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 设计 Operator 实现的目标和范围，也就是具体的需求是怎样的。不同的需求，实现的方案是不同的。社区有一个 Operator 的成熟度模型，不同的Level 的 Operator 要完成的目标是不一样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 根据需求设计实现的方案；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 定义 Operator 的业务模型 CRD；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5. 开发 Operator 的核心 Controller 来完成业务能力；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6. 最终以部署文档的方式和运维文档交付，也可以是一套标准的基于 Operator 开发的中间件产品为交付物。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;常见玩法&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;YAML 方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种玩法是熟悉 K8s YAML 的运维人员，很喜欢的一种方式。特点是直观，部署方式固定，而且简单。常见的操作是，能够以传统运维的方式来运维，因为运维人员关注和操作的单元，还是以物理机/虚拟机为运维点。正常使用交付物的方式是，先学习文档，然后规划机器，以及每个机器的角色，然后根据文档进行安装，最后交付出一套一套的中间件集群给到最终客户。这个玩法适合不需要太多自动化、智能化的诉求的方案，快速、简单、交付难度小、交付周期小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;helm 方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种玩法只是在 YAML 的基础上，做了一个封装，以及可以稍微标准化一点的交付方案。这个看习惯。但是和 YAML 不同的地方是，helm 还提供了一套管理机制、打包机制、发布版本机制，能够以制品的方式，将制作好的 chart 包，上架到一些仓库中，例如 harbor 是有 chart 的仓库。还有一些产品和平台，也支持基于 helm charts 的服务上下架能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Operator 方式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种玩法一般是大规模的，对中间件部署有很高的要求，特别是中间件能力中的可开发能力、可自愈能力、可封装能力、可系统化能力、可云原生能力。随着这部分的需求和方案越来越普及，这种玩法也将逐步成为主流方式。让中间件本身成为云原生的一部分，让企业的这部分基础设施能力可 IT 化、可兑现化。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;03&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;技术术语&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;哨兵模式&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是 Redis 的集群模式中的一种，特点是支持三种角色。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一种是 master 角色，支持读写；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二种是 slave，支持读，同时需要从 master 复制数据；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第三种是哨兵，从字面意思可以理解，它的作用就是站岗，查看 master 的状态，以及集群中有哪些 slave。当发现 master 不可用了，要选择最可用的 slave 来担任 master，保证 Redis 的数据可写。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;集群模式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是 Redis 中，处理更大规模数据能力的集群方案。特点是：&lt;/span&gt;&lt;span&gt;支&lt;/span&gt;&lt;span&gt;持&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;t &lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;方式&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;分配数据的&lt;/span&gt;&lt;span&gt;分布，是一种分片的模式；&lt;/span&gt;&lt;span&gt;支持多主多从的能力，不同的主处理不同&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;lots&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;主从之间和哨兵&lt;/span&gt;&lt;span&gt;模式的力类似，也会&lt;/span&gt;&lt;span&gt;有&lt;/span&gt;&lt;span&gt; s&lt;/span&gt;&lt;span&gt;lav&lt;/span&gt;&lt;span&gt;e &lt;/span&gt;&lt;span&gt;复制 &lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;aste&lt;/span&gt;&lt;span&gt;r &lt;/span&gt;&lt;span&gt;数&lt;/span&gt;&lt;span&gt;据的场景&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;他们的不同是，当 master down 了，哨兵模式是由哨兵角色的节点来完成主从切换，而集群模式的主从切换是，由角色是 master 的所有节点参与这个过程，最后由选中的其中一个 master 来完成切换动作。判断 master down 了没有，在哨兵模式中，是由哨兵来完成，而在集群模式中，所有节点都会参与。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;对外可达：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有一些方案在实现的时候，需要外部非容器化的服务也可以使用容器化的中间件能力，这就是对外可达的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只是在选择对应的方案的时候，会有不同的选择，有的支持 K8s 的 NodePort Service，有的支持 LoabBalancer Service，有的基于开源 haproxy、nginx、envoy 或者商业化的 4 层负载，还可以使用 eBPF 实现高性能的 4 层负载，如 Cilium 中的 XDP LB 等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Operator：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是一种扩展 K8s 能力，将业务能力云原生化的一种技术框架，可以理解成是由 Controller + CRD 组成的框架，同时 Operator 提供了代码的脚手架，可以快速地生成代码框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;申明式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是 K8s 的理念，根据定义的配置，不断的调和期望的状态，让被管理的资源对象的状态，逐步得向正确的、期待的方向演进，最终达到正确的状态。这个过程不是一次就结束了，而是不断调和的过程，一旦发现不是期望的状态，就会重复的执行控制逻辑。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;04&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;研发流程&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;熟悉基本概念和集群架构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在设计 Operator 之前，首先要熟悉对应中间件的传统的玩法、基本的概念、集群的模式有哪些，以及常见的使用场景和使用方式有哪些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个过程中，更关注的是 Operator 的需求收集，有的客户需要的是哨兵模式的，有的客户需要的是集群模式，有的客户只想在开发环境提供单点的模式的。所以这个过程需要判断出，正确的部署支持的模式。并且根据运维的经验，提出合理的玩法和需要的操作能力，这些都是需求的来源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计出高可用方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在确定了需求之后，接下来就需要根据具体的需求，选择对应的集群高可用的方案。如：选择怎样的容器网络、怎样的存储方案，是不是一定要完成跨机房的，甚至跨越地区的需求？然后设计对应的高可用的方案，这个方案是后续真正实现 Operator 架构设计时的重要技术方案的输入。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为不同的方案，需要对应的领域模型和实现的方式都不一样。但是是不是方案就是唯一的？其实不一定，根据需要可以设置参数来支持多个集群方案的能力，或者为不同的集群方案设计不同的 CRD 业务模型，都可以达到适配多方案的能力。在设计高可用的时候，有时会依赖一些外部系统的能力，如基于 K8s 的时候，会涉及到存储方案的选择和设计，以及底层网络的方案的选择，不同的存储方案和不同的网络方案，都会直接影响最终设计的 Operator 的实现方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计容灾方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据备份以及跨机房的部署集群，都是保证数据安全的方法。使用数据备份的机制是最常见的玩法，包含常见的热备和冷备等，根据数据安全以及恢复时间的要求来选择，而且不同的中间件数据备份方案都不太一样。备份毕竟是备份，在出现问题的时候：是否可以在短时间内恢复系统，或者直接切换流量？这个问题，在基于备份的方案中，感觉还是有一定的风险的，不管是不是热备，以及备份的最大的 lag 是多少。那这个时候，对跨中心、零 Down 机 的场景，有时候就需要选择中间件跨机房、跨区域部署。正常情况下，在保证有两个机房是正常的情况下，集群是处于可用状态。一般会采用两地三中心的部署方式，如果要求再高一点的，会采用三地五中心的部署方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计可靠的监控和告警方案：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;监控和告警不仅仅是中间件需要的，应用也需要的，只是中间件的监控能力都是相对固定的。因为这些监控能力，都和特定的中间件绑定。在有了监控数据之后，就可以完成告警的设计，这个也是经验活，需要根据常见的一些问题，设计告警规则，逐步验证，最后上线到生产环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发健壮的 Operator：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在中间件的本身需求、常见的运维方案，以及数据安全的需求确定了之后，就可以开始进入研发阶段。在这个阶段中，我们需要根据需求去设计领域模型，然后将领域模型转换成 CRD 的定义。通过 Operator SDK 框架去生成初始代码，其中包含了 CRD 的模型，以及对应的 Controllers。在开发阶段，就需要在可运维性上包含进来，包括日志的可读性、错误的处理、监控的指标设计、告警规则的规划、备份的实现方式等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计集群的验收标准：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在研发阶段结束之后，交付给客户之前，需要对实现的方案进行各种验证，包括可靠性、可恢复性、性能、吞吐量、功能等等，这些是不是都是满足预期的。这个过程需要有一定的中间件的经验和开发 Operator 的经验。其中会包含各种测试的 case 要设计，case 越完整，方案会越稳定，可维护性更高，如包括：down 点测试、压力测试、功能测试、高可用测试、备份/恢复测试、监控测试、告警规则合理性测试等等。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提供完善的运维文档：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不管哪种方式来交付中间件的方案，最后都需要提供完整的运维文档。但是基于 Operator 来交付，运维的文档内容和其它的稍有不同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本身中间件就是一套复杂的系统，本身有很多运维相关的知识，同时官方的文档也会比较完整。但是基于 Operator 的方案，还需要提供 Operator 部分的运维方式，中间件的使用方式，以及实现思路，说明有没有因为 Operator 方案的设计，而引入特殊的玩法和运维的方式。毕竟是两套系统的整合 (中间件 + Operator 程序)，所以需要更加完整的运维交付文档。同时针对容器运行的方式，针对存储和网络等依赖的方案，以及监控和告警的能力，去精细化运维方式。&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;05&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;需求分析&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;5.1 单点模式需求&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以部署单点的 Redis 容器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;版本支持优先 5.0 版本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以调整 Redis 的配置文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以设置资源大小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以备份&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以基于备份恢复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以监控 Redis 的运行情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以对 Redis 的运行情况进行告警，并对接告警平台&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的持久化，使用支持 storageClass 方式的 PVC&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持删除 Redis 服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持对外可访问&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持设置密码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持查看 Pod 的实时日志和离线日志&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 的 exec 能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持下载 Pod 中的日志文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 以及 Statefulset 资源对象的常见操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的常见能力的运维操作，如查询 key 等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储空间的扩容能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;5.2 哨兵模式需求&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以部署哨兵模式的 Redis 容器集群&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;版本支持优先 5.0 版本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以调整 Redis 的配置文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以设置资源大小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保证部署的排它能力，避免重要的服务跑在一台机器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以备份&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以基于备份恢复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以监控 Redis 的运行情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以对 Redis 的运行情况进行进行告警，并对接告警平台&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的持久化，使用支持 storageClass 方式的 PVC&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持删除 Redis 服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持对外可访问，而且保证访问入口的地址不变&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持设置密码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持快速扩容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持快速缩容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持查看 Pod 的实时日志和离线日志&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 的 exec 能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持下载 Pod 中的日志文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 以及 Statefulset 资源对象的常见操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持查看集群的拓扑图&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的常见能力的运维操作，如查询 key 等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储空间的扩容能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;5.3 集群模式需求&lt;/span&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以部署集群模式的 Redis 容器集群&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;版本支持优先 5.0 版本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以调整 Redis 的配置文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以设置资源大小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保证部署的排它能力，避免重要的服务跑在一台机器&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以备份&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以基于备份恢复&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以监控 Redis 的运行情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以对 Redis 的运行情况进行进行告警，并对接告警平台&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的持久化，使用支持 storageClass 方式的 PVC&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持删除 Redis 服务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持对外可访问，而且保证访问入口的地址不变&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持只对内提供访问地址&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持设置密码&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持快速扩容，包括支持单个分片集群的规模，以及总体的分片规模&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持快速缩容，包括支持单个分片集群的规模，以及总体的分片规模&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持在扩容的过程中，自动完全 rebalance 能力，包括自动迁移 slots 和 keys&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持查看 Pod 的实时日志和离线日志&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 的 exec 能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持下载 Pod 中的日志文件&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Pod 以及 Statefulset 资源对象的常见操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持查看集群的拓扑图&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持 Redis 的常见能力的运维操作，如查询 key 等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;存储空间的扩容能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;06&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;中间件方案&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;以下介绍了 Redis 组建成集群的两种模式：哨兵和集群，在不同需求场景下的不同的设计方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哨兵模式 - 方案一：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在传统的方案中，有一种方案是，可以基于 haproxy 做 master 检查的能力，这里介绍的就是使用此机制的方案。haproxy 的访问地址，一直保持代理的 Backend 节点的角色是 master 角色。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;389&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7120980091883614&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRowRKZgAicsBHDAVthk9ia1qsNMI1A0HCgibIRmdnAYDFRaBpQmgrP3hTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1306&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;哨兵模式 - 方案二：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用 K8s 的 service 的 update endpoint 的方式，来设置自己代理的一直是，master 的那个 Pod 的 IP 地址。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;333&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6104294478527608&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRzM5p9pc2l9aEupt6aDYbWl8DBbIo2ofSwl4RX9Cjbh1IybwS8VUicEg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1304&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;哨兵模式 - 方案三：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有一些 JDK 提供了基于访问哨兵的地址，通过 SDK 本身的能力来发现 master 节点。以下方案就是类似的机制的方案。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;325&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5955056179775281&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoR1MXER6utibV6Ou1cZr3ExOHica7se964W5eUBBczogsKmibeDteJNMr1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1780&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;集群模式 - 方案一：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在集群模式中，客户端访问的方式，支持设置一组地址，由 SDK 来连接和使用集群。以下方案就是提供了类似的方案，同时这些地址是外部可达的，非容器集群的服务也可以访问这个 Redis 集群。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;388&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7115135834411385&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRLDoGxAS0WxzEMldeicBNWhWAIFmMnOfZLa8EGog6B4sSYmJLghWt6cw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1546&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;集群模式 - 方案二：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在有一些特殊的安全场景下，客户会要求访问的入口地址，有代理能力。不能因为集群规模的变化而去改变连接地址，而且连接的地址范围越小越好。以下方案就是完成类似能力的方案，客户的访问地址，永远只有一个地址。类似 envoy 支持的代理能力。新版本 6.0 之后也内置支持了 proxy 的能力。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;389&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7131882202304738&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRfSxR095UhuVoyPR3SGbmib79RAUURPia0h8ZIIpz1icWwb6M1qdv37zicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1562&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;07&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;架构设计&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;整体实现可以基于 Operator SDK 技术框架，Operator 的实质就是，用 CRD+Controller 来完成 K8s 特色的申明式的能力，不断的调整和修复，直到达到期望的状态，如果过程中发现偏离理想状态的，会一直调整和修复。这个过程的入口就是 Operator Controller 中的 Reconcile(req ctrl.Request) (ctrl.Result, error) 接口。&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Reconcile 的核心思路：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;176&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3220696937697994&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRybr9LzzKYichK0kibIKrDGc8XuhLicmPmPlgMp3kNzRn5OWVjWAvRQd3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1894&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;中间件处理的核心逻辑：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;328&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6004296455424275&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRolLyAYtuicIhck6HHjNy4VBZShcjknm4L3y4mnSgSA58eUc2bouOYLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1862&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;08&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;样例分析&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;8.1 模型样例&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单点模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;238&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.43478260869565216&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRO0ssWD5QLVUEMJ8lmBOsZnOviau1jZfbplwPBhlrlLQry3aibq8b9r7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1242&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;哨兵模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;295&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5408805031446541&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRC8D5d8XkJamz3gf2kaYlHKkhEj2vYarrIjgT43ZibTUuc7K7DnC4JDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1272&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;集群模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;301&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5511049723756906&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRr3GaF8QibL9Gib42pySiaN2k5HhFHb25gNBTSbgYiafnCnHKJENnA5Ce4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1448&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;备份模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;133&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24306688417618272&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRNJOyiab8QK6ynueMvklucYSVsjXytoibWt8IQexb8kr73nexHJpdMuiaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;8.2 使用样例&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;单点部署/备份/恢复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;954&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.7463556851311954&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRYyHboLogvP1zVG28kxOLdLgRC1o1VicdguecxNn4tOMnfFsUY8YRs8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;560&quot; data-backw=&quot;546&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0259365994236311&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRibrP8pMaCWOpIib8LAqic8SJewRticOdg4bqtCCOTGH9GvWyGQEHx2pj8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;694&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;671&quot; data-backw=&quot;546&quot; data-ratio=&quot;1.2289156626506024&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRVtYHlAEoRYLJ0Al7MM6AraiaX3lhj3w8NFmLUWPdRbaXJ0wVGCLKWQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;哨兵部署/备份/恢复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;1036&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;947&quot; data-ratio=&quot;1.8972809667673716&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRdqrqkMwcZONyHSSZ20UaMiav1YgWmTWfWwhLDTszZvXky1hWDawJmOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;551&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;560&quot; data-ratio=&quot;1.0082872928176796&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRZAwJCQNYwRDKFBwBDqykPg0muabsibltfIBshvboiab486drTHiahoTAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;682&quot; data-backw=&quot;546&quot; data-ratio=&quot;1.248502994011976&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRWDeXwP5DDNZGa7OCeuhnkq5ITYrUKuTuoSj2fJgEs5LDuvmpn4JfGQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;集群部署/备份/恢复&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;806&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;785&quot; data-ratio=&quot;1.4757575757575758&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRviau17KUzGmWZmFjbbYpAxToicnLTlwQic16cqPZpLicb72F0cGOoiaf4tw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;558&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;563&quot; data-ratio=&quot;1.0224719101123596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoROKqLa1CCbtT0L3sJ3muIwia33iaGy8dp8RTTRNA8Jd5gI5pAKQOcntLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;712&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;607&quot; data-backw=&quot;546&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;546&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;589&quot; data-ratio=&quot;1.1121495327102804&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoR7Vc9iarkgxpY2iaiahK5uAyTic98sLwpHNYKnF36CBEZV19hHowfDvzYQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;642&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;8.3 监控图表&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;271&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.49636627906976744&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoR001SYLsFXjx37wJ1oiaYrB2ibTMian8Md3w3FouiaOv2DuQeHWmiaSjjbxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2752&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;207&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.37915742793791574&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nQiaVp8HWQaXicNFINbesEoRARx7aeeRyLKjic7G0mb3qA3hofYJwRHV7gnyYN03TTGcX6xhChTacfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2706&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;09&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;跨机房方案的探索&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;在跨机房的方案设计中，传统的使用方式也有很多成熟的玩法。在跨机房的背景下，除了底层设施的稳定之外，更多关注的还是跨机房的调度能力。但是在云原生的发展过程中，对于跨机房的调度的能力，还在思考和构建中，这里提供一些思路仅供参考，不做详细分析。以下列举大致的几种思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;传统玩法：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;大多是设计好部署方式之后，由一个下发点去下发，可以是程序化的下发实现，或者基于自动化运维工具，如类&lt;/span&gt;&lt;span&gt;似&lt;/span&gt;&lt;span&gt; a&lt;/span&gt;&lt;span&gt;nsibl&lt;/span&gt;&lt;span&gt;e &lt;/span&gt;&lt;span&gt;这&lt;/span&gt;&lt;span&gt;类工具，操作的目标对象是物理机器或虚拟机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;容器的玩法一：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;span&gt;只拿容器当作虚拟机来使用，整体下发方式还是先规划集群&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;集群中的哪些机器&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;span&gt;以及在不同的机上，规划部署的中间件组件的角色，最后通&lt;/span&gt;&lt;span&gt;过&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;K8s&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt; c&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;d &lt;/span&gt;&lt;span&gt;去&lt;/span&gt;&lt;span&gt;完成下发。&lt;/span&gt;&lt;span&gt;这个玩法&lt;/span&gt;&lt;span&gt;直接&lt;/span&gt;&lt;span&gt;且更接近传统玩法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;容器的玩法二：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这里有一个前提是，K8s 的集群会分为控制集群和计算集群。控制集群也可以理解成管理集群，主要完成控制逻辑，而计算集群是真正运行中间件容器的集群。可以尝试使用社区里最近发展的一些技术。如 Karmada 技术，具体可以参见官方文档或参见&lt;/span&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5NTUxNzE4MQ==&amp;amp;mid=2659273869&amp;amp;idx=1&amp;amp;sn=f6e03df6f34aa6106972193dba1604d8&amp;amp;chksm=8bcbcc1fbcbc4509060f92b3d636c28c6ccaad62fa3aeb4da9f17971b06e655d1d1385ab2f2c&amp;amp;mpshare=1&amp;amp;scene=21&amp;amp;srcid=01065KNXENodKMIWVJ3MpF6u&amp;amp;sharer_sharetime=1646837785486&amp;amp;sharer_shareid=a2e9742e6aa3f44e17c5f7c71530c1a5&amp;amp;version=4.0.0.6023&amp;amp;platform=win#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;《云原生多云应用利器--Karmada 总览篇》&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;基于 Operator 来设计和实现中间件的能力，更具有可工程化的能力、可编程能力、智能化运维的能力、云原生的能力、监控告警一体化能力。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;hr data-style=&quot;border-style: solid; border-width: 0px 0px 0px; border-color: rgba(0, 0, 0, 0.1); transform-origin: 0px 0px; transform: scale(1, 0.5);&quot; class=&quot;js_darkmode__10&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; 本文作者 &lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15886644409858=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15886644409858=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 5px; margin-bottom: 5px; max-width: 100%; background-color: rgb(255, 255, 255); min-height: 1em; letter-spacing: 0.544px; white-space: normal; text-align: center; box-sizing: border-box !important; overflow-wrap: break-word !important; color: rgba(230, 230, 230, 0.9);&quot; class=&quot;js_darkmode__6&quot; data-darkmode-bgcolor-16372053747624=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16372053747624=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16372053747624=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-16372053747624=&quot;#fff|rgba(230, 230, 230, 0.9)&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;117&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;114&quot; data-ratio=&quot;0.98565965583174&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04keMUUKWIVfK2vq0U4OWjZW0ibeLucpCYKfe8j9xibIy58icgEZ0zWiaJNWCuy2iaAlooxdlVO4JUZR7SQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;熊中祥&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;「Dao&lt;/span&gt;&lt;span&gt;Cloud 道客&lt;/span&gt;&lt;span&gt;」技术合伙人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云原生技术专家&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-15886644409858=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15886644409858=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 5px; margin-bottom: 5px; max-width: 100%; background-color: rgb(255, 255, 255); min-height: 1em; letter-spacing: 0.544px; white-space: normal; text-align: center; box-sizing: border-box !important; overflow-wrap: break-word !important; color: rgba(230, 230, 230, 0.9);&quot; class=&quot;js_darkmode__6&quot; data-darkmode-bgcolor-16372053747624=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16372053747624=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16372053747624=&quot;rgba(163, 163, 163, 0.9)&quot; data-darkmode-original-color-16372053747624=&quot;#fff|rgba(230, 230, 230, 0.9)&quot;&gt;&lt;/p&gt;&lt;section&gt;&lt;hr data-style=&quot;border-style: solid; border-width: 0px 0px 0px; border-color: rgba(0, 0, 0, 0.1); transform-origin: 0px 0px; transform: scale(1, 0.5);&quot; class=&quot;js_darkmode__10&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/icGWTH9VkFq3qkSDQic93bFVw7hfdhjWInq4jtwTQk0tmSP823b4XOVbibm63dxzwAPyvXia151ZFQ2K5sDvcTl5Sg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;DaoCloud 公司简介&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;「DaoCloud 道客」云原生领域的创新领导者，成立于 2014 年底，拥有自主知识产权的核心技术，致力于打造开放的云操作系统为企业数字化转型赋能。产品能力覆盖云原生应用的开发、交付、运维全生命周期，并提供公有云、私有云和混合云等多种交付方式。成立迄今，公司已在金融科技、先进制造、智能汽车、零售网点、城市大脑等多个领域深耕，标杆客户包括交通银行、浦发银行、上汽集团、东风汽车、海尔集团、屈臣氏、金拱门（麦当劳）等。目前，公司已完成了 D 轮超亿元融资，被誉为科技领域准独角兽企业。公司在北京、武汉、深圳、成都设立多家分公司及合资公司，总员工人数超过 400 人，是上海市高新技术企业、上海市“科技小巨人”企业和上海市“专精特新”企业，并入选了科创板培育企业名单。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;网址：&lt;/span&gt;&lt;span&gt;www.daocloud.io&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;邮件：info@daocloud.io&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;电话：400 002 6898&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5900621118012422&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1DjrTiaica04nnwnvanKwk0ym0zoD77xItIh02tUNoicUUbD7WibONpElX4j6sp8cx13q3jBZgVZXM8fiaic5scLwKjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot; data-backw=&quot;562&quot; data-backh=&quot;332&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>