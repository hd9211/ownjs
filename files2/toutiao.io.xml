<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>83ea36460ed6ec41598dcb1ae06fe652</guid>
<title>​程序员划水指南</title>
<link>https://toutiao.io/k/gheevc3</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;快过年了，跟我可爱的小侄子通了个电话，上来就说，&quot;叔叔你头发怎么变少了&quot;，我很痛心，我的小侄子，年纪轻轻的，眼神已经这么不好使了。但转念一想，这也是他对我的一种关心，作为叔叔，也该回应一把，今年过年给他带一本《少儿编程》回去当礼物吧。&lt;/p&gt;&lt;p&gt;但转念又一想，也许我真的头发变少了呢，我强壮的体魄不再足以支撑我肮脏的灵魂了呢，或许真的应了那句古语，&lt;strong&gt;程序员固有一死，要么骚死，要么猝死？&lt;/strong&gt; 我好残忍，我竟然想让我的小侄走上这么一条不归路。&lt;/p&gt;&lt;p&gt;可是我这一身编程本领好想传授予人，我还想不想那么快一&quot;猝&quot;而就。我还想看着小侄子长大成人，然后在面试他的时候偷偷放水，再把他招进部门结对编程，我一定要活久一点。我想一定还有跟我一样有未了心愿的程序员，于是今天我将祭出所有防猝死技能，&lt;strong&gt;希望赠与有缘人&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;换行业&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;这是最直接的解决方案，那么问题来了，应该去哪个行业呢？程序员下岗后一般再就业的岗位不是送外卖就是送快递，这两个工作从工作强度和工作时长来说，丝毫不比程序员轻松。这就片面了。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.0018587360594795&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmm7iaMouITfYqrY8uwKgQHDGIw3jTuL6XbhicqBe43ck0pEDfAHOaCcfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1076&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;有时间送快递和外卖的话，那不如老老实实考个公务员吧。程序员怎么成为公务员？这里正好有一个github项目，就教你如何成为一个公务员。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/coder2gwy/coder2gwy&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连怎么安排学习时间，怎么请假都安排得明明白白，贼吉尔细心。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6261040235525025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmQNO4T7I6kmUcPyueAmzROHjslh1T74z5xQleBNibhSzQnmmARibqwBhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2038&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4456824512534819&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicm0DVeTA8CgAY8ia0pB84PGeML7jsHfjwhB75Y0rnXIpCrcnS49hRsqdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2154&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;跳槽到965的公司&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;从程序员跳槽到公务员或者是教师这条路子比较艰难，虽然我相信大部分程序员在考试上面都比常人要更擅长些。&lt;/p&gt;&lt;p&gt;一旦选择考公务员，等于放弃自己学习多年的技能，什么&lt;code&gt;mysql&lt;/code&gt;，&lt;code&gt;redis&lt;/code&gt;，&lt;code&gt;java&lt;/code&gt;，&lt;code&gt;设计模式&lt;/code&gt;这些，都将成为过眼云烟，选择成本巨大。就算成了，也可能会后悔，或许会在某个四下无人的下午三点，用当年的程序员杯子装着这周xx办主任送的茶叶泡的茶，写着 &lt;strong&gt;《下班总结》&lt;/strong&gt;，感叹这个世界少了一个出色的程序员。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.998&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmYsBGINEWdlhCklolcbDMdJ0sAOPPp4oPK8UlZG13NmnulfMGPibdiabQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;那么跳槽到一个965的公司，可能可以帮助你远离猝死。那么问题来了，怎么样找到995的公司？&lt;/p&gt;&lt;p&gt;还记得n年前的那个996icu吗？&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/996icu/996.ICU&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4294478527607362&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmuDdq7tJO63hqnwZh1wicCRDr6789JGRp7u7iaxaF3Iib6rr6t518UkFjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1630&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;里面贴心地给出了一份996的公司名单，如果你坚决拒绝996，那么从拒绝这份名单里的公司offer开始。&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/996icu/996.ICU/tree/master/blacklist&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6169811320754717&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmLynMYMb6OMYFMmMegnsTG44zgiaeySyax5ax0SemELm1c6ByvWrpbqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2120&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;br/&gt;同时给出了这些公司996的证据，真正做到&quot;拒绝张嘴就来&quot;和有理有据，非常符合程序员讲事实摆道理的性格。&lt;p&gt;建议大家根据钱包厚度和身体承受能力进行选择，996下班不可怕，可怕的是，半夜一个报警就可以爬起来愉快网上冲浪了。以前高中的时候还要翻墙出去网吧通宵，现在在家里就能做到！&lt;/p&gt;&lt;p&gt;同时也给出了一份965的公司名单。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/996icu/996.ICU/tree/master/whitelist&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是值得一提，这些公司都比较少，同时不排除哪一天不会变成996。毕竟制度是人定的，公司也是要盈利的，哪天换了个领导冲kpi，大家也只能一起冲冲冲了。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5968342644320298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmn9xzM74ocnID1wwYW5KMcVObfBH755kd9Wbhyn61V2wYWrL4iamkv3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2148&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;结论上来说，996的公司比965的公司&lt;strong&gt;多太多&lt;/strong&gt;，大部分有志青年都在996的公司里，&lt;strong&gt;既然无法避免，那就要学会怎么在工作中防猝死&lt;/strong&gt;。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;学会划水&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;如果你已经在996的公司里，同时你的钱包需要你通过这种方式出卖劳动，那么显然换行业，跳槽，都不太适合，毕竟轻松意味着钱少。那么怎么在996公司里防猝死呢？&lt;br/&gt;划水成为唯一答案，划水其实也是一种技术，是分等级的，下面分享几个实用的划水技巧。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;初级划水技能&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;初级划水技能是属于每个程序员都要学会的基础技能。&lt;/p&gt;&lt;h4&gt;&lt;span&gt;不要让自己看起来很闲&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;不管是因为你是真的很闲，还是因为你效率高很快把活干完了。如果你看起来很闲，老板就容易会认为你工作不饱和，从而不断加活，直到你看起来一直在忙为止。既然如此，如果你一直看起来很忙，那么这样的问题可以被很好的避免。而vscode是程序员最常用的编辑器，我们可以在此基础上找到很多划水神器。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9840909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmqdmOPNhHRrVianTbunkrdQ0qjnzlzUm0p2wxwGNUAIJHrYbflCT0Hmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h5&gt;&lt;span&gt;模拟写代码&lt;/span&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/zy445566/vscode-plugin-swimming&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码写的快，提早完工被压榨怎么办？你需要一个模拟写代码工具，让VSCode模拟写代码，划水、摸鱼神器，让代码自己重写一遍。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6749116607773852&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmqS7FP8Ur2rBeDpfiaabcVSxianVueahfp48icLUOWDQwp6MYQTolSJorQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1132&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h5&gt;&lt;span&gt;看小说工具&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;上学那会偷偷摸摸看小说时会在小说本上套上一层课本封面，以此来掩盖上课划水的行为。同样的道理，下面这个插件感觉跟上课看小说的经历有点像，他让开发者可以在 VSCode 上边写代码边看小说。&lt;/p&gt;&lt;p&gt;下次等产品经理路过你身旁的时候，以为你写了一堆密密麻麻的的代码，都不好意思再给你加需求。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6391402714932126&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmlufEN7KxgzIcz1ibaJMLO5T2X4TGU98XyYHA22F1p5EnkhMzibjwWKLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1768&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https://github.com/zrk1993/&lt;span&gt;read&lt;/span&gt;-vscode&lt;span&gt;-e&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;听音乐插件&lt;/span&gt;&lt;/h5&gt;&lt;p&gt;做事做全套，还要在vscode装上听音乐的插件。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmibneajL8NAjcXE2r1LZZceEjtakicKrKf65bjich0NVqFlEpk6w9zGMoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/nondanee/vsc-netease-music&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5&gt;&lt;span&gt;炒股&lt;/span&gt;&lt;/h5&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7212449255751014&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmuIVGCaXWEY70nhFgyic7mW9BMXhG0Eic5JdbxSicPWr2DVUOVfjoRibu6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1478&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/roblourens/vscode-stocks&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;中级划水技能&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span&gt;项目时间预估&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;每次需求迭代，产品都会让开发给出一个开发时间。&lt;/p&gt;&lt;p&gt;我接触过的百分之90的程序员都是老实的小伙子，是多少就报多少，有些为了方便产品快速看效果，还会压缩自己的时间，这种情况在新人程序员里尤为明显。&lt;/p&gt;&lt;p&gt;但有些不讲武德的产品，会动不动做一点 &lt;strong&gt;小小的改动&lt;/strong&gt;，同时因为改动&lt;strong&gt;较小&lt;/strong&gt;，之前提到的时间一般不会更改。&lt;/p&gt;&lt;p&gt;如果你所在的项目中产品不止一个人，就可能出现多个产品给你提需求的情况，改动不大，但挺急。&lt;/p&gt;&lt;p&gt;一个程序员越老实，就越不会表达，选择闷头苦干，有些甚至牺牲节假日时间在家干活。&lt;/p&gt;&lt;p&gt;因此为了更好的应对这些非常常见的情况，建议再估计工时的时候，都多预估至少20~50%的时间当做buffer。&lt;/p&gt;&lt;p&gt;如果你提前做好需求，&lt;strong&gt;请务必不要提前给产品看，这只会方便他在看到实物后做出更多的变更&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.990909090909091&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmtpPLa28OdaHTOHNO2FbCXia3dFCicq4yPomxQIKG5UkblofHUyoL0D0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;440&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;如何巧妙的推掉需求&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;很多产品在做每一期迭代开发需求的时候，会有无穷无尽的想法，而且恨不得都全部实现，最好今天就能给到。&lt;/p&gt;&lt;p&gt;大部分老实的程序员，会选择尽可能满足这些可爱的需求。这些永远没办法做完的需求，才是耗尽程序员心力的重要因素。&lt;/p&gt;&lt;p&gt;你需要给每个需求和变更排期，给需求留足buffer，确保线上出问题的时候你还有时间去处理。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;让产品给这些需求排优先级&lt;/strong&gt;，从高到低，算好每个需求的人日，做不了一定要提出来，剩下的让不同产品去pk优先级，确保你不过劳。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9138576779026217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmJhPS55cW3JqGox0QgkSqI75DxGGx7Uu6G2Co58EOD96jtKKL0E4mFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;267&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;减少不必要的沟通&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;很多不明真相的产品、运营、其他部门的开发会通过各种途径找到你，大部分时候他们找你都是为了向你询问一些无关痛痒的问题。&lt;/p&gt;&lt;p&gt;有些时候当他们询问的问题触及技术细节的时候，新人程序员都会想要试图产生程序实现原理细节。&lt;/p&gt;&lt;p&gt;请记住一句话，&lt;strong&gt;千万不要跟不是搞技术的人聊实现细节，如果可以，最好别跟任何人聊技术实现细节&lt;/strong&gt;，不仅会把他们的思路带跑偏，还会越解释越迷糊。&lt;/p&gt;&lt;p&gt;另外还有一些人遇到一些疑问，会用企业微信或钉钉找到你，如果这个人说的事情不是紧急的事情，同时没有直接找到你面前，&lt;strong&gt;尽量选择过半小时后再处理&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;你要相信他们自己解决问题的能力，大部分不重要或跟你关系不大的问题，会因为你的延缓处理&lt;strong&gt;自动消失&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;大部分真正需要你解决的问题，&lt;strong&gt;半小时后还会再找你一次&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;另外，哪怕不听音乐，&lt;strong&gt;带上耳机，可以减少10%的无效沟通&lt;/strong&gt;，懂的自然懂。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9921875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmoauKbWJSJqEMC3PRLEIWvUIJnEvHoicYcfVXuVKLhtL4dc60uXPiaNpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h4&gt;&lt;span&gt;提升办事效率&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;提升办事效率是为了减少自己无用时间的支出，从而不至于让自己没有时间在工作之余锻炼休闲。&lt;/p&gt;&lt;p&gt;提升效率这个事情其实比较简单。&lt;/p&gt;&lt;p&gt;选择适合自己的办公软件。比如印象笔记或有道云笔记来记录工作要点和备忘，用番茄学习时间来强迫自己专心写代码，同时还能装个眼睛护士定时提醒自己要放松一下眼睛。&lt;/p&gt;&lt;p&gt;另外我个人强烈建议大家&lt;strong&gt;多喝水&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.42371134020618556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmzmZprpoiaUKEGZRp2yKFmBuMwJyTgicL0qdLOpf6dTyNvnPVDoq98NXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;970&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;另外推荐几个 VSCode 效率插件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//www.infoq.cn/article/c4wbmkc7sslz28gyazll&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mac 效率神器&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/Louiszhai/tool&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;span&gt;高级划水技能&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;防猝死的最高技巧是提升技术水平，可以减少排查问题的时间，提升工作效率，更好的预估时间（意味着可以更精确地给自己多估两天排期）。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.43004418262150224&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicm7e50gM6PJYjrsZxO5YUIa0Ij6RqoGVWichpv8yb7fbX0tSgia1IdRagQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;679&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9393939393939394&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmQymSceqDUORyCgxe0PcONiay6AibhJUjg953zdYNMmAbPCrG1VEyS18A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;198&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.24676445211389128&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmVgwsGQhQicUKqXgmNPK5p00XWILNwKv2NFDYRqOmbDvibJm6tzMQgGcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1159&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmD825riaGk6ibMEHezPQQMXRDldNxx9Xh4XuC05HuXSZ9WjURJljDhlsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;380&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;只有提升自身硬实力，才能打破这个死循环。&lt;/p&gt;&lt;p&gt;下面介绍一个golang程序员学习提升的项目,里面有&lt;strong&gt;超全的golang面试问题和学习路线整理&lt;/strong&gt;，用问题驱动去学习，&lt;strong&gt;点击文章最底部【阅读原文】立刻体验在知识的海洋里呛水的感觉。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;同时还有一张完整的入门进阶知识图谱，值得star一个啊。关于其他编程语言的学习路线，欢迎各位私信我学习地址。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;1&lt;/span&gt;https:&lt;span&gt;//github.com/xiaobaiTech/golangFamily&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img data-ratio=&quot;2.8077571669477233&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmhqr5kR5fMNPP6y2bC4P1xwibCeIHt7PbLMJEaBTKo92pn4gmziaq94VA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1186&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;学会管理自己的时间&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;要学习时间管理，就要像这个领域里最顶尖的大师学习。&lt;/p&gt;&lt;p&gt;而这个领域里我只认罗老师，罗老师去年荣获时间管理大师称号。在业务能力上罗老师绝对是个优秀的好歌手好演员，各领域开花，忙是不可避免的，工作强度不会比程序员弱。&lt;/p&gt;&lt;p&gt;在此基础上，还能做到宛如影分身之术一般时间管理能力，除了熬出两个黑眼圈外，身体却十分硬朗。仔细一想，罗老师是在承受着身体和心理都在长时间承受高强度的压力，但却不影响他身心健康。&lt;/p&gt;&lt;p&gt;我们可以好好分析一下，罗老师为什么能在防猝死这件事情上做的如此出类拔萃。个人拙见，有三点&lt;/p&gt;&lt;h3&gt;&lt;span&gt;热爱自己的事业&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;我们可以看下，罗老师的日程表。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7661290322580645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmuKdDRfDcAdnWTwkiaFrLZml1Nam2icq5oVYvrPex4I9cuumDvFOLLyTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;span&gt;这工作强度映射到程序员身上，也差不多跟连续开会写代码997差不多了吧，然而他却硬朗得很。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;他到底是怎么做到的呢？一言以蔽之，&lt;strong&gt;热爱&lt;/strong&gt;。解bug的过程可能是难受压抑紧张的，但是解bug成功带来的成就感真的很爽。&lt;/p&gt;&lt;p&gt;如果不热爱这份工作，那么成就感没了，只剩下难受和压抑了，不快乐的人，说不定哪天&lt;strong&gt;说没就没了&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmhBkL00guIbAJNjSFbr8cdluYxMHX0RyP6aeNzpHxwwicqia0ksLIYgSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;180&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;锻炼身体&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;他热爱跳舞，被称为“亚洲舞王”。虽然这个称呼有点夸张，但是他不是天赋型选手，跳舞能力是花时间练出来的。&lt;/p&gt;&lt;p&gt;而跳舞这件事情，和健身类似，让身体动起来了，出汗了，你自然就爽了。&lt;/p&gt;&lt;p&gt;大家应该都有一种感觉，运动，会让你出汗，会让身体巨酸巨累，但是这个过程中，会让心情变得畅快不压抑，还能让你&lt;strong&gt;因为敲代码而变得瘦弱的肱二头肌变得粗壮一些&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicm1hiaxH3sQGdHYzb8gkm7HpnEwMIgZ5Etnj5dyRgaN8XppuSpWCjEx2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;200&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;事业之外还有自己的爱好&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这个世界上只有一种真正的英雄主义，就是在认清生活的真相之后，还能热爱生活。&lt;/p&gt;&lt;p&gt;很多程序员在大学刚毕业的时候，都想着自己以后能做一个牛逼哄哄的软件，然后跟乔布斯一样改变这个世界，但是往往又在几年后选择成为一条咸鱼，每天疲惫于跟产品经理斗智斗勇，只要能砍掉哪怕一个需求，那也是一次重大胜利。&lt;/p&gt;&lt;p&gt;我们都只是普通人，产品经理没错，程序猿也没错，当一条咸鱼也挺香的，但是在工作中当咸鱼可以，唯唯诺诺可以，但下了班，你必须重拳出击。&lt;/p&gt;&lt;p&gt;你得有自己的爱好，可以是爬山旅游，篮球游泳。如果这些都太索然无味，你还可以去酒吧&lt;strong&gt;跟各种臭妹妹坏弟弟喝上一杯&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.956&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicm6lNOBiapXSZoJACvHGHaM6TdRib7mn2XPqJc8eicmNT4aYbFWiaDniaaogQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;250&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2&gt;&lt;span&gt;最后&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;要&lt;strong&gt;每天看一遍猝死的新闻&lt;/strong&gt;，坚定自己划水的信念。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9315068493150684&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmLkYayiaCJ4038SrzzISBVCTefoxkEFSVZX0Z2yibibf2neJnXdibsCd4tA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1314&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;鲁迅曾经说过，&lt;strong&gt;划水最好的时候两个时间，一个是十年前，一个是现在&lt;/strong&gt;。你懂我意思吧？&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicm7hU4ouc6ukTbXe7YY5s3OUbgN6Onicj8yJy2icOm5wCSWnKTGowL5Ribg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;255&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;没懂? &lt;strong&gt;点个在看，你的每一次扩散都可能拯救一个在猝死边缘的程序猿！&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.8574561403508771&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmq73gZ1Hbpm9YfjvA8nByPib4O8Tg8eYmkp6Bkiat0ddgsolxLEWt1IEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;912&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/FmVWPHrDdnkeTvagibkdxicXBoYaqwXuicmZAHNaMptpG1RuAGbeqKpU7aEFRJmBicITysibicOxYlQmSP1rr2YY6Giag/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54758877254642c98637ff6890c32e19</guid>
<title>系统性能提升之缓存</title>
<link>https://toutiao.io/k/kui38g4</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article class=&quot;_2rhmJa&quot;&gt;&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;是解决互联网大流量常用的性能提升方式之一，也是最常被问到的问题。缓存又多种多样，像Java的内存缓存就有Guava Cache、Ehcache、Caffeine等等；像远程存储缓存（需要独立部署）常用的有Memcached、Redis等等。&lt;/p&gt;
&lt;p&gt;已知&lt;strong&gt;缓存&lt;/strong&gt;可以提升系统性能，那么适合什么场景？&lt;/p&gt;

&lt;p&gt;不同的场景都有各自的缓存策略，最最常见的就是先查询缓存，如果缓存未命中，再查询数据库，最后将数据库的数据添加到缓存中，以Redis缓存为例，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Autowired
RedisTemplate&amp;lt;Long,String&amp;gt; redisTemplate;

public String getName(Long id){
  String name = redisTemplate.opsForValue().get(id);
  if(name == null){
    name = dao.getNameById(id);
    redisTemplate.opsForValue().setIfAbsent(id,name,30, TimeUnit.SECONDS);
  }
  return name;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相信大家这样的代码都不陌生，向大家推荐一个极其简单、好用的缓存组件&lt;strong&gt;AutoCache&lt;/strong&gt;组件，只需要这样：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@AutoCache(remoteTTL = 30)
public String getName(Long id){
  return dao.getNameById(id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为应对更多场景，还&lt;strong&gt;支持二级缓存&lt;/strong&gt;，也非常简单。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@AutoCache(localTTL = 5, remoteTTL = 30)
public String getName(Long id) {
  return dao.getNameById(id);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置添加&lt;code&gt;Maven&lt;/code&gt;即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.github.haozi2015&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;autocache-spring-boot-starter&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多功能，请关注作者&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhaozi2015&quot; target=&quot;_blank&quot;&gt;haozi2015&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhaozi2015%2FautoCache&quot; target=&quot;_blank&quot;&gt;https://github.com/haozi2015/autoCache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gitee同步更新：&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fgitee.com%2Fopenhaozi2015%2FautoCache&quot; target=&quot;_blank&quot;&gt;https://gitee.com/openhaozi2015/autoCache&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7573a6be733e6e04f45dababdc22a058</guid>
<title>如何求二维数组的前缀和？</title>
<link>https://toutiao.io/k/7uco9b1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;什么是前缀和？&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前缀和是一种重要的预处理，能大大降低查询的时间复杂度。我们可以简单理解为“数列的前 n 项的和”。这个概念其实很容易理解，即一个数组中，第 n 位存储的是数组前 n 个数字的和。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过一个例子来进行说明会更清晰。题目描述：有一个长度为 N 的整数数组 A，要求返回一个新的数组 B，其中 B 的第 i 个数 B[i]是&lt;strong&gt;「原数组 A 前 i 项和」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题实际就是让你求数组 A 的前缀和。对 [1,2,3,4,5,6] 来说，其前缀和可以是 pre=[1,3,6,10,15,21]。我们可以使用公式 pre[𝑖]=pre[𝑖−1]+nums[𝑖]得到每一位前缀和的值，从而通过前缀和进行相应的计算和解题。其实前缀和的概念很简单，但困难的是如何在题目中使用前缀和以及如何使用前缀和的关系来进行解题。实际的题目更多不是直接让你求前缀和，而是你需要自己&lt;strong&gt;「使用前缀和来优化算法的某一个性能瓶颈」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而如果数组是正数的话，前缀和数组会是一个单调不递减序列，因此前缀和 + 二分也会是一个考点，不过这种题目难度一般是力扣的困难难度。关于这个知识点，我会在之后的&lt;strong&gt;「二分专题」&lt;/strong&gt;方做更多介绍。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;简单的二维前缀和&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到的例子是一维数组的前缀和，简称一维前缀和。那么二维前缀和实际上就是二维数组上的前缀和了。一维数组的前缀和也是一个一维数组，同样地，二维数组的前缀和也是一个二维的数组。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如对于如下的一个二维矩阵：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1 2 3 4&lt;br/&gt;5 6 7 8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;定义二维前缀和矩阵 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;pres&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -442 1889 636&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;70&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(503, 0)&quot;&gt;&lt;path data-c=&quot;72&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(954, 0)&quot;&gt;&lt;path data-c=&quot;65&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1420, 0)&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;pres{x,y} = \sum\limits_{i=1}^x \sum\limits_{j=1}^y a_{i,j}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv7Vsu0DHKZwnNQdiaAps6CROlvK2QN9WGiclO6nIdmexaK7MYwBfy0oe2A9YZkBqPt0SJYvz3aHZ0z/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;/span&gt;。经过这样的处理，上面矩阵的二维前缀和就变成了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1  3  6 10&lt;br/&gt;6 14 24 36&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么如何用&lt;strong&gt;「代码」&lt;/strong&gt;计算二维数组的前缀和呢？简单的二维前缀和的求解方法是基于&lt;strong&gt;「容斥原理」&lt;/strong&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们想求如图中灰色部分的和。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0285714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdhx3xEFniciaXPxckWvuvhTe0Kbz6ia1zJuPHA0IBAuqvg3FicWYKS6W9es77TfTgKDXfWFbplBicT61g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;700&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一种方式就是用下图中两个绿色部分的矩阵加起来（之所以用绿色部分相加是因为这两部分已经通过上面预处理计算好了，可以在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间得到），这样我们就会多加一块区域，这块区域就是如图黄色部分，我们再减去黄色部分就好了，最后再加上当前位置本身就行了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9798270893371758&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTdhx3xEFniciaXPxckWvuvhTewA6xliaBGNg4OzB7rOud2qBiahiakvhTAaj1dIiaF8Y8jaiaadBeuajxPxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;694&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们想要求 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;sum_{i,j}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -442 2700.9 736.2&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;73&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(469, 0)&quot;&gt;&lt;path data-c=&quot;75&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msub&quot; transform=&quot;translate(1041, 0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(878, -150) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(345, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(623, 0)&quot;&gt;&lt;path data-c=&quot;6A&quot; d=&quot;M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，则可以通过 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;sum_{i - 1,j} + sum_{i,j - 1} - sum_{i - 1,j - 1} + a_{i,j}&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;embed src=&quot;https://mmbiz.qlogo.cn/mmbiz_svg/fWJhv9xMFTsj3NhEvtEFv7Vsu0DHKZwnRGxZG5kH8ic6KeTyCXhx0gkMibtIGk548yhicZy1nWdhpicekcA4Siach5u27yQsUHarh/0?wx_fmt=svg&quot; data-type=&quot;svg+xml&quot;/&gt;&lt;/span&gt;&lt;/span&gt; 的方式来实现。这样我就可以通过 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(m * n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 3963.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2252.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2974.4, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3574.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的预处理计算二维前缀和矩阵（m 和 n 分别为矩阵的长和宽），再通过 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间计算出&lt;strong&gt;「任意小矩阵的和」&lt;/strong&gt;。其底层原理就是上面提到的容斥原理，大家可以通过画图的方式来感受一下。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;如何将二维前缀和转化为一维前缀和&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而实际上，我们也可不构建一个前缀和数组，而是直接原地修改。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;一维前缀和同样可以采用这一技巧。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们可以先不考虑行之间的关联，而是预先计算出每一行的前缀和。对于计算每一行的前缀和就是&lt;strong&gt;「一维前缀和」&lt;/strong&gt;啦。接下来通过&lt;strong&gt;「固定两个列的端点」&lt;/strong&gt;的方式计算每一行的区域和。代码上，我们可以通过三层循环来实现， 其中两层循环用来固定列端点，另一层用于枚举所有行。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;其实也可以反过来。即固定行的左右端点并枚举列，下面的题目会提到这一点。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码表示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 预先构建行的前缀和&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; matrix:&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n - &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;        row[i + &lt;span&gt;1&lt;/span&gt;] += row[i]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如矩阵：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1 2 3 4&lt;br/&gt;5 6 7 8&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则会变为：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;1 3 6 10&lt;br/&gt;5 11 18 26&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 固定列的两个端点，即枚举所有列的组合&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n):&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(i, n):&lt;br/&gt;        pres = [&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;        pre = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 枚举所有行&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; range(m):&lt;br/&gt;            &lt;span&gt;# matrix[k] 其实已经是上一步预处理的每一行的前缀和了。因此 matrix[k][j] - (matrix[k][i - 1] 就是每一行 [i, j] 的区域和。&lt;/span&gt;&lt;br/&gt;            pre += matrix[k][j] - (matrix[k][i - &lt;span&gt;1&lt;/span&gt;] &lt;span&gt;if&lt;/span&gt; i &amp;gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;            pres.append(pre)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面代码做的事情形象来看，就是先在水平方向计算前缀和，然后在竖直方向计算前缀和，而不是同时在两个方向计算。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果把 [i, j] 的区域和看出是一个数的话，问题就和一维前缀和一样了。代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n):&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(i, n):&lt;br/&gt;        pres = [&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;        pre = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;# 枚举所有行&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; range(m):&lt;br/&gt;            &lt;span&gt;# 其中 a 为[i, j] 的区域和&lt;/span&gt;&lt;br/&gt;            pre += a&lt;br/&gt;            pres.append(pre)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;题目推荐&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了上面的知识，我们就可以来解决下面两道题。虽然下面两道题的难度都是 hard，不过总体难度并不高。这两道题之所以是 hard， 是因为其考察了&lt;strong&gt;「不止一个知识点」&lt;/strong&gt;。这也是 hard 题目的一种类型，即同时考察多个知识点。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;363. 矩形区域不超过 K 的最大数值和&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目地址&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给定一个非空二维矩阵 matrix 和一个整数 k，找到这个矩阵内部不大于 k 的最大矩形和。&lt;br/&gt;&lt;br/&gt;示例:&lt;br/&gt;&lt;br/&gt;输入: matrix = [[1,0,1],[0,-2,3]], k = 2&lt;br/&gt;输出: 2&lt;br/&gt;解释: 矩形区域 [[0, 1], [-2, 3]] 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;说明：&lt;br/&gt;&lt;br/&gt;矩阵内的矩形区域面积必须大于 0。&lt;br/&gt;如果行数远大于列数，你将如何解答呢？&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;前置知识&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面提到了由于非负数数组的二维前缀和是一个非递减的数组，因此常常和二分结合考察。实际上即使数组不是非负的，我们仍然有可能构建一个有序的前缀和，从而使用二分，这道题就是一个例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们可以用上面提到的技巧计算二维数组的前缀和，这样我们就可以计算快速地任意子矩阵的和了。注意到上面我们计算的 pres 数组是一个一维数组，但矩阵其实可能为负数，因此不满足单调性。这里我们可以手动维护 pres 单调递增，这样就可以使用二分法在 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;logN&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -694 2148 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(298, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(783, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1260, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 的时间求出&lt;strong&gt;「以当前项 i 结尾的不大于 k 的最大矩形和」&lt;/strong&gt;，那么答案就是所有的&lt;strong&gt;「以任意索引 x 结尾的不大于 k 的最大矩形和」&lt;/strong&gt;的最大值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之所以可以手动维护 pres 数组单调增也可得到正确结果的原因是&lt;strong&gt;「题目只需要求子矩阵和，而不是求具体的子矩阵」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码上，当计算出 pres 后，我们其实需要寻找大于等于 pre - k 的最小数 x。这样矩阵和 pre - x 才能满足 pre - x &amp;lt;= k，使用最左插入二分模板即可解决。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;关键点&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python3 Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;maxSumSubmatrix&lt;/span&gt;&lt;span&gt;(self, matrix: List[List[int]], K: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;        m, n = len(matrix), len(matrix[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;        ans = float(&lt;span&gt;&quot;-inf&quot;&lt;/span&gt;)&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; matrix:&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n - &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;                row[i + &lt;span&gt;1&lt;/span&gt;] += row[i]&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n):&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(i, n):&lt;br/&gt;                pres = [&lt;span&gt;0&lt;/span&gt;]&lt;br/&gt;                pre = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; range(m):&lt;br/&gt;                    pre += matrix[k][j] - (matrix[k][i - &lt;span&gt;1&lt;/span&gt;] &lt;span&gt;if&lt;/span&gt; i &amp;gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                    &lt;span&gt;# 寻找大于等于 pre - k 的最小数，且这个数不能比 pre 大。比如 pre = 10， k = 3，就要找大于等于 7 的最小数，这个数不能大于 10。&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;# 为了达到这个目的，可以使用 bisect_left 来完成。（使用 bisect_right 不包含等号）&lt;/span&gt;&lt;br/&gt;                    idx = bisect.bisect_left(pres, pre - K)&lt;br/&gt;                    &lt;span&gt;# 如果 i == len(pre) 表示 pres 中的数都小于 pre - k，也就是说无解&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;if&lt;/span&gt; idx &amp;lt; len(pres):&lt;br/&gt;                        &lt;span&gt;# 由 bisect_left 性质可知 pre - pres[i] &amp;gt;= 0&lt;/span&gt;&lt;br/&gt;                        ans = max(ans, pre - pres[idx])&lt;br/&gt;                    idx = bisect.bisect_left(pres, pre)&lt;br/&gt;                    pres[idx:idx] = [pre]&lt;br/&gt;                    &lt;span&gt;# 或者将上面两行代码替换为 bisect.insort(pres, pre)&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;-1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ans == float(&lt;span&gt;&quot;-inf&quot;&lt;/span&gt;) &lt;span&gt;else&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;令 n 为数组长度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;题目给了一个 follow up：如果行数远大于列数，你将如何解答呢？实际上，如果行数远大于列数，由复杂度分析可知空间复杂度会很高。我们可以将行列兑换，这样空间复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。换句话说，我们&lt;strong&gt;「可以通过行列的调换」&lt;/strong&gt;做到空间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(min(m, n))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 6064.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2030, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2375, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2975, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3364, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4242, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4686.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5286.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5675.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;1074. 元素和为目标值的子矩阵数量&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目地址&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。&lt;br/&gt;&lt;br/&gt;子矩阵 x1, y1, x2, y2 是满足 x1 &amp;lt;= x &amp;lt;= x2 且 y1 &amp;lt;= y &amp;lt;= y2 的所有单元 matrix[x][y] 的集合。&lt;br/&gt;&lt;br/&gt;如果 (x1, y1, x2, y2) 和 (x1&lt;span&gt;&#x27;, y1&#x27;&lt;/span&gt;, x2&lt;span&gt;&#x27;, y2&#x27;&lt;/span&gt;) 两个子矩阵中部分坐标不同（如：x1 != x1&lt;span&gt;&#x27;），那么这两个子矩阵也不同。&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;示例 1：&lt;br/&gt;&lt;br/&gt;输入：matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0&lt;br/&gt;输出：4&lt;br/&gt;解释：四个只含 0 的 1x1 子矩阵。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;示例 2：&lt;br/&gt;&lt;br/&gt;输入：matrix = [[1,-1],[-1,1]], target = 0&lt;br/&gt;输出：5&lt;br/&gt;解释：两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;提示：&lt;br/&gt;&lt;br/&gt;1 &amp;lt;= matrix.length &amp;lt;= 300&lt;br/&gt;1 &amp;lt;= matrix[0].length &amp;lt;= 300&lt;br/&gt;-1000 &amp;lt;= matrix[i] &amp;lt;= 1000&lt;br/&gt;-10^8 &amp;lt;= target &amp;lt;= 10^8&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;&lt;span/&gt;前置知识&lt;/span&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;思路&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面题目类似。不过这道题是求子矩阵和刚好等于某个目标值的&lt;strong&gt;「数目」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们不妨先对问题进行简化。比如题目要求的是一维数组中，子数组（连续）的和等于目标值 target 的数目。我们该如何做？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这很容易，我们只需要：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;边遍历边计算前缀和。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比如当前的前缀和是 cur，那么我们要找的前缀和 x 应该满足 cur - x = target，因为这样当前位置和 x 的之间的子数组和才是 target。即我们需要找前缀和为 cur - target &lt;strong&gt;「的数目」&lt;/strong&gt;。这提示我们使用哈希表记录每一种前缀和出现的次数。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于仅仅是求数目，不涉及到求具体的子矩阵信息，因此使用类似上面的解法求出二维前缀和。接下来，使用和一维前缀和同样的方法即可求出答案。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;关键点&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;代码&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Python3 Code:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;numSubmatrixSumTarget&lt;/span&gt;&lt;span&gt;(self, matrix, target)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        m, n = len(matrix), len(matrix[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; matrix:&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n - &lt;span&gt;1&lt;/span&gt;):&lt;br/&gt;                row[i + &lt;span&gt;1&lt;/span&gt;] += row[i]&lt;br/&gt;        ans = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(n):&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; range(i, n):&lt;br/&gt;                c = collections.defaultdict(int)&lt;br/&gt;                cur, c[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; range(m):&lt;br/&gt;                    cur += matrix[k][j] - (matrix[k][i - &lt;span&gt;1&lt;/span&gt;] &lt;span&gt;if&lt;/span&gt; i &amp;gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;)&lt;br/&gt;                    ans += c[cur - target]&lt;br/&gt;                    c[cur] += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; ans&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面一样，我们可以将行列对换，这样空间复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(n)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 2141 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1752, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。换句话说，我们&lt;strong&gt;「可以通过行列的调换」&lt;/strong&gt;做到空间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(min(m, n))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewbox=&quot;0 -750 6064.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2030, 0)&quot;&gt;&lt;path data-c=&quot;69&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2375, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2975, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3364, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4242, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4686.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5286.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5675.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;力扣的小伙伴可以关注我，这样就会第一时间收到我的动态啦~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上就是本文的全部内容了。大家对此有何看法，欢迎给我留言，我有时间都会一一查看回答。更多算法套路可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 40K star 啦。大家也可以关注我的公众号《力扣加加》带你啃下算法这块硬骨头。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fd4fa2b0fbc022899b18b91f25f2f7ca</guid>
<title>什么是 Inversion of Control (IoC)？</title>
<link>https://toutiao.io/k/owgt7ts</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;entry-content&quot;&gt;&amp;#13;


&lt;p&gt;局限于英文水平和对软件工程“学术界”了解的浅薄，我对 Inverstion of Control —— 中文或许可以翻译成“反向控制” —— 的理解，总是停滞在一种似是而非的程度。我尝试通过搜索来学习，发现我能搜到的中文文章，都不能给我很大的帮助，有的在大谈特谈 Spring 框架如何如何；有的又说，想搞清楚 IoC，你先要理解 DIP …… ；也有的，干脆就说，所谓的 IoC 根本就是 DI。一时间，各种术语满天飞，越发让我觉得糊涂了。&lt;/p&gt;



&lt;p&gt;不得已，我又开始搜寻英文资料，发现基本也是各种意见都有，但是无一例外都会指向一个地方，就是 Martin Fowler（马丁・福勒）的文章（很感谢国外这些博客的作者，都有良好的习惯，让人比较容易找到一个概念的发展脉络）。通过学习和对比各种国内的文章，我似乎对这个概念更加清晰了一些，不敢说全懂了，但是总算比以前明了了一点。特此记录。&lt;/p&gt;



&lt;span id=&quot;more-1003&quot;/&gt;



&lt;h2&gt;&lt;span class=&quot;ez-toc-section&quot; id=&quot;%E7%BC%98%E8%B5%B7&quot;/&gt;缘起&lt;span class=&quot;ez-toc-section-end&quot;/&gt;&lt;/h2&gt;



&lt;p&gt;我是一个 &lt;a href=&quot;https://sexywp.com/tags/php&quot; class=&quot;st_tag internal_tag&quot; rel=&quot;tag&quot; title=&quot;Posts tagged with PHP&quot;&gt;PHP&lt;/a&gt; 程序员，一直使用 Yii 框架，&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://sexywp.com/yii2-abstraction.htm&quot; data-type=&quot;URL&quot; data-id=&quot;https://sexywp.com/yii2-abstraction.htm&quot; target=&quot;_blank&quot;&gt;从 2.0 版本开始，就显式地出现了 DI 这个概念&lt;/a&gt;，不怕丢人，我就是看不懂，不过就像大多数情况一样，看不懂也根本不会影响使用。不过，时不时遇到的时候，还是觉得萦绕心头，偶尔搜些资料看看，才知道了 IoC，&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://martinfowler.com/articles/injection.html&quot; data-type=&quot;URL&quot; data-id=&quot;https://martinfowler.com/articles/injection.html&quot; target=&quot;_blank&quot;&gt;把 IoC 和 DI 联系在一起的人，是 Martin Fowler&lt;/a&gt;（&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://insights.thoughtworks.cn/injection/&quot; data-type=&quot;URL&quot; data-id=&quot;https://insights.thoughtworks.cn/injection/&quot; target=&quot;_blank&quot;&gt;中文版&lt;/a&gt;），就算他不是第一个，但是极有可能是影响力最大的一个。&lt;/p&gt;



&lt;p&gt;对我来说，DI 和 Service Locator 之外，又出现了一个新概念，就自然而然顺藤摸瓜去了解，没想到我非但没有更清楚，反而更糊涂了，继而又陆续看了很多资料，才又出现了一丝丝清明。&lt;/p&gt;



&lt;h2&gt;&lt;span class=&quot;ez-toc-section&quot; id=&quot;Inversion_of_Control&quot;/&gt;Inversion of Control&lt;span class=&quot;ez-toc-section-end&quot;/&gt;&lt;/h2&gt;



&lt;p&gt;日常我们用到的词汇里面，有一种很常见的情况，就是除了这个词汇本身的内涵，在使用过程中，其外延不断扩展，有些甚至出现了引申意义，于是经常使得自然语言变得隐晦难明，给 NLP 带来困难的同时，人类自己也负担不轻。&lt;/p&gt;



&lt;p&gt;这个经常被缩写成 IoC 的术语，如果翻译成中文的话，字面意义就是“反向控制”，但是，一般人读到四个汉字，基本是莫名其妙的。如果你使用了百度去搜索中文资料，看了一堆网友写的文章，相信你就离其真实含义更加遥远了（也包括本文）。&lt;/p&gt;



&lt;p&gt;如果你在认真阅读本文的话，我试图传递给你的一个建议就是，不要相信所有的资料，包括本文。这样，或许你真的可以建立一些对这个概念的准确理解。这恐怕就是道可道，非常道吧，哈哈。&lt;/p&gt;



&lt;h2&gt;&lt;span class=&quot;ez-toc-section&quot; id=&quot;IoC_%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F&quot;/&gt;IoC 是什么？&lt;span class=&quot;ez-toc-section-end&quot;/&gt;&lt;/h2&gt;



&lt;p&gt;关于 IoC 是什么，国内外网友也莫衷一是。有人说，这是一种设计模式，“设计模式” 是随着 GoF 的著作传开的一个专有名词，其实是描述了在面向对象软件设计（OOD）过程里，为了实现解耦与复用，软件工程界惯用的一些优秀的（起初识别了 23 个）类关系设计方案。每一个模式，都有其比较具体的场景，以及相对来说比较具体的设计模板，渐渐已经成为工程师交流的一套工具。从设计模式的特点来看，IoC 恐怕不能说是一种设计模式，因为，首先就没有比较具体的场景，也没有比较具体的设计模板，实现方案也有多种。所以，决不能称其为一种设计模式。&lt;/p&gt;



&lt;p&gt;常见的一种说法，说 IoC 是一种设计原则，维基百科也如此定义。我想，这可能是比较接近事实的一个说法。但是，比起软件工程里其他一些更为显而易见的原则，比如 DRY 原则，SOLID 原则等等，IoC 的含义就显得模糊，尤其 SOLID 里面的 D 代表的依赖倒置（Dependency Inversion Principle，也叫 DIP），跟 IoC 看起来似乎又像一个意思。不少中文世界的博客，甚至就蠢蠢欲动地想要完成两者的替换，从而避免对其进行解释。&lt;/p&gt;



&lt;p&gt;也有说 IoC 是一种实现。这可能是一种隐晦的表达。因为提及 IoC，不少人就要说 Spring，说起 IoC Container，这就使其变得非常具体，好像它是一个框架，或者甚至是一个类。我想，头脑稍微清明一点，不至于误解如此，但免不了，还是有人似是而非地如此认为。&lt;/p&gt;



&lt;p&gt;Martin Fowler 在一篇词源追溯的文章里，对 IoC 的定义，是一种“现象”，或者说一种“特点”。介于他是这个领域最权威的专家和最早探讨这个概念的人之一，我个人比较倾向于相信他的话。其实我比较佩服的就是他的写作能力，他精挑细选地这两个词汇，避开了人云亦云的“Principle”或者“Pattern”，可以看出他的态度。&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Inversion of Control is a common phenomenon that you come across when extending frameworks. Indeed it’s often seen as a defining characteristic of a framework.&lt;/p&gt;&lt;cite&gt;—— bliki: InversionOfControl Martin Fowler&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;其实，在 Martin 老爷爷另一篇文章里，就是那篇著名地介绍了 Dependency Injection 的文章里，他也很巧妙地避免了混淆，那里他用了 IoC Container 和 DI 放在一起讨论，而不是 IoC 本身。IoC Container 和 IoC 不是一个概念，就算没有“雷锋”和“雷锋塔”区别那么大，其实也差不多了。&lt;/p&gt;


&lt;h3&gt;相关阅读&lt;/h3&gt;&lt;/div&gt;&amp;#13;
&amp;#13;
&amp;#13;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>644c00761274b04b1c89e19859c2dc0e</guid>
<title>什么是大端序和小端序，为什么要有字节序</title>
<link>https://toutiao.io/k/8sgffjn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;什么是字节序&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzUzNTY5MzU2MA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/z4pQ0O5h0f4pGhLz2xEbRFHnAQon2QLYgbBibCJo1ibJHesLWshPJeRibateRtAqkaf6BgjlbhYiaxHLq6Zu07CRPw/0?wx_fmt=png&quot; data-nickname=&quot;网管叨bi叨&quot; data-alias=&quot;kevin_tech&quot; data-signature=&quot;每周分享技术类原创文章&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;字节序&lt;/strong&gt;，又称&lt;strong&gt;端序&lt;/strong&gt;或&lt;strong&gt;尾序&lt;/strong&gt;（英语中用单词：&lt;strong&gt;Endianness&lt;/strong&gt; 表示），在计算机领域中，指电脑内存中或在数字通信链路中，占用多个字节的数据的字节排列顺序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在几乎所有的平台上，多字节对象都被存储为连续的字节序列。例如在 Go 语言中，一个类型为&lt;code&gt;int&lt;/code&gt;的变量&lt;code&gt;x&lt;/code&gt;地址为&lt;code&gt;0x100&lt;/code&gt;，那么其指针&lt;code&gt;&amp;amp;x&lt;/code&gt;的值为&lt;code&gt;0x100&lt;/code&gt;。且&lt;code&gt;x&lt;/code&gt;的四个字节将被存储在内存的&lt;code&gt;0x100, 0x101, 0x102, 0x103&lt;/code&gt;位置。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;字节的排列方式有两个通用规则:&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;大端序（Big-Endian）将数据的低位字节存放在内存的高位地址，高位字节存放在低位地址。这种排列方式与数据用字节表示时的书写顺序一致，符合人类的阅读习惯。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;小端序（Little-Endian），将一个多位数的低位放在较小的地址处，高位放在较大的地址处，则称&lt;strong&gt;小端序&lt;/strong&gt;。小端序与人类的阅读习惯相反，但更符合计算机读取内存的方式，因为CPU读取内存中的数据时，是从低地址向高地址方向进行读取的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的文字描述有点抽象，我们拿一个例子来解释一下字节排列时的大端序和小端序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在内存中存放整型数值&lt;code&gt;168496141&lt;/code&gt; 需要4个字节，这个数值的对应的16进制表示是&lt;code&gt;0X0A0B0C0D&lt;/code&gt;，这个数值在用大端序和小端序排列时的在内存中的示意图如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6789536266349584&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/z4pQ0O5h0f57PdQApCiar2T7k6Rd35YE3ic8t5ZgDto1gUtS0MhLv6hRIib5J1396Nfjd65vkgtWNalRTbeSbINicw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;841&quot;/&gt;&lt;figcaption&gt;大端序和小端序&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;为何要有字节序&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多人会问，为什么会有字节序，统一用大端序不行吗？答案是，计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，&lt;strong&gt;计算机的内部处理都是小端字节序。在计算机内部，小端序被广泛应用于现代 CPU 内部存储数据；而在其他场景，比如网络传输和文件存储则使用大端序&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;Go语言对字节序的处理&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Go 语言存储数据时的字节序依赖所在平台的 CPU，处理大小端序的代码位于 &lt;code&gt;encoding/binary&lt;/code&gt; ,包中的全局变量&lt;code&gt;BigEndian&lt;/code&gt;用于操作大端序数据，&lt;code&gt;LittleEndian&lt;/code&gt;用于操作小端序数据，这两个变量所对应的数据类型都实现了&lt;code&gt;ByteOrder&lt;/code&gt;接口。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; (&lt;br/&gt; &lt;span&gt;&quot;encoding/binary&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&quot;unsafe&quot;&lt;/span&gt;&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; INT_SIZE = &lt;span&gt;int&lt;/span&gt;(unsafe.Sizeof(&lt;span&gt;0&lt;/span&gt;)) &lt;span&gt;//64位操作系统，8 bytes&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;//判断我们系统中的字节序类型&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;systemEdian&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0x01020304&lt;/span&gt;&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;&amp;amp;i:&quot;&lt;/span&gt;,&amp;amp;i)&lt;br/&gt; bs := (*[INT_SIZE]&lt;span&gt;byte&lt;/span&gt;)(unsafe.Pointer(&amp;amp;i))&lt;br/&gt;&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; bs[&lt;span&gt;0&lt;/span&gt;] == &lt;span&gt;0x04&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;system edian is little endian&quot;&lt;/span&gt;)&lt;br/&gt; } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;  fmt.Println(&lt;span&gt;&quot;system edian is big endian&quot;&lt;/span&gt;)&lt;br/&gt; }&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;temp: 0x%x,%v\n&quot;&lt;/span&gt;,bs[&lt;span&gt;0&lt;/span&gt;],&amp;amp;bs[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;temp: 0x%x,%v\n&quot;&lt;/span&gt;,bs[&lt;span&gt;1&lt;/span&gt;],&amp;amp;bs[&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;temp: 0x%x,%v\n&quot;&lt;/span&gt;,bs[&lt;span&gt;2&lt;/span&gt;],&amp;amp;bs[&lt;span&gt;2&lt;/span&gt;])&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;temp: 0x%x,%v\n&quot;&lt;/span&gt;,bs[&lt;span&gt;3&lt;/span&gt;],&amp;amp;bs[&lt;span&gt;3&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;testBigEndian&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; testInt &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0x01020304&lt;/span&gt;&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;%d use big endian: \n&quot;&lt;/span&gt;, testInt)&lt;br/&gt; testBytes := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;byte&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt; binary.BigEndian.PutUint32(testBytes, &lt;span&gt;uint32&lt;/span&gt;(testInt))&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;int32 to bytes:&quot;&lt;/span&gt;, testBytes)&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;int32 to bytes: %x \n&quot;&lt;/span&gt;, testBytes)&lt;br/&gt;&lt;br/&gt; convInt := binary.BigEndian.Uint32(testBytes)&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;bytes to int32: %d\n\n&quot;&lt;/span&gt;, convInt)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;testLittleEndian&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; testInt &lt;span&gt;int32&lt;/span&gt; = &lt;span&gt;0x01020304&lt;/span&gt;&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;%x use little endian: \n&quot;&lt;/span&gt;, testInt)&lt;br/&gt;  testBytes := &lt;span&gt;make&lt;/span&gt;([]&lt;span&gt;byte&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;)&lt;br/&gt; binary.LittleEndian.PutUint32(testBytes, &lt;span&gt;uint32&lt;/span&gt;(testInt))&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;int32 to bytes: %x \n&quot;&lt;/span&gt;, testBytes)&lt;br/&gt;&lt;br/&gt; convInt := binary.LittleEndian.Uint32(testBytes)&lt;br/&gt; fmt.Printf(&lt;span&gt;&quot;bytes to int32: %d\n\n&quot;&lt;/span&gt;, convInt)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; systemEdian()&lt;br/&gt; fmt.Println(&lt;span&gt;&quot;&quot;&lt;/span&gt;)&lt;br/&gt; testBigEndian()&lt;br/&gt; testLittleEndian()&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行上面的程序会在终端里输出&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&amp;amp;i: 0xc000084000&lt;br/&gt;system edian is little endian&lt;br/&gt;temp: 0x4,0xc000084000&lt;br/&gt;temp: 0x3,0xc000084001&lt;br/&gt;temp: 0x2,0xc000084002&lt;br/&gt;temp: 0x1,0xc000084003&lt;br/&gt;&lt;br/&gt;16909060 use big endian: &lt;br/&gt;int32 to bytes: [1 2 3 4]&lt;br/&gt;int32 to bytes: 01020304 &lt;br/&gt;bytes to int32: 16909060&lt;br/&gt;&lt;br/&gt;1020304 use little endian: &lt;br/&gt;int32 to bytes: 04030201 &lt;br/&gt;bytes to int32: 16909060&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合比如网络传输和文件储存，几乎都是用的大端字节序。正是因为这些原因才有了字节序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;计算机处理字节序的时候，如果是大端字节序，先读到的就是高位字节，后读到的就是低位字节。小端字节序则正好相反。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;amp;mid=2247487043&amp;amp;idx=1&amp;amp;sn=3896db731e63c516254f9a346b31006e&amp;amp;chksm=fa80dfd4cdf756c2d52d825f948119b66a09da6b0ba821b62ef6ef5ccb99bd80d0551d281de5&amp;amp;token=267822480&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Go指针的使用限制和unsafe.Pointer的突破之路&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>