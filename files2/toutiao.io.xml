<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f1b62063f2681d2b9c3c312b193c85c9</guid>
<title>面试：Redis 为什么快呢？查询为何会变慢？</title>
<link>https://toutiao.io/k/uktnxye</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h1 cid=&quot;n0&quot; mdtype=&quot;heading&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;欢迎关注公众号【&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;Ccww技术博客&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;】，原创技术文章第一时间推出&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h1&gt;&lt;hr/&gt;&lt;blockquote cid=&quot;n234&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n238&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;越努力，越幸运，&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n239&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;本文已收藏在GitHub中JavaCommunity, 里面有面试分享、源码分析系列文章，欢迎收藏，点赞&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n241&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;https://github.com/Ccww-lx/JavaCommunity&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n245&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在实际开发，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;使用会频繁，那么在使用过程中我们该如何正确抉择数据类型呢？哪些场景下适用哪些数据类型。而且在面试中也很常会被面试官问到Redis数据结构方面的问题：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n3&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n5&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;Redis为什么快呢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n7&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么查询操作会变慢？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n9&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;Redis Hash rehash过程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n11&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;为什么使用哈希表作为Redis的索引&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n12&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当我们分析理解了&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;数据结构，可以为了我们在使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的时候，正确抉择数据类型使用，提升系统性能。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n13&quot; mdtype=&quot;heading&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;底层数据结构&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n14&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是一个&lt;strong&gt;内存&lt;/strong&gt;键值&lt;/span&gt;&lt;code&gt;&lt;span&gt;key-value&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 数据库，且键值对数据保存在&lt;strong&gt;内存&lt;/strong&gt;中，因此&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;基于内存的数据操作，其效率高，速度快；&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n15&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其中，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是&lt;/span&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt;类型，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 支持的 &lt;/span&gt;&lt;code&gt;&lt;span&gt;value&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型包括了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 、 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 、 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 、 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 、&lt;/span&gt;&lt;code&gt;&lt;span&gt;BitMap&lt;/span&gt;&lt;/code&gt;&lt;span&gt;等。&lt;strong&gt;&lt;code&gt;Redis&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt; 能够之所以能够广泛地适用众多的业务场景，基于其多样化类型的&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;value&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n16&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;而&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的数据类型是基于为&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;自定义的对象系统&lt;/span&gt;&lt;code&gt;&lt;span&gt;redisObject&lt;/span&gt;&lt;/code&gt;&lt;span&gt;实现的，&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;typedef struct redisObject{&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//类型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;unsigned type:4;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//编码&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;unsigned encoding:4;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;//指向底层实现数据结构的指针&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;void *ptr;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;    ….. &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p cid=&quot;n18&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;redisObject&lt;/span&gt;&lt;/code&gt;&lt;span&gt;除了记录实际数据，还需要额外的内存空间记录数据长度、空间使用等元数据信息，其中包含了 8 字节的元数据和一个 8 字节指针，指针指向具体数据类型的实际数据所在位置：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9388185654008439&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtSDNQwylk3gCp38thMsxAh40nSg3ia81kI6QBo3ucrCbx8BmSgHAnvBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;474&quot;/&gt;&lt;span&gt;            &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n20&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其中，&lt;strong&gt;指针指向的就是基于&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;Redis&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;的底层数据结构存储数据的位置，&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;Redis&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;的底层数据结构：&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;SDS&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;，双向链表、跳表，哈希表，压缩列表、整数集合实现的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n21&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;那么Redis底层数据结构是怎么实现的呢？&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n22&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Redis底层数据结构实现&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n23&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;我们先来看看&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;比较简单的&lt;strong&gt;&lt;code&gt;SDS&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;,双向链表，整数集合&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n24&quot; mdtype=&quot;heading&quot;&gt;&lt;code&gt;&lt;span&gt;SDS&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、双向链表和整数集合&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n25&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;SDS&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;len&lt;/span&gt;&lt;/code&gt;&lt;span&gt;字段记录已使用的字节数，将获取字符串长度复杂度降低为O(1)，而且&lt;/span&gt;&lt;code&gt;&lt;span&gt;SDS&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是&lt;strong&gt;惰性释放空间&lt;/strong&gt;的，你&lt;/span&gt;&lt;code&gt;&lt;span&gt;free&lt;/span&gt;&lt;/code&gt;&lt;span&gt;了空间，系统把数据记录下来下次想用时候可直接使用。不用新申请空间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.68&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtVLsRjnowLfMk1lY2CbMmjJ4jQ1pBergSETqGy7zmUF2UPPjQjM2ZyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;450&quot;/&gt;&lt;span&gt;                                   &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n27&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;整数集合&lt;/strong&gt;，在内存中分配一块地址连续的空间，数据元素会挨着存放，不需要额外指针带来空间开销，其特点为&lt;strong&gt;内存紧凑节省内存空间，查询复杂度为O(1)效率高，其他操作复杂度为O(N)；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n28&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;双向链表&lt;/strong&gt;， 在内存上可以为非连续、非顺序空间，通过额外的指针开销前驱/后驱指针串联元素之间的顺序。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n29&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;其特点为节插入/更新数据复杂度为O(1)效率高，查询复杂度为O(N)；&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n30&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;哈希表&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n31&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;哈希表，其实类似是一个数组，数组的每个元素称为一个哈希桶，每个哈希桶中保存了键值对数据，且哈希桶中的元素使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;dictEntry&lt;/span&gt;&lt;/code&gt;&lt;span&gt;结构，&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.433862433862434&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtxZPcrKQr3zCsFn7o1ungB0YuVDjibXCcovTh2VuzQ7QIHV1TdX3e6lw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;189&quot;/&gt;&lt;span&gt;    &lt;span&gt;                                           &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n33&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;因此，哈希桶元素保存的并不是键值对值本身，而是指向具体值的指针，&lt;strong&gt;所以在保存每个键值对的时候会额外空间开销，至少有增加24个字节，&lt;/strong&gt;特别是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;为&lt;/span&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的键值对，每一个键值对就需要额外开销24个字节空间。当保存数据小，额外开销比数据还大时，这时为了节省空间，考虑换数据结构。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n34&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;那来看看全局哈希表全图：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6112600536193029&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtiapzhbjQhQicmpAwjamVjooSMT1MIIcichHmTBcjNtO7TxlibzbVzHww5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n36&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;虽然哈希表操作很快，但&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;数据变大后，就会出现一个潜在的风险：&lt;strong&gt;哈希表的冲突问题和 &lt;/strong&gt;&lt;strong&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;开销问题&lt;/strong&gt;，&lt;strong&gt;这可以解释为什么哈希表操作变慢了？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n37&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当往哈希表中写入更多数据时，哈希冲突是不可避免的问题 ， Redis 解决哈希冲突的方式，就是&lt;strong&gt;链式哈希&lt;/strong&gt;，同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接，如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.8324125230202578&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAt0yaW2S7GHY46xZgDQwib3qlvtvJiaFwXomsS53OHTrssCBibfEWRg5reA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;543&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n39&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;当哈希冲突也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n40&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;为了解决哈希冲突带了的链过长的问题，进行&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/strong&gt;&lt;strong&gt;操作&lt;/strong&gt;，增加现有的哈希桶数量，分散单桶元素数量。那么&lt;/span&gt;&lt;code&gt;&lt;span&gt;rehash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;过程怎么样执行的呢？&lt;/span&gt;&lt;/p&gt;&lt;h5 cid=&quot;n41&quot; mdtype=&quot;heading&quot;&gt;&lt;code&gt;&lt;span&gt;Rehash&lt;/span&gt;&lt;/code&gt;&lt;/h5&gt;&lt;p cid=&quot;n42&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;为了使&lt;/span&gt;&lt;code&gt;&lt;span&gt;rehash&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 操作更高效，使用两个全局哈希表：哈希表 1 和哈希表 2，具体如下：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n50&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;但由于表1和表2在重新映射复制时数据大，如果一次性把哈希表 1 中的数据都迁移完，会造成 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 线程阻塞，无法服务其他请求。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n51&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt; 为了避免这个问题，保证&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redi&lt;/span&gt;&lt;/code&gt;&lt;span&gt;s能正常处理客户端请求，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;采用了&lt;strong&gt;渐进式&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;rehash&lt;/code&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n52&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;每处理一个请求时，从哈希表 1 中依次将索引位置上的所有 entries 拷贝到哈希表 2 中，把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n53&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6096045197740113&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtViaAeiczuZW7WaceXEaFburhlXicHxFVDaTxicu07SvT1UyibdKbdInSAYw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1770&quot;/&gt;&lt;/span&gt; &lt;/p&gt;&lt;p cid=&quot;n54&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在理解完&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;哈希表相关知识点后，看看不常见的压缩列表和跳表。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n55&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;压缩列表与跳表&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n56&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;压缩列表&lt;/strong&gt;，在数组基础上，在压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19761499148211242&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAtSp24keRoqNMclG1yicbEGmOql6Qdo8ajWyvIGJ51ZkRLWribfQwxaSSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;587&quot;/&gt;&lt;/p&gt;&lt;p cid=&quot;n58&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;优点：&lt;strong&gt;内存紧凑节省内存空间，内存中分配一块地址连续的空间，数据元素会挨着存放，不需要额外指针带来空间开销；查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n59&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;跳表&lt;/strong&gt; ，在链表的基础上，增加了多级索引，通过索引位置的几个跳转，实现数据的快速定位，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n60&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;比如查询33&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n61&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5995740149094781&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAt6S8EtRcW22qQzRPBBLqJQwouBsYXMvZY9gEOwlibOt5b1MlPLnk9Qsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1878&quot;/&gt;&lt;/span&gt; &lt;/p&gt;&lt;p cid=&quot;n62&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;特点：当数据量很大时，跳表的查找复杂度为O(logN)。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n63&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;综上所述，可以得知底层数据结构的时间复杂度：&lt;/span&gt;&lt;/p&gt;&lt;figure cid=&quot;n64&quot; mdtype=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr cid=&quot;n65&quot; mdtype=&quot;table_row&quot;&gt;&lt;th&gt;&lt;span&gt;数据结构类型&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;时间复杂度&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr cid=&quot;n68&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;哈希表&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;O(1)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n71&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;整数数组&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;O(N)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n74&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;双向链表&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;O(N)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n77&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;压缩列表&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;O(N)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n80&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;跳表&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;O(logN)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p cid=&quot;n83&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;自定义的对象系统类型即为&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的数据类型，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的数据类型是基于底层数据结构实现的，那数据类型有哪些呢？&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n84&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;Redis数据类型&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n85&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;比较常见的类型，其与底层数据结构对应关系如下：&lt;/span&gt;&lt;/p&gt;&lt;figure cid=&quot;n86&quot; mdtype=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr cid=&quot;n87&quot; mdtype=&quot;table_row&quot;&gt;&lt;th&gt;&lt;span&gt;数据类型&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;数据结构&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr cid=&quot;n90&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;String&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;SDS(简单动态字符串)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n93&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;List&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;双向链表压缩列表&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n96&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;压缩列表哈希表&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n99&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;压缩列表跳表&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n102&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;哈希表整数数组&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p cid=&quot;n105&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据类型对应特点跟其实现的底层数据结构差不多，性质也是一样的,且&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n106&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，基于SDS实现，适用于简单&lt;/span&gt;&lt;code&gt;&lt;span&gt;key-value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;存储、&lt;/span&gt;&lt;code&gt;&lt;span&gt;setnx key value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;实现分布式锁、计数器(原子性)、分布式全局唯一ID。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n107&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt;， 按照元素进入&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的顺序进行排序的，遵循FIFO(先进先出)规则，一般使用在 排序统计以及简单的消息队列。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n108&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;， 是字符串&lt;/span&gt;&lt;code&gt;&lt;span&gt;key&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和字符串&lt;/span&gt;&lt;code&gt;&lt;span&gt;value&lt;/span&gt;&lt;/code&gt;&lt;span&gt;之间的映射，十分适合用来表示一个对象信息 ，特点添加和删除操作复杂度都是O(1)。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n109&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，是&lt;/span&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型元素的无序集合，集合成员是唯一的，这就意味着集合中不能出现重复的数据。基于哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n110&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，  是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的类型的升级， 不同的是每个元素都会关联一个 double 类型的分数，通过分数排序，可以范围查询。 &lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n111&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;那我们再来看看这些数据类型，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis Geo&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;HyperLogLog&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;BitMap&lt;/span&gt;&lt;/code&gt;&lt;span&gt;？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n112&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis Geo&lt;/span&gt;&lt;/code&gt;&lt;span&gt;， 将地球看作为近似为球体，基于GeoHash 将二维的经纬度转换成字符串，来实现位置的划分跟指定距离的查询。特点一般使用在跟位置有关的应用。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n113&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;HyperLogLog&lt;/span&gt;&lt;/code&gt;&lt;span&gt;， 是一种&lt;strong&gt;概率&lt;/strong&gt;数据结构，它使用概率算法来统计集合的近似基数 ， 错误率大概在0.81%。当集合元素数量非常多时，它计算基数所需的空间总是固定的，而且还很小，适合使用做 UV 统计。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n114&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;BitMap&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ，用一个比特位来映射某个元素的状态， 只有 0 和 1 两种状态，非常典型的二值状态，且其本身是用 String 类型作为底层数据结构实现的一种统计二值状态的数据类型  ，优势大量节省内存空间，可是使用在二值统计场景。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n115&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在理解上述知识后，我们接下来讨论一下根据哪些策略选择相对应的应用场景下的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;数据类型？&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n116&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;选择合适的&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;数据类型策略&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n117&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;在实际开发应用中，Redis可以适用于众多的业务场景，但我们需要怎么选择数据类型存储呢？&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n118&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;主要依据就是时间/空间复杂度，在实际的开发中可以考虑以下几个点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n119&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n121&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;数据量，数据本身大小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n123&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;集合类型统计模式&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n125&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;支持单点查询/范围查询&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n127&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;特殊使用场景&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 cid=&quot;n128&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;数据量，数据本身大小&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n129&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;当数据量比较大，数据本身比较小，使用&lt;strong&gt;&lt;code&gt;String&lt;/code&gt;&lt;/strong&gt;就会使用额外的空间大大增加，因为使用哈希表保存键值对，使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;dictEntry&lt;/span&gt;&lt;/code&gt;&lt;span&gt;结构保存，会导致保存每个键值对时额外保存&lt;/span&gt;&lt;code&gt;&lt;span&gt;dictEntry&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的三个指针的开销，这样就会导致数据本身小于额外空间开销，最终会导致存储空间数据大小远大于原本数据存储大小。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n130&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;可以使用基于&lt;strong&gt;整数数组&lt;/strong&gt;和&lt;strong&gt;压缩列表&lt;/strong&gt;实现了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt; ，因为&lt;strong&gt;整数数组&lt;/strong&gt;和&lt;strong&gt;压缩列表&lt;/strong&gt;在内存中都是分配一块地址连续的空间，然后把集合中的元素一个接一个地放在这块空间内，非常紧凑，不用再通过额外的指针把元素串接起来，这就避免了额外指针带来的空间开销。而且采用集合类型时，一个 key 就对应一个集合的数据，能保存的数据多了很多，但也只用了一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;dictEntry&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这样就节省了内存。&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n131&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;集合类型统计模式&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n132&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;集合类型统计模式常见的有：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n133&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n135&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;聚合统计（ 交集、差集、并集统计 ）： 对多个集合进行聚合计算时，可以选择&lt;/span&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n137&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;排序统计（要求集合类型能对元素保序）：&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;中&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是有序集合，&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是按照元素进入 &lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的顺序进行排序的，&lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以根据元素的权重来排序；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n139&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;二值状态统计（ 集合元素的取值就只有 0 和 1 两种 ）：&lt;/span&gt;&lt;code&gt;&lt;span&gt;Bitmap&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 本身是用 &lt;/span&gt;&lt;code&gt;&lt;span&gt;String&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型作为底层数据结构实现的一种统计二值状态的数据类型 ， Bitmap通过 BITOP 按位 与、或、异或的操作后使用 BITCOUNT 统计 1 的个数。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n141&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;基数统计（ 统计一个集合中不重复的元素的个数 ）：&lt;/span&gt;&lt;code&gt;&lt;span&gt;HyperLogLog&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是一种用于统计基数的数据集合类型 ，统计结果是有一定误差的，标准误算率是 0.81% 。需要精确统计结果的话，用 Set 或 Hash 类型。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p cid=&quot;n142&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6067690160502442&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EvicK4z5ZDrgwpjewfjv5u9YDm2U1kXAt8L7bCkc4K9lSGia3D7c40V1G4ovPurutrV9mLe8gvCG1k5CyXFmgfyA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2866&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n143&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;类型，适用统计用户/好友/关注/粉丝/感兴趣的人集合聚合操作，比如&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n149&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;中&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是有序集合，使用应对集合元素排序需求 ，比如&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n155&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Bitmap&lt;/span&gt;&lt;/code&gt;&lt;span&gt;二值状态统计，适用数据量大，且可以使用二值状态表示的统计，比如：&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n163&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;HyperLogLog&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 是一种用于统计基数的数据集合类型， 统计一个集合中不重复的元素个数 ，比如&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n167&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;支持单点查询/范围查询&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n168&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;中&lt;/span&gt;&lt;code&gt;&lt;span&gt;List&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Sorted Set&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是有序集合支持范围查询，但是&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是不支持范围查询的&lt;/span&gt;&lt;/p&gt;&lt;h4 cid=&quot;n169&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;特殊使用场景&lt;/span&gt;&lt;/h4&gt;&lt;p cid=&quot;n170&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;消息队列&lt;/strong&gt;，使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;作为消息队列的实现，要消息的基本要求&lt;strong&gt;消息保序&lt;/strong&gt;、&lt;strong&gt;处理重复的消息&lt;/strong&gt;和&lt;strong&gt;保证消息可靠性&lt;/strong&gt;，方案有如下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; cid=&quot;n171&quot; mdtype=&quot;list&quot; data-mark=&quot;+&quot;&gt;&lt;li&gt;&lt;p cid=&quot;n173&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;基于 List 的消息队列解决方案&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p cid=&quot;n175&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;基于 Streams 的消息队列解决方案&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure cid=&quot;n176&quot; mdtype=&quot;table&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr cid=&quot;n177&quot; mdtype=&quot;table_row&quot;&gt;&lt;th&gt;&lt;br/&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;基于List&lt;/span&gt;&lt;/th&gt;&lt;th&gt;&lt;span&gt;基于Strems&lt;/span&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr cid=&quot;n181&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;消息保序&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;LPUSH/RPOP&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;XADD/XREAD&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n185&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;阻塞读取&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;BRPOP&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;XREAD block&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n189&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;重复消息处理&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;生产者自行实现全局唯一ID&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;Streams自动生成全局唯一ID&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n193&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;消息可靠性&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;BRPOPLPUSH&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;使用&lt;code&gt;PENDING&lt;/code&gt; List自动留存消息&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr cid=&quot;n197&quot; mdtype=&quot;table_row&quot;&gt;&lt;td&gt;&lt;span&gt;适用场景&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;消息总量小&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;消息总量大，需要消费组形式读取数据&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p cid=&quot;n201&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;&lt;strong&gt;基于位置 LBS 服务&lt;/strong&gt;，使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;的特定&lt;/span&gt;&lt;code&gt;&lt;span&gt;GEO&lt;/span&gt;&lt;/code&gt;&lt;span&gt;数据类型实现，&lt;/span&gt;&lt;code&gt;&lt;span&gt;GEO&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 可以记录经纬度形式的地理位置信息，被广泛地应用在 LBS 服务中。 比如:打车软件是怎么基于位置提供服务的。&lt;/span&gt;&lt;/p&gt;&lt;h3 cid=&quot;n202&quot; mdtype=&quot;heading&quot;&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h3&gt;&lt;p cid=&quot;n224&quot; mdtype=&quot;paragraph&quot;&gt;&lt;code&gt;&lt;span&gt;Redis&lt;/span&gt;&lt;/code&gt;&lt;span&gt;之所以那么快，是因为其基于内存的数据操作和使用&lt;/span&gt;&lt;code&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;/code&gt;&lt;span&gt;哈希表作为索引，其效率高，速度快，而且得益于其底层数据多样化使得其可以适用于众多场景，不同场景中选择合适的数据类型可以提升其查询性能。&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n247&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;blockquote cid=&quot;n251&quot; mdtype=&quot;blockquote&quot;&gt;&lt;p cid=&quot;n254&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;谢谢各位点赞，没点赞的点个赞支持支持&lt;/span&gt;&lt;/p&gt;&lt;p cid=&quot;n255&quot; mdtype=&quot;paragraph&quot;&gt;&lt;span&gt;最后，微信搜《Ccww技术博客》观看更多文章，也欢迎关注一波。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p cid=&quot;n204&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n205&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n206&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n207&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n208&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n209&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n210&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p cid=&quot;n211&quot; mdtype=&quot;paragraph&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>aa8d6b08ad046d44ada475f7afc83b0c</guid>
<title>GitHub 访问加速指南</title>
<link>https://toutiao.io/k/5mauvie</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不知道什么时候开始，&lt;code&gt;GitHub&lt;/code&gt;里面的图片也无法加载出来，本来页面也加载缓慢，这下更是雪上加霜，好在还是有简单的方式加速&lt;code&gt;GitHub&lt;/code&gt;的访问。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过设置&lt;code&gt;hosts&lt;/code&gt;就是一个低成本的方案， &lt;code&gt;GitHub&lt;/code&gt;里面图片都在&lt;code&gt;githubusercontent.com&lt;/code&gt;域名下，我们只需要在&lt;code&gt;hosts&lt;/code&gt;里绑定域名和对应的&lt;code&gt;IP&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. hosts内容&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;hosts&lt;/code&gt;文件内容如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 2020年12月30日更新&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# GitHub Start&lt;/span&gt;&lt;br/&gt;52.74.223.119     github.com&lt;br/&gt;52.74.223.119   gist.github.com&lt;br/&gt;54.169.195.247   api.github.com&lt;br/&gt;185.199.111.153   assets-cdn.github.com&lt;br/&gt;199.232.96.133    raw.githubusercontent.com&lt;br/&gt;199.232.96.133    gist.githubusercontent.com&lt;br/&gt;199.232.96.133    cloud.githubusercontent.com&lt;br/&gt;199.232.96.133   camo.githubusercontent.com&lt;br/&gt;199.232.96.133   avatars0.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars1.githubusercontent.com&lt;br/&gt;199.232.96.133   avatars2.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars3.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars4.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars5.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars6.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars7.githubusercontent.com&lt;br/&gt;199.232.96.133    avatars8.githubusercontent.com&lt;br/&gt;199.232.96.133  user-images.githubusercontent.com&lt;br/&gt;185.199.109.154   github.githubassets.com&lt;br/&gt;&lt;span&gt;# GitHub End&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果发现没有作用，或者速度不理想，参考「&lt;strong&gt;查找IP&lt;/strong&gt;」内容更新下对应的&lt;code&gt;IP&lt;/code&gt;地址。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 如何修改 hosts&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.1 Windows&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hosts文件位置：&lt;code&gt;C:/windows/system32/drivers/etc/hosts&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将前文内容追加到&lt;code&gt;hosts&lt;/code&gt;，然后刷新&lt;code&gt;DNS&lt;/code&gt;缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;ipconfig /flushdns&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2.2 macOS&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;hosts文件位置：&lt;code&gt;/etc/hosts&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;macOS&lt;/code&gt;系统下修改需要按照如下方式：&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1：首先，打开（访达）Finder。&lt;span/&gt;&lt;/h5&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2：使用组合键&lt;code&gt;Shift+Command+G&lt;/code&gt;打开&quot;前往文件夹&quot;，输入框中输入&lt;code&gt;/etc/hosts&lt;/code&gt;。&lt;span/&gt;&lt;/h5&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3：然后就会跳转到&lt;code&gt;hosts&lt;/code&gt;文件位置。&lt;span/&gt;&lt;/h5&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注意：如果你使用&lt;code&gt;VS Code&lt;/code&gt;，可以直接用&lt;code&gt;VS Code&lt;/code&gt;修改和保存。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;复制&lt;code&gt;hosts&lt;/code&gt;文件到桌面上，鼠标右键右击它，选择「打开方式」—「文本编辑」，打开这个&lt;code&gt;hosts&lt;/code&gt;文件，然后将你要修改的内容直接在里面修改就好了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后把你修改好的&lt;code&gt;hosts&lt;/code&gt;文件替换掉：&lt;code&gt;/etc/hosts&lt;/code&gt; 文件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：如果弹出密码输入框，你需要输入你当前电脑登录账号的密码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后刷新缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;sudo killall -HUP mDNSResponder&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3. 查找IP&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;http://tool.chinaz.com/dns&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://site.ip138.com&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://www.ipaddress.com&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;注：2020年12月30日我实际使用&lt;code&gt;IPAddress&lt;/code&gt;才可以生效，前面两个查询站点获取的&lt;code&gt;IP&lt;/code&gt;均无法使用，各位可以都尝试下直到生效。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面&lt;code&gt;hosts&lt;/code&gt;里面域名里分为两类：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;*.githubusercontent.com&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;*.github.com&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;*.githubusercontent.com&lt;/code&gt;可以使用同一个&lt;code&gt;IP&lt;/code&gt;，不需要每个单独查询。&lt;code&gt;*.github.com&lt;/code&gt;未经测试，目前看是需要单独查询对应的&lt;code&gt;IP&lt;/code&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他方案&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;镜像站点&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://github.com.cnpmjs.org&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://hub.fastgit.org&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个网站是整站访问的替代品，你可以浏览项目，也支持下载检出。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是不建议登陆自己的账号，毕竟不是直接访问到原站。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;文件下载&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://ghproxy.com&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://gh.api.99988866.xyz&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;该方案利用&lt;code&gt;Cloudflare Workers&lt;/code&gt;对 &lt;code&gt;release&lt;/code&gt; 、&lt;code&gt;archive&lt;/code&gt;以及项目文件进行加速，部署无需服务器。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果对自建感兴趣，可以访问&lt;span&gt;gh-proxy&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Raw加速&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;https://7ed.net/gra&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;jsDelivr&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;jsDelivr&lt;/code&gt;不支持&lt;code&gt;exe&lt;/code&gt;文件下载，使用方法参考例子。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;地址格式如下，&lt;code&gt;version&lt;/code&gt;忽略则始终使用最新版本：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;https://cdn.jsdelivr.net/gh/user/repo@version/file&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;举个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;# 原始url&lt;/span&gt;&lt;br/&gt;https://github.com/ineo6/homebrew-install/blob/master/install.sh&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 转换结果&lt;/span&gt;&lt;br/&gt;https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p&gt;文章内链接无法跳转，可以点击“阅读原文”获得更好的点击体验。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;span&gt;参考资料&lt;br/&gt;&lt;/span&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;http://tool.chinaz.com/dns: &lt;em&gt;http://tool.chinaz.com/dns/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;https://site.ip138.com: &lt;em&gt;https://site.ip138.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;https://www.ipaddress.com: &lt;em&gt;https://www.ipaddress.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;https://github.com.cnpmjs.org: &lt;em&gt;https://github.com.cnpmjs.org/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;https://hub.fastgit.org: &lt;em&gt;https://hub.fastgit.org&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;https://ghproxy.com: &lt;em&gt;https://ghproxy.com/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;https://gh.api.99988866.xyz: &lt;em&gt;https://gh.api.99988866.xyz/&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;gh-proxy: &lt;em&gt;https://github.com/hunshcn/gh-proxy&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;https://7ed.net/gra: &lt;em&gt;https://7ed.net/gra&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5555555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/nrI8wQaX8Myib9xibDgNP4cia7SSXmQq4VYvvXSlyOWy1S55OlI7ku9lkjHFOOZNKJURia5hQbnGLWemvF0Olx3Xug/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/nrI8wQaX8Myib9xibDgNP4cia7SSXmQq4VYYsfneoMsdVnKO4DicJiaiae3oLicLEvlicib2Sb7uCBkAXTJibqNnGzlM5n6A/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7d8f7bc1cf20d9989643dac55763dd32</guid>
<title>聊聊机器如何理解人类的语言</title>
<link>https://toutiao.io/k/k301gb6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;h2&gt;&lt;span&gt;人类语言复杂性&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;自然语言对于人类发展进程是至关重要的，可以说如果没有自然语言就不会有人类的文明，它也是人类独有的能力。想象一下，如果没有自然语言我们该如何进行思想交流，该如何进行人与人之间的协作？。&lt;/p&gt;&lt;p&gt;人类的自然语言发展到如今已经是高度成熟了，同时这也是一个相当复杂的系统，从字到单词到短语再到句子和段落，加上各种不同的表达形式和语境，真真算得上是“皇冠上的明珠”。&lt;/p&gt;&lt;p&gt;如果要去形容自然语言有多复杂好像也很难说清楚，那我们就以数学组合的角度来看自然语言的复杂度，当然用该例子也并不完全正确，重点是体会下自然语言爆炸式的复杂度。经典的用小麦来填国际象棋棋盘格子的故事大家都听过，第一格放一粒，第二格放两粒，第三格放四粒，第四格放八粒，以此类推。每一个格子放的麦粒都是前面的两倍，一直放到64格。然而这些麦子总数量需要全世界生产两千年，这就是爆炸式的组合空间。可以想象一下，假如中文汉字一共有10000个，一句话长度为20字，那么这样的组合空间会是多大呢？10000的20次方，这数字已经大到在整个宇宙中都无法形容。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6905901116427432&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQ9tXCNnLPUliadEpOicgBPHmNP0nZ1BRg7ibmqmJdUgqqjOvZK3w8EQlqg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1254&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;语言的表示&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们知道机器处理的是数字信号，那么在机器里面所有的信息都是数字化的，所以任何信息如果要被机器处理就需要先被编码成01二进制信号。比如“你好”这个单词使用UTF-8进行编码后的二进制为“111001001011110110100000 111001011010010110111101”，如果机器不对“你好”进行编码则无法处理，而对于人类则很难读懂这一串1和0是什么意思。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQROSyHYZ9ABBMkvQIaELtbW6yibU3ibUCyIPpZNkkJH4EZIPF4mUIDQfw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;240&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;机器在对自然语言处理时一般不会直接使用UTF-8之类的编码，而是使用词向量。词向量一般有两种形式：one-hot形式和分布式形式。最简单的向量方式是one-hot形式，它的处理方式简单粗暴，一般就是统计词库包含的所有V个词，然后将这V个词固定好顺序，然后每个词就可以用一个V维的稀疏向量来表示，向量中只有在该词出现的位置的元素才为1，其它元素全为0。比如下面这几个词，第一个元素为1的表示中国，第六个元素为1的表示美国，第五个元素为1的表示日本。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;中国 &lt;span&gt;[1,0,0,0,0,0,0,0,0,……，0,0,0,0,0,0,0]&lt;/span&gt;&lt;br/&gt;美国 &lt;span&gt;[0,0,0,0,0,1,0,0,0,……，0,0,0,0,0,0,0]&lt;/span&gt;&lt;br/&gt;日本 &lt;span&gt;[0,0,0,0,1,0,0,0,0,……，0,0,0,0,0,0,0]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从中可以看到one-hot形式的维数通常会很大，因为词数量一般在10W级别，可能会造成维数灾难。另外这种形式只通过顺序和01来表示单词，非常浪费空间。再一个是这种方式的任意两个词都是孤立的，没法看出两个词之间的关联性。&lt;/p&gt;&lt;p&gt;鉴于one-hot形式词向量的缺点，出现了另外一种词向量表示方式——分布式词向量(distributed word representation)。分布式词向量则干脆直接用普通的向量来表示词向量，向量元素的值为任意实数，向量的维数在事前确定，比如可以为50维或100维。这时的词向量类似如下（这里假设用5维来表示）：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;中国 &lt;span&gt;[1.25, 0.2, 0.3, 0.5, 0.6]&lt;/span&gt;&lt;br/&gt;美国 &lt;span&gt;[0.1, 0.3, 0.5, 0.1, 1.5]&lt;/span&gt;&lt;br/&gt;日本 &lt;span&gt;[2.2, 0.2, 0.4, 0.6, 1.0]&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中每个元素的具体数值由训练算法来确定，这样一来就克服了可能的维度灾难，而且充分利用了空间，如果使用适当的训练方法训练出来的词向量还可以直接根据两个词之间的向量距离来计算相似性。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;机器与人类交流&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们先看人与人之间的交流过程，人类的耳朵负责接收外界声音，然后交由大脑进行解码理解并采取对应行为，最后通过嘴巴回复。类似地，机器如果要与人类进行交流也必须经过三个步骤，首先是要能接收人类说话的信号并将其转成文本，然后使用自然语言处理技术理解该文本所表达的语义，最后是根据所理解的语义采取对应操作并回答人类。&lt;/p&gt;&lt;h2&gt;&lt;span&gt;从声音到文本&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;初中物理告诉我们声音是一种波，耳朵里面的器官在接收声波后负责将波动转换成电信号，然后传入大脑进行处理。机器通过传感器(比如麦克风)接收的声音也是波，不过这些波是由很多离散的点来描述。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.0564784053156147&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQ1fLazW0r74iaoXo3pqy2YIgv9u71Adc5m2RcAI5ddVcljTDV99zwK8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;301&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;成功接收声波后就开始对声波信号进行处理，一般会将其拆分成毫秒级别的帧，而若干个帧形成一个状态，每三个状态又形成一个音素，最终的单词则由若干个音素组合而成。可以看到单位大小顺序为帧-&amp;gt;状态-&amp;gt;音素-&amp;gt;单词，根据帧找到对应的状态就可以得到对应的文本单词了，帧和状态的概率表则由大量语音样本统计而得到。以上便完成从语音到文本的转换。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.0609951845906902&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQWRmrsibPiawVUiaD1ia4bkYrFSMwVwfYT7gQWlTDpNsP3ib78W4dTRCgeTg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;623&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;机器理解语言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;将语音转换成文本后开始最核心的部分——理解语义，也就是这段文本表示什么意思。几乎涉及到自然语言处理（NLP）的所有知识模块，其相关内容也非常多且复杂，后面会展开深入讲解。分析语义时一般需要将一句话拆分成更小的单元，同时也要识别句子中关键词和结构等等。举一个简单的例子，比如“附近有什么好吃的？”，该句子将被分词为“附近/有/什么/好吃/的”，那么“附近”、“什么”和“好吃”就是该句子的关键词，可以简单地通过它们去匹配意图。当然，理解语义并非如此简单，特别是开放性领域场景。一般还会涉及到NLP中的命名实体识别、意图识别、文本分类、句法分析、文本相似度、情感分析等等。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.4734133790737564&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQSzuq3JsD0p9E73Y1ThtFdcEIxYWjLtbdm63QV4CrImV489z2Uwbqhw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1166&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;h2&gt;&lt;span&gt;机器生成语音&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;对语言进行理解后我们将需要回答的语音先以文本的形式组成，最后才将文本转成语音，这个步骤称为语音合成。比如非常传统的合成方法就是拼接方法，即直接从语音数据库中获取语音片段来合成完整的语音。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.3354350567465322&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/caNYYfYLhoHshmZVyic4YWxHxCrOE3XBQztTnlEBCoxEVgSIEgVl3QDsibhf7U8WHVjsZnsfQW6x4IV1HNc7ic0mQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;793&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1317f2ed5c46cc7820f7f316490b361c</guid>
<title>敏捷管理系列：四种常见研发模式</title>
<link>https://toutiao.io/k/n3a4zv9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;rich_media_thumb_wrp&quot; id=&quot;media&quot;&gt;
                    
                                        
                                    &lt;/p&gt;
                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;span&gt;01 瀑布模型 &lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;     将软件生存周期的各项活动规定为按固定顺序而连接的若干阶段工作，形如瀑布流水，最终得到软件产品。1970年温斯顿-罗伊斯提出。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;核心思想&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;     &lt;span&gt;按工序将问题化简，将功能的实现与设计分开，便于分工协作，即采用结构化的分析与设计方法将逻辑实现与物理实现分开。将软件生命周期划分为制定计划、需求分析、软件设计、程序编写、软件测试和运行维护等六个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8346153846153846&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5bgyssQzhRdvftQAxicHa7J1Wj98y8UgOQiadCvrOkbDQVUuW3K507Fqw/640?wx_fmt=png&quot; data-w=&quot;520&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型缺点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;   各阶段完全固定，输出大量文档，极大增加工作量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      - 线性开发，增加项目延期风险&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;      - 不适应用户需求的变化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.8&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5TRr9sqbFXo8FS9NNeKqneS7kWLBLUwMib7N9DMTDIibhzDHwJPtSupuA/640?wx_fmt=png&quot; data-w=&quot;570&quot;/&gt;&lt;strong&gt;&lt;span&gt; 02 迭代模型 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;     RUP（统一开发过程）推荐的周期模型，被定义为: 迭代包括产生产品发布的全部开发活动及外围因素，类似小型的瀑布模型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3616161616161616&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5eOoVSRv2mvRdvdHZpfHnK5jGeoLRlxias4V6UkLiaC8gaUaCfhyejGgw/640?wx_fmt=png&quot; data-w=&quot;990&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型优点(与瀑布模型相比)&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;     &lt;span&gt;- 降低了增量的风险&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     - 降低产品无法按既定进度投入市场风险&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     - 加快了整个开发工作的进度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;     - 迭代过程适应需求变化更容易&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型缺点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;     在项目早起开发可能有所变化，对于开发人员要求及项目管理者能力有较高要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 03 螺旋模型 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;    &lt;span&gt;1988年，巴利-玻姆正式提出”螺旋模型“，它将瀑布模型和快速原型模型结合起来，强调了其他模型所忽视的风险分析，特别适合于大型复杂的系统。风险驱动的方法体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.882640586797066&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5Yic4ThLG7VMeEruQXIqmUNPeHzpj1KCCgxZLL8nK28x2HRXEjC6wvgw/640?wx_fmt=png&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型优点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;    &lt;span&gt;- 设计的灵活性，可以在项目的各个阶段进行变更&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    - 以小的分段来构建大型系统，成本计算更简单&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    - 客户始终参与每个阶段的开发，保证了项目不偏离正确方向及项目的可控性&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型缺点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;   - 该模型强调风险分析，让客户接受和信任这种分析方式是不易的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 如果执行风险分析影响项目利润，那么进行风险分析毫无意义&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 研发人员应该擅长发现风险，准确分析风险，否则将会带来更大的风险&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 04 敏捷开发 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型介绍&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;    &lt;span&gt;以迭代模型为理论基础，1990年开始逐渐引起关注，包括XP、Scrum、FDD、DSDM、Crystal、ASD、Kanban、Lean等。强调研发团队与业务团队紧密合作、面对面沟通、频繁交付版本、紧凑而自我组织型的团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.438953488372093&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5ECBiawoV6oXu8EsLsenMtib6bsTIiafFdVgicibjibZlSlHC4eoJX7ZwhicRA/640?wx_fmt=png&quot; data-w=&quot;688&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型优点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;   &lt;span&gt;- 通过快速而持续交付有用的软件来满足客户的需求&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 强调人员和互动，而不是过程和工具。客户、开发人员和测试人员经常相互交流&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 频繁交付工作软件（几周而不是几个月）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 面对面交谈是最好的交流方式&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 业务与研发之间日常密切的合作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 持续关注技术的卓越程度和良好的设计&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 经常适应不断变化的环境&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;模型缺点&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;   - 必要的设计和文档缺乏重视&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 大型项目，开发初期，很难评估工作量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   - 如果业务或客户不清楚他们想要的最终结果，项目很容易偏离轨道&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.882640586797066&quot; data-type=&quot;png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5Yic4ThLG7VMeEruQXIqmUNPeHzpj1KCCgxZLL8nK28x2HRXEjC6wvgw/640?wx_fmt=png&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;93040&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85956&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;长按二维码关注公众号&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.5555555555555556&quot; data-type=&quot;gif&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/Jmj2LkhPUr6h3CrSreKn5SViatk7B0AL5liayVdRYmSxBdcfYd82p9BSK5DIKfJoTeyA8lE0hoOIibn3Hd1YFcGXQ/640?wx_fmt=gif&quot; data-w=&quot;900&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;*本公众号所发布内容仅代表作者观点，不代表社区立场&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54db94df1bfee11f485e66964934cd70</guid>
<title>面试被吊打系列：Redis 缓存血崩</title>
<link>https://toutiao.io/k/ud17b39</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小张兴冲冲去面试，结果因为redis的缓存雪崩问题被面试官拒绝！&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张：面试官，你好。我是来参加面试的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：你好，小张。我看了你的简历，你们平时在项目中用了redis，能说一下你们使用redis的场景吗？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张：redis的话我们主要是用来存储一些常用的配置类数据还有一些热点数据；还有存储一些到期失效的数据，比如登录用户颁发的token等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：那好，既然你们用来存储热点数据。那么我来问你个实际场景，&lt;strong&gt;「查询热点数据的时候会先从缓存加载，如果缓存没有命中则会检索数据库获取数据。往往我们还会给热点缓存数据设置一个过期时间。那么我的问题是，假设在某一时间点热点缓存全部过期失效了，这样所有的请求都会直接进入数据库，一瞬间就会把数据库压垮，如果是你会怎么解决这个问题？」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张：emm...面试官，我肚子有点不舒服，我先回去了。小张卒！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：因为缓存同一时间大面积的失效，或者缓存服务暂时不能提供服务等，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。这一现象被称之为 &lt;strong&gt;「缓存雪崩」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.47625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4iaHicfK6icJGX6I55CzepYv96xxPmdQbLGHcHW10UO94Ukw9fXPcWib7I947NNuvvC3p377TrcrHk40Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缓存血崩可以通过以下四个维度来解决：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;数据加热的含义就是在正式部署之前，先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以在第一个查询数据的请求上使用一个互斥锁来锁住它，其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后将数据放到redis缓存起来。后面的线程进来发现已经有缓存了，就直接走缓存。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;给缓存的时效时间加上随机因子，即给缓存设置不同的过期时间，让缓存失效的时间点尽量均匀。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;把Redis设计成高可用的，即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务，例如 Redis Sentinel 和 Redis Cluster 都实现了高可用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：各位看官朋友们，你们学会怎么解决缓存雪崩的问题了吗？希望你们以后面试不会被这个问题难倒哟~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;小张：学到了学到了，我下次再来。（早知道不提什么热点数据了，不提面试官就不会问。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;面试官：小样，不问这个那么我不会问其他的了吗？你下次再来试试！&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>