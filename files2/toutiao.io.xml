<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>4a225e2d07d887526ac95e9ada8924b5</guid>
<title>面试过 200 人的经验，都在这里了 | 码农周刊第 325 期</title>
<link>https://toutiao.io/k/xvysg5s</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;issue&quot; id=&quot;readabilityBody&quot;&gt;
        &lt;h1&gt;面试过 200 人的经验，都在这里了 | 码农周刊第 325 期&lt;/h1&gt;
        &lt;h2&gt;码农周刊第325期（2020-11-25）&lt;/h2&gt;
        &lt;p&gt;☞ &lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3250&quot; target=&quot;_blank&quot;&gt;薪资翻番如何实现？程序员的涨薪秘诀&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19568&amp;amp;url=https%3A%2F%2Fvip.manong.io%2F%3F3250&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_321.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&amp;#13;
&lt;small&gt;&lt;a href=&quot;https://weekly.manong.io/bounce?nid=325&amp;amp;aid=19185&amp;amp;url=https%3A%2F%2Fjinshuju.net%2Ff%2FV7DxN9&quot; target=&quot;_blank&quot;&gt;商务合作&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
        
        &lt;h3 id=&quot;程序设计&quot;&gt;程序设计&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;业界实战&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;VIP会员专区&quot;&gt;VIP会员专区&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;工作地点：成都 | 薪资：15-30K | 简历投递邮箱：xiexiaofang@huobi.com&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;相比 cocos2d 引擎有着更低的入门门槛和维护成本，为复杂动画的实现提供了一种全新的方式，新的复杂动画开发将会变得更加简单高效。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;让您享受极简编程体验，快速访问支付宝开放平台开放的各项核心能力。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;一个不错的 Python 学习教程，30 天循序渐进地教你学会 Python。&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;白皮书从技术、市场、趋势、挑战等多维度，对我国开源产业生态进行了全面、深度的剖析，指出了我国开源产业发展的几大重要趋势。&lt;/p&gt;
        &lt;h3 id=&quot;工具资料&quot;&gt;工具资料&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;试试吧&lt;/p&gt;
        
        &lt;p&gt;经验总结&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;简明介绍&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;供参考&amp;#13;
&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;图文并茂&lt;/p&gt;
        
        &lt;p&gt;收藏吧&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;实用&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;使用方便&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;h3 id=&quot;编程语言&quot;&gt;编程语言&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;「码农周刊 VIP 会员专属邮件周报」每周五发送，自订购之日算起，全年 52 期。&lt;/p&gt;
        
        &lt;p&gt;一步步教你&lt;/p&gt;
        
        &lt;p&gt;代码示例&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;良心教程&lt;/p&gt;
        
        &lt;p&gt;结合代码&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;你怎么看？&lt;/p&gt;
        
        &lt;p&gt;深入研究&lt;/p&gt;
        
        &lt;p&gt;详解&lt;/p&gt;
        
        &lt;p&gt;详细介绍&lt;/p&gt;
        
        &lt;p&gt;供参考&lt;/p&gt;
        &lt;h3 id=&quot;每周独家号推荐&quot;&gt;每周独家号推荐&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;技术总结，经验分享&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 451179 即可&lt;/p&gt;
        
        &lt;p&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 429587 即可&lt;/p&gt;
        
        &lt;p&gt;分享计算机视觉与机器学习技术的最前沿&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 359575 即可&lt;/p&gt;
        
        &lt;p&gt;聚焦基础架构和Linux。十年架构，日百亿流量，与你探讨高并发世界，给你不一样的味道。&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 351247 即可&lt;/p&gt;
        
        &lt;p&gt;学习就是不停的积累&lt;br/&gt;订阅方法：使用&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;，发现 &amp;gt; 搜索 24912 即可&lt;/p&gt;
        &lt;h3 id=&quot;每周一书&quot;&gt;每周一书&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;本手册以开发工程师为中心视角，划分为单元测试、安全规约、MySQL 数据库、工程结构等七个维度，相应的扩展解释和说明、正例和反例，全面、立体、形象地帮助开发工程师成长。欢迎到&lt;a href=&quot;http://toutiao.io/download?ref=v4.1.0&quot; target=&quot;_blank&quot;&gt;开发者头条客户端&lt;/a&gt;兑换阅读。&lt;/p&gt;
        &lt;h3 id=&quot;编程之外&quot;&gt;编程之外&lt;/h3&gt;
        &lt;p/&gt;
        
        &lt;p&gt;经验分享&lt;/p&gt;
        
        &lt;p&gt;个人经历&lt;/p&gt;
        
        &lt;p&gt;一直被追赶，从未被超越&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.toutiao.io/ads/vip_3041.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
        &lt;p&gt;
        &lt;/p&gt;
        
        
        
        
        &lt;div class=&quot;qrcode&quot;&gt;
  &lt;img src=&quot;https://img.toutiao.io/ads/vip_qrcode.png&quot; alt=&quot;Qrcode 258&quot;/&gt;&lt;span&gt;加入码农周刊VIP会员&lt;/span&gt;
&lt;/div&gt;
    &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>14b963d34214dbdb0fe0ddfa42649d55</guid>
<title>CTO 怒了：“如果中台不省钱，我建个屁中台啊！”</title>
<link>https://toutiao.io/k/batmypd</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;&lt;span&gt;点击“&lt;/span&gt;&lt;span&gt;技术领导力&lt;/span&gt;&lt;span&gt;”关注&lt;/span&gt;&lt;span&gt;∆&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;每天&lt;/span&gt;&lt;span&gt;早上8:30&lt;/span&gt;&lt;span&gt;推送&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;作者| Mr.K   整理| Emma&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;来源| 技术领导力(ID：jishulingdaoli)&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;“妈的，A厂说的什么玩意儿，老子听不懂！你就告诉我，这次中台建设，投资多少钱，投了这些钱后，以后的信息化系统是否可以集约化建设？大概平均每个系统能省多少钱？” L总参观完杭州的A厂、深圳的T厂，一脸懵逼地对小M说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M急忙回复领导：“中台省钱这个事，它可以当成结果，但千万不能当成目标。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总一听又怒了：“我建中台的目的就是为了省钱，公司一年信息化开支几千万上亿，如果中台不省钱，我建个屁中台啊！你还是没搞明白中台，再回去研究！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M是我的一位读者，他是某大型国企的中台项目经理，今年的工作目标就是规划和落地中台项目。L总是该国企IT部的负责人，相当于CTO。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M跟我吐槽了一个小时，我大概知道他们中台项目的问题所在了，先来听听小M公司上中台的故事。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6633333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsLGlc322Xx2pmCpQ6oyVWh6BChRctiaibhEreqY4qu5qamWUxtZJPicGpdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;em&gt;01&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;云平台专家，初露锋芒&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M之前一直从事企业信息化改革工作，帮助过几家公司实现了云化，积累了一定的项目经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;L总所在的企业，信息系统架构老旧，经过10几年的发展，形成了几十个大“烟囱”系统，数据的互联互通是难题，严重制约了业务的发展，让集团大领导非常不满。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如客服系统、BOSS系统（Business &amp;amp; Operation Support System），数据是不联通的，市场人员和客服人员工作难以协同，售后都跟不上，更不用说客户关系的主动维护了，这直接导致了客户流失率高。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是L总聘用了小M，先是任命他为“基础资源整合”负责人，具体干什么呢？就是建云平台，把集团各部门的服务器、网络资源统一管理，提高硬件使用率，降低成本。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个事情，目标明确，又是小M经验所在，小M思路也很清晰：新系统全部上云，老旧系统改造迁移上云，实在无法改造迁云的系统，继续运行，但各部门得制定未来的业务升级计划，逐步实现业务迁云。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不到一年的时间就理顺了，L总对小M的工作表现非常满意，似乎觉得可以委以重任了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M是个有理想的年轻人，他的理想就是三十岁的时候，在北京拥有一套自己的房子。现在他的理想已经实现一半了：他已经三十岁了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;02&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;上中台：没吃过猪肉，还没薅过猪毛？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;去年年底的某一天，L总把小M叫到办公室。L总说，年底了，要提出明年的公司技术板块工作规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总认为，现在公司虽然做到了业务系统上云，实现了资源的统一调度、统一管理，但存在业务不通、业务架构老旧、重复建设等等很多问题，无法快速应对外部市场的变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总经过调研，觉得现在热门的“数据中台”应该是公司技术架构改革的方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M领的任务就是，规划和落地数据中台项目。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M虽然一直在搞云计算，但是大数据这块，没吃过猪肉，也薅过猪毛。不敢说很懂，至少是略知一二吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是小M无知者无畏，接下了这个项目，赶紧开始学习，在百度上一查可把小M吓坏了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原来，A厂们提出的数据中台、AI中台、视频中台、技术中台、移动中台......新概念层出不穷、眼花缭乱。各种敏捷开发、快速响应、集约建设、沉淀能力，网上的噱头一个比一个闪瞎狗眼。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，小M整合了几篇文章，给L总写了个整体思路，“明年，公司将构建数据中台，整合公司内外数据资源，打造公司新一代技术基础设施，实现公司技术升级，支撑好公司未来的内外业务……”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总看了这个规划，非常满意，认可小M的思路，正式把中台建设写入了2020年度规划里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsLHLeblZktPKCwo39Z3x9mTrI8CzicdtmORaw1575adPW0zfSlLOyiazlA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;900&quot; data-cropy1=&quot;98.09688581314879&quot; data-cropy2=&quot;599.4809688581314&quot; data-ratio=&quot;0.5577777777777778&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/sqibwUCydDhzLd7hhMrVTggQN9SbiasvsL24mu30CHaLaufXAytaEmib57bWvynnHQ68Nbpc6kJJr3jT4fpW15gNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;03&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;上中台吗？会送命的那种！&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M又看了一些中台实施文章，咨询了A厂、T厂们的中台架构师，制定出详细的中台规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M的报告指出，公司信息化存在的业务墙、数据墙、重复投资建设等问题，提出“三中台——数据中台、AI中台、视频中台”的技术架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并提出几个推进机制：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、开展公司信息化资产盘点；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、研究公司发展战略规划、开展顶层设计；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、公司一把手牵头项目，各部门立军令状；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、制定里程碑：5月底完成调研，6月份完成方案设计，9月份前完成中台产品部署实施，年底前完成核心业务基于中台架构的改造。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你闻到熟悉的味道了吗？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M初学中台，听信A厂的中台实施方法论套路，准备从顶层设计开始，盘点信息化资产，中台必须是一把手工程，得领导挂帅，中台急不得，是中长期战略......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总不傻，把方案一棒子打死了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“谁TM让你做顶层设计？老子都未必做得了顶层设计！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还盘点资产？盘你老木，捅出篓子，我TM都未必兜得住。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一把手挂帅？中台干好了，是领导英明，干不好你就给老子滚蛋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么中长期规划？我明年还在不在这个位子上，都不好说......”&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;04&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;没有中台的命，却得了中台的病&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故事讲到这，其实这个项目的命运已经基本注定了，总结下来有那么几个原因：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第一，中台实施缺乏场景&lt;/strong&gt;。小M正在发愁中台怎么落地，A厂的顾问给他承诺：“我们做的很多中台项目，都是基于一些具体的需求来构建的。例如，一些公司要做某几个系统的数据治理，一些公司要做某些新业务要上中台。只要有场景，我们一定能建好中台。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可惜，小M不知道，供应商的承诺就像放屁，当时惊天动地，过后苍白无力。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M跑遍了各业务部门，推销他的中台梦想，得到的答复是，“这不是找事情做吗？我们的系统，一点儿问题都没有！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M碰了一鼻子灰，回来给L总汇报，被L总一顿骂，“你去管那些业务部门的需求干什么？你先把中台搭建起来，就跟云一样！搭建起来后，后续我们不给他们批信息项目资金就可以了！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在领导眼里，所有的问题都是人和钱的问题，没有人和钱搞不定的问题。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第二，规划不充分、预算不足&lt;/strong&gt;。小M听L总的，赶紧和A厂、T厂的顾问商量，那就先搭建中台系统吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，按照小M原先的三中台：数据中台、AI中台、视频中台的规划，让A厂、T厂拉了产品清单，报了产品价格。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;结果，A厂报了个上亿的价格，T厂好一点，才报了4000万。小M给L总汇报了下，L总冒火了：“我们是先行先试，不是要推翻全公司的技术设施！我们最多投资300万，先做出一些效果，落地一两个场景，再来推动后期建设！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M心想，L总也真是“节俭”，中台这么好一副牌，就押这么点注，即使赢了又有多大意思？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M把情况跟A厂、T厂进行说明，看看能不能先按框架招标，再一步步实施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;A厂、T厂行走江湖多年，一看就明白了，给不起钱呗，没钱TM不早说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，翻脸比翻书还快，这些顾问，突然都变得忙起来，电话也经常接不通了，微信、钉钉也不怎么回了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M在技术世界里呆太久了，没被社会狠狠地毒打过。其实生活就是这样，一半是倒霉，别一半是如何处理倒霉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M自己不懂中台，项目预算还不够上个OA的，现在连供应商也不鸟他了，这还怎么玩啊？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第三，中台建设的目标没搞清楚&lt;/strong&gt;。小M是正儿八经想操盘一把中台项目的，毕竟年轻的时候多吃点苦，到老了吃苦才会习惯。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可是L总不这么想，大家都是打工人，尤其是做到了他那么高职位，保住乌纱帽是最重要的，在此基础上如果能捞点油水，是最好的，其它都是扯淡。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小M就没有领悟到这一点，一上来就提出资产盘点、顶层设计，一点都不懂领导的意图，你不死谁死？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先不说它是个中台项目，但凡任何IT项目，有三个原则是要注意的：一，不要去折腾业务部门，要帮他们解决实际问题；二、花钱要花在看得见的地方，花小钱办大事；三、要尽可能争取更多干系人的支持，至少他们不反对。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这么看下来，中台项目要想“成功”，其实也不是那么难。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;第四，对中台的理解不在一个层面上&lt;/strong&gt;。L总看着小M负责的中台项目，半天嘣不出个屁来，于是自己琢磨起中台来了，L总是搞网络出身的，不懂研发，更不用说中台了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是宏观层面的理解是有的，经过研究后，L总给小M提出了中台建设的三个目标：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、让BOSS系统长在中台上&lt;/strong&gt;。公司的BOSS系统，十多年了，每年光是升级一点功能，都要几百万。中台要让BOSS系统接进来，以后BOSS的改造就用轻应用进行部署，每年只需要花几十万。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、用中台代替OA&lt;/strong&gt;。公司的OA系统不是很好用，要用这个中台来代替OA。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不得不佩服L总，“用中台代替OA”这个方案还是很有想象力的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、&lt;/strong&gt;&lt;strong&gt;用中台管理云、网络、业务系统&lt;/strong&gt;。这个中台要实现对公司云、网络、业务系统的统一运维。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;L总啊，人家可是个正经的中台，你把人家当什么了？（咦？这句话好像在哪里听过的样子）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;听到这里，小M已经崩溃了：这TM怎么搞啊。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6088888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhwCCIUY8bibBCSkQh5fm6U8rXBxHnmvLJflxyVfEG9hOTWJrYNqKsFsaDeib7KiaZplxaFx8ibtDe2IhA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;05&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在末尾的话&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时的小M感到很无力，&lt;/span&gt;&lt;span&gt;公司就他一个人在推动这个所谓的中台项目，业务方不搭理他、项目预算少得可怜、A厂和T厂也越来越不愿意配合、L总又一直责怪他项目推动不力......&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仿佛被套在一个死循环里，无从解脱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;俗话说，当局者迷，旁观者清。希望通过以上梳理，能让小M看清这个项目的全貌。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;混职场的核心能力是什么？就是做局与破局的能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;有些局哪怕输个精光，也要All in。有些局即使赢面很大，也要选择退出。究竟路要怎么走，只能自己选择了。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，祝福小M。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;作者简介&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;Mr.&lt;/span&gt;&lt;span&gt;K&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，知名电商公司技术老K级人物。文出过畅销书，&lt;span&gt;武做过CTO&lt;/span&gt;，若非生活所迫，谁愿一身才华。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt; -END- &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p yahei=&quot;yahei&quot; sans=&quot;sans&quot; px=&quot;px&quot; normal=&quot;normal&quot; ui=&quot;ui&quot; gb=&quot;gb&quot; sc=&quot;sc&quot; neue=&quot;neue&quot; important=&quot;important&quot; helvetica=&quot;helvetica&quot; break-word=&quot;break-word&quot; sans-serif=&quot;sans-serif&quot; arial=&quot;arial&quot; microsoft=&quot;microsoft&quot; hiragino=&quot;hiragino&quot; pingfang=&quot;pingfang&quot; center=&quot;center&quot;&gt;&lt;span&gt;这是公众号作者老K的私人微信&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;围观老K的朋友圈！席位珍贵，快来占坑&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/sqibwUCydDhzulVBFYfrZrhGoJyXbiaTKb98oJqVAGibhprOVrjuVSkoASNHQYu9DahrrM96gVGp0GxcYglD5yJtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;大家在看：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649711026&amp;amp;idx=1&amp;amp;sn=e49c1ecdcbd3dd54089d7bcc7ba8d4e8&amp;amp;chksm=886ae0a8bf1d69be984001bd3e9221d35a9506ad24f07d8eb65b9b9fa7d28d0184e42cb6f74e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;呼兰辞掉百万&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;呼兰辞掉百万年薪工作,去做脱口秀,有病吧？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710803&amp;amp;idx=1&amp;amp;sn=ed243eb16f7cb3607489b2e2f15ed13d&amp;amp;chksm=886ae1c9bf1d68df2c356a27a631dbbc6522fb6932135af6d98d91591a9d2cf3122b4b3d6be9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;35岁，总监，离职创业，赔了魔都一套房&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710250&amp;amp;idx=1&amp;amp;sn=3b2bc771325ea94e78d2a5b21a4a9e8c&amp;amp;chksm=886adfb0bf1d56a6f00a4daf904ceced855c456b7db69f1569d62b7b95a5623221f55c43e36f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;张一鸣：成功的反义词不是失败，而是平庸！&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649711005&amp;amp;idx=1&amp;amp;sn=fa7b21ab73ae119a6ee782fcfbbc384f&amp;amp;chksm=886ae087bf1d6991cde50210a496f66c9f8fb626286a2b71fa37410dd580d90de364ec6398e0&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;阿里彭蕾：向上管理的最高境界，不是跪舔&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzA5MjE3NDQ1Mw==&amp;amp;mid=2649710978&amp;amp;idx=1&amp;amp;sn=073da9859691d43a4073aa36d19463d9&amp;amp;chksm=886ae098bf1d698eb74a7b164bc6040dad63a54720bdd01958e60b6d98e3815c6c08cd5d368f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;中台为什么做不好？拆系统“烟囱”容易...&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f772e2afc9b2deb2ee88c48d93827b7d</guid>
<title>如何优雅的实现分布式锁</title>
<link>https://toutiao.io/k/veeydsj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;概述&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到分布式锁大家都会想到如下两种：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基于 &lt;code&gt;Redisson&lt;/code&gt;组件，使用redlock算法实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;基于 &lt;code&gt;Apache Curator&lt;/code&gt;，利用Zookeeper的临时顺序节点模型实现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天我们来说说第三种，使用 &lt;code&gt;Spring Integration&lt;/code&gt; 实现，也是我个人比较推荐的一种。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Spring Integration&lt;/code&gt;在基于Spring的应用程序中实现轻量级消息传递，并支持通过声明适配器与外部系统集成。Spring Integration的主要目标是提供一个简单的模型来构建企业集成解决方案，同时保持关注点的分离，这对于生成可维护，可测试的代码至关重要。我们熟知的
Spring Cloud Stream的底层就是Spring Integration。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;官方地址：https://github.com/spring-projects/spring-integration&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Integration提供的全局锁目前为如下存储提供了实现：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Gemfire&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JDBC&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Redis&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Zookeeper&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它们使用相同的API抽象，这意味着，不论使用哪种存储，你的编码体验是一样的。试想一下你目前是基于zookeeper实现的分布式锁，哪天你想换成redis的实现，我们只需要修改相关依赖和配置就可以了，无需修改代码。下面是你使用 &lt;code&gt;Spring Integration&lt;/code&gt; 实现分布式锁时需要关注的方法：&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;方法名&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock.&lt;/code&gt;   加锁，如果已经被其他线程锁住或者当前线程不能获取锁则阻塞&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lockInterruptibly()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock unless the current thread is interrupted.&lt;/code&gt; 加锁，除非当前线程被打断。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tryLock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock only if it is free at the time of invocation.&lt;/code&gt; 尝试加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tryLock(long time, TimeUnit unit)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted.&lt;/code&gt; 尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;Releases the lock.&lt;/code&gt; 解锁&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;实战&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;话不多说，我们看看使用 &lt;code&gt;Spring Integration&lt;/code&gt;  如何基于redis和zookeeper快速实现分布式锁，至于Gemfire 和 Jdbc的实现大家自行实践。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基于Redis实现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-integration&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.integration&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-integration-redis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在application.yml中添加redis的配置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;spring:&lt;/span&gt;&lt;br/&gt; &lt;span&gt;redis:&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;host:&lt;/span&gt; &lt;span&gt;172.31&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.149&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;port:&lt;/span&gt; &lt;span&gt;7111&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立配置类，注入 &lt;code&gt;RedisLockRegistry&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;RedisLockConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; RedisLockRegistry &lt;span&gt;redisLockRegistry&lt;/span&gt;&lt;span&gt;(RedisConnectionFactory redisConnectionFactory)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RedisLockRegistry(redisConnectionFactory, &lt;span&gt;&quot;redis-lock&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Log&lt;/span&gt;4j2&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DistributedLockController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; RedisLockRegistry redisLockRegistry;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/redis&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Lock lock = redisLockRegistry.obtain(&lt;span&gt;&quot;redis&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;//尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(lock.tryLock(&lt;span&gt;3&lt;/span&gt;, TimeUnit.SECONDS)){&lt;br/&gt;                log.info(&lt;span&gt;&quot;lock is ready&quot;&lt;/span&gt;);&lt;br/&gt;                TimeUnit.SECONDS.sleep(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            log.error(&lt;span&gt;&quot;obtain lock error&quot;&lt;/span&gt;,e);&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            lock.unlock();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;测试&lt;br/&gt;启动多个实例，分别访问 &lt;code&gt;/lock/redis&lt;/code&gt; 端点，一个正常秩序业务逻辑，另外一个实例访问出现如下错误&lt;img data-ratio=&quot;0.22916666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4h9kamAaicVpoFTfGUrfT9nrLfnZy7QibI42VeMClsGhOoTg2CEFreHSxeHyf8nYZs36H4c9ZBKVMicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1488&quot;/&gt;说明第二个实例没有拿到锁，证明了分布式锁的存在。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;p&gt;注意，如果使用新版Springboot进行集成时需要使用Redis4版本，否则会出现下面的异常告警，主要是 unlock() 释放锁时使用了UNLINK命令，这个需要Redis4版本才能支持。&lt;/p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;2020-05-14 11:30:24,781 WARN  RedisLockRegistry:339 - The UNLINK &lt;span&gt;command&lt;/span&gt; has failed (not supported on the Redis server?); falling back to the regular DELETE &lt;span&gt;command&lt;/span&gt;&lt;br/&gt;org.springframework.data.redis.RedisSystemException: Error &lt;span&gt;in&lt;/span&gt; execution; nested exception is io.lettuce.core.RedisCommandExecutionException: ERR unknown &lt;span&gt;command&lt;/span&gt; &lt;span&gt;&#x27;UNLINK&#x27;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;基于Zookeeper实现&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-integration&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.integration&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-integration-zookeeper&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;在application.yml中添加zookeeper的配置&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;zookeeper:&lt;/span&gt;  &lt;br/&gt;&lt;span&gt;    host:&lt;/span&gt; &lt;span&gt;172.31&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;.43&lt;/span&gt;&lt;span&gt;:2181&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;建立配置类，注入 &lt;code&gt;ZookeeperLockRegistry&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@Configuration&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ZookeeperLockConfiguration&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Value&lt;/span&gt;(&lt;span&gt;&quot;${zookeeper.host}&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String zkUrl;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CuratorFrameworkFactoryBean &lt;span&gt;curatorFrameworkFactoryBean&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; CuratorFrameworkFactoryBean(zkUrl);&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Bean&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; ZookeeperLockRegistry &lt;span&gt;zookeeperLockRegistry&lt;/span&gt;&lt;span&gt;(CuratorFramework curatorFramework)&lt;/span&gt;&lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ZookeeperLockRegistry(curatorFramework,&lt;span&gt;&quot;/zookeeper-lock&quot;&lt;/span&gt;);&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;@RestController&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@RequestMapping&lt;/span&gt;(&lt;span&gt;&quot;lock&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@Log&lt;/span&gt;4j2&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DistributedLockController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; ZookeeperLockRegistry zookeeperLockRegistry;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@GetMapping&lt;/span&gt;(&lt;span&gt;&quot;/zookeeper&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;test2&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Lock lock = zookeeperLockRegistry.obtain(&lt;span&gt;&quot;zookeeper&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;try&lt;/span&gt;{&lt;br/&gt;            &lt;span&gt;//尝试在指定时间内加锁，如果已经有其他锁锁住，获取当前线程不能加锁，则返回false，加锁失败；加锁成功则返回true&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt;(lock.tryLock(&lt;span&gt;3&lt;/span&gt;, TimeUnit.SECONDS)){&lt;br/&gt;                log.info(&lt;span&gt;&quot;lock is ready&quot;&lt;/span&gt;);&lt;br/&gt;                TimeUnit.SECONDS.sleep(&lt;span&gt;5&lt;/span&gt;);&lt;br/&gt;            }&lt;br/&gt;        } &lt;span&gt;catch&lt;/span&gt; (InterruptedException e) {&lt;br/&gt;            log.error(&lt;span&gt;&quot;obtain lock error&quot;&lt;/span&gt;,e);&lt;br/&gt;        } &lt;span&gt;finally&lt;/span&gt; {&lt;br/&gt;            lock.unlock();&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;测试&lt;br/&gt;启动多个实例，分别访问 &lt;code&gt;/lock/zookeeper&lt;/code&gt; 端点，一个正常执行业务逻辑，另外一个实例访问出现如下错误：&lt;img data-ratio=&quot;0.254272043745728&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/PxMzT0Oibf4h9kamAaicVpoFTfGUrfT9nrP70svZwaWl9dbMlaJ1VgDo059n3Q0fvfTJ0An3rRxYkL7CPNnKZReg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1463&quot;/&gt;说明第二个实例没有拿到锁，证明了分布式锁的存在。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>37710db61240f782f9cab1f608f3ed2d</guid>
<title>Gitlab CI 使用阿里云 kubernetes serverless</title>
<link>https://toutiao.io/k/q2ardl2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post-header&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;Gitlab CI 使用阿里云 kubernetes serverless&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;冯宇 Posted at — Nov 27, 2020
&lt;span class=&quot;meta&quot; id=&quot;busuanzi_container_page_pv&quot;&gt;阅读 &lt;span id=&quot;busuanzi_value_page_pv&quot;/&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown&quot;&gt;

&lt;p&gt;Gitlab 自带一个轻量级的 CI &lt;a href=&quot;https://docs.gitlab.com/ce/ci/&quot;&gt;gitlab-ci&lt;/a&gt;，轻便好用，奈何我们的服务器资源有限，配置不是很高，一直将 gitlab runner 和 gitlab 放在同一台服务器上，每次大规模运行 CI 的时候总是煎熬。经常会因为 CI 负载太高导致 gitlab 暂时不可访问，或者构建产生的容器太多占满了磁盘的空间，苦不堪言。&lt;/p&gt;
&lt;p&gt;而&lt;a href=&quot;https://help.aliyun.com/document_detail/86366.html&quot;&gt;阿里云 kubernetes serverless&lt;/a&gt;的诞生非常好的弥补了这个短板，它非常契合 CI 的这种需求。本文我们分享下我们在 gitlab ci 的实践，使用阿里云 kubernetes serverless 跑 CI 任务。&lt;/p&gt;
&lt;h2 id=&quot;gitlab-runner-配置&quot;&gt;gitlab runner 配置&lt;/h2&gt;
&lt;p&gt;我们是将&lt;a href=&quot;https://about.gitlab.com/install/&quot;&gt;gitlab-ce omnibus&lt;/a&gt; 安装包和&lt;a href=&quot;https://docs.gitlab.com/runner/install/index.html&quot;&gt;gitlab-runner&lt;/a&gt;安装到同一台阿里云 ECS 服务器上。运行 gitlab-runner 的注册命令，添加一个&lt;a href=&quot;https://docs.gitlab.com/runner/executors/kubernetes.html&quot;&gt;k8s&lt;/a&gt;的 executor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;# sudo gitlab-runner register&lt;/span&gt;
Runtime platform                                    &lt;span&gt;arch&lt;/span&gt;=amd64 &lt;span&gt;os&lt;/span&gt;=linux &lt;span&gt;pid&lt;/span&gt;=&lt;span&gt;2934&lt;/span&gt; &lt;span&gt;revision&lt;/span&gt;=8fa89735 &lt;span&gt;version&lt;/span&gt;=13.6.0
Running in system-mode.

Enter the GitLab instance URL (&lt;span&gt;for&lt;/span&gt; example, https://gitlab.com/):
https://mygitlab.domain.com   &lt;span&gt;# &amp;lt;===== 这里输入你的gitlab访问地址&lt;/span&gt;
Enter the registration token:
a1b2c3...  &lt;span&gt;# &amp;lt;===== 这里的token在gitlab admin页面runners配置页面下，复制出来即可&lt;/span&gt;
Enter a description &lt;span&gt;for&lt;/span&gt; the runner:
[gitlab]: k8s &lt;span&gt;# &amp;lt;==== 这里输入你想写的描述，默认gitlab&lt;/span&gt;
Enter tags &lt;span&gt;for&lt;/span&gt; the runner (comma-separated):
docker,k8s  &lt;span&gt;# &amp;lt;===== 这里输入tag，逗号分隔，用于匹配.gitlab-ci.yml中的tags选择&lt;/span&gt;
Registering runner... succeeded                     &lt;span&gt;runner&lt;/span&gt;=DRN6fxRz
Enter an executor: custom, docker, shell, ssh, virtualbox, kubernetes, docker-ssh, parallels, docker+machine, docker-ssh+machine:
kubernetes  &lt;span&gt;# &amp;lt;==== 这里我们要添加k8s serverless集群，当然是k8s&lt;/span&gt;
Runner registered successfully. Feel free to start it, but &lt;span&gt;if&lt;/span&gt; it&#x27;s running already the config should be automatically reloaded!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注册成功在 gitlab admin 页面应该就能看到新的 runner 已经添加了(刚添加进去是&lt;code&gt;locked&lt;/code&gt;状态，在右边的 edit 按钮打开设置页面，激活即可使用)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-1.png&quot; alt=&quot;gitlab admins runners页面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;/etc/gitlab-runner/config.toml&lt;/code&gt;文件，可以看到生成的模板类似于下面:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[[&lt;span&gt;runners&lt;/span&gt;]]
  &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&quot;gitlab-k8s&quot;&lt;/span&gt;
  &lt;span&gt;url&lt;/span&gt; = &lt;span&gt;&quot;https://mygitlab.domain.com&quot;&lt;/span&gt;
  &lt;span&gt;token&lt;/span&gt; = &lt;span&gt;&quot;your_token&quot;&lt;/span&gt;
  &lt;span&gt;executor&lt;/span&gt; = &lt;span&gt;&quot;kubernetes&quot;&lt;/span&gt;
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;custom_build_dir&lt;/span&gt;]
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;cache&lt;/span&gt;]
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;cache&lt;/span&gt;.&lt;span&gt;s3&lt;/span&gt;]
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;cache&lt;/span&gt;.&lt;span&gt;gcs&lt;/span&gt;]
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;cache&lt;/span&gt;.&lt;span&gt;azure&lt;/span&gt;]
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;]
    &lt;span&gt;host&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;bearer_token_overwrite_allowed&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;
    &lt;span&gt;image&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;namespace&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;namespace_overwrite_allowed&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;privileged&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;
    &lt;span&gt;service_account_overwrite_allowed&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;pod_annotations_overwrite_allowed&lt;/span&gt; = &lt;span&gt;&quot;&quot;&lt;/span&gt;
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;affinity&lt;/span&gt;]
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;pod_security_context&lt;/span&gt;]
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;volumes&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里基本的 gitlab runner 配置就完成了(后续一些优化配置见后文)&lt;/p&gt;
&lt;h2 id=&quot;开通与配置阿里云-kubernetes-serverless&quot;&gt;开通与配置阿里云 kubernetes serverless&lt;/h2&gt;
&lt;p&gt;开通阿里云 kubernetes serverless 是免费的，只收取 ECI 实例的费用。有关 ECI 实例的计费参考&lt;a href=&quot;https://help.aliyun.com/document_detail/89142.html&quot;&gt;计费概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在阿里云的控制台上找到 k8s serverless 的入口创建集群就行了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-2.png&quot; alt=&quot;阿里云kubernetes serverless创建集群&quot;/&gt;&lt;/p&gt;
&lt;p&gt;等待集群创建成功，转到&lt;code&gt;连接信息&lt;/code&gt;页面，复制下来 kubectl 的配置内容:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-3.png&quot; alt=&quot;kubectl配置内容&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在 gitlab-runner 服务器上&lt;a href=&quot;https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/&quot;&gt;安装 kubectl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;连接信息&lt;/code&gt;复制到&lt;code&gt;gitlab-runner&lt;/code&gt;用户的 kubectl 配置中(因为 gitlab-runner 服务使用&lt;code&gt;gitlab-runner&lt;/code&gt;这个用户运行，所以必须配置成这个用户的 kubectl 配置):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;# 切换成 gitlab-runner 用户，后续操作使用 gitlab-runner 身份&lt;/span&gt;
&lt;span&gt;# sudo sudo -iu gitlab-runner&lt;/span&gt;
$ mkdir -p ~/.kube
$ vim ~/.kube/config  &lt;span&gt;# &amp;lt;==== 将连接信息复制到这个文件中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查 k8s serverless 集群连接，正常的话大概像这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;$ kubectl version
Client Version: version.Info{Major:&lt;span&gt;&quot;1&quot;&lt;/span&gt;, Minor:&lt;span&gt;&quot;19&quot;&lt;/span&gt;, GitVersion:&lt;span&gt;&quot;v1.19.4&quot;&lt;/span&gt;, GitCommit:&lt;span&gt;&quot;d360454c9bcd1634cf4cc52d1867af5491dc9c5f&quot;&lt;/span&gt;, GitTreeState:&lt;span&gt;&quot;clean&quot;&lt;/span&gt;, BuildDate:&lt;span&gt;&quot;2020-11-11T13:17:17Z&quot;&lt;/span&gt;, GoVersion:&lt;span&gt;&quot;go1.15.2&quot;&lt;/span&gt;, Compiler:&lt;span&gt;&quot;gc&quot;&lt;/span&gt;, Platform:&lt;span&gt;&quot;linux/amd64&quot;&lt;/span&gt;}
Server Version: version.Info{Major:&lt;span&gt;&quot;1&quot;&lt;/span&gt;, Minor:&lt;span&gt;&quot;18+&quot;&lt;/span&gt;, GitVersion:&lt;span&gt;&quot;v1.18.8-aliyun.1&quot;&lt;/span&gt;, GitCommit:&lt;span&gt;&quot;cff3030&quot;&lt;/span&gt;, GitTreeState:&lt;span&gt;&quot;&quot;&lt;/span&gt;, BuildDate:&lt;span&gt;&quot;2020-11-19T07:19:32Z&quot;&lt;/span&gt;, GoVersion:&lt;span&gt;&quot;go1.13.15&quot;&lt;/span&gt;, Compiler:&lt;span&gt;&quot;gc&quot;&lt;/span&gt;, Platform:&lt;span&gt;&quot;linux/amd64&quot;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明配置已经 OK 了，此时跑个 CI 任务看看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意需要运行能跑在 docker 的 CI 任务，可以参考之前的文章&lt;a href=&quot;https://blog.dteam.top/posts/2019-11/gitlab_ci_migrate_to_docker.html&quot;&gt;耗时三天，我将 Gitlab CI 由 shell executor 平滑迁移 Docker 环境&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-4.png&quot; alt=&quot;gitlab ci终端输出&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-5.png&quot; alt=&quot;k8s serverless页面输出&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里基本的流程已经实现了。&lt;/p&gt;
&lt;h2 id=&quot;tips&quot;&gt;TIPS&lt;/h2&gt;
&lt;p&gt;为了节省构建时间以及一些费用，还需要一些优化，这里提供一些优化方案供参考&lt;/p&gt;
&lt;h3 id=&quot;使用-oss-存储构建缓存&quot;&gt;使用 OSS 存储构建缓存&lt;/h3&gt;
&lt;p&gt;目前 k8s serverless 集群支持 OSS 做 PVC，因此可以考虑将构建缓存放在 OSS 上加速构建过程。在控制台或者 yaml 文件中创建 OSS 的 PVC 即可，我这里的使用的配置如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;apiVersion&lt;/span&gt;: v1
&lt;span&gt;kind&lt;/span&gt;: PersistentVolume
&lt;span&gt;metadata&lt;/span&gt;:
  &lt;span&gt;labels&lt;/span&gt;:
    &lt;span&gt;alicloud-pvname&lt;/span&gt;: gitlab-cache-pv
  &lt;span&gt;name&lt;/span&gt;: gitlab-cache-pv
&lt;span&gt;spec&lt;/span&gt;:
  &lt;span&gt;accessModes&lt;/span&gt;:
    - ReadWriteMany
  &lt;span&gt;capacity&lt;/span&gt;:
    &lt;span&gt;storage&lt;/span&gt;: 50Gi
  &lt;span&gt;claimRef&lt;/span&gt;:
    &lt;span&gt;apiVersion&lt;/span&gt;: v1
    &lt;span&gt;kind&lt;/span&gt;: PersistentVolumeClaim
    &lt;span&gt;name&lt;/span&gt;: gitlab-cache-pvc
    &lt;span&gt;namespace&lt;/span&gt;: default
  &lt;span&gt;flexVolume&lt;/span&gt;:
    &lt;span&gt;driver&lt;/span&gt;: alicloud/oss
    &lt;span&gt;options&lt;/span&gt;:
      &lt;span&gt;akId&lt;/span&gt;: 你的AK_ID
      &lt;span&gt;akSecret&lt;/span&gt;: 你的AK_SECRET
      &lt;span&gt;bucket&lt;/span&gt;: 你的bucket
      &lt;span&gt;otherOpts&lt;/span&gt;: &lt;span&gt;&quot;-o max_stat_cache_size=0 -o allow_other&quot;&lt;/span&gt;
      &lt;span&gt;# 使用的域名参考OSS文档: https://help.aliyun.com/document_detail/31837.html,我的环境是VPC&lt;/span&gt;
      &lt;span&gt;url&lt;/span&gt;: vpc100-oss-cn-hangzhou.aliyuncs.com
  &lt;span&gt;persistentVolumeReclaimPolicy&lt;/span&gt;: Retain
  &lt;span&gt;storageClassName&lt;/span&gt;: oss

---
&lt;span&gt;apiVersion&lt;/span&gt;: v1
&lt;span&gt;kind&lt;/span&gt;: PersistentVolumeClaim
&lt;span&gt;metadata&lt;/span&gt;:
  &lt;span&gt;name&lt;/span&gt;: gitlab-cache-pvc
  &lt;span&gt;namespace&lt;/span&gt;: default
&lt;span&gt;spec&lt;/span&gt;:
  &lt;span&gt;accessModes&lt;/span&gt;:
    - ReadWriteMany
  &lt;span&gt;resources&lt;/span&gt;:
    &lt;span&gt;requests&lt;/span&gt;:
      &lt;span&gt;storage&lt;/span&gt;: 50Gi
  &lt;span&gt;selector&lt;/span&gt;:
    &lt;span&gt;matchLabels&lt;/span&gt;:
      &lt;span&gt;alicloud-pvname&lt;/span&gt;: gitlab-cache-pv
  &lt;span&gt;storageClassName&lt;/span&gt;: oss
  &lt;span&gt;volumeName&lt;/span&gt;: gitlab-cache-pv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;kubectl apply -f gitlab-cache.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接在阿里云控制台界面上创建是同样的效果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;imgs/gitlab-ci-use-aliyun-k8s-serverless-6.png&quot; alt=&quot;gitlab-cache-pv&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;/etc/gitlab-runner/config.toml&lt;/code&gt;中添加 PVC 的挂载:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[[&lt;span&gt;runners&lt;/span&gt;]]
  &lt;span&gt;# ...&lt;/span&gt;
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;]
    &lt;span&gt;# ...&lt;/span&gt;
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;volumes&lt;/span&gt;]
      [[&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;volumes&lt;/span&gt;.&lt;span&gt;pvc&lt;/span&gt;]]
        &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&quot;gitlab-cache-pvc&quot;&lt;/span&gt;
        &lt;span&gt;mount_path&lt;/span&gt; = &lt;span&gt;&quot;/cache&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样 &lt;a href=&quot;https://docs.gitlab.com/ce/ci/caching/&quot;&gt;gitlab ci cache&lt;/a&gt; 就可以存储在 OSS 上了，以后构建会快很多。&lt;/p&gt;
&lt;h3 id=&quot;使用阿里云的容器镜像&quot;&gt;使用阿里云的容器镜像&lt;/h3&gt;
&lt;p&gt;k8s serverless 集群使用阿里云的容器镜像，阿里云容器镜像如果没有镜像缓存会直接超时 500 错导致构建直接失败，因此有必要在本地就提前预热，建议将本地使用的 docker 镜像仓库配置为阿里云的&lt;code&gt;https://pqbap4ya.mirror.aliyuncs.com&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker 镜像仓库配置参考: &lt;a href=&quot;https://blog.dteam.top/mirrors.html#docker-hub&quot;&gt;国内开发资源镜像一览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以使用&lt;a href=&quot;https://help.aliyun.com/document_detail/141281.html&quot;&gt;镜像缓存&lt;/a&gt;加速 ECI 实例启动，不过会有额外的费用，请注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用-eci-抢占式实例节省费用&quot;&gt;使用 ECI 抢占式实例节省费用&lt;/h3&gt;
&lt;p&gt;由于 CI 对可用性没有那么高的要求，也不会持续运行太长时间，因此，使用&lt;a href=&quot;https://help.aliyun.com/document_detail/157759.html&quot;&gt;ECI 抢占式实例&lt;/a&gt;就足够了，可以进一步节省很多成本。&lt;/p&gt;
&lt;p&gt;在 gitlab-runner 中使用 ECI 抢占式实例的配置如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[[&lt;span&gt;runners&lt;/span&gt;]]
  &lt;span&gt;# ...&lt;/span&gt;
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;]
    &lt;span&gt;# ...&lt;/span&gt;
    [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;.&lt;span&gt;pod_annotations&lt;/span&gt;]
      &lt;span&gt;&quot;k8s.aliyun.com/eci-spot-strategy&quot;&lt;/span&gt; = &lt;span&gt;&quot;SpotAsPriceGo&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;更多 annotations 配置参考: &lt;a href=&quot;https://help.aliyun.com/document_detail/165053.html&quot;&gt;使用抢占式实例&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;限制构建环境使用的资源配置&quot;&gt;限制构建环境使用的资源配置&lt;/h3&gt;
&lt;p&gt;ECI 按照配置规格按量付费，因此可以限制资源使用来达到节省费用的目的。有两种方式可以限制使用的 ECI 规格：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明使用的资源(CPU, 内存等)，ECI 会自动适配一个最接近的实例&lt;/li&gt;
&lt;li&gt;使用 annotations 直接声明具体要用的实例规格&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这部分具体的详情规则参见官方文档: &lt;a href=&quot;https://help.aliyun.com/document_detail/114665.html&quot;&gt;实例概述&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我这边使用的是声明资源，由 ECI 自动适配实例规格的方案。gitlab-runner 配置中可以限定 helper，build，service 容器实例的规格，我的配置参考如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[[&lt;span&gt;runners&lt;/span&gt;]]
  &lt;span&gt;# ...&lt;/span&gt;
  [&lt;span&gt;runners&lt;/span&gt;.&lt;span&gt;kubernetes&lt;/span&gt;]
    &lt;span&gt;# ...&lt;/span&gt;
    &lt;span&gt;cpu_request&lt;/span&gt; = &lt;span&gt;&quot;2&quot;&lt;/span&gt;
    &lt;span&gt;memory_request&lt;/span&gt; = &lt;span&gt;&quot;6Gi&quot;&lt;/span&gt;
    &lt;span&gt;service_cpu_request&lt;/span&gt; = &lt;span&gt;&quot;1&quot;&lt;/span&gt;
    &lt;span&gt;service_memory_request&lt;/span&gt; = &lt;span&gt;&quot;1Gi&quot;&lt;/span&gt;
    &lt;span&gt;helper_cpu_request&lt;/span&gt; = &lt;span&gt;&quot;250m&quot;&lt;/span&gt;
    &lt;span&gt;helper_memory_request&lt;/span&gt; = &lt;span&gt;&quot;512Mi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;限定 build 容器使用 2 核 6G，service 容器使用 1 核 1G，helper 容器使用 1/4 核 512M，最终 ECI 自动适配了一个 4 核 8G 的实例（见上图）&lt;/p&gt;
&lt;p&gt;也可以通过 annotations 的方式直接指明要用的实例，参考&lt;a href=&quot;https://help.aliyun.com/document_detail/114664.html&quot;&gt;指定 ECS 规格创建 ECI&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;k8s-中-service-网络组建的问题&quot;&gt;k8s 中 service 网络组建的问题&lt;/h3&gt;
&lt;p&gt;在 docker executor 中，service 是通过 docker container link 的方式组建网络的(参考 gitlab ci 官方文档: &lt;a href=&quot;https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#how-services-are-linked-to-the-job&quot;&gt;How services are linked to the job&lt;/a&gt;)，直观的表现就是&lt;strong&gt;要通过 container_name 作为域名访问到 service&lt;/strong&gt;。但是在 k8s 网络中，service 网络组建是直接通过&lt;code&gt;host&lt;/code&gt;的方式连接容器网络的，直观的表现就是&lt;strong&gt;可以通过&lt;code&gt;127.0.0.1&lt;/code&gt;直接访问到 service&lt;/strong&gt;，为了同时适配这两种可能的场景，需要在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;的配置中作下简单的适配，参考配置（主要参考来自于官方 issue: &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2229&quot;&gt;#2229&lt;/a&gt;）:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;test&lt;/span&gt;:
  &lt;span&gt;stage&lt;/span&gt;: test
  &lt;span&gt;image&lt;/span&gt;: adoptopenjdk/openjdk8-openj9:alpine-slim
  &lt;span&gt;services&lt;/span&gt;:
    - &lt;span&gt;name&lt;/span&gt;: postgres:&lt;span&gt;10&lt;/span&gt;-alpine
      &lt;span&gt;alias&lt;/span&gt;: db
  &lt;span&gt;variables&lt;/span&gt;:
    &lt;span&gt;POSTGRES_DB&lt;/span&gt;: mydb_test
    &lt;span&gt;POSTGRES_USER&lt;/span&gt;: my_user
    &lt;span&gt;POSTGRES_PASSWORD&lt;/span&gt;: my_pass
  &lt;span&gt;script&lt;/span&gt;:
    - DB_HOST=&lt;span&gt;&quot;${CI_SERVICE_HOST:-db}&quot;&lt;/span&gt;
    &lt;span&gt;# 你的测试需要支持从环境变量获取数据库连接方式&lt;/span&gt;
    - export dataSource_url=&lt;span&gt;&quot;jdbc:postgresql://${DB_HOST}:5432/${POSTGRES_DB}?useUnicode=true&amp;amp;characterEncoding=utf8&quot;&lt;/span&gt;
    - ./gradlew -Dorg.gradle.daemon=&lt;span&gt;false&lt;/span&gt; -Dfile.encoding=UTF&lt;span&gt;-8&lt;/span&gt; check
  &lt;span&gt;artifacts&lt;/span&gt;:
    &lt;span&gt;expose_as&lt;/span&gt;: &lt;span&gt;&quot;test reports&quot;&lt;/span&gt;
    &lt;span&gt;paths&lt;/span&gt;:
      - build/reports/tests/
    &lt;span&gt;reports&lt;/span&gt;:
      &lt;span&gt;junit&lt;/span&gt;: &lt;span&gt;&quot;build/test-results/**/*.xml&quot;&lt;/span&gt;
    &lt;span&gt;expire_in&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt; day
    &lt;span&gt;when&lt;/span&gt;: always
  &lt;span&gt;dependencies&lt;/span&gt;: []
  &lt;span&gt;rules&lt;/span&gt;:
    - &lt;span&gt;if&lt;/span&gt;: $CI_COMMIT_BRANCH
  &lt;span&gt;tags&lt;/span&gt;:
    - docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们通过额外注入一个&lt;code&gt;CI_SERVICE_HOST&lt;/code&gt;环境变量控制 service 的实际连接地址，然后我们在 gitlab-runner 的配置中注入这个环境变量:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[[&lt;span&gt;runners&lt;/span&gt;]]
  &lt;span&gt;name&lt;/span&gt; = &lt;span&gt;&quot;k8s&quot;&lt;/span&gt;
  &lt;span&gt;executor&lt;/span&gt; = &lt;span&gt;&quot;kubernetes&quot;&lt;/span&gt;
  &lt;span&gt;# ...&lt;/span&gt;
  &lt;span&gt;environment&lt;/span&gt; = [&lt;span&gt;&quot;CI_SERVICE_HOST=127.0.0.1&quot;&lt;/span&gt;]
  &lt;span&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样无论 CI 是运行在 docker executor 还是 k8s executor 都可以正常通过测试了。&lt;/p&gt;
&lt;h3 id=&quot;pod-访问外网环境&quot;&gt;pod 访问外网环境&lt;/h3&gt;
&lt;p&gt;构建过程中可能需要从外网下载依赖，由于 pod 直接使用 VPC 网络环境，在不想额外增加成本的情况下，可以参考这篇文章使用外网 ECS 解决网络访问: &lt;a href=&quot;https://blog.dteam.top/posts/2018-08/%E9%98%BF%E9%87%8C%E4%BA%91vpc%E7%8E%AF%E5%A2%83%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91.html&quot;&gt;阿里云 VPC 环境内网服务器如何访问外网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文我们详细总结了使用阿里云 k8s serverless 服务对接 gitlab ci 的方案，以及我们的一些实践。&lt;/p&gt;


&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1342f9dfb97d03937c0ea67ba17b4a18</guid>
<title>M1 暴打 Intel？：这次的芯片有何不同</title>
<link>https://toutiao.io/k/j1ohqm1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;h2&gt;&lt;img data-backh=&quot;237&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.4255555555555556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBEZGpu0eKX99x0FwZv4P8gQdU66u6vrZXPL82gacaxaL3ArQPNaBJJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/h2&gt;&lt;h2&gt;1. 前言&lt;/h2&gt;&lt;p&gt;之前看到 M1 芯片出来之后，就想说些什么，结果光写 x86 和 ARM 就写了 4000 多字，考虑到文章篇幅，只得分为上下两篇，上一篇文章发出后有很多人表示非常喜欢，让我赶紧更新，在这里向支持我的读者们表示感谢 🙏。&lt;/p&gt;&lt;p&gt;那么话不多说，这篇我们来聊一聊，这次的芯片到底有何不同，以至于让那么多人说苹果不讲武德。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在这之前我先说明，我只是一个计算机专业的学生，从来就没有自诩自己是什么专家学者，我写博客也只是为了做一些简单的科普，把自己知道的一些知识分享给大家。如果文章中有什么错误的地方，还请各位读者指正。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;2. M1 芯片 ≠ CPU&lt;/h2&gt;&lt;p&gt;&lt;img data-backh=&quot;203&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6428571428571429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBLQRfb1f9iaibM59arQ0tFczffSbQHn3Iiah1R0VRfpDbib2L4bZTWicKTTw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;980&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;首先，我们要先摆脱一个认知误区，M1 芯片&lt;strong&gt;不是一块 CPU&lt;/strong&gt;，而是一块专为 Mac 设计的 SoC 芯片。&lt;strong&gt;CPU 只是 M1 芯片的一个组成部分&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;所谓 SoC 芯片，指的是系统级芯片（System on Chip），也称片上芯片，是一个将电脑或其他电子系统集成到单一芯片的&lt;strong&gt;集成电路&lt;/strong&gt;。SoC 集成的主要包括处理器(CPU，GPU 等)、基带、各种接口控制模块、各种互联总线等，其典型代表为手机芯片。举个例子，CPU 公司将自己的所生产的 CPU 设计卖给其他公司，而其他公司就根据该 CPU 自己添加上所需要的各种外设控制器，这就是 SoC。&lt;/p&gt;&lt;p&gt;所以简单来说：SoC 就是一块集成了 CPU、GPU 等多种结构的芯片。因此，千万不要简单的认为 M1 芯片就是 CPU。&lt;/p&gt;&lt;p&gt;官网有一张图，就很好地说明了 M1 芯片的组成成分。如下图所示，苹果称其为&lt;strong&gt;统一内存架构（Unified memory architechture）&lt;/strong&gt;，即通过 Fabric 高速总线将中央处理器、图形处理器、神经网络引擎、缓存、DRAM 内存全部连接在一起。因此，M1 芯片的强大，绝不是靠一个强悍的 CPU 支撑的，而是众多性能强大的部件结合苹果优秀的设计共同努力的成果。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;180&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.5718518518518518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBmgIUXkMMz4zY78OjU2j9lEvyWiaCPTyHlS4AabxtCibRedOutpVlcgZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1350&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;h2&gt;3. 统一内存架构（UMA）&lt;/h2&gt;&lt;p&gt;通过上一段内容，我们知道了 M1 芯片的强大光靠一颗强大的 CPU 是不够的，毕竟苹果也没办法突破物理定律，单纯通过设计让 CPU 的性能提升数倍。很明显苹果采用了其他的技巧来弯道超车，而&lt;strong&gt;「统一内存架构」&lt;/strong&gt;就是其中之一。&lt;/p&gt;&lt;p&gt;我们知道，处理器在处理任务时，他要做的事情很简单就是&lt;strong&gt;取东西和算东西&lt;/strong&gt;，也就是上一篇文章中提到的“接收指令+运算数据”。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;123&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.3897058823529412&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBqLb475xTcqDfj6eJPpEicfE8XkibenZu3cmkeaPPq9dM70z3xx3HRceg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1496&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;和上篇文章一样，我们还是以打工人为例，取东西就是打工人搬砖，算东西就是打工人砌砖，你砌砖砌得再快再好，砖搬的慢，砌砖的速度也不会快。反过来也是，如果砌砖的慢，搬砖的块，就会有砖堆积。&lt;/p&gt;&lt;p&gt;因此&lt;strong&gt;理想状态&lt;/strong&gt;下，搬砖的速度和砌砖的速度应该是一致的，这样就不用等对方。对于 CPU 来说也是同样的道理，如果双方的速度不一致，就会造成性能浪费。&lt;/p&gt;&lt;p&gt;因此，为了解决上述问题，苹果提供了一个解决方案，就是&lt;strong&gt;统一内存架构&lt;/strong&gt;。&lt;/p&gt;&lt;h3&gt;3.1 UMA 做了什么？&lt;/h3&gt;&lt;p&gt;那么 UMA 到底做了什么？&lt;/p&gt;&lt;p&gt;我们电脑里面有很多 PU（Processing Unit），即处理单元（处理器），我们常见的有 CPU（Central Processing Unit，即中央处理器）、GPU（Graphics Processing Unit，即图形处理器）和 NPU（Neural network Processing Unit，神经网络处理器）。他们都需要取东西、算东西，但是在 UMA 出现之前，他们只能通过 CPU 来分配东西，而 CPU 还要事先从内存中取数据。显然，这种工作方式的效率很低，况且，不同的处理器对于数据的运算速度也是不同的，为了做到时序同步，一定程度上不利于硬件性能的发挥。&lt;/p&gt;&lt;p&gt;而且，每个处理单元作为一个独立的个体，各自处理的数据包格式也不一样。不同 PU 之间通信的语言都是不一样的，统一数据格式时也需要消耗时间，如果这样通信效率还高那才有问题。就像来自不同国家的打工人一起打工时，都说各自的语言，通过翻译才能进行沟通，这听起来效率就很低。&lt;/p&gt;&lt;p&gt;当然了，以上只是简单的举一些例子，真实情况肯定是比这更加复杂的，但即使是这样，我们也能感受到有很多本来不应该存在的步骤耽误了很多时间。所以，为了解决上述这些问题，苹果给出了几个解决方案。&lt;/p&gt;&lt;h3&gt;3.1.1 PU 直接访问内存&lt;/h3&gt;&lt;p&gt;没有 UMA 之前，需要先将数据从内存中取出，然后由 CPU 优先处理、分配，如下图所示 👇&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;221&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.7014388489208633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBpf0kHBc9cl2pPHiadNib3d7vKfXF4eict89ibAicTTSgh7fWGWibI744JcHw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1390&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;有了 UMA 之后，这些处理单元可以直接访问内存，再也不需要通过 CPU 去获取一些数据了，如下图所示 👇&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;239&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.7582025677603423&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBlESgUPiaYBtuG9hFrkuyyTfft2sibWCyTapBkMibickMMtepYXSAdKGOlA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1402&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;通过这样的设计方式，这个 PU 们不需要再和 CPU 同步语速，也不用什么乱七八糟的事情都先去找 CPU 过问一遍，这样就省下来一大笔时间了。&lt;/p&gt;&lt;h3&gt;3.1.2 Apple-designed package&lt;/h3&gt;&lt;p&gt;虽然解决了取数据时的时序问题，但是各处理单元的通信问题仍然没有得到解决，这里就要提到苹果所做的另一个解决方案了——Apple-designed package。&lt;/p&gt;&lt;p&gt;通过 Apple-designed package，各单元处理数据时的数据包格式统一了，他们之间的沟通不再需要翻译了，哪怕都说的是“阿巴阿巴阿巴”也都能明白各自说的是什么了，这就又省下了一部分时间。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;200&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.6360424028268551&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclB8e8kNM7SBqhZtP42UICXaVfTLCqibIm77KzXkv19tpWkiazwV3INHccw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1698&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;h3&gt;3.1.3 高度集成&lt;/h3&gt;&lt;p&gt;无论是拆解图还是实例图，都说明苹果这次的高度集成，是直接将内存放到了处理器的旁边，这极大的缩小了内存和处理器之间的物理距离，取数据的速度自然就会更快了。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;201&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.637155297532656&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBgBRN4GQOMVACoUduBJo1r8tibok7ibAUcscjDgxeFAOEicrNibXdP7hETQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1378&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;千万别小看了这点物理距离的减少，目前的计算机都属于&lt;strong&gt;冯诺依曼结构&lt;/strong&gt;，而该结构最大的一个隐患就是：在内存容量指数级提升以后，CPU 和内存之间的数据传输带宽成为了瓶颈，原因之一就在于内存和 CPU 的物理距离过大。虽然现在 CPU 和内存的速度越做越快，但是他们之间的距离却无法改变，而传输数据的速率-光速也无法改变。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;139&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.44100719424460433&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBPrMaAzb7QEBtGGaXLUfmf4ZgABRLiacMNmCCN9aY6VTKsicwqiaAlSCzg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1390&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们可以来做一个简单的数学题，i9-7980XE 是一颗 18 核 36 线程的民用 CPU，这颗 CPU 最大睿频 4.4GHz，假设该 CPU 在一个时钟周期内执行一条运算指令，那么该 CPU 执行一个指令需要的时间是 0.000000000227273 秒，即 0.22ns（纳秒），那么在这段时间内，光所跑的距离是 0.0681819 米，四舍五入就约等于 7 厘米。所以说如果 CPU 和内存之间的距离超过 7 厘米，CPU 岂不是要多等一会才能继续收到指令了。这还是一次只取一条指令的情况，如果数量多了呢？&lt;/p&gt;&lt;p&gt;所以物理距离的缩小，自然可以让 CPU 取数据的速度更快一些，这也是 M1 芯片性能提升的关键一点。&lt;/p&gt;&lt;h3&gt;3.2 超大缓存&lt;/h3&gt;&lt;p&gt;上面说的这些也都只是让 CPU 取数据时可以更快一些，但是 CPU 和内存之间的数据传输带宽成为瓶颈不单单是因为物理距离的原因，最根本的原因还是因为 CPU 太快了，&lt;strong&gt;很难做到和内存同步&lt;/strong&gt;。所以我们得把计算机经常用到的数据导入 cache，也就是&lt;strong&gt;缓存&lt;/strong&gt;，避免计算机去内存要东西，更不应该让计算机去硬盘要东西。&lt;/p&gt;&lt;h3&gt;3.2.1 什么是缓存&lt;/h3&gt;&lt;p&gt;缓存就是数据交换的缓冲区（称作 Cache），是存贮数据（使用频繁的数据）的临时地方。其实在很多地方都用到了缓存，比如当用户查询数据，首先在缓存中寻找，如果找到了则直接执行。如果找不到，则去数据库中查找。&lt;/p&gt;&lt;p&gt;CPU 也同样设计了一个这样的存在，是一个用于减少处理器访问内存所需平均时间的部件。他的工作原理是：当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6400966183574879&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBupkjqFYAg1ArqC2hgBHqmOJ1Zbickr6PlUpJAlKIicYt8e4kEZlSXhtQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;还是拿搬砖这个例子来加深理解，如果我正在砌砖，就算搬砖的人把砖搬过来了，我也来不及砌，光让他在那站着等也不好，所以就让他把砖放到脚边（缓存），这个砌砖的每次就不用跑去搬砖的那里拿砖了，只需要从脚边（缓存）拿砖就好了。&lt;/p&gt;&lt;p&gt;所以，我们知道缓存主要是为了&lt;strong&gt;弥补 CPU 和内存之间的读写速度差异&lt;/strong&gt;而出现的，因此理论上，在一定范围内，缓存自然是越大越好。&lt;/p&gt;&lt;h3&gt;3.2.2 M1 芯片的缓存设计&lt;/h3&gt;&lt;p&gt;M1 芯片同样也是这么设计的，只是苹果为 M1 芯片带了&lt;strong&gt;超大&lt;/strong&gt;的缓存，这个缓存有多大呢，我们来做个简单的比较。（以下数据摘自维基百科和 CPU - Z）&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;81&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.2571785268414482&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBHWjIt8prE43wE0hN3mPgWr5nwiaqtyaUPVvjEUFYqaab69H73bDRtrw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1602&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;L1 表示一级缓存，L2 表示二级缓存，即一级缓存的缓存。一级缓存还分为一级数据缓存（Data Cache，D-Cache，L1d）和一级指令缓存(Instruction Cache，I-Cache，L1i)，分别用于存放数据及执行数据的指令解码，两者可同时被 CPU 访问，减少了 CPU 多核心、多线程争用缓存造成的冲突，提高了处理器的效能。一般 CPU 的 L1i 和 L1d 具备相同的容量。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-backh=&quot;126&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.3990740740740741&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBgYnpj0ghFK7RYz6IlWSibjycRrGWgUuSeAegLOISkZqricSrezoSIusA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;这个对比结果非常明显，尤其是在二级缓存，虽然在 M1 芯片中，二级缓存是共享的，但这 16MB 的缓存还是比 i9-10900K 的二级缓存大了不少。虽然 i9-10900K 的三级缓存有 20MB，但是也只是比 M1 的二级缓存大了 4MB，并且三级缓存的速度是比二级缓存慢得多的。&lt;/p&gt;&lt;p&gt;而且，可别忘了，基于苹果这次的高度集成，DRAM 内存和处理器直接通过 Fabric 高速总线连接在一起，这样使得集成的内存可以&lt;strong&gt;近似看做&lt;/strong&gt;是一个&lt;strong&gt;超大容量的 L3 缓存&lt;/strong&gt;，苹果用牺牲扩展性换取吞吐量的策略，给 M1 芯片带来了更高的带宽与更低的延迟。当然了，缓存也并不是越大越好，一方面是制作的难度，另一方面&lt;strong&gt;缓存命中率&lt;/strong&gt;也是评价缓存性能的一个重要指标。如果缓存过大，命中率就会下降，如果这样就会有些得不偿失了。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;126&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.4&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBnic4NjDLgvsJYribAD0ta7GW8qLBw1PicKyP43gVxC4yrUjKTVJodYMQA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1480&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;其实 M1 芯片之所以可以塞入这么大的缓存，和其制作工艺是有很大的关系的，相较于 10nm、14nm，M1 芯片采用台积电最先进的 5nm 工艺制成，晶体管越小，单位面积内可塞入晶体管的数量就更多，这样就让苹果可以为 M1 芯片设计更大的缓存。这一部分具体我们下一节来说。&lt;/p&gt;&lt;p&gt;现在再回过头看我们一开始所说的：“所谓统一内存架构，就是通过 Fabric 高速总线将中央处理器、图形处理器、神经网络引擎、缓存、DRAM 内存全部连接在一起。”这不仅仅是简单的将各单元连接在一起，而是苹果这么多年在移动端 SoC 优秀实践经验的结晶，是只属于苹果自己独享的 moment。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4448633364750236&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBKsLjKukCZRVEBWWGBGymdkejE1lBtCmMgicBRiby43QCu5RKZDL46ABg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1061&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以说，这么一套搞下来，哪怕 M1 芯片的 CPU 芯片的物理性能没有得到提升，性能也不是最强大的，但 UMA 的设计架构也会给 M1 芯片带来综合性能的提升。&lt;/p&gt;&lt;p&gt;况且，谁说 M1 芯片的 CPU 就不行了呢？&lt;/p&gt;&lt;h2&gt;4. 制程&amp;amp;晶体管数量&lt;/h2&gt;&lt;p&gt;Apple 官网对于 M1 芯片有如下的介绍：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;M1 也是 Apple 首款采用先进 &lt;strong&gt;5 纳米&lt;/strong&gt;制程打造的个人电脑芯片，封装了惊人的 &lt;strong&gt;160 亿&lt;/strong&gt;个晶体管，其数量为 Apple 所有芯片之最。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这里我将两个重要的数字加粗标注了出来，第一个数字是刚才提到的 5 纳米制程，第二个数字是 160 亿个晶体管。&lt;/p&gt;&lt;h3&gt;4.1 5 纳米制程指的是什么？&lt;/h3&gt;&lt;p&gt;当我们阅读一个和芯片有关的文章时，经常会看到诸如 5nm、7nm、14nm 这些词，例如华为的“最后一款”麒麟芯片，麒麟 9000 就是 5nm 工艺制程，那么这个 5nm 指的到底是什么呢？&lt;/p&gt;&lt;p&gt;说实话，这一块内容水太深了，我自己也不是从事半导体领域的，很难解释清楚，这里就只能简单的说明一下。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;147&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.46570972886762363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBiayEArCdibqib5U4hiatiaQP72wZDibcMCoibAW62eEnTelI0VKiclFXuicwRBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;627&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;引用知乎的一张图，在上图所示的晶体管结构中，电流从 Source（源极）流入 Drain（漏级），Gate（栅极）相当于闸门，主要负责控制两端源极和漏级的通断。电流会损耗，而栅极的宽度则决定了电流通过时的损耗，表现出来就是手机常见的发热和功耗。宽度越窄，功耗越低。而栅极的最小宽度（栅长），就是 XX nm 工艺中的数值。&lt;/p&gt;&lt;p&gt;简单来说就是，Leakage Path 越小，电流损耗越小，总体来看就是功耗越小。宏观来看，随着 Leakage Path 越小，晶体管之间的距离就越小，单位面积内可以塞入的晶体管数量就越多，整体的运算性能就越强。&lt;/p&gt;&lt;p&gt;最近，AMD 疯狂 yes 的原因和其工艺制程的提升有很大关系，而此次 M1 芯片所采用的是目前市面上最先进的 5nm 工艺制程，性能强也是意料之中的事情了。&lt;/p&gt;&lt;h3&gt;4.2 为什么晶体管数量越多，运算性能越强？&lt;/h3&gt;&lt;p&gt;晶体管就可以看成一个小开关，有通断两种状态。你可以理解为通是 1，断是 0，那么一个晶体管的一次开，或者一次关，就提供一个 2 位的数据：0 或者 1。用无数个 0 或者 1 就可以代表所有的数据。这也就是为什么电子时代信息被称为数字化。其实就是把所有的信息用数字来表示。而数字，可以用电脑来处理。电脑是没法直接处理人类的信息的。这就是计算机采用二进制表示数据的的原因。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;所以我们要理解，是因为电路的这个特性才让先辈们选择二进制作为机器的语言，而不是因为二进制简单所以采用二进制的。这里提两个小问题：人为什么要使用十进制？生活中有没有使用其他进制计数的例子？欢迎在评论区留下你的想法。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img data-backh=&quot;122&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.3875476493011436&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBUKbP4yCAIeq7FmVcCrOY9yClbayLYOdXW83zS1Y7QdLgr1PbBkpEWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1574&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;一个晶体管一次只能表示一个 0，或者 1。那么一大堆晶体管同时工作呢？&lt;/p&gt;&lt;p&gt;简单的说就像是一个大的存放开关的工厂，每个晶体管就是一个开关，关的时候表示 0，开的时候表示 1，晶体管越多，开关也越多，在处理同一个问题的时候走的线路也就越多。这就像是你以前学初中物理时的并联电路，支路越多流通的线路也越多。同样，CPU 的晶体管越多，单位时间内可以流过的电流的支路也就越多，反映在宏观上就是你在一颗 CPU 上能同时处理的数据也就越多，机器也就越快。&lt;/p&gt;&lt;p&gt;不过晶体管越多芯片性能越好这一点并不是绝对的，只是相对来说，晶体管多了之后，可设计的空间就更大了，剩下的就要看厂商能否利用好这部分设计空间了。&lt;/p&gt;&lt;h2&gt;5. M1 真的完美吗？&lt;/h2&gt;&lt;p&gt;那么问题来了？说了这么多 M1 芯片的优点，又是采用了 UMA 架构，又是最先进的工艺制程，他是一个完美的芯片吗？我想未必。&lt;/p&gt;&lt;h3&gt;5.1 扩展性&lt;/h3&gt;&lt;p&gt;相比上面的介绍让你对 M1 芯片的统一内存架构有了一定了解，也知道这样的架构对于性能的提升有很大的帮助。&lt;/p&gt;&lt;p&gt;只是将内存这样焊死在一块 SoC 芯片上，对于后期想要硬件扩展的用户来说，无疑是不可能的。&lt;/p&gt;&lt;p&gt;而且虽然 M1 的 GPU 的性能很强，但也是相对手机上的 GPU 来说的，和桌面级的 GPU 相比还是有很大的差距的，毕竟体积摆在那了，这对外接显示器或者玩游戏的用户来说也是很难熬的。同样的，外接显卡也是用不了的，不过应该也不会有人用 Mac 玩游戏吧。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Mac 当然可以玩游戏，这里挖个坑，下次我们来窥探一下未来——云游戏。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;5.2 兼容性&lt;/h3&gt;&lt;p&gt;从 x86 架构迁移到 ARM 架构，苹果是下了很大决心的，也是布局已久了。为了不让用户担心应用生态会出现较大的变化，苹果给出了三种不同应用的解决方案，分别是&lt;strong&gt;「Universal 通用应用」&lt;/strong&gt;、&lt;strong&gt;「Rosetta 2 转译应用」&lt;/strong&gt;以及&lt;strong&gt;「原生 ARM 应用」&lt;/strong&gt;。其中，Universal 是横跨 ARM 和 X86 平台的应用，目前以后部分开发者将自家软件转向 Universal，例如 Adobe 的 Lightroom，Photoshop 则会在明年更新。这里不得不感慨一下苹果的号召力，apple silicon 一出，各大厂商都在快速跟进，估计隔壁某厂要羡慕哭了。&lt;/p&gt;&lt;p&gt;如果新应用没有适配 Universal，那你也可以通过 Rosetta 2 转译应用，那些原生的 X86 编译应用可以通过苹果提供的 Rosetta 工具，转译成可以在 ARM 平台直接运行的应用，虽然会损失一些性能，但是可以极大提升兼容性。目前从各种兼容性测试视频来看，Rosetta 2 的完成度非常高，并不像隔壁某厂，推出的是一个半成品。&lt;/p&gt;&lt;p&gt;如果说，上面两种解决方案还是无法满足你的需求，那么你还可以依托苹果建成依旧的 App Store 生态，直接运行原生 ARM 应用，它们能够直接在 macOS、iOS 和 iPadOS 上运行，相当于苹果打通了小屏到大屏的主要设备。&lt;/p&gt;&lt;p&gt;即便曾经 macOS 的软件生态还不完善，但在 iOS 几乎已经没有了这个问题，也使得搭载 M1 芯片的 Mac 产品并不需要太过担心没有足够的应用可以使用。&lt;/p&gt;&lt;p&gt;而且，从此次更新的 macOS Big Sur 也可以看出，苹果也是有意让这三端的风格更加统一。无论是系统界面还是图标样式，都在往 iPad 和 iPhone 上统一。&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;165&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.5231481481481481&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclBNEBvaKKw3knxZB0NicJyQzLZXz9AA6LV786xZVwJehicyBFG0dDuR2Qg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;那么为什么同样的软件在迁移的时候会有兼容性的问题？这已经和本文要介绍的 M1 没什么关系了，考虑到篇幅问题，我们之后再说。&lt;/p&gt;&lt;p&gt;那么到底 M1 版 MacBook 能兼容什么软件、不能兼容什么软件？&lt;/p&gt;&lt;p&gt;一个个软件测试，工程量非常大，而且软件们也处于不停的更新换代中。好在 GitHub 上出现了一个关于 M1 版 MacBook 的兼容性测试项目“DoseitARM”。在这个项目中，可以看到开发工具、影音工具、图形图像工具、剪辑工具等各种生产力软件的兼容性测试。各类软件的兼容性又被分为几种不同的情况，分别如下：&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;96&quot; data-backw=&quot;315&quot; data-ratio=&quot;0.30594405594405594&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/1skeHK2Gybw9AhCUoE0unO7KNn5xmclB97WOAUwSfqYQmsuVLRvI5OL236icOqjVruS7Yn2u5RVibFhgG95ZTChg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1144&quot; title=&quot;null&quot;/&gt;&lt;/p&gt;&lt;p&gt;他的地址是 👉：https://github.com/ThatGuySam/doesitarm&lt;/p&gt;&lt;p&gt;有兴趣的读者可以长期关注该项目。&lt;/p&gt;&lt;h2&gt;6. 最后&lt;/h2&gt;&lt;p&gt;对于财大气粗的苹果来说，未来无疑将会长期进行大量的投入来对 M 系列芯片进行迭代，并且其自有生态也保证了能够反哺 M 系列芯片的研发。希望国内的企业也可以像苹果一样有属于自己的芯片，未来值得期待！&lt;/p&gt;&lt;p&gt;如果你觉得我的文章对你有所帮助，不妨点个赞关注我，就当是给我的一点鼓励了，你们的鼓励会让我更加努力做好分享，感谢支持 🙏。&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;下图是我新建的读者群，有兴趣的读者可以扫码加群一起交流，一起进步～&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;1.2427536231884058&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1skeHK2Gybw9AhCUoE0unO7KNn5xmclB7ic6ibDicEf63WmV7gQBKq7fiaSg2Jwl8qtZiayJpNyPUTXic6IajXWic1XKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>