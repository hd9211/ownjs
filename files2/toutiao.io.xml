<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>22a32d4633c46713450d40934cd70afb</guid>
<title>如何成为快乐高产的程序员</title>
<link>https://toutiao.io/k/pfv4tyx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;card-body markdown markdown-toc&quot;&gt;
        
        &lt;blockquote&gt;
&lt;p&gt;阅读提示：本文篇幅较长，接近 1 万字，且有大量的链接，为了保证思维的连贯性，建议先通读一遍，再读链接的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;身为 IT 中人，我和我身边的朋友们有以下这些痛点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;书上说的那些好习惯：早起、冥想、瑜伽、读书，总是坚持不下来。&lt;/li&gt;
&lt;li&gt;每天总会有乱七八糟的事情打乱规划，而这些乱入的工作由于涉及上层的诉求，优先级都挺高，更可怕的是，自己也逐渐习惯或适应了这种工作习惯。&lt;/li&gt;
&lt;li&gt;工作中越来越发现欠缺的知识太多，所以潜意识里面压力很大。&lt;/li&gt;
&lt;li&gt;有时候经常调整优先级，最终多头并发而普遍进展不大。&lt;/li&gt;
&lt;li&gt;工作与生活失衡，公司的工作量是按 200%~300% 来规划的，每天 15 个小时在公司，更少时间在家，回到家已经累成狗了。&lt;/li&gt;
&lt;li&gt;容易被其它事情分散注意力，特别是受情绪影响。&lt;/li&gt;
&lt;li&gt;计划的多且要求高，执行的时候觉得困难容易放弃。&lt;/li&gt;
&lt;li&gt;工作变化比较快，工作计划无法做定。比如突发会议，突发问题，突发需求，有时候还要突然要和同事谈心…&lt;/li&gt;
&lt;li&gt;宠物或孩子生病了要照顾。要上班还要健身，感觉一天没做什么事情就过去了。&lt;/li&gt;
&lt;li&gt;以前跟别人学过时间管理，也实践过，但是断了之后就没有办法继续坚持。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你也存在这些痛点，期望本文对你有所启发。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2 id=&quot;我的经历&quot;&gt;我的经历&lt;/h2&gt;
&lt;p&gt;大约从上大学时起，我开始关注时间管理，这些年读过许多时间管理类书籍比如《搞定》系列，《小强升职记》，《奇特的一生》，《晨间日记的奇迹》，《高效能人士的七个习惯》，《暗时间》等等；尝试过许多方法：重要紧急四象限法，GTD，ZTD，番茄工作法，连续分段时间管理法（莫法特休息法），个人看板等；用过许多的工具：比如 Doit.im，Any.do，Things，滴答清单，CLEAR，Wunderlist，Omni Focus 等。道理懂得很多，却还是过不好自己这一生。
在实践多年后，我才发现，时间管理不是一个独立的模块，它和目标管理，效率管理，能量管理，注意力管理，情绪管理等紧密关联，形成一套「个人管理」的完整体系。网络上也有很多时间管理的原则，方法和技巧。而这篇文章挂时间管理之名，行个人管理之实，如果能让您跳出传统时间管理的限制，对个人管理有一个宏观的认识，甚至，如果本文分享的一些实践，能在您实现丰盈人生的过程中起到一些作用，我将感到十分荣幸。&lt;/p&gt;
&lt;h3 id=&quot;我之前的状态&quot;&gt;我之前的状态&lt;/h3&gt;
&lt;p&gt;2015 - 2016 年，我在创业公司做技术合伙人，刚开始充满新鲜刺激，后面更多的是压力和焦虑，不知不觉就掉入了时间管理的陷阱，最糟糕的时候的状态是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;早上 8 点起床，跑步，吃早餐，9：30 出门，10：30 到公司，午饭时间不固定，也不一定休息，下午什么时候困了就趴一会儿，晚上 18：00 - 19：00 在公司附近吃晚饭，由于白天有太多「杂」事，晚上团队都回去了，正好继续写代码或学习，到 22：00 左右离开公司，22：30 到家，老婆通常会买好周黑鸭等我，到家孩子已经睡了，和老婆分享一下工作的趣事和糟心事，老婆分享一下带孩子的趣事和糟心事，收拾好差不多凌晨 1 点多入睡。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在回头看简直是瞎忙，用忙碌来逃避思考。那 9 个月，长了好多白头发，后来体检下来，阳性结果和异常情况多了 6 项。&lt;/p&gt;
&lt;h3 id=&quot;现在的状态&quot;&gt;现在的状态&lt;/h3&gt;
&lt;p&gt;我现在理想的一天是这样的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;5 点起床，唤醒身体，写晨间日记，冥想，工作和学习到 8 点。和爱人一起准备早餐，和孩子们一起用餐，收拾洗漱，9 点出门。9 点半到公司，专注地工作到 12 点。午餐和午休，14：00 开始工作和学习，到 18：30 离开公司。18：30 到家，吃晚饭。19：00 带孩子去公园玩，顺便锻炼身体。21：00 点回家，跟孩子们一起洗澡，讲故事，22：00 上床睡觉。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在几乎实现了，通常误差在半小时左右。&lt;/p&gt;
&lt;h3 id=&quot;我的改变之路&quot;&gt;我的改变之路&lt;/h3&gt;
&lt;p&gt;回头来看，我的时间管理大概经历了几个阶段：
&lt;strong&gt;时间记录&lt;/strong&gt;
首先要知道我的时间都花到了哪里，记录时间一段时间后，我发现除了用于分析外，还提高了我对时间的感知能力。不看表都能把时间猜的八九不离十。我当时使用的是一个付费 APP「时间块」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/13a08a00-58e7-4030-b660-ba33f90595b2.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;规划时间&lt;/strong&gt;
记录一个月之后，对自己的时间花费就有了基本的认知，我就开始主动规划时间，哪个时间段干什么事情。我用 Excel 画了一个时间规划。按最理想的状态去规划。然后每天早上起来念一遍，暗示自己。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/caee2888-7c91-44fb-858c-54ccebfcc8a2.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;培养习惯&lt;/strong&gt;
如果您想更多地了解习惯培养，可以先读一下我之前写的文章：&lt;/p&gt;



&lt;p&gt;最近，又有一点新体会，要培养拥抱变化的习惯。过去的 30 年，我一直用错误的方式在拿筷子，就是那种会用食指指着对面的人的拿法，我的家人曾经提醒过我很多次，我都不以为然，因为我认为只有老家才会在意这个，而我又很少回老家。直到上一次，西安的一位同事给我提反馈说我吃饭的时候指着他，我才意识到这可能是一个全球性的用餐礼仪，估计只要用筷子的地方都会在意这个，于是我决定要改变 - 学会正确的用筷子的姿势。我买来花生，开始刻意练习，把筷子放桌上，拿起，夹一颗花生放嘴里，放下筷子。一直重复这个动作，超出我期望的是，大约 15 天以后，我就可以熟练地用正确的姿势使用筷子了。这让我感到十分惊讶，30 年的习惯居然可以半个月说改就改了。于是，我冒出了一个想法，改变的能力是不是也可以刻意练习呢？于是我开始尝试用左手拿筷子，没想到 3 天以后我就可以正常进食了，现在我又开始用左手写字了，这是培养拥抱变化的习惯呢。&lt;/p&gt;

&lt;p&gt;有人说 21 天养成一个习惯，有人说平均要 60 天。其实这里面存在两个误区，第一个是习惯是有几种分类的，它们养成的时间差别巨大，据统计「行为习惯」大约需要 30 天，「身体习惯」大约需要 60 天，「思维习惯」大约需要 180 天。行为习惯比如拿筷子的姿势，用左手写字等。身体习惯，比如早睡早起，健康饮食。思维习惯比如结构化思考，正向思考等。
在培养习惯的过程中，我发现 30 天挑战是一个很有效的方式，30 天专注于一个目标。
这一年来，我完成了如下的 30 天挑战：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/wC2ze51CxF-Diq0GaDSc1g&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;早睡早起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;跑步 5 公里&lt;/li&gt;
&lt;li&gt;读书 2 小时&lt;/li&gt;
&lt;li&gt;记录时间&lt;/li&gt;
&lt;li&gt;晨间仪式（&lt;a href=&quot;http://mp.weixin.qq.com/s/1esgc6vbFF6m6c2dtDpmjA&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;晨间日记&lt;/a&gt;，唤醒身体，自我暗示，复盘等）&lt;/li&gt;
&lt;li&gt;冥想&lt;/li&gt;
&lt;li&gt;懂你英语口语练习&lt;/li&gt;
&lt;li&gt;薄荷阅读英文读物&lt;/li&gt;
&lt;li&gt;积累幽默素材&lt;/li&gt;
&lt;li&gt;视觉元素练习&lt;/li&gt;
&lt;li&gt;写一篇文章&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然也有一些没有完成的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;瑜伽&lt;/li&gt;
&lt;li&gt;Sharp Eyes（一种训练眼睛以提高阅读速度的方法）&lt;/li&gt;
&lt;li&gt;Photo Reading - 影像阅读&lt;/li&gt;
&lt;li&gt;零秒思考&lt;/li&gt;
&lt;li&gt;结构化思考&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过 30 天挑战，培养习惯变得容易了，小伙伴们互相激励，遇到困难一起解决。也让我更能体会到哪些东西对我更有用，更有价值，哪些对我无用，应该放弃而不觉得可惜。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;刻意练习&lt;/strong&gt;
养成了早睡早起的习惯后，时间就多了起来，如果不能有效利用，白白浪费多可惜了，所以我用这些时间来学一些实用的技能。比如，视觉引导，幽默，写作等。&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;学以致用&lt;/strong&gt;
学了东西一定要尽快投入使用，一方面可以检验是否有实用价值，值不值得继续学习，另一方面也可以通过使用获得成就感，强化学习动机。我学的各种技能都会立马用起来，比如杂耍球，我应用到演讲开场讲需求变化的本质，在培训中用来讲刻意练习，在家里用来活跃气氛。还有幽默技能和视觉技能也在工作和生活中频繁使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/8b691a4b-a193-423c-92b4-4662c7080ca4.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/208ef766-b8e5-4595-acb4-e6427c4248b9.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;认知升级&quot;&gt;认知升级&lt;/h2&gt;&lt;h3 id=&quot;从时间管理上升到个人管理&quot;&gt;从时间管理上升到个人管理&lt;/h3&gt;
&lt;p&gt;重要紧急四象限的一个重要基础 - 有清晰的目标。没有目标，怎么判断哪个任务更重要？所以就无法尽早处理好重要的事情，直到所有事情都变成紧急的事情，陷入不停救火的境地。
你可能会早上起来了，时间多起来，但不知道干什么，又用无聊的事情来填充，或者被更多低价值的工作填满，虽然能做更多了，但并没有让你对生活更满意，慢慢便放弃了早起的习惯。如果没有对目标的一个全景图，很容易迷失在每天繁琐的事务上。&lt;/p&gt;

&lt;p&gt;个人管理和企业管理非常相似，也需要有自己的使命，愿景和价值观。&lt;/p&gt;
&lt;h4 id=&quot;使命&quot;&gt;使命&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;身体力行地影响他人做出积极性的改变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我非常幸运，浑浑噩噩或了 30 年，在而立之年找到了我的使命。说说我是如何找到的，希望对您有所启发。
首先我用《优势识别器》识别出我的五大优势主题，然后从程序员转换跑道成了创业者；几个月后我又做了优势职业测试，结果是教师和激励师，于是又换道到培养者（培训师、教练）。在外界的反馈中，不断强化对我所做工作的认同。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/4c154f59-1466-4068-8aaf-80271a57c779.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/87389707-1ee4-4801-99ae-1501b775e911.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;后来去参加培训师培训，看到一句话：影响他人作出积极性的改变。我就把它修改了一下，加上「身体力行地」，把它当成我的使命，每天早上通过书写暗示潜意识，不断强化。现在，连我自己都信了~
如果你认为学了编程就要一辈子写代码，就大错特错了。编程只是一项技能，一项人人都可以学会的技能，我热爱编程，我想一辈子写代码，但我并不想一辈子只写代码。&lt;/p&gt;

&lt;p&gt;上海的耳东陈同学就是这样一个例子：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我在做完【优势利用度】的测评之后得知自己的优势是 creator &amp;amp; teacher ,于是开始思考如何发挥自己的优势，我开始尝试做公司新员工和实习生的培养工作，设计了一系列相关的分享，做了一个公司内部的有价值资料导航，在做这些事情的时候会发现自己很投入，很快乐，能够充分利用自己的优势，与别人建立连接，得到了大家的认可，很有成就感。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了在公司做一名职业程序员，你有没有想过你还可以做咨询，培训，教练，售前，独立开发者，创业家等等...
在一个领域做到顶尖是极难的，但在两个领域做到不错就要有趣且容易的多。比如 GitChat 里有一位爱发红包的听众，曾经是一名程序员，现在是一名创业者，做电商工具，不仅给自己用，还做服务，据说自己的店铺月营业额两三百万。还有程序员去做跨境电商，也是做得风生水起~&lt;/p&gt;
&lt;h4 id=&quot;价值观/原则&quot;&gt;价值观/原则&lt;/h4&gt;
&lt;p&gt;我们每天都会面临大量的决策，原则可以帮助我们极大提高效率。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在公司的一次毕业生培训上，领导要做一个演讲，但时间快到了，领导堵车了还在路上，大约需要 10 几分钟，这时负责组织的两位小伙伴就在商量，是等呢还是等呢？两个人拿不定主意，征求我的意见，我说做这个决策很简单，我有两个原则：一是不要惩罚守规则的人；二是培训应当以学员为中心。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;惩罚守规则的人？听起来很荒唐，但我保证你的公司里每天都在发生，比如开会，早到的要等着迟到的，人到齐了才开始，是不是？第二条原则是以学员为中心，将领导的的演讲和下一个演讲调换一下，哪怕领导来了得多等半小时。当然，如果你的原则是：领导高于一切，因为领导单位时间内创造的价值更大。那就让学员等着，牺牲学员的时间，节省领导的时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;价值观没有高低对错，拥有价值观和原则，能更好更快地做出决策。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;愿景&quot;&gt;愿景&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;我是一名专业的培养者，我灵活运用培训，教练，咨询，引导，辅导等技术，身体力行地影响他人做出积极的改变！
我生活高效，规律且健康！
我打通了输入输出，持续地成长和变现！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个是我的愿景，同样每天早上通过书写暗示自己。用第一人称一般现在时，更加容易被潜意识接收到。还有一个技巧是：假装是，直到真的是。标签对人的行为有很大的影响，曾有个实验对比了两组人，一组直接让捐赠骨髓，大部分人不愿意，另一组先献血，再邀请捐赠骨髓，大部分人都同意了，解释是因为献血后就有了「捐赠者」这个标签，就应该做捐赠的事。我没有考证实验是否严谨，据我个人经验，当我假装自己是一个自律的人，表现得自律，身边的人都认为我是自律的人时，我确实更加自律了。&lt;/p&gt;
&lt;h4 id=&quot;目标&quot;&gt;目标&lt;/h4&gt;
&lt;p&gt;对应愿景，我订立了三年目标：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;成为专业的培养者，可以教授培训，教练，引导课程&lt;/li&gt;
&lt;li&gt;保持身体健康，体重 125 斤，体脂 10%，能做二级的街头健身动作&lt;/li&gt;
&lt;li&gt;年入百万，其中 50% 来自睡后收入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以我现在学习和实践培训，教练，引导等技术，运动，写作都是为了这几个目标服务的。
我不要做燃烧自己点亮别人的蜡烛，我认为做一个文化商人并不可耻，我们作为知识工作者，值得拥有更好的生活，不是吗？
同时，作为一名培养者，「有钱」也能增加非职权影响力。想想同样一句话，从乞丐嘴里说出来，和从马云嘴里说出来，哪个更能让人信服？&lt;/p&gt;
&lt;h4 id=&quot;项目&quot;&gt;项目&lt;/h4&gt;
&lt;p&gt;为了实现这些目标，我要在一段时间内专注在一件事情上，这就是项目。围绕这些目标，我建立了暑期特训营，公开课，企业内训，公众号，社区等项目。在建立项目时我会认真思考这个项目实现什么目标，以及项目之间的优先级关系。&lt;/p&gt;
&lt;h4 id=&quot;任务&quot;&gt;任务&lt;/h4&gt;
&lt;p&gt;任务是我每天处理的具体的事务，有可能是领导安排的紧急的工作，可能是陌生人的请求，可能是老婆让我取快递。在建立任务时我会看它属于哪个项目，这样就能保证做是每一件事都是为目标服务的。&lt;/p&gt;

&lt;p&gt;### 什么是成功？
什么样的人生是成功的人生？我把这个问题转换为：什么样的一天是成功的一天？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;怀着对新的一天的期待愉快地起床，怀着对一天工作满满的成就感心满意足地上床，就是成功的一天。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而我相信「你怎样过一天，就怎样过一生」，只要生命中大部分的每一天都是成功的，那我就认为这一生也是成功的了。&lt;/p&gt;
&lt;h3 id=&quot;工作是人生最幸福的事&quot;&gt;工作是人生最幸福的事&lt;/h3&gt;
&lt;p&gt;稻盛和夫在《干法》里提到：「工作是人生最幸福的事」。当初我读到的时候，我心里是拒绝的，当时我心里想的是，万恶的资本家当然希望我们都心甘情愿地为他们工作。直到后来我意识到：&lt;strong&gt;工作不等于上班&lt;/strong&gt;。工作除了能带给我们稳定的收入，更重要的是给我们极大的成就感。我清晰地记得在休陪产假的那段时间多么的空虚无聊，多么想回到工作岗位上创造价值。而现在，我所有的工作都是围绕使命「影响他人做出积极性的改变」，这让我对每一天都充满期待。&lt;/p&gt;
&lt;h3 id=&quot;工作和生活的平衡&quot;&gt;工作和生活的平衡&lt;/h3&gt;
&lt;p&gt;所谓工作和生活平衡，往往让人进入一个误区，就是在生活和工作中间找到一个平衡点，然后就可以万事大吉。其实在每一刻，确实存在这样一个点，但在生命长河中，这个点却是动态变化的，如果生活在左，工作在右，那中间不是一条直线，而是一条左右波动的曲线。家里刚有孩子的时候，当然将更多精力投入到家庭中；刚换了新的工作后，当然要把更多精力投入到工作中。如果一直在纠结要保持所谓的平衡，就会平添很多痛苦。&lt;/p&gt;
&lt;h2 id=&quot;原则&quot;&gt;原则&lt;/h2&gt;
&lt;p&gt;我在这里想分享我认为最重要的三条个人管理原则，我在每日反思时，重新审视前一天所做的一切是不是符合这些原则。&lt;/p&gt;
&lt;h3 id=&quot;主动而不是响应&quot;&gt;主动而不是响应&lt;/h3&gt;
&lt;p&gt;我们每天被很多事情打乱原本的计划，响应各种邮件和消息。
通过时间记录，很容易发现，我们一天可能会响应老板，同事，家人，网友，快递员等。原本计划的美好的一天，被各种事情切割成了碎片时间。
为什么要响应呢？
一是高估了自己的重要性，当我像孙连城一样认识到宇宙之浩大，自己之渺小，在人类数百万年的长河中，我这一生的短短几十年就像一粒沙子一样渺小时。我认识到自己并没有那么重要，于是我开始「懒政」，我在工作时不开即时消息，不开邮件通知，手机进入免打扰模式。事实证明，一年下来，并没有什么了不起的事情发生。当然，为了以防万一，我将老婆和老板的电话加入了手机通讯录的收藏夹，这样他们是可以直接打通我的电话的，其他人打的话会自动提示「通话中」，然后显示一个未接来电。
二是对产出不够自信，其实最难的是过自己这一关，所以才会想要更快地响应外界的请求。当我应用了一系列工作实践后（你将在后面看到它们），我才拥有了这样的信心。&lt;/p&gt;

&lt;p&gt;响应式工作的可怕之处在于，它会带来虚假的成就感，在「触发器 - 惯常行为 - 奖励」的习惯回路中，很快就会变成一个习惯。而且我们的这种习惯也会影响外界与我们的交互方式，因为在他们的习惯回路中：有一件事情要处理，联系你，你马上处理了，减少了他们的压力。这也会给他们养成有任何事情立即找你的习惯。从而老板、同事、家人、网友甚至快递员都会在每时每刻毫不内疚地打扰你。
当我采取了主动工作的原则后，我不再在第一时间回复邮件和消息，也不会在第一时间回复同事的请求，这些事情对他们来说优先级很高（然而并没有他们声称的那么高），在我这里的优先级却佷低，我会用自己固定的节奏去处理这些请求。久而久之，他们找我得不到立即处理，于是就换找别人了。
你可能会想，那这样的话，你的老板和同事甚至家人，会不会觉得你不可靠呢？确实，目标感强的人有时候会让身边的人不舒服，没关系，因为我的目标并不是让别人舒服。而且因为采取了一系列的实践（你将在后面看到它们），他们最终会认识到，这种交互模式实际上是双赢的。&lt;/p&gt;
&lt;h3 id=&quot;二八原则&quot;&gt;二八原则&lt;/h3&gt;
&lt;p&gt;专注在 20% 能创造 80% 价值的工作，我会注意以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;优先做价值更大的工作&lt;/li&gt;
&lt;li&gt;耗时的工作并不等同于重要的工作&lt;/li&gt;
&lt;li&gt;不重要的工作做得再好，也不会变得重要&lt;/li&gt;
&lt;li&gt;做团队所有人都不愿意做，但又必须要完成的工作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在家庭中，&lt;a href=&quot;http://mp.weixin.qq.com/s/gWaAP4UAGxJgA3EbcwCdxw&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;爱的五种语言&lt;/a&gt;就是对二八原则的应用，用对方喜欢而不是自己喜欢的方式来爱对方，才能事半功倍。&lt;/p&gt;
&lt;h3 id=&quot;复利&quot;&gt;复利&lt;/h3&gt;
&lt;p&gt;尽量做能产生复利的工作，就是那些一次投入，长期受益的工作。写文章，录视频，创建在线系统，写自动化脚本等。就拿写代码来说，我也要优先写被更多人使用到的功能，或者能提升团队效率的基础设施。&lt;/p&gt;
&lt;h3 id=&quot;合理地专注和多任务&quot;&gt;合理地专注和多任务&lt;/h3&gt;
&lt;p&gt;网上有大量关于专注和多任务的讨论，这些讨论就像豆腐脑应该吃甜的还是咸的一样毫无意义 - 当然是吃咸的~ 开个玩笑。我认为，脱离具体情境谈方法都是不科学的，对于需要占用大量认知资源的工作，一次只做一件。比如阅读，听书（如果我一边走路一边听书，就跟没听过一样）。对于不需要占用大量认知资源的工作，可以并行处理，比如推着孩子在公园里散步，一边走一边和老婆聊天。&lt;/p&gt;
&lt;h3 id=&quot;拖延是朋友&quot;&gt;拖延是朋友&lt;/h3&gt;
&lt;p&gt;很多人多年以来一直奋战在战拖一线。而我认为，存在即是合理。比如说懒惰，如果人不懒惰的话，就不会发明汽车和电梯，对吧？
那么，人为什么会拖延呢？我觉得拖延是一个信号，说明显性意识和潜意识的目标是不一致的，所以我通过冥想和书写暗示的方式去对齐目标。
我一直拖延的事，可能就是我不感兴趣的，不为我的目标服务的事。我大可放弃它不做，比如去年我一时冲动接了一个翻译的项目，后来实在痛苦，不断拖延，我干脆就坦诚地和编辑沟通，换了另一位译者。这起码为我节省了几百个小时的时间，难道不应该谢谢我的拖延这位朋友吗？&lt;/p&gt;
&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;
&lt;p&gt;有了以上原则，可以帮我快速做出决策，但真正要落地执行，还需要很多具体的实践。&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;工作&lt;/h3&gt;&lt;h4 id=&quot;可视化工作成果&quot;&gt;可视化工作成果&lt;/h4&gt;
&lt;p&gt;将工作成果可视化出来，不仅可以给自己更大的成就感，也会给团队，给领导增加对你的信任。开发了多少故事点，有多少用户使用，客户的表扬信，培训的学员反馈，培训的现场报道等都可以可视化工作成果。注意要可视化的是成果，而不是有多么努力，加了多少班。&lt;/p&gt;
&lt;h4 id=&quot;专注&quot;&gt;专注&lt;/h4&gt;
&lt;p&gt;频繁的任务切换会导致大量的信息加载到工作记忆中，不仅对效率有极大的影响，而且两个做到一半的任务都没有对外交付价值，造成等待的浪费（所有的半成品都是浪费）。为了保持专注，我有如下实践：&lt;/p&gt;



&lt;p&gt;冥想练习被证明是有效的提升专注度的方法，我的体会是，冥想并不是减少走神的次数，而是提升觉察力，让我更快地意识到自己走神了，从而迅速回到主题上。&lt;/p&gt;

&lt;p&gt;利用 Deadline 的压力，也是提高专注程度的方法。在临近截止日期的时候心无旁骛，进入心流状态，效率暴涨，成就感满满。相信你一定有过类似的体验，我现在就是用这种状态在写这篇文章~&lt;/p&gt;

&lt;p&gt;每天开始工作之前，我有一个仪式，通过完成这个仪式，消除潜在的干扰源，更快地进入专注状态：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/de325083-304e-4918-afea-c740593fe34b.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;番茄工作法也是有效提升专注度的手段，我用了很长时间，现在没有用任何软件，凭身体的感觉，差不多 1 个小时休息一次。&lt;/p&gt;
&lt;h4 id=&quot;零秒思考&quot;&gt;零秒思考&lt;/h4&gt;
&lt;p&gt;我们的大脑其实思考的速度非常快，很多时候我们说要思考一下，其实只是先放着不管，等快到了截止日期才真正去思考。零秒思考的方法是利用潜意识进行快速思考，做法很简单，就是写好一个问题，给自己倒计时一分钟来思考，列出关键点。第一次看到时我是抱着怀疑态度的，但试了几个问题我就发现答案很靠谱，因为最重要的东西都会在第一时间跳出来。我在工作和生活大量使用这个方法，比如做计划，准备演讲，列文章提纲等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/cfa355b1-c704-4d61-8105-ab6c653a9244.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;莫法特休息法&quot;&gt;莫法特休息法&lt;/h4&gt;
&lt;p&gt;同一项工作做的时间长了，效率就会降低，一两个小时之后，做另外一项工作，给大脑一些新鲜的刺激。据说莫法特的书房里有三张书桌，分别是三个不同的项目，在一张书桌上工作累了，休息一下，就进入另一张开始工作。脑力工作者需要的休息并不是睡很多觉，而是换脑子，体力工作者每天消耗了大量体力，才需要用睡觉的方式来补充体力。
我会把写作，沟通，写代码，课程设计，填报销，处理邮件等工作穿插进行。&lt;/p&gt;
&lt;h3 id=&quot;健康&quot;&gt;健康&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/dcb0b9f1-a61d-4934-b1ac-ff7b252b7857.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;一直以为从《21 天精通 C++》到《颈椎康复指南》是个玩笑，直到去年团队的一位同事因为颈椎问题严重到必须休假治疗，我也感觉到久坐后后背和脖子特别难受，一度影响到工作状态。于是我增加了跑步、瑜伽等运动的时间。几个月下来，基本不影响工作了。如何在繁忙的工作和生活中保持身体健康呢？我有如下实践：&lt;/p&gt;
&lt;h4 id=&quot;亲子即健身&quot;&gt;亲子即健身&lt;/h4&gt;
&lt;p&gt;在去公园遛娃的时候，顺带做引体向上，俯卧撑，仰卧起坐等动作。在家里我会让儿子们坐到我的背上做负重平板撑。&lt;/p&gt;
&lt;h4 id=&quot;社交即健身&quot;&gt;社交即健身&lt;/h4&gt;
&lt;p&gt;和朋友约跑是我的一大爱好，找到志同道合的小伙伴，一边跑步一边交流跑步经验，工作生活的近况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/914cb9ea-6200-4b5e-ba12-b41ac00b9cec.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;工作即健身&quot;&gt;工作即健身&lt;/h4&gt;
&lt;p&gt;大部分公司都有简易的健身器材，工作累了就去锻炼一下，既能醒脑又能强身。当然，因为做了前面提到的那些工作实践，所以不怕被人说不务正业，工作量不饱和等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/f7328d77-77f8-40f2-a6ca-1a19e06fae33.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;通勤即健身&quot;&gt;通勤即健身&lt;/h4&gt;
&lt;p&gt;我家离公司步行在 30 分钟左右，我基本是用快走的方式健身，在路上不带耳机，减少输入，还经常会冒出很好的想法。
公司在 7 楼，我一般都是走楼梯上去，有时甚至跑上去，有一次七楼刚出来被同事叫住，说电梯关门的时候看到我，没想到一开门又看到我~&lt;/p&gt;
&lt;h3 id=&quot;饮食&quot;&gt;饮食&lt;/h3&gt;
&lt;p&gt;如何保持高的睡眠质量，同时我对吃肉和蔬菜是毫不留情的。&lt;/p&gt;
&lt;h4 id=&quot;吃好早餐&quot;&gt;吃好早餐&lt;/h4&gt;
&lt;p&gt;人在肚子饿的状态，身体会自动降低对热量的消耗。而相对于脂肪而言，肌肉消耗的热量更多，所以身体会优先分解肌肉，而这就进入了恶性循环，更加降低了基础代谢率。所以如果你想减脂增肌，一定不能饿肚子。丰富的早餐可以除了可以带来极大的幸福感，还能减少午餐的摄入量，让下午更清醒，更有效率。&lt;/p&gt;
&lt;h4 id=&quot;晚餐清淡，不吃夜宵&quot;&gt;晚餐清淡，不吃夜宵&lt;/h4&gt;
&lt;p&gt;吃夜宵会增加肠胃蠕动，影响睡眠质量。&lt;/p&gt;
&lt;h4 id=&quot;不喝酒和饮料&quot;&gt;不喝酒和饮料&lt;/h4&gt;
&lt;p&gt;酒精和刺激性饮料都会影响睡眠质量，我连普通饮料都不喝，因为不利于嗓子保护。虽然有时候在社交场合只吃肉不喝酒显得有点另类，但我相信人们是因为我的价值而欣赏我，而不是我的酒量。&lt;/p&gt;
&lt;h3 id=&quot;家庭&quot;&gt;家庭&lt;/h3&gt;&lt;h4 id=&quot;融入彼此的圈子&quot;&gt;融入彼此的圈子&lt;/h4&gt;
&lt;p&gt;和爱人培养更多的共同语言，让交流变得更有效，比如一起读一本书，交流心得。一起做手工皂，一起做早餐，一起买菜，甚至一起洗漱。两个人的共同经历越多，共同会议和共同语言也越多。我们一起约朋友吃饭，一起参加大会演讲，一起参加视觉引导，一起参加黑客马拉松，一起顶着寒风去静滩… 这样做，无形中就增加了很多彼此陪伴的时间，从而节省出需要单独陪伴做感情交流的时间？你 Get 到了吗？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://file.codingstyle.cn/photo/2021/34614f5c-737c-4fe4-b7d9-95562c4ba599.png!large&quot; title=&quot;&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;事务即亲子&quot;&gt;事务即亲子&lt;/h4&gt;
&lt;p&gt;除了爱人，还有对孩子的陪伴和教育。我将其融入到生活中的每一件事里，比如洗澡的时候，我会用两个手指模拟外星生物走独木桥，不小心掉水里，培养他们的想象力。让他们参与调奶，培养精细动作，带着他们去取快递，进门出门就培养了礼貌的习惯。&lt;/p&gt;
&lt;h3 id=&quot;学习&quot;&gt;学习&lt;/h3&gt;&lt;h4 id=&quot;无动机不学习&quot;&gt;无动机不学习&lt;/h4&gt;
&lt;p&gt;学习包含三个维度，动机、内容和交互。我认为最重要的是动机，信息时代海量信息可以即刻获取，各种先进的技术也增强了学习的体验和便利性。唯有动机是最难的，大部分人不是因为兴趣，而是因为焦虑而学习，为了学习而学习，学完记不住，记住了做不到，不能学以致用。我的方式是输出倒逼输入，先找个目标，比如承诺一个演讲，培训，文章等，再去学习，这样效率和效果都会好很多。那种走在路上有事没事就用「得到」听本书刷虚拟的成就感的方式并不适合我。&lt;/p&gt;

&lt;p&gt;更多的学习方法可以看这篇文章：&lt;/p&gt;


&lt;h2 id=&quot;走过的弯路&quot;&gt;走过的弯路&lt;/h2&gt;
&lt;p&gt;现在回顾，在我实践时间管理的过程中，也走了很多的弯路，在此与您分享。&lt;/p&gt;
&lt;h3 id=&quot;过多地关注工具&quot;&gt;过多地关注工具&lt;/h3&gt;
&lt;p&gt;我相信很多人和我一样是工具控，对工具关注太多就是只见树木不见森林，所以我要提醒您不要跟我一样捡了芝麻丢了西瓜。&lt;/p&gt;
&lt;h3 id=&quot;对工作时间的分析太晚&quot;&gt;对工作时间的分析太晚&lt;/h3&gt;
&lt;p&gt;之前做时间记录，工作的内容只记了「工作」这个分类，没有具体到做的事情，大部分的精力放到了业余时间的优化上。直到最近我才开始用柳比歇夫的「时间记录法」，对工作花费的时间进行分析，让我看到了巨大的提升空间。
德鲁克在《二十一世纪的管理挑战》中提出知识工作者最难以管理，很多企业采用结果到导向的方式进行宏观管理，但作为知识工作者，我们自己应该对自己进行微观管理，才能提高生产力。&lt;/p&gt;
&lt;h3 id=&quot;高估了网络学习的价值&quot;&gt;高估了网络学习的价值&lt;/h3&gt;
&lt;p&gt;我曾参加过一些「名人」的私密群，因为信息量太大很快就退掉了。付费订阅的「樊登读书会」，「五分钟商学院」，「通往财富自由之路」，包括「速读训练营」，「时间管理训练营」等都没什么用，几百人的大群，每天上千条信息，平添许多焦虑。
对我而言，大部分有用的知识还是来自书本。&lt;/p&gt;
&lt;h3 id=&quot;忽视了个人助理的作用&quot;&gt;忽视了个人助理的作用&lt;/h3&gt;
&lt;p&gt;曾在去年 10 月了解到个人助理服务，当时觉得真人个人助理还挺新奇的，不过只是浅尝了一下。直到最近重读《每周工作 4 小时》，里边提到一个节省时间的技巧是外包。我才又开始尝试，昨天让助理帮我预订了出差的机票和酒店，还有想吃的水果，效率非常不错。刚开始用需要输入一些信息，久了有了默契后，就可以一键完成很多事情：比如「给家里买 50 元的时令水果」，「给我和老婆各充值 100 元话费」等。
还有之前大量写文章的时候，一大痛点就是要发布到公众号，简书，知乎专栏，头条号等多个平台，这些事情都是重复且耗时的，我准备找解决方案，将其外包出去。
最近在尝试的有 VAhut，助理来也。通过分析自己的时间使用情况，将最好的精力放在 20% 最有价值的工作上，另外的 80% 进行精简或外包。将会极大地提高价值创造的速度。&lt;/p&gt;
&lt;h2 id=&quot;推荐书籍&quot;&gt;推荐书籍&lt;/h2&gt;
&lt;p&gt;这一年多在学习和实践个人管理的过程中，读了几十本相关的书籍，挑选我认为最有帮助的一部分分享给大家：
&lt;strong&gt;学习类&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;时间管理类&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每周工作 4 小时&lt;/li&gt;
&lt;li&gt;每天最重要的两小时&lt;/li&gt;
&lt;li&gt;最重要的事情只有一件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;习惯培养&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;家庭&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;励志类&lt;/strong&gt;&lt;/p&gt;



&lt;hr/&gt;
&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;本文较长，感谢您耐心读到最后。我先分享了我从糟糕的状态转变到良好状态的经历，然后是对时间管理的认识要上升到个人管理。之后是我认为很重要的一些原则，以及这些原则在工作，生活中应用的一些实践。最后是我走过的一些弯路以及推荐的基本书籍。
我没有直接回答文章开头的痛点该如何解决，因为每个人的具体情况不一样，我希望您看完本文，能够有所启发，找到自己的答案。如果还是很困惑，我感到非常抱歉，期望您能留言与我交流。&lt;/p&gt;
        &lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://codingstyle.cn&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;「软件匠艺社区」&lt;/a&gt;旨在传播匠艺精神，通过分享好的「工作方式」，让帮助程序员更加快乐高效地编程！&lt;/p&gt;&lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7ae700f997925615123e5a58e285088c</guid>
<title>谈谈拼夕夕事件！为什么我们拼尽全力却还要 996</title>
<link>https://toutiao.io/k/jrzbd22</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5015384615384615&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/RXvHpViaz3EpMAdjHX38vkUGUibJl22o6QRbibMDaOz7LDBj4gtHNNjMlib78dD8Ah1UkJC1KHSMnJ3NlqjH0OK1icA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;650&quot;/&gt;&lt;figcaption&gt;996.ICU&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;996&lt;/code&gt;的话题一直都在程序员的圈子讨论，从来没有消失，从&lt;code&gt;996ICU&lt;/code&gt;到如今的&lt;code&gt;996张小花&lt;/code&gt;，只是最近&lt;code&gt;PDD事件&lt;/code&gt;才让这个话题再一次甚嚣尘上，也可能是互联网更加普及了吧，连农村老家的亲戚都在讨论这个年轻的姑娘，连续加班后离开了，区别是他们不明白996是什么。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;谁让我们必须996的？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;pdd秒删的话里有一句话：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;我一直不以为是资本的问题，而是这个社会的问题&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;言语间自觉有一丝透过现象看本质的味道。很多人不知道八小时工作制的由来，可以简单了解一下，知道这个权利得来的不易才会对996有更深刻的认识！&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;《8小时工作制来源》&lt;/p&gt;&lt;p&gt;8小时工作制是工人阶级同资产阶级长期斗争的结果。资本主义早期，工人阶级为争取8小时工作制就开始进行罢工、示威活动。&lt;/p&gt;&lt;p&gt;1866年9月在日内瓦召开的国际工人代表大会上，根据马克思的倡议，首先提出“8小时工作制”的口号。十月革命胜利后，苏维埃政权于1917年11月11日颁布了《关于8小时工作制》的法令。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;著名经济学家&lt;code&gt;薛兆丰&lt;/code&gt;就曾在自己的作品中说：“&lt;code&gt;让你加班的并不是你的老板，而是其他工作者愿意那样做&lt;/code&gt;”。这句话我们先不做评价，先做进一步分析，再回过头来看普通工作者怎么就一步一步失去了朝九晚五的八小时的权利的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;加班的人分为两种，&lt;code&gt;一种是主动的&lt;/code&gt;，&lt;code&gt;一种是被动的&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;主动加班型员工&lt;/code&gt;，心理状态不明。我任职过许多家公司，却也只遇到过一两个主动加班型员工，他们有着自己的内心世界，表现出极强的加班欲望，让周围所有人一眼看出他们热爱加班，疯狂热爱自己的这份工作。在领导和老板面前更是表现出“谢谢老板给我这个工作机会，我一定会努力做好”。往往这样的表现会让周围人鄙夷，因为所以人本来都是六点下班，这样的主动加班型同事可以加班到九十点，甚至通宵，如果碰巧能力还不错，又听领导的话，可能作为领导没有不高兴的吧！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那其他人在这种环境下就算可以坚持自我，朝九晚六，但时间久了，领导不免会将两种人做对比，有的甚至会在开会时刻意表扬主动加班型员工，让其他员工以他们为榜样。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主动加班型员工以领导的命令为圣旨，恨不得分成三头六臂即刻执行。对于领导的夸奖，可以兴奋很久，满满的工作动力！当领导明里暗里再提示要加班要为公司奉献时，大多数在意前程的社畜也会慢慢放弃自己的坚持，最终成为&lt;code&gt;被动型加班人&lt;/code&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.0539845758354756&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EpMAdjHX38vkUGUibJl22o6Qpr5e4cOaviaZjibs2K3VO320bItEKqUpDKET4RkQ3QYrwiba2Md8w7vVA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1167&quot;/&gt;&lt;figcaption&gt;职场 PUA&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;为什么我们拼尽全力却还是996？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;都说寒门子弟难出头，&lt;code&gt;唯有读书&lt;/code&gt;这一条路。而选择走IT这条路给了更多寒门子弟摆脱贫寒背景的机会。他们的父母多是农民、工人、创业小老板，他们有的人半辈子过的都是面朝黄土背朝天的日子（这里不自觉想到另一种截然不同的人生“面朝大海，春暖花开”）；有的人在工厂多是两班或是三班倒，不知道什么是996，只觉得老板让做就做，计件算钱，只要手速快并且生活上勤俭节约，给孩子挣个学费就好；有的人没日没夜想着挣钱的方法，摆夜摊亦或是卖苦力……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以他们都期望自己的孩子多读书、读成器（老家方言，就是成人成才的意思），可以通过读书过上不一样的人生。在他们的认知里也就是不再出卖体力，能西装革履，干干净净的当个公司职员。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;没有光鲜的背景，没有可靠的关系，没有殷实的家境，眼前看得到的只有读书这一条路。认真完成学业，拿着优异的成绩进入知名大厂，得到了丰厚的待遇，但也发现加班成了生活的常态。在厂里叫两班倒，在公司叫加班，有什么区别？兜兜转转和父母过上了一样的生活，既出卖脑力还出卖体力，换来工资的行为被称作“&lt;code&gt;等价交换&lt;/code&gt;”。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;斯密说：&lt;code&gt;劳动是衡量一切商品交换价值的真实尺度，任何一个物品的真实价格，即要取得这物品实际上所付出的代价，乃是获得它的辛苦和麻烦&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;马克思的劳动价值理论告诉我们，一切商品的价值都是由人的劳动创造的，凝结在商品价值中的社会必要劳动时间，是决定商品价格变动的终极原因。马克思以他创立的劳动价值理论为基本立论基础，系统地分析了资本主义的生产过程及其市场经济活动，深刻地揭示了资本主义生产方式的内在规律。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以我们看到的劳动换取价值是一种资本主义生产方式的内在规律！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6068376068376068&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/RXvHpViaz3EpMAdjHX38vkUGUibJl22o6QicJAwFU95O23Rib8ZCOL3ibuZSiblv1ohPa2u0ng0YOEWWQ3tvRKfwYg5Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1170&quot;/&gt;&lt;figcaption&gt;职场内卷&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们与父母相同却又不同，我们可以用劳动换取更多的价值。努力不等于内卷，努力是一种积累，是一种进步，而内卷却不一定有价值。如上所说的，被动型加班员工不一定真的有事非要加班，但架不住大势所趋，所以这样的员工加班有何意义？尤其是知道明天要加班后天要加班……那我今天100%劲头去执行工作又有什么意义，换取更多的工作量吗？挤走不愿意加班的99%的人吗？&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;除了996，我们还有什么？&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果&lt;code&gt;996&lt;/code&gt;或者&lt;code&gt;007&lt;/code&gt;是社会发展的必然趋势，那我们只能顺应时代，可我们毕竟不同于父母，区别是我们生活在更好的时代，我们除了996，还拥有更多……&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;留一些时间给家人&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;说到底我们不停地奋斗、拼搏，多挣一些钱，都是想给家人更好的生活。虽然说父母在不远游，但出生在三线四线城市的青年人不离开父母去到大城市，又何来更好的工作机会和工资待遇？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有条件的买房，把父母妻孩儿接到身边照顾、抚养；条件还不具备的，多和父母通通电话，聊聊家长里短和工作中的喜怒哀乐（不要再提倡报喜不报忧了，父母是我们最亲近的人，是我们的避风港。我们很多人为了怕父母担心，很多不顺心和烦恼都积压在心头，等到了心理承受极限，一根稻草就可以压死的时候，于这个家庭而言更是灾难）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们羡慕诗和远方的生活，所以当我们看到某音某书上的旅游博主，或者带着家人环游全国、全球时，我们才会在不经意间流漏出自己对此的羡慕。我们会在心里对自己说：再攒一些钱，我也要带爸妈去旅游，去云南看雪山、去西安看兵马俑、去北京看故宫……这些地方我都还没带我的家人去看过，所以我和我这一类职场青年人有更多的共情。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;万万没想到的是等我工作几年，有一点点条件可以带父母出去看看祖国大好河山时，碰上了疫情，在疫情之下，我们每个人减少外出，做好安全防护，于己于人都是最好的做法，只待来年春天，我可以和父母一起去家乡之外，看看更大更完整的祖国！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;拥有一个好的身体&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大学时我有一个关系不错的哥们儿，隔壁系的，如果小说里女生们的理想型是如出一辙，那这哥们儿一定是属于这个范畴。185cm的身高、阳光帅气的面庞、举止间的优雅、谈吐间的风趣幽默……近乎一切美好的词都可以用在他身上。重点他很热死运动，篮球一级棒。2018年的冬天，实验室师兄告诉我，这男孩儿青春永远定格在那个冬天。记得有一次这男孩儿跟我聊天时他说加班太多了，工作成了他醒着时的全部，他已经很久没去打篮球了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;每一年的例行体检，公司里的同事都无比在意。新来的员工会发现自己的体检结论从第一年的一两项，到第二年的四五项，到后来的一两页……体检出的问题越来越多。很多IT人都有颈椎病、腰肌劳损、脂肪肝……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我属于比较爱运动的，我也不止一次的约我的同事一起去跑步，但多数时候是约不出去的。一方面很多人本身不爱运动，另一方面工作挤占了我们太多的时间，很多人希望有自己的时间安安静静地躺着，放空也好，不动脑的刷刷某音也好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;研究生的时候我外出实习回到学校，导师在酒席间再三叮嘱，以后工作了要坚持运动，他说他现在晚上加班一小时他就会下班后跑步一公里，加班两小时他就会跑步三公里……只有这样的运动才会减轻加班给身体带来的损伤，我钦佩导师的毅力，说实话我一个年轻人都做不到。我也只是在结束一周的工作后，周末两天保持一定的运动量，和导师相比，我在自律上还是有所欠缺的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;培养一项自己可以坚持的兴趣爱好&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以我自己为例，如果我说除了上班之外，下班在家的时间我还是看技术的书籍、博客、撸代码，我是不是在这一节没什么发言权。也可能正因为自己想而不得，才更想奉劝身边的人去培养一项自己可以坚持的兴趣爱好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我有练过一段时间的吉他，等以后公众号有起色了可以录个生活视频，给大家看看我这半吊子的吉他水平，给大家做个反面教材。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么事情可以算兴趣爱好？我认为女生化妆、男生做饭都可以算在内的。老话说女为悦己者容，但早已经迈入新时代很久了，现在的女生把自己拾掇的美美的，只是为自己，并不是为了取悦谁。就像水果台《我家那闺女》里面的吴昕，就算在家，也可以花费几个小时化个精致的妆容，然后美美的泡个脚，哈哈，当然有的人会说泡脚会把毛孔打开，不应该化妆，但可不可以和喜不喜欢是两回事。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我身边的朋友同事，可能是偏年轻化且工作内容的原因，非常喜欢收集手办、玩switch游戏机，大家在一个圈子，刚好又志趣相投，简直不要太嗨哟！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以兴趣爱好是广泛的，之所以建议大家培养一项自己可以坚持的兴趣爱好，是因为996之外我们还要有自己的生活，如果一味的刷某音，大家有没有觉得几个小时后手机一关很空虚。兴趣爱好不是为了学习新东西，我们做技术这一行的，每天都在不停的学习，再把兴趣爱好当做学习任务，人生岂不是太无趣了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;有态度的总结&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;996&lt;/code&gt;是我们改变不了的现实，但是我们可以选择不996的公司！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;996&lt;/code&gt;是我们改变不了的现实，但我们仍然可以拥有自己的生活，在工作之余活出另一份精彩！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我很气愤但是我不想做个喷子，这篇文章就当是我无声的抗议吧。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;抬头看看天，生活很美好！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e04d5a55b2be9396d1304bdea69daa0d</guid>
<title>这款插件让你在 VSCode 上也能答题背单词</title>
<link>https://toutiao.io/k/re1w0oi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;span&gt;在VSCode上也可以在线答题了，插件市场上线了一款答题的插件，免去了去其它网站或者软件的烦恼，代码写累了，随手打开答题功能，换换脑子，或者熟悉两个单词，程序员的别样休闲时光，哈哈～&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;功能介绍：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对接每日一题题库&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自动生成记录你答题答案的文件夹&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提交你的答案到题库&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;打开查看你的问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;查看题解，了解大家的答题结果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;刷新题目列表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每日英语功能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;如何使用：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在 vscode 拓展里搜前端每日一题&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.26283367556468173&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BXx01uFUZLGDUXBP4yB86qGH5Qm4bf8YZjlsibLVAeWf8WDjEoH8jcYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;或者 &lt;span&gt;在 vscode marketplace 上下载&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3333333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BzmH0Gicy7ojXtdl6bLrVaEUFr25f2LK7gLxOqatIN4ib8usF0uVQ9zMQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;点击安装完成后，vscode 左侧栏会出现一个新图标，点击进去，中间栏出现两个区域，一个是前端每日一题，下面是每日英语功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;8.272727272727273&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1Bm9tvK7dy6gt1jWawKibPzGDGapw8M2mlhtWHKh96CJLTvD1ruS52ibIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;44&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在前端每日一题的标题栏右侧会有两个文字按钮，刷新和登录，答题前需要先登录&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.5314465408805031&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1Bc9mBKN6A9Kjw1VmMeiaUud0UE03zq48icMEGVTH9sZVYWkPVWdc7twiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;318&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击登录，打通了Github账户体系，点击允许后会打开授权的网页，授权成功后会重新回到vscode&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7653846153846153&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BYiauhOmLNiciaDibfYzLQkJnrg5OfkV0CBV7tThKIBK5ffibsNHAmwaXWtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;260&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4691151919866444&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1B3PINSyEFhCTB1Dp6SrdaO14RksjvEmaTSicFWicK5vvZwQCV4MYT9z1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1198&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;5. &lt;span&gt; 点击想做的题目，会弹出选择框，选择一个放答题文件的文件夹。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.22950819672131148&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BNCq5Qib2ULAqQlJvib30VfcmpnX3Z4FY5EtSXebvWeJ2dhgx3p9ap38g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;610&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击打开问题文件，在该目录下自动生成文件名为该问题描述的markdown文件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.23566084788029926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BZmNOiaiahpLZTNPguJagbW4ccvibglgibRm5oUrseG1nicxdShbrSsXnk0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;802&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在答题end的上面可以看到两个按钮，一个提交答案，一个查看题解的，注意只有先提交答案才能查看题解，在问题列表题目描述的最右侧也有一个题解按钮。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答题请在 start 和 end 之间作答，答案被限定字数不少于20个字（避免你不思考就想看答案）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击查看题解，里面是所有人提交过的答案，可供参考你答的对不对。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6.  每日英语，每天限定的一句英语和单词，好像不能刷新，真的是每天只能学一句&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1039755351681957&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1BYqU2d6t6lppaficghJLLWMPKDWRW0e1tO8LQxlrIM2DCF8ogxaHtszg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;327&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;贡献代码:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;接口文档 https://github.com/everest-architecture/front-end-daily-question/blob/main/packages/requirements/API.md&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;项目看板，可以在上面领任务 https://github.com/everest-architecture/front-end-daily-question/projects/1&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;fork 下来，完成你的需求，提交 Pull Request，就可以提交了参与贡献了！&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;目前已经加入了 git husky ，提交请符合 &lt;/span&gt;&lt;span&gt;commit 规范&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;QA：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8088552915766739&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/wokNJRf0ytpvWYmseuhuf2vlA4YH2w1B061kpAjJFsRR0S9OvFt0ImJopUgVtPOp5Yszib6Nb4GknMX0wjMaldA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;926&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>961d364021ffd66ecabfb6392ab2e60c</guid>
<title>设计模式大冒险第五关：状态模式，if/else 的“终结者”</title>
<link>https://toutiao.io/k/bd4i8he</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一篇文章是关于&lt;a href=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAwMDIzODY5MA==&amp;amp;action=getalbum&amp;amp;album_id=1557269952766771201&amp;amp;scene=173&amp;amp;subscene=0&amp;amp;sessionid=1610180505&amp;amp;enterid=1610180521&amp;amp;from_msgid=2247484071&amp;amp;from_itemidx=1&amp;amp;count=3#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;设计模式大冒险系列&lt;/a&gt;的第五篇文章，这一系列的每一篇文章我都希望能够通过通俗易懂的语言描述或者日常生活中的小例子来帮助大家理解好每一种设计模式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天这篇文章来跟大家一起学习一下状态模式。相信读完这篇文章之后，你会收获很多。&lt;strong&gt;在以后的开发中，如果遇到了类似的情况就知道如何更好地处理，能够少用&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;else&lt;/code&gt;语句，以及&lt;code&gt;switch&lt;/code&gt;语句，写出更已读，扩展性更好，更易维护的程序&lt;/strong&gt;。话不多说，我们开始今天的文章吧。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;开发过程中的一些场景&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在平时的开发过程中，经常会遇到这样一种情况：就是&lt;strong&gt;需要我们处理一个对象的不同状态下的不同行为&lt;/strong&gt;。比如最常见的就是订单，&lt;strong&gt;订单有很多种状态，每种状态又对应着不同的操作，有些操作是相同的，有些操作是不同的&lt;/strong&gt;。再比如一个音乐播放器程序，&lt;strong&gt;在播放器缓冲音乐，播放，暂停，快进，快退，终止等的情况下又对应着各种操作。有些操作在某些情况下是允许的，有些操作是不允许的&lt;/strong&gt;。还有很多不同的场景，这里就不一一列举了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么面对上面说的这些情况我们应该&lt;strong&gt;如何设计我们的程序，才能让我们开发出来的程序更好维护与扩展，也更方便别人阅读呢&lt;/strong&gt;？先别着急，我们一步一步来。遇到这种情况我们应该首先把整个操作的状态图画出来，&lt;strong&gt;只有状态图画出来，我们才可以清晰的知道这个过程中会有哪些操作，都发生了哪些状态的改变&lt;/strong&gt;。只要我们做了这一步，然后按照状态图的逻辑去实现我们的程序；先不管代码的质量如何，至少可以保证我们的逻辑功能是满足了需求的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;生活小例子，我的吹风机&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;让我们从生活中的一个小例子入手吧。最近我家里新买了一个吹风机，这个吹风机有两个按钮。一个按钮控制吹风机的开关，另一个按钮可以在吹风机打开的情况下切换吹风的模式。&lt;strong&gt;吹风机的模式有三种，分别是热风，冷热风交替，和冷风。并且吹风机打开时默认是热风模式&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果让我们来编写一个程序实现上面所说的吹风机的控制功能，我们应该怎么实现呢？&lt;strong&gt;首先先别急着开始写代码，我们需要把吹风机的状态图画出来&lt;/strong&gt;。如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/fj9xyC53hPWJialwcoUdmLJwRUPx4ITgDVWcyChUicB0otgkXxr71ic7PXicZtI3hYWvwyyRcb5hnISkjDA0s9ibtKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;4610&quot;/&gt;&lt;figcaption&gt;吹风机的状态图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面的状态图已经把吹风机的各种状态都表示出来了，&lt;strong&gt;其中圆圈表示了吹风机的状态，带箭头的线表示状态转换&lt;/strong&gt;。从这个状态图我们可以很直观的知道：&lt;strong&gt;吹风机从关闭状态到打开状态默认是热风模式，然后这三种模式可以按照顺序进行切换，然后在每一种模式下都可以直接关闭吹风机&lt;/strong&gt;。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;一般的实现方式&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们知道了整个吹风机的状态转换之后，我们就可以开始写代码了。我们先按照最直观的方式去实现我们的代码。首先我们知道吹风机有两个按钮，一个控制开关，一个控制吹风机的吹风模式。&lt;strong&gt;那么我们的程序中需要有两个变量来分别表示&lt;code&gt;开关状态&lt;/code&gt;和&lt;code&gt;吹风机当前所处的模式&lt;/code&gt;&lt;/strong&gt;。这一部分的代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;HairDryer&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 定义内部状态 0:关机状态 1:开机状态&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.isOn = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;// 定义模式 0:热风 1:冷热风交替 2:冷风&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.mode = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就要实现吹风机的开关按钮的功能了，这一部分比较简单；我们只需要判断当前&lt;code&gt;isOn&lt;/code&gt;变量，如果是打开状态就将&lt;code&gt;isOn&lt;/code&gt;设置为关闭状态，如果是关闭状态就将&lt;code&gt;isOn&lt;/code&gt;设置为打开状态。&lt;strong&gt;需要注意的一点就是在吹风机关闭的情况下需要将吹风机的模式重置为热风模式&lt;/strong&gt;。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 切换吹风机的打开关闭状态&lt;/span&gt;&lt;br/&gt;HairDryer.prototype.turnOnOrOff = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;let&lt;/span&gt; { isOn, mode } = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (isOn === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;// 打开吹风机&lt;/span&gt;&lt;br/&gt;      isOn = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机的状态变为：[打开状态]，模式是：[热风模式]&#x27;&lt;/span&gt;);&lt;br/&gt;   } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;// 关闭吹风机&lt;/span&gt;&lt;br/&gt;      isOn = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;// 重置吹风机的模式&lt;/span&gt;&lt;br/&gt;        mode = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机的状态变为：[关闭状态]&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.isOn = isOn;&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.mode = mode;&lt;br/&gt;};&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在接下来就是实现吹风机的模式切换的功能了，代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 切换吹风机的模式&lt;/span&gt;&lt;br/&gt;HairDryer.prototype.switchMode = &lt;span&gt;&lt;span&gt;function&lt;/span&gt;(&lt;span/&gt;) &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;const&lt;/span&gt; { isOn } = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;let&lt;/span&gt; { mode } = &lt;span&gt;this&lt;/span&gt;;&lt;br/&gt;   &lt;span&gt;// 切换模式的前提是：吹风机是开启状态&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;if&lt;/span&gt; (isOn === &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;      &lt;span&gt;// 需要知道当前模式&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (mode === &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;         &lt;span&gt;// 如果当前是热风模式，切换之后就是冷热风交替模式&lt;/span&gt;&lt;br/&gt;         mode = &lt;span&gt;1&lt;/span&gt;;&lt;br/&gt;         &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机的模式改变为：[冷热风交替模式]&#x27;&lt;/span&gt;);&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (mode === &lt;span&gt;1&lt;/span&gt;) {&lt;br/&gt;         &lt;span&gt;// 如果当前是冷热风交替模式，切换之后就是冷风模式&lt;/span&gt;&lt;br/&gt;         mode = &lt;span&gt;2&lt;/span&gt;;&lt;br/&gt;         &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机的模式改变为：[冷风模式]&#x27;&lt;/span&gt;);&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;         &lt;span&gt;// 如果当前是冷风模式，切换之后就是热风模式&lt;/span&gt;&lt;br/&gt;         mode = &lt;span&gt;0&lt;/span&gt;;&lt;br/&gt;         &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机的模式改变为：[热风模式]&#x27;&lt;/span&gt;);&lt;br/&gt;      }&lt;br/&gt;   } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;吹风机在关闭的状态下无法改变模式&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;this&lt;/span&gt;.mode = mode;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一部分的代码也不算难，但是有一些细节需要注意。&lt;strong&gt;首先我们切换模式需要吹风机是打开的状态，然后当吹风机是关闭的状态的时候，我们不能够切换模式&lt;/strong&gt;。到这里为止，我们已经把吹风机的控制功能都实现了。接下来就要写一些代码来验证一下我们上面的程序是否正确，测试的代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hairDryer = &lt;span&gt;new&lt;/span&gt; HairDryer();&lt;br/&gt;&lt;span&gt;// 打开吹风机，切换吹风机模式&lt;/span&gt;&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;span&gt;// 关闭吹风机，尝试切换模式&lt;/span&gt;&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;span&gt;// 打开关闭吹风机&lt;/span&gt;&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出的结果如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;吹风机的状态变为：[打开状态]，模式是：[热风模式]&lt;br/&gt;吹风机的模式改变为：[冷热风交替模式]&lt;br/&gt;吹风机的模式改变为：[冷风模式]&lt;br/&gt;吹风机的模式改变为：[热风模式]&lt;br/&gt;吹风机的状态变为：[关闭状态]&lt;br/&gt;吹风机在关闭的状态下无法改变模式&lt;br/&gt;吹风机的状态变为：[打开状态]，模式是：[热风模式]&lt;br/&gt;吹风机的状态变为：[关闭状态]&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从上面测试的结果我们可以知道，上面程序编写的逻辑是没有问题的，实现了我们想要的预期的功能。如果想看上面代码的完整版本可以点击这里浏览。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是你能从上面的代码中看出什么问题吗？&lt;strong&gt;作为一个优秀的工程师，你肯定会发现上面的代码使用了太多的&lt;code&gt;if/else&lt;/code&gt;判断，然后切换吹风机模式的代码都耦合在一起。这样会导致一些问题，首先上面代码的可读性不是很好，如果没有注释的话，想要知道吹风机模式的切换逻辑还是有点费力的。另一方面，上面代码的可扩展性也不是很好，如果我们想新增加一种模式的话，就需要修改&lt;code&gt;if/else&lt;/code&gt;里面的判断，很容易出错&lt;/strong&gt;。那么作为一个优秀的工程师，我们该如何重构上面的程序呢？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;状态模式的介绍，以及使用状态模式重构之前的程序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们就要进入状态模式的学习过程了，首先我们先不用管什么是状态模式。我们先来再次看一下上面关于吹风机的状态图，我们可以看到吹风机在整个过程中有四种状态，分别是：&lt;code&gt;关闭状态&lt;/code&gt;，&lt;code&gt;热风模式状态&lt;/code&gt;，&lt;code&gt;冷热风交替模式状态&lt;/code&gt;，&lt;code&gt;冷风模式状态&lt;/code&gt;。然后这四种模式分别都有两个操作，分别是&lt;strong&gt;切换模式&lt;/strong&gt;和&lt;strong&gt;切换吹风机的打开和关闭状态&lt;/strong&gt;。（注：对于关闭状态，虽然无法切换模式，但是在这里我们也认为这种状态有这个操作，只是操作不会起作用。）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么我们是不是可以换一种思路去解决这个问题，&lt;strong&gt;我们可以把具体的操作封装进每一个状态里面，然后由对应的状态去处理对应的操作。我们只需要控制好状态之间的切换就可以了。这样做可以让我们把相应的操作委托给相应的状态去做，不需要再写那么多的&lt;code&gt;if/else&lt;/code&gt;去判断状态，这样做还可以让我们把变化封装进对应的状态中去。如果需要添加新的状态，我们对原来的代码的改动也会很小&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;状态模式的简单介绍&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么到这里我们来介绍一下状态模式吧，状态模式指的是：&lt;strong&gt;能够在对象的内部状态改变的时候改变对象的行为&lt;/strong&gt;。&lt;strong&gt;状态模式常常用来对一个对象在不同状态下同样操作时产生的不同行为进行封装，从而达到可以让对象在运行时改变其行为的能力&lt;/strong&gt;。就像我们上面说的吹风机，在热风模式下，按下模式切换按钮可以切换到冷热风交替模式；但是如果当前状态是冷热风交替模式，那么按下模式切换按钮，就切换到了冷风模式了。更详细的解释可以参考State pattern&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们再来看一下状态模式的UML图，如下所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3684210526315789&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_svg/Hp9HAaP9GFAckV6XP5kjKgE2Z7gSywn4mJPG3ySDDd5kAaMcM0icbRKYq5DPpUOfN1zjBNnaibB8Hs3JZshsnfXjm7ialhqpR9w/640?wx_fmt=svg&quot; data-type=&quot;svg&quot; data-w=&quot;475&quot;/&gt;&lt;figcaption&gt;状态模式的UML图&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，&lt;strong&gt;对于状态模式来说，有一个&lt;code&gt;Context&lt;/code&gt;(上下文)，一个抽象的&lt;code&gt;State&lt;/code&gt;类，这个抽象类定义好了每一个具体的类需要实现的方法。对于每一个具体的类来说，它实现了抽象类&lt;code&gt;State&lt;/code&gt;定义好的方法，然后&lt;code&gt;Context&lt;/code&gt;在需要进行操作的时候，只需要请求对应具体状态类实例的对应方法就可以了&lt;/strong&gt;。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;使用状态模式来重构之前的程序&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来我们来用状态模式来重构我们的程序，首先是&lt;code&gt;Context&lt;/code&gt;，对应的代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 状态模式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;// 吹风机&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HairDryer&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 吹风机的状态&lt;/span&gt;&lt;br/&gt;   state;&lt;br/&gt;   &lt;span&gt;// 关机状态&lt;/span&gt;&lt;br/&gt;   offState;&lt;br/&gt;   &lt;span&gt;// 开机热风状态&lt;/span&gt;&lt;br/&gt;   hotAirState;&lt;br/&gt;   &lt;span&gt;// 开机冷热风交替状态&lt;/span&gt;&lt;br/&gt;   alternateHotAndColdAirState;&lt;br/&gt;   &lt;span&gt;// 开机冷风状态&lt;/span&gt;&lt;br/&gt;   coldAirState;&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// 构造函数&lt;/span&gt;&lt;br/&gt;   &lt;span&gt;constructor&lt;/span&gt;(state) {&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.offState = &lt;span&gt;new&lt;/span&gt; OffState(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hotAirState = &lt;span&gt;new&lt;/span&gt; HotAirState(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.alternateHotAndColdAirState = &lt;span&gt;new&lt;/span&gt; AlternateHotAndColdAirState(&lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;&lt;br/&gt;      );&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.coldAirState = &lt;span&gt;new&lt;/span&gt; ColdAirState(&lt;span&gt;this&lt;/span&gt;);&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (state) {&lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;.state = state;&lt;br/&gt;      } &lt;span&gt;else&lt;/span&gt; {&lt;br/&gt;         &lt;span&gt;// 默认是关机状态&lt;/span&gt;&lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;.state = &lt;span&gt;this&lt;/span&gt;.offState;&lt;br/&gt;      }&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// 设置吹风机的状态&lt;/span&gt;&lt;br/&gt;   setState(state) {&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.state = state;&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.state.turnOnOrOff();&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.state.switchMode();&lt;br/&gt;   }&lt;br/&gt;&lt;br/&gt;   &lt;span&gt;// 获取吹风机的关机状态&lt;/span&gt;&lt;br/&gt;   getOffState() {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.offState;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 获取吹风机的开机热风状态&lt;/span&gt;&lt;br/&gt;   getHotAirState() {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.hotAirState;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 获取吹风机的开机冷热风交替状态&lt;/span&gt;&lt;br/&gt;   getAlternateHotAndColdAirState() {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.alternateHotAndColdAirState;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 获取吹风机的开机冷风状态&lt;/span&gt;&lt;br/&gt;   getColdAirState() {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.coldAirState;&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我来解释一下上面的代码，首先我们使用&lt;code&gt;HairDryer&lt;/code&gt;来表示&lt;code&gt;Context&lt;/code&gt;，然后&lt;code&gt;HairDryer&lt;/code&gt;类的实例属性有&lt;code&gt;state&lt;/code&gt;，这属性就是表示了吹风机当前所处的状态。其余的四个属性分别表示吹风机对应的四个状态实例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;吹风机有&lt;code&gt;setState&lt;/code&gt;可以设置吹风机的状态，然后&lt;code&gt;getOffState&lt;/code&gt;，&lt;code&gt;getHotAirState&lt;/code&gt;，&lt;code&gt;getAlternateHotAndColdAirState&lt;/code&gt;，&lt;code&gt;getColdAirState&lt;/code&gt;分别用来获取吹风机的对应状态实例。你可能会说为什么要在&lt;code&gt;HairDryer&lt;/code&gt;类里面获取相应的状态实例呢？别着急，下面会解释为什么。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后&lt;code&gt;turnOnOrOff&lt;/code&gt;方法表示打开或者关闭吹风机，&lt;code&gt;switchMode&lt;/code&gt;用来表示切换吹风机的模式。还有&lt;code&gt;constructor&lt;/code&gt;，我们默认如果没有传递状态实例的话，默认是热风模式状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后是我们的抽象类&lt;code&gt;State&lt;/code&gt;，因为我们的实现使用的语言是&lt;code&gt;JavaScript&lt;/code&gt;，&lt;code&gt;JavaScript&lt;/code&gt;暂时还不支持抽象类，所以用一般的类来代替。这个对我们实现状态模式没有太大的影响。具体的代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 抽象的状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;---按下吹风机 [开关机] 按钮---&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;---按下吹风机 [模式切换] 按钮---&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;State&lt;/code&gt;类主要是用来定义好具体的状态类应该实现的方法，对于我们这个吹风机的例子来说就是&lt;code&gt;turnOnOrOff&lt;/code&gt;和&lt;code&gt;switchMode&lt;/code&gt;。它们分别对应，按下吹风机开关机按钮的处理和按下吹风机的模式切换按钮的处理。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就是具体的状态类的实现了，代码如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;// 吹风机的关机状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;OffState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 吹风机对象的引用&lt;/span&gt;&lt;br/&gt;   hairDryer;&lt;br/&gt;   &lt;span&gt;constructor&lt;/span&gt;(hairDryer) {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer = hairDryer;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.turnOnOrOff();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getHotAirState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 关闭状态 =&amp;gt; 开机热风状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;===吹风机在关闭的状态下无法切换模式===&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 吹风机的开机热风状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;HotAirState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 吹风机对象的引用&lt;/span&gt;&lt;br/&gt;   hairDryer;&lt;br/&gt;   &lt;span&gt;constructor&lt;/span&gt;(hairDryer) {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer = hairDryer;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.turnOnOrOff();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getOffState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机热风状态 =&amp;gt; 关闭状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.switchMode();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;br/&gt;         &lt;span&gt;this&lt;/span&gt;.hairDryer.getAlternateHotAndColdAirState()&lt;br/&gt;      );&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机热风状态 =&amp;gt; 开机冷热风交替状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 吹风机的开机冷热风交替状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AlternateHotAndColdAirState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 吹风机对象的引用&lt;/span&gt;&lt;br/&gt;   hairDryer;&lt;br/&gt;   &lt;span&gt;constructor&lt;/span&gt;(hairDryer) {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer = hairDryer;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.turnOnOrOff();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getOffState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机冷热风交替状态 =&amp;gt; 关闭状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.switchMode();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getColdAirState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机冷热风交替状态 =&amp;gt; 开机冷风状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 吹风机的开机冷风状态&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ColdAirState&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;State&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;   &lt;span&gt;// 吹风机对象的引用&lt;/span&gt;&lt;br/&gt;   hairDryer;&lt;br/&gt;   &lt;span&gt;constructor&lt;/span&gt;(hairDryer) {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer = hairDryer;&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 开关机按钮&lt;/span&gt;&lt;br/&gt;   turnOnOrOff() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.turnOnOrOff();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getOffState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机冷风状态 =&amp;gt; 关闭状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;   &lt;span&gt;// 切换模式按钮&lt;/span&gt;&lt;br/&gt;   switchMode() {&lt;br/&gt;      &lt;span&gt;super&lt;/span&gt;.switchMode();&lt;br/&gt;      &lt;span&gt;this&lt;/span&gt;.hairDryer.setState(&lt;span&gt;this&lt;/span&gt;.hairDryer.getHotAirState());&lt;br/&gt;      &lt;span&gt;console&lt;/span&gt;.log(&lt;span&gt;&#x27;状态切换: 开机冷风状态 =&amp;gt; 开机热风状态&#x27;&lt;/span&gt;);&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由上面的代码我们可以看到，对于每一个具体的类来说，都有一个属性&lt;code&gt;hairDryer&lt;/code&gt;，这个属性用来保存吹风机实例的索引。然后就是对应&lt;code&gt;turnOnOrOff&lt;/code&gt;和&lt;code&gt;switchMode&lt;/code&gt;方法的实现。我们可以看到在具体的类中我们设置&lt;code&gt;hairDryer&lt;/code&gt;的状态是通过&lt;code&gt;hairDryer&lt;/code&gt;实例的&lt;code&gt;setState&lt;/code&gt;方法，然后获取状态是通过&lt;code&gt;hairDryer&lt;/code&gt;对应的获取状态的方法。比如：&lt;code&gt;this.hairDryer.getHotAirState()&lt;/code&gt;就是获取吹风机的热风模式状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里我们可以说一下为什么要在&lt;code&gt;HairDryer&lt;/code&gt;类里面获取相应的状态实例：&lt;strong&gt;因为这样不同的状态类之间相当于解耦了，它们不需要在各自的类中依赖对应的状态，直接从&lt;code&gt;hairDryer&lt;/code&gt;实例上获取对应的状态实例就可以了。减少了类之间的依赖，使我们代码的可维护性变的更好了&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来就是需要测试一下我们上面通过状态模式重构后的代码有没有实现我们想要的功能，测试的代码如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; hairDryer = &lt;span&gt;new&lt;/span&gt; HairDryer();&lt;br/&gt;&lt;span&gt;// 打开吹风机&lt;/span&gt;&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;&lt;span&gt;// 切换模式&lt;/span&gt;&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;span&gt;// 切换模式&lt;/span&gt;&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;span&gt;// 切换模式&lt;/span&gt;&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;span&gt;// 关闭吹风机&lt;/span&gt;&lt;br/&gt;hairDryer.turnOnOrOff();&lt;br/&gt;&lt;span&gt;// 吹风机在关闭的状态下无法切换模式&lt;/span&gt;&lt;br/&gt;hairDryer.switchMode();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输出的结果如下所示：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;---按下吹风机 [开关机] 按钮---&lt;br/&gt;状态切换: 关闭状态 =&amp;gt; 开机热风状态&lt;br/&gt;---按下吹风机 [模式切换] 按钮---&lt;br/&gt;状态切换: 开机热风状态 =&amp;gt; 开机冷热风交替状态&lt;br/&gt;---按下吹风机 [模式切换] 按钮---&lt;br/&gt;状态切换: 开机冷热风交替状态 =&amp;gt; 开机冷风状态&lt;br/&gt;---按下吹风机 [模式切换] 按钮---&lt;br/&gt;状态切换: 开机冷风状态 =&amp;gt; 开机热风状态&lt;br/&gt;---按下吹风机 [开关机] 按钮---&lt;br/&gt;状态切换: 开机热风状态 =&amp;gt; 关闭状态&lt;br/&gt;===吹风机在关闭的状态下无法切换模式===&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的测试结果可以知道，我们重构之后的代码也完美地实现了我们想要的功能。使用状态模式重构后的完整版本可以点击这里浏览。那么接下来我们就来分析一下，使用状态模式与第一种不使用状态模式相比有哪些优势和劣势。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用状态模式的优势有以下几个方面：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;将应用的代码解耦，利于阅读和维护&lt;/strong&gt;。我们可以看到，在第一种方案中，我们使用了大量的&lt;code&gt;if/else&lt;/code&gt;来进行逻辑的判断，将各种状态和逻辑放在一起进行处理。在我们应用相关对象的状态比较少的情况下可能不会有太大的问题，但是一旦对象的状态变得多了起来，这种耦合比较深的代码维护起来就很困难，很折磨人。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;将变化封装进具体的状态对象中，相当于将变化局部化，并且进行了封装。利于以后的维护与拓展&lt;/strong&gt;。使用状态模式之后，我们把相关的操作都封装进对应的状态中，如果想修改或者添加新的状态，也是很方便的。对代码的修改也比较少，扩展性比较好。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;通过组合和委托，让对象在运行的时候可以通过改变状态来改变自己的行为&lt;/strong&gt;。我们只需要将对象的状态图画出来，专注于对象的状态改变，以及每个状态有哪些行为。这让我们的开发变得简单一些，也不容易出错，能够保证我们写出来的代码质量是不错的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用状态模式的劣势：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;当然使用状态模式也有一点劣势，那就是增加了代码中类的数量，也就是增加了代码量。但是在绝大多数情况下来说，这个算不上什么太大的问题。除非你开发的应用对代码量有着比较严格的要求。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;状态模式的总结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过上面对状态模式的讲解，以及吹风机小例子的实践，相信大家对状态模式都有了很深入的理解。&lt;strong&gt;在平时的开发工作中，如果一个对象有很多种状态，并且这个对象在不同状态下的行为也不一样，那么我们就可以使用状态模式来解决这个问题。使用状态模式可以让我们的代码条理清楚，容易阅读；也方便维护和扩展&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了验证你的确已经掌握了状态模式，这里给大家出个小题目。还是以上面的吹风机为例子，如果现在吹风机新增加了一个按钮，用来切换风速强度的大小。默认风速的强度是弱风，按下按钮变为强风。现在你能修改上面的代码，然后实现这个功能吗，赶快动手试试吧~&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;文章到这里就结束了，如果大家有什么问题和疑问欢迎大家在文章下面留言，或者在dreamapplehappy/blog提出来。也欢迎大家关注我的公众号关山不难越，获取更多关于设计模式讲解的内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是这一系列的其它的文章，也欢迎大家阅读，希望大家都能够掌握好这些设计模式的使用场景和解决的方法。&lt;strong&gt;如果这篇文章对你有所帮助，那就点个赞，分享一下吧~&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考链接：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;State pattern，文中状态模式的UML图片也来自这里。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Take Control of your App with the JavaScript State Pattern&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;The State Design Pattern vs State Machine&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7c9a1f27d4c5b6e7407263e71307ebfe</guid>
<title>重磅！两万字长文总结，梳理 Java 入门进阶哪些事</title>
<link>https://toutiao.io/k/2jdovdn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span&gt;作者 l 程序员小跃&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;来源 l 程序员小跃（ID：runningdimple）&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是程序员小跃，一名在职场已经写了6年程序的老程序员，从一开始的菊厂 Android 开发到现在某游戏公司的Java后端架构，对Java还是相对了解的挺多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大概是半年前吧，在知乎上有个知友私信给我，问我关于零基础如何学习Java,以及在学习过程中会存在一定的迷茫，如何应对等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我想着何不把以前的内容重新整合下分享出来给大家呢，于是就有了今天的这次分享。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;再过去的一年多时间里，跃哥通过这份清晰的路线图，已经帮助 20+同学做好定位，快速认清了自己当前的现状，并做好相应的应对措施，甚至有同学通过调整，已经拿到了心仪的 offer&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么马上进入主题，该篇内容主要涉及到以下主题，其中第一部分学习路线，在总结完每个路线的时候，跃哥还会有完成路线的成就感是什么，以及一些实用的书籍推荐噢。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java从入门到进阶学习路线&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;主导三个项目，让我独当一面&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;能力提升你要怎么学&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;全篇总结&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 现在主要是作为后端应用在发展，尤其是他的微服务领域。根据编程语言排行来看，Java 常年占据榜单的 Top 3，学习和使用 Java 的伙伴实在是太多了。甚至有大V认为，在微服务领域 Java 目前是王者。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全球有 1200 万以上 Java 程序员以及海量的设备，还有无所不能的 Java 生态圈。诸如阿里巴巴、京东、百度、腾讯、美团、去哪儿等互联网公司，基本都是以 Java 为首选编程语言的。即使在最新的云计算领域，Java 仍然是 AWS、Google App Engine 等平台上，使用最多的编程语言。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，我们学习 Java 的更进一步目标就是把自己培养成微服务高手，找工作的目标要么就是去大厂写 Java，要么在小厂成为独当一面的主程。当然目前 Android 开发虽然说使用了Kotlin，使用 Java 的还是大有人在，跃哥就是从Android开发内部转到Java开发，也算是没有付出很高的代价。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;Java从入门到进阶学习路线&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;了解 Java 语言&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/CvOqicPgTH0307aOFI1SickLEjaqCJwsvicPlYR2PJjjsYhhbRibVZN8pP7THGvofuKCjicibBgnaDYBSsBLgAFicPpGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;42&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;2.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rEu21icic9rbZBXknnicnbOZntUS297gYoHt3I8tS6OQAZZoADXIJPCQYeuS8TeYKlyR1eajrfD8Pw9sBtWv5fH0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5603305785123966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFz4hZTmJMQNiayVXDXDpBA8ib2hHx3Dib69ibWKNsSfjk49iaVtRGIHxbibJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1210&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 的前世今生&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 如何编译&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 环境配置&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 编译器&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多同学很喜欢一上来就想着写代码，恨不得一拿到书本的第一页就是教你如何如何写代码，其实不是这样的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们了解一门语言，一开始还是需要了解Java 的前世今生，Java 是怎么来的，如何发展，以及如何规划的。知道 Java 怎么来，应用在哪，我们才能去挖掘更多属于 Java 的价值，对不对？所以请问下大家，目前大家在用哪个版本呢？最新的版本是多少？最新的长更新版本又是多少？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以很多教科书第一部分基本会聊一聊 Java 的历史，以及如何编译 Java，而不是一上来就让大家用编译器开始玩转。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跃哥一开始写 Java 还是敲的命令行，用记事本写过 Java 代码，语法错误都是靠编译一步步调整过来的，虽然很累，但是很受用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过我们最终是需要创造生产力的，而且来我们这里学习的同学肯定都是有功底的，所以其实这个第一部分是我的废话。比如 Java 如何编译，环如何安装，选择合适的编译器（目前基本就是 IDEA 和 Eclipse 两强割据时代）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java 是一门纯粹的面向对象的编程语言，所以必须得弄懂它的 OOP 特性：封装、继承、多态。&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关于基本知识学习&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基础知识包括（这部分主要参考《Java核心技术卷》）：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.7763975155279503&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IF8Xs7xbg0jJGUJgEv234Zsk0Fle8JD2T7myVrMVedzlmBiclX3iayicZBw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.872791519434629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFjz6h1qeJdTEoxwPFF5Bq7lHnwCgZE1D3IxPuHUWCRiacXeiaiaicvCt2WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;566&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.9109947643979057&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFLT5Oh3DHDBIYPZE3micC21f1F1K04dLepRrqbTrkkblCpqlD0h1ThOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;764&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;基本程序结构：基本变量类型、运算符、字符串、流程控制、数组&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;类与对象：类的定义和使用、静态属性和方法、继承、包管理、枚举、&lt;strong&gt;反射&lt;/strong&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;接口和抽象类：接口的定义及实现、抽象类的定义及实现&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;泛型：泛型类、泛型方法&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;集合：Set、List、Map、树、排序和查找&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;异常与调试：内置异常、声明异常、自定义异常、捕获异常、日志&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;多线程：多线程概念、使用线程、同步&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 8 之后的新特性:Lambda表达式、Stream（map、filter、reduce、集合）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 网络编程：TCP、UDP&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java I/O、NIO&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;算法与数据结构&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习基本知识，就是让你对Java语言有一个初步的了解。话又说回来，基础知识是学习一门编程语言的必备条件，而且大部分语言的基础知识都是大同小异，包含基本的数据类型、程序结构等等。如果是Java这类面向对象的，那么还得掌握面向对象的知识，&lt;strong&gt;面向对象是重中之重，面向对象是重中之重，面向对象是重中之重，重要的事情说三遍&lt;/strong&gt;。只有掌握面向对象的知识，在后续的开发中才会有更好的成长。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分我加了算法和数据结构，其实我也在犹豫到底要把他分在哪个模块里，因为学校里学的时候，会教你基本的算法；但是工作，面试的时候，考的算法会综合起来，并不是生掰硬套就可以的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在校招算法是必备的模块了，所以我还是归结在基本知识里。比如我以前面试候选人的时候，冒泡这种是常常出现的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;成就感&lt;/strong&gt;：学习了 Java 的前世今生，以及基本知识，就表示你可以愉快开始愉快的玩耍了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习完上面的 1-6 条那就可以在编译器上新建一个工程，开始初步掌握 Java 的基本操作，学完 7-11 可以尝试完成一个简单的聊天系统，写一个服务端，一个客户端，就可以进行聊天通信，那时候你的成就感会很足的噢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐书单&lt;/strong&gt;：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5307262569832403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFxAZay2DbFoicUR4WL1xkQRbvSl9DVF55MuDIONcn2x4NF2ZOM34jwyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;716&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.446064139941691&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFuYtauutoYk0UWdbRnjbDHMDGAqVoliag7zFTmVWJkGibAMSDViaQWgPjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;686&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;学习过程跃哥是按照《Java 核心技术卷 1》、《Java 核心技术卷 2》来的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跃哥刚开始学习的时候，是看了李刚老师的《疯狂 Java 讲义》，在实验室潜心学习半个多月啃出来的书&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;并发方面，可以看看《Java 并发编程实战》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Java 新特性，可以查阅《Java 实战》，跃哥最近也在回忆巩固，内容很干&lt;/section&gt;&lt;section&gt;算法的话，入门就推荐下去年很火的程序员小灰的《漫画算法》，以及最近很火的东哥写的 《labuladong的算法小抄》&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关于 Spring 学习（Web 框架）&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4532374100719425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFAKOqHMouMzBffKbuRR9q0e3ODWFU8sqBQ7TAroXTlFw5vEK95iaHO9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2342342342342343&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFIzw0t3B33myc4pCrRthLraLL8JibA6Id5f4oumt0WMjA6fJQORTKyKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面是掌握 Spring 相关，需要掌握的知识（可能不止，也可能有遗漏，后续可以再补充）&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Maven：Maven与包管理、POM文件、生命周期等&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单元测试：单元测试的概念，Junit&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring Core：依赖注入与控制反转、Spring概述、xml 装配 bean、Spring容器与生命周期、自动装配、注解装配、切面编程（AOP）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;HTTP协议：基本概念、方法（GET/POST）、HttpClist 库&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;JSON知识：JSON 概念、JSON 与 HTTP、JSON封装的库（FastJson、jaskson 库）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Servlet概念：Servlet 概念、Servlet 生命周期、Filter 和 Listener、Tomcat 与 Servlet 容器&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Spring MVC概念：配置Spring MVC、路径映射、参数传递、实现REST、权限控制等&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了第一部分的基本知识，那我们第二步就是直奔主题。在领域里，Spring就是需要学习的利器。我大学是学习客户端的，所以那时候对后端的认知就是 Spring、Struts2、Hibernate三驾马车，结果后等自己写后端的时候，发现时代已经变了，现在更多的是掌握 Spring、Spring MVC、Mybatis，尤其是 Spring 框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分涉及的点也比较多，但是学习起来，基本都是连贯的。从你新建一个Spring项目开始，就一步步循序渐进，只要你开始写代码，这些知识都会涉及到，不用害怕自己没接触，学不会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里的书单推荐在后面，请稍等。&lt;/p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关于应用服务的学习&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;2.382911392405063&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFcP8PxOkroIpxA5md8sciashfOx326wksxUGOIT1JRCCCHYZEhISGibhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;632&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要包括但不限于&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;MySQL：关系型数据库概念，数据库的CRUD操作、JDBC API、数据库特性，数据库连接池&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;MyBatis：OR映射概念，配置，映射，基本Java库，和Spring集成&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;缓存：缓存概念、Redis的使用、缓存雪崩、缓存穿透、缓存击穿&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;NoSQL：NoSQL概念，Mongodb的使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;队列：队列概念，RabbitMQ、Kafka&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;搜索引擎：Elasticsearch&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;反向代理：反向代理概念，Nginx的配置和使用&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用服务这一块，涵盖了很多领域，包括持久化、缓存、队列、反向代理等，这些是完善一个程序的重中之重。前面的那几个知识属于基础框架，那么中间件就是给框架里填充一些增强的部分，让程序健壮稳定。想必大家平时练手之类的遇到频率很高的项目就是电商类的项目，比如电商类中的秒杀就用了redis缓存知识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分内容我觉得很有意思，一个功能完成了，仅仅是第一步，要完善他还需要多种配合。比如我们的数据存储，用到了SQL相关的知识，那就去掌握起来，现在互联网上基本都用MySQL再使用；然后你需要支持秒杀这类，就得用到Redis相关；库存更新是门技术活，你可能需要用到消息队列；历史订单查询，可以选择用mongodb，Elasticsearch；访问压力太大，你可能需要流量分发，甚至是熔断，那就需要Nginx的使用。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你看，这些应用就这样无形之中被应用起来，来提升应用的健壮性。我刚提到的这些，如果仅仅是小的项目使用或者是自己练手，存储上SQL就足够了，不需要用缓存等其他的，但是应用大了，就不得不考虑各种情况，那么这些神器就慢慢的使用上了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你看，编程其实就是这么神奇，都是循序渐进的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;书单推荐&lt;/strong&gt;：这里提到的很多，已经有很多优秀的书籍，跃哥就简单推荐几本，供大家参考。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5856873822975518&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFicLNJ8ia7raMHn3nkUIYAtzcIeZHedoKcLBxdpUWllACF04yewfVTnSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1062&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《高性能 MySQL》（豆瓣评分 9.3，0.4K+人评价）：mysql 领域的经典之作，拥有广泛的影响力。不但适合数据库管理员（dba）阅读，也适合开发人员参考学习。不管是数据库新手还是专家，相信都能从本书有所收获。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Redis 实战》：如果你想了解 Redis 的一些概念性知识的话，这本书真的非常不错。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Redis 设计与实现》（豆瓣评分 8.5）：跃哥学习 Redis 的时候，除了看官网，捧在手里的就是这本书啦。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《RabbitMQ实战 : 高效部署分布式消息队列》也是 《RabbitMQ in Action : Distributed Messaging for Everyone》的中文版。最近在学习的时候，也看到老师推荐书单，有位老师就说，《xx in Action》这种书籍是经典书籍，很适合大家看，哈哈，这个不假，后面我还要推荐几本 xx in Action。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Kafka权威指南》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《深入理解Nginx（第2版） : 模块开发与架构解析》&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;Web 框架进阶&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.7453936348408711&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFnf7zw4SyUNbroSOBk65pT7YwHe1ic5CUYuqf13wpibT9waWbMgsp49oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;SpringBoot&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;SpringCloud&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;服务发现（Eureka）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;服务网关（Zuul）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;负载均衡（Ribbon）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;断路器（Hystrix）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;配置管理（Config）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;阿里的 Dubbo&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到这里，很多同学应该都了解了 SSM 框架，然后你会觉得框架也不过这么回事，这里跃哥简单描述下一个轻量级 Web 框架主要具备以下功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;可读取用户自定义配置文件，并以此来初始化框架；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具备 Bean 容器，管理项目的类的对象生命周期；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具备依赖注入，降低类之间的耦合性；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具备 AOP 功能，使项目可进行横向编程，可不改变原有代码的情况增加业务逻辑；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具备 MVC 框架模式。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SSM 是我认识的第一个Web框架，其实Web框架百花齐放，Spring 全家桶又是这些中的明星，尤其是他们家族中的 SpringBoot 和 SpringCloud 框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot 弥补了Spring 配置上的缺点，再也不用为繁杂的 xml 耗费更多的精力，一接触SpringBoot的时候，仿佛打开了我的世界，颠覆了我之前的认知。如果你的项目刚开始，还在积累用户的阶段，那么SpringBoot 是一个好的选择，包括自己练手学习的项目，从SpringBoot 着手再合适不过了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringCloud 是一个微服务架构，能够将项目按照业务分成一个个微服务，每个微服务都可独立部署，服务之间互相协调。当一个项目越来越大时，随之而来的是越来越难以维护，此时将项目拆分成若干个微服务、单独维护、单独部署，也可以降低项目不同业务间的耦合度。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里还得提一个阿里的Dubbo，开源分布式服务框架，并被广泛应用于中国各互联网公司；只需要通过 Spring 配置的方式即可完成服务化，对于应用无入侵，设计的目的还是服务于自身的业务为主。Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然中间Dubbo一度停止更新，但是阿里在2017年重新开始维护，他和Spring Cloud 都是实现微服务有效的工具。不过两者也有侧重点，这个大家可以搜索下，用一部分小伙伴通过台式电脑的比喻来说就是：Dubbo 是品牌机，Spring Cloud 是组装机。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我提供一个描述区别和联系的资料：https://www.cnblogs.com/aspirant/p/9089146.html&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Spring、SpringBoot、SpringCloud&lt;span/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;估计这时候，一些小伙伴开始懵逼了，Spring、SpringBoot、SpringCloud 这三个到底是啥关系，什么和什么呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跃哥这里参考了廖雪峰官网上的简单描述：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring 是 JavaEE 的一个轻量级开发框架，主营 IoC 和 AOP，集成JDBC、ORM、MVC等功能便于开发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Boot是基于Spring，提供开箱即用的积木式组件，目的是提升开发效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么Spring Cloud是啥？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Cloud顾名思义是跟云相关的，云程序实际上就是指分布式应用程序，所以Spring Cloud就是为了让分布式应用程序编写更方便，更容易而提供的一组基础设施，它的核心是Spring框架，利用Spring Boot的自动配置，力图实现最简化的分布式应用程序开发。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Spring Cloud包含了一大堆技术组件，既有开源社区开发的组件，也有商业公司开发的组件，既有持续更新迭代的组件，也有即将退役不再维护的组件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;成就感&lt;/strong&gt;：从基本知识的路上，越走越远，完成了web 框架的学习，以及应用服务类的学习，那么恭喜你，这时候已经掌握了一个应用的基本构成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你已经会很好地构建项目了，也会通过多线程并发实现提升效率的工作；还能通过缓存来完成一定的压力缓解，甚至是秒杀这类功能；还有消息中间件的使用，也是提升程序响应性能、提高用户体验的方式；如果你有机会接触微服务领域，那就能了解限流，分发，负载均衡等等，一般的应用功能肯定就难不到你啦。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你可以尝试自己去构建一个电商类项目，或者一个 OA 类的项目，去巩固自己的知识。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;书单推荐&lt;/strong&gt;：讲完了这几个联系和区别，我这里就隆重推出一套写给Java开发者的经典教程。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6193693693693694&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IF3hjkNvvMAC35wyibuLKLRm4hmvYbhwaDoCLw6bVRH7EgVibe23lmEOjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;图书源自Manning公司经典“小人书”系列，被称为“Spring开发三剑客”，是Java开发者全面掌握Spring框架以及微服务开发的经典书籍。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;《Spring实战 第5版》介绍了Spring 5的核心特性。书很厚，跃哥前段时间刚送了一本给读者。这里我们逐步构建出一个安全的、以数据库作为支撑的Web应用。在这个过程中，你还将会探索反应式编程、微服务、服务发现、RESTful API、部署并掌握专家级的较佳实践，真的是 666 了。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;《Spring boot实战》以自动配置、起步依赖、命令行界面和Actuator这四个核心特性为基础，深入介绍Spring Boot的用法，可以构建出满足你生产需要的工程。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;《Spring微服务实战》顾名思义就是教读者如何使用Java和Spring平台构建基于微服务的应用程序。在构建和部署第一个Spring Cloud应用程序时，将学习如何进行微服务设计。而且这本书里还精心挑选了几个真实案例展示了基于微服务的各种模式，很赞。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;《深入理解Apache Dubbo与实战》关于 Dubbo，就推荐一本豆瓣评分7.0 的书给大家，这也是目前跃哥项目里在用的技术，很欢迎和大家一起交流哦。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;优化进阶类&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;1.0753012048192772&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFJ6OsqOokkBVTMsjUmbly8X0dPFFbY3b43cnzRHbaXCzuiaHE0arfoCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;深入理解JVM虚拟机&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 并发&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Java 性能优化&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;设计模式：创建型（工厂、抽象工厂、生成器、原型、单例），结构型（适配器、桥接、组合、装饰器、外观、享元、代理），行为型（责任链、命令、解释器、迭代器、中介、备忘录、观察者、状态、策略、模板方法、访问者）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;设计原则：SOLID&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;源码分析&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;前面描述的这么多，都是让你成为合格的Java程序员需要成长的地方，学会了那些，此时就可以独立完成一个Demo，独立完成项目组分配给你的开发任务。对的，这仅仅是完成开发任务，不过在我们程序员里，有一个和写作差不多的道理就是：先完成后完善。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一个需求扔给你，经过你的一番分析，你要做的就是写出来，完成功能。有时候仅仅完成是远远不够的，举个简单的例子，我们学习多线程的时候，都会以银行存取钱的例子来举例，确保在多线程的情况下，银行系统能稳定。那么问题来了，多线程换一个角度，融合到你的需求里，你是不是能很好的掌握运用起来呢？这就涉及到Java并发的掌握。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有，如果你的项目使用的人多了，忽然发现用户量使用的高峰期，CPU 过载了；或者是一条请求很慢才返回，甚至出现了请求超时；又或者是你的Java运用看起来运行正常，但是GC日志里发现一堆GC在里面，日志越来越大，有一天程序挂了。。。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当出现这些问题的时候，仅仅是完成代码就不能解决你的困惑了，需要做的就是提升自己进阶方面的知识。比如多线程的合理运用，同步问题，CAP问题；如果出现频繁的读写数据库，甚至是查询慢的情况，还得掌握适当的数据库进阶，比如索引的配置，缓存的使用；针对一些代码上的优化，看看是不是可以合理的运用设计模式参与，天天CRUD，也能玩出花来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总结起来就是，作为一名有追求的工程师，要学会用白盒的视角看待技术，平时在工作中也要多问几个为什么。正所谓，“知其然知其所以然”。你要努力逐步成为团队的核心成员，核心成员意味着能扛事。团队核心往往要能够 Hold 住不同技术领域、切换不同角色，比如架构设计、核心代码开发、紧急线上问题攻关等（&lt;strong&gt;这段话引用自极客时间&lt;/strong&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在极客时间学习了很多Java相关的课程，很多老师都说强调一句话：&lt;strong&gt;源码之下无秘密&lt;/strong&gt;。所以，当我们技术能力成长到一定程度的时候，就需要去学习下源码，非必须，但你想更进一步，这就是要多死磕了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;成就感&lt;/strong&gt;：都已经到这部分了，之前的那些成就感对你来说都是毛毛雨啦。之前的那些，我们能很好地完成领导分配的需求任务，不拖项目的后腿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分学完，那就厉害了。会性能优化，表示你可以解决项目组遇到的难题（前段时间跃哥就帮助一名小伙伴完成双休日CPU 负载 100%降到50%的过程，自己经历过了，成就感可能不仅仅是翻倍，真的）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会阅读源码，那你能做的事情就更多，能解决的问题也更多，举个简单的例子，List个种类很多，有 ArrayList、LinkList、Vector什么时候使用哪个，你肯定能分析出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;设计模式就更不用说了，很多人说学了也用不上，一直在 CURD、你要是能灵活使用设计模式，代码重构不是挺简单的事情？对吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这时候，你可以挑战自己，去慢慢地重构自己之前写的项目，或者是参与项目组更高端的任务中去，让自己的价值更大的发挥出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;书单推荐&lt;/strong&gt;：到了这部分，推荐的书单其实范围就不多了，估计大家都耳熟能详。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5816326530612245&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IF89iboL54TslQ6ian53VctVDqk9TnhIQkHXSHm7YGIyCP9Ll1MMPGCptA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《Java 并发编程实战》，是一本完美的 Java 并发参考手册。这样解释简单明了吧，哈哈&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Java 性能权威指南》了解如何编写出并发的程序，你还需要了解一下如何优化 Java 的性能，这本书比较合适。通过学习，你可以比较大程度地提升性能测试的效果。其中包括：使用 JDK 中自带的工具收集 Java 应用的性能数据，理解 JIT 编译器的优缺点，调优 JVM 垃圾收集器以减少对程序的影响，学习管理堆内存和 JVM 原生内存的方法，了解如何最大程度地优化 Java 线程及同步的性能，等等（这段摘抄耗子叔的《左耳听风》专栏）。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;看完上面那本书，如果还有余力，那么继续深入，《深入理解Java虚拟机（第3版） : JVM高级特性与最佳实践》这本书是周志明老师写的，已经到第三版了，跃哥学习过第二版，学完就飘了，看懂的话，得翻阅好几次。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;设计模式就不解释了，学 Java 你一定要学面向对象的设计模式，经典中的经典自然就是《设计模式》。如果你觉得有点儿难度了，那么可以看一下《Head First 设计模式》。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果你想学好 Java，再去啃一啃《Java 编程思想》也无妨。真是一本透着编程思想的书。上面的书让你从微观角度了解 Java，而这本书则可以让你从一个宏观角度了解 Java。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;架构技能&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br/&gt;&lt;/h5&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.27238805970149255&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFvIFwIFCsic6Ts9HFiciaGdRudpB4k3PXybYicyEa15bGJcXxTjlGEM9UNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2144&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;架构基础：高性能、高可用、可扩展性、低成本、安全、规模&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高性能架构模式：数据库集群（读写分离、分库分表）；高性能 NoSQL、缓存架构；单服务器高性能模式（RPC）；高性能负载均衡&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;高可用架构：CAP 理论、细节；集群和分期；异地多活保障&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可扩展架构：目前主要是微服务架构&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;针对领域深究（比如音视频领域、即时通信领域）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;如何做详细设计&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;到了架构技能这里，其实就是逐步的让自己从成为被直接喂养功能的一方，变成接收需求并分析，甚至是分配功能的一方。这时候要对软件工程的执行结果负责，这包括：按时按质进行软件的迭代和发布、敏捷地响应需求变更、防范软件质量风险、降低迭代维护成本。如果我们机遇好，那可以涉及到一个新系统的诞生；也许我们没有机遇从0到1设计一个新系统，但是我们也可以是将架构从1.0重构到2.0。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;初级架构师就是做这类事情的，基于完善的架构设计方法论的指导来进行架构设计，技术专家更多的是基于经验进行架构设计。这两类都可以，参与的点不一样，但是实现的目标就是如此。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要完成复杂系统的架构设计，包含高性能、高可用、可扩展、海量存储等复杂系统，例如跃哥等会儿说到的第二个项目，就是和老大从零开始基于Netty重新开发了公司应用的聊天服务器系统，从能用到好用，蜕变成长超级快。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;成长为高级架构师需要 10 年以上时间，其典型特征是“创造新的架构模式”，例如：高级架构师与中级架构师相比，典型区别在于“创造性”，高级架构师能够创造新的架构模式，开创新的技术潮流。（这部分跃哥目前还在努力中）&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;书单推荐&lt;/strong&gt;：这部分跃哥也还在探索中，如果推荐的不好，大家多多见谅&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2663690476190476&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFTX4uC2s9kv4icdmXxX9rX2WTwQK7U4Wp5tKXic6YTjpkTO3bLQxmSIpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1344&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《从零开始学架构 : 照着做，你也能成为架构师》这本书是我看的第一本架构书，针对业务系统的架构设计，贴近日常工作，有自己的一套方法论，还是比较实用的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《企业IT架构转型之道：阿里巴巴中台战略思想与架构实战 : 阿里巴巴中台战略思想与架构实战》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《软件架构设计 : 大型网站技术架构与业务架构融合之道》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《架构整洁之道》&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;其他补充&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;2.094155844155844&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFBsOPlI06I83EwbgdJHy5KMar5sibwr1Kr7ffmfO1xQribOE8WveLO2xg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;616&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;开发工具：IDEA、Eclipse、VS Code&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;版本控制工具：Git、SVN&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Docker、K8s&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;命令行工具：iterm2（MacOS）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;网络测试工具: PostMan、PostWoman&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;网络抓包工具&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;持续集成：Jenkins&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Linux：远程连接Linux，Linux的常用命令（非必备）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分和非技术相关，但是在往后的项目使用中，是肯定需要用到的，属于神兵利器吧。比如一开头跃哥说的，初学者不要一开始就是用编译器，但是工作需要，肯定是要选择适合自己的编译器。在我刚开始学习Android的时候，用的还是Eclipse，搭建环境简直了，繁琐的很，后来Google 推出了 Android Studio，大大减少了环境安装的繁琐，让初学者一上来就可以快速使用，提升了效率。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Android Studio 就是基于IDEA 搞出来的，然后我才了解到 IDEA，现在在我的工作中也是离不开了，IDEA 主要有几个方面深深地吸引了我，让我的效率提升很大。很多同学可能还是适应Eclipse，这个就看自己的选择和习惯啦，反正对于写代码来说，是差不多的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译器只是一方面，版本控制是团队协作的利器，除非你的工作是一个人单打独斗，不然这块还是必须要掌握的。作为一名后端，跃哥的习惯就是自己先测试完，再提供给前端调试，那需要一定程度上保证自己代码的健壮性，必要的单元测试，甚至是流程测试都是必须的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的公司有运维部，去服务器上操作这种事情肯定不需要你插手了，这有利有弊吧。其实，在测试环境里自己可以自己上手，为什么呢？因为可以快速的去Linux上抓日志，查看问题，解决完之后，还能快速更新版本，省去和运维沟通的成本。运维有空的时候还好，如果他很忙，那你剩下的就是等待，这就得不偿失了。出包发版本，还可以利用自动化工具，比如Jenkins，效率杠杠滴，用过都说香。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;书单推荐&lt;/strong&gt;：这里推荐这些工具实用类，使用好了，开发效率提升好几个台阶呢。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43907563025210083&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFFPF2fgxmiasEXiab5OYMBfs3ek10Z5NSAh5pgM6ibibtu67MFtrP7ZibqbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;952&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《Git学习指南》 Git 现在是开发的必备技能，无论你是单兵作战还是团队协作，都需要版本控制来协助，不然就会有最后一版，最最最后一版这种类似于毕业设计的效果出来，哈哈。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《鸟哥的Linux私房菜 基础学习篇》鸟哥属于 Linux 的神人，谈到 Linux，没人不知道鸟哥的吧？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《DevOps实践指南》要提升自己运维和持续集成的能力，就看着吧&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《第一本Docker书》&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Kubernetes权威指南 : 从Docker到Kubernetes实践全接触（第2版）》Docker 和 K8S 现在是越来越广泛了，很好地利用起来，运维的工作也能轻松很多&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;其他书单推荐&lt;/strong&gt;：内容里我没有涉及到面试个的部分，学好了上面这些，巩固了知识，面试基本是 OK 的，但是有时候为了能快速掌握，还得突击一下，这里就加点面试相关的吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;还有软件编程其他方面的提升，比如代码规范，重构等等。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4707379134860051&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFC2Qsg766C88mt6UudWibbKHtgpEZnuUPa7niaZN4DQPP8Y4SbMrdm0ww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;786&quot;/&gt;&lt;figcaption&gt;image-20210110132603950&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《剑指Offer：名企面试官精讲典型编程题（第2版）》跃哥周围很多小伙伴，就是看了这本书的知识巩固，成了 offer 收割机&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《代码整洁之道:程序员的职业素养》这本书在我大学的时候老师就不停地开始推荐，工作之后也是一直被推荐，不得不看&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《重构 : 改善既有代码的设计》旧版新版都很 OK，重构是门技术活噢&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《阿里巴巴Java开发手册（第2版）》一出来的时候就风靡了，还顺带出了编译器的插件，你安装了吗？&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《码出高效：Java开发手册》这本书源于影响了全球250万名开发工程师的《阿里巴巴Java开发手册》，作者静心沉淀，对Java规约的来龙去脉进行了全面而彻底的内容梳理，配合着看妥妥的&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;软技能&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;img data-ratio=&quot;0.4201954397394137&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFpogLicFwH4ajEWjusiaadJheYichzAfCCoayTU4FrarQw5vKpicn9oicrrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;软技能这里，我单独拎出来说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要是平时程序员在很多人心中就是沉闷，不善于沟通，甚至还被调侃成没有女朋友。但是，我们不能被这些影响，甚至需要努力去打破这种怪圈。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跃哥确实也见过一些小伙伴沉默寡言，除了默默地写代码，平时很少和别人沟通，除了自己部门的人，其他部门的小伙伴认识的不多，也不会打成一片，这样对自己成长还是会有局限性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跃哥是个活泼开朗的人，也算是部门里和别的部门沟通最频繁的那个人了，无论是工作还是闲聊。这么做的好处是什么？如果你是大公司，一整套系统下来需要涉及到多个部门，你不了解你隔壁部门是做什么的，就会很被动，甚至不停地让领导去协调，领导也很忙的；如果是小公司，和其他部门的人沟通无非就是走几步的事情，再说了程序员群体里女生不多，其他部门女孩子多，万一就成了呢（这个跃哥这里可是见过例子的）；甚至你和别的部门打通了，可以了解他们是做什么的，他们的优势在哪，他们的困难在哪，有没有你需要借鉴或者引以为戒的事，等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;跃哥经历了几家公司，一直都是设备管理员，这个小小的职位，让我打通了很多边界，基本上和公司的人都能打成一片，至于有什么收获？除了老婆是已经找好了，其他的很多东西自己还是可以去接触，去学习，去获取的。比如我的数据库能力，除了平时写代码，就是烦着我们的DBA，我把他掏空。&lt;/p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;适当的前端学习&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.38305084745762713&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFGmxSBfgopnicmw6NkO0W0DQKtg5QfFaxAxNAkrcZVvZtqzhds4rWNCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;590&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;Html、CSS、JavaScript&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;前端框架：Vue、React&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这部分其实没啥好聊的，我们这里主要是Java后段路线的学习，前端就是稍稍带过一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学好前端的好处，就是前面说的，你用工具去测试你的代码；那么有了前端，自己写一个测试的Demo，前端请求下，比你用postman这类工具效率来的高，可以走一整套流程；跃哥会Android，一开始前后端写作，都是我自己写Android Demo完成的，提升了自己的效率不说，也让App开发省了不少事，很多代码，我都帮他们搭好框架了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;SpringBoot + Vue 的组合学习起来，平时自己练练手，写一个网站玩玩，技术人的开心，莫过于此吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;推荐书单&lt;/strong&gt;：这部分的书单推荐就有点超纲啦，哈哈。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.43646408839779005&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFjsboiaB8uFa5aZoYcvSpqGEEFJHZC456j3n8nF8oSWlVKVYGic8a1kXA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;724&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;《JavaScript高级程序设计（第3版）》要学好前端，JavaScript 是必须的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《疯狂HTML 5+CSS 3+JavaScript讲义（第2版）》跃哥学习的就是和本书，学会了基础才能走的更远嘛，对吧&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;《Spring Boot+Vue全栈开发实战》这本书是王松老哥写的，我向他取了好几次经，Vue 框架也是现在前端很流行的框架了，作者还是我们国人尤雨溪，骄傲吧&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;React.js 也是经典的框架，这里属于我的盲区，就不推荐书单了&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h4&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;主导三个项目，让我独当一面&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5831435079726651&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFJboAuqIaReXicLt2EKKqRicgygsuxQuZXyicq5wamiaIPbialV2DtPdHficQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;878&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一个模块是在 1024 程序员节的时候，我有感而发，仔细回忆了我这么多年经历的最重要的三个项目，通过项目的方式和大家聊聊我是如何成长起来的！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在极客时间的《设计模式之美》课程里，作者小争哥说过一句话：&lt;strong&gt;对人一生有很大影响的四样东西：机遇、方向、能力、努力，我觉得它们一起决定了你是否能“成事”&lt;/strong&gt;。我把我的经历总结起来，很应景，就是我遇上了机遇，继而有了能力上的提升，方向上的把控，以及持续努力的行动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回忆目前为止我主要经历了三个项目，仔细归类的话，这三个竟然还都有所不同。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;我参与的第一个项目（Android 客户端开发）&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个项目，是我刚毕业半年之后进到项目组的一个Android App 项目。之前 App 项目的主要业务逻辑是通过 JavaScript 编写的，Android 端调用 WebView 展现即可，所以很多流程都是依赖于 JavaScript 的同学去完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个技术就来了，当时的领导们觉得有必要全部原生化，就让我赶上了重构的时代，说是重构，其实就是对之前在 JavaScript 上的业务迁移到 Android 原生上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;庆幸的是，原有项目一开始做的就比较好，文档之类的相对来说也齐全，做主流业务的同事一直在项目组里，哪怕文档里没有的业务，自己把问题总结起来抽时间麻烦他，也能得到想要的答案，基于业务文档的编码还是相对轻松。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也许老天是注定需要给我一次锻炼的机会，在重构伊始，我的师傅当时的 Android 端负责人因为身体原因休息了一个多月，就让我这个徒弟去接手了当时复杂的，核心的业务，得到了一次快速成长的机会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;抓住第一波机会的我，就这样坑次坑次完成了人生中第一个商业化项目的重构。因为项目很庞大，经历了几个月的加班加点，上架的时候狂松了一口气。几个月的努力终于看到了回报，因为前期准备的材料都很充分，对于业务上的阻碍轻松扫除，这次重构对初入职场的我是很大的能力提升。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;试想一下，一个只在学校里自学 Android 的科班生，第一次接手项目，不是反复的修改Bug，而是参与重大的版本改革，是多么的幸运；锻炼的成长不言而喻，你能相信一开始入行的时候，我连面向对象都一知半解吗？项目的洗礼，可比学校里参考书籍写Demo挑战大多了。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;随之而来的第二个项目（独立完成聊天服务器系统）&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二个项目，是我去新公司之后的项目，做一个即时通信的项目。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我来公司之前，有一个即时通信的在用，是基于 Flash 编写的，从响应速度和稳定性来说都没有让领导和用户满意，当时项目组里没有 Java 的同事（新招一个毕业生之前也没怎么接触过 Java），领导想内部发掘 Java 的员工。我做了一个方向上的选择，所以，我的第二次机遇就在这个时候蹦出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我到公司的时候是 Android 开发，因为当时项目组有3个 Android，没有 Java，领导在征求大家的建议，问有没有想转的，我分析了自己的情况之后，主动要求转 Java，和老大一起去做这个即时通信框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们选择 Netty 框架来进行，用 WebSocket 通信，又一次加班加点的拼命时刻。（&lt;strong&gt;加班并不可怕，有意义的加班都不会考虑下班这件事，只会考虑能给自己带来多少收益，多少收获&lt;/strong&gt;。）这次没有文档，只有代码，也还是有幸运的部分，之前框架的负责人一直在项目组里。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;难点就是，我需要看懂 Flash 的代码，然后一步步迁移过去。此次从零开始，也有一点遗憾，整个框架是老大搭建好的，我的核心任务是在计划时间之内，完全迁移即时通信的功能，尽快把项目跑通，调试上线完成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;完美的人生总是不存在的，所以尽管那么点遗憾，搭建框架的时候我没参与，但不妨碍我对 Netty 的理解，为此我还在掘金上付费购买了 Netty 学习的一个专栏，加深我对 Netty 的理解。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从客户端转到后端，给我最大的感触就是我看项目看的范围更大了，之前客户端只是很片面的看到自己所负责的功能，后端能把整个项目都看透，尤其是业务方面的知识点。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，因为初次参与后端，第一次上线，给我当头一棒，现实着实把我教育了一番。后端编码和客户端还是存在不同，因为我的不熟练，在项目上线的第一个晚上，因为扛不住峰值的压力，把网站给瘫痪了，业务宕机了一个小时，幸亏老大帮我解决。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这么严重的线上事故，给我当头一棒，后端完成代码只是第一步，线上安全运行才刚刚开始挑战。这也是让我坚定，在做业务的同时，需要持续的精进自己的技术，比如数据库的频繁读写，缓存的使用，缓存雪崩、击穿的处理等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;正在进行中的项目&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;第三个项目，经历了第一个版本的迭代开发，以及第二个版本的重构（正在进行中）。&lt;span&gt;从别的团队手里接收过来，没有文档，纯靠自己熟悉。&lt;/span&gt;&lt;span&gt;这次的挑战更大，没有任何资料，只有App接口，参考接口一个个去熟悉项目，重构项目。&lt;/span&gt;&lt;br/&gt;&lt;/h5&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是我的1.0项目，我花了两周的时间写了35+的接口，从开发到测试，加班加点完成，把我累的。我之前也说了，天天CURD 也能玩出花来，这次这么紧急的情况下，我先完成了第一个版本，从一定程度上没有拖项目的后腿，而且从写代码的时候，记录了一些需要优化的点，以及需要改善的点。因为是别人手里接手的，也是一个纯外包的项目，和后期的规划差了很多，就这样，阴差阳错，我们开始搞了第二个版本的迭代，也就是最近在做的 1.0 到 2.0 的升级。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这次升级，把一个前后端结合在一起的臃肿的程序，拆分成了轻量级的架构；把一些冗余的数据库进行了改进，删除优化了很多表结构信息，做了一些查询的索引；最最最大的改变就是使用了微服务来完成重构。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这一整个过程，除了业务代码是现成的，人都是从零开始，又是一次重大的机遇摆在我面前，不抓住那是傻子。很多群里的同学，想参与项目还没机会呢，我总是时不时地能碰到好的机会，来提升我的能力，或者这就是我的运气吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;经历过这次，我就不怕那种丢给你一堆代码，甚至需求文档都没有的情况下，如何在保证项目正常运转的情况下，更好的做持续重构。在项目重构中熟悉业务，在重构中巩固Java编程技能，那么在艰难的外部环境下，至少你是项目组那位不可或缺的人，想裁你的时候，还得考虑考虑呢，是吧。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;项目经历结语&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;正如我开头说的，总结我简短的几个项目经历（其实还有几个琐碎的项目，这里就省略了），就是我遇上了机遇。当每次机会来临的时候，放到你的面前，就看你怎么抓住了。一开始我是霸王硬上弓，但是到了后面就是不断地通过自己的学习，自己的努力，把能力提升上来；然后等待下一波机会的到来，或者是根据你的选择，去创造另一个机会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三次的经历，从我抓住机遇开始，后面又做了一次选择，当然加上自己平时的努力（平时多看书、多学习、多实践还是必要的）。不过跃哥的性格上目前有点刚，甚至有时候觉得自己做得很好，同事都没我强，我有天下无敌的感觉，导致我蒙蔽了双眼，还在努力尝试改进中。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;能力提升你要怎么学&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6182795698924731&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFZncG22RzoAPnoyxspWmMiaylznkalicPKuibL3rUYHU5p9U62AOMBKRNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;744&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;还没开始实践就有一堆烦恼&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Java开发也好，C语言也罢，还是其他的语言学习，都是需要实践的；这个你就把自己当成一名技术工人，泥瓦工也是经过千锤百炼才能造房子；包装工也是经历过千万次的包装才能做到得心应手；语言组织也是如此，作文就是一字一句积累起来的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编程是一门技术活，不是靠单纯的体力活动能胜任的，所以想提升能力方面这个无他，唯有熟能生巧。写代码这个要求太低了，还远远不够，我们还是想让自己更加优秀，那就需要做更多的努力&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我经常和群友说，编程到最后并不是写代码，写代码是最最容易的事情。在写代码之前，还有需求分析，技术选型（选数据库，选中间件等），架构设计，流程设计，算法选择，这些都完成了，那你把这些转换成代码就是水到渠成。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里只是给出一个最终的目标，针对初学者，一开始不能好高骛远，也不能被困难所吓倒。我上面给了学习路线，你看明白了吗？所以，你现在心里有数，有没有被吓到，如果没有，那么请你仔细阅读《Java核心技术卷1》，把上面的基础知识都先掌握，出现的代码都在编译器上实践，一行一行编写，理解他。如果已经被打倒，那后面就没有什么事了，好好选择一个更好的出路即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;等基础知识都慢慢地学会，然后再去找一些小Demo，比如说实现一个计算器，就能检验你的学习成果。写代码是一个循序渐进的过程，基础先学会，逐渐就有成就感，那后面的困难就迎刃而解，否则等到后面学习算法，项目时间，困难重重。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h5 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/h5&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;主动学习和被动学习&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5617740232312566&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/iccZYC99kbVBXksgujsj3YVZd0nkBV2IFrozjVwoWibYfrFCj5dic8T00nezFFiar57icQjbUbpDfNl905viaHHV8xNQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1894&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;-- 以下部分参考极客时间《左耳听风》专栏&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;人的学习分为「被动学习」和「主动学习」两个层次&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;被动学习：如听讲、阅读、视听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里可以理解出来，你听别人讲，或是自己看书，或是让别人演示给你，这些都不能让你真正获得学习能力，因为你是在被别人灌输，在听别人说，在看别人的成果。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只有你开始自己思考，开始自己总结和归纳，开始找人交流讨论，开始践行，并开始对外输出，你才会掌握到真正的学习能力。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习不仅仅是为了知道，而更是为了思考和理解。在学习的过程中，我们不是为了知道某个事的表面是什么，而是要通过表象去探索其内在的本质和原理。真正的学习，从来都不是很轻松的，而是那种你知道得越多，你的问题就会越多，你的问题越多，你就会思考得越多，你思考得越多，你就会越觉得自己知道得少，于是你就会想要了解更多。如此循环，是这么一种螺旋上升上下求索的状态。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在学习的过程中，我们要不断地问自己，这个技术出现的初衷是什么？是要解决什么样的问题？为什么那个问题要用这种方法解？为什么不能用别的方法解？为什么不能简单一些？……&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些问题都会驱使你像一个侦探一样去探索背后的事实和真相，并在不断的思考中一点一点地理解整个事情的内在本质、逻辑和原理。一旦理解和掌握了这些本质的东西，你就会发现，整个复杂多变的世界在变得越来越简单。你就好像找到了所有问题的最终答案似的，一通百通了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;学习是为了改变自己的思考方式，改变自己的思维方式，改变自己与生俱来的那些垃圾和低效的算法。总之，学习让我们改变自己，行动和践行，反思和改善，从而获得成长。&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;全篇总结&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;1.1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/165jdibJnGcUAxqeh4b1mTZjIzBhOXg6tjYtictZXc0Bllz9LPwufM6wEXzmAT1F2GCXN30GuY2Z3nicacDEqPl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;80&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总算和大家分享完了，这里我简单的总结一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，就是都关心的问题，我选择了Java，那么我以后能做什么。其实Java能做的很多，只是在现阶段，我们通过编程语言排行榜也能看到，Java是稳居前三，说明他有庞大的用户群体，那么就代表着网络上有海量的 Java 学习资料，良好的社区环境，优秀的解决方案，以及超级多的框架学习，你丝毫不用担心自己找不到问题的解决方案，找不到学习的路径，是在找不到，咱们还有星球呢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次就是如何学习，我列举的 Java 学习路线也是根据后端的学习路线来，后面经过补充，进阶部分也写了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三，就是学习方法，怎么学。说实话，编码一直都是取决于个人的学习情况以及自律能力。很多人在学校里努力，在校招的时候就能有一个好的offer，有些在学校里没能坚持下来，可能毕业之后就放弃这条路了；还有些是一开始觉得很感兴趣，后来发现自己不适合，要么学校里选择转专业，要么出来之后转产品，转实施等也算是改行。那么，就是两个结果，用篮球季后赛的术语就是 &lt;strong&gt;Win or Go Home&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;判断自己是否有毅力学习下来，可以参考下我在上面的建议，当然，如果小伙伴们有更好的建议，给我留言，让大家一起交流交流。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;千万不要什么都没去实践，但是一直在担心担心，担心自己不能写代码。如果你不开始实践，怎么知道自己是不是适合，是不是喜欢，是不是会走这条路呢，对吧。其实我刚读大一，接触 C 语言的时候，尤其是到了指针，链表，想过放弃，但是最后我断了这个念头，我要是不写代码，我大学不是白考了，转专业？现实点，能转专业的，都是班里的女生，死磕学习成绩，名额都抢光了。那么你还能怎么办，硬着头皮继续吧。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这样，一直到毕业，我在实验室里看着书，敲着代码，大家的暑假有两个月，我的暑假就只给自己一个月，另外一个月都在学校里渡过，就是为了让自己能不辜负父母的付出。后来，反正就是不断的努力，成长，以及一定的机遇抓住就好。&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;参考内容：&lt;span/&gt;&lt;/h4&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;极客时间左耳听风、设计模式、Java专题、架构专题等专栏&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;廖雪峰 Java 教程：https://www.liaoxuefeng.com/wiki/1252599548343744/1305158055100449&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;知乎关于Java的部分资料&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;p&gt;后台回复 &lt;strong&gt;&lt;span&gt;学习资料&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;领取学习视频&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.511002444987775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/WRLYshvT39zWmaics1nAAwT4NCD77uDcf6vcXE1DAHybibTY0V3XDmf4YX1q9qYibIwz9xmRVTkEvTjP87gaKEZrQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如有收获，点个在看，诚挚感谢&lt;/span&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>