<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>c41c630df80a491ec0784cd5189f9a7f</guid>
<title>JuiceFS 在数据湖存储架构上的探索</title>
<link>https://toutiao.io/k/2jcmqzq</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本文根据 Juicedata 技术专家高昌健在 DataFunSummit 大数据存储架构峰会所作主题演讲《JuiceFS 在数据湖存储架构上的探索》整理而成，现场视频可点击&lt;a href=&quot;https://www.bilibili.com/video/BV1hS4y1m7CW&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;大家好，我是来自 Juicedata 的高昌健，今天想跟大家分享的主题是《JuiceFS 在数据湖存储架构上的探索》，以下是今天分享的提纲：&lt;/p&gt;&lt;p&gt;首先我会简单的介绍一下大数据存储架构变迁以及它们的优缺点，然后介绍什么是 JuiceFS，其次的话会再重点介绍一下关于 JuiceFS 和数据湖的一些结合和关联，最后会介绍一下 JuiceFS 和数据湖生态的集成。&lt;/p&gt;&lt;h2 id=&quot;大数据存储架构变迁&quot;&gt;大数据存储架构变迁&lt;/h2&gt;&lt;p&gt;纵观整个大数据存储架构的变迁，可以看到有非常明显的三个阶段：第一个阶段就是从最早的 Hadoop、Hive 等项目诞生之后，有了&lt;strong&gt;数据仓库&lt;/strong&gt;（Data Warehouse）的概念。随着数仓的逐步发展，同时有了云的诞生，对象存储的诞生，以及大数据与 AI 的时代到来之后，&lt;strong&gt;数据湖&lt;/strong&gt;（Data Lake）这个概念就被凸显了出来。最近两三年有一个新的概念，或者是说到了一个新的阶段叫做&lt;strong&gt;湖仓一体&lt;/strong&gt;（Lakehouse）。传统数仓大家都比较了解，今天会着重看一下后面这两个阶段，也就是数据湖和湖仓一体。&lt;/p&gt;&lt;h3 id=&quot;为什么要有-数据湖&quot;&gt;为什么要有「数据湖」？&lt;/h3&gt;&lt;p&gt;数据湖很重要的一个诞生契机，其实是解决数据孤岛（Data Silos）问题。产生数据孤岛的根本原因，来自于不同的业务或者不同团队，因为一些历史原因造成了数据之间其实是一个孤岛或者互相之间没有办法去做连接。&lt;/p&gt;&lt;p&gt;随着不同业务的引入，在企业内部数据的格式会变得越来越多样，除了最早的传统的结构化数据以外，会发现还有很多半结构化的甚至是非结构化的数据。这些半结构化和非结构化数据也希望能逐步引入到整个公司的数据管理或者运维里面来，传统数仓的架构或者说存储的模型此时就没有办法去满足这种多样性的数据格式的存储需求。&lt;/p&gt;&lt;p&gt;然后第三点是分散的数据管理，这点其实是跟第一点数据孤岛也是有关联的。因为你的数据是分布或者分散在很多不同的地方的，数据的管理或者一些权限的控制上，也会相对的分散。这个时候你如果要去针对不同的业务与不同的团队去做管理，也会是一个比较大的工作量。&lt;/p&gt;&lt;p&gt;第四点是存储与计算的耦合（简称「存算耦合」），也是跟传统 Hadoop 的架构有关，传统的像 HDFS、YARN 的架构，是针对存算耦合架构来设计的，但在对于现在基于公有云的大数据架构来说，这种存算耦合的架构就比较缺乏弹性了，不管是在运维的弹性上，还是对成本的控制上。&lt;/p&gt;&lt;p&gt;最后一点随着 AI 行业的发展，在机器学习或深度学习这块的数据加入进来之后，也是希望能够在数仓或者说整个大数据架构里面为基于机器学习或深度学习的业务提供更好的支持。不仅是存储数据，例如还需要对接深度学习的框架，所以就要提供一些接口的支持，比如 POSIX 等对算法工程师更友好的方式，而不是传统的通过 SQL 或一些其它的方式来提供给业务团队。&lt;/p&gt;&lt;h3 id=&quot;什么是-数据湖&quot;&gt;什么是「数据湖」？&lt;/h3&gt;&lt;p&gt;这里引用&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_lake&quot;&gt;维基百科&lt;/a&gt;上的一句简介：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A data lake is a system or repository of data stored in its natural/raw format, usually object blobs or files.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其中一个比较重要的定义是 natural/raw format（原始格式），跟传统数仓比较大的区别是我们会倾向于把数据以原始的格式先存到数据湖里面来。数仓其实也还是存在的但它是一个后置的过程，为了实现这样一个数据湖，最根本的是需要一个足够便宜且能够支持海量数据规模的底层存储。目前看下来在云上的话，对象存储是一个非常好的选择，它既做到了便宜可靠，同时也能够支持海量的数据。但对象存储也不是一个绝对的方案，后面会详细地去做一些比较。&lt;/p&gt;&lt;p&gt;简单来说就是「Everything in one place」，意思是所有数据都先放到数据湖里面来，你要做数仓也好，做一些其他的后置 ETL 也好，那是下一个阶段的事情，但前提是要把所有的数据都放在一起。「后置 ETL」的意思是说 ETL 依然存在也依然需要，只是它变成了一个后置的流程。因为用到了对象存储，以及存算分离的架构，所以在整个的架构设计上也会更加的云原生 。&lt;/p&gt;&lt;h3 id=&quot;为什么要有-湖仓一体&quot;&gt;为什么要有「湖仓一体」？&lt;/h3&gt;&lt;p&gt;在整个数据湖的架构里面数仓依然是存在的 ，但是它在整个 pipeline 的阶段被后置了，必然就会带来一些数据的滞后。同时传统的像 Hive 这些组件，其实你要做到近实时或者基于 Hive 来做增量的数据更新是比较麻烦的，特别是如果你要把分区（partition）的时间窗口缩得很短的话。&lt;/p&gt;&lt;p&gt;之前提到的机器学习和深度学习的结合问题，在数据湖阶段也还是存在。虽然有了数据湖，但对于整个深度学习这块的支持也还是不太够，所以在湖仓一体这个阶段依然是需要解决的一个问题。&lt;/p&gt;&lt;p&gt;然后就是数据重复拷贝和重复 ETL，因为 ETL 是后置的，数仓也是后置的，所以有很多数据有可能是会从湖里面再同步或复制到数仓里面，就会带来一些数据的重复拷贝或者重复 ETL，重复两次甚至三次都有可能。&lt;/p&gt;&lt;p&gt;最后就是基于对象存储这样的存储类型，希望能够提供更多高级特性的支持，比如 ACID 事务、多版本数据、索引、零拷贝克隆等。&lt;/p&gt;&lt;h3 id=&quot;什么是-湖仓一体&quot;&gt;什么是「湖仓一体」？&lt;/h3&gt;&lt;p&gt;湖仓一体有一些关键的因素，其中第一个是需要一个统一开放的底层文件格式，这个格式比如说可以是 Parquet、ORC 等业界公认的格式。第二点我们需要一个开放的存储层，具体来讲是类似 Delta Lake、Iceberg、Hudi 的一些开源组件。第三点是要有开放的计算引擎集成，不管你使用哪一种存储，都需要能够支持上面多种多样的计算引擎，而不是把用户或者业务团队限定在某一个引擎里面，不管用 Spark 也好，Presto 也好，用其它的商业引擎也好，可以做到多样化的支持。最后一点就是和深度学习框架的结合，这里拿 Uber 开源的 &lt;a href=&quot;https://github.com/uber/petastorm&quot;&gt;Petastorm&lt;/a&gt; 项目举例，Petastorm 是为 TensorFlow、PyTorch 等框架提供 Parquet 格式读写支持的组件，目前初步做到了一些对深度学习框架的支持。&lt;/p&gt;&lt;h2 id=&quot;juicefs-简介&quot;&gt;JuiceFS 简介&lt;/h2&gt;&lt;p&gt;JuiceFS 一个开源的云原生分布式文件系统，为云环境设计，提供完备的 POSIX、HDFS 和 S3 API 兼容性。使用 JuiceFS 存储数据，数据本身会被持久化在对象存储（例如 Amazon S3），相对应的元数据可以按需持久化在 Redis、MySQL、TiKV 等多种数据库中。目前在 GitHub 上已经有超过 5000 个 star，也有超过 50 个外部贡献者来一起参与这个项目的维护。&lt;/p&gt;&lt;p&gt;JuiceFS 从架构设计上来说，更倾向于开放结合的态度。众所周知文件系统里面最重要的一个组件就是元数据引擎，JuiceFS 希望能够结合已有的开源项目，比如说 Redis、SQL 数据库、分布式 KV 等，把它们纳入进来作为整个 JuiceFS 架构里面的一个组件。在数据存储方面，目前 JuiceFS 也已经支持超过 30 种底层的存储系统，除了最主要的对象存储，还支持像 Ceph、MinIO、Ozone 这样开源的组件。同时 JuiceFS 也是一个跨平台的组件，在 Linux、macOS、Windows 上也都可以直接原生的运行。&lt;/p&gt;&lt;p&gt;在 Kubernetes 的环境里，JuiceFS 提供了原生的 CSI Driver，可以直接通过 Kubernetes 的 PV 或 PVC 的方式直接 mount 到 pod 里。最后就是一些更高级的特性，比如说数据缓存、加密、压缩、回收站、配额等，目前 JuiceFS 的开源社区里也有很多的团队和公司已经在生产环境中使用，例如小米、理想汽车、Shopee、知乎、火山引擎、网易游戏、携程等。&lt;/p&gt;&lt;p&gt;上图主要分了三块，一个是 Metadata Engine 也就是文件系统的元数据引擎，所谓元数据引擎就是要存储整个文件系统的元信息，比如文件的名字、大小以及权限信息和目录结构等。这里 JuiceFS 更希望和一些成熟的开源的并且大家日常会使用到的数据库做结合，所以上图列举了一些常用的数据库，都可以作为 JuiceFS 的元数据引擎。&lt;/p&gt;&lt;p&gt;然后 Data Storage 部分是 JuiceFS 底层需要依赖的一个数据存储，我们没有重复造轮子，而是选择了站在已有存储的肩膀上。云上的话对象存储是一个非常好的基础设施，大家都知道它有很多好处，例如低成本、高吞吐、高可用性。如果你是在 IDC 或者机房里面也可以有类似的基础设施提供，JuiceFS 作为使用方，可以直接把这些 Data Storage 对接上，并原生地把它作为整个文件系统的底层数据存储。&lt;/p&gt;&lt;p&gt;再上面的话就是客户端（Client），也就是 JuiceFS 的用户会直接接触到的这部分。通过不同的接口，让用户在不同的环境与不同的业务里面都可以访问到 JuiceFS，用户不用担心在不同的使用环境下会出现一些不一致的情况，只需要关心用哪个最熟悉的接口去访问就好了。&lt;/p&gt;&lt;p&gt;上图展示的是一个文件通过 JuiceFS 最终存储到对象存储上的一个流程，JuiceFS 会对一个文件做三个级别的拆分，就是最右边这一列的 Chunk、Slice、Block 三个级别。&lt;/p&gt;&lt;p&gt;首先 JuiceFS 默认会按照固定的 64MB 大小，把一个文件按照这个粒度来拆分成很多的 Chunk，然后每个 Chunk 内部的话又可能会有很多这种不同个数、不同长度的 Slice 来构成，每个 Slice 最终又会由很多定长的 Block 来构成。Block 的大小用户是可以配置的，默认情况下推荐使用 4MB 作为 Block 的大小。最终 Block 经过可选的比如压缩或者加密之后，再上传到对象存储里面，所以如果你直接去看对象存储里存储的数据的话，是不会看到原始文件的。比如说你的原始文件可能是 1G 大小的文件，但其实在对象存储上去看的话，会看到很多小的 4MB 的 Block。&lt;/p&gt;&lt;p&gt;需要特别指出的一点是如果文件本身就是小于 4MB 的，比如一张图片只有 100KB，这时 JuiceFS 是不会补齐到 4MB 的，还是会按照它原始的大小，文件是 100KB 最终存储到对象存储上也还是 100KB，不会补齐，不会占用额外的空间。&lt;/p&gt;&lt;p&gt;最后讲一下 JuiceFS 为什么要对文件存储格式去做分级。首先是需要基于对象存储来支持一些高级的特性，比如说随机写入；其次对于不同的读写访问模式，通过分块之后也可以提升性能，比如说在并发写入或并发读取上能够做到更好的性能优化。&lt;/p&gt;&lt;h3 id=&quot;juicefs-与-hdfs-对象存储的比较&quot;&gt;JuiceFS 与 HDFS、对象存储的比较&lt;/h3&gt;&lt;p&gt;从存储规模上来说，其实大家都知道 HDFS 的 NameNode 在单 namespace 上是有存储上限的，一般来说到亿级别这个量级就差不多了，但如果你要存储更多的数据，你可能要做 ​​federation 或者说一些其它的方式去扩展。对于对象存储和 JuiceFS 来说，是可以非常轻松的支撑到百亿级甚至更大的存储规模。&lt;/p&gt;&lt;p&gt;然后在一致性上对于文件系统来说，之前不论使用 HDFS 或者说其它的文件系统，默认情况下，都是希望文件系统提供的是强一致性的保证。但是因为对象存储的兴起之后，会发现最终一致性反而会是一个更常见的情况。不过目前也有一些对象存储，比如 S3 已经支持了强一致性。&lt;/p&gt;&lt;p&gt;在容量管理上 HDFS 是需要手动扩缩容的方式，所以你没有办法在云上做一个非常弹性的容量管理，但是反观对象存储和 JuiceFS 的话，在容量管理上是可以做到非常弹性的，按量付费，大幅节约了存储成本。&lt;/p&gt;&lt;p&gt;其它几个特性对于大数据场景也是比较关键的，比如说原子重命名、List 性能、随机写、并发写等，这些特性对于传统的 HDFS 都是默认支持的，但对于对象存储来说，有些特性它是部分支持的，有些特性完全无法支持。因为 JuiceFS 本身是一个完备的文件系统，所以这些特性都是具备的。&lt;/p&gt;&lt;p&gt;缓存加速这块，其实在 HDFS 或对象存储上目前都还是不具备的一个功能，需要结合一些外部组件来实现，但 JuiceFS 本身已经内置了这个特性。&lt;/p&gt;&lt;p&gt;最后就兼容性来说，对象存储可以用一些社区的组件去通过 HDFS 的 API 访问，但目前暂时无法做到完全的兼容。包括 POSIX 这块，虽然你可以用到如 S3FS 或者一些其它组件以 POSIX 的接口来访问对象存储，但它也只能达到一个部分兼容的状态。对于 JuiceFS 来说是完全兼容 HDFS 和 POSIX 接口的。&lt;/p&gt;&lt;p&gt;这里我们拿 HDFS 里面的一个组件 NNBench 做了元数据的性能比较，上图对比的是元数据请求延迟，越低越好。可以看到对象存储与 HDFS、JuiceFS 来相比的话，在延迟上是可以差到一个甚至多个数量级的，这个也很好理解，元数据请求对于对象存储来说本身就是比较大的开销。反过来看 JuiceFS 和 HDFS 的话，其实是可以做到旗鼓相当的性能表现的。&lt;/p&gt;&lt;p&gt;另一个对比是元数据请求吞吐，越大越好，在某些场景下 JuiceFS 甚至可以做到相较 HDFS 有更好的性能表现，而对象存储则会相差很多。&lt;/p&gt;&lt;h2 id=&quot;juicefs-与-lakehouse&quot;&gt;JuiceFS 与 Lakehouse&lt;/h2&gt;&lt;p&gt;通过观察 Lakehouse 的特征，我们首先发现 Lakehouse 对于文件系统的依赖依然是存在的，如上文提到的 List 性能、原子重命名、并发写、强一致性等。其次，对象存储在使用上是有一些限制的，比如对象存储基于 key 前缀的请求限制，也包括对象存储的 API 请求是有成本的，特别是在大数据场景，API 请求成本还是蛮高的。最后就是缓存加速对于性能的影响。&lt;/p&gt;&lt;h3 id=&quot;lakehouse-对文件系统的依赖&quot;&gt;Lakehouse 对文件系统的依赖&lt;/h3&gt;&lt;p&gt;首先我们看一下 Lakehouse 对于文件系统的依赖。这里可以看下面这个表格，这个表格是直接从 Hudi 的&lt;a href=&quot;https://hudi.apache.org/docs/metadata&quot;&gt;官方文档&lt;/a&gt;里面摘抄过来的，Hudi 社区之前统计过直接用对象存储，并根据不同的文件规模或者文件数来做 List 的性能比较。&lt;/p&gt;&lt;p&gt;可以看到从 100 到 100K，随着文件数的增多，整个对象存储 List 的开销是逐步增大的，到后面已经变成了线性增长。所以在管理大量文件或者数据时，List 的性能开销无法忽视。&lt;/p&gt;&lt;p&gt;反过来看 HDFS 或 JuiceFS 这类有独立的元数据管理的文件系统，List 请求的开销其实是非常小的，可以做到毫秒级甚至更快，微秒级都是有可能的。正因为整个文件系统元数据管理对 List 非常友好，在一个很短的时间内就可以完成整个目录的 List。还有更多文件系统独有的特性，比如原子重命名、并发写、强一致性等都是非常关键的特性。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Specifically, Delta Lake relies on the following when interacting with storage systems:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Atomic visibility: There must a way for a file to visible in its entirety or not visible at all.&lt;/li&gt;&lt;li&gt;Mutual exclusion: Only one writer must be able to create (or rename) a file at the final destination.&lt;/li&gt;&lt;li&gt;Consistent listing: Once a file has been written in a directory, all future listings for that directory must return that file.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;上面这段话是从 Delta Lake 的&lt;a href=&quot;https://docs.delta.io/latest/delta-storage.html&quot;&gt;官方文档&lt;/a&gt;上摘抄过来的，在这里就着重提到了对 Delta Lake 来说它依赖底层的存储系统需要具备的几个特性，比如说原子性，其中就包括并发写、原子重命名等，然后是一致性的 Listing，这是对于文件系统强一致性的要求。同样的，以上这些特性对于不管是 Hudi 或者 Iceberg 来说也都有类似的需求。所以对于文件系统的特性需求，在 Lakehouse 的组件上都属于一个隐性的，或者说最基本的依赖，如果对象存储或其它系统满足不了某些特性的话就会带来一些限制。比如说 Delta Lake 在用 S3 的时候，虽然可以并发读数据，但是无法支持并发写，只能在单个 Spark driver 里写数据来保证事务。&lt;/p&gt;&lt;h3 id=&quot;对象存储的-api-请求限制和成本&quot;&gt;对象存储的 API 请求限制和成本&lt;/h3&gt;&lt;p&gt;提到对象存储的 API 请求限制和成本的话，这里我们以 S3 为例，在 AWS &lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/s3-request-limit-avoid-throttling&quot;&gt;官方文档&lt;/a&gt;上其实也已经明确告知用户，针对每个 prefix（这里 prefix 的定义就是存储到 S3 上的每一个对象的 key 的前缀）的 GET 请求最大 QPS 是 5500，PUT 请求的最大 QPS 是 3500，对于常规应用而言这个请求限制其实是没问题的，但是对于大数据场景来说，QPS 限制就会影响整体计算任务的性能甚至是稳定性了。对此 Iceberg 提出了一个&lt;a href=&quot;https://iceberg.apache.org/docs/latest/aws/#object-store-file-layout&quot;&gt;优化方法&lt;/a&gt;是在 key 的最前面加上一个随机的哈希值，目的就是为了分散请求的 prefix，使其不会那么快地触碰到针对单个 prefix 的 QPS 限制。&lt;/p&gt;&lt;p&gt;对于 JuiceFS 来说，设计上已经天然具备分散请求 prefix 的理念。因为所有的文件数据最终上传到对象存储的时候，都会被切分成 4MB 的 block。每个 block 在对象存储上的 key 其实是一个多级的 prefix 来构成，它不是一个单级的目录结构。比如说 &lt;code&gt;0/1/123_0_1024&lt;/code&gt; 这个 key，是根据每个 block 的 ID 做了两级 prefix，然后不同的 block 会分散到不同的 prefix 里面来。&lt;/p&gt;&lt;p&gt;然后对于同一个文件来说，如果它是个大文件的话，它的所有 block 也是分布在不同的 prefix 里面的。所以虽然看起来是访问同一个文件，但是对于对象存储来说你访问的是不同的 prefix，所以这也是 JuiceFS 给文件分 block 的好处，也是对于对象存储 API 请求限制的一个优化设计。&lt;/p&gt;&lt;p&gt;其次在对象存储请求成本上，就 JuiceFS 而言，对于对象存储 API 的依赖其实非常少，只有 &lt;code&gt;GetObject&lt;/code&gt;、&lt;code&gt;PutObject&lt;/code&gt;、&lt;code&gt;DeleteObject&lt;/code&gt; 这三个 API，剩下的所有 API 都不依赖。所以接入 JuiceFS 数据存储的存储系统，只需要提供这三个 API 就够了，所有的元数据请求都不会经过对象存储，这部分的 API 请求成本就省掉了。&lt;/p&gt;&lt;p&gt;刚刚提到这三个 API 其实主要是用来读写或者删除数据用的，其中比如 &lt;code&gt;GetObject&lt;/code&gt; 是可以通过后面会提到的「缓存加速」做进一步的优化，JuiceFS 会自动地把频繁访问的数据缓存到本地，这样能够大幅减少热数据对于对象存储 API 请求的依赖。相比直接访问对象存储， API 请求成本会降低很多。&lt;/p&gt;&lt;h3 id=&quot;缓存加速&quot;&gt;缓存加速&lt;/h3&gt;&lt;p&gt;第三点就是刚刚提到的缓存加速，这里我们拿一个 benchmark 为例，这个 benchmark 使用业界最常见的 TPC-DS 数据集，计算引擎用的是 Presto，数据采用了两种格式，分别是 ORC 和 Parquet。&lt;/p&gt;&lt;p&gt;可以看到在缓存充分预热的情况下，JuiceFS 的整体性能表现是可以做到与 HDFS 相当的，所以这也是缓存加速能够体现的一些优势，特别是在存算分离的架构下。&lt;/p&gt;&lt;h2 id=&quot;juicefs-与数据湖生态&quot;&gt;JuiceFS 与数据湖生态&lt;/h2&gt;&lt;p&gt;首先 JuiceFS 社区给 Hudi 贡献了&lt;a href=&quot;https://issues.apache.org/jira/browse/HUDI-1139&quot;&gt;一个 PR&lt;/a&gt; 可以在 Hudi 内原生支持 JuiceFS ，这个特性已经在 Hudi v0.10.0 及以上版本支持。具体使用方法可以参考 Hudi 的&lt;a href=&quot;https://hudi.apache.org/docs/jfs_hoodie&quot;&gt;官方文档&lt;/a&gt;。这里只是拿 Hudi 举了个例子，其实用 Iceberg、Delta Lake 结合 JuiceFS 也是类似的，JuiceFS 本身已经提供了 HDFS 完全兼容的 API，任何使用 HDFS 的地方都可以直接替换为 JuiceFS。&lt;/p&gt;&lt;p&gt;另外 JuiceFS 跟 AI 社区一个比较流行的开源组件 &lt;a href=&quot;https://github.com/fluid-cloudnative/fluid&quot;&gt;Fluid&lt;/a&gt; 也有一些结合。Fluid 是一个开源的以 Kubernetes 环境为主的数据集编排以及访问加速的组件。目前它主要用在 AI 的场景，但是其实整个 Fluid 社区也想要跟大数据场景做一些结合。Fluid 主要由阿里云的团队以及南京大学的一些团队来维护和开发，它也是 CNCF 里的一个沙盒项目。&lt;/p&gt;&lt;p&gt;JuiceFS 社区和云知声团队一起给 Fluid 社区贡献了&lt;a href=&quot;https://github.com/fluid-cloudnative/fluid/pull/1047&quot;&gt;一个 PR&lt;/a&gt;，把 JuiceFS 作为一个 runtime 集成到 Fluid 中。如果用 Fluid 来做 AI 模型训练，就可以直接原生地使用 JuiceFS 作为其中的一个后端存储或者说加速组件，帮助你更快地在 Kubernetes 里把模型训练任务跑起来。大家有兴趣的话，可以查看 Fluid 的&lt;a href=&quot;https://github.com/fluid-cloudnative/fluid/blob/master/docs/zh/samples/juicefs_runtime.md&quot;&gt;官方文档&lt;/a&gt;了解一下。&lt;/p&gt;&lt;p&gt;以上就是我今天的分享，感谢大家！&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>e221f1288aceb28055ea5b33f39ca044</guid>
<title>深度解密基于 eBPF 的 Kubernetes 问题排查全景图</title>
<link>https://toutiao.io/k/gxi9f3b</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;作者 | 李煌东&lt;/section&gt;&lt;section&gt;来自 | InfoQ&lt;/section&gt;&lt;section&gt;
&lt;span&gt;1&lt;/span&gt; 当 Kubernetes 成为云原生事实标准，可观测性挑战随之而来&lt;/section&gt;&lt;p&gt;当前，云原生技术以容器技术为基础，通过标准可扩展的调度、网络、存储、容器运行时接口来提供基础设施。同时，通过标准可扩展的声明式资源和控制器来提供运维能力，两层标准化推动了开发与运维关注点分离，各领域进一步提升规模化和专业化，达到成本、效率、稳定性的全面优化。&lt;/p&gt;&lt;p&gt;在这样的大技术背景下，越来越多的公司引入了云原生技术来开发、运维业务应用。正因为云原生技术带来了越发纷繁复杂的可能性，业务应用出现了微服务众多、多语言开发、多通信协议的鲜明特征。同时，云原生技术本身将复杂度下移，给可观测性带来了更多挑战：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5664739884393064&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkZLyOdXZVxVPyAtGEjjicEcf4ZtqVkSnCV7ibsvnrP0GLUqTlxicBickRCA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1、混沌的微服务架构，多语言和多网络协议混杂&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;业务架构因为分工问题，容易出现服务数量多，调用协议和关系非常复杂的现象，导致的常见问题包括：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2、下沉的基础设施能力屏蔽实现细节，问题定界越发困难&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;基础设施能力继续下沉，开发和运维关注点继续分离，分层后彼此屏蔽了实现细节，数据方面不好关联了，出现问题后不能迅速地定界问题出现在哪一层。开发同学只关注应用是否正常工作，并不关心底层基础设施细节，出现问题后需要运维同学协同排查问题。运维同学在问题排查过程中，需要开发同学提供足够的上下游来推进排查，否则只拿到“某某应用延迟高”这么笼统的表述，这很难有进一步结果。所以，开发同学和运维同学之间需要共同语言来提高沟通效率，Kubernetes 的 Label、Namespace 等概念非常适合用来构建上下文信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3、繁多监测系统，造成监测界面不一致&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;复杂系统带来的一个严重副作用就是监测系统繁多。数据链路不关联、不统一，监测界面体验不一致。很多运维同学或许大多都有过这样的体验：定位问题时浏览器打开几十个窗口，在 Grafana、控制台、日志等各种工具之间来回切换，不仅非常耗时巨大，且大脑能处理的信息有限，问题定位效率低下。如果有统一的可观测性界面，数据和信息得到有效地组织，减少注意力分散和页面切换，来提高问题定位效率，把宝贵时间投入到业务逻辑的构建上去。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;2&lt;/span&gt; 解决思路与技术方案&lt;/section&gt;&lt;p&gt;为了解决上述问题，我们需要使用一种支持多语言，多通信协议的技术，并在产品层面尽可能覆盖软件栈端到端的可观测性需求，通过调研，我们提出一种立足于容器界面和底层操作系统，向上关联应用性能监测的可观测性解决思路。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4658959537572254&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkWW02a873Wn7Jf8RgHFOI9XGM2zoUDTicDFzV6ibIM8rHQFWoBQkT4NRg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;要采集容器、节点运行环境、应用、网络各个维度的数据挑战非常大，云原生社区针对不同需求给出了 cAdvisor、node exporter、kube-state-metics 等多种方式，但仍然无法满足全部需求。维护众多采集器的成本也不容小觑，引发的一个思考是能否有一种对应用无侵入的、支持动态扩展的数据采集方案？目前最好的答案是 eBPF。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
数据采集（eBPF 超能力）&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
eBPF 的超能力&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.33641618497109826&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkE09WUfTkel0LYPcevL4FkJ6ggXpaYMPSzGevAIFQibMZEOcQ4ralF6g/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;eBPF 相当于在内核中构建了一个执行引擎，通过内核调用将这段程序 attach 到某个内核事件上，实现监听内核事件。&lt;/span&gt;&lt;span&gt;有了事件我们就能进一步做协议推导，筛选出感兴趣的协议，对事件进一步处理后放到 ringbuffer 或者 eBPF 自带的数据结构 Map 中，供用户态进程读取。&lt;/span&gt;&lt;span&gt;用户态进程读取这些数据后，进一步关联 Kubernetes 元数据后推送到存储端。&lt;/span&gt;&lt;span&gt;这是整体处理过程。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;eBPF 的超能力体现在能订阅各种内核事件，如文件读写、网络流量等，运行在 Kubernetes 中的容器或者 Pod 里的一切行为都是通过内核系统调用来实现的，内核知道机器上所有进程中发生的所有事情，所以内核几乎是可观测性的最佳观测点，这也是我们为什么选择 eBPF 的原因。另一个在内核上做监测的好处是应用不需要变更，也不需要重新编译内核，做到了真正意义上的无侵入。当集群里有几十上百个应用的时候，无侵入的解决方案会帮上大忙。&lt;/p&gt;&lt;p&gt;但作为新技术，人们对 eBPF 也存在些许担忧，比如安全性与探针性能。为了充分保证内核运行时的安全性，eBPF 代码进行了诸多限制，如最大堆栈空间当前为 512、最大指令数为 100 万。与此同时，针对性能担忧，eBPF 探针控制在大约在 1% 左右。其高性能主要体现在内核中处理数据，减少数据在内核态和用户态之间的拷贝。简单说就是数据在内核里算好了再给用户进程，比如一个 Gauge 值，以往的做法是将原始数据拷贝到用户进程再计算。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
可编程的执行引擎天然适合可观测性&lt;/section&gt;&lt;p&gt;可观测性工程通过帮助用户更好的理解系统内部状态来消除知识盲区和及时消除系统性风险。eBPF 在可观测性方面有何威力呢？&lt;/p&gt;&lt;p&gt;以应用异常为例，当发现应用有异常后，解决问题过程中发现缺少应用层面可观测性，这时候通过埋点、测试、上线补充了应用可观测性，具体的问题得到了解决，但往往治标不治本，下一次别的地方有问题，又需要走同样的流程，另外多语言、多协议让埋点的成本更高。更好的做法是用无侵入方式去解决，以避免需要观测时没有数据。&lt;/p&gt;&lt;p&gt;eBPF 执行引擎可通过动态加载执行 eBPF 脚本来采集可观测性数据，举个具体例子，假设原本的 K8S 系统并没有做进程相关的监测，有一天发现了某个恶意进程（如挖矿程序）在疯狂地占用 CPU，这时候我们会发现这类恶意的进程创建应该被监测起来，这时候我们可以通过集成开源的进程事件检测库来是实现，但这往往需要打包、测试、发布这一整套流程，全部走完可能一个月就过去了。&lt;/p&gt;&lt;p&gt;相比之下，eBPF 的方式显得更为高效快捷，由于 eBPF 支持动态地加载到内核监听进程创建的事件，所以我们可以将 eBPF 脚本抽象成一个子模块，采集客户端每次只需要加载这个子模块里的脚本完成数据采集，再通过统一的数据通道将数据推送到后端。这样我们就省去了改代码、打包、测试、发布的繁琐流程，通过无侵入的方式动态地实现了进程监测这样的需求。所以，eBPF 可编程的执行引擎非常适合用来将增强可观测性，将丰富的内核数据采集上来，通过关联业务应用，方便问题排查。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8289017341040462&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkzSPiacyKIVWCs4ezFTumbaPkPACYBcZwu6DjeyvaHA1AnAlPSOglUCg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;3&lt;/span&gt; 从监测系统到可观测性&lt;/section&gt;&lt;p&gt;随着云原生浪潮，可观测性概念正深入人心。但仍离不开日志、指标、链路这三类可观测领域的数据基石。做过运维或 SRE 的同学经常遇到这样的问题：半夜被拉到应急群里，披头盖地地被质问为什么数据库不工作了，在没有上下文的情况下，无法立刻抓住问题核心。我们认为好的可观测性平台应该帮助用户很好地反馈上下文，就像 Datadog 的 CEO 说的那样：&lt;strong&gt;监测工具不是功能越多功能越好，而是要思考怎样在不同团队和成员之间架起桥梁，尽可能把信息放在同一个页面中（to bridge the gap between the teams and get everything on the same page）。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因此，在可观测性平台产品设计上需要以指标、链路、日志为基本，向外集成阿里云自家的各类云服务，同时也支持开源产品数据接入，将关键上下文信息关联起来，方便不同背景的工程师理解，进而加速问题排查。信息没有有效地组织就会产生理解成本，信息粒度上以事件 -&amp;gt;指标 -&amp;gt;链路 -&amp;gt;日志由粗到细地组织到一个页面中，方便下钻，不需要多个系统来回跳转，从而提供一致体验。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6023121387283237&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkdvzudkZw0ErrSBYQN0nbZBg5thibUDxpn2jCHV7DUeJiahMpCYicqfRvQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;那么具体怎么关联呢？信息怎么组织呢？主要从两方面来看：&lt;/p&gt;&lt;p&gt;1、端到端：展开说就是应用到应用，服务到服务，Kubernetes 的标准化和关注点分离，各自开发运维各自关注各自领域，那么端到端的监测很多时候成了”三不管“区域，出现问题的时候很难排查链路上哪个环节出了问题。因此从端到端的角度来看，两者调用关系是关联的基础，因为系统调用才产生了联系。通过 eBPF 技术非常方便地以无侵入的方式采集网络调用，进而将调用解析成我们熟知的应用协议，如 HTTP、GRPC、MySQL 等，最后将拓扑关系构建起来，形成一张清晰的服务拓扑后方便快速定位问题，如下图中网关 -&amp;gt;Java 应用 -&amp;gt;Python 应用 -&amp;gt;云服务的完整链路中，任意一环出现延时，在服务拓扑中应能一眼看出问题所在。这是第一个管线点端到端。&lt;/p&gt;&lt;p&gt;2、自顶向下全栈关联：以 Pod 为媒介，Kubernetes 层面关联 Workload、Service 等对象，基础设施层面可以关联节点、存储设备、网络等，应用层面关联日志、调用链路等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.49479768786127165&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkb5vGe3ChlZbx0rUgq0vo2cAIriaMsjpzuIVgObAhhIAoicSahqXz3FwA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;接下来介绍下 Kubernetes 监测的核心功能。&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
永不过时的黄金指标&lt;/section&gt;&lt;p&gt;&lt;strong&gt;黄金指标是用来&lt;/strong&gt;监测&lt;strong&gt;系统性能和状态的最小集合&lt;/strong&gt;。黄金指标有两个好处：一，直接了然地表达了系统是否正常对外服务。二，能快速评估对用户的影响或事态的严重性，能大量节省 SRE 或研发的时间，想象下如果我们取 CPU 使用率作为黄金指标，那么 SRE 或研发将会奔于疲命，因为 CPU 使用率高可能并不会造成多大的影响。&lt;/p&gt;&lt;p&gt;Kubernetes 监测支持这些指标：&lt;/p&gt;&lt;p&gt;如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5479768786127167&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkJibB9KeyRVOxbf4Xa19ebhvFbj98URpeicLAScjZI8zqApFXzOZ0RcdA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
全局视角的服务拓扑&lt;/section&gt;&lt;p&gt;诸葛亮曾言“不谋全局者，不足谋一域 ”。随着当下技术架构、部署架构的复杂度越来越高，发生问题后定位问题变得越来越棘手，进而导致 MTTR 越来越高。另一个影响是对影响面的分析带来非常大的挑战，通常会造成顾此失彼。因此，有一张像地图一样的拓扑大图非常必要。全局拓扑具有以下特点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;系统架构感知：系统架构图是程序员了解一个新系统的重要参考，当拿到一个系统，起码需要知晓流量入口在哪里，有哪些核心模块，依赖了哪些内部外部组件等。在异常定位过程中，有一张全局架构的图对异常定位进程有非常大推动作用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;依赖分析：有一些问题是出现在下游依赖，如果这个依赖不是自己团队维护就会比较麻烦，当自己系统和下游系统没有足够的可观测性的时候就更麻烦了，这种情况下就很难跟依赖的维护者讲清楚问题。在我们的拓扑中，通过将黄金指标的上下游用调用关系连起来，形成了一张调用图。边作为依赖的可视化，能查看对应调用的黄金信号。有了黄金信号就能快速地分析下游依赖是否存在问题。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5421965317919075&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkjshlwr2cBciaBEWeL6YiciciazDAyiccWKFYwaraaC5zAOmwMydd7vHiaKqQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
分布式 Tracing 助力根因定位&lt;/section&gt;&lt;p&gt;协议 Trace 同样是无入侵、语言无关的。如果请求内容中存在分布式链路 TraceID，能自动识别出来，方便进一步下钻到链路追踪。应用层协议的请求、响应信息有助于对请求内容、返回码进行分析，从而知道具体哪个接口有问题。如需查看代码级别或请求界别的详情，可点击 Trace ID 下钻到链路追踪分析查看。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5086705202312138&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKk0D28o7w5PHISmxdtM0n34ttCrEhQhLF8ChjlFEhbzmxfprV9e7ubog/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
开箱即用的告警功能&lt;/section&gt;&lt;p&gt;开箱即用的告警模板，各个不同层次全覆盖，不需要手动配置告警，将大规模 Kubernetes 运维经验融入到告警模板里面，精心设计的告警规则加上智能降噪和去重，我们能够做到一旦告警就是有效的告警，并且告警里面带有关联信息，可以快速定位到异常实体。告警规则全栈覆盖的好处是能及时、主动地将高风险事件报给用户，用户通过排查定位、解决告警、事后复盘、面向失败设计等一系列手段，最终逐步达成更好的系统稳定性。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5410404624277456&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkAWwBNheQ1icHyVvPVLl9BLyx2koXZB3Eic4l8m1ickGD6U2lOIGwCeSNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
网络性能监测&lt;/section&gt;&lt;p&gt;网络性能问题在 Kubernetes 环境中很常见，由于 TCP 底层机制屏蔽了网络传输的复杂性，应用层对此是无感的，这对生产环境定位丢包率高、重传率高这种问题带来一定的麻烦。Kubernetes 监测支持了 RTT、重传 &amp;amp; 丢包、TCP 连接信息来表征网络状况，下面以 RTT 为例，支持从命名空间、节点、容器、Pod、服务、工作负载这几个维度来看网络性能，支持以下各种网络问题的定位：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;负载均衡无法访问某个 Pod，这个 Pod 上的流量为 0，需要确定是否这个 Pod 网络有问题，还是负载均衡配置有问题；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;某个节点上的应用似乎性能都很差，需要确定是否节点网络有问题，通过对别的节点网络来达到；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;链路上出现丢包，但不确定发生在那一层，可以通过节点、Pod、容器这样的顺序来排查。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3965317919075145&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkbJVwG7tlEdicslAtdP6L3kpK0HdCP8h6olvkEIZhh1ztlia8q2QxaVlw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;4&lt;/span&gt; Kubernetes 可观测性全景视角&lt;/section&gt;&lt;p&gt;有了上述产品能力，基于阿里巴巴在容器、Kubernetes 方面有着丰富且极具深度的实践，我们将这些宝贵生产实践归纳、转化成产品能力，以帮助用户更有效、更快捷地定位生产环境问题。使用这个排查全景图可以通过以下方法：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;大体结构上是以服务和 Deployment（应用）为入口，大多数开发只需要关注这一层就行了。重点关注服务和应用是否错慢，服务是否连通，副本数是否符合预期等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;再往下一层是提供真正工作负载能力的 Pod。Pod 重点关注是否有错慢请求，是否健康，资源是否充裕，下游依赖是否健康等&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;最底下一层是节点，节点为 Pod 和服务提供运行环境和资源。重点关注节点是否健康，是否处于可调度状态，资源是否充裕等。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.7775061124694376&quot; data-type=&quot;png&quot; data-w=&quot;818&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkT4JlaGO8icbSw3WhLDqoWvuVW64lohYP6miahyzT87yxVLH634OJOdQg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
常见问题排查&lt;/section&gt;&lt;section&gt;&lt;span/&gt;
网络问题&lt;/section&gt;&lt;p&gt;网络是 Kubernetes 中最棘手、最常见的问题，因为以下几个原因给我们定位生产环境网络问题带来麻烦：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;Kubernetes 的网络架构复杂度高，节点、Pod、容器、服务、VPC 交相辉映，简直能让你眼花缭乱；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;网络问题排查需要一定的专业知识，大多数对网络问题都有种天生的恐惧；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式 8 大谬误告诉我们网络不是稳定的、网络拓扑也不一成不变的、延时不可忽视，造成了端到端之间的网络拓扑不确定性。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Kubernetes 环境下场景的网络问题有：&lt;/p&gt;&lt;p&gt;网络问题千千万万，但万变不离其宗的是网络有其表征其是否正常运行的”黄金指标“：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;网络流量和带宽；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;丢包数（率）和重传数（率）；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;RTT。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面的示例展示了因网络问题导致的慢调用问题。从 gateway 来看发生了慢调用，查看拓扑发现调下游 product 的 RT 比较高，但是 product 本身的黄金指标来看 product 本身服务并没有问题，进一步查看两者之间的网络状况，发现 RTT 和重传都比较高，说明网络性能恶化了，导致了整体的网络传输变慢，TCP 重传机制掩盖了这个事实，在应用层面感知不到，日志也没法看出问题所在。这时候网络的黄金指标有助于定界出问题，从而加速了问题的排查。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.630057803468208&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkQRjcx2RuZ5PmD0ugLNichnc5kyH675OOb5MBDiaicDY0pX2V8FM964sgQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
节点问题&lt;/section&gt;&lt;p&gt;Kubernetes 做了大量工作，尽可能确保提供给工作负载和服务的节点是正常的，节点控制器 7x24 小时地检查节点的状态，发现影响节点正常运行的问题后，将节点置为 NotReady 或不可调度，通过 kubelet 把业务 Pod 从问题节点中驱逐出去。这是 Kubernetes 的第一道防线，第二道防线是云厂商针对节点高频异常场景设计的节点自愈组件，如阿里云的 node repairer：发现问题节点后，执行排水驱逐、置换机器，从而做到自动化地保障业务正常运行。即便如此，节点在长期使用过程中不可避免地会产生各种奇奇怪怪的问题，定位起来比较费时耗力。常见问题分类和级别:&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2078559738134207&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;611&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkL6RSOsTia3ZEqXTBvOyeju5jyIrFYibZZFiche5FCmD4eefIvDsyVTBZQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;以一个 CPU 打满为例：&lt;/p&gt;&lt;p&gt;1、节点状态 OK，CPU 使用率超过了 90%&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3352601156069364&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKk0WryibtsUYiaP1KdvUciaLPPSzPfuupwK2La8oe5Fvl31cKENc4zuBNrQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;2、查看对应的 CPU 的三元组：使用率、TopN、时序图，首先每个核的使用率都很高，进而导致整体 CPU 使用高；接下来我们自然要知道谁在疯狂地使用 CPU，从 TopN 列表来看有个 Pod 一枝独秀地占用 CPU；最后我们得确认下 CPU 飙高是什么时候开始的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.13410404624277455&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkCSwfQG409F4OAAJlCyQG63MuGu3l4W2E795GIA7xHof7L4vVJ98AWw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;
服务响应慢&lt;/section&gt;&lt;p&gt;造成服务响应非常多，场景可能的原因有代码设计问题、网络问题、资源竞争问题、依赖服务慢等原因。在复杂的 Kubernetes 环境下，定位慢调用可以从两个方案去入手：首先，应用自身是否慢；其次，下游或网络是否慢；最后检查下资源的使用情况。如下图所示，Kubernetes 监测分别从横向和纵向来分析服务性能：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;横向：主要是端到端层面来看，首先看自己服务的黄金指标是否有问题，再逐步看下游的网络指标。注意如果从客户端来看调用下游耗时高，但从下游本身的黄金指标来看是正常的，这时候非常有可能是网络问题或者操作系统层面的问题，此时可以用网络性能指标（流量、丢包、重传、RTT 等）来确定。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;纵向：确定应用本身对外的延时高了，下一步就是确定具体哪个原因了，确定哪一步 / 哪个方法慢可以用火焰图来看。如果代码没有问题，那么可能执行代码的环境是有问题的，这时可以查看系统的 CPU/Memory 等资源是否有问题来做进一步排查。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4624277456647399&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkLF2mKPtkIs9Ux51rhneT6HiaGrk4BuOIQbtrD1ldBy5fa5vBTzIgQxw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;下面举个 SQL 慢查询的例子（如下图）。在这个例子中网关调用 product 服务，product 服务依赖了 MySQL 服务，逐步查看链路上的黄金指标，最终发现 product 执行了一条特别复杂的 SQL，关联了多张表，导致 MySQL 服务响应慢。MySQL 协议基于 TCP 之上的，我们的 eBPF 探针识别到 MySQL 协议后，组装、还原了 MySQL 协议内容，任何语言执行的 SQL 语句都能采集到。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6947976878612717&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkAMndrZD6ianbMEicRSicBwefdS8jXwAhqHeedysHJSYeSS8y2ib6qOOLfg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;第二个例子是应用本身慢的例子，这时候自然会问具体哪一步、哪个函数造成了慢，ARMS 应用监控支持的火焰图通过对 CPU 耗时定期采样（如下图），帮助快速定位到代码级别问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6566473988439306&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKk7EHGSlzn5vpxMHDkJUyoxb8aKwI6IltnEsibuPnV0rMicBTOnFtCMI9A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;5&lt;/span&gt; 应用 /Pod 状态问题&lt;/section&gt;&lt;p&gt;Pod 负责管理容器，容器是真正执行业务逻辑的载体。同时 Pod 是 Kubernetes 调度的最小单元，所以 Pod 同时拥有了业务和基础设施的复杂度，需要结合着日志、链路、系统指标、下游服务指标综合来看。Pod 流量问题是生产环境高频问题，比如数据库流量陡增，当环境中有成千上万个 Pod 时，排查流量主要来自哪个 Pod 就显得特别困难。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5329479768786127&quot; data-type=&quot;png&quot; data-w=&quot;865&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkarX9oEkrSJ9zH2vJC0vXD6zLs8jxVgln9HaOARuyOfQ2PJuYSp3VTg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;接下来我们看一个典型的案例：下游服务在发布过程中灰度了一个 Pod，该 Pod 因代码原因响应非常慢，导致上游都超时了。之所以能做到 Pod 级别的可观测，是因为我们用 ebpf 的技术来采集 Pod 的流量、黄金指标，因此可以通过拓扑、大盘的方式方便地查看 Pod 与 Pod、Pod 与服务、Pod 与外部的流量。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.553757225433526&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VONQRLzDIfDJw7B4oLgOicKkcMMKCQuSy1gLxS4h5DicibM77BDp3v8ElKXSic22rRdJoKHo7LmribNUibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;865&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;6&lt;/span&gt; 总结&lt;/section&gt;&lt;p&gt;通过 eBPF 无侵入地采集多语言、多网络协议的黄金指标 / 网络指标 /Trace，通过关联 Kubernetes 对象、应用、云服务等各种上下文，同时在需要进一步下钻的时候提供专业化的监测工具（如火焰图），实现了 Kubernetes 环境下的一站式可观测性平台。&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;推荐阅读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span&gt;&lt;strong&gt;福利&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-darkmode-bgcolor-15906318746582=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906318746582=&quot;rgb(255, 255, 255)&quot; data-style=&quot;width: 30px; height: 30px; background-color: rgb(255, 255, 255); box-shadow: rgb(87, 187, 255) -7px -7px 0px; margin-left: 7px;&quot;&gt;&lt;span/&gt;&lt;span&gt;我为大家整理了一份&lt;/span&gt;&lt;span&gt;从入门到进阶的Go学习资料礼包&lt;/span&gt;&lt;span&gt;，包含学习建议：入门看什么，进阶看什么。&lt;/span&gt;&lt;span&gt;关注公众号 「polarisxu」，回复 &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ebook&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 获取；还可以回复「&lt;strong&gt;进群&lt;/strong&gt;」，和数万 Gopher 交流学习。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UWba2ryLMqm8cgtrMXjG1BLGg46vQNmUompBL02uYYwic9RicPbCnlKdZiacBF5Wv6RLgmGIqnBnwuWyP82ibYusiag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;258&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>29bf848d160e2011b042b52464fbdbcc</guid>
<title>Apache Flink 误用之痛</title>
<link>https://toutiao.io/k/r7amftk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU5MTc1NDUyOA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/S7tIvo5xYM6bdyG8xo8FnEjIUicGel5zPAqEAmj8zibq5pmJdRZeRWQxgDcWlibDfLiaCIsyDQxAKVuNCibR3WprWZg/0?wx_fmt=png&quot; data-nickname=&quot;Flink实战剖析&quot; data-alias=&quot;pucheung&quot; data-signature=&quot;专注Flink实时计算，分享Flink相关的原理、源码、使用经验等，同时会分享离线/实时数仓、OLAP、数据架构等干货。目前在一线厂工作，从事数据、Java相关的开发工作，欢迎关注、交流。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;1. 项目开始&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在开始开发前，我们需要选择正确的切入方式，以下几种往往是最糟糕的开始：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a) 从一个具有挑战性的用例开始（端对端的 &lt;span class=&quot;code-snippet__type&quot;&gt;Exactly&lt;/span&gt;-once、大状态、复杂的业务逻辑、强实时&lt;span class=&quot;code-snippet__type&quot;&gt;SLA&lt;/span&gt;的组合）   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b) 之前没有流处理经验   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) 不对团队做相关的培训   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    d) 不利用社区&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在开发的过程中，其实要认认真真的来规划我们的切入点，首先，要从简单的任务开始循序渐进。要有一定的大数据和流处理的知识积累，尽量参加一些培训，也要利用好社区资源。基于这样的想法，我们就能很快找到切入点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;怎么样去做？社区提供了很多的培训，包括 Flink Forward 和 Vererica 网站上有各种培训课程，大家可以去看。同时，可以充分利用社区。社区还建立了中文的邮件列表，大家可以充分利用中文邮件列表来解决手头的疑难杂症。另外，Stack Overflow 也是个提问的好地方，但在提问前尽量去看一看已有的提问，做到心中有数。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;2. 设计分析&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;方案设计中的一些常见错误思维，往往是由于没有充分思考需求导致的，比如：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    a) 不考虑数据一致性和交付保证   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    b) 不考虑业务升级和应用改进   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) 不考虑业务规模问题   &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    d) 不深入思考实际业务需求&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;我们要认真分析需求，同时认真考虑实际交付情况。提到一致性和交付保障，其实可以通过几个问题来引导大家完成这件事，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fjpeg%2F214695%2F1590913657615-68789e3f-8de8-4d20-a91c-f9d7beb03894.jpeg%22%2C%22originWidth%22%3A1754%2C%22originHeight%22%3A795%2C%22name%22%3A%22%E5%9B%BE1.jpg%22%2C%22size%22%3A214061%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A405.57407%2C%22y%22%3A9.397396%2C%22width%22%3A497.60173%2C%22height%22%3A40.010534%2C%22text%22%3A%22Dolcareaboutlosingrecords%3F%22%7D%2C%7B%22x%22%3A409.1678%2C%22y%22%3A73.97901%2C%22width%22%3A286.53056%2C%22height%22%3A42.12747%2C%22text%22%3A%22%E5%9C%A8%E4%B9%8E%E4%B8%A2%E5%A4%B1%E8%AE%B0%E5%BD%95%E5%90%97%3F%22%7D%2C%7B%22x%22%3A1065.7722%2C%22y%22%3A98.55111%2C%22width%22%3A43.2054999999998%2C%22height%22%3A31.67705000000001%2C%22text%22%3A%22No%22%7D%2C%7B%22x%22%3A816.8617%2C%22y%22%3A101.94772%2C%22width%22%3A45.48266000000001%2C%22height%22%3A27.63490999999999%2C%22text%22%3A%22Yes%22%7D%2C%7B%22x%22%3A254.50894%2C%22y%22%3A188.02977%2C%22width%22%3A495.11516%2C%22height%22%3A34.87502999999998%2C%22text%22%3A%22Dolcareaboutcorrectresults%3F%22%7D%2C%7B%22x%22%3A1076.094%2C%22y%22%3A203.03806%2C%22width%22%3A273.9939999999999%2C%22height%22%3A34.32676000000001%2C%22text%22%3A%22Nocheckpointing%2C%22%7D%2C%7B%22x%22%3A1080.6892%2C%22y%22%3A247.49406%2C%22width%22%3A163.9514999999999%2C%22height%22%3A27.94605999999999%2C%22text%22%3A%22anysource%22%7D%2C%7B%22x%22%3A256.72568%2C%22y%22%3A254.36629%2C%22width%22%3A360.26327000000003%2C%22height%22%3A38.74182999999999%2C%22text%22%3A%22%E5%9C%A8%E4%B9%8E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E5%90%97%3F%22%7D%2C%7B%22x%22%3A646.0051%2C%22y%22%3A274.0589%2C%22width%22%3A49.811000000000035%2C%22height%22%3A31.065920000000006%2C%22text%22%3A%22Yes%22%7D%2C%7B%22x%22%3A1621.0165%2C%22y%22%3A276.7202%2C%22width%22%3A45.567600000000084%2C%22height%22%3A45.567600000000084%2C%22text%22%3A%22LATENCY%E5%BB%B6%E8%BF%9F%22%7D%2C%7B%22x%22%3A1081.5333%2C%22y%22%3A279.08813%2C%22width%22%3A277.19000000000005%2C%22height%22%3A34.36802%2C%22text%22%3A%22%E4%B8%8D%E9%9C%80%E8%A6%81CP%2F%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A14.451009%2C%22y%22%3A388.14645%2C%22width%22%3A595.282021%2C%22height%22%3A39.874210000000005%2C%22text%22%3A%22Dolcareaboutduplicateyetcorrect)%22%7D%2C%7B%22x%22%3A911.38055%2C%22y%22%3A402.1428%2C%22width%22%3A551.4597500000001%2C%22height%22%3A33.37189999999998%2C%22text%22%3A%22CheckpointingMode.ATLEASTONCE%22%7D%2C%7B%22x%22%3A11.858212%2C%22y%22%3A437.85223%2C%22width%22%3A348.124588%2C%22height%22%3A33.48746999999997%2C%22text%22%3A%22recordsdownstream%3F%22%7D%2C%7B%22x%22%3A912.67816%2C%22y%22%3A441.59775%2C%22width%22%3A333.93024%2C%22height%22%3A31.01088999999996%2C%22text%22%3A%22%26replayablesources%22%7D%2C%7B%22x%22%3A502.4246%2C%22y%22%3A450.62198%2C%22width%22%3A53.23366000000004%2C%22height%22%3A28.84832%2C%22text%22%3A%22Yes%22%7D%2C%7B%22x%22%3A909.8695%2C%22y%22%3A476.4863%2C%22width%22%3A452.5613000000001%2C%22height%22%3A35.20333999999997%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E9%87%8D%E5%A4%8D%E5%8F%91%E6%95%B0%E6%8D%AE%2C%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%AF%E5%9B%9E%E6%94%BE%22%7D%2C%7B%22x%22%3A21.538818%2C%22y%22%3A495.7208%2C%22width%22%3A580.362382%2C%22height%22%3A47.59560000000005%2C%22text%22%3A%22%E4%B8%8B%E6%B8%B8%E5%85%B3%E5%BF%83%E9%87%8D%E5%A4%8D(%E4%BD%86%E6%AD%A3%E7%A1%AE)%E7%9A%84%E8%AE%B0%E5%BD%95%E5%90%97%3F%22%7D%2C%7B%22x%22%3A782.7088%2C%22y%22%3A597.8757%2C%22width%22%3A536.7607999999999%2C%22height%22%3A34.03539999999998%2C%22text%22%3A%22CheckpointingModeEXACTLYONCE%22%7D%2C%7B%22x%22%3A63.062084%2C%22y%22%3A601.94666%2C%22width%22%3A537.947916%2C%22height%22%3A30.311270000000036%2C%22text%22%3A%22CheckpointingMode.EXACTLYONCE%22%7D%2C%7B%22x%22%3A62.56444%2C%22y%22%3A640.4312%2C%22width%22%3A596.01661%2C%22height%22%3A30.037199999999984%2C%22text%22%3A%22replayablesources%26transactionlsinks%22%7D%2C%7B%22x%22%3A783.0252%2C%22y%22%3A638.6737%2C%22width%22%3A322.7386999999999%2C%22height%22%3A30.170399999999972%2C%22text%22%3A%22%26replayablesources%22%7D%2C%7B%22x%22%3A782.7511%2C%22y%22%3A673.8775%2C%22width%22%3A485.36990000000014%2C%22height%22%3A35.813499999999976%2C%22text%22%3A%22%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E5%8F%91%E6%95%B0%E6%8D%AE%2C%E7%B2%BE%E7%A1%AE%E7%9A%84%E4%B8%80%E6%AC%A1%E6%A8%A1%E5%BC%8F%22%7D%2C%7B%22x%22%3A59.665188%2C%22y%22%3A675.1533%2C%22width%22%3A596.3812620000001%2C%22height%22%3A40.252000000000066%2C%22text%22%3A%22%E7%B2%BE%E5%87%86%E4%B8%80%E6%AC%A1%2C%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%AF%E5%9B%9E%E6%94%BE%2Csink%E6%94%AF%E6%8C%81%22%7D%2C%7B%22x%22%3A62.095314%2C%22y%22%3A720.2097%2C%22width%22%3A73.22984600000001%2C%22height%22%3A37.935749999999985%2C%22text%22%3A%22%E4%BA%8B%E5%8A%A1%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Dolcareaboutlosingrecords%3F%20%E5%9C%A8%E4%B9%8E%E4%B8%A2%E5%A4%B1%E8%AE%B0%E5%BD%95%E5%90%97%3F%20No%20Yes%20Dolcareaboutcorrectresults%3F%20Nocheckpointing%2C%20anysource%20%E5%9C%A8%E4%B9%8E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E5%90%97%3F%20Yes%20LATENCY%E5%BB%B6%E8%BF%9F%20%E4%B8%8D%E9%9C%80%E8%A6%81CP%2F%E4%BB%BB%E4%BD%95%E6%95%B0%E6%8D%AE%20Dolcareaboutduplicateyetcorrect)%20CheckpointingMode.ATLEASTONCE%20recordsdownstream%3F%20%26replayablesources%20Yes%20%E5%8F%AF%E4%BB%A5%E9%87%8D%E5%A4%8D%E5%8F%91%E6%95%B0%E6%8D%AE%2C%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%AF%E5%9B%9E%E6%94%BE%20%E4%B8%8B%E6%B8%B8%E5%85%B3%E5%BF%83%E9%87%8D%E5%A4%8D(%E4%BD%86%E6%AD%A3%E7%A1%AE)%E7%9A%84%E8%AE%B0%E5%BD%95%E5%90%97%3F%20CheckpointingModeEXACTLYONCE%20CheckpointingMode.EXACTLYONCE%20replayablesources%26transactionlsinks%20%26replayablesources%20%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E5%8F%91%E6%95%B0%E6%8D%AE%2C%E7%B2%BE%E7%A1%AE%E7%9A%84%E4%B8%80%E6%AC%A1%E6%A8%A1%E5%BC%8F%20%E7%B2%BE%E5%87%86%E4%B8%80%E6%AC%A1%2C%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8F%AF%E5%9B%9E%E6%94%BE%2Csink%E6%94%AF%E6%8C%81%20%E4%BA%8B%E5%8A%A1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1754%2C%22height%22%3A795%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4533333333333333&quot; data-type=&quot;jpeg&quot; data-w=&quot;1500&quot; title=&quot;图1.jpg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZh5bNyxIOgQCOTGziapfCAY1QJE4zHGJlMvRu9wiaiaicbcR0o7n0JzXOThA/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第1个问题，是否在乎数据的丢失？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;如&lt;/span&gt;&lt;span&gt;果不在乎，你可以没有 Checkpoint。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;第2个问题，是否在乎结果的正确性？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;在很多的场景里面，我们非常关注结果的正确性，比如金融领域，但是另外一些场景比如监控或其他简单的使用场景仅需要一个概要的数据统计。如果不在乎结果的正确性，&lt;/span&gt;&lt;span&gt;可以考虑用 at-least-once 的模式配置并使用可回放的数据源。相反，如果&lt;/span&gt;&lt;span&gt;结果的准确性十分重要，且下游不关心重复记录，那么仅需设置 exactly-once 模式并使用可回放的数据源。&lt;/span&gt;&lt;span&gt;如果下游要求数据不能重复，哪怕数据正确也只能发送一次，这种时候就对 sink 有更进一步的限制，在 exactly-once 的模式下，使用可回放的数据源，并且 sink 需要支持事务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;带着这样的思维方式分析业务，才能非常清晰地知道，怎么去使用 Flink，进而避免一些糟糕的事情发生。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;完成分析之后，最终目的是什么？&lt;/span&gt;&lt;span&gt;我们为什么要有这种选择，而不是一上来就选一个最好的方案？&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;因为世界上永远没有“最好”，这里的核心因素就是延迟，要根据业务的延迟和准确性需求来均衡去做选择。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;当需求都分析好之后，还需要去思考应用是否需要升级。从一个正常的 Flink 作业来讲，我们有几个问题要考虑。第一个，Flink 作业一般都有状态读取，做升级时需要有 savepoint 机制来保障，将状态存储保留在远端，再恢复到新的作业上去。很多场景下都会有升级的需求，这简单列了几点：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;properties&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;a 升级集群版本   &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;业务 bug 的修复&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__attr&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;code-snippet__string&quot;&gt;业务逻辑（拓扑）的变更&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在比较复杂的场景下，作业会有拓扑的变化，如下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913670333-8d51ecf0-3bca-4dbe-b9c7-49c7a2c42958.png%22%2C%22originWidth%22%3A1056%2C%22originHeight%22%3A535%2C%22name%22%3A%22%E5%9B%BE2.png%22%2C%22size%22%3A55947%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A3.9798849%2C%22y%22%3A16.795443%2C%22width%22%3A327.7520151%2C%22height%22%3A26.325971000000003%2C%22text%22%3A%22TopologyChanges%2F%E6%8B%93%E6%89%91%E6%94%B9%E5%8F%98%22%7D%2C%7B%22x%22%3A753.512%2C%22y%22%3A80.366264%2C%22width%22%3A105.88827000000003%2C%22height%22%3A14.719065999999998%2C%22text%22%3A%22SinkeNormaiOutput%22%7D%2C%7B%22x%22%3A735.80475%2C%22y%22%3A117.56718%2C%22width%22%3A138.33174999999994%2C%22height%22%3A10.665180000000007%2C%22text%22%3A%22LowWatermark%3A1553791002865%22%7D%2C%7B%22x%22%3A278.03967%2C%22y%22%3A139.05826%2C%22width%22%3A154.97409%2C%22height%22%3A12.767480000000006%2C%22text%22%3A%22Source%3AFakekatkaSource-%22%7D%2C%7B%22x%22%3A521.77155%2C%22y%22%3A142.89252%2C%22width%22%3A110.87624999999991%2C%22height%22%3A15.258010000000013%2C%22text%22%3A%22AggregatePersensor%22%7D%2C%7B%22x%22%3A276.42636%2C%22y%22%3A150.01622%2C%22width%22%3A161.89854000000003%2C%22height%22%3A13.652879999999982%2C%22text%22%3A%22TimestampsWWatormarks.%3EDe%22%7D%2C%7B%22x%22%3A318.7051%2C%22y%22%3A165.71048%2C%22width%22%3A71.63092999999998%2C%22height%22%3A10.73660000000001%2C%22text%22%3A%22senalization%22%7D%2C%7B%22x%22%3A506.85742%2C%22y%22%3A179.38045%2C%22width%22%3A139.79077999999998%2C%22height%22%3A11.764870000000002%2C%22text%22%3A%22LONWlEm4%2Fk%3A1553791002885%22%7D%2C%7B%22x%22%3A325.78455%2C%22y%22%3A182.92757%2C%22width%22%3A60.329679999999996%2C%22height%22%3A11.481239999999985%2C%22text%22%3A%22Parallolom%3A8%22%7D%2C%7B%22x%22%3A755.92834%2C%22y%22%3A205.87155%2C%22width%22%3A100.8129899999999%2C%22height%22%3A11.864409999999992%2C%22text%22%3A%22SinkLatoDatasink%22%7D%2C%7B%22x%22%3A666.6472%2C%22y%22%3A229.16585%2C%22width%22%3A49.43640000000005%2C%22height%22%3A10.803920000000005%2C%22text%22%3A%22FORWARD%22%7D%2C%7B%22x%22%3A733.79236%2C%22y%22%3A240.82022%2C%22width%22%3A140.90303999999992%2C%22height%22%3A12.211520000000007%2C%22text%22%3A%22LOWWtEmAR%3A1553791002865%22%7D%2C%7B%22x%22%3A165.53992%2C%22y%22%3A449.356%2C%22width%22%3A142.23565000000002%2C%22height%22%3A12.969229999999982%2C%22text%22%3A%22Source%3AFakekatkaSource%22%7D%2C%7B%22x%22%3A864.51263%2C%22y%22%3A451.43103%2C%22width%22%3A107.82737000000009%2C%22height%22%3A15.524540000000002%2C%22text%22%3A%22Sink%3ANormaloutput%22%7D%2C%7B%22x%22%3A470.29105%2C%22y%22%3A455.36395%2C%22width%22%3A26.699700000000007%2C%22height%22%3A11.372230000000002%2C%22text%22%3A%22new%22%7D%2C%7B%22x%22%3A163.62433%2C%22y%22%3A463.38486%2C%22width%22%3A135.80871000000002%2C%22height%22%3A11.610959999999977%2C%22text%22%3A%22Timostampswalcfmarks.%22%7D%2C%7B%22x%22%3A453.31403%2C%22y%22%3A472.0311%2C%22width%22%3A61.83926999999994%2C%22height%22%3A11.479370000000017%2C%22text%22%3A%22Parafelm%22%7D%2C%7B%22x%22%3A198.83302%2C%22y%22%3A474.3647%2C%22width%22%3A79.00368%2C%22height%22%3A13.850539999999967%2C%22text%22%3A%22Serialization%22%7D%2C%7B%22x%22%3A779.5597%2C%22y%22%3A476.8787%2C%22width%22%3A47.74299999999994%2C%22height%22%3A12.713099999999997%2C%22text%22%3A%22FORWARD%22%7D%2C%7B%22x%22%3A572.95715%2C%22y%22%3A478.22617%2C%22width%22%3A27.052850000000035%2C%22height%22%3A10.468199999999968%2C%22text%22%3A%22HASH%22%7D%2C%7B%22x%22%3A346.32196%2C%22y%22%3A478.6769%2C%22width%22%3A45.83014000000003%2C%22height%22%3A10.879220000000032%2C%22text%22%3A%22FORWARD%22%7D%2C%7B%22x%22%3A848.61285%2C%22y%22%3A489.32736%2C%22width%22%3A138.64899000000003%2C%22height%22%3A11.165590000000009%2C%22text%22%3A%22LOW1ET3R1553794483557%22%7D%2C%7B%22x%22%3A617.993%2C%22y%22%3A489.2273%2C%22width%22%3A139.01519999999994%2C%22height%22%3A12.458120000000008%2C%22text%22%3A%22LONWAter1553794483634%22%7D%2C%7B%22x%22%3A412.27585%2C%22y%22%3A489.45728%2C%22width%22%3A141.30155000000002%2C%22height%22%3A12.430719999999951%2C%22text%22%3A%22LOwWHtemark1553794483634%22%7D%2C%7B%22x%22%3A212.57309%2C%22y%22%3A492.9614%2C%22width%22%3A60.74791000000002%2C%22height%22%3A11.590999999999951%2C%22text%22%3A%22Paraleksme%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22TopologyChanges%2F%E6%8B%93%E6%89%91%E6%94%B9%E5%8F%98%20SinkeNormaiOutput%20LowWatermark%3A1553791002865%20Source%3AFakekatkaSource-%20AggregatePersensor%20TimestampsWWatormarks.%3EDe%20senalization%20LONWlEm4%2Fk%3A1553791002885%20Parallolom%3A8%20SinkLatoDatasink%20FORWARD%20LOWWtEmAR%3A1553791002865%20Source%3AFakekatkaSource%20Sink%3ANormaloutput%20new%20Timostampswalcfmarks.%20Parafelm%20Serialization%20FORWARD%20HASH%20FORWARD%20LOW1ET3R1553794483557%20LONWAter1553794483634%20LOwWHtemark1553794483634%20Paraleksme%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1056%2C%22height%22%3A535%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhkwAex2VyRviaXe1l9lgNTX8ryiauJrTQj2TR9E2prI3IpfliaNUS7sZAQ/640?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1056&quot; data-cropy1=&quot;10.295264623955433&quot; data-cropy2=&quot;535.3537604456825&quot; data-ratio=&quot;0.4971590909090909&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot; title=&quot;图2.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8AsYBicEePu7icPyDaia79PLQJmke516J7xPvRBjwwuuKVQPbRAyZJ9KBDW5OjHXxIaWIjAzXbEXP0bvoSsibr8nVw/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;此处需要添加一个算子，去掉一个 sink 。对于这样的变化，我们要考虑状态的恢复。当 Flink 发现新作业有节点没了，对应的状态无法恢复，就会抛出异常导致升级失败。这时候可以使用参数 --allowNonRestoreState 来忽略此类问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外新作业中还有新建的节点，这个节点就用空状态去初始化即可。除此之外，还需要注意，为了保证作业成功启动并且状态恢复不受影响，我们应该为算子设置 StreamAPI 中的 uid 。当然，如果状态的结构发生了变化，Avro Types 和 POJO 的类型都是支持的，Kryo 是不支持的。最后建议所有 key 的类型尽量不要修改，因为这会涉及 shuffle 和 状态的正确性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;资源的使用情况也是必须要考虑的因素之一，下面是一个评估内存和网络 IO 使用的思路。这里我们假设使用的是 Fs State，所有运行时状态都在内存中。不恰当的资源配置可能会造成 OOM 等严重的问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913688454-6602eb01-8067-4ebf-8769-c6bfba44222e.png%22%2C%22originWidth%22%3A1074%2C%22originHeight%22%3A487%2C%22name%22%3A%22%E5%9B%BE3.png%22%2C%22size%22%3A26296%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.2599411%2C%22y%22%3A4.329062%2C%22width%22%3A427.7500089%2C%22height%22%3A29.673932999999998%2C%22text%22%3A%22StateSize%26Network%2F%E7%8A%B6%E6%80%81%E5%A4%A7%E5%B0%8F%E5%92%8C%E7%BD%91%E7%BB%9C%22%7D%2C%7B%22x%22%3A443.5802%2C%22y%22%3A68.68833%2C%22width%22%3A178.52340000000004%2C%22height%22%3A27.216670000000008%2C%22text%22%3A%22TaskManager(1slot)%22%7D%2C%7B%22x%22%3A261.1693%2C%22y%22%3A138.53746%2C%22width%22%3A83.45729999999998%2C%22height%22%3A14.925549999999987%2C%22text%22%3A%22lngressMB%2Fs%22%7D%2C%7B%22x%22%3A715.35596%2C%22y%22%3A143.1154%2C%22width%22%3A82.93434000000002%2C%22height%22%3A15.126339999999999%2C%22text%22%3A%22ShuffleMB%2Fs%22%7D%2C%7B%22x%22%3A502.48602%2C%22y%22%3A151.64926%2C%22width%22%3A59.80694999999997%2C%22height%22%3A16.638200000000012%2C%22text%22%3A%22Source%22%7D%2C%7B%22x%22%3A235.9264%2C%22y%22%3A173.87698%2C%22width%22%3A112.93824999999998%2C%22height%22%3A12.869010000000003%2C%22text%22%3A%22%23records%2Fssize%22%7D%2C%7B%22x%22%3A684.40356%2C%22y%22%3A185.43858%2C%22width%22%3A200.90004%2C%22height%22%3A14.812690000000003%2C%22text%22%3A%22records%2Fs*sizetm-%2Ftm%22%7D%2C%7B%22x%22%3A262.27673%2C%22y%22%3A231.59406%2C%22width%22%3A84.25292999999999%2C%22height%22%3A16.89284999999998%2C%22text%22%3A%22ShuffleMB%2Fs%22%7D%2C%7B%22x%22%3A508.00674%2C%22y%22%3A233.9145%2C%22width%22%3A46.45890000000003%2C%22height%22%3A18.02915999999999%2C%22text%22%3A%22keyBy%22%7D%2C%7B%22x%22%3A146.58205%2C%22y%22%3A268.54617%2C%22width%22%3A202.53712%2C%22height%22%3A15.100329999999985%2C%22text%22%3A%22%23records%2Fs*size%23tm-1%2F%23tm%22%7D%2C%7B%22x%22%3A463.43384%2C%22y%22%3A291.66452%2C%22width%22%3A136.72870000000006%2C%22height%22%3A19.456680000000006%2C%22text%22%3A%22StatefulOperator%22%7D%2C%7B%22x%22%3A701.0128%2C%22y%22%3A314.02707%2C%22width%22%3A108.77910000000008%2C%22height%22%3A18.339530000000025%2C%22text%22%3A%22CheckpointMB%2Fs%22%7D%2C%7B%22x%22%3A473.81036%2C%22y%22%3A323.21042%2C%22width%22%3A118.71459999999996%2C%22height%22%3A12.516579999999976%2C%22text%22%3A%22FIEWyStEMStatebacktend%22%7D%2C%7B%22x%22%3A473.84607%2C%22y%22%3A349.96933%2C%22width%22%3A115.45380000000006%2C%22height%22%3A14.743130000000008%2C%22text%22%3A%22%23keystate_size%22%7D%2C%7B%22x%22%3A689.0652%2C%22y%22%3A356.08023%2C%22width%22%3A279.8529%2C%22height%22%3A17.602300000000014%2C%22text%22%3A%22overallstate_size%2Fcheckpointinterval%22%7D%2C%7B%22x%22%3A514.4497%2C%22y%22%3A403.8722%2C%22width%22%3A33.65649999999994%2C%22height%22%3A16.018119999999954%2C%22text%22%3A%22Sink%22%7D%2C%7B%22x%22%3A717.1917%2C%22y%22%3A405.3459%2C%22width%22%3A77.05810000000008%2C%22height%22%3A15.590700000000027%2C%22text%22%3A%22EgressMB%2Fs%22%7D%2C%7B%22x%22%3A690.5087%2C%22y%22%3A447.87134%2C%22width%22%3A124.81150000000002%2C%22height%22%3A15.729120000000023%2C%22text%22%3A%22%E8%A1%A5messages%2Fssize%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22StateSize%26Network%2F%E7%8A%B6%E6%80%81%E5%A4%A7%E5%B0%8F%E5%92%8C%E7%BD%91%E7%BB%9C%20TaskManager(1slot)%20lngressMB%2Fs%20ShuffleMB%2Fs%20Source%20%23records%2Fssize%20records%2Fs*sizetm-%2Ftm%20ShuffleMB%2Fs%20keyBy%20%23records%2Fs*size%23tm-1%2F%23tm%20StatefulOperator%20CheckpointMB%2Fs%20FIEWyStEMStatebacktend%20%23keystate_size%20overallstate_size%2Fcheckpointinterval%20Sink%20EgressMB%2Fs%20%E8%A1%A5messages%2Fssize%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1074%2C%22height%22%3A487%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.45344506517690875&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot; title=&quot;图3.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhByMdNXlMcLZAns2pdH5a6U22c2wh38q7RYld3ARxtpYY5EibxBl3chQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;完成资源评估后，还需要考虑事件时间和乱序问题。下面是一个具体的例子：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913697460-1a34e2e3-fc65-4f43-91da-b3765db6cf17.png%22%2C%22originWidth%22%3A1170%2C%22originHeight%22%3A534%2C%22name%22%3A%22%E5%9B%BE4.png%22%2C%22size%22%3A46173%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1.2410647%2C%22y%22%3A-0.32645255%2C%22width%22%3A558.4634353%2C%22height%22%3A30.84658455%2C%22text%22%3A%22EventTime%26Out-Of-Orderness%2F%E4%BA%8B%E4%BB%B6%E6%97%B6%E9%97%B4%E5%92%8C%E4%B9%B1%E5%BA%8F%22%7D%2C%7B%22x%22%3A160.69026%2C%22y%22%3A65.85492%2C%22width%22%3A795.3654%2C%22height%22%3A31.187339999999992%2C%22text%22%3A%22Iwanttosendandlarmwhnthenumbeoftransoctionspercustomerexceeds%22%7D%2C%7B%22x%22%3A440.96747%2C%22y%22%3A101.51878%2C%22width%22%3A217.20459%2C%22height%22%3A18.848469999999992%2C%22text%22%3A%22threeintenseconds%22%7D%2C%7B%22x%22%3A265.95078%2C%22y%22%3A124.22355%2C%22width%22%3A561.32672%2C%22height%22%3A26.772530000000003%2C%22text%22%3A%22%E6%88%91%E6%83%B3%E5%9C%A8%E6%AF%8F%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%9A%84%E4%BA%A4%E6%98%93%E6%95%B0%E5%9C%A810%E7%A7%92%E5%86%85%E8%B6%85%E8%BF%873%E7%AC%94%E6%97%B6%E5%8F%91%E5%87%BA%E8%AD%A6%E6%8A%A5.%22%7D%2C%7B%22x%22%3A763.399%2C%22y%22%3A184.08%2C%22width%22%3A392.8398000000001%2C%22height%22%3A17.731799999999993%2C%22text%22%3A%22Fireorwaittillwatermrkeachesendofwindow%3F%22%7D%2C%7B%22x%22%3A573.48987%2C%22y%22%3A278.42938%2C%22width%22%3A29.94862999999998%2C%22height%22%3A29.25559000000004%2C%22text%22%3A%22%3F%22%7D%2C%7B%22x%22%3A1.0715508%2C%22y%22%3A280.8921%2C%22width%22%3A258.55381919999996%2C%22height%22%3A21.356829999999945%2C%22text%22%3A%22TumblingWindow(10secs)%3A%22%7D%2C%7B%22x%22%3A576.57825%2C%22y%22%3A363.91205%2C%22width%22%3A27.11175000000003%2C%22height%22%3A25.452729999999974%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A-0.78294677%2C%22y%22%3A368.68774%2C%22width%22%3A252.63202676999998%2C%22height%22%3A21.148859999999956%2C%22text%22%3A%22SlidingWindow(10%2F5secs)%22%7D%2C%7B%22x%22%3A1.2003076%2C%22y%22%3A440.68326%2C%22width%22%3A203.0346124%2C%22height%22%3A21.204499999999996%2C%22text%22%3A%22LookBack%5C%22(10secs)%3A%22%7D%2C%7B%22x%22%3A542.3915%2C%22y%22%3A500.18094%2C%22width%22%3A216.09275000000002%2C%22height%22%3A21.407759999999996%2C%22text%22%3A%22Fireorwaitforwatermark%3F%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EventTime%26Out-Of-Orderness%2F%E4%BA%8B%E4%BB%B6%E6%97%B6%E9%97%B4%E5%92%8C%E4%B9%B1%E5%BA%8F%20Iwanttosendandlarmwhnthenumbeoftransoctionspercustomerexceeds%20threeintenseconds%20%E6%88%91%E6%83%B3%E5%9C%A8%E6%AF%8F%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%9A%84%E4%BA%A4%E6%98%93%E6%95%B0%E5%9C%A810%E7%A7%92%E5%86%85%E8%B6%85%E8%BF%873%E7%AC%94%E6%97%B6%E5%8F%91%E5%87%BA%E8%AD%A6%E6%8A%A5.%20Fireorwaittillwatermrkeachesendofwindow%3F%20%3F%20TumblingWindow(10secs)%3A%2011%20SlidingWindow(10%2F5secs)%20LookBack%5C%22(10secs)%3A%20Fireorwaitforwatermark%3F%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1170%2C%22height%22%3A534%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4564102564102564&quot; data-type=&quot;png&quot; data-w=&quot;1170&quot; title=&quot;图4.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhcoCIcXgdrzP4coJ7rtv7cLRvYpgfwicAGJcmFnxUqiaeCQibdOXHX90sw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在这个例子中选择哪种时间窗口、何时触发计算，仅凭一句话的需求是无法描述清楚的。只有根据流处理的特性结合实际的业务去认真分析需求，才能将 Flink 技术进行恰当的运用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还需要注意，Flink 是流批统一的计算引擎，不是所有的业务都能用流处理或者都能用批处理来实现，需要分析自己的场景适合用哪种方式来实现。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;3. 开发&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;span&gt;&lt;strong&gt;3.1 API 的选择&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在 DataStream API 和 Table API/SQL 的选择上，如果有强烈的需求控制状态和每条状态到来的行为，要使用 DataStream API；如果是简单的数据提取和关系代数的运算，可以选择 Table API/SQL。在一些场景下，只能选择 DataStream API：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;swift&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a) 在升级过程中要改变状态&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;b) 不能丢失迟到的数据&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;c&lt;/span&gt;) 在运行时更改程序的行为&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2 数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在开发过程中，关于数据类型，有两种误用场景：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;pre&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;a) 使用深度嵌套的复杂数据类型&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;b) KeySelector 中使用任意类型&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;正确的做法是选择尽可能简单的状态类型，在 KeySelector 中不使用 Flink 不能自动识别的类型。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 序列化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据类型越简单越好，基于序列化成本的考虑，尽量使用 POJO 和 Avro SpecificRecords。也鼓励大家开发完使用 IDE 的工具本地调试一下，看一下性能瓶颈在哪。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;序列化器&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;td&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;Opts/s&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;PojoSeriallizer&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;813&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;Kryo&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;294&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;Avro(Reflect API)&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;114&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;Avro(SpecificRecord API)&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td&gt;&lt;section&gt;&lt;span&gt;632&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图5中是一种效率较低的处理过程，我们应该先进行过滤和投影操作，防止不需要的数据进行多余的处理。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913707441-791944e9-7665-4661-9a93-4f8aa1462744.png%22%2C%22originWidth%22%3A646%2C%22originHeight%22%3A211%2C%22name%22%3A%22%E5%9B%BE5.png%22%2C%22size%22%3A12306%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A55.232807%2C%22y%22%3A22.62421%2C%22width%22%3A442.586313%2C%22height%22%3A24.01783%2C%22text%22%3A%22sourcestream.flatMap(newDeserializer)%22%7D%2C%7B%22x%22%3A192.71323%2C%22y%22%3A48.40848%2C%22width%22%3A169.60384999999997%2C%22height%22%3A20.46687%2C%22text%22%3A%22keyBy(%5C%22cities&#x27;)%22%7D%2C%7B%22x%22%3A189.78632%2C%22y%22%3A73.76308%2C%22width%22%3A140.42608%2C%22height%22%3A19.14587999999999%2C%22text%22%3A%22timewindow%3F)%22%7D%2C%7B%22x%22%3A191.09001%2C%22y%22%3A97.90176%2C%22width%22%3A83.22658999999999%2C%22height%22%3A18.937275%2C%22text%22%3A%22.count)%22%7D%2C%7B%22x%22%3A185.08281%2C%22y%22%3A120.33141%2C%22width%22%3A431.39579000000003%2C%22height%22%3A21.779840000000007%2C%22text%22%3A%22filter(newGeographyFilter(%5C%22America%5C%22))%22%7D%2C%7B%22x%22%3A188.09218%2C%22y%22%3A145.43292%2C%22width%22%3A142.64014999999998%2C%22height%22%3A18.25878%2C%22text%22%3A%22.addsink(...)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22sourcestream.flatMap(newDeserializer)%20keyBy(%5C%22cities&#x27;)%20timewindow%3F)%20.count)%20filter(newGeographyFilter(%5C%22America%5C%22))%20.addsink(...)%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A646%2C%22height%22%3A211%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.326625386996904&quot; data-type=&quot;png&quot; data-w=&quot;646&quot; title=&quot;图5.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhZKSYU4RCUtfIjlVEFHwycn71EpEs3CiaqyN50KoO6epQCZnprN2dSicw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 并发性&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;两种误用场景及相应容易造成的问题：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;容易引起 bug；容易造成死锁和竞争问题；带来额外的同步开销。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;检查点变得复杂易错。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于想用线程的情况，如果是需要加速作业，可以调整并行度和资源，使用异步IO；如果是需要一些定时任务的触发，可以使用 Flink 自带的 Timer 定时调度任务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.5 窗口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;尽量避免像图6这样自定义 Window，使用 KeyedProcessFunction 可以使得实现更加简单和稳定。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913716435-e359e5e7-9088-4d15-9a40-b77f44028273.png%22%2C%22originWidth%22%3A587%2C%22originHeight%22%3A155%2C%22name%22%3A%22%E5%9B%BE6.png%22%2C%22size%22%3A12414%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A50.729492%2C%22y%22%3A17.672684%2C%22width%22%3A211.90035799999998%2C%22height%22%3A22.94693%2C%22text%22%3A%22stream.keyBy(%5C%22key&#x27;&#x27;)%22%7D%2C%7B%22x%22%3A122.29324%2C%22y%22%3A41.198658%2C%22width%22%3A337.80820000000006%2C%22height%22%3A26.225242%2C%22text%22%3A%22window(GIoba1windows.create))%22%7D%2C%7B%22x%22%3A118.67456%2C%22y%22%3A67.9806%2C%22width%22%3A317.98144%2C%22height%22%3A20.32065%2C%22text%22%3A%22trigger(newcustomTrigger))%22%7D%2C%7B%22x%22%3A121.47225%2C%22y%22%3A92.05039%2C%22width%22%3A315.51423%2C%22height%22%3A19.729944000000003%2C%22text%22%3A%22evictor(newCustomEvictor))%22%7D%2C%7B%22x%22%3A119.71537%2C%22y%22%3A115.30878%2C%22width%22%3A328.22405%2C%22height%22%3A22.00981%2C%22text%22%3A%22reduce%2Faggregate%2Ffold%2Fapply)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22stream.keyBy(%5C%22key&#x27;&#x27;)%20window(GIoba1windows.create))%20trigger(newcustomTrigger))%20evictor(newCustomEvictor))%20reduce%2Faggregate%2Ffold%2Fapply)%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A587%2C%22height%22%3A155%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.26405451448040884&quot; data-type=&quot;png&quot; data-w=&quot;587&quot; title=&quot;图6.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhJ0ZfprOC3csTG4G4OxC7DDAM0VgQG2Jtf5xD1g0QlUTWURb0Dqtdow/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;另外，也要避免图7中的这种滑动窗口，在图7中每个记录被50万个窗口计算，无论是计算资源还是业务延迟都会非常糟糕。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913725317-6d9f5bb2-9e39-44d2-b179-fadf899987c6.png%22%2C%22originWidth%22%3A712%2C%22originHeight%22%3A122%2C%22name%22%3A%22%E5%9B%BE7.png%22%2C%22size%22%3A10403%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A81.07477%2C%22y%22%3A23.340347%2C%22width%22%3A211.79111%2C%22height%22%3A25.552318999999997%2C%22text%22%3A%22stream.keyBy(%5C%22key%5C%22)%22%7D%2C%7B%22x%22%3A152.02559%2C%22y%22%3A47.94314%2C%22width%22%3A547.73576%2C%22height%22%3A18.394509999999997%2C%22text%22%3A%22timeWindow(Time.of(30%2CD)ie.SCON)%22%7D%2C%7B%22x%22%3A148.89482%2C%22y%22%3A72.96083%2C%22width%22%3A330.30138%2C%22height%22%3A19.515689999999992%2C%22text%22%3A%22apply(newMywindowFunction)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22stream.keyBy(%5C%22key%5C%22)%20timeWindow(Time.of(30%2CD)ie.SCON)%20apply(newMywindowFunction)%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A712%2C%22height%22%3A122%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.17134831460674158&quot; data-type=&quot;png&quot; data-w=&quot;712&quot; title=&quot;图7.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhq3El5tQQOYickq6IGgzXmWzAtxbeNz3x6r3o3JJiaTkt6YVvMDFluwlA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.6 可查询状态&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Queryable State 目前还在不断的完善中，可以用于监控和查询，但在实际投产时还是有一些问题需要注意的，比如对于线程安全访问，RocksDB 状态后端是支持的，而 FS 状态后端是不支持的，另外还有性能和一致性保障等问题需要注意。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;3.7 DataStream API 的应用&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对图8这种场景，可以使用 DataStreamUtils#reinterpretAsKeyedStream 这个方法，避免面对相同的 key 进行多次 shuffle 。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913735669-d9283fc4-6301-4110-8fd8-03c83f6ba3cb.png%22%2C%22originWidth%22%3A333%2C%22originHeight%22%3A177%2C%22name%22%3A%22%E5%9B%BE8.png%22%2C%22size%22%3A8508%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A59.2075%2C%22y%22%3A14.816358%2C%22width%22%3A209.79796000000002%2C%22height%22%3A24.773261999999995%2C%22text%22%3A%22stream.keyBy(%5C%22key&#x27;)%22%7D%2C%7B%22x%22%3A128.51591%2C%22y%22%3A41.299908%2C%22width%22%3A129.85442000000003%2C%22height%22%3A20.254534999999997%2C%22text%22%3A%22fiatmap(..)%22%7D%2C%7B%22x%22%3A127.953545%2C%22y%22%3A63.010334%2C%22width%22%3A141.81607499999996%2C%22height%22%3A24.694326000000004%2C%22text%22%3A%22keyBy(%5C%22key%5C%22)%22%7D%2C%7B%22x%22%3A134.38686%2C%22y%22%3A89.39728%2C%22width%22%3A124.72143999999997%2C%22height%22%3A18.602636000000004%2C%22text%22%3A%22.process(..)%22%7D%2C%7B%22x%22%3A130.65057%2C%22y%22%3A113.671295%2C%22width%22%3A138.30173%2C%22height%22%3A18.602175000000003%2C%22text%22%3A%22keyBy(%5C%22key%5C%22&#x27;)%22%7D%2C%7B%22x%22%3A127.26751%2C%22y%22%3A136.33879%2C%22width%22%3A163.16278999999997%2C%22height%22%3A19.33826000000002%2C%22text%22%3A%22timewindow(..)%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22stream.keyBy(%5C%22key&#x27;)%20fiatmap(..)%20keyBy(%5C%22key%5C%22)%20.process(..)%20keyBy(%5C%22key%5C%22&#x27;)%20timewindow(..)%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A333%2C%22height%22%3A177%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5315315315315315&quot; data-type=&quot;png&quot; data-w=&quot;333&quot; title=&quot;图8.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhIeK0ic46oN8kOwTaLfwJgYtcDDjd8Qrccj81UcaBic70xa8Wn3qDicnIw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对图9这种场景，应该把一些初始化的逻辑写在 RichFunction 的 open 方法里。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913744222-b1d07449-28a3-40cf-8dff-75eec387afdd.png%22%2C%22originWidth%22%3A1273%2C%22originHeight%22%3A263%2C%22name%22%3A%22%E5%9B%BE9.png%22%2C%22size%22%3A27580%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A85.16977%2C%22y%22%3A27.757578%2C%22width%22%3A1157.34693%2C%22height%22%3A35.733705%2C%22text%22%3A%22publicvodflatMa(Barbar%2Ccctoooout)howsExcetion%22%7D%2C%7B%22x%22%3A117.9265%2C%22y%22%3A68.8247%2C%22width%22%3A991.6748%2C%22height%22%3A34.27881599999999%2C%22text%22%3A%22MyparserfactoryfactoryMyparserfactory.newinstance%3B%22%7D%2C%7B%22x%22%3A119.26906%2C%22y%22%3A106.33555%2C%22width%22%3A671.33928%2C%22height%22%3A31.906639999999996%2C%22text%22%3A%22MyParserparserfactory.newParser%3B%22%7D%2C%7B%22x%22%3A117.81392%2C%22y%22%3A182.86208%2C%22width%22%3A548.53748%2C%22height%22%3A32.60128%2C%22text%22%3A%22out.collect(parser.parse(bar))%3B%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22publicvodflatMa(Barbar%2Ccctoooout)howsExcetion%20MyparserfactoryfactoryMyparserfactory.newinstance%3B%20MyParserparserfactory.newParser%3B%20out.collect(parser.parse(bar))%3B%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1273%2C%22height%22%3A263%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.206598586017282&quot; data-type=&quot;png&quot; data-w=&quot;1273&quot; title=&quot;图9.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhfnSEObdiauFbOnrxMSHGVMcepYLOUvnnic44oDXMa70ibRE2fcyFQZReg/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 测试&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F214695%2F1590913753024-28e8e0d7-62bd-45ae-8854-01ad8a5c11e1.png%22%2C%22originWidth%22%3A1232%2C%22originHeight%22%3A628%2C%22name%22%3A%22%E5%9B%BE10.png%22%2C%22size%22%3A23422%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A512.49634%2C%22y%22%3A233.58885%2C%22width%22%3A228.05029000000002%2C%22height%22%3A40.48177000000001%2C%22text%22%3A%22SystemTests%22%7D%2C%7B%22x%22%3A427.73883%2C%22y%22%3A338.701%2C%22width%22%3A397.78211%2C%22height%22%3A31.665059999999983%2C%22text%22%3A%22MiniclusterResource%22%7D%2C%7B%22x%22%3A428.55148%2C%22y%22%3A439.21594%2C%22width%22%3A397.67196999999993%2C%22height%22%3A33.495209999999986%2C%22text%22%3A%22AbstractTestHarness%22%7D%2C%7B%22x%22%3A495.20087%2C%22y%22%3A526.8158%2C%22width%22%3A261.21349999999995%2C%22height%22%3A33.13385000000005%2C%22text%22%3A%22UDFUnItTests%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SystemTests%20MiniclusterResource%20AbstractTestHarness%20UDFUnItTests%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1232%2C%22height%22%3A628%7D&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5097402597402597&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot; title=&quot;图10.png&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8AsYBicEePu6oVT9FXjLzy3mjn9yAFYZhhwAtbmGuL5hugX1VbrkG9VswhcyxjpTy5utv0shlRC2gxQqGjia6MLw/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除了系统测试和 UDF 的单元测试，还应该做 Mini Cluster 测试，在本机运行一个 Mini Cluster 把端到端的业务跑起来，可以及早地发现一些问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;还有 Harness 测试，它可以精准地帮助完成有状态的任务测试。它可以精准的控制 watermark、元素的 event time 等。可以参考:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;https://github.com/knaufk/flink-testing-pyramid&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5. 上线&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;很多场景会导致&lt;strong&gt;业务抖动&lt;/strong&gt;，一种是实际业务本身就有抖动，其他的比如 Timer、CP 的对齐、GC 等正常现象的发生，还有追数据的场景，开始和追平的时候状态是不一样的，这种情况下也不用担心，有意识地识别这种状况，进而判断这种是正常还是非预期状况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在线上&lt;strong&gt;监控&lt;/strong&gt;时要注意，metrics 过多会对 JVM 造成很大压力，上报的频率不要选择  subtask，这对资源的开销是很高的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在&lt;strong&gt;配置&lt;/strong&gt;时要注意，一开始尽量不用 RocksDB 状态后端，FS 状态后端的部署成本低速度也更快。少用网络的文件系统。SlotSharingGroups 的配置尽量使用默认的，避免引发欠机制的破坏，导致资源浪费。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6. 维护&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;像 Flink 这样快节奏的项目，每个版本都有很多 bug 被修复，及时升级也很重要。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.009375&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/S7tIvo5xYM7oYWFZpj1ibzDQTCfDHfQKqJJzcCrzAgIicLiaiaIiavhsE7a4zwevtjBgXbEEuFVMSDiafNIaDgL3j1Nw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0df6a17571c958e503276aeb7c7f5862</guid>
<title>RTC Dev Meetup丨语音处理在实时互动领域的技术实践和应用（第二场）</title>
<link>https://toutiao.io/k/foahvk0</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;  &quot; id=&quot;event_desc_page&quot;&gt;&amp;#13;
                        &lt;p&gt;&lt;span&gt;实时互动作为下一代技术基础能力，正在渗透各行各业。尤其是受疫情的影响，人们越来越习惯在线、远程的工作、学习甚至生活。同时社交直播、游戏电竞、金融、保险、医疗等场景也被搬到了线上，实时互动正在支撑着这些人、物及空间之间创新的沟通和交互方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实时互动场景中，语音处理是非常重要的一个部分，比如实时语音识别和实时语音翻译，可以将连续的音频流实时转换成文本，并进行实时翻译，应用在直播实时字幕、会议实时记录等场景，可以大大提高用户体验和沟通效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次，我们邀请了语音处理方面的技术专家，为大家分享语音处理在实时互动领域的最佳技术实践和业务应用。本次，我们邀请了来自&lt;strong&gt;百度、讯飞、依图、微  软、声网、数美&lt;/strong&gt;等企业的语音处理方面的技术专家，分别在&lt;strong&gt;4月28日、5月14日&lt;/strong&gt;为大家分享语音处理在实时互动领域的最佳技术实践和业务应用，欢迎大家报名参与～～&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;时间地点&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;活动时间：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;5月 14 日（星期六） 14:00——16:30&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;活动地点：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;线上直播&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    &lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;活动流程&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;  &lt;strong&gt;14:00-14:10   开场&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  &lt;strong&gt;14:10-14:50  《&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;FastCorrect：语音识别快速纠错模型》&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209 ql-font-microsoftyahei&quot; ql-global=&quot;true&quot;&gt;谭旭，微软亚洲研究院&lt;/strong&gt;&lt;strong class=&quot;ql-font-microsoftyahei&quot; ql-global=&quot;true&quot;&gt;主&lt;/strong&gt;&lt;strong class=&quot;ql-font-microsoftyahei ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;管&lt;/strong&gt;&lt;strong class=&quot;ql-font-microsoftyahei&quot; ql-global=&quot;true&quot;&gt;研&lt;/strong&gt;&lt;strong class=&quot;ql-font-microsoftyahei ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;究员&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  &lt;strong&gt;14:50-15:30 《&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;Any to Any实时变声的实现与落地》&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;冯建元,声网音频体验算法专家&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  &lt;strong&gt;15:30-16:10 《&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;如何解决 Iterative 半监督训练在ASR训练中难以落地&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;》&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209 ql-font-microsoftyahei&quot; ql-global=&quot;true&quot;&gt;李田，数美科技NLP技术负责人&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  &lt;strong&gt;16:10-16:30   抽奖&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;USYv&quot; linespacing=&quot;200&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span ql-global=&quot;true&quot; class=&quot;ql-author-10306337&quot;/&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾一&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30844478872181603.jpg&quot; title=&quot;4.jpg&quot; alt=&quot;4.jpg&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;U4ok&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;谭旭，微软亚洲研究院主管研究员&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;谭旭，微软亚洲研究院主管研究员&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;xXLn&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享主题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;ywq7&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;FastCorrect：语音识别快速纠错模型&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;0vW4,nq0J&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;FastCorrect：语音识别快速纠错模型&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Sl5P&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;个人简介：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;0bbM&quot; linespacing=&quot;200&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span&gt;微软亚洲研究院主管研究员，研究领域包括深度学习、自然语言/语音/音乐、AI内容生成等，在学术会议上发表论文80余篇。研发的机器翻译系统在WMT机器翻译比赛中获得多项冠军，研发的预训练语言模型MASS、AI音乐项目Muzic受到学界广泛关注。在语音合成和识别方面的研究成果（LRSpeech，FastSpeech 1/2，AdaSpeech，FastCorrect 1/2等）帮助微软Azure语音合成和识别服务提升产品体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9uOm&quot; linespacing=&quot;200&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span&gt;·    语音识别纠错通过检测并纠正语音识别结果中存在的错误，进一步提升识别准确率。目前，大部分纠错模型采用了基于注意力机制的自回归结构，延迟较高，影响模型线上部署。本次报告介绍一种低延迟、高精度的纠错模型FastCorrect系列，通过利用编辑对齐以及多个候选结果，在取得10%的词错误率下降的同时，将模型加速6-9倍，相关研究论文已被 NeurIPS 2021 和 EMNLP 2021 收录。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;GIuI&quot; linespacing=&quot;200&quot; ql-global=&quot;true&quot;&gt; &lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾二&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30334478872321607.jpg&quot; title=&quot;冯建元.jpg&quot; alt=&quot;冯建元.jpg&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;bRNU&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;冯建元,声网音频体验算法专家&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Uyn6&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong ql-global=&quot;true&quot;&gt;冯建元&lt;/strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;,声网音频体验算法专家&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;M81Y&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享主题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;hvUE&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;Any to Any实时变声的实现与落地&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;ZRuM&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;Any to Any实时变声的实现与落地&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;2Shq&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;个人简介：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;tzef&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;美国伊利诺伊理工学院博士，伊利诺伊大学芝加哥分校特聘研究员，Agora音频体验算法专家，十年算法研究从业经验。先后主导过多个实时音频领域的开发项目包括国内首个AI音频编解码器Sliver、实时美声音效系统、实时声纹变声、实时空间音频渲染等产品研发。极客时间《搞定音频技术》栏目讲师。目前负责Agora超高音质音频系统的设计与研发。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9JsU&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;9JsU&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着ASR、TTS技术的演进, 语音识别的准确性和语音合成的自然度都有了极大的提升。这为高质量的实时变声的实现提供了可能。传统的变声利用包括变调效果器、均衡器等音效模块来调整语音的音色，但这种效果器的方式必须依赖手动调节通用性差、且变声效果不稳定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而基于ASR-TTS架构的AI变声算法可以做到“Any to Any”（把任何人变成任何人）的自动变声同时又不会影响语音的可懂度。同时在RTC领域要求变声要有较高的实时性，端到端的延迟必须小于1s，这对模型的算力和部署都提出了挑战。这次分享我们会围绕以下几个方面进行分享和讨论：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、 基于传统音效的变声算法的困境&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、 实时变声算法的设计与思考&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、实时变声如何落地与应用&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;92I0&quot; linespacing=&quot;200&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;strong&gt;&lt;span ql-global=&quot;true&quot; class=&quot;ql-author-10306337&quot;/&gt;&lt;/strong&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;嘉宾三&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30944478872741611.jpg&quot; title=&quot;6.jpg&quot; alt=&quot;6.jpg&quot;/&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30884478872481609.jpg&quot; title=&quot;6.jpg&quot; alt=&quot;6.jpg&quot;/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;KVKn&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;李田，数美科技NLP技术负责人&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;PPVD&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;李田，数美科技NLP技术负责人&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;5mYi&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分享主题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;SPLm,qIvo&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;span data-shimo-docs=&quot;[[20,&amp;quot;如何解决 Iterative 半监督训练在ASR训练中难以落地&amp;quot;,&amp;quot;0:\&amp;quot;%23000000\&amp;quot;|8:1&amp;quot;]]&quot;/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;TAC1&quot; class=&quot;ql-align-center ql-long-7400209&quot; linespacing=&quot;115&quot;&gt;&lt;strong&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;&lt;strong class=&quot;ql-author-7400209&quot; ql-global=&quot;true&quot;&gt;如何解决 Iterative 半监督训练在ASR训练中难以落地&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;5mYi&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong ql-global=&quot;true&quot; class=&quot;ql-author-10306337&quot;&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;个人简介：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;zNyZ&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;埃塞克斯大学大数据及文本分析硕士，现负责数美科技天净业务体系NLP技术落地，曾先后负责金融评分体系、语音产品孵化和优化、端到端音频事件监测，语音转录，文本语义模型，文本翻译， 模型加速等体系的开发和建设。拥有多年人工智能、机器学习、算法领域经验，在处理语音、文本、图像等场景下的实战经验颇丰。&lt;/span&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;Ji92&quot; class=&quot;ql-align-justify ql-long-10306337&quot; linespacing=&quot;200&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;内容简介：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;1、半监督训练在ASR领域的应用&lt;/p&gt;&lt;p&gt;2、半监督训练在ASR领域的进展和问题&lt;/p&gt;&lt;p&gt;3、我们半监督方案解决的问题&lt;/p&gt;&lt;p&gt;4、Improved NIPL解决方案&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;LCNh&quot; linespacing=&quot;200&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span/&gt;&lt;/p&gt;&lt;p ql-global-para=&quot;true&quot; line=&quot;LCNh&quot; linespacing=&quot;200&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;活动福利&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;报名直播参与活动，即有机会领取本次&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;精美声网周边&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;，心动不如行动，扫码报名本次活动吧！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30914478890841822.jpeg&quot; title=&quot;wecom-temp-686a57a8055876a013a57e1255fc13fb.png&quot; alt=&quot;wecom-temp-686a57a8055876a013a57e1255fc13fb.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h4 data-foldable-wrapper=&quot;&quot; class=&quot;ql-long-10306337&quot;&gt;&lt;span/&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;活动社群&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30844507524041882.jpeg&quot; title=&quot;WechatIMG2655.png&quot; alt=&quot;WechatIMG2655.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;扫码进入👆开发者交流群，会后可以获取PPT等会议资料&lt;/p&gt;&lt;p&gt;&lt;span&gt;提示：直播需要报名后才可以观看&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;活动主办&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.22777777777777777&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/YO07vjlZVBES5OhpbXjmcoq0cBFbfbhFxdv7UQYViaAGjMuMHVIiamE4fyu3fFPNkVqUzdoGuOdSsddUFJHqm48Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; _width=&quot;192px&quot; src=&quot;https://www.huodongxing.com/file/ue/crawl/20150907/11EC6A5AE18CC6F72FD13133F73B484844/114368638571009.jpeg&quot; wah-hotarea=&quot;click&quot; crossorigin=&quot;anonymous&quot; alt=&quot;图片&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;合作伙伴&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;   &lt;img src=&quot;http://cdn.huodongxing.com/file/ue/20150907/11EC6A5AE18CC6F72FD13133F73B484844/30114499800871768.jpeg&quot; title=&quot;WechatIMG2638.png&quot; alt=&quot;WechatIMG2638.png&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&amp;#13;
                    &lt;/div&gt;&amp;#13;
                    &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ecca089c51eb3cd46a420e8e6a3ccdf2</guid>
<title>淘系用户平台技术团队单元测试建设</title>
<link>https://toutiao.io/k/q3icjun</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Z6bicxIx5naLrPibchbysmo6DnBNy1a1fg0XEqT1YicOfrF3WOmYAM4ZEhfXBM026q54gFagzTuLLqcic338GvccfQ/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;为什么需要单元测试&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;纵观优秀的开源工程，完备的单元测试总是必须的条件。&lt;/span&gt;&lt;span&gt;通过这些单元测试，我们可以充分了解代码中相关类和方法的作用和核心逻辑，熟悉各种场景的运行情况。&lt;/span&gt;&lt;span&gt;同时也因为有了单元测试，开源作者在接受各种feature的代码提交时才有稳定安全的保障。&lt;/span&gt;&lt;span&gt;其实单元测试的重要性所有开发同学应该都了然于胸，同样TDD(测试驱动开发)也不是一个新的概念，但是真当我们落地实践时，又总会找出各种各样的理由来劝服自己下次一定好好写单元测试，这一次先放过自己。&lt;/span&gt;&lt;span&gt;这些理由无外乎，开发周期太紧了; 测试同学能保证功能正确性;写单元测试代码量比业务代码还大; 又不是不能跑。&lt;/span&gt;&lt;span&gt;所以虽然我们总是在追逐工程师文化，却又时不时放纵在放弃工程师底蕴的路上。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单元测试是工程交付前质量保障的第一环，也无疑是软件工程质量保障的重要基石，有效的单元测试能够提前发现90%以上的代码Bug问题，同时也能防止代码的腐化，在工程重构演进时起到至关重要的作用。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;怎么写单元测试&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;好的单元测试的几个要点&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;摘自阿里巴巴开发规约&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试必须遵守AIR原则，单元测试必须具备Automatic(自动化)，Independent(独立性)，Repeatable(可重复)性；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试要保证测试粒度足够小。单元测试测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试要遵守BCDE原则，Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等；Correct，正确的输入，并得到预期的结果；Design，与设计文档相结合，来编写单元测试；Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;核心业务、核心应用、核心模块的增量代码要确保单元测试通过；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;单元测试编码范式&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里主要以Mockito单元测试框架为模版&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Mock :&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;通过when().thenReturn/thenAnswer/thenThrow 或者doReturn().when()等mock方式将依赖类方法进行模拟，模拟服务依赖或者中间结果&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;DO :  &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调用被测试类方法，执行测试链路&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Verify :  &lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;校验执行结果正确性，通过Assert校验数据结果准确，通过Verify校验链路执行准确，通过expected=Exception.class校验异常链路&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;java&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Mock&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DependencyClass dependencyClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@InjectMocks&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    TestClass testClass;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Before&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        MockitoAnnotations.initMocks(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testMethod&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        when(dependencyClass.someMehod(any())).thenReturn(mockData());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Result result = testClass.testMehod();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Assert.assertEquals(&lt;span class=&quot;code-snippet__string&quot;&gt;&quot;some expected result string&quot;&lt;/span&gt;, result.getModel());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;当然写单元测试用例虽然套路比较模版化，但是我们也要充分利用单元测试框架（Junit/Mockito/PowerMock/Spock），掌握其中的一些技巧，才能写出快准狠的单元测试用例，这也是研发同学必须要掌握的基本功。关于如何利用单元测试框架这里不再赘述（详细可以参考阿里技术《Java编程技巧之单元测试用例编写流程》）。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;单元测试编码提效&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;IDEA上有很多单元测试插件，能够半自动化生成单元测试类文件，这里重点推荐&lt;/span&gt;&lt;span&gt;TestMe插件&lt;/span&gt;&lt;span&gt;。TestMe插件可以智能分析被测试类的依赖类，结合Mockito+Junit等单元测试框架，生成Mock/InjectMocks依赖关系，自动生成单元测试类。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8990476190476191&quot; data-type=&quot;png&quot; data-w=&quot;1050&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKw7Omnxm4pVRJ7aem7GINGMZmHvfW6DBwXVzyfiaBWueQR5waNuibyRtyc77YuY5wHCzibpc2K5meXw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;假设业务代码如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;java&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DefaultMemberManager&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;MemberManager&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; MemberDAO memberDAO;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__keyword&quot;&gt;private&lt;/span&gt; CacheManager cacheManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; Date &lt;span class=&quot;code-snippet__title&quot;&gt;queryActivationTime&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;(&lt;span class=&quot;code-snippet__keyword&quot;&gt;long&lt;/span&gt; userId)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date activationTime = cacheManager.getActivationTime(userId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (activationTime == &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            MemberDO memberDO = memberDAO.queryByUserId(userId);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;if&lt;/span&gt; (memberDO != &lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                cacheManager.saveActivationTime(userId, memberDO.getActiveTime());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;                activationTime = memberDO.getActiveTime();&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        &lt;span class=&quot;code-snippet__keyword&quot;&gt;return&lt;/span&gt; activationTime;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;span&gt;则通过TestMe快捷键COMMOND+N, 可以极速自动生成如下的单元测试类&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;pre data-language=&quot;java&quot;&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;java&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__class&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;DefaultMemberManagerTest&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Mock&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    MemberDAO memberDAO;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Mock&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    CacheManager cacheManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@InjectMocks&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    DefaultMemberManager defaultMemberManager;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Before&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        MockitoAnnotations.initMocks(&lt;span class=&quot;code-snippet__keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    &lt;span class=&quot;code-snippet__function&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;code-snippet__title&quot;&gt;testQueryActivationTime&lt;/span&gt;&lt;span class=&quot;code-snippet__params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        when(memberDAO.queryByUserId(anyLong())).thenReturn(&lt;span class=&quot;code-snippet__keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        when(cacheManager.getActivationTime(anyLong())).thenReturn(&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;            &lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; GregorianCalendar(&lt;span class=&quot;code-snippet__number&quot;&gt;2022&lt;/span&gt;, Calendar.MARCH, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getTime());&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Date result = defaultMemberManager.queryActivationTime(&lt;span class=&quot;code-snippet__number&quot;&gt;0L&lt;/span&gt;);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        Assert.assertEquals(&lt;span class=&quot;code-snippet__keyword&quot;&gt;new&lt;/span&gt; GregorianCalendar(&lt;span class=&quot;code-snippet__number&quot;&gt;2022&lt;/span&gt;, Calendar.MARCH, &lt;span class=&quot;code-snippet__number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;).getTime(), result);&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;团队单元测试建设&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;覆盖率概念&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;覆盖率是类JaCoCo插件通过javaagent挂载的方式，在单元测试命令运行时执行代码覆盖率检测，计算单元测试执行过程中所覆盖的代码比例来生成覆盖率。常见的覆盖率指标，又可进一步细分为语句覆盖率，条件覆盖率，分支覆盖率，路径覆盖率等。这里我们当前更为关注语句覆盖率和分支覆盖率，尤其是增量代码的覆盖率，更能体现变更代码的单元测试覆盖情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;如何进行单元测试&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这里我们借助于阿里研发平台Aone的测试实验室功能，Aone实验室支持测试任务插件的编排组合，通过独立的测试资源执行测试任务。所以我们将代码拉取插件，单元测试插件和覆盖率计算插件进行编排配置，形成最终的执行流：拉取代码；执行单元测试命令；单元测试结果解析；计算覆盖率。最终完成整个工程的单元测试覆盖率计算。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.1575091575091574&quot; data-type=&quot;png&quot; data-w=&quot;546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKw7Omnxm4pVRJ7aem7GINGajVIbU9Ju3TvLfGHZVy5K2uvtCKXKcSWcrv6GLDkicWO0RBECpBeTpA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;单元测试覆盖率结果示例如下&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3015625&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKw7Omnxm4pVRJ7aem7GINGa6TYxwzcPumb45OO9XCFhgpFhwfIpPQOWbmmDeRXWL4h1PQvuG7Jiaw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;什么时候触发单元测试&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt; 单元测试任务主要通过持续交付流水线pipeline来集成，当前几个主要触发策略如下&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码提交时，保证单元测试执行及时性&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码审核时，保证代码审核通过的代码分支符合单元测试标准&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;发布流程中，保证最终集成发布的所有分支代码符合单元测试标准&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;单元测试覆盖率卡点&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;用户平台技术团队单元测试规范如下:&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试用例通过率为100%&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;单元测试增量代码行覆盖率为85%&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;代码规范扫描增量问题总数为0个&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;h3&gt;&lt;span&gt;单元测试覆盖率报表&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;为了更好的衡量单元测试的覆盖率情况，我们采用报表的形式统计每个应用，每个团队的代码单元测试覆盖率。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2984054669703872&quot; data-type=&quot;png&quot; data-w=&quot;2634&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Z6bicxIx5naKw7Omnxm4pVRJ7aem7GINGtaRZ6DypTBuPR6EFhN8LWViaB4B7mF0HFb0L0lM06zDLqQuGknqlbjA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;当前团队内各应用（除边缘应用外）的单元测试增量代码覆盖率在2022年已经全部达到85%标准，最新平均增量代码行覆盖率达到88%，整体全量代码覆盖率平均提高20%。诚然单元测试覆盖率的提高不是最终的目的，覆盖率高不能完全代表工程质量高，但是一个没有单元测试或者单元测试覆盖率低的工程，其代码质量和稳定性必然不高。同时团队内研发同学对单元测试也有了新的认识，自测和提测质量显著提升，全年未发生由于代码质量产生的线上故障，有效提升了工程质量和服务稳定性。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;后续规划，持续优化单元测试质量，提升分支覆盖率，优化边界异常覆盖；关注单元测试编码效率的提升，优化测试用例和测试数据分离；关注核心链路单元测试覆盖率；熟练将TDD思维运用到业务开发过程中。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;团队介绍&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;大淘宝技术-用户平台技术团队是一支集研发、数据、算法一体的团队，负责淘系的用户增长，游戏互动，平台会员和私域运营等消费者核心业务。在对用户争夺进入白热化的时期，团队正承担着捍卫电商主板块增长的重要使命，是阿里核心电商战场的参与者，用持续的技术创新来驱动阿里电商引擎的稳步前行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;这是一支年轻开放的团队，在这里你将收获超大规模高并发场景的架构设计能力，洞悉用户增长最前沿的实践方法，在数字化时代收获最核心的竞争力。团队技术氛围浓厚，倡导创新和工程师文化，鼓励用数据和代码发现解决问题。团队研发流程规范，代码质量高，学习成长速度快。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;如果您有兴趣可将简历发至wangliyuan.wly@alibaba-inc.com，期待您的加入。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;Serverless Develpoer Meetup 课程&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;阿里云首场线下 Serverless Developer Meetup 即将亮相，来自阿里云、淘宝、闲鱼、百富旅行的技术大咖，洞察 Serverless 在中国的发展趋势；深度分享 Serverless 在 双11 和企业的落地经验；首次披露 Serverless Devs 开源细节。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;点击阅读原文查看详情！&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>