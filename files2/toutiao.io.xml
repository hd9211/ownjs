<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>5c03f3c416506ae96bb746a3e339f3a2</guid>
<title>JMH + Arthas，性能监控的神器</title>
<link>https://toutiao.io/k/7xbvm5y</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;h3 data-tool=&quot;mdnice编辑器&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;em&gt;&lt;span&gt;&lt;span&gt;欢迎关注方志朋的博客，回复”666“获面试宝典&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h3&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzAxNjk4ODE4OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/rtJ5LhxxzwnbUicAvdMbPRUnia3f4BqeTWKY36vv0Fo7EKp2vzDFQoStoOpOIITicknjibGLyWYAtftKt39aSH4lTw/0?wx_fmt=png&quot; data-nickname=&quot;方志朋&quot; data-alias=&quot;walkingstory&quot; data-signature=&quot;号主为CSDN博客之星，博客访问量突破一千万，著有畅销书《深入理解SpringCloud与微服务构建》。主要分享Java、后端架构等技术，用大厂程序员的视角来探讨技术进阶、面试指南、职业规划等。15W技术人的选择！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最近的工作日并不算太平，各种大大小小的case和解case，发现已经有好久好久没有静下心来专心写点东西了。不过倒还是坚持利用业余时间学习了不少微课上的东西，发现大佬们总结的东西还是不一样，相比于大学时的那些枯燥的课本，大佬们总结出来的内容更活，更加容易理解。自己后面也会把大佬们的东西好好消化吸收，变成自己的东西用文字性的东西表达出来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天想总结的东西是最近工作中使用到的测试工具JMH以及Java运行时监控工具Arthas。他们在我的实际工作中也算是帮了大忙。所以在这里抛砖引玉一下这些工具的使用方法。同时也加深一下自己对这些工具的熟悉程度。对这两个工具，我都会首先简单介绍一下这些工具的大致使用场景，然后会使用一个在工作中真正遇到的性能问题排查为例详细讲解这两个工具的实际用法。话不多说，直奔主题。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;问题描述&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了能够让我后面的实例能够贯穿这两个工具的使用，我首先简单描述下我们在开发中遇到的实际的性能问题。然后再引出这两个性能工具的实际使用，看我们如何使用这两个工具成功定位到性能瓶颈的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题如下：为了能够支持丢失率，我们将原先log4j2 的Async+自定义Appender的方式进行了修正，把异步的逻辑放到了自己改版后的Appender中。但我们发现修改后日志性能要比之前Async+自定义Appender的方式下降不少。这里由于隐私原因我并没有用实际公司中的实例，这里我用了一种其他同样能够体现问题的方式。我们暂时先不给出具体的配置文件，先给出性能测试代码和结果&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; com.bryantchang.appendertest;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AppenderTest&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGGER_NAME_DEFAULT = &lt;span&gt;&quot;defaultLogger&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGGER_NAME_INCLUDE = &lt;span&gt;&quot;includeLocationLogger&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(LOGGER_NAME_INCLUDE);&lt;br/&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; BATCH = &lt;span&gt;10000&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;long&lt;/span&gt; start, end;&lt;br/&gt;            start = System.currentTimeMillis();&lt;br/&gt;            &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; BATCH; i++) {&lt;br/&gt;                LOGGER.info(&lt;span&gt;&quot;msg is {}&quot;&lt;/span&gt;, i);&lt;br/&gt;            }&lt;br/&gt;            end = System.currentTimeMillis();&lt;br/&gt;            System.out.println(&lt;span&gt;&quot;duration of &quot;&lt;/span&gt; + LOGGER_NAME_INCLUDE +  &lt;span&gt;&quot; is &quot;&lt;/span&gt; + (end - start) + &lt;span&gt;&quot;ms&quot;&lt;/span&gt;);&lt;br/&gt;            Thread.sleep(&lt;span&gt;1000&lt;/span&gt;);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码逻辑及其简单，就是调用logger.info每次打印10000条日志，然后记录耗时。两者的对比如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.375609756097561&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;820&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefKjtFSsru5EibqsSicexguola7pz42FvqdJCGzicica8VnSEOTX3KibuBzzg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这两张图片中我们能够看到同样的逻辑，两个程序的耗时差距相差了数十倍，但看图片，貌似仅仅是logger的名称不一样。对上面的实验结果进行分析，我们可能会有两个疑问&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;上面的代码测试是否标准，规范&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果真的是性能问题，那么这两个代码到底在哪个方法上有了这么大的差距导致了最终的性能差异&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下面这两个工具就分别来回答这两个问题&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;JMH简介&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第一个问题就是，测试的方法是否标准。我们在编写代码时用的是死循环+前后“掐秒表”的方式。假如我们要再加个多线程的测试，我们还需要搞一个线程池，除了代码本身的逻辑还要关心测试的逻辑。我们会想，有没有一款工具能够将我们从测试逻辑中彻底解放出来，只需要关心我们需要测试的代码逻辑。JMH就是这样一款Java的测试框架。下面是JMH的官方定义&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;JMH 是一个面向 Java 语言或者其他 Java 虚拟机语言的性能基准测试框架&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里面我们需要注意的是，JMH所测试的方法约简单越好，依赖越少越好，最适合的场景就是，测试两个集合put，get性能，例如ArrayList与LinkedList的对比等，这里我们需要测试的是批量打一批日志所需要的时间，也基本符合使用JMH的测试场景。下面是测试代码，bench框架代码以及主函数。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogBenchMarkWorker&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;LogBenchMarkWorker&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogBenchMarkWorkerInstance&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; LogBenchMarkWorker instance = &lt;span&gt;new&lt;/span&gt; LogBenchMarkWorker();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; LogBenchMarkWorker &lt;span&gt;getInstance&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; LogBenchMarkWorkerInstance.instance;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGGER_DEFAULT_NAME = &lt;span&gt;&quot;defaultLogger&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String LOGGER_INCLUDE_LOCATION = &lt;span&gt;&quot;includeLocationLogger&quot;&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(LOGGER_DEFAULT_NAME);&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; BATCH_SIZE = &lt;span&gt;10000&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;logBatch&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; BATCH_SIZE; i++) {&lt;br/&gt;            LOGGER.info(&lt;span&gt;&quot;msg is {}&quot;&lt;/span&gt;, i);&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到待测试方法非常简单，就是单批次一次性打印10000条日志的操作，所以并没有需要额外说明的部分。下面我们再来看benchmark部分。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;LogBenchMarkMain&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Benchmark&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@BenchmarkMode&lt;/span&gt;(Mode.AverageTime)&lt;br/&gt;    &lt;span&gt;@Fork&lt;/span&gt;(value = &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@Threads&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testLog1&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        LogBenchMarkWorker.getInstance().logBatch();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Benchmark&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@BenchmarkMode&lt;/span&gt;(Mode.AverageTime)&lt;br/&gt;    &lt;span&gt;@Fork&lt;/span&gt;(value = &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@Threads&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testLog4&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        LogBenchMarkWorker.getInstance().logBatch();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Benchmark&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@BenchmarkMode&lt;/span&gt;(Mode.AverageTime)&lt;br/&gt;    &lt;span&gt;@Fork&lt;/span&gt;(value = &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@Threads&lt;/span&gt;(&lt;span&gt;8&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testLog8&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        LogBenchMarkWorker.getInstance().logBatch();&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Benchmark&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;@BenchmarkMode&lt;/span&gt;(Mode.AverageTime)&lt;br/&gt;    &lt;span&gt;@Fork&lt;/span&gt;(value = &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;@Threads&lt;/span&gt;(&lt;span&gt;16&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;testLog16&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        LogBenchMarkWorker.getInstance().logBatch();&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这段代码中，我们就会发现有了一些JMH中特有的东西，我下面进行简要介绍。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;Benchmark注解：标识在某个具体方法上，表示这个方法将是一个被测试的最小方法，在JMH中成为一个OPS&lt;br/&gt;BenmarkMode:测试类型，JMH提供了几种不同的Mode&lt;br/&gt;    Throughput:整体吞吐量&lt;br/&gt;    AverageTime:调用的平均时间，每次OPS执行的时间&lt;br/&gt;    SampleTime:取样，给出不同比例的ops时间，例如99%的ops时间，99.99%的ops时间&lt;br/&gt;fork：fork的次数，如果设置为2，JMH会fork出两个进程来测试&lt;br/&gt;Threads：很容易理解，这个参数表示这个方法同时被多少个线程执行&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面的代码中，我定义了4个待测试的方法，方法的Fork，BenchmarkMode均为测试单次OPS的平均时间，但4个方法的线程数不同。除了这几个参数，还有几个参数，我会在main函数里面来讲，main代码如下所示&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Main&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;span&gt;throws&lt;/span&gt; RunnerException &lt;/span&gt;{&lt;br/&gt;        Options options = &lt;span&gt;new&lt;/span&gt; OptionsBuilder()&lt;br/&gt;                .include(LogBenchMarkMain&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;.&lt;span&gt;getSimpleName&lt;/span&gt;())&lt;br/&gt;                .&lt;span&gt;warmupIterations&lt;/span&gt;(5)&lt;br/&gt;                .&lt;span&gt;measurementIterations&lt;/span&gt;(5)&lt;br/&gt;                .&lt;span&gt;output&lt;/span&gt;(&quot;&lt;span&gt;logs&lt;/span&gt;/&lt;span&gt;BenchmarkCommon&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;&quot;)&lt;br/&gt;                .&lt;span&gt;build&lt;/span&gt;()&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;new&lt;/span&gt; Runner(options).run();&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，在main函数中，我们就是要设置JMH的基础配置，这里面的几个配置参数含义如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;include:benchmark所在类的名字，可以使用正则表达&lt;br/&gt;warmupIteration:预热的迭代次数，这里为什么要预热的原因是由于JIT的存在，随着代码的运行，会动态对代码的运行进行优化。因此在测试过程中需要先预热几轮，让代码运行稳定后再实际进行测试&lt;br/&gt;measurementIterations:实际测试轮次&lt;br/&gt;output:测试报告输出位置&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我分别用两种logger运行一下测试，查看性能测试报告对比&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用普通logger&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;LogBenchMarkMain.testLog1   avgt    5  0.006 ± 0.001   s/op&lt;br/&gt;LogBenchMarkMain.testLog16  avgt    5  0.062 ± 0.026   s/op&lt;br/&gt;LogBenchMarkMain.testLog4   avgt    5  0.006 ± 0.002   s/op&lt;br/&gt;LogBenchMarkMain.testLog8   avgt    5  0.040 ± 0.004   s/op&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用了INCLUDE_LOCATION的logger&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;LogBenchMarkMain.testLog1   avgt    5  0.379 ± 0.007   s/op&lt;br/&gt;LogBenchMarkMain.testLog16  avgt    5  1.784 ± 0.670   s/op&lt;br/&gt;LogBenchMarkMain.testLog4   avgt    5  0.378 ± 0.003   s/op&lt;br/&gt;LogBenchMarkMain.testLog8   avgt    5  0.776 ± 0.070   s/op&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我们看到，性能差距立现。使用INCLUDE_LOCATION的性能要明显低于使用普通logger的性能。这是我们一定很好奇，并且问一句“到底慢在哪”！！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Arthas 我的代码在运行时到底做了什么&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Arthas是阿里开源的一款java调试神器，与greys类似，不过有着比greys更加强大的功能，例如，可以直接绘制java方法调用的火焰图等。这两个工具的原理都是使用了Java强大的字节码技术。毕竟我也不是JVM大佬，所以具体的实现细节没法展开，我们要做的就是站在巨人的肩膀上，接受并用熟练的使用好这些好用的性能监控工具。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;实际操作&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;talk is cheap, show me your code,既然是工具，我们直接进行实际操作。我们在本机运行我们一开始的程序，然后讲解arthas的使用方法。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们首先通过jps找到程序的进程号，然后直接通过arthas给到的as.sh对我们运行的程序进行字节码增强，然后启动arthas，命令如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;./as.sh pid&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6526508226691042&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1094&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefSAHlKjzTonbvVSuq5uiat6ymibJVjpiaOicnsfpb41iadxiaSdXjBG9T7Ung/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，arthas支持查看当前jvm的状态，查看当前的线程状态，监控某些方法的调用时间，trace，profile生成火焰图等，功能一应俱全 我们这里也只将几个比较常用的命令，其他的命令如果大家感兴趣可以详见官网arthas官网。这篇文章主要介绍下面几个功能&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;反编译代码&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;监控某个方法的调用&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;查看某个方法的调用和返回值&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;trace某个方法&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;监控方法调用&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个主要的命令为monitor，根据官网的介绍，常用的使用方法为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;monitor -c duration className methodName&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中duration代表每隔几秒展示一次统计结果，即单次的统计周期，className就是类的全限定名，methodname就是方法的名字，这里面我们查看的方法是Logger类的info方法，我们分别对使用两种不同logger的info方法。这里面的类是org.slf4j.Logger，方法时info，我们的监控语句为&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;monitor -c 5 org.slf4j.Logger info&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;监控结果如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4015625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefmvjPgpELLxS7f1vDSp4CZI5TjzOAnYm5bD2WApNaicjJ0H2CTIqRhiag/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以看到，使用include appeder的打印日志方法要比普通的appender高出了3倍，这就不禁让我们有了疑问，究竟这两个方法各个步骤耗时如何呢。下面我们就介绍第二条命令，trace方法。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;trace命令 &amp;amp; jad命令&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个程序的log4j2配置文件如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;!--status：日志等级   monitorInterval：更新配置文件的时间间隔，单位秒--&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&lt;span&gt;configuration&lt;/span&gt; &lt;span&gt;status&lt;/span&gt;=&lt;span&gt;&quot;warn&quot;&lt;/span&gt; &lt;span&gt;monitorInterval&lt;/span&gt;=&lt;span&gt;&quot;30&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!--定义所有的appender --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;appenders&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--这个输出控制台的配置 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Console&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;console&quot;&lt;/span&gt; &lt;span&gt;target&lt;/span&gt;=&lt;span&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;ThresholdFilter&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;warn&quot;&lt;/span&gt; &lt;span&gt;onMatch&lt;/span&gt;=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; &lt;span&gt;onMismatch&lt;/span&gt;=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;!--日志打印格式 --&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;PatternLayout&lt;/span&gt; &lt;span&gt;pattern&lt;/span&gt;=&lt;span&gt;&quot;[%d{HH:mm:ss.SSS}] [%-5p] %l - %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;Console&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Async&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;AsyncDefault&quot;&lt;/span&gt; &lt;span&gt;blocking&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt; &lt;span&gt;includeLocation&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;AppenderRef&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;fileAppender&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;Async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Async&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;AsyncIncludeLocation&quot;&lt;/span&gt; &lt;span&gt;blocking&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt; &lt;span&gt;includeLocation&lt;/span&gt;=&lt;span&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;AppenderRef&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;fileAppender&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;Async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;File&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;fileAppender&quot;&lt;/span&gt; &lt;span&gt;fileName&lt;/span&gt;=&lt;span&gt;&quot;log/test.log&quot;&lt;/span&gt; &lt;span&gt;append&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;PatternLayout&lt;/span&gt; &lt;span&gt;pattern&lt;/span&gt;=&lt;span&gt;&quot;[%d{HH:mm:ss.SSS}] [%-5p] %l - %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;意思是匹配就接受,否则直接拒绝  --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;File&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;ERROR&quot;&lt;/span&gt; &lt;span&gt;fileName&lt;/span&gt;=&lt;span&gt;&quot;logs/error.log&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;ThresholdFilter&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;error&quot;&lt;/span&gt; &lt;span&gt;onMatch&lt;/span&gt;=&lt;span&gt;&quot;ACCEPT&quot;&lt;/span&gt; &lt;span&gt;onMismatch&lt;/span&gt;=&lt;span&gt;&quot;DENY&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;PatternLayout&lt;/span&gt; &lt;span&gt;pattern&lt;/span&gt;=&lt;span&gt;&quot;[%d{yyyy.MM.dd &#x27;at&#x27; HH:mm:ss z}] [%-5p] %l - %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;File&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;RollingFile&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;rollingFile&quot;&lt;/span&gt; &lt;span&gt;fileName&lt;/span&gt;=&lt;span&gt;&quot;logs/app.log&quot;&lt;/span&gt;&lt;br/&gt;                     &lt;span&gt;filePattern&lt;/span&gt;=&lt;span&gt;&quot;logs/$${date:yyyy-MM}/web-%d{yyyy-MM-dd}.log.gz&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;PatternLayout&lt;/span&gt; &lt;span&gt;pattern&lt;/span&gt;=&lt;span&gt;&quot;[%d{yyyy-MM-dd HH:mm:ss}] [%-5p] %l - %m%n&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;Policies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;TimeBasedTriggeringPolicy&lt;/span&gt; &lt;span&gt;modulate&lt;/span&gt;=&lt;span&gt;&quot;true&quot;&lt;/span&gt; &lt;span&gt;interval&lt;/span&gt;=&lt;span&gt;&quot;1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;Policies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;DefaultRolloverStrategy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;&lt;span&gt;Delete&lt;/span&gt; &lt;span&gt;basePath&lt;/span&gt;=&lt;span&gt;&quot;logs&quot;&lt;/span&gt; &lt;span&gt;maxDepth&lt;/span&gt;=&lt;span&gt;&quot;2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;IfFileName&lt;/span&gt; &lt;span&gt;glob&lt;/span&gt;=&lt;span&gt;&quot;*/*.log.gz&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;                    &lt;span&gt;&amp;lt;&lt;span&gt;IfLastModified&lt;/span&gt; &lt;span&gt;age&lt;/span&gt;=&lt;span&gt;&quot;7d&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;                &lt;span&gt;&amp;lt;/&lt;span&gt;Delete&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;/&lt;span&gt;DefaultRolloverStrategy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;RollingFile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;appenders&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 --&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;loggers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;defaultLogger&quot;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;AsyncDefault&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;appender-ref&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;logger&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;logger&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;=&lt;span&gt;&quot;includeLocationLogger&quot;&lt;/span&gt; &lt;span&gt;additivity&lt;/span&gt;=&lt;span&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;appender-ref&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;AsyncIncludeLocation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;appender-ref&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;logger&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;!--建立一个默认的root的logger --&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;root&lt;/span&gt; &lt;span&gt;level&lt;/span&gt;=&lt;span&gt;&quot;INFO&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;loggers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;/&lt;span&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都是用了一个AsyncAppender套用了一个FileAppender。查看fileAppender，发现二者相同完全没区别，只有asyncAppender中的一个选项有区别，这就是includeLocation，一个是false，另一个是true。至于这个参数的含义，我们暂时不讨论，我们现在知道问题可能出在AsyncAppender里面，但是我们该如何验证呢。trace命令就有了大用场。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;trace命令的基本用法与monitor类似，其中主要的一个参数是-n则是代表trace多少次的意思&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;trace -n trace_times className methodName&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在之前Log4j2的相关博客里面讲到过，任何一个appender，最核心的方法就是他的append方法。所以我们分别trace两个程序的append方法。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;trace -n 5 org.apache.logging.log4j.core.appender.AsyncAppender append&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;trace结果如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8078212290502793&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;895&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefmqOreicsgq0Kmujky4GicsEIrksMx7bZswLKaiawcllBwOXh9PSfLku5Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们立刻可以发现，两个trace的热点方法不一样，在使用include的appender中，耗时最长的方法时org.apache.logging.log4j.core.impl.Log4jLogEvent类中的createMemento方法，那么怎么才能知道这个方法到底做了啥呢，那就请出我们下一个常用命令jad，这个命令能够反编译出对应方法的代码。这里我们jad一下上面说的那个createMemento方法，命令很简单&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;jad org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;结果如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08717105263157894&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;608&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32Eef4UgoIg3ib9BlYjKAVejicfp4SrrHWiblibzzgaJXNCGBQQicW2icMMURJ1Tw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;watch命令&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;watch命令能够观察到某个特定方法的入参，返回值等信息，我们使用这个命令查看一下这个createMemento方法的入参，如果两个程序的入参不同，那基本可以断定是这个原因引起命令如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;watch org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento &lt;span&gt;&quot;params&quot;&lt;/span&gt; -x 2 -n 5 -b -f&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里面的参数含义如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;-x 参数展开层次&lt;br/&gt;-n 执行次数&lt;br/&gt;-b 查看方法调用前状态&lt;br/&gt;-f 方法调用后&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中的param代表查看方法的调用参数列表，还有其他的监控项详见官网官网&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最终watch结果如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.59375&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefgvYhpDkhnD7clvb2XicQx2fYrQmP61VoyqXtRJ3MaVDHhuhxbY6tLmg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;果不其然，这两个参数果然是一个true一个false，我们简单看下这个参数是如何传进来的，我们jad一下AsyncAppender的append方法&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU2NjIzNDk5NQ==&amp;amp;mid=2247487217&amp;amp;idx=1&amp;amp;sn=a6428305479760448199d89eecc343f3&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;1&quot; wah-hotarea=&quot;click&quot;&gt;&lt;p&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.07265625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefByn6E15OEHsAkkaEtDNPLqbMfTIfSLicJl6zicsj3mDyvK9vVQtOWYcQ/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过为了一探究竟，我还是静态跟了一下这段代码&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个includeLocation会在event的createMemento中被用到，在序列化生成对象时会创建一个LogEventProxy，代码如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;LogEventProxy&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; LogEvent event, &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; includeLocation)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.loggerFQCN = event.getLoggerFqcn();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.marker = event.getMarker();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.level = event.getLevel();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.loggerName = event.getLoggerName();&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;final&lt;/span&gt; Message msg = event.getMessage();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.message = msg &lt;span&gt;instanceof&lt;/span&gt; ReusableMessage&lt;br/&gt;            ? memento((ReusableMessage) msg)&lt;br/&gt;            : msg;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.timeMillis = event.getTimeMillis();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.thrown = event.getThrown();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.thrownProxy = event.getThrownProxy();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.contextData = memento(event.getContextData());&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.contextStack = event.getContextStack();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.source = includeLocation ? event.getSource() : &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.threadId = event.getThreadId();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.threadName = event.getThreadName();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.threadPriority = event.getThreadPriority();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.isLocationRequired = includeLocation;&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.isEndOfBatch = event.isEndOfBatch();&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.nanoTime = event.getNanoTime();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果includeLocation为true，那么就会调用getSource函数，跟进去查看，代码如下&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; StackTraceElement &lt;span&gt;getSource&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (source != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; source;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (loggerFqcn == &lt;span&gt;null&lt;/span&gt; || !includeLocation) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        source = Log4jLogEvent.calcLocation(loggerFqcn);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; source;&lt;br/&gt;    }&lt;br/&gt;     &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; StackTraceElement &lt;span&gt;calcLocation&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; String fqcnOfLogger)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (fqcnOfLogger == &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;// LOG4J2-1029 new Throwable().getStackTrace is faster than Thread.currentThread().getStackTrace().&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;final&lt;/span&gt; StackTraceElement[] stackTrace = &lt;span&gt;new&lt;/span&gt; Throwable().getStackTrace();&lt;br/&gt;        StackTraceElement last = &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = stackTrace.length - &lt;span&gt;1&lt;/span&gt;; i &amp;gt; &lt;span&gt;0&lt;/span&gt;; i--) {&lt;br/&gt;            &lt;span&gt;final&lt;/span&gt; String className = stackTrace[i].getClassName();&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; (fqcnOfLogger.equals(className)) {&lt;br/&gt;                &lt;span&gt;return&lt;/span&gt; last;&lt;br/&gt;            }&lt;br/&gt;            last = stackTrace[i];&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到他会从整个的调用栈中去寻找调用这个方法的代码行，其性能可想而知。我们用arthas监控一下，验证一下。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先我们trace crateMemento方法&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;trace -n 5 org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.09921875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32Eef935bu2XhpNBeQ5OrvGz82OetMUzVv4TdHhtgq74kgfApv7G4ibcOxVA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;trace -n 5 org.apache.logging.log4j.core.impl.Log4jLogEvent serialize&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.06875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefgtcDbl4dN25NalicbwvI3DqzhTNjav0IzN9gia3PsT7ibTRia1icro4yLCQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;trace -n 5 org.apache.logging.log4j.core.impl.Log4jLogEvent&lt;span&gt;$LogEventProxy&lt;/span&gt; &amp;lt;init&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefAhdfUibiccZPkF8cy4DFfOuloyz1tiatXKxfKg9c1ot3OaAUsjumgOthw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;trace -n 5 trace -n 5 org.apache.logging.log4j.core.LogEvent getSource&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.08359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/1QxwhpDy7ia0HBwEQoMJ70YYaDvN32EefeooiaN3RMpIrDfx0KFcAo9mh2tp3IXpeJfnejuFYp13Z4amRI31ibF7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;至此我们通过结合JMH和arthas共同定位出了一个线上的性能问题。不过我介绍的只是冰山一角，更多常用的命令还希望大家通过官网自己了解和实践，有了几次亲身实践之后，这个工具也就玩熟了。&lt;/p&gt;&lt;section&gt;&lt;span&gt;来源 | bryantchang.github.io/2019/12/08/java-profile-tools/&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;热门内容：&lt;/span&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-copyright=&quot;0&quot; data-fileid=&quot;100034207&quot; data-ratio=&quot;0.5214592274678111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/rtJ5LhxxzwmeeDF9fPPQbQ24cJV10eLE8S3wgTkdrg5ZMg02G0Nh0TCnYtajMyr1SuW0Wup1iaaqRYZxcKAYZHQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;932&quot;/&gt;&lt;/section&gt;&lt;pre ng-bind-html=&quot;message.MMActualContent&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-paragraph-type=&quot;ignored&quot;&gt;&lt;pre&gt;&lt;section&gt;&lt;span&gt;最近面试BAT，整理一份面试资料&lt;/span&gt;&lt;span&gt;《&lt;strong&gt;Java面试BAT通关手册&lt;/strong&gt;》&lt;/span&gt;&lt;span&gt;，覆盖了Java核心技术、JVM、Java并发、SSM、微服务、数据库、数据结构等等。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;获取方式：点“&lt;/span&gt;&lt;span&gt;在看&lt;/span&gt;&lt;span&gt;”，关注公众号并回复 &lt;/span&gt;&lt;span&gt;666&lt;/span&gt;&lt;span&gt; 领取，更多内容陆续奉上。&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/section&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;明天见(｡･ω･｡)ﾉ♡&lt;/strong&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>83eef8b4986de54e0fc1596ceb639abc</guid>
<title>网络通信知识地图</title>
<link>https://toutiao.io/k/fslhlae</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;section&gt;&lt;p&gt;我在之前一段时间做过网络通信的系列文章，但是文章还是偏散，没有一个整体脉络，本篇就以&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486947&amp;amp;idx=2&amp;amp;sn=8f4ac8a13e3224a0ccf2ae3cddc22267&amp;amp;chksm=fafde74dcd8a6e5bea6def64b1aea6dc624d27a9a12807624d1aafe3ab6ffa01179921a30b9d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;知识地图&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;知识地图&lt;/strong&gt;&lt;/a&gt;的形式来进行梳理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;知识地图是一种知识导航系统，并显示不同的知识存储之间重要的动态联系。&lt;/span&gt;本篇主要就是从更高的视角将之前的文章的结构思路展现出来。文章结构的思路实际上也是达到架构师程度要掌握的网络通信知识学习路线。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;目的意义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在咱们【编程一生】用户群里，我看到有朋友提出一个问题：觉得很多事情是运维人员做的。实际上运维人员由于不懂业务，在实际工作中起不到相应的帮助。也有些很给力的运维人员，人家有问题不推脱，有时候靠着查开发人员的代码把问题解决了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面提到的就涉及到一个人员分工的问题。在十几年前啊，&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486974&amp;amp;idx=1&amp;amp;sn=bf9e473161a21cb37792f773b940a58c&amp;amp;chksm=fafde750cd8a6e4644e925510d71993fc49cfc53b273892c955fda5166e038f2d2628c806a0c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前端后端都是没有明确分工的，所有的开发都是全栈&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;前端后端都是没有明确分工的，所有的开发都是全栈&lt;/strong&gt;&lt;/a&gt;。前后端分工是为了让大家能把事情做精做细。这几年分工有越来越精细的趋势。但是随着职位的增高，那些职位高的人往往什么都懂一些。因为他要负责的是一件事情，不是一个部分。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;分工的目的是为了更好地解决事情。而排查问题是事情的一方面。我的建议是不要太计较这到底属于谁的职责。职责是为事服务的。能搞定事的人绝不会受亏待。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结一下：学习网络通信相关的知识对于排查生产问题和架构都至关重要，要以事为中心，不要给自己设限。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;基础知识&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;操作系统和网络基础&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因为站在排查问题的角度，生产环境一般会选用linux环境。所以网络通信有4大基础。先说前2大基础，对应我之前两篇反馈不错的文章：《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486330&amp;amp;idx=1&amp;amp;sn=e85e201059c1c5575481e03531b06212&amp;amp;chksm=fafde1d4cd8a68c235ef3cbed83bf0b6ac3a80052c0a492d8c2a217006cf4fa530f2f74f01c3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;白话linux操作系统原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;白话linux操作系统原理&lt;/strong&gt;&lt;/a&gt;》和《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486403&amp;amp;idx=1&amp;amp;sn=9dbbda3df1deeb5f43c8b7f2cdd87b97&amp;amp;chksm=fafde16dcd8a687be735bf315fa50773cd61ac48f47cd1a1304c792bc1fafa31b4a3705dd9a3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;白话TCP/IP原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;白话TCP/IP原理&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;要深入细节，就会涉及平时面试中的一些高频问题。《&lt;/span&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486658&amp;amp;idx=1&amp;amp;sn=0067e6d161c0acac5cf20fda6231f692&amp;amp;chksm=fafde66ccd8a6f7a62114ebf73963d09253cb94bb8d47acea955f4b9bfacc37dfcb1ff22e4a5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深入浅出操作系统的零拷贝&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;深入浅出操作系统的零拷贝&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》和《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486210&amp;amp;idx=1&amp;amp;sn=fd7a60ca9b4e41f942dd0b2653228774&amp;amp;chksm=fafde1accd8a68ba4f41f19d3543984f47756e884eb395b295cc7f4f1cd0575bc0305fba5431&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;网络字节序列-大端序和小端序&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;网络字节序列-大端序和小端序&lt;/strong&gt;&lt;span/&gt;&lt;/a&gt;》都是必须要掌握的基础。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;面试中问得比较多的，还得是IO相关。一般面试，了解《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486564&amp;amp;idx=1&amp;amp;sn=07ae2b4f11ceedb029f6351e3d67c2dc&amp;amp;chksm=fafde6cacd8a6fdc9f5b0ce668bcc7b57655f3cb3c427152ae70cf9f96bb6a6b778689e74dc4&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;轻松搞懂5种IO模型&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;轻松搞懂5种IO模型&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》和《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486601&amp;amp;idx=1&amp;amp;sn=6fbd0d4177372af2ab00dd1e3043cd7d&amp;amp;chksm=fafde627cd8a6f312e5587e6fd60bff64b3130fdd9eb5339f81702f9ab8264799bd2c2ab47ac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;趣谈IO多路复用的本质&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;趣谈IO多路复用的本质&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》就差不多了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;应用层协议&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;网络安全&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485862&amp;amp;idx=1&amp;amp;sn=414f61b537094b14dab2682a343700e9&amp;amp;chksm=fafde308cd8a6a1e993ed8774cef1c8dc1233761a17b27395b89e3d2c74b0908e0971aeedf9a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;架构师之路-https底层原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;架构师之路-https底层原理&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》和《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485527&amp;amp;idx=1&amp;amp;sn=21413445605b9b2b9f883ba7b446c64c&amp;amp;chksm=fafde2f9cd8a6bef39582ee0075fcb846bf5c320dbddb0b4f0363a88f42d760109acf8ae198f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;懂了！国际算法体系对称算法DES原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;懂了！国际算法体系对称算法DES原理&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》对证书和加解密、加验签算法做了讲解，这一块作为网关等基础设施的开发是必修课。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;架构底蕴&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在网络通信相关的中间件中，有一些通用的逻辑设计，对应着《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486245&amp;amp;idx=1&amp;amp;sn=494e71a356ad4bd26633b5ae5278215f&amp;amp;chksm=fafde18bcd8a689de3cfa45c0bbe629bc098d26a85106caff62b0bfa069055374515865a3b26&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;网络通信之Session的历史血脉&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;网络通信之Session的历史血脉&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》、《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486260&amp;amp;idx=1&amp;amp;sn=0cb6185415b9b2f6959139068eb3373d&amp;amp;chksm=fafde19acd8a688c05556555eb088a1881f21705408f09964e8de3e065ce7eba723a816cc569&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;状态保持解决方案-分布式session的历史血脉&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;状态保持解决方案-分布式session的历史血脉&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》、《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486186&amp;amp;idx=1&amp;amp;sn=f21e17b21beb4c99cef0e076071ac859&amp;amp;chksm=fafde044cd8a69526aa3ec9edbe71ea5aa41de2ef236494201dc2f20701ed8abc6be1a72344f&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;深入理解MQ生产端的底层通信过程-理解channel&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;深入理解MQ生产端的底层通信过程-理解channel&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》和《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486166&amp;amp;idx=1&amp;amp;sn=08a24c175c02a4b146dc52088d410599&amp;amp;chksm=fafde078cd8a696e616aebcb72aeef444e1e0008bf950a368933195f13c0a268face0d3ee371&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;接下来一段时间会对大家进行网络通信的魔鬼训练-理解socket&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;接下来一段时间会对大家进行网络通信的魔鬼训练-理解socket&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》这4篇文章。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为架构师要对整个链路有全面的了解。《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485988&amp;amp;idx=1&amp;amp;sn=efad5a030bc0a933ac5af2ee09f3c6c4&amp;amp;chksm=fafde08acd8a699c198d0d65c413273f05f2796cfd873160c2ba81ed3f33aebfaccb62234cb7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一个http请求进来都经过了什么(2021版)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;一个http请求进来都经过了什么(2021版)&lt;/strong&gt;&lt;/a&gt;》、《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484226&amp;amp;idx=2&amp;amp;sn=cb8df0d23713a8842140963fa2522c56&amp;amp;chksm=fafde9eccd8a60fa7a9ac71d9819da3b16e2995e368a3e5f7404ab202743904f380efa591e53&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一个请求过来都经过了什么？(2017年http版)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;一个请求过来都经过了什么？(2017年http版)&lt;/strong&gt;》&lt;/a&gt;和&lt;span&gt;《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247484226&amp;amp;idx=1&amp;amp;sn=61960f590dc74cc24cd88c2727d42afe&amp;amp;chksm=fafde9eccd8a60fadf1fc18ae91b4c740c94fb2664c149c80219d057ec429cc1fae96395d48e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;一个请求过来都经过了什么?(Thrift版)&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;一个请求过来都经过了什么?(Thrift版)&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》就是在讲一个架构师平时要做哪些方面的梳理。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;应用案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;网络通信很大的一方面价值是用来排查解决生产问题。在《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486242&amp;amp;idx=1&amp;amp;sn=483566d3fd97f333d3ea114dbbe8f7d1&amp;amp;chksm=fafde18ccd8a689abfcb9959079a3cbfc4ecf98e52d34318bf9490422622bddb0c4b81ef2288&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;https引起的跨域问题-COE&amp;amp;casestudy&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;https引起的跨域问题-COE&amp;amp;casestudy&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》、《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486420&amp;amp;idx=1&amp;amp;sn=a963807fab5f69b4b43702789d180e86&amp;amp;chksm=fafde17acd8a686c143df612777d5b890c83225ea658932655377b3d09021aba3ccc5d62cfa3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;池式结构-连接池&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;池式结构-连接池&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》和《&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486103&amp;amp;idx=1&amp;amp;sn=943c5b7f3558df78164321806f273c8f&amp;amp;chksm=fafde039cd8a692f86f0ac97b0e1e05ece075de3e4f33e6a5ec90b269c51aed1963ff3107e0e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;懂得三境界-使用dubbo时请求超过问题&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;懂得三境界-使用dubbo时请求超过问题&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;》中，我就介绍了生产上网络问题的案例，学以致用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247487083&amp;amp;idx=1&amp;amp;sn=67329da68539f4dd883521187bac18bf&amp;amp;chksm=fafde4c5cd8a6dd39d1d54a655ec6105badca8a0962e63ec172536ae01e3b631a849809e1d7d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;手撕Dubbo源码，彻底理解RPC原理&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;手撕Dubbo源码，彻底理解RPC原理&lt;/strong&gt;&lt;/a&gt;》这篇文章是想作为完结篇，说明学习了上面的知识，自己也可以轻松写出一个框架了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文介绍了掌握网络通信的学习脉络。做到架构师水平能掌握到这种程度的也不多。是不是也没有那么难？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;&lt;span&gt;编程一生&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247486113&amp;amp;idx=1&amp;amp;sn=f3623b2cf257aa37ea83768fd4325762&amp;amp;chksm=fafde00fcd8a691928c66f7e484ab2b7f6fa7797dc32833a7f777bb4ebde58c010750f13c118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;PDCA方法论&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;strong&gt;PDCA方法论&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;，检查自己是否错过更新：每周三晚上8点左右，我都会更新文章，如果你没有收到，记得点开【编程一生】公众号找一下(*^▽^*)&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;br/&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e3be463877b0260f7b9fc605c9a450a</guid>
<title>用 VSCode 写 Python，这 14 个插件不容错过！</title>
<link>https://toutiao.io/k/8pgeisj</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;span/&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.66640625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/LLRiaS9YfFTMvDJj7g6ibSeaOPMrOqia0Dt9m4ZZB1D92iaLXSwMFE6npuLzDRftBGxznV9XzVw0LU0v90APQZ91sg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以说，Visual Studio Code 这个编辑器，让微软在开源社区赢回了王者段位，要知道全球 2400 万开发者中有 1400 万称 VSCode 为自己的家，再加上 GitHub 和 VSCode 的结合，几乎所有的程序员的都离不开 VSCode，不过，VSCode 如此优秀，值得每个程序员使用，甚至我觉得非程序员都可以用它来码字。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你还没用过 VSCode，那访问&lt;span&gt;这里安装&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;一个吧，很可能就打开了一个新世界。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;今天分享 14 个非常实用 VSCode 插件，可以让你写代码如同神一般，尤其是&lt;span&gt; Python 代码。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鉴于 VSCode 的轻量级，老用户也不用不担心安装的扩展“太多”导致性能问题，工欲善其事必先利其器，所以放心安装吧！&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;1. 实时重构你的 Python 代码：Sourcery&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.495&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvEPJeHsIxPIURRMsDKtlfWiaicNT6Rac3DUWKB44VqpSRuP9SAVaVaO4Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当你写 Python 代码时，它会实时帮你改进代码。它会自动审查和重构你的代码，以便你可以花更多时间专注于编写新代码，减少清理时间。可以让你的 Python 代码更干净、更易读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过它快速找到可以重构代码的领域，查看即时改进建议，并了解新更改如何影响代码质量。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主要功能：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;实时重构建议&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;持续的代码质量反馈&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多文件分析&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;重复代码检测&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;GitHub Pull Request 评论&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Sourcery CLI、CI和Pre-Commit Hook选项&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装 &lt;span&gt;Sourcery&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;2. 标记某一行，用于跳转，相当于书签功能：Bookmarks&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.4542372881355932&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmviaAtsYAyHxrEthibLqZicvovwqqnN1puyMG7YY80lsODFsibcPSQ4wAcGQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;885&quot;/&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;新的粘性引擎&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加虚拟工作区支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加工作区信任支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;全面的远程开发支持&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;添加跨平台支持&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;改进了边栏的可用性&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Bookmarks&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;3. Rest API 客户端：Thunder Client&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5488069414316703&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1Bmvpmx7dan7U5CU6nNoC5qYQicRnxvA7v82FNib1VicRVymURWibSic4LhlZ0w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;922&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然叫 Thunder，但和迅雷没有关系，它的名字是雷霆客户端，是 Visual Studio Code 的轻量级 Rest API 客户端，由 Ranga Vadhineni 手工制作，设计简单干净。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，你可以卸载臃肿的 PostMan 了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Thunder Client&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;4. 悬停查看文档：Docs View&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.713813615333774&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1Bmvx8Y32ibNpOZJyyltCTtVzBwNXo9icaF0geXjico3lrsresuksmJttqH9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1513&quot;/&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvV0V2uan5mnGJRibpPBelYUvibYHTNCXhmCX7RUlVsIzCFS53M7fiaRwicQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;光标放在某个函数或类上面，就可以在边栏或面板中显示相关文档&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Docs View&lt;/span&gt;&lt;sup&gt;[5]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;5. 代码搜索：Sourcegraph&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6308579668348955&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvsTJROP3aprqvrJMIHh755Re80hAFVNHPiatIyVQWdJZf0U59ZHZwH0Q/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1387&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sourcegraph 的代码搜索允许你在所有代码中快速查找和修复内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了它，你可以直接从 VS Code IDE 免费搜索数百万个开源存储库。从有用的代码示例中学习，搜索最佳实践，并从开源宇宙中数百万个存储库中重用代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，使用免费的 Sourcegraph Cloud 账户，你可以同步自己的私人和公共存储库，并在 VS Code 的单个视图中搜索所有代码。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sourcegraph 的代码智能功能通过“转到定义”和“查找引用”功能提供快速的跨存储库导航，可以快速理解新代码，并在任何大小的代码库中找到答案。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Sourcegraph&lt;/span&gt;&lt;sup&gt;[6]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;6. AI 帮你写注释：AI Doc Writer&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.605&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvgribZMylLxfyFG6ia7cwMQgJw5heDgtPZXrNUFTmtWlicHGBeNibrD22yw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只要选中函数代码，然后按一个快捷键就会自动生成该方法的注释，可用来生成函数文档，前文&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0OTg3NzU2NA==&amp;amp;mid=2247490190&amp;amp;idx=1&amp;amp;sn=6980d52860f5012126f2c8703901116d&amp;amp;chksm=fba878ddccdff1cbb1c96e42c60bf21abba0d8ead671d02c6cf7f8484b2afe83ced5f7b915b3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;来让人工智能帮你写注释吧，支持 Python&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;来让人工智能帮你写注释吧，支持 Python&lt;/a&gt;已介绍过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;AI Doc Writer&lt;/span&gt;&lt;sup&gt;[7]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;7. 查看文件大小：filesize&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.10743801652892562&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvJQxsrzcYwk5uzOcTw0NHnzBnPAya6zNvf1iaRHkO8ia6kibLmwViciae9pw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;726&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它在编辑器的状态栏中显示聚焦文件的大小，如果你单击状态栏组件，它将显示有关文件的更多信息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;filesize&lt;/span&gt;&lt;sup&gt;[8]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;8. 解释代码：Krinql&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你看不懂代码，可以让 Krinql 来回答，或者让它编写文档字符串：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.18857142857142858&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1Bmvtgm9MDJZAgJ5ibxiacQoP85Yd4hXJCCRaAUnjwpLJlHDKMMkKZVkQdSA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1400&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Krinql 让你编写更好的代码，速度超快。它解决了编写代码的无聊部分，例如编写文档字符串。它还可以查找如何使用库，并在 VS Code 编辑器本身中对其进行自动化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Krinql&lt;/span&gt;&lt;sup&gt;[9]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;9. GistPad&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;GistPad 可以让你在 VSCode 中直接编辑 GitHub Gists 和存储库。可以打开、创建、删除、分叉和星标和存储库，然后无缝开始像本地文件一样编辑文件，而无需克隆、推送或拉取任何东西。它就像你自己的开发人员库，用于构建和引用代码片段、常用的配置/脚本、编程相关笔记、知识库和交互式示例。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.601237842617153&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvVicw2P0tma5ZLLMlmdBgKlWkYhzjWpFIEvbWyq8tExWUdWzsC8INTnw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1131&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;GistPad&lt;/span&gt;&lt;sup&gt;[10]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;10. 生成漂亮的代码截图：CodeSnap&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.48071495766698025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvOV6JgSURgC4JwMSJTmvILxNdeCCCtUu5BsFIxxKC8Z4d59t9tXrUpw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1063&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;CodeSnap&lt;/span&gt;&lt;sup&gt;[11]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;11. 自动补全：Visual Studio IntelliCode&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32860520094562645&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvjDm7guSE4JiciaI0FTpcC0aUdx5qYqkhma3Lk6ddogB3pj9VIhAPVRWg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1269&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Visual Studio IntelliCode&lt;/span&gt;&lt;sup&gt;[12]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;12. 自动实时评估 Python 代码：AREPL for Python&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.44756554307116103&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvCgkoLVecVQbvLaSITcJbB5uCWorUO0nYdRwJUvic8trBvfZHFTgibVQg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1068&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;AREPL for Python&lt;/span&gt;&lt;sup&gt;[13]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;13. 实时对 Python 代码进行检查：Wolf&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，你可以在 VSCode 中体验 Python 解释器里面的那种所见即所得的体验，功能上和 AREPL for Python 有点像&lt;span/&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.7692307692307693&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvRIfxb4xzc8nEs7YH3ia1hOxqN3xm7pR6lYthhOzcnSCFDJXEXxAfmuw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1404&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Wolf&lt;/span&gt;&lt;sup&gt;[14]&lt;/sup&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;14. 将 Gather 功能添加到 Jupyter 扩展中&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Jupyter 扩展你一定用过吧，这个插件要和 Jupyter一起用：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5088967971530249&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1BmvWSA7MXGbthGSR0tmg5eXa2ajRg32Gd1bT349NXqoKzL7olvQGgn1gQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;562&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;效果展示：&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1.4174454828660437&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1Bmvjjlho1QjzTGPou1SXHdxZjCegzlTUsS6kPyoTYCCbLECtWZwH12efg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;642&quot;/&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5201288244766505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/EnE7vpEWFnqzD5szoNJxQlYP7CtJ1Bmv4O7hx2hsZUNAUL0SwF4Lk97grOIkoypyXicq28zpMHOaxxTQupAibTtA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;621&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;点这里安装&lt;span&gt;Gather&lt;/span&gt;&lt;sup&gt;[15]&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;推荐阅读：&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0OTg3NzU2NA==&amp;amp;mid=2247488489&amp;amp;idx=1&amp;amp;sn=9ff797814a4d976d7bb3d2a5c4bcd5e3&amp;amp;chksm=fba871baccdff8ac2788add3709741a36e415a3debd948234d43f505dfbc8e0255c7a2cb75fc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;这几个 VS Code 快捷键，请一定要用一用，可以大大提高你的编辑效率&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;这几个 VS Code 快捷键，请一定要用一用，可以大大提高你的编辑效率&lt;/a&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;&lt;span&gt;这里安装: &lt;em&gt;https://code.visualstudio.com&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Sourcery: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=sourcery.sourcery&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Bookmarks: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Thunder Client: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Docs View: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=bierner.docs-view&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Sourcegraph: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=sourcegraph.sourcegraph&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;p&gt;&lt;span&gt;AI Doc Writer: &lt;em&gt;https://marketplace.visualstudio.com/items?itemname=mintlify.document&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;p&gt;&lt;span&gt;filesize: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Krinql: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=krinql.krinql-vscode&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;p&gt;&lt;span&gt;GistPad: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;p&gt;&lt;span&gt;CodeSnap: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Visual Studio IntelliCode: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;p&gt;&lt;span&gt;AREPL for Python: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=almenon.arepl&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[14]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Wolf: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=traBpUkciP.wolf&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[15]&lt;/span&gt;&lt;p&gt;&lt;span&gt;Gather: &lt;em&gt;https://marketplace.visualstudio.com/items?itemName=ms-python.gather&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c1a4e03cba903832391c1105963d472f</guid>
<title>周末过得太快？别荒废啦！</title>
<link>https://toutiao.io/k/1cnkpb7</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;&lt;span&gt;大家好，我是周刊菌。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;周末时间别荒废啦！&lt;/span&gt;&lt;span&gt;第 087 期「码农周刊VIP会员专属邮件周报」，已发送完毕。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数位上市公司 CTO 都在订阅的「码农周刊 VIP 会员专属邮件周报」，你还等什么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;255&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;255&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ7PeUupLzwuuAibicnrRNxKcfCY7fIva78efKsUzANlCCAeuSQEGkGm34rKkzNRpzy6IiaiaHmBNA6DcA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;「码农周刊 VIP 会员」是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简介版&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;码农周刊 VIP 会员 = 全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;详细版&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击「阅读原文」即可查看详细介绍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;加入「码农周刊 VIP 会员」，与上市公司 CTO 一起成长！&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;全年 52 期「VIP 会员专属邮件周报」 + 只限 VIP 会员加入的交流圈子 + 大厂「内推机会」 + N 多福利，你值得拥有！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;原价 365 元/年&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;，现价仅需 108 元！还没加入的，抓紧时间啦！&lt;/strong&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;260&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;260&quot; data-ratio=&quot;1.3478260869565217&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AjN1jquNavibNJDoLvVWUq6RKn5LwtlzRHSMFBED29234hRwibmOzJF4XxKOv5lzRVCelQJIEIOaXh3vYRHOMRzQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>204a837f063009fda3138ede7ed81533</guid>
<title>一个很简单理解的轻量级状态管理</title>
<link>https://toutiao.io/k/bfrxgt9</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文适合对状态管理感兴趣的小伙伴阅读。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;欢迎关注&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前端早茶&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，与广东靓仔携手共同进阶～&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODAyNDI0OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmOXMQHa6L3OhPGOnf2BSZib7ibVcAj2j2FYkfFCWb2xmyfX63TYVlofunfD4QnB5vqELZqXfnQZMlA/0?wx_fmt=png&quot; data-nickname=&quot;前端早茶&quot; data-alias=&quot;ZeFeng_axios&quot; data-signature=&quot;专注前端，一起结伴同行，紧跟业界发展步伐~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一、前言&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;本文来自广东靓仔的同事--杰哥的投稿，千呼万唤始出来~&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0149253731343284&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpBlBAAzP87JP0PCkqddcSp9CHKzHtsosqCECxUIgsDDZw9UPrmM4n9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信大家比较熟悉的React状态管理方案有以下几个：&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;1. &lt;strong&gt;&lt;span&gt;dva&lt;/span&gt;&lt;/strong&gt;，umi巨无霸开箱即送，公司项目大爱&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;2. &lt;strong&gt;&lt;span&gt;redux&lt;/span&gt;&lt;/strong&gt;，典中典，当代年轻人不会这么好精力搞了，个人认为缺点比优点多&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;3.&lt;span&gt; &lt;strong&gt;mobx&lt;/strong&gt;&lt;/span&gt;，基本不存在，不如直接去玩vue&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;4. &lt;strong&gt;&lt;span&gt;props&lt;/span&gt;&lt;/strong&gt;传递，一个顶部组件管理value和setValue，作为props下沉到所需子孙组件，层级太深，会造成&lt;strong&gt;props drilling&lt;/strong&gt;（直译不知什么意思，以前网上看的这个词，应该是很深的意思），而且没必要的中介组件也得接力传递，莫名其妙&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;5. &lt;strong&gt;&lt;span&gt;context&lt;/span&gt;&lt;/strong&gt;，被同一个上下文包裹下的组件，都可以互相传递数据。他是最有React的味道，因为他就是React内置的方法&lt;span&gt;😆。但是我相信，很少人会用。因为他太React了，什么都给使用者去实现！你用了他肯定要面对这个问题&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;那什么时候会使用context呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案是：做第三方（组件）且通信复杂的时候。这样可以保持组件纯粹，越少依赖第三方拓展性越好、越安全。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;二、Context用起&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5024570024570024&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpqI4GgibM2PViaJX6gic6MyHetyyWK0j8pwOf0GsLJBSFU7TOJlLgLtEHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;三、unstated-next源码&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;源码大概有40行，精简下做个demo分析，如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;小型unstated-next&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createContainer&lt;/span&gt;(&lt;span&gt;useHook&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; Context = createContext(&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; Provider = &lt;span&gt;(&lt;span&gt;props&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; value = useHook(props.initialState);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Context.Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{value}&lt;/span&gt;&amp;gt;&lt;/span&gt;{props.children}&lt;span&gt;&amp;lt;/&lt;span&gt;Context.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; useContainer = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; useContext(Context);&lt;br/&gt;  };&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    Provider,&lt;br/&gt;    useContainer&lt;br/&gt;  };&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在导出的createContainer函数中不难看出，当调用它时会返回一个根据context产出的Provider和useContext（这里命名为useContainer）&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;用起来是什么样子的呢？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;跟传统Context一样，也得有&quot;Provider&quot;包裹。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里首先得创建一个&quot;Container&quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;unstated-next的使用0&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;import&lt;/span&gt; { createContainer } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&quot;./unstated-next&quot;&lt;/span&gt;;&lt;br/&gt; &lt;br/&gt;&lt;span&gt;const&lt;/span&gt; useHook = &lt;span&gt;(&lt;span&gt;initialState&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; [color, setColor] = useState(initialState);&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    color,&lt;br/&gt;    setColor&lt;br/&gt;  };&lt;br/&gt;};&lt;br/&gt; &lt;br/&gt;&lt;span&gt;const&lt;/span&gt; ColorContainer = createContainer(useHook); &lt;span&gt;// 传入自定义hook，把逻辑卷里面&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;跟原始context的Provider有个小区别，就是value改成initialState，同时你不再需要在App搞useState的getter和setter（干净），App也就没re-render（性能），这里只传初始值（聚焦）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;unstated-next的使用1&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;=&lt;span&gt;&quot;App&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;ColorContainer.Provider&lt;/span&gt; &lt;span&gt;initialState&lt;/span&gt;=&lt;span&gt;&quot;red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Title&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;--------&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;Content&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;&amp;lt;&lt;span&gt;Pure&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;          &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;&amp;lt;&lt;span&gt;Button&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;/&lt;span&gt;ColorContainer.Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;  );&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;里面的组件怎么消费呢，&lt;strong&gt;ColorContainer.useContainer()&lt;/strong&gt;返回自定义hook里面的数据，跟contentd的useContext用法类似，&lt;span&gt;区别就是不用传上下文&lt;/span&gt;，因为刚开始创建&lt;strong&gt;ColorContainer&lt;/strong&gt;已经绑定了&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;感受一下变化：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;useContext(context)&lt;/span&gt; → &lt;span&gt;ColorContainer.useContainer()&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;unstated-next的使用2&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Title = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.count(&lt;span&gt;&quot;Title&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { color } = ColorContainer.useContainer();&lt;br/&gt; &lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;style&lt;/span&gt;=&lt;span&gt;{{&lt;/span&gt; color }}&amp;gt;&lt;/span&gt;我是标题&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt; &lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Button = &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.count(&lt;span&gt;&quot;button&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; { setColor } = ColorContainer.useContainer();&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;=&lt;span&gt;{()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setColor(getRandomColor())&amp;gt;&lt;br/&gt;      点我改颜色&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;  );&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;优点：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;上手简单、理解容易，抄下来到自己项目都可以，没有其他依赖&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不用再频繁import &lt;strong&gt;createContext&lt;/strong&gt;, &lt;strong&gt;useContext&lt;/strong&gt;、&lt;strong&gt;context&lt;/strong&gt;，因为都放在一个&quot;Container&quot;里面了&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;让你逻辑和UI分离，逻辑靠自定义hook传进创建阶段，不再像普通context那样一窝蜂逻辑和UI的数据都传入Provider&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;缺点：&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;四、 重写&lt;/span&gt;&lt;/h2&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;context重复渲染现象&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;从上一节尾demo里看到，useHook的导出的成员包括color和count相关的值&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.48823529411764705&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpZLlic4rNNrgXRRCIkdHQxhSPpw1aSibXcbkI6Vs8zd1WwuqgPIKzciagg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;510&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Provider里有一个Count，他仅仅跟count这个变量”有关“&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.26362038664323373&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpa5IbUphCtSicdrxfBIwkneCG6UbaSDzzmvUAT4q6D6qeezh99VTweYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;569&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;但是当我点击改变颜色的按钮时，点几次就多渲染几次&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.353448275862069&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpcXlGLOGDZE3piaa9Siczll8Qq5ibZXX408uD21knB9Yqkm3oqt9fjqgDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;232&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时候加memo有用吗?没用，memo只是能根据props解决问题，能引起组件render的途径不单单因为oldProps !== newProps，还有context的变化、fiber.type的变化等，这里正是context发生变化引起render，不论是哪个值&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;思考方案&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;面对React context的无脑更新，我们能采取什么措施？&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;减少更新&lt;/h3&gt;&lt;p&gt;尽量减少，常见的方法是context的读写分离、多变放里，少变放外。&lt;/p&gt;&lt;h3&gt;控制更新&lt;/h3&gt;&lt;section&gt;&lt;span&gt;就是夺取更新的权力，做到没有订阅变动数据的组件，不会随便重复渲染&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;一般我们怎么让组件更新&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;section&gt;自己的state用useState(useReducer)&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;自己的父组件改变传进来的props&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;forceUpdate，在类组件可以this.forceUpdate()，在函数组件可以利用hook来实现&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;上面的方法可以看出，forceUpdate的可控性是最好的，我什么时候想渲染就什么时候调用，我名为手动更新&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那手动更新的时机是什么-相应依赖变化，那就要有一个新旧值比较的流程，值相同的时候不更新，先网上随便抄一抄shallowEqual&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;shallowEqual&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; shallowEqual = &amp;lt;T &lt;span&gt;extends&lt;/span&gt; object&amp;gt;&lt;span&gt;(&lt;span&gt;oldValue: T, newValue: T&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;Object&lt;/span&gt;.is(oldValue, newValue)) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (&lt;br/&gt;    &lt;span&gt;typeof&lt;/span&gt; oldValue !== &lt;span&gt;&#x27;object&#x27;&lt;/span&gt; ||&lt;br/&gt;    oldValue === &lt;span&gt;null&lt;/span&gt; ||&lt;br/&gt;    &lt;span&gt;typeof&lt;/span&gt; newValue !== &lt;span&gt;&#x27;object&#x27;&lt;/span&gt; ||&lt;br/&gt;    newValue === &lt;span&gt;null&lt;/span&gt;&lt;br/&gt;  ) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; keysOldValue = &lt;span&gt;Object&lt;/span&gt;.keys(oldValue);&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; keysNewValue = &lt;span&gt;Object&lt;/span&gt;.keys(newValue);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (keysOldValue.length !== keysNewValue.length) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;let&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, len = keysOldValue.length; i &amp;lt; len; i++) {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; currentKey = keysOldValue[i];&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; (&lt;br/&gt;      !keysNewValue.hasOwnProperty(currentKey) ||&lt;br/&gt;      !&lt;span&gt;Object&lt;/span&gt;.is(oldValue[currentKey], newValue[currentKey])&lt;br/&gt;    ) {&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;控制一下Provider的value，让他的值不是useState(useReducer)控制，由useRef控制，改写后发现怎么点击也没再渲染，证明劫持渲染成功&lt;/span&gt;。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;ref接管value&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Provider&lt;/span&gt;(&lt;span&gt;props&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; value = useHook(props.initialState)&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; contextRef = useRef(value)&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{contextRef}&lt;/span&gt;&amp;gt;&lt;/span&gt;{props.children}&lt;span&gt;&amp;lt;/&lt;span&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着是看看消费数据的组件怎么设计，用多了dva直接就命名一个hook叫useSelector，用法一样，看样子是有精确订阅&quot;count&quot;这个数据的能力&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;消费组件新增hook-useSelector&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; Count = &lt;span&gt;(&lt;span&gt;props&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.count(&lt;span&gt;&quot;Count&quot;&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;//const { count } = ColorContainer.useContainer();&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; count = useSelector(&lt;span&gt;&lt;span&gt;_&lt;/span&gt; =&amp;gt;&lt;/span&gt; _.count)&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{count}&lt;span&gt;&amp;lt;/&lt;span&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接着实现这个useSelector，当然它是存在createContainer里面，作为一个成员导出&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;思路：入参selector是一个函数，value是整个state，selector(value)期望获得最新的值，即上面例子最新的count值&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;useSelector初步实现&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; Context = createContext()&lt;br/&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;useSelector&lt;/span&gt;(&lt;span&gt;selector&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; value = useContext(Context).current&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; selected = selector(value)&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;return&lt;/span&gt; {&lt;br/&gt;    useSelector,&lt;br/&gt;    Provider,&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;改造到现在，点击是没有重新渲染，我们回到关键的Provider。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;因为contextValue 由useRef控制，只要我们不改变，它永远都不会使内容更新。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;接下来在Provider继续入手，将contextRef开放，对它赋值，记得&lt;span&gt;别将contextRef传给Provider的value&lt;/span&gt;，因为contextRef&lt;span&gt;由始至终&lt;/span&gt;能保持是同一个引用&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;useEffect监听走起，useEffect内部需要执行的是【执行监听”需要“的值】&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;Provider监听&lt;/strong&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Provider&lt;/span&gt;(&lt;span&gt;props&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; value = useHook(props.initialState)&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; contextRef = useRef(value)&lt;br/&gt;    contextRef.current = value&lt;br/&gt;    useEffect(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;// 监听逻辑&lt;/span&gt;&lt;br/&gt;    })&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{contextRef}&lt;/span&gt;&amp;gt;&lt;/span&gt;{props.children}&lt;span&gt;&amp;lt;/&lt;span&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;如何实现监听逻辑，我这里是想到靠一个单例来通信，简单实现一个添加状态事件和清除事件&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Singleton&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;constructor&lt;/span&gt;(listeners) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.listeners = listeners;&lt;br/&gt;  }&lt;br/&gt;  add(states) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.listeners.push(states);&lt;br/&gt;  }&lt;br/&gt;  clean() {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.listeners = [];&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// 执行&lt;/span&gt;&lt;br/&gt;  exc(value) {&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.listeners.forEach(&lt;span&gt;&lt;span&gt;cb&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        cb(value)&lt;br/&gt;    })&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;接着，在创建（createContainer）时获得一个实例watcher，在Provider里监听执行callback&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;添加监听逻辑&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;createContainer&lt;/span&gt;(&lt;span&gt;useHook&lt;/span&gt;)&lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; Context = createContext(&lt;span&gt;null&lt;/span&gt;);&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; watcher = &lt;span&gt;new&lt;/span&gt; Singleton([]); &lt;span&gt;// 新加代码&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Provider&lt;/span&gt;(&lt;span&gt;props&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; value = useHook(props.initialState)&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; contextRef = useRef(value)&lt;br/&gt;        contextRef.current = value&lt;br/&gt;        useEffect(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;           &lt;span&gt; &lt;span&gt;// 在监听逻辑添加执行回调队列&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;            watcher.exc(value) &lt;span&gt;// 新加代码&lt;/span&gt;&lt;br/&gt;        })&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;lt;&lt;span&gt;Provider&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;=&lt;span&gt;{contextRef}&lt;/span&gt;&amp;gt;&lt;/span&gt;{props.children}&lt;span&gt;&amp;lt;/&lt;span&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;先看看上面的callback的真身是什么样子的&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在节点挂载完成阶段，将callback即下面的watch函数添加到watcher单例&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;span&gt;&lt;strong&gt;watch函数&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;一句话，各种比较，值相同就return，不相同就触发forceUpdate，强制更新ref控制的值。下面用到的&lt;strong&gt;shallowEqual&lt;/strong&gt;在上面有实现&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;useSeletor修改&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; useSelector = &lt;span&gt;(&lt;span&gt;selector&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; value = useContext(Context).current;&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; selected = selector(value);&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; forceUpdate = useForceUpdate();&lt;br/&gt;    &lt;span&gt;const&lt;/span&gt; ref = useRef({&lt;br/&gt;      selected,&lt;br/&gt;      value&lt;br/&gt;    });&lt;br/&gt;    ref.current = {&lt;br/&gt;      selected,&lt;br/&gt;      value&lt;br/&gt;    };&lt;br/&gt; &lt;br/&gt;    useEffect(&lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;const&lt;/span&gt; watch = &lt;span&gt;(&lt;span&gt;newValue&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (!ref.current) {&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (newValue === ref.current.value) {&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;const&lt;/span&gt; newSelected = selector(newValue);&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; (shallowEqual(newSelected, ref.current.selected)) {&lt;br/&gt;          &lt;span&gt;return&lt;/span&gt;;&lt;br/&gt;        }&lt;br/&gt;        forceUpdate();&lt;br/&gt;      };&lt;br/&gt;      watcher.add(watch);&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&lt;span&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; {&lt;br/&gt;        watcher.clean();&lt;br/&gt;      };&lt;br/&gt;    }, []);&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; selected;&lt;br/&gt;  };&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9508196721311475&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpSlKrjBH7kNdrkehynLwk4K9h7H7QRbBtpAniawIbxjESX6ticIDZJe6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;183&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;效果图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Count没有重复渲染！因为它没有订阅color的数据。&lt;/p&gt;&lt;h3&gt;增加更多API&lt;/h3&gt;&lt;p&gt;&lt;span&gt;要让使用方代码进一步减少，usePicker只关注需要什么属性，不用再像useSelector传一个回调函数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;usePicker&lt;/strong&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;const&lt;/span&gt; pick = &lt;span&gt;(&lt;span&gt;obj, arr&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&lt;br/&gt;  arr.reduce(&lt;span&gt;(&lt;span&gt;iter, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (val &lt;span&gt;in&lt;/span&gt; obj &amp;amp;&amp;amp; (iter[val] = obj[val]), iter), {});&lt;br/&gt; &lt;br/&gt;&lt;span&gt;// ...&lt;/span&gt;&lt;br/&gt; &lt;span&gt;const&lt;/span&gt; usePicker = &lt;span&gt;(&lt;span&gt;target&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; useSelector(&lt;span&gt;(&lt;span&gt;_&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;      &lt;span&gt;// 数组&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;Array&lt;/span&gt;.isArray(target)) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; pick(_, target);&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;// 字符串&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; target === &lt;span&gt;&quot;string&quot;&lt;/span&gt;) {&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; pick(_, [target]);&lt;br/&gt;      }&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; _;&lt;br/&gt;    });&lt;br/&gt;  };&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;写法支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24324324324324326&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKpFSiaSkcKhIndQIibU2L9p0KxGDicHYYHJqwUa5eZJyvZ5g9pMcHtYsHhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;851&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;五、最后&lt;/span&gt;&lt;/h2&gt;&lt;h1&gt;&lt;span&gt;其他优秀方案&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;heo&lt;/h2&gt;&lt;p&gt;本文的封装灵感源自于此，但比它更易理解&lt;/p&gt;&lt;h2&gt;hox&lt;/h2&gt;&lt;p&gt;umijs下的&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;文末抽奖：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;css新世界书籍1本，红包8个。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;之前抽中过的小伙伴本次中奖无效~&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;2.137962962962963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKp5u0J6esytFDbUQibQe1ezDuDCjT4Lngk9LXXMErRXLnmlSFibCUapUibw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;关注我，一起携手进阶&lt;/strong&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg3ODAyNDI0OQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ic5A4V8PX4PmOXMQHa6L3OhPGOnf2BSZib7ibVcAj2j2FYkfFCWb2xmyfX63TYVlofunfD4QnB5vqELZqXfnQZMlA/0?wx_fmt=png&quot; data-nickname=&quot;前端早茶&quot; data-alias=&quot;ZeFeng_axios&quot; data-signature=&quot;专注前端，一起结伴同行，紧跟业界发展步伐~&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.3153409090909092&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ic5A4V8PX4PkXVhh67SWs5VeOKrLcodSsPcYFia7cCdFPAfn6mbt4iaFjPBCbAI7aC3jIbQfD8bqNP7MZnnsbeOdQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注&lt;span&gt;&lt;strong&gt;&lt;span&gt;前端早茶&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，与广东靓仔携手共同进阶～&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ic5A4V8PX4PnrzHtfDU2FDsQ87v1zAzKp3pdu3NNyCiaDZVLnkKB8frwUXQGTIR5pgribmOdw9b8vdg8XugYN1H9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎小伙伴跟杰哥一起交流&lt;/p&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>