<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b9d8a0b134d8dfb909f44cc16d23a201</guid>
<title>云上共享文件系统的兼容性大比拼</title>
<link>https://toutiao.io/k/cjuez0d</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;post_content markdown&quot;&gt;&lt;p&gt;「一切皆文件」是 UNIX 的基本设计哲学。文件按照层级关系组织为树形目录，构成了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F&quot;&gt;文件系统&lt;/a&gt; 的基本形态。用户使用文件系统来保存数据时，不必关心数据底层的存储方式，便可以按照约定的接口规范进行访问。&lt;/p&gt;&lt;h1 id=&quot;概念篇&quot;&gt;概念篇&lt;/h1&gt;&lt;p&gt;关于文件系统的接口规范，应用最为广泛的莫过于 &lt;a href=&quot;https://zh.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt;，源于 IEEE 委员会编写的相关标准，其中有些章节是关于文件及目录操作的。标准本身比较冗长晦涩，在此不作深入探讨。我们可以参考 Quora 上的一个问答 &lt;a href=&quot;https://www.quora.com/What-does-POSIX-conformance-compliance-mean-in-the-distributed-systems-world&quot;&gt;“What does POSIX conformance/compliance mean in the distributed systems world?”&lt;/a&gt; ，对此概括的比较全面。&lt;/p&gt;&lt;p&gt;POSIX 兼容要求文件系统具备以下几项特征：&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;层级化的目录结构，支持任意深度&lt;/li&gt;&lt;li&gt;文件通过 &lt;code&gt;open(O_CREAT)&lt;/code&gt;，目录通过 &lt;code&gt;mkdir&lt;/code&gt; 创建等等&lt;/li&gt;&lt;li&gt;目录可以通过 &lt;code&gt;opendir/readdir&lt;/code&gt; 遍历&lt;/li&gt;&lt;li&gt;路径/命名空间可以通过 &lt;code&gt;rename&lt;/code&gt; 、 &lt;code&gt;link&lt;/code&gt; / &lt;code&gt;unlink&lt;/code&gt;、 &lt;code&gt;symlink&lt;/code&gt; / &lt;code&gt;readlink&lt;/code&gt; 等修改&lt;/li&gt;&lt;li&gt;数据通过 &lt;code&gt;write&lt;/code&gt; 或 &lt;code&gt;writev&lt;/code&gt; 写入， &lt;code&gt;fsync&lt;/code&gt; 时要求持久化，通过 &lt;code&gt;read&lt;/code&gt; 或 &lt;code&gt;readv&lt;/code&gt; 读取&lt;/li&gt;&lt;li&gt;其他一些接口如 &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt; / &lt;code&gt;chown&lt;/code&gt; 等&lt;/li&gt;&lt;li&gt;与某些流行的说法相悖，扩展属性看起来并不是 POSIX 的一部分，参见&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/&quot;&gt;The Open Group Base Specifications Issue 7, 2018 edition&lt;/a&gt; 里的函数列表&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;测试篇&quot;&gt;测试篇&lt;/h1&gt;&lt;p&gt;一个文件系统是否真正满足 POSIX 兼容性，我们可以通过测试工具来检验。比较流行的一个测试用例集是 &lt;a href=&quot;https://github.com/pjd/pjdfstest&quot;&gt;pjdfstest&lt;/a&gt;，来源于 FreeBSD，也适用于 Linux 等系统。pjdfstest 的测试用例需要以 root 身份来运行，并且要求系统里安装了 Perl 和 TAP::Harness（Perl 软件包），测试过程如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cd /path/to/filesystem/under/test
sudo prove --recurse --verbose /path/to/pjdfstest/tests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们选取了几种云环境中的共享文件系统进行测试，统计测试结果中的失败用例如下：&lt;/p&gt;&lt;p&gt;因为 Amazon EFS 失败的测试用例相比其他产品大了几个数量级，为了方便比较，上图的横坐标使用了对数坐标。&lt;/p&gt;&lt;p&gt;我们还同时测试了 &lt;a href=&quot;https://github.com/s3fs-fuse/s3fs-fuse&quot;&gt;S3FS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/kahing/goofys&quot;&gt;Goofys&lt;/a&gt;，失败的用例数均为数百项乃至上千项，其根本原因是这两个项目并不是严格按照文件系统来设计的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Goofys&lt;/strong&gt; 可以将 S3 挂载为文件系统，但仅仅是 “POSIX-ish” 接口的 “Filey” 系统（这两个描述来自于官方项目介绍，翻译成中文即“似是而非”或“貌合神离”）。Goofys 在设计理念上为了性能而牺牲了 POSIX 兼容性，所支持的文件操作极大地受限于 S3 等对象存储本身。测试结果也验证了这一点。建议在生产使用之前全面评审应用的数据访问方式，以免落入陷阱。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;S3FS&lt;/strong&gt; 尽管名为文件系统，但实际上更接近于用&lt;strong&gt;文件系统视图&lt;/strong&gt;管理 S3 bucket 中对象的一种方法。尽管 S3FS 支持了 POSIX 的一个较大子集，但只是将系统调用一一映射为对象存储请求，并不支持常规文件系统的语义及一致性（例如目录的原子重命名，独占模式打开时的互斥，附加文件内容会导致重写整个文件以及不支持硬连接等等）。这些缺陷导致 S3FS 并不能用于替代常规文件系统（即便不考虑性能问题），因为当应用访问文件系统时，预期的行为应该是符合 POSIX 规范的，而 S3FS 远远不能满足这一点。&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;分析篇&quot;&gt;分析篇&lt;/h1&gt;&lt;p&gt;下面我们将测试的失败用例进行分类统计，挑选几类比较有代表性的来分析下会对应用造成何种限制。&lt;/p&gt;&lt;p&gt;总的来说，无论从数量还是类别来看，JuiceFS 的失败用例都更少，有更好的兼容性。Amazon EFS 的失败用例无论从总数及类别均大大超出其它几种文件系统，无法放入同一图表对比，后面将单独分析。&lt;/p&gt;&lt;h2 id=&quot;juicefs&quot;&gt;JuiceFS&lt;/h2&gt;&lt;p&gt;JuiceFS 在本次测试中通过了8811项用例中的绝大多数，仅在 utimensat 测试集上失败了 3 项。对应日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;…
/root/pjdfstest/tests/utimensat/08.t ........
not ok 5 - tried &#x27;lstat pjdfstest_bfaee1fc7f2c1f80768e30f203f41627 atime_ns&#x27;, expected 100000000, got 0
not ok 6 - tried &#x27;lstat pjdfstest_bfaee1fc7f2c1f80768e30f203f41627 mtime_ns&#x27;, expected 200000000, got 0
Failed 2/9 subtests
/root/pjdfstest/tests/utimensat/09.t ........
not ok 5 - tried &#x27;lstat pjdfstest_7911595d91adcf915009f551ac48e1f2 mtime&#x27;, expected 4294967296, got 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这几个测试用例出自&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/utimensat/08.t&quot;&gt;utimensat/08.t&lt;/a&gt;和&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/utimensat/09.t&quot;&gt;utimensat/09.t&lt;/a&gt;。其中 08.t 是测试亚秒级的文件访问时间和修改时间精度，09.t 则是要求支持64位时间戳。&lt;/p&gt;&lt;p&gt;JuiceFS 目前只支持秒，时间戳保存为32位整数，故无法通过这三个测试（实际上本次测试涉及的所有文件系统都无法100%通过这个测试集）。如果您的应用场景要求秒以下的时间精度或者更大范围，欢迎联系我们商讨解决方案。&lt;/p&gt;&lt;h2 id=&quot;gcp-filestore&quot;&gt;GCP Filestore&lt;/h2&gt;&lt;p&gt;除了和 JuiceFS 一样在 utimesat 测试集上存在若干失败结果之外，GCP Filestore 还在 unlink 测试集中失败了 1 项。这一项在其他所有文件系统中也都是失败的。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/unlink/14.t ...........
not ok 4 - tried &#x27;open pjdfstest_b03f52249a0c653a3f382dfe1237caa1 O_RDONLY : unlink pjdfstest_b03f52249a0c653a3f382dfe1237caa1 : fstat 0 nlink&#x27;, expected 0, got 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/unlink/14.t&quot;&gt;unlink/14.t&lt;/a&gt;）用于验证一个文件在打开状态下被删除时的行为：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;An open file will not be immediately freed by unlink&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除文件的操作在系统层面实际对应于 unlink，即移除该文件名到对应 inode 的链接，对应 nlink 的值减 1，这个测试用例就是要验证这一点。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# A deleted file&#x27;s link count should be 0
expect 0 open ${n0} O_RDONLY : unlink ${n0} : fstat 0 nlink
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文件内容只有在链接数（nlink）减少至 0 并且没有打开的文件描述符（fd）指向该文件时才会被真正删除。如果 nlink 没有被正确更新，可能会导致本该删除的文件仍然残留在系统里。&lt;/p&gt;&lt;h2 id=&quot;腾讯云-cfs&quot;&gt;腾讯云 CFS&lt;/h2&gt;&lt;p&gt;腾讯云 CFS 相比 Google Filestore，还未能通过 open 和 symlink 的几项测试。&lt;/p&gt;&lt;h3 id=&quot;open-失败用例&quot;&gt;open 失败用例&lt;/h3&gt;&lt;p&gt;选取其中一部分失败日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/open/07.t .............
not ok 5 - tried &#x27;-u 65534 -g 65534 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
not ok 7 - tried &#x27;-u 65533 -g 65534 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
not ok 9 - tried &#x27;-u 65533 -g 65533 open pjdfstest_f24a42815d59c16a4bde54e6559d0390 O_RDONLY,O_TRUNC&#x27;, expected EACCES, got 0
Failed 3/23 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此测试集 &lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/open/07.t&quot;&gt;open/07.t&lt;/a&gt; 用于验证不具备写权限时，应该对 O_TRUNC 模式返回 EACCES 错误这一行为。&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;open returns EACCES when O_TRUNC is specified and write permission is denied&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面这三个失败日志需要结合测试代码来分析，分别对应 owner，group 和 other 三种情况。不失一般性，我们仅就 owner 情况进行分析 ：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;expect 0 -u 65534 -g 65534 chmod ${n1} 0477
expect EACCES -u 65534 -g 65534 open ${n1} O_RDONLY,O_TRUNC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先设置文件 owner 权限为 4，即 &lt;code&gt;r--&lt;/code&gt; 只读，然后尝试以 O_RDONLY,O_TRUNC 模式打开文件，预期应该返回 EACCES，实际返回了 0。&lt;/p&gt;&lt;p&gt;根据 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/007908799/xsh/open.html&quot;&gt;The Single UNIX ® Specification, Version 2&lt;/a&gt; 中对 O_TRUNC 的说明&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;O_TRUNC
If the file exists and is a regular file, and the file is successfully opened O_RDWR or O_WRONLY, its length is truncated to 0 and the mode and owner are unchanged. It will have no effect on FIFO special files or terminal device files. Its effect on other file types is implementation-dependent. The result of using O_TRUNC with O_RDONLY is undefined.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;O_TRUNC 与 O_RDONLY 组合使用的结果是未知的，而且此用例的被测文件本身就是空文件，O_TRUNC 不会产生任何效果。&lt;/p&gt;&lt;h3 id=&quot;symlink-失败用例&quot;&gt;symlink 失败用例&lt;/h3&gt;&lt;p&gt;对应测试日志如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/symlink/03.t ..........
not ok 1 - tried &#x27;symlink 7ea12171c487d234bef89d9d77ac8dc2929ea8ce264150140f02a77fc6dcad7c3b2b36b5ed19666f8b57ad861861c69cb63a7b23bcc58ad68e132a94c0939d5/.../... pjdfstest_57517a47d0388e0c84fa1915bf11fe4a&#x27;, expected 0, got EINVAL
not ok 2 - tried &#x27;unlink pjdfstest_57517a47d0388e0c84fa1915bf11fe4a&#x27;, expected 0, got ENOENT
Failed 2/6 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/symlink/03.t&quot;&gt;symlink/03.t&lt;/a&gt;）用于测试路径超出 PATH_MAX 长度时 symblink 的行为&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;symlink returns ENAMETOOLONG if an entire length of either path name exceeded {PATH_MAX} characters&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;失败的用例对应代码如下：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;n0=`namegen`
nx=`dirgen_max`
nxx=&quot;${nx}x&quot;

mkdir -p &quot;${nx%/*}&quot;
expect 0 symlink ${nx} ${n0}
expect 0 unlink ${n0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试用例是要创建长度为 PATH_MAX (包括结尾的0在内）的符号链接，通不过表明无法在 腾讯云 NAS 上创建长度为 PATH_MAX 的符号链接。&lt;/p&gt;&lt;h2 id=&quot;阿里云-nas&quot;&gt;阿里云 NAS&lt;/h2&gt;&lt;p&gt;相比腾讯云 NAS，阿里云 NAS 在 symlink 上表现正常，但未能通过 chmod 和 rename 上的几项测试用例。&lt;/p&gt;&lt;h3 id=&quot;chmod-失败用例&quot;&gt;chmod 失败用例&lt;/h3&gt;&lt;p&gt;在这个测试集中，阿里云 NAS 失败了以下几个项目&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;/root/pjdfstest/tests/chmod/12.t ............
not ok 3 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_WRONLY : write 0 x : fstat 0 mode&#x27;, expected 0777, got 04777
not ok 4 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 04777
not ok 7 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_RDWR : write 0 x : fstat 0 mode&#x27;, expected 0777, got 02777
not ok 8 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 02777
not ok 11 - tried &#x27;-u 65534 -g 65534 open pjdfstest_db85e6a66130518db172a8b6ce6d53da O_RDWR : write 0 x : fstat 0 mode&#x27;, expected 0777, got 06777
not ok 12 - tried &#x27;stat pjdfstest_db85e6a66130518db172a8b6ce6d53da mode&#x27;, expected 0777, got 06777
Failed 6/14 subtests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该测试集（&lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/chmod/12.t&quot;&gt;chmod/12.t&lt;/a&gt;）用于测试 SUID/SGID 位的行为&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;verify SUID/SGID bit behaviour&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们选取其中的第11和12个测试用例来详细解释一下，同时覆盖了这两个权限位&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# Check whether writing to the file by non-owner clears the SUID+SGID.
expect 0 create ${n0} 06777
expect 0777 -u 65534 -g 65534 open ${n0} O_RDWR : write 0 x : fstat 0 mode
expect 0777 stat ${n0} mode
expect 0 unlink ${n0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此处，我们先以 06777 的权限创建目标文件，然后修改文件内容，检查 SUID 和 SGID 是否被正确清除。文件权限里的 777 大家会比较熟悉，分别对应 owner，group和 other 的 rwx，即可读、可写、可执行。最前面的 0 表示八进制数。&lt;/p&gt;&lt;p&gt;第二位 6 需要着重解释下，这个八位元组（octet）代表特殊权限位，其中前两位分别对应 setuid/setgid（或称 SUID/SGID），可以应用于可执行文件及公共目录。该权限位被设置时，任何用户都会以 owner （或 group）身份来运行该文件。这个特殊的属性允许用户获取通常只对 owner 开放的文件和目录访问权限。例如 passwd 命令就设置了 setuid 权限，这允许普通用户修改密码，因为保存密码的文件是只允许 root 访问的，用户不可直接修改。&lt;/p&gt;&lt;p&gt;setuid/setgid 设计的出发点是提供一种方法，让用户以限定的方式（指定可执行文件）访问受限文件（非当前用户所有）。因此，当文件被非 owner 修改时应自动清除此权限位，以避免用户通过这个途径获取其他权限。&lt;/p&gt;&lt;p&gt;从测试结果中我们可以看到在阿里云 NAS 中，&lt;strong&gt;文件被非 owner 修改时，setuid/setgid 均未被清除，这样实际上用户可以通过修改文件内容以该 owner 身份进行任意操作，这将会是个安全隐患。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;参考阅读： &lt;a href=&quot;https://docs.oracle.com/cd/E19683-01/816-4883/secfile-69/index.html&quot;&gt;Special File Permissions (setuid, setgid and Sticky Bit) (System Administration Guide: Security Services)&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;rename-失败用例&quot;&gt;rename 失败用例&lt;/h3&gt;&lt;p&gt;阿里云 NAS 在这个测试集上失败数量较多，达到了 24 项，全部出现在 &lt;a href=&quot;https://github.com/pjd/pjdfstest/blob/master/tests/rename/09.t&quot;&gt;rename/09.t&lt;/a&gt; 中：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;desc=&quot;rename returns EACCES or EPERM if the directory containing &#x27;from&#x27; is marked sticky, and neither the containing directory nor &#x27;from&#x27; are owned by the effective user ID&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个测试集用于检验 sticky 位被设置时 rename 的行为：当包含源对象的目录设置了 sticky 权限位的时候，并且源对象和包含目录的 owner 都与有效用户ID（effective user ID）不同时，rename 应该返回 EACCES 或 EPERM。（这样的复杂逻辑令人联想到三国杀的武将技能设定……）。&lt;/p&gt;&lt;p&gt;sticky 位的典型应用是 /tmp 目录，允许所有人创建内容，但是只有 owner 才能删除文件。FTP 里面的公共上传目录通常也是这种设置。&lt;/p&gt;&lt;p&gt;几个失败的测试用例表明阿里云 NAS 对 sticky 位的支持还不够完善，非 owner 的 rename 操作没有被拒绝，并且产生了实际的效果——源文件被重命名。这种行为越过了文件系统的访问控制，对用户文件的安全性造成了威胁。&lt;/p&gt;&lt;h2 id=&quot;amazon-efs-中的失败用例&quot;&gt;Amazon EFS 中的失败用例&lt;/h2&gt;&lt;p&gt;Amazon Elastic File System (EFS) 在 pjdfstest 测试中的不仅失败比例极高（8811个测试用例失败了1533个），而且几乎覆盖了所有类别，这比较令人意外。&lt;/p&gt;&lt;p&gt;EFS 支持以 NFS 方式挂载，但对 NFS 特性的支持并不完整。比如EFS 不支持块设备和字符设备，这直接导致了 pjdfstest 中大量测试用例的失败。排除这两类文件之后，仍然有上百项不同类别的失败，所以在复杂场景中应用 EFS 必须慎之又慎。&lt;/p&gt;&lt;h1 id=&quot;总结篇&quot;&gt;总结篇&lt;/h1&gt;&lt;p&gt;通过上面的对比分析，JuiceFS 在兼容性方面表现最好，像大多数网络文件系统一样，为了性能牺牲了秒以下的时间精度和范围（1970 - 2106 年）。Google Filestore 和腾讯云 CFS 次之，有几类未能通过。而阿里云 NAS 和 Amazon EFS 的兼容性最差，有大量的兼容性测试通不过，其中包括有严重安全隐患的若干个测试用例，使用前建议做安全性评估。&lt;/p&gt;&lt;p&gt;JuiceFS 一直非常重视对 POSIX 标准的高度兼容，我们把 pjdfstest 等兼容性测试工具同其他随机和并发测试工具（比如 &lt;a href=&quot;https://github.com/billziss-gh/secfs.test/tree/master/fsracer&quot;&gt;fsracer&lt;/a&gt;、&lt;a href=&quot;https://github.com/billziss-gh/secfs.test/tree/master/fstools&quot;&gt;fstool&lt;/a&gt; 等）一起作为集成测试工具，在持续完善功能、提高性能的同时，尽力保持最大程度的 POSIX 兼容性，避免用户在使用过程中落入各种陷阱，从而更加专注于自身业务的发展。人生苦短，我用 JuiceFS！&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dccb18b27e4bd3a92eaa93baf015ef0c</guid>
<title>程序员如何高效的分析HC岗位</title>
<link>https://toutiao.io/k/hghmrf8</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0OTI0NzIzMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwyavDTedzsA7hicJ3r55tiaOxjDhO01LRxYCmqCRowLFRFjN9ZrEiafbBSYUATl9QBlJSY1UWwB25k4w/0?wx_fmt=png&quot; data-nickname=&quot;35岁程序员那些事&quot; data-alias=&quot;&quot; data-signature=&quot;畅销书-Spring Cloud Alibaba微服务架构实战派（上下册）的作者&quot; data-from=&quot;1&quot;/&gt;&lt;span/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;程序员在高效的分析HC岗位之前，一定要搞清楚自己想找一份什么样的工作，只有这样才能有的放矢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;找准定位&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;何为“找准定位”，那就是你的工作方向是什么？举一个简单的例子，你是要做业务开发还是技术开发，你是要做开发还是做管理，这个在找工作之前一定要先定下来，或者有一个优先级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做技术，但是前一份工作并不是专门做技术的，只是你觉得需要有这个一个平台，去发挥你自己的兴趣爱好，那么咱们需要去招聘平台上review相关的岗位。为了增加面试成功的概率，我们需要尽量的找中小型公司的HC岗位，为什么呢？主要是你缺乏技术研发的经验，另外中小企业也会有更多的机会放手去做一些事情，如果运气好，还能见证某一个新技术，从0到1落地的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做技术，并且技术非常牛，一直都是专门做技术的，那么为了进一步的提升自己技术造诣，那么建议去一线大厂，这样可以在大的平台上，将你的价值最大化，关键是还能结识更多的技术牛人，拓广自己技术的人脉关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是想做业务开发，但是之前的公司的业务规模偏小。比如你是一个某支付公司的业务开发（小的支付平台），但是你现在想去某某支付大厂，那么咱们就得在业务理解的基础之上，多增加一些与落地业务相关能力拓展，比如高效的代码重构、高效的业务建模、高效的业务架构以及高效的解决技术问题的能力等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你是还是想做业务开发，但是之前的公司的业务规模已经很大了，那么这个时候你是否应该考虑转做管理，为什么呢？因为大厂的业务沉淀，能够驱动自己快速的拿业务结果，那么为了提升自己这方面的优势，那在定位HC时，可以尝试转型管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;分析HC&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好吧，我这里拿某某大厂的技术线上的“高级技术专家”的岗位来举例，岗位要求如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5283582089552239&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwzCK0yQtRyA4LTVY3OoAoR2ib8mM44QRt7iakLFvB7mgb2CsdNHxGECsbFNxSg6Pq7TqLxtvlL8DtUg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;670&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;先看岗位职责。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，我们看岗位职责1，“管理研发团队，制定团队目标，对团队产出负责。对研发团队进行系统性的技术指导和培训，规范研发流程，提升团队整体技术水平”：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt; 管理研发团队。肯定很多人会问，一个“高级技术专家”并不是管理岗位，为什么要管理研发团队呢？管理岗位会有虚线和实线两类，那么这个岗位大概率是虚线管理，比如通过项目管理人和事，并拿结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;制定团队目标。又会有人会问，不是做技术的吗？还要制定虚线成员的目标，好吧，这&lt;/span&gt;&lt;span&gt;个岗位大概&lt;/span&gt;&lt;span&gt;率是团队老大的“二把手”，就是老大是管人，你是管事和负责落地，并拿结果；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对团队产出负责。这个要求就更加明显了，不是团队的“一把手”，还要对产出负责，这个从能力矩阵的角度来看，已经越界了。但是人家既然这样要求，要么是“一把手”是一个甩手掌柜，要么是“一把手”需要培养你，自己要高升了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对研发团队进行系统性的技术指导和培训，规范研发流程，提升团队整体技术水平。这个技能点才是“高级技术专家”的看家本领，但是居然放在了最后，大家可以思考一下这个岗位的挑战性有多大。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然后，我们看看岗位职责2，“对项目进行合理的架构设计、重构、优化已有系统，提高系统性能和稳定性，攻克技术实施中的难题”：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;对项目进行合理的架构设计、重构、优化已有系统。这个岗位职责其实要求非常高，无论是候选人的技术功底，还是架构和规划落地能力功底，最后就是跨部分协作，并推动项目落地的功底，都需要候选人达到一定的层次，才能胜任。为什么这样说呢？“合理的架构设计”其实要求你懂业务，并能够快速的出业务和技术解决方案；“重构”其实需要你能落地代码（不管是自己亲自写代码，还是协调一线开发）；“优化已有系统”其实要求你改造旧的系统，去做创新，那么有创新就去做跨部门沟通，协调落地。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;提高系统性能和稳定性。从技术的角度去看，这个要求是最高的。它要求候选人不仅要懂常规的性能优化的技术手段，比如代码重构、服务拆分、读写分离等，还要确保改造之后服务运行的稳定性，这个就太难了。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再看任职要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求1，“全日制本科及以上学历，计算机相关专业“，好吧这个条件估计要筛出一部分人，如果人家有这个要求了，那么肯定会拿这个作为筛选简历的基本要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求2，“8年以上开发工作经验，4年以上架构设计经验“，我来解读下这个要求，并不是说要求我们要有12年的工作经验，也就是说你要有8年以上的开发经验，但是其中有4年你是按照工作职责的比重，是积累了4年的架构设计经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求3，“熟悉敏捷开发体系，管理过10人以上研发团队，并有跨团队协作经验”，这个就是和我在前面分析的不谋而合，虽然不是管理岗位，但是从职责的角度去看，他需要你具备管理的经验，好吧，大概率这个岗位就是一个“拿结果的二把手的岗位”，没有资源，还要去拿团队结果，哈哈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求4，“有丰富的高并发、高可靠性应用的研发和设计经验，有分布式业务系统的设计与开发经验，有微服务架构应用设计经验。3年以上基于Spring Cloud、Dubbo等主流框架开发经验”，这个要求就定位这个岗位的方向，它就是一个一线的高级研发而已，不仅要参与架构设计，还要参与代码编写，还要懂各种技术的细节，当然还要做虚线管理，去拿结果。哈哈，就是一个“全职打工人”的岗位，当然责任大，成长也快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们看任职要求5，“有主导过大型企业级应用架构设计的经验，有交易系统、电商等相关经验的优先”，这个要求就有点偏离岗位角色了，但是其实也不无道理，如果你前面几条都不满足，那么人家要你去面试，拿就是一个业务线上开发的备胎，所以这个时候你会发现，就算是你不是做技术的，人家也会让你去面试，但最终得到的岗位并不是和HC相匹配的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，圈子里面一直在说“金三银四”，其实我是不太认同这个概念的，有准备的人是不太会看中这个所谓的时间节点的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后希望程序员都能够找到一份合适自己的工作，并工作开心和快乐。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;粉丝福利时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了回馈广大技术人和书友，本公众号和电子工业出版社合作，一起给大家赠送一些技术类书籍。&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;              &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibl6u6nJ01g9icia42icDbWWvO2ObicnIUHjwQKVp30YzLS8xSInYupoEXAKjYeYDibY50CgKLz6ViaDjTjuRqUqaae0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;参与方式&lt;/p&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;2.2&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/K8beZoNWDcUm9I6ia4UU97K1XHrQx2PavruEm3xAL2W3Vd7JxrB8PLXtmT5JkwqpC9Dg9hEmtVZkY2hibnlkib0Qg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;关注公众号：35岁程序员那些事，后台回复关键词“参与抽奖”，获取抽奖链接，点击抽奖。 中奖之后，可以联系笔者的微信号或者公众号后台回复关键词“联系笔者”，获取联系方式。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没有中奖的技术人，还可以参与本次文章的点赞和留言，笔者会按照留言的时间顺序和点赞的时间顺序，随机的再抽取一名技术人，再赠送一本技术书籍&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;笔者会在抽奖结果出来之后，进行留言和点赞技术人的抽奖，抽奖结果会同步公布。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;部分书单列表&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__78&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__79&quot;&gt;Spring Cloud Alibaba 微服务架构实战派（上下册）&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__80&quot;&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot; data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;技术新。采用目前的新版本（2.2. 5.RELEASE）来编写，相关技术也采用的是目前新的稳定版本；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;精心设计的主线：零基础入门，循序渐进，直至项目实战；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;不只介绍框架本身，而是微服务架构全栈技术（比如Seata、Skywalking、Redis、RocketMQ等），本书是“一站到底”的解决方案：读者只需从这里上车，中途无需转乘，读者需要什么，本书就提供什么，直达终点；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;绘制了大量的图，便于理解原理、架构、流程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;本书的目标是：①让读者在动手中学习，而不是“看书时好像全明白了，一动手却发现什么都不会”；②读者可以掌握微服务全栈技术，而不仅仅是框架，对于相关的技术（Seata、RocketMQ），基本都是从零讲起，这样避免了读者为了学会微服务技术，得找Spring Cloud 框架的书、Seata的书、RocketMQ的书……本书是一站式解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(175, 165, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__78&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__79&quot;&gt;Spring Cloud Alibaba 微服务架构实战派（上下册）&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__80&quot;&gt;》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;是笔者自己出版的书籍，肯定是要放在第一位的，资源多多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__54&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;Spring Boot实战派》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书花费大量的力气对比讲解多种同类技术的知识、使用和区别，读者可以根据自己的喜欢进行技术选型；还讲解了时下流行的接口架构风格RESTFUL、用来实现高并发的Redis、用来实现系统间通信的中间件RabbitMQ。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;最后两章融合了本书所讲知识点，讲解了两个常用又实用的实战项目。本书适合所有对Spring Boot感兴趣的读者阅读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;第三本 &lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__147&quot;&gt;《&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;剑指Offer（专项突破版）：数据结构与算法名企面试题精讲&lt;/strong&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__149&quot;&gt;》&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书全面、系统地总结了在准备程序员面试过程中必备的数据结构与算法。本书首先详细讨论整数、数组、链表、字符串、哈希表、栈、队列、二叉树、堆和前缀树等常用的数据结构，然后深入讨论二分查找、排序、回溯法、动态规划和图搜索等算法。除了介绍相应的基础知识，每章还通过大量的高频面试题系统地总结了各种数据结构与算法的应用场景及解题技巧。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;本书适合所有正在准备面试的程序员阅读。无论是计算机相关专业的应届毕业生还是初入职场的程序员，本书总结的数据结构和算法的基础知识及解题经验都不仅可以帮助他们提高准备面试的效率，还可以增加他们通过面试的成功率。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__148&quot;&gt;第四本 《微服务项目实战派:从Spring Boot到Spring Cloud》&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书以项目实战的形式来介绍Spring Cloud微服务体系。书中所有实例都来自作者多年工作实践，内容覆盖构建Spring Cloud微服务所需的绝大部分内容——包括微服务工程搭建、微服务网关、熔断限流、分布式任务调度、自动化CI/CD构建、Kubernetes容器化部署、微服务监控系统、分布式链路追踪等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书适合希望快速提升项目经验的Java初学者、正在转型微服务架构的传统项目研发人员、希望提升Spring Cloud微服务全栈技术经验的高级开发人员、对特定系统设计感兴趣的产品经理及研发人员。无论读者是否接触过微服务开发，只要具备一定的Java开发基础，都能通过本书的学习快速掌握实际场景中的微服务开发技巧，并快速提升项目实战经验。&lt;/span&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;第五本&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt; 《正本清源分布式事务之Seata》&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-darkmode-bgcolor-16460189857240=&quot;rgb(31, 31, 31)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)|rgb(253, 250, 246)&quot; data-darkmode-color-16460189857240=&quot;rgb(102, 102, 102)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(65, 58, 56)|rgb(102, 102, 102)&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;strong data-darkmode-bgcolor-16460189857240=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-16460189857240=&quot;#fff|rgb(255, 255, 255)&quot; data-darkmode-color-16460189857240=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-16460189857240=&quot;#fff|rgb(59, 59, 59)|rgb(0, 0, 0)&quot; data-style=&quot;max-width: 100%; max-inline-size: 100%; cursor: text; color: rgb(0, 0, 0); font-size: 16px; letter-spacing: 1.5px; caret-color: rgb(255, 0, 0); font-family: 微软雅黑, sans-serif; outline: none 0px !important; box-sizing: border-box !important; overflow-wrap: break-word !important;&quot; class=&quot;js_darkmode__55&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在微服务架构下，分布式事务一直是痛点和难点。Seata是阿里巴巴开源的分布式事务中间件，致力于以高效且对业务无侵入的方式，解决在微服务场景下面临的分布式事务问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书作者是阿里巴巴GTS创始人和Seata作者，结合其多年在分布式事务领域设计、研发和应用的经验，深入浅出地阐述了分布式事务技术基础、Seata AT模式、TCC模式、RPC设计、事务协调器技术的原理，并给出了两个开发实例（AT模式和TCC模式）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本书可以为微服务系统架构师、研发人员解决核心业务实际问题提供思路，也适合分布式技术相关专业的学生阅读，帮助他们建立分布式事务的知识框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如上书籍只是笔者列举的一些资源，如果中奖的技术人的书架上已经入驻了上述书籍，可以通过“微信”和笔者联系。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;公众号初衷&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;知识输出是笔者的初衷，借助知识输出，能够认识更多的牛人,能够和牛人沟通，也是自己技术提升的一个机会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;                        &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;     本人微信ID，如有需要惠请联系&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2982954545454546&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/Eb8TPxx4xwwHsTjeO8OsSJoG3Rg657x1BmzoeKGBExTk6yk6ibDyZwIX7zFMvX1HmDaKvaribkjWNqZPJpOeHYrw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1056&quot;/&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzk0OTI0NzIzMQ==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwwRBMXF2V1EnW3pB79Rk1CZicwibngNE3omwCwhO0A41EaR8uBx7tfSh3e30IPqVmEauR1nTTzxvlAw/0?wx_fmt=png&quot; data-nickname=&quot;35岁程序员那些事&quot; data-alias=&quot;cxynxs_35&quot; data-signature=&quot;畅销书-Spring Cloud Alibaba微服务架构实战派（上下册）的作者&quot; data-from=&quot;1&quot;/&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;一路向北&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.9482758620689655&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/IaMeK4iaQqbia5GiaVShU9NPibJ3wwSxZ2QVukfO2r651QwQoHwcA5hiapibrrkRh9AFJpvGZVRMFiaHzhPPKLs8RmdibQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;174&quot;/&gt;&lt;/section&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;p data-mid=&quot;&quot;&gt;人间灯火无不休，爱与山水与春&lt;br/&gt;&lt;/p&gt;&lt;p data-mid=&quot;&quot;&gt;                                                                            ----无题&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4255555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Eb8TPxx4xwzofM1ESK3E9bErfo0AfKL8x9F7cremVGV5D6uAn1XoFMUVAp9tpK3QrunygNEJlSXUuFrMAqBm1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;span/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9372c50c10782b107c1fb72364698da1</guid>
<title>一文掌握go语言的泛型</title>
<link>https://toutiao.io/k/3fdrlea</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;article&gt;
&lt;header&gt;
&lt;p&gt;&lt;i class=&quot;fa-regular fa-calendar&quot;/&gt; &lt;span class=&quot;app-item-time&quot;&gt;2022年2月12日&lt;/span&gt;
&lt;/p&gt;&lt;h1 class=&quot;center-text article-title&quot;&gt;Go 泛型初步&lt;/h1&gt;&lt;/header&gt;&lt;p&gt;
&lt;h4 class=&quot;text-center&quot;&gt;&lt;strong&gt;摘  要&lt;/strong&gt;&lt;/h4&gt;&lt;span&gt;Go 1.18 版本之后正式引入泛型，它被称作类型参数（type parameters），本文初步介绍 Go 中泛型的使用。&lt;/span&gt;
&lt;/p&gt;&lt;p&gt;
&lt;strong&gt;关键词: &lt;/strong&gt;
&lt;code class=&quot;keyword&quot;&gt;go&lt;/code&gt;
&lt;code class=&quot;keyword&quot;&gt;泛型&lt;/code&gt;
&lt;code class=&quot;keyword&quot;&gt;类型参数&lt;/code&gt;
&lt;/p&gt;&lt;aside data-toc-type=&quot;float-right&quot;&gt;
&lt;span&gt;目录&lt;/span&gt;
&lt;nav id=&quot;TableOfContents&quot;&gt;
&lt;/nav&gt;&lt;/aside&gt;&lt;h2 id=&quot;1-go-的泛型&quot;&gt;1. Go 的泛型&lt;/h2&gt;&lt;p&gt;长期以来 go 都没有泛型的概念，只有接口 &lt;code&gt;interface&lt;/code&gt; 偶尔类似的充当泛型的作用，然而接口终究无法满足一些基本的泛型需求，比如&lt;/p&gt;&lt;p&gt;(1). 函数体内需要对参数做运算而不是使用接口方法，如下的写法连编译都不可行。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+b&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Sum 函数尝试对输入的任意多个参数求和。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 然而 interface{} 不可以做加法，这段代码是不能编译的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;{}) &lt;span&gt;interface&lt;/span&gt;{} {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(2). 使用接口常常存在极其令人厌恶的接口转换，一个例子是标准库 &lt;code&gt;container/heap&lt;/code&gt;。&lt;code&gt;Pop&lt;/code&gt; 方法返回值几乎总是需要在逻辑上再转换为 &lt;code&gt;Push&lt;/code&gt; 时传入的类型，这使得代码不仅丑陋而且低效（曾经因为 interface{} 实际是 int 类型，但是因为类型转换导致大量的内存分配次数）&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Push pushes the element x onto the heap.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// The complexity is O(log n) where n = h.Len().
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Push&lt;/span&gt;(&lt;span&gt;h&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;, &lt;span&gt;x&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;{}) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Pop removes and returns the minimum element (according to Less) from the heap.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// The complexity is O(log n) where n = h.Len().
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Pop is equivalent to Remove(h, 0).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Pop&lt;/span&gt;(&lt;span&gt;h&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;) &lt;span&gt;interface&lt;/span&gt;{} {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为没有泛型而带来的其他问题就不一一列举，相信许多开发者都有遇到需要泛型的场景。从 go 1.18 版本开始，将正式引入泛型，官方称谓叫做类型参数 &lt;code&gt;type parameter&lt;/code&gt;，由于各种原因，现阶段的泛型比起一些流行语言中的泛型功能上还是差很多，不过总比没有好了。目前泛型主要使用的方式有两类：&lt;code&gt;函数&lt;/code&gt;的类型参数，&lt;code&gt;类型&lt;/code&gt;的类型参数。&lt;/p&gt;&lt;h2 id=&quot;2-安装-go-118-以上的版本&quot;&gt;2. 安装 go 1.18 以上的版本&lt;/h2&gt;&lt;p&gt;在 go1.18 尚未正式发布时可以通过如下命令安装 beta 版本体验&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;span&gt;go install golang.org/dl/go1.18beta2@latest
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;go1.18beta2 download
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此后可以使用 &lt;code&gt;go1.18beta2&lt;/code&gt; 命令取代原来的 go 命令编译支持泛型的代码。&lt;/p&gt;&lt;h2 id=&quot;3-函数类型参数&quot;&gt;3. 函数类型参数&lt;/h2&gt;&lt;h3 id=&quot;31-泛型版本的求和函数&quot;&gt;3.1. 泛型版本的求和函数&lt;/h3&gt;&lt;p&gt;仍以求和函数为例，泛型版本的写法如下：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&quot;golang.org/x/exp/constraints&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt;](&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;constraints 原本是放在标准库的包，但是近期被移除了，改到了 x/exp 中，参见 &lt;a href=&quot;https://github.com/golang/go/issues/50792&quot; target=&quot;_blank&quot;&gt;#50792&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这个版本实现了对任意多个同类型的整数求和。&lt;code&gt;Sum&lt;/code&gt; 后面的中括号 &lt;code&gt;[]&lt;/code&gt; 内就是定义类型参数的地方，其中 &lt;code&gt;T&lt;/code&gt; 为类型参数名，&lt;code&gt;constraints.Integer&lt;/code&gt; 是对该类型参数的约束，即 T 应该满足的条件，在这里我们要求 &lt;code&gt;T&lt;/code&gt; 是一个整数。剩下的代码就和普通没有泛型的代码一致了，只不过后面 T 可以当作一个类型来使用。标准库 &lt;code&gt;constraints&lt;/code&gt; 中预定义了一些基本的约束，另外还有两个特殊的内置类型可用作约束：&lt;code&gt;any&lt;/code&gt; 和 &lt;code&gt;comparable&lt;/code&gt;，其中 &lt;code&gt;any&lt;/code&gt; 就是原来的 &lt;code&gt;interface{}&lt;/code&gt;，在 go1.18 开始所有空 interface{} 都改成 any 了，而 &lt;code&gt;comparable&lt;/code&gt; 则表示类型是可以通过 &lt;code&gt;==&lt;/code&gt; 运算符进行比较的。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;go 的泛型参数为什么不使用其他流行语言的 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; 定义泛型？这个主要是会引起语法上的歧义，比如下面这一段代码&lt;/p&gt;&lt;p&gt;x, y := a &amp;lt; b, c &amp;gt; d&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;现在可以来使用一下刚才定义的 &lt;code&gt;Sum&lt;/code&gt; 方法：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;ints&lt;/span&gt; = []&lt;span&gt;int&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;ints&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;int32s&lt;/span&gt; = []&lt;span&gt;int32&lt;/span&gt;{&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;int32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;uint32s&lt;/span&gt; = []&lt;span&gt;uint32&lt;/span&gt;{&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;uint32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 调用 Sum 函数时也可以将类型参数带上，只是经常都能够通过实际参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 类型推断类型参数，所以常常省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;uint32&lt;/span&gt;](&lt;span&gt;uint32s&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个版本仍有一些问题，比如可以做加法的不止整数啊，还有浮点数，甚至是复数。修改类型参数 &lt;code&gt;T&lt;/code&gt; 的约束来支持浮点数和复数：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;sum2+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&quot;golang.org/x/exp/constraints&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Sum&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Float&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Complex&lt;/span&gt;](&lt;span&gt;values&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;_&lt;/span&gt;, &lt;span&gt;v&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;sum&lt;/span&gt; &lt;span&gt;+=&lt;/span&gt; &lt;span&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Sum&lt;/span&gt;(&lt;span&gt;1.0&lt;/span&gt;, &lt;span&gt;2.0&lt;/span&gt;, &lt;span&gt;3.5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过符号 &lt;code&gt;|&lt;/code&gt; 连接多个约束表示 &lt;code&gt;T&lt;/code&gt; 只需满足其中任意一个。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Sum&lt;/code&gt; 函数的例子只用了一个类型参数，go 的类型参数也支持多个，这个定义和函数参数的格式类似。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;FuncA&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;]() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;FuncB&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;]() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来通过几个简单的例子熟练一下泛型函数的使用。&lt;/p&gt;&lt;h3 id=&quot;32-使用泛型实现一个类似脚本语言比如-javascript的或运算&quot;&gt;3.2. 使用泛型实现一个类似脚本语言（比如 javascript）的或运算&lt;/h3&gt;&lt;p&gt;这个例子用于判定 &lt;code&gt;a&lt;/code&gt; 是否为 zero 值，如果是则返回 &lt;code&gt;b&lt;/code&gt;，反之返回 &lt;code&gt;a&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Or&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;y&lt;/span&gt;, &lt;span&gt;z&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;y&lt;/span&gt;, &lt;span&gt;&quot;default&quot;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;z&lt;/span&gt;, &lt;span&gt;createString&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createString&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;&quot;y&quot;&lt;/span&gt;, &lt;span&gt;&quot;z&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过不同于一般的或运算，这里 &lt;code&gt;Or(a, b)&lt;/code&gt; 时 b 的值已经确定，如果 b 是一个函数调用，那么当 a 不是 zero 值时，b 的函数调用完全浪费了。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;javascript 中的 &lt;code&gt;a || b()&lt;/code&gt; 不同于此处的 &lt;code&gt;Or(a, b())&lt;/code&gt;，前者在 a 非空时不会调用函数 b&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;可以再实现一个延迟函数调用的版本 &lt;code&gt;OrNew&lt;/code&gt; 处理这种情况：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Or&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;OrNew&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;](&lt;span&gt;a&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;()&lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;zero&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; new()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;, &lt;span&gt;y&lt;/span&gt;, &lt;span&gt;z&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;x&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;Or&lt;/span&gt;(&lt;span&gt;y&lt;/span&gt;, &lt;span&gt;&quot;default&quot;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;OrNew&lt;/span&gt;(&lt;span&gt;z&lt;/span&gt;, &lt;span&gt;createString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createString&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;doSomething&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;&quot;y&quot;&lt;/span&gt;, &lt;span&gt;&quot;z&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&quot;33-使用泛型实现三元条件运算&quot;&gt;3.3. 使用泛型实现三元条件运算&lt;/h3&gt;&lt;p&gt;go 语言不存在三元条件运算符 &lt;code&gt;&amp;lt;condition&amp;gt;? value1 : value2&lt;/code&gt;，导致经常存在需要这种场景时只好用 &lt;code&gt;if&lt;/code&gt; 写好几行的代码，不过现在可以通过泛型实现一个条件运算了。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;$+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;If&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;yes&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;, &lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;yes&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;IfNew&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;yes&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;, &lt;span&gt;a&lt;/span&gt;, &lt;span&gt;b&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;) &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;yes&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;b&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createA&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;a&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;createB&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;b&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;a&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;b&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;If&lt;/span&gt;(&lt;span&gt;a&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;IfNew&lt;/span&gt;(&lt;span&gt;b&lt;/span&gt;, &lt;span&gt;createA&lt;/span&gt;, &lt;span&gt;createB&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&quot;4-类型泛型&quot;&gt;4. 类型泛型&lt;/h2&gt;&lt;h3 id=&quot;41-类型泛型的基本使用方法&quot;&gt;4.1. 类型泛型的基本使用方法&lt;/h3&gt;&lt;p&gt;以一个 c++ 的 &lt;code&gt;std::pair&lt;/code&gt; 为例，来说明 go 的类型泛型的使用。&lt;code&gt;pair&lt;/code&gt; 包含 first 和 second 两个成员，并且每一个都有独立的类型，所以我们需要两个类型参数，先看代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;First&lt;/span&gt;  &lt;span&gt;T1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;MakePair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;](&lt;span&gt;first&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;second&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;) &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;] {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]{&lt;span&gt;First&lt;/span&gt;: &lt;span&gt;first&lt;/span&gt;, &lt;span&gt;Second&lt;/span&gt;: &lt;span&gt;second&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;pair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]) &lt;span&gt;Elements&lt;/span&gt;() (&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;pair&lt;/span&gt;.&lt;span&gt;First&lt;/span&gt;, &lt;span&gt;pair&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在定义 Pair 时在类型名称之后使用 &lt;code&gt;[T1, T2 any]&lt;/code&gt; 定义了类型参数，即 T1, T2 都可以是任意类型。&lt;/p&gt;&lt;p&gt;然后定义了泛型函数 &lt;code&gt;MakePair&lt;/code&gt; 用于创建 Pair 对象，函数的返回值类型为 &lt;code&gt;Pair[T1, T2]&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;最后实现了 Pair 的成员方法 &lt;code&gt;Elements&lt;/code&gt; 返回两个成员值，这个函数看起来很无聊，似乎没什么用，就是用来展示如何定义泛型类型的成员方法。和一般的类型的成员方法的定义的区别在于类型 Pair 之后必须要使用声明 Pair 类型时定义的类型参数（就是这里的 &lt;code&gt;[T1, T2]&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;另外 go 的泛型目前不支持给成员方法声明新的类型参数，比如这种成员方法的定义就不允许：&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+b&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Bad: 成员方法后面不能声明类型参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;pair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;]) &lt;span&gt;Something&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;]() {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了 &lt;code&gt;struct&lt;/code&gt; 之外，interface 的定义也支持类型参数（但是它的接口方法不支持类型参数），但是 &lt;code&gt;type alias&lt;/code&gt; 不支持类型参数&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Interface&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 自己定义的接口 User 可用作类型参数的约束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;InterfaceTwo&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt; &lt;span&gt;User&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;IntPair&lt;/span&gt; &lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Slice&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] []&lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Bad: 这个不允许
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Vector&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;] = []&lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类型约束除了内置的 &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;comparable&lt;/code&gt; 以及 &lt;code&gt;golang.org/x/exp/constraints&lt;/code&gt; 中定义的之外，也可以使用自己定义的任意接口用作约束，就像上例中的 &lt;code&gt;User&lt;/code&gt;。另外现在除了以前概念中的 interface 定义之外，还有一种纯粹只能用于类型参数约束的 interface。像这类使用了基础类型或者 &lt;code&gt;|&lt;/code&gt; 运算的接口。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 实数约束 Real 只能用于类型参数约束，而不能作为普通参数或变量类型。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Real&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Integer&lt;/span&gt; | &lt;span&gt;constraints&lt;/span&gt;.&lt;span&gt;Float&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Number 包含一个只能用于约束的接口，所以也只能用于类型参数的约束了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Number&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Real&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Cat&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Float&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;float32&lt;/span&gt; | &lt;span&gt;~&lt;/span&gt;&lt;span&gt;float64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;String&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;~&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;PureString&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Name 满足 String 约束，但是不满足 PureString
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Name&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;go 1.18 开始引入一个新的符号 &lt;code&gt;~&lt;/code&gt; 用于约束前缀，这表示该约束包含 underlying 为该类型的参数。比如上面的 &lt;code&gt;Name&lt;/code&gt; 类型的 underlying 是 string，所以 &lt;code&gt;Name&lt;/code&gt; 也满足 &lt;code&gt;String&lt;/code&gt; 约束，但是不满足 &lt;code&gt;PureString&lt;/code&gt; 约束。&lt;/p&gt;&lt;h3 id=&quot;42-实现一个通用的事件系统&quot;&gt;4.2. 实现一个通用的事件系统&lt;/h3&gt;&lt;p&gt;有了类型泛型可以实现一个比较实用的功能：事件派发系统。&lt;/p&gt;&lt;p&gt;首先我们需要定义一个事件接口：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Event 是一个事件接口，类型参数 T 表示事件类别的数据类型，比如可以使用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//reflect.Type
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 该接口定义 Type 方法获取事件类别
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后定一个事件处理接口 &lt;code&gt;Listener&lt;/code&gt;，同时为了使用方便实现一个内置的 listener&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Listener 接口用于处理被触发的事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;EventType&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Listen 创建一个 Listener 对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;Listen&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]](&lt;span&gt;eventType&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;handler&lt;/span&gt; &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;E&lt;/span&gt;)) &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;] {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]{&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;handler&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;eventType&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;handler&lt;/span&gt;   &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;E&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;h&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]) &lt;span&gt;EventType&lt;/span&gt;() &lt;span&gt;T&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;h&lt;/span&gt;.&lt;span&gt;eventType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;h&lt;/span&gt; &lt;span&gt;listenerFunc&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;E&lt;/span&gt;]) &lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;e&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;.(&lt;span&gt;E&lt;/span&gt;); &lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;h&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;} &lt;span&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;panic(&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Sprintf&lt;/span&gt;(&lt;span&gt;&quot;unexpected event %T for type %v&quot;&lt;/span&gt;, &lt;span&gt;event&lt;/span&gt;, &lt;span&gt;event&lt;/span&gt;.&lt;span&gt;Type&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这段代码需要特别说明一下 &lt;code&gt;Listen&lt;/code&gt; 函数，该函数有 2 个类型参数 &lt;code&gt;T&lt;/code&gt; 和 &lt;code&gt;E&lt;/code&gt;，前者是事件类别的类型参数，后者是事件类型参数，而 &lt;code&gt;E&lt;/code&gt; 的约束 &lt;code&gt;Event[T]&lt;/code&gt; 中依赖了前一个泛型参数，这样一来事件处理函数 &lt;code&gt;handler&lt;/code&gt; 的参数就不再是 &lt;code&gt;Event&lt;/code&gt; 接口而是一个泛型参数了，这避免了每次在回调函数中进行一次类型转换（因为已经统一在 listenerFunc.Handle 中转换了）。比如以前经常是这样写回调函数&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;onSomething&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;) &lt;span&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;somethingEvent&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;.(&lt;span&gt;*&lt;/span&gt;&lt;span&gt;SomethingEvent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;errors&lt;/span&gt;.&lt;span&gt;New&lt;/span&gt;(&lt;span&gt;&quot;unexpected event type&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// doSomething with somethingEvent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而现在回调函数就可以避免每次手动转换类型了&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;-&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;onSomething&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;SomethingEvent&lt;/span&gt;) &lt;span&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// doSomething with event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来实现事件派发管理器 &lt;code&gt;Dispatcher&lt;/code&gt;。&lt;code&gt;Dispatcher&lt;/code&gt; 需要实现事件注册(Add)，删除(Remove)，检查(Has)和派发(Dispatch) 方法。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// Dispatcher 管理事件注册与派发
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt; &lt;span&gt;comparable&lt;/span&gt;] &lt;span&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;nextid&lt;/span&gt;    &lt;span&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;][]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;mapping&lt;/span&gt;   &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// AddEventListener 注册事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;listener&lt;/span&gt; &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; = make(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;][]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;Listener&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt; = make(&lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]&lt;span&gt;Pair&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;nextid&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;nextid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;eventType&lt;/span&gt; = &lt;span&gt;listener&lt;/span&gt;.&lt;span&gt;EventType&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;index&lt;/span&gt; = len(&lt;span&gt;listeners&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;] = append(&lt;span&gt;listeners&lt;/span&gt;, &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt;, &lt;span&gt;listener&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;] = &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;index&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// HasEventListener 判定是否存在事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;HasEventListener&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;_&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;ok&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// RemoveEventListener 删除事件回调
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;RemoveEventListener&lt;/span&gt;(&lt;span&gt;id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;index&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;id&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;eventType&lt;/span&gt; = &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;First&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; = &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;last&lt;/span&gt; = len(&lt;span&gt;listeners&lt;/span&gt;) &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt; &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;last&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;] = &lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;last&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;newId&lt;/span&gt; = &lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;].&lt;span&gt;First&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;[&lt;span&gt;newId&lt;/span&gt;] = &lt;span&gt;MakePair&lt;/span&gt;(&lt;span&gt;eventType&lt;/span&gt;, &lt;span&gt;index&lt;/span&gt;.&lt;span&gt;Second&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;last&lt;/span&gt;].&lt;span&gt;Second&lt;/span&gt; = &lt;span&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;eventType&lt;/span&gt;] = &lt;span&gt;listeners&lt;/span&gt;[:&lt;span&gt;last&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;delete(&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;mapping&lt;/span&gt;, &lt;span&gt;id&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// DispatchEvent 派发事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;DispatchEvent&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt; &lt;span&gt;Event&lt;/span&gt;[&lt;span&gt;T&lt;/span&gt;]) &lt;span&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt; &lt;span&gt;==&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;, &lt;span&gt;ok&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;event&lt;/span&gt;.&lt;span&gt;Type&lt;/span&gt;()]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; len(&lt;span&gt;listeners&lt;/span&gt;) &lt;span&gt;==&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;for&lt;/span&gt; &lt;span&gt;i&lt;/span&gt; &lt;span&gt;:=&lt;/span&gt; &lt;span&gt;range&lt;/span&gt; &lt;span&gt;listeners&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;listeners&lt;/span&gt;[&lt;span&gt;i&lt;/span&gt;].&lt;span&gt;Second&lt;/span&gt;.&lt;span&gt;Handle&lt;/span&gt;(&lt;span&gt;event&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此，一个基本的事件系统就完成了，接下来看看如何使用。&lt;/p&gt;&lt;div class=&quot;highlight&quot; code=&quot;+x&quot;&gt;&lt;pre tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 这个例子中事件的 Type 使用 string 类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;testEventA&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;type&lt;/span&gt; &lt;span&gt;testEventB&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;testEventA&lt;/span&gt;) &lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;A&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; (&lt;span&gt;testEventB&lt;/span&gt;) &lt;span&gt;Type&lt;/span&gt;() &lt;span&gt;string&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;B&quot;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;dispatcher&lt;/span&gt; &lt;span&gt;Dispatcher&lt;/span&gt;[&lt;span&gt;string&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 注册事件，listener 通过 Listen 方法构建
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;Listen&lt;/span&gt;(&lt;span&gt;&quot;A&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt; &lt;span&gt;testEventA&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;test event &#x27;A&#x27; fired&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;AddEventListener&lt;/span&gt;(&lt;span&gt;Listen&lt;/span&gt;(&lt;span&gt;&quot;B&quot;&lt;/span&gt;, &lt;span&gt;func&lt;/span&gt;(&lt;span&gt;e&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;testEventB&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;fmt&lt;/span&gt;.&lt;span&gt;Println&lt;/span&gt;(&lt;span&gt;&quot;test event &#x27;B&#x27; fired&quot;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 派发事件，注意由于通过 Listen 注册的时候回调函数的参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 没有使用指针，所以这里派发事件时也不能用 testEvent 的指针。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;// 这两者的类型必须要一致
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;DispatchEvent&lt;/span&gt;(&lt;span&gt;testEventA&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;// 事件 B 的类型就需要指针了，因为注册时使用了指针。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;span&gt;dispatcher&lt;/span&gt;.&lt;span&gt;DispatchEvent&lt;/span&gt;(new(&lt;span&gt;testEventB&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了这个例子中的使用 string 作为事件类别的类型外，还可以使用整数，reflect.Type 或其他任意可比较的类型。&lt;/p&gt;&lt;p&gt;事件系统的完整代码可参见 &lt;a href=&quot;https://github.com/gopherd/doge/blob/main/event/event.go&quot; target=&quot;_blank&quot;&gt;github.com/gopherd/doge/blob/main/event/event.go&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&quot;5-结语&quot;&gt;5. 结语&lt;/h2&gt;&lt;p&gt;总体来说，go 的泛型功能还是较少的，使用限制较多。另外 go 1.18 版本的泛型存在一个严重的性能问题：范型参数存在不必要的内存逃逸，而且执行速度低下，在 go 1.19 的 Milestone 中已经有提交来修正这个问题了（&lt;a href=&quot;https://github.com/golang/go/issues/50182&quot; target=&quot;_blank&quot;&gt;#50182&lt;/a&gt;）。然而内存逃逸的问题修复了，性能却仍然比非范型的版本差。&lt;/p&gt;&lt;p&gt;目前建议只在满足以下条件之一的时候使用范型：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;普通基础类型用作类型参数约束&lt;/li&gt;&lt;li&gt;参数类型约束没有成员方被调用&lt;/li&gt;&lt;li&gt;对性能没有极致要求&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;
&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>7cd4579c344d6c87e15a04da92849029</guid>
<title>美团外卖广告平台化的探索与实践</title>
<link>https://toutiao.io/k/u45i061</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;578&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;48&quot; data-ratio=&quot;0.10078125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsUrXicw2VXTQTVVN5yxXWEacdY1ZdxTH195Pgibtib8EENJRMia3tzEnyVfgyfAgRibMssKqwlE186TLSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总第491&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2022年 第008篇&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;127&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;93&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;93&quot; data-ratio=&quot;0.9966329966329966&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVLR21NicmyQxcmiaqQ2KOJJj2JLwgJL4KSbo7CcuMF1hLf4xFjGQiaDRhSPyERxWGChWYP47Oc4sKGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot; data-width=&quot;100%&quot; opacity=&quot;&quot; title=&quot;undefined&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; data-style=&quot;text-align: left; font-size: 14px; color: inherit;&quot;&gt;&lt;p&gt;&lt;span&gt;随着美团外卖业务不断发展，外卖广告引擎团队在多个领域进行了工程上的探索和实践，目前已经取得了一些成果。我们计划通过连载的形式分享给大家，本文是《美团外卖广告工程实践》专题连载的第一篇。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本文针对业务提效的目标，介绍了美团外卖广告引擎在平台化过程中的一些思考和实践。我们围绕实际遇到的问题、思考过程以及具体的落地方案，从业务的标准化、技术框架、产研新流程的改造等三个方面进行展开，希望能为读者提供思路上的借鉴。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1 前言&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2 现状分析&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;3 目标&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4 整体设计&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.1 整体思想&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.2 业务标准化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.3 技术框架&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;4.4 产研新流程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5 效果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;6 总结与展望&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;7 作者简介&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;1 前言&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;美团外卖已经成为公司最为重要的业务之一，而商业变现又是整个外卖生态重要的组成部分。经过多年的发展，广告业务覆盖了Feed流形式的列表广告，针对KA以及大商家的展示广告，根据用户查询Query的搜索广告，以及一些创新场景的创新广告等多个产品线，并对应十几个细分的业务场景。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从技术层面而言，一次广告请求的过程，可以分为以下几个主要步骤：广告的触发、召回、精排、创意优选、机制策略等过程。如下图所示：即通过触发得到用户的意图，再通过召回得到广告候选集，通过预估对候选集的店铺打分、排序，再对于Top的店铺再进行创意的选择，最后经过一些机制策略得到广告结果。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.10581222056631892&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIcEQ5w7xC6xyEicRoEO0yIGd4YMr1mhibZ4dXlnB6OKuFQRGeEReKwibsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;671&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;2 现状分析&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;在业务迭代的过程中，随着新业务场景的不断接入，以及原有业务场景功能的不断迭代，系统变得越来越复杂，业务迭代的需求响应逐渐变慢。在业务发展前期，开展过单个模块的架构重构，如机制策略、召回服务，虽然对于效率提升有一定的改善，但是还会存在以下一些问题：&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务逻辑复用度低&lt;/strong&gt;：广告业务逻辑比较复杂，比如机制服务模块，它主要功能是为广告的控制中枢以及广告的出价和排序的机制提供决策，线上支持十几个业务场景，每种场景都存在很多差异，比如会涉及多种召回、计费模式、排序方案、出价机制、预算控制等等。此外，还有大量业务自定义的逻辑，由于相关逻辑是算法和业务迭代的重点，因此开发人员较多，并且分布在不同的工程和策略组内，导致业务逻辑抽象粒度标准不够统一，使得不同场景不同业务之间复用程度较低。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;学习成本高&lt;/strong&gt;：由于代码复杂，新同学熟悉代码成本较高，上手较难。此外，线上服务很早就进行了微服务改造，线上模块数量超过20个，由于历史原因，导致多个不同模块使用的框架差异较大，不同模块之间的开发有一定的学习成本。在跨模块的项目开发中，一位同学很难独立完成，这使得人员效率没有得到充分利用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;PM（产品经理）信息获取难&lt;/strong&gt;：由于目前业务场景较多、逻辑复杂，对于信息的获取，绝大多数同学很难了解业务的所有逻辑。PM在产品设计阶段需要确认相关逻辑时，只能让研发同学先查看代码，再进行逻辑的确认，信息获取较难。此外，由于PM对相关模块的设计逻辑不清楚，往往还需要通过找研发人员线下进行询问，影响双方的工作效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;QA（测试）评估难&lt;/strong&gt;：QA在功能范围评估时，完全依赖于研发同学的技术方案，且大多数也是通过沟通来确认功能改动涉及的范围和边界，在影响效率的同时，还很容易出现“漏测”的问题。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3 目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;针对以上的问题，我们从2020年初，启动美团外卖广告引擎平台化项目，旨在通过平台化的项目达成以下目标。&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;提升产研效率&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;高功能复用度，提升开发效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;降低研发人员（&lt;/span&gt;&lt;span&gt;RD&lt;/span&gt;&lt;span&gt;）、PM、QA之间的协作成本，提升产研协作的效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;提升交付质量&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;精确QA测试的范围，提升交付的质量。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对业务进行赋能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;PM可通过可视化的平台化页面，了解其他产品线的能力，互相赋能，助力产品迭代。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4 整体设计&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.1 整体思想&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;目前，业界已经有不少“平台化”方向的研究，比如阿里巴巴的TMF，定位于泛交易类系统的平台化领域范畴，主要建设思想是，流程编排与领域扩展分层，业务包与平台分离的插件化架构，管理域与运行域分离。而阿里巴巴的AIOS则定位于搜推平台化领域范畴，主要依赖于底层5大核心组件，以算子流程图定制的模式对组件快速组合与部署，从而实现了业务的快速交付。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;美团外卖在平台化项目启动时，从业务场景和业务痛点出发，确定了我们项目的核心目标：&lt;strong&gt;利用平台化设计理念构建相适应的技术能力，将现有外卖广告的业务系统和产研流程转变为平台化模式，快速支持外卖广告多业务进行交付&lt;/strong&gt;。我们借鉴了行业内平台化的成熟思想，确定了以业务能力标准化为基础、构建平台化框架技术能力为支撑、产研平台化模式升级为保障的平台化建设整体思想，整体思想可分为三部分：业务能力标准化、技术能力框架化、平台化产研新流程。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;业务能力标准化&lt;/strong&gt;：通过对现有逻辑的梳理，进行标准化的改造，为多业务场景、多模块代码复用提供基础保证。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;技术能力框架化&lt;/strong&gt;：提供组合编排能力将标准化的逻辑串联起来，通过引擎调度执行，同时完成了可视化能力的透出，帮助用户快速获取信息。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;平台化产研新流程&lt;/strong&gt;：为保证项目上线之后实现研发迭代的整体提效，我们对于研发流程的一些机制也进行了一些优化，主要涉及研发人员、PM、QA三方。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;即通过标准化提供复用的保证，通过框架承载平台化落地的能力，通过产研新流程的运行机制保证了整体提效的持续性。整个广告引擎服务涉及到的模块都遵循了平台化的思想，支撑上游各个产品场景，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.4174653887113951&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIWKGc7o9M7wZoPXOUwicmE0ahONS7sDervXORfs06gr40oNHkmmVHfFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;939&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2 业务标准化&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2.1 业务场景与流程分析&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;提效是平台化最重要的目标之一，而提效最重要的手段是让功能在系统中得到最大程度上的复用。我们首先针对外卖广告业务线场景和流量的现状做了统一的分析，得出以下两点结论：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;第一，各业务线大的流程基本类似，都包括预处理、召回、预估、机制策略、排序、创意、结果组装等几个大的步骤；同时，不同业务相同的步骤里会有很多相似的功能和业务线特有的功能。第二，这些功能理论上都是可以整体进行复用的，但现状是这些功能都集中在业务线内部，不同的业务线之间，不同的小组之间的复用状况也不尽相同。而造成这一问题的主要原因是：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不同业务处在不同的发展阶段，也有着不同的迭代节奏。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;组织结构天然存在“隔离”，如推荐和搜索业务分在两个不同的业务小组。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;因此，阻碍外卖广告进一步提升复用程度的主要原因，在于整体的标准化程度不足，各业务线间没有统一的标准，所以我们要先解决标准化建设的问题。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.2.2 标准化建设&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;标准化建设的广度和深度决定了系统复用能力的高低。因此，本次标准化的建设目标要覆盖到所有方面。我们对广告系统所有的服务，从业务开发的三个维度，包括实现的功能、功能使用的数据、功能组合的流程出发，来进行统一广告的标准化建设。从而使得：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;在个体开发层面&lt;/strong&gt;：开发同学不用关注如何流程调度，只需将重心放在新功能的实现上，开发效率变得更高。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;从系统整体角度&lt;/strong&gt;：各个服务对于通用的功能不用再重复开发，整体的复用程度更高，节省了大量的开发时间。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.2.2.1 功能的标准化&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;针对功能的标准化问题，我们首先依据功能是否跟业务逻辑相关，将其划分为两部分：业务逻辑相关和业务逻辑无关。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;① 与业务逻辑无关的功能通过双层抽象来统一共建&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;所有业务线统一共建的标准化形式是进行双层抽象。对于单个的、简单的功能点，抽象为工具层；对于可独立实现并部署的某一方面功能，比如创意能力，抽象为组件层。工具层和组件层统一以JAR包的形式对外提供服务，所有工程都通过引用统一的JAR包来使用相关的功能，避免重复的建设，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;290&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;176&quot; data-ratio=&quot;0.6068965517241379&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIvAItxKYzBSx1RbrANzSvtLcsMc8GSiaOuxRfY0uzWwWveb8U2E2ic3iaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 与业务逻辑有关的功能，在复用范围上进行分层复用&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务逻辑相关的功能是此次标准化建设的核心，目标是做到最大程度的业务复用。因此，我们将最小不可拆分的业务逻辑单元抽象为业务同学开发的基本单位，称为Action。同时根据Action不同的复用范围，将其划分为三层，分别是所有业务可以复用的基础Action，多业务线复用的模块Action，具体单一业务定制的业务Action，亦即扩展点。所有的Action都是从Base Action派生出来的，Base Action里定义了所有Action统一的基础能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不同的Action类型分别由不同类型的开发同学来开发。对于影响范围比较大的基础Action和模块Action，由工程经验丰富的同学来开发；对于仅影响单个业务的业务Action或扩展点，由工程能力相对薄弱的同学来进行开发。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同时我们把多个Action的组合，抽象为Stage，它是不同Action组合形成的业务模块，目的在于屏蔽细节，简化业务逻辑流程图的复杂度，并提供更粗粒度的复用能力。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5482406356413166&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIGLIGpmgFicmpsgNxnfSdo3pJxbvicf9LounxeLUCI5PibY33SaNibibpOMg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;881&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.2.2.2 数据的标准化&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据作为实现功能的基本元素，不同业务的数据来源大同小异。如果不对数据进行标准化设计，就无法实现功能标准化的落地，也无法实现数据层面的最大化复用。我们从数据来源和数据使用方式两方面来划分数据：对于业务能力的输入数据、中间数据，输出数据，通过标准化的数据上下文来实现；同时对于第三方外部数据及词表等内部数据，通过统一的容器存储和接口获取。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;① 使用上下文Context描述Action执行的环境依赖&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个Action执行都需要一定的环境依赖，这些依赖包括输入依赖、配置依赖、环境参数、对其他Action的执行状态的依赖等。我们将前三类依赖都抽象到业务执行上下文中，通过定义统一的格式和使用方式来约束Action的使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;考虑不同层级Action对于数据依赖使用范围由大到小，遵循相同的分层设计，我们设计了三层依次继承的Context容器，并将三类依赖的数据标准化存储到相应的Context中。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用标准化Context进行数据传递，优势在于Action可自定义获取输入数据，以及后续扩展的便利性；同时标准化的Context也存在一定的劣势，它无法从机制上完全限制Action的数据访问权限，随着后续迭代也可能导致Context日渐臃肿。综合考虑利弊后，现阶段我们仍然采用标准的Context的模式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5041459369817579&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIIFGxyoiaicgoGchyhjCpQqvjCQEUywKyevZ5Qm6FmTBKAPMT898mIzicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;603&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;② 第三方外部数据的统一处理&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于第三方的外部数据的使用，需要成熟的工程经验提前评估调用量、负载、性能、批量或拆包等因素，所以针对所有第三方外部数据，我们统一封装为基础Action，再由业务根据情况定制化使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;③ 词表数据的全生命周期管理&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;词表根据业务规则或策略生成，需要加载到内存中使用的KV类数据，标准化之前的词表数据在生成、拉取、加载、内存优化、回滚、降级等能力上有不同程度的缺失。因此，我们设计了一套基于消息通知的词表管理框架，实现了词表的版本管理、定制加载、定时清理、流程监控的全生命周期覆盖，并定义了业务标准化的接入方式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.2.2.3 调用流程的标准化&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最后，将功能和数据进行组合的是业务的调用流程，统一的流程设计模式是业务功能复用和提效的核心手段。流程设计统一的最佳方式就是标准化业务流程。其中对于第三方接口的调用方式，让框架研发的同学用集中封装的方式进行统一。对于接口的调用时机，则基于性能优先并兼顾负载，且在没有重复调用出现的原则下，进行标准化。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在具体实践中，我们首先梳理业务逻辑所使用到的标准化功能，然后分析这些功能之间的依赖关系，最后以性能优先并兼顾负载、无重复调用等原则，完成整个业务逻辑流程的标准设计。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6661951909476662&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIT86Z7Q5fM86fMs9OWDzktNPnApa941hWY0pTiayosodm3BiabVSKU8CQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;从横向维度看，通过比较不同业务逻辑流程的相似性，我们也提炼了一定的实践经验，以中控模块为例：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于用户维度的第三方数据，统一在初始化后进行封装调用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于商家维度的第三方数据，有批量接口使用的数据，在召回后统一封装调用；无批量接口使用的数据，在精排截断后统一封装调用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3 技术框架&lt;/span&gt;&lt;/h3&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.1 整体框架介绍&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;平台主要有两个部分组成，一部分是平台前台部分，另一部分是平台开发框架包。其中前台部分是一个给研发人员、PM以及QA三种角色使用的Web前台，主要功能是跟集成了平台开发框架包的引擎服务进行可视化的交互，我们也给这个平台起了个名字，叫Camp平台，这是大本营的意思，寓意助力业务方攀登业务高峰。平台开发框架包被引擎后台服务所集成，提供引擎调度隔离、能力沉淀、信息上报等功能，同时还能确保各个模块保持同样标准的框架和业务能力风格。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;各个在线服务都需要引入平台开发框架包，服务性能与平台通用性之间如何平衡也是我们需要着重考虑的地方。这是因为，引入平台框架会对原有的代码细节进行增强性扩展；在C端大流量场景下，平台框架做得越通用，底层功能做得越丰富，与单纯的“裸写”代码相比，会带来一些性能上的折损。因此，在性能开销与平台抽象能力上，需要尽量做到一个折中。我们结合自身业务的特性，给出的安全阈值是TP999损失在5ms以内，将各个业务通用的能力下沉至框架，提供给上层的在线服务。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综上，整个系统架构设计如下：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;① Camp平台提供管理控制和展示的功能，该平台由以下几个子模块包组成：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务可视化包，提供各个后台系统上的能力的静态信息，包括名称、功能描述、配置信息等，这些信息在需求评估阶段、业务开发阶段都会被用到。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;全图化编排和下发包，业务开发同学通过对已有的能力进行可视化的拖拽，通过全图化服务自动生成并行化最优的执行流程，再根据具体业务场景进行调整，最终生成一个有向无环图，图的节点代表业务能力，边表示业务能力之间的依赖关系。该图会动态下发到对应的后台服务去供执行框架解析执行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;统计监控包，提供业务能力、词典等运行期间的统计和异常信息，用于查看各个业务能力的性能情况以及异常情况，达到对各个业务能力运行状态可感知的目的。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;② 平台开发框架包被广告引擎的多个服务引入，执行编排好的业务流程并对外提供服务，平台框架开发包由以下几个子模块包组成：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;核心包，提供两个功能，第一个是调度功能，执行平台下发的流程编排文件，按照定义的DAG执行顺序和执行条件去依次或并行执行各个业务能力，并提供必要的隔离和可靠的性能保证，同时监控运行以及异常情况进行上报。第二个是业务采集和上报功能，扫描和采集系统内的业务能力，并上报至平台Web服务，供业务编排以及业务能力可视化透出使用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;能力包，业务能力的集合，这里的业务能力在前面章节“4.2.2.1 功能的标准化”中已给出定义，即“将最小不可拆分的业务逻辑单元，抽象为业务同学开发的基本单位，称为Action，也叫能力”。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;组件包，即业务组件的集合，这里的业务组件在章节“4.2.2.1 功能的标准化”中也给出定义，即“对于可独立实现并部署的某一方面功能，比如创意能力，抽象为组件”。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;工具包，提供业务能力需要的基础功能，例如引擎常用的词典工具、实验工具以及动态降级等工具。这里的工具在章节“4.2.2.1功能的标准化”中同样给出了定义，即单个的、简单的非业务功能模块抽象为工具。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.7897435897435897&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKILomPib9wZ5iaSvGXlbmxwrUHdUJrEhyoQXprcZLcG7jQBKHBypQYJeyg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;585&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;一个典型的开发流程如上图所示 ，开发人员开发完业务能力后（1），业务能力的静态信息会被采集到Camp平台（2），同时，经过全图化依赖推导得到最优DAG图（3），业务同学再根据实际业务情况对DAG图进行调整，引擎在线服务运行期间会得到最新的DAG流程并对外提供最新的业务流程服务（4，5），同时会把业务运行的动态信息上报至Camp平台（6）。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在下面的章节中，我们将对几个比较关键的技术点进行详细描述，其中就包括了可视化相关的组件自动上报和DAG执行相关的全图化编排、执行调度等，最后，本文还会介绍一下跟广告业务强相关的、词典在平台化中统一封装的工作。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.2 业务采集&amp;amp;上报&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;为了方便管理和查询已有业务能力，平台开发框架包会在编译时扫描@LppAbility注解和@LppExtension注解来上报元数据到Camp平台。业务同学可以在Camp平台中对已有组件进行查询和可视化的拖拽。&lt;/span&gt;&lt;/section&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;//原子能力（Action）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@LppAbility&lt;/span&gt;(name = &lt;span&gt;&quot;POI、Plan、Unit数据聚合平铺能力&quot;&lt;/span&gt;, desc = &lt;span&gt;&quot;做预算过滤之前，需要把对象打平&quot;&lt;/span&gt;,&lt;br/&gt;        param = &lt;span&gt;&quot;AdFlatAction.Param&quot;&lt;/span&gt;, response = &lt;span&gt;&quot;List&amp;lt;KvPoiInfoWrapper&amp;gt;&quot;&lt;/span&gt;, prd = &lt;span&gt;&quot;无产品需求&quot;&lt;/span&gt;, func = &lt;span&gt;&quot;POI、Plan、Unit数据聚合平铺能力&quot;&lt;/span&gt;, cost = &lt;span&gt;1&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;AdFlatAction&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AbstractNotForceExecuteBaseAction&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;//扩展点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@LppExtension&lt;/span&gt;(name = &lt;span&gt;&quot;数据聚合平铺扩展点&quot;&lt;/span&gt;,&lt;br/&gt;        func = &lt;span&gt;&quot;POI、Plan、Unit数据聚合平铺&quot;&lt;/span&gt;, diff = &lt;span&gt;&quot;默认的扩展点，各业务线直接无差异&quot;&lt;/span&gt;, prd = &lt;span&gt;&quot;无&quot;&lt;/span&gt;, cost = &lt;span&gt;3&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;FlatAction&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;AdFlatAction&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span&gt;@Override&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;protected&lt;/span&gt; Object &lt;span&gt;process&lt;/span&gt;&lt;span&gt;(AdFlatAction.Param param)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;//do something&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Object();&lt;br/&gt;    }&lt;br/&gt;}&lt;/span&gt;&lt;/section&gt;&lt;/pre&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.36483253588516745&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIgq7P2FHtfjQTibkKKNsoKicyibib6kXUnTQJajtVxZWicGTNAEibBMMT9GVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;836&quot;/&gt;&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.3 全图化编排&lt;/span&gt;&lt;br/&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;在广告投放引擎服务中，每个业务的DAG图，动辄便会有几十甚至上百的Action，通过传统的人工编排或业务驱动编排，很难做到Action编排的最优并行化。因此，平台化框架包采用数据驱动的思想，通过Action之间的数据依赖关系，由程序自动推导出并行化最优的DAG图，即全图化编排，此后再由业务人员根据业务场景和流量场景进行定制化调整，动态下发到服务节点，交由调度引擎执行，这样通过自动推导+场景调优的方式便达到了场景下的最优并行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;① 全图化自动编排的基本原理&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;我们定义某个Action x的入参集合为该Action x执行时使用的字段，表示如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1794871794871795&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIp17SwHyqPkRjTIRLqjYlrInf3w77rq2C8FO7neyc9cLfN26iavY5VUQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;468&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;定义某个Action y的出参集合为该Action执行后产出的字段，表示如下：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1517509727626459&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKI88nL2ygU7ib5IoLibG33yZbQkpbA70xYiaFFvsHhUibKRxib1OicNCCATjCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;514&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当存在任意以下两种情况之一时，我们会认为Action x依赖于Action y。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;input_x ∩ output_y ≠ ∅，即Action x的某个/某些入参是由Action y产出。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;output_x ∩ output_y ≠ ∅，即Action x与Action y操作相同字段。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 全图化自动编排总设计&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;全图化自动编排总体分为两个模块：解析模块、依赖分析模块。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;561&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;198&quot; data-ratio=&quot;0.35236004390779363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIS6csuibEibSFIstAF6wwtLbk7aLqZtMictJ0zZFriaVzQD3icmEJ7GVxu4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;911&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;解析模块&lt;/strong&gt;：通过对字节码分析，解析出每个Action的input、output集合。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;字节码分析使用了开源工具ASM，通过模拟Java运行时栈，维护Java运行时局部变量表，解析出每个Action执行依赖的字段和产出的字段。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;依赖分析模块&lt;/strong&gt;：采用三色标记的逆向解析法，分析出Action之间的依赖关系，并对生成的图进行剪枝操作。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;依赖剪枝：生成图会有重复依赖的情况，为了减少图复杂度，在不改变图语义的前提下，对图进行了依赖剪枝。例如：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5723684210526315&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIKb9LXK2QbRkbl8fYQfgKC0YtSVfvQJwUNIDrGGFUQpZ32WuP3jI0sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;456&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;③ 全图化自动编排收益效果&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;自动纠正人工错误编排，并最大化编排并行度。某实际业务场景中，全图化前后的DAG对比，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.47734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIeicCRDFvibYbP3HL1iaY5gCrxm4SickUzkiab7ECaw9cYx0I85fN9S4UcAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;标记蓝色的两个Action，会同时操作同一个Map，如果并发执行会有线程安全风险。由于方法调用栈过深，业务开发同学很难关注到该问题，导致错误的并行化编排。经过全图化分析后，编排为串行执行。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;标记绿色、红色、黄色的三组Action，每组内的两个Action并没有数据依赖关系，业务开发同学串行化编排。经过全图化分析后，编排为并行。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.4 调度引擎&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;调度引擎的核心功能是对上述下发后的DAG进行调度。因此引擎需要具备以下两个功能：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;构图&lt;/strong&gt;：根据Action的编排配置生成具体的DAG模板图。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;调度&lt;/strong&gt;：流量请求时，按照正确的依赖关系执行Action。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;整个调度引擎的工作原理如下图：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.40816326530612246&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIppoVcbEXpnPd5xEx61picaOv9vdbhB1fibAF0d3t9l16dzsc34hAnskQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;931&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;出于对性能的考虑，调度引擎摒弃了流量请求实时构图的方法，而是采用“静态构图+动态调度”的方式。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;静态构图&lt;/strong&gt;：在服务启动时，调度引擎根据下发的DAG编排配置，初始化为Graph模板并加载至内存。服务启动后，多个DAG的模板会持久化到内存中。当Web平台进行图的动态下发后，引擎会对最新的图进行构图并完全热替换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;动态调度&lt;/strong&gt;：当流量请求时，业务方指定对应的DAG，连同上下文信息统一交至调度引擎；引擎按照Graph模板执行，完成图及节点的调度，并记录下整个调度的过程。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;由于广告投放引擎服务于C端用户，对服务的性能、可用性、扩展性要求很高。调度引擎的设计难点也落在了这三个方面，接下来我们将进行简要的阐述。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.3.4.1 高性能实践&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;流程引擎服务于C端服务，与传统的硬编码调度相比，引擎的调度性能要至少能持平或在一个可接受的性能损失阈值内。下面，我们将从调度器设计、调度线程调优这两个有代表性的方面介绍下我们的性能实践。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;① 调度器设计&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;含义&lt;/strong&gt;：如何让节点一个一个的执行；一个节点执行完成，如何让其他节点感知并开始执行。如下图中，A节点在执行完成后，如何通知B，C节点并执行。常见的思路是，节点的分层调度，它的含义及特点如下：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;依赖分层算法（&lt;span&gt;如广度优先遍历&lt;/span&gt;）提前计算好每一层需要执行的节点；节点一批一批的调度，无需任何通知和驱动机制。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在同批次多节点时，由于各节点执行时间不同，容易出现长板效应。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在多串行节点的图调度时，有较好的性能优势。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;另一种常见的思路是，基于流水线思想的队列通知驱动模式：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;某节点执行完成后，立即发送信号给消息队列；消费侧在收到信号后，执行后续节点。如上图DAG中，B执行完成后，D/E收到通知开始执行，不需要关心C的状态。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于不关心兄弟节点的执行状态，不会出现分层调度的长板效应。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在多并行节点的图调度时，有非常好的并行性能；但在多串行节点的图中，由于额外存在线程切换和队列通知开销，性能会稍差。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.6044226044226044&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIjXD7DoMibXNAKfkaXnNYNEZCS1ViaYwdDForPkdCJbj06TEXealFwA4w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1221&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;如上图所示，调度引擎目前支持这两种调度模型。针对多串行节点的图推荐使用分层调度器，针对多并行节点的图推荐使用队列流水线调度器。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;分层调度器&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;依赖于上面提到的分层算法，节点分批执行，串行节点单线程执行，并行节点池化执行。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;队列流水线调度器&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;无论是外层的图任务（&lt;/span&gt;&lt;span&gt;GraphTask&lt;/span&gt;&lt;span&gt;）还是内部节点任务（&lt;/span&gt;&lt;span&gt;NodeTask&lt;/span&gt;&lt;span&gt;）均采用池化的方式执行。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;节点调度机制&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调度机制：消费侧收到消息到节点被执行，这中间的过程。如下DAG中，节点在接收到消息后需依次完成：检验DAG执行状态、校验父节点状态、检验节点执行条件、修改执行状态、节点执行这几个过程，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.18199608610567514&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIVrKMOeuJzbzdbFBhCpCZH7iaDGoBVtGuBmAOtesg8s163bjsMWuqlFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1022&quot;/&gt;&lt;/p&gt;&lt;/ul&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;这几个步骤的执行，通常存在两种方式：一种是集中式调度，由统一的方法进行处理；另一种是分散式调度，由每个后续节点独自来完成。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们采用的为集中式调度：某节点执行完成后，发送消息到队列；消费侧存在任务分发器统一负责消费，再进行任务分发。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;这样做的出发点是：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如上图中，ABC三个节点同时完成，到D节点真正执行前仍有一系列操作，这个过程中如果不加锁控制，D节点会出现执行三次的情况；因此，需要加锁来保证线程安全。而集中式任务分发器，采用无锁化队列设计，在保证线程安全的同时尽量规避加锁带来的性能开销。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;再如一父多子的情况，一些公共的操作（&lt;/span&gt;&lt;span&gt;校验图/父节点状态、异常检测等&lt;/span&gt;&lt;span&gt;），各子节点都会执行一次，会带来不必要的系统开销。而集中式任务分发器，对公共操作统一进行处理，再对子节点任务进行分发。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分散式调度中，节点的职责范围过广，既需要执行业务核心代码，还需要额外处理消息的消费，职责非单一，可维护性较差。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;因此，在项目实际开发中，考虑到实现的难度、可维护性、以及综合考量性能等因素，最终采用集中式调度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 调度线程调优&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度引擎在DAG执行上，提供了两种API给调用方，分别为：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;异步调用&lt;/strong&gt;：GraphTask由线程池来执行，并将最外层GraphTask的Future返回给业务方，业务方可以精准的控制DAG的最大执行时间。目前，外卖广告中存在同一个请求中处理不同广告业务的场景，业务方可以根据异步接口自由组合子图的调度。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;同步调用&lt;/strong&gt;：与异步调用最大的不同是，同步调用会在图执行完成/图执行超时后，才会返回给调用方。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;而底层调度器，目前提供上述讲到两种调度器。具体如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.3588676103247294&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIpfM3e7YuKDru7u1ibIvTeqHhUbic9gZMPqkcr5CCyHB4MGxVB9QNv2Dw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1201&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;由此看出，调度引擎在内部任务执行上，多次用到了线程池。在CPU密集型的服务上，请求量过大或节点过多的话，大量线程切换势必会影响到服务的整体性能。针对队列通知调度器，我们做了一些调度优化，尽量将性能拉回到没有接入调度引擎之前。&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;调度线程模型调优&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;针对同步调用的情况，由于主线程不会直接返回，而是在等待DAG图执行完成。调度引擎利用这一特点，让主线程来执行最外层的GraphTask，在处理每个请求时，会减少一次线程的切换。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;串行节点执行优化&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如上面DAG图中，存在一些串行节点（&lt;/span&gt;&lt;span&gt;如单向A→B→C→D&lt;/span&gt;&lt;span&gt;），在执行这4个串行节点时，调度引擎则不会进行线程的切换，而是由一个线程依次完成任务执行。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在执行串行节点时，调度引擎同样不再进行队列通知，而是采用串行调度的方式执行，最大化减少系统开销。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.3.4.2 高可用实践&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;在高可用上，我们从隔离和监控上简要介绍下我们的实践，它的核心原理如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5543893129770993&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIEChGPLiawibvPFAZO39ibEEDbPnrOFIibw9EdXVXR7yYjek7p2geb1J5Mw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1048&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;① 业务隔离&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;广告场景中，同一服务中经常会存在多条子业务线，每条业务线的逻辑对应一张DAG。对于同一服务内各个业务线的隔离，我们采用的是“&lt;strong&gt;单实例-多租户&lt;/strong&gt;”的方案。这是因为：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;流程引擎活跃在同一个进程内，单实例方案管理起来要更容易。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;流程引擎内部实现过程中，针对图的粒度上做了一些多租户隔离工作，所以在对外提供上更倾向于单实例方案。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;除DAG调度和Node调度为静态代码外，图的存储、DAG的选取与执行、Node节点的选取与执行、各DAG的节点通知队列都采用多租户隔离的思想。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 调度任务隔离&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;调度任务主要分为：DAG任务（&lt;/span&gt;&lt;span&gt;GraphTask&lt;/span&gt;&lt;span&gt;）、节点任务（&lt;/span&gt;&lt;span&gt;NodeTask&lt;/span&gt;&lt;span&gt;）两类。其中一个GraphTask对应多个NodeTask，并且其执行状态依赖所有的NodeTask。调度引擎在执行时，采用二级线程池隔离的方式将GraphTask和NodeTask的执行进行隔离。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这样隔离的出发点是：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个线程池职责单一，执行任务更加单一，相应的过程监控与动态调整也更加方便。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如果共用一个线程池，如果出现瞬时QPS猛增，会导致线程池全被GraphTask占据，无法提交NodeTask最终导致调度引擎死锁。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;因此，无论是线程精细化管理还是隔离性上，两级线程池调度的方式都要优于一级线程池调度。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;③ 过程监控&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对DAG调度的监控，我们将其分成三类。分别为异常、超时、统计，具体如下：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;异常&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：图/节点执行异常，支持配置重试、自定义异常处理。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;超时&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：图/节点执行超时，支持降级。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;统计&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：图/节点执行次数&amp;amp;耗时，提供优化数据报表。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.3.4.3 高可用实践&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;广告业务逻辑复杂，在投放链路上存在大量的实验、分支判断、条件执行等。并且广告投放服务的迭代频率和发版频率也非常高。因此，调度引擎在可扩展上首先要考虑的是如何调度条件节点，以及编排配置如何在无发布下快速生效这两个问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;① 节点条件执行&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对于节点的条件执行，我们在配置DAG时，需要显示的增加Condition表达式。调度引擎在执行节点前，会动态计算表达式的值，只有满足执行条件，才会执行该节点。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 配置动态下发&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;如前图所示，我们将构图与调度通过中间态Graph模板进行解耦，编排配置可以通过Web平台编辑后，动态下发到服务上。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于调度引擎在调度过程中，多次用到了线程池，对于线程池的动态更新，我们借助了公司的通用组件对线程池进行动态化配置和监控。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.3.4.4 调度引擎总结&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;① 功能方面&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;DAG核心调度&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调度引擎提供两种常见调度器的实现，针对不同的业务场景，能较好的提供支持。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;调度引擎采用经典的两级调度模型，DAG图/节点任务调度更具有隔离性和可控性。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;节点条件执行&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对于节点的调度前置增加条件校验功能，不满足条件的节点不会执行，调度引擎会根据上下文以及流量情况动态判断节点的执行条件。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;超时处理&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;对DAG、Stage、Node节点均支持超时处理，简化内部各个业务逻辑的超时控制，将主动权交给框架统一进行处理。在保证性能的前提之下，提高内部逻辑的处理效率。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;节点可配置化&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同一个Node节点，会被对个业务场景使用，但各业务场景的其处理逻辑且不近相同。针对这种情况，增加节点的配置化功能，框架将节点的配置传入逻辑内部，实现可配置。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;② 性能方面&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在多串行节点的DAG场景下，性能基本可以持平原有的裸写方式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;在多并行节点的DAG场景下，由于池化的影响，在多线程池抢占和切换上，存在一些性能折损；再进行多次调优和CPU热点治理上，TP999折损值可以控制到5ms以内。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.5 业务组件层沉淀&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;如“4.2.2.1 功能的标准化”中给出的定义，可独立实现并部署的业务功能模块抽象为业务组件。从业务逻辑中提取高内聚、低耦合的业务组件，是提升代码复用能力的重要手段。在实践中，我们发现不同业务组件包含的逻辑千差万别，具体实现方式和设计与代码风格也参差不齐。因此，为了统一业务组件的设计思路和实现方式，我们实现了一套标准化的组件框架，以减少新组件开发的重复性工作，并降低使用方的学习和接入成本。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.2609375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIticuibXMJfW5tlsTcjCS1sSWzzbf6A299m0icRfbTBQlicGyfciarQ4GicIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上图左边展示了业务组件的整体框架，底层为统一的公共域和公共依赖，上层为业务组件标准的实现流程，切面能力则实现对业务逻辑的支持。&lt;/span&gt;&lt;span&gt;右&lt;/span&gt;&lt;span&gt;边为基于框架开发的智能出价组件示例。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;框架的作用是：&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;① 统一的公共域和依赖管理&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;公共域是指在不同的业务组件中都会使用到的业务实体。我们将业务上的公用域对象提取出来，作为基础组件提供给其他业务组件使用，以减少域对象在不同组件重复定义。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务组件都有很多内部和外部的依赖。我们对公共依赖进行了统一的梳理和筛选，同时权衡各方面因素，确定了合理的使用方式。最终形成一套完整成熟的依赖框架。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;② 统一的接口和流程&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;我们将业务组件抽象为三个阶段：数据和环境准备阶段Prepare、实际计算阶段Process和后置处理阶段Post。每个阶段都设计了抽象的泛型模板接口，最后通过不同的接口组合完成组件中的不同业务流程。所有类在接口设计上都提供了同步和异步两种调用方式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;③ 统一的切面能力&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;目前所有的服务模块均采用Spring作为开发框架，我们利用其AOP功能开发了一系列的切面扩展能力，包括日志采集、耗时监控、降级限流、数据缓存等功能。这些功能均采用无侵入式代码设计，减少切面能力与业务逻辑的耦合。新的业务组件通过配置的方式即可完全复用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;智能出价组件即为基于以上框架开发的业务组件。智能出价组件是对广告出价策略的抽象聚合，包括PID、CEM等多个算法。出价策略依赖的用户特征获取、实验信息解析等数据统一采用Prepare模板实现；具体PID、CEM算法的实施统一采用Process模板实现；对出价结果的校验、参数监控等后置操作则统一采用Post模板实现。整个组件所使用的公用域对象和第三方依赖也统一托管于框架进行管理。&lt;/span&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.3.6 工具包-词典管理&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;在“4.2.2.1 功能的标准化”中也定义了工具包的含义，即单个的、简单的非业务功能模块抽象为工具。工具包的建设是广告平台化工作提效的重要基础，其主要的作用是处理业务逻辑无关的辅助类通用流程或功能。例如：广告系统中存在大量的KV类数据需要加载到内存中使用，我们称之为词表文件。为了实现词表文件的全生命周期管理，广告平台化进行了词表管理工具的设计与开发，并在业务使用过程中积累了很好的实践效果。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;① 词表管理的设计&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5880149812734082&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIu55W4gZST3iaviaDAYT7KAwCkZKelNp2SaWOPhfrGYAUQpgexmibajkQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;801&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上图是词表管理平台的整体架构，词表管理平台整体采用分层设计，自上而下分别五层：&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;存储层&lt;/strong&gt;：主要用于数据的存储和流转。其中美团内部的S3完成在云端的词表文件存储，Zookeeper主要用于存储词表的版本信息，在线服务通过监听的方式获取最新的版本更新事件。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;组件层&lt;/strong&gt;：每个组件可以视为独立的功能单元，为上层提供通用的接口。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;插件层&lt;/strong&gt;：业务插件的作用主要是提供统一的插件定义和灵活的自定义实现。例如：加载器主要用途为提供统一格式的词表加载和存储功能，每个词表可以动态配置其加载器类型。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;模块层&lt;/strong&gt;：模块层主要是从业务角度看整体词表文件不同流程的某一环节，模块之间通过事件通知机制完成交互。例如：词表管理类模块包含词表版本管理、事件监听、词表注册、词表加/卸载、词表访问等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;流程层&lt;/strong&gt;：我们将一个完整词表业务行为过程定义为流程。词表的整个生命周期可以分为新增词表流程、更新词表流程、注销词表流程、回滚词表流程等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;② 词表管理的业务收益&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;平台化词典管理工具在业务实践中具有的主要优势为：&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;更灵活的服务架构&lt;/strong&gt;：词表流程的透明化。使用方无需关注词表流转过程，采用统一API访问。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;统一的业务能力&lt;/strong&gt;：统一的版本管理机制，统一的存储框架，统一的词表格式和加载器。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;系统高可用&lt;/strong&gt;：快速恢复和降级能力，资源和任务隔离、多优先级处理能力等多重系统保障功能。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.4 产研新流程&lt;/span&gt;&lt;/h3&gt;&lt;section&gt;&lt;span&gt;上文中提到，由于广告业务线较多，且涉及诸多上下游，工程与策略经过几年快速迭代之后，现有业务逻辑已极为复杂，导致在日常迭代中，一些流程性问题也逐步凸显。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;① PM信息获取困难&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;PM在进行产品调研与设计时，对涉及的相关模块当前逻辑不是很清楚，往往通过线下咨询研发人员的方式来解决，影响双方的效率，同时产品设计文档中纯以业务视角和流程来阐述，导致每次评审时，QA和研发人员很难直观获取到改动点和改动范围，中间又会花费大量时间来相互沟通，从而确认边界与现有逻辑的兼容性等问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;② 研发人员的功能评估完全依赖经验&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;研发人员在方案设计时，很难直接获取到横向相关模块是否有类似功能点（&lt;/span&gt;&lt;span&gt;可复用或可扩展&lt;/span&gt;&lt;span&gt;），导致复用率低，同时在项目排期时完全依赖个人经验，且没有统一的参考标准，经常出现因工作量评估不准而导致项目延期的情况。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;③ QA测试及评估效率低&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;QA在功能范围评估时，完全依赖研发同学（&lt;/span&gt;&lt;span&gt;RD&lt;/span&gt;&lt;span&gt;）的技术方案，且大多数也是通过口头交流的方式来确认功能改动涉及的范围和边界，在影响效率的同时，还会导致一些测试问题在整个项目周期中被后置，影响项目的进度。同时，平台化后基础JAR包的管理完全依靠人工，对一些Action，尤其是基础Action也没有统一的测试标准。以上问题可以概括如下：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.42168674698795183&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIVjHLesoHYzoVb1Zr0secx9k6VCbiaPz6LKWibe1GtEV0p0Fib0ialOARZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.4.1 目标&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;借助平台化，对项目交付的整个过程（&lt;/span&gt;&lt;span&gt;如下图所示&lt;/span&gt;&lt;span&gt;），实施产研新流程，以解决产品、研发与测试人员在迭代中遇到的问题，赋能业务，从而提升整体项目的交付效率与交付质量。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.22503328894806923&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKICGmDtDM84sW4fjbZawqiacvgKliaHRoOHicGgHDuQ8mJMkF0ia3sNMc8AQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;751&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;4.4.2 思考与落地&lt;/span&gt;&lt;/h4&gt;&lt;section&gt;&lt;span&gt;基于平台化实施产研新流程，即利用Stage/Action的方式来驱动整个项目的交付，如下图所示：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.29245283018867924&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIzxmoicrhfAhDdTWoePxtz0Z3SBSzvluAblR6rg55j0ZJ1uqWL1LajPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1166&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;对于PM（产品）&lt;/strong&gt;：建设Stage/Action可视化能力，并在项目设计中应用。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;对于RD（研发）&lt;/strong&gt;：统一采用新的基于Stage/Action的方案，设计及开发排期模式。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;对于QA（测试）&lt;/strong&gt;：统一沟通协作语言-Stage/Action，并推动改进相关测试方法和测试工具&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.4.2.1 产品侧&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;下图所示的是产研功能建设后的应用与实践效果。前两张为建设的业务能力可视化，为PM提供一个了解各业务最新流程及详细Action能力的可视化功能，第三张图为产品设计中相关业务的调研与功能描述（&lt;/span&gt;&lt;span&gt;出于数据安全原因，以下截图采用非真实项目举例说明&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKIZub2xyyff6CIwoIRe5HBHib6YRd1IESe7Phibics72c9iavGibzrsJKCYaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;figcaption&gt;&lt;span&gt;业务流程&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.79375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKI8ffVrmVwVrb9EgUP7GwOj5cKo7aFlOPDBFwyxjLeaMHOgAFNoWubzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;span&gt;业务功能详情&lt;/span&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.48984375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsU04TEUk7pbq2bzzdBib5GKI37zZcTXxUmY38ckfQS74N5AD1UyrsVqde5AKOG5dMWg3licF1Z5m1Bw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;figcaption&gt;&lt;span&gt;产品设计中部分调研信息与功能描述&lt;/span&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.4.2.2 研发侧&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;根据项目开发周期中研发工作的不同阶段，我们制定了基于代码开发前后的流程规范，以保证整个开发周期中研发同学能充分利用平台的能力进行设计与开发提效。&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;开发前&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;技术设计：基于各业务涉及的现有Action功能与Action DAG的可视化能力，进行横向业务的调研参考与复用评估，以及新增或变更Action功能的技术设计。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;项目排期：基于技术设计中Action能力的新增、变更、复用情况以及Action层级等，对开发工作量进行较为标准化的评估。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;开发后&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Action沉淀：系统统一上报并定期评估平台Action能力的复用度和扩展情况。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;流程反馈：追踪基于平台化的每个项目，并对交付流程中的相关指标做量化上报，同时收集项目人员反馈。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;4.4.2.3 测试侧&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;采用Stage/Action统一沟通协作语言&lt;/strong&gt;：在需求设计与评审、方案设计与评审、测试用例编写与评审等多方参与的项目环节，统一采用Stage/Action为功能描述与设计的沟通语言，以便将后续流程中问题的发现尽可能前置，同时各参与方更加明确变更及测试内容，为QA更好的评估测试范围提供支撑，进而更好的保证项目测试质量。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;推动基础Aaction UT全覆盖&lt;/strong&gt;：针对基础Action，构建单元测试，在Merge代码时自动触发单元测试流水线，输出执行单测的成功率和覆盖率，并评定指标基线，保证可持续测试的效率与质量。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;改进JAR管理工具化与自动化分析及测试：一级Action都集中写在平台JAR包中，对类似这种公共JAR包的管理，开发专属的管理与维护工具，解决升级公共JAR自动化单测覆盖问题以及每次升级JAR版本需要人工分析人工维护的测试效率问题，打通集成测试自动化的全流程。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;5 效果&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;① 产研效率的提升&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;系统能力沉淀&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;外卖广告所有业务线已经完成平台化架构升级，并在此架构上持续的运行和迭代。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;业务基础能力沉淀50+个，模块共用能力沉淀140+个，产品线共用能力沉淀500+个。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;人效的提升&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;② 提升交付质量及赋能产品&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;基于Action的变更以及清晰的可视化业务链路，能够帮助QA更准确的评估影响范围，其中过程问题数量及线上问题数量均呈下降趋势，下降比例约为10%。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过系统能力的可视化透出页面，增加系统的透明度，在产品调研阶段有效帮助产品了解系统已有的能力，减少了业务咨询、跨产品线知识壁垒等问题（&lt;/span&gt;&lt;span&gt;详情可参见4.4.2.1&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;6 总结与展望&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;本文分别从标准化、框架、产研新流程3个方面介绍了外卖广告平台化在建设与实践中的思考与落地方案。经过两年的摸索建设和实践，美团外卖广告平台化已经初具规模、有力地支撑了多条业务线的快速迭代。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;未来，平台化会细化标准化的力度，降低业务开发同学成本；深化框架能力，在稳定性、性能、易用性方面持续进行提升。此外，我们在产研新流程方向也会持续优化用户体验，完善运营机制，不断提升产研迭代的流程。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以上就是外卖广告针对业务平台化上的一些探索和实践，在广告工程架构等其他领域的探索，敬请期待下一篇系列文章。&lt;/span&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;7 作者简介&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;span&gt;乐彬、国梁、玉龙、吴亮、磊兴、王焜、刘研、思远等，均来自美团外卖广告技术团队。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;----------  END  ----------&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;招聘信息&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section data-source=&quot;bj.96weixin.com&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;美团外卖广告技术团队大量岗位持续招聘中，诚招广告后台/算法开发工程师及专家，坐标北京。欢迎感兴趣的同学加入我们。可投简历至：&lt;/span&gt;&lt;span&gt;yangguoliang@meituan.com&lt;/span&gt;&lt;span&gt;（邮件主题请注明：美团外卖广告技术团队）&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;也许你还想看&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  | &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651763222&amp;amp;idx=1&amp;amp;sn=dadbae89e463870649b74d5265bebb5a&amp;amp;chksm=bd126b5b8a65e24dda6173efb7216874dd666cf87c32b3fcf9f078af4347a62791834c4410c0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团外卖广告智能算力的探索与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;/&gt;&lt;/strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651763222&amp;amp;idx=1&amp;amp;sn=dadbae89e463870649b74d5265bebb5a&amp;amp;chksm=bd126b5b8a65e24dda6173efb7216874dd666cf87c32b3fcf9f078af4347a62791834c4410c0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团外卖广告智能算力的探索与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团外卖广告智能算力的探索与实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt;&lt;/span&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651760534&amp;amp;idx=1&amp;amp;sn=89fcab81347782818edb98fd7fa76991&amp;amp;chksm=bd127edb8a65f7cd26f5f1bbbc6b670ef51e31a0d402d71d2a83a211376032e79d36f8a37dc5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;美团外卖特征平台的建设与实践&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;美团外卖特征平台的建设与实践&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;  |&lt;/strong&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765021&amp;amp;idx=1&amp;amp;sn=3ac05ac64f650bcedd4f75d5aa715771&amp;amp;chksm=bd1260508a65e9462f356aab0fc0df37e4860628f3f404db9099b8195991bfd9a4542c35dd80&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;广告深度预估技术在美团到店场景下的突破与畅想&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;广告深度预估技术在美团到店场景下的突破与畅想&lt;/a&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阅读更多&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;---&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765958&amp;amp;idx=1&amp;amp;sn=8201546812e5a95a2bee9dffc6d12f00&amp;amp;chksm=bd12658b8a65ec9de2f5be1e96796dfb3c8f1a374d4b7bd91266072f557caf8118d4ddb72b07&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;前‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;前端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://t.1yb.co/jo7v&quot; textvalue=&quot; 安全&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765981&amp;amp;idx=1&amp;amp;sn=c2dd86f15dee2cbbc89e27677d985060&amp;amp;chksm=bd1265908a65ec86d4d08f7600d1518b61c90f6453074f9b308c96861c045712280a73751c73&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;算‍法&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;算法&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765982&amp;amp;idx=1&amp;amp;sn=231b41f653ac7959f3e3b8213dcec2b0&amp;amp;chksm=bd1265938a65ec85630c546169444d56377bc2f11401d251da7ca50e5d07e353aa01580c7216&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;后‍端&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;后端&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765964&amp;amp;idx=1&amp;amp;sn=ab6d8db147234fe57f27dd46eec40fef&amp;amp;chksm=bd1265818a65ec9749246dd1a2eb3bf7798772cc4d5b4283b15eae2f80bc6db63a1471a9e61e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;数‍据&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;数据&lt;/a&gt;&lt;/section&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765965&amp;amp;idx=1&amp;amp;sn=37e0c56c8b080146ce5249243bfd84d8&amp;amp;chksm=bd1265808a65ec96d3a2b2c87c6e27c910d49cb6b149970fb2db8bf88045a0a85fed2e6a0b84&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;安‍全&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;安全&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765972&amp;amp;idx=1&amp;amp;sn=afe02ec92762c1ce18740d03324c4ac3&amp;amp;chksm=bd1265998a65ec8f10d5f58d0f3681ddfc5325137218e568e1cda3a50e427749edb5c6a7dcf5&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;And‍roid&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;Android&lt;/a&gt;&lt;span&gt;&lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765973&amp;amp;idx=1&amp;amp;sn=32a23bf1d278dda0398f993ab60a697e&amp;amp;chksm=bd1265988a65ec8e630ef4d24b4946ab6bd7e66702c1d712481cf3c471468a059c470a14c30d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;iO‍S&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;iOS&lt;/a&gt;&lt;span&gt; &lt;strong&gt; |&lt;/strong&gt; &lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765963&amp;amp;idx=1&amp;amp;sn=a3de9ef267d07d94118c1611776a4b28&amp;amp;chksm=bd1265868a65ec906592d25ad65f2a8516338d07ec3217059e6975fc131fc0107d66a8cd2612&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;运‍维&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;运维&lt;/a&gt;&lt;span&gt;&lt;strong&gt; | &lt;/strong&gt;&lt;/span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;amp;mid=2651765974&amp;amp;idx=1&amp;amp;sn=763c1e37d04acffd0142a2852ecfb000&amp;amp;chksm=bd12659b8a65ec8dfcfeb2028ef287fae7c38f134a665375ba420556ce5d2e4cf398147bd12e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;测‍试&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; tab=&quot;outerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;测试&lt;/span&gt;&lt;/a&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NjQ5MTI5OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/hEx03cFgUsVGibnsaEib3aNlqF0tOrA2RGEmNSbia2nnohE4Tpf95UyTiaSjDVbHRfY8WNBeTuLLTaVdSckkNyEx1Q/0?wx_fmt=png&quot; data-nickname=&quot;美团技术团队&quot; data-alias=&quot;meituantech&quot; data-signature=&quot;10000+工程师，如何支撑中国领先的生活服务电子商务平台？数亿消费者、数百万商户、2000多个行业、几千亿交易额背后是哪些技术在支撑？这里是美团、大众点评、美团外卖、美团配送、美团优选等技术团队的对外窗口。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1e9b3b05d6906c81131608099e5ffbaf</guid>
<title>微服务从代码到k8s部署应有尽有系列全集</title>
<link>https://toutiao.io/k/dcd3fuh</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们用一个系列来讲解从需求到上线、从代码到k8s部署、从日志到监控等各个方面的微服务完整实践。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;整个项目使用了go-zero开发的微服务，基本包含了go-zero以及相关go-zero作者开发的一些中间件，所用到的技术栈基本是go-zero项目组的自研组件，基本是go-zero全家桶了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/UyIojWicPOg0ZKAF1ZPmceo2iccqkuibkmN5ty7DznTjgXGYiaHDOY3baLZx5OlHkcy6KmBdXuYdf1tiafPWcJMiaeaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实战项目地址：https://github.com/Mikaelemmmm/go-zero-looklook&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;知乎文章列表：&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;系统介绍：https://zhuanlan.zhihu.com/p/464544668&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;网关：https://zhuanlan.zhihu.com/p/464810481&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;鉴权：https://zhuanlan.zhihu.com/p/465690784&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;用户中心：https://zhuanlan.zhihu.com/p/465720564&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;民宿服务：https://zhuanlan.zhihu.com/p/466923244&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;订单服务：https://zhuanlan.zhihu.com/p/467200888&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;支付服务：https://zhuanlan.zhihu.com/p/467805751&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;各种队列：https://zhuanlan.zhihu.com/p/468061200&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;事务精讲：https://zhuanlan.zhihu.com/p/468513367&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;错误处理：https://zhuanlan.zhihu.com/p/468992801&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;日志收集：https://zhuanlan.zhihu.com/p/470472858&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;链路追踪：https://zhuanlan.zhihu.com/p/470686081&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;服务监控：https://zhuanlan.zhihu.com/p/471273291&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;部署环境：https://zhuanlan.zhihu.com/p/471742493&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;k8s部署：https://zhuanlan.zhihu.com/p/472182788&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;更多实践系列&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了帮助大家更好的掌握微服务开发和 go-zero 的相关知识，我们后续会推出更多的微服务实践相关系列文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时也热烈欢迎广大 go-zero 用户投稿本公众号，文章的推广也会给文章作者带来人气、同时也可以帮助项目的推广，一般经过本公众号审核通过并推广的项目会有几百 stars。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目地址&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/zeromicro/go-zero&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;欢迎使用 &lt;code&gt;go-zero&lt;/code&gt; 并 &lt;strong&gt;star&lt;/strong&gt; 支持我们！&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;我的知乎&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;关注我的知乎，所有「微服务实践」公众号的文章勘误都在这里。&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>