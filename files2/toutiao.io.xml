<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>18e0b9a967bb5d39a0036c9d15505ae2</guid>
<title>用 Node 轻松完成一个分布式事务 TCC，保姆级教程</title>
<link>https://toutiao.io/k/9bznj88</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;什么是TCC，TCC是Try、Confirm、Cancel三个词语的缩写，最早是由 Pat Helland 于 2007 年发表的一篇名为《Life beyond Distributed Transactions:an Apostate’s Opinion》的论文提出。&lt;/p&gt;&lt;h2&gt;TCC组成&lt;/h2&gt;&lt;p&gt;TCC分为3个阶段&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Try 阶段：尝试执行，完成所有业务检查（一致性）, 预留必须业务资源（准隔离性）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Confirm 阶段：如果所有分支的Try都成功了，则走到Confirm阶段。Confirm真正执行业务，不作任何业务检查，只使用 Try 阶段预留的业务资源&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Cancel 阶段：如果所有分支的Try有一个失败了，则走到Cancel阶段。Cancel释放 Try 阶段预留的业务资源。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TCC分布式事务里，有3个角色，与经典的XA分布式事务一样：&lt;/p&gt;&lt;p&gt;如果我们要进行一个类似于银行跨行转账的业务，转出（TransOut）和转入（TransIn）分别在不同的微服务里，一个成功完成的TCC事务典型的时序图如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.169179229480737&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWZ9zwPQIlhiabFoTcTE9W4pPePuiahLmkCyDctJceps7ic68qWBgeV3hbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2&gt;TCC网络异常&lt;/h2&gt;&lt;p&gt;TCC在整个全局事务的过程中，可能发生各类网络异常情况，典型的是空回滚、幂等、悬挂，由于TCC的异常情况，和SAGA、可靠消息等事务模式有相近的地方，因此我们把所有异常的解决方案统统放在这篇文章《分布式事务最经典的七种解决方案》的子事务屏障环节进行讲解&lt;/p&gt;&lt;h2&gt;TCC实践&lt;/h2&gt;&lt;p&gt;下面我们进行一个TCC事务的具体开发&lt;/p&gt;&lt;p&gt;目前可用于TCC的开源框架，主要为Java语言，其中以seata为代表。我们的例子采用nodejs，使用的分布式事务框架为dtm，它对分布式事务的支持非常优雅。下面来详细讲解TCC的组成&lt;/p&gt;&lt;p&gt;下面我们来编写具体的Try/Confirm/Cancel的处理函数&lt;/p&gt;&lt;pre&gt;router.&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransOutTry&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransOutTry&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;}).&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransOutConfirm&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransOutConfirm&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;}).&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransOutCancel&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransOutCancel&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;}).&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransInTry&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransInTry&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;}).&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransInConfirm&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransInConfirm&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;}).&lt;span&gt;post&lt;/span&gt;(&lt;span&gt;&#x27;/api/TransInCancel&#x27;&lt;/span&gt;, &lt;span&gt;(&lt;span&gt;ctx, next&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;TransInCancel&quot;&lt;/span&gt;)&lt;br/&gt;  ctx.&lt;span&gt;body&lt;/span&gt; = { &lt;span&gt;result&lt;/span&gt;: &lt;span&gt;&quot;SUCCESS&quot;&lt;/span&gt; }&lt;br/&gt;})&lt;/pre&gt;&lt;p&gt;到此各个子事务的处理函数已经OK了，然后是开启TCC事务，进行分支调用&lt;/p&gt;&lt;pre&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;FireTcc&lt;/span&gt;(&lt;span/&gt;) {&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; dtm = &lt;span&gt;&quot;http://localhost:8080/api/dtmsvr&quot;&lt;/span&gt; &lt;span&gt;// dtm服务地址&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;let&lt;/span&gt; svc = &lt;span&gt;&quot;http://localhost:4005/api&quot;&lt;/span&gt; &lt;span&gt;// 本地服务前缀&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;// 开启一个tcc事务，第二个参数里面，写全局事务的逻辑&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;await&lt;/span&gt; dtmcli.&lt;span&gt;tccGlobalTransaction&lt;/span&gt;(dtm, &lt;span&gt;async&lt;/span&gt; (t) =&amp;gt; {&lt;br/&gt;    &lt;span&gt;let&lt;/span&gt; req = { &lt;span&gt;amount&lt;/span&gt;: &lt;span&gt;30&lt;/span&gt; } &lt;span&gt;// 子事务需要的负荷&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;calling trans out&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;// 注册事务分支，并调用分支中的Try&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; t.&lt;span&gt;callBranch&lt;/span&gt;(req, svc + &lt;span&gt;&quot;/TransOutTry&quot;&lt;/span&gt;, svc + &lt;span&gt;&quot;/TransOutConfirm&quot;&lt;/span&gt;, svc + &lt;span&gt;&quot;/TransOutCancel&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;console&lt;/span&gt;.&lt;span&gt;log&lt;/span&gt;(&lt;span&gt;&quot;calling trans in&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;// 注册事务分支，并调用分支中的Try&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;await&lt;/span&gt; t.&lt;span&gt;callBranch&lt;/span&gt;(req, svc + &lt;span&gt;&quot;/TransInTry&quot;&lt;/span&gt;, svc + &lt;span&gt;&quot;/TransInConfirm&quot;&lt;/span&gt;, svc + &lt;span&gt;&quot;/TransInCancel&quot;&lt;/span&gt;)&lt;br/&gt;  })&lt;br/&gt;}&lt;/pre&gt;&lt;p&gt;至此，一个完整的TCC分布式事务编写完成。&lt;/p&gt;&lt;p&gt;如果您想要完整运行一个成功的示例，那么参考这个例子yedf/dtmcli-node-sample，将它运行起来非常简单&lt;/p&gt;&lt;pre&gt;&lt;span&gt;# 部署启动dtm&lt;/span&gt;&lt;br/&gt;&lt;span&gt;# 需要docker版本18以上&lt;/span&gt;&lt;br/&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/yedf/dtm&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; dtm&lt;br/&gt;docker-compose up&lt;br/&gt;&lt;br/&gt;&lt;span&gt;# 另起一个命令行&lt;/span&gt;&lt;br/&gt;git &lt;span&gt;clone&lt;/span&gt; https://github.com/yedf/dtmcli-node-sample&lt;br/&gt;&lt;span&gt;cd&lt;/span&gt; dtmcli-node-sample&lt;br/&gt;npm install&lt;br/&gt;node .&lt;/pre&gt;&lt;h2&gt;TCC的回滚&lt;/h2&gt;&lt;p&gt;假如银行将金额准备转入用户2时，发现用户2的账户异常，返回失败，会怎么样？我们给出事务失败交互的时序图&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.219430485762144&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/9m9OfQX94VvJvhjNGBvp23oCHMicZHFfWSnf5utwia7X1VIzY6HVnDTAVnqHHiahTnT6pvYXicx3nickq8rIy61Sj7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1194&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;这个跟成功的TCC差别就在于，当某个子事务返回失败后，后续就回滚全局事务，调用各个子事务的Cancel操作，保证全局事务全部回滚。&lt;/p&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;在这篇文章里，我们介绍了TCC的理论知识，也通过一个例子，完整给出了编写一个TCC事务的过程，涵盖了正常成功完成，以及成功回滚的情况。相信读者通过这边文章，对TCC已经有了深入的理解。&lt;/p&gt;&lt;p&gt;关于分布式事务更多更全面的知识，请参考《分布式事务最经典的七种解决方案》&lt;/p&gt;&lt;p&gt;文中使用的例子节选自yedf/dtm，支持多种事务模式：TCC、SAGA、XA、事务消息 跨语言支持，已支持 golang、python、Java、PHP、nodejs等语言的客户端，参考各语言SDK。提供子事务屏障功能，优雅解决幂等、悬挂、空补偿等问题。&lt;/p&gt;&lt;p&gt;阅读完此篇干货，欢迎大家访问https://github.com/yedf/dtm项目，给颗星星支持！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>80adc26a0cdd4db997920ac079d32fd7</guid>
<title>RabbitMQ 设计原理解析</title>
<link>https://toutiao.io/k/imi0jbx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot; role=&quot;link&quot; aria-labelledby=&quot;js_article-tag-card__left&quot; aria-describedby=&quot;js_article-tag-card__right&quot;&gt;
                                            
                                                                                    &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__left&quot; class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUzNjAxODg4MQ==&amp;amp;action=getalbum&amp;amp;album_id=1770150153476194310#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1770150153476194310&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;#软件工程&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span aria-hidden=&quot;true&quot; id=&quot;js_article-tag-card__right&quot; class=&quot;article-tag-card__right&quot;&gt;3个&lt;span class=&quot;weui-hidden_abs&quot;&gt;内容&lt;/span&gt;&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;RabbitMQ现在用的也比较多，但是没有过去那么多啦。现在很多的流行或者常用技术或者思路都是从过去的思路中演变而来的。了解一些过去的技术，对有些人来说可能会产生众里寻他千百度的顿悟，加深对技术的理解，更好的应用于工作中去。&lt;/p&gt;&lt;p&gt;本篇整体采用从浅到深的逻辑结构来描述。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;入门部分&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;什么是MQ&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;MQ全称是Message Queue，消息的队列。因为是队列，所以遵循FIFO先进先出原则。因为存放的是消息，所以是一种跨进程的通信机制。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;为什么使用MQ&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;流量削峰&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这个跟很火的小吃店门口的排队原理是一样的。实时调用就好像是大家蜂拥而至，如果系统处理能力不够，就会让店家手忙脚乱，说不定会在冰激凌上浇上可乐。排队能保证有条不紊，代价是整体处理速度会慢些。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;异步处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当A调用B，B可能要花很长一段时间来完成。这时候一般有三种方式来异步处理。A调用B，B返回A说收到调用请求了。同步请求已经完成，但B的执行才刚开始。这时候，第一种方式是A每隔一段时间来查询一次，看B是否执行完，这是拉的方式；第二种方式是A提供一个回调地址，B执行完之后回调A，这是推的方式；第三种就是使用MQ，A使用MQ给B发消息，B处理完再回一个消息，好处是上面提到的同时可以流量削峰。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;应用解耦&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;MQ实现了逻辑解耦+物理解耦。逻辑上，将请求和结果处理分开了；物理上，系统只用与MQ通信。听起来，MQ要优雅很多，但是上面提到异步处理的三种方式的前两种，现在也多很常见。那是因为MQ是有代价的，那就是需要一套MQ设施。做开放平台，用户之间的唯一设施就是互联网，这时候更依赖双方的协议约定，所以前两种异步处理方式不会被MQ取代。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MQ的分类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;ActiveMQ是早期的MQ，倚老卖老一下，我那个年代用过，目前优势已经不太明显了。&lt;/p&gt;&lt;p&gt;Kafka号称是大数据的杀手锏，以百万级TPS吞吐量名声大噪。时效是ms级别，分布式的可用性高。消费者采用拉的方式获取消息，消息有序，通过控制可以保证消息仅被消费一次。但是单机超过64个分区，load会明显飙高；实时性取决于轮询时间间隔，关键是有可能丢消息，不适合订单业务中使用。&lt;/p&gt;&lt;p&gt;RocketMQ是国货，用Java语言实现，在设计时参考了Kafka，单机吞吐量达到十万级别，分布式架构可用性高，消息可以0丢失，扩展性高。但是支持的客户端成熟的也就是Java，核心代码没有实现JMS，迁移需要修改大量代码。&lt;/p&gt;&lt;p&gt;RabbitMQ是erlang开发的，吞吐量达到万级别，稳定、健壮、跨平台，支持多种语言，企业间通信中常用。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;JMS支持&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;RabbitMQ不支持JMS协议。这个很好理解。因为JMS是Java消息服务，提供了消息传递的Java标准API。而RabbitMQ是Erlang写的，对Java的支持会弱一些。但是RabiitMQ实现了AMQP标准协议。AMQP只是统一了数据交换的标准格式，与语言无关。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心部分&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心概念&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;所有的MQ都由生产者、消费者和broker(队列)三部分组成。但是不同的实现，根据核心思想不同，内部结构也各有特色。&lt;/p&gt;&lt;p&gt;比如银行系统中常用的跨银行间通信的MQ，相当于两组MQ拼起来的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;普通MQ&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.24&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibtgWiaX2cCEDMicOlCURnaqJmrMmx4voJtIcRMnY1Y1WYr3QZJpfyw5amJtL8UVpVrM4eJ1nPCIw8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;500&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;跨企业MQ&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.17937219730941703&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibtgWiaX2cCEDMicOlCURnaqJ39bzZSWZIHawXGiaxeErlto2lZC7SIBktRYaibb1b2UZGFw87z5osj3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;669&quot;/&gt;&lt;/p&gt;&lt;p&gt;这样做的好处是任何一端网络出现问题，都可以暂存消息，等待网络恢复，不丢失消息。消息的重试放在broker端，减少了应用端的复杂度。为什么这里举例时提到银行间使用呢，因为使用这种模式的MQ，最重要的是有钱。因为想达到理想效果，要拉专线，并使用高配机器。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;RabbitMQ和Kafka是一样的&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;再回来考虑普通MQ的场景，如果这个MQ是RabbitMQ。组件细化一下是这样：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5049833887043189&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibtgWiaX2cCEDMicOlCURnaqJRWyb1JxYqDr6zjdoqNbyprLVpiaRCarhTibFucc3J0xAibCjvNc7QOz4g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;602&quot;/&gt;&lt;/p&gt;&lt;p&gt;这张图上来看，其实RabbitMQ和Kafka是一样的。来看Kafka的：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5765625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlibtgWiaX2cCEDMicOlCURnaqJVkkuAd0qH1mIKZib2iaJKLr9PEqTEIYpWRQGibH7VRAiakBxK9dXiaKNuKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot;/&gt;&lt;/p&gt;&lt;p&gt;表面上来看，RabbitMQ的服务器(Broker)端由Exchange和Queue两部分组成。Exchange是交换机，交换机是做路由的。Kafka生产者发到Broker也需要路由啊，来决定路由到哪个Partition(也就是队列)中去。只不过Kafka的路由模式很固定，就是先找到哪个topic，然后使用负载均衡的策略找到一个Partition来投递消息。Kafka是用了逻辑概念topic简化了exchange路由，所以Kafka的路由功能也很单一。&lt;/p&gt;&lt;p&gt;表面上，RabbitMQ的生产者和消费者与服务端都是Channel信道来相连。Channel是复用连接来进行通信的，Kafka也是需要的，只是它内部帮我们把这些与核心功能关系不大的都自己内置实现了。而RabbitMQ暴露给用户，提供了更高的灵活性。&lt;/p&gt;&lt;p&gt;上面的两段如果我没有讲明白，也没有关系。只要知道更年轻的Kafka没有Exchange和Channel的概念是类似于采取了约定大于配置的方式提供的服务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;核心功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;RabbitMQ的核心实际上就是AMQP的核心：MessageQueue、Exchange和Binding。&lt;/p&gt;&lt;p&gt;MessageQueue就是消息队列，一个队列里的一条消息，也就是同一个message ID对应的消息，不管有多少个消费者来分摊压力，也只能被消费一次。消息队列和消费者之间有ack机制，消息一旦确认安全送达，RabbitMQ服务端就可以安全删除消息了。&lt;/p&gt;&lt;p&gt;Binding是MessageQueue与Exchange之间的连接，Exchange只能给Binding的MessageQueue发送消息。&lt;/p&gt;&lt;p&gt;Exchange有四种类型：fanout、topic、direct和header。本质上就是有一堆MessageQueue，一个消息是要被复制几份，发到哪几个Binding的消息队列去。Exchange给定了规则：fanout是对每个消息队列复制一份发送；direct意思是只发指定的一份，不复制；topic是发送通配符匹配的几份；header可以指定一些其他的过滤条件发送。消息从生产者发送到exchange之后也有ack机制来保证消息的可靠传输。&lt;/p&gt;&lt;p&gt;Kafka只有topic的概念。这是因为Kafka的设计上消息只用存一份，通过游标，发送后不立即删除消息。多个消费者组可以互不影响的消费。这是Kafka的一大改进。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;内部原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;大家面试时有没有被问过：Kafka怎么保证消息能且仅能收到一次？这是个埋坑题，是与面试官斗智斗勇的开始。什么幂等、事务、流式EOS呀，其实呢，Kafka本身是不保证仅且仅收到一次的，所以这些实现方法都不优雅。&lt;/p&gt;&lt;p&gt;RabbitMQ通过AMQP事务机制，还有上面已经提过的ack也就是confirm两种可选方式保证消息被收到。&lt;/p&gt;&lt;p&gt;但是最为优雅的实现是IBM的Websphere MQ。因为这是收费的，所以研究的人不多。它通过消息序列号保证消息不丢失、不重传。&lt;/p&gt;&lt;p&gt;通道为每条消息的传送分配一个序列号，它会自动累积增值。消息序列号由发送通道分配，是通道的一个永久属性，每当发送一条消息，消息序列号就加一。通道的相关属性SEQWRAP标识序号的最大值，缺省为999,999,999。序列号越界后自动归零，从头开始。&lt;/p&gt;&lt;p&gt;正常情况下，通道两端的消息序列号或者相等或相差为一。双方对前面的某一条或一批消息是否发送成功理解不一致。在解决了不确定的消息后，可以用MQSC命令通过重置消息序号将双方调整到一致。一旦连接断开后，通道重连时双方会将消息序号同步。 &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>0eb168c02f1f1992bff05c80f90bc1a8</guid>
<title>怎样搭建完整数据指标体系？</title>
<link>https://toutiao.io/k/n6pzpec</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;span class=&quot;RichText ztext CopyrightRichText-richText css-hnrfcf&quot; options=&quot;[object Object]&quot; itemprop=&quot;text&quot;&gt;&lt;blockquote&gt;&quot;不谋全局者，不足谋一域。&quot; —— 陈澹然&lt;/blockquote&gt;&lt;p&gt;全文：2923字；预计阅读时间：8分钟。&lt;/p&gt;&lt;p&gt;之前在整理&lt;a href=&quot;https://zhuanlan.zhihu.com/p/398082765&quot; class=&quot;internal&quot;&gt;《好好的数据工具箱》&lt;/a&gt;中提到：“数据岗的核心职能，在于产出数据资产，提升信息的价值密度。”&lt;b&gt;而指标体系就是一个组织最为重要的数据资产。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;那么：&lt;/p&gt;&lt;p&gt;（1）为什么指标体系这么重要？&lt;/p&gt;&lt;p&gt;（2）什么是指标体系？&lt;/p&gt;&lt;p&gt;（3）指标体系的衡量标准是什么？&lt;/p&gt;&lt;p&gt;（4）如何去搭建一套好好的指标体系？&lt;/p&gt;&lt;p&gt;只要弄清楚了这4个问题，指标体系的搭建工作就迅速地开展、快速地落地，精准地产生业务价值。&lt;/p&gt;&lt;p&gt;以上是对于数据同学而言的工作。此外，对于指标体系的使用者而，例如业务方、管理者等，还有一个重要的问题：&lt;/p&gt;&lt;p&gt;（5） 指标体系应该怎么用？&lt;/p&gt;&lt;p&gt;首先，回答第一个问题。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E8%A6%81%EF%BC%9F%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{指标体系为什么重要？}}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;要搞清楚指标体系为什么重要，很自然的想到的就是：为什么要有指标体系？&lt;sup data-text=&quot;我们从论证必要性的角度出发，去论证重要性。&quot; data-url=&quot;&quot; data-numero=&quot;1&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;我们从论证必要性的角度出发，去论证重要性。&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_1_0&quot; href=&quot;#ref_1&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;要回答这个问题，我们就要回答一个更根本的问题：为什么要有指标？&lt;/p&gt;&lt;p&gt;我们需要指标是因为：如果没有指标，我们&lt;b&gt;能够知道的信息就会变得很少&lt;/b&gt;，亦或是&lt;b&gt;获取信息的成本会变得很高&lt;/b&gt;。（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/399959450&quot; class=&quot;internal&quot;&gt;好好的分析师：《指标设计方法》&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;那么是不是有了指标就够了呢？实则不然，如果只有指标，而没有体系，我们能&lt;b&gt;够知道的信息就会变得很窄&lt;/b&gt;，亦或是&lt;b&gt;获取的信息就会变得很乱&lt;/b&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/50/v2-b8bed4722adc39c1cc3df3967d8f879c_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2562&quot; data-rawheight=&quot;1440&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-b8bed4722adc39c1cc3df3967d8f879c_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2562&quot; data-rawheight=&quot;1440&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-b8bed4722adc39c1cc3df3967d8f879c_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic2.zhimg.com/50/v2-b8bed4722adc39c1cc3df3967d8f879c_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;图1：指标与指标体系的异同&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;进而，体系的缺位会导致组织的“数据指南针”失效。越是在大型组织当中，指标体系越为重要，因为决策者离一线业务较远；公司的业务虚拟属性越强，指标体系越为重要，因为公司与客户的距离较远。&lt;/p&gt;&lt;p&gt;&lt;b&gt;简而言之，建立指标体系的目的就在于获取全局性的、有体系性的信息；进而通过这些信息去驱动业务的发展，达成组织目标，这就是指标体系之所以重要的原因。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;回答完“Why”的问题，我们接着回答“What”的问题。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB%EF%BC%9F%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{什么是指标体系？}}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;我们刚刚说没有体系的指标，所传递的信息是零散的、杂乱的。那么是什么使得指标成体系了呢？&lt;/p&gt;&lt;p&gt;是指标之间的关系，以及指标的使用方法。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-4de6d19a4292284907162db3455ddf22_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2054&quot; data-rawheight=&quot;487&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-4de6d19a4292284907162db3455ddf22_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2054&quot; data-rawheight=&quot;487&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-4de6d19a4292284907162db3455ddf22_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-4de6d19a4292284907162db3455ddf22_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;图2：指标体系的构成&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;所以，&lt;b&gt;指标体系由三部分构成：指标库、关联关系，以及指标体系的使用指南。&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;快问快答：以最基本的“利润 = 收入 - 成本”为例。请问，有了这三个指标，以及这个等式（他们之间的关系），是否构成一个指标体系？&lt;br/&gt;不构成，因为还缺失在具体场景下的使用方法。&lt;br/&gt;假设我们用“利润、收入、成本”去衡量某公司的经营情况。五月份的收入是8000万，成本是6000万，利润是2000万。请问这个公司的经营状况如何？&lt;br/&gt;● 不知道—— 因为没有参照标准。&lt;br/&gt;● 非常棒，利润同比增长100% —— 和自己比，趋势向好。&lt;br/&gt;● 还可以，至少是盈利的。—— 和目标比，表现比盈亏平衡好。&lt;br/&gt;● 非常糟糕，经营效率低下。—— 和市场比，同业竞对以同样的成本可以创造4000万的利润&lt;sup data-text=&quot;为了避免引入新指标，这里没有使用利润率的概念。&quot; data-url=&quot;&quot; data-numero=&quot;2&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;为了避免引入新指标，这里没有使用利润率的概念。&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_2_0&quot; href=&quot;#ref_2&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;。&lt;br/&gt;所以说：&lt;br/&gt;【√】使用方法对于指标体系而言是不可或缺的。&lt;br/&gt;【×】指标体系不是指标的罗列。&lt;br/&gt;【★】“和自己比、和目标比、和市场比”的三板斧是非常基础、非常有效、非常落地的比较方法。&lt;/blockquote&gt;&lt;p&gt;如果我们把&lt;b&gt;指标体系&lt;/b&gt;视作为一个产品，&lt;b&gt;指标库&lt;/b&gt;就是这个产品的硬件，&lt;b&gt;指标间的关联关系&lt;/b&gt;就是这个产品的软件，而&lt;b&gt;使用指南&lt;/b&gt;就是这个产品的说明书。既然是一个产品，用户体验就有优劣之分。那么评价一套指标体系的用户体验的标准是什么呢？&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E6%80%8E%E4%B9%88%E8%AF%84%E4%BB%B7%E4%B8%80%E5%A5%97%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB%E7%9A%84%E5%A5%BD%E5%9D%8F%EF%BC%9F%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{怎么评价一套指标体系的好坏？}}\\&quot; eeimg=&quot;1&quot;/&gt; 标准源自目标，目标源自问题。数据分析通常要解决的4类问题，分别是：描述现状、分析原因、预测未来、改善未来。（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/161075239&quot; class=&quot;internal&quot;&gt;好好的分析师：《从界定问题开始做数据分析》&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;根据对问题的解答程度，我们可以将指标体系分为四个层次：&lt;/p&gt;&lt;p&gt;① &lt;b&gt;描述现状&lt;/b&gt;：这套指标体系，可以帮助我们基本还原业务整体的运营现状。&lt;/p&gt;&lt;p&gt;② &lt;b&gt;分析原因&lt;/b&gt;：这套指标体系，可以帮助我们对业务的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/412117828&quot; class=&quot;internal&quot;&gt;变化进行归因&lt;/a&gt;，对&lt;a href=&quot;https://zhuanlan.zhihu.com/p/412914084&quot; class=&quot;internal&quot;&gt;问题进行定位&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;③ &lt;b&gt;预测未来&lt;/b&gt;：这套指标体系，可以帮助我们，进行&lt;u&gt;假设分析&lt;/u&gt;，对未来做出一些预判。&lt;/p&gt;&lt;p&gt;④&lt;b&gt; 改善未来&lt;/b&gt;：这套指标体系，可以帮助我们找到，改善业务的动作、策略、战略。具体而言，这套指标体系，可以围绕组织目标，找到某些人，驱使他们去做某些事（寻某人、行某事）。&lt;/p&gt;&lt;p&gt;一个可用的指标体系，至少要达到以上四个层次其中之一。能够达到的层次越高，这套指标体系能产生的价值越大。&lt;/p&gt;&lt;blockquote&gt;快问快答：那么是不是说一开始搭建一个指标体系，就要搭建一个对所有业务细节都清晰量化的大而全的指标体系呢？&lt;br/&gt; ● No！这会导致分析瘫痪&lt;sup data-text=&quot;&quot; data-url=&quot;https://wiki.mbalib.com/wiki/%E5%88%86%E6%9E%90%E7%98%AB%E7%97%AA&quot; data-numero=&quot;3&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;https://wiki.mbalib.com/wiki/%E5%88%86%E6%9E%90%E7%98%AB%E7%97%AA&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_3_0&quot; href=&quot;#ref_3&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;的现象出现；即决策分析的机会成本，将超出做出决定可获得的收益。&lt;br/&gt;而且大多数时候，好的指标体系是随着实践的深入、认识的提高，逐渐生长出来的；而并非是起初就完美设计出来的。&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;快问快答：那么当我们搭建一个指标体系的时候，应该将目标层次设定为“改善未来”吗？&lt;br/&gt;● Yes！我们应该在有限的时间、精力、技术资源下，产出尽可能高价值的数据资产。事实上，只要掌握了科学的指标体系建设方法和&lt;u&gt;数据探索方法&lt;/u&gt;，不需要太多的指标，就能构建出一套可以“改善未来”的指标体系。&lt;/blockquote&gt;&lt;p&gt;总而言之，&lt;b&gt;一套好的指标体系，能够帮助我们实现4个目标：描述现状、洞察原因、预判未来、寻某人行某事。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;接下来，让我们开始实践。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/50/v2-5d74e2015d2818b5bcd7696af76fa04d_720w.jpg?source=1940ef5c&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;128&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-5d74e2015d2818b5bcd7696af76fa04d_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;128&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-5d74e2015d2818b5bcd7696af76fa04d_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic3.zhimg.com/50/v2-5d74e2015d2818b5bcd7696af76fa04d_720w.jpg?source=1940ef5c&quot;/&gt;&lt;/figure&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97%E5%A5%BD%E7%9A%84%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB%EF%BC%9F%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{如何搭建一套好的指标体系？}}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;blockquote&gt;“正确地开始，功成已近半。”&lt;sup data-text=&quot;well begun is half done.&quot; data-url=&quot;&quot; data-numero=&quot;4&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;well begun is half done.&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_4_0&quot; href=&quot;#ref_4&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; —— 亚里士多德&lt;/blockquote&gt;&lt;p&gt;对于建立指标体系而言，近乎真理的起点在于“理解业务”。&lt;/p&gt;&lt;p&gt;&lt;b&gt;以“理解业务”为起点，我们分别从纵向与横向两个方向思考，就能搭建起我们的指标体系。&lt;/b&gt;&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/50/v2-c87b1bc6c8781a456610b8f684f28468_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic3.zhimg.com/v2-c87b1bc6c8781a456610b8f684f28468_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic3.zhimg.com/v2-c87b1bc6c8781a456610b8f684f28468_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic1.zhimg.com/50/v2-c87b1bc6c8781a456610b8f684f28468_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;【图3：指标体系搭建过程】&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;以“业务理解”为起点，纵向出发，我们可以往4个方向深入对业务的理解：&lt;/p&gt;&lt;p&gt;&lt;b&gt;① 业务目标&lt;/b&gt;：包括要创造的价值，以及要交付的结果等。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以呼叫中心的运营为例，运营提效的主要目标是——在保证服务水平的基础上，用同样的人力资源，承接更多的服务请求。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;② 业务的运营模式&lt;/b&gt;：包括参与主体以及主体之间的关系等。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以传统保险业务为例，参与的主要主体有6个：保险人（保险公司）、保险业务员、投保人、保险标的（被保人/被保财产）、受益人、其他第三方。&lt;/li&gt;&lt;li&gt;在营销场景下，主要是保险人、业务员、投保人之间的关系较为紧密；而在理赔环节，则是保险标的、受益人、保险人、投保人、其他第三方&lt;sup data-text=&quot;例如：医疗险，其他第三方为医院；车险，其他第三方为交警、4S店、事故干系人等。&quot; data-url=&quot;&quot; data-numero=&quot;5&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;例如：医疗险，其他第三方为医院；车险，其他第三方为交警、4S店、事故干系人等。&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_5_0&quot; href=&quot;#ref_5&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;之间的关系较为紧密。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;③ 可控因素&lt;/b&gt;：对业务目标有重要影响的、可控的内外部影响因素。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以贸易公司为例，影响业务发展的内部环境因素可能有：库存状况、定价策略、销售团队等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;④ 不可控因素&lt;/b&gt;：对业务目标有重要影响的、可控性较差的内外部影响因素。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;还是以贸易公司为例，汇率变动、原材料价格等都是可控性较差的外部影响因素；是值得监测的风险点。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以“业务理解”为起点，横向出发，我们可以经过3个步骤，完成数据资产的交付：&lt;/p&gt;&lt;p&gt;（1） &lt;b&gt;量化业务&lt;/b&gt;：将上述的四类业务事实，依次转化为对应的指标；业务目标 → 结果指标，运营模式 → 运营指标，可控因素 → 过程指标，不可控因素 → 监控指标。&lt;/p&gt;&lt;p&gt;（2） &lt;b&gt;建立体系&lt;/b&gt;：建立上述指标的联系，以及整个指标体系的使用方法。&lt;/p&gt;&lt;p&gt;（3） &lt;b&gt;交付资产&lt;/b&gt;：将指标体系转化为&lt;u&gt;数据资产&lt;/u&gt;交付。例如，一套指标体系的说明文档、数据表格、报表、看板、报告等。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90+%E3%80%87+%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{举个例子 〇 }}\\&quot; eeimg=&quot;1&quot;/&gt;光说不练假把式。当代打工人，健康（身材）最重要 ，我们以“身材管理”这个业务场景为例，演练一下指标体系的搭建过程。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/50/v2-78f8b157796bbfaee4704053cca70afb_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-78f8b157796bbfaee4704053cca70afb_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic2.zhimg.com/v2-78f8b157796bbfaee4704053cca70afb_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic3.zhimg.com/50/v2-78f8b157796bbfaee4704053cca70afb_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;图4：身材管理指标体系案例 （1/2）&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/50/v2-c656f26d062f5a028bad8bd1fd87559c_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-c656f26d062f5a028bad8bd1fd87559c_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-c656f26d062f5a028bad8bd1fd87559c_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic2.zhimg.com/50/v2-c656f26d062f5a028bad8bd1fd87559c_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;图5：身材管理指标体系案例 （2/2）&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB%E8%AF%A5%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{指标体系该怎么用？}}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;以上简单回答了数据同学的4个问题：搭建指标体系的原因、标体系的定义与组成、搭建的方法、衡量的标准。&lt;/p&gt;&lt;p&gt;现在来回答业务岗、综合管理岗位同学关心的问题：指标体系能帮助组织做什么？该怎么用？&lt;/p&gt;&lt;p&gt;&lt;b&gt;一个好的指标体系&lt;/b&gt;对于组织而言，可以是一把统一沟通语言的&lt;b&gt;尺子&lt;/b&gt;，可以是一台统一方向的&lt;b&gt;司南&lt;/b&gt;，可以是一个持续发现问题、预警风险的&lt;b&gt;智库&lt;/b&gt;。&lt;/p&gt;&lt;figure data-size=&quot;normal&quot;&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/50/v2-e3d1fd4bd94cf45bde06e5f699bb10a4_720w.jpg?source=1940ef5c&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1926&quot; data-rawheight=&quot;1242&quot; class=&quot;origin_image zh-lightbox-thumb&quot; data-original=&quot;https://pic1.zhimg.com/v2-e3d1fd4bd94cf45bde06e5f699bb10a4_r.jpg?source=1940ef5c&quot;/&gt;&lt;/noscript&gt;&lt;img src=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1926&quot; data-rawheight=&quot;1242&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; data-original=&quot;https://pic1.zhimg.com/v2-e3d1fd4bd94cf45bde06e5f699bb10a4_r.jpg?source=1940ef5c&quot; data-actualsrc=&quot;https://pic3.zhimg.com/50/v2-e3d1fd4bd94cf45bde06e5f699bb10a4_720w.jpg?source=1940ef5c&quot;/&gt;&lt;figcaption&gt;【图6：指标体系的用法】&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;尺子&lt;/b&gt;：当团队使用一套指标体系时，就可以统一度量衡，减少转化、翻译（口径解释）等工作，降低组织内的沟通成本。承载的工具有：元指标模型、元数据模型、指标管理系统等。&lt;/li&gt;&lt;li&gt;&lt;b&gt;司南&lt;/b&gt;：当团队使用一套指标体系，开展工作时，就能聚焦工作目标。当指标体系内的各层级指标&lt;sup data-text=&quot;核心指标、运营指标、过程指标、监控指标&quot; data-url=&quot;&quot; data-numero=&quot;6&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;核心指标、运营指标、过程指标、监控指标&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_6_0&quot; href=&quot;#ref_6&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt;间建立起了清晰的关系，就能从指标体系出发，明确工作重点。承载的工具有：KPI指标体系、ORK指标体系等。&lt;/li&gt;&lt;li&gt;&lt;b&gt;智库&lt;/b&gt;：当一套指标体系，有了清晰且充足的使用指南，并且在组织内有一套可运行的信息反馈机制时，这套指标体系就能够持续的发现问题、预警风险。决策者就能做到“谋定而后动，知止而有得。”承载的工具有：&lt;u&gt;指标分析方法&lt;/u&gt;、信息反馈机制等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以如果你是一块业务/团队的责任人，当你觉得团队之间沟通成本高的时候，当你觉得团队内的同学对业务发展方向不明确的时候，当你觉得缺乏有效的、足量的信息的输入的时候，都可以考虑一下——“指标体系”这个工具能否帮助你解决这个问题。&lt;/p&gt;&lt;blockquote&gt;补充这部分内容的主要原因是，听到身边朋友们的一些讨论：&lt;br/&gt;● “数据组设计了一堆指标，但是那么多指标，该怎么用呢？哪个重要呢？”&lt;br/&gt;● “我们公司其实挺数据驱动的。但同样一个故障问题，我们团队可能使用的是A指标，因为要体现因素1、因素2、因素3的变化。而小贾团队也不知道出于什么考虑，用的是B指标。每次会议上一旦意见不同意，就要为指标、口径的问题撕扯半天。”&lt;br/&gt;● “我们知道数据很重要，但是有了数据指标，不代表就是有了好的产品。某个指标变好，也不意味着产品体验就更好。”&lt;br/&gt;其中有产品经理、服务运营经理岗位的同学，也有销售企划岗位的同学，等等。&lt;br/&gt;听到这些声音，好好就在反思：设计“指标体系”这个产品的时候，有没有考虑到用户的体验？他们在工作中遇到了哪些问题？哪些问题是“指标体系”这个工具能够帮助他们解决的？怎么样帮他们解决？&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7B%233447B3%7D%7B%5Ctexttt%7B%E5%B0%8F%E7%BB%93%E4%B8%80%E4%B8%8B%EF%BD%9E%7D%7D%5C%5C&quot; alt=&quot;\color{#3447B3}{\texttt{小结一下～}}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;建立指标体系的目的&lt;/b&gt;：获取全局性的、有体系性的信息；进而通过这些信息去驱动业务的发展，达成组织目标。&lt;/li&gt;&lt;li&gt;&lt;b&gt;指标体系的本质&lt;/b&gt;：指标库 + 关联关系 + 使用指南。&lt;/li&gt;&lt;li&gt;&lt;b&gt;评价指标体系的标准&lt;/b&gt;：一套好的指标体系，应该能够帮助我们实现4个目标：描述现状、洞察原因、预判未来、改善未来&lt;sup data-text=&quot;找到某些人去做某些事&quot; data-url=&quot;&quot; data-numero=&quot;7&quot; data-draft-node=&quot;inline&quot; data-draft-type=&quot;reference&quot; data-tooltip=&quot;找到某些人去做某些事&quot; data-tooltip-preset=&quot;white&quot; data-tooltip-classname=&quot;ztext-referene-tooltip&quot;&gt;&lt;a id=&quot;ref_7_0&quot; href=&quot;#ref_7&quot; data-reference-link=&quot;true&quot; aria-labelledby=&quot;ref_7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;&lt;li&gt;&lt;b&gt;搭建指标体系的过程&lt;/b&gt;：搭建指标体系的过程可以分为横纵两个方向；纵向是“深入的理解业务”；横向是“工作流”，分为4个步骤：理解业务、量化业务、建立体系、交付资产。&lt;/li&gt;&lt;li&gt;&lt;b&gt;指标体系对组织的作用&lt;/b&gt;：一把尺子（统一语言）、一台司南（统一方向）、一个智库（收集信息提炼价值）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7Bmediumslateblue%7D%7B%5Ctexttt%7B%E5%A6%82%E6%9E%9C%E6%82%A8%E6%84%9F%E8%A7%89%E6%9C%89%E5%B8%AE%E5%8A%A9%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%B5%9E%E5%90%8C%E4%B8%80%E4%B8%8B~+%7D%7D%5C%5C&quot; alt=&quot;\color{mediumslateblue}{\texttt{如果您感觉有帮助的话，可以赞同一下~ }}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Ccolor%7Bmediumslateblue%7D%7B%5Ctexttt%7B%E6%9B%B4%E5%A4%9A%E5%B9%B2%E8%B4%A7%E5%86%85%E5%AE%B9%EF%BC%8C%E8%AF%B7%E5%85%B3%E6%B3%A8%E2%80%9C%E5%A5%BD%E5%A5%BD%E7%9A%84%E5%88%86%E6%9E%90%E5%B8%88%E2%80%9D~+%7D%7D%5C%5C&quot; alt=&quot;\color{mediumslateblue}{\texttt{更多干货内容，请关注“好好的分析师”~ }}\\&quot; eeimg=&quot;1&quot;/&gt; &lt;/p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/161075239&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic4.zhimg.com/v2-b9f94eba1ba03edfcc37ff5e835e96eb_180x120.jpg&quot; data-image-width=&quot;433&quot; data-image-height=&quot;249&quot; data-text=&quot;好好的分析师：告别好人卡：从界定问题开始做数据分析&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/412914084&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-1026f2615d35c30e986d248cb84197e6_180x120.jpg&quot; data-image-width=&quot;1280&quot; data-image-height=&quot;464&quot; data-text=&quot;好好的分析师：《如何进行指标监控：一量三比》&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/399959450&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic2.zhimg.com/v2-6d109b0d1a157350cc56ded80ec8fdd1_180x120.jpg&quot; data-image-width=&quot;1526&quot; data-image-height=&quot;729&quot; data-text=&quot;好好的分析师：《指标设计方法》&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://zhuanlan.zhihu.com/p/402848649&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-9b947e0106fc465c1df53cb97f93f1b2_180x120.jpg&quot; data-image-width=&quot;2560&quot; data-image-height=&quot;1301&quot; data-text=&quot;好好的分析师：《如何搭建一套指标体系？》&quot; class=&quot;LinkCard new&quot;&gt;&lt;span class=&quot;LinkCard-contents&quot;&gt;&lt;span class=&quot;LinkCard-title loading&quot; data-text=&quot;true&quot;/&gt;&lt;span class=&quot;LinkCard-desc loading&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;LinkCard-image LinkCard-image--default&quot;/&gt;&lt;/a&gt;&lt;p/&gt;&lt;h2&gt;参考&lt;/h2&gt;&lt;ol class=&quot;ReferenceList&quot;&gt;&lt;li id=&quot;ref_1&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_1_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;我们从论证必要性的角度出发，去论证重要性。&lt;/span&gt;&lt;/li&gt;&lt;li id=&quot;ref_2&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_2_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;为了避免引入新指标，这里没有使用利润率的概念。&lt;/span&gt;&lt;/li&gt;&lt;li id=&quot;ref_3&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_3_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/%E5%88%86%E6%9E%90%E7%98%AB%E7%97%AA&quot; class=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://wiki.mbalib.com/wiki/%E5%88%86%E6%9E%90%E7%98%AB%E7%97%AA&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;ref_4&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_4_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;well begun is half done.&lt;/span&gt;&lt;/li&gt;&lt;li id=&quot;ref_5&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_5_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;例如：医疗险，其他第三方为医院；车险，其他第三方为交警、4S店、事故干系人等。&lt;/span&gt;&lt;/li&gt;&lt;li id=&quot;ref_6&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_6_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;核心指标、运营指标、过程指标、监控指标&lt;/span&gt;&lt;/li&gt;&lt;li id=&quot;ref_7&quot; tabindex=&quot;0&quot;&gt;&lt;a class=&quot;ReferenceList-backLink&quot; href=&quot;#ref_7_0&quot; aria-label=&quot;back&quot; data-reference-link=&quot;true&quot;&gt;^&lt;/a&gt;&lt;span&gt;找到某些人去做某些事&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>fbd27067b5eb8a7cf2ac5cc9bb451874</guid>
<title>云原生的前世今生（一）</title>
<link>https://toutiao.io/k/e86tuah</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;读完本文需要 5 分钟。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;前言&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;博主20年4月转岗到阿里云，从事工业智能制造方向的后端研发，由于工作中需要解决不同客户现场的异构环境和多云环境（公有云、私有云、混合云）下的部署问题，所以一直在探索和实践云原生相关技术。&lt;/p&gt;&lt;p&gt;云原生一词近几年热度非常高，经常会有读者问我：云原生到底是什么？它跟传统的架构有什么区别？它能在哪些场景应用？它能带来什么价值？我该不该投入精力去学习它？等等…&lt;/p&gt;&lt;p&gt;趁着国庆假期跟大家好好聊聊这个话题，首先分享一篇科普文《云原生的前世今生（一）》，后续还会继续分享自己对云原生的理解，以及在日常工作中关于云原生的实践经验，希望能给大家带来启发~&lt;/p&gt;&lt;h3&gt;&lt;span&gt;云原生的起源 Pivotal&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Pivotal 公司是敏捷开发领域的领导者（曾经 Google 也是其客户），出生名门（EMC、VMware等投资）。它推出了 Pivotal Cloud Foundry（2011 ~ 2013 PAAS 界网红）和 Spring 生态系列框架，是云原生的先驱者和探路者。&lt;/p&gt;&lt;p&gt;2013年，Pivotal 公司的技术经理 Matt Stine 首次提出云原生（Cloud Native）的概念。&lt;/p&gt;&lt;p&gt;2015年，Matt Stine 在《Migrating to Cloud Native Application Architectures - 迁移到云原生应用架构》小册子中定义了符合云原生架构的几个特征：&lt;/p&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;符合12模式（Twelve-Factor App）：云原生应用架构的模式集合&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微服务架构（Microservices）：独立部署的服务，一次只做一件事&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自助服务敏捷基础设施（Self-Service Agile Infrastructure）：用于快速、可重复和一致地提供应用环境和服务的平台&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;面向API接口的通信（API-based Collaboration）：服务之间的交互基于接口，而不是本地方法调用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;抗脆弱性（Anti-Fragility）：系统能抵御高负载&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;https://www.mattstine.com/publication/migrating-to-cloud-native/&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2017年，Matt Stine 在接受 InfoQ 采访时，对云 Cloud Native Architecture 的定义做了小幅调整，具体有以下六个特质：&lt;/p&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模块化（Modularity）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可观测性（Observability）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可部署性（Deployability）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可测试性（Testability）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可处理性（Disposability）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可替代性（Replaceability）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;https://www.infoq.com/articles/cloud-native-panel/&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2019年，VMware Tanzu 收购了 Pivotal，其官网给出了云原生最新定义，以及云原生的架构原则：&lt;/p&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;云原生是一种利用云计算交付模型的优势来构建和运行应用程序的方法论。当企业使用云原生架构开发和运维应用程序时，它们能更快速地响应客户需求将新想法推向市场。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;虽然公共云影响了几乎所有行业对于基础设施的思维模式，但类似云的交付并不仅限于公共环境。云原生的开发同时适合公共云和私有云，你只需要关心应用程序是如何创建和部署，无需理会在哪部署。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更重要的是能够为开发人员提供按需访问计算能力以及现代数据和应用程序服务。云原生开发融合了 DevOps、连续交付、微服务和容器。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;云原生架构原则：DevOps、Microservices、Containers、Security&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;https://tanzu.vmware.com/cloud-native&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;span&gt;云原生的发展 CNCF&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;CNCF（Cloud Native Computing Foundation，云原生计算基金会），是由开源基础设施界的翘楚 Google、RedHat 等公司共同牵头发起的一个基金会组织，其目的非常明确，就是为了对抗当时大红大紫的 Docker 公司在容器圈一家独大的局面。CNCF 通过 Kubernetes 项目在开源社区编排领域一骑绝尘，之后就扛起了云原生定义和推广的大旗，风光无限。&lt;/p&gt;&lt;p&gt;2015年，Google 主旨在于打击 Docker，因此它对云原生的定义还比较狭隘，包括如下三个方面：&lt;/p&gt;&lt;blockquote/&gt;&lt;p&gt;2018年，被称为云原生元年，大量科技公司开始接受云原生的概念，并纷纷加入到云原生的大家庭。此外，主流云计算供应商相继加入 CNCF，持续丰富整个云原生的生态。CNCF 对云原生重新进行了定义（并大大扩展了云原生的外延）：&lt;/p&gt;&lt;blockquote&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;云原生计算基金会（CNCF）致力于培育和维护一个厂商中立的开源生态系统，来推广云原生技术。我们通过将最前沿的模式民主化，让这些创新为大众所用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;https://github.com/cncf/toc/blob/main/DEFINITION.md&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2021年，已经有几百家企业和机构加入 CNCF 参与云原生的建设，其中不乏亚马逊、微软、思科、华为、阿里云等大型科技公司。截止到目前（2021年10月），CNCF 已毕业的项目有16个，孵化中的项目有23个。以下是 CNCF 全景图：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.5486166007905139&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6qtpUicKafdEjETB4dopR7Y2dyA7KY2vXN2FCIJOr0QNdOrVfVhu7a26XOHOODhGRzT99EVTyXdpjib7X6vUziamw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2530&quot; title=&quot;image.png&quot;/&gt;&lt;figcaption&gt;CNCF 全景图&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;https://landscape.cncf.io，持续更新中…&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;CNCF 为了帮助企业和机构在复杂的基础架构之上更好落地云原生应用，从整体上给出了十个具体实施步骤，在不同的步骤都可以结合 Landscape 中列出的产品或服务进行选择。以下是 CNCF 给出的云原生实践路线图：&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;1.1592592592592592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6qtpUicKafdEjETB4dopR7Y2dyA7KY2vX5Kf3hCDoBicibK3En2MH0xUJWic6fnT8K9ibKWib3QSUASILzSgBxUUpxJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;CNCF_TrailMap_latest.png&quot;/&gt;&lt;figcaption&gt;CNCF 路线图&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;https://github.com/cncf/landscape，持续更新中，中文翻译如下：&lt;/p&gt;&lt;/blockquote&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.9046296296296297&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6qtpUicKafdEjETB4dopR7Y2dyA7KY2vXrYOPCzq7qRyuagwmYaia2GcIT54QeAXwCqB75j8MdVDC1hSIsLicBvRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; title=&quot;image.png&quot;/&gt;&lt;figcaption&gt;CNCF 路线图（中文）&lt;/figcaption&gt;&lt;/figure&gt;&lt;br/&gt;有了如此详尽的云原生实践路线图，相信每个开发者都能轻松的构建自己的云原生应用。&lt;h3&gt;&lt;span&gt;小结&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;p&gt;随着云原生生态和边界不断的扩大，云原生的定义一直在变化。不同的公司（Pivotal &amp;amp; CNCF）不同的人对它有不同的定义，同一家公司在不同的时间阶段对云原生的定义也不一样。根据摩尔定律推断，未来云原生的定义肯定还会继续变化。&lt;/p&gt;&lt;p&gt;我们不妨跳出技术层面，尝试用组织和立场的角度来分析下 Pivotal 和 CNCF 这两家公司：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Pivotal 定位于 PaaS 层端到端的解决方案及数字化转型，从文化、流程、方法论、蓝图规划、软件开发方式等，都有一套模式，主要用户是传统大中型企业 CIO，整体策略是自顶向下；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;CNCF 立足于整个云计算生态和技术创新、变革者，偏重于技术、工具链和底层基础设施，主要用户是开源社区的开发者、互联网及新兴企业，影响力可想而知，整体策略是自底向上；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;结论：Pivotal 是 Cloud Native 概念和方法论的先行者， CNCF 是 Cloud Native 的最佳实践者。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不管云原生的定义如何变化，其本质还是帮助开发者和企业，如何在复杂的基础架构之上，保证松耦合的系统能够更好地被监控和管理。云原生的生态应用也越来越枝繁叶茂，相信在不久的将来，会有更多伟大的科技落地在我们的身边，影响到我们的每一个人。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;参考&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://zhuanlan.zhihu.com/p/152430776&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://www.wenjiangs.com/doc/nicwvs6u&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;https://blog.csdn.net/liumiaocn/article/details/100653635&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1d0bb91f7bf0e2cadd7d09534b4356e1</guid>
<title>t-io 网络编程基础知识介绍</title>
<link>https://toutiao.io/k/nph0wqa</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;container app-preview post-body&quot;&gt;
  &lt;div class=&quot;preview&quot;&gt;&lt;p&gt;一、应用层和传输层
以http协议为例，我们在访问一个网站时，浏览器会通过TCP协议发送如下字符串到服务器的应用层：
GET /test/abtest HTTP/1.1
Host: 127.0.0.1
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/64.0.3282.186 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,&lt;em&gt;/&lt;/em&gt;;q=0.8
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
Cookie: PHPSESSID=970260278652571648
程序调试截图(tio的HttpRequest.toString())
&lt;img src=&quot;https://img.toutiao.io/attachment/431046c9f5a54d95acd7b77744bf87ee/w600&quot; alt=&quot;file&quot;/&gt;
这些字符串就是应用层数据，应用层数据是按照一定格式来组织的，这个格式就是应用层协议，譬如http协议。
传输层在往应用层传递数据时，并不保证每次传递的数据是一个完整的应用层数据包（以http协议为例，就是并不保证应用层收到的数据刚好可以组成一个http包），这就是我们经常提到的半包和粘包。传输层只负责传递byte[]数据，应用层需要自己对byte[]数据进行解码，以http协议为例，就是把byte[]解码成http协议格式的字符串。
具体请参考：&lt;a href=&quot;https://www.tiocloud.com/doc/tio/80&quot;&gt;https://www.tiocloud.com/doc/tio/80&lt;/a&gt;
二、ByteBuffer
引言
ByteBuffer是nio/aio编程所必须掌握的一个数据结构，也是掌握tio所必须要学会的基础知识。
设想你不懂Map，不懂List，不懂Set，那么你在编程领域将会一事无成，同样的道理，如果你不懂ByteBuffer，你无法在nio/aio编程领域立足
初识ByteBuffer
我们可以把bytebuffer理解成如下几个属性组成的一个数据结构
byte[] bytes: 用来存储数据
int capacity: 用来表示bytes的容量，那么可以想像capacity就等于bytes.size()，此值在初始化bytes后，是不可变的。
int limit: 用来表示bytes实际装了多少数据，可以容易想像得到limit &amp;lt;= capacity，此值是可灵活变动的
int position: 用来表示在哪个位置开始往bytes写数据或是读数据，此值是可灵活变动的
一图感知一下ByteBuffer
&lt;img src=&quot;https://img.toutiao.io/attachment/7ae347a43aa84b97830b54cb92bc8145/w600&quot; alt=&quot;file&quot;/&gt;
具体请参考：&lt;a href=&quot;https://www.tiocloud.com/doc/tio/83&quot;&gt;https://www.tiocloud.com/doc/tio/83&lt;/a&gt;
创建ByteBuffer
ByteBuffer.allocate(int cap)即可创建一个指定容器大小的ByteBuffer，见图
&lt;img src=&quot;https://img.toutiao.io/attachment/debe80bbe1f94a9e9c7f023d84ef9b87/w600&quot; alt=&quot;file&quot;/&gt;
往ByteBuffer中写入数据
调用ByteBuffer.put(byte b)即可ByteBuffer中写入一个字节，见图
&lt;img src=&quot;https://img.toutiao.io/attachment/4c90d2f5021f4aee930b90e67305ead0/w600&quot; alt=&quot;file&quot;/&gt;
从ByteBuffer读取数据
对于刚刚写好的bytebuffer，我们要读取它的内容，需要先设置一下position和limit，否则读的位置就不对
&lt;img src=&quot;https://img.toutiao.io/attachment/ce71d64b2aae44a59b87aa433d465036/w600&quot; alt=&quot;file&quot;/&gt;
接下来调用ByteBuffer.get()即可读取一个字节，在读取数据的同时，ByteBuffer的position也会跟关位移，见图
&lt;img src=&quot;https://img.toutiao.io/attachment/69caa31c11904ff3ae6b6aa74a2a9574/w600&quot; alt=&quot;file&quot;/&gt;
三、半包和粘包：正确断句才能沟通
半包
顾名思义，就是收到了半个包，这个时候不足以组成一个应用层的包。就像你要对你喜欢的人说“我喜欢你”，但是因为喝水咽着了，第一次只说了“我”字，第二次说了个“喜”字，第三个次了个“欢你”，那么就发生了半包问题，对方只有等待你说完这4个字后才知道你是想说“我喜欢你”！
用http协议为例，展示半包场景
&lt;img src=&quot;https://img.toutiao.io/attachment/0ae5dc6265ea4cecaabce57ccfd716a5/w600&quot; alt=&quot;file&quot;/&gt;
粘包
粘包与半包相反，就是把多个想说的话，一口气说完了，对方反应不过来，得把你的话拆开一条一条地理解
用http协议为例，展示粘包场景
&lt;img src=&quot;https://img.toutiao.io/attachment/c0efb94256354ea3b3bd9139487b34c3/w600&quot; alt=&quot;file&quot;/&gt;
说明：http协议是一来一回的，所以正常场景是不会有粘包的，但pipeline模式下是允许一方连续发多个请求的，所以会有粘包产生&lt;/p&gt;

&lt;p&gt;为何坑人无数
初涉网络编程的同学，往往认为每次收到的数据刚好是一个完整的数据包&lt;/p&gt;

&lt;p&gt;于是当网络不好，或是消息包过大时，半包的情况就发生了，而程序并没有考虑到半包的情况，结果就是解码失败，导致消息丢失&lt;/p&gt;

&lt;p&gt;当通信的对方把多条业务数据包放在一个TCP包中发过来时，粘包就产生了，而程序没有考虑到一次TCP收包会收到多个业务包，从而解析到第一个业务包后把后面的业务包丢弃了&lt;/p&gt;

&lt;p&gt;百度一下半包粘包，一定会搜到很多记录，这也证明这俩货确实坑人无数，所以看完本节内容，你还会继续犯半包粘包的错吗？
具体请参考：&lt;a href=&quot;https://www.tiocloud.com/doc/tio/84&quot;&gt;https://www.tiocloud.com/doc/tio/84&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>