<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>08a496a975c7f5bb5f4e8601c12d5964</guid>
<title>架构师之路，我看过的三本书，高分</title>
<link>https://toutiao.io/k/gjjzh38</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前我写过几篇架构师、架构设计相关的文章。说实话，想通过几篇文章就把架构师的方方面面说明白，挺难的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这可能需要一系列的文章，今天就给大家安排了这篇文章。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;很多程序员都有和下面类似的困惑：&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;为什么很多程序员成不了架构师？&lt;/p&gt;&lt;p&gt;高级程序员和架构师之间有什么区别？&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我认为，架构师和高级程序员最主要的区别在于，两者之间的思想维度上。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我举个例子，假如现在有个需求：公司想要做一套直播卖货的系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;产品需求给出来了，在我成为架构师之前，作为程序员的我会怎么想？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的想法可能是最简单直接的：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;需求中的礼物打赏如何实现&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;是不是得有房间&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;房间的逻辑是如何实现的&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;滚屏弹幕该怎么落地&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，作为程序员，我的第一反应是：业务如何转化为技术，各种业务功能是如何用技术实现的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么，在我做过架构师之后，我会怎么想呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是我牵头负责这个，除了这些业务转成技术的问题，我还需要思考如下问题：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;架构用单体还是微服务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通信方式都有哪些&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;中间件选哪些比较好&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;普通存储和多媒体存储该如何规划&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;应该选什么样的架构风格&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可靠性，弹性，可用性该怎么保障&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开发成本、部署成本、维护成本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;成本与系统性能的折中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;……&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上，只是架构师典型思考的几个宏观问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，在一套系统中，架构师不仅仅只是思考这些宏观问题而已。更会深入细节，去解决各种层次的技术难题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到直播问题上，架构师还必须去解决一系列技术难题，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;直播的卡顿问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;通信协议的优化问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;各种中间件的优化问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存储的一致性问题&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;总的来说，一名程序员，他的思维往往是自下而上的，就是先思考功能实现，再根据功能实现去理解整个系统的运行机制。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而一名架构师，他的思维往往是自上而下、自下而上相结合的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;他本能的就会先去想系统的架构，根据系统的架构，再去根据架构的雏形，去根据各个业务定出业务模块之间的通信方法，再根据通信方法去理解各个业务模块的耦合，去想着一些代码实现难题，最后去完整的理顺整个系统的技术实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以，一名程序员想要成长为一名合格的架构师，必须经过思维的转变。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这种转变，需要多读一些好书，让这些书中的知识，来对个人的思维进行一次大清洗，从而使得这种转变更加容易和更加准确。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我在这里想推荐 3 本书，这 3 本书能让程序员们对架构师的工作先有个初步的了解，从而让他们能对架构的思维略窥门径。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;1.《架构师修炼之道》&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要转成架构师思维，首先得知道架构师是如何思考问题的，当业务人员给出具体的需求之后，架构师们是如何根据需求去做对应的设计和分析的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此，我推荐先可以看看《架构师修炼之道》这本书。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4064625850340136&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KS5nhg8jBVVTsRfe3F3fAyGnyX8tx4gUPib0eHE8D5HwUXdH8Lo57e4C2icicoNttHy5n8JkTYoWVl6w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;588&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本书的英文版我其实也读过，自认为里面的所思所想，确实是我做架构时都考虑过的事情，甚至里面提及的一些思路，我自身都没考虑过。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本书，我认为可以作为程序员转架构师的第一本书：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;它起码会提醒程序员，从上到下思考系统架构，到底是怎样的一个思路。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;了解了架构师是如何从上而下的思考和设计系统架构的，初步对架构师的思维有了些许印象后，就需要找个师傅能全面带你一把，能通过走一遍架构师的工作流程，去开始尝试架构师工作入门，去通过实践，一点点的让这些思维形成习惯。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;2.《从零开始学架构》&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这个师傅我认为是《从零开始学架构》这本书。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2938144329896908&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KS5nhg8jBVVTsRfe3F3fAyGZZQ4WCZJxVdQWt7YdicHVJLMHt4Ip8kAEUoWr37NHWlXXMdHSglNiaeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;388&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本书读起来非常快，读的也很过瘾，是我看到的最贴近中国架构师日常实践的书。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书里面对架构师从设计到经常用的模式，以及对应的理论都做了介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;尤其是架构设计中的一些重要的大坑，和架构师重要的取舍思想都做了清晰的介绍，非常适合帮助实践入门，对程序员的技能提升有肉眼可见的帮助。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;书的作者李运华还在极客时间出了对应于这本书的课。前几天有读者在群里问这门课，我当时还没反应过来，只是觉得名字耳熟，写这篇文章的时候才想起来。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不过，我本人没订过他的课，听同事讲，说的不错，和他写的书形成了有效的互补。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;3.《Thinking Architecturally》&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我前面说的两本中文书，缺少了很重要的一部分，就是&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;架构师是对新技术是如何调研和学习的。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;架构师引入新技术，也是架构师工作很重要的部分。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这方面的书，我读过的极其出色的一本就是《Thinking Architecturally》。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/6nbNnibOq5KS5nhg8jBVVTsRfe3F3fAyGWtBkoQazP3V8zvP5huqDm66aZ3hemKKbKVrGm8ROACibjl8qIVPAibgw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;620&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只是可惜这本书是英文书。不过，我始终认为，作为 IT 行业的程序员，英语还是重要的，国内引进的优秀技术书籍毕竟有限，很多优秀的书籍因为语言问题，从而错失品鉴的机会，非常可惜。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本书介绍了怎么评估新工具、新技术，包括新技术引入后的一些注意事项，介绍的都非常详细。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以说，从我读过这本书以后，看新技术、学新技术、引入新技术都有了坚实的理论基础。不仅如此，读了这本书以后，我甚至引入新技术后，风险的预估能力都提升了非常多。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而且更难得的是，这本书写的十分通俗易懂，也不需要太多的技术门槛。也强烈推荐入门阅读。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上 3 本书，我认为对一名打算将来进阶成为架构师的程序员，作为入门的引导，以及寻找后面努力的方向是非常足够了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;要知道，架构师不仅仅是个工作，同时也代表着各种各样的更高阶的技术能力，而要提升能力之前，先拥有一套全局的架构师思维，知道架构师都做什么事情，从而能得到努力前进的方向，是极其重要的第一步。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;迈出这一步之后，你就会明白，什么架构模式、架构设计、各种原理，都是以架构师的思维为基础的工具。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;希望大家能把 3 本书好好学一遍，把通往架构师的路走的更加坚实。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;原创不易，希望得到你的&lt;strong&gt;三连支持&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ps. 感谢你看到最后，有惊喜！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家都知道四哥我宠粉，我特意找了前两本书的电子版，如果想获取，可以在公众号后台回复：&lt;span&gt;&lt;strong&gt;架构师&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;你好，我是四猿外。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;一家上市公司的技术总监，管理的技术团队一百余人。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我从一名非计算机专业的毕业生，转行到程序员，一路打拼，一路成长。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我会通过公众号，&lt;br/&gt;把自己的成长故事写成文章，&lt;br/&gt;把枯燥的技术文章写成故事。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我建了一个读者交流群，里面大部分是程序员，一起聊技术、工作、八卦。欢迎加我微信，拉你入群。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.9852216748768473&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/6nbNnibOq5KQibCDibpTo0kqofPehQvDDibibcb3bQUELdY3Knsl4r0RcgsV9l4icr3icmZQfaBXtSFNTxmdQlAZT1OQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;609&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>d815bb6d8d90af09a039f0c37cea28f7</guid>
<title>90% 企业都适用，搭建性能监控体系照抄就行</title>
<link>https://toutiao.io/k/9d40ik2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzkwOTIxNDQ3OA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ufWcjcomw8YRIaicYx5pzj5Cxwick8DamnOgbTJu96QTibKyHEDZt1815yOV1r27oZ6HgoYTEYWYLRz4jIV4iasHgg/0?wx_fmt=png&quot; data-nickname=&quot;dbaplus社群&quot; data-alias=&quot;dbaplus&quot; data-signature=&quot;围绕Database、BigData、AIOps的企业级专业社群。资深大咖、技术干货，每天精品原创文章推送，每周线上技术分享，每月线下技术沙龙，每季度Gdevops&amp;amp;DAMS行业大会.&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-id=&quot;7&quot; data-tools=&quot;135编辑器&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文根据&lt;strong&gt;&lt;span&gt;赵宇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;老师在〖deeplus直播第269期〗线上分享演讲内容整理而成。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;（文末有回放的方式，不要错过）&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;39&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8Z1Qp6GEW6c3QyEviaibzd2JuewL7YFoe9yKdgLAlV1iciaRibFeqmhWuic7pDgh2WjGfwu0KLXEyAuGESQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;赵宇&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;哈啰出行 平台前端负责人&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;一、背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ3pKSbv0cd6ib77VHktazW7KRh4GR0qJiaUF6LSFpGlfBbEFpib5y9MZeg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哈啰是一家相对比较年轻的公司，在创业中期，哈啰经历了公司业务量高速增长，同时横向的业务种类也经历了高速扩张的时期。在这样的大背景下，整个前端的一些性能在迭代之后衰减得非常严重，而性能问题又影响到了整体的用户体验，同时排查这些性能问题非常耗时，而且难以定量，于是这些问题阻塞了整个业务的迭代，对公司业务的高速增长造成了非常重大的影响。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在本次分享中，我们将聚焦以下几个问题并加以解决：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJktic6CM24q9mzOtZW7gokOf6yhF6p0JBbsknkP1yrLGvjMMXyVPcMvg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;二、性能优化流程&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;性能优化的流程整体上可以分成以下三步，不管怎么做，“万变不离其宗”，它整个的流程抽象起来就是以下这三步：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJYvrqwYibzlGa7WWAROxtb7guzx8RHPWuu2NmkJFcITLBu3PpdaLnh6g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对性能优化流程我们可以看出，其实它的出发点和最终归宿，都在于优化性能本身的一些指标。基于这个出发点，我们需要把这些指标都收集过来。而收集过来后就回到了刚刚我们的问题：为什么不能用性能测试的一些工具，而要去做一个性能监控的体系？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里主要是基于两个原因：第一，它本身性能监控的需求，也就是对于线上稳定性的一个诉求；第二，就在性能数据收集上，如果用性能测试工具去收集数据，可能它在实际的适用面不是特别全，而且并不能如实地反馈线上的情况。基于这些点我们想去做一个性能监控的体系。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;三、性能监控系统流程 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;整个性能监控平台这个系统，大致上我们可以分成以下三个流程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJeHgmKiaZdCIHnK36pHa9jkBZuvWLHId147lyDtfk3pqOb0QvZXuic1tg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这三个流程与上文的性能优化一样，都是一个抽象的流程。也就是说，不管怎么做性能监控的系统，它都脱离不开数据采集、数据清洗和聚合展示这三步。其中的差异点只在于：数据采集从哪采？怎么采？通过什么方式去采？数据清洗怎么清洗？怎样保持数据清洗的持续不出错、高可用？还有就是聚合展示怎么展示？从什么维度展示？只是这些细节有区别，但是它的整个大的流程是一样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于这个整体的流程我们再去细化一下，我们把这三大步的每一步都单独去细化它需要做的一些功能点，基于这些功能点及特点，我们再进一步细化它的整个架构。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1.数据采集&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;第一块我们先来看一下数据采集，数据采集大的的功能点主要包含以下四个模块：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里例举的是哈啰当时的一个场景，但在某些不同公司当时的业务场景下，缓存模块甚至是不需要的，上报模块跟缓存模块有时可能会融合在一起，只有一个最终的上报，即时获取即时上报。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;拼装这个模块在大部分场景下，当然我还是建议大家都去做数据的拼装，以便于不同平台数据的统一处理。而基于上文列的功能点，我们会得到一张整个数据采集端上的SDK架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ9CjLibe49Qs4WibTM4G3JiaibhnicAIIDygCfC2vzL6owkrTNfVoR1fm4Pg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在做性能监控时，大家在SDK设计上可能会把一些业务监控，或者说业务数据收集的功能也加到SDK当中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以它上下会分成几层，中间这一层的数据采集会包含一些常规的业务数据收集，当然其中有些数据可以在业务中被消费、使用，也可以在性能监控中作为整体的参考被收集、消费。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据采集之下，就是信息拼装、日志缓存和日志上传，这三块因为涉及到一些特别复杂的逻辑抽象问题，所以我们把它们从分成上作为一整块去处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据采集横向这一块还有一个无痕埋点，这个无痕埋点主要针对一些异常的收集。这些异常有部分是结合手动的埋点去收集，有部分则需要用AOP的形式去收集。最上层的是初始化数据，会针对不同的端去做一些API和SDK的封装。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1）信息获取&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完了SDK架构之后我们还需要看一下数据采集。分层完之后我们要去采集哪些信息？这边罗列了一些我们需要采集的部分信息：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;异常捕获&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;页面加载时间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;页面帧率&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;网络情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;原生方法调用情况&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要就是收集这五点信息，那么第一、二点信息具体要收集哪些内容呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①异常捕获&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常捕获中我们会去监听以下几种异常情况：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家结合实际的异常捕获的情况，可以去做实际的、针对自己场景和所碰到问题的针对性捕获。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②页面加载时间&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于页面加载时间，我们公司将其分成了几种数据活着说几种维度去做加载。分别是白屏时间、首屏时间、页面加载时长以及可操作加载时间四个方面：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就是页面加载时间所有关注的方面。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section label=&quot;Copyright © 2015 Yead All Rights Reserved.&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;注：重要性得分是新增元素得分相加再乘以它的权重&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2）信息拼装&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据采集完了之后，接下来就是数据的拼装。拼装的话我们会去做一些数据标准化的数据模型，如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJV2EXmK4p8hANLCOfibYH2UIYWhkeGdIiak7800NZ4xwkqKoD7VGMzicnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;①通用信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论情况下通用信息包含所有的数据采集，因为性能和业务都会有通用信息。一般通用信息包括以下几个内容：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;②业务信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在通用信息之后是业务信息。业务信息就是上文提到的性能，像页面加载时间、异常捕获到的异常信息，这些会放到业务信息里面。但它其实也是放在 Detail Properties字段里。业务信息里其实还是有一些相对比较通用的字段，比如说像  Businessid 、PageSessionid、Page Path之类的字段。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但在逻辑上它们更多的是跟当前页面，或者说相对来说可能要非抽象的这种业务关联，所以我们把它也归到业务信息里面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;③用户基础信息&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后一项是用户基础信息。用户基础信息理论上跟通用信息有些类似，所有的日志都会有用户基础信息，里面会记录用户，比如APP的名称、APP版本等。这个APP不一定是狭义上的 APP，我们的前端应用也是一个APP。把这些信息&lt;/span&gt;&lt;span&gt;填到日志头中&lt;/span&gt;&lt;span&gt;，包括一些操作系统相关的信息。&lt;/span&gt;&lt;span&gt;这对于后续做一些比如用户画像、错误归拢时会更方便一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3）缓存&amp;amp;上报&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在数据拼装完成之后，我们需要去做数据的缓存和上报。这里把它们放在一起去讲，是因为我们在模块设计的时候是把它们放到一起的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJsVBAt4bQKBcAZs4zhcEqKUsqGhNfibzdF2prutBhANfAOtKhG6URFLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图所示，SDK在启动时会先去异步读取缓存中的一些内容，如果接收到埋点就会把埋点读出来再发到发送区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没有读取到这些数据，就会先初步组装一些基础类型的数据，比如日志类型、上报类型等，并将它们存放在启动区，等待实际的日志埋点的信息收集进来，再进入到左边的发送区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;放到发送区之后，这里有一个灰度的数据。这其实是我们内部业务的一个逻辑，我们有部分的数据有一个灰度系统，灰度的这部分数据我们会把它单独摘出来，不会放到一起，所以这里是有一个过滤的过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;完全组装之后，我们把数据全部放到发送区，发送区会等待一个触发上报的策略，去触发器触发，触发完之后才会进行最终的上报。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJxz9QuibffsSrsHcFbAER3T7hC7nQNoQ9TjoeZTHUrr5OWgCO4opAgsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而这个触发其实也是有好几种策略的，比如时间触发，根据它的日志条数或者日志大小去做触发。那为什么要去做触发而不直接上报呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是基于以下几点考虑：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个是对于日志上报的服务来说，它的数据本身存在了一定的压力。如果我们每一条业务数据或者说错误数据都做及时上报，那这个服务存在的QPS不会非常高，因为我们所有的C端都接了数据上报。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外一点是，因为我们是作为一个公司通用的方案，所以有这个策略之后，不同的业务方根据它的业务场景，可以灵活地甄选更适合它业务场景的上报策略，比如说如果有一部分的错误数据或者性能数据，他们相对比较关注，或者业务的优先级特别高，他可以把上报策略调得更频繁，甚至做实时上报。而一些优先级不是特别高的业务，我们就可以把策略调低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是为了整体的服务治理以及从整个公司的通用性上考虑。在上报完之后，我们会把已上报的数据从发送区删除。采样跟上报还会有一点区别，采样是在数据上报清洗完之后，或者说清洗过程中，再去做的百分比的筛选。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而上报主要是针对前端的数据，直观地说就是：不是每收集到一部分数据就马上去上报，而是攒一部分数据之后再去做上报。发送成功之后，发送区会删除已经上报的部分数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果发送失败，我们会把已经上报的部分数据删除，并进入下一循环，等待下一次的触发。同时把 Error抛到 SDK外，让业务方去做额外处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就是整个的缓存上报流程。上文提到了一些上报策略，但这些策略并不是绝对的，整个流程，包括上报策略怎么定，可以根据每家公司、每个人碰到场景做额外定制。像目前的场景我们定了几种情况：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由此可见，这几条的优先级、上报方式其实都是可以灵活配置的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2.数据清洗&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;讲完上报策略，我们来看一下数据清洗。前面讲了数据采集的SD&lt;/span&gt;&lt;span&gt;K，在SDK上报完性能或错误数据之后，服务端这边，&lt;/span&gt;&lt;span&gt;理论上是到了一个HTTP的request去做上报。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个HTTP服务有一个上报的服务&lt;/span&gt;&lt;span&gt;，是一个Service，&lt;/span&gt;&lt;span&gt;我们这边是用Node来实现的。这是第一块，它包含日志上报服务，需要去承接接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ9Ds6BNwqUe6FC05jnhbQlQP0B6HWFMS9HHsVoD5BLjVp0q62ia6Gsdg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二块是日志的消息，服务上报了之后，我们会把它放到一个消息队列里面，放进消息队列里面之后，就需要去做日志的清洗，清洗完之后最终还要去做一个日志的存储，所以数据清洗就主要包括日志上报服务、日志消息、日志清洗服务和日志存储这四个模块。整体的清洗流程为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJjY7Iicbb2I1NuVhsciazfWEl6Y0c1OgcsT7OAiabwVDdXU6fJWkEmficTQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从下往上看，LogServer提供了一个日志上报的接口给前端调用，前端调用了接口之后会将日&lt;/span&gt;&lt;span&gt;志放到Kafka里，也就是上文提到的日志队列。&lt;/span&gt;&lt;span&gt;再往上走有一个Flink服务，专门做消息队列的消费和清洗，清洗完之后最早时会将它放到ES里面，后续我们将它迭代放到了Clickhouse上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Clickhouse中，我们会提供一些 DSL或者说SQL化的语句，然后让性能平台这边的Node服务去做数据的计算，计算完之后还是由Node服务将这些数据呈现给 PC、web、后台，让运营、技术去看这些具体的性能指标相关的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在图中右上部分有两个半透明框，是用户分析和数据分析，因为我们整个的数据清洗过程是复用的。除了性能平台，一些业务数据也是通过这个流程往上消费，只是它们的主题功能可能会有些不同，所以最终用户分析平台、数据分析平台也会复用这一套流程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Clickhouse是一个列式存储数据库，它的性能计算或者说横向相同字段的计算的性能是相当高的。但在使用过程中还是碰到了一些问题，比如为什么要用Flink + Clickhouse？原因有以下三个：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;速度快，性能类数据，取数计算1S内完成&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;方案成熟，部署 + 运维简单&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;关注指标⽀持 SQL描述，方便后续加工呈现&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过实践，上文所讲述的流程架构在后续治理上碰到了一些问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;脏数据开始增多 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;部分消息数据丢失&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;准确性和有效性验证&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于这些问题我们对流程做了一些小改进，这个改进目前在业界用的也是比较多的，如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJvRe5ExPf5HFibpJqWmacx3EXMzAwsCNInfUkgibqK4uNZdn85IG6mr4g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Flink消费时，除了往Clickhouse里写数据之外，还同时往Hive里写数据。为什么这么做呢？因为前面提到的问题绝大部分都是Kafka队列塞得太满，或者Kafka这个队列中间件出现问题，导致 Flink写入时突然卡住，那段时间的数据没有写入。数据没写入会导致后面的消费队列混乱、数据丢失。而且Flink写入 Clickhouse的速度是有限的，这会导致它后续跟不上，相当于恶性循环。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个时候我们引入了Hive，在Flink写入 Clickhouse的同时，有一个中间件去写入Hive。数据写入Hive之后，如果碰到Kafka故障或者 Flink故障的情况，中间通路不通，我们就会以小时为维度，把Clickhouse这段时间有脏数据的这部分数据全部删除，再从Hive导入这部分数据。如此Hive就能给Flink和Clickhouse做小时级容错,粗暴点讲就是两分备份。但是用Hive也是因为Flink写入Clickhouse的速度并不是太好，所以在这个地方给它做一个补全。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;3.聚合展示&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;数据清洗基本上讲到这里，接下来是性能监控系统的最后一个流程：聚合展示。聚合展示包含三个模块：展示平台、展示服务、定制处理/清洗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJB7x3zDXDicBEGulL56yToHau0gJRx9V41icfh1hnmYSrfr2zpX0Eo2cw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据清洗完之后，性能监控的Node服务会用SQL化的语句去做聚合运算，运算完之后它会去做最终展示，这里就需要一个展示平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时这个平台底下还需要一个展示服务。我们这边也是用Node展示服务，去给它做数据的运算、存储，可能还有部分元数据或者业务数据的存储和简单处理，处理完之后才会给到展示平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还有一个模块是定制的处理和清洗，前面提到的数据清洗其实是粗的清洗，比如说&lt;/span&gt;&lt;span&gt;非序列化的数据，我们根据相应的模型，把消息提取出来，将这些数据清洗成Clickhouse中的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们在聚合展示中会再去做一些定制化的清洗，举个例子&lt;/span&gt;&lt;span&gt;：比如像秒开率、白屏率之类的指标，拿过来元数据后可能会再去做进一步的计算和清洗，有部分数据则去做筛选、拆分，只拿到我们关注的数据，再把它传到我们自己的数据库中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它整体的业务架构是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJG5EdR4MjIhxP4B4k8AvwibFg1hgo3nIibSRic65EW9Yubypavib8G3ZhNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最上层是一个性能平台Web，横向还有用户分析平台和数据分析等。下一层是Node服务，这层服务除了有性能指标服务，也提供了LightHouse服务做动态分析，因为线上监控关注的是上线后，上线前我们在本地测的数据虽然不足以支撑完整的论据，但也还是需要的，所以我们也上线了一个Light House服务。另外还有其他取数的计算，比如上文提到的数据清洗之类的。再下一层的话，我们提供了Node相关的一些组件，这些组件大部分是跟数据存储、数据库调用相关的，技术架构这边会去封装成一个通用软件。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;横向的话我们接入了公司的监控告警服务。公司全站层面有一个统一的告警服务，我们只需要给出对应的指标让它去消费就能触发报警，所以没必要单独再搞一套监控告警服务。最底层的话上文提到的Clickhouse是作为数据源，同时我们还接入了PG组件，把一些业务数据和一些消费完、处理完、清洗完的最终数据也放到这个地方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJhGibBgFbGSsw1MWL8Lku4XRzf9MaB2qyCfv0ibORrB5ZnzVdKVpj6yAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是我们内部的监控平台的实际界面，因为是一个纯技术项目，所以没有过多的设计。更多关注的是功能层面的内容，虽然它的界面相对比较简单，但它实际的指标功能相对是比较全的。比如像实时数据、每日的报告以及一些分析工具，像是上文提到的 LightHouse，以及一些性能优化工具都包括在内。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;四、性能优化分析&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ1JZo2EX01265HVXBNfP88FpUw0ZoRnZjwf0jNZLtoMj7YgkB4B2YYA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是平台的一个事例图。在我们这边，针对某些页面，会有一个实时的、清洗完之后生成的一个页面在线上的平均表现图，中间有各种阶段，像DNS、html下载解析、动解析和渲染等。结合这个具体的例子，我们就可以清楚性能优化应该往哪些方向去做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在做性能优化之前，要根据实际情况去进行分析。比如上文的性能优化分析图中有各种不同阶段，在不同阶段，如果有的部分时间占比特别长，我们就可以有针对性地去做优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里简单讲一下整个系统优化大概的逻辑或者说思路，怎么去分析？怎样去做归集？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJJqCvMsuEdGIDaxSy0Be9rwouAIsP80O3Kibf2AaSxHsXT4TRebZuiaxQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果建连前时间特别长，可以通过DNS预获取的方式，去缩短建连前的时间。当然还能通过别的运营商介入的方式，但这样的话整体成本会非常高，不太适合在创业中期的时候去做。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;资源请求可以去上CDN+OSS缩短资源请求的时间。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;html文档和资源下载常规上我们会通过Webpack打包优化、离线包这种方案缩短它下载的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;解析DOM我们可以通过比如预渲染、SSR、ESR、NSR之类的方式。ESR目前业界虽说比较火，但我们目前并没有用上。而据我了解，真正能用到ESR的公司也不是特别多，因为它对CDN资源浪费还是比较多的。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;五、性能优化实践&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;哈啰这边有两个相对来说用的比较多的，同时像预渲染、离线包之类的做的还不错的整体通用化的性能优化实践方案。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;1.预渲染&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;预渲染在概念上跟SSR或ESR有一些相似，但又不太一样。SSR它是把接口请求或者说资源反复来回的时间省略了，同时它吐出的是后端支出。就是后端在全部的接口请求数据返回到服务端之后，服务端全部渲染完，再去吐出给前端。它节省的时间是来回通信的时间，但这会衍生出两个问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一是对后端资源的占用。大家也知道to C的业务像哈啰现在的用户数其实非常高，QPS会很高，如果说这种核心页面全部用SSR来处理的话，对于后端或者说 SSR服务的压力是比较大的，这会影响到公司整体这一块的高可用性和稳定性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二的话，因为它需要在所有的页面请求全部返回并渲染完之后才会吐出给前端，它的首屏时间并没有特别短，它真正提升的是整屏渲染完的时间，这个整屏渲染完的时间是非常快的。但它在首屏时间上并没有非常大的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而我们这边有很多的C端活动，包括核心业务的场景等。但在中期，我们并没有精力去做SSR这一块的事情，于是我们想用低成本的方式把首屏缩短。比如说像在这里的一个场景里：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJAD8LxeMhXaljcYUIX0RQks2nLal19eiaWjhMvHaWxLU8atjACqUvBWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;未启动预渲染时，某一个页面首屏时间特别长，白屏时间也特别长。这种场景我们想用低成本的方式将它优化，就借鉴了一下SSR或者说ESR的渲染机制或者说思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而我们做的事情比较简单粗暴。在预渲染应用中，我们的页面渲染是提前的，在打包过程中就已经完成了。完成了之后预渲染应用中会存在一个已经渲染完的页面，这个页面html下载完之后就能渲染，而渲染的过程同时会去做这个页面真正的CSS/JS下载、框架初始化和页面渲染。所以它在首屏和白屏上优势会非常大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ4rVAiaibYicPOniaWGvGU7BdbxeDkf6kMicPMqargPDKEV7nwlnHBpBnY5A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家可以看到中间这个页面渲染的节点，预渲染应用就已经渲染完成了，上面的页面需要把html 、CSS /JS、框架初始化全部走完，所以它在时间上会有很大的优势。它的整体流程如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJX9LsEbEFcuJ9icfaaR7UpeozIru1R58VWms8c4K4Of9jk7KkeBr7QMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在应用编译、部署阶段，我们的打包系统集成了这两个流程，在这一阶段，我们会启动一个无头浏览器去访问页面，访问完页面之后会记录下这个页面的渲染结果，然后生成渲染完的 html文件上传OSS。在不用采用离线包的情况下，相当于上传到OSS的html就是我们最终访问的预渲染产物。这个过程相当于我们在发布系统中也做了整体的集成，这样的话我们访问的速度就能更快。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但这里有一个衍生的问题，大家回头可以看一下，它第一个页面的渲染时间其实是提早了，但它最终实际能交互的页面的渲染时间却反而延后了。因为这中间多了一个html，也就是那个预渲染的页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以在场景上也是有一些选择的。前端性能优化其实很多时候都是一些场景的抉择，就跟 SSR和 CSR一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJ1KKsPsA2QSdHHgfYAdB3m9DVoXibeuWIfbRn3DRdagTHdjuXNTao8vA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们整体流程跟发布系统的交互基本是走发布系统，把发布系统的任务放到Jenkins中，Jenkins就会去执行服务中的预渲染，然后拉取OSS上的H5页面，再返回预渲染产物，同时会发布一个离线包。那这个离线包是什么东西呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在业界特别是APP场景下，离线包是相对来说比较常见的一个方案。因为前端的资源或者说加载瓶颈主要在于包的来回，SSR只是让请求的来回缩短，但是包的来回并没有减短，该返回多少东西还是返回多少东西，所以引入离线包是去解决这个问题的。这么做的好处有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;流程和系统间的交互简单。就像刚刚提到的SSR，类似这种方案会有比较多的系统间的交互，比如SSR服务就Node服务的请求和后端服务需要去做额外的基建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以基于发布系统去做降级和质量治理。当我们把整个的发布流程、离线包生成流程、预渲染服务生成的流程全部整合到一个发布系统中，最终它发布的产物会由发布系统来统一控制，你可以用预渲染服务，也可以不用预渲染服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;它两个东西其实是一个并存关系，比如说我上线之后，如果我觉得这个场景其他东西预渲染会有问题，我可以在发布系统中把预渲染给去掉，这时线上入口访问进来就会打到发布系统控制的一个入口上，这个入口有对应预渲染的开关，关了之后就不会走预渲染的请求，而是重新回到原来正常的请求里。这样的话整体的线上治理会比较方便，也比较灵活。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而提升效果相对来说SSR可能会更明显。因为我们关注的是白屏和首屏，白屏的话它的效果是非常明显的，几乎没有白屏。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外就是没有额外的负载压力和系统复杂度成本。不需要关注OI的系统复杂度，业务该怎么开发怎么开发，还是原来CSR那一套。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJvxBVE7JtFmcfDwYkyOUH3vHVdvmCcrYKxfqtvlmyHOoib3WEcuMS6fg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用了这一套之后首屏的时间缩短了一半多，变成了760ms，白屏没有了,出来就有界面。因为html加载完就是一个可渲染界面。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86152&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;span data-bgopacity=&quot;40%&quot;/&gt; &lt;span data-bgopacity=&quot;25%&quot;/&gt; &lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;2.离线包&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;离线包的话上文其实有提到一个基本流程，它在发布系统中也会包含。在这里离线包其实也有一个单独的开关，但离线包因为涉及到 APP端，所以它的开关是在native端去设置的。当然配置的地方都是在发布系统，但它消费或者说读取的地方会不一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJoaibYKnJ3uQTulIaryjuicz2cWYgCoPskgtn5KvpRnQ5qyx00O6CxuVw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在APP中进入一个页面之后，它会去检查是不是H5页面，如果是H5里面它就会去对应的URL请求，然后把离线包资源吐回去，没有资源的话就去远端再次获取，获取之后缓存在本地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-backh=&quot;319&quot; data-backw=&quot;568&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8aicn0qiaX5Ity6oJ7FFasSOJico1js9e1jEIHpQwb97qLTuADFlmicYsvPaxvL9gOqYL6DbSZBCbqGDw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以说离线包其实是两个流程，一个是本身提前的离线包下载，还有一个是在后续如果没有资源的情况下，它去做一个的离线包的补充。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就是离线包加上预渲染的一个整体流程。我们在H5的发布系统中发布应用时会做一个整体的H5的编译打包，将H5上传到CDN，再把编译打包的产物拉回预渲染服务中去产出预渲染的产物，同时也会把它拉回到离线包的服务中，产生一个离线包的产物。这两个服务是并存的。最后由一个离线包的构建器把这两个产物合并，这就是最终的离线包的产物。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;86318&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span data-brushtype=&quot;text&quot;&gt;六、总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;其实引发性能问题的原因，通常都不是某一单方面的问题，而是各个方面都可能有问题，最终呈现的结果可能是不太达标的。那最终要怎么解决呢？我觉得可以借助一个性能采集监控体系，更好地挖掘性能相关的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果没有这些东西，大家相当于纯靠自我的想法去做相关优化，这样没有一个很好的切入点，就相当于无头苍蝇。大家都在做优化，那么优化完之后是怎么样？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实性能优化大部分都逃不开三板斧: 并发、缓存、压缩资源。上文提到的资源相关的问题就是缓存，比如说PAD的压缩缓存。并发的话可能就是更多带宽、更多请求、同时请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，要善用浏览器和客户端侧提供的各种能力，流程优化有时候强过细节优化。当然到最后可能是要去做细节优化的，但是在初期去做细节优化可能效果会非常差。比如像预渲染，我们在流程优化上做的方案，说实话没有一些特别细节的东西，但是它的实际效果会非常好，它的整体缩短的时间是50%以上的。在秒开或者页面加载要1600多毫秒的时候去做细节优化其实没有任何意义，你优化的部分占它整体的时间的百分比可能非常少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外像离线包需要有跟客户端结合的能力，根据场景大家要开阔一下自己的思路，不要光从纯前端调用，还要从善用客户端这一侧提供的一些像本地缓存、JSP相关通知、请求拦截的这些能力，把整个流程给兜起来，做到至少创业前中期的高性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天的分享就到这边，谢谢大家！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;85988&quot; data-custom=&quot;#138bde&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p data-brushtype=&quot;text&quot;&gt;&lt;span&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q1：如果加入当前端代码还没有发版本，后端代码已经发布，此时，将会存在大量的错误日志上报回来，此时怎样做削峰处理呢？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这里主要讲的是前端的性能监控的体系。大量错误日志的话，主要存在于后端，而重复日志，后端在做数据的初步清洗时，在相同类型、相同业务或者相同用户、单一应用数据短时间超过某一个值之后，会按一个特定的百分比去做削峰。这是在数据的清洗阶段就会去做的削峰和规避。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q2：数据拼装模型：这个拼装模型和埋点有关系吗，是不是从埋点数据格式里提取消息再做数据处理系统，Hadoop生态组件只采用备份方式吗，HBASE、spark、strom等方式考虑过吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A2：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是有关系的。在埋点的数据上，包括业务埋点和性能埋点都有一个标准格式，中间像用户信息、基础信息在埋点数据中都有对应的展现。部分数据像Log ID 、Sequence ID之类，这些数据由服务器按顺序生成，但有部分像 Type、用户的APP version、APP OS等。当然核心的业务其实都有业务模型，而这个埋点数据本身也是有固定格式的，它会按固定的格式去做提取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hadoop生态组件目前只采用备份方式。因为我们优先考虑的是性能平台，而经过我们的调研，性能平台目前性价比最高、同时性能相对比较好的方案就是现在用的这套方案。Hadoop的话大数据那边可能会有类似的方案，但他们也不是用在性能相关上面，而更多是在业务数据收集上，在前端的话目前还没有用到。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q3：监控log不做保存和批处理吗，就是实时处理完不做批处理等保存吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A3：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;目前是实时处理完，当然这个点我觉得挺好，之前说到的像脏数据之类的处理，其实还有一种方案，就是我们去做包装批处理，做一个容错，而不是直接全部实时处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为实时处理对于C端这种业务日志处于峰值的时候，风险是比较高的。但目前我们并没有实践，后续可能会整体看一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Q4：这套东西有无可能云化、容器化、服务化后，提供Devops API 然后我们的系统可以用呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A4：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;这一套东西能不能云化、容器化、服务化之后提供Devops API？这个可以是肯定是可以的，但目前我们还没有这方面的实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以说可行肯定是可行，因为容器本身跟这个方案本身没有特别大的关联性，只是用容器化的方式去做这一整套方案的部署。但怎么做最佳实践？我觉得可以自己去做一些探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Q5：如何使用监控建立一个稳定性保障工程?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;A5：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;用监控建立一个稳定性保障的话，我理解也可以做，比如通过监控线上的一些DSL、请求的error，还有一些加载的错误，把对应的数据上传到我们的技术部，让技术去关注对应的指标，然后做稳定性的保障。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是前端稳定性保障跟后端不一样，后端是跑在我们自己的一组服务器或者说容器上的。我们可以通过一些手段把这组容器或者说这组服务器上的服务可用性做高，但是用户那边如果碰到问题，并把这个数据反馈到我们这边之后，我们整体的反馈就要去修改代码重新做发布了，所以它维度上会有一些不一样，而且时间间隔上拉的也比较长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就稳定性或者说 Bug上，我更建议做前置动作，去做自动化测试而不是通过监控。这边我们是做一个兜底，稳定性还是后端依赖监控更多一些，前端更多依赖的是性能相关的治理，需要去做一个指标的设计。当然也可以去设置相对来说小批量的监控做稳定性保障，目前除非是用SSR，这个可能治理的灵活度会比较高，其他的我觉得可能会比较难达到预期目标。&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;10月15日 Gdevops 全球敏捷运维峰会广州站，&lt;span&gt;淘汰人海战术“熬机器”&lt;/span&gt;，专设运维专场带大家&lt;span&gt;拒做“救火英雄”&lt;/span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《传统银行关键业务和复杂架构挑战下，如何做到数据库敏捷运维》&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;平安银行 数据库团队经理 王鹏冲&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;《维稳618和双11：京东科技数据库海量运维的生态体系建设与实践》&lt;/strong&gt;&lt;span&gt;京东数科 数据库团队负责人 高新刚&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《持续保障系统的稳定性和高可用：腾讯游戏混沌工程实践》&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;腾讯游戏 混沌工程负责人 吴召军&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《运维能力可管理：网易游戏面向终态的应用交付管理实践》 &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;网易游戏 团队负责人 林香鑫 &lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《美图：低成本全链路监控实战与SRE稳定性运营》&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 美图 SRE负责人 石鹏  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;《大型金融行业DevOps工具链的建设实践》&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;平安集团 E敏捷DevOps平台负责人 熊星&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;211&quot; data-backw=&quot;568&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;568&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;211&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.37125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ufWcjcomw8bzM8JGg8z8picdE9tMRTcG4F4UnGDYyVho9ENDyicT4hp5Q5zHkUckprSgtUibdUNjwzNibJyia2ZxGqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>054ada7b99ab09dfed41d2eb7cdb8ae6</guid>
<title>最近大火的 “元宇宙” 是什么？</title>
<link>https://toutiao.io/k/y64hrgx</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.1575&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/j3gficicyOvasIjZpiaTNIPReJVWEJf7UGpmokI3LL4NbQDb8fO48fYROmYPXUhXFN8IdDqPcI1gA6OfSLsQHxB4w/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;400&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作者：腾讯技术工程特约撰稿人 李佳华&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文将介绍元宇宙的由来和底层技术，探讨海内外资本在这条赛道上的布局，元宇宙将会对哪些行业产生变革的影响，这些影响背后凸显了元宇宙的哪些价值，以及元宇宙逐步实现的过程中监管如何涵盖其伦理边界。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果问当下最火的概念是什么，那必然是&lt;strong&gt;元宇宙&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元宇宙到底有多火，对互联网行业有多重要？从 Facebook 创始人兼首席执行官马克·扎克伯格近日的一段采访中可窥知一二。在 The Verge 的专访里，这家世界最大的社交平台掌舵者表示：希望在未来用 5 年左右的时间，将 Facebook 打造为一家元宇宙公司。[1]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元宇宙概念的火爆还体现在，今年的 ChinaJoy 上有关元宇宙的发言屡见报端、连芯片巨头英伟达也忍不住“蹭热点”，等等。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么问题来了，元宇宙到底是什么？我们离它还有多远？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;什么是元宇宙？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元宇宙的英语是 Metaverse，Meta 表示“超越”、“元”， verse 表示“宇宙 universe”。[2]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个概念最早出现在 1992 年尼尔·斯蒂芬森的科幻小说《雪崩》当中，小说描绘了一个平行于现实世界的虚拟数字世界，在这里，人们用数字化身来控制并相互竞争以提高自己的地位，到现在看来，描述的还是超前的未来世界。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.562962962962963&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJ1lXdfv4IicGBAGsUGBqcjKeWIGkOSCErbT9cV64hqt6YWibicrmIUSHjQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;2018 年斯皮尔伯格导演的科幻电影《头号玩家》，被认为是目前最符合《雪崩》中描述的“元宇宙”形态。在电影中，男主角带上 VR 头盔后，瞬间就能进入自己设计的另一个极其逼真的虚拟游戏世界——“绿洲”（Oasis）。在《头号玩家》设定的“绿洲”场景里，有一个完整运行的虚拟社会形态，包含各行各业的无数数字内容、数字产品等，虚拟人格可以在其中进行价值交换。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果说这些“元宇宙”都还存在于小说和电影中，那么在今年 3 月被称作“元宇宙”第一股的 Roblox 成功在纽交所上市，则似乎意味着这个虚拟世界想走向现实。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这也被外界认为是今年元宇宙概念爆发的起点。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5166666666666667&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJs5rMExWP5e05gx2qy8kqwOvrkMeZMicNydr63icU1iaDuVs2VeF0V0XYA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Roblox 成立于 2004 年，是一家在线游戏创作社区公司。2011 年上线 iOS，2014 年上线 Android。2019 年，Roblox 的社区玩家 MAU 过亿，累计有千万名创作者使用过 Roblox 提供的工具来开发游戏。相比于其他大多数游戏，Roblox 中的游戏能够自己定义角色，同时着重满足玩家社交需求的设计，也拥有一套游戏内的经济系统。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在 Roblox 的招股书里，对元宇宙有更具体的描述，这家公司认为一个真正的元宇宙产品应该拥有 8 个属性：身份、朋友、沉浸感、低延迟、多元化、随地、经济系统和文明。[3]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体属性解释如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;身份：拥有一个虚拟身份，无论与现实身份有没有相关性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;朋友：在元宇宙当中拥有朋友，可以社交，无论在现实中是否认识。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;沉浸感：能够沉浸在元宇宙的体验当中，忽略其他的一切。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;低延迟：元宇宙中的一切都是同步发生的，没有异步性或延迟性。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多元化：元宇宙提供多种丰富内容，包括玩法、道具、美术素材等。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;随地：可以使用任何设备登录元宇宙，随时随地沉浸其中。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;经济系统：与任何复杂的大型游戏一样，元宇宙应该有自己的经济系统。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;文明：元宇宙应该是一种虚拟的文明。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;元宇宙概念为何在今年爆发？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.41388888888888886&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJGuJgjnxHhzu8eu1eolewZT53fia9jYcENu7JWVKyaRrS8X6WjNwLy7A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Roblox 对元宇宙概念的阐述虽然更加具体，但要素众多，每个要素背后，还有着一连串的解释。这也说明这一概念的模糊性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然而这不妨碍元宇宙成为一个好的故事。Roblox3 月份上市后，其市值达到 400 亿美元，相比 1 年前 40 亿美元的估值暴涨了 10 倍。App Annie 发布的全球热门游戏收入排名显示，7 月 Roblox 继续蝉联冠军宝座。[4]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;恰恰是因为元宇宙概念目前没有一个简单、具体的定义，吸引互联网公司们进入这个赛道，以自己的方式和理解去塑造、定义元宇宙。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;4 月中旬，全球知名的游戏公司 Epic Games 融资 10 亿美元用于“元宇宙”相关业务开发，创下“元宇宙”赛道最高融资纪录。5 月，苹果公司以 1 亿美元收购虚拟现实公司 NextVR，以增强其在娱乐和体育领域的 VR 实力。7 月 29 日，在 Facebook 的季度盈利数据发布后，马克·扎克伯格着重强调了“把 Facebook 转变为‘元宇宙’公司的雄心”，并激活虚拟社区计划 Horizon。8 月 12 日，英伟达自曝，在其 4 月举行的发布会上，CEO 黄仁勋的演讲中有 14 秒由数字合成的“假人”代为出镜，被网友认为是元宇宙的体现，但事实还相去甚远。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.7138888888888889&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJicv4qDYvyKbhaQW9axObMrWk2JmcYIOSviamp64rfHhvfOHo2tQgSjWw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在国内，号称要打造全年龄段元宇宙世界的 MeteApp 公司，在 Roblox 上市后拿到了 SIG 海纳亚洲资本领投的 1 亿美元 C 轮融资。字节跳动对游戏引擎研发商、“中国版 Roblox”代码乾坤进行了近 1 亿人民币战略投资。[5]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;资本的追逐只是观察元宇宙的一个切片。冷静下来思考一个问题，为什么元宇宙会在 2021 年火爆？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在需求侧，疫情的发展不断蚕食减弱人们在物理世界的联系，也加速了数字世界的完善，人们在虚拟空间中留存和交互的时间更多，对虚拟世界的需求和服务更加开放和认可。而在技术侧，随着 VR/AR、5G、AI 等技术的发展，让曾经科幻小说中的场景一一实现，为元宇宙描绘出一个可见的触摸门槛的机会。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;我们离元宇宙还有多远？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然元宇宙描绘的未来很美好，大量的优秀公司加入元宇宙的建设，但在很多业内人士看来，目前仍处于一个萌芽初始阶段。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以“元宇宙第一股”为例，Roblox 的游戏画面也较为简单，与元宇宙里“逼真的物理世界”相去甚远。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6953125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJpLBV9EoBA15a5FkMD3icSIWKGEQ9HkGRTWibsnDz1WC1o5FL9u69jyAw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;华安证券在一份研报里表示，从产品形态上看，游戏是元宇宙的雏形，与元宇宙的成熟形态仍有较大差距。[6]&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从雏形到成熟的进化，技术提升是必经之路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先，通过 AR、VR 等交互技术提升游戏的沉浸感。未来，基于 VR、AR 为代表的人机交互技术的发展，由更加拟真、高频的人机交互方式承载的虚拟开放世界游戏。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第二，通过 5G、云计算技术支撑大规模用户同时在线，提升游戏的可进入性。元 宇宙是大规模的参与式媒介，交互用户数量将达到亿级。5G 和云计算等底层技术的进 步和普及，是未来突破游戏可进入性限制的关键。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第三，通过算法、算力提升驱动渲染模式升级，提升游戏的可触达性。目前，3A 游戏采用传统的终端渲染模式，受限于个人计算机 GPU 渲染能力，游戏的画面像素精细度距拟真效果仍有很大差距。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;第四，通过区块链、AI 技术降低内容创作门槛，提升游戏的可延展性。目前游戏 UGC 创作领域编程门槛过高，创作的高定制化和易得性不可兼得，同时鲜有游戏具备闭环经济体。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;技术只是第一关，要实现元宇宙还要迈过内容门槛，等真正成熟或将受市场、法律等因素的制约。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但作为真实物理世界补充和延展，元宇宙足够让人期待。让喜欢深度参与虚拟世界的人在数字场域遨游，喜欢现实物理世界的人在野外漫游，这或许就是元宇宙对于普通人的价值。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;道阻且长，值得等待。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在搜集元宇宙的资料时，我们发现券商研究员、从业者、媒体等不同身份的人都表达了强调了元宇宙的重要性。华安证券在研报中表示“元宇宙是互联网的终极形态”；行业媒体竞核认为“Metaverse 是赋予技术生命能力的开始”[1]；海外分析师表示，多个行业对元宇宙的投入将达到数万亿美元。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而透过元宇宙庞大的概念，看到其发展价值更为重要。研发工具 Beamable 公司创始人 Jon Radoff 于近期发文解析了元宇宙 Metaverse 的 7 层价值链，体验、发现、创作者经济、空间计算、去中心化、人机交互、基础设施。[2]&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6809583858764187&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJDg78bI3g0tBVIhOg7nmmfC2YUbQvG7g6Po9DdXcRnVvDtLAbMtN76Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;793&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中体验层，Jon Radoff 认为元宇宙并不是 2D 或者 3D 形式，甚至都不一定是图形的形式存在，它更多的是物理空间、距离和物体之间不可阻挡的非物质化。比如，在一款游戏里，你可以梦想成为摇滚明星、绝地武士、赛车手或者任何能想象的角色。在物理空间举办的音乐会只能高价卖出前排的少数座位，但虚拟音乐会可以在每个人的周围产生一个个性化存在的平面，在这个平面上，你总能找到最好的座位。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这些提到的在线活动还涉及元宇宙体验的另一个方面：内容社区综合体。过去，消费者只是内容的消费者，现在，他们既是内容的创造者，又是内容的“放大器”，内容还可以再次产生内容。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;发现层，体验催生出内容社区综合体的意义在于社区推动内容比大部分常规市场营销更高效。在元宇宙情境下，交换、交易、分享内容变得更容易而且更多元，这对所有创作者来说是增大曝光率的机会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;创作者经济，元宇宙里的体验会越来越现场化、社交化，并持续更新。到目前为止，元宇宙里的创作者都围绕 Roblox、Rec Room 和 Manticore 等集中式平台，在这些平台上，有一整套集成的工具、曝光率、社交网络和变现功能，赋予了许多人为其他人打造体验的能力。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6259259259259259&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJmP4zAbY53qVjv31Zk7NHQdf5rF1paWmibJPj13ATsPEBXRpbca6anww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;去中心化，虽然电影《头号玩家》里的绿洲被认为与元宇宙十分贴近，但元宇宙的理想结构与绿洲由单一团体控制的结构相反。这样避免了中心的统治地位，因为元宇宙是由很多人创造，因此也应该由很多人共同拥有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;综上，元宇宙的核心价值在于，它将成为一个拥有极致沉浸体验、丰富内容生态、超时空的社交体系、虚实交互的经济系统，能映射现实人类社会文明的超大型数字社区。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;元宇宙将改变哪些行业？&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从元宇宙的价值以及目前的技术情况来看，元宇宙最具现实意义的表现形式体现在泛娱乐行业，特别是游戏有望成为元宇宙概念下最早落地的场景。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前市场上已经出现一系列基于游戏内核的沉浸式场景体验。美国著名歌手 Travis Scott 在游戏《堡垒之夜》中举办虚拟演唱会，全球 1230 万游戏玩家成为虚拟演唱会观众；加州大学伯克利分校在《Minecraft》重现校园，毕业生以虚拟形象线上场景参加毕业典礼；顶级 AI 学术会议 ACAI 在任天堂《动物森友会》上举行 20 年研讨会，演讲者在游戏中播放 PPT 发表讲话。[3]&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.534375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJcqGSbHaKlFiaKy3ABFQlde4A6rz0HWyrv7vPWyzOC5wRJVwt3H7hNIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上文中我们提到，在线游戏创作社区 Roblox 因为现象级的内容创作生态带来的游戏自由度和用户活跃度，成为现阶段公认的元宇宙雏形。随着市场对元宇宙认识的加深，游戏之于元宇宙更大的意义在于提供展现方式，是元宇宙搭建虚拟世界的底层逻辑。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与此同时，元宇宙概念的火热也吸引了无数游戏厂商的入局。在今年的 ChinaJoy 上有业内人士认为，元宇宙或成中小游戏厂商新的创意阵地。[4]这意味元宇宙为游戏行业带来了新机会，但这是否会引起内卷或使游戏主题趋于同质化，需要持续关注。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;随着技术的不断成熟，元宇宙的下一发展阶段是在数字化的世界中去重构现实中的社交、消费等多个方面。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在社交领域，Facebook CEO 扎克伯格日前表示，Facebook 已经组建了专门研发元宇宙的团队，并表示未来五年要从社交公司变成元宇宙公司。而事实上 Facebook 布局的时间要更早。2014 年，Facebook 以 20 亿美元高价收购了虚拟现实公司 Oculus。2019 年，Facebook 发布了 VR 社交平台——Facebook Horizon。目前来看，Horizon 在相当程度上带有元宇宙的影子。比如在 Horizon 中，用户可以创建角色，和朋友聚会、娱乐，而且每个人都有可以定义自己的形象，建立自己的活动。[5]&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJaFDibGiaNq1a4cbOhViaiaWQ6duibuQFLmqzibVVSvYtlwYGC0TrkrC2y3NA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;500&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;扎克伯格的想象中，元宇宙会像最初的定义那样，真正成为现实世界的虚拟映射，通过虚拟世界，能够将朋友或同事远程送到你身边，和你在虚拟环境中共处一室，获得更强的空间感。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;社交 App Soul 此前在 IPO 时，也提出了“社交元宇宙”的概念。Soul 在招股书上表示，其之所以能向社交元宇宙靠拢，是因为自己创造的虚拟世界中，用户能够沉浸感强、始终在线地进行娱乐、社交、消费等，并且有用户创造大量的 UGC 内容，成为其快速持续生长的原动力。[6]例如，在 Soul 中用户可以通过群聊派对讨论、听音乐、学习等，也可以 在 Soul 中玩狼人杀等游戏，甚至通过 Giftmoji 为自己或他人购买现实中的商品。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在消费领域，随着元宇宙的到来，用户的消费体验或将迎来新的一波交互体验的升级。目前，新氧已经实现为用户提供 AR 检测脸型的服务，通过手机扫描脸部推算出适合每位用户的妆容发型护肤品等。得物 App 的 AR 虚拟试鞋功能允许用户只需要挑选自己喜欢的鞋型和颜色并 AR 试穿，看到鞋子上脚的效果。在 AR、VR、可穿戴设备、触觉传感等技术的带动下，更加沉浸式的消费或将成为常态。它不局限于购买衣服、鞋子等基本消费，AR 房屋装修、远程看房、甚至模拟旅游景点都将成为可能。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;元宇宙的法律和监管问题&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;元宇宙可能对现实世界与虚拟世界带来的变革足够让人欣喜，但对待一个新技术、新概念，提前思考其技术能力和伦理边界也必不可少。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;未来当人们朝着元宇宙逐步迈进的时候，技术限制、金融服务监管、侵犯知识产权等诸多现实问题也将伴其同行。Norton Rose Fulbright 国际律师事务所对元宇宙可能会引发的法律和监管问题进行了设想。[7]&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/j3gficicyOvauIWTsdXibqYN8CpjZ9bnibkJaRicCU5Yyy10VMR5icHIchGpMpAKPuVd1NouDwOr0Uib1UGNQ40uOh9QA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1344&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先是数据安全。元宇宙涉及收集的个人数据的数量和种类丰富度将会是前所未有的，包括个人的生理反应、运动，甚至可能是脑波模式的信息。是否会有一个元宇宙的主要管理员收集并共享这些个人数据？如果用户的个人数据在元宇宙中被盗或被滥用，谁来负责？类目繁多的信息，应如何以及何时获取用户的同意？诸如此类问题，都是在元宇宙建设中应该考虑的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次是知识产权。元宇宙的内容创造是由多个人完成的，这就涉及到谁拥有知识产权的问题。共同著作权和共同所有权的规则本就是复杂的，在复杂的虚拟世界场景中，它们的应用将变得更加复杂，因为利益相关者极有可能会以团体的形式存在。同时，快速发展的元宇宙可能涉及元素的 “混搭”，以及将不同利益相关者拥有的知识产权结合在一起。知识产权许可中的传统风险分配以及使用条款将需要被重新审查。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，正如上文所说，元宇宙的一大价值在于创造新的营销形式，但如果营销的对象是儿童，如何获得许可成为问题。另外元宇宙的全球性和互操作性将不可避免地鼓励多个企业相互沟通和合作，以便为参与者提供更多的选择和更好的体验。但如果它们是竞争对手，元宇宙产品之间可能会引起反垄断问题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;虽然例举了元宇宙可能涉及的监管问题，但目前言之尚早。元宇宙带给人们更多是机会和期待，相信随着技术的推进，元宇宙的实现或将开启互联网的全真时代。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1706444098129062103&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;扎克伯格谈facebook未来：五年内将变成元宇宙公司&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1701891462539005558&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;华安证券-元宇宙深度报告&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;a href=&quot;https://tech.ifeng.com/c/88F8LkNcEHP&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;脸书入局的元宇宙是什么？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[4]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1707801745619432251&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;app annie：七月roblox继续蝉联收入榜冠军&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[5]&lt;/span&gt;&lt;a href=&quot;https://36kr.com/p/1339130291542278&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;chinajoy上的热词“元宇宙”到底是什么？&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[6]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1701891462539005558&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;华安证券-元宇宙深度报告&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[7]&lt;/span&gt;&lt;a href=&quot;https://36kr.com/p/1311632444310017&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;100页metaverse研报：科技巨头内容硬科技新战事，腾讯网易字节押注未来&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[8]&lt;/span&gt;&lt;a href=&quot;https://medium.com/building-the-metaverse/the-metaverse-value-chain-afcf9e09e3a7&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;the metaverse value-chain&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[9]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1699445423840931843&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;metaverse元宇宙深度报告：创造独立于现实世界的虚拟数字世界&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[10]&lt;/span&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1707686008603929352&amp;amp;wfr=spider&amp;amp;for=pc&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;20年行业老兵：元宇宙或成中小游戏厂商新的创意阵地&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[11]&lt;/span&gt;&lt;a href=&quot;http://www.capwhale.com/newsfile/details/20210728/06253080a65c41b99911b8d144c3fcd2.shtml&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;facebook转型元宇宙，巨头持续布局&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[12]&lt;/span&gt;&lt;a href=&quot;https://www.eet-china.com/mp/a70274.html&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;元宇宙专题研究报告：从体验出发，打破虚拟和现实的边界&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;[13]&lt;/span&gt;&lt;a href=&quot;https://www.nortonrosefulbright.com/en/knowledge/publications/5cd471a1/the-metaverse-the-evolution-of-a-universal-digital-platform&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;the metaverse: the evolution of a universal digital platform&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;&lt;span&gt;腾讯程序员视频号最新视频&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;欢迎点赞&lt;/strong&gt;&lt;/p&gt;&lt;section class=&quot;channels_iframe_wrp&quot;&gt;&lt;mpvideosnap class=&quot;js_uneditable custom_select_card channels_iframe&quot; data-pluginname=&quot;videosnap&quot; data-id=&quot;export/UzFfAgtgekIEAQAAAAAAnB8wQLVPvwAAAAstQy6ubaLX4KHWvLEZgBPEzaIEaywOSY3-zNPgMIuuA8x1qchKK5SRRByySPzN&quot; data-url=&quot;https://findermp.video.qq.com/251/20304/stodownload?encfilekey=S7s6ianIic0ia4PicKJSfB8EjyjpQibPUAXolQm0TSW70IDicbtVYljVwmPHaLQ0LrklWdnkFRkagWqP7qbvARsKc5sgqH2vEYibVFkD9R1y0wKfjY&amp;amp;adaptivelytrans=0&amp;amp;bizid=1023&amp;amp;dotrans=0&amp;amp;hy=SZ&amp;amp;idx=1&amp;amp;m=&amp;amp;token=AxricY7RBHdVGlhhFib8hadXkOfFrKnL8ViaDKFM5eWWhOFs50hEOSMRRuZNvtYJVgooEwfokY4ib5M&quot; data-headimgurl=&quot;http://wx.qlogo.cn/finderhead/I7awtksbibjQe7RZAy84xEWjcH31YoE9FfbH0qE9ogw0/0&quot; data-username=&quot;v2_060000231003b20faec8c6e08e1ac1d4cf06ea31b07760a16cba92d83444bd9a5d9d55ffaede@finder&quot; data-nickname=&quot;腾讯程序员&quot; data-desc=&quot;一个神奇的梦&amp;#10;#程序员 #互联网人的1024面&amp;#10;&quot; data-nonceid=&quot;10170841816486573887&quot; data-type=&quot;video&quot;/&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>976be5fe1e8bc2ea96ee8bd81cab7c84</guid>
<title>分布式之配置中心</title>
<link>https://toutiao.io/k/1s4c5zk</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p id=&quot;js_tags&quot; role=&quot;option&quot; title=&quot;链接&quot; class=&quot;article-tag__list single-tag__wrp js_single&quot; data-len=&quot;1&quot;&gt;
                                            
                                                                                    &lt;span class=&quot;article-tag-card__left&quot;&gt;
                                    &lt;span class=&quot;article-tag-card__title&quot;&gt;收录于话题&lt;/span&gt;
                                    &lt;span class=&quot;article-tag__item-wrp no-active js_tag&quot; data-url=&quot;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5NDM4MDIwNw==&amp;amp;action=getalbum&amp;amp;album_id=1994940779382767617#wechat_redirect&quot; data-tag_id=&quot;&quot; data-album_id=&quot;1994940779382767617&quot; data-tag_source=&quot;4&quot;&gt;
                                        &lt;span class=&quot;article-tag__item&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;#&lt;/span&gt;分布式&lt;/span&gt;
                                    &lt;/span&gt;
                                &lt;/span&gt;
                                &lt;span class=&quot;article-tag-card__right&quot;&gt;&lt;span class=&quot;weui-hidden_abs&quot;&gt;,&lt;/span&gt;4个&lt;/span&gt;
                                                                                        &lt;/p&gt;

                
                                
                
                

                
                                                                

                
                                


                
                
                
                
                                                
                                                                
                                
                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;文章目录：&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;前言&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;市面上的配置中心&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;还有哪些应用场景？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;小结&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐阅读&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们在平时工作中可能会有这样的需求，系统运行期间需要动态调整配置项，比如：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;调整系统告警人&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调整活动开关&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调整降级开关&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调整日志级别&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;以上这些还不够，随着程序功能的日益复杂对配置的期望也越来越高，还需要满足：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;实现分环境、分集群的管理配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;实现配置的灰度发布&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置的发布需要完善的授权机制&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置的发布需要记录发布历史&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;支持配置回滚到上一个发布版本&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;...&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;怎么解决上述问题，有没有开源产品？&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;市面上的配置中心&lt;/h2&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Apollo&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Disconf&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Spring Cloud Config&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如何选择？大家可以自行翻阅下文档。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我的最终选择是 &lt;strong&gt;&lt;code&gt;Apollo&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;修改/发布配置&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置更新通知&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;获取最新配置&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;351&quot; data-backw=&quot;558&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6297071129707112&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTDtK2HRCl1qdAoFlia7L9xqFAxvl6DPIGn6qAcmhfV8vHw2Ch1Sekxeick4TRKDcavKiaOTaoZUCWnQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;956&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;下图是 &lt;code&gt;Apollo&lt;/code&gt; 架构模块的概览：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;469&quot; data-backw=&quot;542&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8656542056074766&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/go9jpG3BuhTDtK2HRCl1qdAoFlia7L9xqJ5m1at44AMbR5w8q5gDMwiazgz7LeCgkZKYaeWp0ic5U5ibDoCsp4Swbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;856&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;还有哪些应用场景？&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;应用场景广泛，只要软件中涉及到有本地配置文件的，都可以使用这种方式实现动态配置。&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;只需要自己实现一个 &lt;code&gt;apollo-client&lt;/code&gt; 即可，当配置发生更新时，拉取最新配置信息，然后将配置信息处理成软件所需的配置格式。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;小结&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这篇文章比较短，主要介绍了为什么需要配置中心以及市面上有哪些开源配置中心可供选择。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Apollo&lt;/code&gt; 有完善的管理界面，这个我比较喜欢，哈哈。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;推荐阅读&lt;/h2&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NDM4MDIwNw==&amp;amp;mid=2448836321&amp;amp;idx=1&amp;amp;sn=7c4993c3b499625d14fe9449ff91529c&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;分布式事务之理解篇&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NDM4MDIwNw==&amp;amp;mid=2448836401&amp;amp;idx=1&amp;amp;sn=32722ce09be9a92a6a8f4110c5fb00cd&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;分布式事务之最终一致性实现方案&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MjM5NDM4MDIwNw==&amp;amp;mid=2448836418&amp;amp;idx=1&amp;amp;sn=27e6ebcbc5fa93be7006575bbea0b5a9&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;分布式之异步通讯组件选择&lt;/a&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;参考资料&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1]&lt;/span&gt;&lt;p&gt;Apollo: &lt;em&gt;https://github.com/apolloconfig/apollo&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2]&lt;/span&gt;&lt;p&gt;Disconf: &lt;em&gt;https://github.com/knightliao/disconf&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3]&lt;/span&gt;&lt;p&gt;Spring Cloud Config: &lt;em&gt;https://github.com/spring-cloud/spring-cloud-config&lt;/em&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MjM5NDM4MDIwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/go9jpG3BuhQHrM0sshKxdaibyDNjXooZvnwwy0yRjdhlXrtVUkJSvQib4Ppwib1v5HucaRc8WPtgvhPBicMeiadAv9Q/0?wx_fmt=png&quot; data-nickname=&quot;新亮笔记&quot; data-alias=&quot;XinLiangTalk&quot; data-signature=&quot;程序猿的打怪升级之路。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;318&quot; data-backw=&quot;578&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5493333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_jpg/go9jpG3BuhSP7wibS4BHtlu4hduFYq8VbSAgRic8ib6hdd6qTRGxYSic7UFF9yPyGd4pGUw1XicibFRlGHBe9RJ09Smw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;750&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot; aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_title&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p role=&quot;option&quot; aria-labelledby=&quot;js_a11y_reward_qr_word js_a11y_comma js_a11y_reward_qr_title js_a11y_reward_qr_money&quot; aria-describedby=&quot;js_a11y_reward_qr_tips &quot; class=&quot;reward_tips&quot; id=&quot;js_a11y_reward_qr_word&quot;/&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img alt=&quot;赞赏二维码&quot; class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p aria-hidden=&quot;true&quot; id=&quot;js_a11y_reward_qr_tips&quot; class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>87b5e829bbfef43bcaf9c9323ec4aca2</guid>
<title>面试官：Redis 的事务满足原子性吗？</title>
<link>https://toutiao.io/k/rdamhq1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;谈起数据库的事务来，估计很多同学的第一反应都是&lt;code&gt;ACID&lt;/code&gt;，而排在&lt;code&gt;ACID&lt;/code&gt;中首位的&lt;code&gt;A&lt;/code&gt;原子性，要求一个事务中的所有操作，要么全部完成，要么全部不完成。熟悉redis的同学肯定知道，在redis中也存在事务，那么它的事务也满足原子性吗？下面我们就来一探究竟。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;什么是Redis事务？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和数据库事务类似，redis事务也是用来一次性地执行多条命令。使用起来也很简单，可以用&lt;code&gt;MULTI&lt;/code&gt;开启一个事务，然后将多个命令入队到事务的队列中，最后由&lt;code&gt;EXEC&lt;/code&gt;命令触发事务，执行事务中的所有命令。看一个简单的事务执行例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; multi&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; set name Hydra&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; set age 18&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; incr age&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; exec&lt;br/&gt;1) OK&lt;br/&gt;2) OK&lt;br/&gt;3) (integer) 19&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，在指令和操作数的数据类型等都正常的情况下，输入&lt;code&gt;EXEC&lt;/code&gt;后所有命令被执行成功。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Redis事务满足原子性吗？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果要验证redis事务是否满足原子性，那么需要在redis事务执行发生异常的情况下进行，下面我们分两种不同类型的错误分别测试。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;语法错误&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先测试命令中有语法错误的情况，这种情况多为命令的参数个数不正确或输入的命令本身存在错误。下面我们在事务中输入一个存在格式错误的命令，开启事务并依次输入下面的命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; multi&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; set name Hydra&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; incr&lt;br/&gt;(error) ERR wrong number of arguments for &#x27;incr&#x27; command&lt;br/&gt;127.0.0.1:6379&amp;gt; set age 18&lt;br/&gt;QUEUED&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;输入的命令&lt;code&gt;incr&lt;/code&gt;后面没有添加参数，属于命令格式不对的语法错误，这时在命令入队时就会立刻检测出错误并提示&lt;code&gt;error&lt;/code&gt;。使用&lt;code&gt;exec&lt;/code&gt;执行事务，查看结果输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; exec&lt;br/&gt;(error) EXECABORT Transaction discarded because of previous errors.&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这种情况下，只要事务中的一条命令有语法错误，在执行&lt;code&gt;exec&lt;/code&gt;后就会直接返回错误，包括语法正确的命令在内的所有命令都不会被执行。对此进行验证，看一下在事务中其他指令执行情况，查看&lt;code&gt;set&lt;/code&gt;命令的执行结果，全部为空，说明指令没有被执行。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name&lt;br/&gt;(nil)&lt;br/&gt;127.0.0.1:6379&amp;gt; get age&lt;br/&gt;(nil)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;此外，如果存在命令本身拼写错误、或输入了一个不存在的命令等情况，也属于语法错误的情况，执行事务时会直接报错。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;运行错误&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行错误是指输入的指令格式正确，但是在命令执行期间出现的错误，典型场景是当输入参数的数据类型不符合命令的参数要求时，就会发生运行错误。例如下面的例子中，对一个&lt;code&gt;string&lt;/code&gt;类型的值执行列表的操作，报错如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set key1 value1&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; lpush key1 value2&lt;br/&gt;(error) WRONGTYPE Operation against a key holding the wrong kind of value&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种错误在redis实际执行指令前是无法被发现的，只能当真正执行才能够被发现，因此这样的命令是可以被事务队列接收的，不会和上面的语法错误一样立即报错。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体看一下当事务中存在运行错误的情况，在下面的事务中，尝试对&lt;code&gt;string&lt;/code&gt;类型数据进行&lt;code&gt;incr&lt;/code&gt;自增操作：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; multi&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; set name Hydra&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; set age eighteen&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; incr age&lt;br/&gt;QUEUED&lt;br/&gt;127.0.0.1:6379&amp;gt; del name&lt;br/&gt;QUEUED&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;redis一直到这里都没有提示存在错误，执行&lt;code&gt;exec&lt;/code&gt;看一下结果输出：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; exec&lt;br/&gt;1) OK&lt;br/&gt;2) OK&lt;br/&gt;3) (error) ERR value is not an integer or out of range&lt;br/&gt;4) (integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;运行结果可以看到，虽然&lt;code&gt;incr age&lt;/code&gt;这条命令出现了错误，但是它前后的命令都正常执行了，再看一下这些&lt;code&gt;key&lt;/code&gt;对应的值，确实证明了其余指令都执行成功：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get name&lt;br/&gt;(nil)&lt;br/&gt;127.0.0.1:6379&amp;gt; get age&lt;br/&gt;&quot;eighteen&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;阶段性结论&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对上面的事务的运行结果进行一下分析：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;存在&lt;strong&gt;语法错误&lt;/strong&gt;的情况下，所有命令都不会执行&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存在&lt;strong&gt;运行错误&lt;/strong&gt;的情况下，除执行中出现错误的命令外，其他命令都能正常执行&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过分析我们知道了redis中的事务是不满足原子性的，在运行错误的情况下，并没有提供类似数据库中的回滚功能。那么为什么redis不支持回滚呢，官方文档给出了说明，大意如下：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;redis命令失败只会发生在语法错误或数据类型错误的情况，这一结果都是由编程过程中的错误导致，这种情况应该在开发环境中检测出来，而不是生产环境&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不使用回滚，能使redis内部设计更简单，速度更快&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;回滚不能避免编程逻辑中的错误，如果想要将一个键的值增加2却只增加了1，这种情况即使提供回滚也无法提供帮助&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基于以上原因，redis官方选择了更简单、更快的方法，不支持错误回滚。这样的话，如果在我们的业务场景中需要保证原子性，那么就要求了开发者通过其他手段保证命令全部执行成功或失败，例如在执行命令前进行参数类型的校验，或在事务执行出现错误时及时做事务补偿。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;提到其他方式，相信很多小伙伴都听说&lt;strong&gt;使用Lua脚本来保证操作的原子性&lt;/strong&gt;，例如在分布式锁中通常使用的就是&lt;code&gt;Lua&lt;/code&gt;脚本，那么，神奇的&lt;code&gt;Lua&lt;/code&gt;脚本真的能保证原子性吗？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;简单的Lua脚本入门&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在验证lua脚本的原子性之前，我们需要对它做一个简单的了解。redis从2.6版本开始支持执行lua脚本，它的功能和事务非常类似，一段lua脚本被视作一条命令执行，这样将多条redis命令写入lua，即可实现类似事务的执行结果。我们先看一下下面几个常用的命令。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;EVAL 命令&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最常用的&lt;code&gt;EVAL&lt;/code&gt;用于执行一段脚本，它的命令的格式如下：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;EVAL script numkeys key [key ...] arg [arg ...] &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单解释一下其中的参数：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;script&lt;/code&gt;是一段lua脚本程序&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;numkeys&lt;/code&gt;指定后续参数有几个&lt;code&gt;key&lt;/code&gt;，如没有&lt;code&gt;key&lt;/code&gt;则为0&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;key [key …]&lt;/code&gt;表示脚本中用到的redis中的键，在lua脚本中通过&lt;code&gt;KEYS[i]&lt;/code&gt;的形式获取&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;arg [arg …]&lt;/code&gt;表示附加参数，在lua脚本中通过&lt;code&gt;ARGV[i]&lt;/code&gt;获取&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看一个简单的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; eval &quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot; 2 key1 key2 value1 vauel2&lt;br/&gt;1) &quot;key1&quot;&lt;br/&gt;2) &quot;key2&quot;&lt;br/&gt;3) &quot;value1&quot;&lt;br/&gt;4) &quot;vauel2&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在上面的命令中，双引号中是lua脚本程序，后面的2表示存在两个key，分别是&lt;code&gt;key1&lt;/code&gt;和&lt;code&gt;key2&lt;/code&gt;，之后的参数是附加参数&lt;code&gt;value1&lt;/code&gt;和&lt;code&gt;value2&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果想要使用lua脚本执行&lt;code&gt;set&lt;/code&gt;命令，可以写成这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; EVAL &quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);&quot; 1 name Hydra&lt;br/&gt;(nil)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里使用了redis内置的lua函数&lt;code&gt;redis.call&lt;/code&gt;来完成&lt;code&gt;set&lt;/code&gt;命令，这里打印的执行结果&lt;code&gt;nil&lt;/code&gt;是因为没有返回值，如果不习惯的话，其实我们可以在脚本中添加&lt;code&gt;return 0;&lt;/code&gt;的返回语句。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;SCRIPT LOAD 和 EVALSHA命令&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个命令放在一起是因为它们一般成对使用。先看&lt;code&gt;SCRIPT LOAD&lt;/code&gt;，它用于把脚本加载到缓存中，返回&lt;code&gt;SHA1&lt;/code&gt;校验和，这时候只是缓存了命令，但是命令没有被马上执行，看一个例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SCRIPT LOAD &quot;return redis.call(&#x27;GET&#x27;, KEYS[1]);&quot;&lt;br/&gt;&quot;228d85f44a89b14a5cdb768a29c4c4d907133f56&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里返回了一个&lt;code&gt;SHA1&lt;/code&gt;的校验和，接下来就可以使用&lt;code&gt;EVALSHA&lt;/code&gt;来执行脚本了：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; EVALSHA &quot;228d85f44a89b14a5cdb768a29c4c4d907133f56&quot; 1 name&lt;br/&gt;&quot;Hydra&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里使用这个&lt;code&gt;SHA1&lt;/code&gt;值就相当于导入了上面缓存的命令，在之后再拼接&lt;code&gt;numkeys&lt;/code&gt;、&lt;code&gt;key&lt;/code&gt;、&lt;code&gt;arg&lt;/code&gt;等参数，命令就能够正常执行了。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;其他命令&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;SCRIPT EXISTS&lt;/code&gt;命令判断脚本是否被缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SCRIPT EXISTS 228d85f44a89b14a5cdb768a29c4c4d907133f56&lt;br/&gt;1) (integer) 1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;使用&lt;code&gt;SCRIPT FLUSH&lt;/code&gt;命令清除redis中的lua脚本缓存：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; SCRIPT FLUSH&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; SCRIPT EXISTS 228d85f44a89b14a5cdb768a29c4c4d907133f56&lt;br/&gt;1) (integer) 0&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以看到，执行了&lt;code&gt;SCRIPT FLUSH&lt;/code&gt;后，再次通过&lt;code&gt;SHA1&lt;/code&gt;值查看脚本时已经不存在。最后，还可以使用&lt;code&gt;SCRIPT KILL&lt;/code&gt;命令杀死当前正在运行的 lua 脚本，但是只有当脚本没有执行写操作时才会生效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从这些操作看来，lua脚本具有下面的优点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多次网络请求可以在一次请求中完成，减少网络开销，减少了网络延迟&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;客户端发送的脚本会存在redis中，其他客户端可以复用这一脚本，而不需要再重复编码完成相同的逻辑&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;/h4&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;Java代码中使用lua脚本&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在Java代码中可以使用Jedis中封装好的API来执行lua脚本，下面是一个使用Jedis执行lua脚本的例子：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Jedis jedis = &lt;span&gt;new&lt;/span&gt; Jedis(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span&gt;6379&lt;/span&gt;);&lt;br/&gt;    String script=&lt;span&gt;&quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);&quot;&lt;/span&gt;&lt;br/&gt;            +&lt;span&gt;&quot;return redis.call(&#x27;GET&#x27;, KEYS[1]);&quot;&lt;/span&gt;;&lt;br/&gt;    List&amp;lt;String&amp;gt; keys= Arrays.asList(&lt;span&gt;&quot;age&quot;&lt;/span&gt;);&lt;br/&gt;    List&amp;lt;String&amp;gt; values= Arrays.asList(&lt;span&gt;&quot;eighteen&quot;&lt;/span&gt;);&lt;br/&gt;    Object result = jedis.eval(script, keys, values);&lt;br/&gt;    System.out.println(result);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;执行上面的代码，控制台打印了&lt;code&gt;get&lt;/code&gt;命令返回的结果：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;eighteen&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;简单的铺垫完成后，我们来看一下lua脚本究竟能否实现回滚级别的原子性。对上面的代码进行改造，插入一条运行错误的命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    Jedis jedis = &lt;span&gt;new&lt;/span&gt; Jedis(&lt;span&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span&gt;6379&lt;/span&gt;);&lt;br/&gt;    String script=&lt;span&gt;&quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);&quot;&lt;/span&gt;&lt;br/&gt;            +&lt;span&gt;&quot;redis.call(&#x27;INCR&#x27;, KEYS[1]);&quot;&lt;/span&gt;&lt;br/&gt;            +&lt;span&gt;&quot;return redis.call(&#x27;GET&#x27;, KEYS[1]);&quot;&lt;/span&gt;;&lt;br/&gt;    List&amp;lt;String&amp;gt; keys= Arrays.asList(&lt;span&gt;&quot;age&quot;&lt;/span&gt;);&lt;br/&gt;    List&amp;lt;String&amp;gt; values= Arrays.asList(&lt;span&gt;&quot;eighteen&quot;&lt;/span&gt;);&lt;br/&gt;    Object result = jedis.eval(script, keys, values);&lt;br/&gt;    System.out.println(result);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;查看执行结果：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.33370288248337027&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicZoe4pdM4wWkbNUicUUOTfO7QSg1JGM2TicpFibR2wLTv0T3pVYWUhazuM5DtyyY5rSpoElg7UAlsbiag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;902&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再到客户端执行一下get命令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; get age&lt;br/&gt;&quot;eighteen&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也就是说，虽然程序抛出了异常，但异常前的命令还是被正常的执行了且没有被回滚。再试试直接在redis客户端中运行这条指令：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; flushall&lt;br/&gt;OK&lt;br/&gt;127.0.0.1:6379&amp;gt; eval &quot;redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1]);redis.call(&#x27;INCR&#x27;, KEYS[1]);return redis.call(&#x27;GET&#x27;, KEYS[1])&quot; 1 age eight&lt;br/&gt;(error) ERR Error running script (call to f_c2ea9d5c8f60735ecbedb47efd42c834554b9b3b): @user_script:1: ERR value is not an integer or out of range&lt;br/&gt;127.0.0.1:6379&amp;gt; get age&lt;br/&gt;&quot;eight&quot;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同样，错误之前的指令仍然没有被回滚，那么我们之前经常听说的&lt;code&gt;Lua&lt;/code&gt;脚本保证原子性操作究竟是怎么回事呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实，在redis中是使用的同一个lua解释器来执行所有命令，也就保证了当一段lua脚本在执行时，不会有其他脚本或redis命令同时执行，保证了操作不会被其他指令插入或打扰，实现的仅仅是这种程度上的原子操作。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是遗憾的是，如果lua脚本运行时出错并中途结束，之后的操作不会进行，但是之前已经发生的写操作不会撤销，所以即使使用了lua脚本，也不能实现类似数据库回滚的原子性。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文基于redis 5.0.3 进行测试&lt;/p&gt;&lt;p&gt;官方文档相关说明：https://redis.io/topics/transactions&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>