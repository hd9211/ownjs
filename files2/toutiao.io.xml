<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>13f23ec84e1533d213f21eb55f5bbf97</guid>
<title>[推荐] 这三年被分布式坑惨了，曝光十大坑</title>
<link>https://toutiao.io/k/yabo548</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-top: 10px; margin-bottom: 10px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; white-space: normal; word-spacing: 0.8px; letter-spacing: 0.75px; text-align: center; visibility: visible;&quot; class=&quot;js_darkmode__1&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;这是我的第 &lt;/span&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(255, 104, 39)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(255, 104, 39)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(255, 104, 39)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(255, 104, 39)&quot; data-darkmode-color-15976750929548=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(255, 104, 39)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(255, 104, 39)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(255, 104, 39)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;60&lt;/span&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt; 篇原创文章&lt;/span&gt;&lt;br data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-style=&quot;background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; white-space: normal; word-spacing: 0.8px; letter-spacing: 0.75px; text-align: center; visibility: visible;&quot; class=&quot;js_darkmode__2&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-style=&quot;color: rgb(178, 178, 178); font-size: 14px; visibility: visible;&quot; class=&quot;js_darkmode__3&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(178, 178, 178)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;作者 | 悟空聊架构&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot; data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-style=&quot;background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; white-space: normal; word-spacing: 0.8px; letter-spacing: 0.75px; text-align: center; visibility: visible;&quot; class=&quot;js_darkmode__4&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-style=&quot;color: rgb(178, 178, 178); font-size: 14px; visibility: visible;&quot; class=&quot;js_darkmode__5&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(178, 178, 178)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;来源 | &lt;span&gt;悟空聊架构&lt;/span&gt;（ID：PassJava666）&lt;/span&gt;&lt;/p&gt;&lt;section data-darkmode-color-15906764299112=&quot;rgb(230, 230, 230)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-style=&quot;margin-bottom: 20px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &amp;quot;PingFang SC&amp;quot;, Cambria, Cochin, Georgia, Times, &amp;quot;Times New Roman&amp;quot;, serif; font-size: 16px; white-space: normal; word-spacing: 0.8px; letter-spacing: 0.75px; text-align: center; visibility: visible;&quot; class=&quot;js_darkmode__6&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(0, 0, 0)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(0, 0, 0)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;&lt;span data-darkmode-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-original-color-15906764299112=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15906764299112=&quot;rgb(36, 36, 36)&quot; data-darkmode-original-bgcolor-15906764299112=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15958675267961=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15958675267961=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15958675267961=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15958675267961=&quot;rgb(255, 255, 255)&quot; data-style=&quot;color: rgb(178, 178, 178); font-size: 14px; visibility: visible;&quot; class=&quot;js_darkmode__7&quot; data-darkmode-color-15965526125846=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15965526125846=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15965526125846=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15965526125846=&quot;rgb(255, 255, 255)&quot; data-darkmode-bgcolor-15969880239317=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15969880239317=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15969880239317=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15969880239317=&quot;rgb(178, 178, 178)&quot; data-darkmode-color-15976750929548=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15976750929548=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15976750929548=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15976750929548=&quot;rgb(255, 255, 255)&quot; data-darkmode-color-15982803404507=&quot;rgb(163, 163, 163)&quot; data-darkmode-original-color-15982803404507=&quot;rgb(178, 178, 178)&quot; data-darkmode-bgcolor-15982803404507=&quot;rgb(25, 25, 25)&quot; data-darkmode-original-bgcolor-15982803404507=&quot;rgb(255, 255, 255)&quot;&gt;转载请联系授权（微信ID：PassJava）&lt;/span&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本篇主要内容如下：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4924554183813443&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWfWF1nN1tlXMqCtseXWcW0QEOiatxVODq0DhiaSUe5sTWOwCpovsNENicQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;729&quot;/&gt;&lt;figcaption&gt;主要内容&lt;/figcaption&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;前言&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都在讨论分布式，特别是面试的时候，不管是招初级软件工程师还是高级，都会要求懂分布式，甚至要求用过。传得沸沸扬扬的分布式到底是什么东东，有什么优势？&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;借用火影忍术&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6310344827586207&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWCCQlz6ibWPlvEicib3ibvmw1dWZ3ESVqtibFzJZYlKP1IaB6U6GzNcicbS4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;870&quot;/&gt;&lt;figcaption&gt;风遁&lt;span&gt;·&lt;/span&gt;螺旋手里剑&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;看过&lt;code&gt;火影&lt;/code&gt;的同学肯定知道&lt;code&gt;漩涡鸣人&lt;/code&gt;的招牌忍术：&lt;code&gt;多重影分身之术&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;这个术有一个特别厉害的地方，&lt;code&gt;过程和心得&lt;/code&gt;：多个分身的感受和经历都是相通的。比如 A 分身去找卡卡西（鸣人的老师）请教问题，那么其他分身也会知道 A 分身问的什么问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;code&gt;漩涡鸣人&lt;/code&gt;有另外一个超级厉害的忍术，需要由几个影分身完成：&lt;code&gt;风遁·螺旋手里剑。&lt;/code&gt;&lt;span&gt;这个忍术是&lt;/span&gt;靠三个鸣人一起协作完成的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两个忍术和分布式有什么关系？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分布在不同地方的系统或服务，是彼此相互关联的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分布式系统是分工合作的。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;案例：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;比如 Redis 的&lt;code&gt;哨兵机制&lt;/code&gt;，可以知道集群环境下哪台 &lt;code&gt;Redis&lt;/code&gt; 节点挂了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Kafka的 &lt;code&gt;Leader 选举机制&lt;/code&gt;，如果某个节点挂了，会从 &lt;code&gt;follower&lt;/code&gt; 中重新选举一个 leader 出来。（leader 作为写数据的入口，follower 作为读的入口）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那&lt;code&gt;多重影分身之术&lt;/code&gt;有什么缺点？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;会消耗大量的查克拉。分布式系统同样具有这个问题，需要几倍的资源来支持。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;对分布式的通俗理解&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;是一种工作方式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将不同的业务分布在不同的地方&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;优势可以从两方面考虑：一个是宏观，一个是微观。&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;宏观层面：多个功能模块糅合在一起的系统进行服务拆分，来解耦服务间的调用。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;微观层面：将模块提供的服务分布到不同的机器或容器里，来扩大服务力度。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;任何事物有阴必有阳，那分布式又会带来哪些问题呢？&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;需要更多优质人才懂分布式，人力成本增加&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;架构设计变得异常复杂，学习成本高&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;运维部署和维护成本显著增加&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;多服务间链路变长，开发排查问题难度加大&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;环境高可靠性问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据幂等性问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据的顺序问题&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;等等&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;讲到&lt;code&gt;分布式&lt;/code&gt;不得不知道 &lt;code&gt;CAP&lt;/code&gt; 定理和 &lt;code&gt;Base&lt;/code&gt; 理论，这里给不知道的同学做一个扫盲。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;CAP 定理&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在理论计算机科学中，CAP 定理指出对于一个分布式计算系统来说，不可能通是满足以下三点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;可用性（Availability）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每次请求都能获取到非错的响应，但不保证获取的数据为最新数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;分区容错性（Partition tolerance）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;BASE 理论&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;BASE&lt;/code&gt; 是 &lt;code&gt;Basically Available&lt;/code&gt;（基本可用）、&lt;code&gt;Soft state&lt;/code&gt;（软状态）和 &lt;code&gt;Eventually consistent&lt;/code&gt;（最终一致性）三个短语的缩写。&lt;code&gt;BASE&lt;/code&gt; 理论是对 &lt;code&gt;CAP&lt;/code&gt; 中 &lt;code&gt;AP&lt;/code&gt; 的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足 &lt;code&gt;BASE&lt;/code&gt; 理论的事务，我们称之为&lt;code&gt;柔性事务&lt;/code&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;基本可用 ：&lt;/strong&gt; 分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如电商网址交易付款出现问题来，商品依然可以正常浏览。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;软状态：&lt;/strong&gt; 由于不要求强一致性，所以BASE允许系统中存在中间状态（也叫软状态），这个状态不影响系统可用性，如订单中的“支付中”、“数据同步中”等状态，待数据最终一致后状态改为“成功”状态。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;最终一致性：&lt;/strong&gt; 最终一致是指的经过一段时间后，所有节点数据都将会达到一致。如订单的“支付中”状态，最终会变为“支付成功”或者“支付失败”，使订单状态与实际交易结果达成一致，但需要一定时间的延迟、等待。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;一、分布式消息队列的坑&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;消息队列如何做分布式？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;将消息队列里面的消息分摊到多个节点（指某台机器或容器）上，所有节点的消息队列之和就包含了所有消息。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 消息队列的坑之非幂等&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;幂等性概念&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所谓幂等性就是无论多少次操作和第一次的操作结果一样。如果消息被多次消费，很有可能造成数据的不一致。而如果消息不可避免地被消费多次，如果我们开发人员能通过技术手段保证数据的前后一致性，那也是可以接受的，这让我想起了 Java 并发编程中的 ABA 问题，如果出现了 [&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzAwMjI0ODk0NA==&amp;amp;mid=2451944205&amp;amp;idx=1&amp;amp;sn=472fab10dda17168a7a7b14a5f9e9ac7&amp;amp;chksm=8d1c4a92ba6bc3849eebbd925009e0d61593fa8e3dd9a087725ffa55c0f3a38c3bb7646db83f&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;ABA问题&lt;/a&gt;)，若能保证所有数据的前后一致性也能接受。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;场景分&lt;/span&gt;&lt;span&gt;析&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;RabbitMQ&lt;/code&gt;、&lt;code&gt;RocketMQ&lt;/code&gt;、&lt;code&gt;Kafka&lt;/code&gt; 消息队列中间件都有可能出现消息重复消费问题。这种问题并不是 MQ 自己保证的，而是需要开发人员来保证。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这几款消息队列中间都是是全球最牛的分布式消息队列，那肯定考虑到了消息的幂等性。我们以 Kafka 为例，看看 Kafka 是怎么保证消息队列的幂等性。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kafka 有一个 &lt;code&gt;偏移量&lt;/code&gt; 的概念，代表着消息的序号，每条消息写到消息队列都会有一个偏移量，消费者消费了数据之后，每过一段固定的时间，就会把消费过的消息的偏移量提交一下，表示已经消费过了，下次消费就从偏移量后面开始消费。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑：&lt;/code&gt;当消费完消息后，还没来得及提交偏移量，系统就被关机了，那么未提交偏移量的消息则会再次被消费。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示，队列中的数据 A、B、C，对应的偏移量分别为 100、101、102，都被消费者消费了，但是只有数据 A 的偏移量 100 提交成功，另外 2 个偏移量因系统重启而导致未及时提交。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4014423076923077&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWyr4ytdyMoQjPN9QDQic8fcNgmAe6wnnZYOQ1QDYIteQFDtXFqMzqhCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;832&quot;/&gt;&lt;figcaption&gt;系统重启，偏移量未提交&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;重启后，消费者又是拿偏移量 100 以后的数据，从偏移量 101 开始拿消息。所以数据 B 和数据 C 被重复消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如下图所示：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4065359477124183&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWS1BdUSibWAlib0NpUKgu0lzdVj0DJJk2hWHe2nTcz06DhHaOYttZmbdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;765&quot;/&gt;&lt;figcaption&gt;重启后，重复消费消息&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;避坑指南&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微信支付结果通知场景&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;微信官方文档上提到微信支付通知结果可能会推送多次，需要开发者自行保证幂等性。第一次我们可以直接修改订单状态（如支付中 -&amp;gt; 支付成功），第二次就根据订单状态来判断，如果不是支付中，则不进行订单处理逻辑。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;插入数据库场景&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;每次插入数据时，先检查下数据库中是否有这条数据的主键 id，如果有，则进行更新操作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;写 Redis 场景&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Redis 的 &lt;code&gt;Set&lt;/code&gt; 操作天然幂等性，所以不用考虑 Redis 写数据的问题。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;其他场景方案&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;生产者发送每条数据时，增加一个全局唯一 id，类似订单 id。每次消费时，先去 Redis 查下是否有这个 id，如果没有，则进行正常处理消息，且将 id 存到 Redis。如果查到有这个 id，说明之前消费过，则不要进行重复处理这条消息。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不同业务场景，可能会有不同的幂等性方案，大家选择合适的即可，上面的几种方案只是提供常见的解决思路。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 消息队列的坑之消息丢失&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑:&lt;/code&gt;消息丢失会带来什么问题？如果是订单下单、支付结果通知、扣费相关的消息丢失，则可能造成财务损失，如果量很大，就会给甲方带来巨大损失。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那消息队列是否能保证消息不丢失呢？答案：否。主要有三种场景会导致消息丢失。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28651685393258425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWzD3f0ZSMOibYNTosYR1ib0mibNTj9JBiajmBSXBgW9pO5dUgfhBJe1FoDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;534&quot;/&gt;&lt;figcaption&gt;消息队列之消息丢失&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;（1）生产者存放消息的过程中丢失消息&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.28654970760233917&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWYD6cuZZSSERicwa36esug8JEYzhZc15qkCXkicvlfqRecApPHsgPohqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;513&quot;/&gt;&lt;figcaption&gt;生产者丢失消息&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;解决方案&lt;span/&gt;&lt;/h4&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于 RabbitMQ 来说，生产者发送数据之前开启 RabbitMQ 的&lt;strong&gt;事务机制&lt;/strong&gt;&lt;code&gt;channel.txselect&lt;/code&gt; ，如果消息没有进队列，则生产者受到异常报错，并进行回滚 &lt;code&gt;channel.txRollback&lt;/code&gt;，然后重试发送消息；如果收到了消息，则可以提交事务 &lt;code&gt;channel.txCommit&lt;/code&gt;。但这是一个同步的操作，会影响性能。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们可以采用另外一种模式：&lt;code&gt;confirm&lt;/code&gt; 模式来解决同步机制的性能问题。每次生产者发送的消息都会分配一个唯一的 id，如果写入到了 RabbitMQ 队列中，则 RabbitMQ 会回传一个 &lt;code&gt;ack&lt;/code&gt; 消息，说明这个消息接收成功。如果 RabbitMQ 没能处理这个消息，则回调 &lt;code&gt;nack&lt;/code&gt; 接口。说明需要重试发送消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;也可以自定义超时时间 + 消息 id 来实现超时等待后重试机制。但可能出现的问题是调用 ack 接口时失败了，所以会出现消息被发送两次的问题，这个时候就需要保证消费者消费消息的幂等性。&lt;/p&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;事务模式&lt;/code&gt; 和 &lt;code&gt;confirm&lt;/code&gt; 模式的区别：&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;事务机制是同步的，提交事务后悔被&lt;strong&gt;阻塞&lt;/strong&gt;直到提交事务完成后。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;confirm 模式异步接收通知，但可能&lt;strong&gt;接收不到通知&lt;/strong&gt;。需要考虑接收不到通知的场景。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;（2）消息队列丢失消息&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3093385214007782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWc3HWS2arJmrOdvBoe5Hia9mFHiaBfbK1njTuu0d07qibKtkhQ5cfgGXGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;514&quot;/&gt;&lt;figcaption&gt;消息队列丢失消息&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息队列的消息可以放到内存中，或将内存中的消息转到硬盘（比如数据库）中，一般都是内存和硬盘中都存有消息。如果只是放在内存中，那么当机器重启了，消息就全部丢失了。如果是硬盘中，则可能存在一种极端情况，就是将内存中的数据转换到硬盘的期间中，消息队列出问题了，未能将消息持久化到硬盘。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建 &lt;code&gt;Queue&lt;/code&gt; 的时候将其设置为持久化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;发送消息的时候将消息的 &lt;code&gt;deliveryMode&lt;/code&gt; 设置为 2 。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;开启生产者 &lt;code&gt;confirm&lt;/code&gt; 模式，可以重试发送消息。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;（3）消费者丢失消息&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWvKonXia2gQwunDqmEIPicqdHdbacSwhDMW8fTAgsyj14bc2v3zUtdDpQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;510&quot;/&gt;&lt;figcaption&gt;消费者丢失消息&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消费者刚拿到数据，还没开始处理消息，结果进程因为异常退出了，消费者没有机会再次拿到消息。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;关闭 RabbitMQ 的自动 &lt;code&gt;ack&lt;/code&gt;，每次生产者将消息写入消息队列后，就自动回传一个 &lt;code&gt;ack&lt;/code&gt; 给生产者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消费者处理完消息再主动 &lt;code&gt;ack&lt;/code&gt;，告诉消息队列我处理完了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;问题：&lt;/strong&gt; 那这种主动 &lt;code&gt;ack&lt;/code&gt; 有什么漏洞了？如果 主动 &lt;code&gt;ack&lt;/code&gt; 的时候挂了，怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则可能会被再次消费，这个时候就需要幂等处理了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;问题：&lt;/strong&gt; 如果这条消息一直被重复消费怎么办？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;则需要有加上重试次数的监测，如果超过一定次数则将消息丢失，记录到异常表或发送异常通知给值班人员。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;（4）RabbitMQ 消息丢失总结&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2985386221294363&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWJSMnugxLk3qMb3clmVum97VR6icYAFmqvlV0NZOnlvPP3ia8mQziaWZSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;958&quot;/&gt;&lt;figcaption&gt;RabbitMQ 丢失消息的处理方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;（5）Kafka 消息丢失&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;场景：&lt;/strong&gt;&lt;code&gt;Kafka&lt;/code&gt; 的某个 broker（节点）宕机了，重新选举 leader （写入的节点）。如果 leader 挂了，follower 还有些数据未同步完，则 follower 成为 leader 后，消息队列会丢失一部分数据。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;给 topic 设置 &lt;code&gt;replication.factor&lt;/code&gt; 参数，值必须大于 1，要求每个 partition 必须有至少 2 个副本。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;给 kafka 服务端设置 &lt;code&gt;min.insyc.replicas&lt;/code&gt; 必须大于 1，表示一个 leader 至少一个 follower 还跟自己保持联系。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 消息队列的坑之消息乱序&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑:&lt;/code&gt; 用户先下单成功，然后取消订单，如果顺序颠倒，则最后数据库里面会有一条下单成功的订单。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RabbitMQ 场景：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;生产者向消息队列按照顺序发送了 2 条消息，消息1：增加数据 A，消息2：删除数据 A。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;期望结果：数据 A 被删除。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;但是如果有两个消费者，消费顺序是：消息2、消息 1。则最后结果是增加了数据 A。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.26523297491039427&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaW1hFiasBZGkfgRuKTaFKdhEyoS90QWQEcQI8ibxR9haHCKwSVrib8Q6FdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;558&quot;/&gt;&lt;figcaption&gt;RabbitMQ消息乱序场景&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3610648918469218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWiac6wHm21o0l10Bpgsa4hagf6XiaZRHqEBruahAl1lBYicmK2wKKH7wsA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;601&quot;/&gt;&lt;figcaption&gt;RabbitMQ 消息乱序场景&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;RabbitMQ 解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;将 Queue 进行拆分，创建多个内存 Queue，消息 1 和 消息 2 进入同一个 Queue。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建多个消费者，每一个消费者对应一个 Queue。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4665523156089194&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWMBibwicPhJOypQ7vrM5bDic06yILjbD6zOEq45q48EfwhF8MJCwhAyCaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;583&quot;/&gt;&lt;figcaption&gt;RabbitMQ 解决方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka 场景：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;创建了 topic，有 3 个 partition。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;创建一条订单记录，订单 id 作为 key，订单相关的消息都丢到同一个 partition 中，同一个生产者创建的消息，顺序是正确的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;为了快速消费消息，会创建多个消费者去处理消息，而为了提高效率，每个消费者可能会创建多个线程来并行的去拿消息及处理消息，处理消息的顺序可能就乱序了。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.4435643564356435&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaW4pSo6lMocgIWaxG9icE8b4iblibiakiaWCCmQljw4jxvNm3q2WJ5v5QWDicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;505&quot;/&gt;&lt;figcaption&gt;Kafka 消息丢失场景&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Kafka 解决方案：&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;解决方案和 RabbitMQ 类似，利用多个 内存 Queue，每个线程消费 1个 Queue。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;具有相同 key 的消息 进同一个 Queue。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.6413934426229508&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaW4ia8HTIrwsMSOlKjqh3Iw7ibBpLcibdS9UcudEc0aJHQ1kxkNLHYcaodw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;488&quot;/&gt;&lt;figcaption&gt;Kafka 消息乱序解决方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;4. 消息队列的坑之消息积压&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;消息积压：消息队列里面有很多消息来不及消费。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;场景 1：&lt;/strong&gt; 消费端出了问题，比如消费者都挂了，没有消费者来消费了，导致消息在队列里面不断积压。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;场景 2：&lt;/strong&gt; 消费端出了问题，比如消费者消费的速度太慢了，导致消息不断积压。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;坑：比如线上正在做订单活动，下单全部走消息队列，如果消息不断积压，订单都没有下单成功，那么将会损失很多交易。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.3193717277486911&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWLP5KESVoAxcQW6fgsicotu7wOX9j32f0ibuS7IWC3Coyc8ulOVHENJgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;573&quot;/&gt;&lt;figcaption&gt;消息队列之消息积压&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：&lt;strong&gt;解铃还须系铃人&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;修复代码层面消费者的问题，确保后续消费速度恢复或尽可能加快消费的速度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;停掉现有的消费者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;临时建立好原先 5 倍的 Queue 数量。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;临时建立好原先 5 倍数量的 消费者。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将堆积的消息全部转入临时的 Queue，消费者来消费这些 Queue。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.5663265306122449&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaW8hdfNWjWuEmO934LUdI7rCMkmQBaByDyxibSUUZ69LW4cLuibxvgcDSg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;588&quot;/&gt;&lt;figcaption&gt;消息积压解决方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;5. 消息队列的坑之消息过期失效&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑：&lt;/code&gt;RabbitMQ 可以设置过期时间，如果消息超过一定的时间还没有被消费，则会被 RabbitMQ 给清理掉。消息就丢失了。&lt;/p&gt;&lt;/blockquote&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.34341637010676157&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWHgaIicI4cHv835h3l7jdjLnCHU481A52lF8mLkoTiaDEYC8qia24Myemw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;562&quot;/&gt;&lt;figcaption&gt;消息过期失效&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2563176895306859&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWRWKia2UkdhC3Kn23CGQ72icPXZBfLPOyezZdePbFWLoSXkpRnaV7AS9g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;figcaption&gt;消息过期失效解决方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;6. 消息队列的坑之队列写满&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑：&lt;/code&gt;当消息队列因消息积压导致的队列快写满，所以不能接收更多的消息了。生产者生产的消息将会被丢弃。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;解决方案：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;判断哪些是无用的消息，RabbitMQ 可以进行 &lt;code&gt;Purge Message&lt;/code&gt; 操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果是有用的消息，则需要将消息快速消费，将消息里面的内容转存到数据库。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;准备好程序将转存在数据库中的消息再次重导到消息队列。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;闲时重导消息到消息队列。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;二、分布式缓存的坑&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在高频访问数据库的场景中，我们会在业务层和数据层之间加入一套缓存机制，来分担数据库的访问压力，毕竟访问磁盘 I/O 的速度是很慢的。比如利用缓存来查数据，可能5ms就能搞定，而去查数据库可能需要 50 ms，差了一个数量级。而在高并发的情况下，数据库还有可能对数据进行加锁，导致访问数据库的速度更慢。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式缓存我们用的最多的就是 Redis了，它可以提供分布式缓存服务。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. Redis 数据丢失的坑&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;哨兵机制&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Redis 可以实现利用&lt;code&gt;哨兵机制&lt;/code&gt;实现集群的高可用。那什么十哨兵机制呢？&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;英文名：&lt;code&gt;sentinel&lt;/code&gt;，中文名：&lt;code&gt;哨兵&lt;/code&gt;。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;集群监控：负责主副进程的正常工作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;消息通知：负责将故障信息报警给运维人员。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;故障转移：负责将主节点转移到备用节点上。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置中心：通知客户端更新主节点地址。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式：有多个哨兵分布在每个主备节点上，互相协同工作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式选举：需要大部分哨兵都同意，才能进行主备切换。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;高可用：即使部分哨兵节点宕机了，哨兵集群还是能正常工作。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑：&lt;/code&gt; 当主节点发生故障时，需要进行主备切换，可能会导致数据丢失。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;异步复制数据导致的数据丢失&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点异步同步数据给备用节点的过程中，主节点宕机了，导致有部分数据未同步到备用节点。而这个从节点又被选举为主节点，这个时候就有部分数据丢失了。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;脑裂导致的数据丢失&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;主节点所在机器脱离了集群网络，实际上自身还是运行着的。但哨兵选举出了备用节点作为主节点，这个时候就有两个主节点都在运行，相当于两个大脑在指挥这个集群干活，但到底听谁的呢？这个就是脑裂。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那怎么脑裂怎么会导致数据丢失呢？如果发生脑裂后，客户端还没来得及切换到新的主节点，连的还是第一个主节点，那么有些数据还是写入到了第一个主节点里面，新的主节点没有这些数据。那等到第一个主节点恢复后，会被作为备用节点连到集群环境，而且自身数据会被清空，重新从新的主节点复制数据。而新的主节点因没有客户端之前写入的数据，所以导致数据丢失了一部分。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;避坑指南&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;配置 min-slaves-to-write 1，表示至少有一个备用节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;配置 min-slaves-max-lag 10，表示数据复制和同步的延迟不能超过 10 秒。最多丢失 10 秒的数据&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;注意：&lt;code&gt;缓存雪崩&lt;/code&gt;、&lt;code&gt;缓存穿透&lt;/code&gt;、&lt;code&gt;缓存击穿&lt;/code&gt;并不是分布式所独有的，单机的时候也会出现。所以不在分布式的坑之列。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;三、分库分表的坑&lt;/h1&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1.分库分表的坑之扩容&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分库、分表、垂直拆分和水平拆分&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;分库：&lt;/strong&gt; 因一个数据库支持的最高并发访问数是有限的，可以将一个数据库的数据拆分到多个库中，来增加最高并发访问数。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;分表：&lt;/strong&gt; 因一张表的数据量太大，用索引来查询数据都搞不定了，所以可以将一张表的数据拆分到多张表，查询时，只用查拆分后的某一张表，SQL 语句的查询性能得到提升。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;分库分表优势：分库分表后，承受的并发增加了多倍；磁盘使用率大大降低；单表数据量减少，SQL 执行效率明显提升。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;水平拆分：&lt;/strong&gt; 把一个表的数据拆分到多个数据库，每个数据库中的表结构不变。用多个库抗更高的并发。比如订单表每个月有500万条数据累计，每个月都可以进行水平拆分，将上个月的数据放到另外一个数据库。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;垂直拆分：&lt;/strong&gt; 把一个有很多字段的表，拆分成多张表到同一个库或多个库上面。高频访问字段放到一张表，低频访问的字段放到另外一张表。利用数据库缓存来缓存高频访问的行数据。比如将一张很多字段的订单表拆分成几张表分别存不同的字段（可以有冗余字段）。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;分库、分表的方式：&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;根据租户来分库、分表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;利用时间范围来分库、分表。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;利用 ID 取模来分库、分表。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑：&lt;/code&gt;分库分表是一个运维层面需要做的事情，有时会采取凌晨宕机开始升级。可能熬夜到天亮，结果升级失败，则需要回滚，其实对技术团队都是一种煎熬。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;怎么做成自动的来节省分库分表的时间？&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;双写迁移方案：迁移时，新数据的增删改操作在新库和老库都做一遍。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用分库分表工具 Sharding-jdbc  来完成分库分表的累活。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;使用程序来对比两个库的数据是否一致，直到数据一致。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑:&lt;/code&gt; 分库分表看似光鲜亮丽，但分库分表会引入什么新的问题呢？&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;垂直拆分带来的问题&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;依然存在单表数据量过大的问题。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;部分表无法关联查询，只能通过接口聚合方式解决，提升了开发的复杂度。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分布式事处理复杂。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;水平拆分带来的问题&lt;span/&gt;&lt;/h4&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跨库的关联查询性能差。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;数据多次扩容和维护量大。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跨分片的事务一致性难以保证。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2.分库分表的坑之唯一 ID&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;为什么分库分表需要唯一 ID&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果要做分库分表，则必须得考虑表主键 ID 是全局唯一的，比如有一张订单表，被分到 A 库和 B 库。如果 两张订单表都是从 1 开始递增，那查询订单数据时就错乱了，很多订单 ID 都是重复的，而这些订单其实不是同一个订单。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;分库的一个期望结果就是将访问数据的次数分摊到其他库，有些场景是需要均匀分摊的，那么数据插入到多个数据库的时候就需要交替生成唯一的 ID 来保证请求均匀分摊到所有数据库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑:&lt;/code&gt; 唯一 ID 的生成方式有 n 种，各有各的用途，别用错了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;生成唯一 ID 的原则&lt;span/&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;生成唯一 ID 的几种方式&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;数据库自增 ID。每个数据库每增加一条记录，自己的 ID 自增 1。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;多个库的 ID 可能重复，这个方案可以直接否掉了，不适合分库分表后的 ID 生成。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信息不安全&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;适用 &lt;code&gt;UUID&lt;/code&gt; 唯一 ID。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;UUID 太长、占用空间大。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;不具有有序性，作为主键时，在写入数据时，不能产生有顺序的 append 操作，只能进行 insert 操作，导致读取整个 &lt;code&gt;B+&lt;/code&gt; 树节点到内存，插入记录后将整个节点写回磁盘，当记录占用空间很大的时候，性能很差。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;获取系统当前时间作为唯一 ID。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;高并发时，1 ms内可能有多个相同的 ID。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;信息不安全&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;Twitter 的 &lt;code&gt;snowflake&lt;/code&gt;（雪花算法）：Twitter 开源的分布式 id 生成算法，64 位的 long 型的 id，分为 4 部分&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.19499241274658574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWfyx28NkGnZ7zjnu07042ic3QmVuMKYuaPaicTnGWXcJgp3IrTILyhvqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1318&quot;/&gt;&lt;figcaption&gt;snowflake 算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;p&gt;基本原理和优缺点：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1 bit：&lt;/span&gt;&lt;span&gt;不用，统一为 0&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;41 bits：毫秒时间戳，可以表示 69 年的时间。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;10 bits：5 bits 代表机房 id，5 个 bits 代表机器 id。最多代表 32 个机房，每个机房最多代表 32 台机器。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;12 bits：同一毫秒内的 id，最多 4096 个不同 id，自增模式&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;优点：&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缺点：&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;百度的 &lt;code&gt;UIDGenerator&lt;/code&gt; 算法。&lt;/p&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.7307692307692307&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWdSibiaBYFukSSAc02bWwB3z24KT7SvichHAaG0Pw3gX0SBcPQHQldGyNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;468&quot;/&gt;&lt;figcaption&gt;UIDGenerator 算法&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/li&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;基于 Snowflake 的优化算法。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;借用未来时间和双 Buffer 来解决时间回拨与生成性能等问题，同时结合 MySQL 进行 ID 分配。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;优点：解决了时间回拨和生成性能问题。&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;缺点：依赖 &lt;span&gt;MySQL &lt;/span&gt;数据库。&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;美团的 &lt;code&gt;Leaf-Snowflake&lt;/code&gt; 算法。&lt;span/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;section&gt;&lt;figure&gt;&lt;img data-ratio=&quot;0.6752221125370188&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWxgNtQWYUvDBMaw5dOurH6YYiasrBD6HsVTJRpSuQmnQSS1etIQicicsHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1013&quot;/&gt;&lt;figcaption&gt;图片来源于美团&lt;/figcaption&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;怎么选择：一般自己的内部系统，雪花算法足够，如果还要更加安全可靠，可以选择百度或美团的生成唯一 ID 的方案。&lt;/span&gt;&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;四、分布式事务的坑&lt;/h1&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;怎么理解事务？&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;事务可以简单理解为要么这件事情全部做完，要么这件事情一点都没做，跟没发生一样。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;在分布式的世界中，存在着各个服务之间相互调用，链路可能很长，如果有任何一方执行出错，则需要回滚涉及到的其他服务的相关操作。比如订单服务下单成功，然后调用营销中心发券接口发了一张代金券，但是微信支付扣款失败，则需要退回发的那张券，且需要将订单状态改为异常订单。&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;&lt;code&gt;坑&lt;/code&gt;：如何保证分布式中的事务正确执行，是个大难题。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;分布式事务的几种主要方式&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;XA 方案（两阶段提交方案）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;TCC 方案（try、confirm、cancel）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;SAGA 方案&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;可靠消息最终一致性方案&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最大努力通知方案&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;XA 方案原理&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8149100257069408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaW0nPIuuXl7QCf8G8NHYHtwvOWwyVNTEnn04rAZAE5dYUMUE3oXeVvVA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;389&quot;/&gt;&lt;figcaption&gt;XA 方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;事务管理器负责协调多个数据库的事务，先问问各个数据库准备好了吗？如果准备好了，则在数据库执行操作，如果任一数据库没有准备，则回滚事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;适合单体应用，不适合微服务架构。因为每个服务只能访问自己的数据库，不允许交叉访问其他微服务的数据库。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;TCC 方案&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Try 阶段：对各个服务的资源做检测以及对资源进行锁定或者预留。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Confirm 阶段：各个服务中执行实际的操作。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;Cancel 阶段：如果任何一个服务的业务方法执行出错，需要将之前操作成功的步骤进行回滚。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;应用场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跟支付、交易打交道，必须保证资金正确的场景。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;对于一致性要求高。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;但因为要写很多补偿逻辑的代码，且不易维护，所以其他场景建议不要这么做。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;Sega 方案&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本原理：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;业务流程中的每个步骤若有一个失败了，则补偿前面操作成功的步骤。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;适用场景：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;业务流程长、业务流程多。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参与者包含其他公司或遗留系统服务。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;优势：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一个阶段提交本地事务、无锁、高性能。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;参与者可异步执行、高吞吐。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;补偿服务易于实现。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;缺点：&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;可靠消息一致性方案&lt;span/&gt;&lt;/h3&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.2937384898710866&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SfAHMuUxqJ130Dt32kkg11gRYBtyq7iaWjaWVt5ZXD2aTgpF8wHgMkXyDcZbFPxhZgR3RtIb2tPoMYJIOQdZvLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1086&quot;/&gt;&lt;figcaption&gt;可靠消息一致性方案&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本原理：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;利用消息中间件 &lt;code&gt;RocketMQ&lt;/code&gt; 来实现消息事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第一步：A 系统发送一个消息到 MQ，MQ将消息状态标记为 &lt;code&gt;prepared&lt;/code&gt;（预备状态，半消息），该消息无法被订阅。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二步：MQ 响应 A 系统，告诉 A 系统已经接收到消息了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三步：A 系统执行本地事务。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第四步：若 A 系统执行本地事务成功，将 &lt;code&gt;prepared&lt;/code&gt; 消息改为 &lt;code&gt;commit&lt;/code&gt;（提交事务消息），B 系统就可以订阅到消息了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第五步：MQ 也会定时轮询所有 &lt;code&gt;prepared&lt;/code&gt;的消息，回调 A 系统，让 A 系统告诉 MQ 本地事务处理得怎么样了，是继续等待还是回滚。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第六步：A 系统检查本地事务的执行结果。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第七步：若 A 系统执行本地事务失败，则 MQ 收到 &lt;code&gt;Rollback&lt;/code&gt; 信号，丢弃消息。若执行本地事务成功，则 MQ 收到 &lt;code&gt;Commit&lt;/code&gt; 信号。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B 系统收到消息后，开始执行本地事务，如果执行失败，则自动不断重试直到成功。或 B 系统采取回滚的方式，同时要通过其他方式通知 A 系统也进行回滚。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;B 系统需要保证幂等性。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;最大努力通知方案&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;基本原理：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;系统 A 本地事务执行完之后，发送消息到 MQ。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;MQ 将消息持久化。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;系统 B 如果执行本地事务失败，则&lt;code&gt;最大努力服务&lt;/code&gt;会定时尝试重新调用系统 B，尽自己最大的努力让系统 B 重试，重试多次后，还是不行就只能放弃了。转到开发人员去排查以及后续人工补偿。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;几种方案如何选择&lt;span/&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;跟支付、交易打交道，优先 TCC。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;大型系统，但要求不那么严格，考虑 消息事务或 SAGA 方案。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;单体应用，建议 XA 两阶段提交就可以了。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;最大努力通知方案建议都加上，毕竟不可能一出问题就交给开发排查，先重试几次看能不能成功。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;分布式还有很多坑，这篇只是一个小小的总结，从这些坑中，我们也知道分布式有它的优势也有它的劣势，那到底该不该用分布式，完全取决于业务、时间、成本以及开发团队的综合实力。后续我会继续分享分布式中的一些底层原理，当然也少不了分享一些避坑指南。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;参考资料：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;美团的 Leaf-Snowflake 算法。&lt;br/&gt;百度的 UIDGenerator 算法。&lt;br/&gt;Advanced-Java&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8cf6011684ceda836394bc433aa80de0</guid>
<title>[推荐] 分布式事务精华总结篇，实打实的干货</title>
<link>https://toutiao.io/k/xdryz90</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>08e260d29f42c46aca7685c6a16dbc58</guid>
<title>[推荐] 架构制图：工具与方法论</title>
<link>https://toutiao.io/k/pzy6sbw</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section data-tools=&quot;新媒体管家&quot; data-label=&quot;powered by xmt.cn&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.390026714158504&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwphMIU29THLG5MMNc6LU58Lzwb11YJMRyrGucvLRX82PRiazlb0duFAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2246&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-height=&quot;438px&quot; data-ratio=&quot;0.39&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwBl0c9DsibMc6XDicRcXXkynFImQwibX8HzpfNwTVWqnrOtxicYkicSEcFpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot; title=&quot;image.png&quot;/&gt;‍‍&lt;/span&gt;&lt;span&gt;作者 | 楚衡&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;e84ee21555f671fddfd871ab1398c291&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;“架构制图”这词乍一听似乎有些晦涩，但如果提起“工程制图”，相信绝大部分工科背景的程序员们都不会陌生，甚至还能共同感慨下那些年一起伏在宿舍左手圆规，右手直尺，徒手作图到深夜的日子。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;软件工程也是工程&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;，因此传统工程制图的一些基本理论，在软件行业同样适用。但另一方面，软件与实体制造业之间还是有着本质区别，所以在制图方面的需求和方式也大相径庭，无法直接套用。作为软件行业的从业者，你可以完全不懂工程制图，但你不得不懂架构制图 —— 这是任何程序员职业生涯的的必修课。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;本文在后半段将介绍如何用图去&lt;strong&gt;描述&lt;/strong&gt;（describe）和&lt;strong&gt;传达&lt;/strong&gt;（communicate）你的架构设计。值得强调的是，本文并不会侧重于单一的方法和工具，而是更希望关注那些优秀方法背后的通用方法论，即架构制图的&lt;strong&gt;本质&lt;/strong&gt;、&lt;strong&gt;共性&lt;/strong&gt;和&lt;strong&gt;最佳实践&lt;/strong&gt;。希望本文能起到引子作用，激发大家对自己日常工作中关于架构和制图部分的关注、审视与思考；如果还真能帮助大家提升一点点制图效率和效果，那就更好不过了。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fintranetproxy.alipay.com%2Fskylark%2Flark%2F0%2F2020%2Fpng%2F1610%2F1590937474187-721f5001-e1b9-4fc0-b3d4-b14843f51b97.png%22%2C%22originWidth%22%3A2654%2C%22originHeight%22%3A1314%2C%22name%22%3A%22image.png%22%2C%22size%22%3A549836%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A213.85968%2C%22y%22%3A147.78229%2C%22width%22%3A323.84781999999996%2C%22height%22%3A67.71444000000002%2C%22text%22%3A%22Contents%22%7D%2C%7B%22x%22%3A987.6193%2C%22y%22%3A159.04391%2C%22width%22%3A374.3524000000001%2C%22height%22%3A61.0822%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%22%7D%2C%7B%22x%22%3A969.8358%2C%22y%22%3A364.2012%2C%22width%22%3A446.13340000000005%2C%22height%22%3A61.92548000000005%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%B6%E6%9E%84%E5%BE%88%E9%87%8D%E8%A6%81%22%7D%2C%7B%22x%22%3A969.2126%2C%22y%22%3A546.43604%2C%22width%22%3A559.2089%2C%22height%22%3A60.86555999999996%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E6%9E%B6%E6%9E%84%22%7D%2C%7B%22x%22%3A1672.1267%2C%22y%22%3A545.0228%2C%22width%22%3A453.74729999999977%2C%22height%22%3A59.57320000000004%2C%22text%22%3A%22-%E4%B8%8D%E6%98%AF%E6%9C%AC%E6%AC%A1%E5%88%86%E4%BA%AB%E9%87%8D%E7%82%B9%22%7D%2C%7B%22x%22%3A967.48566%2C%22y%22%3A713.7945%2C%22width%22%3A556.40194%2C%22height%22%3A61.66075999999998%2C%22text%22%3A%22%E6%80%8E%E4%B9%88%E6%8F%8F%E8%BF%B0%E4%BD%A0%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%22%7D%2C%7B%22x%22%3A966.8825%2C%22y%22%3A895.65027%2C%22width%22%3A502.15829999999994%2C%22height%22%3A61.74468999999999%2C%22text%22%3A%22%E6%9E%B6%E6%9E%84%E5%88%B6%E5%9B%BE%E6%96%B9%E6%B3%95%E4%B8%8E%E5%B7%A5%E5%85%B7%22%7D%2C%7B%22x%22%3A968.50085%2C%22y%22%3A1073.8687%2C%22width%22%3A503.4163500000001%2C%22height%22%3A63.177200000000084%2C%22text%22%3A%22%E6%9E%B6%E6%9E%84%E5%88%B6%E5%9B%BE%E6%96%B9%E6%B3%95%E8%AE%BA%E6%80%BB%E7%BB%93%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Contents%20%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9E%B6%E6%9E%84%E5%BE%88%E9%87%8D%E8%A6%81%20%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E6%9E%B6%E6%9E%84%20-%E4%B8%8D%E6%98%AF%E6%9C%AC%E6%AC%A1%E5%88%86%E4%BA%AB%E9%87%8D%E7%82%B9%20%E6%80%8E%E4%B9%88%E6%8F%8F%E8%BF%B0%E4%BD%A0%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%20%E6%9E%B6%E6%9E%84%E5%88%B6%E5%9B%BE%E6%96%B9%E6%B3%95%E4%B8%8E%E5%B7%A5%E5%85%B7%20%E6%9E%B6%E6%9E%84%E5%88%B6%E5%9B%BE%E6%96%B9%E6%B3%95%E8%AE%BA%E6%80%BB%E7%BB%93%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A1327%2C%22height%22%3A657%7D&quot;&gt;&lt;img data-croporisrc=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwlok4r3u2dFohljzlT3xVn3IKUk8ANX31T3p7o9ntI6xPxMRfvbShGg/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;2654.0000000000005&quot; data-cropy1=&quot;87.24221453287197&quot; data-cropy2=&quot;1184.6574394463667&quot; data-height=&quot;657px&quot; data-ratio=&quot;0.41328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwh4aE1NVV60sgHmqEgdSclO52giciaB1lrtFp3PGxrFdBmxr0kd7NcibzQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; title=&quot;image.png&quot;/&gt;&lt;/span&gt;&lt;/section&gt;&lt;h1 data-lake-id=&quot;41238182bdfd69f2d3c905e25421181e&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;什么是软件架构？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;ff28f41a382730123757b1ee92dbfedd&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 软件架构定义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.44296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwA55aE3OJgHgp1DFicCapiceAaobdib63Oh4xIj6IeGMTndrCGEr2TmV7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;IEEE 给出的定义：架构是环境中该系统的一组基础&lt;strong&gt;概念（concepts）&lt;/strong&gt;和&lt;strong&gt;属性（properties）&lt;/strong&gt;，具体表现就是它的&lt;strong&gt;元素（elements）&lt;/strong&gt;、&lt;strong&gt;关系（relationships）&lt;/strong&gt;，以及设计与演进的&lt;strong&gt;基本原则（principles）&lt;/strong&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;CMU 软件工程研究院的定义：架构是用于推演出该系统的一组&lt;strong&gt;结构（structures）&lt;/strong&gt;，具体是由软件&lt;strong&gt;元素（elements）&lt;/strong&gt;、元素之间的&lt;strong&gt;关系（relationships）&lt;/strong&gt;，以及各自的&lt;strong&gt;属性（properties）&lt;/strong&gt;共同组成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;Uncle Bob 在 Clean Architecture 一书中给出的定义：架构是创建者给予该系统的&lt;strong&gt;形态（shape）&lt;/strong&gt;。这个形态的具体形式来源于对系统&lt;strong&gt;组件（components）&lt;/strong&gt;的&lt;strong&gt;划分&lt;/strong&gt;和&lt;strong&gt;排列&lt;/strong&gt;，以及这些组件之间互相&lt;strong&gt;通讯&lt;/strong&gt;的方式。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;6ef03595f886c90a7079fc27de81de32&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 架构核心要素&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwr6m6ggFqDUQzpILh1zk6QO9aQxVALW2zn9x45dtw0hOq13RGGqD6Lw/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;28.788927335640135&quot; data-cropy2=&quot;573.5640138408304&quot; data-ratio=&quot;0.42578125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwZ8de35efrUvUQ50uwrpYzCgURkFqtnp8h4rAWJsZA8msKME3Blteqw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;综合上述各种权威定义，软件系统的架构通常需要包含如下四类核心要素：&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;ul data-lake-id=&quot;8b591b2f5c2205924fc95b69c2bc2351&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;元素（elements）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：将系统拆分为一组元素 - 模块、组件、结构体、子系统；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;关系（relationships）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：不同元素之间的关系 - 交互、依赖 、继承、组合、聚合；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;属性（properties）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：每个元素具备的属性 - 名称、职责、接口、实现限制等；&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;原理（principles）&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：为什么这么设计 - 拆分依据、设计原则、决策原因等。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h1 data-lake-id=&quot;062afca94f15d1b4163a2e287cc35d61&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;为什么架构很重要？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;d7979d211ae6778957eb9f0c091f00d1&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 架构是系统实现的蓝图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4890625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwfrIvKQfAZxYPxqxyef4KJvOA5U0sicaMFfegfyZJ7x9PrdiabDAaibFyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;最近有部很火的网剧叫《摩天大楼》，讲述了一段匪夷所思的悬疑故事。为什么扯这个呢？因为我想借用这个剧的标题来问个问题：摩天大楼是由谁建起来的？也许你心里会默念：废话，不就是建筑工人们一砖一瓦堆起来的嘛。仔细再想想？背后是不是还有一堆操碎了心的建筑设计师（比如剧中帅气的林大森）和土木工程师们？他们虽然不搬砖也不扛水泥，但如果没有他们产出的那些繁琐严谨的&lt;strong&gt;设计图纸&lt;/strong&gt;，摩天大楼是是不可能像农村自建房一样仅凭工人们各自的经验与想象力就能快速平稳地竖立起来的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;正是靠着这些图纸所描绘出来的&lt;strong&gt;工程蓝图&lt;/strong&gt;（blueprints），才让成百上千工人们的分工合作和验收标准有了依据：大家只需要照着蓝图，按部就班地把自己所负责的那些砖瓦添上去就行了；只要蓝图正确，且施工过程也没有偏差，最终顺利完工只是个时间问题。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;与建筑、汽车或者任何其他工程行业一样，软件在落地实现（编码）之前也需要先有蓝图；而其中最重要的一份蓝图，就是&lt;strong&gt;架构设计&lt;/strong&gt;。没有架构，仅凭程序员自己脑子里的模糊设想，也许你可以像传统手艺人一样独自创造出一些美好有用的小东西（比如 Linux 0.01 版本），但不太可能&lt;strong&gt;以工程的方式协同一个团队&lt;/strong&gt;共同建造起一个与摩天大楼规模类似的&lt;strong&gt;复杂软件系统&lt;/strong&gt;（比如现代的 Linux 系统）。一方面，人类的思维能力终归有限，必须依靠架构这种高度抽象和简化的蓝图，才能让复杂系统的创造、理解、分析和治理变得可行；另一方面，量级达到一定程度的大型系统，也只能依靠多人分工合作才能完成，而架构也正是多人沟通协作的重要基础。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-lake-id=&quot;e259a770c9a8cfc4c9b69760ab61f41a&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 架构是沟通协作的基础&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6046875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwHnKic5zvmHODY1xcoOXE5GGGgNSgiapy3lI0DHHROM0kxlclIicuVjfSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;  &lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwYuNXJ0WXLic2j3tGz5z9Td6JcOGy96ls3TaKjKGUrsicETowuq0gJwyQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7cc141876d1953d6d92a39f7d02b0e93&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c198a0525520dfa0e5620af27d8a7a23&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;软件项目的最终价值产出就是软件系统，而架构作为软件系统的灵魂和骨架，可以起到如下作用：&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;b24541b0c95656668500bdfa7e9008ea&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;理解对齐&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：所有软件系统的目的都是为了实现用户需求，但实现的途径有无限种可能性（相比传统工程行业，软件的灵活性更大、知识迭代更快）。架构设计就是去选择其中一条最合适的实现途径，因此其中会涉及非常多关键的&lt;strong&gt;选路决策&lt;/strong&gt;（为什么要这么拆分？为什么选择 A 技术而不是 B？）。这些重要的技术决策需要通过&lt;strong&gt;架构描述&lt;/strong&gt;这种形式被记录和同步，才能让项目组所有成员对整个系统的理解对齐，&lt;strong&gt;形成共识&lt;/strong&gt;。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;工作量化&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：项目管理最重要的步骤之一就是&lt;strong&gt;工时评估&lt;/strong&gt;，它是确定项目排期和里程碑的直接依据。显然，只通过 PRD / 交互图是无法科学量化出项目工作量的，因为很难直观判断出一句简短需求或一个简单页面背后，究竟要写多少代码、实现起来难度有多大。有了清晰明确的架构之后，理论上绝大部分开发工作都能做到&lt;strong&gt;可见&lt;/strong&gt;、&lt;strong&gt;可预测&lt;/strong&gt;和&lt;strong&gt;可拆解&lt;/strong&gt;，自然而然也就能够被更准确地量化。当然，精准的工作量评估在 IT 行业内也一直是个未解之谜，实际的工期会受太多未知因素影响，包括程序员的技能熟练度、心情好不好、有没有吃饱等。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;标准术语&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：编程作为一种具有创造力的工作，从某种角度看跟写科幻小说是类似的。好的科幻小说都喜欢造概念，比如三体中的智子，如果没看过小说肯定不知道这是个啥玩意儿。软件系统在造概念这一点上，相比科幻小说只有过之而无不及，毕竟小说里的世界通常还是以现实为背景，而软件中的世界就全凭造物者（程序员）的想象（建模）了。稍微复杂一点的软件系统，都会引入一些领域特定甚至全新创作的概念。为了避免在项目过程中出现鸡同鸭讲的沟通障碍和理解歧义，就必须对描述这些概念的术语进行统一。而架构的一个重要目的，就是定义和解释清楚系统中涉及的所有关键&lt;strong&gt;概念&lt;/strong&gt;，并在整个架构设计和描述过程中使用标准和一致的&lt;strong&gt;术语&lt;/strong&gt;，真正做到让大家的沟通都在一个频道上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;1f7d1fd2b0bae92f4603a886054e4422&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;561e4dab8aaa0250bc0d38d5d64cbcf5&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;言之有物&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：就跟讨论产品交互时需要对着原型图、讨论代码细节时需要直接看代码一样，架构是在讨论一些较高维技术问题时的&lt;strong&gt;必要实物&lt;/strong&gt;（具体的实物化形式就是所谓架构描述）。否则，要么一堆人对着空气谈（纸上谈兵都说不上），要么每次沟通时都重新找块白板画一画（费时费力且容易遗落信息，显然不是长久之计）。&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;知识沉淀 &amp;amp; 新人培训&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：架构应该被作为与代码同等重要的&lt;strong&gt;文档资产&lt;/strong&gt;持续沉淀和维护，同时也是项目新人快速理解和上手系统的重要依据。不要让你的系统跟公司内某些祖传遗留系统一样 —— 只有代码遗留了下来，架构文档却没有；只能靠一些口口相传的残留设计记忆，苦苦维系着项目的生命延续。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;0d78ff076330126badedb38e61abced6&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;dddeefcf0fe3aa8f1462a942791eb5be&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 架构决定了产品质量&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwu3TUhb9zR60T9tJ9AkZggStMnEkNE6GILicVYN3D0bwDaYhSBthdPWA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1280&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;451.764705882353&quot; data-ratio=&quot;0.35234375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwnfVItqUufs0AbyxGetJMrS8bmSjNfVGx7nnwmqtOibrjj8JLrFpyJPg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;37d64893da32868520b78d66fab118d6&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;37d64893da32868520b78d66fab118d6&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;如何衡量一个软件产品的质量？上图是 &lt;/span&gt;&lt;span&gt;ISO/IEC 25010&lt;/span&gt;&lt;span&gt; 标准定义的软件产品质量模型，包括以下 8 个大类：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;37d64893da32868520b78d66fab118d6&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;aacd7ad2af89740e6a91c1a1658219d0&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;功能适合性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：功能完整度、功能正确性和功能恰当性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;性能效率&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：时间表现（e.g. 响应时间）、资源利用和容量；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;兼容性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：共存能力（e.g. 多版本组件共存）和互操作性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可用性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：可学习性、可运维性、用户错误保护（e.g. 自动纠错）、UI 美观度、可访问性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可靠性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：成熟度、可用性、容错性、可恢复性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;安全性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：机密性、完整性、不可伪造性、权威性和可审计；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可维护性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：模块度、可复用性、可分析性、可修改性、可测试性；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;可移植性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：可适配性、可安装性、可替代性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-lake-id=&quot;b2dd45aadf56b839313c34bc3536c697&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3246e254818d1a77ed8cad88011d9956&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;上述质量模型中列出的所有点，都是架构设计需要着重考虑的。其中除了功能适合性以外，其他所有点都属于&lt;strong&gt;非功能需求&lt;/strong&gt;的范畴，这也是区分架构好坏的真正分水岭 —— 好的架构设计，不会停留在仅满足功能需求这一最基本的需求层次上（最坏的架构设计也同样能做到），更重要且更难以应对的是其他众多的非功能需求。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;67d28da0f8f83c1a83f702a371926dde&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.27734375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwicDaBwzmFhSBdyp5PVp1SjnkQlX4yEZwqbyGAZX0ehMp3XxIgTlk9Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1c8feb36f8caf8835d638e2c98d92a3c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1c8feb36f8caf8835d638e2c98d92a3c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;当然，鱼与熊掌不可兼得。架构与人生一样，也是一场&lt;strong&gt;权衡&lt;/strong&gt;的游戏，弄不好就跟第八季的龙母一样的下场：既要又要还要，最后反而什么都得不到。好的架构师更应该像雪诺同志学习，表面上“know nothing”，实际上“know everthing”：清楚系统所有&lt;strong&gt;利益相关者&lt;/strong&gt;（stakeholders），努力挖掘各方的&lt;strong&gt;主要述求&lt;/strong&gt;（concerns），相应平衡自己的&lt;strong&gt;架构决策&lt;/strong&gt;（decisions），最终实现你好我好大家好的终极架构目标。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;104e74de4713260a08a0bf7740408c05&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;8a63dbef5109168e869e8e4a834cb303&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 我还能说出更多理由&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwKABicy4AIgmVRX0JWLySzXPfGaA1iaHw0u0K4HKFxxeBGnohf88Nrvtw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a8066cb5e19815d46634f74bcfea5808&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a8066cb5e19815d46634f74bcfea5808&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;要不是篇幅所限，这一页 PPT 显然不够装：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a8066cb5e19815d46634f74bcfea5808&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9c210fe2ccaaba298dd9db4644a4de26&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;17594ea0887cf1685ed60870a30ccf69&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;如何设计一个好的架构？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;05df2b99619a3dc8bf03da5bd7fee7dd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;理解了架构的概念和重要性后，真正的架构师修炼之路才刚刚开始。如何设计一个好的架构？这显然是一个非常博大精深的主题，但并不是本文的重点，因此这里只简单列举了一些基本思想（&lt;strong&gt;原则&lt;/strong&gt;）和经典套路（&lt;strong&gt;模式&lt;/strong&gt;）。当然，架构设计更接近一门经验学科，仅停留在能脱口而出一些玄乎而高大上的理论概念肯定是不够的，需要结合实际工作内容和业务场景多多实践和揣摩才行，否则只能算是徘徊在架构的门外，连入门都谈不。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;05df2b99619a3dc8bf03da5bd7fee7dd&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;5773b5071c464936ee650997e8a73fc4&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 架构原则（principles）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49140625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwt9GNVGFAuJmZB564uOb37UoZ9VTQa5fx0ia71gjmEIdQ3UrvJHdE35Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ff3e6e0b482b205fb0f1502019e7d466&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ff3e6e0b482b205fb0f1502019e7d466&quot; data-wording=&quot;true&quot;&gt;&lt;strong&gt;&lt;span&gt;SOLID 原则&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;是一套比较经典且流行的架构原则（主要还是名字起得好）：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ff3e6e0b482b205fb0f1502019e7d466&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8edf2c75cd5077a8f9acfaf451f5016a&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0749aa9dde14083e3ad2ef4f45ecc037&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;此外，我们做架构设计时也会尽量遵循如下一些原则（与上述 SOLID 原则在本质上也是相通的）：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0749aa9dde14083e3ad2ef4f45ecc037&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;26db0cb71286ebcae1e0858bfd968f6a&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;ad9c0818c8eb374471e399178c5a2e30&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 架构模式（patterns）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.45859375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYws0icAMRXOox4wPug23pTuxARoD3SV26GYABmoh7RVaTUTdickxrPLia7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c75afb7d942fb7d5ee35a5eadf625878&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c75afb7d942fb7d5ee35a5eadf625878&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构模式（architectural patterns）与我们常讨论的设计模式（design patterns）并不是一码事，但如果仅从“模式”这个角度去解读，两者的理念都是一致的：针对&lt;strong&gt;给定上下文&lt;/strong&gt;中经常出现的问题的&lt;strong&gt;通用、可复用的解决方案&lt;/strong&gt;。最主要的区别在于，架构模式会更高维抽象和偏全局整体（毕竟是运用在架构设计层面）。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;254ddd5cfb0d623eec58ff58f5ddd8b7&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;54446354de8f0c4030ce9d77290aa8fd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;常见的架构模式，既包括一些传统模式（e.g. 分层、C/S、MVC、事件驱动），也包括一些新兴玩法（e.g. 云原生、微服务、Serverless）。&lt;strong&gt;不同模式有不同的适用场景&lt;/strong&gt;，没有哪一种模式能通杀所有需求。成熟的架构师应该像一个冷静到冒得感情的杀手，永远只会客观地评估和选择最适合当下的解决手段，即使那么做会显得简单乏味；相反，不成熟的架构师，一心总想着搞事情（e.g. 强行套用微服务架构），而不是真正搞定问题。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;54446354de8f0c4030ce9d77290aa8fd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;913dcf51b030c78dbb4b86285eb1baa4&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;怎么描述你的架构设计？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;49947608ade6deb43cffbf5530b45e2d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;有了良好的架构设计，万里长征之路就已经走了一大半。就像是青年导演第一次遇上好剧本，心潮澎湃两眼放光，仿佛已经预见了电影上映后的票房盛况。当然，剩下的一小半路，并不会如想象中那么平坦 —— 同样的剧本，不同导演拍出来会有质一样的区别。好的“最佳导演”，即使面对不是“最佳剧本”的剧本，也有能力拍出“最佳影片”。同样，好的架构师，也应该有能力描述好一个不错的架构设计；即使做不到为精彩的内容加分，也不应该因为形式上没描述好而丢分，否则就会像高考作文丢了卷面分一样憋屈和心酸。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;49947608ade6deb43cffbf5530b45e2d&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;c6b1b6f5a60f04491f4245d5555215e4&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 架构描述的意义&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.51015625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw5tNo459pjjOPXebOMu6PUQSzX0n18BOEGpCTSHWsjCsPKp1XLficktA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8c00e43b7d12f456166584819d60c2bd&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8c00e43b7d12f456166584819d60c2bd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;为什么要描述架构？让它只存在我深深的脑海里不行吗？西方人有句谚语：&lt;strong&gt;好记性不如烂笔头&lt;/strong&gt;。任何没有持久化的东西都是易失的（volatile），就跟内存一样。另一方面，就如前文所述，架构是沟通协作的基础，不通过架构描述（Architecture Description）沉淀下来让所有项目干系人都能看到，那就失去了沟通和传播的唯一载体。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9ae44e4946d83be2643da406df03b971&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;56d68245a64f5acbe69ffa027012c030&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;根据个人观察，大家对“架构需要描述”这一点都没异议，所以绝大部分项目都或多或少会产出一些有模有样的架构描述文档。但“有架构描述”和“有好的架构描述”，这之间的鸿沟是巨大的，甚至比“没有”和“有”之间的差别还大。如果你也跟我一样，饱经沧桑阅尽无数架构文档，曾拍手叫好心怀感激过，也曾拍着大腿愤怒不已过，应该也能感同身受。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;63575fb0cd1d94128a528f284af1a730&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;18b06bb34e1e62c801a332639e86a3bf&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 架构描述的方式&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.53125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwiaQMpGBatwC4iayvoJyicW7x08HkGCjayibCCRy2Qm8ZXibFHpiaLBYQzmtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d81c353e250e4d87fac1b5a8fd4f50e9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d81c353e250e4d87fac1b5a8fd4f50e9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;对于同一件事物，作家会选择用文字来叙述，而画家却会用图画。尽管两者想要传达的信息是一致的，但描述方式的不同也会带来效果上的巨大差异。架构描述也分&lt;strong&gt;文字（Text）&lt;/strong&gt;和&lt;strong&gt;图（Diagram）&lt;/strong&gt;两种形式，两者各有千秋：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d81c353e250e4d87fac1b5a8fd4f50e9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4e5a67a9352ea884734c2759f2ed85b2&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;88ae7167de7c386d2266d23c51bf0dc5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;聪明的你冷笑了一声：哼，又不是小孩子非得做选择题，难道不可以文字与图都要吗？当然可以，理想的架构描述一定是&lt;strong&gt;图文并茂&lt;/strong&gt;的。但现实世界显然比理想残酷，实际软件项目中很难给你留足时间先憋出一篇完美的架构文档。如果以成年人的思维去考虑投入产出比（ROI），那么你一定会优先选择画图。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;dae00b2b6962ddef2bc221987964d861&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;8d8f394b7046249144a196fba71c99be&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 为什么你应该优先画图？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47265625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwLiaia4xWKqHd2gyEoa0ul9uVh8Z3vKcDg1AKLABAf5GMXol0iah7c2kAg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0dbff9208de50d18d85e8042fed554f6&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0dbff9208de50d18d85e8042fed554f6&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;敏捷软件开发宣言中提到：相比详尽的文档，可运作的软件更加重要（Working software over comprehensive documentation）。这么说当然不代表就不用写文档了，只是提倡&lt;strong&gt;没必要写过于详尽的文档&lt;/strong&gt;。为什么？因为详尽的文档需要耗费大量的编写和维护成本，不符合敏捷开发的小步迭代和快速响应变化等原则。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5b90672e9d5da408613cf393de114561&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;37fd13d1508877122fdf28ffb800c43b&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;那么，在如今这个全面敏捷开发的时代，如何也顺应潮流&lt;strong&gt;更加敏捷地编写架构文档&lt;/strong&gt;呢？ROI is your friend —— 不求多，但求精，尽量用最少的笔墨表达出最核心的内容。从&lt;strong&gt;内容&lt;/strong&gt;上来说，ROI 高的部分一般是偏顶层的整体架构或最核心的关键链路，这点在后文的 C4 模型理念中也有体现。而从&lt;strong&gt;形式&lt;/strong&gt;上来说，图在文字面前具有无与伦比的表达力优势，显然是 ROI 更高的选择。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7dc35e3588d0e5e6d5f6334913a390be&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;16566f7f466a1301e8dcda733cb377a9&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 为什么你需要学习画图？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.490625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwytC1U3hc7Maf0ial52jZpSXIRKW0pptC2sgsSAZXovcDicpmrmp2C3icg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2116926dff495aae82a944fc02e34a68&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2116926dff495aae82a944fc02e34a68&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;多画图是没错，但有必要专门学习吗？又不是素描彩笔水墨画，只是画一堆条条框框而已，稍微有点工程常识的都能上。画的有点丑？那没关系，顶多再动用点与生俱来的艺术美感，把这几条线对对齐那几个框摆摆正，再整点五彩斑斓的背景色啥的，不就显得很专业了嘛？&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;c5d8818d36f683df98577a37ad4c43cb&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看到这里，屏幕前的你又轻蔑一笑：哼，显然没这么简单。确实，道理说出来大家都懂，架构制图与工程制图一样，都是一件需要下功夫认真严谨对待的事情。但现实中大部分人还真没这工夫去下那功夫，比如上面贴的两幅很常见的架构图。第一张图不用多说，这种草图自己涂涂抹抹挺好，但拿出来见人就是你的不对了。那第二张图呢，看上去似乎还挺像那么回事的？并不是，如果你更仔细地去揣摩，就能发现这张图底下所隐藏的很多模糊和不严谨之处（可参考这张图的来源文章：&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.infoq.com%2Farticles%2Fcrafting-architectural-diagrams%2F&amp;amp;title=The%20Art%20of%20Crafting%20Architectural%20Diagrams&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;The Art of Crafting Architectural Diagrams&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4a2187606719c4b6400c7796695caa6a&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7eff252bd00a95102c13cddc0d1d49b8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;所以，&lt;strong&gt;能画图并不代表能画好图&lt;/strong&gt;；要想制得一手既漂亮又&lt;strong&gt;可读&lt;/strong&gt;的好图，还是需要经过持续学习与刻意练习的，很难仅凭直觉和悟性就能掌握其中的关键要领。此外，&lt;strong&gt;错误的图往往比没有图还要糟糕&lt;/strong&gt;，即使你只是抱着“有图就行，差不多那个意思得了”的心态，也至少应该理解一些科学制图的关键要素，避免给本来就已经很复杂难做的项目又蒙上一层模糊滤镜，甚至起到混淆和误导的反作用。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;76eb192c7f3116531c9972035b23467c&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;721ee04b5c4fcc2ef187dd49f37bcf23&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 架构制图的目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwibvU8nQKa9L6vohcO6eIFbk0QF9rnKSiclBFw9GIqzpsUNcUqatGibVoQ/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1231.9999999999998&quot; data-cropy1=&quot;42.62975778546712&quot; data-cropy2=&quot;387.9307958477508&quot; data-ratio=&quot;0.2800324675324675&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw2kNM8EYJgDmgscc5yC4O3NgHRonibR2QzN5hBvVy1yKDjqHuLWHeZ4A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1232&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;13d26e7a70b8385fc713ae53e08aee83&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;13d26e7a70b8385fc713ae53e08aee83&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;讨论具体的制图方法和工具前，我们需要先竖立清晰的制图目标。工具是人类进化的阶梯，但如果理解和利用不当，则很容易反过来被工具所限制甚至奴役，忘了最初发明和使用工具的初心。对于架构制图而言，已经有那么多形形色色的方法与工具，使用它们的初心是什么呢？我认为本质上都是想把制图这个过程&lt;strong&gt;从一门自由的手艺变成一项科学的工程&lt;/strong&gt;：系统、严谨、完整、标准化，同时能做到可重复、可持续和高效。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d515268959f42d9f875c3ce4a43ff4ae&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a2ea4c43c403b3bd9b983345babf41ac&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;P.S：当时做 PPT 太赶，所以从这个章节开始的配图，只能被迫走极简路线了，还请见谅。。。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;fdefb511777d895af810ed8464454cb4&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;caac12156662b7a6f86aef95a1497718&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;架构制图方法与工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f12a25e592e3929bdcea91c1d75de70c&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;经过前面几个章节的“简短”铺垫，相信大家对架构制图的背景知识都已经产生了足够的认知。本章节将会具体列举和描述一些典型的架构制图方法与工具，其中有常见的也有罕见的，重点是希望能通过各种方法的横向对比，加深大家对制图方法本质的理解。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f12a25e592e3929bdcea91c1d75de70c&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;b21909da71e8d2d845889f6efe33dee2&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 方法一：UML&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.50625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwEfGH1ZiamcnS0TNe2DXmWbpnJ2O7bbiciczN6eTvXSWbFDQTkuyyKgvbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d589c1226b1529769647d905b070f74e&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d589c1226b1529769647d905b070f74e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;UML 应该是大部分人最熟悉的制图方法了，最新的 UML 2.x 版本由以下两大类图组成：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d589c1226b1529769647d905b070f74e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;001a9a92c0922660f9cdc77738ae3912&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5ba8714706d296a811e9135d056bf327&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;作为&lt;strong&gt;通用&lt;/strong&gt;的“统一建模语言”，UML 总共包含了 14 种不同类型的图，可以全面覆盖软件设计领域各种制图需求，当然也包括了架构制图。同时，也正是因为 UML 把自己当成了一门语言，因此其各种记号（notion）和语义（sematics）都有非常&lt;strong&gt;严谨&lt;/strong&gt;的定义，不会出现模糊或者歧义问题。最后，UML 经过几十年的发展和推广，也早已成为世界范围内&lt;strong&gt;广泛使用&lt;/strong&gt;的&lt;strong&gt;标准&lt;/strong&gt;规范，其所带来的的隐性价值就是：在团队内使用 UML 进行沟通的成本是比较低的，因为可以假定绝大部分技术人员都能理解UML的含义和用法。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2338f3eb26ca23103e07741b392d6915&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9cf83923578b6d6ec793b7d642a165c8&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;然而，UML 也非万能（虽然历史上曾一度把它当成软件设计的银弹），它最被人诟病的缺点就是过于复杂。这也不能怪 UML，毕竟它就是要被设计为足够通用、严谨和强大的，这些目标都与“简单”背道而驰，并让它一步步演化到了今天这个复杂刻板的庞然大物模样。虽然上面我们自信地假定了技术人员大多都懂 UML，但这个“懂”如果带上一个程度量词，我觉得平均能到 20% 就不错了 —— 绝大部分也就能认识几个常见的类图、时序图，估计都很难准确说出类图中各种箭头的含义。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;062c5891754960b1c9e68ac1cfe41092&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;5a038063e7e3bf69c58376ef39ce8111&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;无论怎么说，UML依然应该是每个程序员的制图工具箱中最常用和必备的工具之一。当然，也不应该是唯一，因为下面也还有些不能错过的好东西。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f34aefc800c2fe9407fde3d8f83ceb65&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;9c4c0f5a07501debf06b30e5ef917225&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 方法二：4+1 View Model&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.50546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwMJafPBFCAQ9UVhzkiceIicRcQ3p4QEKXpULTMWUb5DOS8bKEFrwuZuLw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4e6dd9c3d06a6485dee71dabef175838&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4e6dd9c3d06a6485dee71dabef175838&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;“4+1”是啥？不知道没关系，听过“6+1”吗？对，就是那个小时候常看的“非常6+1”节目。它跟“4+1”之间的关系，就跟它们与邵佳一、张嘉译和沈佳宜之间的关系一样，除了赶巧共用了同一个后缀发音以外，八竿子打不着。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ac5d13b050c1ecbfc7606a31fa84b064&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，“4+1”到底是指什么？让我们来&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2F4%252B1_architectural_view_model&amp;amp;title=Wiki&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;Wiki&lt;/span&gt;&lt;/a&gt; &lt;span&gt;一下：“4+1”是一种&lt;strong&gt;视图模型&lt;/strong&gt;（view model），可以通过多种共存的视图描述软件密集型系统的架构。这些视图基于不同项目干系人（利益相关者）的&lt;strong&gt;视点&lt;/strong&gt;（viewpoint），例如：终端用户、开发者、系统工程师和项目经理。“4+1”由 4 种基础视图和一些经过挑选的用例或场景（即额外的“+1”视图）组成，各自的具体含义如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ae8e5a2db99e8e68f3581ab0bf101240&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;2bbcc21cb2dcf859adec9ce63b479b7e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;虽然上面提到“4+1”的各种视图一般都是用UML图来表示，但实际上“4+1”本身是一种&lt;strong&gt;通用&lt;/strong&gt;的视图模型，并没有限制绘图的记号和工具。对于工程师而言，这种偏学院派的方法可能这辈子都不会直接用到，但其中蕴含的一个关键架构制图思想非常有价值：架构需要通过多种&lt;strong&gt;视图&lt;/strong&gt;来描述，而这些视图是来源于不同项目干系人的&lt;strong&gt;视点&lt;/strong&gt;（角度）；只有这样才能产生一整套全面、立体且客观的架构描述。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fd274957e5ad40f759c0250125b79ca&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;396bc28f2d86a4d4a7bf18d8aa86e2df&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 方法三：C4 Model&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;19305041482f28cc6cf8f0ad55796b51&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;C4 模型是一种“&lt;strong&gt;抽象优先&lt;/strong&gt;”（abstraction-first）的架构制图方法，它也是受前面的 UML 和“4+1”视图模型所启发，但相对而言要更加简单和轻量，只包含少量的一组抽象和图表，很易于学习和使用。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;19305041482f28cc6cf8f0ad55796b51&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;h3 data-lake-id=&quot;c566652de952637c03cc2a47b3360b44&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h3&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1）定义、理念与关键思想&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4828125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw5lrJibKt1P5NA90KSS56vzIibQa90NwH3jrsoxydnWIiaHlNmK9mwicbJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b6f3ebf33eeb579f58a65e45920308bf&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fc4model.com%2F&amp;amp;title=C4%20%E6%A8%A1%E5%9E%8B&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;C4 模型&lt;/span&gt;&lt;/a&gt;&lt;span&gt;通过容器、组件、代码以及人这几个&lt;strong&gt;抽象&lt;/strong&gt;来描述一个软件系统的&lt;strong&gt;静态&lt;/strong&gt;结构，它的核心理念是希望像 Google Map 一样，通过&lt;strong&gt;不同层次&lt;/strong&gt;的细节，为代码建立一种可以&lt;strong&gt;放大&lt;/strong&gt;和&lt;strong&gt;缩小&lt;/strong&gt;的导览图。它最关键的思想就是&lt;strong&gt;自顶向下&lt;/strong&gt;对系统的静态结构进行&lt;strong&gt;逐级拆分&lt;/strong&gt;，依次描述各层次对象的职责、关系和外部依赖。除了核心的层次化静态结构视图，它还可以包含动态视图、部署视图等补充视图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw5Fds8rFUW6YYrhzuicTSngOsHKsFz4ibnTe5bwSQpOFJrl5SSnDnicnmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;68b25e3fe9277e9ce68fd06fd146e90e&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;68b25e3fe9277e9ce68fd06fd146e90e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;上面的左图展示了 C4 模型中各层次抽象之间的&lt;strong&gt;映射关系&lt;/strong&gt;：1 个软件系统由 1~N 个容器组成，1 个容器由 1~N 个组件组成，1 个组件由 1~N 个代码结构组成。右图是以简单的 &lt;/span&gt;&lt;span&gt;Spring PetClinic &lt;/span&gt;&lt;span&gt;项目为例，演示了一个真实软件系统在 C4 模型下的层次结构：最上层就是 PetClinic 软件系统，它可以拆分为数据库、Web 应用等几个容器；Web 应用又可以进一步拆分出 ClinicService 这个组件，而这个组件下又包含了 ClinicService 接口类、ClinicServiceImple 实现类、Owner / Pet / Visit 等领域对象类。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;420384f399f59aee67af23b2de110bf4&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;18b7675eda3219598bc52d371171c009&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;使用 C4 模型进行架构制图，本质上就是对上述几种抽象进行&lt;strong&gt;可视化&lt;/strong&gt;。具体的做法是依次建立如下几类从粗到细的结构图：&lt;strong&gt;C&lt;/strong&gt;ontext、&lt;strong&gt;C&lt;/strong&gt;ontainer、&lt;strong&gt;C&lt;/strong&gt;omponent 和 &lt;strong&gt;C&lt;/strong&gt;ode（可选），这也是 C4 模型名称的来历。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da9cd1318d8de2bb9e3f8bbd4201b27c&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2）Level 1：System Context diagram&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.42109375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwpcD8VMUibAAnvExwNh91B27URicy4Santqdopic28IpicsXOxnOSUoeEwg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ddb8cbd198239487383db2f278a537cd&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ddb8cbd198239487383db2f278a537cd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;系统上下文图作为第一级（L1），提供了一个展示系统全貌的&lt;strong&gt;顶层大图&lt;/strong&gt;&lt;strong&gt;（big picture）&lt;/strong&gt;视角，包括最中心的软件系统、周边的用户以及其他有交互的系统。其中最关键的两个概念分别是：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ddb8cbd198239487383db2f278a537cd&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;f7b25e04711e932aa1ce2f443134899f&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9a1d0bb648c7f49196765e11febb7350&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;在绘制系统上下文图时，不需要关心诸如技术栈、协议等任何底层细节。这类图的受众是最广的，因为任何人都可以理解并从中获取到足够的信息，包括技术人员和非技术人员，也包括团队内成员和团队外成员。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;82fdf47f8f69adb215b27f4722814812&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3）Level 2：Container diagram&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.49375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwCQkKXL7ro36zQ9KY3ibktcO7J7KCMnBcXeoUed4wCYOb0LdTh7lBTmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8150319063c69e2f7fb1d6397888309a&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8150319063c69e2f7fb1d6397888309a&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;通过 L1 的上下文图理解了系统在整个 IT 环境中的定位后，下一步就是把系统这个框框放大，详细看下其中包含了哪些“容器”（Container，注意不要跟 Docker 容器搞混了噢！）。C4 模型中的容器是指单个应用或数据存储，通常可以独立部署和运行（&lt;strong&gt;有独立的进程空间&lt;/strong&gt;，通过 IPC 机制互相通讯），例如：SpringBoot 微服务、React SPA、移动 App、数据库、Serverlss 函数、Shell 脚本。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d20bd84f4706b8d2d09a721695fd360a&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8ace2baff41a5dbb6850e3e87ff57d62&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;L2 的容器图不仅展示了系统的进一步职责拆分，还包括了主要的技术选型、容器之间的通讯方式等关键架构信息。这类图可以面向全部的技术人员，既包括架构师、开发者，也包括运维人员、技术支持等。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9c615c159156031272047879ff5f7a6f&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4）Level 3：Component diagram&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw0XPIBJGIakLINicfmUvINiakB1ms6E1AD3nDia9OYPWvGZ5IeQZqftM4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a16a20e888e0287d0e158f48a31be0e5&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a16a20e888e0287d0e158f48a31be0e5&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;继续前面的套路，下一步就是把系统中各个容器再分别进行局部放大，将每个容器进一步拆分成多个组件（Component）。在 C4 模型中，组件是指一组通过良好接口定义封装在一起的相关功能（通常运行在&lt;strong&gt;同一个进程空间内&lt;/strong&gt;），例如：Spring 里的一个Controller（不只包括定义了 REST 接口的 Controller 主类，也包括背后所有相关联的实现类，如 Service/Repository 等）。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d09c3d4a92041925af9937ac5b5c1a03&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;8fbb0696153aeb0adcb46a3eb8409538&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;与容器图类似，L3 的组件图也不只包含了容器的组件划分，还包括各个组件的职责定义、技术与实现细节等。随着层次的下沉和细节的增多，组件图的受众范围进一步缩窄，一般只适用于软件架构师和开发者（其他角色没必要理解，一般也理解不了）。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;57252b4106b26ea4492e7e1a99643bca&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5）Level 4：Code（可选）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.44921875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw02WpMYmqEyHyQeiawPpVO1LeVEg3mcLQoFmN9icxvdhibNZFxjROibO8wA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;70c092ab20d1215df03f6609832543be&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;70c092ab20d1215df03f6609832543be&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;再继续对组件进行放大，所能看到的最底层和细节的信息，就是 L4 的代码（Code）&lt;/span&gt;&lt;span&gt;了。&lt;/span&gt;&lt;span&gt;当然，这里所谓的“代码”还是以图的形式（e.g. UML 类图、数据库 E/R 图）展示类或文件粒度的代码结构，并不是真正的代码本身。&lt;/span&gt;&lt;span&gt;即便如此，代码图在 99% 的架构描述场景下也依然过于详尽，一方面数量庞大，&lt;strong&gt;绘制成本很高&lt;/strong&gt;；&lt;/span&gt;&lt;span&gt;另一方面易于变化，&lt;strong&gt;维护成本&lt;/strong&gt;也非常高。&lt;/span&gt;&lt;span&gt;因此，一般只有非常重要和复杂的组件才需要用到这一层级进行描述。&lt;/span&gt;&lt;span&gt;如果确实需要绘制，也应该优先考虑&lt;strong&gt;自动化&lt;/strong&gt;的方式，比如很多 IDE 就支持自动生成 UML 类图。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9777651674a5e3d44266471ab4fc4346&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3454269&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;6）补充图：Landscape / Dynamic / Deployment Diagram&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40546875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwQfhdKIEz4K03q9NeCe9pESiaY1wWia7psE96LnR0cc1GxA13ibgLlfbhg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1f0cc15f7d8055c56eb897cb70ffe72d&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1f0cc15f7d8055c56eb897cb70ffe72d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;除了上述各个层次的静态结构图，C4 模型还提出了一系列的补充图（Supplementary diagrams），包括：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1f0cc15f7d8055c56eb897cb70ffe72d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9824a4f83096aaaae3aa96e9a523bef9&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;99b6417484e3d2d1d92478e5215d8228&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;结合了这些补充图后的 C4 模型，才是可以全面与立体地描述出软件架构方方面面的&lt;strong&gt;完全体&lt;/strong&gt;架构制图方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7c781f7c1a7d56c27046d95745dbae3c&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;bf969a5fb57bce7e99ebc211f58a9b75&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 方法四：arc42&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwPqrMkLJoDmNxa6JCSUkAT53k6bibGdibiaj3Lx7vnTeljB8gbMapHbRxg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e54cfd94f5621dbb3e96da58986effe9&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;严格来说，&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Farc42.org%2F&amp;amp;title=arc42&quot; data-miniprogram-type=&quot;text&quot;&gt;arc42&lt;/a&gt; &lt;/span&gt;&lt;span&gt;并不是一种架构制图方法，而是一个&lt;strong&gt;架构文档模板&lt;/strong&gt;。虽然如前文所说，在架构描述中“图”是比“文字”更高优的选择，但实际项目过程中你终究还是需要产出一份相对完整、有图有文字的架构文档。arc42 就是专门用于帮助大家更好地编写架构文档；而作为架构文档中最重要的架构图，显然 arc42 也不会放过 —— 其中多个核心章节都与架构图有关，且详细描述了相应的制图方法。这里不会详细展开介绍 arc42（&lt;strong&gt;不能抢了下一篇文章的饭碗&lt;/strong&gt;），只会简单介绍下 arc42 中制图方法与 C4 模型的异同。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;53f62742f9d0af6e6a9d15f39a37cc69&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;656426bc6942e4584fb65c05db7921f3&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;伟大的思想都是相似的，arc42 也不例外。上方左图的右侧部分，概括了 arc42 模板中与制图相关的几个核心章节，分别是：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;656426bc6942e4584fb65c05db7921f3&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;02c2aea5cdd208b19f4a437cb28ad585&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;0efce5cd52f6aef1e9587658cc317ce3&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;因此，本质上 arc42 中提倡的制图方法与C4模型是等价和兼容的，完全可以配合使用：&lt;strong&gt;以 arc42 作为架构文档框架，其中的架构制图采用更具体的 C4 模型&lt;/strong&gt;。这也是目前我们项目中实际采用的方法。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ae0e9f99dae4d48092d05c081589eb4c&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;b376ff4f4e174958d745729a60429080&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 其他方法 &amp;amp; 制图工具&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-croporisrc=&quot;https://mmbiz.qlogo.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwJ1U3ufP0vBJ9akInhtpNIwIdsLJzYNib5EAxicAuX6roRE56ChaJM6BA/0?wx_fmt=png&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;928&quot; data-cropy1=&quot;22.47750865051903&quot; data-cropy2=&quot;508.955017301038&quot; data-ratio=&quot;0.5247844827586207&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwibUGy8VndE0BFSm2r1LXTYokCGfc5KiaPcjuiaRiaSf7jW0QyRPibLrEqNg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;20dc4df4ae27a6bb3b637dac651dd440&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除了上述几种方法以外，在软件行业蓬勃发展的数十年间也涌现出过很多其他的优秀架构制图方法，其中既包括一些&lt;strong&gt;通用方法&lt;/strong&gt;，如：&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fsysml.org%2F&amp;amp;title=SysML&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;SysML&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.sei.cmu.edu%2Fresearch-capabilities%2Fall-work%2Fdisplay.cfm%3Fcustomel_datapageid_4050%3D191439&amp;amp;title=AADL&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;AADL&lt;/span&gt;&lt;/a&gt;&lt;span&gt;、&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=https%3A%2F%2Fwww.opengroup.org%2Farchimate-forum&amp;amp;title=ArchiMate&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;ArchiMat&lt;/span&gt;&lt;/a&gt;&lt;span&gt;，也包括一些&lt;strong&gt;领域特定方法&lt;/strong&gt;，比如在企业中后台业务建模场景中很常见的&lt;/span&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; class=&quot;weapp_text_link&quot; data-miniprogram-appid=&quot;wxae224e32990b0036&quot; data-miniprogram-path=&quot;pages/a?link=http%3A%2F%2Fwww.bpmn.org%2F&amp;amp;title=BPMN&quot; data-miniprogram-type=&quot;text&quot;&gt;&lt;span&gt;BPMN&lt;/span&gt;&lt;/a&gt;&lt;span&gt;。再详细地展开描述各个方法，显然会让本文又臭又长（虽然写到这里时似乎就已经注定了），有兴趣的读者可以自行检索和探索。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;bb3c7bb1683e26d7e38b7017a946d30d&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;858a7849172bd45c33ebd653189a10ca&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;到这里为止，本章节介绍的都是架构制图的各种方法；而实际从方法到落地的过程中，还有一个绕不开的环节：选用什么样的工具去制图？总不能真的跟写工程制图作业一样用纸和笔吧？作为数字化改革的推动者，程序员们当然要全面拥抱数字化工具；大家日常工作中必然也已经积累了很多顺手的画图工具，因此这里我只推荐两个自己用得比较多的：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;858a7849172bd45c33ebd653189a10ca&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;363940ba317ee8818e4e3a175048a9b7&quot;&gt;&lt;/p&gt;&lt;h1 data-lake-id=&quot;28528383d1538c62bacccebe7239bad3&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h1&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;架构制图方法论总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;1a2df37d001fee92ca53e1e7fd7b837f&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;古有云：授人以鱼，不如授人以渔。推而广之：授人以方法，也不如授人以方法论。什么是方法论？虽然这个词在公司里已经用烂了，但确实有它的价值和意义：&lt;strong&gt;方法论&lt;/strong&gt;&lt;strong&gt;（methodology）&lt;/strong&gt;是对方法的更高维度抽象，由它可以推导出解决问题的具体&lt;strong&gt;方法（method）&lt;/strong&gt;。理解了方法论，才能融会贯通，掌握解决问题的本质要点；你也不会再受限于单一的具体方法，因为使用任何方法都能快速上手和灵活运用，并得到差不多的同等效果。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4ea3fa4924d52a4a591e0425d760260e&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;11b8412f2f9142d82ea8f4be4680a456&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;因此，本文最后这一章节将对各种架构制图方法进行归纳总结，并尝试提炼出一个通用的架构制图方法论，期望能帮助大家更好地理解架构制图背后的原理和思想。即便现在所熟知的各种方法与工具终会过时，也依然能风轻云淡地看待它们的新老交替：&lt;strong&gt;过去是 UML，现在是 C4，未来是什么呢？这并不关键，&lt;/strong&gt;因为即使方法过时了，背后的方法论也不会过时。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;31e743be27c3201f4d418a1e638e1adb&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9d7ec2545819a90755efcefc25350443&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;所以，那些茫茫多的方法背后，究竟是什么样的核心方法论在支撑着呢？经过作者呕心沥血冥思苦想了近 15 秒钟，终于总结出了如下这套经典方法论（p.s：就是凑数的，不要太当真~ ）。由于其中包含了 5 个环环相扣的要点，我们姑且称它为：&lt;strong&gt;五环理论&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;9d7ec2545819a90755efcefc25350443&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.571875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwoZrj2ePVgknqtqgibDscuiaE4tXzjfDPwXicPfxoDsfyyjDSicsTsu3VJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;1. 理解制图目标&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.40625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwYnoPYZDzQjgqGUmeiccxuerJdEohXrjQxqicEjWZV3hPjKic7ibA9tE76A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d9e3ff50bdee83ae920ff09112bc48e1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d9e3ff50bdee83ae920ff09112bc48e1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构制图的第一要点，是需要先深刻理解制图目标。正所谓“&lt;strong&gt;以始为终&lt;/strong&gt;”，有了目标我们才能清晰地前行；否则漫无目的地乱窜，往往会多走不少弯路，甚至南辕北辙。架构制图的目标是什么？其实前文已经提到过很多，这里再简单总结下：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;d9e3ff50bdee83ae920ff09112bc48e1&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;807c2613ed98b8f00d6b1adb95d52841&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;cde8285346dc3e2d8b7cc916cdbbefc5&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;2. 找准受众和关注点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.51171875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwaSK6571dwxzZ8AIArMS1y7lQMg2tibZxic7ml6pKFaTVe2fEOxpkrySg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;390d9b5ea10e822fbb9ddb561a1d7683&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;390d9b5ea10e822fbb9ddb561a1d7683&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构制图的第二要点，是要找准你制图的&lt;strong&gt;受众&lt;/strong&gt;（audience）以及他们各自的&lt;strong&gt;关注点&lt;/strong&gt;（concern）。找不准的话，要么效果大打折扣（不是他们想听的），要么犹如对牛弹琴（他们根本就听不懂）。常见的一些受众和关注点可包括：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;390d9b5ea10e822fbb9ddb561a1d7683&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;30eeb468be73f512d4960fc95121aa4b&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;07a2ffa833e445f8b440ad01bad0fe98&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;3. 自顶向下逐层描述&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.4875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwRZ0g9GceHria1qT3Sj51Vsnp3pyZZd6zdbiatXJPIVhnhOibDtETVyj3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4dc5f3027d553f7d3ac273a3f6b4fb2d&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4dc5f3027d553f7d3ac273a3f6b4fb2d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构制图的第三要点，是合理运用&lt;strong&gt;层次化&lt;/strong&gt;（hierarchical）的套路，自顶向下逐层描述。无论是 C4 模型还是 arc42 模板，背后都深刻运用并显著强调了这一点。为什么一定要这么做？其中蕴含了两个普适的原理：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4dc5f3027d553f7d3ac273a3f6b4fb2d&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e3dc831fb94493fb70d3b42e832c84b2&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;c93b1dda34f8ab365b1d15fcd5330a11&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;4. 使用多种架构视图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.478125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYwpeKBPpfhVo83IkrCUeia6UB9ia2zrGepwWibDsqAkD4JabPfJibiakIqp9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;09fc775e61c8c3e56101e5709239c6e4&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构制图的第四要点，是在向传统的工程制图方法论致敬：使用多种架构视图来描述你的架构。在工程制图的世界里，任何立体的制品，大到机床小到零件，都至少需要通过三种视图（主视图、俯视图、左视图）来描述。作为现实世界的映射，软件系统也是多维和立体的，只用单一视图不可能覆盖所有关键的架构信息；即使强行把这些信息都塞在一张图里，那也一定会复杂到让人无法理解。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;09414ac9236a307a8b2951ca188114cf&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;e636c261ad7de92fbd50a9477815a038&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;在架构设计领域，&lt;strong&gt;架构视图&lt;/strong&gt;（architectural view）有专门的定义：针对系统架构某一个方面（aspect）的一种描述；每个视图都会覆盖项目干系人的一种或多种关注点。从上述定义可以看出来，不同的架构视图会有不同的&lt;strong&gt;侧重点&lt;/strong&gt;，同时在描述自己所专注的方面时也会略去与当前视图无关的其他细节 —— 这其实也是一种与层次化拆分类似的&lt;strong&gt;分而治之&lt;/strong&gt;思想，只不过这里是针对完整系统的&lt;strong&gt;维度分解&lt;/strong&gt;，而层次化则是针对某一具体视图再做自顶向下的&lt;strong&gt;垂直下钻&lt;/strong&gt;（drill-down）；两者是正交且可以相互配合的，例如前面说到的结构视图、部署视图甚至动态视图，都可以分别再进行层次化拆分。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;608d67356307f0bdac972dd14742d557&quot;&gt;&lt;/p&gt;&lt;h2 data-lake-id=&quot;4e771321d011b9e52811ead2ccb5029f&quot; data-wording=&quot;true&quot;&gt;&lt;span/&gt;&lt;/h2&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;3198855&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763310&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;h3&gt;&lt;span&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;5. 遵循规范和最佳实践&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5296875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw0mk5jXRYgEFnca4Kc0GXp6YGtOjGgvL6bxC6WD9u1ILxJjQB1SAmqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;933acbbc2de0c124dcc9443c87c6a52e&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;933acbbc2de0c124dcc9443c87c6a52e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;架构制图的第五要点，其实只是一句&lt;strong&gt;正确的废话&lt;/strong&gt;：遵循规范和最佳实践。这一点已经不限于架构制图，而是上升到了工程实践领域的通用方法论层面。正如前面章节所说，“学习架构制图的目标，就是要把它从一门手艺变成一项工程”，因此&lt;strong&gt;架构制图的“施工”过程也理所应当符合工程化思维&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;933acbbc2de0c124dcc9443c87c6a52e&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;933acbbc2de0c124dcc9443c87c6a52e&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;b8f325ee3ad23580923e3b3133071576&quot;&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;附：架构描述标准化概念模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ddf3f6e106a862f8d279b8d18d5b9972&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;国际上对架构描述其实建立了专门的标准（&lt;/span&gt;&lt;span&gt;ISO  / IEC / IEEE 42010:2011&lt;/span&gt;&lt;span&gt;），其中的很多概念词汇在本文中都有提到（e.g. Stakeholder、Concern、View、Viewpoint），有兴趣的同学可以进一步研究下。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;ddf3f6e106a862f8d279b8d18d5b9972&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6390625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/yvBJb5IiafvkCRRowyS4DDrXTsElVwFYw9rNgf4WFInNEonM3V6bZNp7s6cWOgwbvf5yCujL2PPKagoxkwia5OCw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;新媒体排版&quot; data-id=&quot;2858960&quot; data-style-type=&quot;undefined&quot;&gt;&lt;section data-style-type=&quot;5&quot; data-id=&quot;2763309&quot;&gt;&lt;section mpa-from-tpl=&quot;t&quot;&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-ratio=&quot;0.45454545454545453&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/US10Gcd0tQGY9ddd5GpbmVRuaRfuaESAUBGE7uHX5G0nxxLSub2QTKZdu538V7GaHXS5jsTCebYCUibaHsjg0ow/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;22&quot; title=&quot;动态黑色音符&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong mpa-from-tpl=&quot;t&quot;&gt;&lt;span mpa-is-content=&quot;t&quot;&gt;结语&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3f67a1a9ff399b283166e6b068e45def&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;如果你从头到尾耐着性子看到了这里，那么不用怀疑，你一定就是我们团队要找的那种能成大事儿的人：&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;3f67a1a9ff399b283166e6b068e45def&quot; data-wording=&quot;true&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;7248d3e7329c353b15950a93db652107&quot; data-wording=&quot;true&quot;&gt;&lt;span&gt;欢迎各位技术同路人加入阿里云云原生应用研发平台EMAS团队，我们专注于广泛的云原生技术（Backend as a Service、Serverless、DevOps、低代码平台等），致力于为企业、开发者提供一站式的应用研发管理服务，内推直达邮箱：pengqun.pq # alibaba-inc.com，有信必回。&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b5dd0d68223cb7bd00b570701d211744</guid>
<title>[推荐] Spring Boot 启动原理</title>
<link>https://toutiao.io/k/itvkvui</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;1&amp;gt; 大家都知道SpringBoot是通过main函数启动的，这里面跟踪代码到处都没有找到while(true)，为什么启动后可以一直跑？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2&amp;gt; SpringBoot默认使用tomcat作为web容器。大家也可以通过在pom文件中exclusion掉tomcat，denpendency jetty 的方法来使用jetty。那SpringBoot是怎么做到在不同web容器之间切换的呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;2&amp;gt; 传统的web容器比如jetty本质上是直接通过java start.jar 来启动，之后来加载spring上下文的，SpringBoot通过main函数是怎么来启动web容器的呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;本文就这三个问题展开论述。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题1分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;问题1很简单，启动后一直跑是因为启动了线程池。原理就是有非deamon的线程在跑。Java虚拟机规范定义要等所有用户线程都运行完才会退出。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;所以这个原理就和下面启动线程池一样&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7517875383043923&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icyeBluAHR6lFIGx0XRCZRSN9qZHnjYnyWXHHmEqJQM44G4tnaUX5kJQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;979&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;程序员修炼之道教我们：不要假定，要证明。虽然jetty使用线程池是常识，我们也来跟踪下源码，看看线程池是在哪里初始化的：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;org.springframework.boot.web.embedded.jetty.JettyServletWebServerFactory类里，创建Server的使用使用线程池作为初始化参数。然后创建了socket连接来监听端口。（对于socket连接有之前没接触过的，可以自己查一下。建议动手实践。&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247485101&amp;amp;idx=1&amp;amp;sn=c95f1a3fa03af199c78d59bb29ea411c&amp;amp;chksm=fafdec03cd8a6515f61cf42d3ce94ee7bc465f445cb61d4644d259c55a661cce4ab1a6dc4738&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《Java异常处理总结》&lt;/a&gt;这篇文章里有不错的简单小例子可以实操下。）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5701219512195121&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icUaFAlvSC5f8P9NuvBj7ajGvHDMvdibH7sC16YIjOoCzP2GvkqlGecSQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;984&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到这里，大家应该都明白了为什么启动后一直不停。但是又有疑问了：JettyServletWebServerFactory是个什么东东？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题2分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;关于问题2，我们写个最简单的类来debug一下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.17950963222416813&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icQzRDtiaYapYwGiaPzTLeq7cCbVIqxmfWMwdPb2wCUTJEFYWWJV0Yc0vw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1142&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进入SpringAppication.run的源码可以看到，里面创建了一个context，默认是AnnotationConfigServletWebServerApplicationContext。一初始化，在Bean定义里就加载了spring开天辟地的5个Bean。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7903494176372712&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icfmBmUbAmFZyZrV8JVjuQA5z8BsuaDOIAg6pVgJ11Fk3020D6icxvVtA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1202&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;继续向下执行走到AbstractApplicationContext的refresh方法，执行到onRefresh时，你进入方法里发现实际上执行的是&lt;/p&gt;&lt;p&gt;ServletWebServerApplicationContext的onFresh&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6649746192893401&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icz6Zic8dlFIeYHLPPNI8f8STg0mXPZn9iaXSx768bbLdGmHEP4EHE40XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;985&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里面实际只做了一件事：创建web服务。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.31267345050878814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icNH46T5npWwQhQJqSPDg4tib60Q4yB24LhetuDxfdngLdQia3m6WgdRPQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1081&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;进入这个方法，debug到getWebServerFactory&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.504225352112676&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icqn8LnMmFPCYFJGoAYm3cz1KokTpXabOWVKYzoaTLRM6vBia9zK5RJhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1065&quot;/&gt;&lt;/p&gt;&lt;p&gt;来看一下：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4768480909829407&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRlicZABgRrbBAG33MvWnr6W1icibjRmZN3tCG5Fib5lVUH9xbGtVE19evG0R58z6Jolib9mMhuYicpJpHqNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1231&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;获取的正式JettyServletWebServerFactory。为啥不是TomcatServlet呢？ServletWebServerFactoryAutoConfiguration的源码很好的说明了这个问题。源码的大意是当tomcat依赖存在就用tomcat，不然就按顺序找jetty存不存在，不存在再找Undertow存不存在。找到了就返回这个bean作为Servlet的工厂类。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;@Configuration&lt;br/&gt;@AutoConfigureOrder(-&lt;span&gt;2147483648&lt;/span&gt;)&lt;br/&gt;@ConditionalOnClass({ServletRequest.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@ConditionalOnWebApplication(&lt;br/&gt;    type = Type.SERVLET&lt;br/&gt;)&lt;br/&gt;@EnableConfigurationProperties({ServerProperties.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;@Import({ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.&lt;span&gt;class, &lt;/span&gt;EmbeddedTomcat.&lt;span&gt;class, &lt;/span&gt;EmbeddedJetty.&lt;span&gt;class, &lt;/span&gt;EmbeddedUndertow.&lt;span&gt;class&lt;/span&gt;})&lt;br/&gt;&lt;span&gt;public class &lt;/span&gt;ServletWebServerFactoryAutoConfiguration {&lt;br/&gt;    &lt;span&gt;public &lt;/span&gt;ServletWebServerFactoryAutoConfiguration() {&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    @Bean&lt;br/&gt;    &lt;span&gt;public &lt;/span&gt;ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(ServerProperties serverProperties) {&lt;br/&gt;        &lt;span&gt;return new &lt;/span&gt;ServletWebServerFactoryCustomizer(serverProperties)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;    @Bean&lt;br/&gt;    @ConditionalOnClass(&lt;br/&gt;        name = {&lt;span&gt;&quot;org.apache.catalina.startup.Tomcat&quot;&lt;/span&gt;}&lt;br/&gt;    )&lt;br/&gt;    &lt;span&gt;public &lt;/span&gt;TomcatServletWebServerFactoryCustomizer tomcatServletWebServerFactoryCustomizer(ServerProperties serverProperties) {&lt;br/&gt;        &lt;span&gt;return new &lt;/span&gt;TomcatServletWebServerFactoryCustomizer(serverProperties)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;public static class &lt;/span&gt;BeanPostProcessorsRegistrar &lt;span&gt;implements &lt;/span&gt;ImportBeanDefinitionRegistrar&lt;span&gt;, &lt;/span&gt;BeanFactoryAware {&lt;br/&gt;        &lt;span&gt;private &lt;/span&gt;ConfigurableListableBeanFactory beanFactory&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        public &lt;/span&gt;BeanPostProcessorsRegistrar() {&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;public void &lt;/span&gt;setBeanFactory(BeanFactory beanFactory) &lt;span&gt;throws &lt;/span&gt;BeansException {&lt;br/&gt;            &lt;span&gt;if &lt;/span&gt;(beanFactory &lt;span&gt;instanceof &lt;/span&gt;ConfigurableListableBeanFactory) {&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.beanFactory = (ConfigurableListableBeanFactory)beanFactory&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;public void &lt;/span&gt;registerBeanDefinitions(AnnotationMetadata importingClassMetadata&lt;span&gt;, &lt;/span&gt;BeanDefinitionRegistry registry) {&lt;br/&gt;            &lt;span&gt;if &lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.beanFactory != &lt;span&gt;null&lt;/span&gt;) {&lt;br/&gt;                &lt;span&gt;this&lt;/span&gt;.registerSyntheticBeanIfMissing(registry&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;webServerFactoryCustomizerBeanPostProcessor&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;WebServerFactoryCustomizerBeanPostProcessor.&lt;span&gt;class&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;                this&lt;/span&gt;.registerSyntheticBeanIfMissing(registry&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;errorPageRegistrarBeanPostProcessor&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;ErrorPageRegistrarBeanPostProcessor.&lt;span&gt;class&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;        &lt;span&gt;private void &lt;/span&gt;registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry&lt;span&gt;, &lt;/span&gt;String name&lt;span&gt;, &lt;/span&gt;Class&amp;lt;?&amp;gt; beanClass) {&lt;br/&gt;            &lt;span&gt;if &lt;/span&gt;(ObjectUtils.isEmpty(&lt;span&gt;this&lt;/span&gt;.beanFactory.getBeanNamesForType(beanClass&lt;span&gt;, true, false&lt;/span&gt;))) {&lt;br/&gt;                RootBeanDefinition beanDefinition = &lt;span&gt;new &lt;/span&gt;RootBeanDefinition(beanClass)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;beanDefinition.setSynthetic(&lt;span&gt;true&lt;/span&gt;)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;registry.registerBeanDefinition(name&lt;span&gt;, &lt;/span&gt;beanDefinition)&lt;span&gt;;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;br/&gt;&lt;br/&gt;        }&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;至此第二个问题也真相大白。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题3分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;第三个问题是传统的web容器比如jetty本质上是直接通过java start.jar 来启动，之后来加载spring上下文的，SpringBoot通过main函数是怎么来启动web容器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这个问题在前面问题分析过程中也给了很多线索。我们来回顾下：SpringApplication.run里会创建Spring的应用上下文，默认是AnnotationConfigServletWebServerApplicationContext。首先会加载Spring开天辟地的5个Bean。然后它初始化各种Bean工厂。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SpringBoot在ServletWebServerApplicationContext中重载了onRefresh方法，除了以前Spring默认的onRefresh方法外还增加了createWebServer方法，在这个方法中对Web容器进行了初始化工作。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;version&amp;gt;&lt;/span&gt;${spring.boot.version}&lt;span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;exclusions&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-logging&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;/exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;/exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;groupId&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;artifactId&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;/exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;/exclusions&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jetty&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;version&amp;gt;&lt;/span&gt;${spring.boot.version}&lt;span&gt;&amp;lt;/version&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;exclusions&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;groupId&amp;gt;&lt;/span&gt;org.eclipse.jetty.aggregate&lt;span&gt;&amp;lt;/groupId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            &amp;lt;artifactId&amp;gt;&lt;/span&gt;jetty-all&lt;span&gt;&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;        &amp;lt;/exclusion&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;    &amp;lt;/exclusions&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;因为选择servlet容器是类似于使用基于条件的注解方式。因为当exclusion掉tomcat后，只有jetty满足条件，所以会加载JettyServletWebServerFactory。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过getWebServer方法会new一个WebServer对象，new对象的方法会调用initialize方法，在这个方法中会对容器进行初始化并启动。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而容器启动的基本原理就是创建个线程池和网络套接字。用线程去处理套接字读写的内容。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文本用带有少许说明的三个问题开场展开论述，实际是使用了麦肯锡大法中的SCQA架构。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SCQA架构是金字塔模型里面突出的一个论述方法，即“情境（Situation）、冲突（Complication）、问题（Question）、答案（Answer）”。可以帮助我们在陈述事实时条理更为清晰、有效。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;SCQA其实只是麦肯锡做了总结。这个方法李清照都在用：&lt;/p&gt;&lt;p&gt;昨夜雨疏风骤，浓睡不消残酒 （情境）&lt;/p&gt;&lt;p&gt;试问卷帘人，渠道海棠依旧（冲突）&lt;/p&gt;&lt;p&gt;知否，知否（问题）&lt;/p&gt;&lt;p&gt;应是绿肥红瘦（答案）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;文章正文看似一步步回答问题，实际上在讲述怎样去看spring源码，了解spring原理的一个过程。即：带着问题去看，debug跟踪源码验证 的方法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>6c8afb477cd24499f6462c3320109e8f</guid>
<title>[推荐] 23 张图，带你入门推荐系统</title>
<link>https://toutiao.io/k/ivzzn8a</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;300&quot; data-backw=&quot;540&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gicSKPDibrreqCenMeiboc7xEhABibW4JO6F4ZTFB0BVibr6gNXG1NesJLUDia4ysYL7ic3Xy5YbZOzKUgA9wIGMaMicXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;540&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;做广告业务1年多时间了，但是平时的工作主要和&lt;/span&gt;&lt;span&gt;广告工程&lt;/span&gt;&lt;span&gt;有关，核心的广告算法由 AI 部门支持，对我们而言可以说是「黑盒般」的存在，只需要对训练好的模型进行调用即可。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;近期，我打算系统性地学习下广告中的搜索和推荐算法，当然更多是从工程的视角去弄清楚：算法的基本原理、以及面对线上海量数据时算法是如何解决性能问题的？整个过程，我会将有价值的技术点输出成系列文章。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;这篇文章属于推荐系统的入门篇，本文暂不考虑线上环境的海量数据，目的是&lt;span&gt;先&lt;/span&gt;了解清楚推荐系统的基本构成，我会通过图解推荐算法以及程序demo的形式展开，内容包括：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;426&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7374658158614403&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYdGamlqlLH9mdweROicxU2y1EtVHY74VkzKBteXnlSAylbsMO1w3X7xQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1097&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01 走进推荐系统的世界&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;“啤酒与尿布” 的故事相信很多人都听过，年轻爸爸去超市购买尿布时，经常会买点啤酒犒劳自己。因此，沃尔玛将这两种商品进行了捆绑销售，最终获得了更好的销量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4950980246067047&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo5YmVQVicdjicJibsdeZjI2t6zErbBNDs3eyRGe1ibnRAdQbktyiamXOIxWg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;“啤酒与尿布”的故事&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这个故事背后的理论依据就是 “推荐算法”，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;因为尿布和啤酒经常出现在同一个购物车中，那么向购买尿布的年轻爸爸推荐啤酒确实有一定道理。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 推荐系统到底解决的是什么问题？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;推荐系统从20世纪90年代就被提出来了，但是真正进入大众视野以及在各大互联网公司中流行起来，还是最近几年的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着移动互联网的发展，越来越多的信息开始在互联网上传播，&lt;/span&gt;&lt;span&gt;产生了严重的信息过载。因此，&lt;/span&gt;&lt;span&gt;如何从众多信息中找到用户感兴趣的信息，这个便是推荐系统的价值。&lt;/span&gt;&lt;span&gt;精准推荐解决了用户痛点，提升了用户体验&lt;/span&gt;&lt;span&gt;，最终便能留住用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统&lt;/span&gt;&lt;span&gt;本质上就是一个信息过滤系统，通常分为：召回、排序、重排序这3个环节，每个环节逐层过滤，最终从海量的物料库中筛选出几十个用户可能感兴趣的物品推荐给用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;184&quot; data-backw=&quot;579&quot; data-ratio=&quot;0.3188888888888889&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYvs5QRIQ5eWUEccMPIf764IV2XhjnR9uSlvnav1PKDlZowDZbUiaqX7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;900&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统的分阶段过滤流程&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. 推荐系统的应用场景&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;哪里有海量信息，哪里就有推荐系统，我们每天最常用的APP都涉及到推荐功能：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;资讯类：今日头条、腾讯新闻等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;电商类：淘宝、京东、拼多多、亚马逊等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;娱乐类：抖音、快手、爱奇艺等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;生活服务类：美团、大众点评、携程等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;社交类：微信、陌陌、脉脉等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;362&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.6350257542310522&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYypbUE3C3XzoX2X0jcANicNm8yUJmaA5mdDA1YCsx6iaEkQYfxibNsdJ0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1359&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;头条、京东、网易云音乐中的&lt;/span&gt;&lt;span&gt;推荐功能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;推荐系统的应用场景通常分为以下两类：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. 搜索、推荐、广告三者的异同&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;搜索和推荐是AI算法最常见的两个应用场景，在技术上有相通的地方。这里提到广告，主要考虑很多没做过广告业务的同学不清楚为什么广告和搜索、推荐会有关系，所以做下解释。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;02 推荐系统的整体架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;499&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.8629441624365483&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYCN2ibNSffF2mxY9ly2KqicuLHvZ4CgkD9vyxaXZEwgIm1HUGPa2Yl6Nw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐系统的整体架构&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;span&gt;上面是推荐系统的整体架构图，自下而上分成了多层，各层的主要作用如下：&lt;/span&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;数据源：&lt;/strong&gt;&lt;/span&gt;推荐算法所依赖的各种数据源，包括物品数据、用户数据、行为日志、其他可利用的业务数据、甚至公司外部的数据。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;计算平台：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;负责对底层的各种异构数据进行清洗、加工，离线计算和实时计算。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据存储层：&lt;/strong&gt;&lt;span&gt;存储&lt;/span&gt;&lt;span&gt;计算平台处理后的数据，根据需要可落地到不同的存储系统中，比如Redis中可以存储用户特征和用户画像数据，ES中可以用来索引物品数据，Faiss中可以存储用户或者物品的embedding向量等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;召回层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;包括各种推荐策略或者算法，比如经典的协同过滤，基于内容的召回，基于向量的召回，用于托底的热门推荐等。为了应对线上高并发的流量，召回结果通常会预计算好，建立好倒排索引后存入缓存中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;融合过滤层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;触发多路召回，由于召回层的每个召回源都会返回一个候选集，因此这一层需要进行融合和过滤。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;排序层：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;利用机器学习或者深度学习模型，以及更丰富的特征进行重排序，筛选出更小、更精准的推荐集合返回给上层业务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;从数据存储层到召回层、再到融合过滤层和排序层，&lt;span&gt;候选集逐层减少，但是精准性要求越来越高，因此也带来了&lt;/span&gt;计算复杂度的逐层增加，这个便是推荐系统的最大挑战。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其实对于推荐引擎来说，最核心的部分主要是两块：特征和算法。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6674786845310596&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kY0PLtjXquTGjdx8aEibK1eYr7BBPyTsick5FRMPqwDQY4Q87No2wKctngqd42Zoqe96XxeBc7JQ3XA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;821&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐引擎的核心功能和技术方案&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;特征计算由于数据量大，通常采用大数据的离线和实时处理技术，像Spark、Flink等，然后将计算结果保存在Redis或者其他存储系统中（比如HBase、MongoDB或者ES），供召回和排序模块使用。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;召回算法的作用是：从海量数据中快速获取一批候选数据，要求是快和尽可能的准。这一层通常有丰富的策略和算法，用来确保多样性，为了更好的推荐效果，某些算法也会做成近实时的。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;排序算法的作用是：对多路召回的候选集进行精细化排序。它会利用物品、用户以及它们之间的交叉特征，然后通过复杂的机器学习或者深度学习模型进行打分排序，这一层的特点是计算复杂但是结果更精准。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;03 图解经典的协同过滤算法&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;了解了推荐系统的整体架构和技术方案后，下面带大家深入一下算法细节。这里选择图解的是推荐系统中的明星算法：协同过滤（Collaborative Filtering，CF）。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;对于工程同学来说，可能觉得 AI 算法晦涩难懂，门槛太高，确实很多深度学习算法的确是这样，但是协同过滤却是一个简单同时效果很好的算法，只要你有初中数学的基础就能看懂。&lt;/span&gt;&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 协同过滤是什么？&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;协同过滤算法的核心就是&lt;span&gt;「&lt;/span&gt;找相似&lt;span&gt;」&lt;/span&gt;，它基于用户的历史行为（浏览、收藏、评论等），去发现用户对物品的喜好，并对喜好进行度量和打分，最终筛选出推荐集合。它又包括两个分支：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;基于用户的协同过滤：&lt;/strong&gt;&lt;span&gt;User-CF，核心是找相似的人。&lt;span&gt;比如下图中，&lt;/span&gt;用户 A 和用户 C 都购买过物品 a 和物品 b，那么可以认为 A 和 C 是相似的，因为他们共同喜欢的物品多。这样，就可以将用户 A 购买过的物品 d 推荐给用户 C&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;290&quot; data-backw=&quot;573&quot; data-ratio=&quot;0.5052264808362369&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWTmibBc6icSUVxSDa7UkdVj2ezxiaIY8voCWAiaBp0sibPBhGs1S77yvF7Ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;基于用户的协同过滤&lt;/span&gt;&lt;span&gt;示例&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;333&quot; data-backw=&quot;573&quot; data-ratio=&quot;0.5801393728222997&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWLnLsxEgvt2FGoAHsycIJ8XsF0IyibBiaRTJt9lfzcEYibB0zvOJxIj7WQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;574&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;基于物品的协同过滤&lt;/span&gt;&lt;span&gt;示例&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. 如何找相似？&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;前面讲到，协同过滤的核心就是找相似，User-CF是找用户之间的相似，Item-CF是找物品之间的相似，那到底如何衡量两个用户或者物品之间的相似性呢？&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们都知道，对于坐标中的两个点，如果它们之间的夹角越小，这两个点越相似，这就是初中学过的余弦距离，它的计算公式如下：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;112&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.19747235387045814&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbpJZgkCoibicdHCpTlW7I1XWUSKy4lpWlabhFxgINbQaO3Z2hODpRtOcjt5Su7g3pJZ2EEvKmn56DQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;633&quot;/&gt;&lt;/p&gt;&lt;p&gt;举个例子，A坐标是（0，3，1），B坐标是（4，3，0），那么这两个点的余弦距离是0.569，余弦距离越接近1，表示它们越相似。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.4784172661870504&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGowEyKebNjCDFnXicsBKCQejiaPEBWl615HXUPniajI5ftlwhSmos8g2jcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;834&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;除了余弦距离，衡量相似性的方法还有很多种，比如：欧式距离、皮尔逊相关系数、Jaccard 相似系数等等，这里不做展开，只是计算公式上的差异而已。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;3. Item-CF的算法流程&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span&gt;清楚了相似性的定义后，下面以Item-CF为例，详细说下这个算法到底是如何选出推荐物品的？&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;第一步：整理物品的共现矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;假设有 A、B、C、D、E 5个用户，其中用户 A 喜欢物品 a、b、c，用户 B 喜欢物品 a、b等等。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;309&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.5414438502673797&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoXVTn4UvtChOyLp9lRFE5ZEwbSPBMFGwwA24F3quluc19zXvbxibJqDw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;748&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;所谓共现，即：两个物品被同一个用户喜欢了。比如物品 a 和 b，由于他们同时被用户 A、B、C 喜欢，所以 a 和 b 的共现次数是3，采用这种统计方法就可以快速构建出共现矩阵。&lt;/span&gt;&lt;span/&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二步：计算物品的相似度矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;对于 Item-CF 算法来说，一般不采用前面提到的余弦距离来衡量物品的相似度，而是采用下面的公式&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.19085173501577288&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo2PYOv8Pq3e4ia7A7qALkN3ArmxeqPicz8jbscIhuKc5JmqJ0C2ZEMdMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其中，N(u) 表示喜欢物品 u 的用户数，N(v) 表示喜欢物品 v 的用户数，两者的交集表示同时喜欢物品 u 和物品 v 的用户数。很显然，如果两个物品同时被很多人喜欢，那么这两个物品越相似。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;基于第1步计算出来的共现矩阵以及每个物品的喜欢人数，便可以构造出物品的相似度矩阵：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6618531889290012&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoiaqDVj8uCRjzFxq6FVxyC7ne8JaBetmat69J4icTzhw4GLNYqpxIhMQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;831&quot; data-backw=&quot;570&quot; data-backh=&quot;377&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;strong&gt;&lt;span&gt;第三步：推荐物品&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;最后一步，便可以基于相似度矩阵推荐物品了，公式如下：&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.18250950570342206&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoAkib6icNUGrgnEqeGMic1IcBPJQ7a9vPp0cuibawDR6ibm7XUcoh9If98Fg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1052&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;其中，P&lt;/span&gt;&lt;span&gt;uj &lt;/span&gt;&lt;span&gt;表示用户 u 对物品 j 的感兴趣程度，值越大，越值得被推荐。N(u) 表示用户 u 感兴趣的物品集合，S(j,N) 表示和物品 j 最相似的前 N 个物品，W&lt;/span&gt;&lt;span&gt;ij &lt;/span&gt;&lt;span&gt;表示物品 i 和物品 j 的相似度，R&lt;/span&gt;&lt;span&gt;ui &lt;/span&gt;&lt;span&gt;表示用户 u 对物品 i 的兴趣度。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;上面的公式有点抽象，直接看例子更容易理解，假设我要给用户 E 推荐物品，前面我们已经知道用户 E 喜欢物品 b 和物品 c，喜欢程度假设分别为 0.6 和 0.4。那么，利用上面的公式计算出来的推荐结果如下：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;377&quot; data-backw=&quot;570&quot; data-ratio=&quot;0.661144578313253&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGo0kWejTY1TVx8Uf78EjTfqDUoEeIZfNq89BjU2kDs823or8omic2zECQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;664&quot;/&gt;&lt;/p&gt;&lt;section&gt;因为物品 b 和物品 c 已经被用户 E 喜欢过了，所以不再重复推荐。最终对比用户 E 对物品 a 和物品 d 的&lt;span&gt;感兴&lt;/span&gt;&lt;span&gt;趣程度&lt;/span&gt;，因为 0.682 &amp;gt; 0.3，因此选择推荐物品 a。&lt;/section&gt;&lt;p&gt;&lt;span&gt;04 从0到1搭建一个推荐系统&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;有了上面的理论基础后，我们就可以用 Python 快速实现出一个推荐系统。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 选择数据集&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;这里采用的是推荐领域非常经典的 MovieLens 数据集，它是一个关于电影评分的数据集，官网上提供了多个不同大小的版本，下面以 ml-1m 数据集（大约100万条用户评分记录）为例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下载解压后，文件夹中包含：ratings.dat、movies.dat、users.dat 3个文件，共6040个用户，3900部电影，1000209条评分记录。各个文件的格式都是一样的，每行表示一条记录，字段之间&lt;/span&gt;&lt;span&gt;采用 :: 进行分割。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;以ratings.dat为例，每一行包括4个属性：&lt;/span&gt;&lt;span&gt;UserID, MovieID, Rating, Timestamp。&lt;/span&gt;&lt;span&gt;通过脚本可以统计出不同评分的人数分布：&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.75&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoJicVv4k4819mnoNicrdrMMGm483Mbsic5E2jRPicT4fE3mWIpL5AMXJciaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;2. 读取原始数据&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;程序主要使用数据集中的 ratings.dat 这个文件，通过解析该文件，抽取出 user_id、movie_id、rating 3个字段，最终构造出算法依赖的数据，并保存在变量 dataset 中，它的格式为：dict[user_id][movie_id] = rate&lt;/span&gt;&lt;span/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4166666567325592&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGokfY7uHLQtDQkFGiaKLcODp2VvUjicUc2PaWr3hrCwKFnqd6Gk42g6zQg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;3. 构造物品的相似度矩阵&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;基于第 2 步的 dataset，可以进一步统计出每部电影的评分次数以及电影的共生矩阵，然后再生成相似度矩阵。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;429&quot; data-backw=&quot;553&quot; data-ratio=&quot;0.775&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGocy30xfCohvSJVQewx7icvd2ukljfxqcjF6ib15S8hKPxwXePRZJ1iaudQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;4. 基于相似度矩阵推荐物品&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;最后，可以基于相似度矩阵进行推荐了，输入一个用户id，先针对该用户评分过的电影，依次选出 top 10 最相似的电影，然后加权求和后计算出每个候选电影的最终评分，最后再选择得分前 5 的电影进行推荐&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;270&quot; data-backw=&quot;546&quot; data-ratio=&quot;0.4953125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoND3mzquzScP4h9RJTYhQtFjqXF2LXvRzuiaUF9C0ZKJnrkYJz5W7gfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;5. 调用推荐系统&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;下面选择 &lt;span&gt;UserId=1 这个用户&lt;/span&gt;，看下程序的执行结果。由于推荐程序输出的是 movieId 列表，为了更直观的了解推荐结果，这里转换成电影的标题进行输出。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-backh=&quot;256&quot; data-backw=&quot;538&quot; data-ratio=&quot;0.47421875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoXZibHQzExp9TDnuloLsHrSxNIkRYSesicBPUdJ0TXUibkIMxfsnyoZ9CA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;最终推荐的前5个电影为：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;273&quot; data-backw=&quot;538&quot; data-ratio=&quot;0.509142053445851&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2ka0NNY82HVVsuaiaQTjNFzGoTBVwYtWGqP2j5Ogbn6rACa5tMScqibyQzTAgjHbrDIJ3iaib3WfDr8sjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;711&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;05 线上推荐系统的挑战&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通过上面的介绍，大家对推荐系统的基本构成应该有了一个初步认识，但是真正运用到线上真实环境时，还会遇到很多算法和工程上的挑战，绝对不是几十行 Python 代码可以搞定的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1、上面的示例使用了标准化的数据集，而线上环境的数据是非标准化的，因此涉及到海量数据的收集、清洗和加工，最终构造出模型可使用的数据集。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、复杂且繁琐的特征工程，都说算法模型的上限由数据和特征决定。对于线上环境，需要从业务角度选择出可用的特征，然后对数据进行清洗、标准化、归一化、离散化，并通过实验效果进一步验证特征的有效性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、算法复杂度如何降低？比如上面介绍的Item-CF算法，时间和空间复杂度都是O(N×N)，而线上环境的数据都是千万甚至上亿级别的，如果不做算法优化，可能几天都跑不出数据，或者内存中根本放不下如此大的矩阵数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4、实时性如何满足？因为用户的兴趣随着他们最新的行为在实时变化的，如果模型只是基于历史数据进行推荐，可能结果不够精准。因此，如何满足实时性要求，以及对于新加入的物品或者用户该如何推荐，都是要解决的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5、算法效果和性能的权衡。从算法角度追求多样性和准确性，从工程角度追求性能，这两者之间必须找到一个平衡点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;6、推荐系统的稳定性和效果追踪。需要有一套完善的数据监控和应用监控体系，同时有 ABTest 平台进行灰度实验，进行效果对比。&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;这篇文章是推荐系统的入门篇，目的是让大家对推荐系统先有一个整体的认识，后续我会再连载出一些文章，详细地介绍面对具体业务和线上海量数据时，推荐系统应该如何设计？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;欢迎关注我的公号，如果有疑问可以留言交流。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&amp;lt;END&amp;gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大家在看：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247485125&amp;amp;idx=1&amp;amp;sn=7cfc053f2fb055588d4313545404cbe2&amp;amp;chksm=fc78d9e9cb0f50ffd639215d4039b3f606734ea5c620457d7de87b10567e783ee9031da04357&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;干货，广告系统架构解密！&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;干货，广告系统架构解密！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247484105&amp;amp;idx=1&amp;amp;sn=de4c763482aa65383dab59b221800cb5&amp;amp;chksm=fc78dde5cb0f54f39e1f278249d236ff2400330be573405435dba458404a5f771715319d694c&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师如何从技术转型做管理？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;高并发，你真的理解透彻了吗？&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247483901&amp;amp;idx=1&amp;amp;sn=c9ae824a1b7d0a8d07f08af8921cd7fc&amp;amp;chksm=fc78ded1cb0f57c7f01cb918e8d9382f9ccafe3a366d14405040b05d3986ff8dfbe6712430a1&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;工程师如何从技术转型做管理？&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;工程师如何从技术转型做管理？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTM4NDAwMw==&amp;amp;mid=2247483900&amp;amp;idx=1&amp;amp;sn=0544715b3f49600f7a5dc816e99dfd69&amp;amp;chksm=fc78ded0cb0f57c690aa73de40ca7805fa7e50b0f53d9ef68c4220458600c4a5eaf51c15b118&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;聊聊直播平台背后的技术架构&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;聊聊直播平台背后的技术架构&lt;/a&gt;&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;IT人的职场进阶 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;前亚马逊工程师，现58转转技术总监，持续分享个人的成长经历，希望为你的职场发展带来些新思路，欢迎扫码关注我！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-backh=&quot;53&quot; data-backw=&quot;53&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;271&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;271&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;430&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kZxxgevbSVSmRuyaiaMzkVjclyc9Vc7CicwsSnbrHMfqIkNkvvt6iajgGscibkAT2aicCtSuf6OEoMk1og/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p/&gt;
                &lt;/div&gt;

                

                



                
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_reward_qrcode&quot;&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;Long-press QR code to transfer me a reward&lt;/p&gt;
                                                                &lt;p class=&quot;reward_tips&quot;&gt;分享或在看是最大的鼓励&lt;/p&gt;
                                &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; id=&quot;js_reward_qrcode_img&quot;/&gt;&lt;/span&gt;
                                &lt;p class=&quot;tips_global&quot;&gt;As required by Apple&#x27;s new policy, the Reward feature has been disabled on Weixin for iOS. You can still reward an Official Account by transferring money via QR code.&lt;/p&gt;
                            &lt;/div&gt;
                                                                            
                              
            &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>