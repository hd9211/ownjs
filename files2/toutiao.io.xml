<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>8c453d8f1f8c4180a70d2db920fc5c18</guid>
<title>太厉害了！“他” 到底是如何渡过 “中年危机” 入职阿里 P7，成就年薪百万！</title>
<link>https://toutiao.io/k/dbpbc1k</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-pm-slice=&quot;0 0 []&quot;&gt;加班、加班、加班！！！&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;加班已经是普遍java程序员的一个常态，因为加班导致根本没有什么时间去学习去扩展新的技能，学习到新的技术，但是学习并不能落下，不然面临的不仅仅是“中年危机”，还随时会被时代被技术所淘汰。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;你身边是不是也有很多这种例子呢，亦或者自己就是被加班所支配的一类人呢？&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;每天抽出两小时这样学java，你会感谢自己的！&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术干货包括：高可用、高并发、高性能及分布式、Jvm性能调优、Spring，MyBatis，Netty源码分析，Redis，Kafka，Mysql，Zookeeper，Tomcat，Docker，Dubbo，Nginx、算法、数据结构、微服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;537&quot; data-ratio=&quot;0.8832236842105263&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0iazm7ClaxcBtiaXfYiaYshVyPrvmMCW7TKBFhgBicjcYQdj8meHkIwuh9w/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;608&quot; data-width=&quot;608&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;strong&gt;精选Java高并发、多线程、分布式架构视频&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;584&quot; data-ratio=&quot;1.1295938104448742&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM02lVDlm6JNBP63I0Zibia3aRJ8LkdEkEicRIGmribWrgMSLjlOExsibn87uA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;517&quot; data-width=&quot;517&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;524&quot; data-ratio=&quot;0.6921875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0AYMMdBuNKZ2cp8e13GSPIou0oPUyUsnkS88BGWWnStRXwWx7FG8qpg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;757&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 spellcheck=&quot;false&quot;&gt;&lt;span&gt;&lt;strong&gt;互联网阿里巴巴P7架构师学习思维导图&lt;/strong&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多线程高并发&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;1146&quot; data-ratio=&quot;2.0070052539404553&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0CkibicRAgFGlKCoZESm3EVxkaotPvHU0Gt0FEWCx62maPdp8qriaY4faw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;571&quot; data-width=&quot;571&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JVM调优&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;1107&quot; data-ratio=&quot;1.8636363636363635&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0PHoyMgyAk48OJVpHNKVbkJJ3HqMttGIIYoxEia8VhmgvMibOaiaXibPXIw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;594&quot; data-width=&quot;594&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;741&quot; data-ratio=&quot;1.3138297872340425&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0oLs2vtjC3qMUtz3qNTZAQkfl7FpHQrnfvwt8wkSp7VytrYwKu6t8HQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;564&quot; data-width=&quot;564&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;设计模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;624&quot; data-ratio=&quot;1.2259332023575638&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM05XicKbSCOo7538aEhzNu2sBP2STiaow82xPPicrP9lfZ1zveBxoWiaznnA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;509&quot; data-width=&quot;509&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;815&quot; data-ratio=&quot;0.65625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM05oxArKuWwyHibxYnEuj4vpZ0DFhx6iao8ke04sKV5CJU3SFsqiaWyOufA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;1241&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SpringBoot&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;476&quot; data-ratio=&quot;0.4171875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM04RPP5OjRDYiaovictL3grCyymexUmiarxTqibPjcT0oN9EG8hiaveAib1J6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;1140&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SpringCloud&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;722&quot; data-ratio=&quot;1.125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM057x0pd0rJWjY1bD7Z318OPalOouCpBNs5IRXZNsGYNlXXvicuDHgqUA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;642&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;515&quot; data-ratio=&quot;1.0279441117764472&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0tWy3zcpAa6FAiaJibDh0Oa3jtFXg55EQTdqz4NGG4V5DpEbqFgjFvrfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;501&quot; data-width=&quot;501&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;K8S&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;546&quot; data-ratio=&quot;0.5328125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0iauSuuibFiavEaa4yczO2tpJU59WIjiasGubeo6IJgmkp9CYkslW1YlvBw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;1026&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Netty底层原理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;559&quot; data-ratio=&quot;0.8789308176100629&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0H9frlicFcEaUVnusHCNfJkSpYuXyLEcxdnEIsAE67HoP595tgG1h0fg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;636&quot; data-width=&quot;636&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dubbo源码&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;532&quot; data-ratio=&quot;1.0576540755467196&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0B8BZh3rcKBp07eXSIcU8pyEMT2Swa2Aq6ficmATkAZCpZ9zSMiaQia9Fg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;503&quot; data-width=&quot;503&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;互联网实战项目-网游端&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;542&quot; data-ratio=&quot;0.41875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM07pOY40ibHRDErS2HQS9nO7WcJEAUVotb7DUgqJibsUOCORPviadLqZpbg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;1293&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;阿里巴巴中台实战项目&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;591&quot; data-ratio=&quot;1.031413612565445&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0yYdiaZH6dkns6xBX6nM5s1nM2s0ZKiaaIkGMsd7yJhRFWtYVpYicZGT3Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;573&quot; data-width=&quot;573&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;全网独家P8架构技术栈&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;3866&quot; data-ratio=&quot;1.0171875&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM08Qv7x7dclthOgHKCYeH4Gy0ciaaE9vAH86efQCvRflrVXCy3AqKG02A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;3802&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;架构师学习思维导图获取方式：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;扫描下面二维码备注“资料”添加助理即可免费获取&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;br/&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9976905311778291&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0dHqWhRtZIdicMj8bgLhlAd52VNkicwk9PPRdbkiciav2qk9gZROGXiahhpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;433&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;若干面试资料&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;802&quot; data-ratio=&quot;0.9703125&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0dzkCqAO3Mr6KQWbMaYDIvdWQvZPVljiaDC0F3lmMyuv1VbkN3PB0qGg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;826&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;若干视频资料&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;510&quot; data-ratio=&quot;0.609375&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0Dk4bzYsH5O1sjf5nahtfIamgGJicCx9Q9bOSKFd4ptFldia0vtb3nJsw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; data-width=&quot;836&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;抽丝剥茧设计模式&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;精品视频 源码 课件 笔记&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;646&quot; data-ratio=&quot;1.269155206286837&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0hIo1RdM240lK373nvMv1yZibZO4MkJI5APwMSKAS9ep6KqQgQMFrO2A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;509&quot; data-width=&quot;509&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;542&quot; data-ratio=&quot;1.1221532091097308&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM07xgzfCXMjosib8xbKRjOwgul1G9LDkTxy9rjaXrPdic1FDIt0tiaqkNHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;483&quot; data-width=&quot;483&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据结构与算法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;精品视频 源码 课件 笔记&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;659&quot; data-ratio=&quot;1.3367139959432048&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0DTV9ibQc0GjzaVxjicYiahv5Zcs6IG7bDC7licOVpcoHKZAibGkyzqsEAEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;493&quot; data-width=&quot;493&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;629&quot; data-ratio=&quot;1.445977011494253&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM06ibricAorM8ib2ibzDVyClJyTx9jwY2gEltBoTkB7yDecTAd5vCAEsInNg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;435&quot; data-width=&quot;435&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;多线程与高并发&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;精品视频 源码 课件 笔记&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;583&quot; data-ratio=&quot;1.4184914841849148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0diaRIicJxs9B0ttCB7osYyvqqqZknAIFokZrnRvQMkZutOa2M5AXfbKw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;411&quot; data-width=&quot;411&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Spring源码设计，从入门到精通&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;视频 源码 课件 笔记&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;568&quot; data-ratio=&quot;1.3719806763285025&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0ia3dfbChWSZb9N2kefEcgj3kicSj61aOIKosAu9n3rJUzndFpJHjdqZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;414&quot; data-width=&quot;414&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;JVM调优&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;精品视频 源码 课件 笔记&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;564&quot; data-ratio=&quot;1.1486761710794298&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0BEjSupUTnfc7G2qciafzwGnmvCfjncFewM7JibvNSz17iaJ17jPMhSrcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;491&quot; data-width=&quot;491&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;精品视频 源码 课件 笔记&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-height=&quot;571&quot; data-ratio=&quot;1.1488933601609659&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0aUUAwic1mRPzORrrdAvmxofqPuxFM56CpVm3g1kvkh8SGF4ZQxE8UIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;497&quot; data-width=&quot;497&quot;/&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;若干视频、源码、课件、笔记，面试文档、书籍笔记获取方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;扫描下方二维码备注“资料”添加助理微信即可免费获取&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9976905311778291&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/bMjESHUV2dJDpnvU2wr2qSJr3SGgzHM0dHqWhRtZIdicMj8bgLhlAd52VNkicwk9PPRdbkiciav2qk9gZROGXiahhpg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;433&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>dc00ded59ead3e8d5d59a6d49e7ff30b</guid>
<title>广告系统架构解密</title>
<link>https://toutiao.io/k/47r3fu1</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img data-ratio=&quot;0.563725471496582&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot; data-backw=&quot;578&quot; data-backh=&quot;325&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kbg4zuIEDFjUSR9O7Q7ZVMXmdjb8ib6icBL8BfbK2WdIswiaDib85gSMweYBNqficFE0WdpqDkM3TEdqNA/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;广告、增值服务、佣金，是互联网企业最常见的三种盈利手段。在这3大经典中，又以广告所占的市场份额最大，几乎是绝大部分互联网平台最主要的营收途径，业务的重要性不言而喻。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;从技术角度来说，广告业务涉及到 &lt;/span&gt;&lt;span&gt;AI算法、大数据处理、检索引擎、高性能和高可用的工程架构 &lt;/span&gt;&lt;span&gt;等多个方向，同样有着不错的技术吸引力。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我从去年开始接触广告业务，到现在差不多一年时间了。这篇文章将结合我的个人经验，同时参考业界的优秀案例，阐述下广告系统的&lt;span&gt;架构&lt;/span&gt;实践方案，希望让大家有所收获。&lt;/span&gt;&lt;span&gt;内容包括以下3部分&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;01 广告业务简介&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;广告，&lt;span&gt;可以说无处不在。&lt;/span&gt;微信、&lt;span&gt;抖&lt;/span&gt;&lt;span&gt;音&lt;/span&gt;、B站、&lt;span&gt;百度、&lt;/span&gt;淘宝等等&lt;span&gt;，这些占据用户时间最长的 APP， 到处都能看到广告的影子。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们每天随处可见的广告，它背后的业务逻辑到底是什么样的呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在分享广告系统的架构之前，先给大家&lt;span&gt;快速&lt;/span&gt;普及下业务知识。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 广告业务的核心点是平衡&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么说广告业务的核心点是&lt;span&gt;「&lt;/span&gt;&lt;/span&gt;&lt;span&gt;平衡&lt;/span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;？可以从广告的标准定义来理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;广告被定义为：&lt;/span&gt;&lt;span&gt;广告主以付费方式通过互联网平台向用户传播商品或者服务信息的手段&lt;/span&gt;&lt;span&gt;。这个定义中涉及到 &lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;广告主、平台、用户&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;3个主体，但是这3个主体的利益关注点各不相同。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5833333333333334&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwc6dib6ATqjCjr0Fibwq2SWiaic49j95GZse1cAet8ouT3RiciaxrABC2LXLBw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1：&lt;/span&gt;&lt;span&gt;广告业务的三角平衡&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span/&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;有时候&lt;/span&gt;这三者的利益是冲突的，比如平台增加了广告位数量，收益肯定增加，但用户体验可能变差，因此广告业务最终要寻找的是三方的平衡&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;站在平台的角度来看广告业务，它在&lt;/span&gt;&lt;span&gt;保证用户体验的同时，要兼顾绝大部分广告主的ROI（确保他们是可以赚到钱的），在此基础上再考虑将平台的收入最大化，这样才是一个健康的广告生态。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;2. 从收入的分解公式认清广告的本质&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;p&gt;广告业务发展了几十年，广告费用的结算方式也诞生了很多种，我们最常见的有以下几种：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CPT&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;按时间计费，独占性包时段包位置&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CPM：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;按照每千次曝光计费&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CPC：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;按照点击计费&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;CPA：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;按照行为计费（比如下载、注册等）&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6308186195826645&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;623&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbg4zuIEDFjUSR9O7Q7ZVMXl2o6YibrWHckSWpeicibltosFibU8XrrtzEYUW797mGzJff71zLt2PbL3g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2：&lt;/span&gt;&lt;span&gt;广告费用的结算方式演进&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之所以有不同的结算方式，其实也是随着广告市场的发展逐渐衍生出来的，最开始流量稀缺，平台占优势，再到今天逐渐成了买方市场，广告主作为需求方的谈判权变大。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;上面这个图可以看出，由于CPA代表了广告主最终想要的转化效果，因此按CPA结算时对广告主最有利，但是对平台最不利。结算方式演进到今天，其实也是一种平衡，所以处于平衡点附近的CPM和CPC是最常见的结算方式。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;以CPC为例，收入可分解成下面这个公式：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.1674074074074074&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;675&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbg4zuIEDFjUSR9O7Q7ZVMXyS1s2v518qvSBic2AsTpOqAxS7qcVbibdczOSibrXLr0Kg3K0EZNWX3tw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;其中，PV表示系统的访问量，PVR和ASN表示广告的填充率，CTR表示广告的点击率，ACP表示广告的平均点击价格。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;上述各个指标都可以通过一系列的广告策略来提升。&lt;/span&gt;&lt;span&gt;比如填充率可通过开发更多的广告主来实现，&lt;/span&gt;&lt;span&gt;CTR可通过AI算法做到精准投放来提升，&lt;/span&gt;&lt;span&gt;ACP可通过精准流量溢价或者提升广告主ROI来完成。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;掌握上面这个收入分解公式，对于理解广告业务至关重要，任何业务上的动作几乎都能关联到这个公式的某个指标上。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;3. 广告的核心业务流程&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;广告业务发展到今天，随着广告主对投放效果的诉求不断加强，精准定向以及实时竞价是目前最主流的业务形态。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对互联网平台来说，初期一般都是采用&lt;span&gt;「&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;自营的竞价广告网络&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;」&lt;/span&gt;来实现商业变现，简单理解：就是利用平台自有的流量以及自主开发的广告主来实现业务闭环。&lt;/span&gt;&lt;span&gt;本文所分享的广告架构主要针对这种业务形态&lt;/span&gt;&lt;span&gt;，它的核心业务流程如下图所示。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.6225489974021912&quot; data-type=&quot;jpeg&quot; data-w=&quot;408&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AaabKZjib2kaFibAspYXvmgJZic0c9KBdTnciaykibBnVuRiaIjdldljOXbSCSgSLRVbGL4u28ttERyvnaI1Pdkcoiaicg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3：&lt;/span&gt;&lt;span&gt;广告的核心业务流程&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;广告主先通过投放平台发布广告，可设置一系列的定向条件，比如投放城市、投放时间段、人群标签、出价等。&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;投放动作完成后，广告会被存放到广告库、同时进入索引库，以便能被广告检索引擎召回&lt;/span&gt;。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;C端请求过来后，广告引擎会完成召回、算法策略、竞价排序等一系列的逻辑，最终筛选出Top N个广告，实现广告的千人千面。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;用户点击广告后，会触发广告扣费流程，这时候平台才算真正获得收益。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;上面是广告业务的核心流程，随着平台流量以及广告主规模进一步增大，往往会从&lt;span&gt;「&lt;/span&gt;&lt;strong&gt;自营型竞价网络&lt;/strong&gt;&lt;span&gt;」&lt;/span&gt;逐渐向&lt;span&gt;「&lt;/span&gt;&lt;strong&gt;联盟广告以及RTB实时竞价&lt;/strong&gt;&lt;span&gt;」&lt;/span&gt;方向发展，类似于&lt;span&gt;阿里妈妈&lt;/span&gt;、&lt;/span&gt;&lt;span&gt;腾讯广点通、头条巨量引擎，此时业务复杂度和技术架构&lt;span&gt;会再上一个台阶&lt;/span&gt;，本文不作展开，后续再跟大家详细分享&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;02 面临的技术挑战&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;对广告业务有了初步了解后，再来看下广告系统面临的技术挑战：&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;高并发&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：广告引擎和C端流量对接，请求量大（平峰往往有上万QPS），要求&lt;span&gt;实时&lt;span&gt;响应&lt;/span&gt;&lt;/span&gt;，必须在几十毫秒内返回结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;业务逻辑复杂&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：一次广告请求，涉及到多路召回、算法模型打分、竞价排序等复杂的业务流程，策略多，执行链路长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;稳定性要求高&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：广告系统直接跟收入挂钩，广告引擎以及计费平台等核心系统的稳定性要求很高，可用性至少要做到3个9。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;大数据存储和计算&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：随业务发展，推广数量以及扣费订单数量很容易达到千万甚至上亿规模，另外收入报表的聚合维度多，单报表可能达到百亿级别的记录数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;账务的准确性&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：广告扣费属于金融性质的操作，需要做到不丢失、不重复，否则会损害某一方的利益。另外，如果收入数据不准确，还可能影响到业务决策。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;03 广告系统架构详解&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;了解了广告业务的目标和技术挑战后，接下来详细介绍下广告系统的整体架构和技术方案。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;346&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5990338164251208&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1035&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwctPemBL4dpqZoxHXnCc92SSAvtSJkqhuSDKC2YjFIv4RwSLYWGqP7iaQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图4：广告系统的整体架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面是我们公司&lt;span&gt;目&lt;/span&gt;&lt;span&gt;前&lt;/span&gt;的广告系统架构图，&lt;span&gt;这个架构适用于广告业务初期，&lt;/span&gt;&lt;span&gt;针对的是&lt;/span&gt;&lt;span/&gt;&lt;span&gt;「&lt;/span&gt;&lt;strong&gt;&lt;span&gt;自营型的竞价网络和站内流量&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;」，不涉及联盟广告。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;下面针对各个子系统做下说明：&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;广告投放系统&lt;/strong&gt;&lt;/span&gt;：供广告主使用，核心功能包括会员续费、广告库管理、设定推广条件、设置广告出价、查看投放效果等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;广告运营后台&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：供平台的产品运营使用，核心功能包括广告位管理、广告策略管理、以及各种运营工具。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;广告检索平台&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：承接C端的高并发请求，负责从海量广告库中筛选出几个或者几十个广告，实时性要求高，这个平台通常由多个微服务组成。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;AB实验平台&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：广告业务的稳定器，任何广告策略上的调整均可以通过此平台进行灰度实验，观察收入指标的变化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;广告计费平台&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：面向C端，负责实时扣费，和收入直接挂钩，&lt;span&gt;可用性要求高。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;账务管理中心&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：广告业务中的财务系统，统管金额相关的业务，包括充值、冻结、扣费等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大数据平台&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：整个广告系统的底盘，需要聚合各种异构数据源，完成离线和实时数据分析和统计，产出业务报表，生产模型特征等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;下面再针对架构中的技术难点展开做下介绍。&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;1. 广告数据的存储&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;广告系统要存储的数据多种多样，特点各不相同，采用的&lt;span&gt;是&lt;/span&gt;&lt;span&gt;多模的数据存储方式。&lt;/span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;393&quot; data-backw=&quot;552&quot; data-ratio=&quot;0.7119565217391305&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;552&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwczqqNQgCezYouibQnvFX3axIPUj4SNFpzTSwdm5KUvYTwhYicicgoS6DPg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图5：广告数据的多模存储&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;存储上还需要解决的一个问题是：广告的同步问题。广告投放完成后，首先会存储在MySQL数据库中，接下来需要把广告实时传输到检索系统中，完成正排索引以及倒排索引的更新。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;330&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.5709969788519638&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;662&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwcHAiaWa7KPvHZo78cgplGOPhT4Gyns5skz3UKu8TKG2kjqLicXuvT7jGw/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;图6：广告索引的&lt;span&gt;更新&lt;/span&gt;&lt;/span&gt;&lt;span&gt;流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;索引更新服务，有几个要点说明下：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;各个业务系统在推广、余额等信息变更时，发MQ消息，索引更新服务订阅MQ来感知变化，完成增量同步。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;变更的消息体中，不传递实际变更的字段，仅通知有变化的广告ID，索引更新服务实时读取最新数据完成更新，这样可以有效的解决消息乱序引起的数据不一致问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当更新索引的并发达到一定量级后，可通过合并相同广告的变更、或者将倒排和正排更新分离的方式来&lt;span&gt;提&lt;/span&gt;&lt;span&gt;升整体的更新速度&lt;/span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2. 广告检索平台的整体流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;广告检索平台负责承接C端的流量请求，从海量广告库中筛选出最合适的前N个广告，并在几十毫秒内返回结果，它是一个多级筛选和排序的过程。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;437&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.7564766839378239&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;772&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbg4zuIEDFjUSR9O7Q7ZVMXkaibrkAasMmmymvDxyoBcUFXtesryqZxDgICY3mwIQM8U0cwRLcSdVA/640?wx_fmt=png&quot;/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;图7：广告检索平台的整体&lt;/span&gt;&lt;span&gt;流程&lt;/span&gt;&lt;span/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;Recall层侧重算法模型，Search层侧重业务。从下到上，计算复杂度逐层增加，候选集逐层减少。（说明：&lt;span&gt;搜索广告场景和推荐广告场景在某些子模块上存在差异，但整体流程基本一致，这里不作展开）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;性能设计是检索平台的重点，通常有以下手段：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;做好服务分层，各层均可水平扩展。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;采用Redis缓存，避免高并发请求直接打到数据库，缓存可按业务规划多套，进行分流。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;采用多线程并行化某些子流程，比如多路召回逻辑、多模型打分逻辑。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;热点数据进行本地缓存，比如广告位的配置信息以及策略配置信息，在&lt;span&gt;服务启动时就可以预加载到本地，然后定时进行同步。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;非核心流程&lt;/span&gt;设置超时熔断走降级逻辑，比如溢价策略（不溢价只是少赚了，不影响广告召回）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;和&lt;span&gt;主流程无关的逻辑异步执行&lt;/span&gt;，&lt;span&gt;比如扣费信息&lt;span&gt;缓&lt;/span&gt;&lt;span&gt;存&lt;/span&gt;、召回结果缓存等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;精简RPC返回结果或者Redis缓存对象的结构，去掉不必要的字段，减少IO数据包大小。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;GC优化，包括JVM堆内存的&lt;span&gt;设置&lt;/span&gt;、垃圾收集器的选择、GC频次优化和GC耗时优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;3. 计费平台的技术方案&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;计费平台也是一个核心系统，主要完成实时扣费功能。比如CPC结算方式下，广告主设置的预算是50元，每次点击扣1元，当扣费金额达到预算时，需要将广告及时下线。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;除此之外，计费平台还需要支持CPM、CPT等多种结算方式，以及支持反作弊、余额撞线处理、扣费订单的摊销和对账等功能。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;计费平台的特点是：并发高、数据量大、同时可用性要求高，需要做到不少扣，不重复扣。下面以CPC实时点击扣费为例，详细说下技术方案。&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;521&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.9013452914798207&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;669&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwcYhRXGvaTJg3icM4yn8MJ1ia3Xn7LVBkWukvXdLxdOM6S9XPGXT2V8ZibA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;图8：CPC实时扣费流程&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;首先，整个扣费流程做了异步化处理，当收到实时扣费请求后，系统先将扣费时用到的信息缓存到Redis，然后发送MQ消息，这两步完成后扣费动作就算结束了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样做的好处是：能确保扣费接口的性能，同时利用MQ的可靠性投递和重试机制确保整个扣费流程的最终一致性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了提高可用性，针对Redis和MQ不可用的情况均采用了降级方案。Redis不可用时，切换到TiKV进行持久化；MQ投递失败时，改成线程池异步处理。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，每次有效点击都需要生成1条扣费订单，面临大数据量的存储问题。目前我们采用的是MySQL分库分表，后期会考虑使用HBase等分布式存储。另外，订单和账务系统之间的数据一致性，采用大数据平台做天级别的增量抽取，通过Hive任务完成对账和监控。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;4. OLAP海量数据报表的技术方案&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;数据报表是也是广告平台的核心业务，它是广告主、平台运营人员进行投放优化、业务决策的依据。&lt;/span&gt;&lt;span&gt;先来看下广告数据仓库的分层结构：&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-backh=&quot;353&quot; data-backw=&quot;578&quot; data-ratio=&quot;0.6103151862464183&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;698&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AaabKZjib2kbzcFiaxB4bdlqYY4icsLGmwcUUdgq9DmJPyXHEM8OL33aRFr9TcfClXeibzcJg1sMrKoCibE8oDrluyQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图9：广告数据仓库的分层结构&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;源数据层&lt;/strong&gt;&lt;/span&gt;：对应各种源数据，包括&lt;span&gt;HDFS中实时采集的&lt;/span&gt;前后端日志，增量或者全量同步的MySQL业务数据表。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据仓库层&lt;/strong&gt;&lt;/span&gt;：包含维度表和事实表，通常是对源数据进行清洗后的数据宽表，比如行为日志表、推广宽表、用户宽表等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据集市层&lt;/strong&gt;&lt;/span&gt;：对数据进行轻粒度的汇总表，比如广告效果表、用户行为的全链路表、用户群分析表等。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据应用层&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：上层应用场景直接使用的数据表，包括多维分析生成的各种收入报表、Spark任务产出的算法模型特征和画像数据等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;采用这样的分层结构，和软件分层思想类似，提高了数据的维护性和复用性&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;span&gt;再来看应用层报表部分面临的挑战：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;聚合维度多，&lt;/span&gt;&lt;span&gt;需要分时、分广告位、分推广等几十个维度；&lt;/span&gt;&lt;span&gt;&lt;span&gt;单表最大达到百亿级别；支持时间范围的实时查询。&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;这部分由公司的大数据部门维护，采用了开源的技术方案，离线部分使用Kylin，数据存储在HBase中；实时部分使用Flink和Spark Streaming，数据存储在Druid中。&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;写在最后&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;本文详细介绍了广告系统的初期架构和核心技术方案。随着业务演进，架构也会随之变得更加复杂，但是&lt;/span&gt;&lt;span&gt;大数据存储、&lt;span&gt;高&lt;/span&gt;&lt;span&gt;并发、&lt;/span&gt;高可用，始终是广告业务的技术难点&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于广告系统的稳定性保障、广告策略的可扩展性设计、RTB实时竞价的系统架构等有价值的内容，后续再分享给大家，欢迎关注我的公号。&lt;/span&gt;&lt;span&gt;针对本篇文章，如果有任何疑问或者建议，可以留言讨论&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt; 往期推荐：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;h2&gt;&lt;br/&gt;&lt;/h2&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;技术琐话 &lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以分布式设计、架构、体系思想为基础，兼论研发相关的点点滴滴，不限于代码、质量体系和研发管理。本号由坐馆老司机技术团队维护。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-copyright=&quot;0&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;188&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;188&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;860&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/nhlGsolibOWEup6pcFSoqDWX2CnKtr2ibick4zKc3GbnGwOU6OfRibTYDbP4ueZgYDVIQX96Wic9KibEX710j1jsqWicg/640?wx_fmt=jpeg&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>4a4d49dbb4e8650a850b4c8c36733251</guid>
<title>字节跳动的算法面试题是什么难度？（第二弹）</title>
<link>https://toutiao.io/k/81dw35x</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;点击蓝色“&lt;/span&gt;&lt;span&gt;&lt;span&gt;力扣加加&lt;/span&gt;&lt;/span&gt;&lt;span&gt;”关注我哟&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;加个“&lt;/span&gt;&lt;span&gt;星标&lt;/span&gt;&lt;span&gt;”，带你揭开算法的神秘面纱！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;这是力扣加加第&lt;strong&gt;「19」&lt;/strong&gt;篇原创文章&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;/section&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;字节跳动的算法面试题是什么难度？(第二弹)&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于 lucifer 我是一个小前端， 最近也在准备写一个《前端如何搞定算法面试》的专栏，因此最近没少看各大公司的面试题。都说字节跳动算法题比较难，我就先拿 ta 下手，做了几套 。这次我们就拿一套 &lt;code&gt;字节跳动2017秋招编程题汇总&lt;/code&gt;来看下字节的算法笔试题的难度几何。地址：https://www.nowcoder.com/test/6035789/summary&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这套题一共 11 道题， 三道编程题， 八道问答题。本次给大家带来的就是这三道编程题。更多精彩内容，请期待我的搞定算法面试专栏。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.8041697691734921&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01ny5pryF0wqQ1tia43sichVzBdWicA07GYJ0CWqicQibnAEkps2wvMtJNibhQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1343&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中有一道题《异或》我没有通过所有的测试用例， 小伙伴可以找找茬，第一个找到并在公众号力扣加加留言的小伙伴奖励现金红包 10 元。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;1. 头条校招&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;头条的 2017 校招开始了！为了这次校招，我们组织了一个规模宏大的出题团队，每个出题人都出了一些有趣的题目，而我们现在想把这些题目组合成若干场考试出来，在选题之前，我们对题目进行了盲审，并定出了每道题的难度系统。一场考试包含 3 道开放性题目，假设他们的难度从小到大分别为 a,b,c，我们希望这 3 道题能满足下列条件：&lt;br/&gt;a&amp;lt;=b&amp;lt;=c&lt;br/&gt;b&lt;span&gt;-a&lt;/span&gt;&amp;lt;=10&lt;br/&gt;c-b&amp;lt;=10&lt;br/&gt;所有出题人一共出了 n 道开放性题目。现在我们想把这 n 道题分布到若干场考试中（1 场或多场，每道题都必须使用且只能用一次），然而由于上述条件的限制，可能有一些考试没法凑够 3 道题，因此出题人就需要多出一些适当难度的题目来让每场考试都达到要求，然而我们出题已经出得很累了，你能计算出我们最少还需要再出几道题吗？&lt;br/&gt;&lt;br/&gt;输入描述:&lt;br/&gt;输入的第一行包含一个整数 n，表示目前已经出好的题目数量。&lt;br/&gt;&lt;br/&gt;第二行给出每道题目的难度系数 d1,d2,...,dn。&lt;br/&gt;&lt;br/&gt;数据范围&lt;br/&gt;&lt;br/&gt;对于 30%的数据，1 ≤ n,di ≤ 5;&lt;br/&gt;&lt;br/&gt;对于 100%的数据，1 ≤ n ≤ 10^5,1 ≤ di ≤ 100。&lt;br/&gt;&lt;br/&gt;在样例中，一种可行的方案是添加 2 个难度分别为 20 和 50 的题目，这样可以组合成两场考试：（20 20 23）和（35,40,50）。&lt;br/&gt;&lt;br/&gt;输出描述:&lt;br/&gt;输出只包括一行，即所求的答案。&lt;br/&gt;示例 1&lt;br/&gt;输入&lt;br/&gt;4&lt;br/&gt;20 35 23 40&lt;br/&gt;输出&lt;br/&gt;2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题看起来很复杂， 你需要考虑很多的情况。，属于那种没有技术含量，但是考验编程能力的题目，需要思维足够严密。这种&lt;strong&gt;「模拟的题目」&lt;/strong&gt;，就是题目让我干什么我干什么。类似之前写的囚徒房间问题，约瑟夫环也是模拟，只不过模拟之后需要你剪枝优化。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这道题的情况其实很多， 我们需要考虑每一套题中的难度情况， 而不需要考虑不同套题的难度情况。题目要求我们满足：&lt;code&gt;a&amp;lt;=b&amp;lt;=c b-a&amp;lt;=10 c-b&amp;lt;=10&lt;/code&gt;，也就是题目难度从小到大排序之后，相邻的难度不能大于 10 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我们的思路就是先排序，之后从小到大遍历，如果满足相邻的难度不大于 10 ，则继续。如果不满足， 我们就只能让字节的老师出一道题使得满足条件。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于只需要比较同一套题目的难度，因此我的想法就是&lt;strong&gt;「比较同一套题目的第二个和第一个，以及第三个和第二个的 diff」&lt;/strong&gt;。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果 diff 小于 10，什么都不做，继续。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果 diff 大于 10，我们必须补充题目。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有几个点需要注意。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第二题来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;比如 1 &lt;strong&gt;「30」&lt;/strong&gt; 40 这样的难度。我可以在 1，30 之间加一个 21，这样 1，21，30 就可以组成一一套。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比如 1 &lt;strong&gt;「50」&lt;/strong&gt; 60 这样的难度。我可以在 1，50 之间加 21， 41 才可以组成一套，自身（50）是无论如何都没办法组到这套题中的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出， 第二道题的临界点是 diff = 20 。小于等于 20 都可以将自身组到套题，增加一道即可，否则需要增加两个，并且自身不能组到当前套题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于第三题来说：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;比如 1 20 &lt;strong&gt;「40」&lt;/strong&gt;。我可以在 20，40 之间加一个 30，这样 1，20，30 就可以组成一一套，自身（40）是无法组到这套题的。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;比如 1 20 &lt;strong&gt;「60」&lt;/strong&gt;。也是一样的，我可以在 20，60 之间加一个 30，自身（60）同样是没办法组到这套题中的。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不难看出， 第三道题的临界点是 diff = 10 。小于等于 10 都可以将自身组到套题，否则需要增加一个，并且自身不能组到当前套题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这就是所有的情况了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有的同学比较好奇，我是怎么思考的。我是怎么&lt;strong&gt;「保障不重不漏」&lt;/strong&gt;的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上，这道题就是一个决策树， 我画个决策树出来你就明白了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4904632152588556&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01pJzOLLOSMKgfzib8lz5xU0CLNzPbenuOicGJHOq5ibZsUwXibpDWvibnVfA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2202&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;图中红色边框表示自身可以组成套题的一部分， 我也用文字进行了说明。#2 代表第二题， #3 代表第三题。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从图中可以看出， 我已经考虑了所有情况。如果你能够像我一样画出这个决策图，我想你也不会漏的。当然我的解法并不一定是最优的，不过确实是一个非常好用，具有普适性的思维框架。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要特别注意的是，由于需要凑整， 因此你需要使得题目的总数是 3 的倍数向上取整。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.1478260869565218&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01n54J8WWyuJ8rzCJiaUyaMnUEwdE3YMEQFCqe6nmgCibJl0GIyHFL50aw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;460&quot;/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;n = int(input())&lt;br/&gt;nums = list(map(int, input().split()))&lt;br/&gt;cnt = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;cur = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;nums.sort()&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n):&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;3&lt;/span&gt;:&lt;br/&gt;        cur = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;continue&lt;/span&gt;&lt;br/&gt;    diff = nums[i] - nums[i - &lt;span&gt;1&lt;/span&gt;]&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; diff &amp;lt;= &lt;span&gt;10&lt;/span&gt;:&lt;br/&gt;        cur += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &amp;lt; diff &amp;lt;= &lt;span&gt;20&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;            cur = &lt;span&gt;3&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;            cur = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        cnt += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; diff &amp;gt; &lt;span&gt;20&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;            cnt += &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;2&lt;/span&gt;:&lt;br/&gt;            cnt += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        cur = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;print(cnt + &lt;span&gt;3&lt;/span&gt; - cur)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;时间复杂度：由于使用了排序， 因此时间复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(NlogN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 4577 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2338, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2823, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4188, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。（假设使用了基于比较的排序）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空间复杂度：&lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(1)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2041 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;31&quot; d=&quot;M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1652, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;2. 异或&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;给定整数 m 以及 n 各数字 A1,A2,..An，将数列 A 中所有元素两两异或，共能得到 n(n-1)/2 个结果，请求出这些结果中大于 m 的有多少个。&lt;br/&gt;&lt;br/&gt;输入描述:&lt;br/&gt;第一行包含两个整数 n,m.&lt;br/&gt;&lt;br/&gt;第二行给出 n 个整数 A1，A2，...，An。&lt;br/&gt;&lt;br/&gt;数据范围&lt;br/&gt;&lt;br/&gt;对于 30%的数据，1 &amp;lt;= n, m &amp;lt;= 1000&lt;br/&gt;&lt;br/&gt;对于 100%的数据，1 &amp;lt;= n, m, Ai &amp;lt;= 10^5&lt;br/&gt;&lt;br/&gt;输出描述:&lt;br/&gt;输出仅包括一行，即所求的答案&lt;br/&gt;&lt;br/&gt;输入例子 1:&lt;br/&gt;3 10&lt;br/&gt;6 5 10&lt;br/&gt;&lt;br/&gt;输出例子 1:&lt;br/&gt;2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;前置知识&lt;/span&gt;&lt;/h3&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;异或运算的性质&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如何高效比较两个数的大小（从高位到低位）&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;首先普及一下前置知识。第一个是异或运算：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异或的性质：两个数字异或的结果 a^b 是将 a 和 b 的二进制每一位进行运算，得出的数字。运算的逻辑是如果同一位的数字相同则为 0，不同则为 1&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;异或的规律：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;任何数和本身异或则为 0&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;任何数和 0 异或是本身&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;异或运算满足交换律，即：a ^ b ^ c = a ^ c ^ b&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;同时建议大家去看下我总结的几道位运算的经典题目。 &lt;span&gt;位运算系列&lt;/span&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其次要知道一个常识， 即比较两个数的大小， 我们是从高位到低位比较，这样才比较高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;123&lt;br/&gt;456&lt;br/&gt;1234&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三个数比较大小， 为了方便我们先补 0 ，使得大家的位数保持一致。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;0123&lt;br/&gt;0456&lt;br/&gt;1234&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1.2299465240641712&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01GZx0rpAXsLpDhRh9MXAoOrbpp6L1iciaVDEYLqrc9d3tDpgEQWqicYzBA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;374&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;先比较第一位，1 比较 0 大， 因此 1234 最大。再比较第二位， 4 比 1 大， 因此 456 大于 123，后面位不需要比较了。这其实就是剪枝的思想。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了这两个前提，我们来试下暴力法解决这道题。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴力法就是枚举 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N^2 / 2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -833.9 2358.6 1083.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(955, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(1358.6, 0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(1858.6, 0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; 中组合， 让其两两按位异或，将得到的结果和 m 进行比较， 如果比 m 大， 则计数器 + 1， 最后返回计数器的值即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴力的方法就如同题目描述的那样， 复杂度为 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;N^2&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -833.9 1358.6 833.9&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(955, 363) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。一定过不了所有的测试用例， 不过大家实在没有好的解法的情况可以兜底。不管是牛客笔试还是实际的面试都是可行的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，让我们来&lt;strong&gt;「分析一下暴力为什么低效，以及如何选取数据结构和算法能够使得这个过程变得高效。」&lt;/strong&gt; 记住这句话， 几乎所有的优化都是基于这种思维产生的，除非你开启了上帝模式，直接看了答案。只不过等你熟悉了之后，这个思维过程会非常短， 以至于变成条件反射， 你感觉不到有这个过程， 这就是&lt;strong&gt;「有了题感。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其实我刚才说的第二个前置知识就是我们优化的关键之一。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我举个例子， 比如 3 和 5 按位异或。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;3 的二进制是 011， 5 的二进制是 101，&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;011&lt;br/&gt;101&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;按照我前面讲的异或知识， 不难得出其异或结构就是 110。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面我进行了三次异或：&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;第一次是最高位的 0 和 1 的异或， 结果为 1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第二次是次高位的 1 和 0 的异或， 结果为 1。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;第三次是最低位的 1 和 1 的异或， 结果为 0。&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那如何 m 是 1 呢？我们有必要进行三次异或么？实际上进行第一次异或的时候已经知道了一定比 m（m 是 1） 大。因为第一次异或的结构导致其最高位为 1，也就是说其最小也不过是 100，也就是 4，一定是大于 1 的。这就是&lt;strong&gt;「剪枝」&lt;/strong&gt;， 这就是算法优化的关键。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;看出我一步一步的思维过程了么？所有的算法优化都需要经过类似的过程。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此我的算法就是从高位开始两两异或，并且异或的结果和 m 对应的二进制位比较大小。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果比 m 对应的二进制位大或者小，我们提前退出即可。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;如果相等，我们继续往低位移动重复这个过程。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这虽然已经剪枝了，但是极端情况下，性能还是很差。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;m: 1111&lt;br/&gt;a: 1010&lt;br/&gt;b: 0101&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a，b 表示两个数，我们比较到最后才发现，其异或的值和 m 相等。因此极端情况，算法效率没有得到改进。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里我想到了一点，就是如果一个数 a 的前缀和另外一个数 b 的前缀是一样的，那么 c 和 a 或者 c 和 b 的异或的结构前缀部分一定也是一样的。比如：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a: 111000&lt;br/&gt;b: 111101&lt;br/&gt;c: 101011&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;a 和 b 有共同的前缀 111，c 和 a 异或过了，当再次和 b 异或的时候，实际上前三位是没有必要进行的，这也是重复的部分。这就是算法可以优化的部分， 这就是剪枝。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「分析算法，找到算法的瓶颈部分，然后选取合适的数据结构和算法来优化到。」&lt;/strong&gt; 这句话很重要， 请务必记住。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这里，我们用的就是剪枝技术，关于剪枝，91 天学算法也有详细的介绍。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到前面讲到的算法瓶颈， 多个数是有共同前缀的， 前缀部分就是我们浪费的运算次数， 说到前缀大家应该可以想到前缀树。如果不熟悉前缀树的话，看下我的这个&lt;span&gt;前缀树专题&lt;/span&gt;&lt;sup&gt;[2]&lt;/sup&gt;，里面的题全部手写一遍就差不多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此一种想法就是建立一个前缀树， &lt;strong&gt;「树的根就是最高的位」&lt;/strong&gt;。由于题目要求异或， 我们知道异或是二进制的位运算， 因此这棵树要存二进制才比较好。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;反手看了一眼数据范围：m, n&amp;lt;=10^5 。10^5 = 2 ^ x，我们的目标是求出 满足条件的 x 的 ceil（向上取整），因此 x 应该是 17。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;树的每一个节点存储的是：&lt;strong&gt;「n 个数中，从根节点到当前节点形成的前缀有多少个是一样的」&lt;/strong&gt;，即多少个数的前缀是一样的。这样可以剪枝，提前退出的时候，就直接取出来用了。比如异或的结果是 1， m 当前二进制位是 0 ，那么这个前缀有 10 个，我都不需要比较了， 计数器直接 + 10 。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4438964241676942&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01fMqxMAurghZNDw4rvrPm9WbBdNfLnYmRibiaNL2F4ldqCWOnWHiapRgCA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2433&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;我用 17 直接复杂度过高，目前仅仅通过了 70 % - 80 % 测试用例， 希望大家可以帮我找找毛病，我猜测是语言的锅。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;TreeNode&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        self.cnt = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;        self.children = [&lt;span&gt;None&lt;/span&gt;] * &lt;span&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;solve&lt;/span&gt;&lt;span&gt;(num, i, cur)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; cur == &lt;span&gt;None&lt;/span&gt; &lt;span&gt;or&lt;/span&gt; i == &lt;span&gt;-1&lt;/span&gt;: &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    bit = (num &amp;gt;&amp;gt; i) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    mbit = (m &amp;gt;&amp;gt; i) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; bit == &lt;span&gt;0&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; mbit == &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (cur.children[&lt;span&gt;1&lt;/span&gt;].cnt &lt;span&gt;if&lt;/span&gt; cur.children[&lt;span&gt;1&lt;/span&gt;] &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;) + solve(num, i - &lt;span&gt;1&lt;/span&gt;, cur.children[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; bit == &lt;span&gt;1&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; mbit == &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (cur.children[&lt;span&gt;0&lt;/span&gt;].cnt &lt;span&gt;if&lt;/span&gt; cur.children[&lt;span&gt;0&lt;/span&gt;] &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;) + solve(num, i - &lt;span&gt;1&lt;/span&gt;, cur.children[&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; bit == &lt;span&gt;0&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; mbit == &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; solve(num, i - &lt;span&gt;1&lt;/span&gt;, cur.children[&lt;span&gt;1&lt;/span&gt;])&lt;br/&gt;    &lt;span&gt;if&lt;/span&gt; bit == &lt;span&gt;1&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; mbit == &lt;span&gt;1&lt;/span&gt;:&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; solve(num, i - &lt;span&gt;1&lt;/span&gt;, cur.children[&lt;span&gt;0&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;preprocess&lt;/span&gt;&lt;span&gt;(nums, root)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; num &lt;span&gt;in&lt;/span&gt; nums:&lt;br/&gt;        cur = root&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;16&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;, &lt;span&gt;-1&lt;/span&gt;):&lt;br/&gt;            bit = (num &amp;gt;&amp;gt; i) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;if&lt;/span&gt; cur.children[bit]:&lt;br/&gt;                cur.children[bit].cnt += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;                cur.children[bit] = TreeNode()&lt;br/&gt;            cur = cur.children[bit]&lt;br/&gt;&lt;br/&gt;n, m = map(int, input().split())&lt;br/&gt;nums = list(map(int, input().split()))&lt;br/&gt;root = TreeNode()&lt;br/&gt;preprocess(nums, root)&lt;br/&gt;ans = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; num &lt;span&gt;in&lt;/span&gt; nums:&lt;br/&gt;    ans += solve(num, &lt;span&gt;16&lt;/span&gt;, root)&lt;br/&gt;print(ans // &lt;span&gt;2&lt;/span&gt;)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;3. 字典序&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;题目描述&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;给定整数 n 和 m, 将 1 到 n 的这 n 个整数按字典序排列之后, 求其中的第 m 个数。&lt;br/&gt;对于 n=11, m=4, 按字典序排列依次为 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第 4 个数是 2.&lt;br/&gt;对于 n=200, m=25, 按字典序排列依次为 1 10 100 101 102 103 104 105 106 107 108 109 11 110 111 112 113 114 115 116 117 118 119 12 120 121 122 123 124 125 126 127 128 129 13 130 131 132 133 134 135 136 137 138 139 14 140 141 142 143 144 145 146 147 148 149 15 150 151 152 153 154 155 156 157 158 159 16 160 161 162 163 164 165 166 167 168 169 17 170 171 172 173 174 175 176 177 178 179 18 180 181 182 183 184 185 186 187 188 189 19 190 191 192 193 194 195 196 197 198 199 2 20 200 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 47 48 49 5 50 51 52 53 54 55 56 57 58 59 6 60 61 62 63 64 65 66 67 68 69 7 70 71 72 73 74 75 76 77 78 79 8 80 81 82 83 84 85 86 87 88 89 9 90 91 92 93 94 95 96 97 98 99 因此第 25 个数是 120…&lt;br/&gt;&lt;br/&gt;输入描述:&lt;br/&gt;输入仅包含两个整数 n 和 m。&lt;br/&gt;&lt;br/&gt;数据范围:&lt;br/&gt;&lt;br/&gt;对于 20%的数据, 1 &amp;lt;= m &amp;lt;= n &amp;lt;= 5 ;&lt;br/&gt;&lt;br/&gt;对于 80%的数据, 1 &amp;lt;= m &amp;lt;= n &amp;lt;= 10^7 ;&lt;br/&gt;&lt;br/&gt;对于 100%的数据, 1 &amp;lt;= m &amp;lt;= n &amp;lt;= 10^18.&lt;br/&gt;&lt;br/&gt;输出描述:&lt;br/&gt;输出仅包括一行, 即所求排列中的第 m 个数字.&lt;br/&gt;示例 1&lt;br/&gt;输入&lt;br/&gt;11 4&lt;br/&gt;输出&lt;br/&gt;2&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;前置知识&lt;/span&gt;&lt;/h3&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;思路&lt;/span&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;和上面题目思路一样， 先从暴力解法开始，尝试打开思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;暴力兜底的思路是直接生成一个长度为 n 的数组， 排序，选第 m 个即可。代码：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;n, m = map(int, input().split())&lt;br/&gt;&lt;br/&gt;nums  = [str(i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(&lt;span&gt;1&lt;/span&gt;, n + &lt;span&gt;1&lt;/span&gt;)]&lt;br/&gt;print(sorted(nums)[m - &lt;span&gt;1&lt;/span&gt;])&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;时间复杂度：取决于排序算法， 不妨认为是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(NlogN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 4577 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2338, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2823, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3300, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4188, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;空间复杂度: &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这种算法可以 pass 50 % case。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面算法低效的原因是开辟了 N 的空间，并对整 N 个 元素进行了排序。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一种简单的优化方法是将排序换成堆，利用堆的特性求第 k 大的数， 这样时间复杂度可以减低到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;mlogN&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -694 3026 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(878, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1176, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1661, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2138, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们继续优化。实际上，你如果把字典序的排序结构画出来， 可以发现他本质就是一个十叉树，并且是一个完全十叉树。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我带你继续分析。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.39416058394160586&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01ehaRQYbce9V0HFKyEc80hFp4ianU70ZChtt01RibHNhLZ2af5iaNVHHCQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2740&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图， 红色表示根节点。节点表示一个十进制数， &lt;strong&gt;「树的路径存储真正的数字」&lt;/strong&gt;，比如图上的 100，109 等。这不就是上面讲的前缀树么？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如图黄色部分， 表示字典序的顺序，注意箭头的方向。因此本质上，&lt;strong&gt;「求字典序第 m 个数， 就是求这棵树的前序遍历的第 m 个节点。」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因此一种优化思路就是构建一颗这样的树，然后去遍历。构建的复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;，遍历的复杂度是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(M)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2592 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4D&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2203, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。因此这种算法的复杂度可以达到 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(max(m, n))&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 6220.7 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2030, 0)&quot;&gt;&lt;path data-c=&quot;61&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2559, 0)&quot;&gt;&lt;path data-c=&quot;78&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3131, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3520, 0)&quot;&gt;&lt;path data-c=&quot;6D&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4398, 0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4842.7, 0)&quot;&gt;&lt;path data-c=&quot;6E&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5442.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5831.7, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt; ，由于 n &amp;gt;= m，因此就是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(N)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 2429 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2040, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;实际上， 这样的优化算法依然是无法 AC 全部测试用例的，会超内存限制。因此我们的思路只能是不使用 N 的空间去构造树。想想也知道， 由于 N 最大可能为 10^18，一个数按照 4 字节来算， 那么这就有 400000000 字节，大约是 381 M，这是不能接受的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面提到这道题就是一个完全十叉树的前序遍历，问题转化为求完全十叉树的前序遍历的第 m 个数。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;十叉树和二叉树没有本质不同， 我在二叉树专题部分， 也提到了 N 叉树都可以用二叉树来表示。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;对于一个节点来说，第 m 个节点：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;要么就是它本身&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么其孩子节点中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么在其兄弟节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;要么在兄弟节点的孩子节点中&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;究竟在上面的四个部分的哪，取决于其孩子节点的个数。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;count &amp;gt; m ，m 在其孩子节点中，我们需要深入到子节点。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;count &amp;lt;= m ，m 不在自身和孩子节点, 我们应该跳过所有孩子节点，直接到兄弟节点。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这本质就是一个递归的过程。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;需要注意的是，我们并不会真正的在树上走，因此上面提到的&lt;strong&gt;「深入到子节点」&lt;/strong&gt;， 以及 &lt;strong&gt;「跳过所有孩子节点，直接到兄弟节点」&lt;/strong&gt;如何操作呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你仔细观察会发现：如果当前节点的前缀是 x ，那么其第一个子节点（就是最小的子节点）是 x * 10，第二个就是 x * 10 + 1，以此类推。因此：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;深入到子节点就是 x * 10。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;跳过所有孩子节点，直接到兄弟节点就是 x + 1。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ok，铺垫地差不多了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;接下来，我们的重点是&lt;strong&gt;「如何计算给定节点的孩子节点的个数」&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个过程和完全二叉树计算节点个数并无二致，这个算法的时间复杂度应该是 &lt;span&gt;&lt;span role=&quot;presentation&quot; data-formula=&quot;O(logN*logN)&quot; data-formula-type=&quot;inline-equation&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewbox=&quot;0 -750 6781.4 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;4F&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(763, 0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1152, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1450, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1935, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2412, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3522.2, 0)&quot;&gt;&lt;path data-c=&quot;2217&quot; d=&quot;M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4244.4, 0)&quot;&gt;&lt;path data-c=&quot;6C&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4542.4, 0)&quot;&gt;&lt;path data-c=&quot;6F&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5027.4, 0)&quot;&gt;&lt;path data-c=&quot;67&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5504.4, 0)&quot;&gt;&lt;path data-c=&quot;4E&quot; d=&quot;M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z&quot;/&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6392.4, 0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;/&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;。如果不会的同学，可以参考力扣原题： &lt;span&gt;222. 完全二叉树的节点个数&lt;/span&gt;&lt;sup&gt;[3]&lt;/sup&gt; ，这是一个难度为中等的题目。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;❝&lt;/span&gt;&lt;p&gt;因此这道题本身被划分为 hard，一点都不为过。&lt;/p&gt;&lt;span&gt;❞&lt;/span&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里简单说下，计算给定节点的孩子节点的个数的思路， 我的 91 天学算法里出过这道题。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;一种简单但非最优的思路是分别计算左右子树的深度。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;如果当前节点的左右子树高度相同，那么左子树是一个满二叉树，右子树是一个完全二叉树。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;否则（左边的高度大于右边），那么左子树是一个完全二叉树，右子树是一个满二叉树。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果是满二叉树，当前节点数 是 2 ^ depth，而对于完全二叉树，我们继续递归即可。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Solution&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;countNodes&lt;/span&gt;&lt;span&gt;(self, root)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; root:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        ld = self.getDepth(root.left)&lt;br/&gt;        rd = self.getDepth(root.right)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; ld == rd:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; ** ld + self.countNodes(root.right)&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; ** rd + self.countNodes(root.left)&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getDepth&lt;/span&gt;&lt;span&gt;(self, root)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; root:&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; + self.getDepth(root.left)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;而这道题， 我们可以更简单和高效。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;比如我们要计算 1 号节点的子节点个数。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;它的孩子节点个数是 。。。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;它的孙子节点个数是 。。。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;。。。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;全部加起来即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的孩子节点个数是 &lt;code&gt;20 - 10 = 10&lt;/code&gt; 。也就是它的&lt;strong&gt;「右边的兄弟节点的第一个子节点」&lt;/strong&gt; 减去 它的&lt;strong&gt;「第一个子节点」&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4117647058823529&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01a4LMRM0F8iaJm4om6VQ8y1pXBR5QA7GXYJeMe3wPTic7XG4XEPqgV77g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2380&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;由于是完全十叉树，而不是满十叉树 。因此你需要考虑边界情况，比如题目的 n 是 15。那么 1 的子节点个数就不是 20 - 10 = 10 了， 而是 15 - 10 + 1 = 16。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.34288121314237574&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/liaT5dytkaTfBoX3TaDYlibqstdrAxkP01KuEg6IdUiaiaiagg4ib9BZzHLLpv74yea1BQFWwlrkX5XDic7nLR9LcjN8g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;2374&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其他也是类似的过程， 我们只要：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Go deeper and do the same thing&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;或者：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Move to next neighbor and do the same thing&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;不断重复，直到 m 降低到 0 。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span/&gt;代码&lt;/span&gt;&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;&lt;span&gt;(c1, c2, n)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;    steps = &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; c1 &amp;lt;= n:&lt;br/&gt;        steps += min(n + &lt;span&gt;1&lt;/span&gt;, c2) - c1&lt;br/&gt;        c1 *= &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;        c2 *= &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; steps&lt;br/&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;findKthNumber&lt;/span&gt;&lt;span&gt;(n: int, k: int)&lt;/span&gt; -&amp;gt; int:&lt;/span&gt;&lt;br/&gt;    cur = &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    k = k - &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;while&lt;/span&gt; k &amp;gt; &lt;span&gt;0&lt;/span&gt;:&lt;br/&gt;        steps = count(cur, cur + &lt;span&gt;1&lt;/span&gt;, n)&lt;br/&gt;        &lt;span&gt;if&lt;/span&gt; steps &amp;lt;= k:&lt;br/&gt;            cur += &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;            k -= steps&lt;br/&gt;        &lt;span&gt;else&lt;/span&gt;:&lt;br/&gt;            cur *= &lt;span&gt;10&lt;/span&gt;&lt;br/&gt;            k -= &lt;span&gt;1&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; cur&lt;br/&gt;n, m = map(int, input().split())&lt;br/&gt;print(findKthNumber(n, m))&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;「复杂度分析」&lt;/strong&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span/&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中三道算法题从难度上来说，基本都是困难难度。从内容来看，基本都是力扣的换皮题，且都或多或少和树有关。如果大家一开始没有思路，建议大家先给出暴力的解法兜底，再画图或举简单例子打开思路。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我也刷了很多字节的题了，还有一些难度比较大的题。如果你第一次做，那么需要你思考比较久才能想出来。加上面试紧张，很可能做不出来。这个时候就更需要你冷静分析，先暴力打底，慢慢优化。有时候即使给不了最优解，让面试官看出你的思路也很重要。比如&lt;span&gt;小兔的棋盘&lt;/span&gt;&lt;sup&gt;[4]&lt;/sup&gt; 想出最优解难度就不低，不过你可以先暴力 DFS 解决，再 DP 优化会慢慢帮你打开思路。有时候面试官也会引导你，给你提示， 加上你刚才“发挥不错”，说不定一下子就做出最优解了，这个我深有体会。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;另外要提醒大家的是， 刷题要适量，不要贪多。要完全理清一道题的来龙去脉。多问几个为什么。这道题暴力法怎么做？暴力法哪有问题？怎么优化？为什么选了这个算法就可以优化？为什么这种算法要用这种数据结构来实现？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;更多题解可以访问我的 LeetCode 题解仓库：https://github.com/azl397985856/leetcode 。目前已经 36K+ star 啦。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;br/&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;&lt;section data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;[1] &lt;/span&gt;&lt;p&gt;位运算系列: &lt;span&gt;https://leetcode-cn.com/problems/single-number/solution/zhi-chu-xian-yi-ci-de-shu-xi-lie-wei-yun-suan-by-3/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[2] &lt;/span&gt;&lt;p&gt;前缀树专题: &lt;span&gt;https://github.com/azl397985856/leetcode/blob/master/thinkings/trie.md&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[3] &lt;/span&gt;&lt;p&gt;22. 完全二叉树的节点个数]: &lt;span&gt;https://leetcode-cn.com/problems/count-complete-tree-nodes/&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;[4] &lt;/span&gt;&lt;p&gt;小兔的棋盘: &lt;span&gt;https://github.com/azl397985856/leetcode/issues/429&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>8f13dbb0dcf888e98eb5d3dd5fb52a24</guid>
<title>CPU 中的程序是怎么运行起来的</title>
<link>https://toutiao.io/k/o53zxbu</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section data-support=&quot;96编辑器&quot; data-style-id=&quot;25973&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;总述&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;section data-width=&quot;99%&quot;&gt;&lt;p&gt;&lt;span&gt;    最近一位朋友问我，开发的代码是怎么在芯片运行起来的，我就开始给他介绍代码的预编译、汇编、编译、链接然后到一般的文件属性，再到代码运行。&lt;/span&gt;&lt;span&gt;但是大佬问了我一句，CPU到底是怎么执行到每一个逻辑的，就讲了哈CPU的架构。&lt;/span&gt;&lt;span&gt;这是时候真的有些迷了，虽然有模电数电的底子，但是自己都说迷糊了，汇编怎么对应到机器码再到怎么执行每一个逻辑。&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-width=&quot;99%&quot;&gt;&lt;p&gt;&lt;span&gt;    所以我想了想，我自己也重新学习整理一下，写一篇文章分享给自己也分享给大家。虽然网上也有很多人讲这个过程，我也想用自己的视角去介绍一下。所以我就花了三天时间把《CODE》这本书啃完，然后又看了哈&lt;strong&gt;Crash Course Computer Science&lt;/strong&gt;的视频，现在终于可以写篇文章了。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;98856&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-original-title=&quot;&quot; title=&quot;&quot;&gt;1&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;15%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;371:562&quot;&gt;&lt;strong&gt;CPU的硬件最小原子&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-role=&quot;paragraph&quot;&gt;&lt;p&gt;    计算机从上世纪四十年代发展到现在有八十多年了，我们现在开发应用以及很少会涉及到底层的部分，硬件设计的电子专业在学校里面会学习模电数电这两门课，今天的第一部分就从这里说起。&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6268518518518519&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw18Cicb7e7iaYQzK5OnaENoTwr0vYAcspdHgswXyr2jaYMg7zDPAHOUicDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一般我们不考虑物理的硬件底层的实现逻辑，但是&lt;/strong&gt;为了后续的机器码的介绍，这里开始介绍CPU的基本组成部分。&lt;/p&gt;&lt;p&gt;    &lt;/p&gt;&lt;p&gt;    我们都知道现在的CPU是无数的晶体管组成，一块很小的CPU用显微镜观察可以看到上百万个元器件，那么最早电脑是啥样的呢？&lt;strong&gt;感谢&lt;span&gt;Crash Course Computer Science&lt;/span&gt;的视频，下面有很好照片都是从她的视频中截取。以及感谢《CODE》，好多资料也是从此书得来。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6003633060853769&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1EXJrJ6mQ4EiaIfFmzibXofwGHPmiahV4exktwJkwibFG1WSYsCABUGQcqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1101&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;最早的计算机，它有76万5千个组件，300多万个连接点和大约804公里长的用线，这个是真的大，而且它的核心控制还是用继电器实现控制逻辑的。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6058394160583942&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1Lnwuyjf27ibmG37os05vB7BkuOlbMeqZ3ScawcmMLBSIbBYW04FJBCg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;此外，它的性能相较于于现在的电脑来说简直微不足道。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6029277218664227&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw17FHoVIj5QpdicGt4Zlgd323lVlazRfAT9VZAEBoebZDpYp8a8zrIgRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1093&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    好了言归正传，我们直接介绍现在计算机中的CPU组成，之前用继电器、电子管进行控制计算，这些基本的元器件使得计算机体型庞大，后来半导体的出现，使得计算机的体积大大减小。没有使用半导体的时候，科学家使用继电器等进行控制电路的开关，控制电路电流的高和低，通过布尔代数组合形成我们现在经常说的逻辑门，继而实现数据的控制。&lt;/p&gt;&lt;p&gt;    &lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5537190082644629&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1uaBHQHAsFPcmMYQ9fSx6TRIpRxoQuaSYfzrCnVXkTFamRPgafe5D1Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;605&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;如上图所以它会出现如下情况&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4088176352705411&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1njGRdLIy55ricicU8ib96IxoE01Qf93eB2IhhrYlicz94am5NJ5LrHMWFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;499&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这其实就是一个简单开关的&lt;strong&gt;与门&lt;/strong&gt;（&lt;strong&gt;AND&lt;/strong&gt;）电路，所有的变量输入是1的时候，输出才为1。相应的还有非门、或门、异或门等。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;那么半导体是如何做到的呢？下面所示是三极管变化而成的与门（AND）电路，通过两个三极管连接（三极管的工作原理可以百度一哈），实现逻辑。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5645320197044335&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1E6f4Ogp67w1qsll2BqTd0wt8SibQUNbCIxQx6qHzQrPfLHM8fpNdfibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1015&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这是非门（NOT），输入1输出位0，输入位、为0输出为1.&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7373096446700508&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1GD90mRGn8Inkkicg1EicAOPQFOAq7MTWbiaichQ7iaMEhDT5plDeibkKAuQA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;788&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这是或门（OR），只有A、B两个同时输入0的时候，输出才为0，其余都为1.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.562560620756547&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1VPv4UofEKBIyiaLFQxNrdt2Ko4y5GgwCSf4AXDjQUkUGlH5iaJPUDQmg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1031&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这是常用的逻辑门的图形表示以及真值表显示，最后一栏为真值表显示，其中A、B为输入，F为输出。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;1.1875&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw16iakjiaFrsZV2C4leeelX22cv2VQ8EFpicoTRQpPoDckrRIsbmVDTiarbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;368&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;基于这些逻辑的组合我们可以变成最小的11位二进制逻辑的加法器，1bit的数据锁存器，再扩展为8位加法器，256M存储器。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-original-title=&quot;&quot; title=&quot;&quot;&gt;2&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;15%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;371:562&quot;&gt;&lt;strong&gt;CPU的模块组成过程&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;讲完了CPU组成的最小原子结构,接下来我们抽象出来了逻辑门进行&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先我们先介绍一下CPU的基本架构&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tools=&quot;135编辑器&quot; data-id=&quot;97257&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.9061371841155235&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1yYDQE4h2f4uVu8BkWW6YvdAy6EP7J4BOgibur8HYO72Qmv2ad7EERDQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;一块完整可以执行程序CPU功能部件，里面有基本的ALU算数逻辑单元、控制单元、外部储存器（储存数据和程序）。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1970年发布的时候，它是第一个封装在单个芯片内完整的ALU。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5677655677655677&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw12Xwm804XqcDIY1rlbgiakUAeEialNZy4HF3AmuyDjYicbTDXKPJicYHBfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1092&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ALU&lt;/strong&gt;（&lt;span&gt;算数逻辑单元&lt;/span&gt;）有两个单元：&lt;strong&gt;一个算数单元（加法器）&lt;/strong&gt;，负责计算机里的所有数字操作，例如加减法、增量运算等；一个&lt;strong&gt;逻辑单元&lt;/strong&gt;，负责&lt;span&gt;一些简单的数值测试，例如检测ALU输出是否为零的的电路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;加法器：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;用单个晶体管一个个去拼，把这个电路做出来，到那时会很复杂很难理解。所以我们更高层面的抽象-逻辑门去实现（AND、OR、NOT、XOR）。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;下面这是一个1位的加法器：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4268292682926829&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw11TczM17VS3As9QTFP9Nr9B49fKlLH0byW7S6q6Ho38j5ln1IUMOibHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;410&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二进制数的“和”可以由异或门得到，而“进位”可以由与门得到，所以可以把异或门和与门结合起来来完成两个二进制数 A和B的加法 &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AB只能输入0或者1，也就是这个加法器能算0+0，1+0或者1+1。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;脱离具体的形状，我们可以把以上的一个加法器，抽象为一个符号用来显示：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.26036866359447003&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1ianaWqNf1YhypeHLibJgpLBp29sVfFGfJluYiaLD6KHUfcbqmcWh5IduA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;434&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5773501110288675&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1pD9UESos7FUE43hFAClsHle3Rvo6K7nHe1guEnOQcwkLaLP8UIyyIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1351&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5773501110288675&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1pD9UESos7FUE43hFAClsHle3Rvo6K7nHe1guEnOQcwkLaLP8UIyyIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1351&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4332129963898917&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1oI0ADRaqrtpSnt2SxB3qgKmzPibGGESPDZrxhcwb8yKqqzUNkJiaE78g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;然后我们在进行扩展，把八个全加器连接，这样就变成了一个8bit的加法器。每个全加器的进位输出都是下一个全加器的进位输入： &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.29305555555555557&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1NLyJ0dHxmcRomMvHibxQV3ccWXz2PY2En1Elnyn7h29KKKBQkGBQs2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot;/&gt;&lt;/p&gt;&lt;p&gt;用一个抽象的框图进行表示，其中输入是A和B标识为从A&lt;span&gt;0&lt;/span&gt;～A&lt;span&gt;7&lt;/span&gt;及B&lt;span&gt;0&lt;/span&gt;～B&lt;span&gt;7&lt;/span&gt;。输出为和输出，标识为从 S&lt;span&gt;0&lt;/span&gt;～S&lt;span&gt;7&lt;/span&gt;： &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4296520423600605&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1urCItBb5ibA6gUB6Np9SEMpBkXswdS72G8PVKx88iaWN551A2gNgwa2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;661&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这样我们就构造了一个简单8位的加法器。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;逻辑单元：&lt;/strong&gt;同样&lt;strong&gt;&lt;span&gt;AND、OR、NOT、XOR&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;的执行，如下图一个简单的判断输出是否为0的电路&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5533890436397401&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw12Ypqk8KZmA4SA7SKOekx7aBL7eiasdqxJlyfBhl8BiacZzxMiaNkAiaBlQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1077&quot;/&gt;&lt;/p&gt;&lt;p&gt;它用一堆OR门检查其中一位是否为1，哪怕只有一个输入的bit（位）为1，但都会被被或门到最后一个NOT（非）门进行取反，所以只有输入的数字是0，输出才能是为1。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;告诉ALU执行加减&lt;/span&gt;&lt;span&gt;法，&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;下面图片里面的的V代表&lt;/span&gt;&lt;strong&gt;ALU&lt;/strong&gt;&lt;span&gt;部分&lt;/span&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5638599810785241&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1eJIoLrMHHD7iaJQQTccWmXM7KZmetYibnwB9pT0VgnHAwvhRF5EN6F8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1057&quot; data-backw=&quot;578&quot; data-backh=&quot;326&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;通过ALU的FLAGS进行判断，下面有三个标志一个是OVERFLOW（操作超出了总线宽度，设置为true（1））、ZERO（运算结果是否为零）、NEGATIVE（运算结果第一位为1，则设置为true（1），表示为负数）&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5079872204472844&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1bBXdUo29BN7JBndwTpWZ4b0wvrRQZ7yCFicvklKOdbfbcX32kmmxaZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;939&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;这就是ALU中的一些单元，其实也是一大堆逻辑门巧妙连到一起。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;    此外我们还需要存储器（memory），如果ALU计算出来数据丢掉那么数据也没什么用了，所以需要内存把数据保存起来，与ALU一起组成CPU&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;之前的介绍都是单向顺序执行的电路，那有什么可以返回的电路呢，通过输出来控制影响输入。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.7303030303030303&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1GF3NPnBdwKHibD5ebxe8xu9ntZiaA7Qhc76aq861P3icOG6VeIic9c6JSw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;660&quot;/&gt;&lt;/p&gt;&lt;p&gt;进行AND 、NOT、OR组合，变成一个1位锁存器&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5577464788732395&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw19OPicO8kz7s3EU8q75lZtWl4nc9URibVia7DYKqB68R2IxJNDfAVGUd0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1065&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;输入STE为1，输出为1&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.24245374878286272&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1n3dRz0jeIy3Ve0AjbxYAZjExeb2jE3K1pN9My1mm0VSSLR3n88I2uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1027&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;输入RESTE为1，输出为0&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.24056603773584906&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw14jib7Pu6Ehl37nea1DXZUkialVU9vtsUD9LdEf1nFhDm6bTbHiaVhInjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1060&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果设置和置位都为0，电路会输出最后放置的状态，所以它就保存住1bit位的数据&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.248565965583174&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1YoTCSpD8MUdaNEtC7elN7AicNZ6v3EehIveG7SN6l7ubU1CiahHXcVHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;其中这样一个1位的锁存器，放入的动作叫做写，拿出数据的动作叫做读&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;为了好显示，我们使用再高一级别的抽象层，用下面的框图表示：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.3876518218623482&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1iacaBVJ3Qc3U6Rkwsv7acibiapTMtiacKC1not3XXRiaPRTZo3O59yTcOew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;988&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;随着芯片锁存器大小的扩展，正常连接需要的线是非常之多，所以引入了矩阵方式：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5858684985279686&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1lMw3r1OgiaxwH3WId8zxnFnlQib4yXWLjALlz3gYgN7P72BicCf0Oweeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1019&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5765765765765766&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1VGjN1sK5wyiakqRKQXuKL6Lr0icYdkzSgEpia3Ne01WJQPrjjC5lWnGeA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    为了将地址转化成为行和列 还要用多路复用器，这就是一个基本的SDRAM的组成结构。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    SRAM DRAM FLASH NVRAM，大家功能上相似，但是用不同的电路储存单个bit的数据，比如使用不同的逻辑门、电容器、、电荷捕获或者忆阻器。但是根本上，这些技术都是矩阵层层嵌套，来储存大量的信息。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section data-original-title=&quot;&quot; title=&quot;&quot;&gt;3&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section data-width=&quot;15%&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot; hm_fix=&quot;371:562&quot;&gt;&lt;strong&gt;CPU的代码语言执行以及编程语言的变化过程&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    通过不同的逻辑门，我们逐渐搭建起了CPU的硬件部分，同时也抽象到了&lt;span&gt;高层次的“微体系架构”，我们开始告诉CPU的模块进行操作，CPU里面都是101二进制数据，那怎么和CPU执行指令挂上钩呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;    最早执行机器使用就是穿孔卡片，通过穿孔卡片的特殊位置有没有穿孔，决定机器执行的不同步骤。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5742115027829313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1gSw9HoMWjOaJicFibjwBP2zaR1bjxiciaknFdd1EaIUtKo7TEqSq7sjZXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1078&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在计算机早期，程序员编程必须用机器码写程序，一般会在会在纸上写一个“高层次”的描述——伪代码，例如：&lt;strong&gt;从内存中获取当月销售额，再计算出税费。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这里展示一个简单范例代码，一段机器码 &lt;strong&gt;00101110。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先这个机器码分为前四位和后四位，前四位代表操作码，后四位代表地址。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先在指令表可以查到 &lt;strong&gt;0010 &lt;/strong&gt;对应着执行指令是LOAD_A 意思为从内存地址取出数据，放到寄存器A中。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6142506142506142&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1evfwd6JJ6QlvfENqv6o1RkSZgSuxheib7Xu6FvrHsrL3xQreWrzglGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;814&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CPU看到&lt;strong&gt;00101110&lt;/strong&gt;是怎么执行的呢？&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;首先CPU有两个执行时候的寄存器：&lt;/strong&gt;&lt;/p&gt;&lt;section data-role=&quot;list&quot;&gt;&lt;ol class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指令地址寄&lt;/span&gt;&lt;span&gt;存器&lt;/span&gt;，&lt;span&gt;一个追踪器&lt;/span&gt;&lt;span&gt;，负责追踪程序运行到哪里了；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指令寄存器，负责储存当前指令&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;其次，CPU执行指令有三个阶段: 取指令-&amp;gt;解码&lt;strong&gt;-&amp;gt;&lt;/strong&gt;执行&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;取指令：负责把指令从RAM中复制到指令寄存器中&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下所示：&lt;strong&gt;CPU把0010 1110放到指令寄存器中&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6510067114093959&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1W0UfKdXQcgqllOzRohGdPQpU5LibSmZ7JozkCO1fIiazMFDax45fUSgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;894&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;解码阶段：负责解析复制过来的指令对应到操作码是哪个执行，先解析&lt;strong&gt;0010&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6535874439461884&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1vDACXyZib8wuRACDN6F2HdXbqOicP3q8yccpAFoesDXbm9STxWS586Rw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;892&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6718562874251497&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw13FeF7BZiaX6iaicEcNp4HVVICfth3yB1icJROibJY7ENyVWVkibPPtdh2Nlg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;835&quot;/&gt;&lt;/p&gt;&lt;p&gt;LOAD_A指令的工作：把RAM里面的值放入寄存器A中&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;再解析后四位1110，为地址14&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6358447488584474&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1NyfR1x8hyrbqL7enXqZm1KC7EQAdWadjIVN2Rj8Yib6kXDoJNqRYe1w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;876&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;接下来通过控制单元进行选择确认是否执行load指令&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6916010498687664&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1ZwibwJUheCAO3mH2ibgzybDEez9rJqsdtlptZbzia4W7s5CbreO8iakwHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;762&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;当然控制单元也是由逻辑门连接起来的，这个时候需要一个电路，检查操作码是不是LOAD_A对应的0010&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6595982142857143&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1jnRfooCnUIttSBFIEkwwesBVClzsiagicG4dPZ2ibs3mQwiakBmibjJMYMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;896&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;执行阶段：当确认了执行的操作码，我们就开始执行&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.61198738170347&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1trcVBwWmViayJ2rgibqsxMjy05xMDClTOeruItrSXIQpDwjxgN4jw6lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;951&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;从地址1110（10进制14）读取出0000 0011的数据，　　因为是LOAD_A指令，我们把该数据放进寄存器A，不操作其他寄存器&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本次执行完成，然后我们就把“指令地址寄存器”+1，执行下一条命令，一直重复到代码结束。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt; &lt;strong&gt;如果我们遇到了例如加减运算时候，就可以用到ALU了，数据寄存器把需要进行add的两个数据输入，然后在发送操作码给ALU，ALU开始执行最后输出到暂存的寄存器，关闭ALU，最后再把数据放入正确的寄存器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;   除&lt;strong&gt;了执行动作，现代CPU还有时钟控制。&lt;/strong&gt;很早的计算机都是用人工插拔来进行每一条指令的计算，但是对于现在的CPU执行频率来说，人工是做不到这样的速度，所以现在CPU里面有专门的&lt;strong&gt;时钟&lt;/strong&gt;进行管理CPU的节奏，来告诉CPU要取指令-解码-执行。&lt;strong&gt;类似于练习乐器时候使用的节拍器一样。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;strong&gt;&lt;span&gt; 前面介绍程序运行时候我们是假设程序已经在内存里面了，但实际上程序储存的位置不在内存，并且需要在执行时候加载到内存里面。&lt;/span&gt;&lt;span&gt;只&lt;/span&gt;&lt;span&gt;要内存足够，不仅可以储存要运行的程序，还可以存程序需要的数据，以及运行程序时候产生的新数据。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    不过早期编程都是专家活，不管是全职还是技术控，&lt;strong&gt;都需要非常了解底层硬件，要懂操作码、寄存器等才能写程序，所以编程很麻烦&lt;/strong&gt;，哪怕是工程师和科学家都无法完全发挥计算机的能力&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    所以程序员开发出了一种新语言，更高层次，更可读性，每个操作码分配一个简单的名字——助记符。助记符后面紧跟数据，形成完整的指令。这样程序员就不用0和1去写代码，可以用load jump等助记符开始编程，&lt;strong&gt;这就是汇编&lt;/strong&gt;。前面我们讲过这些助记符，应该还是比较容易理解的。但是CPU是只能识别二进制的，所以程序员又写了二进制程序来帮忙，它可以读懂文字指令，自动转化成二进制指令，这个程序就叫做——&lt;strong&gt;汇编器。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;    &lt;strong&gt;汇编器&lt;/strong&gt;读取用&lt;strong&gt;汇编语言&lt;/strong&gt;写的程序，然后转成&lt;strong&gt;机器码。LOAD_A 14 是一个典型的汇编代码。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;发展到现在，就英特尔的&lt;span lang=&quot;EN-US&quot;&gt;CPU &lt;/span&gt;酷睿&lt;span lang=&quot;EN-US&quot;&gt;i7&lt;/span&gt;有上千种指令和指令变种，长度从一个字节到&lt;span lang=&quot;EN-US&quot;&gt;15&lt;/span&gt;个字节。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5947521865889213&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1sOrOjmaxmBichg6IyFAicvhr4PzMqUtdrqnzlIu3LFvuOfK8QshgvtnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1029&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;FORTRAN，是IBM1957年发布的语言，而主持&lt;span&gt;FORTRAN&lt;/span&gt;的项目的总监John Backus说，他只是因为懒，所以就开发了新的语言，是的大部分新程序的开发是因为更高效率的开发，把一个月的开发时间编程一周，在变成一天。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    就&lt;strong&gt;FORTRAN&lt;/strong&gt;使用效果来说，确实也达到了，平均&lt;strong&gt;FORTRAN写的程序要比同等的汇编写的代码少二十倍。然后&lt;strong&gt;FORTRAN&lt;/strong&gt;编译器会把&lt;strong&gt;FORTRAN&lt;/strong&gt;代码转为机器码。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6005639097744361&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/sz_mmbiz_png/ucdYmGXLia98TrMlSjAj5iciaFX6iaf91Mw1HFamBPL6BrbuEM4hlcptUS6yaDhKkneZufdUJukNPCN1e4ic7k0DTTA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;    然后陆续新的语言不断产生，60年代有ALGOL、LISP和BASIC等语言；70年代有Pascal、C和Smalltalk；80年代有C++、Objectivs-C和Perl；90年代有Python、Ruby和Java；2000开始出现Swift、C#、Go。未来语言还会越来越多，新的语言用新的平台和新的技术，让我们可以快速的开发使用。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>378ec22d0d642814d7d4c3406496183e</guid>
<title>如何使用 Kubernetes 管理中国高速公路上的 10 万边缘节点？</title>
<link>https://toutiao.io/k/1y2w2ix</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;导读：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在KubeCon 2020 线上峰会，张琦与董晓龙共同分享了使用Kubernetes和KubeEdge管理高速公路10万个边缘节点这样场景和规模下的成功实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;董晓龙是北京数软科技公司的架构师，本项目架构系统的主要设计者之一，也是项目落地的推动者。张琦是华为云智能边缘平台首席架构师，负责华为云智能边缘平台IEF的架构设计和研发。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;作者：华为云原生团队&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文来自于KubeCon 2020 同名Keynote的文稿记录。&lt;strong&gt;此议题主要由5个方面组成：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1) 项目背景&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2) 为什么选择Kubernetes？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3) 为什么选择KubeEdge?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4) 项目整体方案&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;5) 总结&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;项目背景&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;span&gt;本项目是在高速公路ETC联网和推动取消省界收费站的大前提下，门架系统的落地，也就是要把门架部署在覆盖全国范围的高速公路上，收集车辆通行的牌示信息，以及相应的交易信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整体的情况是在边缘侧，即高速公路上会部署大量的门架和相应的控制器，相应的边缘终端，这些终端大概10万台，其上部署了相关的应用以收集相关信息。超过50万个应用部署到边缘节点，收集到信息后，通过收费专网向省中心以及路网中心上传对应的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;本次项目的工作挑战主要有两个方面：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;为保证项目的成功落地，我们对整体架构做了选型，最终选择了K8s和KubeEdge来进行整体的应用和边缘节点管理。&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;为什么选择Kubernetes&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;在项目里，虽然说是部署在边缘侧的应用，但它的复杂程度已经和云上是类似的了，在边缘侧部署的应用已经是由很多个微服务组成的。所以Kubernetes对于支撑这种微服务化的、云原生化的应用部署和大规模管理的能力，同样也适用于这个项目在边缘侧的使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;具体来说，有一些典型的部署需求：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;这些需求，用K8s的这些Deployment、Pod、ReplicaSet、DaemonSet等核心对象来表示，是非常适合的。所以我们就选择了Kubernetes。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;当然，还有一些重要的边缘侧特有的需求是原生的Kubernetes不具备的，但Kubernetes的架构是非常好的，易于扩展，灵活性很高，可以基于原生Kubernetes架构基础，根据边缘管理的特殊需求进行扩展。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;为什么选择KubeEdge&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;整体方案&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;接下来我会把整体方案打开成几层来分别介绍。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;应用部署&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;首先是应用部署，就像我刚才说的，在边缘侧要部署的业务非常复杂，它是由多个微服务所构成的云原生化的架构。所以我们这些微服务以及中间件都容器化之后可以非常好的适应各种不同的异构操作系统，方便统一管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如下图所示，微服务架构分成前端和后端，前端主要把业务通过Deployment的方式部署到门架上，与后端之间是通过EdgeMesh实现的。通过这种服务发现的方式，实现微服务前后端业务的通信。而后端业务容器本身是无状态的，可以通过Deployment来部署。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;后面的Redis包括MySql就可以通过Statefulset的方式来进行部署。通过这样的部署模型，我们可以很完美的进行封装和自动化管理高可用的边缘侧的整套业务系统。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.2693069&quot; data-w=&quot;505&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia1Z7HH4plnAD6Ciasfh0WV1oSWODyAmbhmiblUo9quOoPnZNfeNd7fRf9VpjMnWkZdQKrsX8vRqRCxeneqEBoNHQ/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但如果仅仅是用原生的K8s部署方式，并不能完全满足我们的需求，因为在项目里要部署的量非常大，左图的环境只是应用于一个收费站，而一个路段要管理几百上千个收费站，逐个部署成本过高。所以我们基于K8s之上又构建了一个任务工作流的引擎系统，把每一个部署微服务的步骤定义为一个job。用批量的方式大量、快速部署成百上千个同样的微服务系统和环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1.025641&quot; data-w=&quot;546&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ia1Z7HH4plnAD6Ciasfh0WV1oSWODyAmbheW15LKsTrpGgWNxnbTjpNmI5zoybdfu4dfZF2eA4Lu4uGhtaW4pibmA/640?wx_fmt=png&quot; data-type=&quot;png&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;大规模节点接入&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;除了上面提到的挑战，在应对大规模节点接入的情况下也遇见过一些问题：&lt;/span&gt;&lt;/strong&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt; &lt;/span&gt; &lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;边缘业务高可用&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来的是边缘业务高可用，按照原生K8s的升级状态，它会先删除旧版本Pod，再创建新Pod并在这个过程中去拉取新版本镜像。这种操作在公有云网络条件较好的情况下，是没太大问题的。但在边缘侧，这样就会造成业务长时间的中断，收费数据缺失。所以针对这一个流程，我们也是做了相应的升级和优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们先把升级下载镜像的通知下发做预下载，下载成功之后再删除已有的旧Pod，启动新应用，优化了应用升级对服务中断的时间的影响，将业务升级时整体业务中断的时间从分钟级缩减到了10s内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，考虑到边缘设备有主备部署的情况，而边缘侧又不像云上有ELB服务。我们又在边缘节点中容器化部署了Keepalived，通过VIP，为门架的摄像头等设备提供对应的K8s集群内的容器服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;0.74&quot; data-w=&quot;300&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/ZPtdzESiawhdMHyNfDvj0a36SiaN499NjK0BKean9ibV1T8rYe2gLG8OTSjeCB1NesY09JLKujB7DqpO8DGu4HFxw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;End&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;关联阅读&lt;/strong&gt;&lt;/span&gt;&lt;strong/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU5NTYzMA==&amp;amp;mid=2247490094&amp;amp;idx=1&amp;amp;sn=56462e87962c02378b1106e13567ad24&amp;amp;chksm=e8c764afdfb0edb9ef099c9492c8923f950828a2de08ed260c6c2927503edec0a14b80920a39&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;云原生动态周报 | CNCF发布主题为“可观测性”的最终用户技术雷达&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU5NTYzMA==&amp;amp;mid=2247490064&amp;amp;idx=1&amp;amp;sn=47ea252e72706961e16df36d49ab0073&amp;amp;chksm=e8c76491dfb0ed87ea2351af622f6a6bf26e3328f328d0f2c8350df804cdd9684631d8271b35&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;【技术干货】AI场景下Volcano作业管理能力实践&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNzU5NTYzMA==&amp;amp;mid=2247489999&amp;amp;idx=1&amp;amp;sn=3808e1e2c8bd2cf64f16fdfeb7da710f&amp;amp;chksm=e8c7674edfb0ee5809410077b06b71399f900e6db406e7f61da1d09ad78ba6e7113e090fd8c7&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; hasload=&quot;1&quot;&gt;Kubernetes支持窗口增加到一年&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;img data-ratio=&quot;1&quot; data-w=&quot;430&quot; data-type=&quot;jpeg&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/ia1Z7HH4plnDlTcLkGQr9Z9uPHmOKeZH1Nvibs4JpjLvHTOvq56pMQrSfz8Bl5vwxtywaVslAAuR6Tn0Y7yOgjfA/640?wx_fmt=jpeg&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;svg viewbox=&quot;0 0 1 1&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;扫描二维码 ｜ &lt;/strong&gt;&lt;strong&gt;加入技术交流群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>