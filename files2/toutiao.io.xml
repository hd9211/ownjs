<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>cbb9ac1dc92411698f9c08d5b64336b4</guid>
<title>周末别闲着，快来吧！</title>
<link>https://toutiao.io/k/sat069j</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3341cf6f94c0487190d7433a93080b67</guid>
<title>了不起的 Chrome 浏览器（四）：Chrome 92 新增 at 和 randomUUID 方法，Canvas 支持 Display P3 色域</title>
<link>https://toutiao.io/k/a333hks</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;7月20日正式发布的Chrome 92，带来了哪些有意思的新特性呢？&lt;/p&gt;&lt;h1 data-lake-id=&quot;34ddb71c8f8a82125eaf87ae6d4ea601&quot;/&gt;&lt;h1 data-lake-id=&quot;34ddb71c8f8a82125eaf87ae6d4ea601&quot;&gt;背景&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;十多年来，Web技术突飞猛进，其中Chrome功不可没，了解Chrome可以帮助我们理解整个行业的发展趋势。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;因此，我将以《了不起的Chrome浏览器》为题，对Chrome的每一个版本的重要特性进行详细解读，同时分享一些自己的一些思考：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;通过专注于Chrome的写作，既可以可以提高我的专业能力，也可以提高个人影响力。&lt;span&gt;我的目标是在2025年出版一本关于Chrome的书&lt;/span&gt;，毕竟出版自己的书每一个写作者最高的追求。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;我是寒雁，一个热爱写代码和写文章的程序员，欢迎关注我的微信公众号寒雁Talk。&lt;/p&gt;&lt;h1 data-lake-id=&quot;029f19ae2d05a034702f31a96a8d5500&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;029f19ae2d05a034702f31a96a8d5500&quot;&gt;TL;TR&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;f47e54ae4cb1ddca0278a84be2ace458&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;Chrome 92最大的亮点是什么？说实话，&lt;span&gt;Chrome92并没有什么特别大的亮点&lt;/span&gt;，不过Array.prototype.at()还是挺实用的&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92是哪天发布的？2021-07-20&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92更新了多少个特性？14个，具体有哪些特性可以查看Chrome Platform Status&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92将使用哪个版本的V8引擎？9.2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;我感兴趣的新特性依次有哪些？&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-lake-id=&quot;a307463c5681d2c5807a63eedde86843&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;a307463c5681d2c5807a63eedde86843&quot;&gt;详细解读&lt;/h1&gt;&lt;h3 data-lake-id=&quot;da2607b47c7f128fa56b5519712d9475&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;da2607b47c7f128fa56b5519712d9475&quot;&gt;Array.prototype.at()&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;想必大家都写过这样的代码，使用数组长度减1来获取过数组的最后一个元素：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; A = [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(A[A.length - &lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;作为一个有代码洁癖的人，这样的写法冗长而奇怪。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;现在好了，Chrome 92支持Array.prototype.at()了：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__keyword&quot;&gt;const&lt;/span&gt; A = [&lt;span class=&quot;code-snippet__number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;code-snippet__number&quot;&gt;4&lt;/span&gt;]; &lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__built_in&quot;&gt;console&lt;/span&gt;.log(A.at(&lt;span class=&quot;code-snippet__number&quot;&gt;-1&lt;/span&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;代码少了5个字符，可读性也提高了很多，一举两得!&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;另外，除了Array，String与TypedArray也支持了at方法。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;at方法对应的ECMAScript提案&lt;span&gt;proposal-relative-indexing-method已经处于stage 3&lt;/span&gt;，目测最快明年将会纳入ECMAScript规范。&lt;/p&gt;&lt;h3 data-lake-id=&quot;3d00855a8c2a513153da594cee6bb54b&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;3d00855a8c2a513153da594cee6bb54b&quot;&gt;crypto.randomUUID()&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;日常开发中，我们经常会需要生成唯一ID，例如给每个用户生成唯一ID。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;npm包uuid的周下载量高达4000万+，我在自己的代码里也搜到了uuid模块：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F928098%2F1626511048566-ef600748-9b21-4dfe-a9bc-62ce08d5656d.jpeg%22%2C%22originWidth%22%3A616%2C%22originHeight%22%3A302%2C%22name%22%3A%22uuid.jpeg%22%2C%22size%22%3A32197%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A23.600388%2C%22y%22%3A26.034937%2C%22width%22%3A89.497292%2C%22height%22%3A19.291891%2C%22text%22%3A%22SEARCH%22%7D%2C%7B%22x%22%3A573.852%2C%22y%22%3A93.99997%2C%22width%22%3A17.957750000000033%2C%22height%22%3A17.957750000000033%2C%22text%22%3A%22*%22%7D%2C%7B%22x%22%3A477.27963%2C%22y%22%3A96.268555%2C%22width%22%3A29.191899999999976%2C%22height%22%3A20.685035%2C%22text%22%3A%22Aa%22%7D%2C%7B%22x%22%3A519.5305%2C%22y%22%3A96.96076%2C%22width%22%3A31.716600000000085%2C%22height%22%3A24.78455000000001%2C%22text%22%3A%22Abl%22%7D%2C%7B%22x%22%3A35.097496%2C%22y%22%3A101.07541%2C%22width%22%3A50.082863999999994%2C%22height%22%3A18.37362999999999%2C%22text%22%3A%22uuid%22%7D%2C%7B%22x%22%3A28.598978%2C%22y%22%3A167.71324%2C%22width%22%3A435.798882%2C%22height%22%3A24.737089999999995%2C%22text%22%3A%2215resultsin15files-Openineditor%22%7D%2C%7B%22x%22%3A85.401146%2C%22y%22%3A223.99823%2C%22width%22%3A163.973474%2C%22height%22%3A30.528879999999987%2C%22text%22%3A%22package.json%22%7D%2C%7B%22x%22%3A44.734283%2C%22y%22%3A229.47353%2C%22width%22%3A29.592957000000006%2C%22height%22%3A11.546019999999999%2C%22text%22%3A%22npm%22%7D%2C%7B%22x%22%3A71.00187%2C%22y%22%3A269.1899%2C%22width%22%3A174.92923%2C%22height%22%3A23.32556999999997%2C%22text%22%3A%22uuid%5C%22%3A%5C%227.0.3%5C%22%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SEARCH%20*%20Aa%20Abl%20uuid%2015resultsin15files-Openineditor%20package.json%20npm%20uuid%5C%22%3A%5C%227.0.3%5C%22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A308%2C%22height%22%3A151%2C%22id%22%3A%22yiIrd%22%7D&quot;&gt;&lt;img data-height=&quot;151px&quot; data-ratio=&quot;0.4902597402597403&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDVkuZIib2I3Juichaeajo39ia5Qa5WbPrHAsglUbUGwjgHe4UfqtjZvyEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;616&quot; title=&quot;uuid.jpeg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92新增了crypto.randomUUID()方法，用于生成符合RFC 4122 version 4规范的唯一ID。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;可惜的是，由于Firefox、Safari等其他浏览器没有支持，因此前端项目中将依然需要使用uuid模块。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;不过，Node.js 14.17.0已经支持了crypto.randomUUID()方法，而生成唯一ID通常是在后端进行，因此目测uuid模块的使用量将会有所降低。使用官方提供的API更加安全，且性能更好。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;要保证随机生成的UUID的唯一性和安全性，是一个看起来简单，但实际非常复杂的问题。图灵奖得主Donald Knuth在他的鸿篇巨制《The Art of Computer Programming》中花了一个章节来讨论随机数：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;It is not easy to invent a foolproof source of random numbers.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;我们所熟悉的Math.random()其实名不副实，并不随机，它是一个伪随机数生成器（Pseudo Random Number Generator，简称PRNG），当我们指定同一个random_seed启动时，它生成的随机数序列是一样的！&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;/&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node --random_seed=&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Welcome to Node.js v14&lt;span class=&quot;code-snippet__number&quot;&gt;.17&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.3&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Type &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.help&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.5254990606499601&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.963056226312738&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;node --random_seed=&lt;span class=&quot;code-snippet__number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Welcome to Node.js v14&lt;span class=&quot;code-snippet__number&quot;&gt;.17&lt;/span&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;.3&lt;/span&gt;.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;Type &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;.help&quot;&lt;/span&gt; &lt;span class=&quot;code-snippet__keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.5254990606499601&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&amp;gt; &lt;span class=&quot;code-snippet__built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;&lt;span class=&quot;code-snippet__number&quot;&gt;0.963056226312738&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;也就是说，只要黑客获取了random_seed，就能预测Math.random()所返回的&quot;随机序列&quot;，是不是有点可怕？&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;当然，获取random_seed并不是一件简单的事情，不过并非没有可能，因为random_seed不是随机的，而是依赖于一些内部状态，比如浏览器的启动时间、某个变量的虚拟内存地址，这些内部状态是有规律可循的。2014年，Andriod版的Firefox就曾被人破解过Math.random()。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span&gt;因此，在对安全性要求比较高的场景中，不要使用Math.random()。&lt;/span&gt;CVE中有多个安全漏洞是与Math.random()相关。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;为了满足大家对于更加安全的加密API的需求，社区提供了很多解决方案，其中最出名的为CryptoJS。但是，对于加密这种CPU密集型应用，纯JavaScript的方案存在比较严重的性能问题，且不够安全。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;因此，2017年，W3C发布了Web Cryptography API，提供更加安全、性能更好的加密API。其中，crypto.getRandomValues()可以用于生成更加安全的随机数，它是密码学安全伪随机数生成器（Cryptographically Secure Pseudo Random Number Generator，简称CSPRNG）。其实，CSPRNG也不能生成真正的随机数，只是它可以通过一些严格的密码学测试，可以认为是安全的。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;51f50693f66baf1ce01a6330f88e7839&quot;&gt;crypto.randomUUID()是基于CSPRNG的，因此也可以认为是安全的。&lt;/p&gt;&lt;p data-lake-id=&quot;346b270359ecdd244fdaa1f36858afd3&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;a4156fd03a3b349d8aa16ede9ded4d06&quot;&gt;crypto.randomUUID()虽然放在cypto对象中，但是它还并未被纳入Web Cryptography API，因此还不是W3C标准。&lt;/p&gt;&lt;h3 data-lake-id=&quot;c52720c8c1e0172fb7ca680a89b969c5&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;c52720c8c1e0172fb7ca680a89b969c5&quot;&gt;Canvas color management&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;目前，2D canvas仅支持陈旧的sRGB色域，但是现在的屏幕和相机早就支持更大的色域了。&lt;/p&gt;&lt;p data-lake-id=&quot;21da956303b1d9a8d156c67dc2bf6ea5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;4a0c96cf3239c96adb1866c928625585&quot;&gt;色域是什么呢？它的英文名是Color Gamut或者Color Space，是设备（显示器、投影仪、打印机）可以表达的颜色范围。人眼可见的颜色范围是有限的，而设备能表达的颜色范围是人眼可见的颜色范围的子集，而不同色域标准比如sRGB和Display P3能表达的颜色范围也不一样。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92支持在创建2D canvas时，使用Display P3色域，这将增强2D canvas的颜色还原能力。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;javascript&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;canvas.getContext(&lt;span class=&quot;code-snippet__string&quot;&gt;&#x27;2d&#x27;&lt;/span&gt;, { &lt;span class=&quot;code-snippet__attr&quot;&gt;colorSpace&lt;/span&gt;: &lt;span class=&quot;code-snippet__string&quot;&gt;&quot;display-p3&quot;&lt;/span&gt;} );&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;pre&gt;&lt;span&gt;&lt;span/&gt;&lt;/span&gt;&lt;/pre&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Display P3的色域比sRGB的色域大25%，当我们对比两者时，会发现Display P3要比sRGB明亮很多，区别非常明显：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F928098%2F1626597197633-2387609e-2caf-4c26-84c2-f66df9bba5dc.jpeg%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22sRGB_vs_Display%20P3jpg.jpg%22%2C%22size%22%3A317566%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1269.397%2C%22y%22%3A960.95935%2C%22width%22%3A340.9797000000001%2C%22height%22%3A70.90105000000005%2C%22text%22%3A%22DisplayP3%22%7D%2C%7B%22x%22%3A389.8314%2C%22y%22%3A971.4579%2C%22width%22%3A174.87640000000005%2C%22height%22%3A53.52499999999998%2C%22text%22%3A%22SRGB%22%7D%5D%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DisplayP3%20SRGB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A480%2C%22height%22%3A270%2C%22id%22%3A%22rmkeH%22%7D&quot;&gt;&lt;img data-height=&quot;270px&quot; data-ratio=&quot;0.5626666666666666&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDhCOGwuyTXAxbwxich3BJFnlhWLc7mVIVncavFu4IicqySzLzFssCHibbA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1500&quot; title=&quot;sRGB_vs_Display P3jpg.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;图片来源：Get Started with Display P3&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span&gt;对于图像、视频、设计、游戏、地图、外卖、电商等应用，准确还原颜色的重要性不言而喻&lt;/span&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;大多数情况下，买家秀和卖家秀的明显差异是由于卖家过度PS导致的，但是也有可能是颜色没有得到准确还原导致的。&lt;/p&gt;&lt;h3 data-lake-id=&quot;1eab0fba397f46ead93f4c3e8c9751c0&quot;&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3 data-lake-id=&quot;1eab0fba397f46ead93f4c3e8c9751c0&quot;&gt;Web Bluetooth manufacturer data filter&lt;/h3&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;早在6年前，Chrome就开始开发Web Bluetooth了，不过直到今天，Web Bluetooth也没有成为W3C标准，Safari和Firefox也没有支持Web Bluetooth，这就有点尴尬了。&lt;/p&gt;&lt;p data-lake-id=&quot;e0b33ae1135656caa4d7bbc7ec4897a5&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;510d8be2365cf3b900b008f291b30360&quot;&gt;&lt;span&gt;Chrome以一己之力推动了众多Web技术标准的进步，但是从Web Bluetooth也可以看出，其过程还是比较艰辛的，需要时间和耐心。&lt;/span&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;不过，为了让Web可以获得原生应用一样的能力，Chrome也不会放弃Web Bluetooth。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;使用Web Bluetooth，Web应用也可以连接并控制各种蓝牙设备，比如彩灯、玩具车、LED、无人机，还是很有意思的：&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p/&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;视频来源：WebBluetooth demos for Bluetooth.rocks&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;Chrome 92为Web Bluetooth新增了按照蓝牙设备的制造商来过滤蓝牙设备的能力。这样，对于一些针对特定产商的Web应用，就可以只给用户展示对应产商的蓝牙设备。&lt;/p&gt;&lt;h1 data-lake-id=&quot;e0ff11f66e8207127bf9c4be254c79c2&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;e0ff11f66e8207127bf9c4be254c79c2&quot;&gt;总结&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;本篇是《了不起的Chrome浏览器》的第4篇，坚持更新这个系列的博客还是挺难的，一方面工作太忙了，另一方面Chrome 92可以写的内容确实不多，我也不是很熟悉，需要很多时间挖掘。但是，不管怎样，我还是会坚持写下去，因为每次都能学到一些新的东西。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;写博客的过程中，我会阅读大量的参考资料，并且记录阅读笔记，所以我阅读的时间是远远大于写作的时间的。如果不是为了写作，我并不会对某一个知识点进行深究，&lt;span&gt;这也是写作最大的好处，通过输入倒逼输出，倒逼自己进行深度学习&lt;/span&gt;。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;对于比较权威，内容很有启发的参考资料，我都会列到文章后面。这样既是对作者版权的尊重，也是方便自己和读者去阅读相关资料。某个知识点真正优质的内容是非常稀缺的，要找到这些资料是需要一些Google技巧的：准确变换不同的搜索关键词，不断递归地挖掘最原始、最权威的第一手资料。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;另外，我写博客都不是几个小时或者几天时间写完的，长篇的博客写作时间长达一个月，所以改动会很频繁，整个写作过程语雀都会有修改记录。这样写看起来很累，但是其实是把一个大的任务拆分成了一个个小任务，反而轻松很多。另外，每一次写都会有一些新的发现、新的灵感，这对于写作也是非常有帮助的。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;欢迎关注寒雁Talk公众号，关注《了不起的Chrome浏览器》系列博客，与我一起见证大前端的星辰大海！&lt;/p&gt;&lt;h1 data-lake-id=&quot;66e83f284b44207f4edb9c154b825666&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;66e83f284b44207f4edb9c154b825666&quot;&gt;参考资料&lt;/h1&gt;&lt;p data-lake-id=&quot;4b8cf913d96df71dd5bbba164fdbd7ff&quot;&gt;&lt;/p&gt;&lt;ul data-lake-id=&quot;a49861708177b3fa3e4972a9e227ecbf&quot; start=&quot;1&quot; lake-indent=&quot;0&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483736&amp;amp;idx=1&amp;amp;sn=48b87e3902fe8f6752aae18b9fe2a18d&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（1）：Chrome 89开启Web应用的物联网时代&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483765&amp;amp;idx=1&amp;amp;sn=cebe653e89518574a785c32b6aad88aa&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（2）：Chrome 90将默认使用HTTPS，Web更安全了&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483785&amp;amp;idx=1&amp;amp;sn=e66890ec12bc3f9ffa88e8712283abbc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;了不起的Chrome浏览器（3）：Chrome 91支持WebAssembly SIMD，加&lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4NjI2OTI0Nw==&amp;amp;mid=2247483785&amp;amp;idx=1&amp;amp;sn=e66890ec12bc3f9ffa88e8712283abbc&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-linktype=&quot;2&quot;&gt;Web在AI等领域的应用&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Chrome 92: Web Apps as File Handlers, New JavaScript Features, and More&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;V8 release v9.2&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;at method for relative indexing&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;crypto.randomUUID is three times faster uuid.v4&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Overtaking Firefox Profiles: Vulnerabilities in Firefox for Android&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TIFU by using Math.random()&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A Brief History of Random Numbers&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;[V8 Deep Dives] Random Thoughts on Math.random()&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;《Art of Computer Programming, Volume 2: Seminumerical Algorithms, 3rd Edition》Chapter 3: Random Numbers&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Securing JavaScript applications with the Web Cryptography API&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Update on Web Cryptography&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Get Started with Display P3&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Improving Color on the Web&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Pixar in a Box: Color science&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;An Introduction To WebBluetooth&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;WebBluetooth demos for Bluetooth.rocks&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-lake-id=&quot;876710649adfccbc2696bad88f733ccb&quot;&gt;&lt;br/&gt;&lt;/h1&gt;&lt;h1 data-lake-id=&quot;876710649adfccbc2696bad88f733ccb&quot;&gt;招聘&lt;/h1&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;阿里巴巴业务平台事业部长期招聘P6及以上前端大佬，参与建设最前沿的阿里前端生态系统，推动行业技术发展，内推地址：hanyan.lk@alibaba-inc.com&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;欢迎大家关注我的微信公众号寒雁Talk。&lt;/p&gt;&lt;p data-lake-id=&quot;da7032b39bddef89519c381ca7ae23b8&quot;&gt;&lt;span data-card-type=&quot;inline&quot; data-lake-card=&quot;image&quot; data-card-value=&quot;data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fwebp%2F928098%2F1619341927214-9586185e-dfc0-4bf1-a2b8-222f7059c1bd.webp%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A394%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22width%22%3A540%2C%22height%22%3A197%2C%22id%22%3A%22pfcLA%22%7D&quot;&gt;&lt;img data-height=&quot;197px&quot; data-ratio=&quot;0.3648148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/UnKibSlmUib8h6VL1oK56FSAYR5QY0f3dDzLPm5ibCBjlHgrQYNjjL7OQ02gicezTDy8SUt9MibmxLhWQ2VI2TZKz3A/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;1080&quot; title=&quot;image&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cdd393d6cf1a461df6aa1f8c5fdef306</guid>
<title>Reactive Spring 实战：响应式 MySQL 交互</title>
<link>https://toutiao.io/k/eqigqry</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;p&gt;本文与大家探讨Spring中如何实现MySql响应式交互。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC项目是Spring提供的数据库响应式编程框架。&lt;br/&gt;R2DBC是Reactive Relational Database Connectivity的首字母缩写词。R2DBC是一个API规范倡议，它声明了一个响应式API，由驱动程序供应商实现，并以响应式编程的方式访问他们的关系数据库。&lt;br/&gt;实现数据库的响应式编程并不是容易的，传统的JDBC协议是一个完全阻塞的 API，所以响应式编程对JDBC协议可以说是一种“颠覆”了。&lt;/p&gt;&lt;p&gt;这里再强调一次响应式编程，响应式编程是一种非阻塞异步的编程模式，而Spring响应式编程提供了一种友好、直观、易于理解的编码模式处理异步结果（可参考前面的文章）。&lt;br/&gt;也就是说，应用发送SQL给数据库后，应用线程不需要阻塞等待数据库返回结果，而是直接返回处理其他任务，等到数据库SQL处理完成后，再由Spring调用线程处理结果。&lt;/p&gt;&lt;p&gt;到目前，Spring Data R2DBC项目支持以下数据库：&lt;br/&gt;H2 (io.r2dbc:r2dbc-h2)&lt;br/&gt;MariaDB (org.mariadb:r2dbc-mariadb)&lt;br/&gt;Microsoft SQL Server (io.r2dbc:r2dbc-mssql)&lt;br/&gt;MySQL (dev.miku:r2dbc-mysql)&lt;br/&gt;jasync-sql MySQL (com.github.jasync-sql:jasync-r2dbc-mysql)&lt;br/&gt;Postgres (io.r2dbc:r2dbc-postgresql)&lt;br/&gt;Oracle (com.oracle.database.r2dbc:oracle-r2dbc)&lt;/p&gt;&lt;p&gt;下面基于MySql，介绍一下Spring Data R2DBC使用方式。&lt;/p&gt;&lt;p&gt;引入依赖&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-r2dbc&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;dev.miku&lt;span&gt;&amp;lt;/&lt;span&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;r2dbc-mysql&lt;span&gt;&amp;lt;/&lt;span&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;      &lt;span&gt;&amp;lt;&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.8.2.RELEASE&lt;span&gt;&amp;lt;/&lt;span&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;/&lt;span&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;spring.r2dbc.url=&lt;span&gt;r2dbcs:&lt;/span&gt;&lt;span&gt;mysql:&lt;/span&gt;/&lt;span&gt;/127.0.0.1:3306/bin&lt;/span&gt;-springreactive?useSSL=&lt;span&gt;false&lt;/span&gt;&lt;br/&gt;spring.r2dbc.username=...&lt;br/&gt;spring.r2dbc.password=...&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Data R2DBC可以与Spring Data JPA结合使用，其实R2DBC与原来的JPA使用方式差别不大，使用非常简单。&lt;br/&gt;只是Spring Data JPA中方法返回的是真实的值，而R2DBC中，返回的是数据流Mono，Flux。&lt;/p&gt;&lt;p&gt;简单介绍一个Spring Data JPA。Spring Data JPA是Spring基于ORM框架、JPA规范的基础上封装的一套 JPA  (Java Persistence API) 应用框架，简单说，就是类似Mybatis，Hibernate的框架（Spring Data JPA底层通过Hibernate操作数据库）。&lt;/p&gt;&lt;p&gt;Repository是Spring Data R2DBC中的重要概念，封装了对一个实体的操作，相当于一个dao（Data Access Object，数据访问对象）。&lt;/p&gt;&lt;p&gt;假如应用中有一个实体DeliveryCompany，对应表delivery_company。&lt;br/&gt;实体定义如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;DeliveryCompany&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Id&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; id;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String name;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; String label;&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; Integer level;&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@Id&lt;/code&gt;注解标志了id属性。&lt;/p&gt;&lt;p&gt;下面我们定义一个DeliveryCompanyRepository接口，继承与R2dbcRepository。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;@Repository&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;DeliveryCompanyRepository&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;R2dbcRepository&lt;/span&gt;&amp;lt;&lt;span&gt;DeliveryCompany&lt;/span&gt;,&lt;span&gt;Long&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;  ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;R2dbcRepository是Spring实现的接口，该接口继承与ReactiveCrudRepository，ReactiveCrudRepository接口提供了增删改查的模板方法。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public interface ReactiveCrudRepository&lt;span&gt;&amp;lt;&lt;span&gt;T,&lt;/span&gt; &lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; extends Repository&lt;span&gt;&amp;lt;&lt;span&gt;T,&lt;/span&gt; &lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Mono&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; save(S var1);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Flux&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; saveAll(Iterable&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; Flux&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; saveAll(Publisher&lt;span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    Mono&lt;span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; findById(ID var1);&lt;br/&gt;&lt;br/&gt;    Mono&lt;span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt; findById(Publisher&lt;span&gt;&amp;lt;&lt;span&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt; var1);&lt;br/&gt;&lt;br/&gt;    ...&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里的返回结果，是Mono、Flux等异步结果，这就是响应式交互与非响应式交互的最大区别。&lt;/p&gt;&lt;p&gt;如果要自定义操作，有以下方式&lt;br/&gt;（1） 通过方法名定义&lt;br/&gt;只要我们按规则定义方法名，Spring就会为我们生成SQL。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// 按名称查找&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByName&lt;/span&gt;(&lt;span&gt;String name&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查找给定范围内的&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThan&lt;/span&gt;(&lt;span&gt;Long startId&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查找大于给定id的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThan&lt;/span&gt;(&lt;span&gt;Long startId&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 查询名称以给定字符串开头的数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByNameStartingWith&lt;/span&gt;(&lt;span&gt;String start&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// 分页&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;findByIdGreaterThanEqual&lt;/span&gt;(&lt;span&gt;Long startId, Pageable pageable&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，上面方法名需要按规范定义&lt;/p&gt;&lt;pre&gt;&lt;code&gt;findByName -&amp;gt; findBy&lt;span&gt;&amp;lt;&lt;span&gt;fieldName&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;findByIdGreaterThan -&amp;gt; findBy&lt;span&gt;&amp;lt;&lt;span&gt;fieldName&lt;/span&gt;&amp;gt;&lt;/span&gt;GreaterThan&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring会为我们生成对应的SQL，非常方便。这种方法可以满足多数简单的查询。&lt;/p&gt;&lt;p&gt;对应的还有删除操作&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Mono&amp;lt;Integer&amp;gt; deleteByName(&lt;span&gt;String&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;);   &lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;详细的方法命名规则，则参考官方文档。&lt;/p&gt;&lt;p&gt;（2）手动编写SQL&lt;br/&gt;对于复杂的SQL，开发人员也可以手写SQL，&lt;/p&gt;&lt;pre&gt;&lt;code&gt;@Query(&quot;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; delivery_company &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;  (:ids)&lt;span&gt;&quot;)&lt;br/&gt;Flux&amp;lt;DeliveryCompany&amp;gt; findByIds2(List&amp;lt;Long&amp;gt; ids);&lt;br/&gt;&lt;br/&gt;@Query(&quot;&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;id&lt;/span&gt;,&lt;span&gt;name&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; delivery_company &lt;span&gt;where&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = :&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;)&lt;br/&gt;Flux&amp;lt;DeliveryCompany&amp;gt; findByName2(String name);&lt;br/&gt;&lt;br/&gt;@Modifying&lt;br/&gt;@Query(&quot;&lt;/span&gt;&lt;span&gt;update&lt;/span&gt; delivery_company &lt;span&gt;set&lt;/span&gt; &lt;span&gt;name&lt;/span&gt; = :&lt;span&gt;name&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;id&lt;/span&gt; = :&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;)&lt;br/&gt;Mono&amp;lt;DeliveryCompany&amp;gt; update2(@Param(&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;) long id, @Param(&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;) String name);&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，编写SQL也非常简单，对于集合参数支持非常好。&lt;br/&gt;目前未发现使用JPQL（Java Persistence Query Language）的方式，不过使用原生的SQL是没有问题的。&lt;/p&gt;&lt;p&gt;如果大家使用过Mybatis，应该会用过以下判断参数非空的做法&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span&gt;select&lt;/span&gt; id=&lt;span&gt;&quot;findByName2&quot;&lt;/span&gt;&lt;br/&gt;     resultType=&lt;span&gt;&quot;DeliveryCompany&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;  &lt;span&gt;SELECT&lt;/span&gt; * &lt;span&gt;FROM&lt;/span&gt; delivery_company&lt;br/&gt;  &lt;span&gt;WHERE&lt;/span&gt; name = &lt;span&gt;#{name}&lt;/span&gt;&lt;br/&gt;  &amp;lt;&lt;span&gt;if&lt;/span&gt; test=&lt;span&gt;&quot;label != null&quot;&lt;/span&gt;&amp;gt;&lt;br/&gt;    &lt;span&gt;AND&lt;/span&gt; label &lt;span&gt;like&lt;/span&gt; &lt;span&gt;#{label}&lt;/span&gt;&lt;br/&gt;  &amp;lt;/&lt;span&gt;if&lt;/span&gt;&amp;gt;&lt;br/&gt;&amp;lt;/&lt;span&gt;select&lt;/span&gt;&amp;gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可惜在JPA中非找到支持的方法，如果有同学知道，请不吝指教。&lt;/p&gt;&lt;p&gt;(3) 使用R2dbcEntityTemplate&lt;br/&gt;另外，可以使用R2dbcEntityTemplate自动生成SQL&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    @Autowired&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; R2dbcEntityTemplate template;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;getByName3&lt;/span&gt;(&lt;span&gt;String name&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; template&lt;br/&gt;                .&lt;span&gt;select&lt;/span&gt;(DeliveryCompany.class)&lt;br/&gt;                .&lt;span&gt;from&lt;/span&gt;(&lt;span&gt;&quot;delivery_company&quot;&lt;/span&gt;)&lt;br/&gt;                .matching(Query.query(Criteria.&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;name&quot;&lt;/span&gt;).&lt;span&gt;is&lt;/span&gt;(name))).all();&lt;br/&gt;        &lt;span&gt;// Criteria.where(&quot;name&quot;).is(name).and&lt;/span&gt;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Mono&amp;lt;Integer&amp;gt; &lt;span&gt;update3&lt;/span&gt;(&lt;span&gt;DeliveryCompany company&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; template&lt;br/&gt;                .update(DeliveryCompany.class)&lt;br/&gt;                .inTable(&lt;span&gt;&quot;delivery_company&quot;&lt;/span&gt;)&lt;br/&gt;                .matching(Query.query(Criteria.&lt;span&gt;where&lt;/span&gt;(&lt;span&gt;&quot;id&quot;&lt;/span&gt;).&lt;span&gt;is&lt;/span&gt;(company.getId())))&lt;br/&gt;                .apply(Update.update(&lt;span&gt;&quot;name&quot;&lt;/span&gt;, company.getName()));&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式可以实现判断参数非空查询，不过使用起来较为繁琐（我们也可以对其进行一定的封装以方便我们使用）。&lt;/p&gt;&lt;p&gt;(4)Spring Data R2DBC中同样支持Querydsl，&lt;br/&gt;我们定义的Repository可以继承于ReactiveQuerydslPredicateExecutor&lt;deliverycompany&gt;，该接口提供以下模板方法&lt;/deliverycompany&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;ReactiveQuerydslPredicateExecutor&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;T&amp;gt; &lt;span&gt;findOne&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1, Sort var2)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(Predicate var1, OrderSpecifier... var2)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Flux&amp;lt;T&amp;gt; &lt;span&gt;findAll&lt;/span&gt;&lt;span&gt;(OrderSpecifier... var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;Long&amp;gt; &lt;span&gt;count&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;Mono&amp;lt;Boolean&amp;gt; &lt;span&gt;exists&lt;/span&gt;&lt;span&gt;(Predicate var1)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Data R2DBC中同样支持@QuerydslPredicate注解，这里不再深入。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC支持事务，使用方法很简单，在业务方法添加@Transactional即可&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    &lt;span&gt;@Transactional&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Flux&amp;lt;DeliveryCompany&amp;gt; &lt;span&gt;save&lt;/span&gt;&lt;span&gt;(List&amp;lt;DeliveryCompany&amp;gt; companyList)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Flux&amp;lt;DeliveryCompany&amp;gt; result = Flux.just();&lt;br/&gt;        &lt;span&gt;for&lt;/span&gt; (DeliveryCompany deliveryCompany : companyList) {&lt;br/&gt;            result = result.concat(result, repository.save(deliveryCompany));&lt;br/&gt;        }&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; result;&lt;br/&gt;    }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了展示事务的使用，这里没有调用Repository的saveAll方法，而是循环插入数据并返回最后的结果。&lt;br/&gt;注意，最后的结果Flux、Mono一定要作为方法返回值，因为响应式编程的异常信息保存在这些结果中（而不是在方法调用时抛出），所以这些结果必须作为方法返回值，否则Spring无法知道方法是否报错，也就无法回退事务。&lt;/p&gt;&lt;p&gt;Spring Data R2DBC基本与Spring Data JPA的使用相同，所以本篇文章主要还是对Spring Data JPA使用方式的介绍。&lt;br/&gt;我之前并没有使用过Spring Data JPA，本篇文章主要还是入门介绍，还有很多东西没有涉及，如id生成，多表查询等，这里不再一一介绍。&lt;/p&gt;&lt;p&gt;官方文档：https://docs.spring.io/spring-data/r2dbc/docs/1.3.2/reference/html/&lt;br/&gt;文章完整代码：https://gitee.com/binecy/bin-springreactive/tree/master/delivery-service&lt;/p&gt;&lt;p&gt;如果您觉得本文不错，欢迎关注我的微信公众号，系列文章持续更新中。您的关注是我坚持的动力！&lt;/p&gt;&lt;figure&gt;文章最后，附图一张&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6008230452674898&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Of81vjDNtAwpp6FRh0mBRZhkWKA9VjCvWSw7FBsnkiar73c6H4z58nG6Tkv0HbzLIYkHgL6bn6JOMqDSL1OsGsQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;972&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;br/&gt;&lt;/figure&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>57efd4fef538d2991b7fdcb854e23cd3</guid>
<title>[推荐] 送给水深火热的 Gopher 们的一剂解药</title>
<link>https://toutiao.io/k/jzpfpqy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;看了看日历，现在已经是 2021 年了，偶尔还是能看到有人在发诸如 《http body 未关闭导致线上事故》，或者 《sql.Rows 未关闭半夜惊魂》类的文章，令人有一种梦回 2015 的感觉。&lt;/p&gt;&lt;p&gt;在这个 Go 的静态分析工具已经强到烂大街的时代，写这些文章除了暴露这些人所在的公司基础设施比较差，代码质量低以外，并不能体现出什么其它的意思了。毕竟哪怕是不懂怎么读源码，这样的问题你 Google 搜一下也知道是怎么回事了。&lt;/p&gt;&lt;p&gt;特别是有些人还挂着大公司的 title，让人更加不能理解了。下面是简单的静态分析工具的科普，希望给那些还在水深火热的 Gopher 们送点解药。&lt;/p&gt;&lt;h1&gt;何谓静态分析&lt;/h1&gt;&lt;p&gt;静态分析是通过扫描并解析用户代码，寻找代码中的潜在 bug 的一种手段。&lt;/p&gt;&lt;p&gt;静态分析一般会集成在项目上线的 CI 流程中，如果分析过程找到了 bug，会直接阻断上线，避免有问题的代码被部署到线上系统。从而在部署早期发现并修正潜在的问题。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img js_insertlocalimg&quot; data-ratio=&quot;0.5189437428243399&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/Lq0XA1b7xbfVk2pichYsECSBZ1nM445vAPZNUbIrlvOYzwvFynWKic4dOYOugicqeLtNOeicia5tLXOUKTPSO4e1enQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;871&quot;/&gt;&lt;/p&gt;&lt;h2&gt;社区常见 linter&lt;/h2&gt;&lt;p&gt;时至今日，社区已经有了丰富的 linter 资源供我们使用，本文会挑出一些常见 linter 进行说明。&lt;/p&gt;&lt;h3&gt;go lint&lt;/h3&gt;&lt;p&gt;go lint 是官方出的 linter，是 Go 语言最早期的 linter 了，其可以检查：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;导出函数是否有注释&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;变量、函数、包命名不符合 Go 规范，有下划线&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;receiver 命名是否不符合规范&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但这几年社区的 linter 蓬勃发展，所以这个项目也被官方 deprecated 掉了。其主要功能被另外一个 linter：revive[^1] 完全继承了。&lt;/p&gt;&lt;h3&gt;go vet&lt;/h3&gt;&lt;p&gt;go vet 也是官方提供的静态分析工具，其内置了锁拷贝检查、循环变量捕获问题、printf 参数不匹配等工具。&lt;/p&gt;&lt;p&gt;比如新手老手都很容易犯的 loop capture 错误：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; main&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]&lt;span&gt;int&lt;/span&gt; {&lt;span&gt;1&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;}&lt;br/&gt; &lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;map&lt;/span&gt;[&lt;span&gt;int&lt;/span&gt;]*&lt;span&gt;int&lt;/span&gt;{}&lt;br/&gt; &lt;span&gt;for&lt;/span&gt; k, r := &lt;span&gt;range&lt;/span&gt; a {&lt;br/&gt;  &lt;span&gt;go&lt;/span&gt; &lt;span&gt;&lt;span&gt;func&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt;   b[k] = &amp;amp;r&lt;br/&gt;  }()&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;go vet 会直接把你骂醒：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~/test git:master ❯❯❯ go vet ./clo.go&lt;br/&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; &lt;span&gt;command&lt;/span&gt;-line-arguments&lt;/span&gt;&lt;br/&gt;./clo.go:8:6: loop variable k captured by func literal&lt;br/&gt;./clo.go:8:12: loop variable r captured by func literal&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行 go tool vet help 可以看到 go vet 已经内置的一些 linter。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~ ❯❯❯ go tool vet help&lt;br/&gt;vet is a tool for static analysis of Go programs.&lt;br/&gt;&lt;br/&gt;vet examines Go source code and reports suspicious constructs,&lt;br/&gt;such as Printf calls whose arguments do not align with the format&lt;br/&gt;string. It uses heuristics that do not guarantee all reports are&lt;br/&gt;genuine problems, but it can find errors not caught by the compilers.&lt;br/&gt;&lt;br/&gt;Registered analyzers:&lt;br/&gt;&lt;br/&gt;    asmdecl      report mismatches between assembly files and Go declarations&lt;br/&gt;    assign       check for useless assignments&lt;br/&gt;    atomic       check for common mistakes using the sync/atomic package&lt;br/&gt;    bools        check for common mistakes involving boolean operators&lt;br/&gt;    buildtag     check that +build tags are well-formed and correctly located&lt;br/&gt;    cgocall      detect some violations of the cgo pointer passing rules&lt;br/&gt;    composites   check for unkeyed composite literals&lt;br/&gt;    copylocks    check for locks erroneously passed by value&lt;br/&gt;    errorsas     report passing non-pointer or non-error values to errors.As&lt;br/&gt;    httpresponse check for mistakes using HTTP responses&lt;br/&gt;    loopclosure  check references to loop variables from within nested functions&lt;br/&gt;    lostcancel   check cancel func returned by context.WithCancel is called&lt;br/&gt;    nilfunc      check for useless comparisons between functions and nil&lt;br/&gt;    printf       check consistency of Printf format strings and arguments&lt;br/&gt;    shift        check for shifts that equal or exceed the width of the integer&lt;br/&gt;    stdmethods   check signature of methods of well-known interfaces&lt;br/&gt;    structtag    check that struct field tags conform to reflect.StructTag.Get&lt;br/&gt;    tests        check for common mistaken usages of tests and examples&lt;br/&gt;    unmarshal    report passing non-pointer or non-interface values to unmarshal&lt;br/&gt;    unreachable  check for unreachable code&lt;br/&gt;    unsafeptr    check for invalid conversions of uintptr to unsafe.Pointer&lt;br/&gt;    unusedresult check for unused results of calls to some functions&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认情况下这些 linter 都是会跑的，当前很多 IDE 在代码修改时会自动执行 go vet，所以我们在写代码的时候一般就能发现这些错了。&lt;/p&gt;&lt;p&gt;但 &lt;code&gt;go vet&lt;/code&gt; 还是应该集成到线上流程中，因为有些程序员的下限实在太低。&lt;/p&gt;&lt;h3&gt;errcheck&lt;/h3&gt;&lt;p&gt;Go 语言中的大多数函数返回字段中都是有 error 的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;sayhello&lt;/span&gt;&lt;span&gt;(wr http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; io.WriteString(wr, &lt;span&gt;&quot;hello&quot;&lt;/span&gt;)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;func&lt;/span&gt; &lt;span&gt;main&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;br/&gt; http.HandleFunc(&lt;span&gt;&quot;/&quot;&lt;/span&gt;, sayhello)&lt;br/&gt; http.ListenAndServe(&lt;span&gt;&quot;:1314&quot;&lt;/span&gt;, &lt;span&gt;nil&lt;/span&gt;) &lt;span&gt;// 这里返回的 err 没有处理&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子中，我们没有处理 &lt;code&gt;http.ListenAndServe&lt;/code&gt; 函数返回的 error 信息，这会导致我们的程序在启动时发生静默失败。&lt;/p&gt;&lt;p&gt;程序员往往会基于过往经验，对当前的场景产生过度自信，从而忽略掉一些常见函数的返回错误，这样的编程习惯经常为我们带来意外的线上事故。例如，规矩的写法是下面这样的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;data, err := getDataFromRPC()&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// do business logic&lt;/span&gt;&lt;br/&gt;age := data.age&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而自信的程序员可能会写成这样：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;data, _ := getDataFromRPC()&lt;br/&gt;&lt;br/&gt;&lt;span&gt;// do business logic&lt;/span&gt;&lt;br/&gt;age := data.age&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果底层 RPC 逻辑出错，上层的 data 是个空指针也是很正常的，如果底层函数返回的 err 非空时，我们不应该对其它字段做任何的假设。这里 data 完全有可能是个空指针，造成用户程序 panic。&lt;/p&gt;&lt;p&gt;errcheck 会强制我们在代码中检查并处理 err。&lt;/p&gt;&lt;h3&gt;gocyclo&lt;/h3&gt;&lt;p&gt;gocyclo 主要用来检查函数的圈复杂度。圈复杂度可以参考下面的定义：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;圈复杂度(Cyclomatic complexity)是一种代码复杂度的衡量标准，在 1976 年由 Thomas J. McCabe, Sr. 提出。在软件测试的概念里，圈复杂度用来衡量一个模块判定结构的复杂程度，数量上表现为线性无关的路径条数，即合理的预防错误所需测试的最少路径条数。圈复杂度大说明程序代码可能质量低且难于测试和维护，根据经验，程序的可能错误和高的圈复杂度有着很大关系。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;看定义较为复杂但计算还是比较简单的，我们可以认为：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一个 if，圈复杂度 + 1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个 switch 的 case，圈复杂度 + 1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个 for 循环，圈复杂度 + 1&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一个 &amp;amp;&amp;amp; 或 ||，圈复杂度 + 1&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在大多数语言中，若函数的圈复杂度超过了 10，那么我们就认为该函数较为复杂，需要做拆解或重构。部分场景可以使用表驱动的方式进行重构。&lt;/p&gt;&lt;p&gt;由于在 Go 语言中，我们使用 &lt;code&gt;if err != nil&lt;/code&gt; 来处理错误，所以在一个函数中出现多个 &lt;code&gt;if err != nil&lt;/code&gt; 是比较正常的，因此 Go 中函数复杂度的阈值可以稍微调高一些，15 是较为合适的值。&lt;/p&gt;&lt;p&gt;下面是在个人项目 elasticsql 中执行 gocyclo 的结果，输出 top 10 复杂的函数：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~/g/s/g/c/elasticsql git:master ❯❯❯ gocyclo -top 10  ./&lt;br/&gt;23 elasticsql handleSelectWhere select_handler.go:289:1&lt;br/&gt;16 elasticsql handleSelectWhereComparisonExpr select_handler.go:220:1&lt;br/&gt;16 elasticsql handleSelect select_handler.go:11:1&lt;br/&gt;9 elasticsql handleGroupByFuncExprDateHisto select_agg_handler.go:82:1&lt;br/&gt;9 elasticsql handleGroupByFuncExprDateRange select_agg_handler.go:154:1&lt;br/&gt;8 elasticsql buildComparisonExprRightStr select_handler.go:188:1&lt;br/&gt;7 elasticsql TestSupported select_test.go:80:1&lt;br/&gt;7 elasticsql Convert main.go:28:1&lt;br/&gt;7 elasticsql handleGroupByFuncExpr select_agg_handler.go:215:1&lt;br/&gt;6 elasticsql handleSelectWhereOrExpr select_handler.go:157:1&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;bodyclose&lt;/h3&gt;&lt;p&gt;使用 bodyclose[^2] 可以帮我们检查在使用 HTTP 标准库时忘记关闭 http body 导致连接一直被占用的问题。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;resp, err := http.Get(&lt;span&gt;&quot;http://example.com/&quot;&lt;/span&gt;) &lt;span&gt;// Wrong case&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// handle error&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像上面这样的例子是不对的，使用标准库很容易犯这样的错。bodyclose 可以直接检查出这个问题：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; &lt;span&gt;command&lt;/span&gt;-line-arguments&lt;/span&gt;&lt;br/&gt;./httpclient.go:10:23: response body must be closed&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以必须要把 Body 关闭：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;resp, err := http.Get(&lt;span&gt;&quot;http://example.com/&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt; &lt;span&gt;// handle error&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; resp.Body.Close() &lt;span&gt;// OK&lt;/span&gt;&lt;br/&gt;body, err := ioutil.ReadAll(resp.Body)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HTTP 标准库的 API 设计的不太好，这个问题更好的避免方法是公司内部将 HTTP client 封装为 SDK，防止用户写出这样不 Close HTTP body 的代码。&lt;/p&gt;&lt;h3&gt;sqlrows&lt;/h3&gt;&lt;p&gt;与 HTTP 库设计类似，我们在面向数据库编程时，也会碰到 sql.Rows 忘记关闭的问题，导致连接大量被占用。sqlrows[^3] 这个 linter 能帮我们避免这个问题，先来看看错误的写法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rows, err := db.QueryContext(ctx, &lt;span&gt;&quot;SELECT * FROM users&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;span&gt;for&lt;/span&gt; rows.Next() {&lt;br/&gt; err = rows.Scan(...)&lt;br/&gt; &lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err &lt;span&gt;// NG: this return will not release a connection.&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正确的写法需要在使用完后关闭 sql.Rows：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;rows, err := db.QueryContext(ctx, &lt;span&gt;&quot;SELECT * FROM users&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;defer&lt;/span&gt; rows.Close() &lt;span&gt;// NG: using rows before checking for errors&lt;/span&gt;&lt;br/&gt;&lt;span&gt;if&lt;/span&gt; err != &lt;span&gt;nil&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;nil&lt;/span&gt;, err&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与 HTTP 同理，公司内也应该将 DB 查询封装为合理的 SDK，不要让业务使用标准库中的 API，避免上述错误发生。&lt;/p&gt;&lt;h3&gt;funlen&lt;/h3&gt;&lt;p&gt;funlen[^4] 和 gocyclo 类似，但是这两个 linter 对代码复杂度的视角不太相同，gocyclo 更多关注函数中的逻辑分支，而 funlen 则重点关注函数的长度。默认函数超过 60 行和 40 条语句时，该 linter 即会报警。&lt;/p&gt;&lt;h2&gt;linter 集成工具&lt;/h2&gt;&lt;p&gt;一个一个去社区里找 linter 来拼搭效率太低，当前社区里已经有了较好的集成工具，早期是 gometalinter，后来性能更好，功能更全的 golangci-lint 逐渐取而代之。目前 golangci-lint 是 Go 社区的绝对主流 linter。&lt;/p&gt;&lt;h3&gt;golangci-lint&lt;/h3&gt;&lt;p&gt;golangci-lint[^5] 能够通过配置来 enable 很多 linter，基本主流的都包含在内了。&lt;/p&gt;&lt;p&gt;在本节开头讲到的所有 linter 都可以在 golangci-lint 中进行配置，&lt;/p&gt;&lt;p&gt;使用也较为简单，只要在项目目录执行 golangci-lint run . 即可。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;~/g/s/g/c/elasticsql git:master ❯❯❯ golangci-lint run .&lt;br/&gt;main.go:36:9: S1034: assigning the result of this type assertion to a variable (switch stmt := stmt.(type)) could eliminate type assertions in switch cases (gosimple)&lt;br/&gt; switch stmt.(type) {&lt;br/&gt;        ^&lt;br/&gt;main.go:38:34: S1034(related information): could eliminate this type assertion (gosimple)&lt;br/&gt;  dsl, table, err = handleSelect(stmt.(*sqlparser.Select))&lt;br/&gt;                                 ^&lt;br/&gt;main.go:40:23: S1034(related information): could eliminate this type assertion (gosimple)&lt;br/&gt;  return handleUpdate(stmt.(*sqlparser.Update))&lt;br/&gt;                      ^&lt;br/&gt;main.go:42:23: S1034(related information): could eliminate this type assertion (gosimple)&lt;br/&gt;  return handleInsert(stmt.(*sqlparser.Insert))&lt;br/&gt;                      ^&lt;br/&gt;select_handler.go:192:9: S1034: assigning the result of this type assertion to a variable (switch expr := expr.(type)) could eliminate type assertions in switch cases (gosimple)&lt;br/&gt; switch expr.(type) {&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;参考资料&lt;/h2&gt;&lt;p&gt;[1] https://revive.run/&lt;/p&gt;&lt;p&gt;[2] https://github.com/timakin/bodyclose&lt;/p&gt;&lt;p&gt;[3] https://github.com/gostaticanalysis/sqlrows&lt;/p&gt;&lt;p&gt;[4] https://github.com/ultraware/funlen&lt;/p&gt;&lt;p&gt;[5] https://github.com/golangci/golangci-lint&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>9a0fadfffd6ea2519481d33a3be00ddc</guid>
<title>[推荐] 刷 LeetCode，进字节、阿里等一线大厂，刷题之前一定先打好底层基础</title>
<link>https://toutiao.io/k/cmj9lvn</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是Tom哥~&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;哲学里有一句很经典的话，”下层基础决定上层建筑“。相信很多人都听过，广泛用于我们生活中。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;那么我们软件开发行业的&lt;/span&gt;&lt;code&gt;&lt;span&gt;下层基础&lt;/span&gt;&lt;/code&gt;&lt;span&gt;是什么，有人说是&lt;/span&gt;&lt;code&gt;&lt;span&gt;操作系统&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;网络&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;HTTP协议&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、是&lt;/span&gt;&lt;code&gt;&lt;span&gt;TCP&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，这些虽然也是底层，但其实不够原子化。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;软件行业讲究的是抽象，那么他们的共同点是什么。那就是&lt;/span&gt;&lt;code&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和&lt;/span&gt;&lt;code&gt;&lt;span&gt;计算&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7411575562700965&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPib1nLVfSXBS8djvIlELQVocKOxoQscBe8GQqbMSdLyup3tUGLLT2huQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1244&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数据不是幽灵，需要有个载体，今天这节，我们就来讲下数据有哪些存储结构。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里架构师，研究生，CSDN博客专家。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.5449101796407185&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPZrJKPQZdLbRxgiazH0Kv1CoBqiceU6l6icIEoWyibbJtVjrW1lMnzbIK2A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;668&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、数组&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;定义：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;数组是一组连续内存空间存储的具有相同类型的数据，整个排列像一条线一样，是一种线性表数据结构。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.2585034013605442&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPz6I2DrZDtvVjhjHLtQ8K9AuNQNr02Yj5vyJhux8PpkLjnWibEUeibkwg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1176&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;像常见的&lt;/span&gt;&lt;code&gt;&lt;span&gt;数组&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链表&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，都是线性结构。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;随机访问。为什么呢？因为他的类型固定，决定它的数据长度也就固定，另外就是连续，所以基于初始地址，可以直接计算出数组任意位置的内存地址。查询速度很多。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为了保持连续性，中间位置插入或删除数据，需要做数据搬移，效率会较低。可以看下&lt;/span&gt;&lt;code&gt;&lt;span&gt;ArrayList&lt;/span&gt;&lt;/code&gt;&lt;span&gt;相关API的源码&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;成也萧何败萧何，数组初始化需要连续的内存空间，如果空间不够怎么办？我们可以选择 &lt;/span&gt;&lt;code&gt;&lt;span&gt;链表&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;使用数组要注意越界问题&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;数组扩容需要申请内存、数据搬移，成本较大，如果开始时能确定大小，那么在初始化时指定其大小。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、链表 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;链表一种非连续、非顺序的存储结构，由一系列节点组成，节点间通过指针完成了串联，每个节点包含数据和下一个节点指针两部分。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.31191222570532917&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPOY1BXXAGxNXFgzD0N6E6m9BajTsL9W1jbkoJOyUm6XRgJ9DbWfOcww/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1276&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据指针的方向可以分为：&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不需要连续内存空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过指针将这些空间串起来，形成一条链&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;不需要连续的内存空间，较灵活&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;允许插入、删除链表上任意位置的节点，只需要修改指针的值，不需要像数组一样搬移数据，系统开销成本大大降低&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;链表除了存储数据，还要存储指针，会额外占用一些存储空间&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;由于非顺序存储，所以不支持&lt;/span&gt;&lt;code&gt;&lt;span&gt;随机存取&lt;/span&gt;&lt;/code&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;数组擅长按&lt;/span&gt;&lt;code&gt;&lt;span&gt;下标&lt;/span&gt;&lt;/code&gt;&lt;span&gt;随机访问，链表擅长&lt;/span&gt;&lt;code&gt;&lt;span&gt;插入&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/code&gt;&lt;span&gt;操作。平常大家使用时，根据具体使用场景是&lt;/span&gt;&lt;code&gt;&lt;span&gt;读多&lt;/span&gt;&lt;/code&gt;&lt;span&gt;还是&lt;/span&gt;&lt;code&gt;&lt;span&gt;写多&lt;/span&gt;&lt;/code&gt;&lt;span&gt;灵活选择。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、栈  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;又名堆栈，它是一种运算受限的线性表。上面成为栈顶，下面称为栈底。向栈插入新元素称为入栈，新元素放到栈顶；从一个栈删除元素又称作出栈，它是把栈顶元素删除掉，使其下面相邻的元素成为新的栈顶元素。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;1.0943952802359882&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPxkJga1LXCmIaaViaPABkY3EI6PjxhucvAmELL2zcIicJR50UpYRvzpUg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;678&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据底层结构不同，可以分为&lt;/span&gt;&lt;code&gt;&lt;span&gt;数组实现的顺序栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链表实现的链式栈&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;只能操作栈顶元素，规则限制的死死地，不像其他数据结构非常灵活，可控性好，非常适合一些特殊业务场景&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、队列  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;队列是一种特殊的线性表，只允许在表的前端进行删除操作，而在表的后端进行插入操作。和栈一样，队列是一种操作受限制的线性表。插入的数据放在队尾，读取数据的端称为队头。队列中没有元素时，称为空队列。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.28125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPtGMiatCp9smgrFCDdtGRpCLIGdvibKdxgUibfY3CVeM7uviaLRG6VT485Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据支持的高级特性，可以分为：循环队列、阻塞队列、并发队列。根据底层结构不同，可以分为&lt;/span&gt;&lt;code&gt;&lt;span&gt;顺序队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;链式队列&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;两个动作：入队、出队&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;需要两个指针，一个head指针，指向队头；一个tail指针，指向队尾。随着入队和出队，两个指针也会相应的移动。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;先进先出，与栈相反&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;规则固定，头部只能读取，插入只能在队尾进行，规则固定，可控性&amp;amp;安全性好。非常适合一些特殊业务场景&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;Mzg2NzYyNjQzNg==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwdmOC0H6kaQlnh3rvWF2hPpzBoAoibbfQkhLdXfEpQgd8frHoDJDH503rv3FaMK6las2rCNQY7icr6w/0?wx_fmt=png&quot; data-nickname=&quot;微观技术&quot; data-alias=&quot;weiguanjishu&quot; data-signature=&quot;前阿里架构师，研究生，CSDN博客专家。负责过电商交易、社区团购、流量营销等业务。分享后端架构技能、一线大厂面试经验、团队管理等话题。欢迎关注&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;java线程池&lt;/span&gt;&lt;code&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，来不及处理的任务会临时放在任务队列中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;各种MQ消息中间件，如：kafka、RocketMQ 等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、哈希表  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;哈希表（Hash table）也叫散列表。根据键（Key）而直接访问在内存储存位置的数据结构。它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，加快查找速度。这个映射函数称为散列函数，存放记录的数组称做散列表。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8302919708029197&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPWoZGxNSLngxmqricf4xWEITLdmEJvic6Ribnwb0hvIjfLPhcRQOTNrzsg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1096&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Hash函数，建立key与value的映射关系。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;常用的哈希函数有MD5、SHA、CRC等&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;分为治之，化大为小，降低了复杂度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;通过key计算直接获取目标位置，提高查找速度&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;可能存在哈希冲突，在每个冲突处构建链表，将所有冲突值链入链表。如果是恶意攻击，哈希表可能会退化为链表，所有元素都被存储在同一个节点的链表中，此时哈希表的查找速度=链表遍历查找速度=O(n)&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;为了描述冲突，引入&lt;/span&gt;&lt;code&gt;&lt;span&gt;装载因子=哈希表中的元素个数 / 哈希表长度&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，装载因子越大，说明链表的长度越长，性能会越低。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当装载因子过大时，需要动态扩容。申请一个更大的哈希表，将原哈希表的数据迁移到新的哈希表。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Redis 数据库&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;Java中的哈希表实现，HashMap&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6、图   &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;图(Graph)是由顶点的有穷非空集合和顶点之间的集合组成，通常表示为：G（V, E），其中 G 表示一个图，V 是图 G 中顶点的集合，E 是图 G 中边的集合。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.781190019193858&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwculhFbcB0uKh7yTC8dKCHPjSUz51H0icqVGuYBUdYwCVGafXabN9QBic4zGLJB7P8iciajzqCwn5v4sA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1042&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;上图是一个有向图G，G=（V，E），其中顶点集合 V = 1、2、3、4，边集合是 E = (1,3)、(2,1)、(2,4)、(3,2)、(3,4)、(4,2)&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;根据图是否有方向、权重等可以分为：有向图、无向图、带权图&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;存储的信息完备&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;为任意两个顶点建立关系，称之为边。而树只能表示相邻两个节点的关系&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;任意点都可以建立关系，所以数据量会比较大。为了便于存储，我们将图用多维数组表示，从而将很多图运算转换为矩阵运算。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;当然，如果图比较稀疏的话，可以采用邻接表的存储方式，与哈希表类似，可以节省很多空间。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;地图如何计算出最优出行路线&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;深度优先搜索&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;广度优先搜索&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;最小生成树&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;图主要有以下两种存储方式：&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;邻接矩阵。比较浪费空间，但是优点是查询效率高&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;邻接表。每个顶点对应一个链表，比较节省存储空间，但是查询效率会低些。当然为了提高查询效率，可以将里面的链表替换成红黑树、跳表、或者平衡二叉树。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section&gt;&lt;span/&gt;&lt;/section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;7、树  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;顾名思义，跟现实的树一样，树上的每一个元素成为节点，节点与节点之间有一定的关系，上下称为父子节点，左右称为兄弟节点。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7869955156950673&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPxssDAN39Vu8730QUoLzdoKpoUnbOYCWzzdOJ3eZrWiau505iaLZdR3Ag/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;892&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;按照树的表现结构，可以具体分为以下几种类型：二叉树、平衡二叉树、满二叉树、完全二叉树、递归树、红黑树、B- 树、B+ 树 ，等&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;非线性结构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;父子节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;兄弟节点&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;树型结构&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;每个节点包含3块信息：数据值、左右子节点指针。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;树形结构，支持数据的快速插入、查找、删除&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;支持多种遍历方式：前序遍历、中序遍历、后序遍历&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;结构特殊，适合用递归来实现&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;树中删除一个节点操作较复杂，需要根据其子节点的个数（0、1、2）分多种情况考虑，迁移部分节点，重新构造树结构。当然，也可以采用逻辑标记删除，物理空间没有释放，但会产生碎片，影响查询效率。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;红黑树出镜率很高，风头甚至盖过了平衡二叉树，因为红黑树只要求近似平衡，维护成本比AVL树要低，但性能损失不大。当HashMap中的链表数据较多时，也会将链表结构升级为红黑树结构。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;B+树主要是采用更加扁平的结构存储海量数据，降低树的深度，主要用在 mysql 数据库索引构建，有兴趣同学可以看下之前的文章&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485030&amp;amp;idx=1&amp;amp;sn=fae128c2991e69101e6e4732001bcb76&amp;amp;chksm=ceb9facdf9ce73db7f26fe269b2fb7f7f16fe1aed7bfbf4028c81239f75890ebab8d27a3a50d&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;面试题：mysql 一棵 B+ 树能存多少条数据？&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;8、堆  &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;一种特殊的二叉树。需要满足两个条件：1、是一棵完全二叉树 2、堆中每个节点的值必须&amp;gt;=或&amp;lt;=其左右子节点的值。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.8431818181818181&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2KTof9YshwculhFbcB0uKh7yTC8dKCHPN5GzTsXluH1zSXROIdpXO5zibAibkbDgPzH8oXJibhopKVicMArm9agdhw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot;/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;具体，根据每个节点的值是&amp;gt;= 还是 &amp;lt;= 子树中每个节点的值，分为大顶堆、小顶堆。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;划重点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;优势：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;时间复杂度较低&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;获取堆顶元素的时间复杂度为 O(1)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设完全二叉树包含n个节点，插入元素、删除元素，时间复杂度为 O(logn)&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;典型场景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;strong&gt;示例：从10亿个数据中找到最大的前10个？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;假设10亿个数据存在数组中&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;取前10个数据，构建一个小顶堆，那么根节点是最小的&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;然后，从数组中依次取出一个数据与堆顶比较，如果大于，替换掉堆顶元素，堆内部调整；如果小于等于堆顶，不做处理&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;同样逻辑，依次循环处理数组中每一个元素。&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;span&gt;当10亿个数据处理完后，堆中的数据就是Top 10&lt;/span&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;hr/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;关于我：前阿里架构师，出过专利，竞赛拿过奖，CSDN博客专家，负责过电商交易、社区生鲜、营销、金融等业务，多年团队管理经验，爱思考，喜欢结交朋友&lt;/span&gt;&lt;/section&gt;&lt;h1 accuse=&quot;qTitle&quot;&gt;&lt;span&gt;&lt;span&gt;「长按2秒」↓↓&lt;/span&gt;&lt;span&gt;↓ 二维码，拉你进群，BAT大厂大神技术交流&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;br/&gt;&lt;img class=&quot;rich_pages&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.069090909090909&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2KTof9YshwcdJhGaQRdAk0VWLIAIU548z3Izf6mwqwwUX9X86hvNHZq158VYMEaxegjfRg8ic02O0HeWD4xIsiaQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;550&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485309&amp;amp;idx=1&amp;amp;sn=1209b7e3324440f7893847a935b3af5f&amp;amp;chksm=ceb9fbd6f9ce72c0ec04b49ed36d947df9b25fecdd7266dac148bb36582b96c2792e1d15d325&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;代码写的烂，经常被同事怼，教你一招！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247485237&amp;amp;idx=1&amp;amp;sn=e13bb954fb332221ac999e6a5d7f3127&amp;amp;chksm=ceb9fb9ef9ce72885f7a552630c2ed84badd1683019ff86459e8088fe886e89dd4b3932fb5f9&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;同事问我，SQL 语句明明命中了索引，为什么执行很慢？&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484980&amp;amp;idx=1&amp;amp;sn=25a530689f0657750d579263800369a6&amp;amp;chksm=ceb9fa9ff9ce7389974d2f33bea9d861920cb75cca559f1f2810c89f729011bb3c2839ac46da&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;学会这10个设计原则，离架构师又进了一步！！！&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;amp;mid=2247484929&amp;amp;idx=1&amp;amp;sn=d8cb3306dea9f1b92fd30d59da3f536a&amp;amp;chksm=ceb9faaaf9ce73bca59b46021a450fdc84aa0f85d6b49ff0e5578cc3abaa1433447f7dffc5e4&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;&lt;span&gt;人人都是架构师？？？谈何容易！！&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>