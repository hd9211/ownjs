<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f51b8bfcd26e79563274022b552b94ea</guid>
<title>五一没地方去？来这里吧！</title>
<link>https://toutiao.io/k/m70wnkv</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;profile_inner&quot;&gt;
                  &lt;strong class=&quot;profile_nickname&quot;&gt;我爱程序员&lt;/strong&gt;
                  &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;Weixin ID&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;developerWorks&lt;/span&gt;
                  &lt;/p&gt;

                  &lt;p class=&quot;profile_meta&quot;&gt;
                  &lt;label class=&quot;profile_meta_label&quot;&gt;About Feature&lt;/label&gt;
                  &lt;span class=&quot;profile_meta_value&quot;&gt;我们的产品：《码农周刊》 http://manong.io/ 、《开发者头条》 http://toutiao.io/&lt;/span&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>08ef86ecde4a6fd4f549105e553ad41f</guid>
<title>connection reset案例的穿越之旅</title>
<link>https://toutiao.io/k/ut7lfeg</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;p&gt;事情要从周五晚上说起，好学的朋友在群里问我有没有能够通过框架和项目能对IO有深入学习的。我当时正照例刷着电影解说，感受着逻辑的力量。等看到消息时，已经看到其他朋友热心得给出了神回复：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;3.1855072463768117&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9ibYmZwVq4fSlc6gonEZpJGTaubp7Qa2MF1eKicSv7RP7GDcgaRG5qETZpPscvGactrIBIzP8kpKYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;690&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在我进行了仔细阅读之后，断线一秒钟，之后由衷感叹自己技术不精，没有弄懂问题和回答之间的逻辑关系。于是给出了自己的回复：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;通信框架都需要IO知识，服务治理框架、redis和mysql等存储中间件、MQ都有很强的关联。但是一般很少有很强的动力研究的很深。我个人而言，排查生产问题会引出大量想学习的问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后群里简短的介绍了一个案例：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A与B是两个公司的两个服务，A要调用B服务，他们之间可谓万水千山：&lt;/p&gt;&lt;p&gt;A---服务器--F5--交换机1--交换机2--F5--SSL（透传）--F5--交换机--山石防火墙--H3C交换机--思科路由器---专线--网联思科路由器--H3C交换机--思科防火墙--思科交换机--H3C交换机--思科防火墙--F5-SSL-服务器--F5--交换机1--交换机2--F5--SSL--F5--交换机--山石防火墙--H3C交换机--思科路由器---专线--网联思科路由器--H3C交换机--思科防火墙--思科交换机--H3C交换机--思科防火墙--F5--SSL（非透传）--B&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;咱们简化一下问题：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A请求B，B正常返回结果，但是A反馈收不到。后来B抓包发现在请求还在进行read数据时就收到了connection reset，连接断开。但是并非每笔请求都是如此。而是A有小于30%的概率收不到。而B对接的其他公司却都正常。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在排查日志时发现B收到的请求分成两种，一种是A可以正常收到的，连接是长连接，一种是A不能正常收到的，连接是短连接。但是长连接还是短连接并不是不能正常返回数据的理由。因为数据是分段传输的，每段之间可以灵活采用自己的连接方式，就像传信时，第一段是采用飞鸽传书，第二段是快递员拿到信用快马送到驿站交到仆人手中，第三段是仆人一路小跑将信递交到我手中。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我猛然一惊，这不是穿越剧，而是技术文章。所以放弃长短连接，看看还没有别的线索，终于发现A不能收到的与能收到的相比http header的 X-Forwarded-For 参数中都多出了2个值。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;X-Forwarded-For（XFF）是用来识别通过 HTTP 代理或负载均衡方式连接到 Web 服务器的客户端最原始的 IP 地址的 HTTP 请求头字段。在传输过程中，每一个驿站都有可能通过这个字段打上自己的标记。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;将 XFF 的值拿给专业人士验证，竟然有人在B服务前面的万水千山之上又加了一座秦岭。更准确的说是加了30%个秦岭。B服务前被加上了一层nginx，且已经灰度了30%的流量。这就对应了有接近30%的请求有问题。也解释了为什么会有短连接，因为nginx在默认不设置时采用短连接。但是还不能解释为什么只有A有问题。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在nginx的日志中发现了lua异常，对于一个lua完全不懂的人果断向百事通大师谷歌求助。但谷歌大师是西域来的，据说见他要翻墙。翻墙不是体力好就更翻得了的，要付费。看着手上唯一个「顺治通宝」，正犹豫之时，又听人说咱们有个国产美人「度娘」在情报方面也很厉害，甚至慢慢在赶超谷歌大师。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我连忙前去请教，得到答复：lua脚本一旦抛出异常，就会中断处理。这就解释了为什么会发生connection reset。nginx抛出异常中断了与上层SSL客户端的连接。SSL又作为服务端感知到了异常，主动发connection reset中断了自己与上层的连接。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;这种异常场景最好能复现，但是不懂lua怎么复现，这次咱们要来个大手笔，找到真正的大师求助。于是问题上报到了「编程一生」用户交流群，立即得到了lua可以在线调试的重要线索，问题得到复现：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.27830451756832125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9ibYmZwVq4fSlc6gonEZpJGKEibndNIk5XlRNyogriaSpy5hNOedyOkaHtr6MzZzLVKHVpGu3qicjLicw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1793&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;原来处理请求和响应的lua脚本，里面打印日志时for循环遍历请求和响应的数组，遍历时认为每一项都是一个字符串，A应用在传输过程中，将http header的 XFF 变成了一个数组，lua中数组(table)不能直接强转为字符串，被判断为异常触发reset。这也解释了为什么只有A有问题，因为只有他在传输过程中将原本的字符串转成了数组。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在nginx日志还有一个支线线索是：access日志中显示请求结果是200(正常返回结果)，但是响应的 &lt;span&gt;Content-Length 为0 ！就是说响应为空。看到上面我们可以知道B返回了信息给nginx，nginx异常导致被处理后的响应丢失。出现这个问题的实际不是A一个，还有另外一家。本身B服务请求量很小，没有报出来也很正常。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从规律上来说：我怀疑可能是commons-httpclient-3.1-rc1版本以下会采用这种策略，因为从请求日志头中看到出现问题的只有两个httpclient版本过来的请求，另外一个是commons-httpclient-3.0-rc3 版本。这里再顺便介绍一下apache各个类型的版本。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Alpha：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Alpha是内部测试版，表示最初的版本，一般不向外部发布。Alpha版会有很多Bug，除非你想去测试最新的功能，否则一般不建议使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Beta：&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该版本相对于Alpha版已有了很大的改进，消除了严重的错误，但还是存在着一缺陷，需要经过多次测试来进一步消除。这个阶段的版本会一直加入新的功能。`&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;RC：(Release Candidate)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Candidate是候选人的意思，用在软件上就是候选版本。Release.Candidate.就是发行候选版本。和Beta版最大的差别在于Beta阶段会一直加入新的功能，但是到了RC版本，几乎就不会加入新的功能了，而主要着重于除错! RC版本是最终发放给用户的最接近正式版的版本，发行后改正bug就是正式版了，就是正式版之前的最后一个测试版。`&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;GA：（general availability）&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;比如：Apache Struts 2 GA这是Apache Struts 2首次发行稳定的版本，GA意味着General Availability，也就是官方开始推荐广泛使用了。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Release:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(R)。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;从案例来看，用过老的或者不用稳定版本，当了别人的小白鼠，可以获得很多技术精进的机会。因为你会踩很多其他开发者没有踩过的坑。同时还可以获得头发护理的永久免费：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/2tk5ianItRl9ibYmZwVq4fSlc6gonEZpJGFP8FXQRwM4qynL7kRayhWZupgKODdicgy3cgVWKMC4qRKnpfU8xaEJA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;最后澄清一下，文章是原创，但是作者不是我，是咱们。有事群里常交流，你们说我来听~&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6595460614152203&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/2tk5ianItRl9ibYmZwVq4fSlc6gonEZpJGibx3PNYHFs1LxQ06iagH3wUrLv8be66fPl5HcicQHeKNaYjhgR94YPUdA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;749&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;&lt;strong data-brushtype=&quot;text&quot;&gt;编程一生&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section data-brushtype=&quot;text&quot;&gt;&lt;p&gt;&lt;span&gt;因为公众号平台更改了推送规则，如果不想错过内容，记得读完点一下“在看”，加个“星标”，这样每次新文章推送才会第一时间出现在你的订阅列表里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;想知道自己错过了哪些更新，可参考我不定期更新的《&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&amp;amp;mid=2247487380&amp;amp;idx=2&amp;amp;sn=4e71d679e2c22f9c5af4ea3abc667b76&amp;amp;chksm=fafde53acd8a6c2c9d2fb5eb83de5e5a2e3f244a57fa275394d9d61a0cdfa154290fe7a21fe8&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;系列文章分类汇总&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;&lt;em&gt;&lt;strong&gt;系列文章分类汇总&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;》。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>cbb3bac7ff9c021a565f96aa0111274a</guid>
<title>站点可靠性工程之旅</title>
<link>https://toutiao.io/k/bwetmpf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content                                                                     &quot; id=&quot;js_content&quot;&gt;
            &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;SRE经过谷歌的实践和推广，已经被很多互联网公司所采用。如果想要实践SRE，成为SRE工程师，需要做好哪些方面的知识储备？本文介绍了SRE相关的技术，提供了大量有益的资源，有志于这一方向的同学可以以此作为技术发展路线图。原文：A Journey To The Site Reliability Engineering&lt;span&gt;[1]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6662857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WrVqfT3aWFNBjy45NCuXyQXPQt3NL2jYasTInWd9vSxgRnhwV235FaEPvLatGQN166yic4ytVaroA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;875&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Mukuko Studio @ Unsplash&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;很多组织都已经开始采用站点可靠性工程（SRE，Site Reliability Engineering）实践来代替传统的运维。LinkedIn上最新的工作搜索显示，全球范围内有超过19万个SRE工程师职位空缺。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.3382857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WrVqfT3aWFNBjy45NCuXyQFxLesCJ9gMVibM7lpfUkHo5x6Ho361niaTTLfghntr0yOBzXZWgkYjYw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;875&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;LinkedIn职位搜索&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果你还不熟悉SRE，那么可以看看谷歌是如何描述的~&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;SRE是当你要求软件工程师设计一个运营团队时所发生的事情。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;SRE由7个重要原则定义 --&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;运维是一个软件问题（Operations is a software problem）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;按服务水平目标管理（Managed by Service Level Objectives）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;尽量减少工作量（Work to minimize the toil）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;把今年的工作自动化（Automate this year’s job away）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;通过减少失败的代价来快速行动（Move fast by reducing the cost of failure）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;与开发者分享所有权（Share ownership with the developers）&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;无论是什么职能或职位，都使用相同的工具（Use the same tooling, regardless of function or job title）&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;对于拥有运维支持、系统管理、基础架构、DevOps工程师等背景的人来说，SRE工程是一个很好的职业发展方向。&lt;/p&gt;&lt;p&gt;在本文中，我将提供各种资源，帮助你开始SRE工程师之旅。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;掌握SLO的艺术（Mastering the Art of Service Level Objectives(SLOs)）&lt;/h3&gt;&lt;p&gt;为了旅程顺利，我们有必要从理解&lt;span&gt;服务水平指标(SLIs, Service Level Indicators)&lt;/span&gt;和&lt;span&gt;服务水平目标(SLOs, Service Level Objectives)&lt;/span&gt;的概念开始。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;SLI: 服务&lt;span&gt;可靠性&lt;/span&gt;的&lt;span&gt;可量化&lt;/span&gt;度量&lt;br/&gt;&lt;/em&gt;&lt;em&gt;SLO: 为SLI设置&lt;span&gt;可靠性目标&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;有很多关于SLI和SLO的资源，但我建议通过SLO艺术工作坊&lt;span&gt;[2]&lt;/span&gt;来深入理解这一概念。&lt;/p&gt;&lt;p&gt;如果你是某个尝试采用SRE实践的组织的一员，那么我建议在组织内为有抱负的SRE开展这个工作坊。&lt;/p&gt;&lt;p&gt;工作坊旨在向你介绍如何以&lt;span&gt;数据驱动&lt;/span&gt;、客观和以用户为中心的方式通过&lt;span&gt;SLO和错误预算（Error Budgets）&lt;/span&gt;来度量和管理服务的可靠性。&lt;/p&gt;&lt;p&gt;工作坊可以指导我们选择正确的SLI，并通过案例帮助我们获得定义SLI/SLO的实践经验。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;在学习的过程中，请保持开放的思维和新鲜的视角，因为我看到很多人认为SLI/SLO类似于他们使用的APM工具所做的基础设施监控，但事实并非如此！&lt;/p&gt;&lt;/blockquote&gt;&lt;hr/&gt;&lt;h3&gt;云技术（Cloud Expertise）&lt;/h3&gt;&lt;p&gt;根据Gartner的报告&lt;span&gt;[3]&lt;/span&gt;，超过75%的企业都有云优先战略。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.8137254901960784&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WrVqfT3aWFNBjy45NCuXyQeOZu0K5DByzJzFrRaYc2w0ic5MNGsevW3JPWIRwib9E9afYPFMvHAPpQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;510&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源-https://www.gartner.com/en/information-technology/insights/cloud-strategy&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因此，熟悉AWS、GCP和Azure等云服务是非常必要的。&lt;/p&gt;&lt;p&gt;许多组织都在积极使用云技术进行应用程序现代化转型之旅，SRE被要求在这一转变过程中发挥重要作用。&lt;/p&gt;&lt;p&gt;在互联网上有很多像Udemy, PluralSight, Coursera, CloudGuru等网站来提升我们的知识储备。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;基础设施即代码（Infrastructure as Code(IaC)）&lt;/h3&gt;&lt;p&gt;随着组织在云中迁移工作负载，高效、动态的管理基础设施的需求就更加突出了。因此，SRE应该拥有下面这样的IaC工具：&lt;/p&gt;&lt;p&gt;即使所有云服务提供商都有自己的SDK/Shell来管理服务，使用IaC工具仍然有很多好处。&lt;/p&gt;&lt;p&gt;下面的内容引用自《Quickly Deploy Applications Using Terraform With Kubernetes on GCP&lt;span&gt;[4]&lt;/span&gt;》：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Terraform能够显示当前状态和期望状态之间的差异，这意味着一旦我们编辑了Terraform配置文件，就能看到将要做的改变。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Terraform不仅负责初始部署，还负责维护。我们可以使用命令轻松的创建、更新和删除跟踪的资源。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;清理Terraform构建的所有东西非常容易。如果使用脚本，我们还必须编写一个清理脚本。但对于Terraform，可以简单的通过“terraform destry”命令来实现。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Terraform能够检查配置文件中声明的动作的顺序。这意味着，如果我们想运行基于Kubernetes的服务或部署，即使我们错误的声明了操作的顺序，Terraform仍然将首先创建集群。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;你可以查看以下链接来了解关于这个主题的更多信息。&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;https://learn.hashicorp.com/terraform&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://www.ansible.com/resources/get-started&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;h3&gt;容器及容器编排平台（Containers &amp;amp; Container Orchraction Platforms）&lt;/h3&gt;&lt;p&gt;由于SRE在应用程序部署中扮演着关键角色，所以了解容器和容器编排平台非常重要。&lt;/p&gt;&lt;p&gt;许多组织使用Docker和Kubernetes平台进行服务部署，可以在网上找到大量关于这个话题的资源。&lt;/p&gt;&lt;p&gt;这里有一些可以作为开始的链接：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;https://www.docker.com/101-tutorial&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://kubernetes.io/training/&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;h3&gt;持续集成及持续部署（Continuous Integration &amp;amp; Continous Deployment(CI/CD)）&lt;/h3&gt;&lt;p&gt;SRE需要将尽可能多的工作自动化，为应用程序提供适当的CI/CD流水线是快速交付的重要部分。许多组织使用下面这样的平台：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;GitLab&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;GitHub&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Azure DevOps&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Jenkins&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;等等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此，拥有建立CI/CD流水线的专业知识是一项基本技能。这些平台中有很多都支持免费服务，可以不用花一分钱就能自学。&lt;/p&gt;&lt;p&gt;这里有一些学习资源：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;https://about.gitlab.com/learn/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://lab.github.com/&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;https://azure.microsoft.com/en-us/overview/devops-tutorial/&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;h3&gt;发布策略（Release Strategies）&lt;/h3&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.32685714285714285&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WrVqfT3aWFNBjy45NCuXyQviaa1Zj2HNhWpBtXlicPyFowm7ibyMLNsFuKgz6ziaib4BLLqkA27IgIgEQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;875&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;来源-https://sre.google/workbook/canarying-releases/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;作为SRE角色的一部分，我们需要不断为用户部署新特性。这么做的同时，还需要确保在部署新特性时没有消耗错误预算（Error Budget），因此需要熟悉如下发布策略：&lt;/p&gt;&lt;p&gt;熟悉特性标记(feature-flag)&lt;span&gt;[7]&lt;/span&gt;的开发策略将增加优势。如果使用像Kubernetes这样的容器编排平台，可以使用Kubernetes的定义文件描述这些策略&lt;span&gt;[8]&lt;/span&gt;。&lt;/p&gt;&lt;p&gt;在谷歌的SRE工作手册中深入介绍了金丝雀发布的过程&lt;span&gt;[9]&lt;/span&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;事故响应和非指责的事后剖析（Incident Response &amp;amp; Blameless Postmortems）&lt;/h3&gt;&lt;p&gt;随叫随到是SRE的另一个重要职责。因此，SRE需要对事故响应流程有非常好的理解。&lt;/p&gt;&lt;p&gt;PagerDuty事故响应课程&lt;span&gt;[10]&lt;/span&gt;涵盖了如下话题：&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;什么是事故？&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事故级别&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事故管理的各种角色&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;事故电话礼仪&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;等等&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;将事故响应过程记录下来是很重要的，因为如果人们知道事故发生时如何应对，就能更好的管理突发事故。&lt;/p&gt;&lt;p&gt;PagerDuty还有另一个关于如何在SRE团队中培养非指责文化的课程&lt;span&gt;[11]&lt;/span&gt;，其中提供了一些非常详细的模板，可以用来执行无指责的事后分析。&lt;/p&gt;&lt;p&gt;强烈推荐这两门课程。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;安全（Security）&lt;/h3&gt;&lt;p&gt;因为SRE负责整个应用，对应用安全性有基本的了解总是好的。&lt;/p&gt;&lt;p&gt;强烈建议你熟悉下面提到的概念：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;OWASP Top 10&lt;span&gt;[12]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Application Threat Modelling&lt;span&gt;[13]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对于自动化部署，SRE需要管理各种服务凭证，因此应该熟悉凭证管理工具，如HashiCorp Vault&lt;span&gt;[14]&lt;/span&gt;或云原生加密管理解决方案，如Azure密钥库、谷歌加密管理器等。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;文档（Documentation）&lt;/h3&gt;&lt;p&gt;SREs需要确保所有重要的文件都定期更新，易于遵循，因此应该专注于制作高质量的文档，比如：&lt;/p&gt;&lt;p&gt;谷歌提供免费的技术写作课程&lt;span&gt;[15]&lt;/span&gt;，建议大家在日常生活中学习并运用其中的原则，当然如果你有时间的话也可以报名参加有导师指导的培训课程。&lt;/p&gt;&lt;p&gt;另外，我也写过一篇关于工程师技术写作最佳实践的文章&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTgxODgwNA==&amp;amp;mid=2247484894&amp;amp;idx=1&amp;amp;sn=7b8924d85b22769788b8f48e7b986c35&amp;amp;chksm=fc73b805cb043113a75afb32b7c33585f404c21547debf3beff5833ca0cf95e1b3e9270e721e&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;《软件工程师文档写作最佳实践》&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;《软件工程师文档写作最佳实践》&lt;/a&gt;&lt;span&gt;[16]&lt;/span&gt;。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;灾难恢复测试/混沌工程（Disaster Recovery Testing / Chaos Engineering）&lt;/h3&gt;&lt;p&gt;为了测试平台的健壮性，SRE还负责执行灾难恢复测试。谷歌将灾难恢复测试作为其健壮服务的一部分，《Weathering the Unexpected》&lt;span&gt;[17]&lt;/span&gt;是一篇关于谷歌DiRT项目的详细文章。&lt;/p&gt;&lt;p&gt;最近Netflix的混沌工程理念变得非常流行，我在《Why Every Software Developer Needs to Learn Chaos Engineering》&lt;span&gt;[18]&lt;/span&gt;里也写过关于混沌工程的内容。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;非抽象大规模设计（Non-Abstract Large Scale Designs(NALSD)）&lt;/h3&gt;&lt;p&gt;当我们开始讨论大型、复杂、分布式系统时，谷歌已经设计了一个流程&lt;span&gt;[19]&lt;/span&gt;，可以帮助SRE发展评估、设计和衡量大型系统的能力。&lt;/p&gt;&lt;p&gt;NALSD过程包含了问题陈述、需求收集，以及帮助评估大规模系统对不同故障模式的容忍度的迭代系统设计。&lt;/p&gt;&lt;p&gt;谷歌还提供了一个工作坊，带领我们了解分布式消息队列(如pub/sub)的系统设计，并解释如何对其实现NALSD原则。&lt;/p&gt;&lt;p&gt;我个人从中学到了很多。&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;社区&lt;/h3&gt;&lt;p&gt;为了更多的向他人学习，并了解行业最新动态，建议加入以下在线社区：&lt;/p&gt;&lt;hr/&gt;&lt;h3&gt;结论&lt;/h3&gt;&lt;p&gt;总的来说，SRE工程流程非常有趣，并且正在被许多组织所采用。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;References:&lt;/span&gt;&lt;br/&gt;[1] A Journey To The Site Reliability Engineering: https://deshpandetanmay.medium.com/a-journey-towards-site-reliability-engineering-7c893dae23ab&lt;br/&gt;[2] The Art of SLOs: https://sre.google/resources/practices-and-processes/art-of-slos/&lt;br/&gt;[3] The Latest Cloud Computing Technology and Security: https://www.gartner.com/en/information-technology/insights/cloud-strategy&lt;br/&gt;[4] Quickly Deploy Applications Using Terraform With Kubernetes on GCP: https://medium.com/google-cloud/quickly-deploy-applications-using-terraform-with-kubernetes-on-gcp-6a4d7d142839&lt;br/&gt;[5] Canary Release: https://martinfowler.com/bliki/CanaryRelease.html&lt;br/&gt;[6] Blue Green Deployment: https://martinfowler.com/bliki/BlueGreenDeployment.html&lt;br/&gt;[7] Feature Toggles: https://martinfowler.com/articles/feature-toggles.html&lt;br/&gt;[8] Kubernetes Deployment: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&lt;br/&gt;[9] Canarying Releases: https://sre.google/workbook/canarying-releases/&lt;br/&gt;[10] PagerDuty Incident Response: https://response.pagerduty.com/&lt;br/&gt;[11] PagerDuty Postmortems: https://postmortems.pagerduty.com/culture/blameless/&lt;br/&gt;[12] OWASP Top 10: https://owasp.org/www-project-top-ten/&lt;br/&gt;[13] Application Threat Modelling: https://deshpandetanmay.medium.com/threat-model-what-is-that-b45eac2c4104&lt;br/&gt;[14] Vault: https://www.vaultproject.io/&lt;br/&gt;[15] Technical Writing Courses for Engineers: https://developers.google.com/tech-writing/&lt;br/&gt;[16] Best Practices When Documenting Your Code for Software Engineers: https://betterprogramming.pub/best-practices-when-documenting-your-code-for-software-engineers-941f0897aa0&lt;br/&gt;[17] Weathering the Unexpected: https://queue.acm.org/detail.cfm?id=2371516&lt;br/&gt;[18] Why Every Software Developer Needs to Learn Chaos Engineering: https://betterprogramming.pub/why-every-software-developer-needs-to-learn-chaos-engineering-ef08992f4354&lt;br/&gt;[19] Introducing Non-Abstract Large System Design: https://sre.google/workbook/non-abstract-design/&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;你好，我是俞凡，在Motorola做过研发，现在在Mavenir做技术工作，对通信、网络、后端架构、云原生、DevOps、CICD、区块链、AI等技术始终保持着浓厚的兴趣，平时喜欢阅读、思考，相信持续学习、终身成长，欢迎一起交流学习。&lt;br/&gt;微信公众号：DeepNoMind&lt;/p&gt;&lt;/blockquote&gt;
          &lt;/div&gt;

          

          



           
                                
                    
        &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>afd95957d2416c9b3af84aefe35ca446</guid>
<title>干掉 BeanUtils！这款 Bean 自动映射神器出 Spring 插件了！</title>
<link>https://toutiao.io/k/zrz0j1r</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;之前安利过&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1Nzg4NjgyMw==&amp;amp;mid=2247494988&amp;amp;idx=1&amp;amp;sn=d5c1f888ce670ff5197c6a00cd63f966&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;Mapstruct&lt;/a&gt; 这个神器，它可以代替&lt;code&gt;BeanUtil&lt;/code&gt;来进行&lt;strong&gt;DTO&lt;/strong&gt;、&lt;strong&gt;VO&lt;/strong&gt;、&lt;strong&gt;PO&lt;/strong&gt;之间的转换。它使用的是Java编译期的  annotation processor 机制，说白了它就是一个代码生成器，代替你手工进行类型转换期间的取值赋值操作。&lt;/p&gt;&lt;/blockquote&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前很多项目都使用了它，代码清爽得很，增加了大量摸鱼时间，用过的都说好。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Mapper&lt;/span&gt;(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;AreaMapping&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;List&amp;lt;AreaInfoListVO&amp;gt; &lt;span&gt;toVos&lt;/span&gt;&lt;span&gt;(List&amp;lt;Area&amp;gt; areas)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;就这么几行就把一个&lt;strong&gt;PO&lt;/strong&gt;的集合转换成了对应&lt;strong&gt;VO&lt;/strong&gt;的集合。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;// spring bean &lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;AreaMapping areaMapping&lt;br/&gt;    &lt;br/&gt;&lt;span&gt;// 转换源 areas    &lt;/span&gt;&lt;br/&gt;List&amp;lt;Area&amp;gt; areas = ……;&lt;br/&gt;&lt;span&gt;// 转换目标 vos &lt;/span&gt;&lt;br/&gt;List&amp;lt;AreaInfoListVO&amp;gt; vos = areaMapping.toVos(areas)&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;换成你手写试试，起码得五分之一炷香的功夫。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但是这样写还是不太爽，每次都要挂对应的Mapper类。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Converter&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Spring framework&lt;/strong&gt;提供了一个&lt;code&gt;Converter&amp;lt;S,T&amp;gt;&lt;/code&gt;接口：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@FunctionalInterface&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Converter&lt;/span&gt;&amp;lt;&lt;span&gt;S&lt;/span&gt;, &lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;@Nullable&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;T &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(S source)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;default&lt;/span&gt; &amp;lt;U&amp;gt; &lt;span&gt;Converter&amp;lt;S, U&amp;gt; &lt;span&gt;andThen&lt;/span&gt;&lt;span&gt;(Converter&amp;lt;? &lt;span&gt;super&lt;/span&gt; T, ? extends U&amp;gt; after)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        Assert.notNull(after, &lt;span&gt;&quot;After Converter must not be null&quot;&lt;/span&gt;);&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (s) -&amp;gt; {&lt;br/&gt;            T initialResult = &lt;span&gt;this&lt;/span&gt;.convert(s);&lt;br/&gt;            &lt;span&gt;return&lt;/span&gt; initialResult != &lt;span&gt;null&lt;/span&gt; ? after.convert(initialResult) : &lt;span&gt;null&lt;/span&gt;;&lt;br/&gt;        };&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;它的作用是将&lt;code&gt;S&lt;/code&gt;转换为&lt;code&gt;T&lt;/code&gt;，这和&lt;strong&gt;Mapstruct&lt;/strong&gt;的作用不谋而合。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;Converter&lt;/code&gt;会通过&lt;code&gt;ConverterRegistry&lt;/code&gt;这个注册接口注册到&lt;code&gt;ConversionService&lt;/code&gt;，然后你就可以通过&lt;code&gt;ConversionService&lt;/code&gt;的&lt;code&gt;convert&lt;/code&gt;方法来进行转换：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&amp;lt;T&amp;gt; &lt;span&gt;T &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(@Nullable Object source, Class&amp;lt;T&amp;gt; targetType)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;MapStruct Spring Extensions&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;根据上面的机制官方推出了&lt;strong&gt;MapStruct Spring Extensions&lt;/strong&gt;插件， 它实现了一种机制，所有的&lt;strong&gt;Mapstruct&lt;/strong&gt;映射接口(&lt;strong&gt;Mapper&lt;/strong&gt;)只要实现了&lt;code&gt;Converter&lt;/code&gt;，都会自动注册到&lt;code&gt;ConversionService&lt;/code&gt;，我们只需要通过&lt;code&gt;ConversionService&lt;/code&gt;就能完成任何转换操作。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; felord.cn&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 1.0.0&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Mapper&lt;/span&gt;(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;CarMapper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Converter&lt;/span&gt;&amp;lt;&lt;span&gt;Car&lt;/span&gt;, &lt;span&gt;CarDto&lt;/span&gt;&amp;gt; &lt;/span&gt;{&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;@Mapping&lt;/span&gt;(target = &lt;span&gt;&quot;seats&quot;&lt;/span&gt;, source = &lt;span&gt;&quot;seatConfiguration&quot;&lt;/span&gt;)&lt;br/&gt;    &lt;span&gt;CarDto &lt;span&gt;convert&lt;/span&gt;&lt;span&gt;(Car car)&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;调用时：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span&gt;private&lt;/span&gt; ConversionService conversionService;&lt;br/&gt;&lt;br/&gt;Car car = ……;&lt;br/&gt;CarDto carDto = conversionService.convert(car,CarDto&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;MapStruct Spring Extensions&lt;/strong&gt; 会自动生成一个适配类处理&lt;strong&gt;Mapper&lt;/strong&gt;注册：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; org.mapstruct.extensions.spring.converter;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; cn.felord.mapstruct.entity.Car;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; cn.felord.mapstruct.entity.CarDto;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.context.annotation.Lazy;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.core.convert.ConversionService;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; felord.cn&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 1.0.0&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConversionServiceAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ConversionService conversionService;&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ConversionServiceAdapter&lt;/span&gt;&lt;span&gt;(@Lazy &lt;span&gt;final&lt;/span&gt; ConversionService conversionService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;this&lt;/span&gt;.conversionService = conversionService;&lt;br/&gt;    }&lt;br/&gt;&lt;br/&gt;    &lt;span&gt;&lt;span&gt;public&lt;/span&gt; CarDto &lt;span&gt;mapCarToCarDto&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; Car source)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;        &lt;span&gt;return&lt;/span&gt; (CarDto)&lt;span&gt;this&lt;/span&gt;.conversionService.convert(source, CarDto&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;自定义&lt;/span&gt;&lt;/h2&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;自定义适配类的包路径和名称&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;默认情况下，生成的适配类将位于包&lt;code&gt;org.mapstruct.extensions.spring.converter&lt;/code&gt;中，名称固定为&lt;code&gt;ConversionServiceAdapter&lt;/code&gt;。如果你希望修改包路径或者名称，你可以这样：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; cn.felord.mapstruct.config;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.mapstruct.MapperConfig;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.mapstruct.extensions.spring.SpringMapperConfig;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; felord.cn&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 1.0.0&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@MapperConfig&lt;/span&gt;(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@SpringMapperConfig&lt;/span&gt;(conversionServiceAdapterPackage = &lt;span&gt;&quot;cn.felord.mapstruct.config&quot;&lt;/span&gt;,&lt;br/&gt;        conversionServiceAdapterClassName = &lt;span&gt;&quot;MapStructConversionServiceAdapter&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MapperSpringConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;不指定&lt;code&gt;conversionServiceAdapterPackage&lt;/code&gt;元素，生成的 Adapter 类将与注解的 Config 驻留在同一个包中，所以上面的路径是可以省略的。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;指定ConversionService&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果你的&lt;strong&gt;Spring IoC&lt;/strong&gt;容器中有多个&lt;code&gt;ConversionService&lt;/code&gt;，你可以通过&lt;code&gt;@SpringMapperConfig&lt;/code&gt;注解的&lt;code&gt;conversionServiceBeanName&lt;/code&gt;参数指定。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;package&lt;/span&gt; cn.felord.mapstruct.config;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.mapstruct.MapperConfig;&lt;br/&gt;&lt;span&gt;import&lt;/span&gt; org.mapstruct.extensions.spring.SpringMapperConfig;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;/**&lt;br/&gt; * &lt;span&gt;@author&lt;/span&gt; felord.cn&lt;br/&gt; * &lt;span&gt;@since&lt;/span&gt; 1.0.0&lt;br/&gt; */&lt;/span&gt;&lt;br/&gt;&lt;span&gt;@MapperConfig&lt;/span&gt;(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@SpringMapperConfig&lt;/span&gt;(conversionServiceAdapterPackage = &lt;span&gt;&quot;cn.felord.mapstruct.config&quot;&lt;/span&gt;,&lt;br/&gt;        conversionServiceAdapterClassName = &lt;span&gt;&quot;MapStructConversionServiceAdapter&quot;&lt;/span&gt;,&lt;br/&gt;                   conversionServiceBeanName = &lt;span&gt;&quot;myConversionService&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;MapperSpringConfig&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span/&gt;&lt;span&gt;集成Spring的内置转换&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;Spring&lt;/strong&gt;内部提供了很多好用的&lt;code&gt;Converter&amp;lt;S,T&amp;gt;&lt;/code&gt;实现，有的并不直接开放，如果你想用&lt;strong&gt;Mapstruct&lt;/strong&gt;的机制使用它们，可以通过&lt;code&gt;@SpringMapperConfig&lt;/code&gt;注解的 &lt;code&gt;externalConversions&lt;/code&gt;注册它们。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@MapperConfig&lt;/span&gt;(componentModel = &lt;span&gt;&quot;spring&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span&gt;@SpringMapperConfig&lt;/span&gt;(&lt;br/&gt;   externalConversions = &lt;span&gt;@ExternalConversion&lt;/span&gt;(sourceType = String&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;targetType&lt;/span&gt; &lt;/span&gt;= Locale&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;))&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;MapstructConfig&lt;/span&gt; &lt;/span&gt;{}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;会在适配器中自动生成相应的转换：&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;&lt;span&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ConversionServiceAdapter&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;  &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ConversionService conversionService;&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;ConversionServiceAdapter&lt;/span&gt;&lt;span&gt;(@Lazy &lt;span&gt;final&lt;/span&gt; ConversionService conversionService)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;this&lt;/span&gt;.conversionService = conversionService;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;public&lt;/span&gt; Locale &lt;span&gt;mapStringToLocale&lt;/span&gt;&lt;span&gt;(&lt;span&gt;final&lt;/span&gt; String source)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; conversionService.convert(source, Locale&lt;span&gt;.&lt;span&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;mapstruct-spring-annotations&lt;/strong&gt; 使开发人员能够通过&lt;code&gt;ConversionService&lt;/code&gt;使用定义的 &lt;strong&gt;Mapstruct&lt;/strong&gt; 映射器，而不必单独导入每个 &lt;strong&gt;Mapper&lt;/strong&gt;，从而允许 &lt;strong&gt;Mapper&lt;/strong&gt; 之间的松散耦合。它本身不会影响&lt;strong&gt;Mapstruct&lt;/strong&gt;的机制。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;项目源码地址&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://gitee.com/felord/mapstruct-spring-extensions&lt;/p&gt;&lt;hr data-tool=&quot;mdnice编辑器&quot;/&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;微信8.0将好友放开到了一万，小伙伴可以加我大号了，先到先得，再满就真没了&lt;/strong&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;strong&gt;扫描下方二维码即可加我微信啦，&lt;code&gt;2022，抱团取暖，一起牛逼。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/CKvMdchsUwm2Jjda5jicZYCPAmEWkzptcDX9KPUUXMyp6bK6lXicoojwQEheDgzHJqJoexw75iaoMJ5JpFuHyaksA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;512&quot;/&gt;&lt;/figure&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;推荐阅读&lt;/span&gt;&lt;/h2&gt;&lt;section&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1Nzg4NjgyMw==&amp;amp;mid=2247486362&amp;amp;idx=1&amp;amp;sn=fb6d71d328e8eee34976a86135dc6a7d&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;/&gt;&lt;/section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzU1Nzg4NjgyMw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/CKvMdchsUwnfLzMS3eAE7gXUvx6GYmnzuANVe5zJIGp0C084ANIia7Xo1nSADddF3eiajuhKDf0EofjI4t7hdqyA/0?wx_fmt=png&quot; data-nickname=&quot;macrozheng&quot; data-alias=&quot;&quot; data-signature=&quot;专注Java技术分享，涵盖SpringBoot、SpringCloud、Docker、中间件等实用技术，作者Github开源项目mall（50K+Star）。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.2777777777777778&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/CKvMdchsUwlkU1ysoMgG69dVYbCQcI6Byneb8ibzZWPfUCr3T8CuBicCSGyFE6SpAtxpxtDCp6VlZ4F1hEL1BNyg/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>74eaf298c2108b79fb814095efd2013c</guid>
<title>挑战50岁编程语言霸主C：新语言Hare，“异端”中的保守派</title>
<link>https://toutiao.io/k/hchmwh6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section&gt;编译｜核子可乐、燕珊&lt;/section&gt;&lt;section&gt;
Hare 原意为野兔，它的开发者希望这种编程语言能够如野兔般拥有顽强的生命力。&lt;/section&gt;&lt;p&gt;本周，软件开发者 Drew DeVault 公布了一种名为 Hare 的全新系统编程语言，并用“简单、稳定和健壮”作为核心形容词。那它有什么特别的吗？这回可能还真有。&lt;/p&gt;&lt;p&gt;世界上先后涌现 300 多种编程语言，而 Hare 偏偏把矛头指向了最强大的那个——C 语言。没错，Hare 的目标就是取代过去 50 年来最重要的编程语言。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VNlBZ0dloscrkEQaV52LqGYxYXiagWYZV4j0ybZQk6KyTp4IfdVYnTzqwJsMo4BysutSW0LHiccdmibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;256&quot;/&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;Hare 的价值主张&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;DeVault 和大约 30 名项目贡献者已经在 Hare 身上投入了两年半时间。如今成果终于出炉，Hare 面向开发者正式开放。&lt;/p&gt;&lt;p&gt;DeVault 在一篇博文中介绍道，“Hare 跟 C 其实特别想像，几乎一切用 C 编写的程序都能用 Hare 写出来。但重要的是，Hare 比 C 更简单。&lt;/p&gt;&lt;p&gt;Hare 的设计原则是：&lt;/p&gt;&lt;ol class=&quot;list-paddingleft-1&quot;&gt;&lt;li&gt;&lt;p&gt;信任程序员。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;如果程序员不敢信任自己，则提供辅助工具。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;倾向认为显式行为比隐式行为好。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;认为好的程序必须既正确、又简单。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;DeVault 解释称，“Hare 使用静态类型系统、手动内存管理和最小运行时，所以特别适合编写操作系统、系统工具、编译器、网络软件以及其他低级高性能任务。”&lt;/p&gt;&lt;p&gt;在接受 The Register 的采访中，DeVault 也坦言 Hare 的很多设计灵感都源自 C 语言。&lt;/p&gt;&lt;p&gt;DeVault 强调，&lt;strong&gt;跟大部分其他语言设计者不同，他们对 C 其实非常认同。Hare 只是想对 C 中的基本设计理念做出一些保守的改进，也可以说是在经历了多年的实践应用后、重新探索 C 语言能不能做得更好。&lt;/strong&gt;&lt;/p&gt;&lt;section&gt;
&lt;span&gt;充足的“电池”储备&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;DeVault 还透露，Hare 的标准库还融合了谷歌 Go 语言的思想，特别是内置丰富多样的标准库——即各种“电池”（编程术语）——尽量避免再额外导入外部依赖项。&lt;/p&gt;&lt;p&gt;在他看来，“Hare 在设计上强调提供丰富的‘电池’以支持各类用例，帮助程序员摆脱复杂的外部依赖项，将开发项目保持在良好的可管理范围之内。我认为 Go 语言在这方面就做得很好；实际上，Hare 也有相当一部分模块（特别是加密模块）多少受到了 Go 语言的启发。”&lt;/p&gt;&lt;p&gt;Hare 的“电池”储备包括：&lt;/p&gt;&lt;p&gt;标准库是系统编程发展中的一个新起点，也标志着开发者正式摆脱了 POSIX 和 libc 的遗留问题。Hare 默认不接入 libc C 语言标准库，而是基于 qbe 编译器后端。因此，Hare 中的“Hello, world！”程序如下所示：&lt;/p&gt;&lt;section class=&quot;code-snippet__fix code-snippet__js&quot;&gt;&lt;pre class=&quot;code-snippet__js&quot; data-lang=&quot;cpp&quot;&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;use fmt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;export fn main() void = {&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;        fmt::println(&quot;Hello world!&quot;)!;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;span class=&quot;code-snippet_outer&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/section&gt;&lt;section&gt;
&lt;span&gt;Hare 其实相当保守？&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;据称 Hare 也可以说是 Zig 的精简版。Zig 是一种包含手动内存管理功能的低级系统语言，只是同样作为 C 语言的替代方案，Zig 在人气上远远不如另一位竞争对手 Rust。&lt;/p&gt;&lt;p&gt;再换个角度，DeVault 还想把 Hare 塑造成一种有效的“避坑版”C 语言。&lt;/p&gt;&lt;p&gt;“我觉得很多想跟 C 竞争的新语言都走错了方向。Hare 其实是一种相当保守的语言，核心思路就是把过去 30 年间 C 语言的编程经验提炼成一种小巧、简单而又强大的新语言，在后面的 30 年里继续服务好开发者。&lt;strong&gt;我不太关心什么大胆创新，只求对既有功能做出精心设计。&lt;/strong&gt;”&lt;/p&gt;&lt;p&gt;目前 Hare 语言仍在开发当中，现阶段目标就是打造出可以稳定执行、包含标准库增强功能（如 TLS 和原始 IP 套接字支持）的 1.0 版本。&lt;/p&gt;&lt;p&gt;DeVault 指出，“我觉得在项目早期，大部分工作主要集中在语言本身。但现在已经初见成果，命令行工具、cron 等守护程序和 init 系统管理进程等均已就绪。”&lt;/p&gt;&lt;p&gt;DeVault 还表示，他正在使用 Hare 编写密钥管理器（Himitsu）和一套内核（Helios）——这些都是 Hare 语言最擅长的应用方向。&lt;/p&gt;&lt;p&gt;Himitsu 能将密钥存储为键 / 值对，用户可以为各个键 / 值对添加附加信息，例如用户名、主机和协议等。Himitsu 还能兼容各种“代理”，例如存储 SSH 私钥并充当 SSH 代理。&lt;/p&gt;&lt;p&gt;Helios 是一款面向 x86_64 架构的微内核，如果一切顺利，它未来还将支持其他架构（团队已经完成了 RISC-V 版本的开发）。目前它的功能还比较基础，比如启动为 Long Mode 模式、提供几个串行驱动程序、设置分页等。“虽然还有很多工作要做，但这确实是个不错的项目，能够展示出 Hare 在低级任务中的强大能力。”&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5625&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YriaiaJPb26VNlBZ0dloscrkEQaV52LqGYy8W6OIYJ3c6e7vRNUVoNu1aRB0kcLRgv0hdR3LaMwZ4nV5qCTWToCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;768&quot;/&gt;&lt;/p&gt;&lt;p&gt;“我认为在获得 TLS 的支持之后，还会有更广泛的用例可供大家探索。”DeVault 说道。&lt;/p&gt;&lt;p&gt;Hare 目前仍然依赖 BDFL（Benevolent Dictator For Life，终身仁慈独裁者）开源治理模式。DeVault 指出，“Hare 语言高度强调稳定与不变特性，所以需要的治理资源应该不会太多”，目前的项目筹款主要用于支付密码系统实现所需的第三方审计费用。&lt;/p&gt;&lt;section&gt;
&lt;span&gt;Hare 的未来计划&lt;/span&gt;
&lt;/section&gt;&lt;p&gt;对于 Hare 的开发思路，DeVault 提到，“我们一直是比较保守的。我们希望 Hare 能在开发者的项目中稳定起效，又不会占用太多的语言学习时间。在即将推出的 1.0 版本中，我们将完成规范、确定语言设计，而且只对标准库做出向下兼容方面的变更。”&lt;/p&gt;&lt;p&gt;此外，DeVault 还有其他计划。目前，Hare 只支持三种指令集架构：x86_64、aarch64 以及 risc-v64。“我们希望能进一步扩展，增加 32 位平台和更多其他架构。目前能够支持的操作系统也只有 Linux 和 FreeBSD，后续会推进更多移植。暂时没有登陆非自由系统平台的计划，但考虑到 Hare 本身属于标准化语言，所以也可以在必要时通过第三方实现或者 fork 开发出 Windows 或 MacOS 版本。”&lt;/p&gt;&lt;p&gt;在标准库方面，DeVault 等人目前最主要的任务就是完成加密实现，目标是支持 TLS 1.2 和 1.3。&lt;/p&gt;&lt;p&gt;“我们为此付出了很多，为它的顺利诞生而骄傲，也希望能有更多朋友使用它、喜爱它。”DeVault 总结道。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;感兴趣的读者可以在下方链接了解 Hare：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装流程：&lt;/span&gt;&lt;span&gt;https://harelang.org/installation/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用教程：&lt;/span&gt;&lt;span&gt;https://harelang.org/tutorials/introduction/&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://www.theregister.com/2022/04/26/hare_c_software/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;https://harelang.org/blog/2022-04-25-announcing-hare/&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;span&gt;今日好文推荐&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651114154&amp;amp;idx=1&amp;amp;sn=24e76a56a5b901225b3e5d99aa9f77ff&amp;amp;chksm=bdb932f98acebbef31d323602af224c41e7e6ffe2880d9ef1253af66a2b4ab7893a03c1bee2d&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;上云一年烧掉超过100万美元，我们的钱都去哪儿了？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;上云一年烧掉超过100万美元，我们的钱都去哪儿了？&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651113867&amp;amp;idx=1&amp;amp;sn=1b8eeef2de12d0132f9f3b10d72cfaf1&amp;amp;chksm=bdb931d88aceb8ce65ab59c9737d46b9a3a1eadb386afb3670ecdaf0e9a933dabd950fdd5bf3&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;保卫腾讯云，专访云鼎实验室董志强（Killer）团队 | 卓越技术团队访谈录&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;保卫腾讯云，专访云鼎实验室董志强（Killer）团队 | 卓越技术团队访谈录&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651113854&amp;amp;idx=1&amp;amp;sn=c88c385b3ae3faa515b7fe47d1883bb2&amp;amp;chksm=bdb9312d8aceb83b5837fa3ac9cc854e41109549a16bb4f62cf505902c25411ebd324d1f6f63&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;GitHub热榜项目“程序员延寿指南”一周获上万Star；快手前副总裁巨额受贿案宣判；小红书辟谣大裁员：正常人员汰换 | Q资讯&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;GitHub热榜项目“程序员延寿指南”一周获上万Star；快手前副总裁巨额受贿案宣判；小红书辟谣大裁员：正常人员汰换 | Q资讯&lt;/a&gt;&lt;/p&gt;&lt;section&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651113603&amp;amp;idx=1&amp;amp;sn=60035ad667425424046fd9478d2757a5&amp;amp;chksm=bdb930d08aceb9c6052469a6624fe0759c3caf5a280b2eab5669fbe75007265ba761f954c3b0&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;五年官司终败诉，万亿爬虫大军蠢蠢欲动&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot; wah-hotarea=&quot;click&quot; hasload=&quot;1&quot;&gt;五年官司终败诉，万亿爬虫大军蠢蠢欲动&lt;/a&gt;&lt;/section&gt;&lt;hr/&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>