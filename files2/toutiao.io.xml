<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>b58684f6c46a304fd9d9d04dd9c53294</guid>
<title>我去，还有这种网站！！</title>
<link>https://toutiao.io/k/3cdqz3w</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;weui-dialog&quot;&gt;
      &lt;p class=&quot;weui-dialog__hd&quot;&gt;&lt;strong class=&quot;weui-dialog__title&quot;&gt;&quot;Top Stories&quot; is disabled&lt;/strong&gt;&lt;/p&gt;
      &lt;p class=&quot;weui-dialog__bd&quot;&gt;
        Enable &quot;Top Stories&quot; in &quot;Settings&quot; &amp;gt; &quot;General&quot; &amp;gt; &quot;Manage Discover&quot;      &lt;/p&gt;
      
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>c2ad1f035b1b145855ca3ff0732a9e47</guid>
<title>golang切片的一些自问自答</title>
<link>https://toutiao.io/k/7w6z7ad</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;br/&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ffGGK0y3bBLj5sMauxUlyQqsUj9yFdqGHEF0PAsHtmJdlRz9egIltvkNo67p04breK29gibNymMRI1vLvzjyTYw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.5472222222222223&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;image-20211229094736903&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你好，我是轩脉刃。这篇是关于go切片的一些问题和回答。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;go的切片基本上是代码中使用最多的一种数据结构了，使用这种数据结构有哪些要注意的点，这个是非常必要了解的东西。基本上，以前写的一篇博客 https://www.cnblogs.com/yjf512/p/9531282.html  就说的很清楚了。这里再深挖一些。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题：go的切片数据结构是什么样子的？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;切片是有可能在编译器就被内联的，而如果在编译器没有被内联，进入运行期，就是直接使用SliceHeader数据结构。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;&lt;span&gt;type&lt;/span&gt; SliceHeader struct {&lt;br/&gt; Data uintptr&lt;br/&gt; Len  int&lt;br/&gt; Cap  int&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这三个字段分别表示指针，长度，容量。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题：为什么在初始化slice的时候尽量补全cap&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当我们要创建一个slice结构，并且往slice中append元素的时候，我们可能有两种写法来初始化这个slice。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法1:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt; arr := []int{}&lt;br/&gt; arr = append(arr, 1,2,3,4, 5)&lt;br/&gt; fmt.Println(arr)&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法2:&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;package main&lt;br/&gt;&lt;br/&gt;import &lt;span&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;func &lt;span&gt;&lt;span&gt;main&lt;/span&gt;&lt;/span&gt;() {&lt;br/&gt;   arr := make([]int, 0, 5)&lt;br/&gt;   arr = append(arr, 1,2,3,4, 5)&lt;br/&gt;   fmt.Println(arr)&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法2相较于方法1，就只有一个区别：在初始化[]int slice的时候在make中设置了cap的长度，就是slice的大小。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这两种方法对应的功能和输出结果是没有任何差别的，但是实际运行的时候，方法2会比少运行了一个growslice的命令。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个我们可以通过打印汇编码进行查看：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法1：&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ffGGK0y3bBLj5sMauxUlyQqsUj9yFdqG1kZOFzxNWTwJicUicbs1gsXwyic7CK6rjPHZH6FL32Tib90nOZfOibF0k7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8802177858439202&quot; data-w=&quot;551&quot;/&gt;&lt;figcaption&gt;image-20211219173237557&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;方法2:&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ffGGK0y3bBLj5sMauxUlyQqsUj9yFdqGeC31Ulnibo1Hd0x22xlWUR7QAZbHBXWLV5OVZDolAGCoBiaVicaQzT9Ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.8797814207650273&quot; data-w=&quot;549&quot;/&gt;&lt;figcaption&gt;image-20211219174112164&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们看到方法1中使用了growsslice方法，而方法2中是没有调用这个方法的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个growslice的作用就是扩充slice的容量大小。就好比是原先我们没有定制容量，系统给了我们一个能装两个鞋子的盒子，但是当我们装到第三个鞋子的时候，这个盒子就不够了，我们就要换一个盒子，而换这个盒子，我们势必还需要将原先的盒子里面的鞋子也拿出来放到新的盒子里面。所以这个growsslice的操作是一个比较复杂的操作，它的表现和复杂度会高于最基本的初始化make方法。对追求性能的程序来说，应该能避免尽量避免。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;具体对growsslice函数具体实现同学有兴趣的可以参考源码src的 runtime/slice.go 。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当然，我们并不是每次都能在slice初始化的时候就能准确预估到最终的使用容量的。所以这里使用了一个“尽量”。明白是否设置slice容量的区别，我们在能预估容量的时候，请尽量使用方法2那种预估容量后的slice初始化方式。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题：如果不设置cap，make slice的时候，创建的cap为多大？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;如果不设置cap，不管是使用make，还是直接使用[]slice 进行初始化，编译器都会计算初始化所需的空间，使用最小化的cap进行初始化。&lt;/p&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt;a := make([]int, 0)  // &lt;span&gt;cap&lt;/span&gt; 为0&lt;br/&gt;a := []int{1,2,3} // &lt;span&gt;cap&lt;/span&gt; 为3&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;可以从ssa看出&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ffGGK0y3bBLj5sMauxUlyQqsUj9yFdqGBV4335XFlCDG2RxSg5T8t7JIM2QamCHJAiaoezrNnIkvgYoKHmt06Tg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-ratio=&quot;0.3007518796992481&quot; data-w=&quot;798&quot;/&gt;&lt;figcaption&gt;image-20211221095655104&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;问题：slice什么时候决定扩张？&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之前写过一篇文章 https://www.cnblogs.com/yjf512/p/10714792.html 里面得出的结论就是slice在编译期就决定是否要调用growslice。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这个逻辑是正确的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;编译器在ssa的时候 对于append是会转换为 OAPPEND（cmd/compile/internal/typecheck/universe.go） 。而在 cmd/compile/internal/ssagen/ssa.go 中，对其进行判断。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.6898148148148148&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ffGGK0y3bBLj5sMauxUlyQqsUj9yFdqGJq3O14W4ib3roibl1o2Ef91xRZAZJ9BJvvmp3jGX7OiatsBYI5L7BG4Zg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot;/&gt;&lt;figcaption&gt;image-20211221101614497&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;目前还看不懂下面append下面的逻辑，不过基于这个注释，能了解到这里growslice的逻辑。比较扩容前后大小，如果原先cap小于扩容后需要cap，就growslice。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;总结&lt;span/&gt;&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;琢磨了四个关于切片的问题：&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：go的切片数据结构是什么样子的？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：为什么在初始化slice的时候尽量补全cap？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：如果不设置cap，make slice的时候，创建的cap为多大？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;问题：slice什么时候决定扩张？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;感觉第四个问题还没想透。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>b4c9d0056972b85dbc21f2bf1acb67da</guid>
<title>最适合程序员的画图工具？</title>
<link>https://toutiao.io/k/ptc0yky</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;p class=&quot;original_area_primary&quot;&gt;
                                                                                                &lt;/p&gt;

                    
                                            &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;14&quot; data-source-title=&quot;&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;来自公众号：&lt;span&gt;小林coding&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;section&gt;大家好，我是小林。&lt;/section&gt;&lt;p&gt;最近很多读者私信问我，我图解文章中用到的画图工具、思维导图工具、代码贴图工具是什么？&lt;/p&gt;&lt;p&gt;我在很早的时候提到过，不过时间有点久了，而且比较零散，可能现在大部分读者还不知道。&lt;/p&gt;&lt;p&gt;我今天统一整理一下，我图解文章用到的各类工具吧，这些工具我用了一年多了，没发现什么问题，所以是值得推荐的。&lt;/p&gt;&lt;p&gt;我这里先列一下：&lt;/p&gt;&lt;p&gt;接下来，详细聊一聊。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;画图工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span/&gt;&lt;span&gt;这篇文章的封面图就是 &lt;/span&gt;&lt;span&gt;draw&lt;/span&gt;&lt;span&gt;.io&lt;/span&gt;&lt;span&gt; 的开发团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我的图解文章里的图片全是在 draw.io 这个工具画的，写了那么久的图解文章，再加上我工作中也有画图的习惯，累计也有在上面画了接近 1000+ 张图片。&lt;/p&gt;&lt;p&gt;选择它的原因很简单，因为是免费的，而且图片的源文件可以直接保存到 Github 的，这样非常方便，相当于直接云备份到了 Github 仓库里，然后用 Github 作为图床。&lt;/p&gt;&lt;p&gt;这一套操作下来，不管是画图工具，还是图床，都是不花一分钱的方案！&lt;/p&gt;&lt;p&gt;draw.io 画图工具可以在线画图，或者下载应用，或者作为 visual studio code 插件来使用。&lt;/p&gt;&lt;p&gt;我比较常用的方式是在线画图，就是直接在网站上画图。draw.io 一开始的画图网站地址就是直接在浏览器输入 draw.io  地址后，就会自动进入在线画图工具页面，现在它改版了， 改成重定向到官网地址了，所以现在想进入在线画图工具页面，地址是：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;https://app.diagrams.net&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当然，如果你想下载应用来使用，也可以在 Github 下载：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;https://github.com/jgraph/drawio-desktop/releases/&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们来看看这个画图工具的页面长什么样子，主要分为三个区域，从左往右的顺序是「图形选择区域、绘图区域、属性设置区域」。&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.5897435897435898&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXMmITXMW0VDpIWFaD7VmPP9GFBpjWYcAtZUQrr4cjXQhajtz8kaJPRw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;其中，最左边的「图形选择区域」可以选择的图案有很多种，常见的流程图、时序图、表格图都有，甚至还可以在最左下角的「更多图形」找到其他种类的图形，比如网络设备图标等。&lt;/p&gt;&lt;p&gt;具体的画图方法，我在之前的文章详细介绍过：「&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247486263&amp;amp;idx=1&amp;amp;sn=90f7cb9782162f40e8b6aec1ad954491&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;我的 500 张图是怎么画的？&lt;/a&gt;」，这次我就不再赘述啦。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;之前没有详细介绍，怎么将文件保存到 Github，然后作为图床使用，这次补充下&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;1、在浏览器输入地址：https://app.diagrams.net，进入到在线画图网站后，就会弹出保存文件到什么地方的选择，可以保存到本地、Github、OneDrive等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.0342298288508558&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXgmbtZozP4Pen1j505pMq12U0JdbFXE8l4sYC1nMYsxShXDUCaibEQDA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;818&quot;/&gt;&lt;/p&gt;&lt;p&gt;2、选择保存到 Github 后，就选择创建一个新的画图文件。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.735224586288416&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXXB8x01ewFaVrTsibT7aamjJ2zYQcBGgsiclcwv4dBQ1sI4xBGDWoHkAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;846&quot;/&gt;&lt;/p&gt;&lt;p&gt;3、选择创建一个空白的图片，然后可以给文件取个名字，画图的源文件后缀是 .drawio，最后点击创建。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7546897546897547&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXCIUDmjvNHoy9a1MsicoXLKiapqyfGy6W0p26hfianvU5OhOH0G7TuqWXw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1386&quot;/&gt;&lt;/p&gt;&lt;p&gt;4、点击创建后，就会弹出获取你的 Github 账号权限，点击同意就行。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8667992047713717&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXezxVFiaIoPv2g7ictnD4ibicLJsG77QoHc7rlZmKGmiauvBAjjyxib4FWeibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;/p&gt;&lt;p&gt;5、接着输入你的 Github 账号密码。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.2860360360360361&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXI2leygFOWdZJVvyD0pL4iaKpUly23HOv3bCv4klXeaia4AKpy0WUuRfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot;/&gt;&lt;/p&gt;&lt;p&gt;5、登陆完后，选择你要保存的 Github 仓库，比如我选择这里：&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7738998482549317&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXYB0qeqHuBp2jiaHicCib22DqekgpmDDTTOPXpf2f5qH7xJrL8eQsTdyEA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1318&quot;/&gt;&lt;/p&gt;&lt;p&gt;6、接着，点击同意授权。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.3225225225225225&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXhzTYbPD1nNNMdXSLzOUcx8soPencwTJ7plZbiafP51oLznjqJe7cWfQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1110&quot;/&gt;&lt;/p&gt;&lt;p&gt;7、然后就会跳转到一个网站，在你的Github需要安装 draw.io App，直接点击安装即可，&lt;strong&gt;初次使用才会有这一步，后面就不用那么麻烦了&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.4333034914950761&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXavZkRqOBMhXat3YAsmJaL4fXKXpsjg3p5bM1K7rwBtGauHbkiaTqwjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2234&quot;/&gt;&lt;/p&gt;&lt;p&gt;8、然后选择你要授权的仓库，可以是某个仓库，也可以全部仓库，我这里为了方便，就直接选择了所有仓库。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8860182370820668&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWX1icZziabALQqoicO9DbQeRfia4HpvJK8Vu1r45sL4Ibp2gjF3bKicQHH81A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1316&quot;/&gt;&lt;/p&gt;&lt;p&gt;9、安装完成后，在回到在线画图网站，点击「try again」。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7541208791208791&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXslR8Q7TkEV4eA037S5GUug8nrs9cQ5xREUePEKWp8B48rwcic6IPHcQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1456&quot;/&gt;&lt;/p&gt;&lt;p&gt;10、到这一步，授权的工作就完成了。然后，就可以开始画图了。画完图后，就可以导出 png 图片。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;1.006631299734748&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXic594RhzJJicYxlfHTf4TlFxbSQPH3TXu5zNhBvdTJKaCZUFLDK2DpGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1508&quot;/&gt;&lt;/p&gt;&lt;p&gt;11、我直接将 png 图片保存到 Github。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8957169459962756&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXR6D3FPQCsmKMZWAWUF5HF5Q5cud7B23LMfZDc54oJ3mGggCCeKT5Zw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1074&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.8767395626242545&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXBYlCdz5llb3L8icfsVvOo7hib1y7I2hBRZLVwkLy46Azmq4G6ytuCAww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;/p&gt;&lt;p&gt;12、保存好图片后，我们可以用以下地址作为图片的地址。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.71280276816609&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXpwrkwbEMQct4eibL7poHlcQZLIAPyVAUEnDqpEIpclRAqCoiaRmjMouw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1734&quot;/&gt;&lt;/p&gt;&lt;p&gt;我这个地址是经过 jsdeliver cdn 加速的了，这个 cdn 也是免费的。地址的构成是这样的：&lt;/p&gt;&lt;figure&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;0.2161520190023753&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWX4rWzKCb03icibuUHo1tIuiaGLpNm9ErCliaAzejVd4AswVT0icPrSlB7CpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;842&quot; title=&quot;&quot;/&gt;&lt;/figure&gt;&lt;p&gt;也就是说，红色部分的前缀地址是固定的，绿色部分的地址是根据文件的保存仓库路径而变更就行。&lt;/p&gt;&lt;p&gt;如果你嫌这样替换地址麻烦，想自动化一点。可以搭配使用 pingo 工具来上传图片，上传完图片它会自动生成一个经过 jsdeliver cdn  加速的地址。网上的资料很多，关键词搜索「github + jsdeliver cdn + pingo」即可。&lt;/p&gt;&lt;p&gt;怎么样，这一套免费版的画图+Github云同步+图床的方案，还是很舒服的。&lt;/p&gt;&lt;h3&gt;&lt;span&gt;思维导图工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;我用的思维导图工具是 xmind，是国产的。他们软件的交互设计做的很不错，很简洁明了。&lt;/p&gt;&lt;p&gt;它有很多种风格选择，基本都是五彩的，整体挺好看的。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.681912681912682&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXTyu4ichuHwJicktpYCuMoSbHELk3icnE5Kc5XBltpxdAibb0wYqVibzN2ag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1924&quot;/&gt;&lt;/p&gt;&lt;p&gt;有意思的地方，这个思维导图工具的右侧会有一些图标图片选择，比如表情图片、标签图片、进度图图片等等。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5962897526501767&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXkOjwqbj2YCibnMEkWWTre7fjbKz5m9HwJZ9NdylzYvEUqicg9zYtuALQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2264&quot;/&gt;&lt;/p&gt;&lt;p&gt;习惯用思维导图做笔记的同学， xmind 这个思维导图工具是个不错的选择。&lt;/p&gt;&lt;p&gt;另外，我有时会使用 Effie 这个工具来生成思维导图，它本身是一个写作的工具，但是自带一个根据文字内容生成思维导图的功能。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5198237885462555&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXTw6zXk1FovsoWE6BXpDN76er0cOhJp5MKKUFt51MDdzl3tDyW0sssA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;3178&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;代码贴图工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;如果你想展示你的代码，又苦于源代码的样式不好看，则可以使用一个生成漂亮的代码贴图网站。&lt;/p&gt;&lt;p&gt;地址：&lt;strong&gt;&lt;span&gt;https://carbon.now.sh&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.6901270772238515&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXcDc9wAuwEw10VerbofheaYz2CBx8d735pPIGPUC0SUnzYy2CF8BUrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2046&quot;/&gt;&lt;/p&gt;&lt;p&gt;导出图片后，就一张漂亮的代码展示图。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-backh=&quot;364&quot; data-backw=&quot;500&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7290552584670231&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXOoZfpTqF6vibkqmIm0O876S1rWbDkRnsicCWCnLpKgSI3b9YQO6yCbNw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1122&quot;/&gt;&lt;/p&gt;&lt;h3&gt;&lt;span&gt;文章编写工具&lt;/span&gt;&lt;span/&gt;&lt;/h3&gt;&lt;p&gt;我写文章都是用 mardown 格式，这样的好处是能方便发布到各个博客平台。&lt;/p&gt;&lt;p&gt;刚好有道云笔记支持 mardown 格式，所以一直都在用这个，但是永久后，它的双屏显示体验不是很好，就是左边是 mardown 格式的文档，右边是显示渲染的效果。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5168539325842697&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWX0Vck6cVkiccmDbpu9UPHhJEWSwCpJnMzhrpnGPIzMNSdlnYGafuiaLGw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2670&quot;/&gt;&lt;/p&gt;&lt;p&gt;最近就开始转到 typora 写文章了。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.7032871972318339&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXS7wKM50E9sRUqSXt4FhpwyP1tShJjQZ2yrh5NZHsmMZ1UHmRkIlvuA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2312&quot;/&gt;&lt;/p&gt;&lt;p&gt;因为 typora 自身没有云备份功能，所以我是将 md 文件直接保存到 iCoud 云盘的文件夹，这样相当于实现了文件内容自动备份功能，再也不怕文章内容丢失了，坏处就是无法跨平台，因为 iCoud 云盘只能用于 macOS 系统。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.47391304347826085&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWXDibA9oBwGicSEfQ1RFyw5vyKr19SvMLcJ5vNWuS2xic2icgiaziayYrS70aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1840&quot;/&gt;&lt;/p&gt;&lt;p&gt;最新版本的 typora 已经开始要收费了，我一直没有更新，所以还是免费的状态。&lt;/p&gt;&lt;p&gt;还有一点，typora 有生成 pdf 的功能，我之前生成的图解系统和图解网络的 pdf，就是在 typora 生成的。&lt;/p&gt;&lt;p&gt;有时候写一些感想类的文章，我就直接在 Effie 这个工具写，因为它的页面非常简洁纯粹，就是一张大白纸页面，非常容易专注起来，而且是支持 mardown 格式的语法。&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages wxw-img&quot; data-galleryid=&quot;&quot; data-ratio=&quot;0.5645833333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWX6DIut0b8OlsFFZoCtbwr6ot1klkncr2JsM71YVB9yC0qmZ1v27auIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;2880&quot;/&gt;&lt;/p&gt;&lt;p&gt;还有很多优秀的记笔记的软件，比如语雀、notion、wolai等等。我之前也分享过我用到的云笔记软件：&lt;a target=&quot;_blank&quot; href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3MjMzODExOA==&amp;amp;mid=2651726164&amp;amp;idx=2&amp;amp;sn=90823b8748b0d1e4670ea131bdc7cdac&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;最适合‍程序员的云笔记？&quot; linktype=&quot;text&quot; imgurl=&quot;&quot; imgdata=&quot;null&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;最适合程序员的云笔记？&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;以上这些就是我写文章的时候，常用的工具了，看起来很多，其实用习惯的话还好，而且基本都是不花钱的工具，用起来也很 nice。&lt;/p&gt;&lt;p&gt;你们日常中有哪些好用神仙软件，也可以评论区说下，我来种种草&lt;img class=&quot;rich_pages wxw-img&quot; data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZdkgpaJYKtsDrueUVianNYWX5TM3XQlBapflZOMZbUcPhb9TH2Kc6PI0IY6WkbTufSO7jqzGib6Dacw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;/p&gt;&lt;figure&gt;&lt;span&gt;--- EOF ---&lt;/span&gt;&lt;br/&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section powered-by=&quot;xiumi.us&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;推荐↓↓↓&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzIxNDEzMjQwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/KSFIvW4ibNQJTv76dfOBtwAcfghHzt7gO8LCR7ZaPjhg16e9X17GSMQWfMUnD3D2qaRPUsDGezZLdubCiagEzWOg/0?wx_fmt=png&quot; data-nickname=&quot;程序员头条&quot; data-alias=&quot;CoderTop&quot; data-signature=&quot;10:24 一起看程序员热点新闻。把握行业热点，紧跟行业脚步&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>54fb3a6b9d298bf4046e01f753e2b501</guid>
<title>NTCore: 让AI/ML模型开发周期与运维管理变简单</title>
<link>https://toutiao.io/k/5oo90wi</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;body class=&quot;logged-out env-production page-responsive page-blob&quot; id=&quot;readabilityBody&quot;&gt;
    

    

  &lt;p id=&quot;start-of-content&quot; class=&quot;show-on-focus&quot;/&gt;







    


    

  &lt;include-fragment class=&quot;js-notification-shelf-include-fragment&quot; data-base-src=&quot;https://github.com/notifications/beta/shelf&quot;/&gt;





  &lt;div class=&quot;application-main &quot; data-commit-hovercards-enabled=&quot;&quot; data-discussion-hovercards-enabled=&quot;&quot; data-issue-and-pr-hovercards-enabled=&quot;&quot;&gt;
        &lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SoftwareSourceCode&quot; class=&quot;&quot;&gt;
    &lt;main id=&quot;js-repo-pjax-container&quot; data-pjax-container=&quot;&quot;&gt;
      

    
    







      &lt;include-fragment src=&quot;/orgs/nantu-io/survey_banner&quot; data-test-selector=&quot;survey-banner-selector&quot;&gt;
  &lt;/include-fragment&gt;



  



&lt;div class=&quot;clearfix new-discussion-timeline container-xl px-3 px-md-4 px-lg-5&quot;&gt;
  &lt;div id=&quot;repo-content-pjax-container&quot; class=&quot;repository-content &quot;&gt;

    


    
      
  
  
&lt;div&gt;
  



    &lt;a class=&quot;d-none js-permalink-shortcut&quot; data-hotkey=&quot;y&quot; href=&quot;/nantu-io/ntcore/blob/fb9771889cbfb2a2dc8927330b5680d5bc1d3d18/README-zh-CN.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot;&gt;Permalink&lt;/a&gt;


    




    &lt;div class=&quot;Box d-flex flex-column flex-shrink-0 mb-3&quot;&gt;
      
  

  &lt;div class=&quot;Box-body d-flex flex-items-center flex-auto border-bottom-0 flex-wrap&quot;&gt;
    &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default float-left mr-3&quot; id=&quot;blob_contributors_box&quot;&gt;
      &lt;summary class=&quot;Link--primary&quot;&gt;
        &lt;svg text=&quot;gray&quot; aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-people&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z&quot;/&gt;
&lt;/svg&gt;
        &lt;strong&gt;1&lt;/strong&gt;
        
        contributor
      &lt;/summary&gt;
      &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast&quot; aria-label=&quot;Users who have contributed to this file&quot; src=&quot;/nantu-io/ntcore/contributors-list/main/README-zh-CN.md&quot; preload=&quot;&quot;&gt;
        &lt;div class=&quot;Box-header&quot;&gt;
          &lt;button class=&quot;Box-btn-octicon btn-octicon float-right&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
            &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
          &lt;/button&gt;
          &lt;h3 class=&quot;Box-title&quot;&gt;
            Users who have contributed to this file
          &lt;/h3&gt;
        &lt;/div&gt;
        &lt;include-fragment&gt;
          &lt;svg viewbox=&quot;0 0 16 16&quot; fill=&quot;none&quot; data-view-component=&quot;true&quot; class=&quot;my-3 mx-auto d-block anim-rotate&quot;&gt;
  &lt;circle cx=&quot;8&quot; cy=&quot;8&quot; r=&quot;7&quot; stroke=&quot;currentColor&quot; stroke-opacity=&quot;0.25&quot; stroke-width=&quot;2&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
  &lt;path d=&quot;M15 8a7.002 7.002 0 00-7-7&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; vector-effect=&quot;non-scaling-stroke&quot;/&gt;
&lt;/svg&gt;
        &lt;/include-fragment&gt;
      &lt;/details-dialog&gt;
    &lt;/details&gt;
  &lt;/div&gt;
    &lt;/div&gt;






    &lt;readme-toc&gt;

    &lt;div data-target=&quot;readme-toc.content&quot; class=&quot;Box mt-3 position-relative&quot;&gt;
      
  &lt;div class=&quot;Box-header blob-header js-sticky js-position-sticky top-0 p-2 d-flex flex-shrink-0 flex-md-row flex-items-center&quot;&gt;

      &lt;details data-target=&quot;readme-toc.trigger&quot; data-menu-hydro-click=&quot;{&amp;quot;event_type&amp;quot;:&amp;quot;repository_toc_menu.click&amp;quot;,&amp;quot;payload&amp;quot;:{&amp;quot;target&amp;quot;:&amp;quot;trigger&amp;quot;,&amp;quot;repository_id&amp;quot;:373228368,&amp;quot;originating_url&amp;quot;:&amp;quot;https://github.com/nantu-io/ntcore/blob/main/README-zh-CN.md?hmsr=toutiao.io&amp;amp;utm_campaign=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&amp;quot;,&amp;quot;user_id&amp;quot;:null}}&quot; data-menu-hydro-click-hmac=&quot;daa6f0cb8f156e062509d0f9a3254d2d2df71c5fa289c1dbf4441ae89edc085d&quot; class=&quot;dropdown details-reset details-overlay&quot;&gt;
  &lt;summary class=&quot;btn btn-octicon m-0 mr-2 p-2&quot; aria-haspopup=&quot;true&quot; aria-label=&quot;Table of Contents&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-list-unordered&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M2 4a1 1 0 100-2 1 1 0 000 2zm3.75-1.5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zm0 5a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5zM3 8a1 1 0 11-2 0 1 1 0 012 0zm-1 6a1 1 0 100-2 1 1 0 000 2z&quot;/&gt;
&lt;/svg&gt;
  &lt;/summary&gt;


  &lt;details-menu class=&quot;SelectMenu&quot; role=&quot;menu&quot;&gt;
    
  &lt;/details-menu&gt;
&lt;/details&gt;


  &lt;p class=&quot;text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1&quot;&gt;

      109 lines (82 sloc)
      &lt;span class=&quot;file-info-divider&quot;/&gt;
    5.14 KB
  &lt;/p&gt;

  

    
&lt;/div&gt;


        &lt;div id=&quot;readme&quot; class=&quot;Box-body readme blob js-code-block-container p-5 p-xl-6 gist-border-0&quot;&gt;
    &lt;article class=&quot;markdown-body entry-content container-lg&quot; itemprop=&quot;text&quot;&gt;&lt;h1 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-ntcore让aiml模型周期管理变得简单&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#ntcore让aiml模型周期管理变得简单&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;NTCore：让AI/ML模型周期管理变得简单&lt;/h1&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/42594415/146384196-7ff6edcb-b30d-4daf-b878-822a5ddcae73.jpg&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/42594415/146384196-7ff6edcb-b30d-4daf-b878-822a5ddcae73.jpg&quot; alt=&quot;workflows-intro&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/6eb4667c6dd75725c0ce1cb728109841a8e7b7e6bf36d1a453a0151cd3d6f92a/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f6e74636f72652f776562736572766572&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6eb4667c6dd75725c0ce1cb728109841a8e7b7e6bf36d1a453a0151cd3d6f92a/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f6e74636f72652f776562736572766572&quot; alt=&quot;Docker Image Version (latest by date)&quot; data-canonical-src=&quot;https://img.shields.io/docker/v/ntcore/webserver&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/8b0d861cdf70245231ea11014942aca74a6e4cbbaf01278f692b0f2633e8f65c/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6e74636f72652f776562736572766572&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8b0d861cdf70245231ea11014942aca74a6e4cbbaf01278f692b0f2633e8f65c/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6e74636f72652f776562736572766572&quot; alt=&quot;Docker Pulls&quot; data-canonical-src=&quot;https://img.shields.io/docker/pulls/ntcore/webserver&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/684b80de8a7f9f15265f05513c5a770c2051df7278a2376368d2b489eba3efcc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4170616368655f322e302d626c75652e737667&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/684b80de8a7f9f15265f05513c5a770c2051df7278a2376368d2b489eba3efcc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4170616368655f322e302d626c75652e737667&quot; alt=&quot;License&quot; data-canonical-src=&quot;https://img.shields.io/badge/License-Apache_2.0-blue.svg&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/cf4b9916f726a7feaa4894f454cf67b0b9036c4ab3243d20bf4878b8b452c540/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e74636f7265&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/cf4b9916f726a7feaa4894f454cf67b0b9036c4ab3243d20bf4878b8b452c540/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e74636f7265&quot; alt=&quot;PyPI&quot; data-canonical-src=&quot;https://img.shields.io/pypi/v/ntcore&quot;/&gt;&lt;/a&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/8324178308ab790cad015c468a04db75d17f15dddf873a4097165de94d54ef9c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6e616e74752d696f2f6e74636f7265&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8324178308ab790cad015c468a04db75d17f15dddf873a4097165de94d54ef9c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6e616e74752d696f2f6e74636f7265&quot; alt=&quot;GitHub last commit&quot; data-canonical-src=&quot;https://img.shields.io/github/last-commit/nantu-io/ntcore&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;&lt;a href=&quot;https://github.com/nantu-io/ntcore/blob/main/README.md&quot;&gt;English&lt;/a&gt; | 简体中文&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-概述&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#概述&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;概述&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;NTCore 可帮助数据科学家和机器学习工程师轻松地对 AI/ML 模型进行版本控制、部署和监控。&lt;/p&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;自动记录各种机器学习框架的模型实验元数据，例如 sklearn、tensorflow 和 keras 等。&lt;/li&gt;
&lt;li&gt;与 Docker、Kubernetes 和云提供商（例如 AWS、Azure、Alicloud 等）一键部署。&lt;/li&gt;
&lt;li&gt;仪表盘实时监控和报告模型各项参数与性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-特征&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#特征&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;特征&lt;/h2&gt;
&lt;ul dir=&quot;auto&quot;&gt;
&lt;li&gt;易于集成的 Python 客户端，可自动对来自多个 AI/ML 框架（包括 sklearn、tensorflow 和 keras 等）的模型进行版本控制。&lt;/li&gt;
&lt;li&gt;通过来自训练的元数据（例如召回率和精确度）对可审计性和再现性进行建模。&lt;/li&gt;
&lt;li&gt;可通过 curl、Postman 和 HTTP 客户端调用的开箱即用 RESTful 端点。&lt;/li&gt;
&lt;li&gt;使用 Docker、Kubernetes 和云提供商（例如 Amazon EKS、Microsoft AKS 等）的模型在生产中一键部署。&lt;/li&gt;
&lt;li&gt;具有 ML 模型的易于扩展且高度可用的预测服务，以支持最先进的 Web 和移动应用程序架构。&lt;/li&gt;
&lt;li&gt;每个模型一个端点，为多个端点提供服务。&lt;/li&gt;
&lt;li&gt;与 Prometheus 集成的模型性能监控（持续开发中）。&lt;/li&gt;
&lt;li&gt;UI仪表板以管理 ML 模型版本、部署和性能指标（持续开发中）。&lt;/li&gt;
&lt;li&gt;API，用于通过与工作流管理器（例如 Apache Airflow）的集成来自动化 ML 工作流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p dir=&quot;auto&quot;&gt;加入我们的&lt;a href=&quot;https://app.slack.com/client/T02DN2XTE2J/C02R163F1K4&quot; rel=&quot;nofollow&quot;&gt;Slack&lt;/a&gt;社区.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-目录&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#目录&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;目录&lt;/h2&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-快速开始&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#快速开始&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;快速开始&lt;/h2&gt;
&lt;ol start=&quot;0&quot; dir=&quot;auto&quot;&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://docs.docker.com/compose/install/&quot; rel=&quot;nofollow&quot;&gt;docker compose&lt;/a&gt;安装 docker 引擎。&lt;/li&gt;
&lt;li&gt;克隆这个存储库并通过 docker compose 启动 ntcore
&lt;div class=&quot;snippet-clipboard-content position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;docker-compose -f docker-compose.yml up&quot;&gt;&lt;pre&gt;&lt;code&gt;docker-compose -f docker-compose.yml up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;安装ntcore客户端

&lt;/li&gt;
&lt;li&gt;到&lt;a href=&quot;http://localhost:8000/dsp/console/workspaces&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8000/dsp/console/workspaces&lt;/a&gt; 并创建您的第一个工作区。&lt;/li&gt;
&lt;li&gt;模型版本控制。可以从&lt;a href=&quot;https://github.com/nantu-io/ntcore/tree/promotion/client/examples&quot;&gt;这里&lt;/a&gt;了解更多。
&lt;div class=&quot;highlight highlight-source-python position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;from sklearn import datasets&amp;#10;# Config the ntcore client&amp;#10;from ntcore import client&amp;#10;client.set_endpoint(&#x27;http://localhost:8000&#x27;)&amp;#10;client.autolog(&#x27;{workspace_id}&#x27;)&amp;#10;&amp;#10;# Prepare the training dataset&amp;#10;from sklearn import datasets&amp;#10;iris = datasets.load_iris()&amp;#10;&amp;#10;# Init the model&amp;#10;from sklearn.ensemble import RandomForestClassifier&amp;#10;clf = RandomForestClassifier(max_depth=2, random_state=0)&amp;#10;&amp;#10;# Start an experiment run&amp;#10;with client.start_run():&amp;#10;    clf.fit(iris.data, iris.target_names[iris.target])&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;datasets&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;# Config the ntcore client&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;ntcore&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;client&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;set_endpoint&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&#x27;http://localhost:8000&#x27;&lt;/span&gt;)
&lt;span class=&quot;pl-s1&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;autolog&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&#x27;{workspace_id}&#x27;&lt;/span&gt;)

&lt;span class=&quot;pl-c&quot;&gt;# Prepare the training dataset&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;datasets&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;datasets&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;load_iris&lt;/span&gt;()

&lt;span class=&quot;pl-c&quot;&gt;# Init the model&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;sklearn&lt;/span&gt;.&lt;span class=&quot;pl-s1&quot;&gt;ensemble&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;RandomForestClassifier&lt;/span&gt;
&lt;span class=&quot;pl-s1&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;RandomForestClassifier&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;max_depth&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)

&lt;span class=&quot;pl-c&quot;&gt;# Start an experiment run&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;pl-s1&quot;&gt;client&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;start_run&lt;/span&gt;():
    &lt;span class=&quot;pl-s1&quot;&gt;clf&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;fit&lt;/span&gt;(&lt;span class=&quot;pl-s1&quot;&gt;iris&lt;/span&gt;.&lt;span class=&quot;pl-s1&quot;&gt;data&lt;/span&gt;, &lt;span class=&quot;pl-s1&quot;&gt;iris&lt;/span&gt;.&lt;span class=&quot;pl-s1&quot;&gt;target_names&lt;/span&gt;[&lt;span class=&quot;pl-s1&quot;&gt;iris&lt;/span&gt;.&lt;span class=&quot;pl-s1&quot;&gt;target&lt;/span&gt;])&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;查看模型版本并注册一个用于预生产部署。
&lt;kbd&gt;
&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/42594415/146832457-addbbc54-c18a-4024-8cea-ca935c67ce5e.png&quot;&gt;&lt;img alt=&quot;Screen Shot 2021-12-20 at 10 08 08 AM&quot; src=&quot;https://user-images.githubusercontent.com/42594415/146832457-addbbc54-c18a-4024-8cea-ca935c67ce5e.png&quot;/&gt;&lt;/a&gt;
&lt;/kbd&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt; 
&lt;ol start=&quot;6&quot; dir=&quot;auto&quot;&gt;
&lt;li&gt;部署您注册的模型版本并在部署成功后调用 RESTful 端点。
&lt;div class=&quot;highlight highlight-source-shell position-relative overflow-auto&quot; data-snippet-clipboard-copy-content=&quot;curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST --data &#x27;{&amp;quot;data&amp;quot;: [[5.1,3.5,1.4,0.2]]}&#x27; http://localhost:8000/s/{workspace_id}/predict&quot;&gt;&lt;pre&gt;curl -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Content-Type: application/json&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; -X POST --data &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&#x27;&lt;/span&gt;{&quot;data&quot;: [[5.1,3.5,1.4,0.2]]}&lt;span class=&quot;pl-pds&quot;&gt;&#x27;&lt;/span&gt;&lt;/span&gt; http://localhost:8000/s/{workspace_id}/predict&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-文档&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#文档&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;文档&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;NTCore 文档: &lt;a href=&quot;https://nantu-io.github.io/ntcore-doc&quot; rel=&quot;nofollow&quot;&gt;https://nantu-io.github.io/ntcore-doc&lt;/a&gt;.&lt;/p&gt;

&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-为什么选择ntcore&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#为什么选择ntcore&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;为什么选择NTCore&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;假设您是一名数据科学家，为 10 个不同的场景优化 AI/ML 模型，每个场景都需要 100 次迭代。您如何保留这 1000 个实验的输入/输出，比较它们以找到最佳模型并重现它们？这并不容易。但这并不是你噩梦的结束。如果要将“最佳”模型部署为预测端点，则必须重构代码以创建 API，然后 DevOps 团队才能部署。这个过程通常需要几天时间。更重要的是，当这个过程每小时、每天甚至每月重复一次时，疼痛会变得更糟。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;NTCore 是一个旨在减轻痛苦的平台。它提供了 UI 工具和 API，以帮助数据科学家以最少的与 DevOps 团队的互动，将他们训练有素的模型持续无缝地传送到生产环境。它还提供监控功能，以便数据科学家可以快速访问其模型的最新性能指标。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-社区&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#社区&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;社区&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;有关入门指南、教程和 API 参考，请查看我们的文档。&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;要报告错误、提交文档问题或提交功能请求，请打开 GitHub 问题。&lt;/p&gt;
&lt;h2 dir=&quot;auto&quot;&gt;&lt;a id=&quot;user-content-执照&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#执照&quot;&gt;&lt;svg class=&quot;octicon octicon-link&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; aria-hidden=&quot;true&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z&quot;/&gt;&lt;/svg&gt;&lt;/a&gt;执照&lt;/h2&gt;
&lt;p dir=&quot;auto&quot;&gt;NTCore在&lt;a href=&quot;https://github.com/nantu-io/ntcore/blob/main/LICENSE&quot;&gt;Apache 2.0&lt;/a&gt;下获得许可.&lt;/p&gt;
&lt;/article&gt;
  &lt;/div&gt;

    &lt;/div&gt;

  &lt;/readme-toc&gt;

  

  &lt;details class=&quot;details-reset details-overlay details-overlay-dark&quot; id=&quot;jumpto-line-details-dialog&quot;&gt;
    &lt;summary data-hotkey=&quot;l&quot; aria-label=&quot;Jump to line&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast linejump&quot; aria-label=&quot;Jump to line&quot;&gt;
          &lt;/details-dialog&gt;
  &lt;/details&gt;

    


&lt;/div&gt;



  &lt;/div&gt;
&lt;/div&gt;

    &lt;/main&gt;
  &lt;/div&gt;

  &lt;/div&gt;

          &lt;footer class=&quot;footer width-full container-xl p-responsive&quot; role=&quot;contentinfo&quot;&gt;


  
  &lt;p class=&quot;d-flex flex-justify-center pb-6&quot;&gt;
    &lt;span class=&quot;f6 color-fg-muted&quot;/&gt;
  &lt;/p&gt;
&lt;/footer&gt;




  &lt;div id=&quot;ajax-error-message&quot; class=&quot;ajax-error-message flash flash-error&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;button type=&quot;button&quot; class=&quot;flash-close js-ajax-error-dismiss&quot; aria-label=&quot;Dismiss error&quot;&gt;
      &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
    &lt;/button&gt;&lt;p&gt;
    You can’t perform that action at this time.
  &lt;/p&gt;&lt;/div&gt;

  &lt;div class=&quot;js-stale-session-flash flash flash-warn flash-banner&quot; hidden=&quot;&quot;&gt;
    &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-alert&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z&quot;/&gt;
&lt;/svg&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-in&quot; hidden=&quot;&quot;&gt;You signed in with another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
    &lt;span class=&quot;js-stale-session-flash-signed-out&quot; hidden=&quot;&quot;&gt;You signed out in another tab or window. &lt;a href=&quot;&quot;&gt;Reload&lt;/a&gt; to refresh your session.&lt;/span&gt;
  &lt;/div&gt;
    &lt;template id=&quot;site-details-dialog&quot;&gt;
  &lt;details class=&quot;details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm&quot; open=&quot;&quot;&gt;
    &lt;summary role=&quot;button&quot; aria-label=&quot;Close dialog&quot;/&gt;
    &lt;details-dialog class=&quot;Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal&quot; aria-labelledby=&quot;box-title&quot;&gt;
      &lt;button class=&quot;Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0&quot; type=&quot;button&quot; aria-label=&quot;Close dialog&quot; data-close-dialog=&quot;&quot;&gt;
        &lt;svg aria-hidden=&quot;true&quot; viewbox=&quot;0 0 16 16&quot; version=&quot;1.1&quot; data-view-component=&quot;true&quot; class=&quot;octicon octicon-x&quot;&gt;
    &lt;path fill-rule=&quot;evenodd&quot; d=&quot;M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z&quot;/&gt;
&lt;/svg&gt;
      &lt;/button&gt;
      &lt;p class=&quot;octocat-spinner my-6 js-details-dialog-spinner&quot;/&gt;
    &lt;/details-dialog&gt;
  &lt;/details&gt;
&lt;/template&gt;

    

    &lt;template id=&quot;snippet-clipboard-copy-button&quot;&gt;
  
&lt;/template&gt;




  &lt;/body&gt;
&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>3be7bbe64b5d31c59aa1427c5169b55a</guid>
<title>一文搞懂 Docker、Containerd、RunC 间的联系和区别</title>
<link>https://toutiao.io/k/01r96hf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section&gt;&lt;section data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;span&gt;公众号关注 「&lt;span&gt;&lt;span&gt;奇妙的 Linux 世界&lt;/span&gt;&lt;/span&gt;」&lt;/span&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;span&gt;设为「&lt;span&gt;星标&lt;/span&gt;」，每天带你玩转 Linux ！&lt;/span&gt;&lt;/section&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;0&quot; data-cropselx2=&quot;562&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;330&quot; data-fileid=&quot;100018142&quot; data-ratio=&quot;0.7411111111111112&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; title=&quot;&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatqXrOdCSa2hThu5Gg6HMCv6DdlZegicHFpPcvRoVSicfEqfgX84cSicqfoNt3hqf3ODSlFTkibB8yMg6Q/640?wx_fmt=png&quot;/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/section&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;什么是RunC&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker、Google、CoreOS 和其他供应商创建了开放容器计划 (OCI)，目前主要有两个标准文档：容器运行时标准 （runtime spec）和 容器镜像标准（image spec）。&lt;/p&gt;&lt;section&gt;&lt;img data-fileid=&quot;100018144&quot; data-ratio=&quot;0.5130533484676504&quot; data-type=&quot;png&quot; data-w=&quot;881&quot; title=&quot;&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zqUeibAB9ia21GP6vJth7wFlcAYzFHqUUqOehrA9zXlU6gxmsyo5yNjjcg/640?wx_fmt=png&quot;/&gt;&lt;figcaption&gt;&lt;br/&gt;&lt;/figcaption&gt;&lt;/section&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;OCI 对容器 runtime 的标准主要是指定容器的运行状态，和 runtime 需要提供的命令。下图可以是容器状态转换图：&lt;img data-fileid=&quot;100018148&quot; data-ratio=&quot;0.6009132420091324&quot; data-type=&quot;png&quot; data-w=&quot;1095&quot; title=&quot;&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zqj0Znnf19vRk5dThuF4GIQHm1r2qPwLagc2znlorFBPEGhlE0d2pOCA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;init 状态：这个是我自己添加的状态，并不在标准中，表示没有容器存在的初始状态&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;creating：使用 create 命令创建容器，这个过程称为创建中&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;created：容器创建出来，但是还没有运行，表示镜像和配置没有错误，容器能够运行在当前平台&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;running：容器的运行状态，里面的进程处于 up 状态，正在执行用户设定的任务&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;stopped：容器运行完成，或者运行出错，或者 stop 命令之后，容器处于暂停状态。这个状态，容器还有很多信息保存在平台中，并没有完全被删除&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3MTI2NzkxMA==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatrP1H2ykr2xId1T1xNrZaVFuqGgQ3ycnJylh6A6h0vp2yqynejepUBcBufs3NWFKxl1QPsRxJ61YQ/0?wx_fmt=png&quot; data-nickname=&quot;奇妙的Linux世界&quot; data-alias=&quot;Hi-Linux&quot; data-signature=&quot;这里是 Linux 爱好者的聚集地，不仅有各种硬核干货文章和新奇内容推荐，还常常有福利红包等你来领哟。快快加入我们，一起愉快玩耍吧！&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Runc的来历&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;RunC 是从 Docker 的 libcontainer 中迁移而来的，实现了容器启停、资源隔离等功能。Docker将RunC捐赠给 OCI 作为OCI 容器运行时标准的参考实现。Docker 默认提供了 docker-runc 实现。事实上，通过 containerd 的封装，可以在 Docker Daemon 启动的时候指定 RunC的实现。最初，人们对 Docker 对 OCI 的贡献感到困惑。他们贡献的是一种“运行”容器的标准方式，仅此而已。它们不包括镜像格式或注册表推/拉格式。当你运行一个 Docker 容器时，这些是 Docker 实际经历的步骤：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;下载镜像&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;将镜像文件解开为bundle文件，将一个文件系统拆分成多层&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;从bundle文件运行容器&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker标准化的仅仅是第三步。在此之前，每个人都认为容器运行时支持Docker支持的所有功能。最终，Docker方面澄清：原始OCI规范指出，只有“运行容器”的部分组成了runtime。这种“概念失联”一直持续到今天，并使“容器运行时”成为一个令人困惑的话题。希望我能证明双方都不是完全错误的，并且在本文中将广泛使用该术语。RunC 就可以按照这个 OCI 文档来创建一个符合规范的容器，既然是标准肯定就有其他 OCI 实现，比如 Kata、gVisor 这些容器运行时都是符合 OCI 标准的。&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;怎么使用 runc&lt;/h3&gt;&lt;pre data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;code&gt; create the bundle&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; mkdir -p /mycontainer/rootfs&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; [ab]use Docker to copy a root fs into the bundle&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; docker &lt;span&gt;export&lt;/span&gt; $(docker create busybox) | tar -C /mycontainer/rootfs -xvf -&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; create the specification, by default sh will be the entrypoint of the container&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; /mycontainer&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; runc spec&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; launch the container&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; sudo -i&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;span&gt;cd&lt;/span&gt; /mycontainer&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; runc run mycontainerid&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; list containers&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; runc list&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; stop the container&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; runc &lt;span&gt;kill&lt;/span&gt; mycontainerid&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;#&lt;/span&gt;&lt;span&gt; cleanup&lt;/span&gt;&lt;br/&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; runc delete mycontainerid&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在命令行中使用 runc，我们可以根据需要启动任意数量的容器。但是，如果我们想自动化这个过程，我们需要一个容器管理器。为什么这样？想象一下，我们需要启动数十个容器来跟踪它们的状态。其中一些需要在失败时重新启动，需要在终止时释放资源，必须从注册表中提取图像，需要配置容器间网络等等。就需要有Low-Level和High-Level容器运行时，runc就是Low-Level实现的实现。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1635413232590&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1635413232590&quot;/&gt;&lt;/p&gt;&lt;h3 data-tool=&quot;mdnice编辑器&quot;&gt;Low-Level和High-Level容器运行时&lt;/h3&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当人们想到容器运行时，可能会想到一系列示例；runc、lxc、lmctfy、Docker（容器）、rkt、cri-o。这些中的每一个都是为不同的情况而构建的，并实现了不同的功能。有些，如 containerd 和 cri-o，实际上使用 runc 来运行容器，在High-Level实现镜像管理和 API。与 runc 的Low-Level实现相比，可以将这些功能（包括镜像传输、镜像管理、镜像解包和 API）视为High-Level功能。考虑到这一点，您可以看到容器运行时空间相当复杂。每个运行时都涵盖了这个Low-Level到High-Level频谱的不同部分。这是一个非常主观的图表：&lt;img data-fileid=&quot;100018145&quot; data-ratio=&quot;0.52&quot; data-type=&quot;png&quot; data-w=&quot;525&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zq3X6gL7KDaAEAWpaibvrQ5tCt4iaEOGNmUoXNomb6kn4mVljEUpTB3dVQ/640?wx_fmt=png&quot;/&gt;因此，从实际出发，通常只专注于正在运行的容器的runtime通常称为“Low-Level容器运行时”，支持更多高级功能（如镜像管理和gRPC / Web API）的运行时通常称为“High-Level容器运行时”，“High-Level容器运行时”或通常仅称为“容器运行时”，我将它们称为“High-Level容器运行时”。值得注意的是，Low-Level容器运行时和High-Level容器运行时是解决不同问题的、从根本上不同的事物。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;Low-Level容器运行时：容器是通过Linux nanespace和Cgroups实现的，Namespace能让你为每个容器提供虚拟化系统资源，像是文件系统和网络，Cgroups提供了限制每个容器所能使用的资源的如内存和CPU使用量的方法。在最低级别的运行时中，容器运行时负责为容器建立namespaces和cgroups,然后在其中运行命令，Low-Level容器运行时支持在容器中使用这些操作系统特性。目前来看低级容器运行时有：runc ：我们最熟悉也是被广泛使用的容器运行时，代表实现Docker。runv：runV 是一个基于虚拟机管理程序（OCI）的运行时。它通过虚拟化 guest kernel，将容器和主机隔离开来，使得其边界更加清晰，这种方式很容易就能帮助加强主机和容器的安全性。代表实现是kata和Firecracker。runsc：runsc = runc + safety ，典型实现就是谷歌的gvisor，通过拦截应用程序的所有系统调用，提供安全隔离的轻量级容器运行时沙箱。截止目前，貌似并不没有生产环境使用案例。wasm : Wasm的沙箱机制带来的隔离性和安全性，都比Docker做的更好。但是wasm 容器处于草案阶段，距离生产环境尚有很长的一段路。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;High-Level容器运行时：通常情况下，开发人员想要运行一个容器不仅仅需要Low-Level容器运行时提供的这些特性，同时也需要与镜像格式、镜像管理和共享镜像相关的API接口和特性，而这些特性一般由High-Level容器运行时提供。就日常使用来说，Low-Level容器运行时提供的这些特性可能满足不了日常所需，因为这个缘故，唯一会使用Low-Level容器运行时的人是那些实现High-Level容器运行时以及容器工具的开发人员。那些实现Low-Level容器运行时的开发者会说High-Level容器运行时比如containerd和cri-o不像真正的容器运行时，因为从他们的角度来看，他们将容器运行的实现外包给了runc。但是从用户的角度来看，它们只是提供容器功能的单个组件，可以被另一个的实现替换，因此从这个角度将其称为runtime仍然是有意义的。即使containerd和cri-o都使用runc，但是它们是截然不同的项目，支持的特性也是非常不同的。dockershim, containerd 和cri-o都是遵循CRI的容器运行时，我们称他们为高层级运行时（High-level Runtime）。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Kubernetes 只需支持 containerd 等high-level container runtime即可。由containerd 按照OCI 规范去对接不同的low-level container runtime，比如通用的runc，安全增强的gvisor，隔离性更好的runv。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;containerd&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;与RunC_一样_，我们又可以在这里看到一个docker公司的开源产品containerd曾经是开源docker项目的一部分。尽管_containerd_是另一个自给自足的软件。&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;一方面，它称自己为容器运行时，但是与运行时__RunC_不同_。不仅_containerd_和_runc_的职责不同，组织形式也不同。显然_runc_是只是一个命令行工具，_containerd_是一个长期居住守护进程。_runc_的实例不能超过底层容器进程。通常它在create调用时开始它的生命，然后只是在容器的 rootfs 中的指定文件去运行。&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;另一方面，_containerd _可以管理超过数千个_runc_容器。它更像是一个服务器，它侦听传入请求以启动、停止或报告容器的状态。在引擎盖下_containerd_使用RunC。然而，_containerd_不仅仅是一个容器生命周期管理器。它还负责镜像管理（从注册中心拉取和推送镜像，在本地存储镜像等）、跨容器网络管理和其他一些功能。&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100018147&quot; data-ratio=&quot;0.4851720047449585&quot; data-type=&quot;png&quot; data-w=&quot;1686&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zqNYZdOJk3vc2HQUsUjibegnsmNYoZJhvRiaHagSiby3BrD5c9CoksO84ibQ/640?wx_fmt=png&quot;/&gt;&lt;figcaption&gt;image.png&lt;/figcaption&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;containerd 是一个工业级标准的容器运行时，它强调&lt;strong&gt;简单性&lt;/strong&gt;、&lt;strong&gt;健壮性&lt;/strong&gt;和&lt;strong&gt;可移植性&lt;/strong&gt;，containerd 可以负责干下面这些事情：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;管理容器的生命周期（从创建容器到销毁容器）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;拉取/推送容器镜像&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;存储管理（管理镜像及容器数据的存储）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;调用 runc 运行容器（与 runc 等容器运行时交互）&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;管理容器网络接口及网络&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-fileid=&quot;100018149&quot; data-ratio=&quot;0.6060606060606061&quot; data-type=&quot;png&quot; data-w=&quot;1782&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zqUUKf2m7qC15XGcwE72hUIStia5H7tm6VeD2vcmUhvBMQ8pQibBibGwM5A/640?wx_fmt=png&quot;/&gt;上图是 Containerd 整体的架构。由下往上，Containerd支持的操作系统和架构有 Linux、Windows 以及像 ARM 的一些平台。在这些底层的操作系统之上运行的就是底层容器运行时，其中有上文提到的runc、gVisor 等。在底层容器运行时之上的是Containerd 相关的组件，比如 Containerd 的 runtime、core、API、backend、store 还有metadata 等等。构筑在 Containerd 组件之上以及跟这些组件做交互的都是 Containerd 的 client，Kubernetes 跟 Containerd 通过 CRI 做交互时，本身也作为 Containerd 的一个 client。Containerd 本身有提供了一个 CRI，叫 ctr，不过这个命令行工具并不是很好用。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;在这些组件之上就是真正的平台，Google Cloud、Docker、IBM、阿里云、微软云还有RANCHER等等都是，这些平台目前都已经支持 containerd， 并且有些已经作为自己的默认容器运行时了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;从 k8s 的角度看，选择 containerd作为运行时的组件，它调用链更短，组件更少，更稳定，占用节点资源更少。&lt;img data-fileid=&quot;100018150&quot; data-ratio=&quot;0.2935185185185185&quot; data-type=&quot;png&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zqBRic9ZFYAFVBaqTgcqBCTc4hMJW9GicB4jtd7BZGB1gkkEiaPLl2QibHSg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;mpcpc js_editor_cpcad=&quot;&quot; class=&quot;js_cpc_area cpc_iframe&quot; data-category_id_list=&quot;1|11|16|17|22|24|26|27|28|29|3|31|32|35|36|37|39|41|42|43|45|46|47|48|49|5|50|51|52|53|54|55|6|7|8&quot; data-id=&quot;1635413250190&quot; src=&quot;/cgi-bin/readtemplate?t=tmpl/cpc_tmpl#1635413250190&quot;/&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;Docker&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker 于 2013 年发布，解决了开发人员在端到端运行容器时遇到的许多问题。这里是他包含的所有东西：&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;容器镜像格式&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一种构建容器镜像的方法（Dockerfile/docker build）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一种管理容器镜像（docker image、docker rm等）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一种管理容器实例的方法（docker ps, docker rm 等）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一种共享容器镜像的方法（docker push/pull）；&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;一种运行容器的方式（docker run）；&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;当时，Docker 是一个单体系统。但是，这些功能中没有一个是真正相互依赖的。这些中的每一个都可以在可以一起使用的更小、更集中的工具中实现。每个工具都可以通过使用一种通用格式、一种容器标准来协同工作。从 Docker 1.11 之后，Docker Daemon 被分成了多个模块以适应 OCI 标准。拆分之后，结构分成了以下几个部分。&lt;img data-fileid=&quot;100018151&quot; data-ratio=&quot;0.628&quot; data-type=&quot;png&quot; data-w=&quot;2000&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ibD9iaaPDn99j6K4fEDVSvE6ficAhoLE4zq4XPDAWQQ5toCbibBtXJQ8YPAo6iaVCqYMdcjGu1JKabUz45GdVfkW1Kw/640?wx_fmt=png&quot;/&gt;&lt;br/&gt;其中，containerd 独立负责容器运行时和生命周期（如创建、启动、停止、中止、信号处理、删除等），其他一些如镜像构建、卷管理、日志等由 Docker Daemon 的其他模块处理。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Docker 的模块块拥抱了开放标准，希望通过 OCI 的标准化，容器技术能够有很快的发展。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;现在创建一个docker容器的时候，Docker Daemon 并不能直接帮我们创建了，而是请求 containerd 来创建一个容器。当containerd 收到请求后，也不会直接去操作容器，而是创建一个叫做 containerd-shim 的进程。让这个进程去操作容器，我们指定容器进程是需要一个父进程来做状态收集、维持 stdin 等 fd 打开等工作的，假如这个父进程就是 containerd，那如果 containerd 挂掉的话，整个宿主机上所有的容器都得退出了，而引入 containerd-shim 这个垫片就可以来规避这个问题了，就是提供的live-restore的功能。这里需要注意systemd的 MountFlags=slave。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;然后创建容器需要做一些 namespaces 和 cgroups 的配置，以及挂载 root 文件系统等操作。runc 就可以按照这个 OCI 文档来创建一个符合规范的容器。 &lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;真正启动容器是通过 containerd-shim 去调用 runc 来启动容器的，runc 启动完容器后本身会直接退出，containerd-shim 则会成为容器进程的父进程, 负责收集容器进程的状态, 上报给 containerd, 并在容器中 pid 为 1 的进程退出后接管容器中的子进程进行清理, 确保不会出现僵尸进程。containerd，containerd-shim和容器进程(即容器主进程)三个进程，是有依赖关系的。可以参考《containerd,containerd-shim和runc的依存关系》[1],查看怎么保证live-restore的功能的。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;reference&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://www.ianlewis.org/en/container-runtimes-part-1-introduction-container-r&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#container-management&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;https://github.com/moby/moby/issues/35873#issuecomment-386467562&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;[1]https://fankangbest.github.io/2017/11/24/containerd-containerd-shim%E5%92%8Crunc%E7%9A%84%E4%BE%9D%E5%AD%98%E5%85%B3%E7%B3%BB/&lt;br/&gt;&lt;/p&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot;&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;本文转载自：「运维开发故事」，原文：https://tinyurl.com/skbbpr4j，版权归原作者所有。欢迎投稿，投稿邮箱: editor@hi-linux.com。&lt;/p&gt;&lt;/blockquote&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-fileid=&quot;100018141&quot; data-ratio=&quot;1&quot; data-type=&quot;gif&quot; data-w=&quot;55&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/V3ll7FMyGyMqQC7JRNgVZlsiaJibSyp27USlRia194K6Nqfvz8Wblg7HDceOn4Y3MekppS14lazRZTKLdt2BHuYGA/640?wx_fmt=gif&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img data-fileid=&quot;100018138&quot; data-ratio=&quot;0.19718309859154928&quot; data-type=&quot;png&quot; data-w=&quot;71&quot; data-width=&quot;100%&quot; title=&quot;&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/V3ll7FMyGyMSBQlhpwK0j3jOS5icKmFncGJdY8kL5kY6AswDpOBsz06GFowoDicL2dC2fr9haibnrwNdZ7rJLXqUA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;你可能还喜欢&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;点击下方图片即可阅读&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;amp;mid=2247501647&amp;amp;idx=1&amp;amp;sn=20b5a0ecda942b5ba2166554eb045665&amp;amp;chksm=eac6e666ddb16f708e61423d1459d26b4f2d262cce7460bcc0ddced6cb37bee0ad56ef45fc4a&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-fileid=&quot;100018153&quot; data-ratio=&quot;0.375&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/8ZFzrRjqatqWpqDODU6e5tWXeR9ZB8APkleZalicTflzhfpU2ibFjCTKy3ICzoajK8AGgqmFCT7g38rymBiaBMNQg/640?wx_fmt=jpeg&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GitHub 星标 2.1 K，可能是最简单好用的纯文本流程图制作工具&lt;br/&gt;&lt;br/&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3MTI2NzkxMA==&amp;amp;mid=2247497936&amp;amp;idx=1&amp;amp;sn=ec9442c73de91c5ab35dbd21dfbedcbd&amp;amp;chksm=eac6d9f9ddb150ef9fc91129ab2b34d35ffef884a726fd90bc1fe9d4014456d910b3baa73afc&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;你已选中了添加链接的内容&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;1&quot;&gt;&lt;span class=&quot;js_jump_icon h5_image_link&quot; data-positionback=&quot;static&quot;&gt;&lt;img data-fileid=&quot;100018139&quot; data-ratio=&quot;0.5496957403651116&quot; data-type=&quot;png&quot; data-w=&quot;986&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatp9P1fjdJcxb1j9gtuoFvu5tYF73myE4ZCLLUzO34rxQ1jruOX4XN3bpqWJWyZ47Mfh7UhvIOJwDA/640?wx_fmt=png&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;点击上方图片，『美团|饿了么』外卖红包天天免费领&lt;br/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-fileid=&quot;100018143&quot; data-ratio=&quot;0.5555555555555556&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;900&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/8ZFzrRjqatpX5KlSvhARyBhcqYmvglSE9zMfzA8CSgNIibAiaFFNHBoXujK9vo2655gRWM5RibLzzF6jPhk4CuYAg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多有趣的互联网新鲜事，关注「奇妙的互联网」视频号全了解！&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>