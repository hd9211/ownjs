<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
            <channel>
            <title>开发者头条</title>
            <link>http://toutiao.io/</link>
            <description></description>
<item>
<guid>f47477f2b1331bfadf7edf15c5691ae6</guid>
<title>和谁在一起，的确很重要</title>
<link>https://toutiao.io/k/tketjuf</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;码农周刊是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;码农周刊是一份专为广大程序员、编程爱好者们打造的 IT 技术周刊。每周发送。&lt;br/&gt;2013 年 9 月 12 日创刊至今，已发送 300 多期，订阅用户超 20 万。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;专业、简单、有用&lt;/span&gt;&lt;span&gt;，是我们一直坚持的办刊宗旨。一路走来，我们见证了不少订阅用户从编程新手进阶成了高级程序员、架构师、CTO……&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;2020 年 4 月，为了给用户提供更优质的服务，我们推出了「&lt;/span&gt;&lt;span&gt;码农周刊VIP会员&lt;/span&gt;&lt;span&gt;」服务。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;你与 BAT 技术大牛，只差一份「码农周刊VIP会员」的距离！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;VIP会员特权&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 52 期码农周刊VIP会员&lt;span&gt;专属邮件周报&lt;/span&gt;，让你及时掌握技术动向；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 只限VIP会员加入的&lt;span&gt;交流圈子&lt;/span&gt;，让你与技术大牛切磋学习；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. VIP会员独享的&lt;span&gt;工作机会&lt;/span&gt;，为你介绍好公司的好机会；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4. 更多会员特权，持续更新……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如何加入「码农周刊VIP会员」？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;1. 微信扫描下方二维码，加入码农周刊VIP会员知识星球。&lt;/span&gt;&lt;strong&gt;&lt;span&gt;促销期间，一年仅需 108 元！平均一天花费不到 3 毛！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-cropselx1=&quot;34&quot; data-cropselx2=&quot;356&quot; data-cropsely1=&quot;0&quot; data-cropsely2=&quot;425&quot; data-ratio=&quot;1.0857487922705313&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/t8lpVibticjQ6h6x4EnYInRLic6PibFNWw4zSv28rAxcJu9dumVJF03PwHGOWxOzeJKIsydVa7UJuTo4jOjrct9NZw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;828&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 加入码农周刊VIP会员知识星球后，客服会联系您，请留意知识星球内的私信。&lt;br/&gt;3. 客服向您发送码农周刊VIP会员欢迎邮件，开启您的码农周刊VIP会员之旅。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;心动不如心动，赶快订阅吧！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>ac2c36e327c3cbe46915741843bae512</guid>
<title>超大文件读取优化的探讨</title>
<link>https://toutiao.io/k/s0ughm2</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;&lt;p&gt;在开发过程中，经常会遇到对文件的操作，对于一般的文件，通常使用fread, fwrite等文件操作api即可处理。然而在处理大文件上, 使用普通的api在性能上难以得到保障。如何优化大文件的读取，可以从以下两点进行考虑&lt;br/&gt;1. 文件的加载&lt;br/&gt;2. 数据结构的选择&lt;/p&gt;&lt;h2&gt;文件加载过程&lt;/h2&gt;&lt;p&gt;      首先我们简单了解一下整个文件的读取过程&lt;br/&gt;      操作系统为了提高读取的效率，使用页缓存机制，也就是说当读取文件时，经历了两次数据copy的过程&lt;/p&gt;&lt;p&gt;A. 首先将文件页从系统磁盘copy到页缓存&lt;br/&gt;B. 然后再从页缓存copy到用户进程&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;明细流程如下&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. 向系统内核发起读文件请求&lt;br/&gt;2. 系统内核通过查找进程文件符表，通过已打开文件集上的文件信息找到此文件的inode&lt;br/&gt;3. 通过inode查找要请求的文件页是否已经缓存，如果存在，则会直接返回文件页的内容&lt;br/&gt;4. 如果不存在，则通过inode定位到文件磁盘地址，将数据从磁盘复制到页缓存， 然后再发给用户进程&lt;/p&gt;&lt;p&gt;&lt;span&gt;mmap&lt;/span&gt;&lt;/p&gt;&lt;p&gt;通过上面的分析，文件读取过程进行了两次数据copy过程，从而降低了数据读取效率。那么该如何进行优化呢，就需要提到mmap。&lt;/p&gt;&lt;p&gt;与传统的读取文件不同，使用mmap读取文件，系统会将用户虚拟内存与文件进行映射，通过对虚拟内存的读取就可以直接操作文件，避免了2次copy的过程。&lt;/p&gt;&lt;p&gt;mmap系统调用如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mmap函数：&lt;br/&gt;&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;void&lt;/span&gt;* &lt;span&gt;mmap&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;    void&lt;/span&gt; * addr,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;    size_t len,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;    int&lt;/span&gt; prot,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;    int&lt;/span&gt; flags,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;    int&lt;/span&gt; fd,&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;    off_t offset)&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;code&gt;&lt;span&gt;参数：&lt;br/&gt;addr: 映射到进程空间的起始地址&lt;br/&gt;len: 映射到进程空间的字节数&lt;br/&gt;prot: 指定访问权限，PROT_READ,PROT_WRITE, PROT_EXEC, PROT_NONE&lt;br/&gt;flags: 文件映射附加标记，&lt;br/&gt;fd: 文件描述符，通过fopen获取&lt;br/&gt;offset: 映射文件数据的偏移量&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一步：打开文件, 获取文件标识符fd&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;bool&lt;/span&gt; ReaderMmapFile::OpenFile() {&lt;br/&gt;  &lt;span&gt;struct&lt;/span&gt; stat st;&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (stat(filename_.c_str(), &amp;amp;st) &amp;lt; &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; ((st.st_mode &amp;amp; S_IFREG) != S_IFREG) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;&lt;br/&gt;  fd_ = open(filename_.c_str(), O_RDONLY);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (fd_ &amp;lt;= &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步: 文件映射&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;bool&lt;/span&gt; ReaderMmapFile::MMapFile()&lt;br/&gt;{&lt;br/&gt;  &lt;span&gt;// get size&lt;/span&gt;&lt;br/&gt;  file_size_ = lseek(fd_, &lt;span&gt;0&lt;/span&gt;, SEEK_END);&lt;br/&gt;  lseek(fd_, &lt;span&gt;0&lt;/span&gt;, SEEK_SET);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (file_size_ == &lt;span&gt;0&lt;/span&gt;) {&lt;br/&gt;    CloseFd();&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;// map content&lt;/span&gt;&lt;br/&gt;  data_ = mmap(&lt;br/&gt;      &lt;span&gt;NULL&lt;/span&gt;,&lt;br/&gt;      file_size_,&lt;br/&gt;      PROT_READ,  &lt;span&gt;// Read only&lt;/span&gt;&lt;br/&gt;      MAP_SHARED | MAP_POPULATE,  &lt;span&gt;// shared and precache&lt;/span&gt;&lt;br/&gt;      fd_,&lt;br/&gt;      &lt;span&gt;0&lt;/span&gt;);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (MAP_FAILED == data_) {&lt;br/&gt;    CloseFd();&lt;br/&gt;    data_ = &lt;span&gt;NULL&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;br/&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第三步：读取数据&lt;/p&gt;&lt;pre&gt;&lt;code&gt;通过映射地址即可直接访问文件数据&lt;br/&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;* ReaderMmapFile::data(){&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; data_;&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第四步: 解除映射，关闭文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;使用完之后，需要解除映射并关闭文件&lt;br/&gt;&lt;span&gt;void&lt;/span&gt; ReaderMmapFile::Close() {&lt;br/&gt;  munmap(data_, file_size_);&lt;br/&gt;  close(fd_);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mmap优点：&lt;br/&gt;1. 读取操作减少数据copy次数，提高了文件读取的效率&lt;br/&gt;2. 实现了用户空间和内核空间的高效交互方式&lt;br/&gt;3. 通过mmap还可以实现进程之间的内存共享&lt;/p&gt;&lt;h2&gt;数据结构&lt;/h2&gt;&lt;p&gt;前面已经解决了文件加载的性能问题，而实际过程中，读取的文件内容需要转化成程序内部的数据结构，数据结构的选择也是影响性能的一次因素。目前常用的数据结构如下：&lt;br/&gt;1. 自定义对象&lt;br/&gt;通过自定义对象， 然后通过序列化和反序列化进行读取和写入。此种方式缺点很明显：扩展性不强，兼容性差&lt;br/&gt;2. json&lt;br/&gt;json是非常常用一种数据接口，通常用于http接口数据传输。json虽然具有很好的扩展性，但是序列化后的数据过大，反序列化慢，说明json同样不适合作为文件的存储的数据格式&lt;br/&gt;3. protobuffer&lt;br/&gt;protobuffer是google开源的一种数据格式，以扩展性强，兼容性强，支持跨语言，序列化和反序列化快等优点著称，通常应用在RPC的数据传输，在某些场景下，protobuf亦可以作为文件的存储格式，可以得到很好的性能。&lt;br/&gt;4. flatbuffer&lt;br/&gt;flatbuffer同样是google开源的另外一种数据格式，具有protobuf同样的特性，与protobuff相比，flatbuffer有着以下两点优势:&lt;br/&gt;- 反序列化快：flatbuffer通过把数据扁平化为一个二进制数组中，通过偏移量可直接获取结构化的数据，省去了解析的过程。&lt;br/&gt;- 内存高效，速度快：数据访问只需要访问二进制的数据buffer, 不需要额外的内存&lt;/p&gt;&lt;p&gt;通过上面的分析，flatbuffer在解析/读取方面有着很大的优化，更适合做为文件存储的数据格式。&lt;/p&gt;&lt;h2&gt;flatbuffer文件应用&lt;/h2&gt;&lt;h3&gt;定义head和payload&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;文件头&lt;br/&gt;&lt;span&gt;struct&lt;/span&gt; FlatRepositoryHead {&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; checksum;&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; version_num;&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; shard_num;&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; shard_length[&lt;span&gt;0&lt;/span&gt;];&lt;br/&gt;&lt;br/&gt;  FlatRepositoryHead()&lt;br/&gt;    : checksum(&lt;span&gt;0&lt;/span&gt;),&lt;br/&gt;      version_num(&lt;span&gt;20160509&lt;/span&gt;),&lt;br/&gt;      shard_num(&lt;span&gt;0&lt;/span&gt;) {}&lt;br/&gt;&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; CheckSum() &lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;uint64_t&lt;/span&gt; ret = version_num;&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; shard_num; ++i) {&lt;br/&gt;      ret += shard_length[i];&lt;br/&gt;    }&lt;br/&gt;    ret += shard_num + &lt;span&gt;12345&lt;/span&gt;;&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; ret;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; FileSize() &lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;uint64_t&lt;/span&gt; ret = HeadSize();&lt;br/&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; shard_num; ++i) {&lt;br/&gt;      ret += shard_length[i];&lt;br/&gt;    }&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; ret;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;uint64_t&lt;/span&gt; HeadSize() &lt;span&gt;const&lt;/span&gt; {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;sizeof&lt;/span&gt;(rec::FlatRepositoryHead) +&lt;br/&gt;           &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;uint64_t&lt;/span&gt;) * shard_num;  &lt;span&gt;// NOLINT&lt;/span&gt;&lt;br/&gt;  }&lt;br/&gt;};&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;checksum: 文件校验位，用于校验文件有效性&lt;br/&gt;version_num:文件版本号&lt;br/&gt;shard_num: 文件数据块分片&lt;br/&gt;shard_length：每个分片数据的长度&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;payload&lt;/span&gt; &lt;span&gt;flatbuffer&lt;/span&gt;定义&lt;br/&gt;&lt;span&gt;table&lt;/span&gt; &lt;span&gt;FlatFeatureDict&lt;/span&gt; &lt;span&gt;{&lt;br/&gt;  &lt;span&gt;&lt;span&gt;type&lt;/span&gt;:&lt;span&gt;long&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;timestamp&lt;/span&gt;:&lt;span&gt;long&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;  &lt;span&gt;&lt;span&gt;value&lt;/span&gt;:&lt;span&gt;long&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;读取head&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;auto&lt;/span&gt; ptr = new_mmap_file-&amp;gt;uint8_data(); &lt;span&gt;//通过mmap获取数据&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;const&lt;/span&gt; FlatRepositoryHead* head = &lt;span&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span&gt;const&lt;/span&gt; FlatRepositoryHead*&amp;gt;(ptr);&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (head-&amp;gt;checksum != head-&amp;gt;CheckSum()) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  &lt;span&gt;if&lt;/span&gt; (head-&amp;gt;FileSize() != new_mmap_file-&amp;gt;size()) {&lt;br/&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;br/&gt;  }&lt;br/&gt;  ptr += head-&amp;gt;HeadSize();&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先通过mmap加载文件，然后读取文件头，数据校验成功之后即可读取正式数据&lt;/p&gt;&lt;h3&gt;读取payload&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;  ptr += head-&amp;gt;HeadSize(); &lt;span&gt;//跳过文件头后，就是实际的文件内容&lt;/span&gt;&lt;br/&gt;  &lt;span&gt;std&lt;/span&gt;::&lt;span&gt;vector&lt;/span&gt;&amp;lt;&lt;span&gt;const&lt;/span&gt; fbs::FlatFeatureDict*&amp;gt; dicts;&lt;br/&gt;  &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; head-&amp;gt;shard_num; ++i) {&lt;br/&gt;dicts.push_back(fbs::GetFlatFeatureDict(ptr));&lt;br/&gt;    ptr += head-&amp;gt;shard_length[i];&lt;br/&gt;  }&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过遍历分片个数，循环读取文件数据。其中fbs:GetFlatFeatureDict是通过flatbuffer库生成的函数，用于把二进制数据转化成结构化的数据。&lt;/p&gt;&lt;h3&gt;性能测试&lt;/h3&gt;&lt;p&gt;本段通过读取不同大小文件，对比fread和mmap的读取性能&lt;/p&gt;&lt;h3&gt;1G文件测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;fread：&lt;br/&gt;[root@kvmvps835-rpjyd mmap]&lt;span&gt;# time ./read_test -f  &lt;span&gt;1000&lt;/span&gt;M.dat&lt;/span&gt;&lt;br/&gt;The answer is: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m2&lt;span&gt;.316&lt;/span&gt;s&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m2&lt;span&gt;.040&lt;/span&gt;s&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0&lt;span&gt;.188&lt;/span&gt;s&lt;br/&gt;&lt;br/&gt;mmap:&lt;br/&gt;[root@kvmvps835-rpjyd mmap]&lt;span&gt;# time ./read_test -m  &lt;span&gt;1000&lt;/span&gt;M.dat&lt;/span&gt;&lt;br/&gt;The answer is: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m2&lt;span&gt;.860&lt;/span&gt;s&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m1&lt;span&gt;.842&lt;/span&gt;s&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0&lt;span&gt;.292&lt;/span&gt;s&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;2G文件测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fread&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -f  &lt;span&gt;2000&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m4.&lt;span&gt;740s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m4.&lt;span&gt;162s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;371s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;mmap：&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -m &lt;span&gt;2000&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m5.&lt;span&gt;892s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m3.&lt;span&gt;712s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;623s&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;2.1G文件测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fread&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -f  &lt;span&gt;2100&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m4.&lt;span&gt;751s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m4.&lt;span&gt;177s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;374s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;mmap&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -m  &lt;span&gt;2100&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m1.&lt;span&gt;614s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;000s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;433s&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;2.5G文件测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fread&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -f  &lt;span&gt;2500&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m5.&lt;span&gt;746s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m5.&lt;span&gt;045s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;460s&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;span&gt;mmap&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -m  &lt;span&gt;2500&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m2.&lt;span&gt;004s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;000s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;554s&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;3G文件测试&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;fread&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -f  &lt;span&gt;3000&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m6.&lt;span&gt;806s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m6.&lt;span&gt;068s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;486s&lt;/span&gt;&lt;br/&gt;&lt;span&gt;mmap&lt;/span&gt;:&lt;br/&gt;[root&lt;span&gt;@kvmvps835-rpjyd&lt;/span&gt; mmap]# time ./read_test -m  &lt;span&gt;3000&lt;/span&gt;M.dat&lt;br/&gt;The answer &lt;span&gt;is&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;real    &lt;span&gt;0&lt;/span&gt;m2.&lt;span&gt;306s&lt;/span&gt;&lt;br/&gt;user    &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;000s&lt;/span&gt;&lt;br/&gt;sys &lt;span&gt;0&lt;/span&gt;m0.&lt;span&gt;541s&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试总结：&lt;br/&gt;- 通过fread读取文件耗时与文件大小成线性增长&lt;br/&gt;- 通过mmap读取文件，当文件&amp;lt;=2G时，性能比较差，当文件&amp;gt;2G，读取性能大幅度提升&lt;br/&gt;- 当文件&amp;lt;=2G时，fread的性能比mmap略好;文件&amp;gt;2G时，mmap的读取性能是fread的2.5倍左右&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;p&gt;通过使用mmap读取文件，并结合flatbuffer高效的数据结构，可以大幅提高文件读取的性能，可以应用在那些需要加载超大文件到内存中的场景。本文只是浅显的描述了mmap和flatbuffer的应用，如有错误的地方，欢迎指正。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>a4e072970e91fb8deaf5f67652a51b3c</guid>
<title>33 张图剖析 ReentrantReadWriteLock 源码</title>
<link>https://toutiao.io/k/86hnzxy</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;section data-tool=&quot;mdnice编辑器&quot; data-website=&quot;https://www.mdnice.com&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;大家好，我是阿星，今天是一篇硬核文，请各位读者大大们系好安全带，马上要发车了。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WELEd8OmEibOiajRktIJABL4icHyevghLibPG2xvrvAp3TqleCE3z53EpbtA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;220&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;晕车的朋友，可以先吃一颗阿星独家秘制的晕车药，童叟无欺，货真价实，还免费，白嫖党狂喜（&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDg2OTAxNg==&amp;amp;mid=2652048892&amp;amp;idx=1&amp;amp;sn=1b12dc819ec677a2af67875d7fbbe4a0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;16张图揭开AQS&lt;/a&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;本文大纲如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;474&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.8489130434782609&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEQnkSSx5R6Wrt32TF9Mw1fLNjlU4scpc8STbdwLHOoZHzUVhA8Jcq2w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;920&quot;/&gt;&lt;/figure&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;纵观全局&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;我的英文名叫&lt;/span&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;&lt;span&gt;（后面简称&lt;/span&gt;&lt;code&gt;RRW&lt;/code&gt;&lt;span&gt;），大家喜欢叫我读写锁，因为我常年混迹在读多写少的场景。&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读写锁规范&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;作为合格的读写锁，先要有读锁与写锁才行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以声明了&lt;code&gt;ReadWriteLock&lt;/code&gt;接口，作为读写锁的基本规范。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;344&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.6168831168831169&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEvB6yiayChV4agfVVztad6szuuVMd9MuDCvqTibeqLDUscUkA6Uyy38hQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;之后都是&lt;strong&gt;围绕着规范&lt;/strong&gt;去实现读锁与写锁。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;读锁与写锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;WriteLock与ReadLock就是读锁和写锁，它们是&lt;span&gt;RRW&lt;/span&gt;实现&lt;/span&gt;&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;span&gt;接口的产物。&lt;/span&gt;&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但读锁、写锁也要遵守锁操作的基本规范。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以WriteLock与ReadLock都实现了&lt;code&gt;Lock&lt;/code&gt;接口。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;204&quot; data-backw=&quot;558&quot; data-ratio=&quot;0.36464088397790057&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEtibuMJF5Oe0wdPRrXRiaL6ef9gP5UWpD4GHicN9piadicibIcwjiaJh7v5EJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1991&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;那么WriteLock与ReadLock对Lock接口具体是&lt;strong&gt;如何实现&lt;/strong&gt;的呢？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;自然是少不了我们的老朋友&lt;code&gt;AQS&lt;/code&gt;了。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;AQS&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;众所周知，要实现锁的基本操作，必须要仰仗&lt;code&gt;AQS&lt;/code&gt;老大哥了。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;AQS（AbstractQueuedSynchronizer）&lt;/code&gt;抽象类定义了一套多线程访问共享资源的同步模板，解决了实现同步器时涉及的大量细节问题，能够极大地减少实现工作，用大白话来说，&lt;code&gt;AQS&lt;/code&gt;为加锁和解锁过程提供了统一的模板函数，只有少量细节由子类自己决定。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AQS简化流程图如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.4586518415566366&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEia0GicHkT1IKRR3eJiakxgg2vSL964MB3Wgn0B61MiblUJM5iaya1P4s9Uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1439&quot; data-backw=&quot;1080&quot; data-backh=&quot;495&quot;/&gt;&lt;/figure&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果读者想深入AQS细节，可以看阿星的这篇文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDg2OTAxNg==&amp;amp;mid=2652048892&amp;amp;idx=1&amp;amp;sn=1b12dc819ec677a2af67875d7fbbe4a0&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;16张图揭开AQS&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;Sync&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;AQS为加锁和解锁过程提供了统一的模板函数，只有少量细节由子类自己决定，但是WriteLock与ReadLock&lt;strong&gt;没有直接去继承AQS&lt;/strong&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为WriteLock与ReadLock觉得，自己还要去继承&lt;code&gt;AQS&lt;/code&gt;实现一些两者可以公用的抽象函数，不仅麻烦，还有重复劳动。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;所以干脆单独提供一个对锁操作的类，由WriteLock与ReadLock持有使用，这个类叫&lt;code&gt;Sync&lt;/code&gt;。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;Sync继承AQS实现了如下的&lt;span&gt;核心&lt;/span&gt;抽象函数&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;tryAcquire&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;release&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;tryAcquireShared&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;tryReleaseShared&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.6726283048211509&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEEYUv6siaylXRfQ7CIu1mEn5q9zQoiaKic9jHZsluvkBkpPhic7slj0Ctkw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1286&quot; data-backw=&quot;1080&quot; data-backh=&quot;726&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;其中tryAcquire、release是为&lt;code&gt;WriteLock&lt;/code&gt;写锁准备的。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;tryAcquireShared、tryReleaseShared是为&lt;code&gt;ReadLock&lt;/code&gt;读锁准备的，这里阿星后面会说。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;上面说了Sync实现了一些&lt;code&gt;AQS&lt;/code&gt;的核心抽象函数，但是Sync本身也有一些重要的内容，看看下面这段代码&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-ratio=&quot;0.41048593350383633&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WERgqHHzlKb5MJGtyiaq1IIiaCAYQG98riczOJ0NaNH58qia4Zz82Zqwgx5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们都知道&lt;code&gt;AQS&lt;/code&gt;中维护了一个&lt;code&gt;state&lt;/code&gt;状态变量，正常来说，维护读锁与写锁状态需要两个变量，但是为了节约资源，使用高低位切割实现&lt;code&gt;state&lt;/code&gt;状态变量维护两种状态，即高&lt;code&gt;16&lt;/code&gt;位表示读状态，低&lt;code&gt;16&lt;/code&gt;位表示写状态。&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;关于读写锁状态设计具体细节可以看阿星的文章：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDg2OTAxNg==&amp;amp;mid=2652049849&amp;amp;idx=1&amp;amp;sn=fe69e7e24a8aa56f8a420f2ce65fbae7&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;ReentrantReadWriteLock的位运算&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Sync中还定义了HoldCounter与ThreadLocalHoldCounter&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;HoldCounter是用来记录读锁重入数的对象&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong/&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;ThreadLocalHoldCounter是ThreadLocal变量，用来存放第一个获取读锁线程外的其他线程的读锁重入数对象&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;&lt;strong/&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img data-backh=&quot;538&quot; data-backw=&quot;1038&quot; data-ratio=&quot;0.5183044315992292&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEvfGqGNRlQn60kzwvXbicFUEdQlaLibQqUgcnqt9oyTe0PgYcYnn6cwZQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1038&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote data-tool=&quot;mdnice编辑器&quot;&gt;&lt;p&gt;如果读者对&lt;code&gt;ThreadLocal&lt;/code&gt;不太熟悉，可以去看阿星的文章: &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwMDg2OTAxNg==&amp;amp;mid=2652048380&amp;amp;idx=1&amp;amp;sn=d4420022dee3f10a39cbc8ca24fcf955&amp;amp;scene=21#wechat_redirect&quot; data-linktype=&quot;2&quot;&gt;保姆级教学，22张图揭开ThreadLocal&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;公平与非公平策略&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;你看，人家&lt;code&gt;ReentrantLock&lt;/code&gt;都有公平与非公平策略，所以&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;也要有。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;什么是公平与非公平策略？&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为在&lt;code&gt;AQS&lt;/code&gt;流程中，获取锁失败的线程，会被构建成节点入队到&lt;code&gt;CLH&lt;/code&gt;队列，其他线程释放锁会唤醒&lt;code&gt;CLH&lt;/code&gt;队列的线程重新竞争锁，如下图所示（简化流程）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;477&quot; data-backw=&quot;837&quot; data-ratio=&quot;0.5698924731182796&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE6u6sv5qicVbCsibHDiazPfjRKrvwiajnWfcWUGQib5fvjBpibVhYIUydT3Cg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;837&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非公平策略是指，非&lt;code&gt;CLH&lt;/code&gt;队列的线程与&lt;code&gt;CLH&lt;/code&gt;队列的线程竞争锁，大家各凭本事，不会因为你是&lt;code&gt;CLH&lt;/code&gt;队列的线程，排了很久的队，就把锁让给你。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;公平策略是指，严格按照&lt;code&gt;CLH&lt;/code&gt;队列顺序获取锁，一定会让&lt;code&gt;CLH&lt;/code&gt;队列线程竞争成功，如果非&lt;code&gt;CLH&lt;/code&gt;队列线程一直占用时间片，那就一直失败，直到时间片轮到&lt;code&gt;CLH&lt;/code&gt;队列线程为止，所以公平策略的性能会更差。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;403&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.3727598566308244&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEicUIHZTrHoOG8Iuw0HmLfeMfba63OXIRWUKz5mGJlnNLkKUawfS1TqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1116&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;回到正题，为了支持公平与非公平策略，Sync扩展了&lt;code&gt;FairSync、NonfairSync&lt;/code&gt;子类，两个子类实现了readerShouldBlock、writerShouldBlock函数，&lt;strong&gt;即读锁与写锁是否阻塞&lt;/strong&gt;。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;746&quot; data-backw=&quot;996&quot; data-ratio=&quot;0.748995983935743&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEnybialXJNG9GZxRNfnFwiavhb0P8w8Td8OicoRGQznkuFkHMut4NjfMbA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;996&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;&lt;span&gt;readerShouldBlock、writerShouldBlock函数在什么地方使用阿星后面会说。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ReentrantReadWriteLock全局图&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后阿星把前面讲过的内容，全部组装起来，构成下面这张图。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;753&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.6972644376899696&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEsmLAYNhasbrSicOiaCesN4meZib3YpXX80BzhGh0Ueg5wraviaAppVqn4Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1645&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;有了全局观后，后面就可以深入细节逐个击破了。&lt;/p&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;深入细节&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;后面我们只要攻破&lt;code&gt;5&lt;/code&gt;个细节就够了，分别是读写锁的创建、获取写锁、释放写锁、获取读锁、释放读锁。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;ReentrantReadWriteLock的创建&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;读写锁的创建，会初始化化一系列类，代码如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;496&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.45907928388746805&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEGteXqjcTGG7r8pJ2Q6IUU7DMU0WgeHDNjyAjgE0iclTKMMicHtdNfGKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;默认是非公平策略，如果想用公平策略，可以直接调用有参构造器，传入&lt;code&gt;true&lt;/code&gt;即可。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;但不管是创建FairSync还是NonfairSync，都会触发&lt;code&gt;Sync&lt;/code&gt;的无参构造器，因为&lt;code&gt;Sync&lt;/code&gt;是它们的父类（&lt;strong&gt;本质上它们俩都是Sync&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;260&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.24040920716112532&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEzH2ZRR39GzZJxZrcGic2O71Xb3g5VjfFTcLU2rI80m7deBpnCE5VnYA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为Sync需要提供给ReadLock与WriteLock使用，所以创建ReadLock与WriteLock时，会接收&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;对象作为入参。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;391&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.3618925831202046&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEHjzj1lQlyoa9yGFSaVAZZf6pM0d7wbzuwAicDZ8naIz7XmZy9dk8wbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后通过&lt;code&gt;ReentrantReadWriteLock.sync&lt;/code&gt;把&lt;code&gt;Sync&lt;/code&gt;交给了ReadLock与WriteLock。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;获取写锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们遵守ReadWriteLock接口规范，调用&lt;code&gt;ReentrantReadWriteLock.writeLock&lt;/code&gt;函数获取写锁对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;887&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.8209806157354618&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE2tA7IUUkjV4yhhAaeV0wvokWEPC7MUZV2jfJS0Z0EzQmnQr2BZlLoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取到写锁对象后，遵守Lock接口规范，调用&lt;code&gt;lock&lt;/code&gt;函数获取写锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WriteLock.lock函数是由&lt;code&gt;Sync&lt;/code&gt;实现的（&lt;strong&gt;FairSync或NonfairSync&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;770&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.7126567844925884&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE9qr97tYzS0gdEPcicricCTuyauPGMZo3OBiaaq9WicnlyduRiaU87IVEkTw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sync.acquire(1)&lt;/code&gt;函数是AQS中的独占式获取锁流程模板（Sync继承自AQS）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;536&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.4960091220068415&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE3Ijb1gV1y8sYBAVDswxczICiag1N9Ghbjr8icsaJmj6Yibssvt0eFCOeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WriteLock.lock调用链如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;615&quot; data-backw=&quot;482&quot; data-ratio=&quot;1.2759336099585061&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEDZw2LNyaRuJo1BWnjA6ucAd76iclumfq80SfpTZrcp3pbT2TfB0p4eA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;482&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只关注&lt;code&gt;tryAcquire&lt;/code&gt;函数，其他函数是AQS的获取独占式锁失败后的流程内容，不属于本文范畴，&lt;code&gt;tryAcquire&lt;/code&gt;函数代码如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;910&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.8426453819840365&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEZjuBic5R7LydXnhngvIeqz36ZKibSgcoQXSKVOKpt0dsHWGebawtfkFQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了易于理解，阿星把它转成流程图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;772&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.7152480097979179&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEgDGxYOXo1HL5E7Lp59richhg0K6Z8Hgx2qWyCVrKoKAe78zeuAg3NwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1633&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过流程图，我们发现了一些要点&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;读写互斥&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;写写互斥&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;写锁支持同一个线程重入&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;writerShouldBlock写锁是否阻塞实现取决公平与非公平的策略（FairSync和NonfairSync）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;释放写锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取到写锁，临界区执行完，要记得释放写锁（&lt;strong&gt;如果重入多次要释放对应的次数&lt;/strong&gt;），不然会阻塞其他线程的读写操作，调用&lt;code&gt;unlock&lt;/code&gt;函数释放写锁（&lt;strong&gt;Lock接口规范&lt;/strong&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WriteLock.unlock函数也是由Sync实现的（&lt;strong&gt;FairSync或NonfairSync&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;1004&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.9293044469783353&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEIsBzVP6ODiaBYIBeNOkh7zYy89Fmiaf9EqakLueN5mOEKG3XYicts0viaw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sync.release(1)&lt;/code&gt;执行的是AQS中的独占式释放锁流程模板（Sync继承自AQS）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;582&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.5393386545039909&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE7Q8BqibqONOU6KkMI18aRukBkv4kGyjDkNgUYEjF7ke7k4mNGVuhTYQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;WriteLock.unlock调用链如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;673&quot; data-backw=&quot;446&quot; data-ratio=&quot;1.5089686098654709&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEXWGIb0YgQK7q06yp0IKr63kw64ZqPozeHBa369Mxt7pLLItPBVYbWg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;446&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;再来看看&lt;code&gt;tryRelease&lt;/code&gt;函数，其他函数是AQS的释放独占式成功后的流程内容，不属于本文范畴，&lt;code&gt;tryRelease&lt;/code&gt;函数代码如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;489&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.4526795895096921&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEhJ9XH9fMDhibcib2cYibqUm2Ctoz8LqthxN3t1M5q3XHuY8oicZyibTuzrg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了易于理解，阿星把它转成流程图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;738&quot; data-backw=&quot;617&quot; data-ratio=&quot;1.1961102106969206&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEuImClQXRPGHDrFibJ8tJic8ae5UtejOOtZBPvhIQs96v7dEXyh7Ma0ug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;因为同一个线程可以对相同的写锁重入多次，所以也要释放的相同的次数。&lt;/p&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;获取读锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们遵守ReadWriteLock接口规范，调用&lt;code&gt;ReentrantReadWriteLock.readLock&lt;/code&gt;函数获取读锁对象。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;1099&quot; data-backw=&quot;1080&quot; data-ratio=&quot;1.0179028132992327&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEoiaic1QdA0TsCcyqw84FKEZf2KpqLCIRWeGPo51E0ZqG6DmxJiazJKwmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取到读锁对象后，遵守Lock接口规范，调用&lt;code&gt;lock&lt;/code&gt;函数获取读锁。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ReadLock.lock函数是由&lt;code&gt;Sync&lt;/code&gt;实现的（&lt;strong&gt;FairSync或NonfairSync&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;916&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.8478260869565217&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WE3TdWMickOkVSF1X1IeRfRLP5Ajd8FaSY1RDBWBRlBwtuPTibbeVaudRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sync.acquireShared(1)&lt;/code&gt;函数执行的是AQS中的共享式获取锁流程模板（Sync继承自AQS）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;417&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.38618925831202044&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEoWrYibb1gzplMhOfUIFUzUGDZknWkGb6qeksztm9tlY6LwQpSW1lpJw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ReadLock.lock调用链如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;629&quot; data-backw=&quot;581&quot; data-ratio=&quot;1.0826161790017212&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEtVw0L8qx3GibEzsXsiaGr82oB7I9ibzKeRJj08v7Tt2OlDEKDAKZeDFAQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;581&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只关注&lt;code&gt;tryAcquireShared&lt;/code&gt;函数，doAcquireShared函数是AQS的获取共享式锁失败后的流程内容，不属于本文范畴，&lt;code&gt;tryAcquireShared&lt;/code&gt;函数代码如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;1414&quot; data-backw=&quot;1080&quot; data-ratio=&quot;1.3094629156010231&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEDo9GibZUBOxheKVA8HhmAWohYYLQiaykOeicNSbHnFTOqHRCboSMzkbYg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;代码还挺多的，为了易于理解，阿星把它转成流程图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;829&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.7678082191780822&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEe66icjxm8IXGsxd9QXgDQCfG7CUOnauAC2t17vQaKDUXiavrzUueU3TA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1460&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;通过流程图，我们发现了一些要点&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;读锁共享，读读不互斥&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;读锁可重入，每个获取读锁的线程都会记录对应的重入数&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;读写互斥，锁降级场景除外&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;支持锁降级，持有写锁的线程，可以获取读锁，但是后续要记得把读锁和写锁读释放&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;strong&gt;readerShouldBlock读锁是否阻塞实现取决公平与非公平的策略（FairSync和NonfairSync）&lt;/strong&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span/&gt;&lt;span&gt;释放读锁&lt;/span&gt;&lt;/h2&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;获取到读锁，执行完临界区后，要记得释放读锁（&lt;strong&gt;如果重入多次要释放对应的次数&lt;/strong&gt;），不然会阻塞其他线程的写操作，通过调用&lt;code&gt;unlock&lt;/code&gt;函数释放读锁（&lt;strong&gt;Lock接口规范&lt;/strong&gt;）。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ReadLock.unlock函数也是由Sync实现的（&lt;strong&gt;FairSync或NonfairSync&lt;/strong&gt;）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;1362&quot; data-backw=&quot;1080&quot; data-ratio=&quot;1.2608695652173914&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEkjxPL9PtuiakTBJsWKJZpibUL2ywba09e3oU4UekenZFWIibgf38H4vqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1564&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;&lt;code&gt;sync.releaseShared(1)&lt;/code&gt;函数执行的是AQS中的共享式释放锁流程模板（Sync继承自AQS）。&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;653&quot; data-backw=&quot;1080&quot; data-ratio=&quot;0.6043329532497149&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEqJdZcYkBpyvY5dickN3ibqoFUPN18vzcicVI7x7w7FQxnqVJfoQy0RgQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;ReadLock.unlock调用链如下图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;649&quot; data-backw=&quot;537&quot; data-ratio=&quot;1.2085661080074488&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEDshxiboiarUMDjOY0WNzhMh8PLmld3XabqXyBxDDO0bUXGqoDmq31BnA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;537&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们只关注&lt;code&gt;tryReleaseShared&lt;/code&gt;函数，doReleaseShared函数是AQS的释放共享式锁成功后的流程内容，不属于本文范畴，&lt;code&gt;tryReleaseShared&lt;/code&gt;函数代码如下&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;1284&quot; data-backw=&quot;1080&quot; data-ratio=&quot;1.1892816419612315&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEdb9Ns8KJaSB4M5SviatmSziaUjWOKibya8jQCK98KK1k7qcTrpt46kh8w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1754&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;为了易于理解，阿星把它转成流程图&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;866&quot; data-backw=&quot;571&quot; data-ratio=&quot;1.5166374781085814&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEXZsxxWmYXicavMwEF1q95Mhwa7CRHia136xXLvQDBHicyB8X0hJ9xXTOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;571&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;这里有三点需要注意&lt;/p&gt;&lt;ul data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;第一点：线程读锁的重入数与读锁数量是两个概念，线程读锁的重入数是每个线程获取同一个读锁的次数，读锁数量则是所有线程的读锁重入数总和。&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;第二点：AQS的共享式释放锁流程模板中，只有全部的读锁被释放了，才会去执行doReleaseShared函数&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;第三点：因为使用的是AQS共享式流程模板，如果CLH队列后面的线程节点都是因写锁阻塞的读锁线程节点，会传播唤醒&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后阿星做个小结，&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;底层实现与&lt;code&gt;ReentrantLock&lt;/code&gt;思路一致，它们都离不开&lt;code&gt;AQS&lt;/code&gt;，都是声明一个继承&lt;code&gt;AQS&lt;/code&gt;的&lt;code&gt;Sync&lt;/code&gt;，并在&lt;code&gt;Sync&lt;/code&gt;下扩展公平与非公平策略，后续的锁相关操作都委托给公平与非公平策略执行。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;我们还发现，在&lt;code&gt;AQS&lt;/code&gt;中除了独占式模板，还有共享式模板，它们在多线程访问共享资源的流程会有所差异，就如&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;中读锁使用共享式，写锁使用独占式。&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;最后再捋一捋写锁与读锁的逻辑&lt;/p&gt;&lt;ol data-tool=&quot;mdnice编辑器&quot; class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;section&gt;读读不阻塞&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写锁阻塞写之后的读写锁，但是不阻塞写锁之前的读锁线程&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写锁会被写之前的读写锁阻塞&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;读锁节点唤醒会无条件传播唤醒CLH队列后面的读锁节点&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;写锁可以降级为读锁，防止更新丢失&lt;/section&gt;&lt;/li&gt;&lt;li&gt;&lt;section&gt;读锁、写锁都支持重入&lt;/section&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;历史好文推荐&lt;/span&gt;&lt;/h1&gt;&lt;h1 data-tool=&quot;mdnice编辑器&quot;&gt;&lt;span&gt;关于我&lt;/span&gt;&lt;/h1&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;阿星是一个热爱技术的&lt;code&gt;Java&lt;/code&gt;程序猿，公众号  &lt;strong&gt;「程序猿阿星」&lt;/strong&gt; 定期分享有趣有料的精品原创文章！&lt;/p&gt;&lt;figure data-tool=&quot;mdnice编辑器&quot;&gt;&lt;img data-backh=&quot;166&quot; data-backw=&quot;288&quot; data-ratio=&quot;0.5763888888888888&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/23OQmC1ia8nx2zmNic4YYIJgbIvjyWI9WEibNJv0C89EowPxSJicN2arvJicN3VBngDcpodRybUtZ2j8ia23t2elX9EQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;288&quot;/&gt;&lt;/figure&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;非常感谢各位小哥哥小姐姐们能看到这里，原创不易，文章有帮助可以关注、点个赞、分享与评论，都是支持（莫要白嫖）！&lt;/p&gt;&lt;p data-tool=&quot;mdnice编辑器&quot;&gt;愿你我都能奔赴在各自想去的路上，我们下篇文章见。&lt;/p&gt;&lt;/section&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>1043e065ee0f561be90c04c450e998a3</guid>
<title>[译] Minerva：Airbnb 的大规模数据指标系统（一）</title>
<link>https://toutiao.io/k/33sxyvz</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;数据是驱动业务、提供市场洞见的关键。这是Airbnb Minerva系列文章的第一篇，介绍了Airbnb的数据指标平台Minerva的诞生背景、基本功能。原文链接：[How Airbnb Achieved Metric Consistency at Scale](https://medium.com/airbnb-engineering/how-airbnb-achieved-metric-consistency-at-scale-f23cc53dea70)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;img data-ratio=&quot;0.405&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkOLicDEG1aSPFt10BZhVwM7IOZHR8Aibms98yjA6rBIUrdoUlg7hgW9Dw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据反映了用户的心声，在2019新冠病毒病大流行期间，我们看到使用Airbnb旅行已经变得极端本地化&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;简介&lt;/h3&gt;&lt;p&gt;Airbnb依靠数据做出关键决策，通过随机对照实验验证产品想法，严格跟踪业务表现，以确保为利益相关者实现价值最大化。为了实现这些目标，我们需要构建一个健壮的数据平台，以满足内部用户的端到端需求。&lt;/p&gt;&lt;p&gt;虽然我们之前已经分享了如何将数据导入数据仓库&lt;span&gt;[1]&lt;/span&gt;，以及如何帮助用户使用上下文数据进行自己的分析&lt;span&gt;[2]&lt;/span&gt;，但我们还没有讨论中间层：如何正确建模并将数据转换为准确的、可以进行分析的数据集。&lt;/p&gt;&lt;p&gt;在这篇文章中，我们将分享构建Minerva的过程。Minerva是Airbnb的指标平台，在全公司作为分析、报告和实验的唯一可信数据源。我们将介绍Minerva的创建背景、核心功能和工具生态系统，并详细介绍它对Airbnb的影响。在下一篇文章中，我们将深入探讨Minerva背后的技术，并分享我们一路学到的经验教训。通过发布这个系列，希望我们的读者能够欣赏像Minerva这样的系统的力量，在为自己的组织创建类似东西的时候可以受到一定的启发。&lt;/p&gt;&lt;h3&gt;Airbnb数据分析系统简史&lt;/h3&gt;&lt;p&gt;和许多数据驱动的公司一样，Airbnb在其数据之旅的起步阶段并不顺利。大约在2010年，全公司只有一名全职数据分析师，而他的笔记本电脑实际上就是公司的数据仓库。查询通常是直接针对生产数据库进行的，昂贵的查询偶尔会导致严重事故，甚至导致Airbnb.com瘫痪。尽管存在缺陷，但这个简单的解决方案多年来帮助Airbnb找到了许多增长机会。&lt;/p&gt;&lt;p&gt;随着Airbnb在2010年代初的持续增长，越来越多的数据科学家加入了公司&lt;span&gt;[3]&lt;/span&gt;，数据的规模和多样性都在不断增长。就在那时，我们经历了第一次变革：升级和稳定我们的数据基础设施&lt;span&gt;[4]&lt;/span&gt;。我们从Chronos转向了自己开发的、开源的Apache Airflow&lt;span&gt;[5]&lt;/span&gt;，用于工作流编排，并投入资源构建了一套名为“core_data”的关键核心数据表。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.5842857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfk2miaVbiaZAh6hPgAI2MgeNorSRY5gvRqMhfqhcCKhvvp0MatZCQNEZqA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Airbnb和支撑它的数据多年来大幅增长&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;以“core_data”为基础，Airbnb的数据分析开始蓬勃发展。首先，我们通过建立&lt;span&gt;[6]&lt;/span&gt;和扩展&lt;span&gt;[7]&lt;/span&gt;Airbnb的测试平台，将A/B testing文化引入Airbnb。我们建立了一个内部的数据目录--Dataportal&lt;span&gt;[8]&lt;/span&gt;，来组织和记录我们的数据，并创建了开源的Apache Superset&lt;span&gt;[9]&lt;/span&gt;，支持更多的用户可以独立的以交互式的方式分析数据。最后，我们推出了Data University&lt;span&gt;[10]&lt;/span&gt;来支持数据教育，这是一个面向非数据科学家进行数据技能教育的项目，旨在让Airbnb的数据分析大众化。&lt;/p&gt;&lt;h3&gt;成长的烦恼&lt;/h3&gt;&lt;p&gt;虽然“core_data”帮助Airbnb的数据能力提升了几个台阶，但我们为此也付出了巨大的代价。事实上，数据和用例的激增给数据的生产者和消费者带来了严重的成长烦恼。&lt;/p&gt;&lt;p&gt;首先，随着“core_data”越来越受欢迎，更多的数据生产者希望使用它进行分析、预测和实验。每天都会有新表基于”core_data“表创建出来，但却无法知道是否已经存在类似的表。我们仓库的复杂性持续增长，数据变更变得不可能被跟踪。当发现并修复了上游的数据问题时，并不能保证修复会传播到所有下游作业。结果，数据科学家和工程师花了无数的时间调试数据差异，到处救火，经常感到效率低下和挫败感。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.42714285714285716&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkrvjv5KGFmico0LdnNjWa9xYRSgiadfTLqYHetzibrdDL6mwzDwTozuGtw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;建立在&#x27; core_data &#x27;之上的派生表的激增造成了一些严重的成长烦恼&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;其次，关于数据的使用，我们听到决策者抱怨说，对于非常简单的业务问题，不同的团队报告了不同的数字，而且没有简单的方法知道哪个数字是正确的。几年前，当我们的CEO Brian问一些简单的问题，比如哪个城市在前一周的预订量最多时，Data Science和Finance有时会使用不同的表、指标定义和业务逻辑提供不同的答案。随着时间的推移，即使是数据科学家也开始怀疑自己的数据，对数据质量的信心下降，决策者的信任也下降了。&lt;/p&gt;&lt;h3&gt;与Minerva一起克服成长的烦恼&lt;/h3&gt;&lt;p&gt;随着这些痛点的恶化，Airbnb开始了一项为期数年的改革其数据仓库的旅程，目标是大幅提高公司的数据质量。作为第一步，我们的数据工程团队从头重建了几个关键的业务数据模型，这导致了一组经过认证的、精简的、规范化的表，去掉了不必要的连接。这些经过审查的表现在成为了我们分析仓库的新基础。&lt;/p&gt;&lt;p&gt;然而，我们的工作并没有就此停止。为了将这些表格转化为见解，我们需要能够通过编程将它们连接在一起，以创建易于分析的数据集。我们需要能够在业务逻辑发生变化时填充数据。最后，我们需要在不同的消费工具中正确、一致的呈现数据。&lt;/p&gt;&lt;p&gt;这就是Airbnb的度量平台Minerva出现的背景。Minerva将不同的真实数据和不同的维度作为输入，执行数据反规格化，并将聚合的数据提供给下游应用程序。Minerva API在上游数据和下游消费之间搭建了桥梁，使数据工程团队能够灵活地修改核心表，同时维护对各种下游消费者的支持。这个API在Airbnb的下一代数据仓库架构中起着至关重要的作用。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4328571428571429&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfk3OwbnXbuoCiaMW9rtzb2CiaQAhtVPRibv8pBa5zFnQR2iatngjgK5QvZfw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Minerva是Airbnb的指标平台，在Airbnb的新数据仓库架构中扮演着核心角色&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;到目前为止，我们在Minerva上有超过12000个指标、4000个维度、超过200个数据生成器支撑不同的职能（例如：数据、产品管理、财务、工程等）和团队（例如：核心产品，信托，支付等）。现在，大多数团队都认为Minerva是他们在Airbnb上进行数据分析、报告和实验的首选框架。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.4014285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkB1QcOWqQcVOercAicGaZ25IBWaXvRD8PJvzwRoRLTV0KzQhE4OPhUHw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去的两年里，Airbnb内部对Minerva的使用有了巨大的增长&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;Minerva的数据生产&lt;/h3&gt;&lt;p&gt;从基础架构的角度来看，Minerva是建立在开源项目之上的。它使用Airflow进行工作流编排，使用Apache Hive和Apache Spark作为计算引擎，使用Presto和Apache Druid进行消费。从指标的创建到计算、服务、消费，以及最终的弃用，Minerva涵盖了指标的整个生命周期。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.40714285714285714&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkA5fbqG6KnF8Z2I2icib6z5MLlbHbC7nfL6ibjyiaicnibktYW6oTpUjRpDxg/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Minerva在Airbnb负责管理指标的整个生命周期&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指标定义（Metrics Definition）&lt;/span&gt;：Minerva在一个集中的Github仓库中定义了关键的业务指标、维度和其他元数据，公司里任何人都可以查看和更新这些数据。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;已验证的工作流（Validated Workflow）&lt;/span&gt;：Minerva开发流程强制执行最佳数据工程实践，如代码审查、静态检查和测试运行。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;DAG编排（DAG Orchestration）&lt;/span&gt;：Minerva通过最大限度重用数据和中间结果有效的执行数据去规格化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;计算运行时（Computation Runtime）&lt;/span&gt;：Minerva有一个复杂的计算流，可以在作业失败后执行自愈操作，并有内置的检查来确保数据质量。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;指标/元数据服务（Metrics / Metadata Serving）&lt;/span&gt;：Minerva提供了一个统一的数据API，可以按需提供聚合指标和原始指标。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;灵活的回填（Flexible Backfills）&lt;/span&gt;：Minerva对数据执行版本控制，因此可以自动跟踪和回填对数据集的重大更改。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据管理（Data Management）&lt;/span&gt;：Minerva自带一系列内置数据管理功能（如成本归因、GDPR选择性删除、数据访问控制和自动弃用策略等）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据保留（Data Retention）&lt;/span&gt;：Minerva构建了基于使用的数据保留和垃圾收集功能，可以自动删除资源占用大但却没人用的数据集。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上面提到的特性允许我们标准化度量数据的创建、计算和交付。在下一篇文章中，我们将深入研究这些特性，并进行更详细的解释!&lt;/p&gt;&lt;h3&gt;Minerva的数据消费&lt;/h3&gt;&lt;p&gt;Minerva的产品愿景是允许用户“一次性定义参数，随处使用”。也就是说，在Minerva中创建的指标应该可以很容易地在Superset&lt;span&gt;[2]&lt;/span&gt;等公司仪表板工具中访问，在我们的A/B测试框架ERF&lt;span&gt;[6]&lt;/span&gt;中跟踪，或者由我们的异常检测算法处理以发现业务异常，这些都只是其中的一些例子。在过去的几年里，我们与其他团队紧密合作，在Minerva的基础上创建了一个工具生态系统。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7042857142857143&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkiatKOUpEDRGYXWiazs1BfwwUr17UKKuma8LGiboyKWpaGY7E50uoXRMJw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Minerva的愿景是“定义一次，随处使用”&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;数据目录（Data Catalog）&lt;/h4&gt;&lt;p&gt;首先，我们与Analytics Product团队紧密合作，在Airbnb的数据目录Dataportal&lt;span&gt;[8]&lt;/span&gt;中索引所有Minerva指标和维度。当用户与Dataportal进行交互并搜索指标时，Minerva指标会排在搜索结果的顶端。Dataportal还可以显示上下文信息，如认证状态、所有权和流行度等，以便用户可以衡量指标的相对重要性。对于大多数非技术用户来说，Dataportal是他们使用Minerva的第一入口。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7585714285714286&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkDollyZIFbtPzAX64cLsgicJ4GE76qy3cVbjFTibPuxbcIxX73WSIpqbw/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Minerva指标在Dataportal UI中被索引和编目&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;数据探索（Data Exploration）&lt;/h4&gt;&lt;p&gt;在选择度量指标之后，用户被重定向到度量资源管理器（Metric Explorer），这是Dataportal的一个组件，支持开箱即用的数据探索。在指标页面上，用户可以通过额外的切片和下拉菜单（如“Group By”和“Filter”）查看指标的趋势。那些希望进行深入研究的人可以点击Superset视图来执行更高级的分析。在此过程中，Metric Explorer会显示元数据，如指标所有者、历史登录时间和指标描述，以提供更丰富的数据上下文。这种设计平衡了技术用户和非技术用户的需求，因此他们可以在适当的地方无缝的探索数据。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.3&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkeDhxguFicyKzWgdjr52I7X46ntSTyowAAic33BUys0epuZHfMlk0CjgA/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用户可以在Metric Explorer和Superset中无缝查看趋势和异常&lt;/span&gt;&lt;/p&gt;&lt;h4&gt;&lt;br/&gt;&lt;/h4&gt;&lt;h4&gt;A/B测试&lt;/h4&gt;&lt;p&gt;在这之前，Airbnb的测试报告框架（ERF，Experimentation Reporting Framework）有自己的测试指标库，称为“metrics repo”。测试人员可以在测试中添加任何商业指标，并比较控制组和实验组的结果。不幸的是，metrics repo不能用于测试之外的其他用例，所以我们决定将Minerva与ERF集成，这样A/B测试的所有基础事件都可以由Minerva定义和提供。在测试和分析中使用相同的数据源意味着数据科学家可以自信地理解某些实验如何影响最高业务指标&lt;span&gt;[11]&lt;/span&gt;。&lt;/p&gt;&lt;h4&gt;执行报告（Executive Reporting）&lt;/h4&gt;&lt;p&gt;自从Airbnb上市以来，我们就采取了按周、月、季度的节奏来评估Airbnb的经营业绩的做法。在这些会议中，不同职能部门的领导开会并讨论当前的业务状态。这种类型的会议需要概括性的、简洁的执行报告。通常会对数据进行汇总，分析和绘制趋势，并通过聚合（例如，今年以来）或者基于时间比较（例如，按年比较）的方式呈现指标变化。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.58&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkK0oSkashvrDygG8YgPEI3fuoYl9sNyRFf7uJhmibiciaohZlCpnRQp6gQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是构建在Minerva之上的COVID-19仪表板的报告配置示例&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了支持这种类型的报告，我们构建了一个执行报告框架（XRF，eXecutive Reporting Framework）。XRF获取用户指定的Minerva指标和维度的列表，并将它们转换为报表友好的聚合指标时间序列。这个框架自动化了大量的人工工作，并允许我们通过利用用于分析和实验的相同的Minerva指标和维度来标准化高质量的关键业务报告。&lt;/p&gt;&lt;h4&gt;数据分析（Data Analysis）&lt;/h4&gt;&lt;p&gt;最后，Minerva的数据可以通过Minerva API暴露给Airbnb定制的R或Python客户端。这使得数据科学家可以轻松地在笔记本环境中查询Minerva数据。重要的是，在笔记本环境中显示的数据的计算和显示方式与前面提到的工具（如Superset和Metric Explorer）完全相同。这为数据科学家节省了大量的时间，因为他们可以根据分析的复杂性来选择合适的工具。值得注意的是，该数据API鼓励实现轻量级的内部工具原型，这些工具稍后可以被产品化并在公司内共享。例如，在过去两年中，数据科学家使用这个API构建了一个时间序列分析工具和一个电子邮件报告框架。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.7028571428571428&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkCEfv9xcuDsVxkUX1bfe5PGCEL8lO66BBY6GdNk4iamDalyGYPlZ8IBQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据科学家可以使用Python客户端在Minerva中检索聚合数据并进行分析&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;我们如何利用Minerva数据应对COVID-19危机&lt;/h3&gt;&lt;p&gt;随着Minerva成为Airbnb的核心分析工具，我们一次又一次地看到它给Airbnb的数据社区带来了力量和生产率的提高。在最后一节中，我们想给出一个具体的例子，说明Minerva在COVID-19危机期间如何帮助我们的业务。&lt;/p&gt;&lt;p&gt;2020年3月，全球旅行因COVID-19而停止。几乎一夜之间，Airbnb的预订量大幅下降，取消预订的数量飙升。对我们来说，这是一个可怕的时刻，它提出了许多重要的商业问题：新冠病毒如何影响我们的客房储备？对入住率有什么影响？越来越多的订单被取消，对财务有什么影响？新冠病毒如何改变了不同距离的出行需求？我们需要快速、正确的回答所有这些问题。&lt;/p&gt;&lt;p&gt;&lt;img data-ratio=&quot;0.94&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz/9utHkjMdE0WFtvDvt6pOONpp2WhJNicfkFRCusgJFu8Eibbh2CYp35MvLxQraKZHPnrge9ezHnJNdadHaF2IbQMQ/640?wx_fmt=other&quot; data-type=&quot;other&quot; data-w=&quot;700&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Minerva的帮助下，我们能够大幅缩短从数据整理到深入发现和评估COVID-19对Airbnb业务的影响的时间!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了提供答案，我们的数据科学团队收集了这些问题，并开始头脑风暴，思考我们如何利用数据来回答这些问题。至关重要的是，由于Minerva已经定义了供应、需求、财务和客户支持的许多重要业务指标和维度，我们的中央分析团队能够在短短几天内构建一个执行仪表盘，并推出初始版本。COVID-19仪表盘迅速成为唯一权威的数据源，并在危机期间受到我们执行团队的密切关注。自那以后，它的浏览量已经超过1.1万次，有1500名不同的受众。不出所料，2020年COVID-19仪表板成为Airbnb上浏览量最高的超级仪表板。&lt;/p&gt;&lt;p&gt;从Minerva指标中获得的洞见也让Airbnb能够自信的确定快速变化的前景。例如，我们发现了新的市场机遇（如需求转向本地旅游和长期旅行）。这些发现促使我们重新设计了产品页面的几个重要接触点，以满足用户偏好的变化。在危机时刻，回答问题和揭示洞见的能力比以往任何时候都重要。感谢Minerva提供的数据，使我们能够有效地做到这一点！&lt;/p&gt;&lt;h3&gt;总结&lt;/h3&gt;&lt;p&gt;在这篇文章中，我们简要总结了Airbnb数据分析的历史，过去几年我们面临的成长的烦恼，以及我们为什么要创建Minerva（Airbnb的指标度量基础设施）。特别是，我们介绍了如何通过Minerva生成和消费数据。在文章的最后，我们还介绍了Minerva如何帮助Airbnb应对COVID-19危机。&lt;/p&gt;&lt;p&gt;在下一篇文章中，我们将深入探讨Minerva的技术架构，包括设计原则、用户开发流程以及数据计算图。在本系列的最后一篇文章中，我们将介绍Minerva API，这是我们的单一数据抽象层，它使之前提到的所有和其他系统的集成成为可能。我们将通过分享构建Minerva的经验教训来结束本系列，希望这些经验教训对其他构建类似系统的人有所帮助。&lt;/p&gt;&lt;p&gt;在那之前，请期待我们的下一篇文章！&lt;/p&gt;&lt;h3&gt;感谢&lt;/h3&gt;&lt;p&gt;Minerva之所以成为可能，是因为那些为它做出贡献的人。我们要感谢Lauren Chircus, Aaron Keys, Mike Lin, Adrian Kuhn, Krishna Bhupatiraju, Michelle Thomas, Erik Ritter, Serena Jiang, Krist Wongsuphasawat, Chris Williams, Ken Chen, Guang Yang, Jinyang Li, Clark Wright, Vaughn Quoss, Jerry Chu, Pala Muthiah, Kevin Yang, Ellen Huynh，以及更多与我们合作的人，让Minerva在整个公司更容易使用。最后，感谢Bill Ulammandakh创建了漂亮的可视化视图，使我们可以用它作为我们的题图！&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;Reference:&lt;/span&gt;&lt;br/&gt;[1] https://medium.com/airbnb-engineering/scaling-spark-streaming-for-logging-event-ingestion-4a03141d135d&lt;br/&gt;[2] https://medium.com/airbnb-engineering/supercharging-apache-superset-b1a2393278bd&lt;br/&gt;[3] https://medium.com/airbnb-engineering/at-airbnb-data-science-belongs-everywhere-917250c6beba&lt;br/&gt;[4] https://medium.com/airbnb-engineering/data-infrastructure-at-airbnb-8adfb34f169c&lt;br/&gt;[5] https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8&lt;br/&gt;[6] https://medium.com/airbnb-engineering/experiment-reporting-framework-4e3fcd29e6c0&lt;br/&gt;[7] https://medium.com/airbnb-engineering/https-medium-com-jonathan-parks-scaling-erf-23fd17c91166&lt;br/&gt;[8] https://medium.com/airbnb-engineering/democratizing-data-at-airbnb-852d76c51770&lt;br/&gt;[9] https://medium.com/airbnb-engineering/caravel-airbnb-s-data-exploration-platform-15a72aa610e5&lt;br/&gt;[10] https://medium.com/airbnb-engineering/how-airbnb-democratizes-data-science-with-data-university-3eccc71e073a&lt;br/&gt;[11] https://medium.com/airbnb-engineering/designing-experimentation-guardrails-ed6a976ec669&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
<item>
<guid>f2aab7ba0014c42a463b2bae65a9e4de</guid>
<title>阿里云的 “神龙” 为何物？</title>
<link>https://toutiao.io/k/8nnack6</link>
<content:encoded>&lt;div&gt;&lt;div&gt;&lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    
                    
                    
                    &lt;section class=&quot;mp_profile_iframe_wrp&quot; data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3OTUzMzcwNw==&quot; data-headimg=&quot;http://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujw8LhrKnbvzEUPibAQINJDc60oDZ9S1XrQsrxQf6M8iakCatO0YA4jXbvA/0?wx_fmt=png&quot; data-nickname=&quot;程序猿石头&quot; data-alias=&quot;tangleithu&quot; data-signature=&quot;清华毕业的打工仔，分享计算机领域的技术、职场和大学生学习方法，涉及后端技术、互联网、计算机基础、编程技术、程序员职场、程序员面试等话题。欢迎关注。&quot; data-from=&quot;0&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;点击👆小卡片，回复&lt;/span&gt;&lt;span&gt; “1024” &lt;/span&gt;&lt;span&gt;获取大厂面试指南&lt;/span&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家好，我是石头哥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前两天，给大家科普了 &lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247494957&amp;amp;idx=1&amp;amp;sn=5262cddbb843204d39a6d10acb1b44bd&amp;amp;chksm=eb44ecc9dc3365df261839ba70c59f08643a6cdce62fd15ffabe8474ca1be07e5d6d1321c59c&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;云计算到底是个什么鬼？&lt;/a&gt;、&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247487856&amp;amp;idx=1&amp;amp;sn=25affb193961ff69212e92ad89d5cbb4&amp;amp;chksm=eb471094dc309982b83f02248a6ec1a7cf16af24c6f0573e40809fe2c936f8496d7c76493959&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;11&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;终于跟女朋友解释清楚了什么是云计算&lt;/a&gt; ，大家貌似显得意犹未尽。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这不，今天，我就又辛辛苦苦给大家找了一篇：深度解析了云&lt;strong&gt;计算&lt;/strong&gt;产生背景&lt;strong&gt;，&lt;/strong&gt;传统虚拟化方案的不足，阿里云为了解决各种问题，演进创造出了神龙服务器&lt;strong&gt;。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这其实也是我们部门工作内容范畴，这期间的“历史”故事居然比有的内网文章介绍得更详细，哈哈。全文1W+字，预计阅读时间20min，值得大家收藏传阅。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，欢迎你通过文末的联系方式加入我们一起搞事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;43&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;本文由石头哥向公众号浅黑科技（ID：qianheikeji）授权进行转载。&lt;/section&gt;&lt;section&gt;以下为正文。&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;阿里造“神龙”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;文 | 史中&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;人类对于计算的梦想，像一条河。涓涓细流，奔腾入海。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算的载体，从楼船一般的大型机，到快艇似的小型机，到如今万吨巨轮的云计算，我们的武器如史诗般演化，但背后却有同一个技术的身影，那就是“虚拟化”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;简单理解，虚拟化技术就像变形金刚，把无数台计算机“组合”成一台超级计算机，或者把一台整计算机“切割”成无数小计算机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1962 年诞生的人类第一台超级计算机&lt;span&gt; &lt;/span&gt;&lt;span&gt;Atlas&lt;/span&gt;，就用了名为 Supervisor 的虚拟化组件来管理物理主机资源。如今最先进的生产力——云计算，底层的重要技术也是“虚拟化”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照正常的故事剧情发展下去，未来云计算会成为人类应用的底座，就像我们熟悉的水电一样。但是，事情并不那么简单。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云计算带有一道&lt;/span&gt;&lt;strong&gt;“伤痕”&lt;/strong&gt;&lt;span&gt;——经过虚拟化技术提供的计算力是“打折”的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;世界因此徘徊不前：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;65&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;上汽集团曾希望用云计算来解决汽车仿真的大算力场景需求，但实测结果让公司大跌眼镜，虚拟化性能损失高达60%，最终不得不忍痛放弃计划。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;类似的例子比比皆是，而且越是密集计算的场景，虚拟化带来的损耗问题越明显，无数企业因此被挡在云计算的大门之外，眼看着新时代的浪潮奔流走远。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个巨大的伤痕，成为了云计算“房间里的大象”，人人都能看到它，却没人有能力除掉它。以至于到后来， 芯片厂商、虚拟化厂商、云厂商，整个产业链对此讳莫如深，从来没有人捅破这层窗户纸。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今天的故事，就从这里开始。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6584795321637427&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXSrKCMDib8vqZoicicxcIiaIgCprfsc95AIc6lDIwAd7icdnRuSUQqic7sicjQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;855&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（一）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年底，阿里巴巴几十位技术“长老”围坐在会议室里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这是每年一度阿里巴巴的丰收仪式——“双11”复盘会。这一年，双11当天成交额创下了1682亿的纪录，淘宝天猫的后台像一部硕大而精密的数字机器，没有一个零件掉链子。阿里云费了九牛二虎之力，将虚拟化性能损耗降到了当时业界的最低值，大家脸上自然洋溢着轻松和笑意。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;轮到行癫发言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有人都把目光投向他。在大家心里，这个阿里巴巴集团首席技术官（CTO）有两个特色：&lt;strong&gt;“善于拿捏理想和现实的技术信徒”+“爱曝金句的耿直 Boy”&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img data-ratio=&quot;0.6168421052631579&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj5xceLo6XAN1xx5ZWibGRUBS7QOTQJKeKG0Zib4KPv7KIOibkBlrV5kMfX5RAgo2hZjFO7Kyo0NNKXaw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;950&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;行癫&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行癫的套路是这样的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每年双11，他一边波澜不惊，一边启发大家构想出一些宏大的技术方向，足够整个阿里巴巴集团接下来奋斗一整年，今年也不例外。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;61&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;我们要定义哪些是核心问题，然后&lt;strong&gt;根本性&lt;/strong&gt;地解决它。比如，虚拟化损耗问题就是之一。我们的目标很简单，必须想办法把损耗降到“0”。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行癫对满屋子人说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;会议室里的这些技术宅听完差点一口老血喷出来。阿里巴巴过去二十年虽然逆天，但我们已经膨胀到想要挑战几十年来的行业潜规则了么？？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;故事讲到这里，需要先按一下暂停键。中哥强势插入给你科普一下：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;云计算的性能损耗究竟是怎么来的？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你肯定熟悉你自己的电脑。如果你把你家的计算机想象成一块蛋糕。那么，云计算就是一块“双层蛋糕”。双层蛋糕的下面一层是无数台和你家电脑一样的物理机，上面一层是无数虚拟机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5628803245436106&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vS9I0QxpHVJUIKAKtpSmGCwE67wuTpia6YFqicLicwFo2VZO4W1TmnsUSNA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;986&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你去购买云计算，买的可不是下面的物理机，而是上面的虚拟机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这样对你来说其实更舒爽：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;97&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;比如你今天需要一台阿里云的4核8G的服务器，明天需要一台8核16G的服务器，不用重新攒电脑，只要轻轻点一个按键，你的虚拟机就自动变大了。至于下面的物理机怎么调度，那不是你的事儿，是阿里云的事儿。&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而把物理机变成虚拟机的这个技术，就是&lt;/span&gt;&lt;span&gt;“虚拟化”&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好，重点来了：&lt;/span&gt;&lt;span&gt;“虚拟化”的舒爽不是白白得来的，它的代价就是性能损耗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;举个例子：假设你是厂长，工厂流水线上有104个工人，你一个人管不过来104人，他们经常上班摸鱼。于是你从中选出8个小组长，每个小组长管12名工人。这样一来，生产秩序加强了，但是有8个本来能干活的人做了管理工作——原来绝对生产力是104分，现在只剩下96分了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这个例子里，我们就说“虚拟化的性能损耗大概是8%”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.4423076923076923&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSS7AKMm8Ct6w6FXQ8QS1VDhqB11IyAibZsgFcib6KAO8ZcOLVicLtbLV2Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;988&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同样，在2017年，云计算的性能损耗也差不多在这个量级。粗略地说：104个CPU放在一起，要有8个CPU做“管理”，剩下96个才是干活的。你算算，这个损耗也是8%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;用初中物理知识想想也知道，虚拟化性能损耗这件事儿，是天经地义的。最多只能无限降低，不能消失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好，科普完毕，我们回到双11复盘会上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行癫提的目标很美好，让CPU全部用于真正的计算。如果成功把虚拟化损耗降下来，绝对是云计算历史上的大功一件，那些企业上云最后的顾虑也将烟消云散。但这个技术难度，似乎不亚于证明“哥德巴赫猜想”。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;围坐的人里，有一个人心里“咯噔”一下——因为这是他的职责范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此人名叫旭卿，阿里云弹性计算的技术负责人，听到行癫“点将”，按捺不住内心的激动。因为这也是他团队一直想做的事情，只是如何实现，还拿捏不准。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6666666666666666&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj7ZwcQqmtOnX1HvicQ6HwhPSLFhQ8x9py74SyLwDRmIYhYzQa4tGdL7yE5ofqXUGk1exgiajMYBLotQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;旭卿&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，过去几年，世界主流的云计算玩家都在试图通过各种“补丁方案”降低资源损耗，阿里云也没闲着。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;133&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;2015年，阿里云的底层虚拟化技术架构被更换掉（从 Xen 到 KVM），虚拟化的开销从极端场景的超过一半，降低到了平均10%的水平。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年，阿里云越来越稳定，用户也开始迅速超过百万。但在当时的虚拟化架构路线上，这10%的“硬核开销”基本上属于奥特曼消灭不了的小怪兽。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那次会议结束后，阿里云副总裁李津就拉着旭卿团队促膝长谈，&lt;/span&gt;&lt;span&gt;他们追踪到了一个行业真相：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;84&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;过去芯片商、硬件商、虚拟化软件厂商等几乎所有的角色一如既往地扮演好自己的角色，按照各自的进化逻辑和速度演进，他们之间的配合就成了“三不管地带”——虚拟化损耗被视作必然。&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在计算力规模较小的时候这不会被当做是个大问题，然而放在数百万台规模的云计算时代，这个损耗才异常可观。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;李津和旭卿一致认为，事到如今，再研究“补丁方案”肯定没戏，必须在计算体系结构上做创新：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;114&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;以往的解决路线都是让虚拟化软件去迁就CPU的特性，好比是让管理学符合流水线工人，明摆着强扭的瓜不甜。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;而阿里云的新计划则是让“上帝的归上帝，凯撒的归凯撒”：&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;新造出一个带有智能芯片的专用板卡负责虚拟化调度，从而把那些CPU解救出来。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说不从原来的工人里选拔小组长，而是阿里巴巴自己研制一个“专业组长”，直接空降管理104个工人，这样104个工人不就都可以全力干活了么？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.5082135523613963&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSJrulYaPCdWzr1lcIp6XYfZJ650k8Ts3iajjQFvN5iciaty5SbcVDfECmQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;974&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大概就像酱&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看完方案之后，大家眼珠一转，技术构想很NB，没意见。但问题有两个：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;75&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;第一、做芯片，做板卡，这可都是门槛极高的硬件设计。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二、举头望去，就连世界公认的云计算领头羊，亚马逊 AWS，也没听说有这么激进的“硬件计划”。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;看这意思，整套事情玩下来，难度不亚于两万五千里长征，未来一年团队可要生死未卜咯。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（二）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平心而论，这是一条很激进的路线。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这相当于要首次实现云、虚拟化和芯片的技术大融合。旭卿掰着手指头数，要想召唤神龙，至少需要四颗龙珠：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;54&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;龙珠一、虚拟化软件开发；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;龙珠二、软硬件衔接的中间层；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;龙珠三、核心芯片设计；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;龙珠四、硬件（板卡、服务器）设计。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虚拟化软件开发就是团队的原班人马，胜任这次技术改革不在话下。当时的虚拟化技术负责人叫子团，他是个玩赛车的技术宅，对新技术总是保持着赛车般激情，子团听后异常兴奋，主动请缨带着团队开干。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而硬件、芯片方面，阿里也做过一些技术积累，曾经自研了闪存 AliFlash、全闪存存储服务器泰山、光模块、以及大容量存储服务器貔貅、液冷服务器、自研数据中心等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;只不过，现在还必须要有一支专门为这一项目服务的技术团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.620016963528414&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXlBEekeCfaqiapgm0Zu43L4sLkNsuoDibXT8ek6g9GAx7iaSAsKQxmjnGA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1179&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;阿里的液冷服务器集群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;软硬件中间层，旭卿脑海里冒出一个人选，此人花名行宪，当时供职于某著名外国芯片公司北京分公司。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那天下午，旭卿电话突然响起，一个好朋友告诉他一个惊天秘密——行宪所在的部门要被那家外企整体裁撤。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;旭卿两只眼睛喷出了火，就直接打车去机场。从首都机场再打车到西二旗时，已经夜里十点多了。旭卿给行宪打电话，明天早晨找你谈谈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二天早晨咖啡馆刚开门，行宪就到了。没想到旭卿更早，已经在门口蹲了半天。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行宪顺利加盟。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“当时我就知道，这事儿成了一半儿！”旭卿回忆。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行宪外向又暖男的性格，加上精湛的技术，使得他团队的兄弟们一直很信任他。结果，听说他加盟了阿里云，兄弟们纷纷给他打电话，想继续跟着他做研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确认过眼神，行宪张开怀抱，加上兄弟团队的人马，这部分研发阵容妥妥齐备。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.65625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSeTOqDX2YR47B2BTUKopQ2ByK0wBr4mRt2QZ47NVde9XynkialJLjroQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;行宪 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在龙珠只剩下最后一颗——芯片研发的负责人。说实话，中国好的芯片人才屈指可数，短时间要找到合适的人选堪比登天。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但眼看还有一个多月就要过春节了，旭卿下令，硬着头皮先开始干！行宪团队算是半个芯片团队，先兼职芯片设计，如果有些功能不会用芯片搞定，就只能“绕个路”，用软件替代。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;团队第一次跑通验证程序，已经是来年早春三月了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那天是个周六，大伙都堆在项目室，谁都不想休息，因为验证结果马上就要出来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;然而，最终在屏幕上跑出的数据给大伙儿泼了一盆冷水——“延迟”指标远高于预期。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仔细分析之后，大家基本定位出了原因：有些坑绕是绕不过去的。这颗芯片是造也得造，不造也得造。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当务之急是找到一位芯片大牛。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那两天，行宪魂不守舍，第二天周日本来他要开车去燕郊参加同学聚会，结果满脑子都在想这事儿，连着开错了两个高速口。他怕出事故，只好把车停在路边让自己冷静一下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在这时，收到一条老友的信息，听说行宪在找芯片人才，给他推荐了一个厉害的人选，渐名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;旭卿得知自己苦苦寻找的芯片人才终于要有着落，像当年“追”行宪一样，又开始三顾茅庐对渐名发起爱的攻击，终于感动了渐名。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.7175925925925926&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj7ZwcQqmtOnX1HvicQ6HwhPSJHKXn2HicBJicSnicK0WdkfegccicKQ80yiaHGkf1zYgLXofQKpEjrylo7g/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;渐名&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;和行宪外向的性格形成鲜明反差，渐名是个技术宅，不看广告看疗效的那种。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多说一句，这里渐名做的芯片不是从头自研一款芯片，而是用的行业内比较成熟的“可编程芯片”，在现成的芯片上设计逻辑。由于时间和能力所限，这算是个最客观的妥协方案。（当然，这也成为了另一个故事的序章，我们后面还会说。）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行宪记得很清楚，渐名是带着行军床进办公室的。两个月时间，他就没回家几次。那天他找到行宪，淡淡地说了句：“芯片这边设计得差不多了，你再测测。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家围拢过来，看到各项测试结果都“超常发挥”。大伙儿轮番抱着显示器上的参数合影留念，看起来就像一群傻子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXiax0cebgeibVPlMDkHHVgZtp9l41XH8alKiaHWaFMFnviahqRzgE0b15fA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此时旭卿手里已经基本集齐了龙珠，接下来只待召唤“神龙”。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家开了个会，讨论新研制的这套服务器到底要叫个什么名字。有一位工程师说：“既然是召唤神龙，那我们就叫“神龙云服务器”如何！”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同学们一听，纷纷露出“哎呦不错哦”的表情，能飞天的不就是“神龙”嘛！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来的几个月里，产品经理霁荣在各研发团队奔走呼号，跟进团队内部和外部所有相关大牛们的研究进度，保证大家在承诺的时间里完成各自的技术准备。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（三）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在行宪他们死去活来折腾核心技术的时候，旭卿一刻都没闲着。他心心念念惦记着做硬件设计的兄弟团队。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2017年初，旭卿和硬件团队的芳志一起去台湾出差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大巴车里，旭卿往芳志旁边一坐，开始了唐僧般的念叨，从盘古开天地，到神龙服务器，说了个遍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多人还不知道，为什么阿里巴巴会有一个硬件设计团队，这里多聊几句八卦。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从2014年开始，阿里云就遇到一个重大的问题：买来的标准服务器，“七国八制”，总是出现各种“幺蛾子”，今天这里不稳定，明天那里不适配。每天芳志的团队都四处灭火，生无可恋。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从那时开始，阿里巴巴就走上了定制服务器的道路。功能规格、接口标准都由自己规定好，服务器厂商按照这个规格研发生产，问题就少多了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到了2016年，阿里巴巴更进一步，已经开始完全自己设计服务器。CPU和内存选型、存储、主板设计、电源、甚至散热元件都在设计图里清晰地设计好，服务器厂商只管去生产交付就好了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，有关服务器底层硬件设计，经过这么多年锤炼，服务器研发团队是门儿清的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5970031545741324&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXiaA32H1OyNFFHaia0T3wyibEKB4Km84HaOZ9hJX3ykcCUYM9PfXVmMYBQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;阿里巴巴的定制服务器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;初一听到旭卿的构想，芳志的反应和其他同事差不多。“总感觉有点离经叛道，但又觉得值得试一试。。。”他后来回忆。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，芯片设计和软件架构基本确定下来后，服务器硬件团队马上开始和他们一起做关键器件选型。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;渐名的芯片方案验证差不多后，接下来芳志团队就要开始设计搭载这块芯片的板卡了。大家给这块卡起了个名字，叫“MOC卡”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家想象了一下 “MOC卡”的样子，应该看上去有点像一个显卡。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是真到具体设计的时候，童鞋们开始头大了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“说实话，好歹我在这个行业里也摸爬滚打十五年了，这是我见过最复杂的板卡，没有之一。”芳志说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXImJzVIY0ezW47Bf3BziaVicnXyiaCNXYX4xdWFTkR84l0hRce2LYcicGVQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;芳志&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于复杂度太高，在写电路设计的时候，哪怕只有一根线路设计出现错误，都会导致板卡点不亮。这种情况一旦发生，只能推倒重来，返厂大吉。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;返厂不仅会造成巨大的成本浪费，还会直接让2017年云栖大会发布神龙云服务器的梦想泡汤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在设计图交给工厂之前，团队的童鞋通宵一周，你给我检查，我给你检查，一个点一个点看，一个电路一个电路查。送走设计图的时候，就像老父亲目送进京赶考的儿子一般。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2017年夏天，第一版MOC卡实物终于从工厂运了过来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.583596214511041&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXdnuaDnibvT1ca3iaFSGCTy2H8bY8FRibk2rfyxEcJU0wmuEMTOLE9Px0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MOC卡&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;硬件的同学们摩挲着自己的作品，沉甸甸地，像块砖头，爱不释手。他们忐忑地把板卡插进机箱。。。。“点亮啦！”屋子里一片沸腾。在如此高压高强度的工作状态下，如此复杂的电路设计没有出现一处错误，这群阿里人用事实证明了自己在硬件领域的专业性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MOC卡的照片通过钉钉群传输到北京，所有人一片欢呼。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了测试板卡工程结构上的可靠性，他们把MOC卡泡在装满红墨水的容器里，捞出来晾干，然后直接用钳子把芯片一个个拽下来，查看里面是否曾有液体渗入，结果非常满意，里面完全没有墨水痕迹，说明芯片引脚的焊接也是天衣无缝。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;到8月中旬整个产品软硬件全部验证完成，但留给中国队的时间不多了。带有MOC卡的神龙云服务器火速放量生产，像蚂蚁搬家一样进入阿里云的“蛋糕底层”，成为无数台物理机的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2017年10月12日。云栖大会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;李津在没有任何高能预警的情况下，在台上突然发布“神龙云服务器”，并且宣布神龙是“现货”——从当天开始，客户就可以购买神龙云服务器做为硬件底层的阿里云计算资源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.58&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreX0o2WfBHfCClaibI5mZnRicYzGJXLsypbHLfCWmQQcApggWlh07bggzJQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;800&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;云栖大会上&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;李津发布神龙云服务器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业界爆燃。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当天下午，在只能容纳100人的神龙的技术论坛上，生生挤进去了300人。后来保安人肉堵住门口，才算作罢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更神奇的事情发生了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在那次云栖大会之后的一个月，大洋彼岸的云计算全球老大亚马逊 AWS，在他们的“云栖大会” ——Reinvent 大会上同样发布了类似的硬件虚拟化技术。他们的虚拟化架构叫做 Nitro。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5831858407079646&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXicKCBEsGqaxrEXP7TydmAiaQCXWmApEwaeMusAKclFVc1ew0D0ibwibN8A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1130&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;AWS 发布 Nitro&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;听到这个消息，旭卿全明白了，原来 AWS 也早就秘密开始研究和神龙一样的技术，不同的是 AWS 的芯片来自他们2015年初收购的以色列芯片初创公司 Annapurna Labs。两家公司出于最高级别的保密，相互一点风声都没走漏。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大洋两岸的两家公司通过这种方式隔空致意，英雄相惜。这像是云计算的一场“生物大进化”，云计算朝着“IT行业的水电煤”又迈进了一步。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“那一刻我终于知道，我们不再孤单了。”旭卿感慨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;旭卿的慨叹，其实每一个阿里云人都感同身受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;亚马逊是世界上第一家云计算巨头，用“开创了云计算时代”来形容它丝毫不过分。中哥曾在另一篇文章&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0NDEwMTc1MA==&amp;amp;mid=2247490379&amp;amp;idx=1&amp;amp;sn=17857e09e980b41bc188e592422c3459&amp;amp;chksm=fb001f52cc7796444cb18e5a483d3ad26e44fc70d543fa03fb2f56ae74d4db7d65e8d5df7b4e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;《阿里云的这群疯子》&lt;/strong&gt;&lt;/a&gt;里详细写过阿里云的创业故事。2009年王坚带领阿里云的兄弟们筚路蓝缕地长征，很大程度上也是将亚马逊AWS视作自己的镜像。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那时候，阿里云虽然艰难，但前路终归有一盏灯。而开发神龙的时候，研发团队是两眼一抹黑的。所以，当他终于知道阿里云的创新和AWS居然是同一个方向，而这一次阿里云居然还领先AWS一个月时，心中的骄傲如火山喷涌。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;神龙天降，马上投入战斗。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6361111111111111&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXrL4olT3aXDGWgdiaSyG8Xa93SvuScgicQqiaMleOsWYn0NSWH4gvibxFRw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;截止2019年10月，世界各大厂商自研软硬件一体架构的进度。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（四）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;购买神龙云服务器的网页快被挤爆了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一时间购买神龙的客户大概分三类：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;91&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、好奇的用户——他们来尝鲜；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、云计算的同行——他们来看看阿里云有没有吹牛；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3、传统企业——他们早就迫不及待地想上云，但之前传统的云计算架构并不适合他们，神龙架构却是他们的菜。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前提到的上汽是第一个吃螃蟹的人。他们透露，相比过去使用传统超算服务，使用神龙超算集群汽车仿真计算效率提升25%；吉利集团也将全部仿真业务在神龙超级计算集群，过去平均排队2个月的任务，现在平均2周搞定。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为什么用传统云架构不行，换成了神龙云架构就行了呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里中哥多解释一句。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很多传统企业，例如制造业，从90年代就采用了物理机架构，那时候还没有云计算，所以他们自己构建了一套虚拟化架构（很可能选用的是VMware）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在传统企业要向上云，就面临两难了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;180&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;1、把这套虚拟化架构原封不动地装在云计算本身的虚拟化架构里，就会出现“嵌套虚拟化”的问题，大概就像《盗梦空间》里描述的那样，在一个梦境里又做了一个梦，这样会让虚拟化性能开销飙升，跑起来比拖拉机还慢，完全不能忍。。。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2、就算企业为了上云，下决心重新构建一套适应云计算架构的软件，又会发现上下游供应商他们用的体系还是传统架构，又出现了猪队友接口不兼容的问题。。。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6262729124236253&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSJEibYNmHjaZS0kc4lb9MEqMaxQveBHgs7N5HQKcibicrupYHoeQJPlDxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;982&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;这就叫嵌套虚拟化&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于神龙云服务器自身的虚拟化动作都被“藏”到了MOC卡里，对于传统企业来说，神龙机和物理机没区别。所以把原来的系统原封搬上来，既不会造成性能损失，又不用面临和上下游接口不符的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.6326530612244898&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSttT9TvQaibAfh1sfsc2BFq2k8dmhwr51OpKohtgtk9HIaBCVia1zotmQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;980&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;神龙云服务器上&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MOC卡已经把&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;虚拟化的活儿给干了&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;云的好处全都有了，过去的不方便又全没了，世界上还有这样的好事儿。很多传统企业纷纷开始大量选购阿里云。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为此，2018年，行癫将阿里巴巴集团唯一一个企业端产品创新突破奖颁给了神龙。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6117886178861789&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXjiamfbhicicaJXiamA4ibyGJa7j1R8eoZwvYnUteW61Q6O5LDv89UZTOOLQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;984&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但在阿里云眼中，此时的神龙还未强大到能支撑起所有计算需求。这是为啥呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;之前我们提到，虚拟化其实分成两个方向：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;54&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;一个方向是虚拟化组合：把一堆物理机粘成一个大的虚拟机；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个方向是虚拟化切分：把一个物理机切成一堆小的虚拟机。&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;刚才为了不打扰你听故事，中哥没有说得很细：作为第一代产品，神龙云服务器用MOC卡实现的硬件虚拟化，其实只能满足第一个方向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;每一个神龙云服务器，就像一块乐高积木，很多乐高积木拼起来组成更大的积木，这没问题，但一个乐高积木本身没办法再切分。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.49376299376299376&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSqGdM3jKY01OIqQky8GK3iayVJBEzB661zc3MviciaHraQLf1NWudhOzdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;962&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;神龙架构的虚拟化组合，大概就是这个样子。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;结论很明确：第一代&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;神龙架构其实是缺一条腿的——它只能支撑一半的云计算场景。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果神龙架构不仅能做到虚拟化组合，还能够做到虚拟化切分，那么它就可以替换掉阿里云现有的所有服务器，实现全部升级了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这就是神龙2.0的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当时的神龙，已经不是当初一个小团队“自娱自乐”了，它是要支撑阿里云很多业务的。但凡拖延，后果不堪设想。说白了，这次技术升级是干也得干，不干也得干。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;神龙2.0交付日期临近，团队手忙脚乱，人手严重不足。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这时，有一个人能紧急调动所有人的资源，那就是阿里云智能基础产品事业部总经理小邪。实际上，在神龙研发早期，小邪就对这个技术寄予厚望。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小邪在阿里巴巴的技术体系里“摸爬滚打”十年，他曾参与集团首次大规模技术改造项目——“五彩石战役”，非常清楚神龙对阿里云乃至整个行业的价值。如果说五彩石打通的是淘宝、天猫的架构和数据，那么神龙统一的则是阿里云的底层基础设施。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXMGgR5aRchFRJOb4xJxYMwmltFI3pBYYKa5wZia7ibWnjRh2ibAsHNRcRg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;小邪&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;44&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;神龙不只是颠覆计算服务这么简单，它还会推动云平台上存储、网络、数据库等等基础技术的跃进！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;小邪在飞天2.0启动会上如是说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那段时间，小邪在各团队奔走呼号，在他的感召下，无数兄弟部门加入战斗序列，为新一代神龙贡献力量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如那句话，如果你知道要去哪里，全世界都会为你让路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2018年8月份，阿里云终于如约把新一代神龙架构的这套代码完成了——虚拟化层被做薄，损耗率被大幅降低。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6266944734098019&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXrefCsSlNmGseFjibjib5UkFk2gKUZNQMOEr6frYNDniatavrYs48Ig71g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;959&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二代神龙架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;大概是这样&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这下旭卿“手里有粮，心中不慌”了——凡是能用传统云计算架构实现的，神龙架构都能实现！而这也意味着，云服务器首次实现了整颗CPU用于计算任务，在算力资源紧缺的时代，这一突破极具意义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在第二代产品成型后，神龙这帮人就奔走呼号，邀请阿里巴巴内部的各个业务团队“吃狗粮”——不仅要多用阿里云，还要认准神龙云服务器作为底层的阿里云。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;阿里巴巴内部使用神龙云服务器的云计算，和外部客户买阿里云的流程是一样的，特别简单，只要在网页上点几下，就相当于过去采购了几千台机器搬到机房。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;时间来到2018年双11，投入战斗的神龙云服务器已经初具规模，团队再次严阵以待。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;虽然对自己的技术有信心，但这毕竟是神龙第一次抵御这么大的流量洪峰，大家心里还是很紧张。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有人都围在“作战室”，盯着神龙的后台数据。结果，神龙云服务器的CPU占用率非常平稳，几乎是一根直线，像假的一样。据估算，2018年双11当天，大部分云部分峰值流量都是神龙云服务器扛下来的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.5808333333333333&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreX6e460LhV1k0RDDnMf20ibcWxL41B31m1nmzFstvibr29wTo23On5XnvQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1200&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不仅如此，在有些业务中，用神龙的虚拟化架构，比直接用物理机还快。虽然这看起来不科学，但其实也在团队的意料之中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因为阿里云的很多业务是跑在时下正流行的“容器”中，而容器技术有个显著特点：它本身是基于云架构设计的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，本来容器技术跑在云架构里就比物理机里更如鱼得水，加上神龙机本身的计算性能和物理机一样快，整体的性能就超越了物理机。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一仗打得漂亮。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.53203125&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXkXlGhx1rSM8Lr1LQA5hMNgudJo8p0pia815aic3ekdANetH8h2JaQC8Q/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;（五）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2019年春节回来，行癫又组织技术长老们开了一次重磅会议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这次会上，他又提出了一个非常激进的计划——“从此刻开始，全集团不再购进一台物理机，所有新增计算力全部上阿里云”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;就在2019年4月。集团又发布了一条新的决定：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;18&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;&lt;strong&gt;集团上云，全部采用神龙云服务器架构。&lt;/strong&gt;&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从2009年创业，到现在已经10年，阿里云服务了上百万家客户，但多数企业出于尝鲜的目的——把验证性的工作放在云上，生产任务仍旧在自己的环境里，换句话说，还不够相信云足够靠谱。如今，阿里巴巴宣布所有业务上云，是对阿里云技术实力的最高认可，也给了全行业做出了信心表率。从王坚以来，一代代技术人，终于守得云开见月明。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这之后，神龙一路狂奔，在2019的杭州云栖大会上，第三代神龙发布。经过实测，第三代神龙作为底层架构的云计算，绝大多数指标都优于传统架构的云计算。所有人都意识到，这是一个可怕的“新物种”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;马不停蹄，时间又冲向了2019年的11月11日——“双11”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这一年双11，总成交额定格在了2684亿，比上一年暴增四分之一。就在24点的最后冲刺之前，从舞台暗区走上来一个神秘人，他就是行癫。作为阿里巴巴技术带头人，他居然是第一次从双11的幕后来到聚光灯下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他开心到连自我介绍都有些语塞，但这是我所见过他最畅快淋漓的演讲。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote class=&quot;js_blockquote_wrap&quot; data-type=&quot;2&quot; data-url=&quot;&quot; data-author-name=&quot;&quot; data-content-utf8-length=&quot;87&quot; data-source-title=&quot;&quot;&gt;&lt;section class=&quot;js_blockquote_digest&quot;&gt;&lt;section&gt;&lt;span&gt;峰值每秒544000笔订单，没有任何抖动，&lt;span&gt;阿里云承载阿里巴巴自己100%的核心系统，这个是我们全球第一个做到的！从此以后，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;所有用户都可以更放心地把自己的核心系统放在阿里云上！&lt;/span&gt;&lt;/section&gt;&lt;/section&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那一刻，他仿佛代表身后无数技术人，暂时忘记代码的严谨和硬件的低调，只是享受聚光灯的温暖。 &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.47890625&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj7ZwcQqmtOnX1HvicQ6HwhPSiauwOC3R7icicWRduCNbH2blgxLSvHU6ibcfkMiaP25HiawxGYrN9FicgFJFg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;行癫&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实也正是如此，基于神龙架构的云服务不仅大规模应用于淘宝、天猫、菜鸟等业务，还吸引了一大批拥趸客户：上汽、吉利、旷视科技，不一而足。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而这次技术变革带来的影响正在迅速蔓延，全球云厂商都在跟进采用类似的技术路线，中国创造的“神龙”正在成为服务器的世界标准。未来一旦全世界云计算厂商迭代结束，节省的计算资源会是一个天文数字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages&quot; data-ratio=&quot;0.68359375&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/dZODkqM6bj7MGAic1HjC4iaG1sjRcuF3vSRHAnVcGfZOjw3YzKMtmic0S6z9wxsEyNPu6O36baIt9mDKMqhLmyCFA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1024&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;三年历程，神龙雏形初现，凡此劫难，九死一生。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪怕倒退五年，可能也绝不会有人想到，阿里巴巴这家电商基因的公司，会有勇气跳入泥潭，花费数亿投入去研发互联网底层的单元——服务器。而且一出手就不是世界上的“又一台”服务器，而是“另一种”服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但站在历史的岸边，完整目睹变迁的过来人也许能体会，阿里造物，真正的幕后推手是“时代”二字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我在&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0NDEwMTc1MA==&amp;amp;mid=2247490379&amp;amp;idx=1&amp;amp;sn=17857e09e980b41bc188e592422c3459&amp;amp;chksm=fb001f52cc7796444cb18e5a483d3ad26e44fc70d543fa03fb2f56ae74d4db7d65e8d5df7b4e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; data-itemshowtype=&quot;0&quot; data-linktype=&quot;2&quot;&gt;&lt;strong&gt;《阿里云的这群疯子》&lt;/strong&gt;&lt;/a&gt;里写到，当年阿里云的创建，就是因为阿里巴巴面临越来越重的服务器和存储负担。时任阿里巴巴首席架构师王坚给马云算了一笔账，如果不上云，单单购买IBM的小型机和Oracle的数据库，就能让阿里巴巴破产。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而一代技术总会遇到规模瓶颈。技术竞争正如升级打怪，你跑得比别人靠前，就比别人更早遇到这一关的大BOSS。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当年那代阿里云人，从第一行代码开始，写出了阿里云底层调度系统“飞天”，成功干掉了那个年代的大 BOSS。旭卿这代人登上舞台时，阿里云服务的人越来越多，场景越来越复杂，新的 BOSS 就在眼前。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;真正的技术人，其实从来没有退路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前路总会荆棘坎坷。坐在原地，可能一生至死都不会遇到惊涛骇浪。但那些远处的峻峭风景，也随之在你生命的可能性里永久消失。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如《约翰·克利斯朵夫》所写：人生是一场不停的，无情的战斗。向前，向前，永远不要停。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在之前的故事里，我曾经埋下一个伏笔，那就是神龙服务器的那块核心芯片。我说那片 FPGA 是现成的可编程芯片，是个“妥协方案”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是你可能想起，2018年云栖大会，阿里巴巴宣布了一件大事，那就是成立了自己的芯片公司“平头哥”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;rich_pages js_insertlocalimg&quot; data-ratio=&quot;0.6269716088328076&quot; data-s=&quot;300,640&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/dZODkqM6bj7gSpc4H1Z9fwH0jjeHtreXicXWdUG8HlBNic5O9Dnn6jh3M7NavSibzlbs95KvlZhibIIaODgD51HmLA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1268&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;过去几个月，平头哥连续发布玄铁、无剑、含光。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;于是，中哥有了一个大胆的猜想。经过从阿里云内部多方打听，我确信了一点：平头哥正在研制的芯片中，至少有一款将要用在神龙云服务器中，替代之前旭卿一直在使用的妥协方案“FPGA”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;也就是说，下一代神龙云服务器将会搭载一颗阿里巴巴自研的芯片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;粗略算来，仅仅阿里巴巴一家公司，利用阿里云提供的服务就可以触达十亿人，而在阿里云上，还有几百万其他客户，他们同样可以触达数亿人。加总起来，神龙服务器中平头哥芯片所能影响到的人次，将突破十几亿。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那将是中国芯片的里程碑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那也将是下一个故事。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;飞鸟掠过这片古老的大地，此时此刻，正有无数中国人自己设计的神龙服务器，从各条生产线上喷涌而出，构筑起我们生存在这个星球上坚如钢铁的计算力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;身处时代大潮中，人们往往不会注目那些英雄们的身影。只有当世界终于被改变，你我才会在余晖的岸边回首旧日，恍然想起那一个个闪亮的瞬间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.05319148936170213&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/SNCWuBRAEwaTLSfnPyia62ZtcMGcvBKAbUbBoEmPSlicYY0BS8RuSlpNEARGp19MgXicEpaiblwuxTOAlu4XvBVV8A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;376&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;好了，全文完，其实神龙服务器还在不断演进、升级；能看到这里的同学肯定是真的感兴趣了，&lt;span&gt;是不是还不过瘾&lt;/span&gt;？&lt;/p&gt;&lt;p&gt;那就加入我们一起来搞事情吧 —— &lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247488750&amp;amp;idx=2&amp;amp;sn=a549a0e677ac520f48deabdae7c1c4e8&amp;amp;chksm=eb47150adc309c1c691614e6f0d5a68f0e82cb7728e0dadd0e6f477b61389990ad1b6a7b14e5&amp;amp;scene=21#wechat_redirect&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;招人，我们是认真的 ——“阿里云-ECS/神龙计算平台” 急招开发&lt;/a&gt;&lt;/p&gt;&lt;p&gt;可添加微信【codershitou】了解咨询详情。有收获还有劳帮忙在下方点赞、在看、分享&lt;img data-ratio=&quot;1&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibtuE5vKbCQic8cmtgEyVlOuYWpRiaZicjkQhsHpN1eIqqeiaKcgMaicVWicGChxvnhMgibreJKSpFg5yichZg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;section data-mpa-template=&quot;t&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;section data-mid=&quot;&quot; mpa-from-tpl=&quot;t&quot;&gt;&lt;img data-ratio=&quot;0.06206896551724138&quot; data-src=&quot;https://mmbiz.qpic.cn/mmbiz_png/soSiaOAXKsnPBA5zOd8RoLRU0xQhVBCibjzJfMPTJSJbh9kZPAMtyO8Dy5Kb5ueN36mYtfI5pfpibNtHvjqicmWl3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;290&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br mpa-from-tpl=&quot;t&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;你好，我是石头哥，来自十八县贫困农村，一路逆袭上&lt;/span&gt;&lt;span&gt;清华&lt;/span&gt;&lt;span&gt;（&lt;a target=&quot;_blank&quot; href=&quot;http://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&amp;amp;mid=2247492954&amp;amp;idx=1&amp;amp;sn=b487e0164a11e6753affc8de19c92647&amp;amp;chksm=eb44e4bedc336da843f9b0a3d9b6295727e025018b039dc654ac92672e85032307d769269ea7&amp;amp;scene=21#wechat_redirect&quot; textvalue=&quot;点击蓝字查看我的逆袭之路&quot; data-itemshowtype=&quot;0&quot; tab=&quot;innerlink&quot; data-linktype=&quot;2&quot;&gt;点击蓝字查看我的逆袭之路&lt;/a&gt;），目前在BAT某厂打工，是前大疆（无人机）技术主管，曾经也在创业公司待过，有着丰富的经验。&lt;/span&gt;&lt;/p&gt;&lt;section class=&quot;mp_profile_iframe_wrp&quot;&gt;&lt;mpprofile class=&quot;js_uneditable custom_select_card mp_profile_iframe&quot; data-pluginname=&quot;mpprofile&quot; data-id=&quot;MzI3OTUzMzcwNw==&quot; data-headimg=&quot;https://mmbiz.qpic.cn/mmbiz_png/ZMXDhhGnYibsGrjJaF5hvicrswVeQicFujw8LhrKnbvzEUPibAQINJDc60oDZ9S1XrQsrxQf6M8iakCatO0YA4jXbvA/0?wx_fmt=png&quot; data-nickname=&quot;程序猿石头&quot; data-alias=&quot;tangleithu&quot; data-signature=&quot;清华毕业的打工仔，分享计算机领域的技术、职场和大学生学习方法，涉及后端技术、互联网、计算机基础、编程技术、程序员职场、程序员面试等话题。欢迎关注。&quot;/&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;公众号【程序猿石头】（ID:tangleithu）会分享一些自己对技术、职场等经验和见解，欢迎关注。同时欢迎你加入互联网大厂内推群 &amp;amp; 技术交流群，一起学习、共同进步。&lt;span&gt;&lt;strong&gt;&lt;span&gt;关注后&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;回复 &lt;/span&gt;&lt;span&gt;“0”&lt;/span&gt;&lt;span&gt; 送&lt;/span&gt;&lt;span&gt;阿里技术大礼包&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;

                

                



                
                &lt;/div&gt;&lt;/div&gt;</content:encoded>
</item>
</channel></rss>